
LinebotIoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000564c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00802000  0000564c  000056e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000104  0080210a  0080210a  000057ea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000057ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005848  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000860  00000000  00000000  00005888  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fbb3  00000000  00000000  000060e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000054a2  00000000  00000000  00015c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000067c0  00000000  00000000  0001b13d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001adc  00000000  00000000  00021900  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000047ba  00000000  00000000  000233dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009e2c  00000000  00000000  00027b96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ad0  00000000  00000000  000319c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 95 01 	jmp	0x32a	; 0x32a <__ctors_end>
       4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
       8:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__vector_2>
       c:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__vector_3>
      10:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      14:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      18:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      1c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      20:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      24:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      28:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      2c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      30:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      34:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      38:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__vector_14>
      3c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      40:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__vector_16>
      44:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      48:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      4c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      50:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      54:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      58:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      5c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      60:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      64:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      68:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      6c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      70:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      74:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      78:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      7c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      80:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      84:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      88:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__vector_34>
      8c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      90:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      94:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      98:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      9c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      a0:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      a4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      a8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      ac:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__vector_43>
      b0:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__vector_44>
      b4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      b8:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__vector_46>
      bc:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      c0:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      c4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      c8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      cc:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      d0:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      d4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      d8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      dc:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      e0:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      e4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      e8:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__vector_58>
      ec:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      f0:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__vector_60>
      f4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      f8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      fc:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     100:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     104:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     108:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     10c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     110:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     114:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     118:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     11c:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_71>
     120:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     124:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     128:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     12c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     130:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     134:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     138:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     13c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     140:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     144:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     148:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     14c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     150:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     154:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     158:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     15c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     160:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     164:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     168:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     16c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     170:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     174:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     178:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     17c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     180:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     184:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     188:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     18c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     190:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     194:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     198:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     19c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1a0:	0c 94 b6 21 	jmp	0x436c	; 0x436c <__vector_104>
     1a4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1a8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1ac:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1b0:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1b4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1b8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1bc:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1c0:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1c4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1c8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1cc:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1d0:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1d4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1d8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1dc:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1e0:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1e4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1e8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1ec:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1f0:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1f4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1f8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 a3 1c 	jmp	0x3946	; 0x3946 <WorkerMotion>
     200:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <stdio_getchar>
     204:	0c 94 d1 20 	jmp	0x41a2	; 0x41a2 <WorkerMotorSpeed>
     208:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <prvIdleTask>
     20c:	0c 94 13 1f 	jmp	0x3e26	; 0x3e26 <WorkerMotorPos>
     210:	0c 94 ec 21 	jmp	0x43d8	; 0x43d8 <WorkerStartup>
     214:	0c 94 47 21 	jmp	0x428e	; 0x428e <workerSleepTask>
     218:	0c 94 cd 1b 	jmp	0x379a	; 0x379a <WorkerLineFollowerSpeed>
     21c:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <stdio_putchar>
     220:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <WorkerADC>
     224:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <WorkerLineFollowerDirect>

00000228 <__trampolines_end>:
     228:	6e 61       	ori	r22, 0x1E	; 30
     22a:	6e 00       	.word	0x006e	; ????

0000022c <__c.2332>:
     22c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     23c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     24c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     25c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     26c:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     27c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     28c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     29c:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2ac:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2bc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2cc:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2dc:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2ec:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2fc:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     30c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     31c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000032a <__ctors_end>:
     32a:	11 24       	eor	r1, r1
     32c:	1f be       	out	0x3f, r1	; 63
     32e:	cf ef       	ldi	r28, 0xFF	; 255
     330:	cd bf       	out	0x3d, r28	; 61
     332:	df e9       	ldi	r29, 0x9F	; 159
     334:	de bf       	out	0x3e, r29	; 62
     336:	00 e0       	ldi	r16, 0x00	; 0
     338:	0c bf       	out	0x3c, r16	; 60

0000033a <__do_copy_data>:
     33a:	11 e2       	ldi	r17, 0x21	; 33
     33c:	a0 e0       	ldi	r26, 0x00	; 0
     33e:	b0 e2       	ldi	r27, 0x20	; 32
     340:	ec e4       	ldi	r30, 0x4C	; 76
     342:	f6 e5       	ldi	r31, 0x56	; 86
     344:	00 e0       	ldi	r16, 0x00	; 0
     346:	0b bf       	out	0x3b, r16	; 59
     348:	02 c0       	rjmp	.+4      	; 0x34e <__do_copy_data+0x14>
     34a:	07 90       	elpm	r0, Z+
     34c:	0d 92       	st	X+, r0
     34e:	aa 30       	cpi	r26, 0x0A	; 10
     350:	b1 07       	cpc	r27, r17
     352:	d9 f7       	brne	.-10     	; 0x34a <__do_copy_data+0x10>

00000354 <__do_clear_bss>:
     354:	22 e2       	ldi	r18, 0x22	; 34
     356:	aa e0       	ldi	r26, 0x0A	; 10
     358:	b1 e2       	ldi	r27, 0x21	; 33
     35a:	01 c0       	rjmp	.+2      	; 0x35e <.do_clear_bss_start>

0000035c <.do_clear_bss_loop>:
     35c:	1d 92       	st	X+, r1

0000035e <.do_clear_bss_start>:
     35e:	ae 30       	cpi	r26, 0x0E	; 14
     360:	b2 07       	cpc	r27, r18
     362:	e1 f7       	brne	.-8      	; 0x35c <.do_clear_bss_loop>
     364:	0e 94 be 1a 	call	0x357c	; 0x357c <main>
     368:	0c 94 24 2b 	jmp	0x5648	; 0x5648 <_exit>

0000036c <__bad_interrupt>:
     36c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000370 <DriverAdcInit>:
SemaphoreHandle_t AdcBusySema;					//Semaphore is taken when an ADC acquisition is performed
SemaphoreHandle_t ConversionCompleteSema;	//Semaphore used to signal completion of an ADC conversion

void DriverAdcInit(void)
{
	ADCA.CTRLA=0b00000001; //Enable ADC
     370:	e0 e0       	ldi	r30, 0x00	; 0
     372:	f2 e0       	ldi	r31, 0x02	; 2
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	80 83       	st	Z, r24
	ADCA.CTRLB=0b00000110; //Manual mode, 12 bit right justified
     378:	96 e0       	ldi	r25, 0x06	; 6
     37a:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL=0b00000010; //1.00V internal reference, enable bandgap
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	92 83       	std	Z+2, r25	; 0x02
	ADCA.PRESCALER=0b00000011; //DIV32; 1MHz ADCClk. Should be lower than 1,8MHz per spec
     380:	93 e0       	ldi	r25, 0x03	; 3
     382:	94 83       	std	Z+4, r25	; 0x04
	ADCA.CH0.INTCTRL=0b01; //Lo pri int
     384:	82 a3       	std	Z+34, r24	; 0x22
	
	AdcBusySema=xSemaphoreCreateBinary();
     386:	43 e0       	ldi	r20, 0x03	; 3
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueGenericCreate>
     38e:	80 93 ef 21 	sts	0x21EF, r24	; 0x8021ef <AdcBusySema>
     392:	90 93 f0 21 	sts	0x21F0, r25	; 0x8021f0 <AdcBusySema+0x1>
	ConversionCompleteSema=xSemaphoreCreateBinary();
     396:	43 e0       	ldi	r20, 0x03	; 3
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueGenericCreate>
     3a0:	80 93 ed 21 	sts	0x21ED, r24	; 0x8021ed <ConversionCompleteSema>
     3a4:	90 93 ee 21 	sts	0x21EE, r25	; 0x8021ee <ConversionCompleteSema+0x1>
	xSemaphoreGive(AdcBusySema);		
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	80 91 ef 21 	lds	r24, 0x21EF	; 0x8021ef <AdcBusySema>
     3b6:	90 91 f0 21 	lds	r25, 0x21F0	; 0x8021f0 <AdcBusySema+0x1>
     3ba:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <xQueueGenericSend>

000003be <DriverAdcGetCh>:
}

int16_t DriverAdcGetCh(int8_t PinPos,int8_t PinNeg)
{
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	c8 2f       	mov	r28, r24
     3c4:	d6 2f       	mov	r29, r22
	int16_t Res;
	
	xSemaphoreTake(AdcBusySema,portMAX_DELAY);
     3c6:	6f ef       	ldi	r22, 0xFF	; 255
     3c8:	7f ef       	ldi	r23, 0xFF	; 255
     3ca:	80 91 ef 21 	lds	r24, 0x21EF	; 0x8021ef <AdcBusySema>
     3ce:	90 91 f0 21 	lds	r25, 0x21F0	; 0x8021f0 <AdcBusySema+0x1>
     3d2:	0e 94 4f 10 	call	0x209e	; 0x209e <xQueueSemaphoreTake>
	
	//Configure channels
	if (PinPos<16 && PinPos>=0)
     3d6:	c0 31       	cpi	r28, 0x10	; 16
     3d8:	28 f0       	brcs	.+10     	; 0x3e4 <DriverAdcGetCh+0x26>
		ADCA.CH0.MUXCTRL=PinPos<<3;
	else
		return 10000; //Invalid settings
     3da:	80 e1       	ldi	r24, 0x10	; 16
     3dc:	97 e2       	ldi	r25, 0x27	; 39
	
	xSemaphoreTake(ConversionCompleteSema,portMAX_DELAY);
	Res=ADCA.CH0.RES;
	xSemaphoreGive(AdcBusySema);
	return Res;
}
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret
	
	xSemaphoreTake(AdcBusySema,portMAX_DELAY);
	
	//Configure channels
	if (PinPos<16 && PinPos>=0)
		ADCA.CH0.MUXCTRL=PinPos<<3;
     3e4:	cc 0f       	add	r28, r28
     3e6:	cc 0f       	add	r28, r28
     3e8:	cc 0f       	add	r28, r28
     3ea:	c0 93 21 02 	sts	0x0221, r28	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
	else
		return 10000; //Invalid settings

	if (PinNeg==-1) 
     3ee:	df 3f       	cpi	r29, 0xFF	; 255
     3f0:	a1 f1       	breq	.+104    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		{			
		ADCA.CH0.CTRL=0b00000001; //Single ended mode, no gain
		ADCA.CTRLB&=~0b00010000;  //Unsigned mode		
		}		
	else if (PinNeg>=0 && PinNeg<4)
     3f2:	d4 30       	cpi	r29, 0x04	; 4
     3f4:	68 f5       	brcc	.+90     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		{			
		ADCA.CH0.CTRL=0b00000010; //Differential mode, no gain
     3f6:	82 e0       	ldi	r24, 0x02	; 2
		ADCA.CTRLB|=0b00010000;   //Signed mode
		ADCA.CH0.MUXCTRL|=PinNeg;
		}						
	else if (PinNeg>=4 && PinNeg<8)
		{
		ADCA.CH0.CTRL=0b00011111; //Differential mode, div 2
     3f8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
		ADCA.CTRLB|=0b00010000;
     3fc:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     400:	80 61       	ori	r24, 0x10	; 16
     402:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
		ADCA.CH0.MUXCTRL|=(PinNeg-4);	
     406:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
     40a:	d8 2b       	or	r29, r24
     40c:	d0 93 21 02 	sts	0x0221, r29	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
		}
	else return 10000; //Invalid settings
	
	//Start measurement
	ADCA.CH0.CTRL|=0b10000000; //Start conversion
     410:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
     414:	80 68       	ori	r24, 0x80	; 128
     416:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
	
	xSemaphoreTake(ConversionCompleteSema,portMAX_DELAY);
     41a:	6f ef       	ldi	r22, 0xFF	; 255
     41c:	7f ef       	ldi	r23, 0xFF	; 255
     41e:	80 91 ed 21 	lds	r24, 0x21ED	; 0x8021ed <ConversionCompleteSema>
     422:	90 91 ee 21 	lds	r25, 0x21EE	; 0x8021ee <ConversionCompleteSema+0x1>
     426:	0e 94 4f 10 	call	0x209e	; 0x209e <xQueueSemaphoreTake>
	Res=ADCA.CH0.RES;
     42a:	c0 91 24 02 	lds	r28, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     42e:	d0 91 25 02 	lds	r29, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
	xSemaphoreGive(AdcBusySema);
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	80 91 ef 21 	lds	r24, 0x21EF	; 0x8021ef <AdcBusySema>
     440:	90 91 f0 21 	lds	r25, 0x21F0	; 0x8021f0 <AdcBusySema+0x1>
     444:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xQueueGenericSend>
	return Res;
     448:	ce 01       	movw	r24, r28
}
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret
		{			
		ADCA.CH0.CTRL=0b00000010; //Differential mode, no gain
		ADCA.CTRLB|=0b00010000;   //Signed mode
		ADCA.CH0.MUXCTRL|=PinNeg;
		}						
	else if (PinNeg>=4 && PinNeg<8)
     450:	d4 50       	subi	r29, 0x04	; 4
     452:	d4 30       	cpi	r29, 0x04	; 4
     454:	10 f6       	brcc	.-124    	; 0x3da <DriverAdcGetCh+0x1c>
		{
		ADCA.CH0.CTRL=0b00011111; //Differential mode, div 2
     456:	8f e1       	ldi	r24, 0x1F	; 31
     458:	cf cf       	rjmp	.-98     	; 0x3f8 <DriverAdcGetCh+0x3a>
	else
		return 10000; //Invalid settings

	if (PinNeg==-1) 
		{			
		ADCA.CH0.CTRL=0b00000001; //Single ended mode, no gain
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
		ADCA.CTRLB&=~0b00010000;  //Unsigned mode		
     460:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     464:	8f 7e       	andi	r24, 0xEF	; 239
     466:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     46a:	d2 cf       	rjmp	.-92     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

0000046c <__vector_71>:
	xSemaphoreGive(AdcBusySema);
	return Res;
}

ISR(ADCA_CH0_vect)
{
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
     476:	0b b6       	in	r0, 0x3b	; 59
     478:	0f 92       	push	r0
     47a:	2f 93       	push	r18
     47c:	3f 93       	push	r19
     47e:	4f 93       	push	r20
     480:	5f 93       	push	r21
     482:	6f 93       	push	r22
     484:	7f 93       	push	r23
     486:	8f 93       	push	r24
     488:	9f 93       	push	r25
     48a:	af 93       	push	r26
     48c:	bf 93       	push	r27
     48e:	ef 93       	push	r30
     490:	ff 93       	push	r31
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	1f 92       	push	r1
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
     49c:	19 82       	std	Y+1, r1	; 0x01
	xSemaphoreGiveFromISR(ConversionCompleteSema,&xHigherPriorityTaskWoken);
     49e:	be 01       	movw	r22, r28
     4a0:	6f 5f       	subi	r22, 0xFF	; 255
     4a2:	7f 4f       	sbci	r23, 0xFF	; 255
     4a4:	80 91 ed 21 	lds	r24, 0x21ED	; 0x8021ed <ConversionCompleteSema>
     4a8:	90 91 ee 21 	lds	r25, 0x21EE	; 0x8021ee <ConversionCompleteSema+0x1>
     4ac:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	81 11       	cpse	r24, r1
     4b4:	0e 94 ae 0b 	call	0x175c	; 0x175c <vPortYieldISR>
     4b8:	0f 90       	pop	r0
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	ff 91       	pop	r31
     4c0:	ef 91       	pop	r30
     4c2:	bf 91       	pop	r27
     4c4:	af 91       	pop	r26
     4c6:	9f 91       	pop	r25
     4c8:	8f 91       	pop	r24
     4ca:	7f 91       	pop	r23
     4cc:	6f 91       	pop	r22
     4ce:	5f 91       	pop	r21
     4d0:	4f 91       	pop	r20
     4d2:	3f 91       	pop	r19
     4d4:	2f 91       	pop	r18
     4d6:	0f 90       	pop	r0
     4d8:	0b be       	out	0x3b, r0	; 59
     4da:	0f 90       	pop	r0
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	0f 90       	pop	r0
     4e0:	1f 90       	pop	r1
     4e2:	18 95       	reti

000004e4 <DriverAdps9960Init>:

#define REG_ID 0x92
#define ID 0xAB

void DriverAdps9960Init(void)
{
     4e4:	0f 93       	push	r16
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	1f 92       	push	r1
     4ec:	1f 92       	push	r1
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
	uint8_t res;
	uint8_t Buffer[2];
	Buffer[0]=REG_ENABLE;
     4f2:	80 e8       	ldi	r24, 0x80	; 128
     4f4:	89 83       	std	Y+1, r24	; 0x01
	Buffer[1]=(1<<REG_ENABLE_PON);
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	8a 83       	std	Y+2, r24	; 0x02
	res=TWIMWrite(ADPS9960_ADDR,Buffer,2);
     4fa:	42 e0       	ldi	r20, 0x02	; 2
     4fc:	be 01       	movw	r22, r28
     4fe:	6f 5f       	subi	r22, 0xFF	; 255
     500:	7f 4f       	sbci	r23, 0xFF	; 255
     502:	89 e3       	ldi	r24, 0x39	; 57
     504:	0e 94 7b 07 	call	0xef6	; 0xef6 <TWIMWrite>
	//printf ("TwimWrite:%d\r\n",res);
	
	Buffer[0]=REG_ID;
     508:	82 e9       	ldi	r24, 0x92	; 146
     50a:	89 83       	std	Y+1, r24	; 0x01
	res=TWIMWriteRead(ADPS9960_ADDR,Buffer,1,Buffer,1);
     50c:	01 e0       	ldi	r16, 0x01	; 1
     50e:	9e 01       	movw	r18, r28
     510:	2f 5f       	subi	r18, 0xFF	; 255
     512:	3f 4f       	sbci	r19, 0xFF	; 255
     514:	41 e0       	ldi	r20, 0x01	; 1
     516:	b9 01       	movw	r22, r18
     518:	89 e3       	ldi	r24, 0x39	; 57
     51a:	0e 94 02 07 	call	0xe04	; 0xe04 <TWIMWriteRead>
	if (Buffer[0]!=ID)
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	8b 3a       	cpi	r24, 0xAB	; 171
     522:	11 f0       	breq	.+4      	; 0x528 <DriverAdps9960Init+0x44>
		//printf ("ADPS9960 ID readback fail: %d read\r\n",Buffer[0]);

	Buffer[0]=REG_ATIME;
     524:	81 e8       	ldi	r24, 0x81	; 129
     526:	89 83       	std	Y+1, r24	; 0x01
	Buffer[1]=219; //100ms integration time
     528:	8b ed       	ldi	r24, 0xDB	; 219
     52a:	8a 83       	std	Y+2, r24	; 0x02
	res=TWIMWrite(ADPS9960_ADDR,Buffer,2);
     52c:	42 e0       	ldi	r20, 0x02	; 2
     52e:	be 01       	movw	r22, r28
     530:	6f 5f       	subi	r22, 0xFF	; 255
     532:	7f 4f       	sbci	r23, 0xFF	; 255
     534:	89 e3       	ldi	r24, 0x39	; 57
     536:	0e 94 7b 07 	call	0xef6	; 0xef6 <TWIMWrite>

	Buffer[0]=REG_CTRL1;
     53a:	8f e8       	ldi	r24, 0x8F	; 143
     53c:	89 83       	std	Y+1, r24	; 0x01
	Buffer[1]=0b11<<REG_CTRL1_AGAIN; //max gain
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	8a 83       	std	Y+2, r24	; 0x02
	res=TWIMWrite(ADPS9960_ADDR,Buffer,2);
     542:	42 e0       	ldi	r20, 0x02	; 2
     544:	be 01       	movw	r22, r28
     546:	6f 5f       	subi	r22, 0xFF	; 255
     548:	7f 4f       	sbci	r23, 0xFF	; 255
     54a:	89 e3       	ldi	r24, 0x39	; 57
     54c:	0e 94 7b 07 	call	0xef6	; 0xef6 <TWIMWrite>

}
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	0f 91       	pop	r16
     55a:	08 95       	ret

0000055c <DriverCursorstickInit>:
	BaseType_t res;
	res=xQueueReceive(CursorstickQueue,&ButtonState,BlockTime);
	if (res==pdTRUE) return ButtonState;
	else return 0;

}
     55c:	e0 e2       	ldi	r30, 0x20	; 32
     55e:	f6 e0       	ldi	r31, 0x06	; 6
     560:	98 ef       	ldi	r25, 0xF8	; 248
     562:	92 83       	std	Z+2, r25	; 0x02
     564:	89 e5       	ldi	r24, 0x59	; 89
     566:	83 8b       	std	Z+19, r24	; 0x13
     568:	84 8b       	std	Z+20, r24	; 0x14
     56a:	85 8b       	std	Z+21, r24	; 0x15
     56c:	86 8b       	std	Z+22, r24	; 0x16
     56e:	87 8b       	std	Z+23, r24	; 0x17
     570:	92 87       	std	Z+10, r25	; 0x0a
     572:	83 e0       	ldi	r24, 0x03	; 3
     574:	81 87       	std	Z+9, r24	; 0x09
     576:	40 e0       	ldi	r20, 0x00	; 0
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	8a e0       	ldi	r24, 0x0A	; 10
     57c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueGenericCreate>
     580:	80 93 0a 21 	sts	0x210A, r24	; 0x80210a <__data_end>
     584:	90 93 0b 21 	sts	0x210B, r25	; 0x80210b <__data_end+0x1>
     588:	08 95       	ret

0000058a <__vector_34>:


ISR (PORTB_INT0_vect)
{
     58a:	1f 92       	push	r1
     58c:	0f 92       	push	r0
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	0f 92       	push	r0
     592:	11 24       	eor	r1, r1
     594:	0b b6       	in	r0, 0x3b	; 59
     596:	0f 92       	push	r0
     598:	2f 93       	push	r18
     59a:	3f 93       	push	r19
     59c:	4f 93       	push	r20
     59e:	5f 93       	push	r21
     5a0:	6f 93       	push	r22
     5a2:	7f 93       	push	r23
     5a4:	8f 93       	push	r24
     5a6:	9f 93       	push	r25
     5a8:	af 93       	push	r26
     5aa:	bf 93       	push	r27
     5ac:	ef 93       	push	r30
     5ae:	ff 93       	push	r31
	if (GetSleepFlag()) {
     5b0:	0e 94 b3 21 	call	0x4366	; 0x4366 <GetSleepFlag>
     5b4:	88 23       	and	r24, r24
     5b6:	61 f0       	breq	.+24     	; 0x5d0 <__vector_34+0x46>
		PMIC.CTRL |= 0b00000111;
     5b8:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     5bc:	87 60       	ori	r24, 0x07	; 7
     5be:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		PORTF.DIRSET = 0b00111111;
     5c2:	8f e3       	ldi	r24, 0x3F	; 63
     5c4:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
		DriverPowerVccAuxSet(1);
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 be 06 	call	0xd7c	; 0xd7c <DriverPowerVccAuxSet>
	}
	//ClearSleepFlag();
}
     5d0:	ff 91       	pop	r31
     5d2:	ef 91       	pop	r30
     5d4:	bf 91       	pop	r27
     5d6:	af 91       	pop	r26
     5d8:	9f 91       	pop	r25
     5da:	8f 91       	pop	r24
     5dc:	7f 91       	pop	r23
     5de:	6f 91       	pop	r22
     5e0:	5f 91       	pop	r21
     5e2:	4f 91       	pop	r20
     5e4:	3f 91       	pop	r19
     5e6:	2f 91       	pop	r18
     5e8:	0f 90       	pop	r0
     5ea:	0b be       	out	0x3b, r0	; 59
     5ec:	0f 90       	pop	r0
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	0f 90       	pop	r0
     5f2:	1f 90       	pop	r1
     5f4:	18 95       	reti

000005f6 <DbgPrint>:
#include "DriverDbgUSART.h"


void DbgPrint(char *Text)
{
     5f6:	dc 01       	movw	r26, r24
}

void DbgPrintn(char *Text,int n)
{
	static int i;
	i=0;
     5f8:	10 92 0f 21 	sts	0x210F, r1	; 0x80210f <i.3624>
     5fc:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <i.3624+0x1>
	while (*Text!=0 && (i<n || n==0))
     600:	9c 91       	ld	r25, X
     602:	99 23       	and	r25, r25
     604:	b1 f0       	breq	.+44     	; 0x632 <DbgPrint+0x3c>
     606:	fd 01       	movw	r30, r26
     608:	31 96       	adiw	r30, 0x01	; 1
	{
		USART.DATA = *Text;
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
     60a:	80 e4       	ldi	r24, 0x40	; 64
{
	static int i;
	i=0;
	while (*Text!=0 && (i<n || n==0))
	{
		USART.DATA = *Text;
     60c:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
		while (!(USART.STATUS & 0b01000000));
     610:	90 91 a1 0a 	lds	r25, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     614:	96 ff       	sbrs	r25, 6
     616:	fc cf       	rjmp	.-8      	; 0x610 <DbgPrint+0x1a>
		USART.STATUS=0b01000000;
     618:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     61c:	9f 01       	movw	r18, r30
     61e:	2a 1b       	sub	r18, r26
     620:	3b 0b       	sbc	r19, r27

void DbgPrintn(char *Text,int n)
{
	static int i;
	i=0;
	while (*Text!=0 && (i<n || n==0))
     622:	91 91       	ld	r25, Z+
     624:	91 11       	cpse	r25, r1
     626:	f2 cf       	rjmp	.-28     	; 0x60c <DbgPrint+0x16>
     628:	20 93 0f 21 	sts	0x210F, r18	; 0x80210f <i.3624>
     62c:	30 93 10 21 	sts	0x2110, r19	; 0x802110 <i.3624+0x1>
     630:	08 95       	ret
     632:	08 95       	ret

00000634 <DbgPrintn>:
{
	DbgPrintn(Text,0);	
}

void DbgPrintn(char *Text,int n)
{
     634:	fc 01       	movw	r30, r24
	static int i;
	i=0;
     636:	10 92 0f 21 	sts	0x210F, r1	; 0x80210f <i.3624>
     63a:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <i.3624+0x1>
	while (*Text!=0 && (i<n || n==0))
     63e:	90 81       	ld	r25, Z
     640:	99 23       	and	r25, r25
     642:	e1 f0       	breq	.+56     	; 0x67c <DbgPrintn+0x48>
     644:	31 96       	adiw	r30, 0x01	; 1
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
	{
		USART.DATA = *Text;
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
     64a:	80 e4       	ldi	r24, 0x40	; 64

void DbgPrintn(char *Text,int n)
{
	static int i;
	i=0;
	while (*Text!=0 && (i<n || n==0))
     64c:	26 17       	cp	r18, r22
     64e:	37 07       	cpc	r19, r23
     650:	1c f0       	brlt	.+6      	; 0x658 <DbgPrintn+0x24>
     652:	61 15       	cp	r22, r1
     654:	71 05       	cpc	r23, r1
     656:	69 f4       	brne	.+26     	; 0x672 <DbgPrintn+0x3e>
	{
		USART.DATA = *Text;
     658:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
		while (!(USART.STATUS & 0b01000000));
     65c:	90 91 a1 0a 	lds	r25, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     660:	96 ff       	sbrs	r25, 6
     662:	fc cf       	rjmp	.-8      	; 0x65c <DbgPrintn+0x28>
		USART.STATUS=0b01000000;
     664:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
		Text++;
		i++;
     668:	2f 5f       	subi	r18, 0xFF	; 255
     66a:	3f 4f       	sbci	r19, 0xFF	; 255

void DbgPrintn(char *Text,int n)
{
	static int i;
	i=0;
	while (*Text!=0 && (i<n || n==0))
     66c:	91 91       	ld	r25, Z+
     66e:	91 11       	cpse	r25, r1
     670:	ed cf       	rjmp	.-38     	; 0x64c <DbgPrintn+0x18>
     672:	20 93 0f 21 	sts	0x210F, r18	; 0x80210f <i.3624>
     676:	30 93 10 21 	sts	0x2110, r19	; 0x802110 <i.3624+0x1>
     67a:	08 95       	ret
     67c:	08 95       	ret

0000067e <DbgPrintInt>:
		i++;
	}
}

void DbgPrintInt(uint16_t Data)
{
     67e:	cf 92       	push	r12
     680:	df 92       	push	r13
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	7c 01       	movw	r14, r24
	//Use statics to minimize stack usage
	static int i;
	static uint8_t pf;
	
	i=10000;
     690:	80 e1       	ldi	r24, 0x10	; 16
     692:	97 e2       	ldi	r25, 0x27	; 39
     694:	80 93 0d 21 	sts	0x210D, r24	; 0x80210d <i.3634>
     698:	90 93 0e 21 	sts	0x210E, r25	; 0x80210e <i.3634+0x1>
	pf=0;
     69c:	10 92 0c 21 	sts	0x210C, r1	; 0x80210c <pf.3635>
     6a0:	c5 e0       	ldi	r28, 0x05	; 5
     6a2:	d0 e0       	ldi	r29, 0x00	; 0
     6a4:	c1 2c       	mov	r12, r1
     6a6:	e0 e1       	ldi	r30, 0x10	; 16
     6a8:	f7 e2       	ldi	r31, 0x27	; 39
	{
		if (((Data/i)%10)!=0 || pf) //Trim leading 0's
		{
			USART.DATA = '0'+ ((Data/i)%10);
			while (!(USART.STATUS & 0b01000000));
			USART.STATUS=0b01000000;
     6aa:	a0 e4       	ldi	r26, 0x40	; 64
     6ac:	da 2e       	mov	r13, r26
			pf=1;		
		}
		i/=10;
     6ae:	0a e0       	ldi	r16, 0x0A	; 10
     6b0:	10 e0       	ldi	r17, 0x00	; 0
	
	i=10000;
	pf=0;
	while (i>0)
	{
		if (((Data/i)%10)!=0 || pf) //Trim leading 0's
     6b2:	c7 01       	movw	r24, r14
     6b4:	bf 01       	movw	r22, r30
     6b6:	0e 94 20 28 	call	0x5040	; 0x5040 <__udivmodhi4>
     6ba:	ab 01       	movw	r20, r22
     6bc:	9b 01       	movw	r18, r22
     6be:	ad ec       	ldi	r26, 0xCD	; 205
     6c0:	bc ec       	ldi	r27, 0xCC	; 204
     6c2:	0e 94 48 28 	call	0x5090	; 0x5090 <__umulhisi3>
     6c6:	96 95       	lsr	r25
     6c8:	87 95       	ror	r24
     6ca:	96 95       	lsr	r25
     6cc:	87 95       	ror	r24
     6ce:	96 95       	lsr	r25
     6d0:	87 95       	ror	r24
     6d2:	9c 01       	movw	r18, r24
     6d4:	22 0f       	add	r18, r18
     6d6:	33 1f       	adc	r19, r19
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	88 0f       	add	r24, r24
     6e2:	99 1f       	adc	r25, r25
     6e4:	82 0f       	add	r24, r18
     6e6:	93 1f       	adc	r25, r19
     6e8:	9a 01       	movw	r18, r20
     6ea:	28 1b       	sub	r18, r24
     6ec:	39 0b       	sbc	r19, r25
     6ee:	c9 01       	movw	r24, r18
     6f0:	00 97       	sbiw	r24, 0x00	; 0
     6f2:	11 f4       	brne	.+4      	; 0x6f8 <DbgPrintInt+0x7a>
     6f4:	cc 20       	and	r12, r12
     6f6:	59 f0       	breq	.+22     	; 0x70e <DbgPrintInt+0x90>
		{
			USART.DATA = '0'+ ((Data/i)%10);
     6f8:	80 5d       	subi	r24, 0xD0	; 208
     6fa:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
			while (!(USART.STATUS & 0b01000000));
     6fe:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     702:	86 ff       	sbrs	r24, 6
     704:	fc cf       	rjmp	.-8      	; 0x6fe <DbgPrintInt+0x80>
			USART.STATUS=0b01000000;
     706:	d0 92 a1 0a 	sts	0x0AA1, r13	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
			pf=1;		
     70a:	cc 24       	eor	r12, r12
     70c:	c3 94       	inc	r12
		}
		i/=10;
     70e:	cf 01       	movw	r24, r30
     710:	b8 01       	movw	r22, r16
     712:	0e 94 34 28 	call	0x5068	; 0x5068 <__divmodhi4>
     716:	fb 01       	movw	r30, r22
     718:	21 97       	sbiw	r28, 0x01	; 1
	static int i;
	static uint8_t pf;
	
	i=10000;
	pf=0;
	while (i>0)
     71a:	59 f6       	brne	.-106    	; 0x6b2 <DbgPrintInt+0x34>
     71c:	c0 92 0c 21 	sts	0x210C, r12	; 0x80210c <pf.3635>
     720:	60 93 0d 21 	sts	0x210D, r22	; 0x80210d <i.3634>
     724:	70 93 0e 21 	sts	0x210E, r23	; 0x80210e <i.3634+0x1>
			USART.STATUS=0b01000000;
			pf=1;		
		}
		i/=10;
	}
}
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	ff 90       	pop	r15
     732:	ef 90       	pop	r14
     734:	df 90       	pop	r13
     736:	cf 90       	pop	r12
     738:	08 95       	ret

0000073a <DriverLedInit>:
}

void DriverLedWrite(uint8_t LedData)
{
	PORTB.OUT=(PORTB.OUT & 0b11111000) | (LedData & 0b00000111);
	PORTA.OUT=(PORTA.OUT & 0b01111111) | ((LedData & 0b00001000) << 4); 
     73a:	e0 e2       	ldi	r30, 0x20	; 32
     73c:	f6 e0       	ldi	r31, 0x06	; 6
     73e:	87 e0       	ldi	r24, 0x07	; 7
     740:	81 83       	std	Z+1, r24	; 0x01
     742:	80 e4       	ldi	r24, 0x40	; 64
     744:	80 8b       	std	Z+16, r24	; 0x10
     746:	81 8b       	std	Z+17, r24	; 0x11
     748:	82 8b       	std	Z+18, r24	; 0x12
     74a:	e0 e0       	ldi	r30, 0x00	; 0
     74c:	f6 e0       	ldi	r31, 0x06	; 6
     74e:	90 e8       	ldi	r25, 0x80	; 128
     750:	91 83       	std	Z+1, r25	; 0x01
     752:	87 8b       	std	Z+23, r24	; 0x17
     754:	08 95       	ret

00000756 <DriverLedSet>:
}

void DriverLedSet(uint8_t LedData)
{
	PORTB.OUT=PORTB.OUT | (LedData & 0b00000111);
     756:	e0 e2       	ldi	r30, 0x20	; 32
     758:	f6 e0       	ldi	r31, 0x06	; 6
     75a:	94 81       	ldd	r25, Z+4	; 0x04
     75c:	28 2f       	mov	r18, r24
     75e:	27 70       	andi	r18, 0x07	; 7
     760:	92 2b       	or	r25, r18
     762:	94 83       	std	Z+4, r25	; 0x04
	PORTA.OUT=PORTA.OUT | ((LedData & 0b00001000) << 4);
     764:	e0 e0       	ldi	r30, 0x00	; 0
     766:	f6 e0       	ldi	r31, 0x06	; 6
     768:	94 81       	ldd	r25, Z+4	; 0x04
     76a:	88 70       	andi	r24, 0x08	; 8
     76c:	82 95       	swap	r24
     76e:	80 7f       	andi	r24, 0xF0	; 240
     770:	89 2b       	or	r24, r25
     772:	84 83       	std	Z+4, r24	; 0x04
     774:	08 95       	ret

00000776 <DriverLedClear>:
}

void DriverLedClear(uint8_t LedData)
{
	PORTB.OUT=PORTB.OUT & ~(LedData & 0b00000111);
     776:	e0 e2       	ldi	r30, 0x20	; 32
     778:	f6 e0       	ldi	r31, 0x06	; 6
     77a:	24 81       	ldd	r18, Z+4	; 0x04
     77c:	98 2f       	mov	r25, r24
     77e:	97 70       	andi	r25, 0x07	; 7
     780:	90 95       	com	r25
     782:	92 23       	and	r25, r18
     784:	94 83       	std	Z+4, r25	; 0x04
	PORTA.OUT=PORTA.OUT & ~((LedData & 0b00001000) << 4);
     786:	e0 e0       	ldi	r30, 0x00	; 0
     788:	f6 e0       	ldi	r31, 0x06	; 6
     78a:	94 81       	ldd	r25, Z+4	; 0x04
     78c:	88 70       	andi	r24, 0x08	; 8
     78e:	82 95       	swap	r24
     790:	80 7f       	andi	r24, 0xF0	; 240
     792:	80 95       	com	r24
     794:	89 23       	and	r24, r25
     796:	84 83       	std	Z+4, r24	; 0x04
     798:	08 95       	ret

0000079a <DriverMotorInit>:
{
	EncoderEventStruct Event={0,NONE};
	int res;
	res=xQueueReceive(EncoderEventQueue,&Event,0);
	return Event;
}
     79a:	e0 ea       	ldi	r30, 0xA0	; 160
     79c:	f6 e0       	ldi	r31, 0x06	; 6
     79e:	8f e1       	ldi	r24, 0x1F	; 31
     7a0:	81 83       	std	Z+1, r24	; 0x01
     7a2:	80 e4       	ldi	r24, 0x40	; 64
     7a4:	84 8b       	std	Z+20, r24	; 0x14
     7a6:	20 e1       	ldi	r18, 0x10	; 16
     7a8:	25 83       	std	Z+5, r18	; 0x05
     7aa:	e0 e0       	ldi	r30, 0x00	; 0
     7ac:	fb e0       	ldi	r31, 0x0B	; 11
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	90 83       	st	Z, r25
     7b2:	93 ef       	ldi	r25, 0xF3	; 243
     7b4:	91 83       	std	Z+1, r25	; 0x01
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	50 e1       	ldi	r21, 0x10	; 16
     7ba:	46 a3       	std	Z+38, r20	; 0x26
     7bc:	57 a3       	std	Z+39, r21	; 0x27
     7be:	e0 e4       	ldi	r30, 0x40	; 64
     7c0:	f6 e0       	ldi	r31, 0x06	; 6
     7c2:	90 ec       	ldi	r25, 0xC0	; 192
     7c4:	92 83       	std	Z+2, r25	; 0x02
     7c6:	86 8b       	std	Z+22, r24	; 0x16
     7c8:	87 8b       	std	Z+23, r24	; 0x17
     7ca:	82 87       	std	Z+10, r24	; 0x0a
     7cc:	90 e8       	ldi	r25, 0x80	; 128
     7ce:	93 87       	std	Z+11, r25	; 0x0b
     7d0:	95 e0       	ldi	r25, 0x05	; 5
     7d2:	91 87       	std	Z+9, r25	; 0x09
     7d4:	e0 e8       	ldi	r30, 0x80	; 128
     7d6:	f6 e0       	ldi	r31, 0x06	; 6
     7d8:	30 e3       	ldi	r19, 0x30	; 48
     7da:	32 83       	std	Z+2, r19	; 0x02
     7dc:	84 8b       	std	Z+20, r24	; 0x14
     7de:	85 8b       	std	Z+21, r24	; 0x15
     7e0:	22 87       	std	Z+10, r18	; 0x0a
     7e2:	80 e2       	ldi	r24, 0x20	; 32
     7e4:	83 87       	std	Z+11, r24	; 0x0b
     7e6:	91 87       	std	Z+9, r25	; 0x09
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	65 e0       	ldi	r22, 0x05	; 5
     7ec:	84 e1       	ldi	r24, 0x14	; 20
     7ee:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueGenericCreate>
     7f2:	80 93 f5 21 	sts	0x21F5, r24	; 0x8021f5 <EncoderEventQueue>
     7f6:	90 93 f6 21 	sts	0x21F6, r25	; 0x8021f6 <EncoderEventQueue+0x1>
     7fa:	08 95       	ret

000007fc <DriverMotorSet>:
     7fc:	20 e1       	ldi	r18, 0x10	; 16
     7fe:	00 97       	sbiw	r24, 0x00	; 0
     800:	69 f5       	brne	.+90     	; 0x85c <DriverMotorSet+0x60>
     802:	61 15       	cp	r22, r1
     804:	71 05       	cpc	r23, r1
     806:	09 f4       	brne	.+2      	; 0x80a <DriverMotorSet+0xe>
     808:	57 c0       	rjmp	.+174    	; 0x8b8 <DriverMotorSet+0xbc>
     80a:	20 93 a6 06 	sts	0x06A6, r18	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     80e:	81 30       	cpi	r24, 0x01	; 1
     810:	20 ef       	ldi	r18, 0xF0	; 240
     812:	92 07       	cpc	r25, r18
     814:	0c f4       	brge	.+2      	; 0x818 <DriverMotorSet+0x1c>
     816:	57 c0       	rjmp	.+174    	; 0x8c6 <DriverMotorSet+0xca>
     818:	91 95       	neg	r25
     81a:	81 95       	neg	r24
     81c:	91 09       	sbc	r25, r1
     81e:	80 93 28 0b 	sts	0x0B28, r24	; 0x800b28 <__TEXT_REGION_LENGTH__+0x700b28>
     822:	90 93 29 0b 	sts	0x0B29, r25	; 0x800b29 <__TEXT_REGION_LENGTH__+0x700b29>
     826:	10 92 2a 0b 	sts	0x0B2A, r1	; 0x800b2a <__TEXT_REGION_LENGTH__+0x700b2a>
     82a:	10 92 2b 0b 	sts	0x0B2B, r1	; 0x800b2b <__TEXT_REGION_LENGTH__+0x700b2b>
     82e:	71 95       	neg	r23
     830:	61 95       	neg	r22
     832:	71 09       	sbc	r23, r1
     834:	16 16       	cp	r1, r22
     836:	17 06       	cpc	r1, r23
     838:	44 f1       	brlt	.+80     	; 0x88a <DriverMotorSet+0x8e>
     83a:	61 30       	cpi	r22, 0x01	; 1
     83c:	20 ef       	ldi	r18, 0xF0	; 240
     83e:	72 07       	cpc	r23, r18
     840:	0c f4       	brge	.+2      	; 0x844 <DriverMotorSet+0x48>
     842:	44 c0       	rjmp	.+136    	; 0x8cc <DriverMotorSet+0xd0>
     844:	71 95       	neg	r23
     846:	61 95       	neg	r22
     848:	71 09       	sbc	r23, r1
     84a:	60 93 2c 0b 	sts	0x0B2C, r22	; 0x800b2c <__TEXT_REGION_LENGTH__+0x700b2c>
     84e:	70 93 2d 0b 	sts	0x0B2D, r23	; 0x800b2d <__TEXT_REGION_LENGTH__+0x700b2d>
     852:	10 92 2e 0b 	sts	0x0B2E, r1	; 0x800b2e <__TEXT_REGION_LENGTH__+0x700b2e>
     856:	10 92 2f 0b 	sts	0x0B2F, r1	; 0x800b2f <__TEXT_REGION_LENGTH__+0x700b2f>
     85a:	08 95       	ret
     85c:	20 93 a6 06 	sts	0x06A6, r18	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     860:	18 16       	cp	r1, r24
     862:	19 06       	cpc	r1, r25
     864:	a4 f6       	brge	.-88     	; 0x80e <DriverMotorSet+0x12>
     866:	10 92 28 0b 	sts	0x0B28, r1	; 0x800b28 <__TEXT_REGION_LENGTH__+0x700b28>
     86a:	10 92 29 0b 	sts	0x0B29, r1	; 0x800b29 <__TEXT_REGION_LENGTH__+0x700b29>
     86e:	81 15       	cp	r24, r1
     870:	20 e1       	ldi	r18, 0x10	; 16
     872:	92 07       	cpc	r25, r18
     874:	f4 f4       	brge	.+60     	; 0x8b2 <DriverMotorSet+0xb6>
     876:	80 93 2a 0b 	sts	0x0B2A, r24	; 0x800b2a <__TEXT_REGION_LENGTH__+0x700b2a>
     87a:	90 93 2b 0b 	sts	0x0B2B, r25	; 0x800b2b <__TEXT_REGION_LENGTH__+0x700b2b>
     87e:	71 95       	neg	r23
     880:	61 95       	neg	r22
     882:	71 09       	sbc	r23, r1
     884:	16 16       	cp	r1, r22
     886:	17 06       	cpc	r1, r23
     888:	c4 f6       	brge	.-80     	; 0x83a <DriverMotorSet+0x3e>
     88a:	10 92 2c 0b 	sts	0x0B2C, r1	; 0x800b2c <__TEXT_REGION_LENGTH__+0x700b2c>
     88e:	10 92 2d 0b 	sts	0x0B2D, r1	; 0x800b2d <__TEXT_REGION_LENGTH__+0x700b2d>
     892:	61 15       	cp	r22, r1
     894:	80 e1       	ldi	r24, 0x10	; 16
     896:	78 07       	cpc	r23, r24
     898:	2c f4       	brge	.+10     	; 0x8a4 <DriverMotorSet+0xa8>
     89a:	60 93 2e 0b 	sts	0x0B2E, r22	; 0x800b2e <__TEXT_REGION_LENGTH__+0x700b2e>
     89e:	70 93 2f 0b 	sts	0x0B2F, r23	; 0x800b2f <__TEXT_REGION_LENGTH__+0x700b2f>
     8a2:	08 95       	ret
     8a4:	6f ef       	ldi	r22, 0xFF	; 255
     8a6:	7f e0       	ldi	r23, 0x0F	; 15
     8a8:	60 93 2e 0b 	sts	0x0B2E, r22	; 0x800b2e <__TEXT_REGION_LENGTH__+0x700b2e>
     8ac:	70 93 2f 0b 	sts	0x0B2F, r23	; 0x800b2f <__TEXT_REGION_LENGTH__+0x700b2f>
     8b0:	08 95       	ret
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
     8b4:	9f e0       	ldi	r25, 0x0F	; 15
     8b6:	df cf       	rjmp	.-66     	; 0x876 <DriverMotorSet+0x7a>
     8b8:	20 93 a5 06 	sts	0x06A5, r18	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     8bc:	81 30       	cpi	r24, 0x01	; 1
     8be:	20 ef       	ldi	r18, 0xF0	; 240
     8c0:	92 07       	cpc	r25, r18
     8c2:	0c f0       	brlt	.+2      	; 0x8c6 <DriverMotorSet+0xca>
     8c4:	a9 cf       	rjmp	.-174    	; 0x818 <DriverMotorSet+0x1c>
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	90 ef       	ldi	r25, 0xF0	; 240
     8ca:	a6 cf       	rjmp	.-180    	; 0x818 <DriverMotorSet+0x1c>
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	70 ef       	ldi	r23, 0xF0	; 240
     8d0:	b9 cf       	rjmp	.-142    	; 0x844 <DriverMotorSet+0x48>

000008d2 <DriverMotorGetEncoder>:
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	0f 92       	push	r0
     8d8:	40 91 f1 21 	lds	r20, 0x21F1	; 0x8021f1 <Cnt1>
     8dc:	50 91 f2 21 	lds	r21, 0x21F2	; 0x8021f2 <Cnt1+0x1>
     8e0:	20 91 f3 21 	lds	r18, 0x21F3	; 0x8021f3 <Cnt2>
     8e4:	30 91 f4 21 	lds	r19, 0x21F4	; 0x8021f4 <Cnt2+0x1>
     8e8:	0f 90       	pop	r0
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	ba 01       	movw	r22, r20
     8ee:	c9 01       	movw	r24, r18
     8f0:	08 95       	ret

000008f2 <__vector_2>:

//Encoder 1 ISR's
ISR (PORTC_INT0_vect)
{	
     8f2:	1f 92       	push	r1
     8f4:	0f 92       	push	r0
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	0f 92       	push	r0
     8fa:	11 24       	eor	r1, r1
     8fc:	0b b6       	in	r0, 0x3b	; 59
     8fe:	0f 92       	push	r0
     900:	1f 93       	push	r17
     902:	2f 93       	push	r18
     904:	3f 93       	push	r19
     906:	4f 93       	push	r20
     908:	5f 93       	push	r21
     90a:	6f 93       	push	r22
     90c:	7f 93       	push	r23
     90e:	8f 93       	push	r24
     910:	9f 93       	push	r25
     912:	af 93       	push	r26
     914:	bf 93       	push	r27
     916:	ef 93       	push	r30
     918:	ff 93       	push	r31
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	00 d0       	rcall	.+0      	; 0x920 <__vector_2+0x2e>
     920:	00 d0       	rcall	.+0      	; 0x922 <__vector_2+0x30>
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
	static uint32_t LastTriggerTime=0;
	uint8_t Data,l0,l1;
	EncoderEventStruct Event;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
     926:	1e 82       	std	Y+6, r1	; 0x06
	Event.Time=portGET_RUN_TIME_COUNTER_VALUE();
     928:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     92c:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     930:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <StatsTimer>
     934:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <StatsTimer+0x1>
     938:	a0 91 fd 21 	lds	r26, 0x21FD	; 0x8021fd <StatsTimer+0x2>
     93c:	b0 91 fe 21 	lds	r27, 0x21FE	; 0x8021fe <StatsTimer+0x3>
     940:	82 0f       	add	r24, r18
     942:	93 1f       	adc	r25, r19
     944:	a1 1d       	adc	r26, r1
     946:	b1 1d       	adc	r27, r1
     948:	89 83       	std	Y+1, r24	; 0x01
     94a:	9a 83       	std	Y+2, r25	; 0x02
     94c:	ab 83       	std	Y+3, r26	; 0x03
     94e:	bc 83       	std	Y+4, r27	; 0x04
	#ifdef ENCODER_FILTER_ENABLE
		if ((Event.Time-LastTriggerTime)<ENCODER_FILTER_TIME) return;
	#endif

	Data=PORTC.IN;
     950:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
	l0=Data & (1<<6);
	l1=Data & (1<<7);
     954:	18 2f       	mov	r17, r24
     956:	10 78       	andi	r17, 0x80	; 128
		
	//Process events
	if (l0) 
     958:	86 ff       	sbrs	r24, 6
     95a:	37 c0       	rjmp	.+110    	; 0x9ca <__vector_2+0xd8>
		Event.Event=RISING_1A;
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	8d 83       	std	Y+5, r24	; 0x05
	else
		Event.Event=FALLING_1A;

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	ae 01       	movw	r20, r28
     964:	4a 5f       	subi	r20, 0xFA	; 250
     966:	5f 4f       	sbci	r21, 0xFF	; 255
     968:	be 01       	movw	r22, r28
     96a:	6f 5f       	subi	r22, 0xFF	; 255
     96c:	7f 4f       	sbci	r23, 0xFF	; 255
     96e:	80 91 f5 21 	lds	r24, 0x21F5	; 0x8021f5 <EncoderEventQueue>
     972:	90 91 f6 21 	lds	r25, 0x21F6	; 0x8021f6 <EncoderEventQueue+0x1>
     976:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <xQueueGenericSendFromISR>
	//Process counter
	if ( l0 && !l1) Cnt1--; //Rising edge on Line0, Line1 low
     97a:	11 23       	and	r17, r17
     97c:	b9 f1       	breq	.+110    	; 0x9ec <__vector_2+0xfa>
	if ( l0 &&  l1) Cnt1++; //Rising edge on Line0, Line1 high	
	if (!l0 &&  l1) Cnt1--; //Falling edge on Line0, Line1 high
	if (!l0 && !l1) Cnt1++;//Falling edge on Line1, Line1 low
     97e:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <Cnt1>
     982:	90 91 f2 21 	lds	r25, 0x21F2	; 0x8021f2 <Cnt1+0x1>
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	80 93 f1 21 	sts	0x21F1, r24	; 0x8021f1 <Cnt1>
     98c:	90 93 f2 21 	sts	0x21F2, r25	; 0x8021f2 <Cnt1+0x1>

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     990:	8e 81       	ldd	r24, Y+6	; 0x06
     992:	81 11       	cpse	r24, r1
     994:	0e 94 ae 0b 	call	0x175c	; 0x175c <vPortYieldISR>
	LastTriggerTime=Event.Time;
}
     998:	26 96       	adiw	r28, 0x06	; 6
     99a:	cd bf       	out	0x3d, r28	; 61
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	ff 91       	pop	r31
     9a4:	ef 91       	pop	r30
     9a6:	bf 91       	pop	r27
     9a8:	af 91       	pop	r26
     9aa:	9f 91       	pop	r25
     9ac:	8f 91       	pop	r24
     9ae:	7f 91       	pop	r23
     9b0:	6f 91       	pop	r22
     9b2:	5f 91       	pop	r21
     9b4:	4f 91       	pop	r20
     9b6:	3f 91       	pop	r19
     9b8:	2f 91       	pop	r18
     9ba:	1f 91       	pop	r17
     9bc:	0f 90       	pop	r0
     9be:	0b be       	out	0x3b, r0	; 59
     9c0:	0f 90       	pop	r0
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	0f 90       	pop	r0
     9c6:	1f 90       	pop	r1
     9c8:	18 95       	reti
		
	//Process events
	if (l0) 
		Event.Event=RISING_1A;
	else
		Event.Event=FALLING_1A;
     9ca:	85 e0       	ldi	r24, 0x05	; 5
     9cc:	8d 83       	std	Y+5, r24	; 0x05

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	ae 01       	movw	r20, r28
     9d2:	4a 5f       	subi	r20, 0xFA	; 250
     9d4:	5f 4f       	sbci	r21, 0xFF	; 255
     9d6:	be 01       	movw	r22, r28
     9d8:	6f 5f       	subi	r22, 0xFF	; 255
     9da:	7f 4f       	sbci	r23, 0xFF	; 255
     9dc:	80 91 f5 21 	lds	r24, 0x21F5	; 0x8021f5 <EncoderEventQueue>
     9e0:	90 91 f6 21 	lds	r25, 0x21F6	; 0x8021f6 <EncoderEventQueue+0x1>
     9e4:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <xQueueGenericSendFromISR>
	//Process counter
	if ( l0 && !l1) Cnt1--; //Rising edge on Line0, Line1 low
	if ( l0 &&  l1) Cnt1++; //Rising edge on Line0, Line1 high	
	if (!l0 &&  l1) Cnt1--; //Falling edge on Line0, Line1 high
     9e8:	11 23       	and	r17, r17
     9ea:	49 f2       	breq	.-110    	; 0x97e <__vector_2+0x8c>
     9ec:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <Cnt1>
     9f0:	90 91 f2 21 	lds	r25, 0x21F2	; 0x8021f2 <Cnt1+0x1>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	80 93 f1 21 	sts	0x21F1, r24	; 0x8021f1 <Cnt1>
     9fa:	90 93 f2 21 	sts	0x21F2, r25	; 0x8021f2 <Cnt1+0x1>
     9fe:	c8 cf       	rjmp	.-112    	; 0x990 <__vector_2+0x9e>

00000a00 <__vector_3>:
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	LastTriggerTime=Event.Time;
}

ISR (PORTC_INT1_vect)
{
     a00:	1f 92       	push	r1
     a02:	0f 92       	push	r0
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	0f 92       	push	r0
     a08:	11 24       	eor	r1, r1
     a0a:	0b b6       	in	r0, 0x3b	; 59
     a0c:	0f 92       	push	r0
     a0e:	1f 93       	push	r17
     a10:	2f 93       	push	r18
     a12:	3f 93       	push	r19
     a14:	4f 93       	push	r20
     a16:	5f 93       	push	r21
     a18:	6f 93       	push	r22
     a1a:	7f 93       	push	r23
     a1c:	8f 93       	push	r24
     a1e:	9f 93       	push	r25
     a20:	af 93       	push	r26
     a22:	bf 93       	push	r27
     a24:	ef 93       	push	r30
     a26:	ff 93       	push	r31
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <__vector_3+0x2e>
     a2e:	00 d0       	rcall	.+0      	; 0xa30 <__vector_3+0x30>
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
	static uint32_t LastTriggerTime=0;
	uint8_t Data,l0,l1;
	EncoderEventStruct Event;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
     a34:	1e 82       	std	Y+6, r1	; 0x06
	Event.Time=portGET_RUN_TIME_COUNTER_VALUE();
     a36:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     a3a:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     a3e:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <StatsTimer>
     a42:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <StatsTimer+0x1>
     a46:	a0 91 fd 21 	lds	r26, 0x21FD	; 0x8021fd <StatsTimer+0x2>
     a4a:	b0 91 fe 21 	lds	r27, 0x21FE	; 0x8021fe <StatsTimer+0x3>
     a4e:	82 0f       	add	r24, r18
     a50:	93 1f       	adc	r25, r19
     a52:	a1 1d       	adc	r26, r1
     a54:	b1 1d       	adc	r27, r1
     a56:	89 83       	std	Y+1, r24	; 0x01
     a58:	9a 83       	std	Y+2, r25	; 0x02
     a5a:	ab 83       	std	Y+3, r26	; 0x03
     a5c:	bc 83       	std	Y+4, r27	; 0x04
	#ifdef ENCODER_FILTER_ENABLE
		if ((Event.Time-LastTriggerTime)<ENCODER_FILTER_TIME) return;
	#endif
	
	Data=PORTC.IN;
     a5e:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
	l0=Data & (1<<6);
     a62:	18 2f       	mov	r17, r24
     a64:	10 74       	andi	r17, 0x40	; 64
	l1=Data & (1<<7);
	
	//Process events
	if (l1)
     a66:	87 ff       	sbrs	r24, 7
     a68:	37 c0       	rjmp	.+110    	; 0xad8 <__vector_3+0xd8>
		Event.Event=RISING_1B;
     a6a:	82 e0       	ldi	r24, 0x02	; 2
     a6c:	8d 83       	std	Y+5, r24	; 0x05
	else
		Event.Event=FALLING_1B;

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	ae 01       	movw	r20, r28
     a72:	4a 5f       	subi	r20, 0xFA	; 250
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	be 01       	movw	r22, r28
     a78:	6f 5f       	subi	r22, 0xFF	; 255
     a7a:	7f 4f       	sbci	r23, 0xFF	; 255
     a7c:	80 91 f5 21 	lds	r24, 0x21F5	; 0x8021f5 <EncoderEventQueue>
     a80:	90 91 f6 21 	lds	r25, 0x21F6	; 0x8021f6 <EncoderEventQueue+0x1>
     a84:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <xQueueGenericSendFromISR>
	//Process counter
	if ( l1 && !l0) Cnt1++;//Rising edge on Line1, Line0 low
     a88:	11 23       	and	r17, r17
     a8a:	b9 f1       	breq	.+110    	; 0xafa <__vector_3+0xfa>
	if ( l1 &&  l0) Cnt1--;//Rising edge on Line1, Line0 high
	if (!l1 &&  l0) Cnt1++;//Falling edge on Line1, Line0 high
	if (!l1 && !l0) Cnt1--;//Falling edge on Line1, Line0 low
     a8c:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <Cnt1>
     a90:	90 91 f2 21 	lds	r25, 0x21F2	; 0x8021f2 <Cnt1+0x1>
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	80 93 f1 21 	sts	0x21F1, r24	; 0x8021f1 <Cnt1>
     a9a:	90 93 f2 21 	sts	0x21F2, r25	; 0x8021f2 <Cnt1+0x1>

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     a9e:	8e 81       	ldd	r24, Y+6	; 0x06
     aa0:	81 11       	cpse	r24, r1
     aa2:	0e 94 ae 0b 	call	0x175c	; 0x175c <vPortYieldISR>
	LastTriggerTime=Event.Time;
}
     aa6:	26 96       	adiw	r28, 0x06	; 6
     aa8:	cd bf       	out	0x3d, r28	; 61
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	ff 91       	pop	r31
     ab2:	ef 91       	pop	r30
     ab4:	bf 91       	pop	r27
     ab6:	af 91       	pop	r26
     ab8:	9f 91       	pop	r25
     aba:	8f 91       	pop	r24
     abc:	7f 91       	pop	r23
     abe:	6f 91       	pop	r22
     ac0:	5f 91       	pop	r21
     ac2:	4f 91       	pop	r20
     ac4:	3f 91       	pop	r19
     ac6:	2f 91       	pop	r18
     ac8:	1f 91       	pop	r17
     aca:	0f 90       	pop	r0
     acc:	0b be       	out	0x3b, r0	; 59
     ace:	0f 90       	pop	r0
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	0f 90       	pop	r0
     ad4:	1f 90       	pop	r1
     ad6:	18 95       	reti
	
	//Process events
	if (l1)
		Event.Event=RISING_1B;
	else
		Event.Event=FALLING_1B;
     ad8:	86 e0       	ldi	r24, 0x06	; 6
     ada:	8d 83       	std	Y+5, r24	; 0x05

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	ae 01       	movw	r20, r28
     ae0:	4a 5f       	subi	r20, 0xFA	; 250
     ae2:	5f 4f       	sbci	r21, 0xFF	; 255
     ae4:	be 01       	movw	r22, r28
     ae6:	6f 5f       	subi	r22, 0xFF	; 255
     ae8:	7f 4f       	sbci	r23, 0xFF	; 255
     aea:	80 91 f5 21 	lds	r24, 0x21F5	; 0x8021f5 <EncoderEventQueue>
     aee:	90 91 f6 21 	lds	r25, 0x21F6	; 0x8021f6 <EncoderEventQueue+0x1>
     af2:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <xQueueGenericSendFromISR>
	//Process counter
	if ( l1 && !l0) Cnt1++;//Rising edge on Line1, Line0 low
	if ( l1 &&  l0) Cnt1--;//Rising edge on Line1, Line0 high
	if (!l1 &&  l0) Cnt1++;//Falling edge on Line1, Line0 high
     af6:	11 23       	and	r17, r17
     af8:	49 f2       	breq	.-110    	; 0xa8c <__vector_3+0x8c>
     afa:	80 91 f1 21 	lds	r24, 0x21F1	; 0x8021f1 <Cnt1>
     afe:	90 91 f2 21 	lds	r25, 0x21F2	; 0x8021f2 <Cnt1+0x1>
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	80 93 f1 21 	sts	0x21F1, r24	; 0x8021f1 <Cnt1>
     b08:	90 93 f2 21 	sts	0x21F2, r25	; 0x8021f2 <Cnt1+0x1>
     b0c:	c8 cf       	rjmp	.-112    	; 0xa9e <__vector_3+0x9e>

00000b0e <__vector_43>:
	LastTriggerTime=Event.Time;
}

//Encoder 2 ISR's
ISR (PORTE_INT0_vect)
{
     b0e:	1f 92       	push	r1
     b10:	0f 92       	push	r0
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	0f 92       	push	r0
     b16:	11 24       	eor	r1, r1
     b18:	0b b6       	in	r0, 0x3b	; 59
     b1a:	0f 92       	push	r0
     b1c:	1f 93       	push	r17
     b1e:	2f 93       	push	r18
     b20:	3f 93       	push	r19
     b22:	4f 93       	push	r20
     b24:	5f 93       	push	r21
     b26:	6f 93       	push	r22
     b28:	7f 93       	push	r23
     b2a:	8f 93       	push	r24
     b2c:	9f 93       	push	r25
     b2e:	af 93       	push	r26
     b30:	bf 93       	push	r27
     b32:	ef 93       	push	r30
     b34:	ff 93       	push	r31
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <__vector_43+0x2e>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <__vector_43+0x30>
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
	static uint32_t LastTriggerTime=0;
	uint8_t Data,l0,l1;
	EncoderEventStruct Event;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
     b42:	1e 82       	std	Y+6, r1	; 0x06
	Event.Time=portGET_RUN_TIME_COUNTER_VALUE();
     b44:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     b48:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     b4c:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <StatsTimer>
     b50:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <StatsTimer+0x1>
     b54:	a0 91 fd 21 	lds	r26, 0x21FD	; 0x8021fd <StatsTimer+0x2>
     b58:	b0 91 fe 21 	lds	r27, 0x21FE	; 0x8021fe <StatsTimer+0x3>
     b5c:	82 0f       	add	r24, r18
     b5e:	93 1f       	adc	r25, r19
     b60:	a1 1d       	adc	r26, r1
     b62:	b1 1d       	adc	r27, r1
     b64:	89 83       	std	Y+1, r24	; 0x01
     b66:	9a 83       	std	Y+2, r25	; 0x02
     b68:	ab 83       	std	Y+3, r26	; 0x03
     b6a:	bc 83       	std	Y+4, r27	; 0x04
	#ifdef ENCODER_FILTER_ENABLE
		if ((Event.Time-LastTriggerTime)<ENCODER_FILTER_TIME) return;
	#endif
	
	Data=PORTE.IN;
     b6c:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	l0=Data & (1<<4);
	l1=Data & (1<<5);
     b70:	18 2f       	mov	r17, r24
     b72:	10 72       	andi	r17, 0x20	; 32
	
	//Process events
	if (l0)
     b74:	84 ff       	sbrs	r24, 4
     b76:	37 c0       	rjmp	.+110    	; 0xbe6 <__vector_43+0xd8>
		Event.Event=RISING_2A;
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	8d 83       	std	Y+5, r24	; 0x05
	else
		Event.Event=FALLING_2A;

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	ae 01       	movw	r20, r28
     b80:	4a 5f       	subi	r20, 0xFA	; 250
     b82:	5f 4f       	sbci	r21, 0xFF	; 255
     b84:	be 01       	movw	r22, r28
     b86:	6f 5f       	subi	r22, 0xFF	; 255
     b88:	7f 4f       	sbci	r23, 0xFF	; 255
     b8a:	80 91 f5 21 	lds	r24, 0x21F5	; 0x8021f5 <EncoderEventQueue>
     b8e:	90 91 f6 21 	lds	r25, 0x21F6	; 0x8021f6 <EncoderEventQueue+0x1>
     b92:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <xQueueGenericSendFromISR>
	//Process counter
	if ( l0 && !l1) Cnt2--; //Rising edge on Line0, Line1 low
     b96:	11 23       	and	r17, r17
     b98:	b9 f1       	breq	.+110    	; 0xc08 <__vector_43+0xfa>
	if ( l0 &&  l1) Cnt2++; //Rising edge on Line0, Line1 high
	if (!l0 &&  l1) Cnt2--; //Falling edge on Line0, Line1 high
	if (!l0 && !l1) Cnt2++;//Falling edge on Line1, Line1 low
     b9a:	80 91 f3 21 	lds	r24, 0x21F3	; 0x8021f3 <Cnt2>
     b9e:	90 91 f4 21 	lds	r25, 0x21F4	; 0x8021f4 <Cnt2+0x1>
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	80 93 f3 21 	sts	0x21F3, r24	; 0x8021f3 <Cnt2>
     ba8:	90 93 f4 21 	sts	0x21F4, r25	; 0x8021f4 <Cnt2+0x1>
	
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     bac:	8e 81       	ldd	r24, Y+6	; 0x06
     bae:	81 11       	cpse	r24, r1
     bb0:	0e 94 ae 0b 	call	0x175c	; 0x175c <vPortYieldISR>
	LastTriggerTime=Event.Time;
}
     bb4:	26 96       	adiw	r28, 0x06	; 6
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	ff 91       	pop	r31
     bc0:	ef 91       	pop	r30
     bc2:	bf 91       	pop	r27
     bc4:	af 91       	pop	r26
     bc6:	9f 91       	pop	r25
     bc8:	8f 91       	pop	r24
     bca:	7f 91       	pop	r23
     bcc:	6f 91       	pop	r22
     bce:	5f 91       	pop	r21
     bd0:	4f 91       	pop	r20
     bd2:	3f 91       	pop	r19
     bd4:	2f 91       	pop	r18
     bd6:	1f 91       	pop	r17
     bd8:	0f 90       	pop	r0
     bda:	0b be       	out	0x3b, r0	; 59
     bdc:	0f 90       	pop	r0
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	0f 90       	pop	r0
     be2:	1f 90       	pop	r1
     be4:	18 95       	reti
	
	//Process events
	if (l0)
		Event.Event=RISING_2A;
	else
		Event.Event=FALLING_2A;
     be6:	87 e0       	ldi	r24, 0x07	; 7
     be8:	8d 83       	std	Y+5, r24	; 0x05

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	ae 01       	movw	r20, r28
     bee:	4a 5f       	subi	r20, 0xFA	; 250
     bf0:	5f 4f       	sbci	r21, 0xFF	; 255
     bf2:	be 01       	movw	r22, r28
     bf4:	6f 5f       	subi	r22, 0xFF	; 255
     bf6:	7f 4f       	sbci	r23, 0xFF	; 255
     bf8:	80 91 f5 21 	lds	r24, 0x21F5	; 0x8021f5 <EncoderEventQueue>
     bfc:	90 91 f6 21 	lds	r25, 0x21F6	; 0x8021f6 <EncoderEventQueue+0x1>
     c00:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <xQueueGenericSendFromISR>
	//Process counter
	if ( l0 && !l1) Cnt2--; //Rising edge on Line0, Line1 low
	if ( l0 &&  l1) Cnt2++; //Rising edge on Line0, Line1 high
	if (!l0 &&  l1) Cnt2--; //Falling edge on Line0, Line1 high
     c04:	11 23       	and	r17, r17
     c06:	49 f2       	breq	.-110    	; 0xb9a <__vector_43+0x8c>
     c08:	80 91 f3 21 	lds	r24, 0x21F3	; 0x8021f3 <Cnt2>
     c0c:	90 91 f4 21 	lds	r25, 0x21F4	; 0x8021f4 <Cnt2+0x1>
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	80 93 f3 21 	sts	0x21F3, r24	; 0x8021f3 <Cnt2>
     c16:	90 93 f4 21 	sts	0x21F4, r25	; 0x8021f4 <Cnt2+0x1>
     c1a:	c8 cf       	rjmp	.-112    	; 0xbac <__vector_43+0x9e>

00000c1c <__vector_44>:
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	LastTriggerTime=Event.Time;
}

ISR (PORTE_INT1_vect)
{
     c1c:	1f 92       	push	r1
     c1e:	0f 92       	push	r0
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	0f 92       	push	r0
     c24:	11 24       	eor	r1, r1
     c26:	0b b6       	in	r0, 0x3b	; 59
     c28:	0f 92       	push	r0
     c2a:	1f 93       	push	r17
     c2c:	2f 93       	push	r18
     c2e:	3f 93       	push	r19
     c30:	4f 93       	push	r20
     c32:	5f 93       	push	r21
     c34:	6f 93       	push	r22
     c36:	7f 93       	push	r23
     c38:	8f 93       	push	r24
     c3a:	9f 93       	push	r25
     c3c:	af 93       	push	r26
     c3e:	bf 93       	push	r27
     c40:	ef 93       	push	r30
     c42:	ff 93       	push	r31
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	00 d0       	rcall	.+0      	; 0xc4a <__vector_44+0x2e>
     c4a:	00 d0       	rcall	.+0      	; 0xc4c <__vector_44+0x30>
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
	static uint32_t LastTriggerTime=0;
	uint8_t Data,l0,l1;
	EncoderEventStruct Event;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
     c50:	1e 82       	std	Y+6, r1	; 0x06
	Event.Time=portGET_RUN_TIME_COUNTER_VALUE();
     c52:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     c56:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     c5a:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <StatsTimer>
     c5e:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <StatsTimer+0x1>
     c62:	a0 91 fd 21 	lds	r26, 0x21FD	; 0x8021fd <StatsTimer+0x2>
     c66:	b0 91 fe 21 	lds	r27, 0x21FE	; 0x8021fe <StatsTimer+0x3>
     c6a:	82 0f       	add	r24, r18
     c6c:	93 1f       	adc	r25, r19
     c6e:	a1 1d       	adc	r26, r1
     c70:	b1 1d       	adc	r27, r1
     c72:	89 83       	std	Y+1, r24	; 0x01
     c74:	9a 83       	std	Y+2, r25	; 0x02
     c76:	ab 83       	std	Y+3, r26	; 0x03
     c78:	bc 83       	std	Y+4, r27	; 0x04
	#ifdef ENCODER_FILTER_ENABLE
		if ((Event.Time-LastTriggerTime)<ENCODER_FILTER_TIME) return;
	#endif
	
	Data=PORTE.IN;
     c7a:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	l0=Data & (1<<4);
	l1=Data & (1<<5);
     c7e:	18 2f       	mov	r17, r24
     c80:	10 72       	andi	r17, 0x20	; 32
	
	//Process events
	if (l0)
     c82:	84 ff       	sbrs	r24, 4
     c84:	1c c0       	rjmp	.+56     	; 0xcbe <__vector_44+0xa2>
	Event.Event=RISING_2B;
     c86:	84 e0       	ldi	r24, 0x04	; 4
     c88:	8d 83       	std	Y+5, r24	; 0x05
	else
	Event.Event=FALLING_2B;

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	ae 01       	movw	r20, r28
     c8e:	4a 5f       	subi	r20, 0xFA	; 250
     c90:	5f 4f       	sbci	r21, 0xFF	; 255
     c92:	be 01       	movw	r22, r28
     c94:	6f 5f       	subi	r22, 0xFF	; 255
     c96:	7f 4f       	sbci	r23, 0xFF	; 255
     c98:	80 91 f5 21 	lds	r24, 0x21F5	; 0x8021f5 <EncoderEventQueue>
     c9c:	90 91 f6 21 	lds	r25, 0x21F6	; 0x8021f6 <EncoderEventQueue+0x1>
     ca0:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <xQueueGenericSendFromISR>
	//Process counter
	if ( l1 && !l0) Cnt2++;//Rising edge on Line1, Line0 low
     ca4:	11 23       	and	r17, r17
     ca6:	09 f4       	brne	.+2      	; 0xcaa <__vector_44+0x8e>
     ca8:	47 c0       	rjmp	.+142    	; 0xd38 <__vector_44+0x11c>
	if ( l1 &&  l0) Cnt2--;//Rising edge on Line1, Line0 high
     caa:	80 91 f3 21 	lds	r24, 0x21F3	; 0x8021f3 <Cnt2>
     cae:	90 91 f4 21 	lds	r25, 0x21F4	; 0x8021f4 <Cnt2+0x1>
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	80 93 f3 21 	sts	0x21F3, r24	; 0x8021f3 <Cnt2>
     cb8:	90 93 f4 21 	sts	0x21F4, r25	; 0x8021f4 <Cnt2+0x1>
     cbc:	1a c0       	rjmp	.+52     	; 0xcf2 <__vector_44+0xd6>
	
	//Process events
	if (l0)
	Event.Event=RISING_2B;
	else
	Event.Event=FALLING_2B;
     cbe:	88 e0       	ldi	r24, 0x08	; 8
     cc0:	8d 83       	std	Y+5, r24	; 0x05

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	ae 01       	movw	r20, r28
     cc6:	4a 5f       	subi	r20, 0xFA	; 250
     cc8:	5f 4f       	sbci	r21, 0xFF	; 255
     cca:	be 01       	movw	r22, r28
     ccc:	6f 5f       	subi	r22, 0xFF	; 255
     cce:	7f 4f       	sbci	r23, 0xFF	; 255
     cd0:	80 91 f5 21 	lds	r24, 0x21F5	; 0x8021f5 <EncoderEventQueue>
     cd4:	90 91 f6 21 	lds	r25, 0x21F6	; 0x8021f6 <EncoderEventQueue+0x1>
     cd8:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <xQueueGenericSendFromISR>
	//Process counter
	if ( l1 && !l0) Cnt2++;//Rising edge on Line1, Line0 low
     cdc:	80 91 f3 21 	lds	r24, 0x21F3	; 0x8021f3 <Cnt2>
     ce0:	90 91 f4 21 	lds	r25, 0x21F4	; 0x8021f4 <Cnt2+0x1>
     ce4:	11 11       	cpse	r17, r1
     ce6:	22 c0       	rjmp	.+68     	; 0xd2c <__vector_44+0x110>
	if ( l1 &&  l0) Cnt2--;//Rising edge on Line1, Line0 high
	if (!l1 &&  l0) Cnt2++;//Falling edge on Line1, Line0 high
	if (!l1 && !l0) Cnt2--;//Falling edge on Line1, Line0 low
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	80 93 f3 21 	sts	0x21F3, r24	; 0x8021f3 <Cnt2>
     cee:	90 93 f4 21 	sts	0x21F4, r25	; 0x8021f4 <Cnt2+0x1>

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     cf2:	8e 81       	ldd	r24, Y+6	; 0x06
     cf4:	81 11       	cpse	r24, r1
     cf6:	0e 94 ae 0b 	call	0x175c	; 0x175c <vPortYieldISR>
	LastTriggerTime=Event.Time;
}
     cfa:	26 96       	adiw	r28, 0x06	; 6
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	ff 91       	pop	r31
     d06:	ef 91       	pop	r30
     d08:	bf 91       	pop	r27
     d0a:	af 91       	pop	r26
     d0c:	9f 91       	pop	r25
     d0e:	8f 91       	pop	r24
     d10:	7f 91       	pop	r23
     d12:	6f 91       	pop	r22
     d14:	5f 91       	pop	r21
     d16:	4f 91       	pop	r20
     d18:	3f 91       	pop	r19
     d1a:	2f 91       	pop	r18
     d1c:	1f 91       	pop	r17
     d1e:	0f 90       	pop	r0
     d20:	0b be       	out	0x3b, r0	; 59
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	0f 90       	pop	r0
     d28:	1f 90       	pop	r1
     d2a:	18 95       	reti
	else
	Event.Event=FALLING_2B;

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
	//Process counter
	if ( l1 && !l0) Cnt2++;//Rising edge on Line1, Line0 low
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	80 93 f3 21 	sts	0x21F3, r24	; 0x8021f3 <Cnt2>
     d32:	90 93 f4 21 	sts	0x21F4, r25	; 0x8021f4 <Cnt2+0x1>
     d36:	dd cf       	rjmp	.-70     	; 0xcf2 <__vector_44+0xd6>
	if ( l1 &&  l0) Cnt2--;//Rising edge on Line1, Line0 high
	if (!l1 &&  l0) Cnt2++;//Falling edge on Line1, Line0 high
     d38:	80 91 f3 21 	lds	r24, 0x21F3	; 0x8021f3 <Cnt2>
     d3c:	90 91 f4 21 	lds	r25, 0x21F4	; 0x8021f4 <Cnt2+0x1>
     d40:	01 96       	adiw	r24, 0x01	; 1
     d42:	80 93 f3 21 	sts	0x21F3, r24	; 0x8021f3 <Cnt2>
     d46:	90 93 f4 21 	sts	0x21F4, r25	; 0x8021f4 <Cnt2+0x1>
     d4a:	d3 cf       	rjmp	.-90     	; 0xcf2 <__vector_44+0xd6>

00000d4c <DriverMotorResetEncoder>:
}


void DriverMotorResetEncoder(void)
{
	portENTER_CRITICAL();	
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	0f 92       	push	r0
	Cnt1=0;
     d52:	10 92 f1 21 	sts	0x21F1, r1	; 0x8021f1 <Cnt1>
     d56:	10 92 f2 21 	sts	0x21F2, r1	; 0x8021f2 <Cnt1+0x1>
	Cnt2=0;
     d5a:	10 92 f3 21 	sts	0x21F3, r1	; 0x8021f3 <Cnt2>
     d5e:	10 92 f4 21 	sts	0x21F4, r1	; 0x8021f4 <Cnt2+0x1>
	portEXIT_CRITICAL();
     d62:	0f 90       	pop	r0
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	08 95       	ret

00000d68 <DriverPL9823Init>:
}

void DriverPL9823Init()
{
	//CS init
	PORTA.DIRSET=1<<6;
     d68:	e0 e0       	ldi	r30, 0x00	; 0
     d6a:	f6 e0       	ldi	r31, 0x06	; 6
     d6c:	80 e4       	ldi	r24, 0x40	; 64
     d6e:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTCLR=1<<6;
     d70:	86 83       	std	Z+6, r24	; 0x06
     d72:	08 95       	ret

00000d74 <DriverPowerInit>:
#include "DriverPower.h"

void DriverPowerInit(void)
{
	//Aux Vcc GPIO setup
	PORTC.DIRSET=1<<5;
     d74:	80 e2       	ldi	r24, 0x20	; 32
     d76:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     d7a:	08 95       	ret

00000d7c <DriverPowerVccAuxSet>:
}


void DriverPowerVccAuxSet(uint8_t State)
{
	if (State)
     d7c:	81 11       	cpse	r24, r1
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <DriverPowerVccAuxSet+0xc>
		PORTC.OUTSET=1<<5;
	else
		PORTC.OUTCLR=1<<5;
     d80:	80 e2       	ldi	r24, 0x20	; 32
     d82:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d86:	08 95       	ret


void DriverPowerVccAuxSet(uint8_t State)
{
	if (State)
		PORTC.OUTSET=1<<5;
     d88:	80 e2       	ldi	r24, 0x20	; 32
     d8a:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     d8e:	08 95       	ret

00000d90 <DriverSysClkXtalInit>:
    // Clock setup          
    if (F_XTAL<400E3) return -1; //Invalid frequency
    if (F_XTAL<=2E6) OSC.XOSCCTRL=0b00001011; //Select <2 Mhz XTAL osc, max startup time
    else if(F_XTAL<=9E6) OSC.XOSCCTRL=0b01001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=12E6) OSC.XOSCCTRL=0b10001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=16E6) OSC.XOSCCTRL=0b11001011; //Select <2 Mhz XTAL osc, max startup time 
     d90:	8b ec       	ldi	r24, 0xCB	; 203
     d92:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    else return -1; //Invalid frequency
    OSC.CTRL=0b01000; //Enable oscillator
     d96:	88 e0       	ldi	r24, 0x08	; 8
     d98:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
	//Wait until XTAL osc is ready
    while (!(OSC.STATUS&0b1000)); 
     d9c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     da0:	83 ff       	sbrs	r24, 3
     da2:	fc cf       	rjmp	.-8      	; 0xd9c <DriverSysClkXtalInit+0xc>
	{
		//Configure PLL
		Mult=F_CPU/F_XTAL;
		if (Mult>31) return -1; //Invalid frequency; too high
		if (F_XTAL * (uint32_t) Mult !=F_CPU) return -1; //Only supports whole dividers
		OSC.PLLCTRL=0b11000000 | (Mult);
     da4:	82 ec       	ldi	r24, 0xC2	; 194
     da6:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
		OSC.CTRL=0b00011000; //Enable PLL
     daa:	88 e1       	ldi	r24, 0x18	; 24
     dac:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
		
		//Wait until PLL is ready
		while (!(OSC.STATUS & 0b00010000));
     db0:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     db4:	84 ff       	sbrs	r24, 4
     db6:	fc cf       	rjmp	.-8      	; 0xdb0 <DriverSysClkXtalInit+0x20>
		
		//Select PLL as system CLK source
		CCP=0xd8;
     db8:	88 ed       	ldi	r24, 0xD8	; 216
     dba:	84 bf       	out	0x34, r24	; 52
		CLK.CTRL=0b100;
     dbc:	84 e0       	ldi	r24, 0x04	; 4
     dbe:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	}
	return 0;
}
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	08 95       	ret

00000dc6 <DriverTWIMInit>:
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
     dc6:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <Twim_status>
     dca:	e0 e8       	ldi	r30, 0x80	; 128
     dcc:	f6 e0       	ldi	r31, 0x06	; 6
     dce:	88 e1       	ldi	r24, 0x18	; 24
     dd0:	80 8b       	std	Z+16, r24	; 0x10
     dd2:	81 8b       	std	Z+17, r24	; 0x11
     dd4:	e0 ea       	ldi	r30, 0xA0	; 160
     dd6:	f4 e0       	ldi	r31, 0x04	; 4
     dd8:	88 e7       	ldi	r24, 0x78	; 120
     dda:	81 83       	std	Z+1, r24	; 0x01
     ddc:	83 e2       	ldi	r24, 0x23	; 35
     dde:	85 83       	std	Z+5, r24	; 0x05
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	84 83       	std	Z+4, r24	; 0x04
     de4:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <xQueueCreateMutex>
     de8:	80 93 13 21 	sts	0x2113, r24	; 0x802113 <SemaBus>
     dec:	90 93 14 21 	sts	0x2114, r25	; 0x802114 <SemaBus+0x1>
     df0:	43 e0       	ldi	r20, 0x03	; 3
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueGenericCreate>
     dfa:	80 93 11 21 	sts	0x2111, r24	; 0x802111 <SemaRx>
     dfe:	90 93 12 21 	sts	0x2112, r25	; 0x802112 <SemaRx+0x1>
     e02:	08 95       	ret

00000e04 <TWIMWriteRead>:
     e04:	cf 92       	push	r12
     e06:	df 92       	push	r13
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	d8 2f       	mov	r29, r24
     e16:	6b 01       	movw	r12, r22
     e18:	14 2f       	mov	r17, r20
     e1a:	79 01       	movw	r14, r18
     e1c:	6f ef       	ldi	r22, 0xFF	; 255
     e1e:	7f ef       	ldi	r23, 0xFF	; 255
     e20:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <SemaBus>
     e24:	90 91 14 21 	lds	r25, 0x2114	; 0x802114 <SemaBus+0x1>
     e28:	0e 94 4f 10 	call	0x209e	; 0x209e <xQueueSemaphoreTake>
     e2c:	c0 92 1d 21 	sts	0x211D, r12	; 0x80211d <Twim_writeData>
     e30:	d0 92 1e 21 	sts	0x211E, r13	; 0x80211e <Twim_writeData+0x1>
     e34:	e0 92 1b 21 	sts	0x211B, r14	; 0x80211b <Twim_readData>
     e38:	f0 92 1c 21 	sts	0x211C, r15	; 0x80211c <Twim_readData+0x1>
     e3c:	c0 91 16 21 	lds	r28, 0x2116	; 0x802116 <Twim_status>
     e40:	c1 11       	cpse	r28, r1
     e42:	44 c0       	rjmp	.+136    	; 0xecc <TWIMWriteRead+0xc8>
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 93 16 21 	sts	0x2116, r24	; 0x802116 <Twim_status>
     e4a:	10 92 15 21 	sts	0x2115, r1	; 0x802115 <Twim_result>
     e4e:	dd 0f       	add	r29, r29
     e50:	d0 93 1f 21 	sts	0x211F, r29	; 0x80211f <Twim_address>
     e54:	10 93 1a 21 	sts	0x211A, r17	; 0x80211a <Twim_bytesToWrite>
     e58:	00 93 19 21 	sts	0x2119, r16	; 0x802119 <Twim_bytesToRead>
     e5c:	10 92 18 21 	sts	0x2118, r1	; 0x802118 <Twim_bytesWritten>
     e60:	10 92 17 21 	sts	0x2117, r1	; 0x802117 <Twim_bytesRead>
     e64:	80 91 1a 21 	lds	r24, 0x211A	; 0x80211a <Twim_bytesToWrite>
     e68:	88 23       	and	r24, r24
     e6a:	31 f1       	breq	.+76     	; 0xeb8 <TWIMWriteRead+0xb4>
     e6c:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <Twim_address>
     e70:	8e 7f       	andi	r24, 0xFE	; 254
     e72:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
     e76:	6f ef       	ldi	r22, 0xFF	; 255
     e78:	7f ef       	ldi	r23, 0xFF	; 255
     e7a:	80 91 11 21 	lds	r24, 0x2111	; 0x802111 <SemaRx>
     e7e:	90 91 12 21 	lds	r25, 0x2112	; 0x802112 <SemaRx+0x1>
     e82:	0e 94 4f 10 	call	0x209e	; 0x209e <xQueueSemaphoreTake>
     e86:	80 91 15 21 	lds	r24, 0x2115	; 0x802115 <Twim_result>
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	39 f1       	breq	.+78     	; 0xee6 <TWIMWriteRead+0xe2>
     e98:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <SemaBus>
     e9c:	90 91 14 21 	lds	r25, 0x2114	; 0x802114 <SemaBus+0x1>
     ea0:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xQueueGenericSend>
     ea4:	8c 2f       	mov	r24, r28
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	ff 90       	pop	r15
     eb0:	ef 90       	pop	r14
     eb2:	df 90       	pop	r13
     eb4:	cf 90       	pop	r12
     eb6:	08 95       	ret
     eb8:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <Twim_bytesToRead>
     ebc:	88 23       	and	r24, r24
     ebe:	d9 f2       	breq	.-74     	; 0xe76 <TWIMWriteRead+0x72>
     ec0:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <Twim_address>
     ec4:	81 60       	ori	r24, 0x01	; 1
     ec6:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
     eca:	d5 cf       	rjmp	.-86     	; 0xe76 <TWIMWriteRead+0x72>
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <SemaBus>
     eda:	90 91 14 21 	lds	r25, 0x2114	; 0x802114 <SemaBus+0x1>
     ede:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xQueueGenericSend>
     ee2:	c0 e0       	ldi	r28, 0x00	; 0
     ee4:	df cf       	rjmp	.-66     	; 0xea4 <TWIMWriteRead+0xa0>
     ee6:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <SemaBus>
     eea:	90 91 14 21 	lds	r25, 0x2114	; 0x802114 <SemaBus+0x1>
     eee:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xQueueGenericSend>
     ef2:	c1 e0       	ldi	r28, 0x01	; 1
     ef4:	d7 cf       	rjmp	.-82     	; 0xea4 <TWIMWriteRead+0xa0>

00000ef6 <TWIMWrite>:
     ef6:	0f 93       	push	r16
     ef8:	00 e0       	ldi	r16, 0x00	; 0
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	0e 94 02 07 	call	0xe04	; 0xe04 <TWIMWriteRead>
     f02:	0f 91       	pop	r16
     f04:	08 95       	ret

00000f06 <TWIMWriteHandler>:
     f06:	90 91 1a 21 	lds	r25, 0x211A	; 0x80211a <Twim_bytesToWrite>
     f0a:	20 91 19 21 	lds	r18, 0x2119	; 0x802119 <Twim_bytesToRead>
     f0e:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     f12:	84 fd       	sbrc	r24, 4
     f14:	22 c0       	rjmp	.+68     	; 0xf5a <TWIMWriteHandler+0x54>
     f16:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <Twim_bytesWritten>
     f1a:	89 17       	cp	r24, r25
     f1c:	68 f0       	brcs	.+26     	; 0xf38 <TWIMWriteHandler+0x32>
     f1e:	80 91 17 21 	lds	r24, 0x2117	; 0x802117 <Twim_bytesRead>
     f22:	82 17       	cp	r24, r18
     f24:	18 f1       	brcs	.+70     	; 0xf6c <TWIMWriteHandler+0x66>
     f26:	83 e0       	ldi	r24, 0x03	; 3
     f28:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	80 93 15 21 	sts	0x2115, r24	; 0x802115 <Twim_result>
     f32:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <Twim_status>
     f36:	08 95       	ret
     f38:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <Twim_bytesWritten>
     f3c:	e0 91 1d 21 	lds	r30, 0x211D	; 0x80211d <Twim_writeData>
     f40:	f0 91 1e 21 	lds	r31, 0x211E	; 0x80211e <Twim_writeData+0x1>
     f44:	e8 0f       	add	r30, r24
     f46:	f1 1d       	adc	r31, r1
     f48:	80 81       	ld	r24, Z
     f4a:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     f4e:	80 91 18 21 	lds	r24, 0x2118	; 0x802118 <Twim_bytesWritten>
     f52:	8f 5f       	subi	r24, 0xFF	; 255
     f54:	80 93 18 21 	sts	0x2118, r24	; 0x802118 <Twim_bytesWritten>
     f58:	08 95       	ret
     f5a:	83 e0       	ldi	r24, 0x03	; 3
     f5c:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     f60:	85 e0       	ldi	r24, 0x05	; 5
     f62:	80 93 15 21 	sts	0x2115, r24	; 0x802115 <Twim_result>
     f66:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <Twim_status>
     f6a:	08 95       	ret
     f6c:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <Twim_address>
     f70:	81 60       	ori	r24, 0x01	; 1
     f72:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
     f76:	08 95       	ret

00000f78 <TWIMReadHandler>:
     f78:	80 91 17 21 	lds	r24, 0x2117	; 0x802117 <Twim_bytesRead>
     f7c:	80 32       	cpi	r24, 0x20	; 32
     f7e:	f8 f4       	brcc	.+62     	; 0xfbe <TWIMReadHandler+0x46>
     f80:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     f84:	90 91 17 21 	lds	r25, 0x2117	; 0x802117 <Twim_bytesRead>
     f88:	e0 91 1b 21 	lds	r30, 0x211B	; 0x80211b <Twim_readData>
     f8c:	f0 91 1c 21 	lds	r31, 0x211C	; 0x80211c <Twim_readData+0x1>
     f90:	e9 0f       	add	r30, r25
     f92:	f1 1d       	adc	r31, r1
     f94:	80 83       	st	Z, r24
     f96:	80 91 17 21 	lds	r24, 0x2117	; 0x802117 <Twim_bytesRead>
     f9a:	8f 5f       	subi	r24, 0xFF	; 255
     f9c:	80 93 17 21 	sts	0x2117, r24	; 0x802117 <Twim_bytesRead>
     fa0:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <Twim_bytesToRead>
     fa4:	80 91 17 21 	lds	r24, 0x2117	; 0x802117 <Twim_bytesRead>
     fa8:	89 17       	cp	r24, r25
     faa:	b8 f0       	brcs	.+46     	; 0xfda <TWIMReadHandler+0x62>
     fac:	87 e0       	ldi	r24, 0x07	; 7
     fae:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	80 93 15 21 	sts	0x2115, r24	; 0x802115 <Twim_result>
     fb8:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <Twim_status>
     fbc:	08 95       	ret
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     fc4:	82 e0       	ldi	r24, 0x02	; 2
     fc6:	80 93 15 21 	sts	0x2115, r24	; 0x802115 <Twim_result>
     fca:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <Twim_status>
     fce:	90 91 19 21 	lds	r25, 0x2119	; 0x802119 <Twim_bytesToRead>
     fd2:	80 91 17 21 	lds	r24, 0x2117	; 0x802117 <Twim_bytesRead>
     fd6:	89 17       	cp	r24, r25
     fd8:	48 f7       	brcc	.-46     	; 0xfac <TWIMReadHandler+0x34>
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     fe0:	08 95       	ret

00000fe2 <__vector_46>:
}

ISR (TWIM_BUS_vect)
{
     fe2:	1f 92       	push	r1
     fe4:	0f 92       	push	r0
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	0f 92       	push	r0
     fea:	11 24       	eor	r1, r1
     fec:	0b b6       	in	r0, 0x3b	; 59
     fee:	0f 92       	push	r0
     ff0:	2f 93       	push	r18
     ff2:	3f 93       	push	r19
     ff4:	4f 93       	push	r20
     ff6:	5f 93       	push	r21
     ff8:	6f 93       	push	r22
     ffa:	7f 93       	push	r23
     ffc:	8f 93       	push	r24
     ffe:	9f 93       	push	r25
    1000:	af 93       	push	r26
    1002:	bf 93       	push	r27
    1004:	ef 93       	push	r30
    1006:	ff 93       	push	r31
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	1f 92       	push	r1
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    1012:	19 82       	std	Y+1, r1	; 0x01
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
    1014:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    1018:	98 2f       	mov	r25, r24
    101a:	9c 70       	andi	r25, 0x0C	; 12
    101c:	e1 f4       	brne	.+56     	; 0x1056 <__vector_46+0x74>

		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    101e:	86 fd       	sbrc	r24, 6
    1020:	44 c0       	rjmp	.+136    	; 0x10aa <__vector_46+0xc8>
		TWIMWriteHandler();
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    1022:	87 fd       	sbrc	r24, 7
    1024:	45 c0       	rjmp	.+138    	; 0x10b0 <__vector_46+0xce>
	}
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
    1026:	86 e0       	ldi	r24, 0x06	; 6
    1028:	80 93 15 21 	sts	0x2115, r24	; 0x802115 <Twim_result>
	Twim_status = TWIM_STATUS_READY;
    102c:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <Twim_status>
	/* If unexpected state. */
	else {
		TWIMTransactionFinished(TWIM_RESULT_FAIL);
	}
	
	if (Twim_status == TWIM_STATUS_READY) //Transaction finished
    1030:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <Twim_status>
    1034:	81 11       	cpse	r24, r1
    1036:	1f c0       	rjmp	.+62     	; 0x1076 <__vector_46+0x94>
	{
		BaseType_t res=xSemaphoreGiveFromISR( SemaRx, &xHigherPriorityTaskWoken );
    1038:	be 01       	movw	r22, r28
    103a:	6f 5f       	subi	r22, 0xFF	; 255
    103c:	7f 4f       	sbci	r23, 0xFF	; 255
    103e:	80 91 11 21 	lds	r24, 0x2111	; 0x802111 <SemaRx>
    1042:	90 91 12 21 	lds	r25, 0x2112	; 0x802112 <SemaRx+0x1>
    1046:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <xQueueGiveFromISR>

		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );		
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	88 23       	and	r24, r24
    104e:	99 f0       	breq	.+38     	; 0x1076 <__vector_46+0x94>
    1050:	0e 94 ae 0b 	call	0x175c	; 0x175c <vPortYieldISR>
	}
}
    1054:	10 c0       	rjmp	.+32     	; 0x1076 <__vector_46+0x94>
	}
}

void TWIMArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
    1056:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    105a:	82 fd       	sbrc	r24, 2
    105c:	22 c0       	rjmp	.+68     	; 0x10a2 <__vector_46+0xc0>
		Twim_result = TWIM_RESULT_BUS_ERROR;
	}
	/* If arbitration lost. */
	else {
		Twim_result = TWIM_RESULT_ARBITRATION_LOST;
    105e:	93 e0       	ldi	r25, 0x03	; 3
    1060:	90 93 15 21 	sts	0x2115, r25	; 0x802115 <Twim_result>
	}

	/* Clear interrupt flag. */
	TWIM_BUS.MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    1064:	88 60       	ori	r24, 0x08	; 8
    1066:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	Twim_status = TWIM_STATUS_READY;
    106a:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <Twim_status>
	/* If unexpected state. */
	else {
		TWIMTransactionFinished(TWIM_RESULT_FAIL);
	}
	
	if (Twim_status == TWIM_STATUS_READY) //Transaction finished
    106e:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <Twim_status>
    1072:	88 23       	and	r24, r24
    1074:	09 f3       	breq	.-62     	; 0x1038 <__vector_46+0x56>
	{
		BaseType_t res=xSemaphoreGiveFromISR( SemaRx, &xHigherPriorityTaskWoken );

		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );		
	}
}
    1076:	0f 90       	pop	r0
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	ff 91       	pop	r31
    107e:	ef 91       	pop	r30
    1080:	bf 91       	pop	r27
    1082:	af 91       	pop	r26
    1084:	9f 91       	pop	r25
    1086:	8f 91       	pop	r24
    1088:	7f 91       	pop	r23
    108a:	6f 91       	pop	r22
    108c:	5f 91       	pop	r21
    108e:	4f 91       	pop	r20
    1090:	3f 91       	pop	r19
    1092:	2f 91       	pop	r18
    1094:	0f 90       	pop	r0
    1096:	0b be       	out	0x3b, r0	; 59
    1098:	0f 90       	pop	r0
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	0f 90       	pop	r0
    109e:	1f 90       	pop	r1
    10a0:	18 95       	reti
{
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
		Twim_result = TWIM_RESULT_BUS_ERROR;
    10a2:	94 e0       	ldi	r25, 0x04	; 4
    10a4:	90 93 15 21 	sts	0x2115, r25	; 0x802115 <Twim_result>
    10a8:	dd cf       	rjmp	.-70     	; 0x1064 <__vector_46+0x82>
		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
		TWIMWriteHandler();
    10aa:	0e 94 83 07 	call	0xf06	; 0xf06 <TWIMWriteHandler>
    10ae:	df cf       	rjmp	.-66     	; 0x106e <__vector_46+0x8c>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
		TWIMReadHandler();
    10b0:	0e 94 bc 07 	call	0xf78	; 0xf78 <TWIMReadHandler>
    10b4:	dc cf       	rjmp	.-72     	; 0x106e <__vector_46+0x8c>

000010b6 <stdio_getchar>:
		
	return 0;
}
	
static int stdio_getchar(FILE *stream)
{
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	1f 92       	push	r1
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
	char c;
	xQueueReceive(UsartRxQueue,&c,portMAX_DELAY);
    10c0:	4f ef       	ldi	r20, 0xFF	; 255
    10c2:	5f ef       	ldi	r21, 0xFF	; 255
    10c4:	be 01       	movw	r22, r28
    10c6:	6f 5f       	subi	r22, 0xFF	; 255
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	80 91 f7 21 	lds	r24, 0x21F7	; 0x8021f7 <UsartRxQueue>
    10ce:	90 91 f8 21 	lds	r25, 0x21F8	; 0x8021f8 <UsartRxQueue+0x1>
    10d2:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <xQueueReceive>
	return c;
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0f 90       	pop	r0
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	08 95       	ret

000010e2 <stdio_putchar>:

}


static int stdio_putchar(char c, FILE * stream)
{
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	1f 92       	push	r1
    10e8:	1f 92       	push	r1
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	8a 83       	std	Y+2, r24	; 0x02
	int res;
	char cbuf;

	xQueueSend(UsartTxQueue,&c,portMAX_DELAY);
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	4f ef       	ldi	r20, 0xFF	; 255
    10f4:	5f ef       	ldi	r21, 0xFF	; 255
    10f6:	be 01       	movw	r22, r28
    10f8:	6e 5f       	subi	r22, 0xFE	; 254
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	80 91 f9 21 	lds	r24, 0x21F9	; 0x8021f9 <UsartTxQueue>
    1100:	90 91 fa 21 	lds	r25, 0x21FA	; 0x8021fa <UsartTxQueue+0x1>
    1104:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xQueueGenericSend>

	if (USART.STATUS & (1<<5))
    1108:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
    110c:	85 ff       	sbrs	r24, 5
    110e:	0e c0       	rjmp	.+28     	; 0x112c <stdio_putchar+0x4a>
	{
		xQueueReceive(UsartTxQueue,&cbuf,0);
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	be 01       	movw	r22, r28
    1116:	6f 5f       	subi	r22, 0xFF	; 255
    1118:	7f 4f       	sbci	r23, 0xFF	; 255
    111a:	80 91 f9 21 	lds	r24, 0x21F9	; 0x8021f9 <UsartTxQueue>
    111e:	90 91 fa 21 	lds	r25, 0x21FA	; 0x8021fa <UsartTxQueue+0x1>
    1122:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <xQueueReceive>
		USART.DATA=cbuf;
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
	}
		
	return 0;
}
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	08 95       	ret

0000113a <DriverUSARTInit>:
QueueHandle_t UsartTxQueue;
QueueHandle_t UsartRxQueue;

void DriverUSARTInit(void)
{
	UsartTxQueue=xQueueCreate(UART_QUEUE_LENGTH,sizeof(char));
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	80 e8       	ldi	r24, 0x80	; 128
    1140:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueGenericCreate>
    1144:	80 93 f9 21 	sts	0x21F9, r24	; 0x8021f9 <UsartTxQueue>
    1148:	90 93 fa 21 	sts	0x21FA, r25	; 0x8021fa <UsartTxQueue+0x1>
	UsartRxQueue=xQueueCreate(UART_QUEUE_LENGTH,sizeof(char));
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	80 e8       	ldi	r24, 0x80	; 128
    1152:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueGenericCreate>
    1156:	80 93 f7 21 	sts	0x21F7, r24	; 0x8021f7 <UsartRxQueue>
    115a:	90 93 f8 21 	sts	0x21F8, r25	; 0x8021f8 <UsartRxQueue+0x1>
		
	USART_PORT.DIRSET=0b00001000;	
    115e:	e0 e8       	ldi	r30, 0x80	; 128
    1160:	f6 e0       	ldi	r31, 0x06	; 6
    1162:	88 e0       	ldi	r24, 0x08	; 8
    1164:	81 83       	std	Z+1, r24	; 0x01
	USART_PORT.DIRCLR=0b00000100;
    1166:	84 e0       	ldi	r24, 0x04	; 4
    1168:	82 83       	std	Z+2, r24	; 0x02
	
	USART.CTRLA=0b00010100;
    116a:	e0 ea       	ldi	r30, 0xA0	; 160
    116c:	fa e0       	ldi	r31, 0x0A	; 10
    116e:	84 e1       	ldi	r24, 0x14	; 20
    1170:	83 83       	std	Z+3, r24	; 0x03
	USART.CTRLB=0b00011000;
    1172:	88 e1       	ldi	r24, 0x18	; 24
    1174:	84 83       	std	Z+4, r24	; 0x04
	USART.CTRLC=0b00000011;
    1176:	83 e0       	ldi	r24, 0x03	; 3
    1178:	85 83       	std	Z+5, r24	; 0x05
	
	USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 19200 baud
    117a:	85 ee       	ldi	r24, 0xE5	; 229
    117c:	86 83       	std	Z+6, r24	; 0x06
	USART.BAUDCTRLB=0xBC; 
    117e:	8c eb       	ldi	r24, 0xBC	; 188
    1180:	87 83       	std	Z+7, r24	; 0x07
	
	stdout=&UsartStdio;
    1182:	e8 e0       	ldi	r30, 0x08	; 8
    1184:	f2 e2       	ldi	r31, 0x22	; 34
    1186:	86 e0       	ldi	r24, 0x06	; 6
    1188:	90 e2       	ldi	r25, 0x20	; 32
    118a:	82 83       	std	Z+2, r24	; 0x02
    118c:	93 83       	std	Z+3, r25	; 0x03
	stdin=&UsartStdio;
    118e:	80 83       	st	Z, r24
    1190:	91 83       	std	Z+1, r25	; 0x01
    1192:	08 95       	ret

00001194 <__vector_60>:
}



ISR(USART_TXC_vect)
{
    1194:	1f 92       	push	r1
    1196:	0f 92       	push	r0
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	0f 92       	push	r0
    119c:	11 24       	eor	r1, r1
    119e:	0b b6       	in	r0, 0x3b	; 59
    11a0:	0f 92       	push	r0
    11a2:	2f 93       	push	r18
    11a4:	3f 93       	push	r19
    11a6:	4f 93       	push	r20
    11a8:	5f 93       	push	r21
    11aa:	6f 93       	push	r22
    11ac:	7f 93       	push	r23
    11ae:	8f 93       	push	r24
    11b0:	9f 93       	push	r25
    11b2:	af 93       	push	r26
    11b4:	bf 93       	push	r27
    11b6:	ef 93       	push	r30
    11b8:	ff 93       	push	r31
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	1f 92       	push	r1
    11c0:	1f 92       	push	r1
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
	char c;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
    11c6:	19 82       	std	Y+1, r1	; 0x01
	if (xQueueReceiveFromISR(UsartTxQueue,&c,&xHigherPriorityTaskWoken)==pdPASS)
    11c8:	ae 01       	movw	r20, r28
    11ca:	4f 5f       	subi	r20, 0xFF	; 255
    11cc:	5f 4f       	sbci	r21, 0xFF	; 255
    11ce:	be 01       	movw	r22, r28
    11d0:	6e 5f       	subi	r22, 0xFE	; 254
    11d2:	7f 4f       	sbci	r23, 0xFF	; 255
    11d4:	80 91 f9 21 	lds	r24, 0x21F9	; 0x8021f9 <UsartTxQueue>
    11d8:	90 91 fa 21 	lds	r25, 0x21FA	; 0x8021fa <UsartTxQueue+0x1>
    11dc:	0e 94 06 12 	call	0x240c	; 0x240c <xQueueReceiveFromISR>
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	d9 f0       	breq	.+54     	; 0x121a <__vector_60+0x86>
	{
		USART.DATA=c;	
	}
	
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	81 11       	cpse	r24, r1
    11e8:	0e 94 ae 0b 	call	0x175c	; 0x175c <vPortYieldISR>
}
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	ff 91       	pop	r31
    11f6:	ef 91       	pop	r30
    11f8:	bf 91       	pop	r27
    11fa:	af 91       	pop	r26
    11fc:	9f 91       	pop	r25
    11fe:	8f 91       	pop	r24
    1200:	7f 91       	pop	r23
    1202:	6f 91       	pop	r22
    1204:	5f 91       	pop	r21
    1206:	4f 91       	pop	r20
    1208:	3f 91       	pop	r19
    120a:	2f 91       	pop	r18
    120c:	0f 90       	pop	r0
    120e:	0b be       	out	0x3b, r0	; 59
    1210:	0f 90       	pop	r0
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	0f 90       	pop	r0
    1216:	1f 90       	pop	r1
    1218:	18 95       	reti
{
	char c;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
	if (xQueueReceiveFromISR(UsartTxQueue,&c,&xHigherPriorityTaskWoken)==pdPASS)
	{
		USART.DATA=c;	
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    1220:	e1 cf       	rjmp	.-62     	; 0x11e4 <__vector_60+0x50>

00001222 <__vector_58>:
	
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}

ISR(USART_RXC_vect)
{
    1222:	1f 92       	push	r1
    1224:	0f 92       	push	r0
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	0f 92       	push	r0
    122a:	11 24       	eor	r1, r1
    122c:	0b b6       	in	r0, 0x3b	; 59
    122e:	0f 92       	push	r0
    1230:	2f 93       	push	r18
    1232:	3f 93       	push	r19
    1234:	4f 93       	push	r20
    1236:	5f 93       	push	r21
    1238:	6f 93       	push	r22
    123a:	7f 93       	push	r23
    123c:	8f 93       	push	r24
    123e:	9f 93       	push	r25
    1240:	af 93       	push	r26
    1242:	bf 93       	push	r27
    1244:	ef 93       	push	r30
    1246:	ff 93       	push	r31
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	1f 92       	push	r1
    124e:	1f 92       	push	r1
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
	char c;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
    1254:	19 82       	std	Y+1, r1	; 0x01
	
	c=USART.DATA;
    1256:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    125a:	8a 83       	std	Y+2, r24	; 0x02
	xQueueSendToBackFromISR(UsartRxQueue,&c,&xHigherPriorityTaskWoken);
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	ae 01       	movw	r20, r28
    1260:	4f 5f       	subi	r20, 0xFF	; 255
    1262:	5f 4f       	sbci	r21, 0xFF	; 255
    1264:	be 01       	movw	r22, r28
    1266:	6e 5f       	subi	r22, 0xFE	; 254
    1268:	7f 4f       	sbci	r23, 0xFF	; 255
    126a:	80 91 f7 21 	lds	r24, 0x21F7	; 0x8021f7 <UsartRxQueue>
    126e:	90 91 f8 21 	lds	r25, 0x21F8	; 0x8021f8 <UsartRxQueue+0x1>
    1272:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	81 11       	cpse	r24, r1
    127a:	0e 94 ae 0b 	call	0x175c	; 0x175c <vPortYieldISR>
	
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	ff 91       	pop	r31
    1288:	ef 91       	pop	r30
    128a:	bf 91       	pop	r27
    128c:	af 91       	pop	r26
    128e:	9f 91       	pop	r25
    1290:	8f 91       	pop	r24
    1292:	7f 91       	pop	r23
    1294:	6f 91       	pop	r22
    1296:	5f 91       	pop	r21
    1298:	4f 91       	pop	r20
    129a:	3f 91       	pop	r19
    129c:	2f 91       	pop	r18
    129e:	0f 90       	pop	r0
    12a0:	0b be       	out	0x3b, r0	; 59
    12a2:	0f 90       	pop	r0
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	0f 90       	pop	r0
    12a8:	1f 90       	pop	r1
    12aa:	18 95       	reti

000012ac <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    12b6:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    12ba:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <xHeapHasBeenInitialised.4135>
    12be:	81 11       	cpse	r24, r1
    12c0:	21 c0       	rjmp	.+66     	; 0x1304 <pvPortMalloc+0x58>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    12c2:	e0 91 ff 21 	lds	r30, 0x21FF	; 0x8021ff <ucHeap>
    12c6:	f0 91 00 22 	lds	r31, 0x2200	; 0x802200 <ucHeap+0x1>

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    12ca:	cf 01       	movw	r24, r30
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	80 93 25 21 	sts	0x2125, r24	; 0x802125 <xStart>
    12d2:	90 93 26 21 	sts	0x2126, r25	; 0x802126 <xStart+0x1>
	xStart.xBlockSize = ( size_t ) 0;
    12d6:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <xStart+0x2>
    12da:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <xStart+0x3>

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    12de:	8f ef       	ldi	r24, 0xFF	; 255
    12e0:	9f e3       	ldi	r25, 0x3F	; 63
    12e2:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <xEnd+0x2>
    12e6:	90 93 24 21 	sts	0x2124, r25	; 0x802124 <xEnd+0x3>
	xEnd.pxNextFreeBlock = NULL;
    12ea:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <xEnd>
    12ee:	10 92 22 21 	sts	0x2122, r1	; 0x802122 <xEnd+0x1>

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    12f2:	83 83       	std	Z+3, r24	; 0x03
    12f4:	94 83       	std	Z+4, r25	; 0x04
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    12f6:	81 e2       	ldi	r24, 0x21	; 33
    12f8:	91 e2       	ldi	r25, 0x21	; 33
    12fa:	81 83       	std	Z+1, r24	; 0x01
    12fc:	92 83       	std	Z+2, r25	; 0x02
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
			xHeapHasBeenInitialised = pdTRUE;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <xHeapHasBeenInitialised.4135>
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    1304:	20 97       	sbiw	r28, 0x00	; 0
    1306:	09 f4       	brne	.+2      	; 0x130a <pvPortMalloc+0x5e>
    1308:	64 c0       	rjmp	.+200    	; 0x13d2 <pvPortMalloc+0x126>
		{
			xWantedSize += heapSTRUCT_SIZE;
    130a:	ae 01       	movw	r20, r28
    130c:	4c 5f       	subi	r20, 0xFC	; 252
    130e:	5f 4f       	sbci	r21, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    1310:	23 96       	adiw	r28, 0x03	; 3
    1312:	ce 3f       	cpi	r28, 0xFE	; 254
    1314:	df 43       	sbci	r29, 0x3F	; 63
    1316:	08 f0       	brcs	.+2      	; 0x131a <pvPortMalloc+0x6e>
    1318:	5c c0       	rjmp	.+184    	; 0x13d2 <pvPortMalloc+0x126>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    131a:	e0 91 25 21 	lds	r30, 0x2125	; 0x802125 <xStart>
    131e:	f0 91 26 21 	lds	r31, 0x2126	; 0x802126 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    1322:	a5 e2       	ldi	r26, 0x25	; 37
    1324:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1326:	06 c0       	rjmp	.+12     	; 0x1334 <pvPortMalloc+0x88>
    1328:	80 81       	ld	r24, Z
    132a:	91 81       	ldd	r25, Z+1	; 0x01
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	39 f0       	breq	.+14     	; 0x133e <pvPortMalloc+0x92>
    1330:	df 01       	movw	r26, r30
    1332:	fc 01       	movw	r30, r24
    1334:	22 81       	ldd	r18, Z+2	; 0x02
    1336:	33 81       	ldd	r19, Z+3	; 0x03
    1338:	24 17       	cp	r18, r20
    133a:	35 07       	cpc	r19, r21
    133c:	a8 f3       	brcs	.-22     	; 0x1328 <pvPortMalloc+0x7c>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    133e:	c1 e2       	ldi	r28, 0x21	; 33
    1340:	e1 32       	cpi	r30, 0x21	; 33
    1342:	fc 07       	cpc	r31, r28
    1344:	09 f4       	brne	.+2      	; 0x1348 <pvPortMalloc+0x9c>
    1346:	45 c0       	rjmp	.+138    	; 0x13d2 <pvPortMalloc+0x126>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    1348:	cd 91       	ld	r28, X+
    134a:	dc 91       	ld	r29, X
    134c:	11 97       	sbiw	r26, 0x01	; 1
    134e:	8e 01       	movw	r16, r28
    1350:	0c 5f       	subi	r16, 0xFC	; 252
    1352:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1354:	80 81       	ld	r24, Z
    1356:	91 81       	ldd	r25, Z+1	; 0x01
    1358:	8d 93       	st	X+, r24
    135a:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    135c:	c9 01       	movw	r24, r18
    135e:	84 1b       	sub	r24, r20
    1360:	95 0b       	sbc	r25, r21
    1362:	89 30       	cpi	r24, 0x09	; 9
    1364:	91 05       	cpc	r25, r1
    1366:	00 f1       	brcs	.+64     	; 0x13a8 <pvPortMalloc+0xfc>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1368:	bf 01       	movw	r22, r30
    136a:	64 0f       	add	r22, r20
    136c:	75 1f       	adc	r23, r21

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    136e:	db 01       	movw	r26, r22
    1370:	12 96       	adiw	r26, 0x02	; 2
    1372:	8d 93       	st	X+, r24
    1374:	9c 93       	st	X, r25
    1376:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    1378:	42 83       	std	Z+2, r20	; 0x02
    137a:	53 83       	std	Z+3, r21	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    137c:	12 96       	adiw	r26, 0x02	; 2
    137e:	2d 91       	ld	r18, X+
    1380:	3c 91       	ld	r19, X
    1382:	13 97       	sbiw	r26, 0x03	; 3
    1384:	a5 e2       	ldi	r26, 0x25	; 37
    1386:	b1 e2       	ldi	r27, 0x21	; 33
    1388:	01 c0       	rjmp	.+2      	; 0x138c <pvPortMalloc+0xe0>
    138a:	df 01       	movw	r26, r30
    138c:	ed 91       	ld	r30, X+
    138e:	fc 91       	ld	r31, X
    1390:	11 97       	sbiw	r26, 0x01	; 1
    1392:	82 81       	ldd	r24, Z+2	; 0x02
    1394:	93 81       	ldd	r25, Z+3	; 0x03
    1396:	82 17       	cp	r24, r18
    1398:	93 07       	cpc	r25, r19
    139a:	b8 f3       	brcs	.-18     	; 0x138a <pvPortMalloc+0xde>
    139c:	eb 01       	movw	r28, r22
    139e:	e8 83       	st	Y, r30
    13a0:	f9 83       	std	Y+1, r31	; 0x01
    13a2:	6d 93       	st	X+, r22
    13a4:	7c 93       	st	X, r23

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
		{
			xWantedSize += heapSTRUCT_SIZE;
    13a6:	9a 01       	movw	r18, r20

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
    13a8:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <xFreeBytesRemaining>
    13ac:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <xFreeBytesRemaining+0x1>
    13b0:	82 1b       	sub	r24, r18
    13b2:	93 0b       	sbc	r25, r19
    13b4:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <xFreeBytesRemaining>
    13b8:	90 93 15 20 	sts	0x2015, r25	; 0x802015 <xFreeBytesRemaining+0x1>
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    13bc:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    13c0:	01 15       	cp	r16, r1
    13c2:	11 05       	cpc	r17, r1
    13c4:	41 f0       	breq	.+16     	; 0x13d6 <pvPortMalloc+0x12a>
		}
	}
	#endif

	return pvReturn;
}
    13c6:	c8 01       	movw	r24, r16
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	08 95       	ret
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    13d2:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    13d6:	0e 94 43 1a 	call	0x3486	; 0x3486 <vApplicationMallocFailedHook>
    13da:	00 e0       	ldi	r16, 0x00	; 0
    13dc:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	#endif

	return pvReturn;
}
    13de:	c8 01       	movw	r24, r16
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	08 95       	ret

000013ea <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	21 f1       	breq	.+72     	; 0x143a <vPortFree+0x50>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    13f2:	ec 01       	movw	r28, r24
    13f4:	24 97       	sbiw	r28, 0x04	; 4

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    13f6:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    13fa:	4a 81       	ldd	r20, Y+2	; 0x02
    13fc:	5b 81       	ldd	r21, Y+3	; 0x03
    13fe:	a5 e2       	ldi	r26, 0x25	; 37
    1400:	b1 e2       	ldi	r27, 0x21	; 33
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <vPortFree+0x1c>
    1404:	df 01       	movw	r26, r30
    1406:	ed 91       	ld	r30, X+
    1408:	fc 91       	ld	r31, X
    140a:	11 97       	sbiw	r26, 0x01	; 1
    140c:	22 81       	ldd	r18, Z+2	; 0x02
    140e:	33 81       	ldd	r19, Z+3	; 0x03
    1410:	24 17       	cp	r18, r20
    1412:	35 07       	cpc	r19, r21
    1414:	b8 f3       	brcs	.-18     	; 0x1404 <vPortFree+0x1a>
    1416:	e8 83       	st	Y, r30
    1418:	f9 83       	std	Y+1, r31	; 0x01
    141a:	cd 93       	st	X+, r28
    141c:	dc 93       	st	X, r29
			xFreeBytesRemaining += pxLink->xBlockSize;
    141e:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <xFreeBytesRemaining>
    1422:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <xFreeBytesRemaining+0x1>
    1426:	48 0f       	add	r20, r24
    1428:	59 1f       	adc	r21, r25
    142a:	40 93 14 20 	sts	0x2014, r20	; 0x802014 <xFreeBytesRemaining>
    142e:	50 93 15 20 	sts	0x2015, r21	; 0x802015 <xFreeBytesRemaining+0x1>
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
	}
}
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
			xFreeBytesRemaining += pxLink->xBlockSize;
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
    1436:	0c 94 06 17 	jmp	0x2e0c	; 0x2e0c <xTaskResumeAll>
	}
}
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	08 95       	ret

00001440 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1440:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1442:	03 96       	adiw	r24, 0x03	; 3
    1444:	81 83       	std	Z+1, r24	; 0x01
    1446:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1448:	2f ef       	ldi	r18, 0xFF	; 255
    144a:	3f ef       	ldi	r19, 0xFF	; 255
    144c:	23 83       	std	Z+3, r18	; 0x03
    144e:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1450:	85 83       	std	Z+5, r24	; 0x05
    1452:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1454:	87 83       	std	Z+7, r24	; 0x07
    1456:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1458:	10 82       	st	Z, r1
    145a:	08 95       	ret

0000145c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
    145c:	fc 01       	movw	r30, r24
    145e:	10 86       	std	Z+8, r1	; 0x08
    1460:	11 86       	std	Z+9, r1	; 0x09
    1462:	08 95       	ret

00001464 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	9c 01       	movw	r18, r24
    146a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    146c:	dc 01       	movw	r26, r24
    146e:	11 96       	adiw	r26, 0x01	; 1
    1470:	cd 91       	ld	r28, X+
    1472:	dc 91       	ld	r29, X
    1474:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1476:	c2 83       	std	Z+2, r28	; 0x02
    1478:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	9d 81       	ldd	r25, Y+5	; 0x05
    147e:	84 83       	std	Z+4, r24	; 0x04
    1480:	95 83       	std	Z+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1482:	8c 81       	ldd	r24, Y+4	; 0x04
    1484:	9d 81       	ldd	r25, Y+5	; 0x05
    1486:	dc 01       	movw	r26, r24
    1488:	12 96       	adiw	r26, 0x02	; 2
    148a:	6d 93       	st	X+, r22
    148c:	7c 93       	st	X, r23
    148e:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
    1490:	6c 83       	std	Y+4, r22	; 0x04
    1492:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
    1494:	20 87       	std	Z+8, r18	; 0x08
    1496:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
    1498:	f9 01       	movw	r30, r18
    149a:	80 81       	ld	r24, Z
    149c:	8f 5f       	subi	r24, 0xFF	; 255
    149e:	80 83       	st	Z, r24
}
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    14ac:	48 81       	ld	r20, Y
    14ae:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    14b0:	4f 3f       	cpi	r20, 0xFF	; 255
    14b2:	2f ef       	ldi	r18, 0xFF	; 255
    14b4:	52 07       	cpc	r21, r18
    14b6:	01 f1       	breq	.+64     	; 0x14f8 <vListInsert+0x52>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    14b8:	dc 01       	movw	r26, r24
    14ba:	13 96       	adiw	r26, 0x03	; 3
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <vListInsert+0x1a>
    14be:	df 01       	movw	r26, r30
    14c0:	12 96       	adiw	r26, 0x02	; 2
    14c2:	ed 91       	ld	r30, X+
    14c4:	fc 91       	ld	r31, X
    14c6:	13 97       	sbiw	r26, 0x03	; 3
    14c8:	20 81       	ld	r18, Z
    14ca:	31 81       	ldd	r19, Z+1	; 0x01
    14cc:	42 17       	cp	r20, r18
    14ce:	53 07       	cpc	r21, r19
    14d0:	b0 f7       	brcc	.-20     	; 0x14be <vListInsert+0x18>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    14d2:	ea 83       	std	Y+2, r30	; 0x02
    14d4:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    14d6:	c4 83       	std	Z+4, r28	; 0x04
    14d8:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
    14da:	ac 83       	std	Y+4, r26	; 0x04
    14dc:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
    14de:	12 96       	adiw	r26, 0x02	; 2
    14e0:	cd 93       	st	X+, r28
    14e2:	dc 93       	st	X, r29
    14e4:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    14e6:	88 87       	std	Y+8, r24	; 0x08
    14e8:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
    14ea:	fc 01       	movw	r30, r24
    14ec:	20 81       	ld	r18, Z
    14ee:	2f 5f       	subi	r18, 0xFF	; 255
    14f0:	20 83       	st	Z, r18
}
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	08 95       	ret
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    14f8:	fc 01       	movw	r30, r24
    14fa:	a7 81       	ldd	r26, Z+7	; 0x07
    14fc:	b0 85       	ldd	r27, Z+8	; 0x08
    14fe:	12 96       	adiw	r26, 0x02	; 2
    1500:	ed 91       	ld	r30, X+
    1502:	fc 91       	ld	r31, X
    1504:	13 97       	sbiw	r26, 0x03	; 3
    1506:	e5 cf       	rjmp	.-54     	; 0x14d2 <vListInsert+0x2c>

00001508 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    150e:	a0 85       	ldd	r26, Z+8	; 0x08
    1510:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1512:	22 81       	ldd	r18, Z+2	; 0x02
    1514:	33 81       	ldd	r19, Z+3	; 0x03
    1516:	84 81       	ldd	r24, Z+4	; 0x04
    1518:	95 81       	ldd	r25, Z+5	; 0x05
    151a:	e9 01       	movw	r28, r18
    151c:	8c 83       	std	Y+4, r24	; 0x04
    151e:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1520:	84 81       	ldd	r24, Z+4	; 0x04
    1522:	95 81       	ldd	r25, Z+5	; 0x05
    1524:	ec 01       	movw	r28, r24
    1526:	2a 83       	std	Y+2, r18	; 0x02
    1528:	3b 83       	std	Y+3, r19	; 0x03

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    152a:	11 96       	adiw	r26, 0x01	; 1
    152c:	2d 91       	ld	r18, X+
    152e:	3c 91       	ld	r19, X
    1530:	12 97       	sbiw	r26, 0x02	; 2
    1532:	e2 17       	cp	r30, r18
    1534:	f3 07       	cpc	r31, r19
    1536:	49 f0       	breq	.+18     	; 0x154a <uxListRemove+0x42>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    1538:	10 86       	std	Z+8, r1	; 0x08
    153a:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
    153c:	8c 91       	ld	r24, X
    153e:	81 50       	subi	r24, 0x01	; 1
    1540:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
    1542:	8c 91       	ld	r24, X
}
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	08 95       	ret
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    154a:	11 96       	adiw	r26, 0x01	; 1
    154c:	8d 93       	st	X+, r24
    154e:	9c 93       	st	X, r25
    1550:	12 97       	sbiw	r26, 0x02	; 2
    1552:	f2 cf       	rjmp	.-28     	; 0x1538 <uxListRemove+0x30>

00001554 <pxPortInitialiseStack>:
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    1554:	31 e1       	ldi	r19, 0x11	; 17
    1556:	fc 01       	movw	r30, r24
    1558:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
    155a:	31 97       	sbiw	r30, 0x01	; 1
    155c:	22 e2       	ldi	r18, 0x22	; 34
    155e:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
    1560:	31 97       	sbiw	r30, 0x01	; 1
    1562:	a3 e3       	ldi	r26, 0x33	; 51
    1564:	a0 83       	st	Z, r26
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1566:	31 97       	sbiw	r30, 0x01	; 1
    1568:	60 83       	st	Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    156a:	31 97       	sbiw	r30, 0x01	; 1
    156c:	70 83       	st	Z, r23
	pxTopOfStack--;

#if defined(__AVR_3_BYTE_PC__) && __AVR_3_BYTE_PC__   //MCU's with more than 128kB of program memory: PC is 3 bytes
	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    156e:	31 97       	sbiw	r30, 0x01	; 1
    1570:	10 82       	st	Z, r1

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    1572:	31 97       	sbiw	r30, 0x01	; 1
    1574:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    1576:	31 97       	sbiw	r30, 0x01	; 1
    1578:	60 e8       	ldi	r22, 0x80	; 128
    157a:	60 83       	st	Z, r22
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    157c:	31 97       	sbiw	r30, 0x01	; 1
    157e:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    1580:	31 97       	sbiw	r30, 0x01	; 1
    1582:	62 e0       	ldi	r22, 0x02	; 2
    1584:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    1586:	31 97       	sbiw	r30, 0x01	; 1
    1588:	63 e0       	ldi	r22, 0x03	; 3
    158a:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    158c:	31 97       	sbiw	r30, 0x01	; 1
    158e:	64 e0       	ldi	r22, 0x04	; 4
    1590:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    1592:	31 97       	sbiw	r30, 0x01	; 1
    1594:	65 e0       	ldi	r22, 0x05	; 5
    1596:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    1598:	31 97       	sbiw	r30, 0x01	; 1
    159a:	66 e0       	ldi	r22, 0x06	; 6
    159c:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    159e:	31 97       	sbiw	r30, 0x01	; 1
    15a0:	67 e0       	ldi	r22, 0x07	; 7
    15a2:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    15a4:	31 97       	sbiw	r30, 0x01	; 1
    15a6:	68 e0       	ldi	r22, 0x08	; 8
    15a8:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    15aa:	31 97       	sbiw	r30, 0x01	; 1
    15ac:	69 e0       	ldi	r22, 0x09	; 9
    15ae:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    15b0:	31 97       	sbiw	r30, 0x01	; 1
    15b2:	60 e1       	ldi	r22, 0x10	; 16
    15b4:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    15b6:	31 97       	sbiw	r30, 0x01	; 1
    15b8:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    15ba:	31 97       	sbiw	r30, 0x01	; 1
    15bc:	32 e1       	ldi	r19, 0x12	; 18
    15be:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    15c0:	31 97       	sbiw	r30, 0x01	; 1
    15c2:	33 e1       	ldi	r19, 0x13	; 19
    15c4:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    15c6:	31 97       	sbiw	r30, 0x01	; 1
    15c8:	34 e1       	ldi	r19, 0x14	; 20
    15ca:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    15cc:	31 97       	sbiw	r30, 0x01	; 1
    15ce:	35 e1       	ldi	r19, 0x15	; 21
    15d0:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    15d2:	31 97       	sbiw	r30, 0x01	; 1
    15d4:	36 e1       	ldi	r19, 0x16	; 22
    15d6:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    15d8:	31 97       	sbiw	r30, 0x01	; 1
    15da:	37 e1       	ldi	r19, 0x17	; 23
    15dc:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    15de:	31 97       	sbiw	r30, 0x01	; 1
    15e0:	38 e1       	ldi	r19, 0x18	; 24
    15e2:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    15e4:	31 97       	sbiw	r30, 0x01	; 1
    15e6:	39 e1       	ldi	r19, 0x19	; 25
    15e8:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    15ea:	31 97       	sbiw	r30, 0x01	; 1
    15ec:	30 e2       	ldi	r19, 0x20	; 32
    15ee:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    15f0:	31 97       	sbiw	r30, 0x01	; 1
    15f2:	31 e2       	ldi	r19, 0x21	; 33
    15f4:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    15f6:	31 97       	sbiw	r30, 0x01	; 1
    15f8:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    15fa:	31 97       	sbiw	r30, 0x01	; 1
    15fc:	23 e2       	ldi	r18, 0x23	; 35
    15fe:	20 83       	st	Z, r18
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1600:	31 97       	sbiw	r30, 0x01	; 1
    1602:	40 83       	st	Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1604:	31 97       	sbiw	r30, 0x01	; 1
    1606:	50 83       	st	Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    1608:	31 97       	sbiw	r30, 0x01	; 1
    160a:	26 e2       	ldi	r18, 0x26	; 38
    160c:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    160e:	31 97       	sbiw	r30, 0x01	; 1
    1610:	27 e2       	ldi	r18, 0x27	; 39
    1612:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    1614:	31 97       	sbiw	r30, 0x01	; 1
    1616:	28 e2       	ldi	r18, 0x28	; 40
    1618:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    161a:	31 97       	sbiw	r30, 0x01	; 1
    161c:	29 e2       	ldi	r18, 0x29	; 41
    161e:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    1620:	31 97       	sbiw	r30, 0x01	; 1
    1622:	20 e3       	ldi	r18, 0x30	; 48
    1624:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    1626:	31 97       	sbiw	r30, 0x01	; 1
    1628:	21 e3       	ldi	r18, 0x31	; 49
    162a:	20 83       	st	Z, r18
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
}
    162c:	87 97       	sbiw	r24, 0x27	; 39
    162e:	08 95       	ret

00001630 <xPortStartScheduler>:
 */

static void prvSetupTimerInterrupt( void )
{
	//TCC0 is used as tick timer
	TCC0.CCA=65535;
    1630:	e0 e0       	ldi	r30, 0x00	; 0
    1632:	f8 e0       	ldi	r31, 0x08	; 8
    1634:	8f ef       	ldi	r24, 0xFF	; 255
    1636:	9f ef       	ldi	r25, 0xFF	; 255
    1638:	80 a7       	std	Z+40, r24	; 0x28
    163a:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CTRLA=0b00000001; //DIV1
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	80 83       	st	Z, r24
	TCC0.CTRLB=1<<6;
    1640:	90 e4       	ldi	r25, 0x40	; 64
    1642:	91 83       	std	Z+1, r25	; 0x01
	TCC0.INTCTRLA=0b00000001; //OVF priority LOW
    1644:	86 83       	std	Z+6, r24	; 0x06
	TCC0.INTCTRLB=0b00000001; //CCA priority LOW
    1646:	87 83       	std	Z+7, r24	; 0x07
	TCC0.PER=configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	9d e7       	ldi	r25, 0x7D	; 125
    164c:	86 a3       	std	Z+38, r24	; 0x26
    164e:	97 a3       	std	Z+39, r25	; 0x27
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    1650:	a0 91 c7 21 	lds	r26, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    1654:	b0 91 c8 21 	lds	r27, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    1658:	cd 91       	ld	r28, X+
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	dd 91       	ld	r29, X+
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	ff 91       	pop	r31
    1662:	ef 91       	pop	r30
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	bf 91       	pop	r27
    166a:	af 91       	pop	r26
    166c:	9f 91       	pop	r25
    166e:	8f 91       	pop	r24
    1670:	7f 91       	pop	r23
    1672:	6f 91       	pop	r22
    1674:	5f 91       	pop	r21
    1676:	4f 91       	pop	r20
    1678:	3f 91       	pop	r19
    167a:	2f 91       	pop	r18
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	df 90       	pop	r13
    1686:	cf 90       	pop	r12
    1688:	bf 90       	pop	r11
    168a:	af 90       	pop	r10
    168c:	9f 90       	pop	r9
    168e:	8f 90       	pop	r8
    1690:	7f 90       	pop	r7
    1692:	6f 90       	pop	r6
    1694:	5f 90       	pop	r5
    1696:	4f 90       	pop	r4
    1698:	3f 90       	pop	r3
    169a:	2f 90       	pop	r2
    169c:	1f 90       	pop	r1
    169e:	0f 90       	pop	r0
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    16a4:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	08 95       	ret

000016aa <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    16aa:	0f 92       	push	r0
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	0f 92       	push	r0
    16b2:	1f 92       	push	r1
    16b4:	11 24       	eor	r1, r1
    16b6:	2f 92       	push	r2
    16b8:	3f 92       	push	r3
    16ba:	4f 92       	push	r4
    16bc:	5f 92       	push	r5
    16be:	6f 92       	push	r6
    16c0:	7f 92       	push	r7
    16c2:	8f 92       	push	r8
    16c4:	9f 92       	push	r9
    16c6:	af 92       	push	r10
    16c8:	bf 92       	push	r11
    16ca:	cf 92       	push	r12
    16cc:	df 92       	push	r13
    16ce:	ef 92       	push	r14
    16d0:	ff 92       	push	r15
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	2f 93       	push	r18
    16d8:	3f 93       	push	r19
    16da:	4f 93       	push	r20
    16dc:	5f 93       	push	r21
    16de:	6f 93       	push	r22
    16e0:	7f 93       	push	r23
    16e2:	8f 93       	push	r24
    16e4:	9f 93       	push	r25
    16e6:	af 93       	push	r26
    16e8:	bf 93       	push	r27
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	ef 93       	push	r30
    16f0:	ff 93       	push	r31
    16f2:	a0 91 c7 21 	lds	r26, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    16f6:	b0 91 c8 21 	lds	r27, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    16fa:	0d b6       	in	r0, 0x3d	; 61
    16fc:	0d 92       	st	X+, r0
    16fe:	0e b6       	in	r0, 0x3e	; 62
    1700:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1702:	0e 94 10 18 	call	0x3020	; 0x3020 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1706:	a0 91 c7 21 	lds	r26, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    170a:	b0 91 c8 21 	lds	r27, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    170e:	cd 91       	ld	r28, X+
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	dd 91       	ld	r29, X+
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	ff 91       	pop	r31
    1718:	ef 91       	pop	r30
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	bf 91       	pop	r27
    1720:	af 91       	pop	r26
    1722:	9f 91       	pop	r25
    1724:	8f 91       	pop	r24
    1726:	7f 91       	pop	r23
    1728:	6f 91       	pop	r22
    172a:	5f 91       	pop	r21
    172c:	4f 91       	pop	r20
    172e:	3f 91       	pop	r19
    1730:	2f 91       	pop	r18
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	ff 90       	pop	r15
    1738:	ef 90       	pop	r14
    173a:	df 90       	pop	r13
    173c:	cf 90       	pop	r12
    173e:	bf 90       	pop	r11
    1740:	af 90       	pop	r10
    1742:	9f 90       	pop	r9
    1744:	8f 90       	pop	r8
    1746:	7f 90       	pop	r7
    1748:	6f 90       	pop	r6
    174a:	5f 90       	pop	r5
    174c:	4f 90       	pop	r4
    174e:	3f 90       	pop	r3
    1750:	2f 90       	pop	r2
    1752:	1f 90       	pop	r1
    1754:	0f 90       	pop	r0
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	0f 90       	pop	r0
	asm volatile ( "ret" );
    175a:	08 95       	ret

0000175c <vPortYieldISR>:
}*/

//void vPortYieldISR( void ) __attribute__ ( ( naked ) );
void vPortYieldISR( void )
{
	TCC0.CCA=TCC0.CNT+100;
    175c:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    1760:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    1764:	8c 59       	subi	r24, 0x9C	; 156
    1766:	9f 4f       	sbci	r25, 0xFF	; 255
    1768:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    176c:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
	if (TCC0.CCA>=TCC0.PER) TCC0.CCA-= TCC0.PER;
    1770:	20 91 28 08 	lds	r18, 0x0828	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1774:	30 91 29 08 	lds	r19, 0x0829	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    1778:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    177c:	90 91 27 08 	lds	r25, 0x0827	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    1780:	28 17       	cp	r18, r24
    1782:	39 07       	cpc	r19, r25
    1784:	70 f0       	brcs	.+28     	; 0x17a2 <vPortYieldISR+0x46>
    1786:	20 91 26 08 	lds	r18, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    178a:	30 91 27 08 	lds	r19, 0x0827	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    178e:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1792:	90 91 29 08 	lds	r25, 0x0829	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    1796:	82 1b       	sub	r24, r18
    1798:	93 0b       	sbc	r25, r19
    179a:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    179e:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
	asm volatile ( "ret" );
    17a2:	08 95       	ret

000017a4 <__vector_14>:
	 * the context is saved at the start of the ISR.  The tick
	 * count is incremented after the context is saved.
	 */	
	ISR(TCC0_OVF_vect,ISR_NAKED)
	{
		portSAVE_CONTEXT();
    17a4:	0f 92       	push	r0
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	0f 92       	push	r0
    17ac:	1f 92       	push	r1
    17ae:	11 24       	eor	r1, r1
    17b0:	2f 92       	push	r2
    17b2:	3f 92       	push	r3
    17b4:	4f 92       	push	r4
    17b6:	5f 92       	push	r5
    17b8:	6f 92       	push	r6
    17ba:	7f 92       	push	r7
    17bc:	8f 92       	push	r8
    17be:	9f 92       	push	r9
    17c0:	af 92       	push	r10
    17c2:	bf 92       	push	r11
    17c4:	cf 92       	push	r12
    17c6:	df 92       	push	r13
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	2f 93       	push	r18
    17d2:	3f 93       	push	r19
    17d4:	4f 93       	push	r20
    17d6:	5f 93       	push	r21
    17d8:	6f 93       	push	r22
    17da:	7f 93       	push	r23
    17dc:	8f 93       	push	r24
    17de:	9f 93       	push	r25
    17e0:	af 93       	push	r26
    17e2:	bf 93       	push	r27
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	ef 93       	push	r30
    17ea:	ff 93       	push	r31
    17ec:	a0 91 c7 21 	lds	r26, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    17f0:	b0 91 c8 21 	lds	r27, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    17f4:	0d b6       	in	r0, 0x3d	; 61
    17f6:	0d 92       	st	X+, r0
    17f8:	0e b6       	in	r0, 0x3e	; 62
    17fa:	0d 92       	st	X+, r0
		StatsTimer+=TCC0.PER;
    17fc:	20 91 26 08 	lds	r18, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    1800:	30 91 27 08 	lds	r19, 0x0827	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    1804:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <StatsTimer>
    1808:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <StatsTimer+0x1>
    180c:	a0 91 fd 21 	lds	r26, 0x21FD	; 0x8021fd <StatsTimer+0x2>
    1810:	b0 91 fe 21 	lds	r27, 0x21FE	; 0x8021fe <StatsTimer+0x3>
    1814:	82 0f       	add	r24, r18
    1816:	93 1f       	adc	r25, r19
    1818:	a1 1d       	adc	r26, r1
    181a:	b1 1d       	adc	r27, r1
    181c:	80 93 fb 21 	sts	0x21FB, r24	; 0x8021fb <StatsTimer>
    1820:	90 93 fc 21 	sts	0x21FC, r25	; 0x8021fc <StatsTimer+0x1>
    1824:	a0 93 fd 21 	sts	0x21FD, r26	; 0x8021fd <StatsTimer+0x2>
    1828:	b0 93 fe 21 	sts	0x21FE, r27	; 0x8021fe <StatsTimer+0x3>
		xTaskIncrementTick();
    182c:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <xTaskIncrementTick>
		vTaskSwitchContext();
    1830:	0e 94 10 18 	call	0x3020	; 0x3020 <vTaskSwitchContext>
		portRESTORE_CONTEXT();
    1834:	a0 91 c7 21 	lds	r26, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    1838:	b0 91 c8 21 	lds	r27, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    183c:	cd 91       	ld	r28, X+
    183e:	cd bf       	out	0x3d, r28	; 61
    1840:	dd 91       	ld	r29, X+
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	ff 91       	pop	r31
    1846:	ef 91       	pop	r30
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	bf 91       	pop	r27
    184e:	af 91       	pop	r26
    1850:	9f 91       	pop	r25
    1852:	8f 91       	pop	r24
    1854:	7f 91       	pop	r23
    1856:	6f 91       	pop	r22
    1858:	5f 91       	pop	r21
    185a:	4f 91       	pop	r20
    185c:	3f 91       	pop	r19
    185e:	2f 91       	pop	r18
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	ff 90       	pop	r15
    1866:	ef 90       	pop	r14
    1868:	df 90       	pop	r13
    186a:	cf 90       	pop	r12
    186c:	bf 90       	pop	r11
    186e:	af 90       	pop	r10
    1870:	9f 90       	pop	r9
    1872:	8f 90       	pop	r8
    1874:	7f 90       	pop	r7
    1876:	6f 90       	pop	r6
    1878:	5f 90       	pop	r5
    187a:	4f 90       	pop	r4
    187c:	3f 90       	pop	r3
    187e:	2f 90       	pop	r2
    1880:	1f 90       	pop	r1
    1882:	0f 90       	pop	r0
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	0f 90       	pop	r0

		asm volatile ( "reti" );
    1888:	18 95       	reti

0000188a <vConfigureTimerForRunTimeStats>:
 */

volatile uint32_t StatsTimer;

void vConfigureTimerForRunTimeStats(void)
{
    188a:	08 95       	ret

0000188c <__vector_16>:
	//TCC1.INTCTRLA=0b00000001; //OVF priority LOW
}

ISR(TCC0_CCA_vect,ISR_NAKED)
	{
	portSAVE_CONTEXT();
    188c:	0f 92       	push	r0
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	0f 92       	push	r0
    1894:	1f 92       	push	r1
    1896:	11 24       	eor	r1, r1
    1898:	2f 92       	push	r2
    189a:	3f 92       	push	r3
    189c:	4f 92       	push	r4
    189e:	5f 92       	push	r5
    18a0:	6f 92       	push	r6
    18a2:	7f 92       	push	r7
    18a4:	8f 92       	push	r8
    18a6:	9f 92       	push	r9
    18a8:	af 92       	push	r10
    18aa:	bf 92       	push	r11
    18ac:	cf 92       	push	r12
    18ae:	df 92       	push	r13
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	2f 93       	push	r18
    18ba:	3f 93       	push	r19
    18bc:	4f 93       	push	r20
    18be:	5f 93       	push	r21
    18c0:	6f 93       	push	r22
    18c2:	7f 93       	push	r23
    18c4:	8f 93       	push	r24
    18c6:	9f 93       	push	r25
    18c8:	af 93       	push	r26
    18ca:	bf 93       	push	r27
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	ef 93       	push	r30
    18d2:	ff 93       	push	r31
    18d4:	a0 91 c7 21 	lds	r26, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    18d8:	b0 91 c8 21 	lds	r27, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    18dc:	0d b6       	in	r0, 0x3d	; 61
    18de:	0d 92       	st	X+, r0
    18e0:	0e b6       	in	r0, 0x3e	; 62
    18e2:	0d 92       	st	X+, r0
	TCC0.CCA=65535;
    18e4:	8f ef       	ldi	r24, 0xFF	; 255
    18e6:	9f ef       	ldi	r25, 0xFF	; 255
    18e8:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    18ec:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
	vTaskSwitchContext();
    18f0:	0e 94 10 18 	call	0x3020	; 0x3020 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    18f4:	a0 91 c7 21 	lds	r26, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    18f8:	b0 91 c8 21 	lds	r27, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    18fc:	cd 91       	ld	r28, X+
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	dd 91       	ld	r29, X+
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	ff 91       	pop	r31
    1906:	ef 91       	pop	r30
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	bf 91       	pop	r27
    190e:	af 91       	pop	r26
    1910:	9f 91       	pop	r25
    1912:	8f 91       	pop	r24
    1914:	7f 91       	pop	r23
    1916:	6f 91       	pop	r22
    1918:	5f 91       	pop	r21
    191a:	4f 91       	pop	r20
    191c:	3f 91       	pop	r19
    191e:	2f 91       	pop	r18
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	ff 90       	pop	r15
    1926:	ef 90       	pop	r14
    1928:	df 90       	pop	r13
    192a:	cf 90       	pop	r12
    192c:	bf 90       	pop	r11
    192e:	af 90       	pop	r10
    1930:	9f 90       	pop	r9
    1932:	8f 90       	pop	r8
    1934:	7f 90       	pop	r7
    1936:	6f 90       	pop	r6
    1938:	5f 90       	pop	r5
    193a:	4f 90       	pop	r4
    193c:	3f 90       	pop	r3
    193e:	2f 90       	pop	r2
    1940:	1f 90       	pop	r1
    1942:	0f 90       	pop	r0
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	0f 90       	pop	r0
	asm volatile ( "reti" );
    1948:	18 95       	reti

0000194a <prvCopyDataToQueue>:
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;

	configASSERT( pxQueue );
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	ec 01       	movw	r28, r24
    1954:	04 2f       	mov	r16, r20
    1956:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1958:	4c 8d       	ldd	r20, Y+28	; 0x1c
    195a:	41 11       	cpse	r20, r1
    195c:	0d c0       	rjmp	.+26     	; 0x1978 <prvCopyDataToQueue+0x2e>
    195e:	88 81       	ld	r24, Y
    1960:	99 81       	ldd	r25, Y+1	; 0x01
    1962:	89 2b       	or	r24, r25
    1964:	09 f4       	brne	.+2      	; 0x1968 <prvCopyDataToQueue+0x1e>
    1966:	43 c0       	rjmp	.+134    	; 0x19ee <prvCopyDataToQueue+0xa4>
    1968:	1f 5f       	subi	r17, 0xFF	; 255
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	1a 8f       	std	Y+26, r17	; 0x1a
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
    1972:	1f 91       	pop	r17
    1974:	0f 91       	pop	r16
    1976:	08 95       	ret
    1978:	50 e0       	ldi	r21, 0x00	; 0
    197a:	01 11       	cpse	r16, r1
    197c:	15 c0       	rjmp	.+42     	; 0x19a8 <prvCopyDataToQueue+0x5e>
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	9b 81       	ldd	r25, Y+3	; 0x03
    1982:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <memcpy>
    1986:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	9b 81       	ldd	r25, Y+3	; 0x03
    198c:	82 0f       	add	r24, r18
    198e:	91 1d       	adc	r25, r1
    1990:	8a 83       	std	Y+2, r24	; 0x02
    1992:	9b 83       	std	Y+3, r25	; 0x03
    1994:	2c 81       	ldd	r18, Y+4	; 0x04
    1996:	3d 81       	ldd	r19, Y+5	; 0x05
    1998:	82 17       	cp	r24, r18
    199a:	93 07       	cpc	r25, r19
    199c:	28 f3       	brcs	.-54     	; 0x1968 <prvCopyDataToQueue+0x1e>
    199e:	88 81       	ld	r24, Y
    19a0:	99 81       	ldd	r25, Y+1	; 0x01
    19a2:	8a 83       	std	Y+2, r24	; 0x02
    19a4:	9b 83       	std	Y+3, r25	; 0x03
    19a6:	e0 cf       	rjmp	.-64     	; 0x1968 <prvCopyDataToQueue+0x1e>
    19a8:	8e 81       	ldd	r24, Y+6	; 0x06
    19aa:	9f 81       	ldd	r25, Y+7	; 0x07
    19ac:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <memcpy>
    19b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	91 95       	neg	r25
    19b6:	81 95       	neg	r24
    19b8:	91 09       	sbc	r25, r1
    19ba:	2e 81       	ldd	r18, Y+6	; 0x06
    19bc:	3f 81       	ldd	r19, Y+7	; 0x07
    19be:	28 0f       	add	r18, r24
    19c0:	39 1f       	adc	r19, r25
    19c2:	2e 83       	std	Y+6, r18	; 0x06
    19c4:	3f 83       	std	Y+7, r19	; 0x07
    19c6:	48 81       	ld	r20, Y
    19c8:	59 81       	ldd	r21, Y+1	; 0x01
    19ca:	24 17       	cp	r18, r20
    19cc:	35 07       	cpc	r19, r21
    19ce:	30 f4       	brcc	.+12     	; 0x19dc <prvCopyDataToQueue+0x92>
    19d0:	2c 81       	ldd	r18, Y+4	; 0x04
    19d2:	3d 81       	ldd	r19, Y+5	; 0x05
    19d4:	82 0f       	add	r24, r18
    19d6:	93 1f       	adc	r25, r19
    19d8:	8e 83       	std	Y+6, r24	; 0x06
    19da:	9f 83       	std	Y+7, r25	; 0x07
    19dc:	02 30       	cpi	r16, 0x02	; 2
    19de:	21 f6       	brne	.-120    	; 0x1968 <prvCopyDataToQueue+0x1e>
    19e0:	11 23       	and	r17, r17
    19e2:	11 f0       	breq	.+4      	; 0x19e8 <prvCopyDataToQueue+0x9e>
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	c2 cf       	rjmp	.-124    	; 0x196c <prvCopyDataToQueue+0x22>
    19e8:	11 e0       	ldi	r17, 0x01	; 1
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	bf cf       	rjmp	.-130    	; 0x196c <prvCopyDataToQueue+0x22>
    19ee:	8c 81       	ldd	r24, Y+4	; 0x04
    19f0:	9d 81       	ldd	r25, Y+5	; 0x05
    19f2:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <xTaskPriorityDisinherit>
    19f6:	1c 82       	std	Y+4, r1	; 0x04
    19f8:	1d 82       	std	Y+5, r1	; 0x05
    19fa:	1f 5f       	subi	r17, 0xFF	; 255
    19fc:	b7 cf       	rjmp	.-146    	; 0x196c <prvCopyDataToQueue+0x22>

000019fe <prvCopyDataFromQueue>:
    19fe:	fc 01       	movw	r30, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	44 8d       	ldd	r20, Z+28	; 0x1c
    1a04:	44 23       	and	r20, r20
    1a06:	91 f0       	breq	.+36     	; 0x1a2c <prvCopyDataFromQueue+0x2e>
    1a08:	50 e0       	ldi	r21, 0x00	; 0
    1a0a:	66 81       	ldd	r22, Z+6	; 0x06
    1a0c:	77 81       	ldd	r23, Z+7	; 0x07
    1a0e:	64 0f       	add	r22, r20
    1a10:	75 1f       	adc	r23, r21
    1a12:	66 83       	std	Z+6, r22	; 0x06
    1a14:	77 83       	std	Z+7, r23	; 0x07
    1a16:	24 81       	ldd	r18, Z+4	; 0x04
    1a18:	35 81       	ldd	r19, Z+5	; 0x05
    1a1a:	62 17       	cp	r22, r18
    1a1c:	73 07       	cpc	r23, r19
    1a1e:	20 f0       	brcs	.+8      	; 0x1a28 <prvCopyDataFromQueue+0x2a>
    1a20:	60 81       	ld	r22, Z
    1a22:	71 81       	ldd	r23, Z+1	; 0x01
    1a24:	66 83       	std	Z+6, r22	; 0x06
    1a26:	77 83       	std	Z+7, r23	; 0x07
    1a28:	0c 94 5b 2a 	jmp	0x54b6	; 0x54b6 <memcpy>
    1a2c:	08 95       	ret

00001a2e <prvUnlockQueue>:
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	8c 01       	movw	r16, r24
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	0f 92       	push	r0
    1a40:	fc 01       	movw	r30, r24
    1a42:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1a44:	1c 16       	cp	r1, r28
    1a46:	c4 f4       	brge	.+48     	; 0x1a78 <prvUnlockQueue+0x4a>
    1a48:	fc 01       	movw	r30, r24
    1a4a:	81 89       	ldd	r24, Z+17	; 0x11
    1a4c:	88 23       	and	r24, r24
    1a4e:	a1 f0       	breq	.+40     	; 0x1a78 <prvUnlockQueue+0x4a>
    1a50:	78 01       	movw	r14, r16
    1a52:	f1 e1       	ldi	r31, 0x11	; 17
    1a54:	ef 0e       	add	r14, r31
    1a56:	f1 1c       	adc	r15, r1
    1a58:	06 c0       	rjmp	.+12     	; 0x1a66 <prvUnlockQueue+0x38>
    1a5a:	c1 50       	subi	r28, 0x01	; 1
    1a5c:	69 f0       	breq	.+26     	; 0x1a78 <prvUnlockQueue+0x4a>
    1a5e:	f8 01       	movw	r30, r16
    1a60:	81 89       	ldd	r24, Z+17	; 0x11
    1a62:	88 23       	and	r24, r24
    1a64:	49 f0       	breq	.+18     	; 0x1a78 <prvUnlockQueue+0x4a>
    1a66:	c7 01       	movw	r24, r14
    1a68:	0e 94 3a 18 	call	0x3074	; 0x3074 <xTaskRemoveFromEventList>
    1a6c:	88 23       	and	r24, r24
    1a6e:	a9 f3       	breq	.-22     	; 0x1a5a <prvUnlockQueue+0x2c>
    1a70:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <vTaskMissedYield>
    1a74:	c1 50       	subi	r28, 0x01	; 1
    1a76:	99 f7       	brne	.-26     	; 0x1a5e <prvUnlockQueue+0x30>
    1a78:	8f ef       	ldi	r24, 0xFF	; 255
    1a7a:	f8 01       	movw	r30, r16
    1a7c:	86 8f       	std	Z+30, r24	; 0x1e
    1a7e:	0f 90       	pop	r0
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	0f 92       	push	r0
    1a88:	c5 8d       	ldd	r28, Z+29	; 0x1d
    1a8a:	1c 16       	cp	r1, r28
    1a8c:	c4 f4       	brge	.+48     	; 0x1abe <prvUnlockQueue+0x90>
    1a8e:	f8 01       	movw	r30, r16
    1a90:	80 85       	ldd	r24, Z+8	; 0x08
    1a92:	88 23       	and	r24, r24
    1a94:	a1 f0       	breq	.+40     	; 0x1abe <prvUnlockQueue+0x90>
    1a96:	78 01       	movw	r14, r16
    1a98:	f8 e0       	ldi	r31, 0x08	; 8
    1a9a:	ef 0e       	add	r14, r31
    1a9c:	f1 1c       	adc	r15, r1
    1a9e:	06 c0       	rjmp	.+12     	; 0x1aac <prvUnlockQueue+0x7e>
    1aa0:	c1 50       	subi	r28, 0x01	; 1
    1aa2:	69 f0       	breq	.+26     	; 0x1abe <prvUnlockQueue+0x90>
    1aa4:	f8 01       	movw	r30, r16
    1aa6:	80 85       	ldd	r24, Z+8	; 0x08
    1aa8:	88 23       	and	r24, r24
    1aaa:	49 f0       	breq	.+18     	; 0x1abe <prvUnlockQueue+0x90>
    1aac:	c7 01       	movw	r24, r14
    1aae:	0e 94 3a 18 	call	0x3074	; 0x3074 <xTaskRemoveFromEventList>
    1ab2:	88 23       	and	r24, r24
    1ab4:	a9 f3       	breq	.-22     	; 0x1aa0 <prvUnlockQueue+0x72>
    1ab6:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <vTaskMissedYield>
    1aba:	c1 50       	subi	r28, 0x01	; 1
    1abc:	99 f7       	brne	.-26     	; 0x1aa4 <prvUnlockQueue+0x76>
    1abe:	8f ef       	ldi	r24, 0xFF	; 255
    1ac0:	f8 01       	movw	r30, r16
    1ac2:	85 8f       	std	Z+29, r24	; 0x1d
    1ac4:	0f 90       	pop	r0
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	ff 90       	pop	r15
    1ad0:	ef 90       	pop	r14
    1ad2:	08 95       	ret

00001ad4 <xQueueGenericReset>:
    1ad4:	1f 93       	push	r17
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	ec 01       	movw	r28, r24
    1adc:	16 2f       	mov	r17, r22
    1ade:	89 2b       	or	r24, r25
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <xQueueGenericReset+0x10>
    1ae2:	3e c0       	rjmp	.+124    	; 0x1b60 <xQueueGenericReset+0x8c>
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	0f 92       	push	r0
    1aea:	48 81       	ld	r20, Y
    1aec:	59 81       	ldd	r21, Y+1	; 0x01
    1aee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af0:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1af2:	9a 01       	movw	r18, r20
    1af4:	86 9f       	mul	r24, r22
    1af6:	20 0d       	add	r18, r0
    1af8:	31 1d       	adc	r19, r1
    1afa:	11 24       	eor	r1, r1
    1afc:	2c 83       	std	Y+4, r18	; 0x04
    1afe:	3d 83       	std	Y+5, r19	; 0x05
    1b00:	1a 8e       	std	Y+26, r1	; 0x1a
    1b02:	4a 83       	std	Y+2, r20	; 0x02
    1b04:	5b 83       	std	Y+3, r21	; 0x03
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	68 9f       	mul	r22, r24
    1b0c:	90 01       	movw	r18, r0
    1b0e:	69 9f       	mul	r22, r25
    1b10:	30 0d       	add	r19, r0
    1b12:	11 24       	eor	r1, r1
    1b14:	ca 01       	movw	r24, r20
    1b16:	82 0f       	add	r24, r18
    1b18:	93 1f       	adc	r25, r19
    1b1a:	8e 83       	std	Y+6, r24	; 0x06
    1b1c:	9f 83       	std	Y+7, r25	; 0x07
    1b1e:	8f ef       	ldi	r24, 0xFF	; 255
    1b20:	8d 8f       	std	Y+29, r24	; 0x1d
    1b22:	8e 8f       	std	Y+30, r24	; 0x1e
    1b24:	11 11       	cpse	r17, r1
    1b26:	13 c0       	rjmp	.+38     	; 0x1b4e <xQueueGenericReset+0x7a>
    1b28:	88 85       	ldd	r24, Y+8	; 0x08
    1b2a:	81 11       	cpse	r24, r1
    1b2c:	07 c0       	rjmp	.+14     	; 0x1b3c <xQueueGenericReset+0x68>
    1b2e:	0f 90       	pop	r0
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	df 91       	pop	r29
    1b36:	cf 91       	pop	r28
    1b38:	1f 91       	pop	r17
    1b3a:	08 95       	ret
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	08 96       	adiw	r24, 0x08	; 8
    1b40:	0e 94 3a 18 	call	0x3074	; 0x3074 <xTaskRemoveFromEventList>
    1b44:	88 23       	and	r24, r24
    1b46:	99 f3       	breq	.-26     	; 0x1b2e <xQueueGenericReset+0x5a>
    1b48:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vPortYield>
    1b4c:	f0 cf       	rjmp	.-32     	; 0x1b2e <xQueueGenericReset+0x5a>
    1b4e:	ce 01       	movw	r24, r28
    1b50:	08 96       	adiw	r24, 0x08	; 8
    1b52:	0e 94 20 0a 	call	0x1440	; 0x1440 <vListInitialise>
    1b56:	ce 01       	movw	r24, r28
    1b58:	41 96       	adiw	r24, 0x11	; 17
    1b5a:	0e 94 20 0a 	call	0x1440	; 0x1440 <vListInitialise>
    1b5e:	e7 cf       	rjmp	.-50     	; 0x1b2e <xQueueGenericReset+0x5a>
    1b60:	63 e0       	ldi	r22, 0x03	; 3
    1b62:	71 e0       	ldi	r23, 0x01	; 1
    1b64:	86 e1       	ldi	r24, 0x16	; 22
    1b66:	90 e2       	ldi	r25, 0x20	; 32
    1b68:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    1b6c:	bb cf       	rjmp	.-138    	; 0x1ae4 <xQueueGenericReset+0x10>

00001b6e <xQueueGenericCreate>:
    1b6e:	ff 92       	push	r15
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	18 2f       	mov	r17, r24
    1b7a:	06 2f       	mov	r16, r22
    1b7c:	f4 2e       	mov	r15, r20
    1b7e:	88 23       	and	r24, r24
    1b80:	99 f1       	breq	.+102    	; 0x1be8 <xQueueGenericCreate+0x7a>
    1b82:	00 23       	and	r16, r16
    1b84:	d1 f0       	breq	.+52     	; 0x1bba <xQueueGenericCreate+0x4c>
    1b86:	10 9f       	mul	r17, r16
    1b88:	c0 01       	movw	r24, r0
    1b8a:	11 24       	eor	r1, r1
    1b8c:	81 96       	adiw	r24, 0x21	; 33
    1b8e:	0e 94 56 09 	call	0x12ac	; 0x12ac <pvPortMalloc>
    1b92:	ec 01       	movw	r28, r24
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	51 f0       	breq	.+20     	; 0x1bac <xQueueGenericCreate+0x3e>
    1b98:	81 96       	adiw	r24, 0x21	; 33
    1b9a:	88 83       	st	Y, r24
    1b9c:	99 83       	std	Y+1, r25	; 0x01
    1b9e:	1b 8f       	std	Y+27, r17	; 0x1b
    1ba0:	0c 8f       	std	Y+28, r16	; 0x1c
    1ba2:	61 e0       	ldi	r22, 0x01	; 1
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <xQueueGenericReset>
    1baa:	f8 a2       	std	Y+32, r15	; 0x20
    1bac:	ce 01       	movw	r24, r28
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	1f 91       	pop	r17
    1bb4:	0f 91       	pop	r16
    1bb6:	ff 90       	pop	r15
    1bb8:	08 95       	ret
    1bba:	81 e2       	ldi	r24, 0x21	; 33
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	0e 94 56 09 	call	0x12ac	; 0x12ac <pvPortMalloc>
    1bc2:	ec 01       	movw	r28, r24
    1bc4:	89 2b       	or	r24, r25
    1bc6:	91 f3       	breq	.-28     	; 0x1bac <xQueueGenericCreate+0x3e>
    1bc8:	c8 83       	st	Y, r28
    1bca:	d9 83       	std	Y+1, r29	; 0x01
    1bcc:	1b 8f       	std	Y+27, r17	; 0x1b
    1bce:	0c 8f       	std	Y+28, r16	; 0x1c
    1bd0:	61 e0       	ldi	r22, 0x01	; 1
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <xQueueGenericReset>
    1bd8:	f8 a2       	std	Y+32, r15	; 0x20
    1bda:	ce 01       	movw	r24, r28
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	ff 90       	pop	r15
    1be6:	08 95       	ret
    1be8:	66 e7       	ldi	r22, 0x76	; 118
    1bea:	71 e0       	ldi	r23, 0x01	; 1
    1bec:	86 e1       	ldi	r24, 0x16	; 22
    1bee:	90 e2       	ldi	r25, 0x20	; 32
    1bf0:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    1bf4:	c6 cf       	rjmp	.-116    	; 0x1b82 <xQueueGenericCreate+0x14>

00001bf6 <xQueueGenericSend>:
    1bf6:	bf 92       	push	r11
    1bf8:	cf 92       	push	r12
    1bfa:	df 92       	push	r13
    1bfc:	ef 92       	push	r14
    1bfe:	ff 92       	push	r15
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	25 97       	sbiw	r28, 0x05	; 5
    1c0e:	cd bf       	out	0x3d, r28	; 61
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	8c 01       	movw	r16, r24
    1c14:	6b 01       	movw	r12, r22
    1c16:	4c 83       	std	Y+4, r20	; 0x04
    1c18:	5d 83       	std	Y+5, r21	; 0x05
    1c1a:	b2 2e       	mov	r11, r18
    1c1c:	89 2b       	or	r24, r25
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <xQueueGenericSend+0x2c>
    1c20:	b2 c0       	rjmp	.+356    	; 0x1d86 <xQueueGenericSend+0x190>
    1c22:	c1 14       	cp	r12, r1
    1c24:	d1 04       	cpc	r13, r1
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <xQueueGenericSend+0x34>
    1c28:	a2 c0       	rjmp	.+324    	; 0x1d6e <xQueueGenericSend+0x178>
    1c2a:	f2 e0       	ldi	r31, 0x02	; 2
    1c2c:	bf 16       	cp	r11, r31
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <xQueueGenericSend+0x3c>
    1c30:	7d c0       	rjmp	.+250    	; 0x1d2c <xQueueGenericSend+0x136>
    1c32:	f8 01       	movw	r30, r16
    1c34:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	78 01       	movw	r14, r16
    1c3a:	f8 e0       	ldi	r31, 0x08	; 8
    1c3c:	ef 0e       	add	r14, r31
    1c3e:	f1 1c       	adc	r15, r1
    1c40:	10 c0       	rjmp	.+32     	; 0x1c62 <xQueueGenericSend+0x6c>
    1c42:	6c 81       	ldd	r22, Y+4	; 0x04
    1c44:	7d 81       	ldd	r23, Y+5	; 0x05
    1c46:	c7 01       	movw	r24, r14
    1c48:	0e 94 1a 18 	call	0x3034	; 0x3034 <vTaskPlaceOnEventList>
    1c4c:	c8 01       	movw	r24, r16
    1c4e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <prvUnlockQueue>
    1c52:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskResumeAll>
    1c56:	88 23       	and	r24, r24
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <xQueueGenericSend+0x66>
    1c5a:	4a c0       	rjmp	.+148    	; 0x1cf0 <xQueueGenericSend+0xfa>
    1c5c:	f8 01       	movw	r30, r16
    1c5e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c60:	21 e0       	ldi	r18, 0x01	; 1
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	0f 92       	push	r0
    1c68:	f8 01       	movw	r30, r16
    1c6a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c6c:	98 17       	cp	r25, r24
    1c6e:	08 f4       	brcc	.+2      	; 0x1c72 <xQueueGenericSend+0x7c>
    1c70:	42 c0       	rjmp	.+132    	; 0x1cf6 <xQueueGenericSend+0x100>
    1c72:	f2 e0       	ldi	r31, 0x02	; 2
    1c74:	bf 16       	cp	r11, r31
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <xQueueGenericSend+0x84>
    1c78:	3e c0       	rjmp	.+124    	; 0x1cf6 <xQueueGenericSend+0x100>
    1c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7e:	89 2b       	or	r24, r25
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <xQueueGenericSend+0x8e>
    1c82:	60 c0       	rjmp	.+192    	; 0x1d44 <xQueueGenericSend+0x14e>
    1c84:	22 23       	and	r18, r18
    1c86:	59 f1       	breq	.+86     	; 0x1cde <xQueueGenericSend+0xe8>
    1c88:	0f 90       	pop	r0
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <vTaskSuspendAll>
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	0f 92       	push	r0
    1c96:	f8 01       	movw	r30, r16
    1c98:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c9a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c9c:	39 f1       	breq	.+78     	; 0x1cec <xQueueGenericSend+0xf6>
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ca2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ca4:	09 f1       	breq	.+66     	; 0x1ce8 <xQueueGenericSend+0xf2>
    1ca6:	0f 90       	pop	r0
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	be 01       	movw	r22, r28
    1cac:	6c 5f       	subi	r22, 0xFC	; 252
    1cae:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	0e 94 9c 18 	call	0x3138	; 0x3138 <xTaskCheckForTimeOut>
    1cb8:	81 11       	cpse	r24, r1
    1cba:	48 c0       	rjmp	.+144    	; 0x1d4c <xQueueGenericSend+0x156>
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	0f 92       	push	r0
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1cc6:	0f 90       	pop	r0
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	83 8d       	ldd	r24, Z+27	; 0x1b
    1ccc:	98 17       	cp	r25, r24
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <xQueueGenericSend+0xdc>
    1cd0:	b8 cf       	rjmp	.-144    	; 0x1c42 <xQueueGenericSend+0x4c>
    1cd2:	c8 01       	movw	r24, r16
    1cd4:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <prvUnlockQueue>
    1cd8:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskResumeAll>
    1cdc:	bf cf       	rjmp	.-130    	; 0x1c5c <xQueueGenericSend+0x66>
    1cde:	ce 01       	movw	r24, r28
    1ce0:	01 96       	adiw	r24, 0x01	; 1
    1ce2:	0e 94 91 18 	call	0x3122	; 0x3122 <vTaskInternalSetTimeOutState>
    1ce6:	d0 cf       	rjmp	.-96     	; 0x1c88 <xQueueGenericSend+0x92>
    1ce8:	16 8e       	std	Z+30, r1	; 0x1e
    1cea:	dd cf       	rjmp	.-70     	; 0x1ca6 <xQueueGenericSend+0xb0>
    1cec:	15 8e       	std	Z+29, r1	; 0x1d
    1cee:	d7 cf       	rjmp	.-82     	; 0x1c9e <xQueueGenericSend+0xa8>
    1cf0:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vPortYield>
    1cf4:	b3 cf       	rjmp	.-154    	; 0x1c5c <xQueueGenericSend+0x66>
    1cf6:	4b 2d       	mov	r20, r11
    1cf8:	b6 01       	movw	r22, r12
    1cfa:	c8 01       	movw	r24, r16
    1cfc:	0e 94 a5 0c 	call	0x194a	; 0x194a <prvCopyDataToQueue>
    1d00:	f8 01       	movw	r30, r16
    1d02:	91 89       	ldd	r25, Z+17	; 0x11
    1d04:	91 11       	cpse	r25, r1
    1d06:	2c c0       	rjmp	.+88     	; 0x1d60 <xQueueGenericSend+0x16a>
    1d08:	81 11       	cpse	r24, r1
    1d0a:	27 c0       	rjmp	.+78     	; 0x1d5a <xQueueGenericSend+0x164>
    1d0c:	0f 90       	pop	r0
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	25 96       	adiw	r28, 0x05	; 5
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	1f 91       	pop	r17
    1d1e:	0f 91       	pop	r16
    1d20:	ff 90       	pop	r15
    1d22:	ef 90       	pop	r14
    1d24:	df 90       	pop	r13
    1d26:	cf 90       	pop	r12
    1d28:	bf 90       	pop	r11
    1d2a:	08 95       	ret
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1d30:	81 30       	cpi	r24, 0x01	; 1
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <xQueueGenericSend+0x140>
    1d34:	80 cf       	rjmp	.-256    	; 0x1c36 <xQueueGenericSend+0x40>
    1d36:	63 ef       	ldi	r22, 0xF3	; 243
    1d38:	72 e0       	ldi	r23, 0x02	; 2
    1d3a:	86 e1       	ldi	r24, 0x16	; 22
    1d3c:	90 e2       	ldi	r25, 0x20	; 32
    1d3e:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    1d42:	77 cf       	rjmp	.-274    	; 0x1c32 <xQueueGenericSend+0x3c>
    1d44:	0f 90       	pop	r0
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	e3 cf       	rjmp	.-58     	; 0x1d12 <xQueueGenericSend+0x11c>
    1d4c:	c8 01       	movw	r24, r16
    1d4e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <prvUnlockQueue>
    1d52:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskResumeAll>
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	dc cf       	rjmp	.-72     	; 0x1d12 <xQueueGenericSend+0x11c>
    1d5a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vPortYield>
    1d5e:	d6 cf       	rjmp	.-84     	; 0x1d0c <xQueueGenericSend+0x116>
    1d60:	c8 01       	movw	r24, r16
    1d62:	41 96       	adiw	r24, 0x11	; 17
    1d64:	0e 94 3a 18 	call	0x3074	; 0x3074 <xTaskRemoveFromEventList>
    1d68:	88 23       	and	r24, r24
    1d6a:	81 f2       	breq	.-96     	; 0x1d0c <xQueueGenericSend+0x116>
    1d6c:	f6 cf       	rjmp	.-20     	; 0x1d5a <xQueueGenericSend+0x164>
    1d6e:	f8 01       	movw	r30, r16
    1d70:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d72:	88 23       	and	r24, r24
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <xQueueGenericSend+0x182>
    1d76:	59 cf       	rjmp	.-334    	; 0x1c2a <xQueueGenericSend+0x34>
    1d78:	62 ef       	ldi	r22, 0xF2	; 242
    1d7a:	72 e0       	ldi	r23, 0x02	; 2
    1d7c:	86 e1       	ldi	r24, 0x16	; 22
    1d7e:	90 e2       	ldi	r25, 0x20	; 32
    1d80:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    1d84:	52 cf       	rjmp	.-348    	; 0x1c2a <xQueueGenericSend+0x34>
    1d86:	61 ef       	ldi	r22, 0xF1	; 241
    1d88:	72 e0       	ldi	r23, 0x02	; 2
    1d8a:	86 e1       	ldi	r24, 0x16	; 22
    1d8c:	90 e2       	ldi	r25, 0x20	; 32
    1d8e:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    1d92:	47 cf       	rjmp	.-370    	; 0x1c22 <xQueueGenericSend+0x2c>

00001d94 <xQueueCreateMutex>:
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	48 2f       	mov	r20, r24
    1d9a:	60 e0       	ldi	r22, 0x00	; 0
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueGenericCreate>
    1da2:	ec 01       	movw	r28, r24
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	61 f0       	breq	.+24     	; 0x1dc0 <xQueueCreateMutex+0x2c>
    1da8:	1c 82       	std	Y+4, r1	; 0x04
    1daa:	1d 82       	std	Y+5, r1	; 0x05
    1dac:	18 82       	st	Y, r1
    1dae:	19 82       	std	Y+1, r1	; 0x01
    1db0:	1e 82       	std	Y+6, r1	; 0x06
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	40 e0       	ldi	r20, 0x00	; 0
    1db6:	50 e0       	ldi	r21, 0x00	; 0
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xQueueGenericSend>
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	df 91       	pop	r29
    1dc4:	cf 91       	pop	r28
    1dc6:	08 95       	ret

00001dc8 <xQueueGenericSendFromISR>:
    1dc8:	cf 92       	push	r12
    1dca:	df 92       	push	r13
    1dcc:	ef 92       	push	r14
    1dce:	ff 92       	push	r15
    1dd0:	0f 93       	push	r16
    1dd2:	1f 93       	push	r17
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	ec 01       	movw	r28, r24
    1dda:	8b 01       	movw	r16, r22
    1ddc:	6a 01       	movw	r12, r20
    1dde:	f2 2e       	mov	r15, r18
    1de0:	89 2b       	or	r24, r25
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <xQueueGenericSendFromISR+0x1e>
    1de4:	45 c0       	rjmp	.+138    	; 0x1e70 <xQueueGenericSendFromISR+0xa8>
    1de6:	01 15       	cp	r16, r1
    1de8:	11 05       	cpc	r17, r1
    1dea:	c1 f1       	breq	.+112    	; 0x1e5c <xQueueGenericSendFromISR+0x94>
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	f8 16       	cp	r15, r24
    1df0:	71 f0       	breq	.+28     	; 0x1e0e <xQueueGenericSendFromISR+0x46>
    1df2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1df4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1df6:	98 17       	cp	r25, r24
    1df8:	a0 f0       	brcs	.+40     	; 0x1e22 <xQueueGenericSendFromISR+0x5a>
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	ff 90       	pop	r15
    1e06:	ef 90       	pop	r14
    1e08:	df 90       	pop	r13
    1e0a:	cf 90       	pop	r12
    1e0c:	08 95       	ret
    1e0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e10:	81 30       	cpi	r24, 0x01	; 1
    1e12:	31 f0       	breq	.+12     	; 0x1e20 <xQueueGenericSendFromISR+0x58>
    1e14:	65 ec       	ldi	r22, 0xC5	; 197
    1e16:	73 e0       	ldi	r23, 0x03	; 3
    1e18:	86 e1       	ldi	r24, 0x16	; 22
    1e1a:	90 e2       	ldi	r25, 0x20	; 32
    1e1c:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    1e20:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e22:	ee 8c       	ldd	r14, Y+30	; 0x1e
    1e24:	4f 2d       	mov	r20, r15
    1e26:	b8 01       	movw	r22, r16
    1e28:	ce 01       	movw	r24, r28
    1e2a:	0e 94 a5 0c 	call	0x194a	; 0x194a <prvCopyDataToQueue>
    1e2e:	ef ef       	ldi	r30, 0xFF	; 255
    1e30:	ee 16       	cp	r14, r30
    1e32:	21 f0       	breq	.+8      	; 0x1e3c <xQueueGenericSendFromISR+0x74>
    1e34:	e3 94       	inc	r14
    1e36:	ee 8e       	std	Y+30, r14	; 0x1e
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	e0 cf       	rjmp	.-64     	; 0x1dfc <xQueueGenericSendFromISR+0x34>
    1e3c:	89 89       	ldd	r24, Y+17	; 0x11
    1e3e:	88 23       	and	r24, r24
    1e40:	d9 f3       	breq	.-10     	; 0x1e38 <xQueueGenericSendFromISR+0x70>
    1e42:	ce 01       	movw	r24, r28
    1e44:	41 96       	adiw	r24, 0x11	; 17
    1e46:	0e 94 3a 18 	call	0x3074	; 0x3074 <xTaskRemoveFromEventList>
    1e4a:	88 23       	and	r24, r24
    1e4c:	a9 f3       	breq	.-22     	; 0x1e38 <xQueueGenericSendFromISR+0x70>
    1e4e:	c1 14       	cp	r12, r1
    1e50:	d1 04       	cpc	r13, r1
    1e52:	91 f3       	breq	.-28     	; 0x1e38 <xQueueGenericSendFromISR+0x70>
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	f6 01       	movw	r30, r12
    1e58:	80 83       	st	Z, r24
    1e5a:	d0 cf       	rjmp	.-96     	; 0x1dfc <xQueueGenericSendFromISR+0x34>
    1e5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e5e:	88 23       	and	r24, r24
    1e60:	29 f2       	breq	.-118    	; 0x1dec <xQueueGenericSendFromISR+0x24>
    1e62:	64 ec       	ldi	r22, 0xC4	; 196
    1e64:	73 e0       	ldi	r23, 0x03	; 3
    1e66:	86 e1       	ldi	r24, 0x16	; 22
    1e68:	90 e2       	ldi	r25, 0x20	; 32
    1e6a:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    1e6e:	be cf       	rjmp	.-132    	; 0x1dec <xQueueGenericSendFromISR+0x24>
    1e70:	63 ec       	ldi	r22, 0xC3	; 195
    1e72:	73 e0       	ldi	r23, 0x03	; 3
    1e74:	86 e1       	ldi	r24, 0x16	; 22
    1e76:	90 e2       	ldi	r25, 0x20	; 32
    1e78:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    1e7c:	b4 cf       	rjmp	.-152    	; 0x1de6 <xQueueGenericSendFromISR+0x1e>

00001e7e <xQueueGiveFromISR>:
    1e7e:	0f 93       	push	r16
    1e80:	1f 93       	push	r17
    1e82:	cf 93       	push	r28
    1e84:	df 93       	push	r29
    1e86:	ec 01       	movw	r28, r24
    1e88:	8b 01       	movw	r16, r22
    1e8a:	89 2b       	or	r24, r25
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <xQueueGiveFromISR+0x12>
    1e8e:	43 c0       	rjmp	.+134    	; 0x1f16 <xQueueGiveFromISR+0x98>
    1e90:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e92:	81 11       	cpse	r24, r1
    1e94:	1b c0       	rjmp	.+54     	; 0x1ecc <xQueueGiveFromISR+0x4e>
    1e96:	88 81       	ld	r24, Y
    1e98:	99 81       	ldd	r25, Y+1	; 0x01
    1e9a:	89 2b       	or	r24, r25
    1e9c:	09 f1       	breq	.+66     	; 0x1ee0 <xQueueGiveFromISR+0x62>
    1e9e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ea0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ea2:	89 17       	cp	r24, r25
    1ea4:	68 f4       	brcc	.+26     	; 0x1ec0 <xQueueGiveFromISR+0x42>
    1ea6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ea8:	8f 5f       	subi	r24, 0xFF	; 255
    1eaa:	8a 8f       	std	Y+26, r24	; 0x1a
    1eac:	9f 3f       	cpi	r25, 0xFF	; 255
    1eae:	19 f1       	breq	.+70     	; 0x1ef6 <xQueueGiveFromISR+0x78>
    1eb0:	9f 5f       	subi	r25, 0xFF	; 255
    1eb2:	9e 8f       	std	Y+30, r25	; 0x1e
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	df 91       	pop	r29
    1eb8:	cf 91       	pop	r28
    1eba:	1f 91       	pop	r17
    1ebc:	0f 91       	pop	r16
    1ebe:	08 95       	ret
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	08 95       	ret
    1ecc:	64 e6       	ldi	r22, 0x64	; 100
    1ece:	74 e0       	ldi	r23, 0x04	; 4
    1ed0:	86 e1       	ldi	r24, 0x16	; 22
    1ed2:	90 e2       	ldi	r25, 0x20	; 32
    1ed4:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    1ed8:	88 81       	ld	r24, Y
    1eda:	99 81       	ldd	r25, Y+1	; 0x01
    1edc:	89 2b       	or	r24, r25
    1ede:	f9 f6       	brne	.-66     	; 0x1e9e <xQueueGiveFromISR+0x20>
    1ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee4:	89 2b       	or	r24, r25
    1ee6:	d9 f2       	breq	.-74     	; 0x1e9e <xQueueGiveFromISR+0x20>
    1ee8:	69 e6       	ldi	r22, 0x69	; 105
    1eea:	74 e0       	ldi	r23, 0x04	; 4
    1eec:	86 e1       	ldi	r24, 0x16	; 22
    1eee:	90 e2       	ldi	r25, 0x20	; 32
    1ef0:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    1ef4:	d4 cf       	rjmp	.-88     	; 0x1e9e <xQueueGiveFromISR+0x20>
    1ef6:	89 89       	ldd	r24, Y+17	; 0x11
    1ef8:	88 23       	and	r24, r24
    1efa:	e1 f2       	breq	.-72     	; 0x1eb4 <xQueueGiveFromISR+0x36>
    1efc:	ce 01       	movw	r24, r28
    1efe:	41 96       	adiw	r24, 0x11	; 17
    1f00:	0e 94 3a 18 	call	0x3074	; 0x3074 <xTaskRemoveFromEventList>
    1f04:	88 23       	and	r24, r24
    1f06:	b1 f2       	breq	.-84     	; 0x1eb4 <xQueueGiveFromISR+0x36>
    1f08:	01 15       	cp	r16, r1
    1f0a:	11 05       	cpc	r17, r1
    1f0c:	99 f2       	breq	.-90     	; 0x1eb4 <xQueueGiveFromISR+0x36>
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	f8 01       	movw	r30, r16
    1f12:	80 83       	st	Z, r24
    1f14:	d0 cf       	rjmp	.-96     	; 0x1eb6 <xQueueGiveFromISR+0x38>
    1f16:	60 e6       	ldi	r22, 0x60	; 96
    1f18:	74 e0       	ldi	r23, 0x04	; 4
    1f1a:	86 e1       	ldi	r24, 0x16	; 22
    1f1c:	90 e2       	ldi	r25, 0x20	; 32
    1f1e:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    1f22:	b6 cf       	rjmp	.-148    	; 0x1e90 <xQueueGiveFromISR+0x12>

00001f24 <xQueueReceive>:
    1f24:	af 92       	push	r10
    1f26:	bf 92       	push	r11
    1f28:	cf 92       	push	r12
    1f2a:	df 92       	push	r13
    1f2c:	ff 92       	push	r15
    1f2e:	0f 93       	push	r16
    1f30:	1f 93       	push	r17
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	25 97       	sbiw	r28, 0x05	; 5
    1f3c:	cd bf       	out	0x3d, r28	; 61
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	8c 01       	movw	r16, r24
    1f42:	5b 01       	movw	r10, r22
    1f44:	4c 83       	std	Y+4, r20	; 0x04
    1f46:	5d 83       	std	Y+5, r21	; 0x05
    1f48:	89 2b       	or	r24, r25
    1f4a:	09 f4       	brne	.+2      	; 0x1f4e <xQueueReceive+0x2a>
    1f4c:	a1 c0       	rjmp	.+322    	; 0x2090 <xQueueReceive+0x16c>
    1f4e:	a1 14       	cp	r10, r1
    1f50:	b1 04       	cpc	r11, r1
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <xQueueReceive+0x32>
    1f54:	91 c0       	rjmp	.+290    	; 0x2078 <xQueueReceive+0x154>
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	68 01       	movw	r12, r16
    1f5a:	f1 e1       	ldi	r31, 0x11	; 17
    1f5c:	cf 0e       	add	r12, r31
    1f5e:	d1 1c       	adc	r13, r1
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	0f 92       	push	r0
    1f66:	f8 01       	movw	r30, r16
    1f68:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1f6a:	f1 10       	cpse	r15, r1
    1f6c:	6a c0       	rjmp	.+212    	; 0x2042 <xQueueReceive+0x11e>
    1f6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f70:	9d 81       	ldd	r25, Y+5	; 0x05
    1f72:	89 2b       	or	r24, r25
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <xQueueReceive+0x54>
    1f76:	73 c0       	rjmp	.+230    	; 0x205e <xQueueReceive+0x13a>
    1f78:	22 23       	and	r18, r18
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <xQueueReceive+0x5a>
    1f7c:	59 c0       	rjmp	.+178    	; 0x2030 <xQueueReceive+0x10c>
    1f7e:	0f 90       	pop	r0
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <vTaskSuspendAll>
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	0f 92       	push	r0
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1f90:	8f 3f       	cpi	r24, 0xFF	; 255
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <xQueueReceive+0x72>
    1f94:	54 c0       	rjmp	.+168    	; 0x203e <xQueueReceive+0x11a>
    1f96:	f8 01       	movw	r30, r16
    1f98:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f9a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <xQueueReceive+0x7c>
    1f9e:	4d c0       	rjmp	.+154    	; 0x203a <xQueueReceive+0x116>
    1fa0:	0f 90       	pop	r0
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	be 01       	movw	r22, r28
    1fa6:	6c 5f       	subi	r22, 0xFC	; 252
    1fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1faa:	ce 01       	movw	r24, r28
    1fac:	01 96       	adiw	r24, 0x01	; 1
    1fae:	0e 94 9c 18 	call	0x3138	; 0x3138 <xTaskCheckForTimeOut>
    1fb2:	81 11       	cpse	r24, r1
    1fb4:	22 c0       	rjmp	.+68     	; 0x1ffa <xQueueReceive+0xd6>
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	0f 92       	push	r0
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fc0:	0f 90       	pop	r0
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	81 11       	cpse	r24, r1
    1fc6:	12 c0       	rjmp	.+36     	; 0x1fec <xQueueReceive+0xc8>
    1fc8:	6c 81       	ldd	r22, Y+4	; 0x04
    1fca:	7d 81       	ldd	r23, Y+5	; 0x05
    1fcc:	c6 01       	movw	r24, r12
    1fce:	0e 94 1a 18 	call	0x3034	; 0x3034 <vTaskPlaceOnEventList>
    1fd2:	c8 01       	movw	r24, r16
    1fd4:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <prvUnlockQueue>
    1fd8:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskResumeAll>
    1fdc:	88 23       	and	r24, r24
    1fde:	11 f0       	breq	.+4      	; 0x1fe4 <xQueueReceive+0xc0>
    1fe0:	21 e0       	ldi	r18, 0x01	; 1
    1fe2:	be cf       	rjmp	.-132    	; 0x1f60 <xQueueReceive+0x3c>
    1fe4:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vPortYield>
    1fe8:	21 e0       	ldi	r18, 0x01	; 1
    1fea:	ba cf       	rjmp	.-140    	; 0x1f60 <xQueueReceive+0x3c>
    1fec:	c8 01       	movw	r24, r16
    1fee:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <prvUnlockQueue>
    1ff2:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskResumeAll>
    1ff6:	21 e0       	ldi	r18, 0x01	; 1
    1ff8:	b3 cf       	rjmp	.-154    	; 0x1f60 <xQueueReceive+0x3c>
    1ffa:	c8 01       	movw	r24, r16
    1ffc:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <prvUnlockQueue>
    2000:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskResumeAll>
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	0f 92       	push	r0
    200a:	f8 01       	movw	r30, r16
    200c:	82 8d       	ldd	r24, Z+26	; 0x1a
    200e:	0f 90       	pop	r0
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	81 11       	cpse	r24, r1
    2014:	e5 cf       	rjmp	.-54     	; 0x1fe0 <xQueueReceive+0xbc>
    2016:	25 96       	adiw	r28, 0x05	; 5
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	de bf       	out	0x3e, r29	; 62
    201c:	df 91       	pop	r29
    201e:	cf 91       	pop	r28
    2020:	1f 91       	pop	r17
    2022:	0f 91       	pop	r16
    2024:	ff 90       	pop	r15
    2026:	df 90       	pop	r13
    2028:	cf 90       	pop	r12
    202a:	bf 90       	pop	r11
    202c:	af 90       	pop	r10
    202e:	08 95       	ret
    2030:	ce 01       	movw	r24, r28
    2032:	01 96       	adiw	r24, 0x01	; 1
    2034:	0e 94 91 18 	call	0x3122	; 0x3122 <vTaskInternalSetTimeOutState>
    2038:	a2 cf       	rjmp	.-188    	; 0x1f7e <xQueueReceive+0x5a>
    203a:	16 8e       	std	Z+30, r1	; 0x1e
    203c:	b1 cf       	rjmp	.-158    	; 0x1fa0 <xQueueReceive+0x7c>
    203e:	15 8e       	std	Z+29, r1	; 0x1d
    2040:	aa cf       	rjmp	.-172    	; 0x1f96 <xQueueReceive+0x72>
    2042:	b5 01       	movw	r22, r10
    2044:	c8 01       	movw	r24, r16
    2046:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <prvCopyDataFromQueue>
    204a:	fa 94       	dec	r15
    204c:	f8 01       	movw	r30, r16
    204e:	f2 8e       	std	Z+26, r15	; 0x1a
    2050:	80 85       	ldd	r24, Z+8	; 0x08
    2052:	81 11       	cpse	r24, r1
    2054:	08 c0       	rjmp	.+16     	; 0x2066 <xQueueReceive+0x142>
    2056:	0f 90       	pop	r0
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	dc cf       	rjmp	.-72     	; 0x2016 <xQueueReceive+0xf2>
    205e:	0f 90       	pop	r0
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	d8 cf       	rjmp	.-80     	; 0x2016 <xQueueReceive+0xf2>
    2066:	c8 01       	movw	r24, r16
    2068:	08 96       	adiw	r24, 0x08	; 8
    206a:	0e 94 3a 18 	call	0x3074	; 0x3074 <xTaskRemoveFromEventList>
    206e:	88 23       	and	r24, r24
    2070:	91 f3       	breq	.-28     	; 0x2056 <xQueueReceive+0x132>
    2072:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vPortYield>
    2076:	ef cf       	rjmp	.-34     	; 0x2056 <xQueueReceive+0x132>
    2078:	f8 01       	movw	r30, r16
    207a:	84 8d       	ldd	r24, Z+28	; 0x1c
    207c:	88 23       	and	r24, r24
    207e:	09 f4       	brne	.+2      	; 0x2082 <xQueueReceive+0x15e>
    2080:	6a cf       	rjmp	.-300    	; 0x1f56 <xQueueReceive+0x32>
    2082:	64 e0       	ldi	r22, 0x04	; 4
    2084:	75 e0       	ldi	r23, 0x05	; 5
    2086:	86 e1       	ldi	r24, 0x16	; 22
    2088:	90 e2       	ldi	r25, 0x20	; 32
    208a:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    208e:	63 cf       	rjmp	.-314    	; 0x1f56 <xQueueReceive+0x32>
    2090:	60 e0       	ldi	r22, 0x00	; 0
    2092:	75 e0       	ldi	r23, 0x05	; 5
    2094:	86 e1       	ldi	r24, 0x16	; 22
    2096:	90 e2       	ldi	r25, 0x20	; 32
    2098:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    209c:	58 cf       	rjmp	.-336    	; 0x1f4e <xQueueReceive+0x2a>

0000209e <xQueueSemaphoreTake>:
    209e:	df 92       	push	r13
    20a0:	ef 92       	push	r14
    20a2:	ff 92       	push	r15
    20a4:	0f 93       	push	r16
    20a6:	1f 93       	push	r17
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
    20b0:	25 97       	sbiw	r28, 0x05	; 5
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	8c 01       	movw	r16, r24
    20b8:	6c 83       	std	Y+4, r22	; 0x04
    20ba:	7d 83       	std	Y+5, r23	; 0x05
    20bc:	89 2b       	or	r24, r25
    20be:	09 f4       	brne	.+2      	; 0x20c2 <xQueueSemaphoreTake+0x24>
    20c0:	d0 c0       	rjmp	.+416    	; 0x2262 <xQueueSemaphoreTake+0x1c4>
    20c2:	d8 01       	movw	r26, r16
    20c4:	5c 96       	adiw	r26, 0x1c	; 28
    20c6:	8c 91       	ld	r24, X
    20c8:	81 11       	cpse	r24, r1
    20ca:	bb c0       	rjmp	.+374    	; 0x2242 <xQueueSemaphoreTake+0x1a4>
    20cc:	d1 2c       	mov	r13, r1
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	78 01       	movw	r14, r16
    20d2:	b1 e1       	ldi	r27, 0x11	; 17
    20d4:	eb 0e       	add	r14, r27
    20d6:	f1 1c       	adc	r15, r1
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	f8 94       	cli
    20dc:	0f 92       	push	r0
    20de:	f8 01       	movw	r30, r16
    20e0:	82 8d       	ldd	r24, Z+26	; 0x1a
    20e2:	81 11       	cpse	r24, r1
    20e4:	89 c0       	rjmp	.+274    	; 0x21f8 <xQueueSemaphoreTake+0x15a>
    20e6:	8c 81       	ldd	r24, Y+4	; 0x04
    20e8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ea:	89 2b       	or	r24, r25
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <xQueueSemaphoreTake+0x52>
    20ee:	9d c0       	rjmp	.+314    	; 0x222a <xQueueSemaphoreTake+0x18c>
    20f0:	22 23       	and	r18, r18
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <xQueueSemaphoreTake+0x58>
    20f4:	5f c0       	rjmp	.+190    	; 0x21b4 <xQueueSemaphoreTake+0x116>
    20f6:	0f 90       	pop	r0
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <vTaskSuspendAll>
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	0f 92       	push	r0
    2104:	d8 01       	movw	r26, r16
    2106:	5d 96       	adiw	r26, 0x1d	; 29
    2108:	8c 91       	ld	r24, X
    210a:	5d 97       	sbiw	r26, 0x1d	; 29
    210c:	8f 3f       	cpi	r24, 0xFF	; 255
    210e:	09 f4       	brne	.+2      	; 0x2112 <xQueueSemaphoreTake+0x74>
    2110:	56 c0       	rjmp	.+172    	; 0x21be <xQueueSemaphoreTake+0x120>
    2112:	f8 01       	movw	r30, r16
    2114:	86 8d       	ldd	r24, Z+30	; 0x1e
    2116:	8f 3f       	cpi	r24, 0xFF	; 255
    2118:	09 f4       	brne	.+2      	; 0x211c <xQueueSemaphoreTake+0x7e>
    211a:	58 c0       	rjmp	.+176    	; 0x21cc <xQueueSemaphoreTake+0x12e>
    211c:	0f 90       	pop	r0
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	be 01       	movw	r22, r28
    2122:	6c 5f       	subi	r22, 0xFC	; 252
    2124:	7f 4f       	sbci	r23, 0xFF	; 255
    2126:	ce 01       	movw	r24, r28
    2128:	01 96       	adiw	r24, 0x01	; 1
    212a:	0e 94 9c 18 	call	0x3138	; 0x3138 <xTaskCheckForTimeOut>
    212e:	81 11       	cpse	r24, r1
    2130:	23 c0       	rjmp	.+70     	; 0x2178 <xQueueSemaphoreTake+0xda>
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	0f 92       	push	r0
    2138:	d8 01       	movw	r26, r16
    213a:	5a 96       	adiw	r26, 0x1a	; 26
    213c:	8c 91       	ld	r24, X
    213e:	5a 97       	sbiw	r26, 0x1a	; 26
    2140:	0f 90       	pop	r0
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	81 11       	cpse	r24, r1
    2146:	44 c0       	rjmp	.+136    	; 0x21d0 <xQueueSemaphoreTake+0x132>
    2148:	f8 01       	movw	r30, r16
    214a:	80 81       	ld	r24, Z
    214c:	91 81       	ldd	r25, Z+1	; 0x01
    214e:	89 2b       	or	r24, r25
    2150:	09 f4       	brne	.+2      	; 0x2154 <xQueueSemaphoreTake+0xb6>
    2152:	45 c0       	rjmp	.+138    	; 0x21de <xQueueSemaphoreTake+0x140>
    2154:	6c 81       	ldd	r22, Y+4	; 0x04
    2156:	7d 81       	ldd	r23, Y+5	; 0x05
    2158:	c7 01       	movw	r24, r14
    215a:	0e 94 1a 18 	call	0x3034	; 0x3034 <vTaskPlaceOnEventList>
    215e:	c8 01       	movw	r24, r16
    2160:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <prvUnlockQueue>
    2164:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskResumeAll>
    2168:	88 23       	and	r24, r24
    216a:	11 f0       	breq	.+4      	; 0x2170 <xQueueSemaphoreTake+0xd2>
    216c:	21 e0       	ldi	r18, 0x01	; 1
    216e:	b4 cf       	rjmp	.-152    	; 0x20d8 <xQueueSemaphoreTake+0x3a>
    2170:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vPortYield>
    2174:	21 e0       	ldi	r18, 0x01	; 1
    2176:	b0 cf       	rjmp	.-160    	; 0x20d8 <xQueueSemaphoreTake+0x3a>
    2178:	c8 01       	movw	r24, r16
    217a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <prvUnlockQueue>
    217e:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskResumeAll>
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	0f 92       	push	r0
    2188:	f8 01       	movw	r30, r16
    218a:	82 8d       	ldd	r24, Z+26	; 0x1a
    218c:	0f 90       	pop	r0
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	81 11       	cpse	r24, r1
    2192:	ec cf       	rjmp	.-40     	; 0x216c <xQueueSemaphoreTake+0xce>
    2194:	dd 20       	and	r13, r13
    2196:	09 f4       	brne	.+2      	; 0x219a <xQueueSemaphoreTake+0xfc>
    2198:	72 c0       	rjmp	.+228    	; 0x227e <xQueueSemaphoreTake+0x1e0>
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	0f 92       	push	r0
    21a0:	81 89       	ldd	r24, Z+17	; 0x11
    21a2:	81 11       	cpse	r24, r1
    21a4:	65 c0       	rjmp	.+202    	; 0x2270 <xQueueSemaphoreTake+0x1d2>
    21a6:	60 e0       	ldi	r22, 0x00	; 0
    21a8:	f8 01       	movw	r30, r16
    21aa:	84 81       	ldd	r24, Z+4	; 0x04
    21ac:	95 81       	ldd	r25, Z+5	; 0x05
    21ae:	0e 94 c1 19 	call	0x3382	; 0x3382 <vTaskPriorityDisinheritAfterTimeout>
    21b2:	43 c0       	rjmp	.+134    	; 0x223a <xQueueSemaphoreTake+0x19c>
    21b4:	ce 01       	movw	r24, r28
    21b6:	01 96       	adiw	r24, 0x01	; 1
    21b8:	0e 94 91 18 	call	0x3122	; 0x3122 <vTaskInternalSetTimeOutState>
    21bc:	9c cf       	rjmp	.-200    	; 0x20f6 <xQueueSemaphoreTake+0x58>
    21be:	5d 96       	adiw	r26, 0x1d	; 29
    21c0:	1c 92       	st	X, r1
    21c2:	f8 01       	movw	r30, r16
    21c4:	86 8d       	ldd	r24, Z+30	; 0x1e
    21c6:	8f 3f       	cpi	r24, 0xFF	; 255
    21c8:	09 f0       	breq	.+2      	; 0x21cc <xQueueSemaphoreTake+0x12e>
    21ca:	a8 cf       	rjmp	.-176    	; 0x211c <xQueueSemaphoreTake+0x7e>
    21cc:	16 8e       	std	Z+30, r1	; 0x1e
    21ce:	a6 cf       	rjmp	.-180    	; 0x211c <xQueueSemaphoreTake+0x7e>
    21d0:	c8 01       	movw	r24, r16
    21d2:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <prvUnlockQueue>
    21d6:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskResumeAll>
    21da:	21 e0       	ldi	r18, 0x01	; 1
    21dc:	7d cf       	rjmp	.-262    	; 0x20d8 <xQueueSemaphoreTake+0x3a>
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	0f 92       	push	r0
    21e4:	14 96       	adiw	r26, 0x04	; 4
    21e6:	8d 91       	ld	r24, X+
    21e8:	9c 91       	ld	r25, X
    21ea:	15 97       	sbiw	r26, 0x05	; 5
    21ec:	0e 94 f7 18 	call	0x31ee	; 0x31ee <xTaskPriorityInherit>
    21f0:	d8 2e       	mov	r13, r24
    21f2:	0f 90       	pop	r0
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	ae cf       	rjmp	.-164    	; 0x2154 <xQueueSemaphoreTake+0xb6>
    21f8:	81 50       	subi	r24, 0x01	; 1
    21fa:	82 8f       	std	Z+26, r24	; 0x1a
    21fc:	80 81       	ld	r24, Z
    21fe:	91 81       	ldd	r25, Z+1	; 0x01
    2200:	89 2b       	or	r24, r25
    2202:	09 f4       	brne	.+2      	; 0x2206 <xQueueSemaphoreTake+0x168>
    2204:	3e c0       	rjmp	.+124    	; 0x2282 <xQueueSemaphoreTake+0x1e4>
    2206:	f8 01       	movw	r30, r16
    2208:	80 85       	ldd	r24, Z+8	; 0x08
    220a:	81 11       	cpse	r24, r1
    220c:	21 c0       	rjmp	.+66     	; 0x2250 <xQueueSemaphoreTake+0x1b2>
    220e:	0f 90       	pop	r0
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	25 96       	adiw	r28, 0x05	; 5
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	1f 91       	pop	r17
    2220:	0f 91       	pop	r16
    2222:	ff 90       	pop	r15
    2224:	ef 90       	pop	r14
    2226:	df 90       	pop	r13
    2228:	08 95       	ret
    222a:	dd 20       	and	r13, r13
    222c:	31 f0       	breq	.+12     	; 0x223a <xQueueSemaphoreTake+0x19c>
    222e:	61 ee       	ldi	r22, 0xE1	; 225
    2230:	75 e0       	ldi	r23, 0x05	; 5
    2232:	86 e1       	ldi	r24, 0x16	; 22
    2234:	90 e2       	ldi	r25, 0x20	; 32
    2236:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    223a:	0f 90       	pop	r0
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	e9 cf       	rjmp	.-46     	; 0x2214 <xQueueSemaphoreTake+0x176>
    2242:	65 e9       	ldi	r22, 0x95	; 149
    2244:	75 e0       	ldi	r23, 0x05	; 5
    2246:	86 e1       	ldi	r24, 0x16	; 22
    2248:	90 e2       	ldi	r25, 0x20	; 32
    224a:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    224e:	3e cf       	rjmp	.-388    	; 0x20cc <xQueueSemaphoreTake+0x2e>
    2250:	c8 01       	movw	r24, r16
    2252:	08 96       	adiw	r24, 0x08	; 8
    2254:	0e 94 3a 18 	call	0x3074	; 0x3074 <xTaskRemoveFromEventList>
    2258:	88 23       	and	r24, r24
    225a:	c9 f2       	breq	.-78     	; 0x220e <xQueueSemaphoreTake+0x170>
    225c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vPortYield>
    2260:	d6 cf       	rjmp	.-84     	; 0x220e <xQueueSemaphoreTake+0x170>
    2262:	61 e9       	ldi	r22, 0x91	; 145
    2264:	75 e0       	ldi	r23, 0x05	; 5
    2266:	86 e1       	ldi	r24, 0x16	; 22
    2268:	90 e2       	ldi	r25, 0x20	; 32
    226a:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    226e:	29 cf       	rjmp	.-430    	; 0x20c2 <xQueueSemaphoreTake+0x24>
    2270:	06 88       	ldd	r0, Z+22	; 0x16
    2272:	f7 89       	ldd	r31, Z+23	; 0x17
    2274:	e0 2d       	mov	r30, r0
    2276:	80 81       	ld	r24, Z
    2278:	6a e0       	ldi	r22, 0x0A	; 10
    227a:	68 1b       	sub	r22, r24
    227c:	95 cf       	rjmp	.-214    	; 0x21a8 <xQueueSemaphoreTake+0x10a>
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	c9 cf       	rjmp	.-110    	; 0x2214 <xQueueSemaphoreTake+0x176>
    2282:	0e 94 30 1a 	call	0x3460	; 0x3460 <pvTaskIncrementMutexHeldCount>
    2286:	d8 01       	movw	r26, r16
    2288:	14 96       	adiw	r26, 0x04	; 4
    228a:	8d 93       	st	X+, r24
    228c:	9c 93       	st	X, r25
    228e:	15 97       	sbiw	r26, 0x05	; 5
    2290:	ba cf       	rjmp	.-140    	; 0x2206 <xQueueSemaphoreTake+0x168>

00002292 <xQueuePeek>:
    2292:	cf 92       	push	r12
    2294:	df 92       	push	r13
    2296:	ef 92       	push	r14
    2298:	ff 92       	push	r15
    229a:	0f 93       	push	r16
    229c:	1f 93       	push	r17
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	25 97       	sbiw	r28, 0x05	; 5
    22a8:	cd bf       	out	0x3d, r28	; 61
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	8c 01       	movw	r16, r24
    22ae:	6b 01       	movw	r12, r22
    22b0:	4c 83       	std	Y+4, r20	; 0x04
    22b2:	5d 83       	std	Y+5, r21	; 0x05
    22b4:	89 2b       	or	r24, r25
    22b6:	09 f4       	brne	.+2      	; 0x22ba <xQueuePeek+0x28>
    22b8:	a2 c0       	rjmp	.+324    	; 0x23fe <xQueuePeek+0x16c>
    22ba:	c1 14       	cp	r12, r1
    22bc:	d1 04       	cpc	r13, r1
    22be:	09 f4       	brne	.+2      	; 0x22c2 <xQueuePeek+0x30>
    22c0:	92 c0       	rjmp	.+292    	; 0x23e6 <xQueuePeek+0x154>
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	78 01       	movw	r14, r16
    22c6:	f1 e1       	ldi	r31, 0x11	; 17
    22c8:	ef 0e       	add	r14, r31
    22ca:	f1 1c       	adc	r15, r1
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	0f 92       	push	r0
    22d2:	f8 01       	movw	r30, r16
    22d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    22d6:	81 11       	cpse	r24, r1
    22d8:	69 c0       	rjmp	.+210    	; 0x23ac <xQueuePeek+0x11a>
    22da:	8c 81       	ldd	r24, Y+4	; 0x04
    22dc:	9d 81       	ldd	r25, Y+5	; 0x05
    22de:	89 2b       	or	r24, r25
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <xQueuePeek+0x52>
    22e2:	74 c0       	rjmp	.+232    	; 0x23cc <xQueuePeek+0x13a>
    22e4:	22 23       	and	r18, r18
    22e6:	09 f4       	brne	.+2      	; 0x22ea <xQueuePeek+0x58>
    22e8:	58 c0       	rjmp	.+176    	; 0x239a <xQueuePeek+0x108>
    22ea:	0f 90       	pop	r0
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <vTaskSuspendAll>
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	0f 92       	push	r0
    22f8:	f8 01       	movw	r30, r16
    22fa:	85 8d       	ldd	r24, Z+29	; 0x1d
    22fc:	8f 3f       	cpi	r24, 0xFF	; 255
    22fe:	09 f4       	brne	.+2      	; 0x2302 <xQueuePeek+0x70>
    2300:	53 c0       	rjmp	.+166    	; 0x23a8 <xQueuePeek+0x116>
    2302:	f8 01       	movw	r30, r16
    2304:	86 8d       	ldd	r24, Z+30	; 0x1e
    2306:	8f 3f       	cpi	r24, 0xFF	; 255
    2308:	09 f4       	brne	.+2      	; 0x230c <xQueuePeek+0x7a>
    230a:	4c c0       	rjmp	.+152    	; 0x23a4 <xQueuePeek+0x112>
    230c:	0f 90       	pop	r0
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	be 01       	movw	r22, r28
    2312:	6c 5f       	subi	r22, 0xFC	; 252
    2314:	7f 4f       	sbci	r23, 0xFF	; 255
    2316:	ce 01       	movw	r24, r28
    2318:	01 96       	adiw	r24, 0x01	; 1
    231a:	0e 94 9c 18 	call	0x3138	; 0x3138 <xTaskCheckForTimeOut>
    231e:	81 11       	cpse	r24, r1
    2320:	22 c0       	rjmp	.+68     	; 0x2366 <xQueuePeek+0xd4>
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	f8 94       	cli
    2326:	0f 92       	push	r0
    2328:	f8 01       	movw	r30, r16
    232a:	82 8d       	ldd	r24, Z+26	; 0x1a
    232c:	0f 90       	pop	r0
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	81 11       	cpse	r24, r1
    2332:	12 c0       	rjmp	.+36     	; 0x2358 <xQueuePeek+0xc6>
    2334:	6c 81       	ldd	r22, Y+4	; 0x04
    2336:	7d 81       	ldd	r23, Y+5	; 0x05
    2338:	c7 01       	movw	r24, r14
    233a:	0e 94 1a 18 	call	0x3034	; 0x3034 <vTaskPlaceOnEventList>
    233e:	c8 01       	movw	r24, r16
    2340:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <prvUnlockQueue>
    2344:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskResumeAll>
    2348:	88 23       	and	r24, r24
    234a:	11 f0       	breq	.+4      	; 0x2350 <xQueuePeek+0xbe>
    234c:	21 e0       	ldi	r18, 0x01	; 1
    234e:	be cf       	rjmp	.-132    	; 0x22cc <xQueuePeek+0x3a>
    2350:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vPortYield>
    2354:	21 e0       	ldi	r18, 0x01	; 1
    2356:	ba cf       	rjmp	.-140    	; 0x22cc <xQueuePeek+0x3a>
    2358:	c8 01       	movw	r24, r16
    235a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <prvUnlockQueue>
    235e:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskResumeAll>
    2362:	21 e0       	ldi	r18, 0x01	; 1
    2364:	b3 cf       	rjmp	.-154    	; 0x22cc <xQueuePeek+0x3a>
    2366:	c8 01       	movw	r24, r16
    2368:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <prvUnlockQueue>
    236c:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskResumeAll>
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	0f 92       	push	r0
    2376:	f8 01       	movw	r30, r16
    2378:	82 8d       	ldd	r24, Z+26	; 0x1a
    237a:	0f 90       	pop	r0
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	81 11       	cpse	r24, r1
    2380:	e5 cf       	rjmp	.-54     	; 0x234c <xQueuePeek+0xba>
    2382:	25 96       	adiw	r28, 0x05	; 5
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	de bf       	out	0x3e, r29	; 62
    2388:	df 91       	pop	r29
    238a:	cf 91       	pop	r28
    238c:	1f 91       	pop	r17
    238e:	0f 91       	pop	r16
    2390:	ff 90       	pop	r15
    2392:	ef 90       	pop	r14
    2394:	df 90       	pop	r13
    2396:	cf 90       	pop	r12
    2398:	08 95       	ret
    239a:	ce 01       	movw	r24, r28
    239c:	01 96       	adiw	r24, 0x01	; 1
    239e:	0e 94 91 18 	call	0x3122	; 0x3122 <vTaskInternalSetTimeOutState>
    23a2:	a3 cf       	rjmp	.-186    	; 0x22ea <xQueuePeek+0x58>
    23a4:	16 8e       	std	Z+30, r1	; 0x1e
    23a6:	b2 cf       	rjmp	.-156    	; 0x230c <xQueuePeek+0x7a>
    23a8:	15 8e       	std	Z+29, r1	; 0x1d
    23aa:	ab cf       	rjmp	.-170    	; 0x2302 <xQueuePeek+0x70>
    23ac:	e6 80       	ldd	r14, Z+6	; 0x06
    23ae:	f7 80       	ldd	r15, Z+7	; 0x07
    23b0:	b6 01       	movw	r22, r12
    23b2:	c8 01       	movw	r24, r16
    23b4:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <prvCopyDataFromQueue>
    23b8:	f8 01       	movw	r30, r16
    23ba:	e6 82       	std	Z+6, r14	; 0x06
    23bc:	f7 82       	std	Z+7, r15	; 0x07
    23be:	81 89       	ldd	r24, Z+17	; 0x11
    23c0:	81 11       	cpse	r24, r1
    23c2:	08 c0       	rjmp	.+16     	; 0x23d4 <xQueuePeek+0x142>
    23c4:	0f 90       	pop	r0
    23c6:	0f be       	out	0x3f, r0	; 63
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	db cf       	rjmp	.-74     	; 0x2382 <xQueuePeek+0xf0>
    23cc:	0f 90       	pop	r0
    23ce:	0f be       	out	0x3f, r0	; 63
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	d7 cf       	rjmp	.-82     	; 0x2382 <xQueuePeek+0xf0>
    23d4:	c8 01       	movw	r24, r16
    23d6:	41 96       	adiw	r24, 0x11	; 17
    23d8:	0e 94 3a 18 	call	0x3074	; 0x3074 <xTaskRemoveFromEventList>
    23dc:	88 23       	and	r24, r24
    23de:	91 f3       	breq	.-28     	; 0x23c4 <xQueuePeek+0x132>
    23e0:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vPortYield>
    23e4:	ef cf       	rjmp	.-34     	; 0x23c4 <xQueuePeek+0x132>
    23e6:	f8 01       	movw	r30, r16
    23e8:	84 8d       	ldd	r24, Z+28	; 0x1c
    23ea:	88 23       	and	r24, r24
    23ec:	09 f4       	brne	.+2      	; 0x23f0 <xQueuePeek+0x15e>
    23ee:	69 cf       	rjmp	.-302    	; 0x22c2 <xQueuePeek+0x30>
    23f0:	6c e6       	ldi	r22, 0x6C	; 108
    23f2:	76 e0       	ldi	r23, 0x06	; 6
    23f4:	86 e1       	ldi	r24, 0x16	; 22
    23f6:	90 e2       	ldi	r25, 0x20	; 32
    23f8:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    23fc:	62 cf       	rjmp	.-316    	; 0x22c2 <xQueuePeek+0x30>
    23fe:	68 e6       	ldi	r22, 0x68	; 104
    2400:	76 e0       	ldi	r23, 0x06	; 6
    2402:	86 e1       	ldi	r24, 0x16	; 22
    2404:	90 e2       	ldi	r25, 0x20	; 32
    2406:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    240a:	57 cf       	rjmp	.-338    	; 0x22ba <xQueuePeek+0x28>

0000240c <xQueueReceiveFromISR>:
    240c:	cf 92       	push	r12
    240e:	df 92       	push	r13
    2410:	ef 92       	push	r14
    2412:	ff 92       	push	r15
    2414:	0f 93       	push	r16
    2416:	1f 93       	push	r17
    2418:	cf 93       	push	r28
    241a:	df 93       	push	r29
    241c:	ec 01       	movw	r28, r24
    241e:	7b 01       	movw	r14, r22
    2420:	6a 01       	movw	r12, r20
    2422:	89 2b       	or	r24, r25
    2424:	b9 f1       	breq	.+110    	; 0x2494 <xQueueReceiveFromISR+0x88>
    2426:	e1 14       	cp	r14, r1
    2428:	f1 04       	cpc	r15, r1
    242a:	d1 f0       	breq	.+52     	; 0x2460 <xQueueReceiveFromISR+0x54>
    242c:	1a 8d       	ldd	r17, Y+26	; 0x1a
    242e:	11 11       	cpse	r17, r1
    2430:	0a c0       	rjmp	.+20     	; 0x2446 <xQueueReceiveFromISR+0x3a>
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	ff 90       	pop	r15
    243e:	ef 90       	pop	r14
    2440:	df 90       	pop	r13
    2442:	cf 90       	pop	r12
    2444:	08 95       	ret
    2446:	0d 8d       	ldd	r16, Y+29	; 0x1d
    2448:	b7 01       	movw	r22, r14
    244a:	ce 01       	movw	r24, r28
    244c:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <prvCopyDataFromQueue>
    2450:	11 50       	subi	r17, 0x01	; 1
    2452:	1a 8f       	std	Y+26, r17	; 0x1a
    2454:	0f 3f       	cpi	r16, 0xFF	; 255
    2456:	71 f0       	breq	.+28     	; 0x2474 <xQueueReceiveFromISR+0x68>
    2458:	0f 5f       	subi	r16, 0xFF	; 255
    245a:	0d 8f       	std	Y+29, r16	; 0x1d
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	ea cf       	rjmp	.-44     	; 0x2434 <xQueueReceiveFromISR+0x28>
    2460:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2462:	88 23       	and	r24, r24
    2464:	19 f3       	breq	.-58     	; 0x242c <xQueueReceiveFromISR+0x20>
    2466:	6c ef       	ldi	r22, 0xFC	; 252
    2468:	76 e0       	ldi	r23, 0x06	; 6
    246a:	86 e1       	ldi	r24, 0x16	; 22
    246c:	90 e2       	ldi	r25, 0x20	; 32
    246e:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    2472:	dc cf       	rjmp	.-72     	; 0x242c <xQueueReceiveFromISR+0x20>
    2474:	88 85       	ldd	r24, Y+8	; 0x08
    2476:	88 23       	and	r24, r24
    2478:	89 f3       	breq	.-30     	; 0x245c <xQueueReceiveFromISR+0x50>
    247a:	ce 01       	movw	r24, r28
    247c:	08 96       	adiw	r24, 0x08	; 8
    247e:	0e 94 3a 18 	call	0x3074	; 0x3074 <xTaskRemoveFromEventList>
    2482:	88 23       	and	r24, r24
    2484:	59 f3       	breq	.-42     	; 0x245c <xQueueReceiveFromISR+0x50>
    2486:	c1 14       	cp	r12, r1
    2488:	d1 04       	cpc	r13, r1
    248a:	41 f3       	breq	.-48     	; 0x245c <xQueueReceiveFromISR+0x50>
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	f6 01       	movw	r30, r12
    2490:	80 83       	st	Z, r24
    2492:	d0 cf       	rjmp	.-96     	; 0x2434 <xQueueReceiveFromISR+0x28>
    2494:	6b ef       	ldi	r22, 0xFB	; 251
    2496:	76 e0       	ldi	r23, 0x06	; 6
    2498:	86 e1       	ldi	r24, 0x16	; 22
    249a:	90 e2       	ldi	r25, 0x20	; 32
    249c:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    24a0:	c2 cf       	rjmp	.-124    	; 0x2426 <xQueueReceiveFromISR+0x1a>

000024a2 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    24a2:	cf 93       	push	r28
    24a4:	df 93       	push	r29
    24a6:	ec 01       	movw	r28, r24
UBaseType_t uxReturn;

	configASSERT( xQueue );
    24a8:	89 2b       	or	r24, r25
    24aa:	49 f0       	breq	.+18     	; 0x24be <uxQueueMessagesWaiting+0x1c>

	taskENTER_CRITICAL();
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    24b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    24b4:	0f 90       	pop	r0
    24b6:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    24b8:	df 91       	pop	r29
    24ba:	cf 91       	pop	r28
    24bc:	08 95       	ret

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
UBaseType_t uxReturn;

	configASSERT( xQueue );
    24be:	6a e8       	ldi	r22, 0x8A	; 138
    24c0:	77 e0       	ldi	r23, 0x07	; 7
    24c2:	86 e1       	ldi	r24, 0x16	; 22
    24c4:	90 e2       	ldi	r25, 0x20	; 32
    24c6:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    24ca:	f0 cf       	rjmp	.-32     	; 0x24ac <uxQueueMessagesWaiting+0xa>

000024cc <prvIdleTask>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    24cc:	20 c0       	rjmp	.+64     	; 0x250e <prvIdleTask+0x42>
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	0f 92       	push	r0
    24d4:	e0 91 4a 21 	lds	r30, 0x214A	; 0x80214a <xTasksWaitingTermination+0x5>
    24d8:	f0 91 4b 21 	lds	r31, 0x214B	; 0x80214b <xTasksWaitingTermination+0x6>
    24dc:	c6 81       	ldd	r28, Z+6	; 0x06
    24de:	d7 81       	ldd	r29, Z+7	; 0x07
    24e0:	ce 01       	movw	r24, r28
    24e2:	02 96       	adiw	r24, 0x02	; 2
    24e4:	0e 94 84 0a 	call	0x1508	; 0x1508 <uxListRemove>
    24e8:	80 91 3a 21 	lds	r24, 0x213A	; 0x80213a <uxCurrentNumberOfTasks>
    24ec:	81 50       	subi	r24, 0x01	; 1
    24ee:	80 93 3a 21 	sts	0x213A, r24	; 0x80213a <uxCurrentNumberOfTasks>
    24f2:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <uxDeletedTasksWaitingCleanUp>
    24f6:	81 50       	subi	r24, 0x01	; 1
    24f8:	80 93 44 21 	sts	0x2144, r24	; 0x802144 <uxDeletedTasksWaitingCleanUp>
    24fc:	0f 90       	pop	r0
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	8f 89       	ldd	r24, Y+23	; 0x17
    2502:	98 8d       	ldd	r25, Y+24	; 0x18
    2504:	0e 94 f5 09 	call	0x13ea	; 0x13ea <vPortFree>
    2508:	ce 01       	movw	r24, r28
    250a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <vPortFree>
    250e:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <uxDeletedTasksWaitingCleanUp>
    2512:	81 11       	cpse	r24, r1
    2514:	dc cf       	rjmp	.-72     	; 0x24ce <prvIdleTask+0x2>
    2516:	80 91 6d 21 	lds	r24, 0x216D	; 0x80216d <pxReadyTasksLists>
    251a:	82 30       	cpi	r24, 0x02	; 2
    251c:	10 f0       	brcs	.+4      	; 0x2522 <prvIdleTask+0x56>
    251e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vPortYield>
    2522:	0e 94 42 1a 	call	0x3484	; 0x3484 <vApplicationIdleHook>
    2526:	f3 cf       	rjmp	.-26     	; 0x250e <prvIdleTask+0x42>

00002528 <prvResetNextTaskUnblockTime.part.0>:
    2528:	e0 91 59 21 	lds	r30, 0x2159	; 0x802159 <pxDelayedTaskList>
    252c:	f0 91 5a 21 	lds	r31, 0x215A	; 0x80215a <pxDelayedTaskList+0x1>
    2530:	05 80       	ldd	r0, Z+5	; 0x05
    2532:	f6 81       	ldd	r31, Z+6	; 0x06
    2534:	e0 2d       	mov	r30, r0
    2536:	06 80       	ldd	r0, Z+6	; 0x06
    2538:	f7 81       	ldd	r31, Z+7	; 0x07
    253a:	e0 2d       	mov	r30, r0
    253c:	82 81       	ldd	r24, Z+2	; 0x02
    253e:	93 81       	ldd	r25, Z+3	; 0x03
    2540:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <xNextTaskUnblockTime>
    2544:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <xNextTaskUnblockTime+0x1>
    2548:	08 95       	ret

0000254a <prvTaskIsTaskSuspended>:
    254a:	cf 93       	push	r28
    254c:	df 93       	push	r29
    254e:	ec 01       	movw	r28, r24
    2550:	89 2b       	or	r24, r25
    2552:	99 f0       	breq	.+38     	; 0x257a <prvTaskIsTaskSuspended+0x30>
    2554:	8a 85       	ldd	r24, Y+10	; 0x0a
    2556:	9b 85       	ldd	r25, Y+11	; 0x0b
    2558:	8b 53       	subi	r24, 0x3B	; 59
    255a:	91 42       	sbci	r25, 0x21	; 33
    255c:	21 f0       	breq	.+8      	; 0x2566 <prvTaskIsTaskSuspended+0x1c>
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	08 95       	ret
    2566:	2c 89       	ldd	r18, Y+20	; 0x14
    2568:	3d 89       	ldd	r19, Y+21	; 0x15
    256a:	81 e2       	ldi	r24, 0x21	; 33
    256c:	2e 34       	cpi	r18, 0x4E	; 78
    256e:	38 07       	cpc	r19, r24
    2570:	b1 f3       	breq	.-20     	; 0x255e <prvTaskIsTaskSuspended+0x14>
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	23 2b       	or	r18, r19
    2576:	99 f7       	brne	.-26     	; 0x255e <prvTaskIsTaskSuspended+0x14>
    2578:	f3 cf       	rjmp	.-26     	; 0x2560 <prvTaskIsTaskSuspended+0x16>
    257a:	62 ef       	ldi	r22, 0xF2	; 242
    257c:	76 e0       	ldi	r23, 0x06	; 6
    257e:	8a e2       	ldi	r24, 0x2A	; 42
    2580:	90 e2       	ldi	r25, 0x20	; 32
    2582:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    2586:	e6 cf       	rjmp	.-52     	; 0x2554 <prvTaskIsTaskSuspended+0xa>

00002588 <prvAddCurrentTaskToDelayedList>:
    2588:	ff 92       	push	r15
    258a:	0f 93       	push	r16
    258c:	1f 93       	push	r17
    258e:	cf 93       	push	r28
    2590:	df 93       	push	r29
    2592:	ec 01       	movw	r28, r24
    2594:	f6 2e       	mov	r15, r22
    2596:	00 91 38 21 	lds	r16, 0x2138	; 0x802138 <xTickCount>
    259a:	10 91 39 21 	lds	r17, 0x2139	; 0x802139 <xTickCount+0x1>
    259e:	80 91 c7 21 	lds	r24, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    25a2:	90 91 c8 21 	lds	r25, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    25a6:	02 96       	adiw	r24, 0x02	; 2
    25a8:	0e 94 84 0a 	call	0x1508	; 0x1508 <uxListRemove>
    25ac:	cf 3f       	cpi	r28, 0xFF	; 255
    25ae:	8f ef       	ldi	r24, 0xFF	; 255
    25b0:	d8 07       	cpc	r29, r24
    25b2:	a9 f1       	breq	.+106    	; 0x261e <prvAddCurrentTaskToDelayedList+0x96>
    25b4:	c0 0f       	add	r28, r16
    25b6:	d1 1f       	adc	r29, r17
    25b8:	e0 91 c7 21 	lds	r30, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    25bc:	f0 91 c8 21 	lds	r31, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    25c0:	c2 83       	std	Z+2, r28	; 0x02
    25c2:	d3 83       	std	Z+3, r29	; 0x03
    25c4:	60 91 c7 21 	lds	r22, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    25c8:	70 91 c8 21 	lds	r23, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    25cc:	c0 17       	cp	r28, r16
    25ce:	d1 07       	cpc	r29, r17
    25d0:	c8 f0       	brcs	.+50     	; 0x2604 <prvAddCurrentTaskToDelayedList+0x7c>
    25d2:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <pxDelayedTaskList>
    25d6:	90 91 5a 21 	lds	r25, 0x215A	; 0x80215a <pxDelayedTaskList+0x1>
    25da:	6e 5f       	subi	r22, 0xFE	; 254
    25dc:	7f 4f       	sbci	r23, 0xFF	; 255
    25de:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <vListInsert>
    25e2:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <xNextTaskUnblockTime>
    25e6:	90 91 31 21 	lds	r25, 0x2131	; 0x802131 <xNextTaskUnblockTime+0x1>
    25ea:	c8 17       	cp	r28, r24
    25ec:	d9 07       	cpc	r29, r25
    25ee:	20 f4       	brcc	.+8      	; 0x25f8 <prvAddCurrentTaskToDelayedList+0x70>
    25f0:	c0 93 30 21 	sts	0x2130, r28	; 0x802130 <xNextTaskUnblockTime>
    25f4:	d0 93 31 21 	sts	0x2131, r29	; 0x802131 <xNextTaskUnblockTime+0x1>
    25f8:	df 91       	pop	r29
    25fa:	cf 91       	pop	r28
    25fc:	1f 91       	pop	r17
    25fe:	0f 91       	pop	r16
    2600:	ff 90       	pop	r15
    2602:	08 95       	ret
    2604:	80 91 57 21 	lds	r24, 0x2157	; 0x802157 <pxOverflowDelayedTaskList>
    2608:	90 91 58 21 	lds	r25, 0x2158	; 0x802158 <pxOverflowDelayedTaskList+0x1>
    260c:	6e 5f       	subi	r22, 0xFE	; 254
    260e:	7f 4f       	sbci	r23, 0xFF	; 255
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
    2618:	ff 90       	pop	r15
    261a:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <vListInsert>
    261e:	ff 20       	and	r15, r15
    2620:	49 f2       	breq	.-110    	; 0x25b4 <prvAddCurrentTaskToDelayedList+0x2c>
    2622:	60 91 c7 21 	lds	r22, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    2626:	70 91 c8 21 	lds	r23, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    262a:	6e 5f       	subi	r22, 0xFE	; 254
    262c:	7f 4f       	sbci	r23, 0xFF	; 255
    262e:	8b e3       	ldi	r24, 0x3B	; 59
    2630:	91 e2       	ldi	r25, 0x21	; 33
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	1f 91       	pop	r17
    2638:	0f 91       	pop	r16
    263a:	ff 90       	pop	r15
    263c:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <vListInsertEnd>

00002640 <vTaskSwitchContext.part.5>:
    2640:	0f 93       	push	r16
    2642:	1f 93       	push	r17
    2644:	cf 93       	push	r28
    2646:	10 92 34 21 	sts	0x2134, r1	; 0x802134 <xYieldPending>
    264a:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    264e:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    2652:	80 91 fb 21 	lds	r24, 0x21FB	; 0x8021fb <StatsTimer>
    2656:	90 91 fc 21 	lds	r25, 0x21FC	; 0x8021fc <StatsTimer+0x1>
    265a:	a0 91 fd 21 	lds	r26, 0x21FD	; 0x8021fd <StatsTimer+0x2>
    265e:	b0 91 fe 21 	lds	r27, 0x21FE	; 0x8021fe <StatsTimer+0x3>
    2662:	82 0f       	add	r24, r18
    2664:	93 1f       	adc	r25, r19
    2666:	a1 1d       	adc	r26, r1
    2668:	b1 1d       	adc	r27, r1
    266a:	00 91 29 21 	lds	r16, 0x2129	; 0x802129 <ulTaskSwitchedInTime>
    266e:	10 91 2a 21 	lds	r17, 0x212A	; 0x80212a <ulTaskSwitchedInTime+0x1>
    2672:	20 91 2b 21 	lds	r18, 0x212B	; 0x80212b <ulTaskSwitchedInTime+0x2>
    2676:	30 91 2c 21 	lds	r19, 0x212C	; 0x80212c <ulTaskSwitchedInTime+0x3>
    267a:	08 17       	cp	r16, r24
    267c:	19 07       	cpc	r17, r25
    267e:	2a 07       	cpc	r18, r26
    2680:	3b 07       	cpc	r19, r27
    2682:	a0 f4       	brcc	.+40     	; 0x26ac <vTaskSwitchContext.part.5+0x6c>
    2684:	e0 91 c7 21 	lds	r30, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    2688:	f0 91 c8 21 	lds	r31, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    268c:	47 a1       	ldd	r20, Z+39	; 0x27
    268e:	50 a5       	ldd	r21, Z+40	; 0x28
    2690:	61 a5       	ldd	r22, Z+41	; 0x29
    2692:	72 a5       	ldd	r23, Z+42	; 0x2a
    2694:	40 1b       	sub	r20, r16
    2696:	51 0b       	sbc	r21, r17
    2698:	62 0b       	sbc	r22, r18
    269a:	73 0b       	sbc	r23, r19
    269c:	48 0f       	add	r20, r24
    269e:	59 1f       	adc	r21, r25
    26a0:	6a 1f       	adc	r22, r26
    26a2:	7b 1f       	adc	r23, r27
    26a4:	47 a3       	std	Z+39, r20	; 0x27
    26a6:	50 a7       	std	Z+40, r21	; 0x28
    26a8:	61 a7       	std	Z+41, r22	; 0x29
    26aa:	72 a7       	std	Z+42, r23	; 0x2a
    26ac:	80 93 29 21 	sts	0x2129, r24	; 0x802129 <ulTaskSwitchedInTime>
    26b0:	90 93 2a 21 	sts	0x212A, r25	; 0x80212a <ulTaskSwitchedInTime+0x1>
    26b4:	a0 93 2b 21 	sts	0x212B, r26	; 0x80212b <ulTaskSwitchedInTime+0x2>
    26b8:	b0 93 2c 21 	sts	0x212C, r27	; 0x80212c <ulTaskSwitchedInTime+0x3>
    26bc:	e0 91 c7 21 	lds	r30, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    26c0:	f0 91 c8 21 	lds	r31, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    26c4:	07 88       	ldd	r0, Z+23	; 0x17
    26c6:	f0 8d       	ldd	r31, Z+24	; 0x18
    26c8:	e0 2d       	mov	r30, r0
    26ca:	80 81       	ld	r24, Z
    26cc:	91 81       	ldd	r25, Z+1	; 0x01
    26ce:	a2 81       	ldd	r26, Z+2	; 0x02
    26d0:	b3 81       	ldd	r27, Z+3	; 0x03
    26d2:	85 3a       	cpi	r24, 0xA5	; 165
    26d4:	95 4a       	sbci	r25, 0xA5	; 165
    26d6:	a5 4a       	sbci	r26, 0xA5	; 165
    26d8:	b5 4a       	sbci	r27, 0xA5	; 165
    26da:	09 f4       	brne	.+2      	; 0x26de <vTaskSwitchContext.part.5+0x9e>
    26dc:	4c c0       	rjmp	.+152    	; 0x2776 <vTaskSwitchContext.part.5+0x136>
    26de:	60 91 c7 21 	lds	r22, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    26e2:	70 91 c8 21 	lds	r23, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    26e6:	80 91 c7 21 	lds	r24, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    26ea:	90 91 c8 21 	lds	r25, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    26ee:	67 5e       	subi	r22, 0xE7	; 231
    26f0:	7f 4f       	sbci	r23, 0xFF	; 255
    26f2:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <vApplicationStackOverflowHook>
    26f6:	c0 91 37 21 	lds	r28, 0x2137	; 0x802137 <uxTopReadyPriority>
    26fa:	8c 2f       	mov	r24, r28
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	9c 01       	movw	r18, r24
    2700:	22 0f       	add	r18, r18
    2702:	33 1f       	adc	r19, r19
    2704:	22 0f       	add	r18, r18
    2706:	33 1f       	adc	r19, r19
    2708:	22 0f       	add	r18, r18
    270a:	33 1f       	adc	r19, r19
    270c:	f9 01       	movw	r30, r18
    270e:	e8 0f       	add	r30, r24
    2710:	f9 1f       	adc	r31, r25
    2712:	e3 59       	subi	r30, 0x93	; 147
    2714:	fe 4d       	sbci	r31, 0xDE	; 222
    2716:	40 81       	ld	r20, Z
    2718:	41 11       	cpse	r20, r1
    271a:	0c c0       	rjmp	.+24     	; 0x2734 <vTaskSwitchContext.part.5+0xf4>
    271c:	cc 23       	and	r28, r28
    271e:	11 f0       	breq	.+4      	; 0x2724 <vTaskSwitchContext.part.5+0xe4>
    2720:	c1 50       	subi	r28, 0x01	; 1
    2722:	eb cf       	rjmp	.-42     	; 0x26fa <vTaskSwitchContext.part.5+0xba>
    2724:	6c e8       	ldi	r22, 0x8C	; 140
    2726:	7b e0       	ldi	r23, 0x0B	; 11
    2728:	8a e2       	ldi	r24, 0x2A	; 42
    272a:	90 e2       	ldi	r25, 0x20	; 32
    272c:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    2730:	c1 50       	subi	r28, 0x01	; 1
    2732:	e3 cf       	rjmp	.-58     	; 0x26fa <vTaskSwitchContext.part.5+0xba>
    2734:	82 0f       	add	r24, r18
    2736:	93 1f       	adc	r25, r19
    2738:	dc 01       	movw	r26, r24
    273a:	a3 59       	subi	r26, 0x93	; 147
    273c:	be 4d       	sbci	r27, 0xDE	; 222
    273e:	11 96       	adiw	r26, 0x01	; 1
    2740:	ed 91       	ld	r30, X+
    2742:	fc 91       	ld	r31, X
    2744:	12 97       	sbiw	r26, 0x02	; 2
    2746:	02 80       	ldd	r0, Z+2	; 0x02
    2748:	f3 81       	ldd	r31, Z+3	; 0x03
    274a:	e0 2d       	mov	r30, r0
    274c:	11 96       	adiw	r26, 0x01	; 1
    274e:	ed 93       	st	X+, r30
    2750:	fc 93       	st	X, r31
    2752:	12 97       	sbiw	r26, 0x02	; 2
    2754:	80 59       	subi	r24, 0x90	; 144
    2756:	9e 4d       	sbci	r25, 0xDE	; 222
    2758:	e8 17       	cp	r30, r24
    275a:	f9 07       	cpc	r31, r25
    275c:	59 f1       	breq	.+86     	; 0x27b4 <vTaskSwitchContext.part.5+0x174>
    275e:	86 81       	ldd	r24, Z+6	; 0x06
    2760:	97 81       	ldd	r25, Z+7	; 0x07
    2762:	80 93 c7 21 	sts	0x21C7, r24	; 0x8021c7 <pxCurrentTCB>
    2766:	90 93 c8 21 	sts	0x21C8, r25	; 0x8021c8 <pxCurrentTCB+0x1>
    276a:	c0 93 37 21 	sts	0x2137, r28	; 0x802137 <uxTopReadyPriority>
    276e:	cf 91       	pop	r28
    2770:	1f 91       	pop	r17
    2772:	0f 91       	pop	r16
    2774:	08 95       	ret
    2776:	84 81       	ldd	r24, Z+4	; 0x04
    2778:	95 81       	ldd	r25, Z+5	; 0x05
    277a:	a6 81       	ldd	r26, Z+6	; 0x06
    277c:	b7 81       	ldd	r27, Z+7	; 0x07
    277e:	85 3a       	cpi	r24, 0xA5	; 165
    2780:	95 4a       	sbci	r25, 0xA5	; 165
    2782:	a5 4a       	sbci	r26, 0xA5	; 165
    2784:	b5 4a       	sbci	r27, 0xA5	; 165
    2786:	09 f0       	breq	.+2      	; 0x278a <vTaskSwitchContext.part.5+0x14a>
    2788:	aa cf       	rjmp	.-172    	; 0x26de <vTaskSwitchContext.part.5+0x9e>
    278a:	80 85       	ldd	r24, Z+8	; 0x08
    278c:	91 85       	ldd	r25, Z+9	; 0x09
    278e:	a2 85       	ldd	r26, Z+10	; 0x0a
    2790:	b3 85       	ldd	r27, Z+11	; 0x0b
    2792:	85 3a       	cpi	r24, 0xA5	; 165
    2794:	95 4a       	sbci	r25, 0xA5	; 165
    2796:	a5 4a       	sbci	r26, 0xA5	; 165
    2798:	b5 4a       	sbci	r27, 0xA5	; 165
    279a:	09 f0       	breq	.+2      	; 0x279e <vTaskSwitchContext.part.5+0x15e>
    279c:	a0 cf       	rjmp	.-192    	; 0x26de <vTaskSwitchContext.part.5+0x9e>
    279e:	84 85       	ldd	r24, Z+12	; 0x0c
    27a0:	95 85       	ldd	r25, Z+13	; 0x0d
    27a2:	a6 85       	ldd	r26, Z+14	; 0x0e
    27a4:	b7 85       	ldd	r27, Z+15	; 0x0f
    27a6:	85 3a       	cpi	r24, 0xA5	; 165
    27a8:	95 4a       	sbci	r25, 0xA5	; 165
    27aa:	a5 4a       	sbci	r26, 0xA5	; 165
    27ac:	b5 4a       	sbci	r27, 0xA5	; 165
    27ae:	09 f0       	breq	.+2      	; 0x27b2 <vTaskSwitchContext.part.5+0x172>
    27b0:	96 cf       	rjmp	.-212    	; 0x26de <vTaskSwitchContext.part.5+0x9e>
    27b2:	a1 cf       	rjmp	.-190    	; 0x26f6 <vTaskSwitchContext.part.5+0xb6>
    27b4:	02 80       	ldd	r0, Z+2	; 0x02
    27b6:	f3 81       	ldd	r31, Z+3	; 0x03
    27b8:	e0 2d       	mov	r30, r0
    27ba:	11 96       	adiw	r26, 0x01	; 1
    27bc:	ed 93       	st	X+, r30
    27be:	fc 93       	st	X, r31
    27c0:	12 97       	sbiw	r26, 0x02	; 2
    27c2:	cd cf       	rjmp	.-102    	; 0x275e <vTaskSwitchContext.part.5+0x11e>

000027c4 <xTaskCreate>:
    27c4:	5f 92       	push	r5
    27c6:	6f 92       	push	r6
    27c8:	7f 92       	push	r7
    27ca:	8f 92       	push	r8
    27cc:	9f 92       	push	r9
    27ce:	af 92       	push	r10
    27d0:	bf 92       	push	r11
    27d2:	cf 92       	push	r12
    27d4:	df 92       	push	r13
    27d6:	ef 92       	push	r14
    27d8:	ff 92       	push	r15
    27da:	0f 93       	push	r16
    27dc:	1f 93       	push	r17
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
    27e2:	4c 01       	movw	r8, r24
    27e4:	eb 01       	movw	r28, r22
    27e6:	5a 01       	movw	r10, r20
    27e8:	39 01       	movw	r6, r18
    27ea:	50 2e       	mov	r5, r16
    27ec:	ca 01       	movw	r24, r20
    27ee:	0e 94 56 09 	call	0x12ac	; 0x12ac <pvPortMalloc>
    27f2:	8c 01       	movw	r16, r24
    27f4:	89 2b       	or	r24, r25
    27f6:	09 f4       	brne	.+2      	; 0x27fa <xTaskCreate+0x36>
    27f8:	de c0       	rjmp	.+444    	; 0x29b6 <xTaskCreate+0x1f2>
    27fa:	80 e3       	ldi	r24, 0x30	; 48
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	0e 94 56 09 	call	0x12ac	; 0x12ac <pvPortMalloc>
    2802:	6c 01       	movw	r12, r24
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	09 f4       	brne	.+2      	; 0x280a <xTaskCreate+0x46>
    2808:	d3 c0       	rjmp	.+422    	; 0x29b0 <xTaskCreate+0x1ec>
    280a:	dc 01       	movw	r26, r24
    280c:	57 96       	adiw	r26, 0x17	; 23
    280e:	0d 93       	st	X+, r16
    2810:	1c 93       	st	X, r17
    2812:	58 97       	sbiw	r26, 0x18	; 24
    2814:	20 97       	sbiw	r28, 0x00	; 0
    2816:	09 f4       	brne	.+2      	; 0x281a <xTaskCreate+0x56>
    2818:	d0 c0       	rjmp	.+416    	; 0x29ba <xTaskCreate+0x1f6>
    281a:	c8 01       	movw	r24, r16
    281c:	a5 01       	movw	r20, r10
    281e:	65 ea       	ldi	r22, 0xA5	; 165
    2820:	70 e0       	ldi	r23, 0x00	; 0
    2822:	0e 94 64 2a 	call	0x54c8	; 0x54c8 <memset>
    2826:	f1 e0       	ldi	r31, 0x01	; 1
    2828:	af 1a       	sub	r10, r31
    282a:	b1 08       	sbc	r11, r1
    282c:	d6 01       	movw	r26, r12
    282e:	57 96       	adiw	r26, 0x17	; 23
    2830:	8d 91       	ld	r24, X+
    2832:	9c 91       	ld	r25, X
    2834:	58 97       	sbiw	r26, 0x18	; 24
    2836:	a8 0e       	add	r10, r24
    2838:	b9 1e       	adc	r11, r25
    283a:	f6 01       	movw	r30, r12
    283c:	79 96       	adiw	r30, 0x19	; 25
    283e:	9e 01       	movw	r18, r28
    2840:	28 5f       	subi	r18, 0xF8	; 248
    2842:	3f 4f       	sbci	r19, 0xFF	; 255
    2844:	de 01       	movw	r26, r28
    2846:	89 91       	ld	r24, Y+
    2848:	81 93       	st	Z+, r24
    284a:	8c 91       	ld	r24, X
    284c:	88 23       	and	r24, r24
    284e:	19 f0       	breq	.+6      	; 0x2856 <xTaskCreate+0x92>
    2850:	c2 17       	cp	r28, r18
    2852:	d3 07       	cpc	r29, r19
    2854:	b9 f7       	brne	.-18     	; 0x2844 <xTaskCreate+0x80>
    2856:	f6 01       	movw	r30, r12
    2858:	10 a2       	std	Z+32, r1	; 0x20
    285a:	05 2d       	mov	r16, r5
    285c:	0a 30       	cpi	r16, 0x0A	; 10
    285e:	08 f0       	brcs	.+2      	; 0x2862 <xTaskCreate+0x9e>
    2860:	a1 c0       	rjmp	.+322    	; 0x29a4 <xTaskCreate+0x1e0>
    2862:	d6 01       	movw	r26, r12
    2864:	56 96       	adiw	r26, 0x16	; 22
    2866:	0c 93       	st	X, r16
    2868:	56 97       	sbiw	r26, 0x16	; 22
    286a:	93 96       	adiw	r26, 0x23	; 35
    286c:	0c 93       	st	X, r16
    286e:	93 97       	sbiw	r26, 0x23	; 35
    2870:	94 96       	adiw	r26, 0x24	; 36
    2872:	1c 92       	st	X, r1
    2874:	e6 01       	movw	r28, r12
    2876:	22 96       	adiw	r28, 0x02	; 2
    2878:	ce 01       	movw	r24, r28
    287a:	0e 94 2e 0a 	call	0x145c	; 0x145c <vListInitialiseItem>
    287e:	c6 01       	movw	r24, r12
    2880:	0c 96       	adiw	r24, 0x0c	; 12
    2882:	0e 94 2e 0a 	call	0x145c	; 0x145c <vListInitialiseItem>
    2886:	f6 01       	movw	r30, r12
    2888:	c0 86       	std	Z+8, r12	; 0x08
    288a:	d1 86       	std	Z+9, r13	; 0x09
    288c:	8a e0       	ldi	r24, 0x0A	; 10
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	80 1b       	sub	r24, r16
    2892:	91 09       	sbc	r25, r1
    2894:	84 87       	std	Z+12, r24	; 0x0c
    2896:	95 87       	std	Z+13, r25	; 0x0d
    2898:	c2 8a       	std	Z+18, r12	; 0x12
    289a:	d3 8a       	std	Z+19, r13	; 0x13
    289c:	15 a2       	std	Z+37, r1	; 0x25
    289e:	16 a2       	std	Z+38, r1	; 0x26
    28a0:	17 a2       	std	Z+39, r1	; 0x27
    28a2:	10 a6       	std	Z+40, r1	; 0x28
    28a4:	11 a6       	std	Z+41, r1	; 0x29
    28a6:	12 a6       	std	Z+42, r1	; 0x2a
    28a8:	13 a6       	std	Z+43, r1	; 0x2b
    28aa:	14 a6       	std	Z+44, r1	; 0x2c
    28ac:	15 a6       	std	Z+45, r1	; 0x2d
    28ae:	16 a6       	std	Z+46, r1	; 0x2e
    28b0:	17 a6       	std	Z+47, r1	; 0x2f
    28b2:	a3 01       	movw	r20, r6
    28b4:	b4 01       	movw	r22, r8
    28b6:	c5 01       	movw	r24, r10
    28b8:	0e 94 aa 0a 	call	0x1554	; 0x1554 <pxPortInitialiseStack>
    28bc:	d6 01       	movw	r26, r12
    28be:	8d 93       	st	X+, r24
    28c0:	9c 93       	st	X, r25
    28c2:	e1 14       	cp	r14, r1
    28c4:	f1 04       	cpc	r15, r1
    28c6:	19 f0       	breq	.+6      	; 0x28ce <xTaskCreate+0x10a>
    28c8:	f7 01       	movw	r30, r14
    28ca:	c0 82       	st	Z, r12
    28cc:	d1 82       	std	Z+1, r13	; 0x01
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	0f 92       	push	r0
    28d4:	80 91 3a 21 	lds	r24, 0x213A	; 0x80213a <uxCurrentNumberOfTasks>
    28d8:	8f 5f       	subi	r24, 0xFF	; 255
    28da:	80 93 3a 21 	sts	0x213A, r24	; 0x80213a <uxCurrentNumberOfTasks>
    28de:	80 91 c7 21 	lds	r24, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    28e2:	90 91 c8 21 	lds	r25, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    28e6:	89 2b       	or	r24, r25
    28e8:	99 f0       	breq	.+38     	; 0x2910 <xTaskCreate+0x14c>
    28ea:	80 91 36 21 	lds	r24, 0x2136	; 0x802136 <xSchedulerRunning>
    28ee:	81 11       	cpse	r24, r1
    28f0:	18 c0       	rjmp	.+48     	; 0x2922 <xTaskCreate+0x15e>
    28f2:	e0 91 c7 21 	lds	r30, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    28f6:	f0 91 c8 21 	lds	r31, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    28fa:	d6 01       	movw	r26, r12
    28fc:	56 96       	adiw	r26, 0x16	; 22
    28fe:	8c 91       	ld	r24, X
    2900:	96 89       	ldd	r25, Z+22	; 0x16
    2902:	89 17       	cp	r24, r25
    2904:	88 f0       	brcs	.+34     	; 0x2928 <xTaskCreate+0x164>
    2906:	c0 92 c7 21 	sts	0x21C7, r12	; 0x8021c7 <pxCurrentTCB>
    290a:	d0 92 c8 21 	sts	0x21C8, r13	; 0x8021c8 <pxCurrentTCB+0x1>
    290e:	0c c0       	rjmp	.+24     	; 0x2928 <xTaskCreate+0x164>
    2910:	c0 92 c7 21 	sts	0x21C7, r12	; 0x8021c7 <pxCurrentTCB>
    2914:	d0 92 c8 21 	sts	0x21C8, r13	; 0x8021c8 <pxCurrentTCB+0x1>
    2918:	80 91 3a 21 	lds	r24, 0x213A	; 0x80213a <uxCurrentNumberOfTasks>
    291c:	81 30       	cpi	r24, 0x01	; 1
    291e:	09 f4       	brne	.+2      	; 0x2922 <xTaskCreate+0x15e>
    2920:	56 c0       	rjmp	.+172    	; 0x29ce <xTaskCreate+0x20a>
    2922:	d6 01       	movw	r26, r12
    2924:	56 96       	adiw	r26, 0x16	; 22
    2926:	8c 91       	ld	r24, X
    2928:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <uxTaskNumber>
    292c:	9f 5f       	subi	r25, 0xFF	; 255
    292e:	90 93 32 21 	sts	0x2132, r25	; 0x802132 <uxTaskNumber>
    2932:	f6 01       	movw	r30, r12
    2934:	91 a3       	std	Z+33, r25	; 0x21
    2936:	90 91 37 21 	lds	r25, 0x2137	; 0x802137 <uxTopReadyPriority>
    293a:	98 17       	cp	r25, r24
    293c:	80 f1       	brcs	.+96     	; 0x299e <xTaskCreate+0x1da>
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	9c 01       	movw	r18, r24
    2942:	22 0f       	add	r18, r18
    2944:	33 1f       	adc	r19, r19
    2946:	22 0f       	add	r18, r18
    2948:	33 1f       	adc	r19, r19
    294a:	22 0f       	add	r18, r18
    294c:	33 1f       	adc	r19, r19
    294e:	82 0f       	add	r24, r18
    2950:	93 1f       	adc	r25, r19
    2952:	be 01       	movw	r22, r28
    2954:	83 59       	subi	r24, 0x93	; 147
    2956:	9e 4d       	sbci	r25, 0xDE	; 222
    2958:	0e 94 32 0a 	call	0x1464	; 0x1464 <vListInsertEnd>
    295c:	0f 90       	pop	r0
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	80 91 36 21 	lds	r24, 0x2136	; 0x802136 <xSchedulerRunning>
    2964:	88 23       	and	r24, r24
    2966:	51 f0       	breq	.+20     	; 0x297c <xTaskCreate+0x1b8>
    2968:	e0 91 c7 21 	lds	r30, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    296c:	f0 91 c8 21 	lds	r31, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    2970:	96 89       	ldd	r25, Z+22	; 0x16
    2972:	d6 01       	movw	r26, r12
    2974:	56 96       	adiw	r26, 0x16	; 22
    2976:	8c 91       	ld	r24, X
    2978:	98 17       	cp	r25, r24
    297a:	b0 f0       	brcs	.+44     	; 0x29a8 <xTaskCreate+0x1e4>
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	ff 90       	pop	r15
    2988:	ef 90       	pop	r14
    298a:	df 90       	pop	r13
    298c:	cf 90       	pop	r12
    298e:	bf 90       	pop	r11
    2990:	af 90       	pop	r10
    2992:	9f 90       	pop	r9
    2994:	8f 90       	pop	r8
    2996:	7f 90       	pop	r7
    2998:	6f 90       	pop	r6
    299a:	5f 90       	pop	r5
    299c:	08 95       	ret
    299e:	80 93 37 21 	sts	0x2137, r24	; 0x802137 <uxTopReadyPriority>
    29a2:	cd cf       	rjmp	.-102    	; 0x293e <xTaskCreate+0x17a>
    29a4:	09 e0       	ldi	r16, 0x09	; 9
    29a6:	5d cf       	rjmp	.-326    	; 0x2862 <xTaskCreate+0x9e>
    29a8:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vPortYield>
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	e7 cf       	rjmp	.-50     	; 0x297e <xTaskCreate+0x1ba>
    29b0:	c8 01       	movw	r24, r16
    29b2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <vPortFree>
    29b6:	8f ef       	ldi	r24, 0xFF	; 255
    29b8:	e2 cf       	rjmp	.-60     	; 0x297e <xTaskCreate+0x1ba>
    29ba:	60 e6       	ldi	r22, 0x60	; 96
    29bc:	73 e0       	ldi	r23, 0x03	; 3
    29be:	8a e2       	ldi	r24, 0x2A	; 42
    29c0:	90 e2       	ldi	r25, 0x20	; 32
    29c2:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    29c6:	f6 01       	movw	r30, r12
    29c8:	87 89       	ldd	r24, Z+23	; 0x17
    29ca:	90 8d       	ldd	r25, Z+24	; 0x18
    29cc:	27 cf       	rjmp	.-434    	; 0x281c <xTaskCreate+0x58>
    29ce:	0d e6       	ldi	r16, 0x6D	; 109
    29d0:	11 e2       	ldi	r17, 0x21	; 33
    29d2:	57 ec       	ldi	r21, 0xC7	; 199
    29d4:	e5 2e       	mov	r14, r21
    29d6:	51 e2       	ldi	r21, 0x21	; 33
    29d8:	f5 2e       	mov	r15, r21
    29da:	c8 01       	movw	r24, r16
    29dc:	0e 94 20 0a 	call	0x1440	; 0x1440 <vListInitialise>
    29e0:	07 5f       	subi	r16, 0xF7	; 247
    29e2:	1f 4f       	sbci	r17, 0xFF	; 255
    29e4:	e0 16       	cp	r14, r16
    29e6:	f1 06       	cpc	r15, r17
    29e8:	c1 f7       	brne	.-16     	; 0x29da <xTaskCreate+0x216>
    29ea:	84 e6       	ldi	r24, 0x64	; 100
    29ec:	91 e2       	ldi	r25, 0x21	; 33
    29ee:	0e 94 20 0a 	call	0x1440	; 0x1440 <vListInitialise>
    29f2:	8b e5       	ldi	r24, 0x5B	; 91
    29f4:	91 e2       	ldi	r25, 0x21	; 33
    29f6:	0e 94 20 0a 	call	0x1440	; 0x1440 <vListInitialise>
    29fa:	8e e4       	ldi	r24, 0x4E	; 78
    29fc:	91 e2       	ldi	r25, 0x21	; 33
    29fe:	0e 94 20 0a 	call	0x1440	; 0x1440 <vListInitialise>
    2a02:	85 e4       	ldi	r24, 0x45	; 69
    2a04:	91 e2       	ldi	r25, 0x21	; 33
    2a06:	0e 94 20 0a 	call	0x1440	; 0x1440 <vListInitialise>
    2a0a:	8b e3       	ldi	r24, 0x3B	; 59
    2a0c:	91 e2       	ldi	r25, 0x21	; 33
    2a0e:	0e 94 20 0a 	call	0x1440	; 0x1440 <vListInitialise>
    2a12:	84 e6       	ldi	r24, 0x64	; 100
    2a14:	91 e2       	ldi	r25, 0x21	; 33
    2a16:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <pxDelayedTaskList>
    2a1a:	90 93 5a 21 	sts	0x215A, r25	; 0x80215a <pxDelayedTaskList+0x1>
    2a1e:	8b e5       	ldi	r24, 0x5B	; 91
    2a20:	91 e2       	ldi	r25, 0x21	; 33
    2a22:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <pxOverflowDelayedTaskList>
    2a26:	90 93 58 21 	sts	0x2158, r25	; 0x802158 <pxOverflowDelayedTaskList+0x1>
    2a2a:	f6 01       	movw	r30, r12
    2a2c:	86 89       	ldd	r24, Z+22	; 0x16
    2a2e:	7c cf       	rjmp	.-264    	; 0x2928 <xTaskCreate+0x164>

00002a30 <vTaskSuspend>:
    2a30:	0f 93       	push	r16
    2a32:	1f 93       	push	r17
    2a34:	cf 93       	push	r28
    2a36:	df 93       	push	r29
    2a38:	ec 01       	movw	r28, r24
    2a3a:	0f b6       	in	r0, 0x3f	; 63
    2a3c:	f8 94       	cli
    2a3e:	0f 92       	push	r0
    2a40:	89 2b       	or	r24, r25
    2a42:	09 f4       	brne	.+2      	; 0x2a46 <vTaskSuspend+0x16>
    2a44:	62 c0       	rjmp	.+196    	; 0x2b0a <vTaskSuspend+0xda>
    2a46:	8e 01       	movw	r16, r28
    2a48:	0e 5f       	subi	r16, 0xFE	; 254
    2a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4c:	c8 01       	movw	r24, r16
    2a4e:	0e 94 84 0a 	call	0x1508	; 0x1508 <uxListRemove>
    2a52:	8c 89       	ldd	r24, Y+20	; 0x14
    2a54:	9d 89       	ldd	r25, Y+21	; 0x15
    2a56:	89 2b       	or	r24, r25
    2a58:	21 f0       	breq	.+8      	; 0x2a62 <vTaskSuspend+0x32>
    2a5a:	ce 01       	movw	r24, r28
    2a5c:	0c 96       	adiw	r24, 0x0c	; 12
    2a5e:	0e 94 84 0a 	call	0x1508	; 0x1508 <uxListRemove>
    2a62:	b8 01       	movw	r22, r16
    2a64:	8b e3       	ldi	r24, 0x3B	; 59
    2a66:	91 e2       	ldi	r25, 0x21	; 33
    2a68:	0e 94 32 0a 	call	0x1464	; 0x1464 <vListInsertEnd>
    2a6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a6e:	81 30       	cpi	r24, 0x01	; 1
    2a70:	21 f1       	breq	.+72     	; 0x2aba <vTaskSuspend+0x8a>
    2a72:	0f 90       	pop	r0
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	80 91 36 21 	lds	r24, 0x2136	; 0x802136 <xSchedulerRunning>
    2a7a:	88 23       	and	r24, r24
    2a7c:	91 f0       	breq	.+36     	; 0x2aa2 <vTaskSuspend+0x72>
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	0f 92       	push	r0
    2a84:	e0 91 59 21 	lds	r30, 0x2159	; 0x802159 <pxDelayedTaskList>
    2a88:	f0 91 5a 21 	lds	r31, 0x215A	; 0x80215a <pxDelayedTaskList+0x1>
    2a8c:	80 81       	ld	r24, Z
    2a8e:	81 11       	cpse	r24, r1
    2a90:	2b c0       	rjmp	.+86     	; 0x2ae8 <vTaskSuspend+0xb8>
    2a92:	8f ef       	ldi	r24, 0xFF	; 255
    2a94:	9f ef       	ldi	r25, 0xFF	; 255
    2a96:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <xNextTaskUnblockTime>
    2a9a:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <xNextTaskUnblockTime+0x1>
    2a9e:	0f 90       	pop	r0
    2aa0:	0f be       	out	0x3f, r0	; 63
    2aa2:	80 91 c7 21 	lds	r24, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    2aa6:	90 91 c8 21 	lds	r25, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    2aaa:	c8 17       	cp	r28, r24
    2aac:	d9 07       	cpc	r29, r25
    2aae:	39 f0       	breq	.+14     	; 0x2abe <vTaskSuspend+0x8e>
    2ab0:	df 91       	pop	r29
    2ab2:	cf 91       	pop	r28
    2ab4:	1f 91       	pop	r17
    2ab6:	0f 91       	pop	r16
    2ab8:	08 95       	ret
    2aba:	1f a6       	std	Y+47, r1	; 0x2f
    2abc:	da cf       	rjmp	.-76     	; 0x2a72 <vTaskSuspend+0x42>
    2abe:	80 91 36 21 	lds	r24, 0x2136	; 0x802136 <xSchedulerRunning>
    2ac2:	88 23       	and	r24, r24
    2ac4:	a1 f0       	breq	.+40     	; 0x2aee <vTaskSuspend+0xbe>
    2ac6:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <uxSchedulerSuspended>
    2aca:	88 23       	and	r24, r24
    2acc:	31 f0       	breq	.+12     	; 0x2ada <vTaskSuspend+0xaa>
    2ace:	68 ec       	ldi	r22, 0xC8	; 200
    2ad0:	76 e0       	ldi	r23, 0x06	; 6
    2ad2:	8a e2       	ldi	r24, 0x2A	; 42
    2ad4:	90 e2       	ldi	r25, 0x20	; 32
    2ad6:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    2ada:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vPortYield>
    2ade:	df 91       	pop	r29
    2ae0:	cf 91       	pop	r28
    2ae2:	1f 91       	pop	r17
    2ae4:	0f 91       	pop	r16
    2ae6:	08 95       	ret
    2ae8:	0e 94 94 12 	call	0x2528	; 0x2528 <prvResetNextTaskUnblockTime.part.0>
    2aec:	d8 cf       	rjmp	.-80     	; 0x2a9e <vTaskSuspend+0x6e>
    2aee:	90 91 3b 21 	lds	r25, 0x213B	; 0x80213b <xSuspendedTaskList>
    2af2:	80 91 3a 21 	lds	r24, 0x213A	; 0x80213a <uxCurrentNumberOfTasks>
    2af6:	98 17       	cp	r25, r24
    2af8:	99 f0       	breq	.+38     	; 0x2b20 <vTaskSuspend+0xf0>
    2afa:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <uxSchedulerSuspended>
    2afe:	88 23       	and	r24, r24
    2b00:	49 f0       	breq	.+18     	; 0x2b14 <vTaskSuspend+0xe4>
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	80 93 34 21 	sts	0x2134, r24	; 0x802134 <xYieldPending>
    2b08:	d3 cf       	rjmp	.-90     	; 0x2ab0 <vTaskSuspend+0x80>
    2b0a:	c0 91 c7 21 	lds	r28, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    2b0e:	d0 91 c8 21 	lds	r29, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    2b12:	99 cf       	rjmp	.-206    	; 0x2a46 <vTaskSuspend+0x16>
    2b14:	df 91       	pop	r29
    2b16:	cf 91       	pop	r28
    2b18:	1f 91       	pop	r17
    2b1a:	0f 91       	pop	r16
    2b1c:	0c 94 20 13 	jmp	0x2640	; 0x2640 <vTaskSwitchContext.part.5>
    2b20:	10 92 c7 21 	sts	0x21C7, r1	; 0x8021c7 <pxCurrentTCB>
    2b24:	10 92 c8 21 	sts	0x21C8, r1	; 0x8021c8 <pxCurrentTCB+0x1>
    2b28:	c3 cf       	rjmp	.-122    	; 0x2ab0 <vTaskSuspend+0x80>

00002b2a <vTaskResume>:
    2b2a:	0f 93       	push	r16
    2b2c:	1f 93       	push	r17
    2b2e:	cf 93       	push	r28
    2b30:	df 93       	push	r29
    2b32:	ec 01       	movw	r28, r24
    2b34:	89 2b       	or	r24, r25
    2b36:	09 f4       	brne	.+2      	; 0x2b3a <vTaskResume+0x10>
    2b38:	3d c0       	rjmp	.+122    	; 0x2bb4 <vTaskResume+0x8a>
    2b3a:	80 91 c7 21 	lds	r24, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    2b3e:	90 91 c8 21 	lds	r25, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    2b42:	c8 17       	cp	r28, r24
    2b44:	d9 07       	cpc	r29, r25
    2b46:	51 f0       	breq	.+20     	; 0x2b5c <vTaskResume+0x32>
    2b48:	0f b6       	in	r0, 0x3f	; 63
    2b4a:	f8 94       	cli
    2b4c:	0f 92       	push	r0
    2b4e:	ce 01       	movw	r24, r28
    2b50:	0e 94 a5 12 	call	0x254a	; 0x254a <prvTaskIsTaskSuspended>
    2b54:	81 11       	cpse	r24, r1
    2b56:	07 c0       	rjmp	.+14     	; 0x2b66 <vTaskResume+0x3c>
    2b58:	0f 90       	pop	r0
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	df 91       	pop	r29
    2b5e:	cf 91       	pop	r28
    2b60:	1f 91       	pop	r17
    2b62:	0f 91       	pop	r16
    2b64:	08 95       	ret
    2b66:	8e 01       	movw	r16, r28
    2b68:	0e 5f       	subi	r16, 0xFE	; 254
    2b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6c:	c8 01       	movw	r24, r16
    2b6e:	0e 94 84 0a 	call	0x1508	; 0x1508 <uxListRemove>
    2b72:	8e 89       	ldd	r24, Y+22	; 0x16
    2b74:	90 91 37 21 	lds	r25, 0x2137	; 0x802137 <uxTopReadyPriority>
    2b78:	98 17       	cp	r25, r24
    2b7a:	10 f4       	brcc	.+4      	; 0x2b80 <vTaskResume+0x56>
    2b7c:	80 93 37 21 	sts	0x2137, r24	; 0x802137 <uxTopReadyPriority>
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	9c 01       	movw	r18, r24
    2b84:	22 0f       	add	r18, r18
    2b86:	33 1f       	adc	r19, r19
    2b88:	22 0f       	add	r18, r18
    2b8a:	33 1f       	adc	r19, r19
    2b8c:	22 0f       	add	r18, r18
    2b8e:	33 1f       	adc	r19, r19
    2b90:	82 0f       	add	r24, r18
    2b92:	93 1f       	adc	r25, r19
    2b94:	b8 01       	movw	r22, r16
    2b96:	83 59       	subi	r24, 0x93	; 147
    2b98:	9e 4d       	sbci	r25, 0xDE	; 222
    2b9a:	0e 94 32 0a 	call	0x1464	; 0x1464 <vListInsertEnd>
    2b9e:	e0 91 c7 21 	lds	r30, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    2ba2:	f0 91 c8 21 	lds	r31, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    2ba6:	9e 89       	ldd	r25, Y+22	; 0x16
    2ba8:	86 89       	ldd	r24, Z+22	; 0x16
    2baa:	98 17       	cp	r25, r24
    2bac:	a8 f2       	brcs	.-86     	; 0x2b58 <vTaskResume+0x2e>
    2bae:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vPortYield>
    2bb2:	d2 cf       	rjmp	.-92     	; 0x2b58 <vTaskResume+0x2e>
    2bb4:	6c e1       	ldi	r22, 0x1C	; 28
    2bb6:	77 e0       	ldi	r23, 0x07	; 7
    2bb8:	8a e2       	ldi	r24, 0x2A	; 42
    2bba:	90 e2       	ldi	r25, 0x20	; 32
    2bbc:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    2bc0:	80 91 c7 21 	lds	r24, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    2bc4:	90 91 c8 21 	lds	r25, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    2bc8:	c9 cf       	rjmp	.-110    	; 0x2b5c <vTaskResume+0x32>

00002bca <vTaskStartScheduler>:
    2bca:	ef 92       	push	r14
    2bcc:	ff 92       	push	r15
    2bce:	0f 93       	push	r16
    2bd0:	8e e2       	ldi	r24, 0x2E	; 46
    2bd2:	e8 2e       	mov	r14, r24
    2bd4:	81 e2       	ldi	r24, 0x21	; 33
    2bd6:	f8 2e       	mov	r15, r24
    2bd8:	00 e0       	ldi	r16, 0x00	; 0
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e0       	ldi	r20, 0x00	; 0
    2be0:	51 e0       	ldi	r21, 0x01	; 1
    2be2:	6e e3       	ldi	r22, 0x3E	; 62
    2be4:	70 e2       	ldi	r23, 0x20	; 32
    2be6:	86 e6       	ldi	r24, 0x66	; 102
    2be8:	92 e1       	ldi	r25, 0x12	; 18
    2bea:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <xTaskCreate>
    2bee:	81 30       	cpi	r24, 0x01	; 1
    2bf0:	79 f0       	breq	.+30     	; 0x2c10 <vTaskStartScheduler+0x46>
    2bf2:	8f 3f       	cpi	r24, 0xFF	; 255
    2bf4:	21 f0       	breq	.+8      	; 0x2bfe <vTaskStartScheduler+0x34>
    2bf6:	0f 91       	pop	r16
    2bf8:	ff 90       	pop	r15
    2bfa:	ef 90       	pop	r14
    2bfc:	08 95       	ret
    2bfe:	67 e0       	ldi	r22, 0x07	; 7
    2c00:	78 e0       	ldi	r23, 0x08	; 8
    2c02:	8a e2       	ldi	r24, 0x2A	; 42
    2c04:	90 e2       	ldi	r25, 0x20	; 32
    2c06:	0f 91       	pop	r16
    2c08:	ff 90       	pop	r15
    2c0a:	ef 90       	pop	r14
    2c0c:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <vAssertCalled>
    2c10:	f8 94       	cli
    2c12:	2f ef       	ldi	r18, 0xFF	; 255
    2c14:	3f ef       	ldi	r19, 0xFF	; 255
    2c16:	20 93 30 21 	sts	0x2130, r18	; 0x802130 <xNextTaskUnblockTime>
    2c1a:	30 93 31 21 	sts	0x2131, r19	; 0x802131 <xNextTaskUnblockTime+0x1>
    2c1e:	80 93 36 21 	sts	0x2136, r24	; 0x802136 <xSchedulerRunning>
    2c22:	10 92 38 21 	sts	0x2138, r1	; 0x802138 <xTickCount>
    2c26:	10 92 39 21 	sts	0x2139, r1	; 0x802139 <xTickCount+0x1>
    2c2a:	0e 94 45 0c 	call	0x188a	; 0x188a <vConfigureTimerForRunTimeStats>
    2c2e:	0f 91       	pop	r16
    2c30:	ff 90       	pop	r15
    2c32:	ef 90       	pop	r14
    2c34:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <xPortStartScheduler>

00002c38 <vTaskSuspendAll>:
    2c38:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <uxSchedulerSuspended>
    2c3c:	8f 5f       	subi	r24, 0xFF	; 255
    2c3e:	80 93 2d 21 	sts	0x212D, r24	; 0x80212d <uxSchedulerSuspended>
    2c42:	08 95       	ret

00002c44 <xTaskGetTickCount>:
    2c44:	0f b6       	in	r0, 0x3f	; 63
    2c46:	f8 94       	cli
    2c48:	0f 92       	push	r0
    2c4a:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <xTickCount>
    2c4e:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <xTickCount+0x1>
    2c52:	0f 90       	pop	r0
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	08 95       	ret

00002c58 <xTaskIncrementTick>:
    2c58:	df 92       	push	r13
    2c5a:	ef 92       	push	r14
    2c5c:	ff 92       	push	r15
    2c5e:	0f 93       	push	r16
    2c60:	1f 93       	push	r17
    2c62:	cf 93       	push	r28
    2c64:	df 93       	push	r29
    2c66:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <uxSchedulerSuspended>
    2c6a:	81 11       	cpse	r24, r1
    2c6c:	b9 c0       	rjmp	.+370    	; 0x2de0 <xTaskIncrementTick+0x188>
    2c6e:	e0 90 38 21 	lds	r14, 0x2138	; 0x802138 <xTickCount>
    2c72:	f0 90 39 21 	lds	r15, 0x2139	; 0x802139 <xTickCount+0x1>
    2c76:	8f ef       	ldi	r24, 0xFF	; 255
    2c78:	e8 1a       	sub	r14, r24
    2c7a:	f8 0a       	sbc	r15, r24
    2c7c:	e0 92 38 21 	sts	0x2138, r14	; 0x802138 <xTickCount>
    2c80:	f0 92 39 21 	sts	0x2139, r15	; 0x802139 <xTickCount+0x1>
    2c84:	e1 14       	cp	r14, r1
    2c86:	f1 04       	cpc	r15, r1
    2c88:	49 f5       	brne	.+82     	; 0x2cdc <xTaskIncrementTick+0x84>
    2c8a:	e0 91 59 21 	lds	r30, 0x2159	; 0x802159 <pxDelayedTaskList>
    2c8e:	f0 91 5a 21 	lds	r31, 0x215A	; 0x80215a <pxDelayedTaskList+0x1>
    2c92:	80 81       	ld	r24, Z
    2c94:	81 11       	cpse	r24, r1
    2c96:	ab c0       	rjmp	.+342    	; 0x2dee <xTaskIncrementTick+0x196>
    2c98:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <pxDelayedTaskList>
    2c9c:	90 91 5a 21 	lds	r25, 0x215A	; 0x80215a <pxDelayedTaskList+0x1>
    2ca0:	20 91 57 21 	lds	r18, 0x2157	; 0x802157 <pxOverflowDelayedTaskList>
    2ca4:	30 91 58 21 	lds	r19, 0x2158	; 0x802158 <pxOverflowDelayedTaskList+0x1>
    2ca8:	20 93 59 21 	sts	0x2159, r18	; 0x802159 <pxDelayedTaskList>
    2cac:	30 93 5a 21 	sts	0x215A, r19	; 0x80215a <pxDelayedTaskList+0x1>
    2cb0:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <pxOverflowDelayedTaskList>
    2cb4:	90 93 58 21 	sts	0x2158, r25	; 0x802158 <pxOverflowDelayedTaskList+0x1>
    2cb8:	80 91 33 21 	lds	r24, 0x2133	; 0x802133 <xNumOfOverflows>
    2cbc:	8f 5f       	subi	r24, 0xFF	; 255
    2cbe:	80 93 33 21 	sts	0x2133, r24	; 0x802133 <xNumOfOverflows>
    2cc2:	e0 91 59 21 	lds	r30, 0x2159	; 0x802159 <pxDelayedTaskList>
    2cc6:	f0 91 5a 21 	lds	r31, 0x215A	; 0x80215a <pxDelayedTaskList+0x1>
    2cca:	80 81       	ld	r24, Z
    2ccc:	81 11       	cpse	r24, r1
    2cce:	96 c0       	rjmp	.+300    	; 0x2dfc <xTaskIncrementTick+0x1a4>
    2cd0:	8f ef       	ldi	r24, 0xFF	; 255
    2cd2:	9f ef       	ldi	r25, 0xFF	; 255
    2cd4:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <xNextTaskUnblockTime>
    2cd8:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <xNextTaskUnblockTime+0x1>
    2cdc:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <xNextTaskUnblockTime>
    2ce0:	90 91 31 21 	lds	r25, 0x2131	; 0x802131 <xNextTaskUnblockTime+0x1>
    2ce4:	d1 2c       	mov	r13, r1
    2ce6:	e8 16       	cp	r14, r24
    2ce8:	f9 06       	cpc	r15, r25
    2cea:	08 f4       	brcc	.+2      	; 0x2cee <xTaskIncrementTick+0x96>
    2cec:	53 c0       	rjmp	.+166    	; 0x2d94 <xTaskIncrementTick+0x13c>
    2cee:	e0 91 59 21 	lds	r30, 0x2159	; 0x802159 <pxDelayedTaskList>
    2cf2:	f0 91 5a 21 	lds	r31, 0x215A	; 0x80215a <pxDelayedTaskList+0x1>
    2cf6:	80 81       	ld	r24, Z
    2cf8:	88 23       	and	r24, r24
    2cfa:	09 f4       	brne	.+2      	; 0x2cfe <xTaskIncrementTick+0xa6>
    2cfc:	45 c0       	rjmp	.+138    	; 0x2d88 <xTaskIncrementTick+0x130>
    2cfe:	e0 91 59 21 	lds	r30, 0x2159	; 0x802159 <pxDelayedTaskList>
    2d02:	f0 91 5a 21 	lds	r31, 0x215A	; 0x80215a <pxDelayedTaskList+0x1>
    2d06:	05 80       	ldd	r0, Z+5	; 0x05
    2d08:	f6 81       	ldd	r31, Z+6	; 0x06
    2d0a:	e0 2d       	mov	r30, r0
    2d0c:	c6 81       	ldd	r28, Z+6	; 0x06
    2d0e:	d7 81       	ldd	r29, Z+7	; 0x07
    2d10:	8a 81       	ldd	r24, Y+2	; 0x02
    2d12:	9b 81       	ldd	r25, Y+3	; 0x03
    2d14:	e8 16       	cp	r14, r24
    2d16:	f9 06       	cpc	r15, r25
    2d18:	08 f4       	brcc	.+2      	; 0x2d1c <xTaskIncrementTick+0xc4>
    2d1a:	73 c0       	rjmp	.+230    	; 0x2e02 <xTaskIncrementTick+0x1aa>
    2d1c:	8e 01       	movw	r16, r28
    2d1e:	0e 5f       	subi	r16, 0xFE	; 254
    2d20:	1f 4f       	sbci	r17, 0xFF	; 255
    2d22:	c8 01       	movw	r24, r16
    2d24:	0e 94 84 0a 	call	0x1508	; 0x1508 <uxListRemove>
    2d28:	8c 89       	ldd	r24, Y+20	; 0x14
    2d2a:	9d 89       	ldd	r25, Y+21	; 0x15
    2d2c:	89 2b       	or	r24, r25
    2d2e:	21 f0       	breq	.+8      	; 0x2d38 <xTaskIncrementTick+0xe0>
    2d30:	ce 01       	movw	r24, r28
    2d32:	0c 96       	adiw	r24, 0x0c	; 12
    2d34:	0e 94 84 0a 	call	0x1508	; 0x1508 <uxListRemove>
    2d38:	8e 89       	ldd	r24, Y+22	; 0x16
    2d3a:	90 91 37 21 	lds	r25, 0x2137	; 0x802137 <uxTopReadyPriority>
    2d3e:	98 17       	cp	r25, r24
    2d40:	10 f4       	brcc	.+4      	; 0x2d46 <xTaskIncrementTick+0xee>
    2d42:	80 93 37 21 	sts	0x2137, r24	; 0x802137 <uxTopReadyPriority>
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	9c 01       	movw	r18, r24
    2d4a:	22 0f       	add	r18, r18
    2d4c:	33 1f       	adc	r19, r19
    2d4e:	22 0f       	add	r18, r18
    2d50:	33 1f       	adc	r19, r19
    2d52:	22 0f       	add	r18, r18
    2d54:	33 1f       	adc	r19, r19
    2d56:	82 0f       	add	r24, r18
    2d58:	93 1f       	adc	r25, r19
    2d5a:	b8 01       	movw	r22, r16
    2d5c:	83 59       	subi	r24, 0x93	; 147
    2d5e:	9e 4d       	sbci	r25, 0xDE	; 222
    2d60:	0e 94 32 0a 	call	0x1464	; 0x1464 <vListInsertEnd>
    2d64:	e0 91 c7 21 	lds	r30, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    2d68:	f0 91 c8 21 	lds	r31, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    2d6c:	9e 89       	ldd	r25, Y+22	; 0x16
    2d6e:	86 89       	ldd	r24, Z+22	; 0x16
    2d70:	98 17       	cp	r25, r24
    2d72:	08 f4       	brcc	.+2      	; 0x2d76 <xTaskIncrementTick+0x11e>
    2d74:	bc cf       	rjmp	.-136    	; 0x2cee <xTaskIncrementTick+0x96>
    2d76:	dd 24       	eor	r13, r13
    2d78:	d3 94       	inc	r13
    2d7a:	e0 91 59 21 	lds	r30, 0x2159	; 0x802159 <pxDelayedTaskList>
    2d7e:	f0 91 5a 21 	lds	r31, 0x215A	; 0x80215a <pxDelayedTaskList+0x1>
    2d82:	80 81       	ld	r24, Z
    2d84:	81 11       	cpse	r24, r1
    2d86:	bb cf       	rjmp	.-138    	; 0x2cfe <xTaskIncrementTick+0xa6>
    2d88:	8f ef       	ldi	r24, 0xFF	; 255
    2d8a:	9f ef       	ldi	r25, 0xFF	; 255
    2d8c:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <xNextTaskUnblockTime>
    2d90:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <xNextTaskUnblockTime+0x1>
    2d94:	e0 91 c7 21 	lds	r30, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    2d98:	f0 91 c8 21 	lds	r31, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    2d9c:	86 89       	ldd	r24, Z+22	; 0x16
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	fc 01       	movw	r30, r24
    2da2:	ee 0f       	add	r30, r30
    2da4:	ff 1f       	adc	r31, r31
    2da6:	ee 0f       	add	r30, r30
    2da8:	ff 1f       	adc	r31, r31
    2daa:	ee 0f       	add	r30, r30
    2dac:	ff 1f       	adc	r31, r31
    2dae:	8e 0f       	add	r24, r30
    2db0:	9f 1f       	adc	r25, r31
    2db2:	fc 01       	movw	r30, r24
    2db4:	e3 59       	subi	r30, 0x93	; 147
    2db6:	fe 4d       	sbci	r31, 0xDE	; 222
    2db8:	80 81       	ld	r24, Z
    2dba:	82 30       	cpi	r24, 0x02	; 2
    2dbc:	10 f0       	brcs	.+4      	; 0x2dc2 <xTaskIncrementTick+0x16a>
    2dbe:	dd 24       	eor	r13, r13
    2dc0:	d3 94       	inc	r13
    2dc2:	80 91 34 21 	lds	r24, 0x2134	; 0x802134 <xYieldPending>
    2dc6:	88 23       	and	r24, r24
    2dc8:	11 f0       	breq	.+4      	; 0x2dce <xTaskIncrementTick+0x176>
    2dca:	dd 24       	eor	r13, r13
    2dcc:	d3 94       	inc	r13
    2dce:	8d 2d       	mov	r24, r13
    2dd0:	df 91       	pop	r29
    2dd2:	cf 91       	pop	r28
    2dd4:	1f 91       	pop	r17
    2dd6:	0f 91       	pop	r16
    2dd8:	ff 90       	pop	r15
    2dda:	ef 90       	pop	r14
    2ddc:	df 90       	pop	r13
    2dde:	08 95       	ret
    2de0:	80 91 35 21 	lds	r24, 0x2135	; 0x802135 <uxPendedTicks>
    2de4:	8f 5f       	subi	r24, 0xFF	; 255
    2de6:	80 93 35 21 	sts	0x2135, r24	; 0x802135 <uxPendedTicks>
    2dea:	d1 2c       	mov	r13, r1
    2dec:	ea cf       	rjmp	.-44     	; 0x2dc2 <xTaskIncrementTick+0x16a>
    2dee:	66 e6       	ldi	r22, 0x66	; 102
    2df0:	7a e0       	ldi	r23, 0x0A	; 10
    2df2:	8a e2       	ldi	r24, 0x2A	; 42
    2df4:	90 e2       	ldi	r25, 0x20	; 32
    2df6:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    2dfa:	4e cf       	rjmp	.-356    	; 0x2c98 <xTaskIncrementTick+0x40>
    2dfc:	0e 94 94 12 	call	0x2528	; 0x2528 <prvResetNextTaskUnblockTime.part.0>
    2e00:	6d cf       	rjmp	.-294    	; 0x2cdc <xTaskIncrementTick+0x84>
    2e02:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <xNextTaskUnblockTime>
    2e06:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <xNextTaskUnblockTime+0x1>
    2e0a:	c4 cf       	rjmp	.-120    	; 0x2d94 <xTaskIncrementTick+0x13c>

00002e0c <xTaskResumeAll>:
    2e0c:	ff 92       	push	r15
    2e0e:	0f 93       	push	r16
    2e10:	1f 93       	push	r17
    2e12:	cf 93       	push	r28
    2e14:	df 93       	push	r29
    2e16:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <uxSchedulerSuspended>
    2e1a:	88 23       	and	r24, r24
    2e1c:	09 f4       	brne	.+2      	; 0x2e20 <xTaskResumeAll+0x14>
    2e1e:	77 c0       	rjmp	.+238    	; 0x2f0e <xTaskResumeAll+0x102>
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	0f 92       	push	r0
    2e26:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <uxSchedulerSuspended>
    2e2a:	81 50       	subi	r24, 0x01	; 1
    2e2c:	80 93 2d 21 	sts	0x212D, r24	; 0x80212d <uxSchedulerSuspended>
    2e30:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <uxSchedulerSuspended>
    2e34:	81 11       	cpse	r24, r1
    2e36:	62 c0       	rjmp	.+196    	; 0x2efc <xTaskResumeAll+0xf0>
    2e38:	80 91 3a 21 	lds	r24, 0x213A	; 0x80213a <uxCurrentNumberOfTasks>
    2e3c:	88 23       	and	r24, r24
    2e3e:	09 f4       	brne	.+2      	; 0x2e42 <xTaskResumeAll+0x36>
    2e40:	5d c0       	rjmp	.+186    	; 0x2efc <xTaskResumeAll+0xf0>
    2e42:	c0 e0       	ldi	r28, 0x00	; 0
    2e44:	d0 e0       	ldi	r29, 0x00	; 0
    2e46:	ff 24       	eor	r15, r15
    2e48:	f3 94       	inc	r15
    2e4a:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <xPendingReadyList>
    2e4e:	88 23       	and	r24, r24
    2e50:	a1 f1       	breq	.+104    	; 0x2eba <xTaskResumeAll+0xae>
    2e52:	e0 91 53 21 	lds	r30, 0x2153	; 0x802153 <xPendingReadyList+0x5>
    2e56:	f0 91 54 21 	lds	r31, 0x2154	; 0x802154 <xPendingReadyList+0x6>
    2e5a:	c6 81       	ldd	r28, Z+6	; 0x06
    2e5c:	d7 81       	ldd	r29, Z+7	; 0x07
    2e5e:	ce 01       	movw	r24, r28
    2e60:	0c 96       	adiw	r24, 0x0c	; 12
    2e62:	0e 94 84 0a 	call	0x1508	; 0x1508 <uxListRemove>
    2e66:	8e 01       	movw	r16, r28
    2e68:	0e 5f       	subi	r16, 0xFE	; 254
    2e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6c:	c8 01       	movw	r24, r16
    2e6e:	0e 94 84 0a 	call	0x1508	; 0x1508 <uxListRemove>
    2e72:	8e 89       	ldd	r24, Y+22	; 0x16
    2e74:	90 91 37 21 	lds	r25, 0x2137	; 0x802137 <uxTopReadyPriority>
    2e78:	98 17       	cp	r25, r24
    2e7a:	10 f4       	brcc	.+4      	; 0x2e80 <xTaskResumeAll+0x74>
    2e7c:	80 93 37 21 	sts	0x2137, r24	; 0x802137 <uxTopReadyPriority>
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	9c 01       	movw	r18, r24
    2e84:	22 0f       	add	r18, r18
    2e86:	33 1f       	adc	r19, r19
    2e88:	22 0f       	add	r18, r18
    2e8a:	33 1f       	adc	r19, r19
    2e8c:	22 0f       	add	r18, r18
    2e8e:	33 1f       	adc	r19, r19
    2e90:	82 0f       	add	r24, r18
    2e92:	93 1f       	adc	r25, r19
    2e94:	b8 01       	movw	r22, r16
    2e96:	83 59       	subi	r24, 0x93	; 147
    2e98:	9e 4d       	sbci	r25, 0xDE	; 222
    2e9a:	0e 94 32 0a 	call	0x1464	; 0x1464 <vListInsertEnd>
    2e9e:	e0 91 c7 21 	lds	r30, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    2ea2:	f0 91 c8 21 	lds	r31, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    2ea6:	9e 89       	ldd	r25, Y+22	; 0x16
    2ea8:	86 89       	ldd	r24, Z+22	; 0x16
    2eaa:	98 17       	cp	r25, r24
    2eac:	70 f2       	brcs	.-100    	; 0x2e4a <xTaskResumeAll+0x3e>
    2eae:	f0 92 34 21 	sts	0x2134, r15	; 0x802134 <xYieldPending>
    2eb2:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <xPendingReadyList>
    2eb6:	81 11       	cpse	r24, r1
    2eb8:	cc cf       	rjmp	.-104    	; 0x2e52 <xTaskResumeAll+0x46>
    2eba:	cd 2b       	or	r28, r29
    2ebc:	69 f0       	breq	.+26     	; 0x2ed8 <xTaskResumeAll+0xcc>
    2ebe:	e0 91 59 21 	lds	r30, 0x2159	; 0x802159 <pxDelayedTaskList>
    2ec2:	f0 91 5a 21 	lds	r31, 0x215A	; 0x80215a <pxDelayedTaskList+0x1>
    2ec6:	80 81       	ld	r24, Z
    2ec8:	81 11       	cpse	r24, r1
    2eca:	2c c0       	rjmp	.+88     	; 0x2f24 <xTaskResumeAll+0x118>
    2ecc:	8f ef       	ldi	r24, 0xFF	; 255
    2ece:	9f ef       	ldi	r25, 0xFF	; 255
    2ed0:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <xNextTaskUnblockTime>
    2ed4:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <xNextTaskUnblockTime+0x1>
    2ed8:	c0 91 35 21 	lds	r28, 0x2135	; 0x802135 <uxPendedTicks>
    2edc:	cc 23       	and	r28, r28
    2ede:	51 f0       	breq	.+20     	; 0x2ef4 <xTaskResumeAll+0xe8>
    2ee0:	d1 e0       	ldi	r29, 0x01	; 1
    2ee2:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <xTaskIncrementTick>
    2ee6:	81 11       	cpse	r24, r1
    2ee8:	d0 93 34 21 	sts	0x2134, r29	; 0x802134 <xYieldPending>
    2eec:	c1 50       	subi	r28, 0x01	; 1
    2eee:	c9 f7       	brne	.-14     	; 0x2ee2 <xTaskResumeAll+0xd6>
    2ef0:	10 92 35 21 	sts	0x2135, r1	; 0x802135 <uxPendedTicks>
    2ef4:	80 91 34 21 	lds	r24, 0x2134	; 0x802134 <xYieldPending>
    2ef8:	81 11       	cpse	r24, r1
    2efa:	10 c0       	rjmp	.+32     	; 0x2f1c <xTaskResumeAll+0x110>
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	0f 90       	pop	r0
    2f00:	0f be       	out	0x3f, r0	; 63
    2f02:	df 91       	pop	r29
    2f04:	cf 91       	pop	r28
    2f06:	1f 91       	pop	r17
    2f08:	0f 91       	pop	r16
    2f0a:	ff 90       	pop	r15
    2f0c:	08 95       	ret
    2f0e:	6c e6       	ldi	r22, 0x6C	; 108
    2f10:	78 e0       	ldi	r23, 0x08	; 8
    2f12:	8a e2       	ldi	r24, 0x2A	; 42
    2f14:	90 e2       	ldi	r25, 0x20	; 32
    2f16:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    2f1a:	82 cf       	rjmp	.-252    	; 0x2e20 <xTaskResumeAll+0x14>
    2f1c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vPortYield>
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	ed cf       	rjmp	.-38     	; 0x2efe <xTaskResumeAll+0xf2>
    2f24:	0e 94 94 12 	call	0x2528	; 0x2528 <prvResetNextTaskUnblockTime.part.0>
    2f28:	d7 cf       	rjmp	.-82     	; 0x2ed8 <xTaskResumeAll+0xcc>

00002f2a <vTaskDelayUntil>:
    2f2a:	0f 93       	push	r16
    2f2c:	1f 93       	push	r17
    2f2e:	cf 93       	push	r28
    2f30:	df 93       	push	r29
    2f32:	8c 01       	movw	r16, r24
    2f34:	eb 01       	movw	r28, r22
    2f36:	89 2b       	or	r24, r25
    2f38:	09 f4       	brne	.+2      	; 0x2f3c <vTaskDelayUntil+0x12>
    2f3a:	46 c0       	rjmp	.+140    	; 0x2fc8 <vTaskDelayUntil+0x9e>
    2f3c:	20 97       	sbiw	r28, 0x00	; 0
    2f3e:	e9 f1       	breq	.+122    	; 0x2fba <vTaskDelayUntil+0x90>
    2f40:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <uxSchedulerSuspended>
    2f44:	81 11       	cpse	r24, r1
    2f46:	32 c0       	rjmp	.+100    	; 0x2fac <vTaskDelayUntil+0x82>
    2f48:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <uxSchedulerSuspended>
    2f4c:	8f 5f       	subi	r24, 0xFF	; 255
    2f4e:	80 93 2d 21 	sts	0x212D, r24	; 0x80212d <uxSchedulerSuspended>
    2f52:	40 91 38 21 	lds	r20, 0x2138	; 0x802138 <xTickCount>
    2f56:	50 91 39 21 	lds	r21, 0x2139	; 0x802139 <xTickCount+0x1>
    2f5a:	f8 01       	movw	r30, r16
    2f5c:	20 81       	ld	r18, Z
    2f5e:	31 81       	ldd	r19, Z+1	; 0x01
    2f60:	ce 01       	movw	r24, r28
    2f62:	82 0f       	add	r24, r18
    2f64:	93 1f       	adc	r25, r19
    2f66:	42 17       	cp	r20, r18
    2f68:	53 07       	cpc	r21, r19
    2f6a:	88 f4       	brcc	.+34     	; 0x2f8e <vTaskDelayUntil+0x64>
    2f6c:	82 17       	cp	r24, r18
    2f6e:	93 07       	cpc	r25, r19
    2f70:	88 f0       	brcs	.+34     	; 0x2f94 <vTaskDelayUntil+0x6a>
    2f72:	f8 01       	movw	r30, r16
    2f74:	80 83       	st	Z, r24
    2f76:	91 83       	std	Z+1, r25	; 0x01
    2f78:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskResumeAll>
    2f7c:	81 11       	cpse	r24, r1
    2f7e:	02 c0       	rjmp	.+4      	; 0x2f84 <vTaskDelayUntil+0x5a>
    2f80:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vPortYield>
    2f84:	df 91       	pop	r29
    2f86:	cf 91       	pop	r28
    2f88:	1f 91       	pop	r17
    2f8a:	0f 91       	pop	r16
    2f8c:	08 95       	ret
    2f8e:	82 17       	cp	r24, r18
    2f90:	93 07       	cpc	r25, r19
    2f92:	18 f0       	brcs	.+6      	; 0x2f9a <vTaskDelayUntil+0x70>
    2f94:	48 17       	cp	r20, r24
    2f96:	59 07       	cpc	r21, r25
    2f98:	60 f7       	brcc	.-40     	; 0x2f72 <vTaskDelayUntil+0x48>
    2f9a:	f8 01       	movw	r30, r16
    2f9c:	80 83       	st	Z, r24
    2f9e:	91 83       	std	Z+1, r25	; 0x01
    2fa0:	60 e0       	ldi	r22, 0x00	; 0
    2fa2:	84 1b       	sub	r24, r20
    2fa4:	95 0b       	sbc	r25, r21
    2fa6:	0e 94 c4 12 	call	0x2588	; 0x2588 <prvAddCurrentTaskToDelayedList>
    2faa:	e6 cf       	rjmp	.-52     	; 0x2f78 <vTaskDelayUntil+0x4e>
    2fac:	6c ec       	ldi	r22, 0xCC	; 204
    2fae:	74 e0       	ldi	r23, 0x04	; 4
    2fb0:	8a e2       	ldi	r24, 0x2A	; 42
    2fb2:	90 e2       	ldi	r25, 0x20	; 32
    2fb4:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    2fb8:	c7 cf       	rjmp	.-114    	; 0x2f48 <vTaskDelayUntil+0x1e>
    2fba:	6b ec       	ldi	r22, 0xCB	; 203
    2fbc:	74 e0       	ldi	r23, 0x04	; 4
    2fbe:	8a e2       	ldi	r24, 0x2A	; 42
    2fc0:	90 e2       	ldi	r25, 0x20	; 32
    2fc2:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    2fc6:	bc cf       	rjmp	.-136    	; 0x2f40 <vTaskDelayUntil+0x16>
    2fc8:	6a ec       	ldi	r22, 0xCA	; 202
    2fca:	74 e0       	ldi	r23, 0x04	; 4
    2fcc:	8a e2       	ldi	r24, 0x2A	; 42
    2fce:	90 e2       	ldi	r25, 0x20	; 32
    2fd0:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    2fd4:	b3 cf       	rjmp	.-154    	; 0x2f3c <vTaskDelayUntil+0x12>

00002fd6 <vTaskDelay>:
    2fd6:	cf 93       	push	r28
    2fd8:	df 93       	push	r29
    2fda:	ec 01       	movw	r28, r24
    2fdc:	89 2b       	or	r24, r25
    2fde:	29 f4       	brne	.+10     	; 0x2fea <vTaskDelay+0x14>
    2fe0:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vPortYield>
    2fe4:	df 91       	pop	r29
    2fe6:	cf 91       	pop	r28
    2fe8:	08 95       	ret
    2fea:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <uxSchedulerSuspended>
    2fee:	81 11       	cpse	r24, r1
    2ff0:	10 c0       	rjmp	.+32     	; 0x3012 <vTaskDelay+0x3c>
    2ff2:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <uxSchedulerSuspended>
    2ff6:	8f 5f       	subi	r24, 0xFF	; 255
    2ff8:	80 93 2d 21 	sts	0x212D, r24	; 0x80212d <uxSchedulerSuspended>
    2ffc:	60 e0       	ldi	r22, 0x00	; 0
    2ffe:	ce 01       	movw	r24, r28
    3000:	0e 94 c4 12 	call	0x2588	; 0x2588 <prvAddCurrentTaskToDelayedList>
    3004:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <xTaskResumeAll>
    3008:	88 23       	and	r24, r24
    300a:	51 f3       	breq	.-44     	; 0x2fe0 <vTaskDelay+0xa>
    300c:	df 91       	pop	r29
    300e:	cf 91       	pop	r28
    3010:	08 95       	ret
    3012:	60 e2       	ldi	r22, 0x20	; 32
    3014:	75 e0       	ldi	r23, 0x05	; 5
    3016:	8a e2       	ldi	r24, 0x2A	; 42
    3018:	90 e2       	ldi	r25, 0x20	; 32
    301a:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    301e:	e9 cf       	rjmp	.-46     	; 0x2ff2 <vTaskDelay+0x1c>

00003020 <vTaskSwitchContext>:
    3020:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <uxSchedulerSuspended>
    3024:	81 11       	cpse	r24, r1
    3026:	02 c0       	rjmp	.+4      	; 0x302c <vTaskSwitchContext+0xc>
    3028:	0c 94 20 13 	jmp	0x2640	; 0x2640 <vTaskSwitchContext.part.5>
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	80 93 34 21 	sts	0x2134, r24	; 0x802134 <xYieldPending>
    3032:	08 95       	ret

00003034 <vTaskPlaceOnEventList>:
    3034:	0f 93       	push	r16
    3036:	1f 93       	push	r17
    3038:	cf 93       	push	r28
    303a:	df 93       	push	r29
    303c:	ec 01       	movw	r28, r24
    303e:	8b 01       	movw	r16, r22
    3040:	89 2b       	or	r24, r25
    3042:	89 f0       	breq	.+34     	; 0x3066 <vTaskPlaceOnEventList+0x32>
    3044:	60 91 c7 21 	lds	r22, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    3048:	70 91 c8 21 	lds	r23, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    304c:	64 5f       	subi	r22, 0xF4	; 244
    304e:	7f 4f       	sbci	r23, 0xFF	; 255
    3050:	ce 01       	movw	r24, r28
    3052:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <vListInsert>
    3056:	61 e0       	ldi	r22, 0x01	; 1
    3058:	c8 01       	movw	r24, r16
    305a:	df 91       	pop	r29
    305c:	cf 91       	pop	r28
    305e:	1f 91       	pop	r17
    3060:	0f 91       	pop	r16
    3062:	0c 94 c4 12 	jmp	0x2588	; 0x2588 <prvAddCurrentTaskToDelayedList>
    3066:	63 ea       	ldi	r22, 0xA3	; 163
    3068:	7b e0       	ldi	r23, 0x0B	; 11
    306a:	8a e2       	ldi	r24, 0x2A	; 42
    306c:	90 e2       	ldi	r25, 0x20	; 32
    306e:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    3072:	e8 cf       	rjmp	.-48     	; 0x3044 <vTaskPlaceOnEventList+0x10>

00003074 <xTaskRemoveFromEventList>:
    3074:	0f 93       	push	r16
    3076:	1f 93       	push	r17
    3078:	cf 93       	push	r28
    307a:	df 93       	push	r29
    307c:	dc 01       	movw	r26, r24
    307e:	15 96       	adiw	r26, 0x05	; 5
    3080:	ed 91       	ld	r30, X+
    3082:	fc 91       	ld	r31, X
    3084:	16 97       	sbiw	r26, 0x06	; 6
    3086:	c6 81       	ldd	r28, Z+6	; 0x06
    3088:	d7 81       	ldd	r29, Z+7	; 0x07
    308a:	20 97       	sbiw	r28, 0x00	; 0
    308c:	09 f4       	brne	.+2      	; 0x3090 <xTaskRemoveFromEventList+0x1c>
    308e:	42 c0       	rjmp	.+132    	; 0x3114 <xTaskRemoveFromEventList+0xa0>
    3090:	8e 01       	movw	r16, r28
    3092:	04 5f       	subi	r16, 0xF4	; 244
    3094:	1f 4f       	sbci	r17, 0xFF	; 255
    3096:	c8 01       	movw	r24, r16
    3098:	0e 94 84 0a 	call	0x1508	; 0x1508 <uxListRemove>
    309c:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <uxSchedulerSuspended>
    30a0:	81 11       	cpse	r24, r1
    30a2:	29 c0       	rjmp	.+82     	; 0x30f6 <xTaskRemoveFromEventList+0x82>
    30a4:	0a 50       	subi	r16, 0x0A	; 10
    30a6:	11 09       	sbc	r17, r1
    30a8:	c8 01       	movw	r24, r16
    30aa:	0e 94 84 0a 	call	0x1508	; 0x1508 <uxListRemove>
    30ae:	8e 89       	ldd	r24, Y+22	; 0x16
    30b0:	90 91 37 21 	lds	r25, 0x2137	; 0x802137 <uxTopReadyPriority>
    30b4:	98 17       	cp	r25, r24
    30b6:	28 f1       	brcs	.+74     	; 0x3102 <xTaskRemoveFromEventList+0x8e>
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	9c 01       	movw	r18, r24
    30bc:	22 0f       	add	r18, r18
    30be:	33 1f       	adc	r19, r19
    30c0:	22 0f       	add	r18, r18
    30c2:	33 1f       	adc	r19, r19
    30c4:	22 0f       	add	r18, r18
    30c6:	33 1f       	adc	r19, r19
    30c8:	82 0f       	add	r24, r18
    30ca:	93 1f       	adc	r25, r19
    30cc:	b8 01       	movw	r22, r16
    30ce:	83 59       	subi	r24, 0x93	; 147
    30d0:	9e 4d       	sbci	r25, 0xDE	; 222
    30d2:	0e 94 32 0a 	call	0x1464	; 0x1464 <vListInsertEnd>
    30d6:	e0 91 c7 21 	lds	r30, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    30da:	f0 91 c8 21 	lds	r31, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    30de:	9e 89       	ldd	r25, Y+22	; 0x16
    30e0:	86 89       	ldd	r24, Z+22	; 0x16
    30e2:	89 17       	cp	r24, r25
    30e4:	88 f4       	brcc	.+34     	; 0x3108 <xTaskRemoveFromEventList+0x94>
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	80 93 34 21 	sts	0x2134, r24	; 0x802134 <xYieldPending>
    30ec:	df 91       	pop	r29
    30ee:	cf 91       	pop	r28
    30f0:	1f 91       	pop	r17
    30f2:	0f 91       	pop	r16
    30f4:	08 95       	ret
    30f6:	b8 01       	movw	r22, r16
    30f8:	8e e4       	ldi	r24, 0x4E	; 78
    30fa:	91 e2       	ldi	r25, 0x21	; 33
    30fc:	0e 94 32 0a 	call	0x1464	; 0x1464 <vListInsertEnd>
    3100:	ea cf       	rjmp	.-44     	; 0x30d6 <xTaskRemoveFromEventList+0x62>
    3102:	80 93 37 21 	sts	0x2137, r24	; 0x802137 <uxTopReadyPriority>
    3106:	d8 cf       	rjmp	.-80     	; 0x30b8 <xTaskRemoveFromEventList+0x44>
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	df 91       	pop	r29
    310c:	cf 91       	pop	r28
    310e:	1f 91       	pop	r17
    3110:	0f 91       	pop	r16
    3112:	08 95       	ret
    3114:	6e ef       	ldi	r22, 0xFE	; 254
    3116:	7b e0       	ldi	r23, 0x0B	; 11
    3118:	8a e2       	ldi	r24, 0x2A	; 42
    311a:	90 e2       	ldi	r25, 0x20	; 32
    311c:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    3120:	b7 cf       	rjmp	.-146    	; 0x3090 <xTaskRemoveFromEventList+0x1c>

00003122 <vTaskInternalSetTimeOutState>:
    3122:	20 91 33 21 	lds	r18, 0x2133	; 0x802133 <xNumOfOverflows>
    3126:	fc 01       	movw	r30, r24
    3128:	20 83       	st	Z, r18
    312a:	20 91 38 21 	lds	r18, 0x2138	; 0x802138 <xTickCount>
    312e:	30 91 39 21 	lds	r19, 0x2139	; 0x802139 <xTickCount+0x1>
    3132:	21 83       	std	Z+1, r18	; 0x01
    3134:	32 83       	std	Z+2, r19	; 0x02
    3136:	08 95       	ret

00003138 <xTaskCheckForTimeOut>:
    3138:	0f 93       	push	r16
    313a:	1f 93       	push	r17
    313c:	cf 93       	push	r28
    313e:	df 93       	push	r29
    3140:	ec 01       	movw	r28, r24
    3142:	8b 01       	movw	r16, r22
    3144:	89 2b       	or	r24, r25
    3146:	09 f4       	brne	.+2      	; 0x314a <xTaskCheckForTimeOut+0x12>
    3148:	40 c0       	rjmp	.+128    	; 0x31ca <xTaskCheckForTimeOut+0x92>
    314a:	01 15       	cp	r16, r1
    314c:	11 05       	cpc	r17, r1
    314e:	09 f4       	brne	.+2      	; 0x3152 <xTaskCheckForTimeOut+0x1a>
    3150:	43 c0       	rjmp	.+134    	; 0x31d8 <xTaskCheckForTimeOut+0xa0>
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	0f 92       	push	r0
    3158:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <xTickCount>
    315c:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <xTickCount+0x1>
    3160:	f8 01       	movw	r30, r16
    3162:	20 81       	ld	r18, Z
    3164:	31 81       	ldd	r19, Z+1	; 0x01
    3166:	2f 3f       	cpi	r18, 0xFF	; 255
    3168:	ff ef       	ldi	r31, 0xFF	; 255
    316a:	3f 07       	cpc	r19, r31
    316c:	61 f1       	breq	.+88     	; 0x31c6 <xTaskCheckForTimeOut+0x8e>
    316e:	49 81       	ldd	r20, Y+1	; 0x01
    3170:	5a 81       	ldd	r21, Y+2	; 0x02
    3172:	60 91 33 21 	lds	r22, 0x2133	; 0x802133 <xNumOfOverflows>
    3176:	78 81       	ld	r23, Y
    3178:	76 17       	cp	r23, r22
    317a:	19 f0       	breq	.+6      	; 0x3182 <xTaskCheckForTimeOut+0x4a>
    317c:	84 17       	cp	r24, r20
    317e:	95 07       	cpc	r25, r21
    3180:	80 f4       	brcc	.+32     	; 0x31a2 <xTaskCheckForTimeOut+0x6a>
    3182:	84 1b       	sub	r24, r20
    3184:	95 0b       	sbc	r25, r21
    3186:	82 17       	cp	r24, r18
    3188:	93 07       	cpc	r25, r19
    318a:	68 f0       	brcs	.+26     	; 0x31a6 <xTaskCheckForTimeOut+0x6e>
    318c:	f8 01       	movw	r30, r16
    318e:	10 82       	st	Z, r1
    3190:	11 82       	std	Z+1, r1	; 0x01
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	0f 90       	pop	r0
    3196:	0f be       	out	0x3f, r0	; 63
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	08 95       	ret
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	f7 cf       	rjmp	.-18     	; 0x3194 <xTaskCheckForTimeOut+0x5c>
    31a6:	28 1b       	sub	r18, r24
    31a8:	39 0b       	sbc	r19, r25
    31aa:	f8 01       	movw	r30, r16
    31ac:	20 83       	st	Z, r18
    31ae:	31 83       	std	Z+1, r19	; 0x01
    31b0:	80 91 33 21 	lds	r24, 0x2133	; 0x802133 <xNumOfOverflows>
    31b4:	88 83       	st	Y, r24
    31b6:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <xTickCount>
    31ba:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <xTickCount+0x1>
    31be:	89 83       	std	Y+1, r24	; 0x01
    31c0:	9a 83       	std	Y+2, r25	; 0x02
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	e7 cf       	rjmp	.-50     	; 0x3194 <xTaskCheckForTimeOut+0x5c>
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	e5 cf       	rjmp	.-54     	; 0x3194 <xTaskCheckForTimeOut+0x5c>
    31ca:	69 e6       	ldi	r22, 0x69	; 105
    31cc:	7c e0       	ldi	r23, 0x0C	; 12
    31ce:	8a e2       	ldi	r24, 0x2A	; 42
    31d0:	90 e2       	ldi	r25, 0x20	; 32
    31d2:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    31d6:	b9 cf       	rjmp	.-142    	; 0x314a <xTaskCheckForTimeOut+0x12>
    31d8:	6a e6       	ldi	r22, 0x6A	; 106
    31da:	7c e0       	ldi	r23, 0x0C	; 12
    31dc:	8a e2       	ldi	r24, 0x2A	; 42
    31de:	90 e2       	ldi	r25, 0x20	; 32
    31e0:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    31e4:	b6 cf       	rjmp	.-148    	; 0x3152 <xTaskCheckForTimeOut+0x1a>

000031e6 <vTaskMissedYield>:
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	80 93 34 21 	sts	0x2134, r24	; 0x802134 <xYieldPending>
    31ec:	08 95       	ret

000031ee <xTaskPriorityInherit>:
    31ee:	0f 93       	push	r16
    31f0:	1f 93       	push	r17
    31f2:	cf 93       	push	r28
    31f4:	df 93       	push	r29
    31f6:	fc 01       	movw	r30, r24
    31f8:	89 2b       	or	r24, r25
    31fa:	09 f4       	brne	.+2      	; 0x31fe <xTaskPriorityInherit+0x10>
    31fc:	41 c0       	rjmp	.+130    	; 0x3280 <xTaskPriorityInherit+0x92>
    31fe:	26 89       	ldd	r18, Z+22	; 0x16
    3200:	a0 91 c7 21 	lds	r26, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    3204:	b0 91 c8 21 	lds	r27, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    3208:	56 96       	adiw	r26, 0x16	; 22
    320a:	8c 91       	ld	r24, X
    320c:	28 17       	cp	r18, r24
    320e:	70 f5       	brcc	.+92     	; 0x326c <xTaskPriorityInherit+0x7e>
    3210:	84 85       	ldd	r24, Z+12	; 0x0c
    3212:	95 85       	ldd	r25, Z+13	; 0x0d
    3214:	97 fd       	sbrc	r25, 7
    3216:	0c c0       	rjmp	.+24     	; 0x3230 <xTaskPriorityInherit+0x42>
    3218:	a0 91 c7 21 	lds	r26, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    321c:	b0 91 c8 21 	lds	r27, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    3220:	56 96       	adiw	r26, 0x16	; 22
    3222:	3c 91       	ld	r19, X
    3224:	8a e0       	ldi	r24, 0x0A	; 10
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	83 1b       	sub	r24, r19
    322a:	91 09       	sbc	r25, r1
    322c:	84 87       	std	Z+12, r24	; 0x0c
    322e:	95 87       	std	Z+13, r25	; 0x0d
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	c9 01       	movw	r24, r18
    3234:	88 0f       	add	r24, r24
    3236:	99 1f       	adc	r25, r25
    3238:	88 0f       	add	r24, r24
    323a:	99 1f       	adc	r25, r25
    323c:	88 0f       	add	r24, r24
    323e:	99 1f       	adc	r25, r25
    3240:	28 0f       	add	r18, r24
    3242:	39 1f       	adc	r19, r25
    3244:	23 59       	subi	r18, 0x93	; 147
    3246:	3e 4d       	sbci	r19, 0xDE	; 222
    3248:	82 85       	ldd	r24, Z+10	; 0x0a
    324a:	93 85       	ldd	r25, Z+11	; 0x0b
    324c:	82 17       	cp	r24, r18
    324e:	93 07       	cpc	r25, r19
    3250:	e9 f0       	breq	.+58     	; 0x328c <xTaskPriorityInherit+0x9e>
    3252:	a0 91 c7 21 	lds	r26, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    3256:	b0 91 c8 21 	lds	r27, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    325a:	56 96       	adiw	r26, 0x16	; 22
    325c:	8c 91       	ld	r24, X
    325e:	86 8b       	std	Z+22, r24	; 0x16
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	df 91       	pop	r29
    3264:	cf 91       	pop	r28
    3266:	1f 91       	pop	r17
    3268:	0f 91       	pop	r16
    326a:	08 95       	ret
    326c:	a0 91 c7 21 	lds	r26, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    3270:	b0 91 c8 21 	lds	r27, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	23 a1       	ldd	r18, Z+35	; 0x23
    3278:	56 96       	adiw	r26, 0x16	; 22
    327a:	9c 91       	ld	r25, X
    327c:	29 17       	cp	r18, r25
    327e:	88 f3       	brcs	.-30     	; 0x3262 <xTaskPriorityInherit+0x74>
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	df 91       	pop	r29
    3284:	cf 91       	pop	r28
    3286:	1f 91       	pop	r17
    3288:	0f 91       	pop	r16
    328a:	08 95       	ret
    328c:	8f 01       	movw	r16, r30
    328e:	ef 01       	movw	r28, r30
    3290:	22 96       	adiw	r28, 0x02	; 2
    3292:	ce 01       	movw	r24, r28
    3294:	0e 94 84 0a 	call	0x1508	; 0x1508 <uxListRemove>
    3298:	e0 91 c7 21 	lds	r30, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    329c:	f0 91 c8 21 	lds	r31, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    32a0:	86 89       	ldd	r24, Z+22	; 0x16
    32a2:	f8 01       	movw	r30, r16
    32a4:	86 8b       	std	Z+22, r24	; 0x16
    32a6:	90 91 37 21 	lds	r25, 0x2137	; 0x802137 <uxTopReadyPriority>
    32aa:	98 17       	cp	r25, r24
    32ac:	10 f4       	brcc	.+4      	; 0x32b2 <xTaskPriorityInherit+0xc4>
    32ae:	80 93 37 21 	sts	0x2137, r24	; 0x802137 <uxTopReadyPriority>
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	9c 01       	movw	r18, r24
    32b6:	22 0f       	add	r18, r18
    32b8:	33 1f       	adc	r19, r19
    32ba:	22 0f       	add	r18, r18
    32bc:	33 1f       	adc	r19, r19
    32be:	22 0f       	add	r18, r18
    32c0:	33 1f       	adc	r19, r19
    32c2:	82 0f       	add	r24, r18
    32c4:	93 1f       	adc	r25, r19
    32c6:	be 01       	movw	r22, r28
    32c8:	83 59       	subi	r24, 0x93	; 147
    32ca:	9e 4d       	sbci	r25, 0xDE	; 222
    32cc:	0e 94 32 0a 	call	0x1464	; 0x1464 <vListInsertEnd>
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	c7 cf       	rjmp	.-114    	; 0x3262 <xTaskPriorityInherit+0x74>

000032d4 <xTaskPriorityDisinherit>:
    32d4:	0f 93       	push	r16
    32d6:	1f 93       	push	r17
    32d8:	cf 93       	push	r28
    32da:	df 93       	push	r29
    32dc:	00 97       	sbiw	r24, 0x00	; 0
    32de:	c9 f0       	breq	.+50     	; 0x3312 <xTaskPriorityDisinherit+0x3e>
    32e0:	ec 01       	movw	r28, r24
    32e2:	80 91 c7 21 	lds	r24, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    32e6:	90 91 c8 21 	lds	r25, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    32ea:	c8 17       	cp	r28, r24
    32ec:	d9 07       	cpc	r29, r25
    32ee:	31 f0       	breq	.+12     	; 0x32fc <xTaskPriorityDisinherit+0x28>
    32f0:	6e e7       	ldi	r22, 0x7E	; 126
    32f2:	7f e0       	ldi	r23, 0x0F	; 15
    32f4:	8a e2       	ldi	r24, 0x2A	; 42
    32f6:	90 e2       	ldi	r25, 0x20	; 32
    32f8:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    32fc:	8c a1       	ldd	r24, Y+36	; 0x24
    32fe:	88 23       	and	r24, r24
    3300:	c1 f1       	breq	.+112    	; 0x3372 <xTaskPriorityDisinherit+0x9e>
    3302:	81 50       	subi	r24, 0x01	; 1
    3304:	8c a3       	std	Y+36, r24	; 0x24
    3306:	2e 89       	ldd	r18, Y+22	; 0x16
    3308:	9b a1       	ldd	r25, Y+35	; 0x23
    330a:	29 17       	cp	r18, r25
    330c:	11 f0       	breq	.+4      	; 0x3312 <xTaskPriorityDisinherit+0x3e>
    330e:	88 23       	and	r24, r24
    3310:	31 f0       	breq	.+12     	; 0x331e <xTaskPriorityDisinherit+0x4a>
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	df 91       	pop	r29
    3316:	cf 91       	pop	r28
    3318:	1f 91       	pop	r17
    331a:	0f 91       	pop	r16
    331c:	08 95       	ret
    331e:	8e 01       	movw	r16, r28
    3320:	0e 5f       	subi	r16, 0xFE	; 254
    3322:	1f 4f       	sbci	r17, 0xFF	; 255
    3324:	c8 01       	movw	r24, r16
    3326:	0e 94 84 0a 	call	0x1508	; 0x1508 <uxListRemove>
    332a:	2b a1       	ldd	r18, Y+35	; 0x23
    332c:	2e 8b       	std	Y+22, r18	; 0x16
    332e:	82 2f       	mov	r24, r18
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	4a e0       	ldi	r20, 0x0A	; 10
    3334:	50 e0       	ldi	r21, 0x00	; 0
    3336:	48 1b       	sub	r20, r24
    3338:	59 0b       	sbc	r21, r25
    333a:	4c 87       	std	Y+12, r20	; 0x0c
    333c:	5d 87       	std	Y+13, r21	; 0x0d
    333e:	30 91 37 21 	lds	r19, 0x2137	; 0x802137 <uxTopReadyPriority>
    3342:	32 17       	cp	r19, r18
    3344:	10 f4       	brcc	.+4      	; 0x334a <xTaskPriorityDisinherit+0x76>
    3346:	20 93 37 21 	sts	0x2137, r18	; 0x802137 <uxTopReadyPriority>
    334a:	9c 01       	movw	r18, r24
    334c:	22 0f       	add	r18, r18
    334e:	33 1f       	adc	r19, r19
    3350:	22 0f       	add	r18, r18
    3352:	33 1f       	adc	r19, r19
    3354:	22 0f       	add	r18, r18
    3356:	33 1f       	adc	r19, r19
    3358:	82 0f       	add	r24, r18
    335a:	93 1f       	adc	r25, r19
    335c:	b8 01       	movw	r22, r16
    335e:	83 59       	subi	r24, 0x93	; 147
    3360:	9e 4d       	sbci	r25, 0xDE	; 222
    3362:	0e 94 32 0a 	call	0x1464	; 0x1464 <vListInsertEnd>
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	df 91       	pop	r29
    336a:	cf 91       	pop	r28
    336c:	1f 91       	pop	r17
    336e:	0f 91       	pop	r16
    3370:	08 95       	ret
    3372:	6f e7       	ldi	r22, 0x7F	; 127
    3374:	7f e0       	ldi	r23, 0x0F	; 15
    3376:	8a e2       	ldi	r24, 0x2A	; 42
    3378:	90 e2       	ldi	r25, 0x20	; 32
    337a:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    337e:	8c a1       	ldd	r24, Y+36	; 0x24
    3380:	c0 cf       	rjmp	.-128    	; 0x3302 <xTaskPriorityDisinherit+0x2e>

00003382 <vTaskPriorityDisinheritAfterTimeout>:
    3382:	0f 93       	push	r16
    3384:	1f 93       	push	r17
    3386:	cf 93       	push	r28
    3388:	df 93       	push	r29
    338a:	00 97       	sbiw	r24, 0x00	; 0
    338c:	79 f0       	breq	.+30     	; 0x33ac <vTaskPriorityDisinheritAfterTimeout+0x2a>
    338e:	16 2f       	mov	r17, r22
    3390:	ec 01       	movw	r28, r24
    3392:	8c a1       	ldd	r24, Y+36	; 0x24
    3394:	88 23       	and	r24, r24
    3396:	09 f4       	brne	.+2      	; 0x339a <vTaskPriorityDisinheritAfterTimeout+0x18>
    3398:	54 c0       	rjmp	.+168    	; 0x3442 <vTaskPriorityDisinheritAfterTimeout+0xc0>
    339a:	0b a1       	ldd	r16, Y+35	; 0x23
    339c:	01 17       	cp	r16, r17
    339e:	58 f0       	brcs	.+22     	; 0x33b6 <vTaskPriorityDisinheritAfterTimeout+0x34>
    33a0:	8e 89       	ldd	r24, Y+22	; 0x16
    33a2:	80 17       	cp	r24, r16
    33a4:	19 f0       	breq	.+6      	; 0x33ac <vTaskPriorityDisinheritAfterTimeout+0x2a>
    33a6:	9c a1       	ldd	r25, Y+36	; 0x24
    33a8:	91 30       	cpi	r25, 0x01	; 1
    33aa:	39 f0       	breq	.+14     	; 0x33ba <vTaskPriorityDisinheritAfterTimeout+0x38>
    33ac:	df 91       	pop	r29
    33ae:	cf 91       	pop	r28
    33b0:	1f 91       	pop	r17
    33b2:	0f 91       	pop	r16
    33b4:	08 95       	ret
    33b6:	01 2f       	mov	r16, r17
    33b8:	f3 cf       	rjmp	.-26     	; 0x33a0 <vTaskPriorityDisinheritAfterTimeout+0x1e>
    33ba:	20 91 c7 21 	lds	r18, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    33be:	30 91 c8 21 	lds	r19, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    33c2:	c2 17       	cp	r28, r18
    33c4:	d3 07       	cpc	r29, r19
    33c6:	09 f4       	brne	.+2      	; 0x33ca <vTaskPriorityDisinheritAfterTimeout+0x48>
    33c8:	43 c0       	rjmp	.+134    	; 0x3450 <vTaskPriorityDisinheritAfterTimeout+0xce>
    33ca:	0e 8b       	std	Y+22, r16	; 0x16
    33cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    33ce:	3d 85       	ldd	r19, Y+13	; 0x0d
    33d0:	37 fd       	sbrc	r19, 7
    33d2:	06 c0       	rjmp	.+12     	; 0x33e0 <vTaskPriorityDisinheritAfterTimeout+0x5e>
    33d4:	2a e0       	ldi	r18, 0x0A	; 10
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	20 1b       	sub	r18, r16
    33da:	31 09       	sbc	r19, r1
    33dc:	2c 87       	std	Y+12, r18	; 0x0c
    33de:	3d 87       	std	Y+13, r19	; 0x0d
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	9c 01       	movw	r18, r24
    33e4:	22 0f       	add	r18, r18
    33e6:	33 1f       	adc	r19, r19
    33e8:	22 0f       	add	r18, r18
    33ea:	33 1f       	adc	r19, r19
    33ec:	22 0f       	add	r18, r18
    33ee:	33 1f       	adc	r19, r19
    33f0:	82 0f       	add	r24, r18
    33f2:	93 1f       	adc	r25, r19
    33f4:	83 59       	subi	r24, 0x93	; 147
    33f6:	9e 4d       	sbci	r25, 0xDE	; 222
    33f8:	2a 85       	ldd	r18, Y+10	; 0x0a
    33fa:	3b 85       	ldd	r19, Y+11	; 0x0b
    33fc:	28 17       	cp	r18, r24
    33fe:	39 07       	cpc	r19, r25
    3400:	a9 f6       	brne	.-86     	; 0x33ac <vTaskPriorityDisinheritAfterTimeout+0x2a>
    3402:	8e 01       	movw	r16, r28
    3404:	0e 5f       	subi	r16, 0xFE	; 254
    3406:	1f 4f       	sbci	r17, 0xFF	; 255
    3408:	c8 01       	movw	r24, r16
    340a:	0e 94 84 0a 	call	0x1508	; 0x1508 <uxListRemove>
    340e:	8e 89       	ldd	r24, Y+22	; 0x16
    3410:	90 91 37 21 	lds	r25, 0x2137	; 0x802137 <uxTopReadyPriority>
    3414:	98 17       	cp	r25, r24
    3416:	10 f4       	brcc	.+4      	; 0x341c <vTaskPriorityDisinheritAfterTimeout+0x9a>
    3418:	80 93 37 21 	sts	0x2137, r24	; 0x802137 <uxTopReadyPriority>
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	9c 01       	movw	r18, r24
    3420:	22 0f       	add	r18, r18
    3422:	33 1f       	adc	r19, r19
    3424:	22 0f       	add	r18, r18
    3426:	33 1f       	adc	r19, r19
    3428:	22 0f       	add	r18, r18
    342a:	33 1f       	adc	r19, r19
    342c:	82 0f       	add	r24, r18
    342e:	93 1f       	adc	r25, r19
    3430:	b8 01       	movw	r22, r16
    3432:	83 59       	subi	r24, 0x93	; 147
    3434:	9e 4d       	sbci	r25, 0xDE	; 222
    3436:	df 91       	pop	r29
    3438:	cf 91       	pop	r28
    343a:	1f 91       	pop	r17
    343c:	0f 91       	pop	r16
    343e:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <vListInsertEnd>
    3442:	6d ec       	ldi	r22, 0xCD	; 205
    3444:	7f e0       	ldi	r23, 0x0F	; 15
    3446:	8a e2       	ldi	r24, 0x2A	; 42
    3448:	90 e2       	ldi	r25, 0x20	; 32
    344a:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    344e:	a5 cf       	rjmp	.-182    	; 0x339a <vTaskPriorityDisinheritAfterTimeout+0x18>
    3450:	68 ee       	ldi	r22, 0xE8	; 232
    3452:	7f e0       	ldi	r23, 0x0F	; 15
    3454:	8a e2       	ldi	r24, 0x2A	; 42
    3456:	90 e2       	ldi	r25, 0x20	; 32
    3458:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vAssertCalled>
    345c:	8e 89       	ldd	r24, Y+22	; 0x16
    345e:	b5 cf       	rjmp	.-150    	; 0x33ca <vTaskPriorityDisinheritAfterTimeout+0x48>

00003460 <pvTaskIncrementMutexHeldCount>:

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    3460:	80 91 c7 21 	lds	r24, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    3464:	90 91 c8 21 	lds	r25, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    3468:	89 2b       	or	r24, r25
    346a:	39 f0       	breq	.+14     	; 0x347a <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    346c:	e0 91 c7 21 	lds	r30, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    3470:	f0 91 c8 21 	lds	r31, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
    3474:	84 a1       	ldd	r24, Z+36	; 0x24
    3476:	8f 5f       	subi	r24, 0xFF	; 255
    3478:	84 a3       	std	Z+36, r24	; 0x24
		}

		return pxCurrentTCB;
    347a:	80 91 c7 21 	lds	r24, 0x21C7	; 0x8021c7 <pxCurrentTCB>
    347e:	90 91 c8 21 	lds	r25, 0x21C8	; 0x8021c8 <pxCurrentTCB+0x1>
	}
    3482:	08 95       	ret

00003484 <vApplicationIdleHook>:
#define SET_ERR_LED() PORTA.OUTSET=1<<7
#define CLR_ERR_LED() PORTA.OUTCLR=1<<7


void vApplicationIdleHook( void )
{
    3484:	08 95       	ret

00003486 <vApplicationMallocFailedHook>:
	
}

void vApplicationMallocFailedHook(void)
{
	taskDISABLE_INTERRUPTS();
    3486:	f8 94       	cli
	DbgPrint ("ERROR: memory allocation failed\r\n");
    3488:	8d e6       	ldi	r24, 0x6D	; 109
    348a:	90 e2       	ldi	r25, 0x20	; 32
    348c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DbgPrint>
	CFG_ERR_LED();
    3490:	80 e8       	ldi	r24, 0x80	; 128
    3492:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	while (1)
	{
		SET_ERR_LED();
    3496:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    349a:	2f ef       	ldi	r18, 0xFF	; 255
    349c:	33 ec       	ldi	r19, 0xC3	; 195
    349e:	99 e0       	ldi	r25, 0x09	; 9
    34a0:	21 50       	subi	r18, 0x01	; 1
    34a2:	30 40       	sbci	r19, 0x00	; 0
    34a4:	90 40       	sbci	r25, 0x00	; 0
    34a6:	e1 f7       	brne	.-8      	; 0x34a0 <vApplicationMallocFailedHook+0x1a>
    34a8:	00 c0       	rjmp	.+0      	; 0x34aa <vApplicationMallocFailedHook+0x24>
    34aa:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    34ac:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    34b0:	2f ef       	ldi	r18, 0xFF	; 255
    34b2:	33 ec       	ldi	r19, 0xC3	; 195
    34b4:	99 e0       	ldi	r25, 0x09	; 9
    34b6:	21 50       	subi	r18, 0x01	; 1
    34b8:	30 40       	sbci	r19, 0x00	; 0
    34ba:	90 40       	sbci	r25, 0x00	; 0
    34bc:	e1 f7       	brne	.-8      	; 0x34b6 <vApplicationMallocFailedHook+0x30>
    34be:	00 c0       	rjmp	.+0      	; 0x34c0 <vApplicationMallocFailedHook+0x3a>
    34c0:	00 00       	nop
    34c2:	e9 cf       	rjmp	.-46     	; 0x3496 <vApplicationMallocFailedHook+0x10>

000034c4 <vApplicationStackOverflowHook>:
}



void vApplicationStackOverflowHook( TaskHandle_t xTask,signed char *pcTaskName )
{
    34c4:	eb 01       	movw	r28, r22
	taskDISABLE_INTERRUPTS();
    34c6:	f8 94       	cli
	CFG_ERR_LED();
    34c8:	80 e8       	ldi	r24, 0x80	; 128
    34ca:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	DbgPrint("STACK overflow in task ");
    34ce:	8f e8       	ldi	r24, 0x8F	; 143
    34d0:	90 e2       	ldi	r25, 0x20	; 32
    34d2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DbgPrint>
	DbgPrintn(pcTaskName,10);
    34d6:	6a e0       	ldi	r22, 0x0A	; 10
    34d8:	70 e0       	ldi	r23, 0x00	; 0
    34da:	ce 01       	movw	r24, r28
    34dc:	0e 94 1a 03 	call	0x634	; 0x634 <DbgPrintn>
	DbgPrint("\r\n");
    34e0:	8a e6       	ldi	r24, 0x6A	; 106
    34e2:	90 e2       	ldi	r25, 0x20	; 32
    34e4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DbgPrint>
	while (1)
	{
		SET_ERR_LED();
    34e8:	80 e8       	ldi	r24, 0x80	; 128
    34ea:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    34ee:	2f ef       	ldi	r18, 0xFF	; 255
    34f0:	33 ed       	ldi	r19, 0xD3	; 211
    34f2:	90 e3       	ldi	r25, 0x30	; 48
    34f4:	21 50       	subi	r18, 0x01	; 1
    34f6:	30 40       	sbci	r19, 0x00	; 0
    34f8:	90 40       	sbci	r25, 0x00	; 0
    34fa:	e1 f7       	brne	.-8      	; 0x34f4 <vApplicationStackOverflowHook+0x30>
    34fc:	00 c0       	rjmp	.+0      	; 0x34fe <vApplicationStackOverflowHook+0x3a>
    34fe:	00 00       	nop
		_delay_ms(500);
		CLR_ERR_LED();
    3500:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    3504:	2f ef       	ldi	r18, 0xFF	; 255
    3506:	33 ed       	ldi	r19, 0xD3	; 211
    3508:	90 e3       	ldi	r25, 0x30	; 48
    350a:	21 50       	subi	r18, 0x01	; 1
    350c:	30 40       	sbci	r19, 0x00	; 0
    350e:	90 40       	sbci	r25, 0x00	; 0
    3510:	e1 f7       	brne	.-8      	; 0x350a <vApplicationStackOverflowHook+0x46>
    3512:	00 c0       	rjmp	.+0      	; 0x3514 <vApplicationStackOverflowHook+0x50>
    3514:	00 00       	nop
    3516:	e9 cf       	rjmp	.-46     	; 0x34ea <vApplicationStackOverflowHook+0x26>

00003518 <vAssertCalled>:
		_delay_ms(500);
	}
}

void vAssertCalled( char *File, int Line)
{
    3518:	8c 01       	movw	r16, r24
    351a:	eb 01       	movw	r28, r22
	taskDISABLE_INTERRUPTS();	
    351c:	f8 94       	cli
	CFG_ERR_LED();
    351e:	80 e8       	ldi	r24, 0x80	; 128
    3520:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	DbgPrint("Assert in file ");
    3524:	87 ea       	ldi	r24, 0xA7	; 167
    3526:	90 e2       	ldi	r25, 0x20	; 32
    3528:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DbgPrint>
	DbgPrintn(File,100);
    352c:	64 e6       	ldi	r22, 0x64	; 100
    352e:	70 e0       	ldi	r23, 0x00	; 0
    3530:	c8 01       	movw	r24, r16
    3532:	0e 94 1a 03 	call	0x634	; 0x634 <DbgPrintn>
	DbgPrint(", line nr ");
    3536:	87 eb       	ldi	r24, 0xB7	; 183
    3538:	90 e2       	ldi	r25, 0x20	; 32
    353a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DbgPrint>
	DbgPrintInt(Line);
    353e:	ce 01       	movw	r24, r28
    3540:	0e 94 3f 03 	call	0x67e	; 0x67e <DbgPrintInt>
	DbgPrint("\r\n");
    3544:	8a e6       	ldi	r24, 0x6A	; 106
    3546:	90 e2       	ldi	r25, 0x20	; 32
    3548:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DbgPrint>

	while (1)
	{
		SET_ERR_LED();
    354c:	80 e8       	ldi	r24, 0x80	; 128
    354e:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    3552:	2f ef       	ldi	r18, 0xFF	; 255
    3554:	33 ec       	ldi	r19, 0xC3	; 195
    3556:	99 e0       	ldi	r25, 0x09	; 9
    3558:	21 50       	subi	r18, 0x01	; 1
    355a:	30 40       	sbci	r19, 0x00	; 0
    355c:	90 40       	sbci	r25, 0x00	; 0
    355e:	e1 f7       	brne	.-8      	; 0x3558 <vAssertCalled+0x40>
    3560:	00 c0       	rjmp	.+0      	; 0x3562 <vAssertCalled+0x4a>
    3562:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    3564:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    3568:	2f ef       	ldi	r18, 0xFF	; 255
    356a:	33 ed       	ldi	r19, 0xD3	; 211
    356c:	90 e3       	ldi	r25, 0x30	; 48
    356e:	21 50       	subi	r18, 0x01	; 1
    3570:	30 40       	sbci	r19, 0x00	; 0
    3572:	90 40       	sbci	r25, 0x00	; 0
    3574:	e1 f7       	brne	.-8      	; 0x356e <vAssertCalled+0x56>
    3576:	00 c0       	rjmp	.+0      	; 0x3578 <vAssertCalled+0x60>
    3578:	00 00       	nop
    357a:	e9 cf       	rjmp	.-46     	; 0x354e <vAssertCalled+0x36>

0000357c <main>:

uint8_t *ucHeap;

int main(void)
{
	DriverSysClkXtalInit();	//Clock init
    357c:	0e 94 c8 06 	call	0xd90	; 0xd90 <DriverSysClkXtalInit>
	//Allocate FreeRTOS heap
	ucHeap=malloc(configTOTAL_HEAP_SIZE);
    3580:	80 e0       	ldi	r24, 0x00	; 0
    3582:	90 e4       	ldi	r25, 0x40	; 64
    3584:	0e 94 57 28 	call	0x50ae	; 0x50ae <malloc>
    3588:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <ucHeap>
    358c:	90 93 00 22 	sts	0x2200, r25	; 0x802200 <ucHeap+0x1>
	if (ucHeap==NULL) while(1);
    3590:	89 2b       	or	r24, r25
    3592:	59 f0       	breq	.+22     	; 0x35aa <main+0x2e>
	
	//Enable interrupts
	PMIC.CTRL = 0b111;
    3594:	87 e0       	ldi	r24, 0x07	; 7
    3596:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    359a:	78 94       	sei
	


	
	//Init startup task
	InitStartupTask();
    359c:	0e 94 2e 22 	call	0x445c	; 0x445c <InitStartupTask>
	
	//Start scheduler loop
	vTaskStartScheduler();	
    35a0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <vTaskStartScheduler>

	return 0;
}
    35a4:	80 e0       	ldi	r24, 0x00	; 0
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	08 95       	ret
    35aa:	ff cf       	rjmp	.-2      	; 0x35aa <main+0x2e>

000035ac <WorkerADC>:
	ADCQueue=xQueueCreate(1,sizeof(ADCStruct));
	xTaskCreate( WorkerADC, "ADC", 512, NULL, tskIDLE_PRIORITY+2, NULL );
}

void WorkerADC(void *pvParameters)
{
    35ac:	cf 93       	push	r28
    35ae:	df 93       	push	r29
    35b0:	cd b7       	in	r28, 0x3d	; 61
    35b2:	de b7       	in	r29, 0x3e	; 62
    35b4:	2a 97       	sbiw	r28, 0x0a	; 10
    35b6:	cd bf       	out	0x3d, r28	; 61
    35b8:	de bf       	out	0x3e, r29	; 62
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 10;
	ADCStruct ADCData;
	
	DriverLedSet(0b0111);
    35ba:	87 e0       	ldi	r24, 0x07	; 7
    35bc:	0e 94 ab 03 	call	0x756	; 0x756 <DriverLedSet>
	
	xLastWakeTime=xTaskGetTickCount();
    35c0:	0e 94 22 16 	call	0x2c44	; 0x2c44 <xTaskGetTickCount>
    35c4:	89 87       	std	Y+9, r24	; 0x09
    35c6:	9a 87       	std	Y+10, r25	; 0x0a
	while(1)
	{
		ADCData.PhotoL=DriverAdcGetCh(0,4);
    35c8:	64 e0       	ldi	r22, 0x04	; 4
    35ca:	80 e0       	ldi	r24, 0x00	; 0
    35cc:	0e 94 df 01 	call	0x3be	; 0x3be <DriverAdcGetCh>
    35d0:	89 83       	std	Y+1, r24	; 0x01
    35d2:	9a 83       	std	Y+2, r25	; 0x02
		ADCData.PhotoM=DriverAdcGetCh(1,4);
    35d4:	64 e0       	ldi	r22, 0x04	; 4
    35d6:	81 e0       	ldi	r24, 0x01	; 1
    35d8:	0e 94 df 01 	call	0x3be	; 0x3be <DriverAdcGetCh>
    35dc:	8b 83       	std	Y+3, r24	; 0x03
    35de:	9c 83       	std	Y+4, r25	; 0x04
		ADCData.PhotoR=DriverAdcGetCh(2,4);
    35e0:	64 e0       	ldi	r22, 0x04	; 4
    35e2:	82 e0       	ldi	r24, 0x02	; 2
    35e4:	0e 94 df 01 	call	0x3be	; 0x3be <DriverAdcGetCh>
    35e8:	8d 83       	std	Y+5, r24	; 0x05
    35ea:	9e 83       	std	Y+6, r25	; 0x06
		ADCData.Potmeter=DriverAdcGetCh(3,4);
    35ec:	64 e0       	ldi	r22, 0x04	; 4
    35ee:	83 e0       	ldi	r24, 0x03	; 3
    35f0:	0e 94 df 01 	call	0x3be	; 0x3be <DriverAdcGetCh>
    35f4:	8f 83       	std	Y+7, r24	; 0x07
    35f6:	98 87       	std	Y+8, r25	; 0x08
		xQueueOverwrite(ADCQueue,&ADCData);
    35f8:	22 e0       	ldi	r18, 0x02	; 2
    35fa:	40 e0       	ldi	r20, 0x00	; 0
    35fc:	50 e0       	ldi	r21, 0x00	; 0
    35fe:	be 01       	movw	r22, r28
    3600:	6f 5f       	subi	r22, 0xFF	; 255
    3602:	7f 4f       	sbci	r23, 0xFF	; 255
    3604:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <ADCQueue>
    3608:	90 91 02 22 	lds	r25, 0x2202	; 0x802202 <ADCQueue+0x1>
    360c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xQueueGenericSend>
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
    3610:	6a e0       	ldi	r22, 0x0A	; 10
    3612:	70 e0       	ldi	r23, 0x00	; 0
    3614:	ce 01       	movw	r24, r28
    3616:	09 96       	adiw	r24, 0x09	; 9
    3618:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <vTaskDelayUntil>
    361c:	d5 cf       	rjmp	.-86     	; 0x35c8 <WorkerADC+0x1c>

0000361e <InitADCTask>:

void WorkerADC(void *pvParameters);

//Function definitions
void InitADCTask()
{
    361e:	ef 92       	push	r14
    3620:	ff 92       	push	r15
    3622:	0f 93       	push	r16
	ADCQueue=xQueueCreate(1,sizeof(ADCStruct));
    3624:	40 e0       	ldi	r20, 0x00	; 0
    3626:	68 e0       	ldi	r22, 0x08	; 8
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueGenericCreate>
    362e:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <ADCQueue>
    3632:	90 93 02 22 	sts	0x2202, r25	; 0x802202 <ADCQueue+0x1>
	xTaskCreate( WorkerADC, "ADC", 512, NULL, tskIDLE_PRIORITY+2, NULL );
    3636:	e1 2c       	mov	r14, r1
    3638:	f1 2c       	mov	r15, r1
    363a:	02 e0       	ldi	r16, 0x02	; 2
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	40 e0       	ldi	r20, 0x00	; 0
    3642:	52 e0       	ldi	r21, 0x02	; 2
    3644:	62 ec       	ldi	r22, 0xC2	; 194
    3646:	70 e2       	ldi	r23, 0x20	; 32
    3648:	86 ed       	ldi	r24, 0xD6	; 214
    364a:	9a e1       	ldi	r25, 0x1A	; 26
    364c:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <xTaskCreate>
}
    3650:	0f 91       	pop	r16
    3652:	ff 90       	pop	r15
    3654:	ef 90       	pop	r14
    3656:	08 95       	ret

00003658 <GetADCData>:
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
	}
}

ADCStruct GetADCData(void)
{
    3658:	cf 93       	push	r28
    365a:	df 93       	push	r29
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62
    3660:	60 97       	sbiw	r28, 0x10	; 16
    3662:	cd bf       	out	0x3d, r28	; 61
    3664:	de bf       	out	0x3e, r29	; 62
	ADCStruct ADCData;
	xQueuePeek(ADCQueue,&ADCData,portMAX_DELAY);
    3666:	4f ef       	ldi	r20, 0xFF	; 255
    3668:	5f ef       	ldi	r21, 0xFF	; 255
    366a:	be 01       	movw	r22, r28
    366c:	67 5f       	subi	r22, 0xF7	; 247
    366e:	7f 4f       	sbci	r23, 0xFF	; 255
    3670:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <ADCQueue>
    3674:	90 91 02 22 	lds	r25, 0x2202	; 0x802202 <ADCQueue+0x1>
    3678:	0e 94 49 11 	call	0x2292	; 0x2292 <xQueuePeek>
	return ADCData;
    367c:	88 e0       	ldi	r24, 0x08	; 8
    367e:	fe 01       	movw	r30, r28
    3680:	39 96       	adiw	r30, 0x09	; 9
    3682:	de 01       	movw	r26, r28
    3684:	11 96       	adiw	r26, 0x01	; 1
    3686:	01 90       	ld	r0, Z+
    3688:	0d 92       	st	X+, r0
    368a:	8a 95       	dec	r24
    368c:	e1 f7       	brne	.-8      	; 0x3686 <GetADCData+0x2e>
    368e:	29 81       	ldd	r18, Y+1	; 0x01
    3690:	3a 81       	ldd	r19, Y+2	; 0x02
    3692:	4b 81       	ldd	r20, Y+3	; 0x03
    3694:	5c 81       	ldd	r21, Y+4	; 0x04
    3696:	6d 81       	ldd	r22, Y+5	; 0x05
    3698:	7e 81       	ldd	r23, Y+6	; 0x06
    369a:	8f 81       	ldd	r24, Y+7	; 0x07
    369c:	98 85       	ldd	r25, Y+8	; 0x08
    369e:	60 96       	adiw	r28, 0x10	; 16
    36a0:	cd bf       	out	0x3d, r28	; 61
    36a2:	de bf       	out	0x3e, r29	; 62
    36a4:	df 91       	pop	r29
    36a6:	cf 91       	pop	r28
    36a8:	08 95       	ret

000036aa <WorkerLineFollowerDirect>:
{
	vTaskSuspend(LineFollowerDirectTaskHandle);
}

static void WorkerLineFollowerDirect(void *pvParameters)
{
    36aa:	cf 93       	push	r28
    36ac:	df 93       	push	r29
    36ae:	cd b7       	in	r28, 0x3d	; 61
    36b0:	de b7       	in	r29, 0x3e	; 62
    36b2:	2a 97       	sbiw	r28, 0x0a	; 10
    36b4:	cd bf       	out	0x3d, r28	; 61
    36b6:	de bf       	out	0x3e, r29	; 62
    36b8:	1b c0       	rjmp	.+54     	; 0x36f0 <WorkerLineFollowerDirect+0x46>
    36ba:	c5 01       	movw	r24, r10
    36bc:	b4 01       	movw	r22, r8
    36be:	0e 94 26 23 	call	0x464c	; 0x464c <__fixsfsi>
    36c2:	8b 01       	movw	r16, r22
		//printf_P("Diff:%f\r\n",Diff);
		OutL=Speed+(Diff*LineFollowKp);
		OutR=Speed-(Diff*LineFollowKp);
		
		if (OutL<0) OutL=0;
		if (OutR<0) OutR=0;
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	a9 01       	movw	r20, r18
    36ca:	c7 01       	movw	r24, r14
    36cc:	b6 01       	movw	r22, r12
    36ce:	0e 94 af 22 	call	0x455e	; 0x455e <__cmpsf2>
    36d2:	87 fd       	sbrc	r24, 7
    36d4:	49 c0       	rjmp	.+146    	; 0x3768 <WorkerLineFollowerDirect+0xbe>
    36d6:	c7 01       	movw	r24, r14
    36d8:	b6 01       	movw	r22, r12
    36da:	0e 94 26 23 	call	0x464c	; 0x464c <__fixsfsi>
		DriverMotorSet((int16_t) OutL, (int16_t) OutR);
    36de:	c8 01       	movw	r24, r16
    36e0:	0e 94 fe 03 	call	0x7fc	; 0x7fc <DriverMotorSet>
			

		vTaskDelayUntil( &xLastWakeTime, xPeriod );
    36e4:	6a e0       	ldi	r22, 0x0A	; 10
    36e6:	70 e0       	ldi	r23, 0x00	; 0
    36e8:	ce 01       	movw	r24, r28
    36ea:	09 96       	adiw	r24, 0x09	; 9
    36ec:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <vTaskDelayUntil>
	ADCStruct ADCData;

	
	while(1)
	{
		xLastWakeTime=xTaskGetTickCount();
    36f0:	0e 94 22 16 	call	0x2c44	; 0x2c44 <xTaskGetTickCount>
    36f4:	89 87       	std	Y+9, r24	; 0x09
    36f6:	9a 87       	std	Y+10, r25	; 0x0a

		ADCData=GetADCData();
    36f8:	0e 94 2c 1b 	call	0x3658	; 0x3658 <GetADCData>
    36fc:	29 83       	std	Y+1, r18	; 0x01
    36fe:	3a 83       	std	Y+2, r19	; 0x02
    3700:	6d 83       	std	Y+5, r22	; 0x05
    3702:	7e 83       	std	Y+6, r23	; 0x06
		Diff=(float) (ADCData.PhotoL-ADCData.PhotoR+SensorOffset);
		//printf_P("Diff:%f\r\n",Diff);
		OutL=Speed+(Diff*LineFollowKp);
    3704:	69 81       	ldd	r22, Y+1	; 0x01
    3706:	7a 81       	ldd	r23, Y+2	; 0x02
    3708:	8d 81       	ldd	r24, Y+5	; 0x05
    370a:	9e 81       	ldd	r25, Y+6	; 0x06
    370c:	68 1b       	sub	r22, r24
    370e:	79 0b       	sbc	r23, r25
    3710:	07 2e       	mov	r0, r23
    3712:	00 0c       	add	r0, r0
    3714:	88 0b       	sbc	r24, r24
    3716:	99 0b       	sbc	r25, r25
    3718:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__floatsisf>
    371c:	2d ec       	ldi	r18, 0xCD	; 205
    371e:	3c ec       	ldi	r19, 0xCC	; 204
    3720:	4c e4       	ldi	r20, 0x4C	; 76
    3722:	5e e3       	ldi	r21, 0x3E	; 62
    3724:	0e 94 13 24 	call	0x4826	; 0x4826 <__mulsf3>
    3728:	6b 01       	movw	r12, r22
    372a:	7c 01       	movw	r14, r24
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	48 e4       	ldi	r20, 0x48	; 72
    3732:	55 e4       	ldi	r21, 0x45	; 69
    3734:	0e 94 43 22 	call	0x4486	; 0x4486 <__addsf3>
    3738:	4b 01       	movw	r8, r22
    373a:	5c 01       	movw	r10, r24
		OutR=Speed-(Diff*LineFollowKp);
    373c:	a7 01       	movw	r20, r14
    373e:	96 01       	movw	r18, r12
    3740:	60 e0       	ldi	r22, 0x00	; 0
    3742:	70 e0       	ldi	r23, 0x00	; 0
    3744:	88 e4       	ldi	r24, 0x48	; 72
    3746:	95 e4       	ldi	r25, 0x45	; 69
    3748:	0e 94 42 22 	call	0x4484	; 0x4484 <__subsf3>
    374c:	6b 01       	movw	r12, r22
    374e:	7c 01       	movw	r14, r24
		
		if (OutL<0) OutL=0;
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	a9 01       	movw	r20, r18
    3756:	c5 01       	movw	r24, r10
    3758:	b4 01       	movw	r22, r8
    375a:	0e 94 af 22 	call	0x455e	; 0x455e <__cmpsf2>
    375e:	87 ff       	sbrs	r24, 7
    3760:	ac cf       	rjmp	.-168    	; 0x36ba <WorkerLineFollowerDirect+0x10>
    3762:	00 e0       	ldi	r16, 0x00	; 0
    3764:	10 e0       	ldi	r17, 0x00	; 0
    3766:	ae cf       	rjmp	.-164    	; 0x36c4 <WorkerLineFollowerDirect+0x1a>
    3768:	60 e0       	ldi	r22, 0x00	; 0
    376a:	70 e0       	ldi	r23, 0x00	; 0
    376c:	b8 cf       	rjmp	.-144    	; 0x36de <WorkerLineFollowerDirect+0x34>

0000376e <InitLineFollowerDirectTask>:
//Private function prototypes
static void WorkerLineFollowerDirect(void *pvParameters);

//Function definitions
void InitLineFollowerDirectTask()
{
    376e:	ef 92       	push	r14
    3770:	ff 92       	push	r15
    3772:	0f 93       	push	r16
	xTaskCreate( WorkerLineFollowerDirect, "LFdirect", 256, NULL, tskIDLE_PRIORITY+3, &LineFollowerDirectTaskHandle );	
    3774:	89 ec       	ldi	r24, 0xC9	; 201
    3776:	e8 2e       	mov	r14, r24
    3778:	81 e2       	ldi	r24, 0x21	; 33
    377a:	f8 2e       	mov	r15, r24
    377c:	03 e0       	ldi	r16, 0x03	; 3
    377e:	20 e0       	ldi	r18, 0x00	; 0
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	40 e0       	ldi	r20, 0x00	; 0
    3784:	51 e0       	ldi	r21, 0x01	; 1
    3786:	66 ec       	ldi	r22, 0xC6	; 198
    3788:	70 e2       	ldi	r23, 0x20	; 32
    378a:	85 e5       	ldi	r24, 0x55	; 85
    378c:	9b e1       	ldi	r25, 0x1B	; 27
    378e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <xTaskCreate>
}
    3792:	0f 91       	pop	r16
    3794:	ff 90       	pop	r15
    3796:	ef 90       	pop	r14
    3798:	08 95       	ret

0000379a <WorkerLineFollowerSpeed>:
	StopSema=xSemaphoreCreateBinary();
	xTaskCreate( WorkerLineFollowerSpeed, "LFSpeed", 512, NULL, tskIDLE_PRIORITY+2, NULL );
}

void WorkerLineFollowerSpeed(void *pvParameters)
{
    379a:	cf 93       	push	r28
    379c:	df 93       	push	r29
    379e:	cd b7       	in	r28, 0x3d	; 61
    37a0:	de b7       	in	r29, 0x3e	; 62
    37a2:	2a 97       	sbiw	r28, 0x0a	; 10
    37a4:	cd bf       	out	0x3d, r28	; 61
    37a6:	de bf       	out	0x3e, r29	; 62
	float OutL,OutR;
	ADCStruct ADCData;
	
	while(1)
	{
		xSemaphoreTake(StartSema,portMAX_DELAY);
    37a8:	6f ef       	ldi	r22, 0xFF	; 255
    37aa:	7f ef       	ldi	r23, 0xFF	; 255
    37ac:	80 91 cd 21 	lds	r24, 0x21CD	; 0x8021cd <StartSema>
    37b0:	90 91 ce 21 	lds	r25, 0x21CE	; 0x8021ce <StartSema+0x1>
    37b4:	0e 94 4f 10 	call	0x209e	; 0x209e <xQueueSemaphoreTake>
		Speed=ReqSpeed;
    37b8:	80 91 d3 21 	lds	r24, 0x21D3	; 0x8021d3 <ReqSpeed>
    37bc:	90 91 d4 21 	lds	r25, 0x21D4	; 0x8021d4 <ReqSpeed+0x1>
    37c0:	a0 91 d5 21 	lds	r26, 0x21D5	; 0x8021d5 <ReqSpeed+0x2>
    37c4:	b0 91 d6 21 	lds	r27, 0x21D6	; 0x8021d6 <ReqSpeed+0x3>
    37c8:	80 93 cf 21 	sts	0x21CF, r24	; 0x8021cf <Speed>
    37cc:	90 93 d0 21 	sts	0x21D0, r25	; 0x8021d0 <Speed+0x1>
    37d0:	a0 93 d1 21 	sts	0x21D1, r26	; 0x8021d1 <Speed+0x2>
    37d4:	b0 93 d2 21 	sts	0x21D2, r27	; 0x8021d2 <Speed+0x3>
		xLastWakeTime=xTaskGetTickCount();
    37d8:	0e 94 22 16 	call	0x2c44	; 0x2c44 <xTaskGetTickCount>
    37dc:	89 87       	std	Y+9, r24	; 0x09
    37de:	9a 87       	std	Y+10, r25	; 0x0a
    37e0:	18 c0       	rjmp	.+48     	; 0x3812 <WorkerLineFollowerSpeed+0x78>
    37e2:	c5 01       	movw	r24, r10
    37e4:	b4 01       	movw	r22, r8
    37e6:	0e 94 26 23 	call	0x464c	; 0x464c <__fixsfsi>
			//printf ("Diff:%f\r\n",Diff);
			OutL=Speed+(Diff*(float) (LINEFOLLOW_SPEED_KP));
			OutR=Speed-(Diff*(float) (LINEFOLLOW_SPEED_KP));
			if (OutL<0) OutL=0;
			if (OutR<0) OutR=0;
			MotorSpeedSet((int16_t) OutL, (int16_t) OutR);	
    37ea:	c7 01       	movw	r24, r14
    37ec:	0e 94 37 21 	call	0x426e	; 0x426e <MotorSpeedSet>
			
			if (xSemaphoreTake(StopSema,0)==pdPASS)
    37f0:	60 e0       	ldi	r22, 0x00	; 0
    37f2:	70 e0       	ldi	r23, 0x00	; 0
    37f4:	80 91 cb 21 	lds	r24, 0x21CB	; 0x8021cb <StopSema>
    37f8:	90 91 cc 21 	lds	r25, 0x21CC	; 0x8021cc <StopSema+0x1>
    37fc:	0e 94 4f 10 	call	0x209e	; 0x209e <xQueueSemaphoreTake>
    3800:	81 30       	cpi	r24, 0x01	; 1
    3802:	09 f4       	brne	.+2      	; 0x3806 <WorkerLineFollowerSpeed+0x6c>
    3804:	55 c0       	rjmp	.+170    	; 0x38b0 <WorkerLineFollowerSpeed+0x116>
			{
				MotorSpeedSet(0,0);	
				break;
			}
			vTaskDelayUntil( &xLastWakeTime, xPeriod );
    3806:	6a e0       	ldi	r22, 0x0A	; 10
    3808:	70 e0       	ldi	r23, 0x00	; 0
    380a:	ce 01       	movw	r24, r28
    380c:	09 96       	adiw	r24, 0x09	; 9
    380e:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <vTaskDelayUntil>
		Speed=ReqSpeed;
		xLastWakeTime=xTaskGetTickCount();
		while (1)
		{
			
			ADCData=GetADCData();
    3812:	0e 94 2c 1b 	call	0x3658	; 0x3658 <GetADCData>
    3816:	29 83       	std	Y+1, r18	; 0x01
    3818:	3a 83       	std	Y+2, r19	; 0x02
    381a:	6d 83       	std	Y+5, r22	; 0x05
    381c:	7e 83       	std	Y+6, r23	; 0x06
			Diff=(float) (ADCData.PhotoL-ADCData.PhotoR+SensorOffset);
			//printf ("Diff:%f\r\n",Diff);
			OutL=Speed+(Diff*(float) (LINEFOLLOW_SPEED_KP));
    381e:	69 81       	ldd	r22, Y+1	; 0x01
    3820:	7a 81       	ldd	r23, Y+2	; 0x02
    3822:	8d 81       	ldd	r24, Y+5	; 0x05
    3824:	9e 81       	ldd	r25, Y+6	; 0x06
    3826:	68 1b       	sub	r22, r24
    3828:	79 0b       	sbc	r23, r25
    382a:	64 56       	subi	r22, 0x64	; 100
    382c:	71 09       	sbc	r23, r1
    382e:	07 2e       	mov	r0, r23
    3830:	00 0c       	add	r0, r0
    3832:	88 0b       	sbc	r24, r24
    3834:	99 0b       	sbc	r25, r25
    3836:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__floatsisf>
    383a:	2d ec       	ldi	r18, 0xCD	; 205
    383c:	3c ec       	ldi	r19, 0xCC	; 204
    383e:	4c ec       	ldi	r20, 0xCC	; 204
    3840:	5d e3       	ldi	r21, 0x3D	; 61
    3842:	0e 94 13 24 	call	0x4826	; 0x4826 <__mulsf3>
    3846:	4b 01       	movw	r8, r22
    3848:	5c 01       	movw	r10, r24
    384a:	c0 90 cf 21 	lds	r12, 0x21CF	; 0x8021cf <Speed>
    384e:	d0 90 d0 21 	lds	r13, 0x21D0	; 0x8021d0 <Speed+0x1>
    3852:	e0 90 d1 21 	lds	r14, 0x21D1	; 0x8021d1 <Speed+0x2>
    3856:	f0 90 d2 21 	lds	r15, 0x21D2	; 0x8021d2 <Speed+0x3>
    385a:	a7 01       	movw	r20, r14
    385c:	96 01       	movw	r18, r12
    385e:	0e 94 43 22 	call	0x4486	; 0x4486 <__addsf3>
    3862:	2b 01       	movw	r4, r22
    3864:	3c 01       	movw	r6, r24
			OutR=Speed-(Diff*(float) (LINEFOLLOW_SPEED_KP));
    3866:	a5 01       	movw	r20, r10
    3868:	94 01       	movw	r18, r8
    386a:	c7 01       	movw	r24, r14
    386c:	b6 01       	movw	r22, r12
    386e:	0e 94 42 22 	call	0x4484	; 0x4484 <__subsf3>
    3872:	4b 01       	movw	r8, r22
    3874:	5c 01       	movw	r10, r24
			if (OutL<0) OutL=0;
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	a9 01       	movw	r20, r18
    387c:	c3 01       	movw	r24, r6
    387e:	b2 01       	movw	r22, r4
    3880:	0e 94 af 22 	call	0x455e	; 0x455e <__cmpsf2>
    3884:	87 ff       	sbrs	r24, 7
    3886:	0e c0       	rjmp	.+28     	; 0x38a4 <WorkerLineFollowerSpeed+0x10a>
    3888:	e1 2c       	mov	r14, r1
    388a:	f1 2c       	mov	r15, r1
			if (OutR<0) OutR=0;
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	a9 01       	movw	r20, r18
    3892:	c5 01       	movw	r24, r10
    3894:	b4 01       	movw	r22, r8
    3896:	0e 94 af 22 	call	0x455e	; 0x455e <__cmpsf2>
    389a:	87 ff       	sbrs	r24, 7
    389c:	a2 cf       	rjmp	.-188    	; 0x37e2 <WorkerLineFollowerSpeed+0x48>
    389e:	60 e0       	ldi	r22, 0x00	; 0
    38a0:	70 e0       	ldi	r23, 0x00	; 0
    38a2:	a3 cf       	rjmp	.-186    	; 0x37ea <WorkerLineFollowerSpeed+0x50>
    38a4:	c3 01       	movw	r24, r6
    38a6:	b2 01       	movw	r22, r4
    38a8:	0e 94 26 23 	call	0x464c	; 0x464c <__fixsfsi>
    38ac:	7b 01       	movw	r14, r22
    38ae:	ee cf       	rjmp	.-36     	; 0x388c <WorkerLineFollowerSpeed+0xf2>
			MotorSpeedSet((int16_t) OutL, (int16_t) OutR);	
			
			if (xSemaphoreTake(StopSema,0)==pdPASS)
			{
				MotorSpeedSet(0,0);	
    38b0:	60 e0       	ldi	r22, 0x00	; 0
    38b2:	70 e0       	ldi	r23, 0x00	; 0
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	0e 94 37 21 	call	0x426e	; 0x426e <MotorSpeedSet>
			vTaskDelayUntil( &xLastWakeTime, xPeriod );
		}

		
		
	}
    38bc:	75 cf       	rjmp	.-278    	; 0x37a8 <WorkerLineFollowerSpeed+0xe>

000038be <InitLineFollowerSpeedTask>:
void WorkerLineFollowerSpeed(void *pvParameters);


//Function definitions
void InitLineFollowerSpeedTask()
{
    38be:	ef 92       	push	r14
    38c0:	ff 92       	push	r15
    38c2:	0f 93       	push	r16
	StartSema=xSemaphoreCreateBinary();
    38c4:	43 e0       	ldi	r20, 0x03	; 3
    38c6:	60 e0       	ldi	r22, 0x00	; 0
    38c8:	81 e0       	ldi	r24, 0x01	; 1
    38ca:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueGenericCreate>
    38ce:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <StartSema>
    38d2:	90 93 ce 21 	sts	0x21CE, r25	; 0x8021ce <StartSema+0x1>
	StopSema=xSemaphoreCreateBinary();
    38d6:	43 e0       	ldi	r20, 0x03	; 3
    38d8:	60 e0       	ldi	r22, 0x00	; 0
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueGenericCreate>
    38e0:	80 93 cb 21 	sts	0x21CB, r24	; 0x8021cb <StopSema>
    38e4:	90 93 cc 21 	sts	0x21CC, r25	; 0x8021cc <StopSema+0x1>
	xTaskCreate( WorkerLineFollowerSpeed, "LFSpeed", 512, NULL, tskIDLE_PRIORITY+2, NULL );
    38e8:	e1 2c       	mov	r14, r1
    38ea:	f1 2c       	mov	r15, r1
    38ec:	02 e0       	ldi	r16, 0x02	; 2
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	40 e0       	ldi	r20, 0x00	; 0
    38f4:	52 e0       	ldi	r21, 0x02	; 2
    38f6:	6f ec       	ldi	r22, 0xCF	; 207
    38f8:	70 e2       	ldi	r23, 0x20	; 32
    38fa:	8d ec       	ldi	r24, 0xCD	; 205
    38fc:	9b e1       	ldi	r25, 0x1B	; 27
    38fe:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <xTaskCreate>
}
    3902:	0f 91       	pop	r16
    3904:	ff 90       	pop	r15
    3906:	ef 90       	pop	r14
    3908:	08 95       	ret

0000390a <StartLineFollower>:
	}
}

void StartLineFollower(float Speed)
{
	ReqSpeed=Speed;
    390a:	60 93 d3 21 	sts	0x21D3, r22	; 0x8021d3 <ReqSpeed>
    390e:	70 93 d4 21 	sts	0x21D4, r23	; 0x8021d4 <ReqSpeed+0x1>
    3912:	80 93 d5 21 	sts	0x21D5, r24	; 0x8021d5 <ReqSpeed+0x2>
    3916:	90 93 d6 21 	sts	0x21D6, r25	; 0x8021d6 <ReqSpeed+0x3>
	xSemaphoreGive(StartSema);
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	40 e0       	ldi	r20, 0x00	; 0
    391e:	50 e0       	ldi	r21, 0x00	; 0
    3920:	60 e0       	ldi	r22, 0x00	; 0
    3922:	70 e0       	ldi	r23, 0x00	; 0
    3924:	80 91 cd 21 	lds	r24, 0x21CD	; 0x8021cd <StartSema>
    3928:	90 91 ce 21 	lds	r25, 0x21CE	; 0x8021ce <StartSema+0x1>
    392c:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <xQueueGenericSend>

00003930 <StopLineFollower>:
	
}
void StopLineFollower()
{
	xSemaphoreGive(StopSema);
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	40 e0       	ldi	r20, 0x00	; 0
    3934:	50 e0       	ldi	r21, 0x00	; 0
    3936:	60 e0       	ldi	r22, 0x00	; 0
    3938:	70 e0       	ldi	r23, 0x00	; 0
    393a:	80 91 cb 21 	lds	r24, 0x21CB	; 0x8021cb <StopSema>
    393e:	90 91 cc 21 	lds	r25, 0x21CC	; 0x8021cc <StopSema+0x1>
    3942:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <xQueueGenericSend>

00003946 <WorkerMotion>:
	MotionCmd.Cmd=CMD_DRIVE_STRAIGHT;
	MotionCmd.Params[0]=Distance;
	MotionCmd.Params[1]=Speed;
	xQueueSendToBack(CmdQueue,&MotionCmd,portMAX_DELAY);	//Issue command
	xSemaphoreTake(CmdCompleteSema,portMAX_DELAY);			//Block until command has been executed
}
    3946:	cf 93       	push	r28
    3948:	df 93       	push	r29
    394a:	cd b7       	in	r28, 0x3d	; 61
    394c:	de b7       	in	r29, 0x3e	; 62
    394e:	67 97       	sbiw	r28, 0x17	; 23
    3950:	cd bf       	out	0x3d, r28	; 61
    3952:	de bf       	out	0x3e, r29	; 62
    3954:	0f c0       	rjmp	.+30     	; 0x3974 <WorkerMotion+0x2e>
    3956:	82 30       	cpi	r24, 0x02	; 2
    3958:	09 f4       	brne	.+2      	; 0x395c <WorkerMotion+0x16>
    395a:	ae c0       	rjmp	.+348    	; 0x3ab8 <WorkerMotion+0x172>
    395c:	83 30       	cpi	r24, 0x03	; 3
    395e:	09 f4       	brne	.+2      	; 0x3962 <WorkerMotion+0x1c>
    3960:	fa c0       	rjmp	.+500    	; 0x3b56 <WorkerMotion+0x210>
    3962:	80 91 d9 21 	lds	r24, 0x21D9	; 0x8021d9 <CmdQueue>
    3966:	90 91 da 21 	lds	r25, 0x21DA	; 0x8021da <CmdQueue+0x1>
    396a:	0e 94 51 12 	call	0x24a2	; 0x24a2 <uxQueueMessagesWaiting>
    396e:	88 23       	and	r24, r24
    3970:	09 f4       	brne	.+2      	; 0x3974 <WorkerMotion+0x2e>
    3972:	96 c0       	rjmp	.+300    	; 0x3aa0 <WorkerMotion+0x15a>
    3974:	4f ef       	ldi	r20, 0xFF	; 255
    3976:	5f ef       	ldi	r21, 0xFF	; 255
    3978:	be 01       	movw	r22, r28
    397a:	6f 5f       	subi	r22, 0xFF	; 255
    397c:	7f 4f       	sbci	r23, 0xFF	; 255
    397e:	80 91 d9 21 	lds	r24, 0x21D9	; 0x8021d9 <CmdQueue>
    3982:	90 91 da 21 	lds	r25, 0x21DA	; 0x8021da <CmdQueue+0x1>
    3986:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <xQueueReceive>
    398a:	89 81       	ldd	r24, Y+1	; 0x01
    398c:	81 30       	cpi	r24, 0x01	; 1
    398e:	19 f7       	brne	.-58     	; 0x3956 <WorkerMotion+0x10>
    3990:	4e 80       	ldd	r4, Y+6	; 0x06
    3992:	5f 80       	ldd	r5, Y+7	; 0x07
    3994:	68 84       	ldd	r6, Y+8	; 0x08
    3996:	79 84       	ldd	r7, Y+9	; 0x09
    3998:	8a 80       	ldd	r8, Y+2	; 0x02
    399a:	9b 80       	ldd	r9, Y+3	; 0x03
    399c:	ac 80       	ldd	r10, Y+4	; 0x04
    399e:	bd 80       	ldd	r11, Y+5	; 0x05
    39a0:	0e 94 22 16 	call	0x2c44	; 0x2c44 <xTaskGetTickCount>
    39a4:	8a 87       	std	Y+10, r24	; 0x0a
    39a6:	9b 87       	std	Y+11, r25	; 0x0b
    39a8:	0e 94 58 20 	call	0x40b0	; 0x40b0 <EnableMotorPosTask>
    39ac:	0e 94 25 21 	call	0x424a	; 0x424a <EnableMotorSpeedTask>
    39b0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <DriverMotorGetEncoder>
    39b4:	6b 01       	movw	r12, r22
    39b6:	7c 01       	movw	r14, r24
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	a9 01       	movw	r20, r18
    39be:	c5 01       	movw	r24, r10
    39c0:	b4 01       	movw	r22, r8
    39c2:	0e 94 0e 24 	call	0x481c	; 0x481c <__gesf2>
    39c6:	2d ec       	ldi	r18, 0xCD	; 205
    39c8:	3c e4       	ldi	r19, 0x4C	; 76
    39ca:	4f e4       	ldi	r20, 0x4F	; 79
    39cc:	53 e4       	ldi	r21, 0x43	; 67
    39ce:	18 16       	cp	r1, r24
    39d0:	0c f0       	brlt	.+2      	; 0x39d4 <WorkerMotion+0x8e>
    39d2:	50 c1       	rjmp	.+672    	; 0x3c74 <WorkerMotion+0x32e>
    39d4:	c5 01       	movw	r24, r10
    39d6:	b4 01       	movw	r22, r8
    39d8:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	44 eb       	ldi	r20, 0xB4	; 180
    39e2:	53 e4       	ldi	r21, 0x43	; 67
    39e4:	0e 94 13 24 	call	0x4826	; 0x4826 <__mulsf3>
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	40 e4       	ldi	r20, 0x40	; 64
    39ee:	50 e4       	ldi	r21, 0x40	; 64
    39f0:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    39f4:	6c 8b       	std	Y+20, r22	; 0x14
    39f6:	7d 8b       	std	Y+21, r23	; 0x15
    39f8:	8e 8b       	std	Y+22, r24	; 0x16
    39fa:	9f 8b       	std	Y+23, r25	; 0x17
    39fc:	b6 01       	movw	r22, r12
    39fe:	dd 0c       	add	r13, r13
    3a00:	88 0b       	sbc	r24, r24
    3a02:	99 0b       	sbc	r25, r25
    3a04:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__floatsisf>
    3a08:	9b 01       	movw	r18, r22
    3a0a:	ac 01       	movw	r20, r24
    3a0c:	6c 89       	ldd	r22, Y+20	; 0x14
    3a0e:	7d 89       	ldd	r23, Y+21	; 0x15
    3a10:	8e 89       	ldd	r24, Y+22	; 0x16
    3a12:	9f 89       	ldd	r25, Y+23	; 0x17
    3a14:	0e 94 43 22 	call	0x4486	; 0x4486 <__addsf3>
    3a18:	0e 94 26 23 	call	0x464c	; 0x464c <__fixsfsi>
    3a1c:	8b 01       	movw	r16, r22
    3a1e:	2d ec       	ldi	r18, 0xCD	; 205
    3a20:	3c e4       	ldi	r19, 0x4C	; 76
    3a22:	4f e4       	ldi	r20, 0x4F	; 79
    3a24:	53 e4       	ldi	r21, 0x43	; 67
    3a26:	c3 01       	movw	r24, r6
    3a28:	b2 01       	movw	r22, r4
    3a2a:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	44 eb       	ldi	r20, 0xB4	; 180
    3a34:	53 e4       	ldi	r21, 0x43	; 67
    3a36:	0e 94 13 24 	call	0x4826	; 0x4826 <__mulsf3>
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	40 e4       	ldi	r20, 0x40	; 64
    3a40:	50 e4       	ldi	r21, 0x40	; 64
    3a42:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    3a46:	0e 94 26 23 	call	0x464c	; 0x464c <__fixsfsi>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	bc 01       	movw	r22, r24
    3a50:	0e 94 37 21 	call	0x426e	; 0x426e <MotorSpeedSet>
    3a54:	09 c0       	rjmp	.+18     	; 0x3a68 <WorkerMotion+0x122>
    3a56:	0c 15       	cp	r16, r12
    3a58:	1d 05       	cpc	r17, r13
    3a5a:	b4 f0       	brlt	.+44     	; 0x3a88 <WorkerMotion+0x142>
    3a5c:	6a e0       	ldi	r22, 0x0A	; 10
    3a5e:	70 e0       	ldi	r23, 0x00	; 0
    3a60:	ce 01       	movw	r24, r28
    3a62:	0a 96       	adiw	r24, 0x0a	; 10
    3a64:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <vTaskDelayUntil>
    3a68:	0e 94 69 04 	call	0x8d2	; 0x8d2 <DriverMotorGetEncoder>
    3a6c:	6b 01       	movw	r12, r22
    3a6e:	7c 01       	movw	r14, r24
    3a70:	20 e0       	ldi	r18, 0x00	; 0
    3a72:	30 e0       	ldi	r19, 0x00	; 0
    3a74:	a9 01       	movw	r20, r18
    3a76:	c5 01       	movw	r24, r10
    3a78:	b4 01       	movw	r22, r8
    3a7a:	0e 94 0e 24 	call	0x481c	; 0x481c <__gesf2>
    3a7e:	18 16       	cp	r1, r24
    3a80:	54 f3       	brlt	.-44     	; 0x3a56 <WorkerMotion+0x110>
    3a82:	c0 16       	cp	r12, r16
    3a84:	d1 06       	cpc	r13, r17
    3a86:	54 f7       	brge	.-44     	; 0x3a5c <WorkerMotion+0x116>
    3a88:	0e 94 71 20 	call	0x40e2	; 0x40e2 <DisableMotorPosTask>
    3a8c:	0e 94 31 21 	call	0x4262	; 0x4262 <DisableMotorSpeedTask>
    3a90:	80 91 d9 21 	lds	r24, 0x21D9	; 0x8021d9 <CmdQueue>
    3a94:	90 91 da 21 	lds	r25, 0x21DA	; 0x8021da <CmdQueue+0x1>
    3a98:	0e 94 51 12 	call	0x24a2	; 0x24a2 <uxQueueMessagesWaiting>
    3a9c:	81 11       	cpse	r24, r1
    3a9e:	6a cf       	rjmp	.-300    	; 0x3974 <WorkerMotion+0x2e>
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	40 e0       	ldi	r20, 0x00	; 0
    3aa4:	50 e0       	ldi	r21, 0x00	; 0
    3aa6:	60 e0       	ldi	r22, 0x00	; 0
    3aa8:	70 e0       	ldi	r23, 0x00	; 0
    3aaa:	80 91 d7 21 	lds	r24, 0x21D7	; 0x8021d7 <CmdCompleteSema>
    3aae:	90 91 d8 21 	lds	r25, 0x21D8	; 0x8021d8 <CmdCompleteSema+0x1>
    3ab2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xQueueGenericSend>
    3ab6:	5e cf       	rjmp	.-324    	; 0x3974 <WorkerMotion+0x2e>
    3ab8:	ca 80       	ldd	r12, Y+2	; 0x02
    3aba:	db 80       	ldd	r13, Y+3	; 0x03
    3abc:	ec 80       	ldd	r14, Y+4	; 0x04
    3abe:	fd 80       	ldd	r15, Y+5	; 0x05
    3ac0:	0e 94 22 16 	call	0x2c44	; 0x2c44 <xTaskGetTickCount>
    3ac4:	8a 8b       	std	Y+18, r24	; 0x12
    3ac6:	9b 8b       	std	Y+19, r25	; 0x13
    3ac8:	0e 94 58 20 	call	0x40b0	; 0x40b0 <EnableMotorPosTask>
    3acc:	0e 94 25 21 	call	0x424a	; 0x424a <EnableMotorSpeedTask>
    3ad0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <DriverMotorGetEncoder>
    3ad4:	2d ec       	ldi	r18, 0xCD	; 205
    3ad6:	3c e4       	ldi	r19, 0x4C	; 76
    3ad8:	4f e4       	ldi	r20, 0x4F	; 79
    3ada:	53 e4       	ldi	r21, 0x43	; 67
    3adc:	c7 01       	movw	r24, r14
    3ade:	b6 01       	movw	r22, r12
    3ae0:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    3ae4:	20 e0       	ldi	r18, 0x00	; 0
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	44 eb       	ldi	r20, 0xB4	; 180
    3aea:	53 e4       	ldi	r21, 0x43	; 67
    3aec:	0e 94 13 24 	call	0x4826	; 0x4826 <__mulsf3>
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	40 e4       	ldi	r20, 0x40	; 64
    3af6:	50 e4       	ldi	r21, 0x40	; 64
    3af8:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    3afc:	0e 94 85 1c 	call	0x390a	; 0x390a <StartLineFollower>
    3b00:	00 e0       	ldi	r16, 0x00	; 0
    3b02:	10 e0       	ldi	r17, 0x00	; 0
    3b04:	0b c0       	rjmp	.+22     	; 0x3b1c <WorkerMotion+0x1d6>
    3b06:	0f 5f       	subi	r16, 0xFF	; 255
    3b08:	1f 4f       	sbci	r17, 0xFF	; 255
    3b0a:	05 31       	cpi	r16, 0x15	; 21
    3b0c:	11 05       	cpc	r17, r1
    3b0e:	e4 f4       	brge	.+56     	; 0x3b48 <WorkerMotion+0x202>
    3b10:	6a e0       	ldi	r22, 0x0A	; 10
    3b12:	70 e0       	ldi	r23, 0x00	; 0
    3b14:	ce 01       	movw	r24, r28
    3b16:	42 96       	adiw	r24, 0x12	; 18
    3b18:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <vTaskDelayUntil>
    3b1c:	0e 94 2c 1b 	call	0x3658	; 0x3658 <GetADCData>
    3b20:	2a 87       	std	Y+10, r18	; 0x0a
    3b22:	3b 87       	std	Y+11, r19	; 0x0b
    3b24:	4c 87       	std	Y+12, r20	; 0x0c
    3b26:	5d 87       	std	Y+13, r21	; 0x0d
    3b28:	6e 87       	std	Y+14, r22	; 0x0e
    3b2a:	7f 87       	std	Y+15, r23	; 0x0f
    3b2c:	88 8b       	std	Y+16, r24	; 0x10
    3b2e:	99 8b       	std	Y+17, r25	; 0x11
    3b30:	2a 85       	ldd	r18, Y+10	; 0x0a
    3b32:	3b 85       	ldd	r19, Y+11	; 0x0b
    3b34:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b36:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b38:	82 0f       	add	r24, r18
    3b3a:	93 1f       	adc	r25, r19
    3b3c:	8a 38       	cpi	r24, 0x8A	; 138
    3b3e:	93 41       	sbci	r25, 0x13	; 19
    3b40:	14 f7       	brge	.-60     	; 0x3b06 <WorkerMotion+0x1c0>
    3b42:	00 e0       	ldi	r16, 0x00	; 0
    3b44:	10 e0       	ldi	r17, 0x00	; 0
    3b46:	e4 cf       	rjmp	.-56     	; 0x3b10 <WorkerMotion+0x1ca>
    3b48:	0e 94 98 1c 	call	0x3930	; 0x3930 <StopLineFollower>
    3b4c:	0e 94 71 20 	call	0x40e2	; 0x40e2 <DisableMotorPosTask>
    3b50:	0e 94 31 21 	call	0x4262	; 0x4262 <DisableMotorSpeedTask>
    3b54:	06 cf       	rjmp	.-500    	; 0x3962 <WorkerMotion+0x1c>
    3b56:	4e 80       	ldd	r4, Y+6	; 0x06
    3b58:	5f 80       	ldd	r5, Y+7	; 0x07
    3b5a:	68 84       	ldd	r6, Y+8	; 0x08
    3b5c:	79 84       	ldd	r7, Y+9	; 0x09
    3b5e:	8a 80       	ldd	r8, Y+2	; 0x02
    3b60:	9b 80       	ldd	r9, Y+3	; 0x03
    3b62:	ac 80       	ldd	r10, Y+4	; 0x04
    3b64:	bd 80       	ldd	r11, Y+5	; 0x05
    3b66:	0e 94 22 16 	call	0x2c44	; 0x2c44 <xTaskGetTickCount>
    3b6a:	8a 87       	std	Y+10, r24	; 0x0a
    3b6c:	9b 87       	std	Y+11, r25	; 0x0b
    3b6e:	0e 94 58 20 	call	0x40b0	; 0x40b0 <EnableMotorPosTask>
    3b72:	0e 94 25 21 	call	0x424a	; 0x424a <EnableMotorSpeedTask>
    3b76:	0e 94 69 04 	call	0x8d2	; 0x8d2 <DriverMotorGetEncoder>
    3b7a:	6b 01       	movw	r12, r22
    3b7c:	7c 01       	movw	r14, r24
    3b7e:	26 ec       	ldi	r18, 0xC6	; 198
    3b80:	39 ed       	ldi	r19, 0xD9	; 217
    3b82:	47 e7       	ldi	r20, 0x77	; 119
    3b84:	5f e3       	ldi	r21, 0x3F	; 63
    3b86:	c5 01       	movw	r24, r10
    3b88:	b4 01       	movw	r22, r8
    3b8a:	0e 94 13 24 	call	0x4826	; 0x4826 <__mulsf3>
    3b8e:	4b 01       	movw	r8, r22
    3b90:	5c 01       	movw	r10, r24
    3b92:	20 e0       	ldi	r18, 0x00	; 0
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	a9 01       	movw	r20, r18
    3b98:	0e 94 0e 24 	call	0x481c	; 0x481c <__gesf2>
    3b9c:	18 16       	cp	r1, r24
    3b9e:	0c f0       	brlt	.+2      	; 0x3ba2 <WorkerMotion+0x25c>
    3ba0:	ab c0       	rjmp	.+342    	; 0x3cf8 <WorkerMotion+0x3b2>
    3ba2:	b6 01       	movw	r22, r12
    3ba4:	dd 0c       	add	r13, r13
    3ba6:	88 0b       	sbc	r24, r24
    3ba8:	99 0b       	sbc	r25, r25
    3baa:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__floatsisf>
    3bae:	6b 01       	movw	r12, r22
    3bb0:	7c 01       	movw	r14, r24
    3bb2:	2d ec       	ldi	r18, 0xCD	; 205
    3bb4:	3c e4       	ldi	r19, 0x4C	; 76
    3bb6:	4f e4       	ldi	r20, 0x4F	; 79
    3bb8:	53 e4       	ldi	r21, 0x43	; 67
    3bba:	c5 01       	movw	r24, r10
    3bbc:	b4 01       	movw	r22, r8
    3bbe:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	44 eb       	ldi	r20, 0xB4	; 180
    3bc8:	53 e4       	ldi	r21, 0x43	; 67
    3bca:	0e 94 13 24 	call	0x4826	; 0x4826 <__mulsf3>
    3bce:	20 e0       	ldi	r18, 0x00	; 0
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	40 e4       	ldi	r20, 0x40	; 64
    3bd4:	50 e4       	ldi	r21, 0x40	; 64
    3bd6:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    3bda:	9b 01       	movw	r18, r22
    3bdc:	ac 01       	movw	r20, r24
    3bde:	c7 01       	movw	r24, r14
    3be0:	b6 01       	movw	r22, r12
    3be2:	0e 94 42 22 	call	0x4484	; 0x4484 <__subsf3>
    3be6:	0e 94 26 23 	call	0x464c	; 0x464c <__fixsfsi>
    3bea:	8b 01       	movw	r16, r22
    3bec:	2d ec       	ldi	r18, 0xCD	; 205
    3bee:	3c e4       	ldi	r19, 0x4C	; 76
    3bf0:	4f e4       	ldi	r20, 0x4F	; 79
    3bf2:	53 e4       	ldi	r21, 0x43	; 67
    3bf4:	c3 01       	movw	r24, r6
    3bf6:	b2 01       	movw	r22, r4
    3bf8:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    3bfc:	20 e0       	ldi	r18, 0x00	; 0
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	44 eb       	ldi	r20, 0xB4	; 180
    3c02:	53 e4       	ldi	r21, 0x43	; 67
    3c04:	0e 94 13 24 	call	0x4826	; 0x4826 <__mulsf3>
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	40 e4       	ldi	r20, 0x40	; 64
    3c0e:	50 e4       	ldi	r21, 0x40	; 64
    3c10:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    3c14:	2b 01       	movw	r4, r22
    3c16:	3c 01       	movw	r6, r24
    3c18:	0e 94 26 23 	call	0x464c	; 0x464c <__fixsfsi>
    3c1c:	6b 01       	movw	r12, r22
    3c1e:	7c 01       	movw	r14, r24
    3c20:	c3 01       	movw	r24, r6
    3c22:	b2 01       	movw	r22, r4
    3c24:	90 58       	subi	r25, 0x80	; 128
    3c26:	0e 94 26 23 	call	0x464c	; 0x464c <__fixsfsi>
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	cb 01       	movw	r24, r22
    3c2e:	b6 01       	movw	r22, r12
    3c30:	0e 94 37 21 	call	0x426e	; 0x426e <MotorSpeedSet>
    3c34:	0a c0       	rjmp	.+20     	; 0x3c4a <WorkerMotion+0x304>
    3c36:	c0 16       	cp	r12, r16
    3c38:	d1 06       	cpc	r13, r17
    3c3a:	0c f4       	brge	.+2      	; 0x3c3e <WorkerMotion+0x2f8>
    3c3c:	25 cf       	rjmp	.-438    	; 0x3a88 <WorkerMotion+0x142>
    3c3e:	6a e0       	ldi	r22, 0x0A	; 10
    3c40:	70 e0       	ldi	r23, 0x00	; 0
    3c42:	ce 01       	movw	r24, r28
    3c44:	0a 96       	adiw	r24, 0x0a	; 10
    3c46:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <vTaskDelayUntil>
    3c4a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <DriverMotorGetEncoder>
    3c4e:	6b 01       	movw	r12, r22
    3c50:	7c 01       	movw	r14, r24
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	30 e0       	ldi	r19, 0x00	; 0
    3c56:	a9 01       	movw	r20, r18
    3c58:	c5 01       	movw	r24, r10
    3c5a:	b4 01       	movw	r22, r8
    3c5c:	0e 94 0e 24 	call	0x481c	; 0x481c <__gesf2>
    3c60:	18 16       	cp	r1, r24
    3c62:	4c f3       	brlt	.-46     	; 0x3c36 <WorkerMotion+0x2f0>
    3c64:	0c 15       	cp	r16, r12
    3c66:	1d 05       	cpc	r17, r13
    3c68:	54 f7       	brge	.-44     	; 0x3c3e <WorkerMotion+0x2f8>
    3c6a:	0e 94 71 20 	call	0x40e2	; 0x40e2 <DisableMotorPosTask>
    3c6e:	0e 94 31 21 	call	0x4262	; 0x4262 <DisableMotorSpeedTask>
    3c72:	0e cf       	rjmp	.-484    	; 0x3a90 <WorkerMotion+0x14a>
    3c74:	c5 01       	movw	r24, r10
    3c76:	b4 01       	movw	r22, r8
    3c78:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	44 eb       	ldi	r20, 0xB4	; 180
    3c82:	53 e4       	ldi	r21, 0x43	; 67
    3c84:	0e 94 13 24 	call	0x4826	; 0x4826 <__mulsf3>
    3c88:	20 e0       	ldi	r18, 0x00	; 0
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	40 e4       	ldi	r20, 0x40	; 64
    3c8e:	50 e4       	ldi	r21, 0x40	; 64
    3c90:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    3c94:	6c 8b       	std	Y+20, r22	; 0x14
    3c96:	7d 8b       	std	Y+21, r23	; 0x15
    3c98:	8e 8b       	std	Y+22, r24	; 0x16
    3c9a:	9f 8b       	std	Y+23, r25	; 0x17
    3c9c:	b6 01       	movw	r22, r12
    3c9e:	dd 0c       	add	r13, r13
    3ca0:	88 0b       	sbc	r24, r24
    3ca2:	99 0b       	sbc	r25, r25
    3ca4:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__floatsisf>
    3ca8:	9b 01       	movw	r18, r22
    3caa:	ac 01       	movw	r20, r24
    3cac:	6c 89       	ldd	r22, Y+20	; 0x14
    3cae:	7d 89       	ldd	r23, Y+21	; 0x15
    3cb0:	8e 89       	ldd	r24, Y+22	; 0x16
    3cb2:	9f 89       	ldd	r25, Y+23	; 0x17
    3cb4:	0e 94 43 22 	call	0x4486	; 0x4486 <__addsf3>
    3cb8:	0e 94 26 23 	call	0x464c	; 0x464c <__fixsfsi>
    3cbc:	8b 01       	movw	r16, r22
    3cbe:	2d ec       	ldi	r18, 0xCD	; 205
    3cc0:	3c e4       	ldi	r19, 0x4C	; 76
    3cc2:	4f e4       	ldi	r20, 0x4F	; 79
    3cc4:	53 e4       	ldi	r21, 0x43	; 67
    3cc6:	c3 01       	movw	r24, r6
    3cc8:	b2 01       	movw	r22, r4
    3cca:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    3cce:	20 e0       	ldi	r18, 0x00	; 0
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	44 eb       	ldi	r20, 0xB4	; 180
    3cd4:	53 e4       	ldi	r21, 0x43	; 67
    3cd6:	0e 94 13 24 	call	0x4826	; 0x4826 <__mulsf3>
    3cda:	20 e0       	ldi	r18, 0x00	; 0
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	40 e4       	ldi	r20, 0x40	; 64
    3ce0:	50 e4       	ldi	r21, 0x40	; 64
    3ce2:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    3ce6:	90 58       	subi	r25, 0x80	; 128
    3ce8:	0e 94 26 23 	call	0x464c	; 0x464c <__fixsfsi>
    3cec:	dc 01       	movw	r26, r24
    3cee:	cb 01       	movw	r24, r22
    3cf0:	bc 01       	movw	r22, r24
    3cf2:	0e 94 37 21 	call	0x426e	; 0x426e <MotorSpeedSet>
    3cf6:	b8 ce       	rjmp	.-656    	; 0x3a68 <WorkerMotion+0x122>
    3cf8:	b6 01       	movw	r22, r12
    3cfa:	dd 0c       	add	r13, r13
    3cfc:	88 0b       	sbc	r24, r24
    3cfe:	99 0b       	sbc	r25, r25
    3d00:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__floatsisf>
    3d04:	6b 01       	movw	r12, r22
    3d06:	7c 01       	movw	r14, r24
    3d08:	2d ec       	ldi	r18, 0xCD	; 205
    3d0a:	3c e4       	ldi	r19, 0x4C	; 76
    3d0c:	4f e4       	ldi	r20, 0x4F	; 79
    3d0e:	53 e4       	ldi	r21, 0x43	; 67
    3d10:	c5 01       	movw	r24, r10
    3d12:	b4 01       	movw	r22, r8
    3d14:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    3d18:	20 e0       	ldi	r18, 0x00	; 0
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	44 eb       	ldi	r20, 0xB4	; 180
    3d1e:	53 e4       	ldi	r21, 0x43	; 67
    3d20:	0e 94 13 24 	call	0x4826	; 0x4826 <__mulsf3>
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	40 e4       	ldi	r20, 0x40	; 64
    3d2a:	50 e4       	ldi	r21, 0x40	; 64
    3d2c:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    3d30:	9b 01       	movw	r18, r22
    3d32:	ac 01       	movw	r20, r24
    3d34:	c7 01       	movw	r24, r14
    3d36:	b6 01       	movw	r22, r12
    3d38:	0e 94 42 22 	call	0x4484	; 0x4484 <__subsf3>
    3d3c:	0e 94 26 23 	call	0x464c	; 0x464c <__fixsfsi>
    3d40:	8b 01       	movw	r16, r22
    3d42:	2d ec       	ldi	r18, 0xCD	; 205
    3d44:	3c e4       	ldi	r19, 0x4C	; 76
    3d46:	4f e4       	ldi	r20, 0x4F	; 79
    3d48:	53 e4       	ldi	r21, 0x43	; 67
    3d4a:	c3 01       	movw	r24, r6
    3d4c:	b2 01       	movw	r22, r4
    3d4e:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	44 eb       	ldi	r20, 0xB4	; 180
    3d58:	53 e4       	ldi	r21, 0x43	; 67
    3d5a:	0e 94 13 24 	call	0x4826	; 0x4826 <__mulsf3>
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e4       	ldi	r20, 0x40	; 64
    3d64:	50 e4       	ldi	r21, 0x40	; 64
    3d66:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    3d6a:	2b 01       	movw	r4, r22
    3d6c:	3c 01       	movw	r6, r24
    3d6e:	90 58       	subi	r25, 0x80	; 128
    3d70:	0e 94 26 23 	call	0x464c	; 0x464c <__fixsfsi>
    3d74:	6b 01       	movw	r12, r22
    3d76:	7c 01       	movw	r14, r24
    3d78:	c3 01       	movw	r24, r6
    3d7a:	b2 01       	movw	r22, r4
    3d7c:	0e 94 26 23 	call	0x464c	; 0x464c <__fixsfsi>
    3d80:	dc 01       	movw	r26, r24
    3d82:	cb 01       	movw	r24, r22
    3d84:	b6 01       	movw	r22, r12
    3d86:	0e 94 37 21 	call	0x426e	; 0x426e <MotorSpeedSet>
    3d8a:	5f cf       	rjmp	.-322    	; 0x3c4a <WorkerMotion+0x304>

00003d8c <InitMotionTask>:
    3d8c:	ef 92       	push	r14
    3d8e:	ff 92       	push	r15
    3d90:	0f 93       	push	r16
    3d92:	e1 2c       	mov	r14, r1
    3d94:	f1 2c       	mov	r15, r1
    3d96:	03 e0       	ldi	r16, 0x03	; 3
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	40 e0       	ldi	r20, 0x00	; 0
    3d9e:	51 e0       	ldi	r21, 0x01	; 1
    3da0:	67 ed       	ldi	r22, 0xD7	; 215
    3da2:	70 e2       	ldi	r23, 0x20	; 32
    3da4:	83 ea       	ldi	r24, 0xA3	; 163
    3da6:	9c e1       	ldi	r25, 0x1C	; 28
    3da8:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <xTaskCreate>
    3dac:	40 e0       	ldi	r20, 0x00	; 0
    3dae:	69 e0       	ldi	r22, 0x09	; 9
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueGenericCreate>
    3db6:	80 93 d9 21 	sts	0x21D9, r24	; 0x8021d9 <CmdQueue>
    3dba:	90 93 da 21 	sts	0x21DA, r25	; 0x8021da <CmdQueue+0x1>
    3dbe:	43 e0       	ldi	r20, 0x03	; 3
    3dc0:	60 e0       	ldi	r22, 0x00	; 0
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueGenericCreate>
    3dc8:	80 93 d7 21 	sts	0x21D7, r24	; 0x8021d7 <CmdCompleteSema>
    3dcc:	90 93 d8 21 	sts	0x21D8, r25	; 0x8021d8 <CmdCompleteSema+0x1>
    3dd0:	0f 91       	pop	r16
    3dd2:	ff 90       	pop	r15
    3dd4:	ef 90       	pop	r14
    3dd6:	08 95       	ret

00003dd8 <DriveSegment>:
void DriveSegment(float Speed)
{
    3dd8:	cf 93       	push	r28
    3dda:	df 93       	push	r29
    3ddc:	cd b7       	in	r28, 0x3d	; 61
    3dde:	de b7       	in	r29, 0x3e	; 62
    3de0:	29 97       	sbiw	r28, 0x09	; 9
    3de2:	cd bf       	out	0x3d, r28	; 61
    3de4:	de bf       	out	0x3e, r29	; 62
	MotionCmdStruct MotionCmd;
	MotionCmd.Cmd=CMD_DRIVE_SEGMENT;
    3de6:	22 e0       	ldi	r18, 0x02	; 2
    3de8:	29 83       	std	Y+1, r18	; 0x01
	MotionCmd.Params[0]=Speed;
    3dea:	6a 83       	std	Y+2, r22	; 0x02
    3dec:	7b 83       	std	Y+3, r23	; 0x03
    3dee:	8c 83       	std	Y+4, r24	; 0x04
    3df0:	9d 83       	std	Y+5, r25	; 0x05
	xQueueSendToBack(CmdQueue,&MotionCmd,portMAX_DELAY);	//Issue command
    3df2:	20 e0       	ldi	r18, 0x00	; 0
    3df4:	4f ef       	ldi	r20, 0xFF	; 255
    3df6:	5f ef       	ldi	r21, 0xFF	; 255
    3df8:	be 01       	movw	r22, r28
    3dfa:	6f 5f       	subi	r22, 0xFF	; 255
    3dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    3dfe:	80 91 d9 21 	lds	r24, 0x21D9	; 0x8021d9 <CmdQueue>
    3e02:	90 91 da 21 	lds	r25, 0x21DA	; 0x8021da <CmdQueue+0x1>
    3e06:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xQueueGenericSend>
	xSemaphoreTake(CmdCompleteSema,portMAX_DELAY);			//Block until command has been executed
    3e0a:	6f ef       	ldi	r22, 0xFF	; 255
    3e0c:	7f ef       	ldi	r23, 0xFF	; 255
    3e0e:	80 91 d7 21 	lds	r24, 0x21D7	; 0x8021d7 <CmdCompleteSema>
    3e12:	90 91 d8 21 	lds	r25, 0x21D8	; 0x8021d8 <CmdCompleteSema+0x1>
    3e16:	0e 94 4f 10 	call	0x209e	; 0x209e <xQueueSemaphoreTake>
}
    3e1a:	29 96       	adiw	r28, 0x09	; 9
    3e1c:	cd bf       	out	0x3d, r28	; 61
    3e1e:	de bf       	out	0x3e, r29	; 62
    3e20:	df 91       	pop	r29
    3e22:	cf 91       	pop	r28
    3e24:	08 95       	ret

00003e26 <WorkerMotorPos>:
	IncSet.IncSet2=IncSet2;
	xQueueSend(IncSetQueue,&IncSet,portMAX_DELAY);
}

void WorkerMotorPos(void *pvParameters)
{
    3e26:	cf 93       	push	r28
    3e28:	df 93       	push	r29
    3e2a:	cd b7       	in	r28, 0x3d	; 61
    3e2c:	de b7       	in	r29, 0x3e	; 62
    3e2e:	2c 97       	sbiw	r28, 0x0c	; 12
    3e30:	cd bf       	out	0x3d, r28	; 61
    3e32:	de bf       	out	0x3e, r29	; 62
	float Err1=0,Err2=0;
	
	IncSetStruct IncSet;
	EncoderStruct EncoderInfo;
	
	xLastWakeTime = xTaskGetTickCount();
    3e34:	0e 94 22 16 	call	0x2c44	; 0x2c44 <xTaskGetTickCount>
    3e38:	80 93 db 21 	sts	0x21DB, r24	; 0x8021db <xLastWakeTime>
    3e3c:	90 93 dc 21 	sts	0x21DC, r25	; 0x8021dc <xLastWakeTime+0x1>
void WorkerMotorPos(void *pvParameters)
{
	
	const TickType_t xPeriod = 10;
	
	float Set1=0,Set2=0;
    3e40:	19 86       	std	Y+9, r1	; 0x09
    3e42:	1a 86       	std	Y+10, r1	; 0x0a
    3e44:	1b 86       	std	Y+11, r1	; 0x0b
    3e46:	1c 86       	std	Y+12, r1	; 0x0c
    3e48:	1d 82       	std	Y+5, r1	; 0x05
    3e4a:	1e 82       	std	Y+6, r1	; 0x06
    3e4c:	1f 82       	std	Y+7, r1	; 0x07
    3e4e:	18 86       	std	Y+8, r1	; 0x08
    3e50:	77 c0       	rjmp	.+238    	; 0x3f40 <WorkerMotorPos+0x11a>
			//PID 1
			Err1=Set1-EncoderInfo.Cnt1;
			Out1=Err1*MOTPOS_KP;
			if (Out1>0) Out1+=MOTPOS_FF_OFFSET;
			if (Out1>4095) Out1=4095;
			if (Out1<0) Out1-=MOTPOS_FF_OFFSET;			
    3e52:	20 e0       	ldi	r18, 0x00	; 0
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	a9 01       	movw	r20, r18
    3e58:	c7 01       	movw	r24, r14
    3e5a:	b6 01       	movw	r22, r12
    3e5c:	0e 94 af 22 	call	0x455e	; 0x455e <__cmpsf2>
    3e60:	87 ff       	sbrs	r24, 7
    3e62:	0a c0       	rjmp	.+20     	; 0x3e78 <WorkerMotorPos+0x52>
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	30 e8       	ldi	r19, 0x80	; 128
    3e68:	4b eb       	ldi	r20, 0xBB	; 187
    3e6a:	54 e4       	ldi	r21, 0x44	; 68
    3e6c:	c7 01       	movw	r24, r14
    3e6e:	b6 01       	movw	r22, r12
    3e70:	0e 94 42 22 	call	0x4484	; 0x4484 <__subsf3>
    3e74:	6b 01       	movw	r12, r22
    3e76:	7c 01       	movw	r14, r24
			if (Out1<-4095) Out1=-4095;
    3e78:	20 e0       	ldi	r18, 0x00	; 0
    3e7a:	30 ef       	ldi	r19, 0xF0	; 240
    3e7c:	4f e7       	ldi	r20, 0x7F	; 127
    3e7e:	55 ec       	ldi	r21, 0xC5	; 197
    3e80:	c7 01       	movw	r24, r14
    3e82:	b6 01       	movw	r22, r12
    3e84:	0e 94 af 22 	call	0x455e	; 0x455e <__cmpsf2>
    3e88:	87 ff       	sbrs	r24, 7
    3e8a:	b6 c0       	rjmp	.+364    	; 0x3ff8 <WorkerMotorPos+0x1d2>
    3e8c:	01 e0       	ldi	r16, 0x01	; 1
    3e8e:	10 ef       	ldi	r17, 0xF0	; 240

			//PID 2
			Err2=Set2-EncoderInfo.Cnt2;
			Out2=Err2*MOTPOS_KP;
    3e90:	c5 01       	movw	r24, r10
    3e92:	b4 01       	movw	r22, r8
    3e94:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__floatsisf>
    3e98:	9b 01       	movw	r18, r22
    3e9a:	ac 01       	movw	r20, r24
    3e9c:	69 85       	ldd	r22, Y+9	; 0x09
    3e9e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3ea0:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ea2:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ea4:	0e 94 42 22 	call	0x4484	; 0x4484 <__subsf3>
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	46 e9       	ldi	r20, 0x96	; 150
    3eae:	53 e4       	ldi	r21, 0x43	; 67
    3eb0:	0e 94 13 24 	call	0x4826	; 0x4826 <__mulsf3>
    3eb4:	6b 01       	movw	r12, r22
    3eb6:	7c 01       	movw	r14, r24
			if (Out2>0) Out2+=MOTPOS_FF_OFFSET;
    3eb8:	20 e0       	ldi	r18, 0x00	; 0
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	a9 01       	movw	r20, r18
    3ebe:	0e 94 0e 24 	call	0x481c	; 0x481c <__gesf2>
    3ec2:	18 16       	cp	r1, r24
    3ec4:	54 f4       	brge	.+20     	; 0x3eda <WorkerMotorPos+0xb4>
    3ec6:	20 e0       	ldi	r18, 0x00	; 0
    3ec8:	30 e8       	ldi	r19, 0x80	; 128
    3eca:	4b eb       	ldi	r20, 0xBB	; 187
    3ecc:	54 e4       	ldi	r21, 0x44	; 68
    3ece:	c7 01       	movw	r24, r14
    3ed0:	b6 01       	movw	r22, r12
    3ed2:	0e 94 43 22 	call	0x4486	; 0x4486 <__addsf3>
    3ed6:	6b 01       	movw	r12, r22
    3ed8:	7c 01       	movw	r14, r24
			if (Out2>4095) Out2=4095;
    3eda:	20 e0       	ldi	r18, 0x00	; 0
    3edc:	30 ef       	ldi	r19, 0xF0	; 240
    3ede:	4f e7       	ldi	r20, 0x7F	; 127
    3ee0:	55 e4       	ldi	r21, 0x45	; 69
    3ee2:	c7 01       	movw	r24, r14
    3ee4:	b6 01       	movw	r22, r12
    3ee6:	0e 94 0e 24 	call	0x481c	; 0x481c <__gesf2>
    3eea:	18 16       	cp	r1, r24
    3eec:	0c f4       	brge	.+2      	; 0x3ef0 <WorkerMotorPos+0xca>
    3eee:	8a c0       	rjmp	.+276    	; 0x4004 <WorkerMotorPos+0x1de>
			if (Out2<0) Out2-=MOTPOS_FF_OFFSET;
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	a9 01       	movw	r20, r18
    3ef6:	c7 01       	movw	r24, r14
    3ef8:	b6 01       	movw	r22, r12
    3efa:	0e 94 af 22 	call	0x455e	; 0x455e <__cmpsf2>
    3efe:	87 ff       	sbrs	r24, 7
    3f00:	0a c0       	rjmp	.+20     	; 0x3f16 <WorkerMotorPos+0xf0>
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	30 e8       	ldi	r19, 0x80	; 128
    3f06:	4b eb       	ldi	r20, 0xBB	; 187
    3f08:	54 e4       	ldi	r21, 0x44	; 68
    3f0a:	c7 01       	movw	r24, r14
    3f0c:	b6 01       	movw	r22, r12
    3f0e:	0e 94 42 22 	call	0x4484	; 0x4484 <__subsf3>
    3f12:	6b 01       	movw	r12, r22
    3f14:	7c 01       	movw	r14, r24
			if (Out2<-4095) Out2=-4095;
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 ef       	ldi	r19, 0xF0	; 240
    3f1a:	4f e7       	ldi	r20, 0x7F	; 127
    3f1c:	55 ec       	ldi	r21, 0xC5	; 197
    3f1e:	c7 01       	movw	r24, r14
    3f20:	b6 01       	movw	r22, r12
    3f22:	0e 94 af 22 	call	0x455e	; 0x455e <__cmpsf2>
    3f26:	87 ff       	sbrs	r24, 7
    3f28:	74 c0       	rjmp	.+232    	; 0x4012 <WorkerMotorPos+0x1ec>
    3f2a:	61 e0       	ldi	r22, 0x01	; 1
    3f2c:	70 ef       	ldi	r23, 0xF0	; 240
			
			//printf ("Err:%f   Out:%f\r\n",Err2 ,Out2);			
			
			DriverMotorSet(Out1,Out2);
    3f2e:	c8 01       	movw	r24, r16
    3f30:	0e 94 fe 03 	call	0x7fc	; 0x7fc <DriverMotorSet>
			
			vTaskDelayUntil( &xLastWakeTime, xPeriod );
    3f34:	6a e0       	ldi	r22, 0x0A	; 10
    3f36:	70 e0       	ldi	r23, 0x00	; 0
    3f38:	8b ed       	ldi	r24, 0xDB	; 219
    3f3a:	91 e2       	ldi	r25, 0x21	; 33
    3f3c:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <vTaskDelayUntil>
	
	xLastWakeTime = xTaskGetTickCount();
	
	while (1)
	{		
			EncoderInfo=DriverMotorGetEncoder();
    3f40:	0e 94 69 04 	call	0x8d2	; 0x8d2 <DriverMotorGetEncoder>
    3f44:	6b 01       	movw	r12, r22
    3f46:	7c 01       	movw	r14, r24

			//Process reset setpoint command
			if (xSemaphoreTake(ResetSetpointSema,0)==pdPASS)
    3f48:	60 e0       	ldi	r22, 0x00	; 0
    3f4a:	70 e0       	ldi	r23, 0x00	; 0
    3f4c:	80 91 e1 21 	lds	r24, 0x21E1	; 0x8021e1 <ResetSetpointSema>
    3f50:	90 91 e2 21 	lds	r25, 0x21E2	; 0x8021e2 <ResetSetpointSema+0x1>
    3f54:	0e 94 4f 10 	call	0x209e	; 0x209e <xQueueSemaphoreTake>
			{
				Set1=EncoderInfo.Cnt1;
    3f58:	26 01       	movw	r4, r12
    3f5a:	dd 0c       	add	r13, r13
    3f5c:	66 08       	sbc	r6, r6
    3f5e:	77 08       	sbc	r7, r7
	while (1)
	{		
			EncoderInfo=DriverMotorGetEncoder();

			//Process reset setpoint command
			if (xSemaphoreTake(ResetSetpointSema,0)==pdPASS)
    3f60:	81 30       	cpi	r24, 0x01	; 1
    3f62:	09 f4       	brne	.+2      	; 0x3f66 <WorkerMotorPos+0x140>
    3f64:	90 c0       	rjmp	.+288    	; 0x4086 <WorkerMotorPos+0x260>
    3f66:	47 01       	movw	r8, r14
    3f68:	ff 0c       	add	r15, r15
    3f6a:	aa 08       	sbc	r10, r10
    3f6c:	bb 08       	sbc	r11, r11
				Set1=EncoderInfo.Cnt1;
				Set2=EncoderInfo.Cnt2;
			}
			
			//Process setpoint increment data
			if (xQueueReceive(IncSetQueue,&IncSet,0)==pdPASS)
    3f6e:	40 e0       	ldi	r20, 0x00	; 0
    3f70:	50 e0       	ldi	r21, 0x00	; 0
    3f72:	be 01       	movw	r22, r28
    3f74:	6f 5f       	subi	r22, 0xFF	; 255
    3f76:	7f 4f       	sbci	r23, 0xFF	; 255
    3f78:	80 91 df 21 	lds	r24, 0x21DF	; 0x8021df <IncSetQueue>
    3f7c:	90 91 e0 21 	lds	r25, 0x21E0	; 0x8021e0 <IncSetQueue+0x1>
    3f80:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <xQueueReceive>
    3f84:	81 30       	cpi	r24, 0x01	; 1
    3f86:	09 f4       	brne	.+2      	; 0x3f8a <WorkerMotorPos+0x164>
    3f88:	49 c0       	rjmp	.+146    	; 0x401c <WorkerMotorPos+0x1f6>
				Set2+=((float) IncSet.IncSet2)/100;
			}
			
			//PID 1
			Err1=Set1-EncoderInfo.Cnt1;
			Out1=Err1*MOTPOS_KP;
    3f8a:	c3 01       	movw	r24, r6
    3f8c:	b2 01       	movw	r22, r4
    3f8e:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__floatsisf>
    3f92:	9b 01       	movw	r18, r22
    3f94:	ac 01       	movw	r20, r24
    3f96:	6d 81       	ldd	r22, Y+5	; 0x05
    3f98:	7e 81       	ldd	r23, Y+6	; 0x06
    3f9a:	8f 81       	ldd	r24, Y+7	; 0x07
    3f9c:	98 85       	ldd	r25, Y+8	; 0x08
    3f9e:	0e 94 42 22 	call	0x4484	; 0x4484 <__subsf3>
    3fa2:	20 e0       	ldi	r18, 0x00	; 0
    3fa4:	30 e0       	ldi	r19, 0x00	; 0
    3fa6:	46 e9       	ldi	r20, 0x96	; 150
    3fa8:	53 e4       	ldi	r21, 0x43	; 67
    3faa:	0e 94 13 24 	call	0x4826	; 0x4826 <__mulsf3>
    3fae:	6b 01       	movw	r12, r22
    3fb0:	7c 01       	movw	r14, r24
			if (Out1>0) Out1+=MOTPOS_FF_OFFSET;
    3fb2:	20 e0       	ldi	r18, 0x00	; 0
    3fb4:	30 e0       	ldi	r19, 0x00	; 0
    3fb6:	a9 01       	movw	r20, r18
    3fb8:	0e 94 0e 24 	call	0x481c	; 0x481c <__gesf2>
    3fbc:	18 16       	cp	r1, r24
    3fbe:	54 f4       	brge	.+20     	; 0x3fd4 <WorkerMotorPos+0x1ae>
    3fc0:	20 e0       	ldi	r18, 0x00	; 0
    3fc2:	30 e8       	ldi	r19, 0x80	; 128
    3fc4:	4b eb       	ldi	r20, 0xBB	; 187
    3fc6:	54 e4       	ldi	r21, 0x44	; 68
    3fc8:	c7 01       	movw	r24, r14
    3fca:	b6 01       	movw	r22, r12
    3fcc:	0e 94 43 22 	call	0x4486	; 0x4486 <__addsf3>
    3fd0:	6b 01       	movw	r12, r22
    3fd2:	7c 01       	movw	r14, r24
			if (Out1>4095) Out1=4095;
    3fd4:	20 e0       	ldi	r18, 0x00	; 0
    3fd6:	30 ef       	ldi	r19, 0xF0	; 240
    3fd8:	4f e7       	ldi	r20, 0x7F	; 127
    3fda:	55 e4       	ldi	r21, 0x45	; 69
    3fdc:	c7 01       	movw	r24, r14
    3fde:	b6 01       	movw	r22, r12
    3fe0:	0e 94 0e 24 	call	0x481c	; 0x481c <__gesf2>
    3fe4:	18 16       	cp	r1, r24
    3fe6:	0c f0       	brlt	.+2      	; 0x3fea <WorkerMotorPos+0x1c4>
    3fe8:	34 cf       	rjmp	.-408    	; 0x3e52 <WorkerMotorPos+0x2c>
    3fea:	c1 2c       	mov	r12, r1
    3fec:	90 ef       	ldi	r25, 0xF0	; 240
    3fee:	d9 2e       	mov	r13, r25
    3ff0:	9f e7       	ldi	r25, 0x7F	; 127
    3ff2:	e9 2e       	mov	r14, r25
    3ff4:	95 e4       	ldi	r25, 0x45	; 69
    3ff6:	f9 2e       	mov	r15, r25
    3ff8:	c7 01       	movw	r24, r14
    3ffa:	b6 01       	movw	r22, r12
    3ffc:	0e 94 26 23 	call	0x464c	; 0x464c <__fixsfsi>
    4000:	8b 01       	movw	r16, r22
    4002:	46 cf       	rjmp	.-372    	; 0x3e90 <WorkerMotorPos+0x6a>

			//PID 2
			Err2=Set2-EncoderInfo.Cnt2;
			Out2=Err2*MOTPOS_KP;
			if (Out2>0) Out2+=MOTPOS_FF_OFFSET;
			if (Out2>4095) Out2=4095;
    4004:	c1 2c       	mov	r12, r1
    4006:	80 ef       	ldi	r24, 0xF0	; 240
    4008:	d8 2e       	mov	r13, r24
    400a:	8f e7       	ldi	r24, 0x7F	; 127
    400c:	e8 2e       	mov	r14, r24
    400e:	85 e4       	ldi	r24, 0x45	; 69
    4010:	f8 2e       	mov	r15, r24
    4012:	c7 01       	movw	r24, r14
    4014:	b6 01       	movw	r22, r12
    4016:	0e 94 26 23 	call	0x464c	; 0x464c <__fixsfsi>
    401a:	89 cf       	rjmp	.-238    	; 0x3f2e <WorkerMotorPos+0x108>
			}
			
			//Process setpoint increment data
			if (xQueueReceive(IncSetQueue,&IncSet,0)==pdPASS)
			{
				Set1+=((float) IncSet.IncSet1)/100;
    401c:	69 81       	ldd	r22, Y+1	; 0x01
    401e:	7a 81       	ldd	r23, Y+2	; 0x02
    4020:	07 2e       	mov	r0, r23
    4022:	00 0c       	add	r0, r0
    4024:	88 0b       	sbc	r24, r24
    4026:	99 0b       	sbc	r25, r25
    4028:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__floatsisf>
    402c:	20 e0       	ldi	r18, 0x00	; 0
    402e:	30 e0       	ldi	r19, 0x00	; 0
    4030:	48 ec       	ldi	r20, 0xC8	; 200
    4032:	52 e4       	ldi	r21, 0x42	; 66
    4034:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    4038:	9b 01       	movw	r18, r22
    403a:	ac 01       	movw	r20, r24
    403c:	6d 81       	ldd	r22, Y+5	; 0x05
    403e:	7e 81       	ldd	r23, Y+6	; 0x06
    4040:	8f 81       	ldd	r24, Y+7	; 0x07
    4042:	98 85       	ldd	r25, Y+8	; 0x08
    4044:	0e 94 43 22 	call	0x4486	; 0x4486 <__addsf3>
    4048:	6d 83       	std	Y+5, r22	; 0x05
    404a:	7e 83       	std	Y+6, r23	; 0x06
    404c:	8f 83       	std	Y+7, r24	; 0x07
    404e:	98 87       	std	Y+8, r25	; 0x08
				Set2+=((float) IncSet.IncSet2)/100;
    4050:	6b 81       	ldd	r22, Y+3	; 0x03
    4052:	7c 81       	ldd	r23, Y+4	; 0x04
    4054:	07 2e       	mov	r0, r23
    4056:	00 0c       	add	r0, r0
    4058:	88 0b       	sbc	r24, r24
    405a:	99 0b       	sbc	r25, r25
    405c:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__floatsisf>
    4060:	20 e0       	ldi	r18, 0x00	; 0
    4062:	30 e0       	ldi	r19, 0x00	; 0
    4064:	48 ec       	ldi	r20, 0xC8	; 200
    4066:	52 e4       	ldi	r21, 0x42	; 66
    4068:	0e 94 b4 22 	call	0x4568	; 0x4568 <__divsf3>
    406c:	9b 01       	movw	r18, r22
    406e:	ac 01       	movw	r20, r24
    4070:	69 85       	ldd	r22, Y+9	; 0x09
    4072:	7a 85       	ldd	r23, Y+10	; 0x0a
    4074:	8b 85       	ldd	r24, Y+11	; 0x0b
    4076:	9c 85       	ldd	r25, Y+12	; 0x0c
    4078:	0e 94 43 22 	call	0x4486	; 0x4486 <__addsf3>
    407c:	69 87       	std	Y+9, r22	; 0x09
    407e:	7a 87       	std	Y+10, r23	; 0x0a
    4080:	8b 87       	std	Y+11, r24	; 0x0b
    4082:	9c 87       	std	Y+12, r25	; 0x0c
    4084:	82 cf       	rjmp	.-252    	; 0x3f8a <WorkerMotorPos+0x164>
			EncoderInfo=DriverMotorGetEncoder();

			//Process reset setpoint command
			if (xSemaphoreTake(ResetSetpointSema,0)==pdPASS)
			{
				Set1=EncoderInfo.Cnt1;
    4086:	c3 01       	movw	r24, r6
    4088:	b2 01       	movw	r22, r4
    408a:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__floatsisf>
    408e:	6d 83       	std	Y+5, r22	; 0x05
    4090:	7e 83       	std	Y+6, r23	; 0x06
    4092:	8f 83       	std	Y+7, r24	; 0x07
    4094:	98 87       	std	Y+8, r25	; 0x08
				Set2=EncoderInfo.Cnt2;
    4096:	47 01       	movw	r8, r14
    4098:	ff 0c       	add	r15, r15
    409a:	aa 08       	sbc	r10, r10
    409c:	bb 08       	sbc	r11, r11
    409e:	c5 01       	movw	r24, r10
    40a0:	b4 01       	movw	r22, r8
    40a2:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__floatsisf>
    40a6:	69 87       	std	Y+9, r22	; 0x09
    40a8:	7a 87       	std	Y+10, r23	; 0x0a
    40aa:	8b 87       	std	Y+11, r24	; 0x0b
    40ac:	9c 87       	std	Y+12, r25	; 0x0c
    40ae:	5f cf       	rjmp	.-322    	; 0x3f6e <WorkerMotorPos+0x148>

000040b0 <EnableMotorPosTask>:
	vSemaphoreCreateBinary(ResetSetpointSema);
}

void EnableMotorPosTask()
{
	DriverMotorResetEncoder();
    40b0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <DriverMotorResetEncoder>
	xSemaphoreGive(ResetSetpointSema);
    40b4:	20 e0       	ldi	r18, 0x00	; 0
    40b6:	40 e0       	ldi	r20, 0x00	; 0
    40b8:	50 e0       	ldi	r21, 0x00	; 0
    40ba:	60 e0       	ldi	r22, 0x00	; 0
    40bc:	70 e0       	ldi	r23, 0x00	; 0
    40be:	80 91 e1 21 	lds	r24, 0x21E1	; 0x8021e1 <ResetSetpointSema>
    40c2:	90 91 e2 21 	lds	r25, 0x21E2	; 0x8021e2 <ResetSetpointSema+0x1>
    40c6:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xQueueGenericSend>
	xLastWakeTime = xTaskGetTickCount();
    40ca:	0e 94 22 16 	call	0x2c44	; 0x2c44 <xTaskGetTickCount>
    40ce:	80 93 db 21 	sts	0x21DB, r24	; 0x8021db <xLastWakeTime>
    40d2:	90 93 dc 21 	sts	0x21DC, r25	; 0x8021dc <xLastWakeTime+0x1>
	vTaskResume(MotorPosTaskHandle);
    40d6:	80 91 dd 21 	lds	r24, 0x21DD	; 0x8021dd <MotorPosTaskHandle>
    40da:	90 91 de 21 	lds	r25, 0x21DE	; 0x8021de <MotorPosTaskHandle+0x1>
    40de:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <vTaskResume>

000040e2 <DisableMotorPosTask>:
}

void DisableMotorPosTask()
{
	vTaskSuspend(MotorPosTaskHandle);
    40e2:	80 91 dd 21 	lds	r24, 0x21DD	; 0x8021dd <MotorPosTaskHandle>
    40e6:	90 91 de 21 	lds	r25, 0x21DE	; 0x8021de <MotorPosTaskHandle+0x1>
    40ea:	0e 94 18 15 	call	0x2a30	; 0x2a30 <vTaskSuspend>
	DriverMotorSet(0,0);
    40ee:	60 e0       	ldi	r22, 0x00	; 0
    40f0:	70 e0       	ldi	r23, 0x00	; 0
    40f2:	80 e0       	ldi	r24, 0x00	; 0
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <DriverMotorSet>

000040fa <InitMotorPosTask>:
//Private function prototypes
void WorkerMotorPos(void *pvParameters);

//Function definitions
void InitMotorPosTask()
{
    40fa:	ef 92       	push	r14
    40fc:	ff 92       	push	r15
    40fe:	0f 93       	push	r16
	DriverMotorInit();
    4100:	0e 94 cd 03 	call	0x79a	; 0x79a <DriverMotorInit>
	xTaskCreate( WorkerMotorPos, "motpos", 256, NULL, tskIDLE_PRIORITY+3, &MotorPosTaskHandle );
    4104:	8d ed       	ldi	r24, 0xDD	; 221
    4106:	e8 2e       	mov	r14, r24
    4108:	81 e2       	ldi	r24, 0x21	; 33
    410a:	f8 2e       	mov	r15, r24
    410c:	03 e0       	ldi	r16, 0x03	; 3
    410e:	20 e0       	ldi	r18, 0x00	; 0
    4110:	30 e0       	ldi	r19, 0x00	; 0
    4112:	40 e0       	ldi	r20, 0x00	; 0
    4114:	51 e0       	ldi	r21, 0x01	; 1
    4116:	6e ed       	ldi	r22, 0xDE	; 222
    4118:	70 e2       	ldi	r23, 0x20	; 32
    411a:	83 e1       	ldi	r24, 0x13	; 19
    411c:	9f e1       	ldi	r25, 0x1F	; 31
    411e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <xTaskCreate>
	DisableMotorPosTask(); 	
    4122:	0e 94 71 20 	call	0x40e2	; 0x40e2 <DisableMotorPosTask>
	
	IncSetQueue=xQueueCreate(1,sizeof(IncSetStruct));
    4126:	40 e0       	ldi	r20, 0x00	; 0
    4128:	64 e0       	ldi	r22, 0x04	; 4
    412a:	81 e0       	ldi	r24, 0x01	; 1
    412c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueGenericCreate>
    4130:	80 93 df 21 	sts	0x21DF, r24	; 0x8021df <IncSetQueue>
    4134:	90 93 e0 21 	sts	0x21E0, r25	; 0x8021e0 <IncSetQueue+0x1>
	vSemaphoreCreateBinary(ResetSetpointSema);
    4138:	43 e0       	ldi	r20, 0x03	; 3
    413a:	60 e0       	ldi	r22, 0x00	; 0
    413c:	81 e0       	ldi	r24, 0x01	; 1
    413e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueGenericCreate>
    4142:	80 93 e1 21 	sts	0x21E1, r24	; 0x8021e1 <ResetSetpointSema>
    4146:	90 93 e2 21 	sts	0x21E2, r25	; 0x8021e2 <ResetSetpointSema+0x1>
    414a:	00 97       	sbiw	r24, 0x00	; 0
    414c:	51 f0       	breq	.+20     	; 0x4162 <InitMotorPosTask+0x68>
    414e:	20 e0       	ldi	r18, 0x00	; 0
    4150:	40 e0       	ldi	r20, 0x00	; 0
    4152:	50 e0       	ldi	r21, 0x00	; 0
    4154:	60 e0       	ldi	r22, 0x00	; 0
    4156:	70 e0       	ldi	r23, 0x00	; 0
}
    4158:	0f 91       	pop	r16
    415a:	ff 90       	pop	r15
    415c:	ef 90       	pop	r14
	DriverMotorInit();
	xTaskCreate( WorkerMotorPos, "motpos", 256, NULL, tskIDLE_PRIORITY+3, &MotorPosTaskHandle );
	DisableMotorPosTask(); 	
	
	IncSetQueue=xQueueCreate(1,sizeof(IncSetStruct));
	vSemaphoreCreateBinary(ResetSetpointSema);
    415e:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <xQueueGenericSend>
}
    4162:	0f 91       	pop	r16
    4164:	ff 90       	pop	r15
    4166:	ef 90       	pop	r14
    4168:	08 95       	ret

0000416a <MotorPosIncSet>:
	DriverMotorSet(0,0);
}


void MotorPosIncSet(int16_t IncSet1,int16_t IncSet2)
{
    416a:	cf 93       	push	r28
    416c:	df 93       	push	r29
    416e:	00 d0       	rcall	.+0      	; 0x4170 <MotorPosIncSet+0x6>
    4170:	1f 92       	push	r1
    4172:	cd b7       	in	r28, 0x3d	; 61
    4174:	de b7       	in	r29, 0x3e	; 62
	IncSetStruct IncSet;
	IncSet.IncSet1=IncSet1;
    4176:	89 83       	std	Y+1, r24	; 0x01
    4178:	9a 83       	std	Y+2, r25	; 0x02
	IncSet.IncSet2=IncSet2;
    417a:	6b 83       	std	Y+3, r22	; 0x03
    417c:	7c 83       	std	Y+4, r23	; 0x04
	xQueueSend(IncSetQueue,&IncSet,portMAX_DELAY);
    417e:	20 e0       	ldi	r18, 0x00	; 0
    4180:	4f ef       	ldi	r20, 0xFF	; 255
    4182:	5f ef       	ldi	r21, 0xFF	; 255
    4184:	be 01       	movw	r22, r28
    4186:	6f 5f       	subi	r22, 0xFF	; 255
    4188:	7f 4f       	sbci	r23, 0xFF	; 255
    418a:	80 91 df 21 	lds	r24, 0x21DF	; 0x8021df <IncSetQueue>
    418e:	90 91 e0 21 	lds	r25, 0x21E0	; 0x8021e0 <IncSetQueue+0x1>
    4192:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xQueueGenericSend>
}
    4196:	24 96       	adiw	r28, 0x04	; 4
    4198:	cd bf       	out	0x3d, r28	; 61
    419a:	de bf       	out	0x3e, r29	; 62
    419c:	df 91       	pop	r29
    419e:	cf 91       	pop	r28
    41a0:	08 95       	ret

000041a2 <WorkerMotorSpeed>:
	xQueueOverwrite(MotorSpeedQueue,&MotorSpeed);
	
}

void WorkerMotorSpeed(void *pvParameters)
{
    41a2:	cf 93       	push	r28
    41a4:	df 93       	push	r29
    41a6:	00 d0       	rcall	.+0      	; 0x41a8 <WorkerMotorSpeed+0x6>
    41a8:	1f 92       	push	r1
    41aa:	cd b7       	in	r28, 0x3d	; 61
    41ac:	de b7       	in	r29, 0x3e	; 62
	const TickType_t xPeriod = 10;
	MotorSpeedStruct MotorSpeed;

	xLastWakeTime = xTaskGetTickCount();
    41ae:	0e 94 22 16 	call	0x2c44	; 0x2c44 <xTaskGetTickCount>
    41b2:	80 93 e3 21 	sts	0x21E3, r24	; 0x8021e3 <xLastWakeTime>
    41b6:	90 93 e4 21 	sts	0x21E4, r25	; 0x8021e4 <xLastWakeTime+0x1>
	
	while (1)
	{
			xQueuePeek(MotorSpeedQueue,&MotorSpeed,portMAX_DELAY);
    41ba:	4f ef       	ldi	r20, 0xFF	; 255
    41bc:	5f ef       	ldi	r21, 0xFF	; 255
    41be:	be 01       	movw	r22, r28
    41c0:	6f 5f       	subi	r22, 0xFF	; 255
    41c2:	7f 4f       	sbci	r23, 0xFF	; 255
    41c4:	80 91 e7 21 	lds	r24, 0x21E7	; 0x8021e7 <MotorSpeedQueue>
    41c8:	90 91 e8 21 	lds	r25, 0x21E8	; 0x8021e8 <MotorSpeedQueue+0x1>
    41cc:	0e 94 49 11 	call	0x2292	; 0x2292 <xQueuePeek>
			MotorPosIncSet(MotorSpeed.Speed1,MotorSpeed.Speed2);
    41d0:	6b 81       	ldd	r22, Y+3	; 0x03
    41d2:	7c 81       	ldd	r23, Y+4	; 0x04
    41d4:	89 81       	ldd	r24, Y+1	; 0x01
    41d6:	9a 81       	ldd	r25, Y+2	; 0x02
    41d8:	0e 94 b5 20 	call	0x416a	; 0x416a <MotorPosIncSet>
			
			vTaskDelayUntil( &xLastWakeTime, xPeriod );
    41dc:	6a e0       	ldi	r22, 0x0A	; 10
    41de:	70 e0       	ldi	r23, 0x00	; 0
    41e0:	83 ee       	ldi	r24, 0xE3	; 227
    41e2:	91 e2       	ldi	r25, 0x21	; 33
    41e4:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <vTaskDelayUntil>
    41e8:	e8 cf       	rjmp	.-48     	; 0x41ba <WorkerMotorSpeed+0x18>

000041ea <InitMotorSpeedTask>:
//Private function prototypes
void WorkerMotorSpeed(void *pvParameters);

//Function definitions
void InitMotorSpeedTask()
{
    41ea:	ef 92       	push	r14
    41ec:	ff 92       	push	r15
    41ee:	0f 93       	push	r16
	xTaskCreate( WorkerMotorSpeed, "motspd", 256, NULL, tskIDLE_PRIORITY+3, &MotorSpeedTaskHandle );	
    41f0:	85 ee       	ldi	r24, 0xE5	; 229
    41f2:	e8 2e       	mov	r14, r24
    41f4:	81 e2       	ldi	r24, 0x21	; 33
    41f6:	f8 2e       	mov	r15, r24
    41f8:	03 e0       	ldi	r16, 0x03	; 3
    41fa:	20 e0       	ldi	r18, 0x00	; 0
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	40 e0       	ldi	r20, 0x00	; 0
    4200:	51 e0       	ldi	r21, 0x01	; 1
    4202:	65 ee       	ldi	r22, 0xE5	; 229
    4204:	70 e2       	ldi	r23, 0x20	; 32
    4206:	81 ed       	ldi	r24, 0xD1	; 209
    4208:	90 e2       	ldi	r25, 0x20	; 32
    420a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <xTaskCreate>
	vTaskResume(MotorSpeedTaskHandle);
}

void DisableMotorSpeedTask()
{
	vTaskSuspend(MotorSpeedTaskHandle);
    420e:	80 91 e5 21 	lds	r24, 0x21E5	; 0x8021e5 <MotorSpeedTaskHandle>
    4212:	90 91 e6 21 	lds	r25, 0x21E6	; 0x8021e6 <MotorSpeedTaskHandle+0x1>
    4216:	0e 94 18 15 	call	0x2a30	; 0x2a30 <vTaskSuspend>
void InitMotorSpeedTask()
{
	xTaskCreate( WorkerMotorSpeed, "motspd", 256, NULL, tskIDLE_PRIORITY+3, &MotorSpeedTaskHandle );	
	DisableMotorSpeedTask();
	
	MotorSpeedQueue=xQueueCreate(1,sizeof(MotorSpeedStruct));
    421a:	40 e0       	ldi	r20, 0x00	; 0
    421c:	64 e0       	ldi	r22, 0x04	; 4
    421e:	81 e0       	ldi	r24, 0x01	; 1
    4220:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <xQueueGenericCreate>
    4224:	80 93 e7 21 	sts	0x21E7, r24	; 0x8021e7 <MotorSpeedQueue>
    4228:	90 93 e8 21 	sts	0x21E8, r25	; 0x8021e8 <MotorSpeedQueue+0x1>
}

void MotorSpeedSet(int16_t Speed1,int16_t Speed2)
{
	
	MotorSpeed.Speed1=Speed1;
    422c:	e9 ee       	ldi	r30, 0xE9	; 233
    422e:	f1 e2       	ldi	r31, 0x21	; 33
    4230:	10 82       	st	Z, r1
    4232:	11 82       	std	Z+1, r1	; 0x01
	MotorSpeed.Speed2=Speed2;
    4234:	12 82       	std	Z+2, r1	; 0x02
    4236:	13 82       	std	Z+3, r1	; 0x03
	xQueueOverwrite(MotorSpeedQueue,&MotorSpeed);
    4238:	22 e0       	ldi	r18, 0x02	; 2
    423a:	40 e0       	ldi	r20, 0x00	; 0
    423c:	50 e0       	ldi	r21, 0x00	; 0
    423e:	bf 01       	movw	r22, r30
	xTaskCreate( WorkerMotorSpeed, "motspd", 256, NULL, tskIDLE_PRIORITY+3, &MotorSpeedTaskHandle );	
	DisableMotorSpeedTask();
	
	MotorSpeedQueue=xQueueCreate(1,sizeof(MotorSpeedStruct));
	MotorSpeedSet(0,0);
}
    4240:	0f 91       	pop	r16
    4242:	ff 90       	pop	r15
    4244:	ef 90       	pop	r14
void MotorSpeedSet(int16_t Speed1,int16_t Speed2)
{
	
	MotorSpeed.Speed1=Speed1;
	MotorSpeed.Speed2=Speed2;
	xQueueOverwrite(MotorSpeedQueue,&MotorSpeed);
    4246:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <xQueueGenericSend>

0000424a <EnableMotorSpeedTask>:
	MotorSpeedSet(0,0);
}

void EnableMotorSpeedTask()
{
	xLastWakeTime = xTaskGetTickCount();
    424a:	0e 94 22 16 	call	0x2c44	; 0x2c44 <xTaskGetTickCount>
    424e:	80 93 e3 21 	sts	0x21E3, r24	; 0x8021e3 <xLastWakeTime>
    4252:	90 93 e4 21 	sts	0x21E4, r25	; 0x8021e4 <xLastWakeTime+0x1>
	vTaskResume(MotorSpeedTaskHandle);
    4256:	80 91 e5 21 	lds	r24, 0x21E5	; 0x8021e5 <MotorSpeedTaskHandle>
    425a:	90 91 e6 21 	lds	r25, 0x21E6	; 0x8021e6 <MotorSpeedTaskHandle+0x1>
    425e:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <vTaskResume>

00004262 <DisableMotorSpeedTask>:
}

void DisableMotorSpeedTask()
{
	vTaskSuspend(MotorSpeedTaskHandle);
    4262:	80 91 e5 21 	lds	r24, 0x21E5	; 0x8021e5 <MotorSpeedTaskHandle>
    4266:	90 91 e6 21 	lds	r25, 0x21E6	; 0x8021e6 <MotorSpeedTaskHandle+0x1>
    426a:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <vTaskSuspend>

0000426e <MotorSpeedSet>:
}

void MotorSpeedSet(int16_t Speed1,int16_t Speed2)
{
	
	MotorSpeed.Speed1=Speed1;
    426e:	e9 ee       	ldi	r30, 0xE9	; 233
    4270:	f1 e2       	ldi	r31, 0x21	; 33
    4272:	80 83       	st	Z, r24
    4274:	91 83       	std	Z+1, r25	; 0x01
	MotorSpeed.Speed2=Speed2;
    4276:	62 83       	std	Z+2, r22	; 0x02
    4278:	73 83       	std	Z+3, r23	; 0x03
	xQueueOverwrite(MotorSpeedQueue,&MotorSpeed);
    427a:	22 e0       	ldi	r18, 0x02	; 2
    427c:	40 e0       	ldi	r20, 0x00	; 0
    427e:	50 e0       	ldi	r21, 0x00	; 0
    4280:	bf 01       	movw	r22, r30
    4282:	80 91 e7 21 	lds	r24, 0x21E7	; 0x8021e7 <MotorSpeedQueue>
    4286:	90 91 e8 21 	lds	r25, 0x21E8	; 0x8021e8 <MotorSpeedQueue+0x1>
    428a:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <xQueueGenericSend>

0000428e <workerSleepTask>:
	
	xTaskCreate( workerSleepTask , "slp", 256, NULL, tskIDLE_PRIORITY, NULL );
}

void ClearSleepFlag() {
	sleep = false;
    428e:	0f e3       	ldi	r16, 0x3F	; 63
    4290:	cc ee       	ldi	r28, 0xEC	; 236
    4292:	d0 e2       	ldi	r29, 0x20	; 32
    4294:	11 e0       	ldi	r17, 0x01	; 1
    4296:	80 ed       	ldi	r24, 0xD0	; 208
    4298:	97 e0       	ldi	r25, 0x07	; 7
    429a:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <vTaskDelay>
    429e:	00 93 a2 06 	sts	0x06A2, r16	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7006a2>
    42a2:	88 e0       	ldi	r24, 0x08	; 8
    42a4:	0e 94 ab 03 	call	0x756	; 0x756 <DriverLedSet>
    42a8:	0e 94 69 04 	call	0x8d2	; 0x8d2 <DriverMotorGetEncoder>
    42ac:	9f 93       	push	r25
    42ae:	8f 93       	push	r24
    42b0:	7f 93       	push	r23
    42b2:	6f 93       	push	r22
    42b4:	df 93       	push	r29
    42b6:	cf 93       	push	r28
    42b8:	0e 94 b2 2a 	call	0x5564	; 0x5564 <printf>
    42bc:	89 e1       	ldi	r24, 0x19	; 25
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <vTaskDelay>
    42c4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <DriverMotorResetEncoder>
    42c8:	88 e0       	ldi	r24, 0x08	; 8
    42ca:	0e 94 bb 03 	call	0x776	; 0x776 <DriverLedClear>
    42ce:	80 e0       	ldi	r24, 0x00	; 0
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	0e 94 be 06 	call	0xd7c	; 0xd7c <DriverPowerVccAuxSet>
    42d6:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    42da:	8c 7f       	andi	r24, 0xFC	; 252
    42dc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    42e0:	10 93 03 22 	sts	0x2203, r17	; 0x802203 <sleep>
    42e4:	8a e0       	ldi	r24, 0x0A	; 10
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <vTaskDelay>
    42ec:	80 91 48 00 	lds	r24, 0x0048	; 0x800048 <__TEXT_REGION_LENGTH__+0x700048>
    42f0:	81 60       	ori	r24, 0x01	; 1
    42f2:	80 93 48 00 	sts	0x0048, r24	; 0x800048 <__TEXT_REGION_LENGTH__+0x700048>
    42f6:	88 95       	sleep
    42f8:	80 91 48 00 	lds	r24, 0x0048	; 0x800048 <__TEXT_REGION_LENGTH__+0x700048>
    42fc:	8e 7f       	andi	r24, 0xFE	; 254
    42fe:	80 93 48 00 	sts	0x0048, r24	; 0x800048 <__TEXT_REGION_LENGTH__+0x700048>
    4302:	10 92 03 22 	sts	0x2203, r1	; 0x802203 <sleep>
    4306:	0f 90       	pop	r0
    4308:	0f 90       	pop	r0
    430a:	0f 90       	pop	r0
    430c:	0f 90       	pop	r0
    430e:	0f 90       	pop	r0
    4310:	0f 90       	pop	r0
    4312:	c1 cf       	rjmp	.-126    	; 0x4296 <workerSleepTask+0x8>

00004314 <InitSleepTask>:
    4314:	ef 92       	push	r14
    4316:	ff 92       	push	r15
    4318:	0f 93       	push	r16
    431a:	e0 ea       	ldi	r30, 0xA0	; 160
    431c:	f0 e0       	ldi	r31, 0x00	; 0
    431e:	82 81       	ldd	r24, Z+2	; 0x02
    4320:	87 68       	ori	r24, 0x87	; 135
    4322:	82 83       	std	Z+2, r24	; 0x02
    4324:	78 94       	sei
    4326:	e8 e4       	ldi	r30, 0x48	; 72
    4328:	f0 e0       	ldi	r31, 0x00	; 0
    432a:	80 81       	ld	r24, Z
    432c:	81 7f       	andi	r24, 0xF1	; 241
    432e:	84 60       	ori	r24, 0x04	; 4
    4330:	80 83       	st	Z, r24
    4332:	e0 ea       	ldi	r30, 0xA0	; 160
    4334:	f6 e0       	ldi	r31, 0x06	; 6
    4336:	80 e8       	ldi	r24, 0x80	; 128
    4338:	82 83       	std	Z+2, r24	; 0x02
    433a:	82 87       	std	Z+10, r24	; 0x0a
    433c:	89 e5       	ldi	r24, 0x59	; 89
    433e:	87 8b       	std	Z+23, r24	; 0x17
    4340:	83 e0       	ldi	r24, 0x03	; 3
    4342:	81 87       	std	Z+9, r24	; 0x09
    4344:	e1 2c       	mov	r14, r1
    4346:	f1 2c       	mov	r15, r1
    4348:	00 e0       	ldi	r16, 0x00	; 0
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	30 e0       	ldi	r19, 0x00	; 0
    434e:	40 e0       	ldi	r20, 0x00	; 0
    4350:	51 e0       	ldi	r21, 0x01	; 1
    4352:	6d ef       	ldi	r22, 0xFD	; 253
    4354:	70 e2       	ldi	r23, 0x20	; 32
    4356:	87 e4       	ldi	r24, 0x47	; 71
    4358:	91 e2       	ldi	r25, 0x21	; 33
    435a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <xTaskCreate>
    435e:	0f 91       	pop	r16
    4360:	ff 90       	pop	r15
    4362:	ef 90       	pop	r14
    4364:	08 95       	ret

00004366 <GetSleepFlag>:
}

bool GetSleepFlag() {
	return sleep;
    4366:	80 91 03 22 	lds	r24, 0x2203	; 0x802203 <sleep>
}
    436a:	08 95       	ret

0000436c <__vector_104>:
	}
}


ISR (PORTF_INT0_vect)
{
    436c:	1f 92       	push	r1
    436e:	0f 92       	push	r0
    4370:	0f b6       	in	r0, 0x3f	; 63
    4372:	0f 92       	push	r0
    4374:	11 24       	eor	r1, r1
    4376:	0b b6       	in	r0, 0x3b	; 59
    4378:	0f 92       	push	r0
    437a:	2f 93       	push	r18
    437c:	3f 93       	push	r19
    437e:	4f 93       	push	r20
    4380:	5f 93       	push	r21
    4382:	6f 93       	push	r22
    4384:	7f 93       	push	r23
    4386:	8f 93       	push	r24
    4388:	9f 93       	push	r25
    438a:	af 93       	push	r26
    438c:	bf 93       	push	r27
    438e:	ef 93       	push	r30
    4390:	ff 93       	push	r31
void ClearSleepFlag() {
	sleep = false;
}

bool GetSleepFlag() {
	return sleep;
    4392:	80 91 03 22 	lds	r24, 0x2203	; 0x802203 <sleep>
}


ISR (PORTF_INT0_vect)
{
	if (GetSleepFlag()) {
    4396:	88 23       	and	r24, r24
    4398:	61 f0       	breq	.+24     	; 0x43b2 <__vector_104+0x46>
		PMIC.CTRL |= 0b00000111;
    439a:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    439e:	87 60       	ori	r24, 0x07	; 7
    43a0:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		PORTF.DIRSET = 0b00111111;
    43a4:	8f e3       	ldi	r24, 0x3F	; 63
    43a6:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
		DriverPowerVccAuxSet(1);
    43aa:	81 e0       	ldi	r24, 0x01	; 1
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	0e 94 be 06 	call	0xd7c	; 0xd7c <DriverPowerVccAuxSet>
	}
	//ClearSleepFlag();
}
    43b2:	ff 91       	pop	r31
    43b4:	ef 91       	pop	r30
    43b6:	bf 91       	pop	r27
    43b8:	af 91       	pop	r26
    43ba:	9f 91       	pop	r25
    43bc:	8f 91       	pop	r24
    43be:	7f 91       	pop	r23
    43c0:	6f 91       	pop	r22
    43c2:	5f 91       	pop	r21
    43c4:	4f 91       	pop	r20
    43c6:	3f 91       	pop	r19
    43c8:	2f 91       	pop	r18
    43ca:	0f 90       	pop	r0
    43cc:	0b be       	out	0x3b, r0	; 59
    43ce:	0f 90       	pop	r0
    43d0:	0f be       	out	0x3f, r0	; 63
    43d2:	0f 90       	pop	r0
    43d4:	1f 90       	pop	r1
    43d6:	18 95       	reti

000043d8 <WorkerStartup>:
{
	xTaskCreate( WorkerStartup, "startup", 256, NULL, tskIDLE_PRIORITY+3, NULL );	
}

static void WorkerStartup(void *pvParameters)
{
    43d8:	cf 93       	push	r28
    43da:	df 93       	push	r29
    43dc:	cd b7       	in	r28, 0x3d	; 61
    43de:	de b7       	in	r29, 0x3e	; 62
    43e0:	28 97       	sbiw	r28, 0x08	; 8
    43e2:	cd bf       	out	0x3d, r28	; 61
    43e4:	de bf       	out	0x3e, r29	; 62
	int res;
	
	DriverPowerVccAuxSet(1);//Enable Auxillary power line
    43e6:	81 e0       	ldi	r24, 0x01	; 1
    43e8:	0e 94 be 06 	call	0xd7c	; 0xd7c <DriverPowerVccAuxSet>
	vTaskDelay(1);
    43ec:	81 e0       	ldi	r24, 0x01	; 1
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <vTaskDelay>
	DriverCursorstickInit();//Initialize cursor stick
    43f4:	0e 94 ae 02 	call	0x55c	; 0x55c <DriverCursorstickInit>
	DriverLedInit();		//Initialize LED's
    43f8:	0e 94 9d 03 	call	0x73a	; 0x73a <DriverLedInit>
	DriverUSARTInit();		//USART init and link to stdio
    43fc:	0e 94 9d 08 	call	0x113a	; 0x113a <DriverUSARTInit>
	DriverPowerInit();		//Initialize aux power driver
    4400:	0e 94 ba 06 	call	0xd74	; 0xd74 <DriverPowerInit>
	
	DriverTWIMInit();		//Initialize TWI in master mode
    4404:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <DriverTWIMInit>
	DriverPL9823Init();		//Initialize PL9823 LEDs
    4408:	0e 94 b4 06 	call	0xd68	; 0xd68 <DriverPL9823Init>
	DriverAdcInit();		//Initialize ADC driver
    440c:	0e 94 b8 01 	call	0x370	; 0x370 <DriverAdcInit>
	//DriverMotorInit();
	
	//DriverOLEDInit(2);		//Initialize OLED display
	DriverAdps9960Init();	//Initialize color sensor	
    4410:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DriverAdps9960Init>
	//DriverVL53L0XInit();	//Initialize rangefinder

	
	vTaskDelay(50);
    4414:	82 e3       	ldi	r24, 0x32	; 50
    4416:	90 e0       	ldi	r25, 0x00	; 0
    4418:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <vTaskDelay>
	
	//Enable test output (T21)
	PORTA.DIRSET=1<<5;	
    441c:	80 e2       	ldi	r24, 0x20	; 32
    441e:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	//Initialize application tasks			
	
	//InitOLEDMenuTask();
	InitADCTask();
    4422:	0e 94 0f 1b 	call	0x361e	; 0x361e <InitADCTask>
	InitMotorPosTask();
    4426:	0e 94 7d 20 	call	0x40fa	; 0x40fa <InitMotorPosTask>
	InitMotorSpeedTask();
    442a:	0e 94 f5 20 	call	0x41ea	; 0x41ea <InitMotorSpeedTask>
	InitLineFollowerSpeedTask();
    442e:	0e 94 5f 1c 	call	0x38be	; 0x38be <InitLineFollowerSpeedTask>
	InitLineFollowerDirectTask();
    4432:	0e 94 b7 1b 	call	0x376e	; 0x376e <InitLineFollowerDirectTask>
	//InitRGBTask();
	//InitGyroTask();
	//InitTerminalTask();
	InitMotionTask();
    4436:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <InitMotionTask>
	InitSleepTask();
    443a:	0e 94 8a 21 	call	0x4314	; 0x4314 <InitSleepTask>
	
	float Pars[MAX_PARS];
	DriveSegment(Pars[0]);
    443e:	69 81       	ldd	r22, Y+1	; 0x01
    4440:	7a 81       	ldd	r23, Y+2	; 0x02
    4442:	8b 81       	ldd	r24, Y+3	; 0x03
    4444:	9c 81       	ldd	r25, Y+4	; 0x04
    4446:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <DriveSegment>
	
	vTaskSuspend(NULL);
    444a:	80 e0       	ldi	r24, 0x00	; 0
    444c:	90 e0       	ldi	r25, 0x00	; 0

}
    444e:	28 96       	adiw	r28, 0x08	; 8
    4450:	cd bf       	out	0x3d, r28	; 61
    4452:	de bf       	out	0x3e, r29	; 62
    4454:	df 91       	pop	r29
    4456:	cf 91       	pop	r28
	InitSleepTask();
	
	float Pars[MAX_PARS];
	DriveSegment(Pars[0]);
	
	vTaskSuspend(NULL);
    4458:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <vTaskSuspend>

0000445c <InitStartupTask>:
//Private function prototypes
static void WorkerStartup(void *pvParameters);

//Function definitions
void InitStartupTask()
{
    445c:	ef 92       	push	r14
    445e:	ff 92       	push	r15
    4460:	0f 93       	push	r16
	xTaskCreate( WorkerStartup, "startup", 256, NULL, tskIDLE_PRIORITY+3, NULL );	
    4462:	e1 2c       	mov	r14, r1
    4464:	f1 2c       	mov	r15, r1
    4466:	03 e0       	ldi	r16, 0x03	; 3
    4468:	20 e0       	ldi	r18, 0x00	; 0
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	40 e0       	ldi	r20, 0x00	; 0
    446e:	51 e0       	ldi	r21, 0x01	; 1
    4470:	61 e0       	ldi	r22, 0x01	; 1
    4472:	71 e2       	ldi	r23, 0x21	; 33
    4474:	8c ee       	ldi	r24, 0xEC	; 236
    4476:	91 e2       	ldi	r25, 0x21	; 33
    4478:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <xTaskCreate>
}
    447c:	0f 91       	pop	r16
    447e:	ff 90       	pop	r15
    4480:	ef 90       	pop	r14
    4482:	08 95       	ret

00004484 <__subsf3>:
    4484:	50 58       	subi	r21, 0x80	; 128

00004486 <__addsf3>:
    4486:	bb 27       	eor	r27, r27
    4488:	aa 27       	eor	r26, r26
    448a:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <__addsf3x>
    448e:	0c 94 d4 23 	jmp	0x47a8	; 0x47a8 <__fp_round>
    4492:	0e 94 c6 23 	call	0x478c	; 0x478c <__fp_pscA>
    4496:	38 f0       	brcs	.+14     	; 0x44a6 <__addsf3+0x20>
    4498:	0e 94 cd 23 	call	0x479a	; 0x479a <__fp_pscB>
    449c:	20 f0       	brcs	.+8      	; 0x44a6 <__addsf3+0x20>
    449e:	39 f4       	brne	.+14     	; 0x44ae <__addsf3+0x28>
    44a0:	9f 3f       	cpi	r25, 0xFF	; 255
    44a2:	19 f4       	brne	.+6      	; 0x44aa <__addsf3+0x24>
    44a4:	26 f4       	brtc	.+8      	; 0x44ae <__addsf3+0x28>
    44a6:	0c 94 c3 23 	jmp	0x4786	; 0x4786 <__fp_nan>
    44aa:	0e f4       	brtc	.+2      	; 0x44ae <__addsf3+0x28>
    44ac:	e0 95       	com	r30
    44ae:	e7 fb       	bst	r30, 7
    44b0:	0c 94 bd 23 	jmp	0x477a	; 0x477a <__fp_inf>

000044b4 <__addsf3x>:
    44b4:	e9 2f       	mov	r30, r25
    44b6:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__fp_split3>
    44ba:	58 f3       	brcs	.-42     	; 0x4492 <__addsf3+0xc>
    44bc:	ba 17       	cp	r27, r26
    44be:	62 07       	cpc	r22, r18
    44c0:	73 07       	cpc	r23, r19
    44c2:	84 07       	cpc	r24, r20
    44c4:	95 07       	cpc	r25, r21
    44c6:	20 f0       	brcs	.+8      	; 0x44d0 <__addsf3x+0x1c>
    44c8:	79 f4       	brne	.+30     	; 0x44e8 <__addsf3x+0x34>
    44ca:	a6 f5       	brtc	.+104    	; 0x4534 <__addsf3x+0x80>
    44cc:	0c 94 07 24 	jmp	0x480e	; 0x480e <__fp_zero>
    44d0:	0e f4       	brtc	.+2      	; 0x44d4 <__addsf3x+0x20>
    44d2:	e0 95       	com	r30
    44d4:	0b 2e       	mov	r0, r27
    44d6:	ba 2f       	mov	r27, r26
    44d8:	a0 2d       	mov	r26, r0
    44da:	0b 01       	movw	r0, r22
    44dc:	b9 01       	movw	r22, r18
    44de:	90 01       	movw	r18, r0
    44e0:	0c 01       	movw	r0, r24
    44e2:	ca 01       	movw	r24, r20
    44e4:	a0 01       	movw	r20, r0
    44e6:	11 24       	eor	r1, r1
    44e8:	ff 27       	eor	r31, r31
    44ea:	59 1b       	sub	r21, r25
    44ec:	99 f0       	breq	.+38     	; 0x4514 <__addsf3x+0x60>
    44ee:	59 3f       	cpi	r21, 0xF9	; 249
    44f0:	50 f4       	brcc	.+20     	; 0x4506 <__addsf3x+0x52>
    44f2:	50 3e       	cpi	r21, 0xE0	; 224
    44f4:	68 f1       	brcs	.+90     	; 0x4550 <__addsf3x+0x9c>
    44f6:	1a 16       	cp	r1, r26
    44f8:	f0 40       	sbci	r31, 0x00	; 0
    44fa:	a2 2f       	mov	r26, r18
    44fc:	23 2f       	mov	r18, r19
    44fe:	34 2f       	mov	r19, r20
    4500:	44 27       	eor	r20, r20
    4502:	58 5f       	subi	r21, 0xF8	; 248
    4504:	f3 cf       	rjmp	.-26     	; 0x44ec <__addsf3x+0x38>
    4506:	46 95       	lsr	r20
    4508:	37 95       	ror	r19
    450a:	27 95       	ror	r18
    450c:	a7 95       	ror	r26
    450e:	f0 40       	sbci	r31, 0x00	; 0
    4510:	53 95       	inc	r21
    4512:	c9 f7       	brne	.-14     	; 0x4506 <__addsf3x+0x52>
    4514:	7e f4       	brtc	.+30     	; 0x4534 <__addsf3x+0x80>
    4516:	1f 16       	cp	r1, r31
    4518:	ba 0b       	sbc	r27, r26
    451a:	62 0b       	sbc	r22, r18
    451c:	73 0b       	sbc	r23, r19
    451e:	84 0b       	sbc	r24, r20
    4520:	ba f0       	brmi	.+46     	; 0x4550 <__addsf3x+0x9c>
    4522:	91 50       	subi	r25, 0x01	; 1
    4524:	a1 f0       	breq	.+40     	; 0x454e <__addsf3x+0x9a>
    4526:	ff 0f       	add	r31, r31
    4528:	bb 1f       	adc	r27, r27
    452a:	66 1f       	adc	r22, r22
    452c:	77 1f       	adc	r23, r23
    452e:	88 1f       	adc	r24, r24
    4530:	c2 f7       	brpl	.-16     	; 0x4522 <__addsf3x+0x6e>
    4532:	0e c0       	rjmp	.+28     	; 0x4550 <__addsf3x+0x9c>
    4534:	ba 0f       	add	r27, r26
    4536:	62 1f       	adc	r22, r18
    4538:	73 1f       	adc	r23, r19
    453a:	84 1f       	adc	r24, r20
    453c:	48 f4       	brcc	.+18     	; 0x4550 <__addsf3x+0x9c>
    453e:	87 95       	ror	r24
    4540:	77 95       	ror	r23
    4542:	67 95       	ror	r22
    4544:	b7 95       	ror	r27
    4546:	f7 95       	ror	r31
    4548:	9e 3f       	cpi	r25, 0xFE	; 254
    454a:	08 f0       	brcs	.+2      	; 0x454e <__addsf3x+0x9a>
    454c:	b0 cf       	rjmp	.-160    	; 0x44ae <__addsf3+0x28>
    454e:	93 95       	inc	r25
    4550:	88 0f       	add	r24, r24
    4552:	08 f0       	brcs	.+2      	; 0x4556 <__addsf3x+0xa2>
    4554:	99 27       	eor	r25, r25
    4556:	ee 0f       	add	r30, r30
    4558:	97 95       	ror	r25
    455a:	87 95       	ror	r24
    455c:	08 95       	ret

0000455e <__cmpsf2>:
    455e:	0e 94 99 23 	call	0x4732	; 0x4732 <__fp_cmp>
    4562:	08 f4       	brcc	.+2      	; 0x4566 <__cmpsf2+0x8>
    4564:	81 e0       	ldi	r24, 0x01	; 1
    4566:	08 95       	ret

00004568 <__divsf3>:
    4568:	0e 94 c8 22 	call	0x4590	; 0x4590 <__divsf3x>
    456c:	0c 94 d4 23 	jmp	0x47a8	; 0x47a8 <__fp_round>
    4570:	0e 94 cd 23 	call	0x479a	; 0x479a <__fp_pscB>
    4574:	58 f0       	brcs	.+22     	; 0x458c <__divsf3+0x24>
    4576:	0e 94 c6 23 	call	0x478c	; 0x478c <__fp_pscA>
    457a:	40 f0       	brcs	.+16     	; 0x458c <__divsf3+0x24>
    457c:	29 f4       	brne	.+10     	; 0x4588 <__divsf3+0x20>
    457e:	5f 3f       	cpi	r21, 0xFF	; 255
    4580:	29 f0       	breq	.+10     	; 0x458c <__divsf3+0x24>
    4582:	0c 94 bd 23 	jmp	0x477a	; 0x477a <__fp_inf>
    4586:	51 11       	cpse	r21, r1
    4588:	0c 94 08 24 	jmp	0x4810	; 0x4810 <__fp_szero>
    458c:	0c 94 c3 23 	jmp	0x4786	; 0x4786 <__fp_nan>

00004590 <__divsf3x>:
    4590:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__fp_split3>
    4594:	68 f3       	brcs	.-38     	; 0x4570 <__divsf3+0x8>

00004596 <__divsf3_pse>:
    4596:	99 23       	and	r25, r25
    4598:	b1 f3       	breq	.-20     	; 0x4586 <__divsf3+0x1e>
    459a:	55 23       	and	r21, r21
    459c:	91 f3       	breq	.-28     	; 0x4582 <__divsf3+0x1a>
    459e:	95 1b       	sub	r25, r21
    45a0:	55 0b       	sbc	r21, r21
    45a2:	bb 27       	eor	r27, r27
    45a4:	aa 27       	eor	r26, r26
    45a6:	62 17       	cp	r22, r18
    45a8:	73 07       	cpc	r23, r19
    45aa:	84 07       	cpc	r24, r20
    45ac:	38 f0       	brcs	.+14     	; 0x45bc <__divsf3_pse+0x26>
    45ae:	9f 5f       	subi	r25, 0xFF	; 255
    45b0:	5f 4f       	sbci	r21, 0xFF	; 255
    45b2:	22 0f       	add	r18, r18
    45b4:	33 1f       	adc	r19, r19
    45b6:	44 1f       	adc	r20, r20
    45b8:	aa 1f       	adc	r26, r26
    45ba:	a9 f3       	breq	.-22     	; 0x45a6 <__divsf3_pse+0x10>
    45bc:	35 d0       	rcall	.+106    	; 0x4628 <__divsf3_pse+0x92>
    45be:	0e 2e       	mov	r0, r30
    45c0:	3a f0       	brmi	.+14     	; 0x45d0 <__divsf3_pse+0x3a>
    45c2:	e0 e8       	ldi	r30, 0x80	; 128
    45c4:	32 d0       	rcall	.+100    	; 0x462a <__divsf3_pse+0x94>
    45c6:	91 50       	subi	r25, 0x01	; 1
    45c8:	50 40       	sbci	r21, 0x00	; 0
    45ca:	e6 95       	lsr	r30
    45cc:	00 1c       	adc	r0, r0
    45ce:	ca f7       	brpl	.-14     	; 0x45c2 <__divsf3_pse+0x2c>
    45d0:	2b d0       	rcall	.+86     	; 0x4628 <__divsf3_pse+0x92>
    45d2:	fe 2f       	mov	r31, r30
    45d4:	29 d0       	rcall	.+82     	; 0x4628 <__divsf3_pse+0x92>
    45d6:	66 0f       	add	r22, r22
    45d8:	77 1f       	adc	r23, r23
    45da:	88 1f       	adc	r24, r24
    45dc:	bb 1f       	adc	r27, r27
    45de:	26 17       	cp	r18, r22
    45e0:	37 07       	cpc	r19, r23
    45e2:	48 07       	cpc	r20, r24
    45e4:	ab 07       	cpc	r26, r27
    45e6:	b0 e8       	ldi	r27, 0x80	; 128
    45e8:	09 f0       	breq	.+2      	; 0x45ec <__divsf3_pse+0x56>
    45ea:	bb 0b       	sbc	r27, r27
    45ec:	80 2d       	mov	r24, r0
    45ee:	bf 01       	movw	r22, r30
    45f0:	ff 27       	eor	r31, r31
    45f2:	93 58       	subi	r25, 0x83	; 131
    45f4:	5f 4f       	sbci	r21, 0xFF	; 255
    45f6:	3a f0       	brmi	.+14     	; 0x4606 <__divsf3_pse+0x70>
    45f8:	9e 3f       	cpi	r25, 0xFE	; 254
    45fa:	51 05       	cpc	r21, r1
    45fc:	78 f0       	brcs	.+30     	; 0x461c <__divsf3_pse+0x86>
    45fe:	0c 94 bd 23 	jmp	0x477a	; 0x477a <__fp_inf>
    4602:	0c 94 08 24 	jmp	0x4810	; 0x4810 <__fp_szero>
    4606:	5f 3f       	cpi	r21, 0xFF	; 255
    4608:	e4 f3       	brlt	.-8      	; 0x4602 <__divsf3_pse+0x6c>
    460a:	98 3e       	cpi	r25, 0xE8	; 232
    460c:	d4 f3       	brlt	.-12     	; 0x4602 <__divsf3_pse+0x6c>
    460e:	86 95       	lsr	r24
    4610:	77 95       	ror	r23
    4612:	67 95       	ror	r22
    4614:	b7 95       	ror	r27
    4616:	f7 95       	ror	r31
    4618:	9f 5f       	subi	r25, 0xFF	; 255
    461a:	c9 f7       	brne	.-14     	; 0x460e <__divsf3_pse+0x78>
    461c:	88 0f       	add	r24, r24
    461e:	91 1d       	adc	r25, r1
    4620:	96 95       	lsr	r25
    4622:	87 95       	ror	r24
    4624:	97 f9       	bld	r25, 7
    4626:	08 95       	ret
    4628:	e1 e0       	ldi	r30, 0x01	; 1
    462a:	66 0f       	add	r22, r22
    462c:	77 1f       	adc	r23, r23
    462e:	88 1f       	adc	r24, r24
    4630:	bb 1f       	adc	r27, r27
    4632:	62 17       	cp	r22, r18
    4634:	73 07       	cpc	r23, r19
    4636:	84 07       	cpc	r24, r20
    4638:	ba 07       	cpc	r27, r26
    463a:	20 f0       	brcs	.+8      	; 0x4644 <__divsf3_pse+0xae>
    463c:	62 1b       	sub	r22, r18
    463e:	73 0b       	sbc	r23, r19
    4640:	84 0b       	sbc	r24, r20
    4642:	ba 0b       	sbc	r27, r26
    4644:	ee 1f       	adc	r30, r30
    4646:	88 f7       	brcc	.-30     	; 0x462a <__divsf3_pse+0x94>
    4648:	e0 95       	com	r30
    464a:	08 95       	ret

0000464c <__fixsfsi>:
    464c:	0e 94 2d 23 	call	0x465a	; 0x465a <__fixunssfsi>
    4650:	68 94       	set
    4652:	b1 11       	cpse	r27, r1
    4654:	0c 94 08 24 	jmp	0x4810	; 0x4810 <__fp_szero>
    4658:	08 95       	ret

0000465a <__fixunssfsi>:
    465a:	0e 94 ed 23 	call	0x47da	; 0x47da <__fp_splitA>
    465e:	88 f0       	brcs	.+34     	; 0x4682 <__fixunssfsi+0x28>
    4660:	9f 57       	subi	r25, 0x7F	; 127
    4662:	98 f0       	brcs	.+38     	; 0x468a <__fixunssfsi+0x30>
    4664:	b9 2f       	mov	r27, r25
    4666:	99 27       	eor	r25, r25
    4668:	b7 51       	subi	r27, 0x17	; 23
    466a:	b0 f0       	brcs	.+44     	; 0x4698 <__fixunssfsi+0x3e>
    466c:	e1 f0       	breq	.+56     	; 0x46a6 <__fixunssfsi+0x4c>
    466e:	66 0f       	add	r22, r22
    4670:	77 1f       	adc	r23, r23
    4672:	88 1f       	adc	r24, r24
    4674:	99 1f       	adc	r25, r25
    4676:	1a f0       	brmi	.+6      	; 0x467e <__fixunssfsi+0x24>
    4678:	ba 95       	dec	r27
    467a:	c9 f7       	brne	.-14     	; 0x466e <__fixunssfsi+0x14>
    467c:	14 c0       	rjmp	.+40     	; 0x46a6 <__fixunssfsi+0x4c>
    467e:	b1 30       	cpi	r27, 0x01	; 1
    4680:	91 f0       	breq	.+36     	; 0x46a6 <__fixunssfsi+0x4c>
    4682:	0e 94 07 24 	call	0x480e	; 0x480e <__fp_zero>
    4686:	b1 e0       	ldi	r27, 0x01	; 1
    4688:	08 95       	ret
    468a:	0c 94 07 24 	jmp	0x480e	; 0x480e <__fp_zero>
    468e:	67 2f       	mov	r22, r23
    4690:	78 2f       	mov	r23, r24
    4692:	88 27       	eor	r24, r24
    4694:	b8 5f       	subi	r27, 0xF8	; 248
    4696:	39 f0       	breq	.+14     	; 0x46a6 <__fixunssfsi+0x4c>
    4698:	b9 3f       	cpi	r27, 0xF9	; 249
    469a:	cc f3       	brlt	.-14     	; 0x468e <__fixunssfsi+0x34>
    469c:	86 95       	lsr	r24
    469e:	77 95       	ror	r23
    46a0:	67 95       	ror	r22
    46a2:	b3 95       	inc	r27
    46a4:	d9 f7       	brne	.-10     	; 0x469c <__fixunssfsi+0x42>
    46a6:	3e f4       	brtc	.+14     	; 0x46b6 <__fixunssfsi+0x5c>
    46a8:	90 95       	com	r25
    46aa:	80 95       	com	r24
    46ac:	70 95       	com	r23
    46ae:	61 95       	neg	r22
    46b0:	7f 4f       	sbci	r23, 0xFF	; 255
    46b2:	8f 4f       	sbci	r24, 0xFF	; 255
    46b4:	9f 4f       	sbci	r25, 0xFF	; 255
    46b6:	08 95       	ret

000046b8 <__floatunsisf>:
    46b8:	e8 94       	clt
    46ba:	09 c0       	rjmp	.+18     	; 0x46ce <__floatsisf+0x12>

000046bc <__floatsisf>:
    46bc:	97 fb       	bst	r25, 7
    46be:	3e f4       	brtc	.+14     	; 0x46ce <__floatsisf+0x12>
    46c0:	90 95       	com	r25
    46c2:	80 95       	com	r24
    46c4:	70 95       	com	r23
    46c6:	61 95       	neg	r22
    46c8:	7f 4f       	sbci	r23, 0xFF	; 255
    46ca:	8f 4f       	sbci	r24, 0xFF	; 255
    46cc:	9f 4f       	sbci	r25, 0xFF	; 255
    46ce:	99 23       	and	r25, r25
    46d0:	a9 f0       	breq	.+42     	; 0x46fc <__floatsisf+0x40>
    46d2:	f9 2f       	mov	r31, r25
    46d4:	96 e9       	ldi	r25, 0x96	; 150
    46d6:	bb 27       	eor	r27, r27
    46d8:	93 95       	inc	r25
    46da:	f6 95       	lsr	r31
    46dc:	87 95       	ror	r24
    46de:	77 95       	ror	r23
    46e0:	67 95       	ror	r22
    46e2:	b7 95       	ror	r27
    46e4:	f1 11       	cpse	r31, r1
    46e6:	f8 cf       	rjmp	.-16     	; 0x46d8 <__floatsisf+0x1c>
    46e8:	fa f4       	brpl	.+62     	; 0x4728 <__floatsisf+0x6c>
    46ea:	bb 0f       	add	r27, r27
    46ec:	11 f4       	brne	.+4      	; 0x46f2 <__floatsisf+0x36>
    46ee:	60 ff       	sbrs	r22, 0
    46f0:	1b c0       	rjmp	.+54     	; 0x4728 <__floatsisf+0x6c>
    46f2:	6f 5f       	subi	r22, 0xFF	; 255
    46f4:	7f 4f       	sbci	r23, 0xFF	; 255
    46f6:	8f 4f       	sbci	r24, 0xFF	; 255
    46f8:	9f 4f       	sbci	r25, 0xFF	; 255
    46fa:	16 c0       	rjmp	.+44     	; 0x4728 <__floatsisf+0x6c>
    46fc:	88 23       	and	r24, r24
    46fe:	11 f0       	breq	.+4      	; 0x4704 <__floatsisf+0x48>
    4700:	96 e9       	ldi	r25, 0x96	; 150
    4702:	11 c0       	rjmp	.+34     	; 0x4726 <__floatsisf+0x6a>
    4704:	77 23       	and	r23, r23
    4706:	21 f0       	breq	.+8      	; 0x4710 <__floatsisf+0x54>
    4708:	9e e8       	ldi	r25, 0x8E	; 142
    470a:	87 2f       	mov	r24, r23
    470c:	76 2f       	mov	r23, r22
    470e:	05 c0       	rjmp	.+10     	; 0x471a <__floatsisf+0x5e>
    4710:	66 23       	and	r22, r22
    4712:	71 f0       	breq	.+28     	; 0x4730 <__floatsisf+0x74>
    4714:	96 e8       	ldi	r25, 0x86	; 134
    4716:	86 2f       	mov	r24, r22
    4718:	70 e0       	ldi	r23, 0x00	; 0
    471a:	60 e0       	ldi	r22, 0x00	; 0
    471c:	2a f0       	brmi	.+10     	; 0x4728 <__floatsisf+0x6c>
    471e:	9a 95       	dec	r25
    4720:	66 0f       	add	r22, r22
    4722:	77 1f       	adc	r23, r23
    4724:	88 1f       	adc	r24, r24
    4726:	da f7       	brpl	.-10     	; 0x471e <__floatsisf+0x62>
    4728:	88 0f       	add	r24, r24
    472a:	96 95       	lsr	r25
    472c:	87 95       	ror	r24
    472e:	97 f9       	bld	r25, 7
    4730:	08 95       	ret

00004732 <__fp_cmp>:
    4732:	99 0f       	add	r25, r25
    4734:	00 08       	sbc	r0, r0
    4736:	55 0f       	add	r21, r21
    4738:	aa 0b       	sbc	r26, r26
    473a:	e0 e8       	ldi	r30, 0x80	; 128
    473c:	fe ef       	ldi	r31, 0xFE	; 254
    473e:	16 16       	cp	r1, r22
    4740:	17 06       	cpc	r1, r23
    4742:	e8 07       	cpc	r30, r24
    4744:	f9 07       	cpc	r31, r25
    4746:	c0 f0       	brcs	.+48     	; 0x4778 <__fp_cmp+0x46>
    4748:	12 16       	cp	r1, r18
    474a:	13 06       	cpc	r1, r19
    474c:	e4 07       	cpc	r30, r20
    474e:	f5 07       	cpc	r31, r21
    4750:	98 f0       	brcs	.+38     	; 0x4778 <__fp_cmp+0x46>
    4752:	62 1b       	sub	r22, r18
    4754:	73 0b       	sbc	r23, r19
    4756:	84 0b       	sbc	r24, r20
    4758:	95 0b       	sbc	r25, r21
    475a:	39 f4       	brne	.+14     	; 0x476a <__fp_cmp+0x38>
    475c:	0a 26       	eor	r0, r26
    475e:	61 f0       	breq	.+24     	; 0x4778 <__fp_cmp+0x46>
    4760:	23 2b       	or	r18, r19
    4762:	24 2b       	or	r18, r20
    4764:	25 2b       	or	r18, r21
    4766:	21 f4       	brne	.+8      	; 0x4770 <__fp_cmp+0x3e>
    4768:	08 95       	ret
    476a:	0a 26       	eor	r0, r26
    476c:	09 f4       	brne	.+2      	; 0x4770 <__fp_cmp+0x3e>
    476e:	a1 40       	sbci	r26, 0x01	; 1
    4770:	a6 95       	lsr	r26
    4772:	8f ef       	ldi	r24, 0xFF	; 255
    4774:	81 1d       	adc	r24, r1
    4776:	81 1d       	adc	r24, r1
    4778:	08 95       	ret

0000477a <__fp_inf>:
    477a:	97 f9       	bld	r25, 7
    477c:	9f 67       	ori	r25, 0x7F	; 127
    477e:	80 e8       	ldi	r24, 0x80	; 128
    4780:	70 e0       	ldi	r23, 0x00	; 0
    4782:	60 e0       	ldi	r22, 0x00	; 0
    4784:	08 95       	ret

00004786 <__fp_nan>:
    4786:	9f ef       	ldi	r25, 0xFF	; 255
    4788:	80 ec       	ldi	r24, 0xC0	; 192
    478a:	08 95       	ret

0000478c <__fp_pscA>:
    478c:	00 24       	eor	r0, r0
    478e:	0a 94       	dec	r0
    4790:	16 16       	cp	r1, r22
    4792:	17 06       	cpc	r1, r23
    4794:	18 06       	cpc	r1, r24
    4796:	09 06       	cpc	r0, r25
    4798:	08 95       	ret

0000479a <__fp_pscB>:
    479a:	00 24       	eor	r0, r0
    479c:	0a 94       	dec	r0
    479e:	12 16       	cp	r1, r18
    47a0:	13 06       	cpc	r1, r19
    47a2:	14 06       	cpc	r1, r20
    47a4:	05 06       	cpc	r0, r21
    47a6:	08 95       	ret

000047a8 <__fp_round>:
    47a8:	09 2e       	mov	r0, r25
    47aa:	03 94       	inc	r0
    47ac:	00 0c       	add	r0, r0
    47ae:	11 f4       	brne	.+4      	; 0x47b4 <__fp_round+0xc>
    47b0:	88 23       	and	r24, r24
    47b2:	52 f0       	brmi	.+20     	; 0x47c8 <__fp_round+0x20>
    47b4:	bb 0f       	add	r27, r27
    47b6:	40 f4       	brcc	.+16     	; 0x47c8 <__fp_round+0x20>
    47b8:	bf 2b       	or	r27, r31
    47ba:	11 f4       	brne	.+4      	; 0x47c0 <__fp_round+0x18>
    47bc:	60 ff       	sbrs	r22, 0
    47be:	04 c0       	rjmp	.+8      	; 0x47c8 <__fp_round+0x20>
    47c0:	6f 5f       	subi	r22, 0xFF	; 255
    47c2:	7f 4f       	sbci	r23, 0xFF	; 255
    47c4:	8f 4f       	sbci	r24, 0xFF	; 255
    47c6:	9f 4f       	sbci	r25, 0xFF	; 255
    47c8:	08 95       	ret

000047ca <__fp_split3>:
    47ca:	57 fd       	sbrc	r21, 7
    47cc:	90 58       	subi	r25, 0x80	; 128
    47ce:	44 0f       	add	r20, r20
    47d0:	55 1f       	adc	r21, r21
    47d2:	59 f0       	breq	.+22     	; 0x47ea <__fp_splitA+0x10>
    47d4:	5f 3f       	cpi	r21, 0xFF	; 255
    47d6:	71 f0       	breq	.+28     	; 0x47f4 <__fp_splitA+0x1a>
    47d8:	47 95       	ror	r20

000047da <__fp_splitA>:
    47da:	88 0f       	add	r24, r24
    47dc:	97 fb       	bst	r25, 7
    47de:	99 1f       	adc	r25, r25
    47e0:	61 f0       	breq	.+24     	; 0x47fa <__fp_splitA+0x20>
    47e2:	9f 3f       	cpi	r25, 0xFF	; 255
    47e4:	79 f0       	breq	.+30     	; 0x4804 <__fp_splitA+0x2a>
    47e6:	87 95       	ror	r24
    47e8:	08 95       	ret
    47ea:	12 16       	cp	r1, r18
    47ec:	13 06       	cpc	r1, r19
    47ee:	14 06       	cpc	r1, r20
    47f0:	55 1f       	adc	r21, r21
    47f2:	f2 cf       	rjmp	.-28     	; 0x47d8 <__fp_split3+0xe>
    47f4:	46 95       	lsr	r20
    47f6:	f1 df       	rcall	.-30     	; 0x47da <__fp_splitA>
    47f8:	08 c0       	rjmp	.+16     	; 0x480a <__fp_splitA+0x30>
    47fa:	16 16       	cp	r1, r22
    47fc:	17 06       	cpc	r1, r23
    47fe:	18 06       	cpc	r1, r24
    4800:	99 1f       	adc	r25, r25
    4802:	f1 cf       	rjmp	.-30     	; 0x47e6 <__fp_splitA+0xc>
    4804:	86 95       	lsr	r24
    4806:	71 05       	cpc	r23, r1
    4808:	61 05       	cpc	r22, r1
    480a:	08 94       	sec
    480c:	08 95       	ret

0000480e <__fp_zero>:
    480e:	e8 94       	clt

00004810 <__fp_szero>:
    4810:	bb 27       	eor	r27, r27
    4812:	66 27       	eor	r22, r22
    4814:	77 27       	eor	r23, r23
    4816:	cb 01       	movw	r24, r22
    4818:	97 f9       	bld	r25, 7
    481a:	08 95       	ret

0000481c <__gesf2>:
    481c:	0e 94 99 23 	call	0x4732	; 0x4732 <__fp_cmp>
    4820:	08 f4       	brcc	.+2      	; 0x4824 <__gesf2+0x8>
    4822:	8f ef       	ldi	r24, 0xFF	; 255
    4824:	08 95       	ret

00004826 <__mulsf3>:
    4826:	0e 94 26 24 	call	0x484c	; 0x484c <__mulsf3x>
    482a:	0c 94 d4 23 	jmp	0x47a8	; 0x47a8 <__fp_round>
    482e:	0e 94 c6 23 	call	0x478c	; 0x478c <__fp_pscA>
    4832:	38 f0       	brcs	.+14     	; 0x4842 <__mulsf3+0x1c>
    4834:	0e 94 cd 23 	call	0x479a	; 0x479a <__fp_pscB>
    4838:	20 f0       	brcs	.+8      	; 0x4842 <__mulsf3+0x1c>
    483a:	95 23       	and	r25, r21
    483c:	11 f0       	breq	.+4      	; 0x4842 <__mulsf3+0x1c>
    483e:	0c 94 bd 23 	jmp	0x477a	; 0x477a <__fp_inf>
    4842:	0c 94 c3 23 	jmp	0x4786	; 0x4786 <__fp_nan>
    4846:	11 24       	eor	r1, r1
    4848:	0c 94 08 24 	jmp	0x4810	; 0x4810 <__fp_szero>

0000484c <__mulsf3x>:
    484c:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__fp_split3>
    4850:	70 f3       	brcs	.-36     	; 0x482e <__mulsf3+0x8>

00004852 <__mulsf3_pse>:
    4852:	95 9f       	mul	r25, r21
    4854:	c1 f3       	breq	.-16     	; 0x4846 <__mulsf3+0x20>
    4856:	95 0f       	add	r25, r21
    4858:	50 e0       	ldi	r21, 0x00	; 0
    485a:	55 1f       	adc	r21, r21
    485c:	62 9f       	mul	r22, r18
    485e:	f0 01       	movw	r30, r0
    4860:	72 9f       	mul	r23, r18
    4862:	bb 27       	eor	r27, r27
    4864:	f0 0d       	add	r31, r0
    4866:	b1 1d       	adc	r27, r1
    4868:	63 9f       	mul	r22, r19
    486a:	aa 27       	eor	r26, r26
    486c:	f0 0d       	add	r31, r0
    486e:	b1 1d       	adc	r27, r1
    4870:	aa 1f       	adc	r26, r26
    4872:	64 9f       	mul	r22, r20
    4874:	66 27       	eor	r22, r22
    4876:	b0 0d       	add	r27, r0
    4878:	a1 1d       	adc	r26, r1
    487a:	66 1f       	adc	r22, r22
    487c:	82 9f       	mul	r24, r18
    487e:	22 27       	eor	r18, r18
    4880:	b0 0d       	add	r27, r0
    4882:	a1 1d       	adc	r26, r1
    4884:	62 1f       	adc	r22, r18
    4886:	73 9f       	mul	r23, r19
    4888:	b0 0d       	add	r27, r0
    488a:	a1 1d       	adc	r26, r1
    488c:	62 1f       	adc	r22, r18
    488e:	83 9f       	mul	r24, r19
    4890:	a0 0d       	add	r26, r0
    4892:	61 1d       	adc	r22, r1
    4894:	22 1f       	adc	r18, r18
    4896:	74 9f       	mul	r23, r20
    4898:	33 27       	eor	r19, r19
    489a:	a0 0d       	add	r26, r0
    489c:	61 1d       	adc	r22, r1
    489e:	23 1f       	adc	r18, r19
    48a0:	84 9f       	mul	r24, r20
    48a2:	60 0d       	add	r22, r0
    48a4:	21 1d       	adc	r18, r1
    48a6:	82 2f       	mov	r24, r18
    48a8:	76 2f       	mov	r23, r22
    48aa:	6a 2f       	mov	r22, r26
    48ac:	11 24       	eor	r1, r1
    48ae:	9f 57       	subi	r25, 0x7F	; 127
    48b0:	50 40       	sbci	r21, 0x00	; 0
    48b2:	9a f0       	brmi	.+38     	; 0x48da <__mulsf3_pse+0x88>
    48b4:	f1 f0       	breq	.+60     	; 0x48f2 <__mulsf3_pse+0xa0>
    48b6:	88 23       	and	r24, r24
    48b8:	4a f0       	brmi	.+18     	; 0x48cc <__mulsf3_pse+0x7a>
    48ba:	ee 0f       	add	r30, r30
    48bc:	ff 1f       	adc	r31, r31
    48be:	bb 1f       	adc	r27, r27
    48c0:	66 1f       	adc	r22, r22
    48c2:	77 1f       	adc	r23, r23
    48c4:	88 1f       	adc	r24, r24
    48c6:	91 50       	subi	r25, 0x01	; 1
    48c8:	50 40       	sbci	r21, 0x00	; 0
    48ca:	a9 f7       	brne	.-22     	; 0x48b6 <__mulsf3_pse+0x64>
    48cc:	9e 3f       	cpi	r25, 0xFE	; 254
    48ce:	51 05       	cpc	r21, r1
    48d0:	80 f0       	brcs	.+32     	; 0x48f2 <__mulsf3_pse+0xa0>
    48d2:	0c 94 bd 23 	jmp	0x477a	; 0x477a <__fp_inf>
    48d6:	0c 94 08 24 	jmp	0x4810	; 0x4810 <__fp_szero>
    48da:	5f 3f       	cpi	r21, 0xFF	; 255
    48dc:	e4 f3       	brlt	.-8      	; 0x48d6 <__mulsf3_pse+0x84>
    48de:	98 3e       	cpi	r25, 0xE8	; 232
    48e0:	d4 f3       	brlt	.-12     	; 0x48d6 <__mulsf3_pse+0x84>
    48e2:	86 95       	lsr	r24
    48e4:	77 95       	ror	r23
    48e6:	67 95       	ror	r22
    48e8:	b7 95       	ror	r27
    48ea:	f7 95       	ror	r31
    48ec:	e7 95       	ror	r30
    48ee:	9f 5f       	subi	r25, 0xFF	; 255
    48f0:	c1 f7       	brne	.-16     	; 0x48e2 <__mulsf3_pse+0x90>
    48f2:	fe 2b       	or	r31, r30
    48f4:	88 0f       	add	r24, r24
    48f6:	91 1d       	adc	r25, r1
    48f8:	96 95       	lsr	r25
    48fa:	87 95       	ror	r24
    48fc:	97 f9       	bld	r25, 7
    48fe:	08 95       	ret

00004900 <vfprintf>:
    4900:	2f 92       	push	r2
    4902:	3f 92       	push	r3
    4904:	4f 92       	push	r4
    4906:	5f 92       	push	r5
    4908:	6f 92       	push	r6
    490a:	7f 92       	push	r7
    490c:	8f 92       	push	r8
    490e:	9f 92       	push	r9
    4910:	af 92       	push	r10
    4912:	bf 92       	push	r11
    4914:	cf 92       	push	r12
    4916:	df 92       	push	r13
    4918:	ef 92       	push	r14
    491a:	ff 92       	push	r15
    491c:	0f 93       	push	r16
    491e:	1f 93       	push	r17
    4920:	cf 93       	push	r28
    4922:	df 93       	push	r29
    4924:	cd b7       	in	r28, 0x3d	; 61
    4926:	de b7       	in	r29, 0x3e	; 62
    4928:	60 97       	sbiw	r28, 0x10	; 16
    492a:	cd bf       	out	0x3d, r28	; 61
    492c:	de bf       	out	0x3e, r29	; 62
    492e:	7c 01       	movw	r14, r24
    4930:	1b 01       	movw	r2, r22
    4932:	6a 01       	movw	r12, r20
    4934:	fc 01       	movw	r30, r24
    4936:	16 82       	std	Z+6, r1	; 0x06
    4938:	17 82       	std	Z+7, r1	; 0x07
    493a:	83 81       	ldd	r24, Z+3	; 0x03
    493c:	81 ff       	sbrs	r24, 1
    493e:	44 c3       	rjmp	.+1672   	; 0x4fc8 <vfprintf+0x6c8>
    4940:	9e 01       	movw	r18, r28
    4942:	2f 5f       	subi	r18, 0xFF	; 255
    4944:	3f 4f       	sbci	r19, 0xFF	; 255
    4946:	39 01       	movw	r6, r18
    4948:	f7 01       	movw	r30, r14
    494a:	93 81       	ldd	r25, Z+3	; 0x03
    494c:	f1 01       	movw	r30, r2
    494e:	93 fd       	sbrc	r25, 3
    4950:	85 91       	lpm	r24, Z+
    4952:	93 ff       	sbrs	r25, 3
    4954:	81 91       	ld	r24, Z+
    4956:	1f 01       	movw	r2, r30
    4958:	88 23       	and	r24, r24
    495a:	09 f4       	brne	.+2      	; 0x495e <vfprintf+0x5e>
    495c:	31 c3       	rjmp	.+1634   	; 0x4fc0 <vfprintf+0x6c0>
    495e:	85 32       	cpi	r24, 0x25	; 37
    4960:	39 f4       	brne	.+14     	; 0x4970 <vfprintf+0x70>
    4962:	93 fd       	sbrc	r25, 3
    4964:	85 91       	lpm	r24, Z+
    4966:	93 ff       	sbrs	r25, 3
    4968:	81 91       	ld	r24, Z+
    496a:	1f 01       	movw	r2, r30
    496c:	85 32       	cpi	r24, 0x25	; 37
    496e:	39 f4       	brne	.+14     	; 0x497e <vfprintf+0x7e>
    4970:	b7 01       	movw	r22, r14
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4978:	56 01       	movw	r10, r12
    497a:	65 01       	movw	r12, r10
    497c:	e5 cf       	rjmp	.-54     	; 0x4948 <vfprintf+0x48>
    497e:	10 e0       	ldi	r17, 0x00	; 0
    4980:	51 2c       	mov	r5, r1
    4982:	91 2c       	mov	r9, r1
    4984:	ff e1       	ldi	r31, 0x1F	; 31
    4986:	f9 15       	cp	r31, r9
    4988:	d8 f0       	brcs	.+54     	; 0x49c0 <vfprintf+0xc0>
    498a:	8b 32       	cpi	r24, 0x2B	; 43
    498c:	79 f0       	breq	.+30     	; 0x49ac <vfprintf+0xac>
    498e:	38 f4       	brcc	.+14     	; 0x499e <vfprintf+0x9e>
    4990:	80 32       	cpi	r24, 0x20	; 32
    4992:	79 f0       	breq	.+30     	; 0x49b2 <vfprintf+0xb2>
    4994:	83 32       	cpi	r24, 0x23	; 35
    4996:	a1 f4       	brne	.+40     	; 0x49c0 <vfprintf+0xc0>
    4998:	f9 2d       	mov	r31, r9
    499a:	f0 61       	ori	r31, 0x10	; 16
    499c:	2e c0       	rjmp	.+92     	; 0x49fa <vfprintf+0xfa>
    499e:	8d 32       	cpi	r24, 0x2D	; 45
    49a0:	61 f0       	breq	.+24     	; 0x49ba <vfprintf+0xba>
    49a2:	80 33       	cpi	r24, 0x30	; 48
    49a4:	69 f4       	brne	.+26     	; 0x49c0 <vfprintf+0xc0>
    49a6:	29 2d       	mov	r18, r9
    49a8:	21 60       	ori	r18, 0x01	; 1
    49aa:	2d c0       	rjmp	.+90     	; 0x4a06 <vfprintf+0x106>
    49ac:	39 2d       	mov	r19, r9
    49ae:	32 60       	ori	r19, 0x02	; 2
    49b0:	93 2e       	mov	r9, r19
    49b2:	89 2d       	mov	r24, r9
    49b4:	84 60       	ori	r24, 0x04	; 4
    49b6:	98 2e       	mov	r9, r24
    49b8:	2a c0       	rjmp	.+84     	; 0x4a0e <vfprintf+0x10e>
    49ba:	e9 2d       	mov	r30, r9
    49bc:	e8 60       	ori	r30, 0x08	; 8
    49be:	15 c0       	rjmp	.+42     	; 0x49ea <vfprintf+0xea>
    49c0:	97 fc       	sbrc	r9, 7
    49c2:	2d c0       	rjmp	.+90     	; 0x4a1e <vfprintf+0x11e>
    49c4:	20 ed       	ldi	r18, 0xD0	; 208
    49c6:	28 0f       	add	r18, r24
    49c8:	2a 30       	cpi	r18, 0x0A	; 10
    49ca:	88 f4       	brcc	.+34     	; 0x49ee <vfprintf+0xee>
    49cc:	96 fe       	sbrs	r9, 6
    49ce:	06 c0       	rjmp	.+12     	; 0x49dc <vfprintf+0xdc>
    49d0:	3a e0       	ldi	r19, 0x0A	; 10
    49d2:	13 9f       	mul	r17, r19
    49d4:	20 0d       	add	r18, r0
    49d6:	11 24       	eor	r1, r1
    49d8:	12 2f       	mov	r17, r18
    49da:	19 c0       	rjmp	.+50     	; 0x4a0e <vfprintf+0x10e>
    49dc:	8a e0       	ldi	r24, 0x0A	; 10
    49de:	58 9e       	mul	r5, r24
    49e0:	20 0d       	add	r18, r0
    49e2:	11 24       	eor	r1, r1
    49e4:	52 2e       	mov	r5, r18
    49e6:	e9 2d       	mov	r30, r9
    49e8:	e0 62       	ori	r30, 0x20	; 32
    49ea:	9e 2e       	mov	r9, r30
    49ec:	10 c0       	rjmp	.+32     	; 0x4a0e <vfprintf+0x10e>
    49ee:	8e 32       	cpi	r24, 0x2E	; 46
    49f0:	31 f4       	brne	.+12     	; 0x49fe <vfprintf+0xfe>
    49f2:	96 fc       	sbrc	r9, 6
    49f4:	e5 c2       	rjmp	.+1482   	; 0x4fc0 <vfprintf+0x6c0>
    49f6:	f9 2d       	mov	r31, r9
    49f8:	f0 64       	ori	r31, 0x40	; 64
    49fa:	9f 2e       	mov	r9, r31
    49fc:	08 c0       	rjmp	.+16     	; 0x4a0e <vfprintf+0x10e>
    49fe:	8c 36       	cpi	r24, 0x6C	; 108
    4a00:	21 f4       	brne	.+8      	; 0x4a0a <vfprintf+0x10a>
    4a02:	29 2d       	mov	r18, r9
    4a04:	20 68       	ori	r18, 0x80	; 128
    4a06:	92 2e       	mov	r9, r18
    4a08:	02 c0       	rjmp	.+4      	; 0x4a0e <vfprintf+0x10e>
    4a0a:	88 36       	cpi	r24, 0x68	; 104
    4a0c:	41 f4       	brne	.+16     	; 0x4a1e <vfprintf+0x11e>
    4a0e:	f1 01       	movw	r30, r2
    4a10:	93 fd       	sbrc	r25, 3
    4a12:	85 91       	lpm	r24, Z+
    4a14:	93 ff       	sbrs	r25, 3
    4a16:	81 91       	ld	r24, Z+
    4a18:	1f 01       	movw	r2, r30
    4a1a:	81 11       	cpse	r24, r1
    4a1c:	b3 cf       	rjmp	.-154    	; 0x4984 <vfprintf+0x84>
    4a1e:	9b eb       	ldi	r25, 0xBB	; 187
    4a20:	98 0f       	add	r25, r24
    4a22:	93 30       	cpi	r25, 0x03	; 3
    4a24:	20 f4       	brcc	.+8      	; 0x4a2e <vfprintf+0x12e>
    4a26:	99 2d       	mov	r25, r9
    4a28:	90 61       	ori	r25, 0x10	; 16
    4a2a:	80 5e       	subi	r24, 0xE0	; 224
    4a2c:	07 c0       	rjmp	.+14     	; 0x4a3c <vfprintf+0x13c>
    4a2e:	9b e9       	ldi	r25, 0x9B	; 155
    4a30:	98 0f       	add	r25, r24
    4a32:	93 30       	cpi	r25, 0x03	; 3
    4a34:	08 f0       	brcs	.+2      	; 0x4a38 <vfprintf+0x138>
    4a36:	66 c1       	rjmp	.+716    	; 0x4d04 <vfprintf+0x404>
    4a38:	99 2d       	mov	r25, r9
    4a3a:	9f 7e       	andi	r25, 0xEF	; 239
    4a3c:	96 ff       	sbrs	r25, 6
    4a3e:	16 e0       	ldi	r17, 0x06	; 6
    4a40:	9f 73       	andi	r25, 0x3F	; 63
    4a42:	99 2e       	mov	r9, r25
    4a44:	85 36       	cpi	r24, 0x65	; 101
    4a46:	19 f4       	brne	.+6      	; 0x4a4e <vfprintf+0x14e>
    4a48:	90 64       	ori	r25, 0x40	; 64
    4a4a:	99 2e       	mov	r9, r25
    4a4c:	08 c0       	rjmp	.+16     	; 0x4a5e <vfprintf+0x15e>
    4a4e:	86 36       	cpi	r24, 0x66	; 102
    4a50:	21 f4       	brne	.+8      	; 0x4a5a <vfprintf+0x15a>
    4a52:	39 2f       	mov	r19, r25
    4a54:	30 68       	ori	r19, 0x80	; 128
    4a56:	93 2e       	mov	r9, r19
    4a58:	02 c0       	rjmp	.+4      	; 0x4a5e <vfprintf+0x15e>
    4a5a:	11 11       	cpse	r17, r1
    4a5c:	11 50       	subi	r17, 0x01	; 1
    4a5e:	97 fe       	sbrs	r9, 7
    4a60:	07 c0       	rjmp	.+14     	; 0x4a70 <vfprintf+0x170>
    4a62:	1c 33       	cpi	r17, 0x3C	; 60
    4a64:	50 f4       	brcc	.+20     	; 0x4a7a <vfprintf+0x17a>
    4a66:	44 24       	eor	r4, r4
    4a68:	43 94       	inc	r4
    4a6a:	41 0e       	add	r4, r17
    4a6c:	27 e0       	ldi	r18, 0x07	; 7
    4a6e:	0b c0       	rjmp	.+22     	; 0x4a86 <vfprintf+0x186>
    4a70:	18 30       	cpi	r17, 0x08	; 8
    4a72:	38 f0       	brcs	.+14     	; 0x4a82 <vfprintf+0x182>
    4a74:	27 e0       	ldi	r18, 0x07	; 7
    4a76:	17 e0       	ldi	r17, 0x07	; 7
    4a78:	05 c0       	rjmp	.+10     	; 0x4a84 <vfprintf+0x184>
    4a7a:	27 e0       	ldi	r18, 0x07	; 7
    4a7c:	9c e3       	ldi	r25, 0x3C	; 60
    4a7e:	49 2e       	mov	r4, r25
    4a80:	02 c0       	rjmp	.+4      	; 0x4a86 <vfprintf+0x186>
    4a82:	21 2f       	mov	r18, r17
    4a84:	41 2c       	mov	r4, r1
    4a86:	56 01       	movw	r10, r12
    4a88:	84 e0       	ldi	r24, 0x04	; 4
    4a8a:	a8 0e       	add	r10, r24
    4a8c:	b1 1c       	adc	r11, r1
    4a8e:	f6 01       	movw	r30, r12
    4a90:	60 81       	ld	r22, Z
    4a92:	71 81       	ldd	r23, Z+1	; 0x01
    4a94:	82 81       	ldd	r24, Z+2	; 0x02
    4a96:	93 81       	ldd	r25, Z+3	; 0x03
    4a98:	04 2d       	mov	r16, r4
    4a9a:	a3 01       	movw	r20, r6
    4a9c:	0e 94 78 29 	call	0x52f0	; 0x52f0 <__ftoa_engine>
    4aa0:	6c 01       	movw	r12, r24
    4aa2:	f9 81       	ldd	r31, Y+1	; 0x01
    4aa4:	fc 87       	std	Y+12, r31	; 0x0c
    4aa6:	f0 ff       	sbrs	r31, 0
    4aa8:	02 c0       	rjmp	.+4      	; 0x4aae <vfprintf+0x1ae>
    4aaa:	f3 ff       	sbrs	r31, 3
    4aac:	06 c0       	rjmp	.+12     	; 0x4aba <vfprintf+0x1ba>
    4aae:	91 fc       	sbrc	r9, 1
    4ab0:	06 c0       	rjmp	.+12     	; 0x4abe <vfprintf+0x1be>
    4ab2:	92 fe       	sbrs	r9, 2
    4ab4:	06 c0       	rjmp	.+12     	; 0x4ac2 <vfprintf+0x1c2>
    4ab6:	00 e2       	ldi	r16, 0x20	; 32
    4ab8:	05 c0       	rjmp	.+10     	; 0x4ac4 <vfprintf+0x1c4>
    4aba:	0d e2       	ldi	r16, 0x2D	; 45
    4abc:	03 c0       	rjmp	.+6      	; 0x4ac4 <vfprintf+0x1c4>
    4abe:	0b e2       	ldi	r16, 0x2B	; 43
    4ac0:	01 c0       	rjmp	.+2      	; 0x4ac4 <vfprintf+0x1c4>
    4ac2:	00 e0       	ldi	r16, 0x00	; 0
    4ac4:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ac6:	8c 70       	andi	r24, 0x0C	; 12
    4ac8:	19 f0       	breq	.+6      	; 0x4ad0 <vfprintf+0x1d0>
    4aca:	01 11       	cpse	r16, r1
    4acc:	5a c2       	rjmp	.+1204   	; 0x4f82 <vfprintf+0x682>
    4ace:	9b c2       	rjmp	.+1334   	; 0x5006 <vfprintf+0x706>
    4ad0:	97 fe       	sbrs	r9, 7
    4ad2:	10 c0       	rjmp	.+32     	; 0x4af4 <vfprintf+0x1f4>
    4ad4:	4c 0c       	add	r4, r12
    4ad6:	fc 85       	ldd	r31, Y+12	; 0x0c
    4ad8:	f4 ff       	sbrs	r31, 4
    4ada:	04 c0       	rjmp	.+8      	; 0x4ae4 <vfprintf+0x1e4>
    4adc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ade:	81 33       	cpi	r24, 0x31	; 49
    4ae0:	09 f4       	brne	.+2      	; 0x4ae4 <vfprintf+0x1e4>
    4ae2:	4a 94       	dec	r4
    4ae4:	14 14       	cp	r1, r4
    4ae6:	74 f5       	brge	.+92     	; 0x4b44 <vfprintf+0x244>
    4ae8:	28 e0       	ldi	r18, 0x08	; 8
    4aea:	24 15       	cp	r18, r4
    4aec:	78 f5       	brcc	.+94     	; 0x4b4c <vfprintf+0x24c>
    4aee:	88 e0       	ldi	r24, 0x08	; 8
    4af0:	48 2e       	mov	r4, r24
    4af2:	2c c0       	rjmp	.+88     	; 0x4b4c <vfprintf+0x24c>
    4af4:	96 fc       	sbrc	r9, 6
    4af6:	2a c0       	rjmp	.+84     	; 0x4b4c <vfprintf+0x24c>
    4af8:	81 2f       	mov	r24, r17
    4afa:	90 e0       	ldi	r25, 0x00	; 0
    4afc:	8c 15       	cp	r24, r12
    4afe:	9d 05       	cpc	r25, r13
    4b00:	9c f0       	brlt	.+38     	; 0x4b28 <vfprintf+0x228>
    4b02:	3c ef       	ldi	r19, 0xFC	; 252
    4b04:	c3 16       	cp	r12, r19
    4b06:	3f ef       	ldi	r19, 0xFF	; 255
    4b08:	d3 06       	cpc	r13, r19
    4b0a:	74 f0       	brlt	.+28     	; 0x4b28 <vfprintf+0x228>
    4b0c:	89 2d       	mov	r24, r9
    4b0e:	80 68       	ori	r24, 0x80	; 128
    4b10:	98 2e       	mov	r9, r24
    4b12:	0a c0       	rjmp	.+20     	; 0x4b28 <vfprintf+0x228>
    4b14:	e2 e0       	ldi	r30, 0x02	; 2
    4b16:	f0 e0       	ldi	r31, 0x00	; 0
    4b18:	ec 0f       	add	r30, r28
    4b1a:	fd 1f       	adc	r31, r29
    4b1c:	e1 0f       	add	r30, r17
    4b1e:	f1 1d       	adc	r31, r1
    4b20:	80 81       	ld	r24, Z
    4b22:	80 33       	cpi	r24, 0x30	; 48
    4b24:	19 f4       	brne	.+6      	; 0x4b2c <vfprintf+0x22c>
    4b26:	11 50       	subi	r17, 0x01	; 1
    4b28:	11 11       	cpse	r17, r1
    4b2a:	f4 cf       	rjmp	.-24     	; 0x4b14 <vfprintf+0x214>
    4b2c:	97 fe       	sbrs	r9, 7
    4b2e:	0e c0       	rjmp	.+28     	; 0x4b4c <vfprintf+0x24c>
    4b30:	44 24       	eor	r4, r4
    4b32:	43 94       	inc	r4
    4b34:	41 0e       	add	r4, r17
    4b36:	81 2f       	mov	r24, r17
    4b38:	90 e0       	ldi	r25, 0x00	; 0
    4b3a:	c8 16       	cp	r12, r24
    4b3c:	d9 06       	cpc	r13, r25
    4b3e:	2c f4       	brge	.+10     	; 0x4b4a <vfprintf+0x24a>
    4b40:	1c 19       	sub	r17, r12
    4b42:	04 c0       	rjmp	.+8      	; 0x4b4c <vfprintf+0x24c>
    4b44:	44 24       	eor	r4, r4
    4b46:	43 94       	inc	r4
    4b48:	01 c0       	rjmp	.+2      	; 0x4b4c <vfprintf+0x24c>
    4b4a:	10 e0       	ldi	r17, 0x00	; 0
    4b4c:	97 fe       	sbrs	r9, 7
    4b4e:	06 c0       	rjmp	.+12     	; 0x4b5c <vfprintf+0x25c>
    4b50:	1c 14       	cp	r1, r12
    4b52:	1d 04       	cpc	r1, r13
    4b54:	34 f4       	brge	.+12     	; 0x4b62 <vfprintf+0x262>
    4b56:	c6 01       	movw	r24, r12
    4b58:	01 96       	adiw	r24, 0x01	; 1
    4b5a:	05 c0       	rjmp	.+10     	; 0x4b66 <vfprintf+0x266>
    4b5c:	85 e0       	ldi	r24, 0x05	; 5
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	02 c0       	rjmp	.+4      	; 0x4b66 <vfprintf+0x266>
    4b62:	81 e0       	ldi	r24, 0x01	; 1
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	01 11       	cpse	r16, r1
    4b68:	01 96       	adiw	r24, 0x01	; 1
    4b6a:	11 23       	and	r17, r17
    4b6c:	31 f0       	breq	.+12     	; 0x4b7a <vfprintf+0x27a>
    4b6e:	21 2f       	mov	r18, r17
    4b70:	30 e0       	ldi	r19, 0x00	; 0
    4b72:	2f 5f       	subi	r18, 0xFF	; 255
    4b74:	3f 4f       	sbci	r19, 0xFF	; 255
    4b76:	82 0f       	add	r24, r18
    4b78:	93 1f       	adc	r25, r19
    4b7a:	25 2d       	mov	r18, r5
    4b7c:	30 e0       	ldi	r19, 0x00	; 0
    4b7e:	82 17       	cp	r24, r18
    4b80:	93 07       	cpc	r25, r19
    4b82:	14 f4       	brge	.+4      	; 0x4b88 <vfprintf+0x288>
    4b84:	58 1a       	sub	r5, r24
    4b86:	01 c0       	rjmp	.+2      	; 0x4b8a <vfprintf+0x28a>
    4b88:	51 2c       	mov	r5, r1
    4b8a:	89 2d       	mov	r24, r9
    4b8c:	89 70       	andi	r24, 0x09	; 9
    4b8e:	49 f4       	brne	.+18     	; 0x4ba2 <vfprintf+0x2a2>
    4b90:	55 20       	and	r5, r5
    4b92:	39 f0       	breq	.+14     	; 0x4ba2 <vfprintf+0x2a2>
    4b94:	b7 01       	movw	r22, r14
    4b96:	80 e2       	ldi	r24, 0x20	; 32
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4b9e:	5a 94       	dec	r5
    4ba0:	f7 cf       	rjmp	.-18     	; 0x4b90 <vfprintf+0x290>
    4ba2:	00 23       	and	r16, r16
    4ba4:	29 f0       	breq	.+10     	; 0x4bb0 <vfprintf+0x2b0>
    4ba6:	b7 01       	movw	r22, r14
    4ba8:	80 2f       	mov	r24, r16
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4bb0:	93 fc       	sbrc	r9, 3
    4bb2:	09 c0       	rjmp	.+18     	; 0x4bc6 <vfprintf+0x2c6>
    4bb4:	55 20       	and	r5, r5
    4bb6:	39 f0       	breq	.+14     	; 0x4bc6 <vfprintf+0x2c6>
    4bb8:	b7 01       	movw	r22, r14
    4bba:	80 e3       	ldi	r24, 0x30	; 48
    4bbc:	90 e0       	ldi	r25, 0x00	; 0
    4bbe:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4bc2:	5a 94       	dec	r5
    4bc4:	f7 cf       	rjmp	.-18     	; 0x4bb4 <vfprintf+0x2b4>
    4bc6:	97 fe       	sbrs	r9, 7
    4bc8:	4c c0       	rjmp	.+152    	; 0x4c62 <vfprintf+0x362>
    4bca:	46 01       	movw	r8, r12
    4bcc:	d7 fe       	sbrs	r13, 7
    4bce:	02 c0       	rjmp	.+4      	; 0x4bd4 <vfprintf+0x2d4>
    4bd0:	81 2c       	mov	r8, r1
    4bd2:	91 2c       	mov	r9, r1
    4bd4:	c6 01       	movw	r24, r12
    4bd6:	88 19       	sub	r24, r8
    4bd8:	99 09       	sbc	r25, r9
    4bda:	f3 01       	movw	r30, r6
    4bdc:	e8 0f       	add	r30, r24
    4bde:	f9 1f       	adc	r31, r25
    4be0:	ed 87       	std	Y+13, r30	; 0x0d
    4be2:	fe 87       	std	Y+14, r31	; 0x0e
    4be4:	96 01       	movw	r18, r12
    4be6:	24 19       	sub	r18, r4
    4be8:	31 09       	sbc	r19, r1
    4bea:	2f 87       	std	Y+15, r18	; 0x0f
    4bec:	38 8b       	std	Y+16, r19	; 0x10
    4bee:	01 2f       	mov	r16, r17
    4bf0:	10 e0       	ldi	r17, 0x00	; 0
    4bf2:	11 95       	neg	r17
    4bf4:	01 95       	neg	r16
    4bf6:	11 09       	sbc	r17, r1
    4bf8:	3f ef       	ldi	r19, 0xFF	; 255
    4bfa:	83 16       	cp	r8, r19
    4bfc:	93 06       	cpc	r9, r19
    4bfe:	29 f4       	brne	.+10     	; 0x4c0a <vfprintf+0x30a>
    4c00:	b7 01       	movw	r22, r14
    4c02:	8e e2       	ldi	r24, 0x2E	; 46
    4c04:	90 e0       	ldi	r25, 0x00	; 0
    4c06:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4c0a:	c8 14       	cp	r12, r8
    4c0c:	d9 04       	cpc	r13, r9
    4c0e:	4c f0       	brlt	.+18     	; 0x4c22 <vfprintf+0x322>
    4c10:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c12:	98 89       	ldd	r25, Y+16	; 0x10
    4c14:	88 15       	cp	r24, r8
    4c16:	99 05       	cpc	r25, r9
    4c18:	24 f4       	brge	.+8      	; 0x4c22 <vfprintf+0x322>
    4c1a:	ed 85       	ldd	r30, Y+13	; 0x0d
    4c1c:	fe 85       	ldd	r31, Y+14	; 0x0e
    4c1e:	81 81       	ldd	r24, Z+1	; 0x01
    4c20:	01 c0       	rjmp	.+2      	; 0x4c24 <vfprintf+0x324>
    4c22:	80 e3       	ldi	r24, 0x30	; 48
    4c24:	f1 e0       	ldi	r31, 0x01	; 1
    4c26:	8f 1a       	sub	r8, r31
    4c28:	91 08       	sbc	r9, r1
    4c2a:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c2c:	3e 85       	ldd	r19, Y+14	; 0x0e
    4c2e:	2f 5f       	subi	r18, 0xFF	; 255
    4c30:	3f 4f       	sbci	r19, 0xFF	; 255
    4c32:	2d 87       	std	Y+13, r18	; 0x0d
    4c34:	3e 87       	std	Y+14, r19	; 0x0e
    4c36:	80 16       	cp	r8, r16
    4c38:	91 06       	cpc	r9, r17
    4c3a:	2c f0       	brlt	.+10     	; 0x4c46 <vfprintf+0x346>
    4c3c:	b7 01       	movw	r22, r14
    4c3e:	90 e0       	ldi	r25, 0x00	; 0
    4c40:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4c44:	d9 cf       	rjmp	.-78     	; 0x4bf8 <vfprintf+0x2f8>
    4c46:	c8 14       	cp	r12, r8
    4c48:	d9 04       	cpc	r13, r9
    4c4a:	41 f4       	brne	.+16     	; 0x4c5c <vfprintf+0x35c>
    4c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c4e:	96 33       	cpi	r25, 0x36	; 54
    4c50:	20 f4       	brcc	.+8      	; 0x4c5a <vfprintf+0x35a>
    4c52:	95 33       	cpi	r25, 0x35	; 53
    4c54:	19 f4       	brne	.+6      	; 0x4c5c <vfprintf+0x35c>
    4c56:	3c 85       	ldd	r19, Y+12	; 0x0c
    4c58:	34 ff       	sbrs	r19, 4
    4c5a:	81 e3       	ldi	r24, 0x31	; 49
    4c5c:	b7 01       	movw	r22, r14
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	4e c0       	rjmp	.+156    	; 0x4cfe <vfprintf+0x3fe>
    4c62:	8a 81       	ldd	r24, Y+2	; 0x02
    4c64:	81 33       	cpi	r24, 0x31	; 49
    4c66:	19 f0       	breq	.+6      	; 0x4c6e <vfprintf+0x36e>
    4c68:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c6a:	9f 7e       	andi	r25, 0xEF	; 239
    4c6c:	9c 87       	std	Y+12, r25	; 0x0c
    4c6e:	b7 01       	movw	r22, r14
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4c76:	11 11       	cpse	r17, r1
    4c78:	05 c0       	rjmp	.+10     	; 0x4c84 <vfprintf+0x384>
    4c7a:	94 fc       	sbrc	r9, 4
    4c7c:	18 c0       	rjmp	.+48     	; 0x4cae <vfprintf+0x3ae>
    4c7e:	85 e6       	ldi	r24, 0x65	; 101
    4c80:	90 e0       	ldi	r25, 0x00	; 0
    4c82:	17 c0       	rjmp	.+46     	; 0x4cb2 <vfprintf+0x3b2>
    4c84:	b7 01       	movw	r22, r14
    4c86:	8e e2       	ldi	r24, 0x2E	; 46
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4c8e:	1e 5f       	subi	r17, 0xFE	; 254
    4c90:	82 e0       	ldi	r24, 0x02	; 2
    4c92:	01 e0       	ldi	r16, 0x01	; 1
    4c94:	08 0f       	add	r16, r24
    4c96:	f3 01       	movw	r30, r6
    4c98:	e8 0f       	add	r30, r24
    4c9a:	f1 1d       	adc	r31, r1
    4c9c:	80 81       	ld	r24, Z
    4c9e:	b7 01       	movw	r22, r14
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4ca6:	80 2f       	mov	r24, r16
    4ca8:	01 13       	cpse	r16, r17
    4caa:	f3 cf       	rjmp	.-26     	; 0x4c92 <vfprintf+0x392>
    4cac:	e6 cf       	rjmp	.-52     	; 0x4c7a <vfprintf+0x37a>
    4cae:	85 e4       	ldi	r24, 0x45	; 69
    4cb0:	90 e0       	ldi	r25, 0x00	; 0
    4cb2:	b7 01       	movw	r22, r14
    4cb4:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4cb8:	d7 fc       	sbrc	r13, 7
    4cba:	06 c0       	rjmp	.+12     	; 0x4cc8 <vfprintf+0x3c8>
    4cbc:	c1 14       	cp	r12, r1
    4cbe:	d1 04       	cpc	r13, r1
    4cc0:	41 f4       	brne	.+16     	; 0x4cd2 <vfprintf+0x3d2>
    4cc2:	ec 85       	ldd	r30, Y+12	; 0x0c
    4cc4:	e4 ff       	sbrs	r30, 4
    4cc6:	05 c0       	rjmp	.+10     	; 0x4cd2 <vfprintf+0x3d2>
    4cc8:	d1 94       	neg	r13
    4cca:	c1 94       	neg	r12
    4ccc:	d1 08       	sbc	r13, r1
    4cce:	8d e2       	ldi	r24, 0x2D	; 45
    4cd0:	01 c0       	rjmp	.+2      	; 0x4cd4 <vfprintf+0x3d4>
    4cd2:	8b e2       	ldi	r24, 0x2B	; 43
    4cd4:	b7 01       	movw	r22, r14
    4cd6:	90 e0       	ldi	r25, 0x00	; 0
    4cd8:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4cdc:	80 e3       	ldi	r24, 0x30	; 48
    4cde:	2a e0       	ldi	r18, 0x0A	; 10
    4ce0:	c2 16       	cp	r12, r18
    4ce2:	d1 04       	cpc	r13, r1
    4ce4:	2c f0       	brlt	.+10     	; 0x4cf0 <vfprintf+0x3f0>
    4ce6:	8f 5f       	subi	r24, 0xFF	; 255
    4ce8:	fa e0       	ldi	r31, 0x0A	; 10
    4cea:	cf 1a       	sub	r12, r31
    4cec:	d1 08       	sbc	r13, r1
    4cee:	f7 cf       	rjmp	.-18     	; 0x4cde <vfprintf+0x3de>
    4cf0:	b7 01       	movw	r22, r14
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4cf8:	b7 01       	movw	r22, r14
    4cfa:	c6 01       	movw	r24, r12
    4cfc:	c0 96       	adiw	r24, 0x30	; 48
    4cfe:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4d02:	54 c1       	rjmp	.+680    	; 0x4fac <vfprintf+0x6ac>
    4d04:	83 36       	cpi	r24, 0x63	; 99
    4d06:	31 f0       	breq	.+12     	; 0x4d14 <vfprintf+0x414>
    4d08:	83 37       	cpi	r24, 0x73	; 115
    4d0a:	79 f0       	breq	.+30     	; 0x4d2a <vfprintf+0x42a>
    4d0c:	83 35       	cpi	r24, 0x53	; 83
    4d0e:	09 f0       	breq	.+2      	; 0x4d12 <vfprintf+0x412>
    4d10:	56 c0       	rjmp	.+172    	; 0x4dbe <vfprintf+0x4be>
    4d12:	20 c0       	rjmp	.+64     	; 0x4d54 <vfprintf+0x454>
    4d14:	56 01       	movw	r10, r12
    4d16:	32 e0       	ldi	r19, 0x02	; 2
    4d18:	a3 0e       	add	r10, r19
    4d1a:	b1 1c       	adc	r11, r1
    4d1c:	f6 01       	movw	r30, r12
    4d1e:	80 81       	ld	r24, Z
    4d20:	89 83       	std	Y+1, r24	; 0x01
    4d22:	01 e0       	ldi	r16, 0x01	; 1
    4d24:	10 e0       	ldi	r17, 0x00	; 0
    4d26:	63 01       	movw	r12, r6
    4d28:	12 c0       	rjmp	.+36     	; 0x4d4e <vfprintf+0x44e>
    4d2a:	56 01       	movw	r10, r12
    4d2c:	f2 e0       	ldi	r31, 0x02	; 2
    4d2e:	af 0e       	add	r10, r31
    4d30:	b1 1c       	adc	r11, r1
    4d32:	f6 01       	movw	r30, r12
    4d34:	c0 80       	ld	r12, Z
    4d36:	d1 80       	ldd	r13, Z+1	; 0x01
    4d38:	96 fe       	sbrs	r9, 6
    4d3a:	03 c0       	rjmp	.+6      	; 0x4d42 <vfprintf+0x442>
    4d3c:	61 2f       	mov	r22, r17
    4d3e:	70 e0       	ldi	r23, 0x00	; 0
    4d40:	02 c0       	rjmp	.+4      	; 0x4d46 <vfprintf+0x446>
    4d42:	6f ef       	ldi	r22, 0xFF	; 255
    4d44:	7f ef       	ldi	r23, 0xFF	; 255
    4d46:	c6 01       	movw	r24, r12
    4d48:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <strnlen>
    4d4c:	8c 01       	movw	r16, r24
    4d4e:	f9 2d       	mov	r31, r9
    4d50:	ff 77       	andi	r31, 0x7F	; 127
    4d52:	14 c0       	rjmp	.+40     	; 0x4d7c <vfprintf+0x47c>
    4d54:	56 01       	movw	r10, r12
    4d56:	22 e0       	ldi	r18, 0x02	; 2
    4d58:	a2 0e       	add	r10, r18
    4d5a:	b1 1c       	adc	r11, r1
    4d5c:	f6 01       	movw	r30, r12
    4d5e:	c0 80       	ld	r12, Z
    4d60:	d1 80       	ldd	r13, Z+1	; 0x01
    4d62:	96 fe       	sbrs	r9, 6
    4d64:	03 c0       	rjmp	.+6      	; 0x4d6c <vfprintf+0x46c>
    4d66:	61 2f       	mov	r22, r17
    4d68:	70 e0       	ldi	r23, 0x00	; 0
    4d6a:	02 c0       	rjmp	.+4      	; 0x4d70 <vfprintf+0x470>
    4d6c:	6f ef       	ldi	r22, 0xFF	; 255
    4d6e:	7f ef       	ldi	r23, 0xFF	; 255
    4d70:	c6 01       	movw	r24, r12
    4d72:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <strnlen_P>
    4d76:	8c 01       	movw	r16, r24
    4d78:	f9 2d       	mov	r31, r9
    4d7a:	f0 68       	ori	r31, 0x80	; 128
    4d7c:	9f 2e       	mov	r9, r31
    4d7e:	f3 fd       	sbrc	r31, 3
    4d80:	1a c0       	rjmp	.+52     	; 0x4db6 <vfprintf+0x4b6>
    4d82:	85 2d       	mov	r24, r5
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	08 17       	cp	r16, r24
    4d88:	19 07       	cpc	r17, r25
    4d8a:	a8 f4       	brcc	.+42     	; 0x4db6 <vfprintf+0x4b6>
    4d8c:	b7 01       	movw	r22, r14
    4d8e:	80 e2       	ldi	r24, 0x20	; 32
    4d90:	90 e0       	ldi	r25, 0x00	; 0
    4d92:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4d96:	5a 94       	dec	r5
    4d98:	f4 cf       	rjmp	.-24     	; 0x4d82 <vfprintf+0x482>
    4d9a:	f6 01       	movw	r30, r12
    4d9c:	97 fc       	sbrc	r9, 7
    4d9e:	85 91       	lpm	r24, Z+
    4da0:	97 fe       	sbrs	r9, 7
    4da2:	81 91       	ld	r24, Z+
    4da4:	6f 01       	movw	r12, r30
    4da6:	b7 01       	movw	r22, r14
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4dae:	51 10       	cpse	r5, r1
    4db0:	5a 94       	dec	r5
    4db2:	01 50       	subi	r16, 0x01	; 1
    4db4:	11 09       	sbc	r17, r1
    4db6:	01 15       	cp	r16, r1
    4db8:	11 05       	cpc	r17, r1
    4dba:	79 f7       	brne	.-34     	; 0x4d9a <vfprintf+0x49a>
    4dbc:	f7 c0       	rjmp	.+494    	; 0x4fac <vfprintf+0x6ac>
    4dbe:	84 36       	cpi	r24, 0x64	; 100
    4dc0:	11 f0       	breq	.+4      	; 0x4dc6 <vfprintf+0x4c6>
    4dc2:	89 36       	cpi	r24, 0x69	; 105
    4dc4:	61 f5       	brne	.+88     	; 0x4e1e <vfprintf+0x51e>
    4dc6:	56 01       	movw	r10, r12
    4dc8:	97 fe       	sbrs	r9, 7
    4dca:	09 c0       	rjmp	.+18     	; 0x4dde <vfprintf+0x4de>
    4dcc:	24 e0       	ldi	r18, 0x04	; 4
    4dce:	a2 0e       	add	r10, r18
    4dd0:	b1 1c       	adc	r11, r1
    4dd2:	f6 01       	movw	r30, r12
    4dd4:	60 81       	ld	r22, Z
    4dd6:	71 81       	ldd	r23, Z+1	; 0x01
    4dd8:	82 81       	ldd	r24, Z+2	; 0x02
    4dda:	93 81       	ldd	r25, Z+3	; 0x03
    4ddc:	0a c0       	rjmp	.+20     	; 0x4df2 <vfprintf+0x4f2>
    4dde:	f2 e0       	ldi	r31, 0x02	; 2
    4de0:	af 0e       	add	r10, r31
    4de2:	b1 1c       	adc	r11, r1
    4de4:	f6 01       	movw	r30, r12
    4de6:	60 81       	ld	r22, Z
    4de8:	71 81       	ldd	r23, Z+1	; 0x01
    4dea:	07 2e       	mov	r0, r23
    4dec:	00 0c       	add	r0, r0
    4dee:	88 0b       	sbc	r24, r24
    4df0:	99 0b       	sbc	r25, r25
    4df2:	f9 2d       	mov	r31, r9
    4df4:	ff 76       	andi	r31, 0x6F	; 111
    4df6:	9f 2e       	mov	r9, r31
    4df8:	97 ff       	sbrs	r25, 7
    4dfa:	09 c0       	rjmp	.+18     	; 0x4e0e <vfprintf+0x50e>
    4dfc:	90 95       	com	r25
    4dfe:	80 95       	com	r24
    4e00:	70 95       	com	r23
    4e02:	61 95       	neg	r22
    4e04:	7f 4f       	sbci	r23, 0xFF	; 255
    4e06:	8f 4f       	sbci	r24, 0xFF	; 255
    4e08:	9f 4f       	sbci	r25, 0xFF	; 255
    4e0a:	f0 68       	ori	r31, 0x80	; 128
    4e0c:	9f 2e       	mov	r9, r31
    4e0e:	2a e0       	ldi	r18, 0x0A	; 10
    4e10:	30 e0       	ldi	r19, 0x00	; 0
    4e12:	a3 01       	movw	r20, r6
    4e14:	0e 94 c6 2a 	call	0x558c	; 0x558c <__ultoa_invert>
    4e18:	c8 2e       	mov	r12, r24
    4e1a:	c6 18       	sub	r12, r6
    4e1c:	3f c0       	rjmp	.+126    	; 0x4e9c <vfprintf+0x59c>
    4e1e:	09 2d       	mov	r16, r9
    4e20:	85 37       	cpi	r24, 0x75	; 117
    4e22:	21 f4       	brne	.+8      	; 0x4e2c <vfprintf+0x52c>
    4e24:	0f 7e       	andi	r16, 0xEF	; 239
    4e26:	2a e0       	ldi	r18, 0x0A	; 10
    4e28:	30 e0       	ldi	r19, 0x00	; 0
    4e2a:	1d c0       	rjmp	.+58     	; 0x4e66 <vfprintf+0x566>
    4e2c:	09 7f       	andi	r16, 0xF9	; 249
    4e2e:	8f 36       	cpi	r24, 0x6F	; 111
    4e30:	91 f0       	breq	.+36     	; 0x4e56 <vfprintf+0x556>
    4e32:	18 f4       	brcc	.+6      	; 0x4e3a <vfprintf+0x53a>
    4e34:	88 35       	cpi	r24, 0x58	; 88
    4e36:	59 f0       	breq	.+22     	; 0x4e4e <vfprintf+0x54e>
    4e38:	c3 c0       	rjmp	.+390    	; 0x4fc0 <vfprintf+0x6c0>
    4e3a:	80 37       	cpi	r24, 0x70	; 112
    4e3c:	19 f0       	breq	.+6      	; 0x4e44 <vfprintf+0x544>
    4e3e:	88 37       	cpi	r24, 0x78	; 120
    4e40:	11 f0       	breq	.+4      	; 0x4e46 <vfprintf+0x546>
    4e42:	be c0       	rjmp	.+380    	; 0x4fc0 <vfprintf+0x6c0>
    4e44:	00 61       	ori	r16, 0x10	; 16
    4e46:	04 ff       	sbrs	r16, 4
    4e48:	09 c0       	rjmp	.+18     	; 0x4e5c <vfprintf+0x55c>
    4e4a:	04 60       	ori	r16, 0x04	; 4
    4e4c:	07 c0       	rjmp	.+14     	; 0x4e5c <vfprintf+0x55c>
    4e4e:	94 fe       	sbrs	r9, 4
    4e50:	08 c0       	rjmp	.+16     	; 0x4e62 <vfprintf+0x562>
    4e52:	06 60       	ori	r16, 0x06	; 6
    4e54:	06 c0       	rjmp	.+12     	; 0x4e62 <vfprintf+0x562>
    4e56:	28 e0       	ldi	r18, 0x08	; 8
    4e58:	30 e0       	ldi	r19, 0x00	; 0
    4e5a:	05 c0       	rjmp	.+10     	; 0x4e66 <vfprintf+0x566>
    4e5c:	20 e1       	ldi	r18, 0x10	; 16
    4e5e:	30 e0       	ldi	r19, 0x00	; 0
    4e60:	02 c0       	rjmp	.+4      	; 0x4e66 <vfprintf+0x566>
    4e62:	20 e1       	ldi	r18, 0x10	; 16
    4e64:	32 e0       	ldi	r19, 0x02	; 2
    4e66:	56 01       	movw	r10, r12
    4e68:	07 ff       	sbrs	r16, 7
    4e6a:	09 c0       	rjmp	.+18     	; 0x4e7e <vfprintf+0x57e>
    4e6c:	84 e0       	ldi	r24, 0x04	; 4
    4e6e:	a8 0e       	add	r10, r24
    4e70:	b1 1c       	adc	r11, r1
    4e72:	f6 01       	movw	r30, r12
    4e74:	60 81       	ld	r22, Z
    4e76:	71 81       	ldd	r23, Z+1	; 0x01
    4e78:	82 81       	ldd	r24, Z+2	; 0x02
    4e7a:	93 81       	ldd	r25, Z+3	; 0x03
    4e7c:	08 c0       	rjmp	.+16     	; 0x4e8e <vfprintf+0x58e>
    4e7e:	f2 e0       	ldi	r31, 0x02	; 2
    4e80:	af 0e       	add	r10, r31
    4e82:	b1 1c       	adc	r11, r1
    4e84:	f6 01       	movw	r30, r12
    4e86:	60 81       	ld	r22, Z
    4e88:	71 81       	ldd	r23, Z+1	; 0x01
    4e8a:	80 e0       	ldi	r24, 0x00	; 0
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	a3 01       	movw	r20, r6
    4e90:	0e 94 c6 2a 	call	0x558c	; 0x558c <__ultoa_invert>
    4e94:	c8 2e       	mov	r12, r24
    4e96:	c6 18       	sub	r12, r6
    4e98:	0f 77       	andi	r16, 0x7F	; 127
    4e9a:	90 2e       	mov	r9, r16
    4e9c:	96 fe       	sbrs	r9, 6
    4e9e:	0b c0       	rjmp	.+22     	; 0x4eb6 <vfprintf+0x5b6>
    4ea0:	09 2d       	mov	r16, r9
    4ea2:	0e 7f       	andi	r16, 0xFE	; 254
    4ea4:	c1 16       	cp	r12, r17
    4ea6:	50 f4       	brcc	.+20     	; 0x4ebc <vfprintf+0x5bc>
    4ea8:	94 fe       	sbrs	r9, 4
    4eaa:	0a c0       	rjmp	.+20     	; 0x4ec0 <vfprintf+0x5c0>
    4eac:	92 fc       	sbrc	r9, 2
    4eae:	08 c0       	rjmp	.+16     	; 0x4ec0 <vfprintf+0x5c0>
    4eb0:	09 2d       	mov	r16, r9
    4eb2:	0e 7e       	andi	r16, 0xEE	; 238
    4eb4:	05 c0       	rjmp	.+10     	; 0x4ec0 <vfprintf+0x5c0>
    4eb6:	dc 2c       	mov	r13, r12
    4eb8:	09 2d       	mov	r16, r9
    4eba:	03 c0       	rjmp	.+6      	; 0x4ec2 <vfprintf+0x5c2>
    4ebc:	dc 2c       	mov	r13, r12
    4ebe:	01 c0       	rjmp	.+2      	; 0x4ec2 <vfprintf+0x5c2>
    4ec0:	d1 2e       	mov	r13, r17
    4ec2:	04 ff       	sbrs	r16, 4
    4ec4:	0d c0       	rjmp	.+26     	; 0x4ee0 <vfprintf+0x5e0>
    4ec6:	fe 01       	movw	r30, r28
    4ec8:	ec 0d       	add	r30, r12
    4eca:	f1 1d       	adc	r31, r1
    4ecc:	80 81       	ld	r24, Z
    4ece:	80 33       	cpi	r24, 0x30	; 48
    4ed0:	11 f4       	brne	.+4      	; 0x4ed6 <vfprintf+0x5d6>
    4ed2:	09 7e       	andi	r16, 0xE9	; 233
    4ed4:	09 c0       	rjmp	.+18     	; 0x4ee8 <vfprintf+0x5e8>
    4ed6:	02 ff       	sbrs	r16, 2
    4ed8:	06 c0       	rjmp	.+12     	; 0x4ee6 <vfprintf+0x5e6>
    4eda:	d3 94       	inc	r13
    4edc:	d3 94       	inc	r13
    4ede:	04 c0       	rjmp	.+8      	; 0x4ee8 <vfprintf+0x5e8>
    4ee0:	80 2f       	mov	r24, r16
    4ee2:	86 78       	andi	r24, 0x86	; 134
    4ee4:	09 f0       	breq	.+2      	; 0x4ee8 <vfprintf+0x5e8>
    4ee6:	d3 94       	inc	r13
    4ee8:	03 fd       	sbrc	r16, 3
    4eea:	11 c0       	rjmp	.+34     	; 0x4f0e <vfprintf+0x60e>
    4eec:	00 ff       	sbrs	r16, 0
    4eee:	06 c0       	rjmp	.+12     	; 0x4efc <vfprintf+0x5fc>
    4ef0:	1c 2d       	mov	r17, r12
    4ef2:	d5 14       	cp	r13, r5
    4ef4:	80 f4       	brcc	.+32     	; 0x4f16 <vfprintf+0x616>
    4ef6:	15 0d       	add	r17, r5
    4ef8:	1d 19       	sub	r17, r13
    4efa:	0d c0       	rjmp	.+26     	; 0x4f16 <vfprintf+0x616>
    4efc:	d5 14       	cp	r13, r5
    4efe:	58 f4       	brcc	.+22     	; 0x4f16 <vfprintf+0x616>
    4f00:	b7 01       	movw	r22, r14
    4f02:	80 e2       	ldi	r24, 0x20	; 32
    4f04:	90 e0       	ldi	r25, 0x00	; 0
    4f06:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4f0a:	d3 94       	inc	r13
    4f0c:	f7 cf       	rjmp	.-18     	; 0x4efc <vfprintf+0x5fc>
    4f0e:	d5 14       	cp	r13, r5
    4f10:	10 f4       	brcc	.+4      	; 0x4f16 <vfprintf+0x616>
    4f12:	5d 18       	sub	r5, r13
    4f14:	01 c0       	rjmp	.+2      	; 0x4f18 <vfprintf+0x618>
    4f16:	51 2c       	mov	r5, r1
    4f18:	04 ff       	sbrs	r16, 4
    4f1a:	10 c0       	rjmp	.+32     	; 0x4f3c <vfprintf+0x63c>
    4f1c:	b7 01       	movw	r22, r14
    4f1e:	80 e3       	ldi	r24, 0x30	; 48
    4f20:	90 e0       	ldi	r25, 0x00	; 0
    4f22:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4f26:	02 ff       	sbrs	r16, 2
    4f28:	17 c0       	rjmp	.+46     	; 0x4f58 <vfprintf+0x658>
    4f2a:	01 fd       	sbrc	r16, 1
    4f2c:	03 c0       	rjmp	.+6      	; 0x4f34 <vfprintf+0x634>
    4f2e:	88 e7       	ldi	r24, 0x78	; 120
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	02 c0       	rjmp	.+4      	; 0x4f38 <vfprintf+0x638>
    4f34:	88 e5       	ldi	r24, 0x58	; 88
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	b7 01       	movw	r22, r14
    4f3a:	0c c0       	rjmp	.+24     	; 0x4f54 <vfprintf+0x654>
    4f3c:	80 2f       	mov	r24, r16
    4f3e:	86 78       	andi	r24, 0x86	; 134
    4f40:	59 f0       	breq	.+22     	; 0x4f58 <vfprintf+0x658>
    4f42:	01 ff       	sbrs	r16, 1
    4f44:	02 c0       	rjmp	.+4      	; 0x4f4a <vfprintf+0x64a>
    4f46:	8b e2       	ldi	r24, 0x2B	; 43
    4f48:	01 c0       	rjmp	.+2      	; 0x4f4c <vfprintf+0x64c>
    4f4a:	80 e2       	ldi	r24, 0x20	; 32
    4f4c:	07 fd       	sbrc	r16, 7
    4f4e:	8d e2       	ldi	r24, 0x2D	; 45
    4f50:	b7 01       	movw	r22, r14
    4f52:	90 e0       	ldi	r25, 0x00	; 0
    4f54:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4f58:	c1 16       	cp	r12, r17
    4f5a:	38 f4       	brcc	.+14     	; 0x4f6a <vfprintf+0x66a>
    4f5c:	b7 01       	movw	r22, r14
    4f5e:	80 e3       	ldi	r24, 0x30	; 48
    4f60:	90 e0       	ldi	r25, 0x00	; 0
    4f62:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4f66:	11 50       	subi	r17, 0x01	; 1
    4f68:	f7 cf       	rjmp	.-18     	; 0x4f58 <vfprintf+0x658>
    4f6a:	ca 94       	dec	r12
    4f6c:	f3 01       	movw	r30, r6
    4f6e:	ec 0d       	add	r30, r12
    4f70:	f1 1d       	adc	r31, r1
    4f72:	80 81       	ld	r24, Z
    4f74:	b7 01       	movw	r22, r14
    4f76:	90 e0       	ldi	r25, 0x00	; 0
    4f78:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4f7c:	c1 10       	cpse	r12, r1
    4f7e:	f5 cf       	rjmp	.-22     	; 0x4f6a <vfprintf+0x66a>
    4f80:	15 c0       	rjmp	.+42     	; 0x4fac <vfprintf+0x6ac>
    4f82:	f4 e0       	ldi	r31, 0x04	; 4
    4f84:	f5 15       	cp	r31, r5
    4f86:	60 f5       	brcc	.+88     	; 0x4fe0 <vfprintf+0x6e0>
    4f88:	84 e0       	ldi	r24, 0x04	; 4
    4f8a:	58 1a       	sub	r5, r24
    4f8c:	93 fe       	sbrs	r9, 3
    4f8e:	1f c0       	rjmp	.+62     	; 0x4fce <vfprintf+0x6ce>
    4f90:	01 11       	cpse	r16, r1
    4f92:	27 c0       	rjmp	.+78     	; 0x4fe2 <vfprintf+0x6e2>
    4f94:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f96:	23 ff       	sbrs	r18, 3
    4f98:	2a c0       	rjmp	.+84     	; 0x4fee <vfprintf+0x6ee>
    4f9a:	08 e2       	ldi	r16, 0x28	; 40
    4f9c:	12 e0       	ldi	r17, 0x02	; 2
    4f9e:	39 2d       	mov	r19, r9
    4fa0:	30 71       	andi	r19, 0x10	; 16
    4fa2:	93 2e       	mov	r9, r19
    4fa4:	f8 01       	movw	r30, r16
    4fa6:	84 91       	lpm	r24, Z
    4fa8:	81 11       	cpse	r24, r1
    4faa:	24 c0       	rjmp	.+72     	; 0x4ff4 <vfprintf+0x6f4>
    4fac:	55 20       	and	r5, r5
    4fae:	09 f4       	brne	.+2      	; 0x4fb2 <vfprintf+0x6b2>
    4fb0:	e4 cc       	rjmp	.-1592   	; 0x497a <vfprintf+0x7a>
    4fb2:	b7 01       	movw	r22, r14
    4fb4:	80 e2       	ldi	r24, 0x20	; 32
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4fbc:	5a 94       	dec	r5
    4fbe:	f6 cf       	rjmp	.-20     	; 0x4fac <vfprintf+0x6ac>
    4fc0:	f7 01       	movw	r30, r14
    4fc2:	86 81       	ldd	r24, Z+6	; 0x06
    4fc4:	97 81       	ldd	r25, Z+7	; 0x07
    4fc6:	26 c0       	rjmp	.+76     	; 0x5014 <vfprintf+0x714>
    4fc8:	8f ef       	ldi	r24, 0xFF	; 255
    4fca:	9f ef       	ldi	r25, 0xFF	; 255
    4fcc:	23 c0       	rjmp	.+70     	; 0x5014 <vfprintf+0x714>
    4fce:	b7 01       	movw	r22, r14
    4fd0:	80 e2       	ldi	r24, 0x20	; 32
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
    4fd4:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4fd8:	5a 94       	dec	r5
    4fda:	51 10       	cpse	r5, r1
    4fdc:	f8 cf       	rjmp	.-16     	; 0x4fce <vfprintf+0x6ce>
    4fde:	d8 cf       	rjmp	.-80     	; 0x4f90 <vfprintf+0x690>
    4fe0:	51 2c       	mov	r5, r1
    4fe2:	b7 01       	movw	r22, r14
    4fe4:	80 2f       	mov	r24, r16
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    4fec:	d3 cf       	rjmp	.-90     	; 0x4f94 <vfprintf+0x694>
    4fee:	0c e2       	ldi	r16, 0x2C	; 44
    4ff0:	12 e0       	ldi	r17, 0x02	; 2
    4ff2:	d5 cf       	rjmp	.-86     	; 0x4f9e <vfprintf+0x69e>
    4ff4:	91 10       	cpse	r9, r1
    4ff6:	80 52       	subi	r24, 0x20	; 32
    4ff8:	b7 01       	movw	r22, r14
    4ffa:	90 e0       	ldi	r25, 0x00	; 0
    4ffc:	0e 94 76 2a 	call	0x54ec	; 0x54ec <fputc>
    5000:	0f 5f       	subi	r16, 0xFF	; 255
    5002:	1f 4f       	sbci	r17, 0xFF	; 255
    5004:	cf cf       	rjmp	.-98     	; 0x4fa4 <vfprintf+0x6a4>
    5006:	23 e0       	ldi	r18, 0x03	; 3
    5008:	25 15       	cp	r18, r5
    500a:	10 f4       	brcc	.+4      	; 0x5010 <vfprintf+0x710>
    500c:	83 e0       	ldi	r24, 0x03	; 3
    500e:	bd cf       	rjmp	.-134    	; 0x4f8a <vfprintf+0x68a>
    5010:	51 2c       	mov	r5, r1
    5012:	c0 cf       	rjmp	.-128    	; 0x4f94 <vfprintf+0x694>
    5014:	60 96       	adiw	r28, 0x10	; 16
    5016:	cd bf       	out	0x3d, r28	; 61
    5018:	de bf       	out	0x3e, r29	; 62
    501a:	df 91       	pop	r29
    501c:	cf 91       	pop	r28
    501e:	1f 91       	pop	r17
    5020:	0f 91       	pop	r16
    5022:	ff 90       	pop	r15
    5024:	ef 90       	pop	r14
    5026:	df 90       	pop	r13
    5028:	cf 90       	pop	r12
    502a:	bf 90       	pop	r11
    502c:	af 90       	pop	r10
    502e:	9f 90       	pop	r9
    5030:	8f 90       	pop	r8
    5032:	7f 90       	pop	r7
    5034:	6f 90       	pop	r6
    5036:	5f 90       	pop	r5
    5038:	4f 90       	pop	r4
    503a:	3f 90       	pop	r3
    503c:	2f 90       	pop	r2
    503e:	08 95       	ret

00005040 <__udivmodhi4>:
    5040:	aa 1b       	sub	r26, r26
    5042:	bb 1b       	sub	r27, r27
    5044:	51 e1       	ldi	r21, 0x11	; 17
    5046:	07 c0       	rjmp	.+14     	; 0x5056 <__udivmodhi4_ep>

00005048 <__udivmodhi4_loop>:
    5048:	aa 1f       	adc	r26, r26
    504a:	bb 1f       	adc	r27, r27
    504c:	a6 17       	cp	r26, r22
    504e:	b7 07       	cpc	r27, r23
    5050:	10 f0       	brcs	.+4      	; 0x5056 <__udivmodhi4_ep>
    5052:	a6 1b       	sub	r26, r22
    5054:	b7 0b       	sbc	r27, r23

00005056 <__udivmodhi4_ep>:
    5056:	88 1f       	adc	r24, r24
    5058:	99 1f       	adc	r25, r25
    505a:	5a 95       	dec	r21
    505c:	a9 f7       	brne	.-22     	; 0x5048 <__udivmodhi4_loop>
    505e:	80 95       	com	r24
    5060:	90 95       	com	r25
    5062:	bc 01       	movw	r22, r24
    5064:	cd 01       	movw	r24, r26
    5066:	08 95       	ret

00005068 <__divmodhi4>:
    5068:	97 fb       	bst	r25, 7
    506a:	07 2e       	mov	r0, r23
    506c:	16 f4       	brtc	.+4      	; 0x5072 <__divmodhi4+0xa>
    506e:	00 94       	com	r0
    5070:	07 d0       	rcall	.+14     	; 0x5080 <__divmodhi4_neg1>
    5072:	77 fd       	sbrc	r23, 7
    5074:	09 d0       	rcall	.+18     	; 0x5088 <__divmodhi4_neg2>
    5076:	0e 94 20 28 	call	0x5040	; 0x5040 <__udivmodhi4>
    507a:	07 fc       	sbrc	r0, 7
    507c:	05 d0       	rcall	.+10     	; 0x5088 <__divmodhi4_neg2>
    507e:	3e f4       	brtc	.+14     	; 0x508e <__divmodhi4_exit>

00005080 <__divmodhi4_neg1>:
    5080:	90 95       	com	r25
    5082:	81 95       	neg	r24
    5084:	9f 4f       	sbci	r25, 0xFF	; 255
    5086:	08 95       	ret

00005088 <__divmodhi4_neg2>:
    5088:	70 95       	com	r23
    508a:	61 95       	neg	r22
    508c:	7f 4f       	sbci	r23, 0xFF	; 255

0000508e <__divmodhi4_exit>:
    508e:	08 95       	ret

00005090 <__umulhisi3>:
    5090:	a2 9f       	mul	r26, r18
    5092:	b0 01       	movw	r22, r0
    5094:	b3 9f       	mul	r27, r19
    5096:	c0 01       	movw	r24, r0
    5098:	a3 9f       	mul	r26, r19
    509a:	70 0d       	add	r23, r0
    509c:	81 1d       	adc	r24, r1
    509e:	11 24       	eor	r1, r1
    50a0:	91 1d       	adc	r25, r1
    50a2:	b2 9f       	mul	r27, r18
    50a4:	70 0d       	add	r23, r0
    50a6:	81 1d       	adc	r24, r1
    50a8:	11 24       	eor	r1, r1
    50aa:	91 1d       	adc	r25, r1
    50ac:	08 95       	ret

000050ae <malloc>:
    50ae:	0f 93       	push	r16
    50b0:	1f 93       	push	r17
    50b2:	cf 93       	push	r28
    50b4:	df 93       	push	r29
    50b6:	82 30       	cpi	r24, 0x02	; 2
    50b8:	91 05       	cpc	r25, r1
    50ba:	10 f4       	brcc	.+4      	; 0x50c0 <malloc+0x12>
    50bc:	82 e0       	ldi	r24, 0x02	; 2
    50be:	90 e0       	ldi	r25, 0x00	; 0
    50c0:	e0 91 06 22 	lds	r30, 0x2206	; 0x802206 <__flp>
    50c4:	f0 91 07 22 	lds	r31, 0x2207	; 0x802207 <__flp+0x1>
    50c8:	20 e0       	ldi	r18, 0x00	; 0
    50ca:	30 e0       	ldi	r19, 0x00	; 0
    50cc:	a0 e0       	ldi	r26, 0x00	; 0
    50ce:	b0 e0       	ldi	r27, 0x00	; 0
    50d0:	30 97       	sbiw	r30, 0x00	; 0
    50d2:	19 f1       	breq	.+70     	; 0x511a <malloc+0x6c>
    50d4:	40 81       	ld	r20, Z
    50d6:	51 81       	ldd	r21, Z+1	; 0x01
    50d8:	02 81       	ldd	r16, Z+2	; 0x02
    50da:	13 81       	ldd	r17, Z+3	; 0x03
    50dc:	48 17       	cp	r20, r24
    50de:	59 07       	cpc	r21, r25
    50e0:	c8 f0       	brcs	.+50     	; 0x5114 <malloc+0x66>
    50e2:	84 17       	cp	r24, r20
    50e4:	95 07       	cpc	r25, r21
    50e6:	69 f4       	brne	.+26     	; 0x5102 <malloc+0x54>
    50e8:	10 97       	sbiw	r26, 0x00	; 0
    50ea:	31 f0       	breq	.+12     	; 0x50f8 <malloc+0x4a>
    50ec:	12 96       	adiw	r26, 0x02	; 2
    50ee:	0c 93       	st	X, r16
    50f0:	12 97       	sbiw	r26, 0x02	; 2
    50f2:	13 96       	adiw	r26, 0x03	; 3
    50f4:	1c 93       	st	X, r17
    50f6:	27 c0       	rjmp	.+78     	; 0x5146 <malloc+0x98>
    50f8:	00 93 06 22 	sts	0x2206, r16	; 0x802206 <__flp>
    50fc:	10 93 07 22 	sts	0x2207, r17	; 0x802207 <__flp+0x1>
    5100:	22 c0       	rjmp	.+68     	; 0x5146 <malloc+0x98>
    5102:	21 15       	cp	r18, r1
    5104:	31 05       	cpc	r19, r1
    5106:	19 f0       	breq	.+6      	; 0x510e <malloc+0x60>
    5108:	42 17       	cp	r20, r18
    510a:	53 07       	cpc	r21, r19
    510c:	18 f4       	brcc	.+6      	; 0x5114 <malloc+0x66>
    510e:	9a 01       	movw	r18, r20
    5110:	bd 01       	movw	r22, r26
    5112:	ef 01       	movw	r28, r30
    5114:	df 01       	movw	r26, r30
    5116:	f8 01       	movw	r30, r16
    5118:	db cf       	rjmp	.-74     	; 0x50d0 <malloc+0x22>
    511a:	21 15       	cp	r18, r1
    511c:	31 05       	cpc	r19, r1
    511e:	f9 f0       	breq	.+62     	; 0x515e <malloc+0xb0>
    5120:	28 1b       	sub	r18, r24
    5122:	39 0b       	sbc	r19, r25
    5124:	24 30       	cpi	r18, 0x04	; 4
    5126:	31 05       	cpc	r19, r1
    5128:	80 f4       	brcc	.+32     	; 0x514a <malloc+0x9c>
    512a:	8a 81       	ldd	r24, Y+2	; 0x02
    512c:	9b 81       	ldd	r25, Y+3	; 0x03
    512e:	61 15       	cp	r22, r1
    5130:	71 05       	cpc	r23, r1
    5132:	21 f0       	breq	.+8      	; 0x513c <malloc+0x8e>
    5134:	fb 01       	movw	r30, r22
    5136:	82 83       	std	Z+2, r24	; 0x02
    5138:	93 83       	std	Z+3, r25	; 0x03
    513a:	04 c0       	rjmp	.+8      	; 0x5144 <malloc+0x96>
    513c:	80 93 06 22 	sts	0x2206, r24	; 0x802206 <__flp>
    5140:	90 93 07 22 	sts	0x2207, r25	; 0x802207 <__flp+0x1>
    5144:	fe 01       	movw	r30, r28
    5146:	32 96       	adiw	r30, 0x02	; 2
    5148:	44 c0       	rjmp	.+136    	; 0x51d2 <malloc+0x124>
    514a:	fe 01       	movw	r30, r28
    514c:	e2 0f       	add	r30, r18
    514e:	f3 1f       	adc	r31, r19
    5150:	81 93       	st	Z+, r24
    5152:	91 93       	st	Z+, r25
    5154:	22 50       	subi	r18, 0x02	; 2
    5156:	31 09       	sbc	r19, r1
    5158:	28 83       	st	Y, r18
    515a:	39 83       	std	Y+1, r19	; 0x01
    515c:	3a c0       	rjmp	.+116    	; 0x51d2 <malloc+0x124>
    515e:	20 91 04 22 	lds	r18, 0x2204	; 0x802204 <__brkval>
    5162:	30 91 05 22 	lds	r19, 0x2205	; 0x802205 <__brkval+0x1>
    5166:	23 2b       	or	r18, r19
    5168:	41 f4       	brne	.+16     	; 0x517a <malloc+0xcc>
    516a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    516e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    5172:	20 93 04 22 	sts	0x2204, r18	; 0x802204 <__brkval>
    5176:	30 93 05 22 	sts	0x2205, r19	; 0x802205 <__brkval+0x1>
    517a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    517e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    5182:	21 15       	cp	r18, r1
    5184:	31 05       	cpc	r19, r1
    5186:	41 f4       	brne	.+16     	; 0x5198 <malloc+0xea>
    5188:	2d b7       	in	r18, 0x3d	; 61
    518a:	3e b7       	in	r19, 0x3e	; 62
    518c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    5190:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    5194:	24 1b       	sub	r18, r20
    5196:	35 0b       	sbc	r19, r21
    5198:	e0 91 04 22 	lds	r30, 0x2204	; 0x802204 <__brkval>
    519c:	f0 91 05 22 	lds	r31, 0x2205	; 0x802205 <__brkval+0x1>
    51a0:	e2 17       	cp	r30, r18
    51a2:	f3 07       	cpc	r31, r19
    51a4:	a0 f4       	brcc	.+40     	; 0x51ce <malloc+0x120>
    51a6:	2e 1b       	sub	r18, r30
    51a8:	3f 0b       	sbc	r19, r31
    51aa:	28 17       	cp	r18, r24
    51ac:	39 07       	cpc	r19, r25
    51ae:	78 f0       	brcs	.+30     	; 0x51ce <malloc+0x120>
    51b0:	ac 01       	movw	r20, r24
    51b2:	4e 5f       	subi	r20, 0xFE	; 254
    51b4:	5f 4f       	sbci	r21, 0xFF	; 255
    51b6:	24 17       	cp	r18, r20
    51b8:	35 07       	cpc	r19, r21
    51ba:	48 f0       	brcs	.+18     	; 0x51ce <malloc+0x120>
    51bc:	4e 0f       	add	r20, r30
    51be:	5f 1f       	adc	r21, r31
    51c0:	40 93 04 22 	sts	0x2204, r20	; 0x802204 <__brkval>
    51c4:	50 93 05 22 	sts	0x2205, r21	; 0x802205 <__brkval+0x1>
    51c8:	81 93       	st	Z+, r24
    51ca:	91 93       	st	Z+, r25
    51cc:	02 c0       	rjmp	.+4      	; 0x51d2 <malloc+0x124>
    51ce:	e0 e0       	ldi	r30, 0x00	; 0
    51d0:	f0 e0       	ldi	r31, 0x00	; 0
    51d2:	cf 01       	movw	r24, r30
    51d4:	df 91       	pop	r29
    51d6:	cf 91       	pop	r28
    51d8:	1f 91       	pop	r17
    51da:	0f 91       	pop	r16
    51dc:	08 95       	ret

000051de <free>:
    51de:	cf 93       	push	r28
    51e0:	df 93       	push	r29
    51e2:	00 97       	sbiw	r24, 0x00	; 0
    51e4:	09 f4       	brne	.+2      	; 0x51e8 <free+0xa>
    51e6:	81 c0       	rjmp	.+258    	; 0x52ea <free+0x10c>
    51e8:	fc 01       	movw	r30, r24
    51ea:	32 97       	sbiw	r30, 0x02	; 2
    51ec:	12 82       	std	Z+2, r1	; 0x02
    51ee:	13 82       	std	Z+3, r1	; 0x03
    51f0:	a0 91 06 22 	lds	r26, 0x2206	; 0x802206 <__flp>
    51f4:	b0 91 07 22 	lds	r27, 0x2207	; 0x802207 <__flp+0x1>
    51f8:	10 97       	sbiw	r26, 0x00	; 0
    51fa:	81 f4       	brne	.+32     	; 0x521c <free+0x3e>
    51fc:	20 81       	ld	r18, Z
    51fe:	31 81       	ldd	r19, Z+1	; 0x01
    5200:	82 0f       	add	r24, r18
    5202:	93 1f       	adc	r25, r19
    5204:	20 91 04 22 	lds	r18, 0x2204	; 0x802204 <__brkval>
    5208:	30 91 05 22 	lds	r19, 0x2205	; 0x802205 <__brkval+0x1>
    520c:	28 17       	cp	r18, r24
    520e:	39 07       	cpc	r19, r25
    5210:	51 f5       	brne	.+84     	; 0x5266 <free+0x88>
    5212:	e0 93 04 22 	sts	0x2204, r30	; 0x802204 <__brkval>
    5216:	f0 93 05 22 	sts	0x2205, r31	; 0x802205 <__brkval+0x1>
    521a:	67 c0       	rjmp	.+206    	; 0x52ea <free+0x10c>
    521c:	ed 01       	movw	r28, r26
    521e:	20 e0       	ldi	r18, 0x00	; 0
    5220:	30 e0       	ldi	r19, 0x00	; 0
    5222:	ce 17       	cp	r28, r30
    5224:	df 07       	cpc	r29, r31
    5226:	40 f4       	brcc	.+16     	; 0x5238 <free+0x5a>
    5228:	4a 81       	ldd	r20, Y+2	; 0x02
    522a:	5b 81       	ldd	r21, Y+3	; 0x03
    522c:	9e 01       	movw	r18, r28
    522e:	41 15       	cp	r20, r1
    5230:	51 05       	cpc	r21, r1
    5232:	f1 f0       	breq	.+60     	; 0x5270 <free+0x92>
    5234:	ea 01       	movw	r28, r20
    5236:	f5 cf       	rjmp	.-22     	; 0x5222 <free+0x44>
    5238:	c2 83       	std	Z+2, r28	; 0x02
    523a:	d3 83       	std	Z+3, r29	; 0x03
    523c:	40 81       	ld	r20, Z
    523e:	51 81       	ldd	r21, Z+1	; 0x01
    5240:	84 0f       	add	r24, r20
    5242:	95 1f       	adc	r25, r21
    5244:	c8 17       	cp	r28, r24
    5246:	d9 07       	cpc	r29, r25
    5248:	59 f4       	brne	.+22     	; 0x5260 <free+0x82>
    524a:	88 81       	ld	r24, Y
    524c:	99 81       	ldd	r25, Y+1	; 0x01
    524e:	84 0f       	add	r24, r20
    5250:	95 1f       	adc	r25, r21
    5252:	02 96       	adiw	r24, 0x02	; 2
    5254:	80 83       	st	Z, r24
    5256:	91 83       	std	Z+1, r25	; 0x01
    5258:	8a 81       	ldd	r24, Y+2	; 0x02
    525a:	9b 81       	ldd	r25, Y+3	; 0x03
    525c:	82 83       	std	Z+2, r24	; 0x02
    525e:	93 83       	std	Z+3, r25	; 0x03
    5260:	21 15       	cp	r18, r1
    5262:	31 05       	cpc	r19, r1
    5264:	29 f4       	brne	.+10     	; 0x5270 <free+0x92>
    5266:	e0 93 06 22 	sts	0x2206, r30	; 0x802206 <__flp>
    526a:	f0 93 07 22 	sts	0x2207, r31	; 0x802207 <__flp+0x1>
    526e:	3d c0       	rjmp	.+122    	; 0x52ea <free+0x10c>
    5270:	e9 01       	movw	r28, r18
    5272:	ea 83       	std	Y+2, r30	; 0x02
    5274:	fb 83       	std	Y+3, r31	; 0x03
    5276:	49 91       	ld	r20, Y+
    5278:	59 91       	ld	r21, Y+
    527a:	c4 0f       	add	r28, r20
    527c:	d5 1f       	adc	r29, r21
    527e:	ec 17       	cp	r30, r28
    5280:	fd 07       	cpc	r31, r29
    5282:	61 f4       	brne	.+24     	; 0x529c <free+0xbe>
    5284:	80 81       	ld	r24, Z
    5286:	91 81       	ldd	r25, Z+1	; 0x01
    5288:	84 0f       	add	r24, r20
    528a:	95 1f       	adc	r25, r21
    528c:	02 96       	adiw	r24, 0x02	; 2
    528e:	e9 01       	movw	r28, r18
    5290:	88 83       	st	Y, r24
    5292:	99 83       	std	Y+1, r25	; 0x01
    5294:	82 81       	ldd	r24, Z+2	; 0x02
    5296:	93 81       	ldd	r25, Z+3	; 0x03
    5298:	8a 83       	std	Y+2, r24	; 0x02
    529a:	9b 83       	std	Y+3, r25	; 0x03
    529c:	e0 e0       	ldi	r30, 0x00	; 0
    529e:	f0 e0       	ldi	r31, 0x00	; 0
    52a0:	12 96       	adiw	r26, 0x02	; 2
    52a2:	8d 91       	ld	r24, X+
    52a4:	9c 91       	ld	r25, X
    52a6:	13 97       	sbiw	r26, 0x03	; 3
    52a8:	00 97       	sbiw	r24, 0x00	; 0
    52aa:	19 f0       	breq	.+6      	; 0x52b2 <free+0xd4>
    52ac:	fd 01       	movw	r30, r26
    52ae:	dc 01       	movw	r26, r24
    52b0:	f7 cf       	rjmp	.-18     	; 0x52a0 <free+0xc2>
    52b2:	8d 91       	ld	r24, X+
    52b4:	9c 91       	ld	r25, X
    52b6:	11 97       	sbiw	r26, 0x01	; 1
    52b8:	9d 01       	movw	r18, r26
    52ba:	2e 5f       	subi	r18, 0xFE	; 254
    52bc:	3f 4f       	sbci	r19, 0xFF	; 255
    52be:	82 0f       	add	r24, r18
    52c0:	93 1f       	adc	r25, r19
    52c2:	20 91 04 22 	lds	r18, 0x2204	; 0x802204 <__brkval>
    52c6:	30 91 05 22 	lds	r19, 0x2205	; 0x802205 <__brkval+0x1>
    52ca:	28 17       	cp	r18, r24
    52cc:	39 07       	cpc	r19, r25
    52ce:	69 f4       	brne	.+26     	; 0x52ea <free+0x10c>
    52d0:	30 97       	sbiw	r30, 0x00	; 0
    52d2:	29 f4       	brne	.+10     	; 0x52de <free+0x100>
    52d4:	10 92 06 22 	sts	0x2206, r1	; 0x802206 <__flp>
    52d8:	10 92 07 22 	sts	0x2207, r1	; 0x802207 <__flp+0x1>
    52dc:	02 c0       	rjmp	.+4      	; 0x52e2 <free+0x104>
    52de:	12 82       	std	Z+2, r1	; 0x02
    52e0:	13 82       	std	Z+3, r1	; 0x03
    52e2:	a0 93 04 22 	sts	0x2204, r26	; 0x802204 <__brkval>
    52e6:	b0 93 05 22 	sts	0x2205, r27	; 0x802205 <__brkval+0x1>
    52ea:	df 91       	pop	r29
    52ec:	cf 91       	pop	r28
    52ee:	08 95       	ret

000052f0 <__ftoa_engine>:
    52f0:	28 30       	cpi	r18, 0x08	; 8
    52f2:	08 f0       	brcs	.+2      	; 0x52f6 <__ftoa_engine+0x6>
    52f4:	27 e0       	ldi	r18, 0x07	; 7
    52f6:	33 27       	eor	r19, r19
    52f8:	da 01       	movw	r26, r20
    52fa:	99 0f       	add	r25, r25
    52fc:	31 1d       	adc	r19, r1
    52fe:	87 fd       	sbrc	r24, 7
    5300:	91 60       	ori	r25, 0x01	; 1
    5302:	00 96       	adiw	r24, 0x00	; 0
    5304:	61 05       	cpc	r22, r1
    5306:	71 05       	cpc	r23, r1
    5308:	39 f4       	brne	.+14     	; 0x5318 <__ftoa_engine+0x28>
    530a:	32 60       	ori	r19, 0x02	; 2
    530c:	2e 5f       	subi	r18, 0xFE	; 254
    530e:	3d 93       	st	X+, r19
    5310:	30 e3       	ldi	r19, 0x30	; 48
    5312:	2a 95       	dec	r18
    5314:	e1 f7       	brne	.-8      	; 0x530e <__ftoa_engine+0x1e>
    5316:	08 95       	ret
    5318:	9f 3f       	cpi	r25, 0xFF	; 255
    531a:	30 f0       	brcs	.+12     	; 0x5328 <__ftoa_engine+0x38>
    531c:	80 38       	cpi	r24, 0x80	; 128
    531e:	71 05       	cpc	r23, r1
    5320:	61 05       	cpc	r22, r1
    5322:	09 f0       	breq	.+2      	; 0x5326 <__ftoa_engine+0x36>
    5324:	3c 5f       	subi	r19, 0xFC	; 252
    5326:	3c 5f       	subi	r19, 0xFC	; 252
    5328:	3d 93       	st	X+, r19
    532a:	91 30       	cpi	r25, 0x01	; 1
    532c:	08 f0       	brcs	.+2      	; 0x5330 <__ftoa_engine+0x40>
    532e:	80 68       	ori	r24, 0x80	; 128
    5330:	91 1d       	adc	r25, r1
    5332:	df 93       	push	r29
    5334:	cf 93       	push	r28
    5336:	1f 93       	push	r17
    5338:	0f 93       	push	r16
    533a:	ff 92       	push	r15
    533c:	ef 92       	push	r14
    533e:	19 2f       	mov	r17, r25
    5340:	98 7f       	andi	r25, 0xF8	; 248
    5342:	96 95       	lsr	r25
    5344:	e9 2f       	mov	r30, r25
    5346:	96 95       	lsr	r25
    5348:	96 95       	lsr	r25
    534a:	e9 0f       	add	r30, r25
    534c:	ff 27       	eor	r31, r31
    534e:	e6 57       	subi	r30, 0x76	; 118
    5350:	fd 4f       	sbci	r31, 0xFD	; 253
    5352:	99 27       	eor	r25, r25
    5354:	33 27       	eor	r19, r19
    5356:	ee 24       	eor	r14, r14
    5358:	ff 24       	eor	r15, r15
    535a:	a7 01       	movw	r20, r14
    535c:	e7 01       	movw	r28, r14
    535e:	05 90       	lpm	r0, Z+
    5360:	08 94       	sec
    5362:	07 94       	ror	r0
    5364:	28 f4       	brcc	.+10     	; 0x5370 <__ftoa_engine+0x80>
    5366:	36 0f       	add	r19, r22
    5368:	e7 1e       	adc	r14, r23
    536a:	f8 1e       	adc	r15, r24
    536c:	49 1f       	adc	r20, r25
    536e:	51 1d       	adc	r21, r1
    5370:	66 0f       	add	r22, r22
    5372:	77 1f       	adc	r23, r23
    5374:	88 1f       	adc	r24, r24
    5376:	99 1f       	adc	r25, r25
    5378:	06 94       	lsr	r0
    537a:	a1 f7       	brne	.-24     	; 0x5364 <__ftoa_engine+0x74>
    537c:	05 90       	lpm	r0, Z+
    537e:	07 94       	ror	r0
    5380:	28 f4       	brcc	.+10     	; 0x538c <__ftoa_engine+0x9c>
    5382:	e7 0e       	add	r14, r23
    5384:	f8 1e       	adc	r15, r24
    5386:	49 1f       	adc	r20, r25
    5388:	56 1f       	adc	r21, r22
    538a:	c1 1d       	adc	r28, r1
    538c:	77 0f       	add	r23, r23
    538e:	88 1f       	adc	r24, r24
    5390:	99 1f       	adc	r25, r25
    5392:	66 1f       	adc	r22, r22
    5394:	06 94       	lsr	r0
    5396:	a1 f7       	brne	.-24     	; 0x5380 <__ftoa_engine+0x90>
    5398:	05 90       	lpm	r0, Z+
    539a:	07 94       	ror	r0
    539c:	28 f4       	brcc	.+10     	; 0x53a8 <__ftoa_engine+0xb8>
    539e:	f8 0e       	add	r15, r24
    53a0:	49 1f       	adc	r20, r25
    53a2:	56 1f       	adc	r21, r22
    53a4:	c7 1f       	adc	r28, r23
    53a6:	d1 1d       	adc	r29, r1
    53a8:	88 0f       	add	r24, r24
    53aa:	99 1f       	adc	r25, r25
    53ac:	66 1f       	adc	r22, r22
    53ae:	77 1f       	adc	r23, r23
    53b0:	06 94       	lsr	r0
    53b2:	a1 f7       	brne	.-24     	; 0x539c <__ftoa_engine+0xac>
    53b4:	05 90       	lpm	r0, Z+
    53b6:	07 94       	ror	r0
    53b8:	20 f4       	brcc	.+8      	; 0x53c2 <__ftoa_engine+0xd2>
    53ba:	49 0f       	add	r20, r25
    53bc:	56 1f       	adc	r21, r22
    53be:	c7 1f       	adc	r28, r23
    53c0:	d8 1f       	adc	r29, r24
    53c2:	99 0f       	add	r25, r25
    53c4:	66 1f       	adc	r22, r22
    53c6:	77 1f       	adc	r23, r23
    53c8:	88 1f       	adc	r24, r24
    53ca:	06 94       	lsr	r0
    53cc:	a9 f7       	brne	.-22     	; 0x53b8 <__ftoa_engine+0xc8>
    53ce:	84 91       	lpm	r24, Z
    53d0:	10 95       	com	r17
    53d2:	17 70       	andi	r17, 0x07	; 7
    53d4:	41 f0       	breq	.+16     	; 0x53e6 <__ftoa_engine+0xf6>
    53d6:	d6 95       	lsr	r29
    53d8:	c7 95       	ror	r28
    53da:	57 95       	ror	r21
    53dc:	47 95       	ror	r20
    53de:	f7 94       	ror	r15
    53e0:	e7 94       	ror	r14
    53e2:	1a 95       	dec	r17
    53e4:	c1 f7       	brne	.-16     	; 0x53d6 <__ftoa_engine+0xe6>
    53e6:	e0 e3       	ldi	r30, 0x30	; 48
    53e8:	f2 e0       	ldi	r31, 0x02	; 2
    53ea:	68 94       	set
    53ec:	15 90       	lpm	r1, Z+
    53ee:	15 91       	lpm	r17, Z+
    53f0:	35 91       	lpm	r19, Z+
    53f2:	65 91       	lpm	r22, Z+
    53f4:	95 91       	lpm	r25, Z+
    53f6:	05 90       	lpm	r0, Z+
    53f8:	7f e2       	ldi	r23, 0x2F	; 47
    53fa:	73 95       	inc	r23
    53fc:	e1 18       	sub	r14, r1
    53fe:	f1 0a       	sbc	r15, r17
    5400:	43 0b       	sbc	r20, r19
    5402:	56 0b       	sbc	r21, r22
    5404:	c9 0b       	sbc	r28, r25
    5406:	d0 09       	sbc	r29, r0
    5408:	c0 f7       	brcc	.-16     	; 0x53fa <__ftoa_engine+0x10a>
    540a:	e1 0c       	add	r14, r1
    540c:	f1 1e       	adc	r15, r17
    540e:	43 1f       	adc	r20, r19
    5410:	56 1f       	adc	r21, r22
    5412:	c9 1f       	adc	r28, r25
    5414:	d0 1d       	adc	r29, r0
    5416:	7e f4       	brtc	.+30     	; 0x5436 <__ftoa_engine+0x146>
    5418:	70 33       	cpi	r23, 0x30	; 48
    541a:	11 f4       	brne	.+4      	; 0x5420 <__ftoa_engine+0x130>
    541c:	8a 95       	dec	r24
    541e:	e6 cf       	rjmp	.-52     	; 0x53ec <__ftoa_engine+0xfc>
    5420:	e8 94       	clt
    5422:	01 50       	subi	r16, 0x01	; 1
    5424:	30 f0       	brcs	.+12     	; 0x5432 <__ftoa_engine+0x142>
    5426:	08 0f       	add	r16, r24
    5428:	0a f4       	brpl	.+2      	; 0x542c <__ftoa_engine+0x13c>
    542a:	00 27       	eor	r16, r16
    542c:	02 17       	cp	r16, r18
    542e:	08 f4       	brcc	.+2      	; 0x5432 <__ftoa_engine+0x142>
    5430:	20 2f       	mov	r18, r16
    5432:	23 95       	inc	r18
    5434:	02 2f       	mov	r16, r18
    5436:	7a 33       	cpi	r23, 0x3A	; 58
    5438:	28 f0       	brcs	.+10     	; 0x5444 <__ftoa_engine+0x154>
    543a:	79 e3       	ldi	r23, 0x39	; 57
    543c:	7d 93       	st	X+, r23
    543e:	2a 95       	dec	r18
    5440:	e9 f7       	brne	.-6      	; 0x543c <__ftoa_engine+0x14c>
    5442:	10 c0       	rjmp	.+32     	; 0x5464 <__ftoa_engine+0x174>
    5444:	7d 93       	st	X+, r23
    5446:	2a 95       	dec	r18
    5448:	89 f6       	brne	.-94     	; 0x53ec <__ftoa_engine+0xfc>
    544a:	06 94       	lsr	r0
    544c:	97 95       	ror	r25
    544e:	67 95       	ror	r22
    5450:	37 95       	ror	r19
    5452:	17 95       	ror	r17
    5454:	17 94       	ror	r1
    5456:	e1 18       	sub	r14, r1
    5458:	f1 0a       	sbc	r15, r17
    545a:	43 0b       	sbc	r20, r19
    545c:	56 0b       	sbc	r21, r22
    545e:	c9 0b       	sbc	r28, r25
    5460:	d0 09       	sbc	r29, r0
    5462:	98 f0       	brcs	.+38     	; 0x548a <__ftoa_engine+0x19a>
    5464:	23 95       	inc	r18
    5466:	7e 91       	ld	r23, -X
    5468:	73 95       	inc	r23
    546a:	7a 33       	cpi	r23, 0x3A	; 58
    546c:	08 f0       	brcs	.+2      	; 0x5470 <__ftoa_engine+0x180>
    546e:	70 e3       	ldi	r23, 0x30	; 48
    5470:	7c 93       	st	X, r23
    5472:	20 13       	cpse	r18, r16
    5474:	b8 f7       	brcc	.-18     	; 0x5464 <__ftoa_engine+0x174>
    5476:	7e 91       	ld	r23, -X
    5478:	70 61       	ori	r23, 0x10	; 16
    547a:	7d 93       	st	X+, r23
    547c:	30 f0       	brcs	.+12     	; 0x548a <__ftoa_engine+0x19a>
    547e:	83 95       	inc	r24
    5480:	71 e3       	ldi	r23, 0x31	; 49
    5482:	7d 93       	st	X+, r23
    5484:	70 e3       	ldi	r23, 0x30	; 48
    5486:	2a 95       	dec	r18
    5488:	e1 f7       	brne	.-8      	; 0x5482 <__ftoa_engine+0x192>
    548a:	11 24       	eor	r1, r1
    548c:	ef 90       	pop	r14
    548e:	ff 90       	pop	r15
    5490:	0f 91       	pop	r16
    5492:	1f 91       	pop	r17
    5494:	cf 91       	pop	r28
    5496:	df 91       	pop	r29
    5498:	99 27       	eor	r25, r25
    549a:	87 fd       	sbrc	r24, 7
    549c:	90 95       	com	r25
    549e:	08 95       	ret

000054a0 <strnlen_P>:
    54a0:	fc 01       	movw	r30, r24
    54a2:	05 90       	lpm	r0, Z+
    54a4:	61 50       	subi	r22, 0x01	; 1
    54a6:	70 40       	sbci	r23, 0x00	; 0
    54a8:	01 10       	cpse	r0, r1
    54aa:	d8 f7       	brcc	.-10     	; 0x54a2 <strnlen_P+0x2>
    54ac:	80 95       	com	r24
    54ae:	90 95       	com	r25
    54b0:	8e 0f       	add	r24, r30
    54b2:	9f 1f       	adc	r25, r31
    54b4:	08 95       	ret

000054b6 <memcpy>:
    54b6:	fb 01       	movw	r30, r22
    54b8:	dc 01       	movw	r26, r24
    54ba:	02 c0       	rjmp	.+4      	; 0x54c0 <memcpy+0xa>
    54bc:	01 90       	ld	r0, Z+
    54be:	0d 92       	st	X+, r0
    54c0:	41 50       	subi	r20, 0x01	; 1
    54c2:	50 40       	sbci	r21, 0x00	; 0
    54c4:	d8 f7       	brcc	.-10     	; 0x54bc <memcpy+0x6>
    54c6:	08 95       	ret

000054c8 <memset>:
    54c8:	dc 01       	movw	r26, r24
    54ca:	01 c0       	rjmp	.+2      	; 0x54ce <memset+0x6>
    54cc:	6d 93       	st	X+, r22
    54ce:	41 50       	subi	r20, 0x01	; 1
    54d0:	50 40       	sbci	r21, 0x00	; 0
    54d2:	e0 f7       	brcc	.-8      	; 0x54cc <memset+0x4>
    54d4:	08 95       	ret

000054d6 <strnlen>:
    54d6:	fc 01       	movw	r30, r24
    54d8:	61 50       	subi	r22, 0x01	; 1
    54da:	70 40       	sbci	r23, 0x00	; 0
    54dc:	01 90       	ld	r0, Z+
    54de:	01 10       	cpse	r0, r1
    54e0:	d8 f7       	brcc	.-10     	; 0x54d8 <strnlen+0x2>
    54e2:	80 95       	com	r24
    54e4:	90 95       	com	r25
    54e6:	8e 0f       	add	r24, r30
    54e8:	9f 1f       	adc	r25, r31
    54ea:	08 95       	ret

000054ec <fputc>:
    54ec:	0f 93       	push	r16
    54ee:	1f 93       	push	r17
    54f0:	cf 93       	push	r28
    54f2:	df 93       	push	r29
    54f4:	fb 01       	movw	r30, r22
    54f6:	23 81       	ldd	r18, Z+3	; 0x03
    54f8:	21 fd       	sbrc	r18, 1
    54fa:	03 c0       	rjmp	.+6      	; 0x5502 <fputc+0x16>
    54fc:	8f ef       	ldi	r24, 0xFF	; 255
    54fe:	9f ef       	ldi	r25, 0xFF	; 255
    5500:	2c c0       	rjmp	.+88     	; 0x555a <fputc+0x6e>
    5502:	22 ff       	sbrs	r18, 2
    5504:	16 c0       	rjmp	.+44     	; 0x5532 <fputc+0x46>
    5506:	46 81       	ldd	r20, Z+6	; 0x06
    5508:	57 81       	ldd	r21, Z+7	; 0x07
    550a:	24 81       	ldd	r18, Z+4	; 0x04
    550c:	35 81       	ldd	r19, Z+5	; 0x05
    550e:	42 17       	cp	r20, r18
    5510:	53 07       	cpc	r21, r19
    5512:	44 f4       	brge	.+16     	; 0x5524 <fputc+0x38>
    5514:	a0 81       	ld	r26, Z
    5516:	b1 81       	ldd	r27, Z+1	; 0x01
    5518:	9d 01       	movw	r18, r26
    551a:	2f 5f       	subi	r18, 0xFF	; 255
    551c:	3f 4f       	sbci	r19, 0xFF	; 255
    551e:	20 83       	st	Z, r18
    5520:	31 83       	std	Z+1, r19	; 0x01
    5522:	8c 93       	st	X, r24
    5524:	26 81       	ldd	r18, Z+6	; 0x06
    5526:	37 81       	ldd	r19, Z+7	; 0x07
    5528:	2f 5f       	subi	r18, 0xFF	; 255
    552a:	3f 4f       	sbci	r19, 0xFF	; 255
    552c:	26 83       	std	Z+6, r18	; 0x06
    552e:	37 83       	std	Z+7, r19	; 0x07
    5530:	14 c0       	rjmp	.+40     	; 0x555a <fputc+0x6e>
    5532:	8b 01       	movw	r16, r22
    5534:	ec 01       	movw	r28, r24
    5536:	fb 01       	movw	r30, r22
    5538:	00 84       	ldd	r0, Z+8	; 0x08
    553a:	f1 85       	ldd	r31, Z+9	; 0x09
    553c:	e0 2d       	mov	r30, r0
    553e:	19 95       	eicall
    5540:	89 2b       	or	r24, r25
    5542:	e1 f6       	brne	.-72     	; 0x54fc <fputc+0x10>
    5544:	d8 01       	movw	r26, r16
    5546:	16 96       	adiw	r26, 0x06	; 6
    5548:	8d 91       	ld	r24, X+
    554a:	9c 91       	ld	r25, X
    554c:	17 97       	sbiw	r26, 0x07	; 7
    554e:	01 96       	adiw	r24, 0x01	; 1
    5550:	16 96       	adiw	r26, 0x06	; 6
    5552:	8d 93       	st	X+, r24
    5554:	9c 93       	st	X, r25
    5556:	17 97       	sbiw	r26, 0x07	; 7
    5558:	ce 01       	movw	r24, r28
    555a:	df 91       	pop	r29
    555c:	cf 91       	pop	r28
    555e:	1f 91       	pop	r17
    5560:	0f 91       	pop	r16
    5562:	08 95       	ret

00005564 <printf>:
    5564:	cf 93       	push	r28
    5566:	df 93       	push	r29
    5568:	cd b7       	in	r28, 0x3d	; 61
    556a:	de b7       	in	r29, 0x3e	; 62
    556c:	ae 01       	movw	r20, r28
    556e:	4a 5f       	subi	r20, 0xFA	; 250
    5570:	5f 4f       	sbci	r21, 0xFF	; 255
    5572:	fa 01       	movw	r30, r20
    5574:	61 91       	ld	r22, Z+
    5576:	71 91       	ld	r23, Z+
    5578:	af 01       	movw	r20, r30
    557a:	80 91 0a 22 	lds	r24, 0x220A	; 0x80220a <__iob+0x2>
    557e:	90 91 0b 22 	lds	r25, 0x220B	; 0x80220b <__iob+0x3>
    5582:	0e 94 80 24 	call	0x4900	; 0x4900 <vfprintf>
    5586:	df 91       	pop	r29
    5588:	cf 91       	pop	r28
    558a:	08 95       	ret

0000558c <__ultoa_invert>:
    558c:	fa 01       	movw	r30, r20
    558e:	aa 27       	eor	r26, r26
    5590:	28 30       	cpi	r18, 0x08	; 8
    5592:	51 f1       	breq	.+84     	; 0x55e8 <__ultoa_invert+0x5c>
    5594:	20 31       	cpi	r18, 0x10	; 16
    5596:	81 f1       	breq	.+96     	; 0x55f8 <__ultoa_invert+0x6c>
    5598:	e8 94       	clt
    559a:	6f 93       	push	r22
    559c:	6e 7f       	andi	r22, 0xFE	; 254
    559e:	6e 5f       	subi	r22, 0xFE	; 254
    55a0:	7f 4f       	sbci	r23, 0xFF	; 255
    55a2:	8f 4f       	sbci	r24, 0xFF	; 255
    55a4:	9f 4f       	sbci	r25, 0xFF	; 255
    55a6:	af 4f       	sbci	r26, 0xFF	; 255
    55a8:	b1 e0       	ldi	r27, 0x01	; 1
    55aa:	3e d0       	rcall	.+124    	; 0x5628 <__ultoa_invert+0x9c>
    55ac:	b4 e0       	ldi	r27, 0x04	; 4
    55ae:	3c d0       	rcall	.+120    	; 0x5628 <__ultoa_invert+0x9c>
    55b0:	67 0f       	add	r22, r23
    55b2:	78 1f       	adc	r23, r24
    55b4:	89 1f       	adc	r24, r25
    55b6:	9a 1f       	adc	r25, r26
    55b8:	a1 1d       	adc	r26, r1
    55ba:	68 0f       	add	r22, r24
    55bc:	79 1f       	adc	r23, r25
    55be:	8a 1f       	adc	r24, r26
    55c0:	91 1d       	adc	r25, r1
    55c2:	a1 1d       	adc	r26, r1
    55c4:	6a 0f       	add	r22, r26
    55c6:	71 1d       	adc	r23, r1
    55c8:	81 1d       	adc	r24, r1
    55ca:	91 1d       	adc	r25, r1
    55cc:	a1 1d       	adc	r26, r1
    55ce:	20 d0       	rcall	.+64     	; 0x5610 <__ultoa_invert+0x84>
    55d0:	09 f4       	brne	.+2      	; 0x55d4 <__ultoa_invert+0x48>
    55d2:	68 94       	set
    55d4:	3f 91       	pop	r19
    55d6:	2a e0       	ldi	r18, 0x0A	; 10
    55d8:	26 9f       	mul	r18, r22
    55da:	11 24       	eor	r1, r1
    55dc:	30 19       	sub	r19, r0
    55de:	30 5d       	subi	r19, 0xD0	; 208
    55e0:	31 93       	st	Z+, r19
    55e2:	de f6       	brtc	.-74     	; 0x559a <__ultoa_invert+0xe>
    55e4:	cf 01       	movw	r24, r30
    55e6:	08 95       	ret
    55e8:	46 2f       	mov	r20, r22
    55ea:	47 70       	andi	r20, 0x07	; 7
    55ec:	40 5d       	subi	r20, 0xD0	; 208
    55ee:	41 93       	st	Z+, r20
    55f0:	b3 e0       	ldi	r27, 0x03	; 3
    55f2:	0f d0       	rcall	.+30     	; 0x5612 <__ultoa_invert+0x86>
    55f4:	c9 f7       	brne	.-14     	; 0x55e8 <__ultoa_invert+0x5c>
    55f6:	f6 cf       	rjmp	.-20     	; 0x55e4 <__ultoa_invert+0x58>
    55f8:	46 2f       	mov	r20, r22
    55fa:	4f 70       	andi	r20, 0x0F	; 15
    55fc:	40 5d       	subi	r20, 0xD0	; 208
    55fe:	4a 33       	cpi	r20, 0x3A	; 58
    5600:	18 f0       	brcs	.+6      	; 0x5608 <__ultoa_invert+0x7c>
    5602:	49 5d       	subi	r20, 0xD9	; 217
    5604:	31 fd       	sbrc	r19, 1
    5606:	40 52       	subi	r20, 0x20	; 32
    5608:	41 93       	st	Z+, r20
    560a:	02 d0       	rcall	.+4      	; 0x5610 <__ultoa_invert+0x84>
    560c:	a9 f7       	brne	.-22     	; 0x55f8 <__ultoa_invert+0x6c>
    560e:	ea cf       	rjmp	.-44     	; 0x55e4 <__ultoa_invert+0x58>
    5610:	b4 e0       	ldi	r27, 0x04	; 4
    5612:	a6 95       	lsr	r26
    5614:	97 95       	ror	r25
    5616:	87 95       	ror	r24
    5618:	77 95       	ror	r23
    561a:	67 95       	ror	r22
    561c:	ba 95       	dec	r27
    561e:	c9 f7       	brne	.-14     	; 0x5612 <__ultoa_invert+0x86>
    5620:	00 97       	sbiw	r24, 0x00	; 0
    5622:	61 05       	cpc	r22, r1
    5624:	71 05       	cpc	r23, r1
    5626:	08 95       	ret
    5628:	9b 01       	movw	r18, r22
    562a:	ac 01       	movw	r20, r24
    562c:	0a 2e       	mov	r0, r26
    562e:	06 94       	lsr	r0
    5630:	57 95       	ror	r21
    5632:	47 95       	ror	r20
    5634:	37 95       	ror	r19
    5636:	27 95       	ror	r18
    5638:	ba 95       	dec	r27
    563a:	c9 f7       	brne	.-14     	; 0x562e <__ultoa_invert+0xa2>
    563c:	62 0f       	add	r22, r18
    563e:	73 1f       	adc	r23, r19
    5640:	84 1f       	adc	r24, r20
    5642:	95 1f       	adc	r25, r21
    5644:	a0 1d       	adc	r26, r0
    5646:	08 95       	ret

00005648 <_exit>:
    5648:	f8 94       	cli

0000564a <__stop_program>:
    564a:	ff cf       	rjmp	.-2      	; 0x564a <__stop_program>
