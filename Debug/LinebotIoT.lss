
LinebotIoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000566e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000168  00802000  0000566e  00005702  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000103  00802168  00802168  0000586a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000586a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000058c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000850  00000000  00000000  00005908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fb4f  00000000  00000000  00006158  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000547b  00000000  00000000  00015ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006743  00000000  00000000  0001b122  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001adc  00000000  00000000  00021868  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000047ac  00000000  00000000  00023344  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009ec0  00000000  00000000  00027af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ac0  00000000  00000000  000319b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 95 01 	jmp	0x32a	; 0x32a <__ctors_end>
       4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
       8:	0c 94 87 04 	jmp	0x90e	; 0x90e <__vector_2>
       c:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__vector_3>
      10:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      14:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      18:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      1c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      20:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      24:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      28:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      2c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      30:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      34:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      38:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__vector_14>
      3c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      40:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__vector_16>
      44:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      48:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      4c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      50:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      54:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      58:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      5c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      60:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      64:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      68:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      6c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      70:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      74:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      78:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      7c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      80:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      84:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      88:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_34>
      8c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      90:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      94:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      98:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      9c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      a0:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      a4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      a8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      ac:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__vector_43>
      b0:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__vector_44>
      b4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      b8:	0c 94 15 08 	jmp	0x102a	; 0x102a <__vector_46>
      bc:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      c0:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      c4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      c8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      cc:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      d0:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      d4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      d8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      dc:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      e0:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      e4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      e8:	0c 94 35 09 	jmp	0x126a	; 0x126a <__vector_58>
      ec:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      f0:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__vector_60>
      f4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      f8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      fc:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     100:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     104:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     108:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     10c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     110:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     114:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     118:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     11c:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_71>
     120:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     124:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     128:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     12c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     130:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     134:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     138:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     13c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     140:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     144:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     148:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     14c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     150:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     154:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     158:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     15c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     160:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     164:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     168:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     16c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     170:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     174:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     178:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     17c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     180:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     184:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     188:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     18c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     190:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     194:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     198:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     19c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1a0:	0c 94 c0 21 	jmp	0x4380	; 0x4380 <__vector_104>
     1a4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1a8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1ac:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1b0:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1b4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1b8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1bc:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1c0:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1c4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1c8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1cc:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1d0:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1d4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1d8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1dc:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1e0:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1e4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1e8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1ec:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1f0:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1f4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
     1f8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 95 08 	jmp	0x112a	; 0x112a <stdio_putchar>
     200:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <stdio_getchar>
     204:	0c 94 f1 1b 	jmp	0x37e2	; 0x37e2 <WorkerLineFollowerSpeed>
     208:	0c 94 f5 20 	jmp	0x41ea	; 0x41ea <WorkerMotorSpeed>
     20c:	0c 94 6b 21 	jmp	0x42d6	; 0x42d6 <workerSleepTask>
     210:	0c 94 fd 21 	jmp	0x43fa	; 0x43fa <WorkerStartup>
     214:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <WorkerADC>
     218:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <WorkerLineFollowerDirect>
     21c:	0c 94 c7 1c 	jmp	0x398e	; 0x398e <WorkerMotion>
     220:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <prvIdleTask>
     224:	0c 94 37 1f 	jmp	0x3e6e	; 0x3e6e <WorkerMotorPos>

00000228 <__trampolines_end>:
     228:	6e 61       	ori	r22, 0x1E	; 30
     22a:	6e 00       	.word	0x006e	; ????

0000022c <__c.2332>:
     22c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     23c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     24c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     25c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     26c:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     27c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     28c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     29c:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2ac:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2bc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2cc:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2dc:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2ec:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2fc:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     30c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     31c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000032a <__ctors_end>:
     32a:	11 24       	eor	r1, r1
     32c:	1f be       	out	0x3f, r1	; 63
     32e:	cf ef       	ldi	r28, 0xFF	; 255
     330:	cd bf       	out	0x3d, r28	; 61
     332:	df e9       	ldi	r29, 0x9F	; 159
     334:	de bf       	out	0x3e, r29	; 62
     336:	00 e0       	ldi	r16, 0x00	; 0
     338:	0c bf       	out	0x3c, r16	; 60

0000033a <__do_copy_data>:
     33a:	11 e2       	ldi	r17, 0x21	; 33
     33c:	a0 e0       	ldi	r26, 0x00	; 0
     33e:	b0 e2       	ldi	r27, 0x20	; 32
     340:	ee e6       	ldi	r30, 0x6E	; 110
     342:	f6 e5       	ldi	r31, 0x56	; 86
     344:	00 e0       	ldi	r16, 0x00	; 0
     346:	0b bf       	out	0x3b, r16	; 59
     348:	02 c0       	rjmp	.+4      	; 0x34e <__do_copy_data+0x14>
     34a:	07 90       	elpm	r0, Z+
     34c:	0d 92       	st	X+, r0
     34e:	a8 36       	cpi	r26, 0x68	; 104
     350:	b1 07       	cpc	r27, r17
     352:	d9 f7       	brne	.-10     	; 0x34a <__do_copy_data+0x10>

00000354 <__do_clear_bss>:
     354:	22 e2       	ldi	r18, 0x22	; 34
     356:	a8 e6       	ldi	r26, 0x68	; 104
     358:	b1 e2       	ldi	r27, 0x21	; 33
     35a:	01 c0       	rjmp	.+2      	; 0x35e <.do_clear_bss_start>

0000035c <.do_clear_bss_loop>:
     35c:	1d 92       	st	X+, r1

0000035e <.do_clear_bss_start>:
     35e:	ab 36       	cpi	r26, 0x6B	; 107
     360:	b2 07       	cpc	r27, r18
     362:	e1 f7       	brne	.-8      	; 0x35c <.do_clear_bss_loop>
     364:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <main>
     368:	0c 94 35 2b 	jmp	0x566a	; 0x566a <_exit>

0000036c <__bad_interrupt>:
     36c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000370 <DriverAdcInit>:
SemaphoreHandle_t AdcBusySema;					//Semaphore is taken when an ADC acquisition is performed
SemaphoreHandle_t ConversionCompleteSema;	//Semaphore used to signal completion of an ADC conversion

void DriverAdcInit(void)
{
	ADCA.CTRLA=0b00000001; //Enable ADC
     370:	e0 e0       	ldi	r30, 0x00	; 0
     372:	f2 e0       	ldi	r31, 0x02	; 2
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	80 83       	st	Z, r24
	ADCA.CTRLB=0b00000110; //Manual mode, 12 bit right justified
     378:	96 e0       	ldi	r25, 0x06	; 6
     37a:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL=0b00000010; //1.00V internal reference, enable bandgap
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	92 83       	std	Z+2, r25	; 0x02
	ADCA.PRESCALER=0b00000011; //DIV32; 1MHz ADCClk. Should be lower than 1,8MHz per spec
     380:	93 e0       	ldi	r25, 0x03	; 3
     382:	94 83       	std	Z+4, r25	; 0x04
	ADCA.CH0.INTCTRL=0b01; //Lo pri int
     384:	82 a3       	std	Z+34, r24	; 0x22
	
	AdcBusySema=xSemaphoreCreateBinary();
     386:	43 e0       	ldi	r20, 0x03	; 3
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <xQueueGenericCreate>
     38e:	80 93 4d 22 	sts	0x224D, r24	; 0x80224d <AdcBusySema>
     392:	90 93 4e 22 	sts	0x224E, r25	; 0x80224e <AdcBusySema+0x1>
	ConversionCompleteSema=xSemaphoreCreateBinary();
     396:	43 e0       	ldi	r20, 0x03	; 3
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <xQueueGenericCreate>
     3a0:	80 93 4b 22 	sts	0x224B, r24	; 0x80224b <ConversionCompleteSema>
     3a4:	90 93 4c 22 	sts	0x224C, r25	; 0x80224c <ConversionCompleteSema+0x1>
	xSemaphoreGive(AdcBusySema);		
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	80 91 4d 22 	lds	r24, 0x224D	; 0x80224d <AdcBusySema>
     3b6:	90 91 4e 22 	lds	r25, 0x224E	; 0x80224e <AdcBusySema+0x1>
     3ba:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <xQueueGenericSend>

000003be <DriverAdcGetCh>:
}

int16_t DriverAdcGetCh(int8_t PinPos,int8_t PinNeg)
{
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	c8 2f       	mov	r28, r24
     3c4:	d6 2f       	mov	r29, r22
	int16_t Res;
	
	xSemaphoreTake(AdcBusySema,portMAX_DELAY);
     3c6:	6f ef       	ldi	r22, 0xFF	; 255
     3c8:	7f ef       	ldi	r23, 0xFF	; 255
     3ca:	80 91 4d 22 	lds	r24, 0x224D	; 0x80224d <AdcBusySema>
     3ce:	90 91 4e 22 	lds	r25, 0x224E	; 0x80224e <AdcBusySema+0x1>
     3d2:	0e 94 73 10 	call	0x20e6	; 0x20e6 <xQueueSemaphoreTake>
	
	//Configure channels
	if (PinPos<16 && PinPos>=0)
     3d6:	c0 31       	cpi	r28, 0x10	; 16
     3d8:	28 f0       	brcs	.+10     	; 0x3e4 <DriverAdcGetCh+0x26>
		ADCA.CH0.MUXCTRL=PinPos<<3;
	else
		return 10000; //Invalid settings
     3da:	80 e1       	ldi	r24, 0x10	; 16
     3dc:	97 e2       	ldi	r25, 0x27	; 39
	
	xSemaphoreTake(ConversionCompleteSema,portMAX_DELAY);
	Res=ADCA.CH0.RES;
	xSemaphoreGive(AdcBusySema);
	return Res;
}
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret
	
	xSemaphoreTake(AdcBusySema,portMAX_DELAY);
	
	//Configure channels
	if (PinPos<16 && PinPos>=0)
		ADCA.CH0.MUXCTRL=PinPos<<3;
     3e4:	cc 0f       	add	r28, r28
     3e6:	cc 0f       	add	r28, r28
     3e8:	cc 0f       	add	r28, r28
     3ea:	c0 93 21 02 	sts	0x0221, r28	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
	else
		return 10000; //Invalid settings

	if (PinNeg==-1) 
     3ee:	df 3f       	cpi	r29, 0xFF	; 255
     3f0:	a1 f1       	breq	.+104    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		{			
		ADCA.CH0.CTRL=0b00000001; //Single ended mode, no gain
		ADCA.CTRLB&=~0b00010000;  //Unsigned mode		
		}		
	else if (PinNeg>=0 && PinNeg<4)
     3f2:	d4 30       	cpi	r29, 0x04	; 4
     3f4:	68 f5       	brcc	.+90     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		{			
		ADCA.CH0.CTRL=0b00000010; //Differential mode, no gain
     3f6:	82 e0       	ldi	r24, 0x02	; 2
		ADCA.CTRLB|=0b00010000;   //Signed mode
		ADCA.CH0.MUXCTRL|=PinNeg;
		}						
	else if (PinNeg>=4 && PinNeg<8)
		{
		ADCA.CH0.CTRL=0b00011111; //Differential mode, div 2
     3f8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
		ADCA.CTRLB|=0b00010000;
     3fc:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     400:	80 61       	ori	r24, 0x10	; 16
     402:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
		ADCA.CH0.MUXCTRL|=(PinNeg-4);	
     406:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
     40a:	d8 2b       	or	r29, r24
     40c:	d0 93 21 02 	sts	0x0221, r29	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
		}
	else return 10000; //Invalid settings
	
	//Start measurement
	ADCA.CH0.CTRL|=0b10000000; //Start conversion
     410:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
     414:	80 68       	ori	r24, 0x80	; 128
     416:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
	
	xSemaphoreTake(ConversionCompleteSema,portMAX_DELAY);
     41a:	6f ef       	ldi	r22, 0xFF	; 255
     41c:	7f ef       	ldi	r23, 0xFF	; 255
     41e:	80 91 4b 22 	lds	r24, 0x224B	; 0x80224b <ConversionCompleteSema>
     422:	90 91 4c 22 	lds	r25, 0x224C	; 0x80224c <ConversionCompleteSema+0x1>
     426:	0e 94 73 10 	call	0x20e6	; 0x20e6 <xQueueSemaphoreTake>
	Res=ADCA.CH0.RES;
     42a:	c0 91 24 02 	lds	r28, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     42e:	d0 91 25 02 	lds	r29, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
	xSemaphoreGive(AdcBusySema);
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	80 91 4d 22 	lds	r24, 0x224D	; 0x80224d <AdcBusySema>
     440:	90 91 4e 22 	lds	r25, 0x224E	; 0x80224e <AdcBusySema+0x1>
     444:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <xQueueGenericSend>
	return Res;
     448:	ce 01       	movw	r24, r28
}
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret
		{			
		ADCA.CH0.CTRL=0b00000010; //Differential mode, no gain
		ADCA.CTRLB|=0b00010000;   //Signed mode
		ADCA.CH0.MUXCTRL|=PinNeg;
		}						
	else if (PinNeg>=4 && PinNeg<8)
     450:	d4 50       	subi	r29, 0x04	; 4
     452:	d4 30       	cpi	r29, 0x04	; 4
     454:	10 f6       	brcc	.-124    	; 0x3da <DriverAdcGetCh+0x1c>
		{
		ADCA.CH0.CTRL=0b00011111; //Differential mode, div 2
     456:	8f e1       	ldi	r24, 0x1F	; 31
     458:	cf cf       	rjmp	.-98     	; 0x3f8 <DriverAdcGetCh+0x3a>
	else
		return 10000; //Invalid settings

	if (PinNeg==-1) 
		{			
		ADCA.CH0.CTRL=0b00000001; //Single ended mode, no gain
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
		ADCA.CTRLB&=~0b00010000;  //Unsigned mode		
     460:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     464:	8f 7e       	andi	r24, 0xEF	; 239
     466:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     46a:	d2 cf       	rjmp	.-92     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

0000046c <__vector_71>:
	xSemaphoreGive(AdcBusySema);
	return Res;
}

ISR(ADCA_CH0_vect)
{
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
     476:	0b b6       	in	r0, 0x3b	; 59
     478:	0f 92       	push	r0
     47a:	2f 93       	push	r18
     47c:	3f 93       	push	r19
     47e:	4f 93       	push	r20
     480:	5f 93       	push	r21
     482:	6f 93       	push	r22
     484:	7f 93       	push	r23
     486:	8f 93       	push	r24
     488:	9f 93       	push	r25
     48a:	af 93       	push	r26
     48c:	bf 93       	push	r27
     48e:	ef 93       	push	r30
     490:	ff 93       	push	r31
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	1f 92       	push	r1
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
     49c:	19 82       	std	Y+1, r1	; 0x01
	xSemaphoreGiveFromISR(ConversionCompleteSema,&xHigherPriorityTaskWoken);
     49e:	be 01       	movw	r22, r28
     4a0:	6f 5f       	subi	r22, 0xFF	; 255
     4a2:	7f 4f       	sbci	r23, 0xFF	; 255
     4a4:	80 91 4b 22 	lds	r24, 0x224B	; 0x80224b <ConversionCompleteSema>
     4a8:	90 91 4c 22 	lds	r25, 0x224C	; 0x80224c <ConversionCompleteSema+0x1>
     4ac:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	81 11       	cpse	r24, r1
     4b4:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vPortYieldISR>
     4b8:	0f 90       	pop	r0
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	ff 91       	pop	r31
     4c0:	ef 91       	pop	r30
     4c2:	bf 91       	pop	r27
     4c4:	af 91       	pop	r26
     4c6:	9f 91       	pop	r25
     4c8:	8f 91       	pop	r24
     4ca:	7f 91       	pop	r23
     4cc:	6f 91       	pop	r22
     4ce:	5f 91       	pop	r21
     4d0:	4f 91       	pop	r20
     4d2:	3f 91       	pop	r19
     4d4:	2f 91       	pop	r18
     4d6:	0f 90       	pop	r0
     4d8:	0b be       	out	0x3b, r0	; 59
     4da:	0f 90       	pop	r0
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	0f 90       	pop	r0
     4e0:	1f 90       	pop	r1
     4e2:	18 95       	reti

000004e4 <DriverAdps9960Init>:

#define REG_ID 0x92
#define ID 0xAB

void DriverAdps9960Init(void)
{
     4e4:	0f 93       	push	r16
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	1f 92       	push	r1
     4ec:	1f 92       	push	r1
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
	uint8_t res;
	uint8_t Buffer[2];
	Buffer[0]=REG_ENABLE;
     4f2:	80 e8       	ldi	r24, 0x80	; 128
     4f4:	89 83       	std	Y+1, r24	; 0x01
	Buffer[1]=(1<<REG_ENABLE_PON);
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	8a 83       	std	Y+2, r24	; 0x02
	res=TWIMWrite(ADPS9960_ADDR,Buffer,2);
     4fa:	42 e0       	ldi	r20, 0x02	; 2
     4fc:	be 01       	movw	r22, r28
     4fe:	6f 5f       	subi	r22, 0xFF	; 255
     500:	7f 4f       	sbci	r23, 0xFF	; 255
     502:	89 e3       	ldi	r24, 0x39	; 57
     504:	0e 94 9f 07 	call	0xf3e	; 0xf3e <TWIMWrite>
	//printf ("TwimWrite:%d\r\n",res);
	
	Buffer[0]=REG_ID;
     508:	82 e9       	ldi	r24, 0x92	; 146
     50a:	89 83       	std	Y+1, r24	; 0x01
	res=TWIMWriteRead(ADPS9960_ADDR,Buffer,1,Buffer,1);
     50c:	01 e0       	ldi	r16, 0x01	; 1
     50e:	9e 01       	movw	r18, r28
     510:	2f 5f       	subi	r18, 0xFF	; 255
     512:	3f 4f       	sbci	r19, 0xFF	; 255
     514:	41 e0       	ldi	r20, 0x01	; 1
     516:	b9 01       	movw	r22, r18
     518:	89 e3       	ldi	r24, 0x39	; 57
     51a:	0e 94 10 07 	call	0xe20	; 0xe20 <TWIMWriteRead>
	if (Buffer[0]!=ID)
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	8b 3a       	cpi	r24, 0xAB	; 171
     522:	61 f0       	breq	.+24     	; 0x53c <DriverAdps9960Init+0x58>
		printf ("ADPS9960 ID readback fail: %d read\r\n",Buffer[0]);
     524:	1f 92       	push	r1
     526:	8f 93       	push	r24
     528:	86 e1       	ldi	r24, 0x16	; 22
     52a:	90 e2       	ldi	r25, 0x20	; 32
     52c:	9f 93       	push	r25
     52e:	8f 93       	push	r24
     530:	0e 94 c3 2a 	call	0x5586	; 0x5586 <printf>
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0

	Buffer[0]=REG_ATIME;
     53c:	81 e8       	ldi	r24, 0x81	; 129
     53e:	89 83       	std	Y+1, r24	; 0x01
	Buffer[1]=219; //100ms integration time
     540:	8b ed       	ldi	r24, 0xDB	; 219
     542:	8a 83       	std	Y+2, r24	; 0x02
	res=TWIMWrite(ADPS9960_ADDR,Buffer,2);
     544:	42 e0       	ldi	r20, 0x02	; 2
     546:	be 01       	movw	r22, r28
     548:	6f 5f       	subi	r22, 0xFF	; 255
     54a:	7f 4f       	sbci	r23, 0xFF	; 255
     54c:	89 e3       	ldi	r24, 0x39	; 57
     54e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <TWIMWrite>

	Buffer[0]=REG_CTRL1;
     552:	8f e8       	ldi	r24, 0x8F	; 143
     554:	89 83       	std	Y+1, r24	; 0x01
	Buffer[1]=0b11<<REG_CTRL1_AGAIN; //max gain
     556:	83 e0       	ldi	r24, 0x03	; 3
     558:	8a 83       	std	Y+2, r24	; 0x02
	res=TWIMWrite(ADPS9960_ADDR,Buffer,2);
     55a:	42 e0       	ldi	r20, 0x02	; 2
     55c:	be 01       	movw	r22, r28
     55e:	6f 5f       	subi	r22, 0xFF	; 255
     560:	7f 4f       	sbci	r23, 0xFF	; 255
     562:	89 e3       	ldi	r24, 0x39	; 57
     564:	0e 94 9f 07 	call	0xf3e	; 0xf3e <TWIMWrite>

}
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	0f 91       	pop	r16
     572:	08 95       	ret

00000574 <DriverCursorstickInit>:
	BaseType_t res;
	res=xQueueReceive(CursorstickQueue,&ButtonState,BlockTime);
	if (res==pdTRUE) return ButtonState;
	else return 0;

}
     574:	e0 e2       	ldi	r30, 0x20	; 32
     576:	f6 e0       	ldi	r31, 0x06	; 6
     578:	98 ef       	ldi	r25, 0xF8	; 248
     57a:	92 83       	std	Z+2, r25	; 0x02
     57c:	89 e5       	ldi	r24, 0x59	; 89
     57e:	83 8b       	std	Z+19, r24	; 0x13
     580:	84 8b       	std	Z+20, r24	; 0x14
     582:	85 8b       	std	Z+21, r24	; 0x15
     584:	86 8b       	std	Z+22, r24	; 0x16
     586:	87 8b       	std	Z+23, r24	; 0x17
     588:	92 87       	std	Z+10, r25	; 0x0a
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	81 87       	std	Z+9, r24	; 0x09
     58e:	40 e0       	ldi	r20, 0x00	; 0
     590:	61 e0       	ldi	r22, 0x01	; 1
     592:	8a e0       	ldi	r24, 0x0A	; 10
     594:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <xQueueGenericCreate>
     598:	80 93 68 21 	sts	0x2168, r24	; 0x802168 <__data_end>
     59c:	90 93 69 21 	sts	0x2169, r25	; 0x802169 <__data_end+0x1>
     5a0:	08 95       	ret

000005a2 <__vector_34>:


ISR (PORTB_INT0_vect)
{
     5a2:	1f 92       	push	r1
     5a4:	0f 92       	push	r0
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	0f 92       	push	r0
     5aa:	11 24       	eor	r1, r1
     5ac:	0b b6       	in	r0, 0x3b	; 59
     5ae:	0f 92       	push	r0
     5b0:	2f 93       	push	r18
     5b2:	3f 93       	push	r19
     5b4:	4f 93       	push	r20
     5b6:	5f 93       	push	r21
     5b8:	6f 93       	push	r22
     5ba:	7f 93       	push	r23
     5bc:	8f 93       	push	r24
     5be:	9f 93       	push	r25
     5c0:	af 93       	push	r26
     5c2:	bf 93       	push	r27
     5c4:	ef 93       	push	r30
     5c6:	ff 93       	push	r31
	PMIC.CTRL |= 0b00000111;
     5c8:	e0 ea       	ldi	r30, 0xA0	; 160
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	82 81       	ldd	r24, Z+2	; 0x02
     5ce:	87 60       	ori	r24, 0x07	; 7
     5d0:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRSET = 0b00111111;
     5d2:	8f e3       	ldi	r24, 0x3F	; 63
     5d4:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
	DriverPowerVccAuxSet(1);
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 cc 06 	call	0xd98	; 0xd98 <DriverPowerVccAuxSet>
	printf("INTERRUPT!");
     5e0:	87 e5       	ldi	r24, 0x57	; 87
     5e2:	90 e2       	ldi	r25, 0x20	; 32
     5e4:	9f 93       	push	r25
     5e6:	8f 93       	push	r24
     5e8:	0e 94 c3 2a 	call	0x5586	; 0x5586 <printf>

	BaseType_t xHigherPriorityTaskWoken=pdFALSE;

		
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	ff 91       	pop	r31
     5f2:	ef 91       	pop	r30
     5f4:	bf 91       	pop	r27
     5f6:	af 91       	pop	r26
     5f8:	9f 91       	pop	r25
     5fa:	8f 91       	pop	r24
     5fc:	7f 91       	pop	r23
     5fe:	6f 91       	pop	r22
     600:	5f 91       	pop	r21
     602:	4f 91       	pop	r20
     604:	3f 91       	pop	r19
     606:	2f 91       	pop	r18
     608:	0f 90       	pop	r0
     60a:	0b be       	out	0x3b, r0	; 59
     60c:	0f 90       	pop	r0
     60e:	0f be       	out	0x3f, r0	; 63
     610:	0f 90       	pop	r0
     612:	1f 90       	pop	r1
     614:	18 95       	reti

00000616 <DbgPrint>:
#include "DriverDbgUSART.h"


void DbgPrint(char *Text)
{
     616:	dc 01       	movw	r26, r24
}

void DbgPrintn(char *Text,int n)
{
	static int i;
	i=0;
     618:	10 92 6d 21 	sts	0x216D, r1	; 0x80216d <i.3624>
     61c:	10 92 6e 21 	sts	0x216E, r1	; 0x80216e <i.3624+0x1>
	while (*Text!=0 && (i<n || n==0))
     620:	9c 91       	ld	r25, X
     622:	99 23       	and	r25, r25
     624:	b1 f0       	breq	.+44     	; 0x652 <DbgPrint+0x3c>
     626:	fd 01       	movw	r30, r26
     628:	31 96       	adiw	r30, 0x01	; 1
	{
		USART.DATA = *Text;
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
     62a:	80 e4       	ldi	r24, 0x40	; 64
{
	static int i;
	i=0;
	while (*Text!=0 && (i<n || n==0))
	{
		USART.DATA = *Text;
     62c:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
		while (!(USART.STATUS & 0b01000000));
     630:	90 91 a1 0a 	lds	r25, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     634:	96 ff       	sbrs	r25, 6
     636:	fc cf       	rjmp	.-8      	; 0x630 <DbgPrint+0x1a>
		USART.STATUS=0b01000000;
     638:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     63c:	9f 01       	movw	r18, r30
     63e:	2a 1b       	sub	r18, r26
     640:	3b 0b       	sbc	r19, r27

void DbgPrintn(char *Text,int n)
{
	static int i;
	i=0;
	while (*Text!=0 && (i<n || n==0))
     642:	91 91       	ld	r25, Z+
     644:	91 11       	cpse	r25, r1
     646:	f2 cf       	rjmp	.-28     	; 0x62c <DbgPrint+0x16>
     648:	20 93 6d 21 	sts	0x216D, r18	; 0x80216d <i.3624>
     64c:	30 93 6e 21 	sts	0x216E, r19	; 0x80216e <i.3624+0x1>
     650:	08 95       	ret
     652:	08 95       	ret

00000654 <DbgPrintn>:
{
	DbgPrintn(Text,0);	
}

void DbgPrintn(char *Text,int n)
{
     654:	fc 01       	movw	r30, r24
	static int i;
	i=0;
     656:	10 92 6d 21 	sts	0x216D, r1	; 0x80216d <i.3624>
     65a:	10 92 6e 21 	sts	0x216E, r1	; 0x80216e <i.3624+0x1>
	while (*Text!=0 && (i<n || n==0))
     65e:	90 81       	ld	r25, Z
     660:	99 23       	and	r25, r25
     662:	e1 f0       	breq	.+56     	; 0x69c <DbgPrintn+0x48>
     664:	31 96       	adiw	r30, 0x01	; 1
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
	{
		USART.DATA = *Text;
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
     66a:	80 e4       	ldi	r24, 0x40	; 64

void DbgPrintn(char *Text,int n)
{
	static int i;
	i=0;
	while (*Text!=0 && (i<n || n==0))
     66c:	26 17       	cp	r18, r22
     66e:	37 07       	cpc	r19, r23
     670:	1c f0       	brlt	.+6      	; 0x678 <DbgPrintn+0x24>
     672:	61 15       	cp	r22, r1
     674:	71 05       	cpc	r23, r1
     676:	69 f4       	brne	.+26     	; 0x692 <DbgPrintn+0x3e>
	{
		USART.DATA = *Text;
     678:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
		while (!(USART.STATUS & 0b01000000));
     67c:	90 91 a1 0a 	lds	r25, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     680:	96 ff       	sbrs	r25, 6
     682:	fc cf       	rjmp	.-8      	; 0x67c <DbgPrintn+0x28>
		USART.STATUS=0b01000000;
     684:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
		Text++;
		i++;
     688:	2f 5f       	subi	r18, 0xFF	; 255
     68a:	3f 4f       	sbci	r19, 0xFF	; 255

void DbgPrintn(char *Text,int n)
{
	static int i;
	i=0;
	while (*Text!=0 && (i<n || n==0))
     68c:	91 91       	ld	r25, Z+
     68e:	91 11       	cpse	r25, r1
     690:	ed cf       	rjmp	.-38     	; 0x66c <DbgPrintn+0x18>
     692:	20 93 6d 21 	sts	0x216D, r18	; 0x80216d <i.3624>
     696:	30 93 6e 21 	sts	0x216E, r19	; 0x80216e <i.3624+0x1>
     69a:	08 95       	ret
     69c:	08 95       	ret

0000069e <DbgPrintInt>:
		i++;
	}
}

void DbgPrintInt(uint16_t Data)
{
     69e:	cf 92       	push	r12
     6a0:	df 92       	push	r13
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	7c 01       	movw	r14, r24
	//Use statics to minimize stack usage
	static int i;
	static uint8_t pf;
	
	i=10000;
     6b0:	80 e1       	ldi	r24, 0x10	; 16
     6b2:	97 e2       	ldi	r25, 0x27	; 39
     6b4:	80 93 6b 21 	sts	0x216B, r24	; 0x80216b <i.3634>
     6b8:	90 93 6c 21 	sts	0x216C, r25	; 0x80216c <i.3634+0x1>
	pf=0;
     6bc:	10 92 6a 21 	sts	0x216A, r1	; 0x80216a <pf.3635>
     6c0:	c5 e0       	ldi	r28, 0x05	; 5
     6c2:	d0 e0       	ldi	r29, 0x00	; 0
     6c4:	c1 2c       	mov	r12, r1
     6c6:	e0 e1       	ldi	r30, 0x10	; 16
     6c8:	f7 e2       	ldi	r31, 0x27	; 39
	{
		if (((Data/i)%10)!=0 || pf) //Trim leading 0's
		{
			USART.DATA = '0'+ ((Data/i)%10);
			while (!(USART.STATUS & 0b01000000));
			USART.STATUS=0b01000000;
     6ca:	a0 e4       	ldi	r26, 0x40	; 64
     6cc:	da 2e       	mov	r13, r26
			pf=1;		
		}
		i/=10;
     6ce:	0a e0       	ldi	r16, 0x0A	; 10
     6d0:	10 e0       	ldi	r17, 0x00	; 0
	
	i=10000;
	pf=0;
	while (i>0)
	{
		if (((Data/i)%10)!=0 || pf) //Trim leading 0's
     6d2:	c7 01       	movw	r24, r14
     6d4:	bf 01       	movw	r22, r30
     6d6:	0e 94 31 28 	call	0x5062	; 0x5062 <__udivmodhi4>
     6da:	ab 01       	movw	r20, r22
     6dc:	9b 01       	movw	r18, r22
     6de:	ad ec       	ldi	r26, 0xCD	; 205
     6e0:	bc ec       	ldi	r27, 0xCC	; 204
     6e2:	0e 94 59 28 	call	0x50b2	; 0x50b2 <__umulhisi3>
     6e6:	96 95       	lsr	r25
     6e8:	87 95       	ror	r24
     6ea:	96 95       	lsr	r25
     6ec:	87 95       	ror	r24
     6ee:	96 95       	lsr	r25
     6f0:	87 95       	ror	r24
     6f2:	9c 01       	movw	r18, r24
     6f4:	22 0f       	add	r18, r18
     6f6:	33 1f       	adc	r19, r19
     6f8:	88 0f       	add	r24, r24
     6fa:	99 1f       	adc	r25, r25
     6fc:	88 0f       	add	r24, r24
     6fe:	99 1f       	adc	r25, r25
     700:	88 0f       	add	r24, r24
     702:	99 1f       	adc	r25, r25
     704:	82 0f       	add	r24, r18
     706:	93 1f       	adc	r25, r19
     708:	9a 01       	movw	r18, r20
     70a:	28 1b       	sub	r18, r24
     70c:	39 0b       	sbc	r19, r25
     70e:	c9 01       	movw	r24, r18
     710:	00 97       	sbiw	r24, 0x00	; 0
     712:	11 f4       	brne	.+4      	; 0x718 <DbgPrintInt+0x7a>
     714:	cc 20       	and	r12, r12
     716:	59 f0       	breq	.+22     	; 0x72e <DbgPrintInt+0x90>
		{
			USART.DATA = '0'+ ((Data/i)%10);
     718:	80 5d       	subi	r24, 0xD0	; 208
     71a:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
			while (!(USART.STATUS & 0b01000000));
     71e:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     722:	86 ff       	sbrs	r24, 6
     724:	fc cf       	rjmp	.-8      	; 0x71e <DbgPrintInt+0x80>
			USART.STATUS=0b01000000;
     726:	d0 92 a1 0a 	sts	0x0AA1, r13	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
			pf=1;		
     72a:	cc 24       	eor	r12, r12
     72c:	c3 94       	inc	r12
		}
		i/=10;
     72e:	cf 01       	movw	r24, r30
     730:	b8 01       	movw	r22, r16
     732:	0e 94 45 28 	call	0x508a	; 0x508a <__divmodhi4>
     736:	fb 01       	movw	r30, r22
     738:	21 97       	sbiw	r28, 0x01	; 1
	static int i;
	static uint8_t pf;
	
	i=10000;
	pf=0;
	while (i>0)
     73a:	59 f6       	brne	.-106    	; 0x6d2 <DbgPrintInt+0x34>
     73c:	c0 92 6a 21 	sts	0x216A, r12	; 0x80216a <pf.3635>
     740:	60 93 6b 21 	sts	0x216B, r22	; 0x80216b <i.3634>
     744:	70 93 6c 21 	sts	0x216C, r23	; 0x80216c <i.3634+0x1>
			USART.STATUS=0b01000000;
			pf=1;		
		}
		i/=10;
	}
}
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	ff 90       	pop	r15
     752:	ef 90       	pop	r14
     754:	df 90       	pop	r13
     756:	cf 90       	pop	r12
     758:	08 95       	ret

0000075a <DriverLedInit>:
}

void DriverLedClear(uint8_t LedData)
{
	PORTB.OUT=PORTB.OUT & ~(LedData & 0b00000111);
	PORTA.OUT=PORTA.OUT & ~((LedData & 0b00001000) << 4);
     75a:	e0 e2       	ldi	r30, 0x20	; 32
     75c:	f6 e0       	ldi	r31, 0x06	; 6
     75e:	87 e0       	ldi	r24, 0x07	; 7
     760:	81 83       	std	Z+1, r24	; 0x01
     762:	80 e4       	ldi	r24, 0x40	; 64
     764:	80 8b       	std	Z+16, r24	; 0x10
     766:	81 8b       	std	Z+17, r24	; 0x11
     768:	82 8b       	std	Z+18, r24	; 0x12
     76a:	e0 e0       	ldi	r30, 0x00	; 0
     76c:	f6 e0       	ldi	r31, 0x06	; 6
     76e:	90 e8       	ldi	r25, 0x80	; 128
     770:	91 83       	std	Z+1, r25	; 0x01
     772:	87 8b       	std	Z+23, r24	; 0x17
     774:	08 95       	ret

00000776 <DriverLedSet>:
     776:	e0 e2       	ldi	r30, 0x20	; 32
     778:	f6 e0       	ldi	r31, 0x06	; 6
     77a:	94 81       	ldd	r25, Z+4	; 0x04
     77c:	28 2f       	mov	r18, r24
     77e:	27 70       	andi	r18, 0x07	; 7
     780:	92 2b       	or	r25, r18
     782:	94 83       	std	Z+4, r25	; 0x04
     784:	e0 e0       	ldi	r30, 0x00	; 0
     786:	f6 e0       	ldi	r31, 0x06	; 6
     788:	94 81       	ldd	r25, Z+4	; 0x04
     78a:	88 70       	andi	r24, 0x08	; 8
     78c:	82 95       	swap	r24
     78e:	80 7f       	andi	r24, 0xF0	; 240
     790:	89 2b       	or	r24, r25
     792:	84 83       	std	Z+4, r24	; 0x04
     794:	08 95       	ret

00000796 <DriverLedToggle>:
}

void DriverLedToggle(uint8_t LedData)
{
	PORTB.OUT=PORTB.OUT ^ (LedData & 0b00000111);
     796:	e0 e2       	ldi	r30, 0x20	; 32
     798:	f6 e0       	ldi	r31, 0x06	; 6
     79a:	94 81       	ldd	r25, Z+4	; 0x04
     79c:	28 2f       	mov	r18, r24
     79e:	27 70       	andi	r18, 0x07	; 7
     7a0:	92 27       	eor	r25, r18
     7a2:	94 83       	std	Z+4, r25	; 0x04
	PORTA.OUT=PORTA.OUT ^ ((LedData & 0b00001000) << 4);
     7a4:	e0 e0       	ldi	r30, 0x00	; 0
     7a6:	f6 e0       	ldi	r31, 0x06	; 6
     7a8:	94 81       	ldd	r25, Z+4	; 0x04
     7aa:	88 70       	andi	r24, 0x08	; 8
     7ac:	82 95       	swap	r24
     7ae:	80 7f       	andi	r24, 0xF0	; 240
     7b0:	89 27       	eor	r24, r25
     7b2:	84 83       	std	Z+4, r24	; 0x04
     7b4:	08 95       	ret

000007b6 <DriverMotorInit>:
{
	EncoderEventStruct Event={0,NONE};
	int res;
	res=xQueueReceive(EncoderEventQueue,&Event,0);
	return Event;
}
     7b6:	e0 ea       	ldi	r30, 0xA0	; 160
     7b8:	f6 e0       	ldi	r31, 0x06	; 6
     7ba:	8f e1       	ldi	r24, 0x1F	; 31
     7bc:	81 83       	std	Z+1, r24	; 0x01
     7be:	80 e4       	ldi	r24, 0x40	; 64
     7c0:	84 8b       	std	Z+20, r24	; 0x14
     7c2:	20 e1       	ldi	r18, 0x10	; 16
     7c4:	25 83       	std	Z+5, r18	; 0x05
     7c6:	e0 e0       	ldi	r30, 0x00	; 0
     7c8:	fb e0       	ldi	r31, 0x0B	; 11
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	90 83       	st	Z, r25
     7ce:	93 ef       	ldi	r25, 0xF3	; 243
     7d0:	91 83       	std	Z+1, r25	; 0x01
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	50 e1       	ldi	r21, 0x10	; 16
     7d6:	46 a3       	std	Z+38, r20	; 0x26
     7d8:	57 a3       	std	Z+39, r21	; 0x27
     7da:	e0 e4       	ldi	r30, 0x40	; 64
     7dc:	f6 e0       	ldi	r31, 0x06	; 6
     7de:	90 ec       	ldi	r25, 0xC0	; 192
     7e0:	92 83       	std	Z+2, r25	; 0x02
     7e2:	86 8b       	std	Z+22, r24	; 0x16
     7e4:	87 8b       	std	Z+23, r24	; 0x17
     7e6:	82 87       	std	Z+10, r24	; 0x0a
     7e8:	90 e8       	ldi	r25, 0x80	; 128
     7ea:	93 87       	std	Z+11, r25	; 0x0b
     7ec:	95 e0       	ldi	r25, 0x05	; 5
     7ee:	91 87       	std	Z+9, r25	; 0x09
     7f0:	e0 e8       	ldi	r30, 0x80	; 128
     7f2:	f6 e0       	ldi	r31, 0x06	; 6
     7f4:	30 e3       	ldi	r19, 0x30	; 48
     7f6:	32 83       	std	Z+2, r19	; 0x02
     7f8:	84 8b       	std	Z+20, r24	; 0x14
     7fa:	85 8b       	std	Z+21, r24	; 0x15
     7fc:	22 87       	std	Z+10, r18	; 0x0a
     7fe:	80 e2       	ldi	r24, 0x20	; 32
     800:	83 87       	std	Z+11, r24	; 0x0b
     802:	91 87       	std	Z+9, r25	; 0x09
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	65 e0       	ldi	r22, 0x05	; 5
     808:	84 e1       	ldi	r24, 0x14	; 20
     80a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <xQueueGenericCreate>
     80e:	80 93 53 22 	sts	0x2253, r24	; 0x802253 <EncoderEventQueue>
     812:	90 93 54 22 	sts	0x2254, r25	; 0x802254 <EncoderEventQueue+0x1>
     816:	08 95       	ret

00000818 <DriverMotorSet>:
     818:	20 e1       	ldi	r18, 0x10	; 16
     81a:	00 97       	sbiw	r24, 0x00	; 0
     81c:	69 f5       	brne	.+90     	; 0x878 <DriverMotorSet+0x60>
     81e:	61 15       	cp	r22, r1
     820:	71 05       	cpc	r23, r1
     822:	09 f4       	brne	.+2      	; 0x826 <DriverMotorSet+0xe>
     824:	57 c0       	rjmp	.+174    	; 0x8d4 <DriverMotorSet+0xbc>
     826:	20 93 a6 06 	sts	0x06A6, r18	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     82a:	81 30       	cpi	r24, 0x01	; 1
     82c:	20 ef       	ldi	r18, 0xF0	; 240
     82e:	92 07       	cpc	r25, r18
     830:	0c f4       	brge	.+2      	; 0x834 <DriverMotorSet+0x1c>
     832:	57 c0       	rjmp	.+174    	; 0x8e2 <DriverMotorSet+0xca>
     834:	91 95       	neg	r25
     836:	81 95       	neg	r24
     838:	91 09       	sbc	r25, r1
     83a:	80 93 28 0b 	sts	0x0B28, r24	; 0x800b28 <__TEXT_REGION_LENGTH__+0x700b28>
     83e:	90 93 29 0b 	sts	0x0B29, r25	; 0x800b29 <__TEXT_REGION_LENGTH__+0x700b29>
     842:	10 92 2a 0b 	sts	0x0B2A, r1	; 0x800b2a <__TEXT_REGION_LENGTH__+0x700b2a>
     846:	10 92 2b 0b 	sts	0x0B2B, r1	; 0x800b2b <__TEXT_REGION_LENGTH__+0x700b2b>
     84a:	71 95       	neg	r23
     84c:	61 95       	neg	r22
     84e:	71 09       	sbc	r23, r1
     850:	16 16       	cp	r1, r22
     852:	17 06       	cpc	r1, r23
     854:	44 f1       	brlt	.+80     	; 0x8a6 <DriverMotorSet+0x8e>
     856:	61 30       	cpi	r22, 0x01	; 1
     858:	20 ef       	ldi	r18, 0xF0	; 240
     85a:	72 07       	cpc	r23, r18
     85c:	0c f4       	brge	.+2      	; 0x860 <DriverMotorSet+0x48>
     85e:	44 c0       	rjmp	.+136    	; 0x8e8 <DriverMotorSet+0xd0>
     860:	71 95       	neg	r23
     862:	61 95       	neg	r22
     864:	71 09       	sbc	r23, r1
     866:	60 93 2c 0b 	sts	0x0B2C, r22	; 0x800b2c <__TEXT_REGION_LENGTH__+0x700b2c>
     86a:	70 93 2d 0b 	sts	0x0B2D, r23	; 0x800b2d <__TEXT_REGION_LENGTH__+0x700b2d>
     86e:	10 92 2e 0b 	sts	0x0B2E, r1	; 0x800b2e <__TEXT_REGION_LENGTH__+0x700b2e>
     872:	10 92 2f 0b 	sts	0x0B2F, r1	; 0x800b2f <__TEXT_REGION_LENGTH__+0x700b2f>
     876:	08 95       	ret
     878:	20 93 a6 06 	sts	0x06A6, r18	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     87c:	18 16       	cp	r1, r24
     87e:	19 06       	cpc	r1, r25
     880:	a4 f6       	brge	.-88     	; 0x82a <DriverMotorSet+0x12>
     882:	10 92 28 0b 	sts	0x0B28, r1	; 0x800b28 <__TEXT_REGION_LENGTH__+0x700b28>
     886:	10 92 29 0b 	sts	0x0B29, r1	; 0x800b29 <__TEXT_REGION_LENGTH__+0x700b29>
     88a:	81 15       	cp	r24, r1
     88c:	20 e1       	ldi	r18, 0x10	; 16
     88e:	92 07       	cpc	r25, r18
     890:	f4 f4       	brge	.+60     	; 0x8ce <DriverMotorSet+0xb6>
     892:	80 93 2a 0b 	sts	0x0B2A, r24	; 0x800b2a <__TEXT_REGION_LENGTH__+0x700b2a>
     896:	90 93 2b 0b 	sts	0x0B2B, r25	; 0x800b2b <__TEXT_REGION_LENGTH__+0x700b2b>
     89a:	71 95       	neg	r23
     89c:	61 95       	neg	r22
     89e:	71 09       	sbc	r23, r1
     8a0:	16 16       	cp	r1, r22
     8a2:	17 06       	cpc	r1, r23
     8a4:	c4 f6       	brge	.-80     	; 0x856 <DriverMotorSet+0x3e>
     8a6:	10 92 2c 0b 	sts	0x0B2C, r1	; 0x800b2c <__TEXT_REGION_LENGTH__+0x700b2c>
     8aa:	10 92 2d 0b 	sts	0x0B2D, r1	; 0x800b2d <__TEXT_REGION_LENGTH__+0x700b2d>
     8ae:	61 15       	cp	r22, r1
     8b0:	80 e1       	ldi	r24, 0x10	; 16
     8b2:	78 07       	cpc	r23, r24
     8b4:	2c f4       	brge	.+10     	; 0x8c0 <DriverMotorSet+0xa8>
     8b6:	60 93 2e 0b 	sts	0x0B2E, r22	; 0x800b2e <__TEXT_REGION_LENGTH__+0x700b2e>
     8ba:	70 93 2f 0b 	sts	0x0B2F, r23	; 0x800b2f <__TEXT_REGION_LENGTH__+0x700b2f>
     8be:	08 95       	ret
     8c0:	6f ef       	ldi	r22, 0xFF	; 255
     8c2:	7f e0       	ldi	r23, 0x0F	; 15
     8c4:	60 93 2e 0b 	sts	0x0B2E, r22	; 0x800b2e <__TEXT_REGION_LENGTH__+0x700b2e>
     8c8:	70 93 2f 0b 	sts	0x0B2F, r23	; 0x800b2f <__TEXT_REGION_LENGTH__+0x700b2f>
     8cc:	08 95       	ret
     8ce:	8f ef       	ldi	r24, 0xFF	; 255
     8d0:	9f e0       	ldi	r25, 0x0F	; 15
     8d2:	df cf       	rjmp	.-66     	; 0x892 <DriverMotorSet+0x7a>
     8d4:	20 93 a5 06 	sts	0x06A5, r18	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	20 ef       	ldi	r18, 0xF0	; 240
     8dc:	92 07       	cpc	r25, r18
     8de:	0c f0       	brlt	.+2      	; 0x8e2 <DriverMotorSet+0xca>
     8e0:	a9 cf       	rjmp	.-174    	; 0x834 <DriverMotorSet+0x1c>
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	90 ef       	ldi	r25, 0xF0	; 240
     8e6:	a6 cf       	rjmp	.-180    	; 0x834 <DriverMotorSet+0x1c>
     8e8:	61 e0       	ldi	r22, 0x01	; 1
     8ea:	70 ef       	ldi	r23, 0xF0	; 240
     8ec:	b9 cf       	rjmp	.-142    	; 0x860 <DriverMotorSet+0x48>

000008ee <DriverMotorGetEncoder>:
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	0f 92       	push	r0
     8f4:	40 91 4f 22 	lds	r20, 0x224F	; 0x80224f <Cnt1>
     8f8:	50 91 50 22 	lds	r21, 0x2250	; 0x802250 <Cnt1+0x1>
     8fc:	20 91 51 22 	lds	r18, 0x2251	; 0x802251 <Cnt2>
     900:	30 91 52 22 	lds	r19, 0x2252	; 0x802252 <Cnt2+0x1>
     904:	0f 90       	pop	r0
     906:	0f be       	out	0x3f, r0	; 63
     908:	ba 01       	movw	r22, r20
     90a:	c9 01       	movw	r24, r18
     90c:	08 95       	ret

0000090e <__vector_2>:

//Encoder 1 ISR's
ISR (PORTC_INT0_vect)
{	
     90e:	1f 92       	push	r1
     910:	0f 92       	push	r0
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	0f 92       	push	r0
     916:	11 24       	eor	r1, r1
     918:	0b b6       	in	r0, 0x3b	; 59
     91a:	0f 92       	push	r0
     91c:	1f 93       	push	r17
     91e:	2f 93       	push	r18
     920:	3f 93       	push	r19
     922:	4f 93       	push	r20
     924:	5f 93       	push	r21
     926:	6f 93       	push	r22
     928:	7f 93       	push	r23
     92a:	8f 93       	push	r24
     92c:	9f 93       	push	r25
     92e:	af 93       	push	r26
     930:	bf 93       	push	r27
     932:	ef 93       	push	r30
     934:	ff 93       	push	r31
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	00 d0       	rcall	.+0      	; 0x93c <__vector_2+0x2e>
     93c:	00 d0       	rcall	.+0      	; 0x93e <__vector_2+0x30>
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
	static uint32_t LastTriggerTime=0;
	uint8_t Data,l0,l1;
	EncoderEventStruct Event;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
     942:	1e 82       	std	Y+6, r1	; 0x06
	Event.Time=portGET_RUN_TIME_COUNTER_VALUE();
     944:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     948:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     94c:	80 91 59 22 	lds	r24, 0x2259	; 0x802259 <StatsTimer>
     950:	90 91 5a 22 	lds	r25, 0x225A	; 0x80225a <StatsTimer+0x1>
     954:	a0 91 5b 22 	lds	r26, 0x225B	; 0x80225b <StatsTimer+0x2>
     958:	b0 91 5c 22 	lds	r27, 0x225C	; 0x80225c <StatsTimer+0x3>
     95c:	82 0f       	add	r24, r18
     95e:	93 1f       	adc	r25, r19
     960:	a1 1d       	adc	r26, r1
     962:	b1 1d       	adc	r27, r1
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	9a 83       	std	Y+2, r25	; 0x02
     968:	ab 83       	std	Y+3, r26	; 0x03
     96a:	bc 83       	std	Y+4, r27	; 0x04
	#ifdef ENCODER_FILTER_ENABLE
		if ((Event.Time-LastTriggerTime)<ENCODER_FILTER_TIME) return;
	#endif

	Data=PORTC.IN;
     96c:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
	l0=Data & (1<<6);
	l1=Data & (1<<7);
     970:	18 2f       	mov	r17, r24
     972:	10 78       	andi	r17, 0x80	; 128
		
	//Process events
	if (l0) 
     974:	86 ff       	sbrs	r24, 6
     976:	37 c0       	rjmp	.+110    	; 0x9e6 <__vector_2+0xd8>
		Event.Event=RISING_1A;
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	8d 83       	std	Y+5, r24	; 0x05
	else
		Event.Event=FALLING_1A;

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	ae 01       	movw	r20, r28
     980:	4a 5f       	subi	r20, 0xFA	; 250
     982:	5f 4f       	sbci	r21, 0xFF	; 255
     984:	be 01       	movw	r22, r28
     986:	6f 5f       	subi	r22, 0xFF	; 255
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	80 91 53 22 	lds	r24, 0x2253	; 0x802253 <EncoderEventQueue>
     98e:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <EncoderEventQueue+0x1>
     992:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <xQueueGenericSendFromISR>
	//Process counter
	if ( l0 && !l1) Cnt1--; //Rising edge on Line0, Line1 low
     996:	11 23       	and	r17, r17
     998:	b9 f1       	breq	.+110    	; 0xa08 <__vector_2+0xfa>
	if ( l0 &&  l1) Cnt1++; //Rising edge on Line0, Line1 high	
	if (!l0 &&  l1) Cnt1--; //Falling edge on Line0, Line1 high
	if (!l0 && !l1) Cnt1++;//Falling edge on Line1, Line1 low
     99a:	80 91 4f 22 	lds	r24, 0x224F	; 0x80224f <Cnt1>
     99e:	90 91 50 22 	lds	r25, 0x2250	; 0x802250 <Cnt1+0x1>
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	80 93 4f 22 	sts	0x224F, r24	; 0x80224f <Cnt1>
     9a8:	90 93 50 22 	sts	0x2250, r25	; 0x802250 <Cnt1+0x1>

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     9ac:	8e 81       	ldd	r24, Y+6	; 0x06
     9ae:	81 11       	cpse	r24, r1
     9b0:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vPortYieldISR>
	LastTriggerTime=Event.Time;
}
     9b4:	26 96       	adiw	r28, 0x06	; 6
     9b6:	cd bf       	out	0x3d, r28	; 61
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	ff 91       	pop	r31
     9c0:	ef 91       	pop	r30
     9c2:	bf 91       	pop	r27
     9c4:	af 91       	pop	r26
     9c6:	9f 91       	pop	r25
     9c8:	8f 91       	pop	r24
     9ca:	7f 91       	pop	r23
     9cc:	6f 91       	pop	r22
     9ce:	5f 91       	pop	r21
     9d0:	4f 91       	pop	r20
     9d2:	3f 91       	pop	r19
     9d4:	2f 91       	pop	r18
     9d6:	1f 91       	pop	r17
     9d8:	0f 90       	pop	r0
     9da:	0b be       	out	0x3b, r0	; 59
     9dc:	0f 90       	pop	r0
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	0f 90       	pop	r0
     9e2:	1f 90       	pop	r1
     9e4:	18 95       	reti
		
	//Process events
	if (l0) 
		Event.Event=RISING_1A;
	else
		Event.Event=FALLING_1A;
     9e6:	85 e0       	ldi	r24, 0x05	; 5
     9e8:	8d 83       	std	Y+5, r24	; 0x05

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	ae 01       	movw	r20, r28
     9ee:	4a 5f       	subi	r20, 0xFA	; 250
     9f0:	5f 4f       	sbci	r21, 0xFF	; 255
     9f2:	be 01       	movw	r22, r28
     9f4:	6f 5f       	subi	r22, 0xFF	; 255
     9f6:	7f 4f       	sbci	r23, 0xFF	; 255
     9f8:	80 91 53 22 	lds	r24, 0x2253	; 0x802253 <EncoderEventQueue>
     9fc:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <EncoderEventQueue+0x1>
     a00:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <xQueueGenericSendFromISR>
	//Process counter
	if ( l0 && !l1) Cnt1--; //Rising edge on Line0, Line1 low
	if ( l0 &&  l1) Cnt1++; //Rising edge on Line0, Line1 high	
	if (!l0 &&  l1) Cnt1--; //Falling edge on Line0, Line1 high
     a04:	11 23       	and	r17, r17
     a06:	49 f2       	breq	.-110    	; 0x99a <__vector_2+0x8c>
     a08:	80 91 4f 22 	lds	r24, 0x224F	; 0x80224f <Cnt1>
     a0c:	90 91 50 22 	lds	r25, 0x2250	; 0x802250 <Cnt1+0x1>
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	80 93 4f 22 	sts	0x224F, r24	; 0x80224f <Cnt1>
     a16:	90 93 50 22 	sts	0x2250, r25	; 0x802250 <Cnt1+0x1>
     a1a:	c8 cf       	rjmp	.-112    	; 0x9ac <__vector_2+0x9e>

00000a1c <__vector_3>:
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	LastTriggerTime=Event.Time;
}

ISR (PORTC_INT1_vect)
{
     a1c:	1f 92       	push	r1
     a1e:	0f 92       	push	r0
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	0f 92       	push	r0
     a24:	11 24       	eor	r1, r1
     a26:	0b b6       	in	r0, 0x3b	; 59
     a28:	0f 92       	push	r0
     a2a:	1f 93       	push	r17
     a2c:	2f 93       	push	r18
     a2e:	3f 93       	push	r19
     a30:	4f 93       	push	r20
     a32:	5f 93       	push	r21
     a34:	6f 93       	push	r22
     a36:	7f 93       	push	r23
     a38:	8f 93       	push	r24
     a3a:	9f 93       	push	r25
     a3c:	af 93       	push	r26
     a3e:	bf 93       	push	r27
     a40:	ef 93       	push	r30
     a42:	ff 93       	push	r31
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	00 d0       	rcall	.+0      	; 0xa4a <__vector_3+0x2e>
     a4a:	00 d0       	rcall	.+0      	; 0xa4c <__vector_3+0x30>
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
	static uint32_t LastTriggerTime=0;
	uint8_t Data,l0,l1;
	EncoderEventStruct Event;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
     a50:	1e 82       	std	Y+6, r1	; 0x06
	Event.Time=portGET_RUN_TIME_COUNTER_VALUE();
     a52:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     a56:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     a5a:	80 91 59 22 	lds	r24, 0x2259	; 0x802259 <StatsTimer>
     a5e:	90 91 5a 22 	lds	r25, 0x225A	; 0x80225a <StatsTimer+0x1>
     a62:	a0 91 5b 22 	lds	r26, 0x225B	; 0x80225b <StatsTimer+0x2>
     a66:	b0 91 5c 22 	lds	r27, 0x225C	; 0x80225c <StatsTimer+0x3>
     a6a:	82 0f       	add	r24, r18
     a6c:	93 1f       	adc	r25, r19
     a6e:	a1 1d       	adc	r26, r1
     a70:	b1 1d       	adc	r27, r1
     a72:	89 83       	std	Y+1, r24	; 0x01
     a74:	9a 83       	std	Y+2, r25	; 0x02
     a76:	ab 83       	std	Y+3, r26	; 0x03
     a78:	bc 83       	std	Y+4, r27	; 0x04
	#ifdef ENCODER_FILTER_ENABLE
		if ((Event.Time-LastTriggerTime)<ENCODER_FILTER_TIME) return;
	#endif
	
	Data=PORTC.IN;
     a7a:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
	l0=Data & (1<<6);
     a7e:	18 2f       	mov	r17, r24
     a80:	10 74       	andi	r17, 0x40	; 64
	l1=Data & (1<<7);
	
	//Process events
	if (l1)
     a82:	87 ff       	sbrs	r24, 7
     a84:	37 c0       	rjmp	.+110    	; 0xaf4 <__vector_3+0xd8>
		Event.Event=RISING_1B;
     a86:	82 e0       	ldi	r24, 0x02	; 2
     a88:	8d 83       	std	Y+5, r24	; 0x05
	else
		Event.Event=FALLING_1B;

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	ae 01       	movw	r20, r28
     a8e:	4a 5f       	subi	r20, 0xFA	; 250
     a90:	5f 4f       	sbci	r21, 0xFF	; 255
     a92:	be 01       	movw	r22, r28
     a94:	6f 5f       	subi	r22, 0xFF	; 255
     a96:	7f 4f       	sbci	r23, 0xFF	; 255
     a98:	80 91 53 22 	lds	r24, 0x2253	; 0x802253 <EncoderEventQueue>
     a9c:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <EncoderEventQueue+0x1>
     aa0:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <xQueueGenericSendFromISR>
	//Process counter
	if ( l1 && !l0) Cnt1++;//Rising edge on Line1, Line0 low
     aa4:	11 23       	and	r17, r17
     aa6:	b9 f1       	breq	.+110    	; 0xb16 <__vector_3+0xfa>
	if ( l1 &&  l0) Cnt1--;//Rising edge on Line1, Line0 high
	if (!l1 &&  l0) Cnt1++;//Falling edge on Line1, Line0 high
	if (!l1 && !l0) Cnt1--;//Falling edge on Line1, Line0 low
     aa8:	80 91 4f 22 	lds	r24, 0x224F	; 0x80224f <Cnt1>
     aac:	90 91 50 22 	lds	r25, 0x2250	; 0x802250 <Cnt1+0x1>
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	80 93 4f 22 	sts	0x224F, r24	; 0x80224f <Cnt1>
     ab6:	90 93 50 22 	sts	0x2250, r25	; 0x802250 <Cnt1+0x1>

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     aba:	8e 81       	ldd	r24, Y+6	; 0x06
     abc:	81 11       	cpse	r24, r1
     abe:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vPortYieldISR>
	LastTriggerTime=Event.Time;
}
     ac2:	26 96       	adiw	r28, 0x06	; 6
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	de bf       	out	0x3e, r29	; 62
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	ff 91       	pop	r31
     ace:	ef 91       	pop	r30
     ad0:	bf 91       	pop	r27
     ad2:	af 91       	pop	r26
     ad4:	9f 91       	pop	r25
     ad6:	8f 91       	pop	r24
     ad8:	7f 91       	pop	r23
     ada:	6f 91       	pop	r22
     adc:	5f 91       	pop	r21
     ade:	4f 91       	pop	r20
     ae0:	3f 91       	pop	r19
     ae2:	2f 91       	pop	r18
     ae4:	1f 91       	pop	r17
     ae6:	0f 90       	pop	r0
     ae8:	0b be       	out	0x3b, r0	; 59
     aea:	0f 90       	pop	r0
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	0f 90       	pop	r0
     af0:	1f 90       	pop	r1
     af2:	18 95       	reti
	
	//Process events
	if (l1)
		Event.Event=RISING_1B;
	else
		Event.Event=FALLING_1B;
     af4:	86 e0       	ldi	r24, 0x06	; 6
     af6:	8d 83       	std	Y+5, r24	; 0x05

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	ae 01       	movw	r20, r28
     afc:	4a 5f       	subi	r20, 0xFA	; 250
     afe:	5f 4f       	sbci	r21, 0xFF	; 255
     b00:	be 01       	movw	r22, r28
     b02:	6f 5f       	subi	r22, 0xFF	; 255
     b04:	7f 4f       	sbci	r23, 0xFF	; 255
     b06:	80 91 53 22 	lds	r24, 0x2253	; 0x802253 <EncoderEventQueue>
     b0a:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <EncoderEventQueue+0x1>
     b0e:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <xQueueGenericSendFromISR>
	//Process counter
	if ( l1 && !l0) Cnt1++;//Rising edge on Line1, Line0 low
	if ( l1 &&  l0) Cnt1--;//Rising edge on Line1, Line0 high
	if (!l1 &&  l0) Cnt1++;//Falling edge on Line1, Line0 high
     b12:	11 23       	and	r17, r17
     b14:	49 f2       	breq	.-110    	; 0xaa8 <__vector_3+0x8c>
     b16:	80 91 4f 22 	lds	r24, 0x224F	; 0x80224f <Cnt1>
     b1a:	90 91 50 22 	lds	r25, 0x2250	; 0x802250 <Cnt1+0x1>
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	80 93 4f 22 	sts	0x224F, r24	; 0x80224f <Cnt1>
     b24:	90 93 50 22 	sts	0x2250, r25	; 0x802250 <Cnt1+0x1>
     b28:	c8 cf       	rjmp	.-112    	; 0xaba <__vector_3+0x9e>

00000b2a <__vector_43>:
	LastTriggerTime=Event.Time;
}

//Encoder 2 ISR's
ISR (PORTE_INT0_vect)
{
     b2a:	1f 92       	push	r1
     b2c:	0f 92       	push	r0
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	0f 92       	push	r0
     b32:	11 24       	eor	r1, r1
     b34:	0b b6       	in	r0, 0x3b	; 59
     b36:	0f 92       	push	r0
     b38:	1f 93       	push	r17
     b3a:	2f 93       	push	r18
     b3c:	3f 93       	push	r19
     b3e:	4f 93       	push	r20
     b40:	5f 93       	push	r21
     b42:	6f 93       	push	r22
     b44:	7f 93       	push	r23
     b46:	8f 93       	push	r24
     b48:	9f 93       	push	r25
     b4a:	af 93       	push	r26
     b4c:	bf 93       	push	r27
     b4e:	ef 93       	push	r30
     b50:	ff 93       	push	r31
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	00 d0       	rcall	.+0      	; 0xb58 <__vector_43+0x2e>
     b58:	00 d0       	rcall	.+0      	; 0xb5a <__vector_43+0x30>
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
	static uint32_t LastTriggerTime=0;
	uint8_t Data,l0,l1;
	EncoderEventStruct Event;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
     b5e:	1e 82       	std	Y+6, r1	; 0x06
	Event.Time=portGET_RUN_TIME_COUNTER_VALUE();
     b60:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     b64:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     b68:	80 91 59 22 	lds	r24, 0x2259	; 0x802259 <StatsTimer>
     b6c:	90 91 5a 22 	lds	r25, 0x225A	; 0x80225a <StatsTimer+0x1>
     b70:	a0 91 5b 22 	lds	r26, 0x225B	; 0x80225b <StatsTimer+0x2>
     b74:	b0 91 5c 22 	lds	r27, 0x225C	; 0x80225c <StatsTimer+0x3>
     b78:	82 0f       	add	r24, r18
     b7a:	93 1f       	adc	r25, r19
     b7c:	a1 1d       	adc	r26, r1
     b7e:	b1 1d       	adc	r27, r1
     b80:	89 83       	std	Y+1, r24	; 0x01
     b82:	9a 83       	std	Y+2, r25	; 0x02
     b84:	ab 83       	std	Y+3, r26	; 0x03
     b86:	bc 83       	std	Y+4, r27	; 0x04
	#ifdef ENCODER_FILTER_ENABLE
		if ((Event.Time-LastTriggerTime)<ENCODER_FILTER_TIME) return;
	#endif
	
	Data=PORTE.IN;
     b88:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	l0=Data & (1<<4);
	l1=Data & (1<<5);
     b8c:	18 2f       	mov	r17, r24
     b8e:	10 72       	andi	r17, 0x20	; 32
	
	//Process events
	if (l0)
     b90:	84 ff       	sbrs	r24, 4
     b92:	37 c0       	rjmp	.+110    	; 0xc02 <__vector_43+0xd8>
		Event.Event=RISING_2A;
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8d 83       	std	Y+5, r24	; 0x05
	else
		Event.Event=FALLING_2A;

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	ae 01       	movw	r20, r28
     b9c:	4a 5f       	subi	r20, 0xFA	; 250
     b9e:	5f 4f       	sbci	r21, 0xFF	; 255
     ba0:	be 01       	movw	r22, r28
     ba2:	6f 5f       	subi	r22, 0xFF	; 255
     ba4:	7f 4f       	sbci	r23, 0xFF	; 255
     ba6:	80 91 53 22 	lds	r24, 0x2253	; 0x802253 <EncoderEventQueue>
     baa:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <EncoderEventQueue+0x1>
     bae:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <xQueueGenericSendFromISR>
	//Process counter
	if ( l0 && !l1) Cnt2--; //Rising edge on Line0, Line1 low
     bb2:	11 23       	and	r17, r17
     bb4:	b9 f1       	breq	.+110    	; 0xc24 <__vector_43+0xfa>
	if ( l0 &&  l1) Cnt2++; //Rising edge on Line0, Line1 high
	if (!l0 &&  l1) Cnt2--; //Falling edge on Line0, Line1 high
	if (!l0 && !l1) Cnt2++;//Falling edge on Line1, Line1 low
     bb6:	80 91 51 22 	lds	r24, 0x2251	; 0x802251 <Cnt2>
     bba:	90 91 52 22 	lds	r25, 0x2252	; 0x802252 <Cnt2+0x1>
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	80 93 51 22 	sts	0x2251, r24	; 0x802251 <Cnt2>
     bc4:	90 93 52 22 	sts	0x2252, r25	; 0x802252 <Cnt2+0x1>
	
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     bc8:	8e 81       	ldd	r24, Y+6	; 0x06
     bca:	81 11       	cpse	r24, r1
     bcc:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vPortYieldISR>
	LastTriggerTime=Event.Time;
}
     bd0:	26 96       	adiw	r28, 0x06	; 6
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	ff 91       	pop	r31
     bdc:	ef 91       	pop	r30
     bde:	bf 91       	pop	r27
     be0:	af 91       	pop	r26
     be2:	9f 91       	pop	r25
     be4:	8f 91       	pop	r24
     be6:	7f 91       	pop	r23
     be8:	6f 91       	pop	r22
     bea:	5f 91       	pop	r21
     bec:	4f 91       	pop	r20
     bee:	3f 91       	pop	r19
     bf0:	2f 91       	pop	r18
     bf2:	1f 91       	pop	r17
     bf4:	0f 90       	pop	r0
     bf6:	0b be       	out	0x3b, r0	; 59
     bf8:	0f 90       	pop	r0
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	0f 90       	pop	r0
     bfe:	1f 90       	pop	r1
     c00:	18 95       	reti
	
	//Process events
	if (l0)
		Event.Event=RISING_2A;
	else
		Event.Event=FALLING_2A;
     c02:	87 e0       	ldi	r24, 0x07	; 7
     c04:	8d 83       	std	Y+5, r24	; 0x05

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	ae 01       	movw	r20, r28
     c0a:	4a 5f       	subi	r20, 0xFA	; 250
     c0c:	5f 4f       	sbci	r21, 0xFF	; 255
     c0e:	be 01       	movw	r22, r28
     c10:	6f 5f       	subi	r22, 0xFF	; 255
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	80 91 53 22 	lds	r24, 0x2253	; 0x802253 <EncoderEventQueue>
     c18:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <EncoderEventQueue+0x1>
     c1c:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <xQueueGenericSendFromISR>
	//Process counter
	if ( l0 && !l1) Cnt2--; //Rising edge on Line0, Line1 low
	if ( l0 &&  l1) Cnt2++; //Rising edge on Line0, Line1 high
	if (!l0 &&  l1) Cnt2--; //Falling edge on Line0, Line1 high
     c20:	11 23       	and	r17, r17
     c22:	49 f2       	breq	.-110    	; 0xbb6 <__vector_43+0x8c>
     c24:	80 91 51 22 	lds	r24, 0x2251	; 0x802251 <Cnt2>
     c28:	90 91 52 22 	lds	r25, 0x2252	; 0x802252 <Cnt2+0x1>
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	80 93 51 22 	sts	0x2251, r24	; 0x802251 <Cnt2>
     c32:	90 93 52 22 	sts	0x2252, r25	; 0x802252 <Cnt2+0x1>
     c36:	c8 cf       	rjmp	.-112    	; 0xbc8 <__vector_43+0x9e>

00000c38 <__vector_44>:
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	LastTriggerTime=Event.Time;
}

ISR (PORTE_INT1_vect)
{
     c38:	1f 92       	push	r1
     c3a:	0f 92       	push	r0
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	0f 92       	push	r0
     c40:	11 24       	eor	r1, r1
     c42:	0b b6       	in	r0, 0x3b	; 59
     c44:	0f 92       	push	r0
     c46:	1f 93       	push	r17
     c48:	2f 93       	push	r18
     c4a:	3f 93       	push	r19
     c4c:	4f 93       	push	r20
     c4e:	5f 93       	push	r21
     c50:	6f 93       	push	r22
     c52:	7f 93       	push	r23
     c54:	8f 93       	push	r24
     c56:	9f 93       	push	r25
     c58:	af 93       	push	r26
     c5a:	bf 93       	push	r27
     c5c:	ef 93       	push	r30
     c5e:	ff 93       	push	r31
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	00 d0       	rcall	.+0      	; 0xc66 <__vector_44+0x2e>
     c66:	00 d0       	rcall	.+0      	; 0xc68 <__vector_44+0x30>
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
	static uint32_t LastTriggerTime=0;
	uint8_t Data,l0,l1;
	EncoderEventStruct Event;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
     c6c:	1e 82       	std	Y+6, r1	; 0x06
	Event.Time=portGET_RUN_TIME_COUNTER_VALUE();
     c6e:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     c72:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     c76:	80 91 59 22 	lds	r24, 0x2259	; 0x802259 <StatsTimer>
     c7a:	90 91 5a 22 	lds	r25, 0x225A	; 0x80225a <StatsTimer+0x1>
     c7e:	a0 91 5b 22 	lds	r26, 0x225B	; 0x80225b <StatsTimer+0x2>
     c82:	b0 91 5c 22 	lds	r27, 0x225C	; 0x80225c <StatsTimer+0x3>
     c86:	82 0f       	add	r24, r18
     c88:	93 1f       	adc	r25, r19
     c8a:	a1 1d       	adc	r26, r1
     c8c:	b1 1d       	adc	r27, r1
     c8e:	89 83       	std	Y+1, r24	; 0x01
     c90:	9a 83       	std	Y+2, r25	; 0x02
     c92:	ab 83       	std	Y+3, r26	; 0x03
     c94:	bc 83       	std	Y+4, r27	; 0x04
	#ifdef ENCODER_FILTER_ENABLE
		if ((Event.Time-LastTriggerTime)<ENCODER_FILTER_TIME) return;
	#endif
	
	Data=PORTE.IN;
     c96:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	l0=Data & (1<<4);
	l1=Data & (1<<5);
     c9a:	18 2f       	mov	r17, r24
     c9c:	10 72       	andi	r17, 0x20	; 32
	
	//Process events
	if (l0)
     c9e:	84 ff       	sbrs	r24, 4
     ca0:	1c c0       	rjmp	.+56     	; 0xcda <__vector_44+0xa2>
	Event.Event=RISING_2B;
     ca2:	84 e0       	ldi	r24, 0x04	; 4
     ca4:	8d 83       	std	Y+5, r24	; 0x05
	else
	Event.Event=FALLING_2B;

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	ae 01       	movw	r20, r28
     caa:	4a 5f       	subi	r20, 0xFA	; 250
     cac:	5f 4f       	sbci	r21, 0xFF	; 255
     cae:	be 01       	movw	r22, r28
     cb0:	6f 5f       	subi	r22, 0xFF	; 255
     cb2:	7f 4f       	sbci	r23, 0xFF	; 255
     cb4:	80 91 53 22 	lds	r24, 0x2253	; 0x802253 <EncoderEventQueue>
     cb8:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <EncoderEventQueue+0x1>
     cbc:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <xQueueGenericSendFromISR>
	//Process counter
	if ( l1 && !l0) Cnt2++;//Rising edge on Line1, Line0 low
     cc0:	11 23       	and	r17, r17
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <__vector_44+0x8e>
     cc4:	47 c0       	rjmp	.+142    	; 0xd54 <__vector_44+0x11c>
	if ( l1 &&  l0) Cnt2--;//Rising edge on Line1, Line0 high
     cc6:	80 91 51 22 	lds	r24, 0x2251	; 0x802251 <Cnt2>
     cca:	90 91 52 22 	lds	r25, 0x2252	; 0x802252 <Cnt2+0x1>
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	80 93 51 22 	sts	0x2251, r24	; 0x802251 <Cnt2>
     cd4:	90 93 52 22 	sts	0x2252, r25	; 0x802252 <Cnt2+0x1>
     cd8:	1a c0       	rjmp	.+52     	; 0xd0e <__vector_44+0xd6>
	
	//Process events
	if (l0)
	Event.Event=RISING_2B;
	else
	Event.Event=FALLING_2B;
     cda:	88 e0       	ldi	r24, 0x08	; 8
     cdc:	8d 83       	std	Y+5, r24	; 0x05

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	ae 01       	movw	r20, r28
     ce2:	4a 5f       	subi	r20, 0xFA	; 250
     ce4:	5f 4f       	sbci	r21, 0xFF	; 255
     ce6:	be 01       	movw	r22, r28
     ce8:	6f 5f       	subi	r22, 0xFF	; 255
     cea:	7f 4f       	sbci	r23, 0xFF	; 255
     cec:	80 91 53 22 	lds	r24, 0x2253	; 0x802253 <EncoderEventQueue>
     cf0:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <EncoderEventQueue+0x1>
     cf4:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <xQueueGenericSendFromISR>
	//Process counter
	if ( l1 && !l0) Cnt2++;//Rising edge on Line1, Line0 low
     cf8:	80 91 51 22 	lds	r24, 0x2251	; 0x802251 <Cnt2>
     cfc:	90 91 52 22 	lds	r25, 0x2252	; 0x802252 <Cnt2+0x1>
     d00:	11 11       	cpse	r17, r1
     d02:	22 c0       	rjmp	.+68     	; 0xd48 <__vector_44+0x110>
	if ( l1 &&  l0) Cnt2--;//Rising edge on Line1, Line0 high
	if (!l1 &&  l0) Cnt2++;//Falling edge on Line1, Line0 high
	if (!l1 && !l0) Cnt2--;//Falling edge on Line1, Line0 low
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	80 93 51 22 	sts	0x2251, r24	; 0x802251 <Cnt2>
     d0a:	90 93 52 22 	sts	0x2252, r25	; 0x802252 <Cnt2+0x1>

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     d0e:	8e 81       	ldd	r24, Y+6	; 0x06
     d10:	81 11       	cpse	r24, r1
     d12:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vPortYieldISR>
	LastTriggerTime=Event.Time;
}
     d16:	26 96       	adiw	r28, 0x06	; 6
     d18:	cd bf       	out	0x3d, r28	; 61
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	ff 91       	pop	r31
     d22:	ef 91       	pop	r30
     d24:	bf 91       	pop	r27
     d26:	af 91       	pop	r26
     d28:	9f 91       	pop	r25
     d2a:	8f 91       	pop	r24
     d2c:	7f 91       	pop	r23
     d2e:	6f 91       	pop	r22
     d30:	5f 91       	pop	r21
     d32:	4f 91       	pop	r20
     d34:	3f 91       	pop	r19
     d36:	2f 91       	pop	r18
     d38:	1f 91       	pop	r17
     d3a:	0f 90       	pop	r0
     d3c:	0b be       	out	0x3b, r0	; 59
     d3e:	0f 90       	pop	r0
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	0f 90       	pop	r0
     d44:	1f 90       	pop	r1
     d46:	18 95       	reti
	else
	Event.Event=FALLING_2B;

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
	//Process counter
	if ( l1 && !l0) Cnt2++;//Rising edge on Line1, Line0 low
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	80 93 51 22 	sts	0x2251, r24	; 0x802251 <Cnt2>
     d4e:	90 93 52 22 	sts	0x2252, r25	; 0x802252 <Cnt2+0x1>
     d52:	dd cf       	rjmp	.-70     	; 0xd0e <__vector_44+0xd6>
	if ( l1 &&  l0) Cnt2--;//Rising edge on Line1, Line0 high
	if (!l1 &&  l0) Cnt2++;//Falling edge on Line1, Line0 high
     d54:	80 91 51 22 	lds	r24, 0x2251	; 0x802251 <Cnt2>
     d58:	90 91 52 22 	lds	r25, 0x2252	; 0x802252 <Cnt2+0x1>
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	80 93 51 22 	sts	0x2251, r24	; 0x802251 <Cnt2>
     d62:	90 93 52 22 	sts	0x2252, r25	; 0x802252 <Cnt2+0x1>
     d66:	d3 cf       	rjmp	.-90     	; 0xd0e <__vector_44+0xd6>

00000d68 <DriverMotorResetEncoder>:
}


void DriverMotorResetEncoder(void)
{
	portENTER_CRITICAL();	
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	0f 92       	push	r0
	Cnt1=0;
     d6e:	10 92 4f 22 	sts	0x224F, r1	; 0x80224f <Cnt1>
     d72:	10 92 50 22 	sts	0x2250, r1	; 0x802250 <Cnt1+0x1>
	Cnt2=0;
     d76:	10 92 51 22 	sts	0x2251, r1	; 0x802251 <Cnt2>
     d7a:	10 92 52 22 	sts	0x2252, r1	; 0x802252 <Cnt2+0x1>
	portEXIT_CRITICAL();
     d7e:	0f 90       	pop	r0
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	08 95       	ret

00000d84 <DriverPL9823Init>:
}

void DriverPL9823Init()
{
	//CS init
	PORTA.DIRSET=1<<6;
     d84:	e0 e0       	ldi	r30, 0x00	; 0
     d86:	f6 e0       	ldi	r31, 0x06	; 6
     d88:	80 e4       	ldi	r24, 0x40	; 64
     d8a:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTCLR=1<<6;
     d8c:	86 83       	std	Z+6, r24	; 0x06
     d8e:	08 95       	ret

00000d90 <DriverPowerInit>:
#include "DriverPower.h"

void DriverPowerInit(void)
{
	//Aux Vcc GPIO setup
	PORTC.DIRSET=1<<5;
     d90:	80 e2       	ldi	r24, 0x20	; 32
     d92:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     d96:	08 95       	ret

00000d98 <DriverPowerVccAuxSet>:
}


void DriverPowerVccAuxSet(uint8_t State)
{
	if (State)
     d98:	81 11       	cpse	r24, r1
     d9a:	04 c0       	rjmp	.+8      	; 0xda4 <DriverPowerVccAuxSet+0xc>
		PORTC.OUTSET=1<<5;
	else
		PORTC.OUTCLR=1<<5;
     d9c:	80 e2       	ldi	r24, 0x20	; 32
     d9e:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     da2:	08 95       	ret


void DriverPowerVccAuxSet(uint8_t State)
{
	if (State)
		PORTC.OUTSET=1<<5;
     da4:	80 e2       	ldi	r24, 0x20	; 32
     da6:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     daa:	08 95       	ret

00000dac <DriverSysClkXtalInit>:
    // Clock setup          
    if (F_XTAL<400E3) return -1; //Invalid frequency
    if (F_XTAL<=2E6) OSC.XOSCCTRL=0b00001011; //Select <2 Mhz XTAL osc, max startup time
    else if(F_XTAL<=9E6) OSC.XOSCCTRL=0b01001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=12E6) OSC.XOSCCTRL=0b10001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=16E6) OSC.XOSCCTRL=0b11001011; //Select <2 Mhz XTAL osc, max startup time 
     dac:	8b ec       	ldi	r24, 0xCB	; 203
     dae:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    else return -1; //Invalid frequency
    OSC.CTRL=0b01000; //Enable oscillator
     db2:	88 e0       	ldi	r24, 0x08	; 8
     db4:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
	//Wait until XTAL osc is ready
    while (!(OSC.STATUS&0b1000)); 
     db8:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     dbc:	83 ff       	sbrs	r24, 3
     dbe:	fc cf       	rjmp	.-8      	; 0xdb8 <DriverSysClkXtalInit+0xc>
	{
		//Configure PLL
		Mult=F_CPU/F_XTAL;
		if (Mult>31) return -1; //Invalid frequency; too high
		if (F_XTAL * (uint32_t) Mult !=F_CPU) return -1; //Only supports whole dividers
		OSC.PLLCTRL=0b11000000 | (Mult);
     dc0:	82 ec       	ldi	r24, 0xC2	; 194
     dc2:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
		OSC.CTRL=0b00011000; //Enable PLL
     dc6:	88 e1       	ldi	r24, 0x18	; 24
     dc8:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
		
		//Wait until PLL is ready
		while (!(OSC.STATUS & 0b00010000));
     dcc:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     dd0:	84 ff       	sbrs	r24, 4
     dd2:	fc cf       	rjmp	.-8      	; 0xdcc <DriverSysClkXtalInit+0x20>
		
		//Select PLL as system CLK source
		CCP=0xd8;
     dd4:	88 ed       	ldi	r24, 0xD8	; 216
     dd6:	84 bf       	out	0x34, r24	; 52
		CLK.CTRL=0b100;
     dd8:	84 e0       	ldi	r24, 0x04	; 4
     dda:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	}
	return 0;
}
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	08 95       	ret

00000de2 <DriverTWIMInit>:
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
     de2:	10 92 74 21 	sts	0x2174, r1	; 0x802174 <Twim_status>
     de6:	e0 e8       	ldi	r30, 0x80	; 128
     de8:	f6 e0       	ldi	r31, 0x06	; 6
     dea:	88 e1       	ldi	r24, 0x18	; 24
     dec:	80 8b       	std	Z+16, r24	; 0x10
     dee:	81 8b       	std	Z+17, r24	; 0x11
     df0:	e0 ea       	ldi	r30, 0xA0	; 160
     df2:	f4 e0       	ldi	r31, 0x04	; 4
     df4:	88 e7       	ldi	r24, 0x78	; 120
     df6:	81 83       	std	Z+1, r24	; 0x01
     df8:	83 e2       	ldi	r24, 0x23	; 35
     dfa:	85 83       	std	Z+5, r24	; 0x05
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	84 83       	std	Z+4, r24	; 0x04
     e00:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <xQueueCreateMutex>
     e04:	80 93 71 21 	sts	0x2171, r24	; 0x802171 <SemaBus>
     e08:	90 93 72 21 	sts	0x2172, r25	; 0x802172 <SemaBus+0x1>
     e0c:	43 e0       	ldi	r20, 0x03	; 3
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <xQueueGenericCreate>
     e16:	80 93 6f 21 	sts	0x216F, r24	; 0x80216f <SemaRx>
     e1a:	90 93 70 21 	sts	0x2170, r25	; 0x802170 <SemaRx+0x1>
     e1e:	08 95       	ret

00000e20 <TWIMWriteRead>:
     e20:	cf 92       	push	r12
     e22:	df 92       	push	r13
     e24:	ef 92       	push	r14
     e26:	ff 92       	push	r15
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	d8 2f       	mov	r29, r24
     e32:	6b 01       	movw	r12, r22
     e34:	14 2f       	mov	r17, r20
     e36:	79 01       	movw	r14, r18
     e38:	6f ef       	ldi	r22, 0xFF	; 255
     e3a:	7f ef       	ldi	r23, 0xFF	; 255
     e3c:	80 91 71 21 	lds	r24, 0x2171	; 0x802171 <SemaBus>
     e40:	90 91 72 21 	lds	r25, 0x2172	; 0x802172 <SemaBus+0x1>
     e44:	0e 94 73 10 	call	0x20e6	; 0x20e6 <xQueueSemaphoreTake>
     e48:	c0 92 7b 21 	sts	0x217B, r12	; 0x80217b <Twim_writeData>
     e4c:	d0 92 7c 21 	sts	0x217C, r13	; 0x80217c <Twim_writeData+0x1>
     e50:	e0 92 79 21 	sts	0x2179, r14	; 0x802179 <Twim_readData>
     e54:	f0 92 7a 21 	sts	0x217A, r15	; 0x80217a <Twim_readData+0x1>
     e58:	c0 91 74 21 	lds	r28, 0x2174	; 0x802174 <Twim_status>
     e5c:	c1 11       	cpse	r28, r1
     e5e:	55 c0       	rjmp	.+170    	; 0xf0a <TWIMWriteRead+0xea>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	80 93 74 21 	sts	0x2174, r24	; 0x802174 <Twim_status>
     e66:	10 92 73 21 	sts	0x2173, r1	; 0x802173 <Twim_result>
     e6a:	8d 2f       	mov	r24, r29
     e6c:	88 0f       	add	r24, r24
     e6e:	80 93 7d 21 	sts	0x217D, r24	; 0x80217d <Twim_address>
     e72:	10 93 78 21 	sts	0x2178, r17	; 0x802178 <Twim_bytesToWrite>
     e76:	00 93 77 21 	sts	0x2177, r16	; 0x802177 <Twim_bytesToRead>
     e7a:	10 92 76 21 	sts	0x2176, r1	; 0x802176 <Twim_bytesWritten>
     e7e:	10 92 75 21 	sts	0x2175, r1	; 0x802175 <Twim_bytesRead>
     e82:	80 91 78 21 	lds	r24, 0x2178	; 0x802178 <Twim_bytesToWrite>
     e86:	88 23       	and	r24, r24
     e88:	b1 f1       	breq	.+108    	; 0xef6 <TWIMWriteRead+0xd6>
     e8a:	80 91 7d 21 	lds	r24, 0x217D	; 0x80217d <Twim_address>
     e8e:	8e 7f       	andi	r24, 0xFE	; 254
     e90:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
     e94:	6f ef       	ldi	r22, 0xFF	; 255
     e96:	7f ef       	ldi	r23, 0xFF	; 255
     e98:	80 91 6f 21 	lds	r24, 0x216F	; 0x80216f <SemaRx>
     e9c:	90 91 70 21 	lds	r25, 0x2170	; 0x802170 <SemaRx+0x1>
     ea0:	0e 94 73 10 	call	0x20e6	; 0x20e6 <xQueueSemaphoreTake>
     ea4:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <Twim_result>
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	e1 f1       	breq	.+120    	; 0xf24 <TWIMWriteRead+0x104>
     eac:	1f 92       	push	r1
     eae:	8f 93       	push	r24
     eb0:	1f 92       	push	r1
     eb2:	df 93       	push	r29
     eb4:	82 e6       	ldi	r24, 0x62	; 98
     eb6:	90 e2       	ldi	r25, 0x20	; 32
     eb8:	9f 93       	push	r25
     eba:	8f 93       	push	r24
     ebc:	0e 94 c3 2a 	call	0x5586	; 0x5586 <printf>
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	80 91 71 21 	lds	r24, 0x2171	; 0x802171 <SemaBus>
     ece:	90 91 72 21 	lds	r25, 0x2172	; 0x802172 <SemaBus+0x1>
     ed2:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <xQueueGenericSend>
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	8c 2f       	mov	r24, r28
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	df 90       	pop	r13
     ef2:	cf 90       	pop	r12
     ef4:	08 95       	ret
     ef6:	80 91 77 21 	lds	r24, 0x2177	; 0x802177 <Twim_bytesToRead>
     efa:	88 23       	and	r24, r24
     efc:	59 f2       	breq	.-106    	; 0xe94 <TWIMWriteRead+0x74>
     efe:	80 91 7d 21 	lds	r24, 0x217D	; 0x80217d <Twim_address>
     f02:	81 60       	ori	r24, 0x01	; 1
     f04:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
     f08:	c5 cf       	rjmp	.-118    	; 0xe94 <TWIMWriteRead+0x74>
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	80 91 71 21 	lds	r24, 0x2171	; 0x802171 <SemaBus>
     f18:	90 91 72 21 	lds	r25, 0x2172	; 0x802172 <SemaBus+0x1>
     f1c:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <xQueueGenericSend>
     f20:	c0 e0       	ldi	r28, 0x00	; 0
     f22:	df cf       	rjmp	.-66     	; 0xee2 <TWIMWriteRead+0xc2>
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	80 91 71 21 	lds	r24, 0x2171	; 0x802171 <SemaBus>
     f32:	90 91 72 21 	lds	r25, 0x2172	; 0x802172 <SemaBus+0x1>
     f36:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <xQueueGenericSend>
     f3a:	c1 e0       	ldi	r28, 0x01	; 1
     f3c:	d2 cf       	rjmp	.-92     	; 0xee2 <TWIMWriteRead+0xc2>

00000f3e <TWIMWrite>:
     f3e:	0f 93       	push	r16
     f40:	00 e0       	ldi	r16, 0x00	; 0
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	0e 94 10 07 	call	0xe20	; 0xe20 <TWIMWriteRead>
     f4a:	0f 91       	pop	r16
     f4c:	08 95       	ret

00000f4e <TWIMWriteHandler>:
     f4e:	90 91 78 21 	lds	r25, 0x2178	; 0x802178 <Twim_bytesToWrite>
     f52:	20 91 77 21 	lds	r18, 0x2177	; 0x802177 <Twim_bytesToRead>
     f56:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     f5a:	84 fd       	sbrc	r24, 4
     f5c:	22 c0       	rjmp	.+68     	; 0xfa2 <TWIMWriteHandler+0x54>
     f5e:	80 91 76 21 	lds	r24, 0x2176	; 0x802176 <Twim_bytesWritten>
     f62:	89 17       	cp	r24, r25
     f64:	68 f0       	brcs	.+26     	; 0xf80 <TWIMWriteHandler+0x32>
     f66:	80 91 75 21 	lds	r24, 0x2175	; 0x802175 <Twim_bytesRead>
     f6a:	82 17       	cp	r24, r18
     f6c:	18 f1       	brcs	.+70     	; 0xfb4 <TWIMWriteHandler+0x66>
     f6e:	83 e0       	ldi	r24, 0x03	; 3
     f70:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	80 93 73 21 	sts	0x2173, r24	; 0x802173 <Twim_result>
     f7a:	10 92 74 21 	sts	0x2174, r1	; 0x802174 <Twim_status>
     f7e:	08 95       	ret
     f80:	80 91 76 21 	lds	r24, 0x2176	; 0x802176 <Twim_bytesWritten>
     f84:	e0 91 7b 21 	lds	r30, 0x217B	; 0x80217b <Twim_writeData>
     f88:	f0 91 7c 21 	lds	r31, 0x217C	; 0x80217c <Twim_writeData+0x1>
     f8c:	e8 0f       	add	r30, r24
     f8e:	f1 1d       	adc	r31, r1
     f90:	80 81       	ld	r24, Z
     f92:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     f96:	80 91 76 21 	lds	r24, 0x2176	; 0x802176 <Twim_bytesWritten>
     f9a:	8f 5f       	subi	r24, 0xFF	; 255
     f9c:	80 93 76 21 	sts	0x2176, r24	; 0x802176 <Twim_bytesWritten>
     fa0:	08 95       	ret
     fa2:	83 e0       	ldi	r24, 0x03	; 3
     fa4:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     fa8:	85 e0       	ldi	r24, 0x05	; 5
     faa:	80 93 73 21 	sts	0x2173, r24	; 0x802173 <Twim_result>
     fae:	10 92 74 21 	sts	0x2174, r1	; 0x802174 <Twim_status>
     fb2:	08 95       	ret
     fb4:	80 91 7d 21 	lds	r24, 0x217D	; 0x80217d <Twim_address>
     fb8:	81 60       	ori	r24, 0x01	; 1
     fba:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
     fbe:	08 95       	ret

00000fc0 <TWIMReadHandler>:
     fc0:	80 91 75 21 	lds	r24, 0x2175	; 0x802175 <Twim_bytesRead>
     fc4:	80 32       	cpi	r24, 0x20	; 32
     fc6:	f8 f4       	brcc	.+62     	; 0x1006 <TWIMReadHandler+0x46>
     fc8:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     fcc:	90 91 75 21 	lds	r25, 0x2175	; 0x802175 <Twim_bytesRead>
     fd0:	e0 91 79 21 	lds	r30, 0x2179	; 0x802179 <Twim_readData>
     fd4:	f0 91 7a 21 	lds	r31, 0x217A	; 0x80217a <Twim_readData+0x1>
     fd8:	e9 0f       	add	r30, r25
     fda:	f1 1d       	adc	r31, r1
     fdc:	80 83       	st	Z, r24
     fde:	80 91 75 21 	lds	r24, 0x2175	; 0x802175 <Twim_bytesRead>
     fe2:	8f 5f       	subi	r24, 0xFF	; 255
     fe4:	80 93 75 21 	sts	0x2175, r24	; 0x802175 <Twim_bytesRead>
     fe8:	90 91 77 21 	lds	r25, 0x2177	; 0x802177 <Twim_bytesToRead>
     fec:	80 91 75 21 	lds	r24, 0x2175	; 0x802175 <Twim_bytesRead>
     ff0:	89 17       	cp	r24, r25
     ff2:	b8 f0       	brcs	.+46     	; 0x1022 <TWIMReadHandler+0x62>
     ff4:	87 e0       	ldi	r24, 0x07	; 7
     ff6:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	80 93 73 21 	sts	0x2173, r24	; 0x802173 <Twim_result>
    1000:	10 92 74 21 	sts	0x2174, r1	; 0x802174 <Twim_status>
    1004:	08 95       	ret
    1006:	83 e0       	ldi	r24, 0x03	; 3
    1008:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    100c:	82 e0       	ldi	r24, 0x02	; 2
    100e:	80 93 73 21 	sts	0x2173, r24	; 0x802173 <Twim_result>
    1012:	10 92 74 21 	sts	0x2174, r1	; 0x802174 <Twim_status>
    1016:	90 91 77 21 	lds	r25, 0x2177	; 0x802177 <Twim_bytesToRead>
    101a:	80 91 75 21 	lds	r24, 0x2175	; 0x802175 <Twim_bytesRead>
    101e:	89 17       	cp	r24, r25
    1020:	48 f7       	brcc	.-46     	; 0xff4 <TWIMReadHandler+0x34>
    1022:	82 e0       	ldi	r24, 0x02	; 2
    1024:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    1028:	08 95       	ret

0000102a <__vector_46>:
}

ISR (TWIM_BUS_vect)
{
    102a:	1f 92       	push	r1
    102c:	0f 92       	push	r0
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	0f 92       	push	r0
    1032:	11 24       	eor	r1, r1
    1034:	0b b6       	in	r0, 0x3b	; 59
    1036:	0f 92       	push	r0
    1038:	2f 93       	push	r18
    103a:	3f 93       	push	r19
    103c:	4f 93       	push	r20
    103e:	5f 93       	push	r21
    1040:	6f 93       	push	r22
    1042:	7f 93       	push	r23
    1044:	8f 93       	push	r24
    1046:	9f 93       	push	r25
    1048:	af 93       	push	r26
    104a:	bf 93       	push	r27
    104c:	ef 93       	push	r30
    104e:	ff 93       	push	r31
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	1f 92       	push	r1
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    105a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
    105c:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    1060:	98 2f       	mov	r25, r24
    1062:	9c 70       	andi	r25, 0x0C	; 12
    1064:	e1 f4       	brne	.+56     	; 0x109e <__vector_46+0x74>

		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    1066:	86 fd       	sbrc	r24, 6
    1068:	44 c0       	rjmp	.+136    	; 0x10f2 <__vector_46+0xc8>
		TWIMWriteHandler();
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    106a:	87 fd       	sbrc	r24, 7
    106c:	45 c0       	rjmp	.+138    	; 0x10f8 <__vector_46+0xce>
	}
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
    106e:	86 e0       	ldi	r24, 0x06	; 6
    1070:	80 93 73 21 	sts	0x2173, r24	; 0x802173 <Twim_result>
	Twim_status = TWIM_STATUS_READY;
    1074:	10 92 74 21 	sts	0x2174, r1	; 0x802174 <Twim_status>
	/* If unexpected state. */
	else {
		TWIMTransactionFinished(TWIM_RESULT_FAIL);
	}
	
	if (Twim_status == TWIM_STATUS_READY) //Transaction finished
    1078:	80 91 74 21 	lds	r24, 0x2174	; 0x802174 <Twim_status>
    107c:	81 11       	cpse	r24, r1
    107e:	1f c0       	rjmp	.+62     	; 0x10be <__vector_46+0x94>
	{
		BaseType_t res=xSemaphoreGiveFromISR( SemaRx, &xHigherPriorityTaskWoken );
    1080:	be 01       	movw	r22, r28
    1082:	6f 5f       	subi	r22, 0xFF	; 255
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	80 91 6f 21 	lds	r24, 0x216F	; 0x80216f <SemaRx>
    108a:	90 91 70 21 	lds	r25, 0x2170	; 0x802170 <SemaRx+0x1>
    108e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xQueueGiveFromISR>

		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );		
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	88 23       	and	r24, r24
    1096:	99 f0       	breq	.+38     	; 0x10be <__vector_46+0x94>
    1098:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vPortYieldISR>
	}
}
    109c:	10 c0       	rjmp	.+32     	; 0x10be <__vector_46+0x94>
	}
}

void TWIMArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
    109e:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    10a2:	82 fd       	sbrc	r24, 2
    10a4:	22 c0       	rjmp	.+68     	; 0x10ea <__vector_46+0xc0>
		Twim_result = TWIM_RESULT_BUS_ERROR;
	}
	/* If arbitration lost. */
	else {
		Twim_result = TWIM_RESULT_ARBITRATION_LOST;
    10a6:	93 e0       	ldi	r25, 0x03	; 3
    10a8:	90 93 73 21 	sts	0x2173, r25	; 0x802173 <Twim_result>
	}

	/* Clear interrupt flag. */
	TWIM_BUS.MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    10ac:	88 60       	ori	r24, 0x08	; 8
    10ae:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	Twim_status = TWIM_STATUS_READY;
    10b2:	10 92 74 21 	sts	0x2174, r1	; 0x802174 <Twim_status>
	/* If unexpected state. */
	else {
		TWIMTransactionFinished(TWIM_RESULT_FAIL);
	}
	
	if (Twim_status == TWIM_STATUS_READY) //Transaction finished
    10b6:	80 91 74 21 	lds	r24, 0x2174	; 0x802174 <Twim_status>
    10ba:	88 23       	and	r24, r24
    10bc:	09 f3       	breq	.-62     	; 0x1080 <__vector_46+0x56>
	{
		BaseType_t res=xSemaphoreGiveFromISR( SemaRx, &xHigherPriorityTaskWoken );

		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );		
	}
}
    10be:	0f 90       	pop	r0
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	ff 91       	pop	r31
    10c6:	ef 91       	pop	r30
    10c8:	bf 91       	pop	r27
    10ca:	af 91       	pop	r26
    10cc:	9f 91       	pop	r25
    10ce:	8f 91       	pop	r24
    10d0:	7f 91       	pop	r23
    10d2:	6f 91       	pop	r22
    10d4:	5f 91       	pop	r21
    10d6:	4f 91       	pop	r20
    10d8:	3f 91       	pop	r19
    10da:	2f 91       	pop	r18
    10dc:	0f 90       	pop	r0
    10de:	0b be       	out	0x3b, r0	; 59
    10e0:	0f 90       	pop	r0
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	0f 90       	pop	r0
    10e6:	1f 90       	pop	r1
    10e8:	18 95       	reti
{
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
		Twim_result = TWIM_RESULT_BUS_ERROR;
    10ea:	94 e0       	ldi	r25, 0x04	; 4
    10ec:	90 93 73 21 	sts	0x2173, r25	; 0x802173 <Twim_result>
    10f0:	dd cf       	rjmp	.-70     	; 0x10ac <__vector_46+0x82>
		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
		TWIMWriteHandler();
    10f2:	0e 94 a7 07 	call	0xf4e	; 0xf4e <TWIMWriteHandler>
    10f6:	df cf       	rjmp	.-66     	; 0x10b6 <__vector_46+0x8c>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
		TWIMReadHandler();
    10f8:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <TWIMReadHandler>
    10fc:	dc cf       	rjmp	.-72     	; 0x10b6 <__vector_46+0x8c>

000010fe <stdio_getchar>:
		
	return 0;
}
	
static int stdio_getchar(FILE *stream)
{
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	1f 92       	push	r1
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
	char c;
	xQueueReceive(UsartRxQueue,&c,portMAX_DELAY);
    1108:	4f ef       	ldi	r20, 0xFF	; 255
    110a:	5f ef       	ldi	r21, 0xFF	; 255
    110c:	be 01       	movw	r22, r28
    110e:	6f 5f       	subi	r22, 0xFF	; 255
    1110:	7f 4f       	sbci	r23, 0xFF	; 255
    1112:	80 91 55 22 	lds	r24, 0x2255	; 0x802255 <UsartRxQueue>
    1116:	90 91 56 22 	lds	r25, 0x2256	; 0x802256 <UsartRxQueue+0x1>
    111a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <xQueueReceive>
	return c;
    111e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0f 90       	pop	r0
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	08 95       	ret

0000112a <stdio_putchar>:

}


static int stdio_putchar(char c, FILE * stream)
{
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	1f 92       	push	r1
    1130:	1f 92       	push	r1
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	8a 83       	std	Y+2, r24	; 0x02
	int res;
	char cbuf;

	xQueueSend(UsartTxQueue,&c,portMAX_DELAY);
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	4f ef       	ldi	r20, 0xFF	; 255
    113c:	5f ef       	ldi	r21, 0xFF	; 255
    113e:	be 01       	movw	r22, r28
    1140:	6e 5f       	subi	r22, 0xFE	; 254
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	80 91 57 22 	lds	r24, 0x2257	; 0x802257 <UsartTxQueue>
    1148:	90 91 58 22 	lds	r25, 0x2258	; 0x802258 <UsartTxQueue+0x1>
    114c:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <xQueueGenericSend>

	if (USART.STATUS & (1<<5))
    1150:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
    1154:	85 ff       	sbrs	r24, 5
    1156:	0e c0       	rjmp	.+28     	; 0x1174 <stdio_putchar+0x4a>
	{
		xQueueReceive(UsartTxQueue,&cbuf,0);
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	50 e0       	ldi	r21, 0x00	; 0
    115c:	be 01       	movw	r22, r28
    115e:	6f 5f       	subi	r22, 0xFF	; 255
    1160:	7f 4f       	sbci	r23, 0xFF	; 255
    1162:	80 91 57 22 	lds	r24, 0x2257	; 0x802257 <UsartTxQueue>
    1166:	90 91 58 22 	lds	r25, 0x2258	; 0x802258 <UsartTxQueue+0x1>
    116a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <xQueueReceive>
		USART.DATA=cbuf;
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
	}
		
	return 0;
}
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <DriverUSARTInit>:
QueueHandle_t UsartTxQueue;
QueueHandle_t UsartRxQueue;

void DriverUSARTInit(void)
{
	UsartTxQueue=xQueueCreate(UART_QUEUE_LENGTH,sizeof(char));
    1182:	40 e0       	ldi	r20, 0x00	; 0
    1184:	61 e0       	ldi	r22, 0x01	; 1
    1186:	80 e8       	ldi	r24, 0x80	; 128
    1188:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <xQueueGenericCreate>
    118c:	80 93 57 22 	sts	0x2257, r24	; 0x802257 <UsartTxQueue>
    1190:	90 93 58 22 	sts	0x2258, r25	; 0x802258 <UsartTxQueue+0x1>
	UsartRxQueue=xQueueCreate(UART_QUEUE_LENGTH,sizeof(char));
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	61 e0       	ldi	r22, 0x01	; 1
    1198:	80 e8       	ldi	r24, 0x80	; 128
    119a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <xQueueGenericCreate>
    119e:	80 93 55 22 	sts	0x2255, r24	; 0x802255 <UsartRxQueue>
    11a2:	90 93 56 22 	sts	0x2256, r25	; 0x802256 <UsartRxQueue+0x1>
		
	USART_PORT.DIRSET=0b00001000;	
    11a6:	e0 e8       	ldi	r30, 0x80	; 128
    11a8:	f6 e0       	ldi	r31, 0x06	; 6
    11aa:	88 e0       	ldi	r24, 0x08	; 8
    11ac:	81 83       	std	Z+1, r24	; 0x01
	USART_PORT.DIRCLR=0b00000100;
    11ae:	84 e0       	ldi	r24, 0x04	; 4
    11b0:	82 83       	std	Z+2, r24	; 0x02
	
	USART.CTRLA=0b00010100;
    11b2:	e0 ea       	ldi	r30, 0xA0	; 160
    11b4:	fa e0       	ldi	r31, 0x0A	; 10
    11b6:	84 e1       	ldi	r24, 0x14	; 20
    11b8:	83 83       	std	Z+3, r24	; 0x03
	USART.CTRLB=0b00011000;
    11ba:	88 e1       	ldi	r24, 0x18	; 24
    11bc:	84 83       	std	Z+4, r24	; 0x04
	USART.CTRLC=0b00000011;
    11be:	83 e0       	ldi	r24, 0x03	; 3
    11c0:	85 83       	std	Z+5, r24	; 0x05
	
	USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 19200 baud
    11c2:	85 ee       	ldi	r24, 0xE5	; 229
    11c4:	86 83       	std	Z+6, r24	; 0x06
	USART.BAUDCTRLB=0xBC; 
    11c6:	8c eb       	ldi	r24, 0xBC	; 188
    11c8:	87 83       	std	Z+7, r24	; 0x07
	
	stdout=&UsartStdio;
    11ca:	e5 e6       	ldi	r30, 0x65	; 101
    11cc:	f2 e2       	ldi	r31, 0x22	; 34
    11ce:	86 e0       	ldi	r24, 0x06	; 6
    11d0:	90 e2       	ldi	r25, 0x20	; 32
    11d2:	82 83       	std	Z+2, r24	; 0x02
    11d4:	93 83       	std	Z+3, r25	; 0x03
	stdin=&UsartStdio;
    11d6:	80 83       	st	Z, r24
    11d8:	91 83       	std	Z+1, r25	; 0x01
    11da:	08 95       	ret

000011dc <__vector_60>:
}



ISR(USART_TXC_vect)
{
    11dc:	1f 92       	push	r1
    11de:	0f 92       	push	r0
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	0f 92       	push	r0
    11e4:	11 24       	eor	r1, r1
    11e6:	0b b6       	in	r0, 0x3b	; 59
    11e8:	0f 92       	push	r0
    11ea:	2f 93       	push	r18
    11ec:	3f 93       	push	r19
    11ee:	4f 93       	push	r20
    11f0:	5f 93       	push	r21
    11f2:	6f 93       	push	r22
    11f4:	7f 93       	push	r23
    11f6:	8f 93       	push	r24
    11f8:	9f 93       	push	r25
    11fa:	af 93       	push	r26
    11fc:	bf 93       	push	r27
    11fe:	ef 93       	push	r30
    1200:	ff 93       	push	r31
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	1f 92       	push	r1
    1208:	1f 92       	push	r1
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
	char c;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
    120e:	19 82       	std	Y+1, r1	; 0x01
	if (xQueueReceiveFromISR(UsartTxQueue,&c,&xHigherPriorityTaskWoken)==pdPASS)
    1210:	ae 01       	movw	r20, r28
    1212:	4f 5f       	subi	r20, 0xFF	; 255
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	be 01       	movw	r22, r28
    1218:	6e 5f       	subi	r22, 0xFE	; 254
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	80 91 57 22 	lds	r24, 0x2257	; 0x802257 <UsartTxQueue>
    1220:	90 91 58 22 	lds	r25, 0x2258	; 0x802258 <UsartTxQueue+0x1>
    1224:	0e 94 2a 12 	call	0x2454	; 0x2454 <xQueueReceiveFromISR>
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	d9 f0       	breq	.+54     	; 0x1262 <__vector_60+0x86>
	{
		USART.DATA=c;	
	}
	
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	81 11       	cpse	r24, r1
    1230:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vPortYieldISR>
}
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	ff 91       	pop	r31
    123e:	ef 91       	pop	r30
    1240:	bf 91       	pop	r27
    1242:	af 91       	pop	r26
    1244:	9f 91       	pop	r25
    1246:	8f 91       	pop	r24
    1248:	7f 91       	pop	r23
    124a:	6f 91       	pop	r22
    124c:	5f 91       	pop	r21
    124e:	4f 91       	pop	r20
    1250:	3f 91       	pop	r19
    1252:	2f 91       	pop	r18
    1254:	0f 90       	pop	r0
    1256:	0b be       	out	0x3b, r0	; 59
    1258:	0f 90       	pop	r0
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	0f 90       	pop	r0
    125e:	1f 90       	pop	r1
    1260:	18 95       	reti
{
	char c;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
	if (xQueueReceiveFromISR(UsartTxQueue,&c,&xHigherPriorityTaskWoken)==pdPASS)
	{
		USART.DATA=c;	
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    1268:	e1 cf       	rjmp	.-62     	; 0x122c <__vector_60+0x50>

0000126a <__vector_58>:
	
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}

ISR(USART_RXC_vect)
{
    126a:	1f 92       	push	r1
    126c:	0f 92       	push	r0
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	0f 92       	push	r0
    1272:	11 24       	eor	r1, r1
    1274:	0b b6       	in	r0, 0x3b	; 59
    1276:	0f 92       	push	r0
    1278:	2f 93       	push	r18
    127a:	3f 93       	push	r19
    127c:	4f 93       	push	r20
    127e:	5f 93       	push	r21
    1280:	6f 93       	push	r22
    1282:	7f 93       	push	r23
    1284:	8f 93       	push	r24
    1286:	9f 93       	push	r25
    1288:	af 93       	push	r26
    128a:	bf 93       	push	r27
    128c:	ef 93       	push	r30
    128e:	ff 93       	push	r31
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	1f 92       	push	r1
    1296:	1f 92       	push	r1
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
	char c;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
    129c:	19 82       	std	Y+1, r1	; 0x01
	
	c=USART.DATA;
    129e:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    12a2:	8a 83       	std	Y+2, r24	; 0x02
	xQueueSendToBackFromISR(UsartRxQueue,&c,&xHigherPriorityTaskWoken);
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	ae 01       	movw	r20, r28
    12a8:	4f 5f       	subi	r20, 0xFF	; 255
    12aa:	5f 4f       	sbci	r21, 0xFF	; 255
    12ac:	be 01       	movw	r22, r28
    12ae:	6e 5f       	subi	r22, 0xFE	; 254
    12b0:	7f 4f       	sbci	r23, 0xFF	; 255
    12b2:	80 91 55 22 	lds	r24, 0x2255	; 0x802255 <UsartRxQueue>
    12b6:	90 91 56 22 	lds	r25, 0x2256	; 0x802256 <UsartRxQueue+0x1>
    12ba:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	81 11       	cpse	r24, r1
    12c2:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vPortYieldISR>
	
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	ff 91       	pop	r31
    12d0:	ef 91       	pop	r30
    12d2:	bf 91       	pop	r27
    12d4:	af 91       	pop	r26
    12d6:	9f 91       	pop	r25
    12d8:	8f 91       	pop	r24
    12da:	7f 91       	pop	r23
    12dc:	6f 91       	pop	r22
    12de:	5f 91       	pop	r21
    12e0:	4f 91       	pop	r20
    12e2:	3f 91       	pop	r19
    12e4:	2f 91       	pop	r18
    12e6:	0f 90       	pop	r0
    12e8:	0b be       	out	0x3b, r0	; 59
    12ea:	0f 90       	pop	r0
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	0f 90       	pop	r0
    12f0:	1f 90       	pop	r1
    12f2:	18 95       	reti

000012f4 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    12f4:	0f 93       	push	r16
    12f6:	1f 93       	push	r17
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    12fe:	0e 94 40 16 	call	0x2c80	; 0x2c80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    1302:	80 91 7e 21 	lds	r24, 0x217E	; 0x80217e <xHeapHasBeenInitialised.4135>
    1306:	81 11       	cpse	r24, r1
    1308:	21 c0       	rjmp	.+66     	; 0x134c <pvPortMalloc+0x58>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    130a:	e0 91 5d 22 	lds	r30, 0x225D	; 0x80225d <ucHeap>
    130e:	f0 91 5e 22 	lds	r31, 0x225E	; 0x80225e <ucHeap+0x1>

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1312:	cf 01       	movw	r24, r30
    1314:	01 96       	adiw	r24, 0x01	; 1
    1316:	80 93 83 21 	sts	0x2183, r24	; 0x802183 <xStart>
    131a:	90 93 84 21 	sts	0x2184, r25	; 0x802184 <xStart+0x1>
	xStart.xBlockSize = ( size_t ) 0;
    131e:	10 92 85 21 	sts	0x2185, r1	; 0x802185 <xStart+0x2>
    1322:	10 92 86 21 	sts	0x2186, r1	; 0x802186 <xStart+0x3>

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	9f e3       	ldi	r25, 0x3F	; 63
    132a:	80 93 81 21 	sts	0x2181, r24	; 0x802181 <xEnd+0x2>
    132e:	90 93 82 21 	sts	0x2182, r25	; 0x802182 <xEnd+0x3>
	xEnd.pxNextFreeBlock = NULL;
    1332:	10 92 7f 21 	sts	0x217F, r1	; 0x80217f <xEnd>
    1336:	10 92 80 21 	sts	0x2180, r1	; 0x802180 <xEnd+0x1>

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    133a:	83 83       	std	Z+3, r24	; 0x03
    133c:	94 83       	std	Z+4, r25	; 0x04
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    133e:	8f e7       	ldi	r24, 0x7F	; 127
    1340:	91 e2       	ldi	r25, 0x21	; 33
    1342:	81 83       	std	Z+1, r24	; 0x01
    1344:	92 83       	std	Z+2, r25	; 0x02
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
			xHeapHasBeenInitialised = pdTRUE;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <xHeapHasBeenInitialised.4135>
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    134c:	20 97       	sbiw	r28, 0x00	; 0
    134e:	09 f4       	brne	.+2      	; 0x1352 <pvPortMalloc+0x5e>
    1350:	64 c0       	rjmp	.+200    	; 0x141a <pvPortMalloc+0x126>
		{
			xWantedSize += heapSTRUCT_SIZE;
    1352:	ae 01       	movw	r20, r28
    1354:	4c 5f       	subi	r20, 0xFC	; 252
    1356:	5f 4f       	sbci	r21, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    1358:	23 96       	adiw	r28, 0x03	; 3
    135a:	ce 3f       	cpi	r28, 0xFE	; 254
    135c:	df 43       	sbci	r29, 0x3F	; 63
    135e:	08 f0       	brcs	.+2      	; 0x1362 <pvPortMalloc+0x6e>
    1360:	5c c0       	rjmp	.+184    	; 0x141a <pvPortMalloc+0x126>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    1362:	e0 91 83 21 	lds	r30, 0x2183	; 0x802183 <xStart>
    1366:	f0 91 84 21 	lds	r31, 0x2184	; 0x802184 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    136a:	a3 e8       	ldi	r26, 0x83	; 131
    136c:	b1 e2       	ldi	r27, 0x21	; 33
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    136e:	06 c0       	rjmp	.+12     	; 0x137c <pvPortMalloc+0x88>
    1370:	80 81       	ld	r24, Z
    1372:	91 81       	ldd	r25, Z+1	; 0x01
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	39 f0       	breq	.+14     	; 0x1386 <pvPortMalloc+0x92>
    1378:	df 01       	movw	r26, r30
    137a:	fc 01       	movw	r30, r24
    137c:	22 81       	ldd	r18, Z+2	; 0x02
    137e:	33 81       	ldd	r19, Z+3	; 0x03
    1380:	24 17       	cp	r18, r20
    1382:	35 07       	cpc	r19, r21
    1384:	a8 f3       	brcs	.-22     	; 0x1370 <pvPortMalloc+0x7c>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    1386:	c1 e2       	ldi	r28, 0x21	; 33
    1388:	ef 37       	cpi	r30, 0x7F	; 127
    138a:	fc 07       	cpc	r31, r28
    138c:	09 f4       	brne	.+2      	; 0x1390 <pvPortMalloc+0x9c>
    138e:	45 c0       	rjmp	.+138    	; 0x141a <pvPortMalloc+0x126>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    1390:	cd 91       	ld	r28, X+
    1392:	dc 91       	ld	r29, X
    1394:	11 97       	sbiw	r26, 0x01	; 1
    1396:	8e 01       	movw	r16, r28
    1398:	0c 5f       	subi	r16, 0xFC	; 252
    139a:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    139c:	80 81       	ld	r24, Z
    139e:	91 81       	ldd	r25, Z+1	; 0x01
    13a0:	8d 93       	st	X+, r24
    13a2:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    13a4:	c9 01       	movw	r24, r18
    13a6:	84 1b       	sub	r24, r20
    13a8:	95 0b       	sbc	r25, r21
    13aa:	89 30       	cpi	r24, 0x09	; 9
    13ac:	91 05       	cpc	r25, r1
    13ae:	00 f1       	brcs	.+64     	; 0x13f0 <pvPortMalloc+0xfc>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    13b0:	bf 01       	movw	r22, r30
    13b2:	64 0f       	add	r22, r20
    13b4:	75 1f       	adc	r23, r21

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    13b6:	db 01       	movw	r26, r22
    13b8:	12 96       	adiw	r26, 0x02	; 2
    13ba:	8d 93       	st	X+, r24
    13bc:	9c 93       	st	X, r25
    13be:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    13c0:	42 83       	std	Z+2, r20	; 0x02
    13c2:	53 83       	std	Z+3, r21	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    13c4:	12 96       	adiw	r26, 0x02	; 2
    13c6:	2d 91       	ld	r18, X+
    13c8:	3c 91       	ld	r19, X
    13ca:	13 97       	sbiw	r26, 0x03	; 3
    13cc:	a3 e8       	ldi	r26, 0x83	; 131
    13ce:	b1 e2       	ldi	r27, 0x21	; 33
    13d0:	01 c0       	rjmp	.+2      	; 0x13d4 <pvPortMalloc+0xe0>
    13d2:	df 01       	movw	r26, r30
    13d4:	ed 91       	ld	r30, X+
    13d6:	fc 91       	ld	r31, X
    13d8:	11 97       	sbiw	r26, 0x01	; 1
    13da:	82 81       	ldd	r24, Z+2	; 0x02
    13dc:	93 81       	ldd	r25, Z+3	; 0x03
    13de:	82 17       	cp	r24, r18
    13e0:	93 07       	cpc	r25, r19
    13e2:	b8 f3       	brcs	.-18     	; 0x13d2 <pvPortMalloc+0xde>
    13e4:	eb 01       	movw	r28, r22
    13e6:	e8 83       	st	Y, r30
    13e8:	f9 83       	std	Y+1, r31	; 0x01
    13ea:	6d 93       	st	X+, r22
    13ec:	7c 93       	st	X, r23

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
		{
			xWantedSize += heapSTRUCT_SIZE;
    13ee:	9a 01       	movw	r18, r20

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
    13f0:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <xFreeBytesRemaining>
    13f4:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <xFreeBytesRemaining+0x1>
    13f8:	82 1b       	sub	r24, r18
    13fa:	93 0b       	sbc	r25, r19
    13fc:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <xFreeBytesRemaining>
    1400:	90 93 15 20 	sts	0x2015, r25	; 0x802015 <xFreeBytesRemaining+0x1>
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1404:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    1408:	01 15       	cp	r16, r1
    140a:	11 05       	cpc	r17, r1
    140c:	41 f0       	breq	.+16     	; 0x141e <pvPortMalloc+0x12a>
		}
	}
	#endif

	return pvReturn;
}
    140e:	c8 01       	movw	r24, r16
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	08 95       	ret
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    141a:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    141e:	0e 94 67 1a 	call	0x34ce	; 0x34ce <vApplicationMallocFailedHook>
    1422:	00 e0       	ldi	r16, 0x00	; 0
    1424:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	#endif

	return pvReturn;
}
    1426:	c8 01       	movw	r24, r16
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	08 95       	ret

00001432 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	21 f1       	breq	.+72     	; 0x1482 <vPortFree+0x50>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    143a:	ec 01       	movw	r28, r24
    143c:	24 97       	sbiw	r28, 0x04	; 4

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    143e:	0e 94 40 16 	call	0x2c80	; 0x2c80 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1442:	4a 81       	ldd	r20, Y+2	; 0x02
    1444:	5b 81       	ldd	r21, Y+3	; 0x03
    1446:	a3 e8       	ldi	r26, 0x83	; 131
    1448:	b1 e2       	ldi	r27, 0x21	; 33
    144a:	01 c0       	rjmp	.+2      	; 0x144e <vPortFree+0x1c>
    144c:	df 01       	movw	r26, r30
    144e:	ed 91       	ld	r30, X+
    1450:	fc 91       	ld	r31, X
    1452:	11 97       	sbiw	r26, 0x01	; 1
    1454:	22 81       	ldd	r18, Z+2	; 0x02
    1456:	33 81       	ldd	r19, Z+3	; 0x03
    1458:	24 17       	cp	r18, r20
    145a:	35 07       	cpc	r19, r21
    145c:	b8 f3       	brcs	.-18     	; 0x144c <vPortFree+0x1a>
    145e:	e8 83       	st	Y, r30
    1460:	f9 83       	std	Y+1, r31	; 0x01
    1462:	cd 93       	st	X+, r28
    1464:	dc 93       	st	X, r29
			xFreeBytesRemaining += pxLink->xBlockSize;
    1466:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <xFreeBytesRemaining>
    146a:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <xFreeBytesRemaining+0x1>
    146e:	48 0f       	add	r20, r24
    1470:	59 1f       	adc	r21, r25
    1472:	40 93 14 20 	sts	0x2014, r20	; 0x802014 <xFreeBytesRemaining>
    1476:	50 93 15 20 	sts	0x2015, r21	; 0x802015 <xFreeBytesRemaining+0x1>
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
	}
}
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
			xFreeBytesRemaining += pxLink->xBlockSize;
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
    147e:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <xTaskResumeAll>
	}
}
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	08 95       	ret

00001488 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1488:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    148a:	03 96       	adiw	r24, 0x03	; 3
    148c:	81 83       	std	Z+1, r24	; 0x01
    148e:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1490:	2f ef       	ldi	r18, 0xFF	; 255
    1492:	3f ef       	ldi	r19, 0xFF	; 255
    1494:	23 83       	std	Z+3, r18	; 0x03
    1496:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1498:	85 83       	std	Z+5, r24	; 0x05
    149a:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    149c:	87 83       	std	Z+7, r24	; 0x07
    149e:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    14a0:	10 82       	st	Z, r1
    14a2:	08 95       	ret

000014a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
    14a4:	fc 01       	movw	r30, r24
    14a6:	10 86       	std	Z+8, r1	; 0x08
    14a8:	11 86       	std	Z+9, r1	; 0x09
    14aa:	08 95       	ret

000014ac <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	9c 01       	movw	r18, r24
    14b2:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    14b4:	dc 01       	movw	r26, r24
    14b6:	11 96       	adiw	r26, 0x01	; 1
    14b8:	cd 91       	ld	r28, X+
    14ba:	dc 91       	ld	r29, X
    14bc:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    14be:	c2 83       	std	Z+2, r28	; 0x02
    14c0:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    14c2:	8c 81       	ldd	r24, Y+4	; 0x04
    14c4:	9d 81       	ldd	r25, Y+5	; 0x05
    14c6:	84 83       	std	Z+4, r24	; 0x04
    14c8:	95 83       	std	Z+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    14ca:	8c 81       	ldd	r24, Y+4	; 0x04
    14cc:	9d 81       	ldd	r25, Y+5	; 0x05
    14ce:	dc 01       	movw	r26, r24
    14d0:	12 96       	adiw	r26, 0x02	; 2
    14d2:	6d 93       	st	X+, r22
    14d4:	7c 93       	st	X, r23
    14d6:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
    14d8:	6c 83       	std	Y+4, r22	; 0x04
    14da:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
    14dc:	20 87       	std	Z+8, r18	; 0x08
    14de:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
    14e0:	f9 01       	movw	r30, r18
    14e2:	80 81       	ld	r24, Z
    14e4:	8f 5f       	subi	r24, 0xFF	; 255
    14e6:	80 83       	st	Z, r24
}
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	08 95       	ret

000014ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    14f4:	48 81       	ld	r20, Y
    14f6:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    14f8:	4f 3f       	cpi	r20, 0xFF	; 255
    14fa:	2f ef       	ldi	r18, 0xFF	; 255
    14fc:	52 07       	cpc	r21, r18
    14fe:	01 f1       	breq	.+64     	; 0x1540 <vListInsert+0x52>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1500:	dc 01       	movw	r26, r24
    1502:	13 96       	adiw	r26, 0x03	; 3
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <vListInsert+0x1a>
    1506:	df 01       	movw	r26, r30
    1508:	12 96       	adiw	r26, 0x02	; 2
    150a:	ed 91       	ld	r30, X+
    150c:	fc 91       	ld	r31, X
    150e:	13 97       	sbiw	r26, 0x03	; 3
    1510:	20 81       	ld	r18, Z
    1512:	31 81       	ldd	r19, Z+1	; 0x01
    1514:	42 17       	cp	r20, r18
    1516:	53 07       	cpc	r21, r19
    1518:	b0 f7       	brcc	.-20     	; 0x1506 <vListInsert+0x18>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    151a:	ea 83       	std	Y+2, r30	; 0x02
    151c:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    151e:	c4 83       	std	Z+4, r28	; 0x04
    1520:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
    1522:	ac 83       	std	Y+4, r26	; 0x04
    1524:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
    1526:	12 96       	adiw	r26, 0x02	; 2
    1528:	cd 93       	st	X+, r28
    152a:	dc 93       	st	X, r29
    152c:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    152e:	88 87       	std	Y+8, r24	; 0x08
    1530:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
    1532:	fc 01       	movw	r30, r24
    1534:	20 81       	ld	r18, Z
    1536:	2f 5f       	subi	r18, 0xFF	; 255
    1538:	20 83       	st	Z, r18
}
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1540:	fc 01       	movw	r30, r24
    1542:	a7 81       	ldd	r26, Z+7	; 0x07
    1544:	b0 85       	ldd	r27, Z+8	; 0x08
    1546:	12 96       	adiw	r26, 0x02	; 2
    1548:	ed 91       	ld	r30, X+
    154a:	fc 91       	ld	r31, X
    154c:	13 97       	sbiw	r26, 0x03	; 3
    154e:	e5 cf       	rjmp	.-54     	; 0x151a <vListInsert+0x2c>

00001550 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    1556:	a0 85       	ldd	r26, Z+8	; 0x08
    1558:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    155a:	22 81       	ldd	r18, Z+2	; 0x02
    155c:	33 81       	ldd	r19, Z+3	; 0x03
    155e:	84 81       	ldd	r24, Z+4	; 0x04
    1560:	95 81       	ldd	r25, Z+5	; 0x05
    1562:	e9 01       	movw	r28, r18
    1564:	8c 83       	std	Y+4, r24	; 0x04
    1566:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1568:	84 81       	ldd	r24, Z+4	; 0x04
    156a:	95 81       	ldd	r25, Z+5	; 0x05
    156c:	ec 01       	movw	r28, r24
    156e:	2a 83       	std	Y+2, r18	; 0x02
    1570:	3b 83       	std	Y+3, r19	; 0x03

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1572:	11 96       	adiw	r26, 0x01	; 1
    1574:	2d 91       	ld	r18, X+
    1576:	3c 91       	ld	r19, X
    1578:	12 97       	sbiw	r26, 0x02	; 2
    157a:	e2 17       	cp	r30, r18
    157c:	f3 07       	cpc	r31, r19
    157e:	49 f0       	breq	.+18     	; 0x1592 <uxListRemove+0x42>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    1580:	10 86       	std	Z+8, r1	; 0x08
    1582:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
    1584:	8c 91       	ld	r24, X
    1586:	81 50       	subi	r24, 0x01	; 1
    1588:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
    158a:	8c 91       	ld	r24, X
}
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	08 95       	ret
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1592:	11 96       	adiw	r26, 0x01	; 1
    1594:	8d 93       	st	X+, r24
    1596:	9c 93       	st	X, r25
    1598:	12 97       	sbiw	r26, 0x02	; 2
    159a:	f2 cf       	rjmp	.-28     	; 0x1580 <uxListRemove+0x30>

0000159c <pxPortInitialiseStack>:
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    159c:	31 e1       	ldi	r19, 0x11	; 17
    159e:	fc 01       	movw	r30, r24
    15a0:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
    15a2:	31 97       	sbiw	r30, 0x01	; 1
    15a4:	22 e2       	ldi	r18, 0x22	; 34
    15a6:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
    15a8:	31 97       	sbiw	r30, 0x01	; 1
    15aa:	a3 e3       	ldi	r26, 0x33	; 51
    15ac:	a0 83       	st	Z, r26
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    15ae:	31 97       	sbiw	r30, 0x01	; 1
    15b0:	60 83       	st	Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    15b2:	31 97       	sbiw	r30, 0x01	; 1
    15b4:	70 83       	st	Z, r23
	pxTopOfStack--;

#if defined(__AVR_3_BYTE_PC__) && __AVR_3_BYTE_PC__   //MCU's with more than 128kB of program memory: PC is 3 bytes
	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    15b6:	31 97       	sbiw	r30, 0x01	; 1
    15b8:	10 82       	st	Z, r1

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    15ba:	31 97       	sbiw	r30, 0x01	; 1
    15bc:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    15be:	31 97       	sbiw	r30, 0x01	; 1
    15c0:	60 e8       	ldi	r22, 0x80	; 128
    15c2:	60 83       	st	Z, r22
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    15c4:	31 97       	sbiw	r30, 0x01	; 1
    15c6:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    15c8:	31 97       	sbiw	r30, 0x01	; 1
    15ca:	62 e0       	ldi	r22, 0x02	; 2
    15cc:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    15ce:	31 97       	sbiw	r30, 0x01	; 1
    15d0:	63 e0       	ldi	r22, 0x03	; 3
    15d2:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    15d4:	31 97       	sbiw	r30, 0x01	; 1
    15d6:	64 e0       	ldi	r22, 0x04	; 4
    15d8:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    15da:	31 97       	sbiw	r30, 0x01	; 1
    15dc:	65 e0       	ldi	r22, 0x05	; 5
    15de:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    15e0:	31 97       	sbiw	r30, 0x01	; 1
    15e2:	66 e0       	ldi	r22, 0x06	; 6
    15e4:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    15e6:	31 97       	sbiw	r30, 0x01	; 1
    15e8:	67 e0       	ldi	r22, 0x07	; 7
    15ea:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    15ec:	31 97       	sbiw	r30, 0x01	; 1
    15ee:	68 e0       	ldi	r22, 0x08	; 8
    15f0:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    15f2:	31 97       	sbiw	r30, 0x01	; 1
    15f4:	69 e0       	ldi	r22, 0x09	; 9
    15f6:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    15f8:	31 97       	sbiw	r30, 0x01	; 1
    15fa:	60 e1       	ldi	r22, 0x10	; 16
    15fc:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    15fe:	31 97       	sbiw	r30, 0x01	; 1
    1600:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    1602:	31 97       	sbiw	r30, 0x01	; 1
    1604:	32 e1       	ldi	r19, 0x12	; 18
    1606:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    1608:	31 97       	sbiw	r30, 0x01	; 1
    160a:	33 e1       	ldi	r19, 0x13	; 19
    160c:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    160e:	31 97       	sbiw	r30, 0x01	; 1
    1610:	34 e1       	ldi	r19, 0x14	; 20
    1612:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    1614:	31 97       	sbiw	r30, 0x01	; 1
    1616:	35 e1       	ldi	r19, 0x15	; 21
    1618:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    161a:	31 97       	sbiw	r30, 0x01	; 1
    161c:	36 e1       	ldi	r19, 0x16	; 22
    161e:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    1620:	31 97       	sbiw	r30, 0x01	; 1
    1622:	37 e1       	ldi	r19, 0x17	; 23
    1624:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    1626:	31 97       	sbiw	r30, 0x01	; 1
    1628:	38 e1       	ldi	r19, 0x18	; 24
    162a:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    162c:	31 97       	sbiw	r30, 0x01	; 1
    162e:	39 e1       	ldi	r19, 0x19	; 25
    1630:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    1632:	31 97       	sbiw	r30, 0x01	; 1
    1634:	30 e2       	ldi	r19, 0x20	; 32
    1636:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    1638:	31 97       	sbiw	r30, 0x01	; 1
    163a:	31 e2       	ldi	r19, 0x21	; 33
    163c:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    163e:	31 97       	sbiw	r30, 0x01	; 1
    1640:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    1642:	31 97       	sbiw	r30, 0x01	; 1
    1644:	23 e2       	ldi	r18, 0x23	; 35
    1646:	20 83       	st	Z, r18
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1648:	31 97       	sbiw	r30, 0x01	; 1
    164a:	40 83       	st	Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    164c:	31 97       	sbiw	r30, 0x01	; 1
    164e:	50 83       	st	Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    1650:	31 97       	sbiw	r30, 0x01	; 1
    1652:	26 e2       	ldi	r18, 0x26	; 38
    1654:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    1656:	31 97       	sbiw	r30, 0x01	; 1
    1658:	27 e2       	ldi	r18, 0x27	; 39
    165a:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    165c:	31 97       	sbiw	r30, 0x01	; 1
    165e:	28 e2       	ldi	r18, 0x28	; 40
    1660:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    1662:	31 97       	sbiw	r30, 0x01	; 1
    1664:	29 e2       	ldi	r18, 0x29	; 41
    1666:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    1668:	31 97       	sbiw	r30, 0x01	; 1
    166a:	20 e3       	ldi	r18, 0x30	; 48
    166c:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    166e:	31 97       	sbiw	r30, 0x01	; 1
    1670:	21 e3       	ldi	r18, 0x31	; 49
    1672:	20 83       	st	Z, r18
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
}
    1674:	87 97       	sbiw	r24, 0x27	; 39
    1676:	08 95       	ret

00001678 <xPortStartScheduler>:
 */

static void prvSetupTimerInterrupt( void )
{
	//TCC0 is used as tick timer
	TCC0.CCA=65535;
    1678:	e0 e0       	ldi	r30, 0x00	; 0
    167a:	f8 e0       	ldi	r31, 0x08	; 8
    167c:	8f ef       	ldi	r24, 0xFF	; 255
    167e:	9f ef       	ldi	r25, 0xFF	; 255
    1680:	80 a7       	std	Z+40, r24	; 0x28
    1682:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CTRLA=0b00000001; //DIV1
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	80 83       	st	Z, r24
	TCC0.CTRLB=1<<6;
    1688:	90 e4       	ldi	r25, 0x40	; 64
    168a:	91 83       	std	Z+1, r25	; 0x01
	TCC0.INTCTRLA=0b00000001; //OVF priority LOW
    168c:	86 83       	std	Z+6, r24	; 0x06
	TCC0.INTCTRLB=0b00000001; //CCA priority LOW
    168e:	87 83       	std	Z+7, r24	; 0x07
	TCC0.PER=configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	9d e7       	ldi	r25, 0x7D	; 125
    1694:	86 a3       	std	Z+38, r24	; 0x26
    1696:	97 a3       	std	Z+39, r25	; 0x27
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    1698:	a0 91 25 22 	lds	r26, 0x2225	; 0x802225 <pxCurrentTCB>
    169c:	b0 91 26 22 	lds	r27, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    16a0:	cd 91       	ld	r28, X+
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	dd 91       	ld	r29, X+
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	ff 91       	pop	r31
    16aa:	ef 91       	pop	r30
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	bf 91       	pop	r27
    16b2:	af 91       	pop	r26
    16b4:	9f 91       	pop	r25
    16b6:	8f 91       	pop	r24
    16b8:	7f 91       	pop	r23
    16ba:	6f 91       	pop	r22
    16bc:	5f 91       	pop	r21
    16be:	4f 91       	pop	r20
    16c0:	3f 91       	pop	r19
    16c2:	2f 91       	pop	r18
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	ff 90       	pop	r15
    16ca:	ef 90       	pop	r14
    16cc:	df 90       	pop	r13
    16ce:	cf 90       	pop	r12
    16d0:	bf 90       	pop	r11
    16d2:	af 90       	pop	r10
    16d4:	9f 90       	pop	r9
    16d6:	8f 90       	pop	r8
    16d8:	7f 90       	pop	r7
    16da:	6f 90       	pop	r6
    16dc:	5f 90       	pop	r5
    16de:	4f 90       	pop	r4
    16e0:	3f 90       	pop	r3
    16e2:	2f 90       	pop	r2
    16e4:	1f 90       	pop	r1
    16e6:	0f 90       	pop	r0
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    16ec:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	08 95       	ret

000016f2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    16f2:	0f 92       	push	r0
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	0f 92       	push	r0
    16fa:	1f 92       	push	r1
    16fc:	11 24       	eor	r1, r1
    16fe:	2f 92       	push	r2
    1700:	3f 92       	push	r3
    1702:	4f 92       	push	r4
    1704:	5f 92       	push	r5
    1706:	6f 92       	push	r6
    1708:	7f 92       	push	r7
    170a:	8f 92       	push	r8
    170c:	9f 92       	push	r9
    170e:	af 92       	push	r10
    1710:	bf 92       	push	r11
    1712:	cf 92       	push	r12
    1714:	df 92       	push	r13
    1716:	ef 92       	push	r14
    1718:	ff 92       	push	r15
    171a:	0f 93       	push	r16
    171c:	1f 93       	push	r17
    171e:	2f 93       	push	r18
    1720:	3f 93       	push	r19
    1722:	4f 93       	push	r20
    1724:	5f 93       	push	r21
    1726:	6f 93       	push	r22
    1728:	7f 93       	push	r23
    172a:	8f 93       	push	r24
    172c:	9f 93       	push	r25
    172e:	af 93       	push	r26
    1730:	bf 93       	push	r27
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	ef 93       	push	r30
    1738:	ff 93       	push	r31
    173a:	a0 91 25 22 	lds	r26, 0x2225	; 0x802225 <pxCurrentTCB>
    173e:	b0 91 26 22 	lds	r27, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    1742:	0d b6       	in	r0, 0x3d	; 61
    1744:	0d 92       	st	X+, r0
    1746:	0e b6       	in	r0, 0x3e	; 62
    1748:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    174a:	0e 94 34 18 	call	0x3068	; 0x3068 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    174e:	a0 91 25 22 	lds	r26, 0x2225	; 0x802225 <pxCurrentTCB>
    1752:	b0 91 26 22 	lds	r27, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    1756:	cd 91       	ld	r28, X+
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	dd 91       	ld	r29, X+
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	ff 91       	pop	r31
    1760:	ef 91       	pop	r30
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	bf 91       	pop	r27
    1768:	af 91       	pop	r26
    176a:	9f 91       	pop	r25
    176c:	8f 91       	pop	r24
    176e:	7f 91       	pop	r23
    1770:	6f 91       	pop	r22
    1772:	5f 91       	pop	r21
    1774:	4f 91       	pop	r20
    1776:	3f 91       	pop	r19
    1778:	2f 91       	pop	r18
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	ff 90       	pop	r15
    1780:	ef 90       	pop	r14
    1782:	df 90       	pop	r13
    1784:	cf 90       	pop	r12
    1786:	bf 90       	pop	r11
    1788:	af 90       	pop	r10
    178a:	9f 90       	pop	r9
    178c:	8f 90       	pop	r8
    178e:	7f 90       	pop	r7
    1790:	6f 90       	pop	r6
    1792:	5f 90       	pop	r5
    1794:	4f 90       	pop	r4
    1796:	3f 90       	pop	r3
    1798:	2f 90       	pop	r2
    179a:	1f 90       	pop	r1
    179c:	0f 90       	pop	r0
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	0f 90       	pop	r0
	asm volatile ( "ret" );
    17a2:	08 95       	ret

000017a4 <vPortYieldISR>:
}*/

//void vPortYieldISR( void ) __attribute__ ( ( naked ) );
void vPortYieldISR( void )
{
	TCC0.CCA=TCC0.CNT+100;
    17a4:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    17a8:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    17ac:	8c 59       	subi	r24, 0x9C	; 156
    17ae:	9f 4f       	sbci	r25, 0xFF	; 255
    17b0:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    17b4:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
	if (TCC0.CCA>=TCC0.PER) TCC0.CCA-= TCC0.PER;
    17b8:	20 91 28 08 	lds	r18, 0x0828	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    17bc:	30 91 29 08 	lds	r19, 0x0829	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    17c0:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    17c4:	90 91 27 08 	lds	r25, 0x0827	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    17c8:	28 17       	cp	r18, r24
    17ca:	39 07       	cpc	r19, r25
    17cc:	70 f0       	brcs	.+28     	; 0x17ea <vPortYieldISR+0x46>
    17ce:	20 91 26 08 	lds	r18, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    17d2:	30 91 27 08 	lds	r19, 0x0827	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    17d6:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    17da:	90 91 29 08 	lds	r25, 0x0829	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    17de:	82 1b       	sub	r24, r18
    17e0:	93 0b       	sbc	r25, r19
    17e2:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    17e6:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
	asm volatile ( "ret" );
    17ea:	08 95       	ret

000017ec <__vector_14>:
	 * the context is saved at the start of the ISR.  The tick
	 * count is incremented after the context is saved.
	 */	
	ISR(TCC0_OVF_vect,ISR_NAKED)
	{
		portSAVE_CONTEXT();
    17ec:	0f 92       	push	r0
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	0f 92       	push	r0
    17f4:	1f 92       	push	r1
    17f6:	11 24       	eor	r1, r1
    17f8:	2f 92       	push	r2
    17fa:	3f 92       	push	r3
    17fc:	4f 92       	push	r4
    17fe:	5f 92       	push	r5
    1800:	6f 92       	push	r6
    1802:	7f 92       	push	r7
    1804:	8f 92       	push	r8
    1806:	9f 92       	push	r9
    1808:	af 92       	push	r10
    180a:	bf 92       	push	r11
    180c:	cf 92       	push	r12
    180e:	df 92       	push	r13
    1810:	ef 92       	push	r14
    1812:	ff 92       	push	r15
    1814:	0f 93       	push	r16
    1816:	1f 93       	push	r17
    1818:	2f 93       	push	r18
    181a:	3f 93       	push	r19
    181c:	4f 93       	push	r20
    181e:	5f 93       	push	r21
    1820:	6f 93       	push	r22
    1822:	7f 93       	push	r23
    1824:	8f 93       	push	r24
    1826:	9f 93       	push	r25
    1828:	af 93       	push	r26
    182a:	bf 93       	push	r27
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	ef 93       	push	r30
    1832:	ff 93       	push	r31
    1834:	a0 91 25 22 	lds	r26, 0x2225	; 0x802225 <pxCurrentTCB>
    1838:	b0 91 26 22 	lds	r27, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    183c:	0d b6       	in	r0, 0x3d	; 61
    183e:	0d 92       	st	X+, r0
    1840:	0e b6       	in	r0, 0x3e	; 62
    1842:	0d 92       	st	X+, r0
		StatsTimer+=TCC0.PER;
    1844:	20 91 26 08 	lds	r18, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    1848:	30 91 27 08 	lds	r19, 0x0827	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    184c:	80 91 59 22 	lds	r24, 0x2259	; 0x802259 <StatsTimer>
    1850:	90 91 5a 22 	lds	r25, 0x225A	; 0x80225a <StatsTimer+0x1>
    1854:	a0 91 5b 22 	lds	r26, 0x225B	; 0x80225b <StatsTimer+0x2>
    1858:	b0 91 5c 22 	lds	r27, 0x225C	; 0x80225c <StatsTimer+0x3>
    185c:	82 0f       	add	r24, r18
    185e:	93 1f       	adc	r25, r19
    1860:	a1 1d       	adc	r26, r1
    1862:	b1 1d       	adc	r27, r1
    1864:	80 93 59 22 	sts	0x2259, r24	; 0x802259 <StatsTimer>
    1868:	90 93 5a 22 	sts	0x225A, r25	; 0x80225a <StatsTimer+0x1>
    186c:	a0 93 5b 22 	sts	0x225B, r26	; 0x80225b <StatsTimer+0x2>
    1870:	b0 93 5c 22 	sts	0x225C, r27	; 0x80225c <StatsTimer+0x3>
		xTaskIncrementTick();
    1874:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <xTaskIncrementTick>
		vTaskSwitchContext();
    1878:	0e 94 34 18 	call	0x3068	; 0x3068 <vTaskSwitchContext>
		portRESTORE_CONTEXT();
    187c:	a0 91 25 22 	lds	r26, 0x2225	; 0x802225 <pxCurrentTCB>
    1880:	b0 91 26 22 	lds	r27, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    1884:	cd 91       	ld	r28, X+
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	dd 91       	ld	r29, X+
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	ff 91       	pop	r31
    188e:	ef 91       	pop	r30
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	bf 91       	pop	r27
    1896:	af 91       	pop	r26
    1898:	9f 91       	pop	r25
    189a:	8f 91       	pop	r24
    189c:	7f 91       	pop	r23
    189e:	6f 91       	pop	r22
    18a0:	5f 91       	pop	r21
    18a2:	4f 91       	pop	r20
    18a4:	3f 91       	pop	r19
    18a6:	2f 91       	pop	r18
    18a8:	1f 91       	pop	r17
    18aa:	0f 91       	pop	r16
    18ac:	ff 90       	pop	r15
    18ae:	ef 90       	pop	r14
    18b0:	df 90       	pop	r13
    18b2:	cf 90       	pop	r12
    18b4:	bf 90       	pop	r11
    18b6:	af 90       	pop	r10
    18b8:	9f 90       	pop	r9
    18ba:	8f 90       	pop	r8
    18bc:	7f 90       	pop	r7
    18be:	6f 90       	pop	r6
    18c0:	5f 90       	pop	r5
    18c2:	4f 90       	pop	r4
    18c4:	3f 90       	pop	r3
    18c6:	2f 90       	pop	r2
    18c8:	1f 90       	pop	r1
    18ca:	0f 90       	pop	r0
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	0f 90       	pop	r0

		asm volatile ( "reti" );
    18d0:	18 95       	reti

000018d2 <vConfigureTimerForRunTimeStats>:
 */

volatile uint32_t StatsTimer;

void vConfigureTimerForRunTimeStats(void)
{
    18d2:	08 95       	ret

000018d4 <__vector_16>:
	//TCC1.INTCTRLA=0b00000001; //OVF priority LOW
}

ISR(TCC0_CCA_vect,ISR_NAKED)
	{
	portSAVE_CONTEXT();
    18d4:	0f 92       	push	r0
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	0f 92       	push	r0
    18dc:	1f 92       	push	r1
    18de:	11 24       	eor	r1, r1
    18e0:	2f 92       	push	r2
    18e2:	3f 92       	push	r3
    18e4:	4f 92       	push	r4
    18e6:	5f 92       	push	r5
    18e8:	6f 92       	push	r6
    18ea:	7f 92       	push	r7
    18ec:	8f 92       	push	r8
    18ee:	9f 92       	push	r9
    18f0:	af 92       	push	r10
    18f2:	bf 92       	push	r11
    18f4:	cf 92       	push	r12
    18f6:	df 92       	push	r13
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	2f 93       	push	r18
    1902:	3f 93       	push	r19
    1904:	4f 93       	push	r20
    1906:	5f 93       	push	r21
    1908:	6f 93       	push	r22
    190a:	7f 93       	push	r23
    190c:	8f 93       	push	r24
    190e:	9f 93       	push	r25
    1910:	af 93       	push	r26
    1912:	bf 93       	push	r27
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	ef 93       	push	r30
    191a:	ff 93       	push	r31
    191c:	a0 91 25 22 	lds	r26, 0x2225	; 0x802225 <pxCurrentTCB>
    1920:	b0 91 26 22 	lds	r27, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    1924:	0d b6       	in	r0, 0x3d	; 61
    1926:	0d 92       	st	X+, r0
    1928:	0e b6       	in	r0, 0x3e	; 62
    192a:	0d 92       	st	X+, r0
	TCC0.CCA=65535;
    192c:	8f ef       	ldi	r24, 0xFF	; 255
    192e:	9f ef       	ldi	r25, 0xFF	; 255
    1930:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1934:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
	vTaskSwitchContext();
    1938:	0e 94 34 18 	call	0x3068	; 0x3068 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    193c:	a0 91 25 22 	lds	r26, 0x2225	; 0x802225 <pxCurrentTCB>
    1940:	b0 91 26 22 	lds	r27, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    1944:	cd 91       	ld	r28, X+
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	dd 91       	ld	r29, X+
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	ff 91       	pop	r31
    194e:	ef 91       	pop	r30
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	bf 91       	pop	r27
    1956:	af 91       	pop	r26
    1958:	9f 91       	pop	r25
    195a:	8f 91       	pop	r24
    195c:	7f 91       	pop	r23
    195e:	6f 91       	pop	r22
    1960:	5f 91       	pop	r21
    1962:	4f 91       	pop	r20
    1964:	3f 91       	pop	r19
    1966:	2f 91       	pop	r18
    1968:	1f 91       	pop	r17
    196a:	0f 91       	pop	r16
    196c:	ff 90       	pop	r15
    196e:	ef 90       	pop	r14
    1970:	df 90       	pop	r13
    1972:	cf 90       	pop	r12
    1974:	bf 90       	pop	r11
    1976:	af 90       	pop	r10
    1978:	9f 90       	pop	r9
    197a:	8f 90       	pop	r8
    197c:	7f 90       	pop	r7
    197e:	6f 90       	pop	r6
    1980:	5f 90       	pop	r5
    1982:	4f 90       	pop	r4
    1984:	3f 90       	pop	r3
    1986:	2f 90       	pop	r2
    1988:	1f 90       	pop	r1
    198a:	0f 90       	pop	r0
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	0f 90       	pop	r0
	asm volatile ( "reti" );
    1990:	18 95       	reti

00001992 <prvCopyDataToQueue>:
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;

	configASSERT( pxQueue );
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	ec 01       	movw	r28, r24
    199c:	04 2f       	mov	r16, r20
    199e:	1a 8d       	ldd	r17, Y+26	; 0x1a
    19a0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    19a2:	41 11       	cpse	r20, r1
    19a4:	0d c0       	rjmp	.+26     	; 0x19c0 <prvCopyDataToQueue+0x2e>
    19a6:	88 81       	ld	r24, Y
    19a8:	99 81       	ldd	r25, Y+1	; 0x01
    19aa:	89 2b       	or	r24, r25
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <prvCopyDataToQueue+0x1e>
    19ae:	43 c0       	rjmp	.+134    	; 0x1a36 <prvCopyDataToQueue+0xa4>
    19b0:	1f 5f       	subi	r17, 0xFF	; 255
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	1a 8f       	std	Y+26, r17	; 0x1a
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	0f 91       	pop	r16
    19be:	08 95       	ret
    19c0:	50 e0       	ldi	r21, 0x00	; 0
    19c2:	01 11       	cpse	r16, r1
    19c4:	15 c0       	rjmp	.+42     	; 0x19f0 <prvCopyDataToQueue+0x5e>
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ca:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <memcpy>
    19ce:	2c 8d       	ldd	r18, Y+28	; 0x1c
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	9b 81       	ldd	r25, Y+3	; 0x03
    19d4:	82 0f       	add	r24, r18
    19d6:	91 1d       	adc	r25, r1
    19d8:	8a 83       	std	Y+2, r24	; 0x02
    19da:	9b 83       	std	Y+3, r25	; 0x03
    19dc:	2c 81       	ldd	r18, Y+4	; 0x04
    19de:	3d 81       	ldd	r19, Y+5	; 0x05
    19e0:	82 17       	cp	r24, r18
    19e2:	93 07       	cpc	r25, r19
    19e4:	28 f3       	brcs	.-54     	; 0x19b0 <prvCopyDataToQueue+0x1e>
    19e6:	88 81       	ld	r24, Y
    19e8:	99 81       	ldd	r25, Y+1	; 0x01
    19ea:	8a 83       	std	Y+2, r24	; 0x02
    19ec:	9b 83       	std	Y+3, r25	; 0x03
    19ee:	e0 cf       	rjmp	.-64     	; 0x19b0 <prvCopyDataToQueue+0x1e>
    19f0:	8e 81       	ldd	r24, Y+6	; 0x06
    19f2:	9f 81       	ldd	r25, Y+7	; 0x07
    19f4:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <memcpy>
    19f8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	91 95       	neg	r25
    19fe:	81 95       	neg	r24
    1a00:	91 09       	sbc	r25, r1
    1a02:	2e 81       	ldd	r18, Y+6	; 0x06
    1a04:	3f 81       	ldd	r19, Y+7	; 0x07
    1a06:	28 0f       	add	r18, r24
    1a08:	39 1f       	adc	r19, r25
    1a0a:	2e 83       	std	Y+6, r18	; 0x06
    1a0c:	3f 83       	std	Y+7, r19	; 0x07
    1a0e:	48 81       	ld	r20, Y
    1a10:	59 81       	ldd	r21, Y+1	; 0x01
    1a12:	24 17       	cp	r18, r20
    1a14:	35 07       	cpc	r19, r21
    1a16:	30 f4       	brcc	.+12     	; 0x1a24 <prvCopyDataToQueue+0x92>
    1a18:	2c 81       	ldd	r18, Y+4	; 0x04
    1a1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a1c:	82 0f       	add	r24, r18
    1a1e:	93 1f       	adc	r25, r19
    1a20:	8e 83       	std	Y+6, r24	; 0x06
    1a22:	9f 83       	std	Y+7, r25	; 0x07
    1a24:	02 30       	cpi	r16, 0x02	; 2
    1a26:	21 f6       	brne	.-120    	; 0x19b0 <prvCopyDataToQueue+0x1e>
    1a28:	11 23       	and	r17, r17
    1a2a:	11 f0       	breq	.+4      	; 0x1a30 <prvCopyDataToQueue+0x9e>
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	c2 cf       	rjmp	.-124    	; 0x19b4 <prvCopyDataToQueue+0x22>
    1a30:	11 e0       	ldi	r17, 0x01	; 1
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	bf cf       	rjmp	.-130    	; 0x19b4 <prvCopyDataToQueue+0x22>
    1a36:	8c 81       	ldd	r24, Y+4	; 0x04
    1a38:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3a:	0e 94 8e 19 	call	0x331c	; 0x331c <xTaskPriorityDisinherit>
    1a3e:	1c 82       	std	Y+4, r1	; 0x04
    1a40:	1d 82       	std	Y+5, r1	; 0x05
    1a42:	1f 5f       	subi	r17, 0xFF	; 255
    1a44:	b7 cf       	rjmp	.-146    	; 0x19b4 <prvCopyDataToQueue+0x22>

00001a46 <prvCopyDataFromQueue>:
    1a46:	fc 01       	movw	r30, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	44 8d       	ldd	r20, Z+28	; 0x1c
    1a4c:	44 23       	and	r20, r20
    1a4e:	91 f0       	breq	.+36     	; 0x1a74 <prvCopyDataFromQueue+0x2e>
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	66 81       	ldd	r22, Z+6	; 0x06
    1a54:	77 81       	ldd	r23, Z+7	; 0x07
    1a56:	64 0f       	add	r22, r20
    1a58:	75 1f       	adc	r23, r21
    1a5a:	66 83       	std	Z+6, r22	; 0x06
    1a5c:	77 83       	std	Z+7, r23	; 0x07
    1a5e:	24 81       	ldd	r18, Z+4	; 0x04
    1a60:	35 81       	ldd	r19, Z+5	; 0x05
    1a62:	62 17       	cp	r22, r18
    1a64:	73 07       	cpc	r23, r19
    1a66:	20 f0       	brcs	.+8      	; 0x1a70 <prvCopyDataFromQueue+0x2a>
    1a68:	60 81       	ld	r22, Z
    1a6a:	71 81       	ldd	r23, Z+1	; 0x01
    1a6c:	66 83       	std	Z+6, r22	; 0x06
    1a6e:	77 83       	std	Z+7, r23	; 0x07
    1a70:	0c 94 6c 2a 	jmp	0x54d8	; 0x54d8 <memcpy>
    1a74:	08 95       	ret

00001a76 <prvUnlockQueue>:
    1a76:	ef 92       	push	r14
    1a78:	ff 92       	push	r15
    1a7a:	0f 93       	push	r16
    1a7c:	1f 93       	push	r17
    1a7e:	cf 93       	push	r28
    1a80:	8c 01       	movw	r16, r24
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	0f 92       	push	r0
    1a88:	fc 01       	movw	r30, r24
    1a8a:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1a8c:	1c 16       	cp	r1, r28
    1a8e:	c4 f4       	brge	.+48     	; 0x1ac0 <prvUnlockQueue+0x4a>
    1a90:	fc 01       	movw	r30, r24
    1a92:	81 89       	ldd	r24, Z+17	; 0x11
    1a94:	88 23       	and	r24, r24
    1a96:	a1 f0       	breq	.+40     	; 0x1ac0 <prvUnlockQueue+0x4a>
    1a98:	78 01       	movw	r14, r16
    1a9a:	f1 e1       	ldi	r31, 0x11	; 17
    1a9c:	ef 0e       	add	r14, r31
    1a9e:	f1 1c       	adc	r15, r1
    1aa0:	06 c0       	rjmp	.+12     	; 0x1aae <prvUnlockQueue+0x38>
    1aa2:	c1 50       	subi	r28, 0x01	; 1
    1aa4:	69 f0       	breq	.+26     	; 0x1ac0 <prvUnlockQueue+0x4a>
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	81 89       	ldd	r24, Z+17	; 0x11
    1aaa:	88 23       	and	r24, r24
    1aac:	49 f0       	breq	.+18     	; 0x1ac0 <prvUnlockQueue+0x4a>
    1aae:	c7 01       	movw	r24, r14
    1ab0:	0e 94 5e 18 	call	0x30bc	; 0x30bc <xTaskRemoveFromEventList>
    1ab4:	88 23       	and	r24, r24
    1ab6:	a9 f3       	breq	.-22     	; 0x1aa2 <prvUnlockQueue+0x2c>
    1ab8:	0e 94 17 19 	call	0x322e	; 0x322e <vTaskMissedYield>
    1abc:	c1 50       	subi	r28, 0x01	; 1
    1abe:	99 f7       	brne	.-26     	; 0x1aa6 <prvUnlockQueue+0x30>
    1ac0:	8f ef       	ldi	r24, 0xFF	; 255
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	86 8f       	std	Z+30, r24	; 0x1e
    1ac6:	0f 90       	pop	r0
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	0f 92       	push	r0
    1ad0:	c5 8d       	ldd	r28, Z+29	; 0x1d
    1ad2:	1c 16       	cp	r1, r28
    1ad4:	c4 f4       	brge	.+48     	; 0x1b06 <prvUnlockQueue+0x90>
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	80 85       	ldd	r24, Z+8	; 0x08
    1ada:	88 23       	and	r24, r24
    1adc:	a1 f0       	breq	.+40     	; 0x1b06 <prvUnlockQueue+0x90>
    1ade:	78 01       	movw	r14, r16
    1ae0:	f8 e0       	ldi	r31, 0x08	; 8
    1ae2:	ef 0e       	add	r14, r31
    1ae4:	f1 1c       	adc	r15, r1
    1ae6:	06 c0       	rjmp	.+12     	; 0x1af4 <prvUnlockQueue+0x7e>
    1ae8:	c1 50       	subi	r28, 0x01	; 1
    1aea:	69 f0       	breq	.+26     	; 0x1b06 <prvUnlockQueue+0x90>
    1aec:	f8 01       	movw	r30, r16
    1aee:	80 85       	ldd	r24, Z+8	; 0x08
    1af0:	88 23       	and	r24, r24
    1af2:	49 f0       	breq	.+18     	; 0x1b06 <prvUnlockQueue+0x90>
    1af4:	c7 01       	movw	r24, r14
    1af6:	0e 94 5e 18 	call	0x30bc	; 0x30bc <xTaskRemoveFromEventList>
    1afa:	88 23       	and	r24, r24
    1afc:	a9 f3       	breq	.-22     	; 0x1ae8 <prvUnlockQueue+0x72>
    1afe:	0e 94 17 19 	call	0x322e	; 0x322e <vTaskMissedYield>
    1b02:	c1 50       	subi	r28, 0x01	; 1
    1b04:	99 f7       	brne	.-26     	; 0x1aec <prvUnlockQueue+0x76>
    1b06:	8f ef       	ldi	r24, 0xFF	; 255
    1b08:	f8 01       	movw	r30, r16
    1b0a:	85 8f       	std	Z+29, r24	; 0x1d
    1b0c:	0f 90       	pop	r0
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cf 91       	pop	r28
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	ff 90       	pop	r15
    1b18:	ef 90       	pop	r14
    1b1a:	08 95       	ret

00001b1c <xQueueGenericReset>:
    1b1c:	1f 93       	push	r17
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	ec 01       	movw	r28, r24
    1b24:	16 2f       	mov	r17, r22
    1b26:	89 2b       	or	r24, r25
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <xQueueGenericReset+0x10>
    1b2a:	3e c0       	rjmp	.+124    	; 0x1ba8 <xQueueGenericReset+0x8c>
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	f8 94       	cli
    1b30:	0f 92       	push	r0
    1b32:	48 81       	ld	r20, Y
    1b34:	59 81       	ldd	r21, Y+1	; 0x01
    1b36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b38:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1b3a:	9a 01       	movw	r18, r20
    1b3c:	86 9f       	mul	r24, r22
    1b3e:	20 0d       	add	r18, r0
    1b40:	31 1d       	adc	r19, r1
    1b42:	11 24       	eor	r1, r1
    1b44:	2c 83       	std	Y+4, r18	; 0x04
    1b46:	3d 83       	std	Y+5, r19	; 0x05
    1b48:	1a 8e       	std	Y+26, r1	; 0x1a
    1b4a:	4a 83       	std	Y+2, r20	; 0x02
    1b4c:	5b 83       	std	Y+3, r21	; 0x03
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	68 9f       	mul	r22, r24
    1b54:	90 01       	movw	r18, r0
    1b56:	69 9f       	mul	r22, r25
    1b58:	30 0d       	add	r19, r0
    1b5a:	11 24       	eor	r1, r1
    1b5c:	ca 01       	movw	r24, r20
    1b5e:	82 0f       	add	r24, r18
    1b60:	93 1f       	adc	r25, r19
    1b62:	8e 83       	std	Y+6, r24	; 0x06
    1b64:	9f 83       	std	Y+7, r25	; 0x07
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	8d 8f       	std	Y+29, r24	; 0x1d
    1b6a:	8e 8f       	std	Y+30, r24	; 0x1e
    1b6c:	11 11       	cpse	r17, r1
    1b6e:	13 c0       	rjmp	.+38     	; 0x1b96 <xQueueGenericReset+0x7a>
    1b70:	88 85       	ldd	r24, Y+8	; 0x08
    1b72:	81 11       	cpse	r24, r1
    1b74:	07 c0       	rjmp	.+14     	; 0x1b84 <xQueueGenericReset+0x68>
    1b76:	0f 90       	pop	r0
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	1f 91       	pop	r17
    1b82:	08 95       	ret
    1b84:	ce 01       	movw	r24, r28
    1b86:	08 96       	adiw	r24, 0x08	; 8
    1b88:	0e 94 5e 18 	call	0x30bc	; 0x30bc <xTaskRemoveFromEventList>
    1b8c:	88 23       	and	r24, r24
    1b8e:	99 f3       	breq	.-26     	; 0x1b76 <xQueueGenericReset+0x5a>
    1b90:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <vPortYield>
    1b94:	f0 cf       	rjmp	.-32     	; 0x1b76 <xQueueGenericReset+0x5a>
    1b96:	ce 01       	movw	r24, r28
    1b98:	08 96       	adiw	r24, 0x08	; 8
    1b9a:	0e 94 44 0a 	call	0x1488	; 0x1488 <vListInitialise>
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	41 96       	adiw	r24, 0x11	; 17
    1ba2:	0e 94 44 0a 	call	0x1488	; 0x1488 <vListInitialise>
    1ba6:	e7 cf       	rjmp	.-50     	; 0x1b76 <xQueueGenericReset+0x5a>
    1ba8:	63 e0       	ldi	r22, 0x03	; 3
    1baa:	71 e0       	ldi	r23, 0x01	; 1
    1bac:	8a e7       	ldi	r24, 0x7A	; 122
    1bae:	90 e2       	ldi	r25, 0x20	; 32
    1bb0:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    1bb4:	bb cf       	rjmp	.-138    	; 0x1b2c <xQueueGenericReset+0x10>

00001bb6 <xQueueGenericCreate>:
    1bb6:	ff 92       	push	r15
    1bb8:	0f 93       	push	r16
    1bba:	1f 93       	push	r17
    1bbc:	cf 93       	push	r28
    1bbe:	df 93       	push	r29
    1bc0:	18 2f       	mov	r17, r24
    1bc2:	06 2f       	mov	r16, r22
    1bc4:	f4 2e       	mov	r15, r20
    1bc6:	88 23       	and	r24, r24
    1bc8:	99 f1       	breq	.+102    	; 0x1c30 <xQueueGenericCreate+0x7a>
    1bca:	00 23       	and	r16, r16
    1bcc:	d1 f0       	breq	.+52     	; 0x1c02 <xQueueGenericCreate+0x4c>
    1bce:	10 9f       	mul	r17, r16
    1bd0:	c0 01       	movw	r24, r0
    1bd2:	11 24       	eor	r1, r1
    1bd4:	81 96       	adiw	r24, 0x21	; 33
    1bd6:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <pvPortMalloc>
    1bda:	ec 01       	movw	r28, r24
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	51 f0       	breq	.+20     	; 0x1bf4 <xQueueGenericCreate+0x3e>
    1be0:	81 96       	adiw	r24, 0x21	; 33
    1be2:	88 83       	st	Y, r24
    1be4:	99 83       	std	Y+1, r25	; 0x01
    1be6:	1b 8f       	std	Y+27, r17	; 0x1b
    1be8:	0c 8f       	std	Y+28, r16	; 0x1c
    1bea:	61 e0       	ldi	r22, 0x01	; 1
    1bec:	ce 01       	movw	r24, r28
    1bee:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <xQueueGenericReset>
    1bf2:	f8 a2       	std	Y+32, r15	; 0x20
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	08 95       	ret
    1c02:	81 e2       	ldi	r24, 0x21	; 33
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <pvPortMalloc>
    1c0a:	ec 01       	movw	r28, r24
    1c0c:	89 2b       	or	r24, r25
    1c0e:	91 f3       	breq	.-28     	; 0x1bf4 <xQueueGenericCreate+0x3e>
    1c10:	c8 83       	st	Y, r28
    1c12:	d9 83       	std	Y+1, r29	; 0x01
    1c14:	1b 8f       	std	Y+27, r17	; 0x1b
    1c16:	0c 8f       	std	Y+28, r16	; 0x1c
    1c18:	61 e0       	ldi	r22, 0x01	; 1
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <xQueueGenericReset>
    1c20:	f8 a2       	std	Y+32, r15	; 0x20
    1c22:	ce 01       	movw	r24, r28
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	1f 91       	pop	r17
    1c2a:	0f 91       	pop	r16
    1c2c:	ff 90       	pop	r15
    1c2e:	08 95       	ret
    1c30:	66 e7       	ldi	r22, 0x76	; 118
    1c32:	71 e0       	ldi	r23, 0x01	; 1
    1c34:	8a e7       	ldi	r24, 0x7A	; 122
    1c36:	90 e2       	ldi	r25, 0x20	; 32
    1c38:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    1c3c:	c6 cf       	rjmp	.-116    	; 0x1bca <xQueueGenericCreate+0x14>

00001c3e <xQueueGenericSend>:
    1c3e:	bf 92       	push	r11
    1c40:	cf 92       	push	r12
    1c42:	df 92       	push	r13
    1c44:	ef 92       	push	r14
    1c46:	ff 92       	push	r15
    1c48:	0f 93       	push	r16
    1c4a:	1f 93       	push	r17
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	25 97       	sbiw	r28, 0x05	; 5
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	de bf       	out	0x3e, r29	; 62
    1c5a:	8c 01       	movw	r16, r24
    1c5c:	6b 01       	movw	r12, r22
    1c5e:	4c 83       	std	Y+4, r20	; 0x04
    1c60:	5d 83       	std	Y+5, r21	; 0x05
    1c62:	b2 2e       	mov	r11, r18
    1c64:	89 2b       	or	r24, r25
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <xQueueGenericSend+0x2c>
    1c68:	b2 c0       	rjmp	.+356    	; 0x1dce <xQueueGenericSend+0x190>
    1c6a:	c1 14       	cp	r12, r1
    1c6c:	d1 04       	cpc	r13, r1
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <xQueueGenericSend+0x34>
    1c70:	a2 c0       	rjmp	.+324    	; 0x1db6 <xQueueGenericSend+0x178>
    1c72:	f2 e0       	ldi	r31, 0x02	; 2
    1c74:	bf 16       	cp	r11, r31
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <xQueueGenericSend+0x3c>
    1c78:	7d c0       	rjmp	.+250    	; 0x1d74 <xQueueGenericSend+0x136>
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	78 01       	movw	r14, r16
    1c82:	f8 e0       	ldi	r31, 0x08	; 8
    1c84:	ef 0e       	add	r14, r31
    1c86:	f1 1c       	adc	r15, r1
    1c88:	10 c0       	rjmp	.+32     	; 0x1caa <xQueueGenericSend+0x6c>
    1c8a:	6c 81       	ldd	r22, Y+4	; 0x04
    1c8c:	7d 81       	ldd	r23, Y+5	; 0x05
    1c8e:	c7 01       	movw	r24, r14
    1c90:	0e 94 3e 18 	call	0x307c	; 0x307c <vTaskPlaceOnEventList>
    1c94:	c8 01       	movw	r24, r16
    1c96:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <prvUnlockQueue>
    1c9a:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xTaskResumeAll>
    1c9e:	88 23       	and	r24, r24
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <xQueueGenericSend+0x66>
    1ca2:	4a c0       	rjmp	.+148    	; 0x1d38 <xQueueGenericSend+0xfa>
    1ca4:	f8 01       	movw	r30, r16
    1ca6:	83 8d       	ldd	r24, Z+27	; 0x1b
    1ca8:	21 e0       	ldi	r18, 0x01	; 1
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	0f 92       	push	r0
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1cb4:	98 17       	cp	r25, r24
    1cb6:	08 f4       	brcc	.+2      	; 0x1cba <xQueueGenericSend+0x7c>
    1cb8:	42 c0       	rjmp	.+132    	; 0x1d3e <xQueueGenericSend+0x100>
    1cba:	f2 e0       	ldi	r31, 0x02	; 2
    1cbc:	bf 16       	cp	r11, r31
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <xQueueGenericSend+0x84>
    1cc0:	3e c0       	rjmp	.+124    	; 0x1d3e <xQueueGenericSend+0x100>
    1cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc6:	89 2b       	or	r24, r25
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <xQueueGenericSend+0x8e>
    1cca:	60 c0       	rjmp	.+192    	; 0x1d8c <xQueueGenericSend+0x14e>
    1ccc:	22 23       	and	r18, r18
    1cce:	59 f1       	breq	.+86     	; 0x1d26 <xQueueGenericSend+0xe8>
    1cd0:	0f 90       	pop	r0
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	0e 94 40 16 	call	0x2c80	; 0x2c80 <vTaskSuspendAll>
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	0f 92       	push	r0
    1cde:	f8 01       	movw	r30, r16
    1ce0:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ce2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ce4:	39 f1       	breq	.+78     	; 0x1d34 <xQueueGenericSend+0xf6>
    1ce6:	f8 01       	movw	r30, r16
    1ce8:	86 8d       	ldd	r24, Z+30	; 0x1e
    1cea:	8f 3f       	cpi	r24, 0xFF	; 255
    1cec:	09 f1       	breq	.+66     	; 0x1d30 <xQueueGenericSend+0xf2>
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	be 01       	movw	r22, r28
    1cf4:	6c 5f       	subi	r22, 0xFC	; 252
    1cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	01 96       	adiw	r24, 0x01	; 1
    1cfc:	0e 94 c0 18 	call	0x3180	; 0x3180 <xTaskCheckForTimeOut>
    1d00:	81 11       	cpse	r24, r1
    1d02:	48 c0       	rjmp	.+144    	; 0x1d94 <xQueueGenericSend+0x156>
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	0f 92       	push	r0
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d0e:	0f 90       	pop	r0
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	83 8d       	ldd	r24, Z+27	; 0x1b
    1d14:	98 17       	cp	r25, r24
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <xQueueGenericSend+0xdc>
    1d18:	b8 cf       	rjmp	.-144    	; 0x1c8a <xQueueGenericSend+0x4c>
    1d1a:	c8 01       	movw	r24, r16
    1d1c:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <prvUnlockQueue>
    1d20:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xTaskResumeAll>
    1d24:	bf cf       	rjmp	.-130    	; 0x1ca4 <xQueueGenericSend+0x66>
    1d26:	ce 01       	movw	r24, r28
    1d28:	01 96       	adiw	r24, 0x01	; 1
    1d2a:	0e 94 b5 18 	call	0x316a	; 0x316a <vTaskInternalSetTimeOutState>
    1d2e:	d0 cf       	rjmp	.-96     	; 0x1cd0 <xQueueGenericSend+0x92>
    1d30:	16 8e       	std	Z+30, r1	; 0x1e
    1d32:	dd cf       	rjmp	.-70     	; 0x1cee <xQueueGenericSend+0xb0>
    1d34:	15 8e       	std	Z+29, r1	; 0x1d
    1d36:	d7 cf       	rjmp	.-82     	; 0x1ce6 <xQueueGenericSend+0xa8>
    1d38:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <vPortYield>
    1d3c:	b3 cf       	rjmp	.-154    	; 0x1ca4 <xQueueGenericSend+0x66>
    1d3e:	4b 2d       	mov	r20, r11
    1d40:	b6 01       	movw	r22, r12
    1d42:	c8 01       	movw	r24, r16
    1d44:	0e 94 c9 0c 	call	0x1992	; 0x1992 <prvCopyDataToQueue>
    1d48:	f8 01       	movw	r30, r16
    1d4a:	91 89       	ldd	r25, Z+17	; 0x11
    1d4c:	91 11       	cpse	r25, r1
    1d4e:	2c c0       	rjmp	.+88     	; 0x1da8 <xQueueGenericSend+0x16a>
    1d50:	81 11       	cpse	r24, r1
    1d52:	27 c0       	rjmp	.+78     	; 0x1da2 <xQueueGenericSend+0x164>
    1d54:	0f 90       	pop	r0
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	25 96       	adiw	r28, 0x05	; 5
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	de bf       	out	0x3e, r29	; 62
    1d60:	df 91       	pop	r29
    1d62:	cf 91       	pop	r28
    1d64:	1f 91       	pop	r17
    1d66:	0f 91       	pop	r16
    1d68:	ff 90       	pop	r15
    1d6a:	ef 90       	pop	r14
    1d6c:	df 90       	pop	r13
    1d6e:	cf 90       	pop	r12
    1d70:	bf 90       	pop	r11
    1d72:	08 95       	ret
    1d74:	f8 01       	movw	r30, r16
    1d76:	83 8d       	ldd	r24, Z+27	; 0x1b
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <xQueueGenericSend+0x140>
    1d7c:	80 cf       	rjmp	.-256    	; 0x1c7e <xQueueGenericSend+0x40>
    1d7e:	63 ef       	ldi	r22, 0xF3	; 243
    1d80:	72 e0       	ldi	r23, 0x02	; 2
    1d82:	8a e7       	ldi	r24, 0x7A	; 122
    1d84:	90 e2       	ldi	r25, 0x20	; 32
    1d86:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    1d8a:	77 cf       	rjmp	.-274    	; 0x1c7a <xQueueGenericSend+0x3c>
    1d8c:	0f 90       	pop	r0
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	e3 cf       	rjmp	.-58     	; 0x1d5a <xQueueGenericSend+0x11c>
    1d94:	c8 01       	movw	r24, r16
    1d96:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <prvUnlockQueue>
    1d9a:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xTaskResumeAll>
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	dc cf       	rjmp	.-72     	; 0x1d5a <xQueueGenericSend+0x11c>
    1da2:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <vPortYield>
    1da6:	d6 cf       	rjmp	.-84     	; 0x1d54 <xQueueGenericSend+0x116>
    1da8:	c8 01       	movw	r24, r16
    1daa:	41 96       	adiw	r24, 0x11	; 17
    1dac:	0e 94 5e 18 	call	0x30bc	; 0x30bc <xTaskRemoveFromEventList>
    1db0:	88 23       	and	r24, r24
    1db2:	81 f2       	breq	.-96     	; 0x1d54 <xQueueGenericSend+0x116>
    1db4:	f6 cf       	rjmp	.-20     	; 0x1da2 <xQueueGenericSend+0x164>
    1db6:	f8 01       	movw	r30, r16
    1db8:	84 8d       	ldd	r24, Z+28	; 0x1c
    1dba:	88 23       	and	r24, r24
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <xQueueGenericSend+0x182>
    1dbe:	59 cf       	rjmp	.-334    	; 0x1c72 <xQueueGenericSend+0x34>
    1dc0:	62 ef       	ldi	r22, 0xF2	; 242
    1dc2:	72 e0       	ldi	r23, 0x02	; 2
    1dc4:	8a e7       	ldi	r24, 0x7A	; 122
    1dc6:	90 e2       	ldi	r25, 0x20	; 32
    1dc8:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    1dcc:	52 cf       	rjmp	.-348    	; 0x1c72 <xQueueGenericSend+0x34>
    1dce:	61 ef       	ldi	r22, 0xF1	; 241
    1dd0:	72 e0       	ldi	r23, 0x02	; 2
    1dd2:	8a e7       	ldi	r24, 0x7A	; 122
    1dd4:	90 e2       	ldi	r25, 0x20	; 32
    1dd6:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    1dda:	47 cf       	rjmp	.-370    	; 0x1c6a <xQueueGenericSend+0x2c>

00001ddc <xQueueCreateMutex>:
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	48 2f       	mov	r20, r24
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <xQueueGenericCreate>
    1dea:	ec 01       	movw	r28, r24
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	61 f0       	breq	.+24     	; 0x1e08 <xQueueCreateMutex+0x2c>
    1df0:	1c 82       	std	Y+4, r1	; 0x04
    1df2:	1d 82       	std	Y+5, r1	; 0x05
    1df4:	18 82       	st	Y, r1
    1df6:	19 82       	std	Y+1, r1	; 0x01
    1df8:	1e 82       	std	Y+6, r1	; 0x06
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	50 e0       	ldi	r21, 0x00	; 0
    1e00:	60 e0       	ldi	r22, 0x00	; 0
    1e02:	70 e0       	ldi	r23, 0x00	; 0
    1e04:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <xQueueGenericSend>
    1e08:	ce 01       	movw	r24, r28
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	08 95       	ret

00001e10 <xQueueGenericSendFromISR>:
    1e10:	cf 92       	push	r12
    1e12:	df 92       	push	r13
    1e14:	ef 92       	push	r14
    1e16:	ff 92       	push	r15
    1e18:	0f 93       	push	r16
    1e1a:	1f 93       	push	r17
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
    1e20:	ec 01       	movw	r28, r24
    1e22:	8b 01       	movw	r16, r22
    1e24:	6a 01       	movw	r12, r20
    1e26:	f2 2e       	mov	r15, r18
    1e28:	89 2b       	or	r24, r25
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <xQueueGenericSendFromISR+0x1e>
    1e2c:	45 c0       	rjmp	.+138    	; 0x1eb8 <xQueueGenericSendFromISR+0xa8>
    1e2e:	01 15       	cp	r16, r1
    1e30:	11 05       	cpc	r17, r1
    1e32:	c1 f1       	breq	.+112    	; 0x1ea4 <xQueueGenericSendFromISR+0x94>
    1e34:	82 e0       	ldi	r24, 0x02	; 2
    1e36:	f8 16       	cp	r15, r24
    1e38:	71 f0       	breq	.+28     	; 0x1e56 <xQueueGenericSendFromISR+0x46>
    1e3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e3e:	98 17       	cp	r25, r24
    1e40:	a0 f0       	brcs	.+40     	; 0x1e6a <xQueueGenericSendFromISR+0x5a>
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	1f 91       	pop	r17
    1e4a:	0f 91       	pop	r16
    1e4c:	ff 90       	pop	r15
    1e4e:	ef 90       	pop	r14
    1e50:	df 90       	pop	r13
    1e52:	cf 90       	pop	r12
    1e54:	08 95       	ret
    1e56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e58:	81 30       	cpi	r24, 0x01	; 1
    1e5a:	31 f0       	breq	.+12     	; 0x1e68 <xQueueGenericSendFromISR+0x58>
    1e5c:	65 ec       	ldi	r22, 0xC5	; 197
    1e5e:	73 e0       	ldi	r23, 0x03	; 3
    1e60:	8a e7       	ldi	r24, 0x7A	; 122
    1e62:	90 e2       	ldi	r25, 0x20	; 32
    1e64:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    1e68:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e6a:	ee 8c       	ldd	r14, Y+30	; 0x1e
    1e6c:	4f 2d       	mov	r20, r15
    1e6e:	b8 01       	movw	r22, r16
    1e70:	ce 01       	movw	r24, r28
    1e72:	0e 94 c9 0c 	call	0x1992	; 0x1992 <prvCopyDataToQueue>
    1e76:	ef ef       	ldi	r30, 0xFF	; 255
    1e78:	ee 16       	cp	r14, r30
    1e7a:	21 f0       	breq	.+8      	; 0x1e84 <xQueueGenericSendFromISR+0x74>
    1e7c:	e3 94       	inc	r14
    1e7e:	ee 8e       	std	Y+30, r14	; 0x1e
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	e0 cf       	rjmp	.-64     	; 0x1e44 <xQueueGenericSendFromISR+0x34>
    1e84:	89 89       	ldd	r24, Y+17	; 0x11
    1e86:	88 23       	and	r24, r24
    1e88:	d9 f3       	breq	.-10     	; 0x1e80 <xQueueGenericSendFromISR+0x70>
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	41 96       	adiw	r24, 0x11	; 17
    1e8e:	0e 94 5e 18 	call	0x30bc	; 0x30bc <xTaskRemoveFromEventList>
    1e92:	88 23       	and	r24, r24
    1e94:	a9 f3       	breq	.-22     	; 0x1e80 <xQueueGenericSendFromISR+0x70>
    1e96:	c1 14       	cp	r12, r1
    1e98:	d1 04       	cpc	r13, r1
    1e9a:	91 f3       	breq	.-28     	; 0x1e80 <xQueueGenericSendFromISR+0x70>
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	f6 01       	movw	r30, r12
    1ea0:	80 83       	st	Z, r24
    1ea2:	d0 cf       	rjmp	.-96     	; 0x1e44 <xQueueGenericSendFromISR+0x34>
    1ea4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ea6:	88 23       	and	r24, r24
    1ea8:	29 f2       	breq	.-118    	; 0x1e34 <xQueueGenericSendFromISR+0x24>
    1eaa:	64 ec       	ldi	r22, 0xC4	; 196
    1eac:	73 e0       	ldi	r23, 0x03	; 3
    1eae:	8a e7       	ldi	r24, 0x7A	; 122
    1eb0:	90 e2       	ldi	r25, 0x20	; 32
    1eb2:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    1eb6:	be cf       	rjmp	.-132    	; 0x1e34 <xQueueGenericSendFromISR+0x24>
    1eb8:	63 ec       	ldi	r22, 0xC3	; 195
    1eba:	73 e0       	ldi	r23, 0x03	; 3
    1ebc:	8a e7       	ldi	r24, 0x7A	; 122
    1ebe:	90 e2       	ldi	r25, 0x20	; 32
    1ec0:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    1ec4:	b4 cf       	rjmp	.-152    	; 0x1e2e <xQueueGenericSendFromISR+0x1e>

00001ec6 <xQueueGiveFromISR>:
    1ec6:	0f 93       	push	r16
    1ec8:	1f 93       	push	r17
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	ec 01       	movw	r28, r24
    1ed0:	8b 01       	movw	r16, r22
    1ed2:	89 2b       	or	r24, r25
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <xQueueGiveFromISR+0x12>
    1ed6:	43 c0       	rjmp	.+134    	; 0x1f5e <xQueueGiveFromISR+0x98>
    1ed8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1eda:	81 11       	cpse	r24, r1
    1edc:	1b c0       	rjmp	.+54     	; 0x1f14 <xQueueGiveFromISR+0x4e>
    1ede:	88 81       	ld	r24, Y
    1ee0:	99 81       	ldd	r25, Y+1	; 0x01
    1ee2:	89 2b       	or	r24, r25
    1ee4:	09 f1       	breq	.+66     	; 0x1f28 <xQueueGiveFromISR+0x62>
    1ee6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ee8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1eea:	89 17       	cp	r24, r25
    1eec:	68 f4       	brcc	.+26     	; 0x1f08 <xQueueGiveFromISR+0x42>
    1eee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ef0:	8f 5f       	subi	r24, 0xFF	; 255
    1ef2:	8a 8f       	std	Y+26, r24	; 0x1a
    1ef4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ef6:	19 f1       	breq	.+70     	; 0x1f3e <xQueueGiveFromISR+0x78>
    1ef8:	9f 5f       	subi	r25, 0xFF	; 255
    1efa:	9e 8f       	std	Y+30, r25	; 0x1e
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	08 95       	ret
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	1f 91       	pop	r17
    1f10:	0f 91       	pop	r16
    1f12:	08 95       	ret
    1f14:	64 e6       	ldi	r22, 0x64	; 100
    1f16:	74 e0       	ldi	r23, 0x04	; 4
    1f18:	8a e7       	ldi	r24, 0x7A	; 122
    1f1a:	90 e2       	ldi	r25, 0x20	; 32
    1f1c:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    1f20:	88 81       	ld	r24, Y
    1f22:	99 81       	ldd	r25, Y+1	; 0x01
    1f24:	89 2b       	or	r24, r25
    1f26:	f9 f6       	brne	.-66     	; 0x1ee6 <xQueueGiveFromISR+0x20>
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2c:	89 2b       	or	r24, r25
    1f2e:	d9 f2       	breq	.-74     	; 0x1ee6 <xQueueGiveFromISR+0x20>
    1f30:	69 e6       	ldi	r22, 0x69	; 105
    1f32:	74 e0       	ldi	r23, 0x04	; 4
    1f34:	8a e7       	ldi	r24, 0x7A	; 122
    1f36:	90 e2       	ldi	r25, 0x20	; 32
    1f38:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    1f3c:	d4 cf       	rjmp	.-88     	; 0x1ee6 <xQueueGiveFromISR+0x20>
    1f3e:	89 89       	ldd	r24, Y+17	; 0x11
    1f40:	88 23       	and	r24, r24
    1f42:	e1 f2       	breq	.-72     	; 0x1efc <xQueueGiveFromISR+0x36>
    1f44:	ce 01       	movw	r24, r28
    1f46:	41 96       	adiw	r24, 0x11	; 17
    1f48:	0e 94 5e 18 	call	0x30bc	; 0x30bc <xTaskRemoveFromEventList>
    1f4c:	88 23       	and	r24, r24
    1f4e:	b1 f2       	breq	.-84     	; 0x1efc <xQueueGiveFromISR+0x36>
    1f50:	01 15       	cp	r16, r1
    1f52:	11 05       	cpc	r17, r1
    1f54:	99 f2       	breq	.-90     	; 0x1efc <xQueueGiveFromISR+0x36>
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	f8 01       	movw	r30, r16
    1f5a:	80 83       	st	Z, r24
    1f5c:	d0 cf       	rjmp	.-96     	; 0x1efe <xQueueGiveFromISR+0x38>
    1f5e:	60 e6       	ldi	r22, 0x60	; 96
    1f60:	74 e0       	ldi	r23, 0x04	; 4
    1f62:	8a e7       	ldi	r24, 0x7A	; 122
    1f64:	90 e2       	ldi	r25, 0x20	; 32
    1f66:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    1f6a:	b6 cf       	rjmp	.-148    	; 0x1ed8 <xQueueGiveFromISR+0x12>

00001f6c <xQueueReceive>:
    1f6c:	af 92       	push	r10
    1f6e:	bf 92       	push	r11
    1f70:	cf 92       	push	r12
    1f72:	df 92       	push	r13
    1f74:	ff 92       	push	r15
    1f76:	0f 93       	push	r16
    1f78:	1f 93       	push	r17
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	25 97       	sbiw	r28, 0x05	; 5
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	8c 01       	movw	r16, r24
    1f8a:	5b 01       	movw	r10, r22
    1f8c:	4c 83       	std	Y+4, r20	; 0x04
    1f8e:	5d 83       	std	Y+5, r21	; 0x05
    1f90:	89 2b       	or	r24, r25
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <xQueueReceive+0x2a>
    1f94:	a1 c0       	rjmp	.+322    	; 0x20d8 <xQueueReceive+0x16c>
    1f96:	a1 14       	cp	r10, r1
    1f98:	b1 04       	cpc	r11, r1
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <xQueueReceive+0x32>
    1f9c:	91 c0       	rjmp	.+290    	; 0x20c0 <xQueueReceive+0x154>
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	68 01       	movw	r12, r16
    1fa2:	f1 e1       	ldi	r31, 0x11	; 17
    1fa4:	cf 0e       	add	r12, r31
    1fa6:	d1 1c       	adc	r13, r1
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	0f 92       	push	r0
    1fae:	f8 01       	movw	r30, r16
    1fb0:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1fb2:	f1 10       	cpse	r15, r1
    1fb4:	6a c0       	rjmp	.+212    	; 0x208a <xQueueReceive+0x11e>
    1fb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fba:	89 2b       	or	r24, r25
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <xQueueReceive+0x54>
    1fbe:	73 c0       	rjmp	.+230    	; 0x20a6 <xQueueReceive+0x13a>
    1fc0:	22 23       	and	r18, r18
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <xQueueReceive+0x5a>
    1fc4:	59 c0       	rjmp	.+178    	; 0x2078 <xQueueReceive+0x10c>
    1fc6:	0f 90       	pop	r0
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	0e 94 40 16 	call	0x2c80	; 0x2c80 <vTaskSuspendAll>
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	0f 92       	push	r0
    1fd4:	f8 01       	movw	r30, r16
    1fd6:	85 8d       	ldd	r24, Z+29	; 0x1d
    1fd8:	8f 3f       	cpi	r24, 0xFF	; 255
    1fda:	09 f4       	brne	.+2      	; 0x1fde <xQueueReceive+0x72>
    1fdc:	54 c0       	rjmp	.+168    	; 0x2086 <xQueueReceive+0x11a>
    1fde:	f8 01       	movw	r30, r16
    1fe0:	86 8d       	ldd	r24, Z+30	; 0x1e
    1fe2:	8f 3f       	cpi	r24, 0xFF	; 255
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <xQueueReceive+0x7c>
    1fe6:	4d c0       	rjmp	.+154    	; 0x2082 <xQueueReceive+0x116>
    1fe8:	0f 90       	pop	r0
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	be 01       	movw	r22, r28
    1fee:	6c 5f       	subi	r22, 0xFC	; 252
    1ff0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff2:	ce 01       	movw	r24, r28
    1ff4:	01 96       	adiw	r24, 0x01	; 1
    1ff6:	0e 94 c0 18 	call	0x3180	; 0x3180 <xTaskCheckForTimeOut>
    1ffa:	81 11       	cpse	r24, r1
    1ffc:	22 c0       	rjmp	.+68     	; 0x2042 <xQueueReceive+0xd6>
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	0f 92       	push	r0
    2004:	f8 01       	movw	r30, r16
    2006:	82 8d       	ldd	r24, Z+26	; 0x1a
    2008:	0f 90       	pop	r0
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	81 11       	cpse	r24, r1
    200e:	12 c0       	rjmp	.+36     	; 0x2034 <xQueueReceive+0xc8>
    2010:	6c 81       	ldd	r22, Y+4	; 0x04
    2012:	7d 81       	ldd	r23, Y+5	; 0x05
    2014:	c6 01       	movw	r24, r12
    2016:	0e 94 3e 18 	call	0x307c	; 0x307c <vTaskPlaceOnEventList>
    201a:	c8 01       	movw	r24, r16
    201c:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <prvUnlockQueue>
    2020:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xTaskResumeAll>
    2024:	88 23       	and	r24, r24
    2026:	11 f0       	breq	.+4      	; 0x202c <xQueueReceive+0xc0>
    2028:	21 e0       	ldi	r18, 0x01	; 1
    202a:	be cf       	rjmp	.-132    	; 0x1fa8 <xQueueReceive+0x3c>
    202c:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <vPortYield>
    2030:	21 e0       	ldi	r18, 0x01	; 1
    2032:	ba cf       	rjmp	.-140    	; 0x1fa8 <xQueueReceive+0x3c>
    2034:	c8 01       	movw	r24, r16
    2036:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <prvUnlockQueue>
    203a:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xTaskResumeAll>
    203e:	21 e0       	ldi	r18, 0x01	; 1
    2040:	b3 cf       	rjmp	.-154    	; 0x1fa8 <xQueueReceive+0x3c>
    2042:	c8 01       	movw	r24, r16
    2044:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <prvUnlockQueue>
    2048:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xTaskResumeAll>
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	0f 92       	push	r0
    2052:	f8 01       	movw	r30, r16
    2054:	82 8d       	ldd	r24, Z+26	; 0x1a
    2056:	0f 90       	pop	r0
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	81 11       	cpse	r24, r1
    205c:	e5 cf       	rjmp	.-54     	; 0x2028 <xQueueReceive+0xbc>
    205e:	25 96       	adiw	r28, 0x05	; 5
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	df 91       	pop	r29
    2066:	cf 91       	pop	r28
    2068:	1f 91       	pop	r17
    206a:	0f 91       	pop	r16
    206c:	ff 90       	pop	r15
    206e:	df 90       	pop	r13
    2070:	cf 90       	pop	r12
    2072:	bf 90       	pop	r11
    2074:	af 90       	pop	r10
    2076:	08 95       	ret
    2078:	ce 01       	movw	r24, r28
    207a:	01 96       	adiw	r24, 0x01	; 1
    207c:	0e 94 b5 18 	call	0x316a	; 0x316a <vTaskInternalSetTimeOutState>
    2080:	a2 cf       	rjmp	.-188    	; 0x1fc6 <xQueueReceive+0x5a>
    2082:	16 8e       	std	Z+30, r1	; 0x1e
    2084:	b1 cf       	rjmp	.-158    	; 0x1fe8 <xQueueReceive+0x7c>
    2086:	15 8e       	std	Z+29, r1	; 0x1d
    2088:	aa cf       	rjmp	.-172    	; 0x1fde <xQueueReceive+0x72>
    208a:	b5 01       	movw	r22, r10
    208c:	c8 01       	movw	r24, r16
    208e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <prvCopyDataFromQueue>
    2092:	fa 94       	dec	r15
    2094:	f8 01       	movw	r30, r16
    2096:	f2 8e       	std	Z+26, r15	; 0x1a
    2098:	80 85       	ldd	r24, Z+8	; 0x08
    209a:	81 11       	cpse	r24, r1
    209c:	08 c0       	rjmp	.+16     	; 0x20ae <xQueueReceive+0x142>
    209e:	0f 90       	pop	r0
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	dc cf       	rjmp	.-72     	; 0x205e <xQueueReceive+0xf2>
    20a6:	0f 90       	pop	r0
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	d8 cf       	rjmp	.-80     	; 0x205e <xQueueReceive+0xf2>
    20ae:	c8 01       	movw	r24, r16
    20b0:	08 96       	adiw	r24, 0x08	; 8
    20b2:	0e 94 5e 18 	call	0x30bc	; 0x30bc <xTaskRemoveFromEventList>
    20b6:	88 23       	and	r24, r24
    20b8:	91 f3       	breq	.-28     	; 0x209e <xQueueReceive+0x132>
    20ba:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <vPortYield>
    20be:	ef cf       	rjmp	.-34     	; 0x209e <xQueueReceive+0x132>
    20c0:	f8 01       	movw	r30, r16
    20c2:	84 8d       	ldd	r24, Z+28	; 0x1c
    20c4:	88 23       	and	r24, r24
    20c6:	09 f4       	brne	.+2      	; 0x20ca <xQueueReceive+0x15e>
    20c8:	6a cf       	rjmp	.-300    	; 0x1f9e <xQueueReceive+0x32>
    20ca:	64 e0       	ldi	r22, 0x04	; 4
    20cc:	75 e0       	ldi	r23, 0x05	; 5
    20ce:	8a e7       	ldi	r24, 0x7A	; 122
    20d0:	90 e2       	ldi	r25, 0x20	; 32
    20d2:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    20d6:	63 cf       	rjmp	.-314    	; 0x1f9e <xQueueReceive+0x32>
    20d8:	60 e0       	ldi	r22, 0x00	; 0
    20da:	75 e0       	ldi	r23, 0x05	; 5
    20dc:	8a e7       	ldi	r24, 0x7A	; 122
    20de:	90 e2       	ldi	r25, 0x20	; 32
    20e0:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    20e4:	58 cf       	rjmp	.-336    	; 0x1f96 <xQueueReceive+0x2a>

000020e6 <xQueueSemaphoreTake>:
    20e6:	df 92       	push	r13
    20e8:	ef 92       	push	r14
    20ea:	ff 92       	push	r15
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	25 97       	sbiw	r28, 0x05	; 5
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	8c 01       	movw	r16, r24
    2100:	6c 83       	std	Y+4, r22	; 0x04
    2102:	7d 83       	std	Y+5, r23	; 0x05
    2104:	89 2b       	or	r24, r25
    2106:	09 f4       	brne	.+2      	; 0x210a <xQueueSemaphoreTake+0x24>
    2108:	d0 c0       	rjmp	.+416    	; 0x22aa <xQueueSemaphoreTake+0x1c4>
    210a:	d8 01       	movw	r26, r16
    210c:	5c 96       	adiw	r26, 0x1c	; 28
    210e:	8c 91       	ld	r24, X
    2110:	81 11       	cpse	r24, r1
    2112:	bb c0       	rjmp	.+374    	; 0x228a <xQueueSemaphoreTake+0x1a4>
    2114:	d1 2c       	mov	r13, r1
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	78 01       	movw	r14, r16
    211a:	b1 e1       	ldi	r27, 0x11	; 17
    211c:	eb 0e       	add	r14, r27
    211e:	f1 1c       	adc	r15, r1
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	0f 92       	push	r0
    2126:	f8 01       	movw	r30, r16
    2128:	82 8d       	ldd	r24, Z+26	; 0x1a
    212a:	81 11       	cpse	r24, r1
    212c:	89 c0       	rjmp	.+274    	; 0x2240 <xQueueSemaphoreTake+0x15a>
    212e:	8c 81       	ldd	r24, Y+4	; 0x04
    2130:	9d 81       	ldd	r25, Y+5	; 0x05
    2132:	89 2b       	or	r24, r25
    2134:	09 f4       	brne	.+2      	; 0x2138 <xQueueSemaphoreTake+0x52>
    2136:	9d c0       	rjmp	.+314    	; 0x2272 <xQueueSemaphoreTake+0x18c>
    2138:	22 23       	and	r18, r18
    213a:	09 f4       	brne	.+2      	; 0x213e <xQueueSemaphoreTake+0x58>
    213c:	5f c0       	rjmp	.+190    	; 0x21fc <xQueueSemaphoreTake+0x116>
    213e:	0f 90       	pop	r0
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	0e 94 40 16 	call	0x2c80	; 0x2c80 <vTaskSuspendAll>
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	0f 92       	push	r0
    214c:	d8 01       	movw	r26, r16
    214e:	5d 96       	adiw	r26, 0x1d	; 29
    2150:	8c 91       	ld	r24, X
    2152:	5d 97       	sbiw	r26, 0x1d	; 29
    2154:	8f 3f       	cpi	r24, 0xFF	; 255
    2156:	09 f4       	brne	.+2      	; 0x215a <xQueueSemaphoreTake+0x74>
    2158:	56 c0       	rjmp	.+172    	; 0x2206 <xQueueSemaphoreTake+0x120>
    215a:	f8 01       	movw	r30, r16
    215c:	86 8d       	ldd	r24, Z+30	; 0x1e
    215e:	8f 3f       	cpi	r24, 0xFF	; 255
    2160:	09 f4       	brne	.+2      	; 0x2164 <xQueueSemaphoreTake+0x7e>
    2162:	58 c0       	rjmp	.+176    	; 0x2214 <xQueueSemaphoreTake+0x12e>
    2164:	0f 90       	pop	r0
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	be 01       	movw	r22, r28
    216a:	6c 5f       	subi	r22, 0xFC	; 252
    216c:	7f 4f       	sbci	r23, 0xFF	; 255
    216e:	ce 01       	movw	r24, r28
    2170:	01 96       	adiw	r24, 0x01	; 1
    2172:	0e 94 c0 18 	call	0x3180	; 0x3180 <xTaskCheckForTimeOut>
    2176:	81 11       	cpse	r24, r1
    2178:	23 c0       	rjmp	.+70     	; 0x21c0 <xQueueSemaphoreTake+0xda>
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	f8 94       	cli
    217e:	0f 92       	push	r0
    2180:	d8 01       	movw	r26, r16
    2182:	5a 96       	adiw	r26, 0x1a	; 26
    2184:	8c 91       	ld	r24, X
    2186:	5a 97       	sbiw	r26, 0x1a	; 26
    2188:	0f 90       	pop	r0
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	81 11       	cpse	r24, r1
    218e:	44 c0       	rjmp	.+136    	; 0x2218 <xQueueSemaphoreTake+0x132>
    2190:	f8 01       	movw	r30, r16
    2192:	80 81       	ld	r24, Z
    2194:	91 81       	ldd	r25, Z+1	; 0x01
    2196:	89 2b       	or	r24, r25
    2198:	09 f4       	brne	.+2      	; 0x219c <xQueueSemaphoreTake+0xb6>
    219a:	45 c0       	rjmp	.+138    	; 0x2226 <xQueueSemaphoreTake+0x140>
    219c:	6c 81       	ldd	r22, Y+4	; 0x04
    219e:	7d 81       	ldd	r23, Y+5	; 0x05
    21a0:	c7 01       	movw	r24, r14
    21a2:	0e 94 3e 18 	call	0x307c	; 0x307c <vTaskPlaceOnEventList>
    21a6:	c8 01       	movw	r24, r16
    21a8:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <prvUnlockQueue>
    21ac:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xTaskResumeAll>
    21b0:	88 23       	and	r24, r24
    21b2:	11 f0       	breq	.+4      	; 0x21b8 <xQueueSemaphoreTake+0xd2>
    21b4:	21 e0       	ldi	r18, 0x01	; 1
    21b6:	b4 cf       	rjmp	.-152    	; 0x2120 <xQueueSemaphoreTake+0x3a>
    21b8:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <vPortYield>
    21bc:	21 e0       	ldi	r18, 0x01	; 1
    21be:	b0 cf       	rjmp	.-160    	; 0x2120 <xQueueSemaphoreTake+0x3a>
    21c0:	c8 01       	movw	r24, r16
    21c2:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <prvUnlockQueue>
    21c6:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xTaskResumeAll>
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	0f 92       	push	r0
    21d0:	f8 01       	movw	r30, r16
    21d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    21d4:	0f 90       	pop	r0
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	81 11       	cpse	r24, r1
    21da:	ec cf       	rjmp	.-40     	; 0x21b4 <xQueueSemaphoreTake+0xce>
    21dc:	dd 20       	and	r13, r13
    21de:	09 f4       	brne	.+2      	; 0x21e2 <xQueueSemaphoreTake+0xfc>
    21e0:	72 c0       	rjmp	.+228    	; 0x22c6 <xQueueSemaphoreTake+0x1e0>
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	0f 92       	push	r0
    21e8:	81 89       	ldd	r24, Z+17	; 0x11
    21ea:	81 11       	cpse	r24, r1
    21ec:	65 c0       	rjmp	.+202    	; 0x22b8 <xQueueSemaphoreTake+0x1d2>
    21ee:	60 e0       	ldi	r22, 0x00	; 0
    21f0:	f8 01       	movw	r30, r16
    21f2:	84 81       	ldd	r24, Z+4	; 0x04
    21f4:	95 81       	ldd	r25, Z+5	; 0x05
    21f6:	0e 94 e5 19 	call	0x33ca	; 0x33ca <vTaskPriorityDisinheritAfterTimeout>
    21fa:	43 c0       	rjmp	.+134    	; 0x2282 <xQueueSemaphoreTake+0x19c>
    21fc:	ce 01       	movw	r24, r28
    21fe:	01 96       	adiw	r24, 0x01	; 1
    2200:	0e 94 b5 18 	call	0x316a	; 0x316a <vTaskInternalSetTimeOutState>
    2204:	9c cf       	rjmp	.-200    	; 0x213e <xQueueSemaphoreTake+0x58>
    2206:	5d 96       	adiw	r26, 0x1d	; 29
    2208:	1c 92       	st	X, r1
    220a:	f8 01       	movw	r30, r16
    220c:	86 8d       	ldd	r24, Z+30	; 0x1e
    220e:	8f 3f       	cpi	r24, 0xFF	; 255
    2210:	09 f0       	breq	.+2      	; 0x2214 <xQueueSemaphoreTake+0x12e>
    2212:	a8 cf       	rjmp	.-176    	; 0x2164 <xQueueSemaphoreTake+0x7e>
    2214:	16 8e       	std	Z+30, r1	; 0x1e
    2216:	a6 cf       	rjmp	.-180    	; 0x2164 <xQueueSemaphoreTake+0x7e>
    2218:	c8 01       	movw	r24, r16
    221a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <prvUnlockQueue>
    221e:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xTaskResumeAll>
    2222:	21 e0       	ldi	r18, 0x01	; 1
    2224:	7d cf       	rjmp	.-262    	; 0x2120 <xQueueSemaphoreTake+0x3a>
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	0f 92       	push	r0
    222c:	14 96       	adiw	r26, 0x04	; 4
    222e:	8d 91       	ld	r24, X+
    2230:	9c 91       	ld	r25, X
    2232:	15 97       	sbiw	r26, 0x05	; 5
    2234:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTaskPriorityInherit>
    2238:	d8 2e       	mov	r13, r24
    223a:	0f 90       	pop	r0
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	ae cf       	rjmp	.-164    	; 0x219c <xQueueSemaphoreTake+0xb6>
    2240:	81 50       	subi	r24, 0x01	; 1
    2242:	82 8f       	std	Z+26, r24	; 0x1a
    2244:	80 81       	ld	r24, Z
    2246:	91 81       	ldd	r25, Z+1	; 0x01
    2248:	89 2b       	or	r24, r25
    224a:	09 f4       	brne	.+2      	; 0x224e <xQueueSemaphoreTake+0x168>
    224c:	3e c0       	rjmp	.+124    	; 0x22ca <xQueueSemaphoreTake+0x1e4>
    224e:	f8 01       	movw	r30, r16
    2250:	80 85       	ldd	r24, Z+8	; 0x08
    2252:	81 11       	cpse	r24, r1
    2254:	21 c0       	rjmp	.+66     	; 0x2298 <xQueueSemaphoreTake+0x1b2>
    2256:	0f 90       	pop	r0
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	25 96       	adiw	r28, 0x05	; 5
    225e:	cd bf       	out	0x3d, r28	; 61
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	df 91       	pop	r29
    2264:	cf 91       	pop	r28
    2266:	1f 91       	pop	r17
    2268:	0f 91       	pop	r16
    226a:	ff 90       	pop	r15
    226c:	ef 90       	pop	r14
    226e:	df 90       	pop	r13
    2270:	08 95       	ret
    2272:	dd 20       	and	r13, r13
    2274:	31 f0       	breq	.+12     	; 0x2282 <xQueueSemaphoreTake+0x19c>
    2276:	61 ee       	ldi	r22, 0xE1	; 225
    2278:	75 e0       	ldi	r23, 0x05	; 5
    227a:	8a e7       	ldi	r24, 0x7A	; 122
    227c:	90 e2       	ldi	r25, 0x20	; 32
    227e:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    2282:	0f 90       	pop	r0
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	e9 cf       	rjmp	.-46     	; 0x225c <xQueueSemaphoreTake+0x176>
    228a:	65 e9       	ldi	r22, 0x95	; 149
    228c:	75 e0       	ldi	r23, 0x05	; 5
    228e:	8a e7       	ldi	r24, 0x7A	; 122
    2290:	90 e2       	ldi	r25, 0x20	; 32
    2292:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    2296:	3e cf       	rjmp	.-388    	; 0x2114 <xQueueSemaphoreTake+0x2e>
    2298:	c8 01       	movw	r24, r16
    229a:	08 96       	adiw	r24, 0x08	; 8
    229c:	0e 94 5e 18 	call	0x30bc	; 0x30bc <xTaskRemoveFromEventList>
    22a0:	88 23       	and	r24, r24
    22a2:	c9 f2       	breq	.-78     	; 0x2256 <xQueueSemaphoreTake+0x170>
    22a4:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <vPortYield>
    22a8:	d6 cf       	rjmp	.-84     	; 0x2256 <xQueueSemaphoreTake+0x170>
    22aa:	61 e9       	ldi	r22, 0x91	; 145
    22ac:	75 e0       	ldi	r23, 0x05	; 5
    22ae:	8a e7       	ldi	r24, 0x7A	; 122
    22b0:	90 e2       	ldi	r25, 0x20	; 32
    22b2:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    22b6:	29 cf       	rjmp	.-430    	; 0x210a <xQueueSemaphoreTake+0x24>
    22b8:	06 88       	ldd	r0, Z+22	; 0x16
    22ba:	f7 89       	ldd	r31, Z+23	; 0x17
    22bc:	e0 2d       	mov	r30, r0
    22be:	80 81       	ld	r24, Z
    22c0:	6a e0       	ldi	r22, 0x0A	; 10
    22c2:	68 1b       	sub	r22, r24
    22c4:	95 cf       	rjmp	.-214    	; 0x21f0 <xQueueSemaphoreTake+0x10a>
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	c9 cf       	rjmp	.-110    	; 0x225c <xQueueSemaphoreTake+0x176>
    22ca:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <pvTaskIncrementMutexHeldCount>
    22ce:	d8 01       	movw	r26, r16
    22d0:	14 96       	adiw	r26, 0x04	; 4
    22d2:	8d 93       	st	X+, r24
    22d4:	9c 93       	st	X, r25
    22d6:	15 97       	sbiw	r26, 0x05	; 5
    22d8:	ba cf       	rjmp	.-140    	; 0x224e <xQueueSemaphoreTake+0x168>

000022da <xQueuePeek>:
    22da:	cf 92       	push	r12
    22dc:	df 92       	push	r13
    22de:	ef 92       	push	r14
    22e0:	ff 92       	push	r15
    22e2:	0f 93       	push	r16
    22e4:	1f 93       	push	r17
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	25 97       	sbiw	r28, 0x05	; 5
    22f0:	cd bf       	out	0x3d, r28	; 61
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	8c 01       	movw	r16, r24
    22f6:	6b 01       	movw	r12, r22
    22f8:	4c 83       	std	Y+4, r20	; 0x04
    22fa:	5d 83       	std	Y+5, r21	; 0x05
    22fc:	89 2b       	or	r24, r25
    22fe:	09 f4       	brne	.+2      	; 0x2302 <xQueuePeek+0x28>
    2300:	a2 c0       	rjmp	.+324    	; 0x2446 <xQueuePeek+0x16c>
    2302:	c1 14       	cp	r12, r1
    2304:	d1 04       	cpc	r13, r1
    2306:	09 f4       	brne	.+2      	; 0x230a <xQueuePeek+0x30>
    2308:	92 c0       	rjmp	.+292    	; 0x242e <xQueuePeek+0x154>
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	78 01       	movw	r14, r16
    230e:	f1 e1       	ldi	r31, 0x11	; 17
    2310:	ef 0e       	add	r14, r31
    2312:	f1 1c       	adc	r15, r1
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	0f 92       	push	r0
    231a:	f8 01       	movw	r30, r16
    231c:	82 8d       	ldd	r24, Z+26	; 0x1a
    231e:	81 11       	cpse	r24, r1
    2320:	69 c0       	rjmp	.+210    	; 0x23f4 <xQueuePeek+0x11a>
    2322:	8c 81       	ldd	r24, Y+4	; 0x04
    2324:	9d 81       	ldd	r25, Y+5	; 0x05
    2326:	89 2b       	or	r24, r25
    2328:	09 f4       	brne	.+2      	; 0x232c <xQueuePeek+0x52>
    232a:	74 c0       	rjmp	.+232    	; 0x2414 <xQueuePeek+0x13a>
    232c:	22 23       	and	r18, r18
    232e:	09 f4       	brne	.+2      	; 0x2332 <xQueuePeek+0x58>
    2330:	58 c0       	rjmp	.+176    	; 0x23e2 <xQueuePeek+0x108>
    2332:	0f 90       	pop	r0
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	0e 94 40 16 	call	0x2c80	; 0x2c80 <vTaskSuspendAll>
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	0f 92       	push	r0
    2340:	f8 01       	movw	r30, r16
    2342:	85 8d       	ldd	r24, Z+29	; 0x1d
    2344:	8f 3f       	cpi	r24, 0xFF	; 255
    2346:	09 f4       	brne	.+2      	; 0x234a <xQueuePeek+0x70>
    2348:	53 c0       	rjmp	.+166    	; 0x23f0 <xQueuePeek+0x116>
    234a:	f8 01       	movw	r30, r16
    234c:	86 8d       	ldd	r24, Z+30	; 0x1e
    234e:	8f 3f       	cpi	r24, 0xFF	; 255
    2350:	09 f4       	brne	.+2      	; 0x2354 <xQueuePeek+0x7a>
    2352:	4c c0       	rjmp	.+152    	; 0x23ec <xQueuePeek+0x112>
    2354:	0f 90       	pop	r0
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	be 01       	movw	r22, r28
    235a:	6c 5f       	subi	r22, 0xFC	; 252
    235c:	7f 4f       	sbci	r23, 0xFF	; 255
    235e:	ce 01       	movw	r24, r28
    2360:	01 96       	adiw	r24, 0x01	; 1
    2362:	0e 94 c0 18 	call	0x3180	; 0x3180 <xTaskCheckForTimeOut>
    2366:	81 11       	cpse	r24, r1
    2368:	22 c0       	rjmp	.+68     	; 0x23ae <xQueuePeek+0xd4>
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	0f 92       	push	r0
    2370:	f8 01       	movw	r30, r16
    2372:	82 8d       	ldd	r24, Z+26	; 0x1a
    2374:	0f 90       	pop	r0
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	81 11       	cpse	r24, r1
    237a:	12 c0       	rjmp	.+36     	; 0x23a0 <xQueuePeek+0xc6>
    237c:	6c 81       	ldd	r22, Y+4	; 0x04
    237e:	7d 81       	ldd	r23, Y+5	; 0x05
    2380:	c7 01       	movw	r24, r14
    2382:	0e 94 3e 18 	call	0x307c	; 0x307c <vTaskPlaceOnEventList>
    2386:	c8 01       	movw	r24, r16
    2388:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <prvUnlockQueue>
    238c:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xTaskResumeAll>
    2390:	88 23       	and	r24, r24
    2392:	11 f0       	breq	.+4      	; 0x2398 <xQueuePeek+0xbe>
    2394:	21 e0       	ldi	r18, 0x01	; 1
    2396:	be cf       	rjmp	.-132    	; 0x2314 <xQueuePeek+0x3a>
    2398:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <vPortYield>
    239c:	21 e0       	ldi	r18, 0x01	; 1
    239e:	ba cf       	rjmp	.-140    	; 0x2314 <xQueuePeek+0x3a>
    23a0:	c8 01       	movw	r24, r16
    23a2:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <prvUnlockQueue>
    23a6:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xTaskResumeAll>
    23aa:	21 e0       	ldi	r18, 0x01	; 1
    23ac:	b3 cf       	rjmp	.-154    	; 0x2314 <xQueuePeek+0x3a>
    23ae:	c8 01       	movw	r24, r16
    23b0:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <prvUnlockQueue>
    23b4:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xTaskResumeAll>
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	0f 92       	push	r0
    23be:	f8 01       	movw	r30, r16
    23c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    23c2:	0f 90       	pop	r0
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	81 11       	cpse	r24, r1
    23c8:	e5 cf       	rjmp	.-54     	; 0x2394 <xQueuePeek+0xba>
    23ca:	25 96       	adiw	r28, 0x05	; 5
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	1f 91       	pop	r17
    23d6:	0f 91       	pop	r16
    23d8:	ff 90       	pop	r15
    23da:	ef 90       	pop	r14
    23dc:	df 90       	pop	r13
    23de:	cf 90       	pop	r12
    23e0:	08 95       	ret
    23e2:	ce 01       	movw	r24, r28
    23e4:	01 96       	adiw	r24, 0x01	; 1
    23e6:	0e 94 b5 18 	call	0x316a	; 0x316a <vTaskInternalSetTimeOutState>
    23ea:	a3 cf       	rjmp	.-186    	; 0x2332 <xQueuePeek+0x58>
    23ec:	16 8e       	std	Z+30, r1	; 0x1e
    23ee:	b2 cf       	rjmp	.-156    	; 0x2354 <xQueuePeek+0x7a>
    23f0:	15 8e       	std	Z+29, r1	; 0x1d
    23f2:	ab cf       	rjmp	.-170    	; 0x234a <xQueuePeek+0x70>
    23f4:	e6 80       	ldd	r14, Z+6	; 0x06
    23f6:	f7 80       	ldd	r15, Z+7	; 0x07
    23f8:	b6 01       	movw	r22, r12
    23fa:	c8 01       	movw	r24, r16
    23fc:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <prvCopyDataFromQueue>
    2400:	f8 01       	movw	r30, r16
    2402:	e6 82       	std	Z+6, r14	; 0x06
    2404:	f7 82       	std	Z+7, r15	; 0x07
    2406:	81 89       	ldd	r24, Z+17	; 0x11
    2408:	81 11       	cpse	r24, r1
    240a:	08 c0       	rjmp	.+16     	; 0x241c <xQueuePeek+0x142>
    240c:	0f 90       	pop	r0
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	db cf       	rjmp	.-74     	; 0x23ca <xQueuePeek+0xf0>
    2414:	0f 90       	pop	r0
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	d7 cf       	rjmp	.-82     	; 0x23ca <xQueuePeek+0xf0>
    241c:	c8 01       	movw	r24, r16
    241e:	41 96       	adiw	r24, 0x11	; 17
    2420:	0e 94 5e 18 	call	0x30bc	; 0x30bc <xTaskRemoveFromEventList>
    2424:	88 23       	and	r24, r24
    2426:	91 f3       	breq	.-28     	; 0x240c <xQueuePeek+0x132>
    2428:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <vPortYield>
    242c:	ef cf       	rjmp	.-34     	; 0x240c <xQueuePeek+0x132>
    242e:	f8 01       	movw	r30, r16
    2430:	84 8d       	ldd	r24, Z+28	; 0x1c
    2432:	88 23       	and	r24, r24
    2434:	09 f4       	brne	.+2      	; 0x2438 <xQueuePeek+0x15e>
    2436:	69 cf       	rjmp	.-302    	; 0x230a <xQueuePeek+0x30>
    2438:	6c e6       	ldi	r22, 0x6C	; 108
    243a:	76 e0       	ldi	r23, 0x06	; 6
    243c:	8a e7       	ldi	r24, 0x7A	; 122
    243e:	90 e2       	ldi	r25, 0x20	; 32
    2440:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    2444:	62 cf       	rjmp	.-316    	; 0x230a <xQueuePeek+0x30>
    2446:	68 e6       	ldi	r22, 0x68	; 104
    2448:	76 e0       	ldi	r23, 0x06	; 6
    244a:	8a e7       	ldi	r24, 0x7A	; 122
    244c:	90 e2       	ldi	r25, 0x20	; 32
    244e:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    2452:	57 cf       	rjmp	.-338    	; 0x2302 <xQueuePeek+0x28>

00002454 <xQueueReceiveFromISR>:
    2454:	cf 92       	push	r12
    2456:	df 92       	push	r13
    2458:	ef 92       	push	r14
    245a:	ff 92       	push	r15
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	ec 01       	movw	r28, r24
    2466:	7b 01       	movw	r14, r22
    2468:	6a 01       	movw	r12, r20
    246a:	89 2b       	or	r24, r25
    246c:	b9 f1       	breq	.+110    	; 0x24dc <xQueueReceiveFromISR+0x88>
    246e:	e1 14       	cp	r14, r1
    2470:	f1 04       	cpc	r15, r1
    2472:	d1 f0       	breq	.+52     	; 0x24a8 <xQueueReceiveFromISR+0x54>
    2474:	1a 8d       	ldd	r17, Y+26	; 0x1a
    2476:	11 11       	cpse	r17, r1
    2478:	0a c0       	rjmp	.+20     	; 0x248e <xQueueReceiveFromISR+0x3a>
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	1f 91       	pop	r17
    2482:	0f 91       	pop	r16
    2484:	ff 90       	pop	r15
    2486:	ef 90       	pop	r14
    2488:	df 90       	pop	r13
    248a:	cf 90       	pop	r12
    248c:	08 95       	ret
    248e:	0d 8d       	ldd	r16, Y+29	; 0x1d
    2490:	b7 01       	movw	r22, r14
    2492:	ce 01       	movw	r24, r28
    2494:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <prvCopyDataFromQueue>
    2498:	11 50       	subi	r17, 0x01	; 1
    249a:	1a 8f       	std	Y+26, r17	; 0x1a
    249c:	0f 3f       	cpi	r16, 0xFF	; 255
    249e:	71 f0       	breq	.+28     	; 0x24bc <xQueueReceiveFromISR+0x68>
    24a0:	0f 5f       	subi	r16, 0xFF	; 255
    24a2:	0d 8f       	std	Y+29, r16	; 0x1d
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	ea cf       	rjmp	.-44     	; 0x247c <xQueueReceiveFromISR+0x28>
    24a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24aa:	88 23       	and	r24, r24
    24ac:	19 f3       	breq	.-58     	; 0x2474 <xQueueReceiveFromISR+0x20>
    24ae:	6c ef       	ldi	r22, 0xFC	; 252
    24b0:	76 e0       	ldi	r23, 0x06	; 6
    24b2:	8a e7       	ldi	r24, 0x7A	; 122
    24b4:	90 e2       	ldi	r25, 0x20	; 32
    24b6:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    24ba:	dc cf       	rjmp	.-72     	; 0x2474 <xQueueReceiveFromISR+0x20>
    24bc:	88 85       	ldd	r24, Y+8	; 0x08
    24be:	88 23       	and	r24, r24
    24c0:	89 f3       	breq	.-30     	; 0x24a4 <xQueueReceiveFromISR+0x50>
    24c2:	ce 01       	movw	r24, r28
    24c4:	08 96       	adiw	r24, 0x08	; 8
    24c6:	0e 94 5e 18 	call	0x30bc	; 0x30bc <xTaskRemoveFromEventList>
    24ca:	88 23       	and	r24, r24
    24cc:	59 f3       	breq	.-42     	; 0x24a4 <xQueueReceiveFromISR+0x50>
    24ce:	c1 14       	cp	r12, r1
    24d0:	d1 04       	cpc	r13, r1
    24d2:	41 f3       	breq	.-48     	; 0x24a4 <xQueueReceiveFromISR+0x50>
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	f6 01       	movw	r30, r12
    24d8:	80 83       	st	Z, r24
    24da:	d0 cf       	rjmp	.-96     	; 0x247c <xQueueReceiveFromISR+0x28>
    24dc:	6b ef       	ldi	r22, 0xFB	; 251
    24de:	76 e0       	ldi	r23, 0x06	; 6
    24e0:	8a e7       	ldi	r24, 0x7A	; 122
    24e2:	90 e2       	ldi	r25, 0x20	; 32
    24e4:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    24e8:	c2 cf       	rjmp	.-124    	; 0x246e <xQueueReceiveFromISR+0x1a>

000024ea <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	ec 01       	movw	r28, r24
UBaseType_t uxReturn;

	configASSERT( xQueue );
    24f0:	89 2b       	or	r24, r25
    24f2:	49 f0       	breq	.+18     	; 0x2506 <uxQueueMessagesWaiting+0x1c>

	taskENTER_CRITICAL();
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    24fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    24fc:	0f 90       	pop	r0
    24fe:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	08 95       	ret

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
UBaseType_t uxReturn;

	configASSERT( xQueue );
    2506:	6a e8       	ldi	r22, 0x8A	; 138
    2508:	77 e0       	ldi	r23, 0x07	; 7
    250a:	8a e7       	ldi	r24, 0x7A	; 122
    250c:	90 e2       	ldi	r25, 0x20	; 32
    250e:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    2512:	f0 cf       	rjmp	.-32     	; 0x24f4 <uxQueueMessagesWaiting+0xa>

00002514 <prvIdleTask>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    2514:	20 c0       	rjmp	.+64     	; 0x2556 <prvIdleTask+0x42>
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	f8 94       	cli
    251a:	0f 92       	push	r0
    251c:	e0 91 a8 21 	lds	r30, 0x21A8	; 0x8021a8 <xTasksWaitingTermination+0x5>
    2520:	f0 91 a9 21 	lds	r31, 0x21A9	; 0x8021a9 <xTasksWaitingTermination+0x6>
    2524:	c6 81       	ldd	r28, Z+6	; 0x06
    2526:	d7 81       	ldd	r29, Z+7	; 0x07
    2528:	ce 01       	movw	r24, r28
    252a:	02 96       	adiw	r24, 0x02	; 2
    252c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <uxListRemove>
    2530:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <uxCurrentNumberOfTasks>
    2534:	81 50       	subi	r24, 0x01	; 1
    2536:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <uxCurrentNumberOfTasks>
    253a:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <uxDeletedTasksWaitingCleanUp>
    253e:	81 50       	subi	r24, 0x01	; 1
    2540:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <uxDeletedTasksWaitingCleanUp>
    2544:	0f 90       	pop	r0
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	8f 89       	ldd	r24, Y+23	; 0x17
    254a:	98 8d       	ldd	r25, Y+24	; 0x18
    254c:	0e 94 19 0a 	call	0x1432	; 0x1432 <vPortFree>
    2550:	ce 01       	movw	r24, r28
    2552:	0e 94 19 0a 	call	0x1432	; 0x1432 <vPortFree>
    2556:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <uxDeletedTasksWaitingCleanUp>
    255a:	81 11       	cpse	r24, r1
    255c:	dc cf       	rjmp	.-72     	; 0x2516 <prvIdleTask+0x2>
    255e:	80 91 cb 21 	lds	r24, 0x21CB	; 0x8021cb <pxReadyTasksLists>
    2562:	82 30       	cpi	r24, 0x02	; 2
    2564:	10 f0       	brcs	.+4      	; 0x256a <prvIdleTask+0x56>
    2566:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <vPortYield>
    256a:	0e 94 66 1a 	call	0x34cc	; 0x34cc <vApplicationIdleHook>
    256e:	f3 cf       	rjmp	.-26     	; 0x2556 <prvIdleTask+0x42>

00002570 <prvResetNextTaskUnblockTime.part.0>:
    2570:	e0 91 b7 21 	lds	r30, 0x21B7	; 0x8021b7 <pxDelayedTaskList>
    2574:	f0 91 b8 21 	lds	r31, 0x21B8	; 0x8021b8 <pxDelayedTaskList+0x1>
    2578:	05 80       	ldd	r0, Z+5	; 0x05
    257a:	f6 81       	ldd	r31, Z+6	; 0x06
    257c:	e0 2d       	mov	r30, r0
    257e:	06 80       	ldd	r0, Z+6	; 0x06
    2580:	f7 81       	ldd	r31, Z+7	; 0x07
    2582:	e0 2d       	mov	r30, r0
    2584:	82 81       	ldd	r24, Z+2	; 0x02
    2586:	93 81       	ldd	r25, Z+3	; 0x03
    2588:	80 93 8e 21 	sts	0x218E, r24	; 0x80218e <xNextTaskUnblockTime>
    258c:	90 93 8f 21 	sts	0x218F, r25	; 0x80218f <xNextTaskUnblockTime+0x1>
    2590:	08 95       	ret

00002592 <prvTaskIsTaskSuspended>:
    2592:	cf 93       	push	r28
    2594:	df 93       	push	r29
    2596:	ec 01       	movw	r28, r24
    2598:	89 2b       	or	r24, r25
    259a:	99 f0       	breq	.+38     	; 0x25c2 <prvTaskIsTaskSuspended+0x30>
    259c:	8a 85       	ldd	r24, Y+10	; 0x0a
    259e:	9b 85       	ldd	r25, Y+11	; 0x0b
    25a0:	89 59       	subi	r24, 0x99	; 153
    25a2:	91 42       	sbci	r25, 0x21	; 33
    25a4:	21 f0       	breq	.+8      	; 0x25ae <prvTaskIsTaskSuspended+0x1c>
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	df 91       	pop	r29
    25aa:	cf 91       	pop	r28
    25ac:	08 95       	ret
    25ae:	2c 89       	ldd	r18, Y+20	; 0x14
    25b0:	3d 89       	ldd	r19, Y+21	; 0x15
    25b2:	81 e2       	ldi	r24, 0x21	; 33
    25b4:	2c 3a       	cpi	r18, 0xAC	; 172
    25b6:	38 07       	cpc	r19, r24
    25b8:	b1 f3       	breq	.-20     	; 0x25a6 <prvTaskIsTaskSuspended+0x14>
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	23 2b       	or	r18, r19
    25be:	99 f7       	brne	.-26     	; 0x25a6 <prvTaskIsTaskSuspended+0x14>
    25c0:	f3 cf       	rjmp	.-26     	; 0x25a8 <prvTaskIsTaskSuspended+0x16>
    25c2:	62 ef       	ldi	r22, 0xF2	; 242
    25c4:	76 e0       	ldi	r23, 0x06	; 6
    25c6:	8e e8       	ldi	r24, 0x8E	; 142
    25c8:	90 e2       	ldi	r25, 0x20	; 32
    25ca:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    25ce:	e6 cf       	rjmp	.-52     	; 0x259c <prvTaskIsTaskSuspended+0xa>

000025d0 <prvAddCurrentTaskToDelayedList>:
    25d0:	ff 92       	push	r15
    25d2:	0f 93       	push	r16
    25d4:	1f 93       	push	r17
    25d6:	cf 93       	push	r28
    25d8:	df 93       	push	r29
    25da:	ec 01       	movw	r28, r24
    25dc:	f6 2e       	mov	r15, r22
    25de:	00 91 96 21 	lds	r16, 0x2196	; 0x802196 <xTickCount>
    25e2:	10 91 97 21 	lds	r17, 0x2197	; 0x802197 <xTickCount+0x1>
    25e6:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <pxCurrentTCB>
    25ea:	90 91 26 22 	lds	r25, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    25ee:	02 96       	adiw	r24, 0x02	; 2
    25f0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <uxListRemove>
    25f4:	cf 3f       	cpi	r28, 0xFF	; 255
    25f6:	8f ef       	ldi	r24, 0xFF	; 255
    25f8:	d8 07       	cpc	r29, r24
    25fa:	a9 f1       	breq	.+106    	; 0x2666 <prvAddCurrentTaskToDelayedList+0x96>
    25fc:	c0 0f       	add	r28, r16
    25fe:	d1 1f       	adc	r29, r17
    2600:	e0 91 25 22 	lds	r30, 0x2225	; 0x802225 <pxCurrentTCB>
    2604:	f0 91 26 22 	lds	r31, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    2608:	c2 83       	std	Z+2, r28	; 0x02
    260a:	d3 83       	std	Z+3, r29	; 0x03
    260c:	60 91 25 22 	lds	r22, 0x2225	; 0x802225 <pxCurrentTCB>
    2610:	70 91 26 22 	lds	r23, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    2614:	c0 17       	cp	r28, r16
    2616:	d1 07       	cpc	r29, r17
    2618:	c8 f0       	brcs	.+50     	; 0x264c <prvAddCurrentTaskToDelayedList+0x7c>
    261a:	80 91 b7 21 	lds	r24, 0x21B7	; 0x8021b7 <pxDelayedTaskList>
    261e:	90 91 b8 21 	lds	r25, 0x21B8	; 0x8021b8 <pxDelayedTaskList+0x1>
    2622:	6e 5f       	subi	r22, 0xFE	; 254
    2624:	7f 4f       	sbci	r23, 0xFF	; 255
    2626:	0e 94 77 0a 	call	0x14ee	; 0x14ee <vListInsert>
    262a:	80 91 8e 21 	lds	r24, 0x218E	; 0x80218e <xNextTaskUnblockTime>
    262e:	90 91 8f 21 	lds	r25, 0x218F	; 0x80218f <xNextTaskUnblockTime+0x1>
    2632:	c8 17       	cp	r28, r24
    2634:	d9 07       	cpc	r29, r25
    2636:	20 f4       	brcc	.+8      	; 0x2640 <prvAddCurrentTaskToDelayedList+0x70>
    2638:	c0 93 8e 21 	sts	0x218E, r28	; 0x80218e <xNextTaskUnblockTime>
    263c:	d0 93 8f 21 	sts	0x218F, r29	; 0x80218f <xNextTaskUnblockTime+0x1>
    2640:	df 91       	pop	r29
    2642:	cf 91       	pop	r28
    2644:	1f 91       	pop	r17
    2646:	0f 91       	pop	r16
    2648:	ff 90       	pop	r15
    264a:	08 95       	ret
    264c:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <pxOverflowDelayedTaskList>
    2650:	90 91 b6 21 	lds	r25, 0x21B6	; 0x8021b6 <pxOverflowDelayedTaskList+0x1>
    2654:	6e 5f       	subi	r22, 0xFE	; 254
    2656:	7f 4f       	sbci	r23, 0xFF	; 255
    2658:	df 91       	pop	r29
    265a:	cf 91       	pop	r28
    265c:	1f 91       	pop	r17
    265e:	0f 91       	pop	r16
    2660:	ff 90       	pop	r15
    2662:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <vListInsert>
    2666:	ff 20       	and	r15, r15
    2668:	49 f2       	breq	.-110    	; 0x25fc <prvAddCurrentTaskToDelayedList+0x2c>
    266a:	60 91 25 22 	lds	r22, 0x2225	; 0x802225 <pxCurrentTCB>
    266e:	70 91 26 22 	lds	r23, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    2672:	6e 5f       	subi	r22, 0xFE	; 254
    2674:	7f 4f       	sbci	r23, 0xFF	; 255
    2676:	89 e9       	ldi	r24, 0x99	; 153
    2678:	91 e2       	ldi	r25, 0x21	; 33
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	ff 90       	pop	r15
    2684:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <vListInsertEnd>

00002688 <vTaskSwitchContext.part.5>:
    2688:	0f 93       	push	r16
    268a:	1f 93       	push	r17
    268c:	cf 93       	push	r28
    268e:	10 92 92 21 	sts	0x2192, r1	; 0x802192 <xYieldPending>
    2692:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    2696:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    269a:	80 91 59 22 	lds	r24, 0x2259	; 0x802259 <StatsTimer>
    269e:	90 91 5a 22 	lds	r25, 0x225A	; 0x80225a <StatsTimer+0x1>
    26a2:	a0 91 5b 22 	lds	r26, 0x225B	; 0x80225b <StatsTimer+0x2>
    26a6:	b0 91 5c 22 	lds	r27, 0x225C	; 0x80225c <StatsTimer+0x3>
    26aa:	82 0f       	add	r24, r18
    26ac:	93 1f       	adc	r25, r19
    26ae:	a1 1d       	adc	r26, r1
    26b0:	b1 1d       	adc	r27, r1
    26b2:	00 91 87 21 	lds	r16, 0x2187	; 0x802187 <ulTaskSwitchedInTime>
    26b6:	10 91 88 21 	lds	r17, 0x2188	; 0x802188 <ulTaskSwitchedInTime+0x1>
    26ba:	20 91 89 21 	lds	r18, 0x2189	; 0x802189 <ulTaskSwitchedInTime+0x2>
    26be:	30 91 8a 21 	lds	r19, 0x218A	; 0x80218a <ulTaskSwitchedInTime+0x3>
    26c2:	08 17       	cp	r16, r24
    26c4:	19 07       	cpc	r17, r25
    26c6:	2a 07       	cpc	r18, r26
    26c8:	3b 07       	cpc	r19, r27
    26ca:	a0 f4       	brcc	.+40     	; 0x26f4 <vTaskSwitchContext.part.5+0x6c>
    26cc:	e0 91 25 22 	lds	r30, 0x2225	; 0x802225 <pxCurrentTCB>
    26d0:	f0 91 26 22 	lds	r31, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    26d4:	47 a1       	ldd	r20, Z+39	; 0x27
    26d6:	50 a5       	ldd	r21, Z+40	; 0x28
    26d8:	61 a5       	ldd	r22, Z+41	; 0x29
    26da:	72 a5       	ldd	r23, Z+42	; 0x2a
    26dc:	40 1b       	sub	r20, r16
    26de:	51 0b       	sbc	r21, r17
    26e0:	62 0b       	sbc	r22, r18
    26e2:	73 0b       	sbc	r23, r19
    26e4:	48 0f       	add	r20, r24
    26e6:	59 1f       	adc	r21, r25
    26e8:	6a 1f       	adc	r22, r26
    26ea:	7b 1f       	adc	r23, r27
    26ec:	47 a3       	std	Z+39, r20	; 0x27
    26ee:	50 a7       	std	Z+40, r21	; 0x28
    26f0:	61 a7       	std	Z+41, r22	; 0x29
    26f2:	72 a7       	std	Z+42, r23	; 0x2a
    26f4:	80 93 87 21 	sts	0x2187, r24	; 0x802187 <ulTaskSwitchedInTime>
    26f8:	90 93 88 21 	sts	0x2188, r25	; 0x802188 <ulTaskSwitchedInTime+0x1>
    26fc:	a0 93 89 21 	sts	0x2189, r26	; 0x802189 <ulTaskSwitchedInTime+0x2>
    2700:	b0 93 8a 21 	sts	0x218A, r27	; 0x80218a <ulTaskSwitchedInTime+0x3>
    2704:	e0 91 25 22 	lds	r30, 0x2225	; 0x802225 <pxCurrentTCB>
    2708:	f0 91 26 22 	lds	r31, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    270c:	07 88       	ldd	r0, Z+23	; 0x17
    270e:	f0 8d       	ldd	r31, Z+24	; 0x18
    2710:	e0 2d       	mov	r30, r0
    2712:	80 81       	ld	r24, Z
    2714:	91 81       	ldd	r25, Z+1	; 0x01
    2716:	a2 81       	ldd	r26, Z+2	; 0x02
    2718:	b3 81       	ldd	r27, Z+3	; 0x03
    271a:	85 3a       	cpi	r24, 0xA5	; 165
    271c:	95 4a       	sbci	r25, 0xA5	; 165
    271e:	a5 4a       	sbci	r26, 0xA5	; 165
    2720:	b5 4a       	sbci	r27, 0xA5	; 165
    2722:	09 f4       	brne	.+2      	; 0x2726 <vTaskSwitchContext.part.5+0x9e>
    2724:	4c c0       	rjmp	.+152    	; 0x27be <vTaskSwitchContext.part.5+0x136>
    2726:	60 91 25 22 	lds	r22, 0x2225	; 0x802225 <pxCurrentTCB>
    272a:	70 91 26 22 	lds	r23, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    272e:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <pxCurrentTCB>
    2732:	90 91 26 22 	lds	r25, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    2736:	67 5e       	subi	r22, 0xE7	; 231
    2738:	7f 4f       	sbci	r23, 0xFF	; 255
    273a:	0e 94 86 1a 	call	0x350c	; 0x350c <vApplicationStackOverflowHook>
    273e:	c0 91 95 21 	lds	r28, 0x2195	; 0x802195 <uxTopReadyPriority>
    2742:	8c 2f       	mov	r24, r28
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	9c 01       	movw	r18, r24
    2748:	22 0f       	add	r18, r18
    274a:	33 1f       	adc	r19, r19
    274c:	22 0f       	add	r18, r18
    274e:	33 1f       	adc	r19, r19
    2750:	22 0f       	add	r18, r18
    2752:	33 1f       	adc	r19, r19
    2754:	f9 01       	movw	r30, r18
    2756:	e8 0f       	add	r30, r24
    2758:	f9 1f       	adc	r31, r25
    275a:	e5 53       	subi	r30, 0x35	; 53
    275c:	fe 4d       	sbci	r31, 0xDE	; 222
    275e:	40 81       	ld	r20, Z
    2760:	41 11       	cpse	r20, r1
    2762:	0c c0       	rjmp	.+24     	; 0x277c <vTaskSwitchContext.part.5+0xf4>
    2764:	cc 23       	and	r28, r28
    2766:	11 f0       	breq	.+4      	; 0x276c <vTaskSwitchContext.part.5+0xe4>
    2768:	c1 50       	subi	r28, 0x01	; 1
    276a:	eb cf       	rjmp	.-42     	; 0x2742 <vTaskSwitchContext.part.5+0xba>
    276c:	6c e8       	ldi	r22, 0x8C	; 140
    276e:	7b e0       	ldi	r23, 0x0B	; 11
    2770:	8e e8       	ldi	r24, 0x8E	; 142
    2772:	90 e2       	ldi	r25, 0x20	; 32
    2774:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    2778:	c1 50       	subi	r28, 0x01	; 1
    277a:	e3 cf       	rjmp	.-58     	; 0x2742 <vTaskSwitchContext.part.5+0xba>
    277c:	82 0f       	add	r24, r18
    277e:	93 1f       	adc	r25, r19
    2780:	dc 01       	movw	r26, r24
    2782:	a5 53       	subi	r26, 0x35	; 53
    2784:	be 4d       	sbci	r27, 0xDE	; 222
    2786:	11 96       	adiw	r26, 0x01	; 1
    2788:	ed 91       	ld	r30, X+
    278a:	fc 91       	ld	r31, X
    278c:	12 97       	sbiw	r26, 0x02	; 2
    278e:	02 80       	ldd	r0, Z+2	; 0x02
    2790:	f3 81       	ldd	r31, Z+3	; 0x03
    2792:	e0 2d       	mov	r30, r0
    2794:	11 96       	adiw	r26, 0x01	; 1
    2796:	ed 93       	st	X+, r30
    2798:	fc 93       	st	X, r31
    279a:	12 97       	sbiw	r26, 0x02	; 2
    279c:	82 53       	subi	r24, 0x32	; 50
    279e:	9e 4d       	sbci	r25, 0xDE	; 222
    27a0:	e8 17       	cp	r30, r24
    27a2:	f9 07       	cpc	r31, r25
    27a4:	59 f1       	breq	.+86     	; 0x27fc <vTaskSwitchContext.part.5+0x174>
    27a6:	86 81       	ldd	r24, Z+6	; 0x06
    27a8:	97 81       	ldd	r25, Z+7	; 0x07
    27aa:	80 93 25 22 	sts	0x2225, r24	; 0x802225 <pxCurrentTCB>
    27ae:	90 93 26 22 	sts	0x2226, r25	; 0x802226 <pxCurrentTCB+0x1>
    27b2:	c0 93 95 21 	sts	0x2195, r28	; 0x802195 <uxTopReadyPriority>
    27b6:	cf 91       	pop	r28
    27b8:	1f 91       	pop	r17
    27ba:	0f 91       	pop	r16
    27bc:	08 95       	ret
    27be:	84 81       	ldd	r24, Z+4	; 0x04
    27c0:	95 81       	ldd	r25, Z+5	; 0x05
    27c2:	a6 81       	ldd	r26, Z+6	; 0x06
    27c4:	b7 81       	ldd	r27, Z+7	; 0x07
    27c6:	85 3a       	cpi	r24, 0xA5	; 165
    27c8:	95 4a       	sbci	r25, 0xA5	; 165
    27ca:	a5 4a       	sbci	r26, 0xA5	; 165
    27cc:	b5 4a       	sbci	r27, 0xA5	; 165
    27ce:	09 f0       	breq	.+2      	; 0x27d2 <vTaskSwitchContext.part.5+0x14a>
    27d0:	aa cf       	rjmp	.-172    	; 0x2726 <vTaskSwitchContext.part.5+0x9e>
    27d2:	80 85       	ldd	r24, Z+8	; 0x08
    27d4:	91 85       	ldd	r25, Z+9	; 0x09
    27d6:	a2 85       	ldd	r26, Z+10	; 0x0a
    27d8:	b3 85       	ldd	r27, Z+11	; 0x0b
    27da:	85 3a       	cpi	r24, 0xA5	; 165
    27dc:	95 4a       	sbci	r25, 0xA5	; 165
    27de:	a5 4a       	sbci	r26, 0xA5	; 165
    27e0:	b5 4a       	sbci	r27, 0xA5	; 165
    27e2:	09 f0       	breq	.+2      	; 0x27e6 <vTaskSwitchContext.part.5+0x15e>
    27e4:	a0 cf       	rjmp	.-192    	; 0x2726 <vTaskSwitchContext.part.5+0x9e>
    27e6:	84 85       	ldd	r24, Z+12	; 0x0c
    27e8:	95 85       	ldd	r25, Z+13	; 0x0d
    27ea:	a6 85       	ldd	r26, Z+14	; 0x0e
    27ec:	b7 85       	ldd	r27, Z+15	; 0x0f
    27ee:	85 3a       	cpi	r24, 0xA5	; 165
    27f0:	95 4a       	sbci	r25, 0xA5	; 165
    27f2:	a5 4a       	sbci	r26, 0xA5	; 165
    27f4:	b5 4a       	sbci	r27, 0xA5	; 165
    27f6:	09 f0       	breq	.+2      	; 0x27fa <vTaskSwitchContext.part.5+0x172>
    27f8:	96 cf       	rjmp	.-212    	; 0x2726 <vTaskSwitchContext.part.5+0x9e>
    27fa:	a1 cf       	rjmp	.-190    	; 0x273e <vTaskSwitchContext.part.5+0xb6>
    27fc:	02 80       	ldd	r0, Z+2	; 0x02
    27fe:	f3 81       	ldd	r31, Z+3	; 0x03
    2800:	e0 2d       	mov	r30, r0
    2802:	11 96       	adiw	r26, 0x01	; 1
    2804:	ed 93       	st	X+, r30
    2806:	fc 93       	st	X, r31
    2808:	12 97       	sbiw	r26, 0x02	; 2
    280a:	cd cf       	rjmp	.-102    	; 0x27a6 <vTaskSwitchContext.part.5+0x11e>

0000280c <xTaskCreate>:
    280c:	5f 92       	push	r5
    280e:	6f 92       	push	r6
    2810:	7f 92       	push	r7
    2812:	8f 92       	push	r8
    2814:	9f 92       	push	r9
    2816:	af 92       	push	r10
    2818:	bf 92       	push	r11
    281a:	cf 92       	push	r12
    281c:	df 92       	push	r13
    281e:	ef 92       	push	r14
    2820:	ff 92       	push	r15
    2822:	0f 93       	push	r16
    2824:	1f 93       	push	r17
    2826:	cf 93       	push	r28
    2828:	df 93       	push	r29
    282a:	4c 01       	movw	r8, r24
    282c:	eb 01       	movw	r28, r22
    282e:	5a 01       	movw	r10, r20
    2830:	39 01       	movw	r6, r18
    2832:	50 2e       	mov	r5, r16
    2834:	ca 01       	movw	r24, r20
    2836:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <pvPortMalloc>
    283a:	8c 01       	movw	r16, r24
    283c:	89 2b       	or	r24, r25
    283e:	09 f4       	brne	.+2      	; 0x2842 <xTaskCreate+0x36>
    2840:	de c0       	rjmp	.+444    	; 0x29fe <xTaskCreate+0x1f2>
    2842:	80 e3       	ldi	r24, 0x30	; 48
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <pvPortMalloc>
    284a:	6c 01       	movw	r12, r24
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	09 f4       	brne	.+2      	; 0x2852 <xTaskCreate+0x46>
    2850:	d3 c0       	rjmp	.+422    	; 0x29f8 <xTaskCreate+0x1ec>
    2852:	dc 01       	movw	r26, r24
    2854:	57 96       	adiw	r26, 0x17	; 23
    2856:	0d 93       	st	X+, r16
    2858:	1c 93       	st	X, r17
    285a:	58 97       	sbiw	r26, 0x18	; 24
    285c:	20 97       	sbiw	r28, 0x00	; 0
    285e:	09 f4       	brne	.+2      	; 0x2862 <xTaskCreate+0x56>
    2860:	d0 c0       	rjmp	.+416    	; 0x2a02 <xTaskCreate+0x1f6>
    2862:	c8 01       	movw	r24, r16
    2864:	a5 01       	movw	r20, r10
    2866:	65 ea       	ldi	r22, 0xA5	; 165
    2868:	70 e0       	ldi	r23, 0x00	; 0
    286a:	0e 94 75 2a 	call	0x54ea	; 0x54ea <memset>
    286e:	f1 e0       	ldi	r31, 0x01	; 1
    2870:	af 1a       	sub	r10, r31
    2872:	b1 08       	sbc	r11, r1
    2874:	d6 01       	movw	r26, r12
    2876:	57 96       	adiw	r26, 0x17	; 23
    2878:	8d 91       	ld	r24, X+
    287a:	9c 91       	ld	r25, X
    287c:	58 97       	sbiw	r26, 0x18	; 24
    287e:	a8 0e       	add	r10, r24
    2880:	b9 1e       	adc	r11, r25
    2882:	f6 01       	movw	r30, r12
    2884:	79 96       	adiw	r30, 0x19	; 25
    2886:	9e 01       	movw	r18, r28
    2888:	28 5f       	subi	r18, 0xF8	; 248
    288a:	3f 4f       	sbci	r19, 0xFF	; 255
    288c:	de 01       	movw	r26, r28
    288e:	89 91       	ld	r24, Y+
    2890:	81 93       	st	Z+, r24
    2892:	8c 91       	ld	r24, X
    2894:	88 23       	and	r24, r24
    2896:	19 f0       	breq	.+6      	; 0x289e <xTaskCreate+0x92>
    2898:	c2 17       	cp	r28, r18
    289a:	d3 07       	cpc	r29, r19
    289c:	b9 f7       	brne	.-18     	; 0x288c <xTaskCreate+0x80>
    289e:	f6 01       	movw	r30, r12
    28a0:	10 a2       	std	Z+32, r1	; 0x20
    28a2:	05 2d       	mov	r16, r5
    28a4:	0a 30       	cpi	r16, 0x0A	; 10
    28a6:	08 f0       	brcs	.+2      	; 0x28aa <xTaskCreate+0x9e>
    28a8:	a1 c0       	rjmp	.+322    	; 0x29ec <xTaskCreate+0x1e0>
    28aa:	d6 01       	movw	r26, r12
    28ac:	56 96       	adiw	r26, 0x16	; 22
    28ae:	0c 93       	st	X, r16
    28b0:	56 97       	sbiw	r26, 0x16	; 22
    28b2:	93 96       	adiw	r26, 0x23	; 35
    28b4:	0c 93       	st	X, r16
    28b6:	93 97       	sbiw	r26, 0x23	; 35
    28b8:	94 96       	adiw	r26, 0x24	; 36
    28ba:	1c 92       	st	X, r1
    28bc:	e6 01       	movw	r28, r12
    28be:	22 96       	adiw	r28, 0x02	; 2
    28c0:	ce 01       	movw	r24, r28
    28c2:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <vListInitialiseItem>
    28c6:	c6 01       	movw	r24, r12
    28c8:	0c 96       	adiw	r24, 0x0c	; 12
    28ca:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <vListInitialiseItem>
    28ce:	f6 01       	movw	r30, r12
    28d0:	c0 86       	std	Z+8, r12	; 0x08
    28d2:	d1 86       	std	Z+9, r13	; 0x09
    28d4:	8a e0       	ldi	r24, 0x0A	; 10
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	80 1b       	sub	r24, r16
    28da:	91 09       	sbc	r25, r1
    28dc:	84 87       	std	Z+12, r24	; 0x0c
    28de:	95 87       	std	Z+13, r25	; 0x0d
    28e0:	c2 8a       	std	Z+18, r12	; 0x12
    28e2:	d3 8a       	std	Z+19, r13	; 0x13
    28e4:	15 a2       	std	Z+37, r1	; 0x25
    28e6:	16 a2       	std	Z+38, r1	; 0x26
    28e8:	17 a2       	std	Z+39, r1	; 0x27
    28ea:	10 a6       	std	Z+40, r1	; 0x28
    28ec:	11 a6       	std	Z+41, r1	; 0x29
    28ee:	12 a6       	std	Z+42, r1	; 0x2a
    28f0:	13 a6       	std	Z+43, r1	; 0x2b
    28f2:	14 a6       	std	Z+44, r1	; 0x2c
    28f4:	15 a6       	std	Z+45, r1	; 0x2d
    28f6:	16 a6       	std	Z+46, r1	; 0x2e
    28f8:	17 a6       	std	Z+47, r1	; 0x2f
    28fa:	a3 01       	movw	r20, r6
    28fc:	b4 01       	movw	r22, r8
    28fe:	c5 01       	movw	r24, r10
    2900:	0e 94 ce 0a 	call	0x159c	; 0x159c <pxPortInitialiseStack>
    2904:	d6 01       	movw	r26, r12
    2906:	8d 93       	st	X+, r24
    2908:	9c 93       	st	X, r25
    290a:	e1 14       	cp	r14, r1
    290c:	f1 04       	cpc	r15, r1
    290e:	19 f0       	breq	.+6      	; 0x2916 <xTaskCreate+0x10a>
    2910:	f7 01       	movw	r30, r14
    2912:	c0 82       	st	Z, r12
    2914:	d1 82       	std	Z+1, r13	; 0x01
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	0f 92       	push	r0
    291c:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <uxCurrentNumberOfTasks>
    2920:	8f 5f       	subi	r24, 0xFF	; 255
    2922:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <uxCurrentNumberOfTasks>
    2926:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <pxCurrentTCB>
    292a:	90 91 26 22 	lds	r25, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    292e:	89 2b       	or	r24, r25
    2930:	99 f0       	breq	.+38     	; 0x2958 <xTaskCreate+0x14c>
    2932:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <xSchedulerRunning>
    2936:	81 11       	cpse	r24, r1
    2938:	18 c0       	rjmp	.+48     	; 0x296a <xTaskCreate+0x15e>
    293a:	e0 91 25 22 	lds	r30, 0x2225	; 0x802225 <pxCurrentTCB>
    293e:	f0 91 26 22 	lds	r31, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    2942:	d6 01       	movw	r26, r12
    2944:	56 96       	adiw	r26, 0x16	; 22
    2946:	8c 91       	ld	r24, X
    2948:	96 89       	ldd	r25, Z+22	; 0x16
    294a:	89 17       	cp	r24, r25
    294c:	88 f0       	brcs	.+34     	; 0x2970 <xTaskCreate+0x164>
    294e:	c0 92 25 22 	sts	0x2225, r12	; 0x802225 <pxCurrentTCB>
    2952:	d0 92 26 22 	sts	0x2226, r13	; 0x802226 <pxCurrentTCB+0x1>
    2956:	0c c0       	rjmp	.+24     	; 0x2970 <xTaskCreate+0x164>
    2958:	c0 92 25 22 	sts	0x2225, r12	; 0x802225 <pxCurrentTCB>
    295c:	d0 92 26 22 	sts	0x2226, r13	; 0x802226 <pxCurrentTCB+0x1>
    2960:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <uxCurrentNumberOfTasks>
    2964:	81 30       	cpi	r24, 0x01	; 1
    2966:	09 f4       	brne	.+2      	; 0x296a <xTaskCreate+0x15e>
    2968:	56 c0       	rjmp	.+172    	; 0x2a16 <xTaskCreate+0x20a>
    296a:	d6 01       	movw	r26, r12
    296c:	56 96       	adiw	r26, 0x16	; 22
    296e:	8c 91       	ld	r24, X
    2970:	90 91 90 21 	lds	r25, 0x2190	; 0x802190 <uxTaskNumber>
    2974:	9f 5f       	subi	r25, 0xFF	; 255
    2976:	90 93 90 21 	sts	0x2190, r25	; 0x802190 <uxTaskNumber>
    297a:	f6 01       	movw	r30, r12
    297c:	91 a3       	std	Z+33, r25	; 0x21
    297e:	90 91 95 21 	lds	r25, 0x2195	; 0x802195 <uxTopReadyPriority>
    2982:	98 17       	cp	r25, r24
    2984:	80 f1       	brcs	.+96     	; 0x29e6 <xTaskCreate+0x1da>
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	9c 01       	movw	r18, r24
    298a:	22 0f       	add	r18, r18
    298c:	33 1f       	adc	r19, r19
    298e:	22 0f       	add	r18, r18
    2990:	33 1f       	adc	r19, r19
    2992:	22 0f       	add	r18, r18
    2994:	33 1f       	adc	r19, r19
    2996:	82 0f       	add	r24, r18
    2998:	93 1f       	adc	r25, r19
    299a:	be 01       	movw	r22, r28
    299c:	85 53       	subi	r24, 0x35	; 53
    299e:	9e 4d       	sbci	r25, 0xDE	; 222
    29a0:	0e 94 56 0a 	call	0x14ac	; 0x14ac <vListInsertEnd>
    29a4:	0f 90       	pop	r0
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <xSchedulerRunning>
    29ac:	88 23       	and	r24, r24
    29ae:	51 f0       	breq	.+20     	; 0x29c4 <xTaskCreate+0x1b8>
    29b0:	e0 91 25 22 	lds	r30, 0x2225	; 0x802225 <pxCurrentTCB>
    29b4:	f0 91 26 22 	lds	r31, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    29b8:	96 89       	ldd	r25, Z+22	; 0x16
    29ba:	d6 01       	movw	r26, r12
    29bc:	56 96       	adiw	r26, 0x16	; 22
    29be:	8c 91       	ld	r24, X
    29c0:	98 17       	cp	r25, r24
    29c2:	b0 f0       	brcs	.+44     	; 0x29f0 <xTaskCreate+0x1e4>
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	df 91       	pop	r29
    29c8:	cf 91       	pop	r28
    29ca:	1f 91       	pop	r17
    29cc:	0f 91       	pop	r16
    29ce:	ff 90       	pop	r15
    29d0:	ef 90       	pop	r14
    29d2:	df 90       	pop	r13
    29d4:	cf 90       	pop	r12
    29d6:	bf 90       	pop	r11
    29d8:	af 90       	pop	r10
    29da:	9f 90       	pop	r9
    29dc:	8f 90       	pop	r8
    29de:	7f 90       	pop	r7
    29e0:	6f 90       	pop	r6
    29e2:	5f 90       	pop	r5
    29e4:	08 95       	ret
    29e6:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <uxTopReadyPriority>
    29ea:	cd cf       	rjmp	.-102    	; 0x2986 <xTaskCreate+0x17a>
    29ec:	09 e0       	ldi	r16, 0x09	; 9
    29ee:	5d cf       	rjmp	.-326    	; 0x28aa <xTaskCreate+0x9e>
    29f0:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <vPortYield>
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	e7 cf       	rjmp	.-50     	; 0x29c6 <xTaskCreate+0x1ba>
    29f8:	c8 01       	movw	r24, r16
    29fa:	0e 94 19 0a 	call	0x1432	; 0x1432 <vPortFree>
    29fe:	8f ef       	ldi	r24, 0xFF	; 255
    2a00:	e2 cf       	rjmp	.-60     	; 0x29c6 <xTaskCreate+0x1ba>
    2a02:	60 e6       	ldi	r22, 0x60	; 96
    2a04:	73 e0       	ldi	r23, 0x03	; 3
    2a06:	8e e8       	ldi	r24, 0x8E	; 142
    2a08:	90 e2       	ldi	r25, 0x20	; 32
    2a0a:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    2a0e:	f6 01       	movw	r30, r12
    2a10:	87 89       	ldd	r24, Z+23	; 0x17
    2a12:	90 8d       	ldd	r25, Z+24	; 0x18
    2a14:	27 cf       	rjmp	.-434    	; 0x2864 <xTaskCreate+0x58>
    2a16:	0b ec       	ldi	r16, 0xCB	; 203
    2a18:	11 e2       	ldi	r17, 0x21	; 33
    2a1a:	55 e2       	ldi	r21, 0x25	; 37
    2a1c:	e5 2e       	mov	r14, r21
    2a1e:	52 e2       	ldi	r21, 0x22	; 34
    2a20:	f5 2e       	mov	r15, r21
    2a22:	c8 01       	movw	r24, r16
    2a24:	0e 94 44 0a 	call	0x1488	; 0x1488 <vListInitialise>
    2a28:	07 5f       	subi	r16, 0xF7	; 247
    2a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a2c:	e0 16       	cp	r14, r16
    2a2e:	f1 06       	cpc	r15, r17
    2a30:	c1 f7       	brne	.-16     	; 0x2a22 <xTaskCreate+0x216>
    2a32:	82 ec       	ldi	r24, 0xC2	; 194
    2a34:	91 e2       	ldi	r25, 0x21	; 33
    2a36:	0e 94 44 0a 	call	0x1488	; 0x1488 <vListInitialise>
    2a3a:	89 eb       	ldi	r24, 0xB9	; 185
    2a3c:	91 e2       	ldi	r25, 0x21	; 33
    2a3e:	0e 94 44 0a 	call	0x1488	; 0x1488 <vListInitialise>
    2a42:	8c ea       	ldi	r24, 0xAC	; 172
    2a44:	91 e2       	ldi	r25, 0x21	; 33
    2a46:	0e 94 44 0a 	call	0x1488	; 0x1488 <vListInitialise>
    2a4a:	83 ea       	ldi	r24, 0xA3	; 163
    2a4c:	91 e2       	ldi	r25, 0x21	; 33
    2a4e:	0e 94 44 0a 	call	0x1488	; 0x1488 <vListInitialise>
    2a52:	89 e9       	ldi	r24, 0x99	; 153
    2a54:	91 e2       	ldi	r25, 0x21	; 33
    2a56:	0e 94 44 0a 	call	0x1488	; 0x1488 <vListInitialise>
    2a5a:	82 ec       	ldi	r24, 0xC2	; 194
    2a5c:	91 e2       	ldi	r25, 0x21	; 33
    2a5e:	80 93 b7 21 	sts	0x21B7, r24	; 0x8021b7 <pxDelayedTaskList>
    2a62:	90 93 b8 21 	sts	0x21B8, r25	; 0x8021b8 <pxDelayedTaskList+0x1>
    2a66:	89 eb       	ldi	r24, 0xB9	; 185
    2a68:	91 e2       	ldi	r25, 0x21	; 33
    2a6a:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <pxOverflowDelayedTaskList>
    2a6e:	90 93 b6 21 	sts	0x21B6, r25	; 0x8021b6 <pxOverflowDelayedTaskList+0x1>
    2a72:	f6 01       	movw	r30, r12
    2a74:	86 89       	ldd	r24, Z+22	; 0x16
    2a76:	7c cf       	rjmp	.-264    	; 0x2970 <xTaskCreate+0x164>

00002a78 <vTaskSuspend>:
    2a78:	0f 93       	push	r16
    2a7a:	1f 93       	push	r17
    2a7c:	cf 93       	push	r28
    2a7e:	df 93       	push	r29
    2a80:	ec 01       	movw	r28, r24
    2a82:	0f b6       	in	r0, 0x3f	; 63
    2a84:	f8 94       	cli
    2a86:	0f 92       	push	r0
    2a88:	89 2b       	or	r24, r25
    2a8a:	09 f4       	brne	.+2      	; 0x2a8e <vTaskSuspend+0x16>
    2a8c:	62 c0       	rjmp	.+196    	; 0x2b52 <vTaskSuspend+0xda>
    2a8e:	8e 01       	movw	r16, r28
    2a90:	0e 5f       	subi	r16, 0xFE	; 254
    2a92:	1f 4f       	sbci	r17, 0xFF	; 255
    2a94:	c8 01       	movw	r24, r16
    2a96:	0e 94 a8 0a 	call	0x1550	; 0x1550 <uxListRemove>
    2a9a:	8c 89       	ldd	r24, Y+20	; 0x14
    2a9c:	9d 89       	ldd	r25, Y+21	; 0x15
    2a9e:	89 2b       	or	r24, r25
    2aa0:	21 f0       	breq	.+8      	; 0x2aaa <vTaskSuspend+0x32>
    2aa2:	ce 01       	movw	r24, r28
    2aa4:	0c 96       	adiw	r24, 0x0c	; 12
    2aa6:	0e 94 a8 0a 	call	0x1550	; 0x1550 <uxListRemove>
    2aaa:	b8 01       	movw	r22, r16
    2aac:	89 e9       	ldi	r24, 0x99	; 153
    2aae:	91 e2       	ldi	r25, 0x21	; 33
    2ab0:	0e 94 56 0a 	call	0x14ac	; 0x14ac <vListInsertEnd>
    2ab4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab6:	81 30       	cpi	r24, 0x01	; 1
    2ab8:	21 f1       	breq	.+72     	; 0x2b02 <vTaskSuspend+0x8a>
    2aba:	0f 90       	pop	r0
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <xSchedulerRunning>
    2ac2:	88 23       	and	r24, r24
    2ac4:	91 f0       	breq	.+36     	; 0x2aea <vTaskSuspend+0x72>
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	0f 92       	push	r0
    2acc:	e0 91 b7 21 	lds	r30, 0x21B7	; 0x8021b7 <pxDelayedTaskList>
    2ad0:	f0 91 b8 21 	lds	r31, 0x21B8	; 0x8021b8 <pxDelayedTaskList+0x1>
    2ad4:	80 81       	ld	r24, Z
    2ad6:	81 11       	cpse	r24, r1
    2ad8:	2b c0       	rjmp	.+86     	; 0x2b30 <vTaskSuspend+0xb8>
    2ada:	8f ef       	ldi	r24, 0xFF	; 255
    2adc:	9f ef       	ldi	r25, 0xFF	; 255
    2ade:	80 93 8e 21 	sts	0x218E, r24	; 0x80218e <xNextTaskUnblockTime>
    2ae2:	90 93 8f 21 	sts	0x218F, r25	; 0x80218f <xNextTaskUnblockTime+0x1>
    2ae6:	0f 90       	pop	r0
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <pxCurrentTCB>
    2aee:	90 91 26 22 	lds	r25, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    2af2:	c8 17       	cp	r28, r24
    2af4:	d9 07       	cpc	r29, r25
    2af6:	39 f0       	breq	.+14     	; 0x2b06 <vTaskSuspend+0x8e>
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	1f 91       	pop	r17
    2afe:	0f 91       	pop	r16
    2b00:	08 95       	ret
    2b02:	1f a6       	std	Y+47, r1	; 0x2f
    2b04:	da cf       	rjmp	.-76     	; 0x2aba <vTaskSuspend+0x42>
    2b06:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <xSchedulerRunning>
    2b0a:	88 23       	and	r24, r24
    2b0c:	a1 f0       	breq	.+40     	; 0x2b36 <vTaskSuspend+0xbe>
    2b0e:	80 91 8b 21 	lds	r24, 0x218B	; 0x80218b <uxSchedulerSuspended>
    2b12:	88 23       	and	r24, r24
    2b14:	31 f0       	breq	.+12     	; 0x2b22 <vTaskSuspend+0xaa>
    2b16:	68 ec       	ldi	r22, 0xC8	; 200
    2b18:	76 e0       	ldi	r23, 0x06	; 6
    2b1a:	8e e8       	ldi	r24, 0x8E	; 142
    2b1c:	90 e2       	ldi	r25, 0x20	; 32
    2b1e:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    2b22:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <vPortYield>
    2b26:	df 91       	pop	r29
    2b28:	cf 91       	pop	r28
    2b2a:	1f 91       	pop	r17
    2b2c:	0f 91       	pop	r16
    2b2e:	08 95       	ret
    2b30:	0e 94 b8 12 	call	0x2570	; 0x2570 <prvResetNextTaskUnblockTime.part.0>
    2b34:	d8 cf       	rjmp	.-80     	; 0x2ae6 <vTaskSuspend+0x6e>
    2b36:	90 91 99 21 	lds	r25, 0x2199	; 0x802199 <xSuspendedTaskList>
    2b3a:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <uxCurrentNumberOfTasks>
    2b3e:	98 17       	cp	r25, r24
    2b40:	99 f0       	breq	.+38     	; 0x2b68 <vTaskSuspend+0xf0>
    2b42:	80 91 8b 21 	lds	r24, 0x218B	; 0x80218b <uxSchedulerSuspended>
    2b46:	88 23       	and	r24, r24
    2b48:	49 f0       	breq	.+18     	; 0x2b5c <vTaskSuspend+0xe4>
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	80 93 92 21 	sts	0x2192, r24	; 0x802192 <xYieldPending>
    2b50:	d3 cf       	rjmp	.-90     	; 0x2af8 <vTaskSuspend+0x80>
    2b52:	c0 91 25 22 	lds	r28, 0x2225	; 0x802225 <pxCurrentTCB>
    2b56:	d0 91 26 22 	lds	r29, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    2b5a:	99 cf       	rjmp	.-206    	; 0x2a8e <vTaskSuspend+0x16>
    2b5c:	df 91       	pop	r29
    2b5e:	cf 91       	pop	r28
    2b60:	1f 91       	pop	r17
    2b62:	0f 91       	pop	r16
    2b64:	0c 94 44 13 	jmp	0x2688	; 0x2688 <vTaskSwitchContext.part.5>
    2b68:	10 92 25 22 	sts	0x2225, r1	; 0x802225 <pxCurrentTCB>
    2b6c:	10 92 26 22 	sts	0x2226, r1	; 0x802226 <pxCurrentTCB+0x1>
    2b70:	c3 cf       	rjmp	.-122    	; 0x2af8 <vTaskSuspend+0x80>

00002b72 <vTaskResume>:
    2b72:	0f 93       	push	r16
    2b74:	1f 93       	push	r17
    2b76:	cf 93       	push	r28
    2b78:	df 93       	push	r29
    2b7a:	ec 01       	movw	r28, r24
    2b7c:	89 2b       	or	r24, r25
    2b7e:	09 f4       	brne	.+2      	; 0x2b82 <vTaskResume+0x10>
    2b80:	3d c0       	rjmp	.+122    	; 0x2bfc <vTaskResume+0x8a>
    2b82:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <pxCurrentTCB>
    2b86:	90 91 26 22 	lds	r25, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    2b8a:	c8 17       	cp	r28, r24
    2b8c:	d9 07       	cpc	r29, r25
    2b8e:	51 f0       	breq	.+20     	; 0x2ba4 <vTaskResume+0x32>
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	f8 94       	cli
    2b94:	0f 92       	push	r0
    2b96:	ce 01       	movw	r24, r28
    2b98:	0e 94 c9 12 	call	0x2592	; 0x2592 <prvTaskIsTaskSuspended>
    2b9c:	81 11       	cpse	r24, r1
    2b9e:	07 c0       	rjmp	.+14     	; 0x2bae <vTaskResume+0x3c>
    2ba0:	0f 90       	pop	r0
    2ba2:	0f be       	out	0x3f, r0	; 63
    2ba4:	df 91       	pop	r29
    2ba6:	cf 91       	pop	r28
    2ba8:	1f 91       	pop	r17
    2baa:	0f 91       	pop	r16
    2bac:	08 95       	ret
    2bae:	8e 01       	movw	r16, r28
    2bb0:	0e 5f       	subi	r16, 0xFE	; 254
    2bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb4:	c8 01       	movw	r24, r16
    2bb6:	0e 94 a8 0a 	call	0x1550	; 0x1550 <uxListRemove>
    2bba:	8e 89       	ldd	r24, Y+22	; 0x16
    2bbc:	90 91 95 21 	lds	r25, 0x2195	; 0x802195 <uxTopReadyPriority>
    2bc0:	98 17       	cp	r25, r24
    2bc2:	10 f4       	brcc	.+4      	; 0x2bc8 <vTaskResume+0x56>
    2bc4:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <uxTopReadyPriority>
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	9c 01       	movw	r18, r24
    2bcc:	22 0f       	add	r18, r18
    2bce:	33 1f       	adc	r19, r19
    2bd0:	22 0f       	add	r18, r18
    2bd2:	33 1f       	adc	r19, r19
    2bd4:	22 0f       	add	r18, r18
    2bd6:	33 1f       	adc	r19, r19
    2bd8:	82 0f       	add	r24, r18
    2bda:	93 1f       	adc	r25, r19
    2bdc:	b8 01       	movw	r22, r16
    2bde:	85 53       	subi	r24, 0x35	; 53
    2be0:	9e 4d       	sbci	r25, 0xDE	; 222
    2be2:	0e 94 56 0a 	call	0x14ac	; 0x14ac <vListInsertEnd>
    2be6:	e0 91 25 22 	lds	r30, 0x2225	; 0x802225 <pxCurrentTCB>
    2bea:	f0 91 26 22 	lds	r31, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    2bee:	9e 89       	ldd	r25, Y+22	; 0x16
    2bf0:	86 89       	ldd	r24, Z+22	; 0x16
    2bf2:	98 17       	cp	r25, r24
    2bf4:	a8 f2       	brcs	.-86     	; 0x2ba0 <vTaskResume+0x2e>
    2bf6:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <vPortYield>
    2bfa:	d2 cf       	rjmp	.-92     	; 0x2ba0 <vTaskResume+0x2e>
    2bfc:	6c e1       	ldi	r22, 0x1C	; 28
    2bfe:	77 e0       	ldi	r23, 0x07	; 7
    2c00:	8e e8       	ldi	r24, 0x8E	; 142
    2c02:	90 e2       	ldi	r25, 0x20	; 32
    2c04:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    2c08:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <pxCurrentTCB>
    2c0c:	90 91 26 22 	lds	r25, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    2c10:	c9 cf       	rjmp	.-110    	; 0x2ba4 <vTaskResume+0x32>

00002c12 <vTaskStartScheduler>:
    2c12:	ef 92       	push	r14
    2c14:	ff 92       	push	r15
    2c16:	0f 93       	push	r16
    2c18:	8c e8       	ldi	r24, 0x8C	; 140
    2c1a:	e8 2e       	mov	r14, r24
    2c1c:	81 e2       	ldi	r24, 0x21	; 33
    2c1e:	f8 2e       	mov	r15, r24
    2c20:	00 e0       	ldi	r16, 0x00	; 0
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e0       	ldi	r20, 0x00	; 0
    2c28:	51 e0       	ldi	r21, 0x01	; 1
    2c2a:	62 ea       	ldi	r22, 0xA2	; 162
    2c2c:	70 e2       	ldi	r23, 0x20	; 32
    2c2e:	8a e8       	ldi	r24, 0x8A	; 138
    2c30:	92 e1       	ldi	r25, 0x12	; 18
    2c32:	0e 94 06 14 	call	0x280c	; 0x280c <xTaskCreate>
    2c36:	81 30       	cpi	r24, 0x01	; 1
    2c38:	79 f0       	breq	.+30     	; 0x2c58 <vTaskStartScheduler+0x46>
    2c3a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c3c:	21 f0       	breq	.+8      	; 0x2c46 <vTaskStartScheduler+0x34>
    2c3e:	0f 91       	pop	r16
    2c40:	ff 90       	pop	r15
    2c42:	ef 90       	pop	r14
    2c44:	08 95       	ret
    2c46:	67 e0       	ldi	r22, 0x07	; 7
    2c48:	78 e0       	ldi	r23, 0x08	; 8
    2c4a:	8e e8       	ldi	r24, 0x8E	; 142
    2c4c:	90 e2       	ldi	r25, 0x20	; 32
    2c4e:	0f 91       	pop	r16
    2c50:	ff 90       	pop	r15
    2c52:	ef 90       	pop	r14
    2c54:	0c 94 b0 1a 	jmp	0x3560	; 0x3560 <vAssertCalled>
    2c58:	f8 94       	cli
    2c5a:	2f ef       	ldi	r18, 0xFF	; 255
    2c5c:	3f ef       	ldi	r19, 0xFF	; 255
    2c5e:	20 93 8e 21 	sts	0x218E, r18	; 0x80218e <xNextTaskUnblockTime>
    2c62:	30 93 8f 21 	sts	0x218F, r19	; 0x80218f <xNextTaskUnblockTime+0x1>
    2c66:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <xSchedulerRunning>
    2c6a:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <xTickCount>
    2c6e:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <xTickCount+0x1>
    2c72:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <vConfigureTimerForRunTimeStats>
    2c76:	0f 91       	pop	r16
    2c78:	ff 90       	pop	r15
    2c7a:	ef 90       	pop	r14
    2c7c:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <xPortStartScheduler>

00002c80 <vTaskSuspendAll>:
    2c80:	80 91 8b 21 	lds	r24, 0x218B	; 0x80218b <uxSchedulerSuspended>
    2c84:	8f 5f       	subi	r24, 0xFF	; 255
    2c86:	80 93 8b 21 	sts	0x218B, r24	; 0x80218b <uxSchedulerSuspended>
    2c8a:	08 95       	ret

00002c8c <xTaskGetTickCount>:
    2c8c:	0f b6       	in	r0, 0x3f	; 63
    2c8e:	f8 94       	cli
    2c90:	0f 92       	push	r0
    2c92:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <xTickCount>
    2c96:	90 91 97 21 	lds	r25, 0x2197	; 0x802197 <xTickCount+0x1>
    2c9a:	0f 90       	pop	r0
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	08 95       	ret

00002ca0 <xTaskIncrementTick>:
    2ca0:	df 92       	push	r13
    2ca2:	ef 92       	push	r14
    2ca4:	ff 92       	push	r15
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	80 91 8b 21 	lds	r24, 0x218B	; 0x80218b <uxSchedulerSuspended>
    2cb2:	81 11       	cpse	r24, r1
    2cb4:	b9 c0       	rjmp	.+370    	; 0x2e28 <xTaskIncrementTick+0x188>
    2cb6:	e0 90 96 21 	lds	r14, 0x2196	; 0x802196 <xTickCount>
    2cba:	f0 90 97 21 	lds	r15, 0x2197	; 0x802197 <xTickCount+0x1>
    2cbe:	8f ef       	ldi	r24, 0xFF	; 255
    2cc0:	e8 1a       	sub	r14, r24
    2cc2:	f8 0a       	sbc	r15, r24
    2cc4:	e0 92 96 21 	sts	0x2196, r14	; 0x802196 <xTickCount>
    2cc8:	f0 92 97 21 	sts	0x2197, r15	; 0x802197 <xTickCount+0x1>
    2ccc:	e1 14       	cp	r14, r1
    2cce:	f1 04       	cpc	r15, r1
    2cd0:	49 f5       	brne	.+82     	; 0x2d24 <xTaskIncrementTick+0x84>
    2cd2:	e0 91 b7 21 	lds	r30, 0x21B7	; 0x8021b7 <pxDelayedTaskList>
    2cd6:	f0 91 b8 21 	lds	r31, 0x21B8	; 0x8021b8 <pxDelayedTaskList+0x1>
    2cda:	80 81       	ld	r24, Z
    2cdc:	81 11       	cpse	r24, r1
    2cde:	ab c0       	rjmp	.+342    	; 0x2e36 <xTaskIncrementTick+0x196>
    2ce0:	80 91 b7 21 	lds	r24, 0x21B7	; 0x8021b7 <pxDelayedTaskList>
    2ce4:	90 91 b8 21 	lds	r25, 0x21B8	; 0x8021b8 <pxDelayedTaskList+0x1>
    2ce8:	20 91 b5 21 	lds	r18, 0x21B5	; 0x8021b5 <pxOverflowDelayedTaskList>
    2cec:	30 91 b6 21 	lds	r19, 0x21B6	; 0x8021b6 <pxOverflowDelayedTaskList+0x1>
    2cf0:	20 93 b7 21 	sts	0x21B7, r18	; 0x8021b7 <pxDelayedTaskList>
    2cf4:	30 93 b8 21 	sts	0x21B8, r19	; 0x8021b8 <pxDelayedTaskList+0x1>
    2cf8:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <pxOverflowDelayedTaskList>
    2cfc:	90 93 b6 21 	sts	0x21B6, r25	; 0x8021b6 <pxOverflowDelayedTaskList+0x1>
    2d00:	80 91 91 21 	lds	r24, 0x2191	; 0x802191 <xNumOfOverflows>
    2d04:	8f 5f       	subi	r24, 0xFF	; 255
    2d06:	80 93 91 21 	sts	0x2191, r24	; 0x802191 <xNumOfOverflows>
    2d0a:	e0 91 b7 21 	lds	r30, 0x21B7	; 0x8021b7 <pxDelayedTaskList>
    2d0e:	f0 91 b8 21 	lds	r31, 0x21B8	; 0x8021b8 <pxDelayedTaskList+0x1>
    2d12:	80 81       	ld	r24, Z
    2d14:	81 11       	cpse	r24, r1
    2d16:	96 c0       	rjmp	.+300    	; 0x2e44 <xTaskIncrementTick+0x1a4>
    2d18:	8f ef       	ldi	r24, 0xFF	; 255
    2d1a:	9f ef       	ldi	r25, 0xFF	; 255
    2d1c:	80 93 8e 21 	sts	0x218E, r24	; 0x80218e <xNextTaskUnblockTime>
    2d20:	90 93 8f 21 	sts	0x218F, r25	; 0x80218f <xNextTaskUnblockTime+0x1>
    2d24:	80 91 8e 21 	lds	r24, 0x218E	; 0x80218e <xNextTaskUnblockTime>
    2d28:	90 91 8f 21 	lds	r25, 0x218F	; 0x80218f <xNextTaskUnblockTime+0x1>
    2d2c:	d1 2c       	mov	r13, r1
    2d2e:	e8 16       	cp	r14, r24
    2d30:	f9 06       	cpc	r15, r25
    2d32:	08 f4       	brcc	.+2      	; 0x2d36 <xTaskIncrementTick+0x96>
    2d34:	53 c0       	rjmp	.+166    	; 0x2ddc <xTaskIncrementTick+0x13c>
    2d36:	e0 91 b7 21 	lds	r30, 0x21B7	; 0x8021b7 <pxDelayedTaskList>
    2d3a:	f0 91 b8 21 	lds	r31, 0x21B8	; 0x8021b8 <pxDelayedTaskList+0x1>
    2d3e:	80 81       	ld	r24, Z
    2d40:	88 23       	and	r24, r24
    2d42:	09 f4       	brne	.+2      	; 0x2d46 <xTaskIncrementTick+0xa6>
    2d44:	45 c0       	rjmp	.+138    	; 0x2dd0 <xTaskIncrementTick+0x130>
    2d46:	e0 91 b7 21 	lds	r30, 0x21B7	; 0x8021b7 <pxDelayedTaskList>
    2d4a:	f0 91 b8 21 	lds	r31, 0x21B8	; 0x8021b8 <pxDelayedTaskList+0x1>
    2d4e:	05 80       	ldd	r0, Z+5	; 0x05
    2d50:	f6 81       	ldd	r31, Z+6	; 0x06
    2d52:	e0 2d       	mov	r30, r0
    2d54:	c6 81       	ldd	r28, Z+6	; 0x06
    2d56:	d7 81       	ldd	r29, Z+7	; 0x07
    2d58:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d5c:	e8 16       	cp	r14, r24
    2d5e:	f9 06       	cpc	r15, r25
    2d60:	08 f4       	brcc	.+2      	; 0x2d64 <xTaskIncrementTick+0xc4>
    2d62:	73 c0       	rjmp	.+230    	; 0x2e4a <xTaskIncrementTick+0x1aa>
    2d64:	8e 01       	movw	r16, r28
    2d66:	0e 5f       	subi	r16, 0xFE	; 254
    2d68:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6a:	c8 01       	movw	r24, r16
    2d6c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <uxListRemove>
    2d70:	8c 89       	ldd	r24, Y+20	; 0x14
    2d72:	9d 89       	ldd	r25, Y+21	; 0x15
    2d74:	89 2b       	or	r24, r25
    2d76:	21 f0       	breq	.+8      	; 0x2d80 <xTaskIncrementTick+0xe0>
    2d78:	ce 01       	movw	r24, r28
    2d7a:	0c 96       	adiw	r24, 0x0c	; 12
    2d7c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <uxListRemove>
    2d80:	8e 89       	ldd	r24, Y+22	; 0x16
    2d82:	90 91 95 21 	lds	r25, 0x2195	; 0x802195 <uxTopReadyPriority>
    2d86:	98 17       	cp	r25, r24
    2d88:	10 f4       	brcc	.+4      	; 0x2d8e <xTaskIncrementTick+0xee>
    2d8a:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <uxTopReadyPriority>
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	9c 01       	movw	r18, r24
    2d92:	22 0f       	add	r18, r18
    2d94:	33 1f       	adc	r19, r19
    2d96:	22 0f       	add	r18, r18
    2d98:	33 1f       	adc	r19, r19
    2d9a:	22 0f       	add	r18, r18
    2d9c:	33 1f       	adc	r19, r19
    2d9e:	82 0f       	add	r24, r18
    2da0:	93 1f       	adc	r25, r19
    2da2:	b8 01       	movw	r22, r16
    2da4:	85 53       	subi	r24, 0x35	; 53
    2da6:	9e 4d       	sbci	r25, 0xDE	; 222
    2da8:	0e 94 56 0a 	call	0x14ac	; 0x14ac <vListInsertEnd>
    2dac:	e0 91 25 22 	lds	r30, 0x2225	; 0x802225 <pxCurrentTCB>
    2db0:	f0 91 26 22 	lds	r31, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    2db4:	9e 89       	ldd	r25, Y+22	; 0x16
    2db6:	86 89       	ldd	r24, Z+22	; 0x16
    2db8:	98 17       	cp	r25, r24
    2dba:	08 f4       	brcc	.+2      	; 0x2dbe <xTaskIncrementTick+0x11e>
    2dbc:	bc cf       	rjmp	.-136    	; 0x2d36 <xTaskIncrementTick+0x96>
    2dbe:	dd 24       	eor	r13, r13
    2dc0:	d3 94       	inc	r13
    2dc2:	e0 91 b7 21 	lds	r30, 0x21B7	; 0x8021b7 <pxDelayedTaskList>
    2dc6:	f0 91 b8 21 	lds	r31, 0x21B8	; 0x8021b8 <pxDelayedTaskList+0x1>
    2dca:	80 81       	ld	r24, Z
    2dcc:	81 11       	cpse	r24, r1
    2dce:	bb cf       	rjmp	.-138    	; 0x2d46 <xTaskIncrementTick+0xa6>
    2dd0:	8f ef       	ldi	r24, 0xFF	; 255
    2dd2:	9f ef       	ldi	r25, 0xFF	; 255
    2dd4:	80 93 8e 21 	sts	0x218E, r24	; 0x80218e <xNextTaskUnblockTime>
    2dd8:	90 93 8f 21 	sts	0x218F, r25	; 0x80218f <xNextTaskUnblockTime+0x1>
    2ddc:	e0 91 25 22 	lds	r30, 0x2225	; 0x802225 <pxCurrentTCB>
    2de0:	f0 91 26 22 	lds	r31, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    2de4:	86 89       	ldd	r24, Z+22	; 0x16
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	fc 01       	movw	r30, r24
    2dea:	ee 0f       	add	r30, r30
    2dec:	ff 1f       	adc	r31, r31
    2dee:	ee 0f       	add	r30, r30
    2df0:	ff 1f       	adc	r31, r31
    2df2:	ee 0f       	add	r30, r30
    2df4:	ff 1f       	adc	r31, r31
    2df6:	8e 0f       	add	r24, r30
    2df8:	9f 1f       	adc	r25, r31
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	e5 53       	subi	r30, 0x35	; 53
    2dfe:	fe 4d       	sbci	r31, 0xDE	; 222
    2e00:	80 81       	ld	r24, Z
    2e02:	82 30       	cpi	r24, 0x02	; 2
    2e04:	10 f0       	brcs	.+4      	; 0x2e0a <xTaskIncrementTick+0x16a>
    2e06:	dd 24       	eor	r13, r13
    2e08:	d3 94       	inc	r13
    2e0a:	80 91 92 21 	lds	r24, 0x2192	; 0x802192 <xYieldPending>
    2e0e:	88 23       	and	r24, r24
    2e10:	11 f0       	breq	.+4      	; 0x2e16 <xTaskIncrementTick+0x176>
    2e12:	dd 24       	eor	r13, r13
    2e14:	d3 94       	inc	r13
    2e16:	8d 2d       	mov	r24, r13
    2e18:	df 91       	pop	r29
    2e1a:	cf 91       	pop	r28
    2e1c:	1f 91       	pop	r17
    2e1e:	0f 91       	pop	r16
    2e20:	ff 90       	pop	r15
    2e22:	ef 90       	pop	r14
    2e24:	df 90       	pop	r13
    2e26:	08 95       	ret
    2e28:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <uxPendedTicks>
    2e2c:	8f 5f       	subi	r24, 0xFF	; 255
    2e2e:	80 93 93 21 	sts	0x2193, r24	; 0x802193 <uxPendedTicks>
    2e32:	d1 2c       	mov	r13, r1
    2e34:	ea cf       	rjmp	.-44     	; 0x2e0a <xTaskIncrementTick+0x16a>
    2e36:	66 e6       	ldi	r22, 0x66	; 102
    2e38:	7a e0       	ldi	r23, 0x0A	; 10
    2e3a:	8e e8       	ldi	r24, 0x8E	; 142
    2e3c:	90 e2       	ldi	r25, 0x20	; 32
    2e3e:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    2e42:	4e cf       	rjmp	.-356    	; 0x2ce0 <xTaskIncrementTick+0x40>
    2e44:	0e 94 b8 12 	call	0x2570	; 0x2570 <prvResetNextTaskUnblockTime.part.0>
    2e48:	6d cf       	rjmp	.-294    	; 0x2d24 <xTaskIncrementTick+0x84>
    2e4a:	80 93 8e 21 	sts	0x218E, r24	; 0x80218e <xNextTaskUnblockTime>
    2e4e:	90 93 8f 21 	sts	0x218F, r25	; 0x80218f <xNextTaskUnblockTime+0x1>
    2e52:	c4 cf       	rjmp	.-120    	; 0x2ddc <xTaskIncrementTick+0x13c>

00002e54 <xTaskResumeAll>:
    2e54:	ff 92       	push	r15
    2e56:	0f 93       	push	r16
    2e58:	1f 93       	push	r17
    2e5a:	cf 93       	push	r28
    2e5c:	df 93       	push	r29
    2e5e:	80 91 8b 21 	lds	r24, 0x218B	; 0x80218b <uxSchedulerSuspended>
    2e62:	88 23       	and	r24, r24
    2e64:	09 f4       	brne	.+2      	; 0x2e68 <xTaskResumeAll+0x14>
    2e66:	77 c0       	rjmp	.+238    	; 0x2f56 <xTaskResumeAll+0x102>
    2e68:	0f b6       	in	r0, 0x3f	; 63
    2e6a:	f8 94       	cli
    2e6c:	0f 92       	push	r0
    2e6e:	80 91 8b 21 	lds	r24, 0x218B	; 0x80218b <uxSchedulerSuspended>
    2e72:	81 50       	subi	r24, 0x01	; 1
    2e74:	80 93 8b 21 	sts	0x218B, r24	; 0x80218b <uxSchedulerSuspended>
    2e78:	80 91 8b 21 	lds	r24, 0x218B	; 0x80218b <uxSchedulerSuspended>
    2e7c:	81 11       	cpse	r24, r1
    2e7e:	62 c0       	rjmp	.+196    	; 0x2f44 <xTaskResumeAll+0xf0>
    2e80:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <uxCurrentNumberOfTasks>
    2e84:	88 23       	and	r24, r24
    2e86:	09 f4       	brne	.+2      	; 0x2e8a <xTaskResumeAll+0x36>
    2e88:	5d c0       	rjmp	.+186    	; 0x2f44 <xTaskResumeAll+0xf0>
    2e8a:	c0 e0       	ldi	r28, 0x00	; 0
    2e8c:	d0 e0       	ldi	r29, 0x00	; 0
    2e8e:	ff 24       	eor	r15, r15
    2e90:	f3 94       	inc	r15
    2e92:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <xPendingReadyList>
    2e96:	88 23       	and	r24, r24
    2e98:	a1 f1       	breq	.+104    	; 0x2f02 <xTaskResumeAll+0xae>
    2e9a:	e0 91 b1 21 	lds	r30, 0x21B1	; 0x8021b1 <xPendingReadyList+0x5>
    2e9e:	f0 91 b2 21 	lds	r31, 0x21B2	; 0x8021b2 <xPendingReadyList+0x6>
    2ea2:	c6 81       	ldd	r28, Z+6	; 0x06
    2ea4:	d7 81       	ldd	r29, Z+7	; 0x07
    2ea6:	ce 01       	movw	r24, r28
    2ea8:	0c 96       	adiw	r24, 0x0c	; 12
    2eaa:	0e 94 a8 0a 	call	0x1550	; 0x1550 <uxListRemove>
    2eae:	8e 01       	movw	r16, r28
    2eb0:	0e 5f       	subi	r16, 0xFE	; 254
    2eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb4:	c8 01       	movw	r24, r16
    2eb6:	0e 94 a8 0a 	call	0x1550	; 0x1550 <uxListRemove>
    2eba:	8e 89       	ldd	r24, Y+22	; 0x16
    2ebc:	90 91 95 21 	lds	r25, 0x2195	; 0x802195 <uxTopReadyPriority>
    2ec0:	98 17       	cp	r25, r24
    2ec2:	10 f4       	brcc	.+4      	; 0x2ec8 <xTaskResumeAll+0x74>
    2ec4:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <uxTopReadyPriority>
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	9c 01       	movw	r18, r24
    2ecc:	22 0f       	add	r18, r18
    2ece:	33 1f       	adc	r19, r19
    2ed0:	22 0f       	add	r18, r18
    2ed2:	33 1f       	adc	r19, r19
    2ed4:	22 0f       	add	r18, r18
    2ed6:	33 1f       	adc	r19, r19
    2ed8:	82 0f       	add	r24, r18
    2eda:	93 1f       	adc	r25, r19
    2edc:	b8 01       	movw	r22, r16
    2ede:	85 53       	subi	r24, 0x35	; 53
    2ee0:	9e 4d       	sbci	r25, 0xDE	; 222
    2ee2:	0e 94 56 0a 	call	0x14ac	; 0x14ac <vListInsertEnd>
    2ee6:	e0 91 25 22 	lds	r30, 0x2225	; 0x802225 <pxCurrentTCB>
    2eea:	f0 91 26 22 	lds	r31, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    2eee:	9e 89       	ldd	r25, Y+22	; 0x16
    2ef0:	86 89       	ldd	r24, Z+22	; 0x16
    2ef2:	98 17       	cp	r25, r24
    2ef4:	70 f2       	brcs	.-100    	; 0x2e92 <xTaskResumeAll+0x3e>
    2ef6:	f0 92 92 21 	sts	0x2192, r15	; 0x802192 <xYieldPending>
    2efa:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <xPendingReadyList>
    2efe:	81 11       	cpse	r24, r1
    2f00:	cc cf       	rjmp	.-104    	; 0x2e9a <xTaskResumeAll+0x46>
    2f02:	cd 2b       	or	r28, r29
    2f04:	69 f0       	breq	.+26     	; 0x2f20 <xTaskResumeAll+0xcc>
    2f06:	e0 91 b7 21 	lds	r30, 0x21B7	; 0x8021b7 <pxDelayedTaskList>
    2f0a:	f0 91 b8 21 	lds	r31, 0x21B8	; 0x8021b8 <pxDelayedTaskList+0x1>
    2f0e:	80 81       	ld	r24, Z
    2f10:	81 11       	cpse	r24, r1
    2f12:	2c c0       	rjmp	.+88     	; 0x2f6c <xTaskResumeAll+0x118>
    2f14:	8f ef       	ldi	r24, 0xFF	; 255
    2f16:	9f ef       	ldi	r25, 0xFF	; 255
    2f18:	80 93 8e 21 	sts	0x218E, r24	; 0x80218e <xNextTaskUnblockTime>
    2f1c:	90 93 8f 21 	sts	0x218F, r25	; 0x80218f <xNextTaskUnblockTime+0x1>
    2f20:	c0 91 93 21 	lds	r28, 0x2193	; 0x802193 <uxPendedTicks>
    2f24:	cc 23       	and	r28, r28
    2f26:	51 f0       	breq	.+20     	; 0x2f3c <xTaskResumeAll+0xe8>
    2f28:	d1 e0       	ldi	r29, 0x01	; 1
    2f2a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <xTaskIncrementTick>
    2f2e:	81 11       	cpse	r24, r1
    2f30:	d0 93 92 21 	sts	0x2192, r29	; 0x802192 <xYieldPending>
    2f34:	c1 50       	subi	r28, 0x01	; 1
    2f36:	c9 f7       	brne	.-14     	; 0x2f2a <xTaskResumeAll+0xd6>
    2f38:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <uxPendedTicks>
    2f3c:	80 91 92 21 	lds	r24, 0x2192	; 0x802192 <xYieldPending>
    2f40:	81 11       	cpse	r24, r1
    2f42:	10 c0       	rjmp	.+32     	; 0x2f64 <xTaskResumeAll+0x110>
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	0f 90       	pop	r0
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	df 91       	pop	r29
    2f4c:	cf 91       	pop	r28
    2f4e:	1f 91       	pop	r17
    2f50:	0f 91       	pop	r16
    2f52:	ff 90       	pop	r15
    2f54:	08 95       	ret
    2f56:	6c e6       	ldi	r22, 0x6C	; 108
    2f58:	78 e0       	ldi	r23, 0x08	; 8
    2f5a:	8e e8       	ldi	r24, 0x8E	; 142
    2f5c:	90 e2       	ldi	r25, 0x20	; 32
    2f5e:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    2f62:	82 cf       	rjmp	.-252    	; 0x2e68 <xTaskResumeAll+0x14>
    2f64:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <vPortYield>
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	ed cf       	rjmp	.-38     	; 0x2f46 <xTaskResumeAll+0xf2>
    2f6c:	0e 94 b8 12 	call	0x2570	; 0x2570 <prvResetNextTaskUnblockTime.part.0>
    2f70:	d7 cf       	rjmp	.-82     	; 0x2f20 <xTaskResumeAll+0xcc>

00002f72 <vTaskDelayUntil>:
    2f72:	0f 93       	push	r16
    2f74:	1f 93       	push	r17
    2f76:	cf 93       	push	r28
    2f78:	df 93       	push	r29
    2f7a:	8c 01       	movw	r16, r24
    2f7c:	eb 01       	movw	r28, r22
    2f7e:	89 2b       	or	r24, r25
    2f80:	09 f4       	brne	.+2      	; 0x2f84 <vTaskDelayUntil+0x12>
    2f82:	46 c0       	rjmp	.+140    	; 0x3010 <vTaskDelayUntil+0x9e>
    2f84:	20 97       	sbiw	r28, 0x00	; 0
    2f86:	e9 f1       	breq	.+122    	; 0x3002 <vTaskDelayUntil+0x90>
    2f88:	80 91 8b 21 	lds	r24, 0x218B	; 0x80218b <uxSchedulerSuspended>
    2f8c:	81 11       	cpse	r24, r1
    2f8e:	32 c0       	rjmp	.+100    	; 0x2ff4 <vTaskDelayUntil+0x82>
    2f90:	80 91 8b 21 	lds	r24, 0x218B	; 0x80218b <uxSchedulerSuspended>
    2f94:	8f 5f       	subi	r24, 0xFF	; 255
    2f96:	80 93 8b 21 	sts	0x218B, r24	; 0x80218b <uxSchedulerSuspended>
    2f9a:	40 91 96 21 	lds	r20, 0x2196	; 0x802196 <xTickCount>
    2f9e:	50 91 97 21 	lds	r21, 0x2197	; 0x802197 <xTickCount+0x1>
    2fa2:	f8 01       	movw	r30, r16
    2fa4:	20 81       	ld	r18, Z
    2fa6:	31 81       	ldd	r19, Z+1	; 0x01
    2fa8:	ce 01       	movw	r24, r28
    2faa:	82 0f       	add	r24, r18
    2fac:	93 1f       	adc	r25, r19
    2fae:	42 17       	cp	r20, r18
    2fb0:	53 07       	cpc	r21, r19
    2fb2:	88 f4       	brcc	.+34     	; 0x2fd6 <vTaskDelayUntil+0x64>
    2fb4:	82 17       	cp	r24, r18
    2fb6:	93 07       	cpc	r25, r19
    2fb8:	88 f0       	brcs	.+34     	; 0x2fdc <vTaskDelayUntil+0x6a>
    2fba:	f8 01       	movw	r30, r16
    2fbc:	80 83       	st	Z, r24
    2fbe:	91 83       	std	Z+1, r25	; 0x01
    2fc0:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xTaskResumeAll>
    2fc4:	81 11       	cpse	r24, r1
    2fc6:	02 c0       	rjmp	.+4      	; 0x2fcc <vTaskDelayUntil+0x5a>
    2fc8:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <vPortYield>
    2fcc:	df 91       	pop	r29
    2fce:	cf 91       	pop	r28
    2fd0:	1f 91       	pop	r17
    2fd2:	0f 91       	pop	r16
    2fd4:	08 95       	ret
    2fd6:	82 17       	cp	r24, r18
    2fd8:	93 07       	cpc	r25, r19
    2fda:	18 f0       	brcs	.+6      	; 0x2fe2 <vTaskDelayUntil+0x70>
    2fdc:	48 17       	cp	r20, r24
    2fde:	59 07       	cpc	r21, r25
    2fe0:	60 f7       	brcc	.-40     	; 0x2fba <vTaskDelayUntil+0x48>
    2fe2:	f8 01       	movw	r30, r16
    2fe4:	80 83       	st	Z, r24
    2fe6:	91 83       	std	Z+1, r25	; 0x01
    2fe8:	60 e0       	ldi	r22, 0x00	; 0
    2fea:	84 1b       	sub	r24, r20
    2fec:	95 0b       	sbc	r25, r21
    2fee:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <prvAddCurrentTaskToDelayedList>
    2ff2:	e6 cf       	rjmp	.-52     	; 0x2fc0 <vTaskDelayUntil+0x4e>
    2ff4:	6c ec       	ldi	r22, 0xCC	; 204
    2ff6:	74 e0       	ldi	r23, 0x04	; 4
    2ff8:	8e e8       	ldi	r24, 0x8E	; 142
    2ffa:	90 e2       	ldi	r25, 0x20	; 32
    2ffc:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    3000:	c7 cf       	rjmp	.-114    	; 0x2f90 <vTaskDelayUntil+0x1e>
    3002:	6b ec       	ldi	r22, 0xCB	; 203
    3004:	74 e0       	ldi	r23, 0x04	; 4
    3006:	8e e8       	ldi	r24, 0x8E	; 142
    3008:	90 e2       	ldi	r25, 0x20	; 32
    300a:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    300e:	bc cf       	rjmp	.-136    	; 0x2f88 <vTaskDelayUntil+0x16>
    3010:	6a ec       	ldi	r22, 0xCA	; 202
    3012:	74 e0       	ldi	r23, 0x04	; 4
    3014:	8e e8       	ldi	r24, 0x8E	; 142
    3016:	90 e2       	ldi	r25, 0x20	; 32
    3018:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    301c:	b3 cf       	rjmp	.-154    	; 0x2f84 <vTaskDelayUntil+0x12>

0000301e <vTaskDelay>:
    301e:	cf 93       	push	r28
    3020:	df 93       	push	r29
    3022:	ec 01       	movw	r28, r24
    3024:	89 2b       	or	r24, r25
    3026:	29 f4       	brne	.+10     	; 0x3032 <vTaskDelay+0x14>
    3028:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <vPortYield>
    302c:	df 91       	pop	r29
    302e:	cf 91       	pop	r28
    3030:	08 95       	ret
    3032:	80 91 8b 21 	lds	r24, 0x218B	; 0x80218b <uxSchedulerSuspended>
    3036:	81 11       	cpse	r24, r1
    3038:	10 c0       	rjmp	.+32     	; 0x305a <vTaskDelay+0x3c>
    303a:	80 91 8b 21 	lds	r24, 0x218B	; 0x80218b <uxSchedulerSuspended>
    303e:	8f 5f       	subi	r24, 0xFF	; 255
    3040:	80 93 8b 21 	sts	0x218B, r24	; 0x80218b <uxSchedulerSuspended>
    3044:	60 e0       	ldi	r22, 0x00	; 0
    3046:	ce 01       	movw	r24, r28
    3048:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <prvAddCurrentTaskToDelayedList>
    304c:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <xTaskResumeAll>
    3050:	88 23       	and	r24, r24
    3052:	51 f3       	breq	.-44     	; 0x3028 <vTaskDelay+0xa>
    3054:	df 91       	pop	r29
    3056:	cf 91       	pop	r28
    3058:	08 95       	ret
    305a:	60 e2       	ldi	r22, 0x20	; 32
    305c:	75 e0       	ldi	r23, 0x05	; 5
    305e:	8e e8       	ldi	r24, 0x8E	; 142
    3060:	90 e2       	ldi	r25, 0x20	; 32
    3062:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    3066:	e9 cf       	rjmp	.-46     	; 0x303a <vTaskDelay+0x1c>

00003068 <vTaskSwitchContext>:
    3068:	80 91 8b 21 	lds	r24, 0x218B	; 0x80218b <uxSchedulerSuspended>
    306c:	81 11       	cpse	r24, r1
    306e:	02 c0       	rjmp	.+4      	; 0x3074 <vTaskSwitchContext+0xc>
    3070:	0c 94 44 13 	jmp	0x2688	; 0x2688 <vTaskSwitchContext.part.5>
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	80 93 92 21 	sts	0x2192, r24	; 0x802192 <xYieldPending>
    307a:	08 95       	ret

0000307c <vTaskPlaceOnEventList>:
    307c:	0f 93       	push	r16
    307e:	1f 93       	push	r17
    3080:	cf 93       	push	r28
    3082:	df 93       	push	r29
    3084:	ec 01       	movw	r28, r24
    3086:	8b 01       	movw	r16, r22
    3088:	89 2b       	or	r24, r25
    308a:	89 f0       	breq	.+34     	; 0x30ae <vTaskPlaceOnEventList+0x32>
    308c:	60 91 25 22 	lds	r22, 0x2225	; 0x802225 <pxCurrentTCB>
    3090:	70 91 26 22 	lds	r23, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    3094:	64 5f       	subi	r22, 0xF4	; 244
    3096:	7f 4f       	sbci	r23, 0xFF	; 255
    3098:	ce 01       	movw	r24, r28
    309a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <vListInsert>
    309e:	61 e0       	ldi	r22, 0x01	; 1
    30a0:	c8 01       	movw	r24, r16
    30a2:	df 91       	pop	r29
    30a4:	cf 91       	pop	r28
    30a6:	1f 91       	pop	r17
    30a8:	0f 91       	pop	r16
    30aa:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <prvAddCurrentTaskToDelayedList>
    30ae:	63 ea       	ldi	r22, 0xA3	; 163
    30b0:	7b e0       	ldi	r23, 0x0B	; 11
    30b2:	8e e8       	ldi	r24, 0x8E	; 142
    30b4:	90 e2       	ldi	r25, 0x20	; 32
    30b6:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    30ba:	e8 cf       	rjmp	.-48     	; 0x308c <vTaskPlaceOnEventList+0x10>

000030bc <xTaskRemoveFromEventList>:
    30bc:	0f 93       	push	r16
    30be:	1f 93       	push	r17
    30c0:	cf 93       	push	r28
    30c2:	df 93       	push	r29
    30c4:	dc 01       	movw	r26, r24
    30c6:	15 96       	adiw	r26, 0x05	; 5
    30c8:	ed 91       	ld	r30, X+
    30ca:	fc 91       	ld	r31, X
    30cc:	16 97       	sbiw	r26, 0x06	; 6
    30ce:	c6 81       	ldd	r28, Z+6	; 0x06
    30d0:	d7 81       	ldd	r29, Z+7	; 0x07
    30d2:	20 97       	sbiw	r28, 0x00	; 0
    30d4:	09 f4       	brne	.+2      	; 0x30d8 <xTaskRemoveFromEventList+0x1c>
    30d6:	42 c0       	rjmp	.+132    	; 0x315c <xTaskRemoveFromEventList+0xa0>
    30d8:	8e 01       	movw	r16, r28
    30da:	04 5f       	subi	r16, 0xF4	; 244
    30dc:	1f 4f       	sbci	r17, 0xFF	; 255
    30de:	c8 01       	movw	r24, r16
    30e0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <uxListRemove>
    30e4:	80 91 8b 21 	lds	r24, 0x218B	; 0x80218b <uxSchedulerSuspended>
    30e8:	81 11       	cpse	r24, r1
    30ea:	29 c0       	rjmp	.+82     	; 0x313e <xTaskRemoveFromEventList+0x82>
    30ec:	0a 50       	subi	r16, 0x0A	; 10
    30ee:	11 09       	sbc	r17, r1
    30f0:	c8 01       	movw	r24, r16
    30f2:	0e 94 a8 0a 	call	0x1550	; 0x1550 <uxListRemove>
    30f6:	8e 89       	ldd	r24, Y+22	; 0x16
    30f8:	90 91 95 21 	lds	r25, 0x2195	; 0x802195 <uxTopReadyPriority>
    30fc:	98 17       	cp	r25, r24
    30fe:	28 f1       	brcs	.+74     	; 0x314a <xTaskRemoveFromEventList+0x8e>
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	9c 01       	movw	r18, r24
    3104:	22 0f       	add	r18, r18
    3106:	33 1f       	adc	r19, r19
    3108:	22 0f       	add	r18, r18
    310a:	33 1f       	adc	r19, r19
    310c:	22 0f       	add	r18, r18
    310e:	33 1f       	adc	r19, r19
    3110:	82 0f       	add	r24, r18
    3112:	93 1f       	adc	r25, r19
    3114:	b8 01       	movw	r22, r16
    3116:	85 53       	subi	r24, 0x35	; 53
    3118:	9e 4d       	sbci	r25, 0xDE	; 222
    311a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <vListInsertEnd>
    311e:	e0 91 25 22 	lds	r30, 0x2225	; 0x802225 <pxCurrentTCB>
    3122:	f0 91 26 22 	lds	r31, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    3126:	9e 89       	ldd	r25, Y+22	; 0x16
    3128:	86 89       	ldd	r24, Z+22	; 0x16
    312a:	89 17       	cp	r24, r25
    312c:	88 f4       	brcc	.+34     	; 0x3150 <xTaskRemoveFromEventList+0x94>
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	80 93 92 21 	sts	0x2192, r24	; 0x802192 <xYieldPending>
    3134:	df 91       	pop	r29
    3136:	cf 91       	pop	r28
    3138:	1f 91       	pop	r17
    313a:	0f 91       	pop	r16
    313c:	08 95       	ret
    313e:	b8 01       	movw	r22, r16
    3140:	8c ea       	ldi	r24, 0xAC	; 172
    3142:	91 e2       	ldi	r25, 0x21	; 33
    3144:	0e 94 56 0a 	call	0x14ac	; 0x14ac <vListInsertEnd>
    3148:	ea cf       	rjmp	.-44     	; 0x311e <xTaskRemoveFromEventList+0x62>
    314a:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <uxTopReadyPriority>
    314e:	d8 cf       	rjmp	.-80     	; 0x3100 <xTaskRemoveFromEventList+0x44>
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	df 91       	pop	r29
    3154:	cf 91       	pop	r28
    3156:	1f 91       	pop	r17
    3158:	0f 91       	pop	r16
    315a:	08 95       	ret
    315c:	6e ef       	ldi	r22, 0xFE	; 254
    315e:	7b e0       	ldi	r23, 0x0B	; 11
    3160:	8e e8       	ldi	r24, 0x8E	; 142
    3162:	90 e2       	ldi	r25, 0x20	; 32
    3164:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    3168:	b7 cf       	rjmp	.-146    	; 0x30d8 <xTaskRemoveFromEventList+0x1c>

0000316a <vTaskInternalSetTimeOutState>:
    316a:	20 91 91 21 	lds	r18, 0x2191	; 0x802191 <xNumOfOverflows>
    316e:	fc 01       	movw	r30, r24
    3170:	20 83       	st	Z, r18
    3172:	20 91 96 21 	lds	r18, 0x2196	; 0x802196 <xTickCount>
    3176:	30 91 97 21 	lds	r19, 0x2197	; 0x802197 <xTickCount+0x1>
    317a:	21 83       	std	Z+1, r18	; 0x01
    317c:	32 83       	std	Z+2, r19	; 0x02
    317e:	08 95       	ret

00003180 <xTaskCheckForTimeOut>:
    3180:	0f 93       	push	r16
    3182:	1f 93       	push	r17
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	ec 01       	movw	r28, r24
    318a:	8b 01       	movw	r16, r22
    318c:	89 2b       	or	r24, r25
    318e:	09 f4       	brne	.+2      	; 0x3192 <xTaskCheckForTimeOut+0x12>
    3190:	40 c0       	rjmp	.+128    	; 0x3212 <xTaskCheckForTimeOut+0x92>
    3192:	01 15       	cp	r16, r1
    3194:	11 05       	cpc	r17, r1
    3196:	09 f4       	brne	.+2      	; 0x319a <xTaskCheckForTimeOut+0x1a>
    3198:	43 c0       	rjmp	.+134    	; 0x3220 <xTaskCheckForTimeOut+0xa0>
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	f8 94       	cli
    319e:	0f 92       	push	r0
    31a0:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <xTickCount>
    31a4:	90 91 97 21 	lds	r25, 0x2197	; 0x802197 <xTickCount+0x1>
    31a8:	f8 01       	movw	r30, r16
    31aa:	20 81       	ld	r18, Z
    31ac:	31 81       	ldd	r19, Z+1	; 0x01
    31ae:	2f 3f       	cpi	r18, 0xFF	; 255
    31b0:	ff ef       	ldi	r31, 0xFF	; 255
    31b2:	3f 07       	cpc	r19, r31
    31b4:	61 f1       	breq	.+88     	; 0x320e <xTaskCheckForTimeOut+0x8e>
    31b6:	49 81       	ldd	r20, Y+1	; 0x01
    31b8:	5a 81       	ldd	r21, Y+2	; 0x02
    31ba:	60 91 91 21 	lds	r22, 0x2191	; 0x802191 <xNumOfOverflows>
    31be:	78 81       	ld	r23, Y
    31c0:	76 17       	cp	r23, r22
    31c2:	19 f0       	breq	.+6      	; 0x31ca <xTaskCheckForTimeOut+0x4a>
    31c4:	84 17       	cp	r24, r20
    31c6:	95 07       	cpc	r25, r21
    31c8:	80 f4       	brcc	.+32     	; 0x31ea <xTaskCheckForTimeOut+0x6a>
    31ca:	84 1b       	sub	r24, r20
    31cc:	95 0b       	sbc	r25, r21
    31ce:	82 17       	cp	r24, r18
    31d0:	93 07       	cpc	r25, r19
    31d2:	68 f0       	brcs	.+26     	; 0x31ee <xTaskCheckForTimeOut+0x6e>
    31d4:	f8 01       	movw	r30, r16
    31d6:	10 82       	st	Z, r1
    31d8:	11 82       	std	Z+1, r1	; 0x01
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	0f 90       	pop	r0
    31de:	0f be       	out	0x3f, r0	; 63
    31e0:	df 91       	pop	r29
    31e2:	cf 91       	pop	r28
    31e4:	1f 91       	pop	r17
    31e6:	0f 91       	pop	r16
    31e8:	08 95       	ret
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	f7 cf       	rjmp	.-18     	; 0x31dc <xTaskCheckForTimeOut+0x5c>
    31ee:	28 1b       	sub	r18, r24
    31f0:	39 0b       	sbc	r19, r25
    31f2:	f8 01       	movw	r30, r16
    31f4:	20 83       	st	Z, r18
    31f6:	31 83       	std	Z+1, r19	; 0x01
    31f8:	80 91 91 21 	lds	r24, 0x2191	; 0x802191 <xNumOfOverflows>
    31fc:	88 83       	st	Y, r24
    31fe:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <xTickCount>
    3202:	90 91 97 21 	lds	r25, 0x2197	; 0x802197 <xTickCount+0x1>
    3206:	89 83       	std	Y+1, r24	; 0x01
    3208:	9a 83       	std	Y+2, r25	; 0x02
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	e7 cf       	rjmp	.-50     	; 0x31dc <xTaskCheckForTimeOut+0x5c>
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	e5 cf       	rjmp	.-54     	; 0x31dc <xTaskCheckForTimeOut+0x5c>
    3212:	69 e6       	ldi	r22, 0x69	; 105
    3214:	7c e0       	ldi	r23, 0x0C	; 12
    3216:	8e e8       	ldi	r24, 0x8E	; 142
    3218:	90 e2       	ldi	r25, 0x20	; 32
    321a:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    321e:	b9 cf       	rjmp	.-142    	; 0x3192 <xTaskCheckForTimeOut+0x12>
    3220:	6a e6       	ldi	r22, 0x6A	; 106
    3222:	7c e0       	ldi	r23, 0x0C	; 12
    3224:	8e e8       	ldi	r24, 0x8E	; 142
    3226:	90 e2       	ldi	r25, 0x20	; 32
    3228:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    322c:	b6 cf       	rjmp	.-148    	; 0x319a <xTaskCheckForTimeOut+0x1a>

0000322e <vTaskMissedYield>:
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	80 93 92 21 	sts	0x2192, r24	; 0x802192 <xYieldPending>
    3234:	08 95       	ret

00003236 <xTaskPriorityInherit>:
    3236:	0f 93       	push	r16
    3238:	1f 93       	push	r17
    323a:	cf 93       	push	r28
    323c:	df 93       	push	r29
    323e:	fc 01       	movw	r30, r24
    3240:	89 2b       	or	r24, r25
    3242:	09 f4       	brne	.+2      	; 0x3246 <xTaskPriorityInherit+0x10>
    3244:	41 c0       	rjmp	.+130    	; 0x32c8 <xTaskPriorityInherit+0x92>
    3246:	26 89       	ldd	r18, Z+22	; 0x16
    3248:	a0 91 25 22 	lds	r26, 0x2225	; 0x802225 <pxCurrentTCB>
    324c:	b0 91 26 22 	lds	r27, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    3250:	56 96       	adiw	r26, 0x16	; 22
    3252:	8c 91       	ld	r24, X
    3254:	28 17       	cp	r18, r24
    3256:	70 f5       	brcc	.+92     	; 0x32b4 <xTaskPriorityInherit+0x7e>
    3258:	84 85       	ldd	r24, Z+12	; 0x0c
    325a:	95 85       	ldd	r25, Z+13	; 0x0d
    325c:	97 fd       	sbrc	r25, 7
    325e:	0c c0       	rjmp	.+24     	; 0x3278 <xTaskPriorityInherit+0x42>
    3260:	a0 91 25 22 	lds	r26, 0x2225	; 0x802225 <pxCurrentTCB>
    3264:	b0 91 26 22 	lds	r27, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    3268:	56 96       	adiw	r26, 0x16	; 22
    326a:	3c 91       	ld	r19, X
    326c:	8a e0       	ldi	r24, 0x0A	; 10
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	83 1b       	sub	r24, r19
    3272:	91 09       	sbc	r25, r1
    3274:	84 87       	std	Z+12, r24	; 0x0c
    3276:	95 87       	std	Z+13, r25	; 0x0d
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	c9 01       	movw	r24, r18
    327c:	88 0f       	add	r24, r24
    327e:	99 1f       	adc	r25, r25
    3280:	88 0f       	add	r24, r24
    3282:	99 1f       	adc	r25, r25
    3284:	88 0f       	add	r24, r24
    3286:	99 1f       	adc	r25, r25
    3288:	28 0f       	add	r18, r24
    328a:	39 1f       	adc	r19, r25
    328c:	25 53       	subi	r18, 0x35	; 53
    328e:	3e 4d       	sbci	r19, 0xDE	; 222
    3290:	82 85       	ldd	r24, Z+10	; 0x0a
    3292:	93 85       	ldd	r25, Z+11	; 0x0b
    3294:	82 17       	cp	r24, r18
    3296:	93 07       	cpc	r25, r19
    3298:	e9 f0       	breq	.+58     	; 0x32d4 <xTaskPriorityInherit+0x9e>
    329a:	a0 91 25 22 	lds	r26, 0x2225	; 0x802225 <pxCurrentTCB>
    329e:	b0 91 26 22 	lds	r27, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    32a2:	56 96       	adiw	r26, 0x16	; 22
    32a4:	8c 91       	ld	r24, X
    32a6:	86 8b       	std	Z+22, r24	; 0x16
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	df 91       	pop	r29
    32ac:	cf 91       	pop	r28
    32ae:	1f 91       	pop	r17
    32b0:	0f 91       	pop	r16
    32b2:	08 95       	ret
    32b4:	a0 91 25 22 	lds	r26, 0x2225	; 0x802225 <pxCurrentTCB>
    32b8:	b0 91 26 22 	lds	r27, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	23 a1       	ldd	r18, Z+35	; 0x23
    32c0:	56 96       	adiw	r26, 0x16	; 22
    32c2:	9c 91       	ld	r25, X
    32c4:	29 17       	cp	r18, r25
    32c6:	88 f3       	brcs	.-30     	; 0x32aa <xTaskPriorityInherit+0x74>
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	df 91       	pop	r29
    32cc:	cf 91       	pop	r28
    32ce:	1f 91       	pop	r17
    32d0:	0f 91       	pop	r16
    32d2:	08 95       	ret
    32d4:	8f 01       	movw	r16, r30
    32d6:	ef 01       	movw	r28, r30
    32d8:	22 96       	adiw	r28, 0x02	; 2
    32da:	ce 01       	movw	r24, r28
    32dc:	0e 94 a8 0a 	call	0x1550	; 0x1550 <uxListRemove>
    32e0:	e0 91 25 22 	lds	r30, 0x2225	; 0x802225 <pxCurrentTCB>
    32e4:	f0 91 26 22 	lds	r31, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    32e8:	86 89       	ldd	r24, Z+22	; 0x16
    32ea:	f8 01       	movw	r30, r16
    32ec:	86 8b       	std	Z+22, r24	; 0x16
    32ee:	90 91 95 21 	lds	r25, 0x2195	; 0x802195 <uxTopReadyPriority>
    32f2:	98 17       	cp	r25, r24
    32f4:	10 f4       	brcc	.+4      	; 0x32fa <xTaskPriorityInherit+0xc4>
    32f6:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <uxTopReadyPriority>
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	9c 01       	movw	r18, r24
    32fe:	22 0f       	add	r18, r18
    3300:	33 1f       	adc	r19, r19
    3302:	22 0f       	add	r18, r18
    3304:	33 1f       	adc	r19, r19
    3306:	22 0f       	add	r18, r18
    3308:	33 1f       	adc	r19, r19
    330a:	82 0f       	add	r24, r18
    330c:	93 1f       	adc	r25, r19
    330e:	be 01       	movw	r22, r28
    3310:	85 53       	subi	r24, 0x35	; 53
    3312:	9e 4d       	sbci	r25, 0xDE	; 222
    3314:	0e 94 56 0a 	call	0x14ac	; 0x14ac <vListInsertEnd>
    3318:	81 e0       	ldi	r24, 0x01	; 1
    331a:	c7 cf       	rjmp	.-114    	; 0x32aa <xTaskPriorityInherit+0x74>

0000331c <xTaskPriorityDisinherit>:
    331c:	0f 93       	push	r16
    331e:	1f 93       	push	r17
    3320:	cf 93       	push	r28
    3322:	df 93       	push	r29
    3324:	00 97       	sbiw	r24, 0x00	; 0
    3326:	c9 f0       	breq	.+50     	; 0x335a <xTaskPriorityDisinherit+0x3e>
    3328:	ec 01       	movw	r28, r24
    332a:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <pxCurrentTCB>
    332e:	90 91 26 22 	lds	r25, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    3332:	c8 17       	cp	r28, r24
    3334:	d9 07       	cpc	r29, r25
    3336:	31 f0       	breq	.+12     	; 0x3344 <xTaskPriorityDisinherit+0x28>
    3338:	6e e7       	ldi	r22, 0x7E	; 126
    333a:	7f e0       	ldi	r23, 0x0F	; 15
    333c:	8e e8       	ldi	r24, 0x8E	; 142
    333e:	90 e2       	ldi	r25, 0x20	; 32
    3340:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    3344:	8c a1       	ldd	r24, Y+36	; 0x24
    3346:	88 23       	and	r24, r24
    3348:	c1 f1       	breq	.+112    	; 0x33ba <xTaskPriorityDisinherit+0x9e>
    334a:	81 50       	subi	r24, 0x01	; 1
    334c:	8c a3       	std	Y+36, r24	; 0x24
    334e:	2e 89       	ldd	r18, Y+22	; 0x16
    3350:	9b a1       	ldd	r25, Y+35	; 0x23
    3352:	29 17       	cp	r18, r25
    3354:	11 f0       	breq	.+4      	; 0x335a <xTaskPriorityDisinherit+0x3e>
    3356:	88 23       	and	r24, r24
    3358:	31 f0       	breq	.+12     	; 0x3366 <xTaskPriorityDisinherit+0x4a>
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	df 91       	pop	r29
    335e:	cf 91       	pop	r28
    3360:	1f 91       	pop	r17
    3362:	0f 91       	pop	r16
    3364:	08 95       	ret
    3366:	8e 01       	movw	r16, r28
    3368:	0e 5f       	subi	r16, 0xFE	; 254
    336a:	1f 4f       	sbci	r17, 0xFF	; 255
    336c:	c8 01       	movw	r24, r16
    336e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <uxListRemove>
    3372:	2b a1       	ldd	r18, Y+35	; 0x23
    3374:	2e 8b       	std	Y+22, r18	; 0x16
    3376:	82 2f       	mov	r24, r18
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	4a e0       	ldi	r20, 0x0A	; 10
    337c:	50 e0       	ldi	r21, 0x00	; 0
    337e:	48 1b       	sub	r20, r24
    3380:	59 0b       	sbc	r21, r25
    3382:	4c 87       	std	Y+12, r20	; 0x0c
    3384:	5d 87       	std	Y+13, r21	; 0x0d
    3386:	30 91 95 21 	lds	r19, 0x2195	; 0x802195 <uxTopReadyPriority>
    338a:	32 17       	cp	r19, r18
    338c:	10 f4       	brcc	.+4      	; 0x3392 <xTaskPriorityDisinherit+0x76>
    338e:	20 93 95 21 	sts	0x2195, r18	; 0x802195 <uxTopReadyPriority>
    3392:	9c 01       	movw	r18, r24
    3394:	22 0f       	add	r18, r18
    3396:	33 1f       	adc	r19, r19
    3398:	22 0f       	add	r18, r18
    339a:	33 1f       	adc	r19, r19
    339c:	22 0f       	add	r18, r18
    339e:	33 1f       	adc	r19, r19
    33a0:	82 0f       	add	r24, r18
    33a2:	93 1f       	adc	r25, r19
    33a4:	b8 01       	movw	r22, r16
    33a6:	85 53       	subi	r24, 0x35	; 53
    33a8:	9e 4d       	sbci	r25, 0xDE	; 222
    33aa:	0e 94 56 0a 	call	0x14ac	; 0x14ac <vListInsertEnd>
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	df 91       	pop	r29
    33b2:	cf 91       	pop	r28
    33b4:	1f 91       	pop	r17
    33b6:	0f 91       	pop	r16
    33b8:	08 95       	ret
    33ba:	6f e7       	ldi	r22, 0x7F	; 127
    33bc:	7f e0       	ldi	r23, 0x0F	; 15
    33be:	8e e8       	ldi	r24, 0x8E	; 142
    33c0:	90 e2       	ldi	r25, 0x20	; 32
    33c2:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    33c6:	8c a1       	ldd	r24, Y+36	; 0x24
    33c8:	c0 cf       	rjmp	.-128    	; 0x334a <xTaskPriorityDisinherit+0x2e>

000033ca <vTaskPriorityDisinheritAfterTimeout>:
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	00 97       	sbiw	r24, 0x00	; 0
    33d4:	79 f0       	breq	.+30     	; 0x33f4 <vTaskPriorityDisinheritAfterTimeout+0x2a>
    33d6:	16 2f       	mov	r17, r22
    33d8:	ec 01       	movw	r28, r24
    33da:	8c a1       	ldd	r24, Y+36	; 0x24
    33dc:	88 23       	and	r24, r24
    33de:	09 f4       	brne	.+2      	; 0x33e2 <vTaskPriorityDisinheritAfterTimeout+0x18>
    33e0:	54 c0       	rjmp	.+168    	; 0x348a <vTaskPriorityDisinheritAfterTimeout+0xc0>
    33e2:	0b a1       	ldd	r16, Y+35	; 0x23
    33e4:	01 17       	cp	r16, r17
    33e6:	58 f0       	brcs	.+22     	; 0x33fe <vTaskPriorityDisinheritAfterTimeout+0x34>
    33e8:	8e 89       	ldd	r24, Y+22	; 0x16
    33ea:	80 17       	cp	r24, r16
    33ec:	19 f0       	breq	.+6      	; 0x33f4 <vTaskPriorityDisinheritAfterTimeout+0x2a>
    33ee:	9c a1       	ldd	r25, Y+36	; 0x24
    33f0:	91 30       	cpi	r25, 0x01	; 1
    33f2:	39 f0       	breq	.+14     	; 0x3402 <vTaskPriorityDisinheritAfterTimeout+0x38>
    33f4:	df 91       	pop	r29
    33f6:	cf 91       	pop	r28
    33f8:	1f 91       	pop	r17
    33fa:	0f 91       	pop	r16
    33fc:	08 95       	ret
    33fe:	01 2f       	mov	r16, r17
    3400:	f3 cf       	rjmp	.-26     	; 0x33e8 <vTaskPriorityDisinheritAfterTimeout+0x1e>
    3402:	20 91 25 22 	lds	r18, 0x2225	; 0x802225 <pxCurrentTCB>
    3406:	30 91 26 22 	lds	r19, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    340a:	c2 17       	cp	r28, r18
    340c:	d3 07       	cpc	r29, r19
    340e:	09 f4       	brne	.+2      	; 0x3412 <vTaskPriorityDisinheritAfterTimeout+0x48>
    3410:	43 c0       	rjmp	.+134    	; 0x3498 <vTaskPriorityDisinheritAfterTimeout+0xce>
    3412:	0e 8b       	std	Y+22, r16	; 0x16
    3414:	2c 85       	ldd	r18, Y+12	; 0x0c
    3416:	3d 85       	ldd	r19, Y+13	; 0x0d
    3418:	37 fd       	sbrc	r19, 7
    341a:	06 c0       	rjmp	.+12     	; 0x3428 <vTaskPriorityDisinheritAfterTimeout+0x5e>
    341c:	2a e0       	ldi	r18, 0x0A	; 10
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	20 1b       	sub	r18, r16
    3422:	31 09       	sbc	r19, r1
    3424:	2c 87       	std	Y+12, r18	; 0x0c
    3426:	3d 87       	std	Y+13, r19	; 0x0d
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	9c 01       	movw	r18, r24
    342c:	22 0f       	add	r18, r18
    342e:	33 1f       	adc	r19, r19
    3430:	22 0f       	add	r18, r18
    3432:	33 1f       	adc	r19, r19
    3434:	22 0f       	add	r18, r18
    3436:	33 1f       	adc	r19, r19
    3438:	82 0f       	add	r24, r18
    343a:	93 1f       	adc	r25, r19
    343c:	85 53       	subi	r24, 0x35	; 53
    343e:	9e 4d       	sbci	r25, 0xDE	; 222
    3440:	2a 85       	ldd	r18, Y+10	; 0x0a
    3442:	3b 85       	ldd	r19, Y+11	; 0x0b
    3444:	28 17       	cp	r18, r24
    3446:	39 07       	cpc	r19, r25
    3448:	a9 f6       	brne	.-86     	; 0x33f4 <vTaskPriorityDisinheritAfterTimeout+0x2a>
    344a:	8e 01       	movw	r16, r28
    344c:	0e 5f       	subi	r16, 0xFE	; 254
    344e:	1f 4f       	sbci	r17, 0xFF	; 255
    3450:	c8 01       	movw	r24, r16
    3452:	0e 94 a8 0a 	call	0x1550	; 0x1550 <uxListRemove>
    3456:	8e 89       	ldd	r24, Y+22	; 0x16
    3458:	90 91 95 21 	lds	r25, 0x2195	; 0x802195 <uxTopReadyPriority>
    345c:	98 17       	cp	r25, r24
    345e:	10 f4       	brcc	.+4      	; 0x3464 <vTaskPriorityDisinheritAfterTimeout+0x9a>
    3460:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <uxTopReadyPriority>
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	9c 01       	movw	r18, r24
    3468:	22 0f       	add	r18, r18
    346a:	33 1f       	adc	r19, r19
    346c:	22 0f       	add	r18, r18
    346e:	33 1f       	adc	r19, r19
    3470:	22 0f       	add	r18, r18
    3472:	33 1f       	adc	r19, r19
    3474:	82 0f       	add	r24, r18
    3476:	93 1f       	adc	r25, r19
    3478:	b8 01       	movw	r22, r16
    347a:	85 53       	subi	r24, 0x35	; 53
    347c:	9e 4d       	sbci	r25, 0xDE	; 222
    347e:	df 91       	pop	r29
    3480:	cf 91       	pop	r28
    3482:	1f 91       	pop	r17
    3484:	0f 91       	pop	r16
    3486:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <vListInsertEnd>
    348a:	6d ec       	ldi	r22, 0xCD	; 205
    348c:	7f e0       	ldi	r23, 0x0F	; 15
    348e:	8e e8       	ldi	r24, 0x8E	; 142
    3490:	90 e2       	ldi	r25, 0x20	; 32
    3492:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    3496:	a5 cf       	rjmp	.-182    	; 0x33e2 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3498:	68 ee       	ldi	r22, 0xE8	; 232
    349a:	7f e0       	ldi	r23, 0x0F	; 15
    349c:	8e e8       	ldi	r24, 0x8E	; 142
    349e:	90 e2       	ldi	r25, 0x20	; 32
    34a0:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vAssertCalled>
    34a4:	8e 89       	ldd	r24, Y+22	; 0x16
    34a6:	b5 cf       	rjmp	.-150    	; 0x3412 <vTaskPriorityDisinheritAfterTimeout+0x48>

000034a8 <pvTaskIncrementMutexHeldCount>:

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    34a8:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <pxCurrentTCB>
    34ac:	90 91 26 22 	lds	r25, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    34b0:	89 2b       	or	r24, r25
    34b2:	39 f0       	breq	.+14     	; 0x34c2 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    34b4:	e0 91 25 22 	lds	r30, 0x2225	; 0x802225 <pxCurrentTCB>
    34b8:	f0 91 26 22 	lds	r31, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
    34bc:	84 a1       	ldd	r24, Z+36	; 0x24
    34be:	8f 5f       	subi	r24, 0xFF	; 255
    34c0:	84 a3       	std	Z+36, r24	; 0x24
		}

		return pxCurrentTCB;
    34c2:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <pxCurrentTCB>
    34c6:	90 91 26 22 	lds	r25, 0x2226	; 0x802226 <pxCurrentTCB+0x1>
	}
    34ca:	08 95       	ret

000034cc <vApplicationIdleHook>:
#define SET_ERR_LED() PORTA.OUTSET=1<<7
#define CLR_ERR_LED() PORTA.OUTCLR=1<<7


void vApplicationIdleHook( void )
{
    34cc:	08 95       	ret

000034ce <vApplicationMallocFailedHook>:
	
}

void vApplicationMallocFailedHook(void)
{
	taskDISABLE_INTERRUPTS();
    34ce:	f8 94       	cli
	DbgPrint ("ERROR: memory allocation failed\r\n");
    34d0:	81 ed       	ldi	r24, 0xD1	; 209
    34d2:	90 e2       	ldi	r25, 0x20	; 32
    34d4:	0e 94 0b 03 	call	0x616	; 0x616 <DbgPrint>
	CFG_ERR_LED();
    34d8:	80 e8       	ldi	r24, 0x80	; 128
    34da:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	while (1)
	{
		SET_ERR_LED();
    34de:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    34e2:	2f ef       	ldi	r18, 0xFF	; 255
    34e4:	33 ec       	ldi	r19, 0xC3	; 195
    34e6:	99 e0       	ldi	r25, 0x09	; 9
    34e8:	21 50       	subi	r18, 0x01	; 1
    34ea:	30 40       	sbci	r19, 0x00	; 0
    34ec:	90 40       	sbci	r25, 0x00	; 0
    34ee:	e1 f7       	brne	.-8      	; 0x34e8 <vApplicationMallocFailedHook+0x1a>
    34f0:	00 c0       	rjmp	.+0      	; 0x34f2 <vApplicationMallocFailedHook+0x24>
    34f2:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    34f4:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    34f8:	2f ef       	ldi	r18, 0xFF	; 255
    34fa:	33 ec       	ldi	r19, 0xC3	; 195
    34fc:	99 e0       	ldi	r25, 0x09	; 9
    34fe:	21 50       	subi	r18, 0x01	; 1
    3500:	30 40       	sbci	r19, 0x00	; 0
    3502:	90 40       	sbci	r25, 0x00	; 0
    3504:	e1 f7       	brne	.-8      	; 0x34fe <vApplicationMallocFailedHook+0x30>
    3506:	00 c0       	rjmp	.+0      	; 0x3508 <vApplicationMallocFailedHook+0x3a>
    3508:	00 00       	nop
    350a:	e9 cf       	rjmp	.-46     	; 0x34de <vApplicationMallocFailedHook+0x10>

0000350c <vApplicationStackOverflowHook>:
}



void vApplicationStackOverflowHook( TaskHandle_t xTask,signed char *pcTaskName )
{
    350c:	eb 01       	movw	r28, r22
	taskDISABLE_INTERRUPTS();
    350e:	f8 94       	cli
	CFG_ERR_LED();
    3510:	80 e8       	ldi	r24, 0x80	; 128
    3512:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	DbgPrint("STACK overflow in task ");
    3516:	83 ef       	ldi	r24, 0xF3	; 243
    3518:	90 e2       	ldi	r25, 0x20	; 32
    351a:	0e 94 0b 03 	call	0x616	; 0x616 <DbgPrint>
	DbgPrintn(pcTaskName,10);
    351e:	6a e0       	ldi	r22, 0x0A	; 10
    3520:	70 e0       	ldi	r23, 0x00	; 0
    3522:	ce 01       	movw	r24, r28
    3524:	0e 94 2a 03 	call	0x654	; 0x654 <DbgPrintn>
	DbgPrint("\r\n");
    3528:	8e ec       	ldi	r24, 0xCE	; 206
    352a:	90 e2       	ldi	r25, 0x20	; 32
    352c:	0e 94 0b 03 	call	0x616	; 0x616 <DbgPrint>
	while (1)
	{
		SET_ERR_LED();
    3530:	80 e8       	ldi	r24, 0x80	; 128
    3532:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    3536:	2f ef       	ldi	r18, 0xFF	; 255
    3538:	33 ed       	ldi	r19, 0xD3	; 211
    353a:	90 e3       	ldi	r25, 0x30	; 48
    353c:	21 50       	subi	r18, 0x01	; 1
    353e:	30 40       	sbci	r19, 0x00	; 0
    3540:	90 40       	sbci	r25, 0x00	; 0
    3542:	e1 f7       	brne	.-8      	; 0x353c <vApplicationStackOverflowHook+0x30>
    3544:	00 c0       	rjmp	.+0      	; 0x3546 <vApplicationStackOverflowHook+0x3a>
    3546:	00 00       	nop
		_delay_ms(500);
		CLR_ERR_LED();
    3548:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    354c:	2f ef       	ldi	r18, 0xFF	; 255
    354e:	33 ed       	ldi	r19, 0xD3	; 211
    3550:	90 e3       	ldi	r25, 0x30	; 48
    3552:	21 50       	subi	r18, 0x01	; 1
    3554:	30 40       	sbci	r19, 0x00	; 0
    3556:	90 40       	sbci	r25, 0x00	; 0
    3558:	e1 f7       	brne	.-8      	; 0x3552 <vApplicationStackOverflowHook+0x46>
    355a:	00 c0       	rjmp	.+0      	; 0x355c <vApplicationStackOverflowHook+0x50>
    355c:	00 00       	nop
    355e:	e9 cf       	rjmp	.-46     	; 0x3532 <vApplicationStackOverflowHook+0x26>

00003560 <vAssertCalled>:
		_delay_ms(500);
	}
}

void vAssertCalled( char *File, int Line)
{
    3560:	8c 01       	movw	r16, r24
    3562:	eb 01       	movw	r28, r22
	taskDISABLE_INTERRUPTS();	
    3564:	f8 94       	cli
	CFG_ERR_LED();
    3566:	80 e8       	ldi	r24, 0x80	; 128
    3568:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	DbgPrint("Assert in file ");
    356c:	8b e0       	ldi	r24, 0x0B	; 11
    356e:	91 e2       	ldi	r25, 0x21	; 33
    3570:	0e 94 0b 03 	call	0x616	; 0x616 <DbgPrint>
	DbgPrintn(File,100);
    3574:	64 e6       	ldi	r22, 0x64	; 100
    3576:	70 e0       	ldi	r23, 0x00	; 0
    3578:	c8 01       	movw	r24, r16
    357a:	0e 94 2a 03 	call	0x654	; 0x654 <DbgPrintn>
	DbgPrint(", line nr ");
    357e:	8b e1       	ldi	r24, 0x1B	; 27
    3580:	91 e2       	ldi	r25, 0x21	; 33
    3582:	0e 94 0b 03 	call	0x616	; 0x616 <DbgPrint>
	DbgPrintInt(Line);
    3586:	ce 01       	movw	r24, r28
    3588:	0e 94 4f 03 	call	0x69e	; 0x69e <DbgPrintInt>
	DbgPrint("\r\n");
    358c:	8e ec       	ldi	r24, 0xCE	; 206
    358e:	90 e2       	ldi	r25, 0x20	; 32
    3590:	0e 94 0b 03 	call	0x616	; 0x616 <DbgPrint>

	while (1)
	{
		SET_ERR_LED();
    3594:	80 e8       	ldi	r24, 0x80	; 128
    3596:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    359a:	2f ef       	ldi	r18, 0xFF	; 255
    359c:	33 ec       	ldi	r19, 0xC3	; 195
    359e:	99 e0       	ldi	r25, 0x09	; 9
    35a0:	21 50       	subi	r18, 0x01	; 1
    35a2:	30 40       	sbci	r19, 0x00	; 0
    35a4:	90 40       	sbci	r25, 0x00	; 0
    35a6:	e1 f7       	brne	.-8      	; 0x35a0 <vAssertCalled+0x40>
    35a8:	00 c0       	rjmp	.+0      	; 0x35aa <vAssertCalled+0x4a>
    35aa:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    35ac:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    35b0:	2f ef       	ldi	r18, 0xFF	; 255
    35b2:	33 ed       	ldi	r19, 0xD3	; 211
    35b4:	90 e3       	ldi	r25, 0x30	; 48
    35b6:	21 50       	subi	r18, 0x01	; 1
    35b8:	30 40       	sbci	r19, 0x00	; 0
    35ba:	90 40       	sbci	r25, 0x00	; 0
    35bc:	e1 f7       	brne	.-8      	; 0x35b6 <vAssertCalled+0x56>
    35be:	00 c0       	rjmp	.+0      	; 0x35c0 <vAssertCalled+0x60>
    35c0:	00 00       	nop
    35c2:	e9 cf       	rjmp	.-46     	; 0x3596 <vAssertCalled+0x36>

000035c4 <main>:

uint8_t *ucHeap;

int main(void)
{
	DriverSysClkXtalInit();	//Clock init
    35c4:	0e 94 d6 06 	call	0xdac	; 0xdac <DriverSysClkXtalInit>
	//Allocate FreeRTOS heap
	ucHeap=malloc(configTOTAL_HEAP_SIZE);
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	90 e4       	ldi	r25, 0x40	; 64
    35cc:	0e 94 68 28 	call	0x50d0	; 0x50d0 <malloc>
    35d0:	80 93 5d 22 	sts	0x225D, r24	; 0x80225d <ucHeap>
    35d4:	90 93 5e 22 	sts	0x225E, r25	; 0x80225e <ucHeap+0x1>
	if (ucHeap==NULL) while(1);
    35d8:	89 2b       	or	r24, r25
    35da:	59 f0       	breq	.+22     	; 0x35f2 <main+0x2e>
	
	//Enable interrupts
	PMIC.CTRL = 0b111;
    35dc:	87 e0       	ldi	r24, 0x07	; 7
    35de:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    35e2:	78 94       	sei
	


	
	//Init startup task
	InitStartupTask();
    35e4:	0e 94 3f 22 	call	0x447e	; 0x447e <InitStartupTask>
	
	//Start scheduler loop
	vTaskStartScheduler();	
    35e8:	0e 94 09 16 	call	0x2c12	; 0x2c12 <vTaskStartScheduler>

	return 0;
}
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	08 95       	ret
    35f2:	ff cf       	rjmp	.-2      	; 0x35f2 <main+0x2e>

000035f4 <WorkerADC>:
	ADCQueue=xQueueCreate(1,sizeof(ADCStruct));
	xTaskCreate( WorkerADC, "ADC", 512, NULL, tskIDLE_PRIORITY+2, NULL );
}

void WorkerADC(void *pvParameters)
{
    35f4:	cf 93       	push	r28
    35f6:	df 93       	push	r29
    35f8:	cd b7       	in	r28, 0x3d	; 61
    35fa:	de b7       	in	r29, 0x3e	; 62
    35fc:	2a 97       	sbiw	r28, 0x0a	; 10
    35fe:	cd bf       	out	0x3d, r28	; 61
    3600:	de bf       	out	0x3e, r29	; 62
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 10;
	ADCStruct ADCData;
	
	DriverLedSet(0b0111);
    3602:	87 e0       	ldi	r24, 0x07	; 7
    3604:	0e 94 bb 03 	call	0x776	; 0x776 <DriverLedSet>
	
	xLastWakeTime=xTaskGetTickCount();
    3608:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <xTaskGetTickCount>
    360c:	89 87       	std	Y+9, r24	; 0x09
    360e:	9a 87       	std	Y+10, r25	; 0x0a
	while(1)
	{
		ADCData.PhotoL=DriverAdcGetCh(0,4);
    3610:	64 e0       	ldi	r22, 0x04	; 4
    3612:	80 e0       	ldi	r24, 0x00	; 0
    3614:	0e 94 df 01 	call	0x3be	; 0x3be <DriverAdcGetCh>
    3618:	89 83       	std	Y+1, r24	; 0x01
    361a:	9a 83       	std	Y+2, r25	; 0x02
		ADCData.PhotoM=DriverAdcGetCh(1,4);
    361c:	64 e0       	ldi	r22, 0x04	; 4
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	0e 94 df 01 	call	0x3be	; 0x3be <DriverAdcGetCh>
    3624:	8b 83       	std	Y+3, r24	; 0x03
    3626:	9c 83       	std	Y+4, r25	; 0x04
		ADCData.PhotoR=DriverAdcGetCh(2,4);
    3628:	64 e0       	ldi	r22, 0x04	; 4
    362a:	82 e0       	ldi	r24, 0x02	; 2
    362c:	0e 94 df 01 	call	0x3be	; 0x3be <DriverAdcGetCh>
    3630:	8d 83       	std	Y+5, r24	; 0x05
    3632:	9e 83       	std	Y+6, r25	; 0x06
		ADCData.Potmeter=DriverAdcGetCh(3,4);
    3634:	64 e0       	ldi	r22, 0x04	; 4
    3636:	83 e0       	ldi	r24, 0x03	; 3
    3638:	0e 94 df 01 	call	0x3be	; 0x3be <DriverAdcGetCh>
    363c:	8f 83       	std	Y+7, r24	; 0x07
    363e:	98 87       	std	Y+8, r25	; 0x08
		xQueueOverwrite(ADCQueue,&ADCData);
    3640:	22 e0       	ldi	r18, 0x02	; 2
    3642:	40 e0       	ldi	r20, 0x00	; 0
    3644:	50 e0       	ldi	r21, 0x00	; 0
    3646:	be 01       	movw	r22, r28
    3648:	6f 5f       	subi	r22, 0xFF	; 255
    364a:	7f 4f       	sbci	r23, 0xFF	; 255
    364c:	80 91 5f 22 	lds	r24, 0x225F	; 0x80225f <ADCQueue>
    3650:	90 91 60 22 	lds	r25, 0x2260	; 0x802260 <ADCQueue+0x1>
    3654:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <xQueueGenericSend>
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
    3658:	6a e0       	ldi	r22, 0x0A	; 10
    365a:	70 e0       	ldi	r23, 0x00	; 0
    365c:	ce 01       	movw	r24, r28
    365e:	09 96       	adiw	r24, 0x09	; 9
    3660:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <vTaskDelayUntil>
    3664:	d5 cf       	rjmp	.-86     	; 0x3610 <WorkerADC+0x1c>

00003666 <InitADCTask>:

void WorkerADC(void *pvParameters);

//Function definitions
void InitADCTask()
{
    3666:	ef 92       	push	r14
    3668:	ff 92       	push	r15
    366a:	0f 93       	push	r16
	ADCQueue=xQueueCreate(1,sizeof(ADCStruct));
    366c:	40 e0       	ldi	r20, 0x00	; 0
    366e:	68 e0       	ldi	r22, 0x08	; 8
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <xQueueGenericCreate>
    3676:	80 93 5f 22 	sts	0x225F, r24	; 0x80225f <ADCQueue>
    367a:	90 93 60 22 	sts	0x2260, r25	; 0x802260 <ADCQueue+0x1>
	xTaskCreate( WorkerADC, "ADC", 512, NULL, tskIDLE_PRIORITY+2, NULL );
    367e:	e1 2c       	mov	r14, r1
    3680:	f1 2c       	mov	r15, r1
    3682:	02 e0       	ldi	r16, 0x02	; 2
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	40 e0       	ldi	r20, 0x00	; 0
    368a:	52 e0       	ldi	r21, 0x02	; 2
    368c:	66 e2       	ldi	r22, 0x26	; 38
    368e:	71 e2       	ldi	r23, 0x21	; 33
    3690:	8a ef       	ldi	r24, 0xFA	; 250
    3692:	9a e1       	ldi	r25, 0x1A	; 26
    3694:	0e 94 06 14 	call	0x280c	; 0x280c <xTaskCreate>
}
    3698:	0f 91       	pop	r16
    369a:	ff 90       	pop	r15
    369c:	ef 90       	pop	r14
    369e:	08 95       	ret

000036a0 <GetADCData>:
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
	}
}

ADCStruct GetADCData(void)
{
    36a0:	cf 93       	push	r28
    36a2:	df 93       	push	r29
    36a4:	cd b7       	in	r28, 0x3d	; 61
    36a6:	de b7       	in	r29, 0x3e	; 62
    36a8:	60 97       	sbiw	r28, 0x10	; 16
    36aa:	cd bf       	out	0x3d, r28	; 61
    36ac:	de bf       	out	0x3e, r29	; 62
	ADCStruct ADCData;
	xQueuePeek(ADCQueue,&ADCData,portMAX_DELAY);
    36ae:	4f ef       	ldi	r20, 0xFF	; 255
    36b0:	5f ef       	ldi	r21, 0xFF	; 255
    36b2:	be 01       	movw	r22, r28
    36b4:	67 5f       	subi	r22, 0xF7	; 247
    36b6:	7f 4f       	sbci	r23, 0xFF	; 255
    36b8:	80 91 5f 22 	lds	r24, 0x225F	; 0x80225f <ADCQueue>
    36bc:	90 91 60 22 	lds	r25, 0x2260	; 0x802260 <ADCQueue+0x1>
    36c0:	0e 94 6d 11 	call	0x22da	; 0x22da <xQueuePeek>
	return ADCData;
    36c4:	88 e0       	ldi	r24, 0x08	; 8
    36c6:	fe 01       	movw	r30, r28
    36c8:	39 96       	adiw	r30, 0x09	; 9
    36ca:	de 01       	movw	r26, r28
    36cc:	11 96       	adiw	r26, 0x01	; 1
    36ce:	01 90       	ld	r0, Z+
    36d0:	0d 92       	st	X+, r0
    36d2:	8a 95       	dec	r24
    36d4:	e1 f7       	brne	.-8      	; 0x36ce <GetADCData+0x2e>
    36d6:	29 81       	ldd	r18, Y+1	; 0x01
    36d8:	3a 81       	ldd	r19, Y+2	; 0x02
    36da:	4b 81       	ldd	r20, Y+3	; 0x03
    36dc:	5c 81       	ldd	r21, Y+4	; 0x04
    36de:	6d 81       	ldd	r22, Y+5	; 0x05
    36e0:	7e 81       	ldd	r23, Y+6	; 0x06
    36e2:	8f 81       	ldd	r24, Y+7	; 0x07
    36e4:	98 85       	ldd	r25, Y+8	; 0x08
    36e6:	60 96       	adiw	r28, 0x10	; 16
    36e8:	cd bf       	out	0x3d, r28	; 61
    36ea:	de bf       	out	0x3e, r29	; 62
    36ec:	df 91       	pop	r29
    36ee:	cf 91       	pop	r28
    36f0:	08 95       	ret

000036f2 <WorkerLineFollowerDirect>:
{
	vTaskSuspend(LineFollowerDirectTaskHandle);
}

static void WorkerLineFollowerDirect(void *pvParameters)
{
    36f2:	cf 93       	push	r28
    36f4:	df 93       	push	r29
    36f6:	cd b7       	in	r28, 0x3d	; 61
    36f8:	de b7       	in	r29, 0x3e	; 62
    36fa:	2a 97       	sbiw	r28, 0x0a	; 10
    36fc:	cd bf       	out	0x3d, r28	; 61
    36fe:	de bf       	out	0x3e, r29	; 62
    3700:	1b c0       	rjmp	.+54     	; 0x3738 <WorkerLineFollowerDirect+0x46>
    3702:	c5 01       	movw	r24, r10
    3704:	b4 01       	movw	r22, r8
    3706:	0e 94 37 23 	call	0x466e	; 0x466e <__fixsfsi>
    370a:	8b 01       	movw	r16, r22
		//printf_P("Diff:%f\r\n",Diff);
		OutL=Speed+(Diff*LineFollowKp);
		OutR=Speed-(Diff*LineFollowKp);
		
		if (OutL<0) OutL=0;
		if (OutR<0) OutR=0;
    370c:	20 e0       	ldi	r18, 0x00	; 0
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	a9 01       	movw	r20, r18
    3712:	c7 01       	movw	r24, r14
    3714:	b6 01       	movw	r22, r12
    3716:	0e 94 c0 22 	call	0x4580	; 0x4580 <__cmpsf2>
    371a:	87 fd       	sbrc	r24, 7
    371c:	49 c0       	rjmp	.+146    	; 0x37b0 <WorkerLineFollowerDirect+0xbe>
    371e:	c7 01       	movw	r24, r14
    3720:	b6 01       	movw	r22, r12
    3722:	0e 94 37 23 	call	0x466e	; 0x466e <__fixsfsi>
		DriverMotorSet((int16_t) OutL, (int16_t) OutR);
    3726:	c8 01       	movw	r24, r16
    3728:	0e 94 0c 04 	call	0x818	; 0x818 <DriverMotorSet>
			

		vTaskDelayUntil( &xLastWakeTime, xPeriod );
    372c:	6a e0       	ldi	r22, 0x0A	; 10
    372e:	70 e0       	ldi	r23, 0x00	; 0
    3730:	ce 01       	movw	r24, r28
    3732:	09 96       	adiw	r24, 0x09	; 9
    3734:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <vTaskDelayUntil>
	ADCStruct ADCData;

	
	while(1)
	{
		xLastWakeTime=xTaskGetTickCount();
    3738:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <xTaskGetTickCount>
    373c:	89 87       	std	Y+9, r24	; 0x09
    373e:	9a 87       	std	Y+10, r25	; 0x0a

		ADCData=GetADCData();
    3740:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <GetADCData>
    3744:	29 83       	std	Y+1, r18	; 0x01
    3746:	3a 83       	std	Y+2, r19	; 0x02
    3748:	6d 83       	std	Y+5, r22	; 0x05
    374a:	7e 83       	std	Y+6, r23	; 0x06
		Diff=(float) (ADCData.PhotoL-ADCData.PhotoR+SensorOffset);
		//printf_P("Diff:%f\r\n",Diff);
		OutL=Speed+(Diff*LineFollowKp);
    374c:	69 81       	ldd	r22, Y+1	; 0x01
    374e:	7a 81       	ldd	r23, Y+2	; 0x02
    3750:	8d 81       	ldd	r24, Y+5	; 0x05
    3752:	9e 81       	ldd	r25, Y+6	; 0x06
    3754:	68 1b       	sub	r22, r24
    3756:	79 0b       	sbc	r23, r25
    3758:	07 2e       	mov	r0, r23
    375a:	00 0c       	add	r0, r0
    375c:	88 0b       	sbc	r24, r24
    375e:	99 0b       	sbc	r25, r25
    3760:	0e 94 6f 23 	call	0x46de	; 0x46de <__floatsisf>
    3764:	2d ec       	ldi	r18, 0xCD	; 205
    3766:	3c ec       	ldi	r19, 0xCC	; 204
    3768:	4c e4       	ldi	r20, 0x4C	; 76
    376a:	5e e3       	ldi	r21, 0x3E	; 62
    376c:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsf3>
    3770:	6b 01       	movw	r12, r22
    3772:	7c 01       	movw	r14, r24
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	48 e4       	ldi	r20, 0x48	; 72
    377a:	55 e4       	ldi	r21, 0x45	; 69
    377c:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__addsf3>
    3780:	4b 01       	movw	r8, r22
    3782:	5c 01       	movw	r10, r24
		OutR=Speed-(Diff*LineFollowKp);
    3784:	a7 01       	movw	r20, r14
    3786:	96 01       	movw	r18, r12
    3788:	60 e0       	ldi	r22, 0x00	; 0
    378a:	70 e0       	ldi	r23, 0x00	; 0
    378c:	88 e4       	ldi	r24, 0x48	; 72
    378e:	95 e4       	ldi	r25, 0x45	; 69
    3790:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__subsf3>
    3794:	6b 01       	movw	r12, r22
    3796:	7c 01       	movw	r14, r24
		
		if (OutL<0) OutL=0;
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	a9 01       	movw	r20, r18
    379e:	c5 01       	movw	r24, r10
    37a0:	b4 01       	movw	r22, r8
    37a2:	0e 94 c0 22 	call	0x4580	; 0x4580 <__cmpsf2>
    37a6:	87 ff       	sbrs	r24, 7
    37a8:	ac cf       	rjmp	.-168    	; 0x3702 <WorkerLineFollowerDirect+0x10>
    37aa:	00 e0       	ldi	r16, 0x00	; 0
    37ac:	10 e0       	ldi	r17, 0x00	; 0
    37ae:	ae cf       	rjmp	.-164    	; 0x370c <WorkerLineFollowerDirect+0x1a>
    37b0:	60 e0       	ldi	r22, 0x00	; 0
    37b2:	70 e0       	ldi	r23, 0x00	; 0
    37b4:	b8 cf       	rjmp	.-144    	; 0x3726 <WorkerLineFollowerDirect+0x34>

000037b6 <InitLineFollowerDirectTask>:
//Private function prototypes
static void WorkerLineFollowerDirect(void *pvParameters);

//Function definitions
void InitLineFollowerDirectTask()
{
    37b6:	ef 92       	push	r14
    37b8:	ff 92       	push	r15
    37ba:	0f 93       	push	r16
	xTaskCreate( WorkerLineFollowerDirect, "LFdirect", 256, NULL, tskIDLE_PRIORITY+3, &LineFollowerDirectTaskHandle );	
    37bc:	87 e2       	ldi	r24, 0x27	; 39
    37be:	e8 2e       	mov	r14, r24
    37c0:	82 e2       	ldi	r24, 0x22	; 34
    37c2:	f8 2e       	mov	r15, r24
    37c4:	03 e0       	ldi	r16, 0x03	; 3
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	40 e0       	ldi	r20, 0x00	; 0
    37cc:	51 e0       	ldi	r21, 0x01	; 1
    37ce:	6a e2       	ldi	r22, 0x2A	; 42
    37d0:	71 e2       	ldi	r23, 0x21	; 33
    37d2:	89 e7       	ldi	r24, 0x79	; 121
    37d4:	9b e1       	ldi	r25, 0x1B	; 27
    37d6:	0e 94 06 14 	call	0x280c	; 0x280c <xTaskCreate>
}
    37da:	0f 91       	pop	r16
    37dc:	ff 90       	pop	r15
    37de:	ef 90       	pop	r14
    37e0:	08 95       	ret

000037e2 <WorkerLineFollowerSpeed>:
	StopSema=xSemaphoreCreateBinary();
	xTaskCreate( WorkerLineFollowerSpeed, "LFSpeed", 512, NULL, tskIDLE_PRIORITY+2, NULL );
}

void WorkerLineFollowerSpeed(void *pvParameters)
{
    37e2:	cf 93       	push	r28
    37e4:	df 93       	push	r29
    37e6:	cd b7       	in	r28, 0x3d	; 61
    37e8:	de b7       	in	r29, 0x3e	; 62
    37ea:	2a 97       	sbiw	r28, 0x0a	; 10
    37ec:	cd bf       	out	0x3d, r28	; 61
    37ee:	de bf       	out	0x3e, r29	; 62
	float OutL,OutR;
	ADCStruct ADCData;
	
	while(1)
	{
		xSemaphoreTake(StartSema,portMAX_DELAY);
    37f0:	6f ef       	ldi	r22, 0xFF	; 255
    37f2:	7f ef       	ldi	r23, 0xFF	; 255
    37f4:	80 91 2b 22 	lds	r24, 0x222B	; 0x80222b <StartSema>
    37f8:	90 91 2c 22 	lds	r25, 0x222C	; 0x80222c <StartSema+0x1>
    37fc:	0e 94 73 10 	call	0x20e6	; 0x20e6 <xQueueSemaphoreTake>
		Speed=ReqSpeed;
    3800:	80 91 31 22 	lds	r24, 0x2231	; 0x802231 <ReqSpeed>
    3804:	90 91 32 22 	lds	r25, 0x2232	; 0x802232 <ReqSpeed+0x1>
    3808:	a0 91 33 22 	lds	r26, 0x2233	; 0x802233 <ReqSpeed+0x2>
    380c:	b0 91 34 22 	lds	r27, 0x2234	; 0x802234 <ReqSpeed+0x3>
    3810:	80 93 2d 22 	sts	0x222D, r24	; 0x80222d <Speed>
    3814:	90 93 2e 22 	sts	0x222E, r25	; 0x80222e <Speed+0x1>
    3818:	a0 93 2f 22 	sts	0x222F, r26	; 0x80222f <Speed+0x2>
    381c:	b0 93 30 22 	sts	0x2230, r27	; 0x802230 <Speed+0x3>
		xLastWakeTime=xTaskGetTickCount();
    3820:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <xTaskGetTickCount>
    3824:	89 87       	std	Y+9, r24	; 0x09
    3826:	9a 87       	std	Y+10, r25	; 0x0a
    3828:	18 c0       	rjmp	.+48     	; 0x385a <WorkerLineFollowerSpeed+0x78>
    382a:	c5 01       	movw	r24, r10
    382c:	b4 01       	movw	r22, r8
    382e:	0e 94 37 23 	call	0x466e	; 0x466e <__fixsfsi>
			//printf ("Diff:%f\r\n",Diff);
			OutL=Speed+(Diff*(float) (LINEFOLLOW_SPEED_KP));
			OutR=Speed-(Diff*(float) (LINEFOLLOW_SPEED_KP));
			if (OutL<0) OutL=0;
			if (OutR<0) OutR=0;
			MotorSpeedSet((int16_t) OutL, (int16_t) OutR);	
    3832:	c7 01       	movw	r24, r14
    3834:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <MotorSpeedSet>
			
			if (xSemaphoreTake(StopSema,0)==pdPASS)
    3838:	60 e0       	ldi	r22, 0x00	; 0
    383a:	70 e0       	ldi	r23, 0x00	; 0
    383c:	80 91 29 22 	lds	r24, 0x2229	; 0x802229 <StopSema>
    3840:	90 91 2a 22 	lds	r25, 0x222A	; 0x80222a <StopSema+0x1>
    3844:	0e 94 73 10 	call	0x20e6	; 0x20e6 <xQueueSemaphoreTake>
    3848:	81 30       	cpi	r24, 0x01	; 1
    384a:	09 f4       	brne	.+2      	; 0x384e <WorkerLineFollowerSpeed+0x6c>
    384c:	55 c0       	rjmp	.+170    	; 0x38f8 <WorkerLineFollowerSpeed+0x116>
			{
				MotorSpeedSet(0,0);	
				break;
			}
			vTaskDelayUntil( &xLastWakeTime, xPeriod );
    384e:	6a e0       	ldi	r22, 0x0A	; 10
    3850:	70 e0       	ldi	r23, 0x00	; 0
    3852:	ce 01       	movw	r24, r28
    3854:	09 96       	adiw	r24, 0x09	; 9
    3856:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <vTaskDelayUntil>
		Speed=ReqSpeed;
		xLastWakeTime=xTaskGetTickCount();
		while (1)
		{
			
			ADCData=GetADCData();
    385a:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <GetADCData>
    385e:	29 83       	std	Y+1, r18	; 0x01
    3860:	3a 83       	std	Y+2, r19	; 0x02
    3862:	6d 83       	std	Y+5, r22	; 0x05
    3864:	7e 83       	std	Y+6, r23	; 0x06
			Diff=(float) (ADCData.PhotoL-ADCData.PhotoR+SensorOffset);
			//printf ("Diff:%f\r\n",Diff);
			OutL=Speed+(Diff*(float) (LINEFOLLOW_SPEED_KP));
    3866:	69 81       	ldd	r22, Y+1	; 0x01
    3868:	7a 81       	ldd	r23, Y+2	; 0x02
    386a:	8d 81       	ldd	r24, Y+5	; 0x05
    386c:	9e 81       	ldd	r25, Y+6	; 0x06
    386e:	68 1b       	sub	r22, r24
    3870:	79 0b       	sbc	r23, r25
    3872:	64 56       	subi	r22, 0x64	; 100
    3874:	71 09       	sbc	r23, r1
    3876:	07 2e       	mov	r0, r23
    3878:	00 0c       	add	r0, r0
    387a:	88 0b       	sbc	r24, r24
    387c:	99 0b       	sbc	r25, r25
    387e:	0e 94 6f 23 	call	0x46de	; 0x46de <__floatsisf>
    3882:	2d ec       	ldi	r18, 0xCD	; 205
    3884:	3c ec       	ldi	r19, 0xCC	; 204
    3886:	4c ec       	ldi	r20, 0xCC	; 204
    3888:	5d e3       	ldi	r21, 0x3D	; 61
    388a:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsf3>
    388e:	4b 01       	movw	r8, r22
    3890:	5c 01       	movw	r10, r24
    3892:	c0 90 2d 22 	lds	r12, 0x222D	; 0x80222d <Speed>
    3896:	d0 90 2e 22 	lds	r13, 0x222E	; 0x80222e <Speed+0x1>
    389a:	e0 90 2f 22 	lds	r14, 0x222F	; 0x80222f <Speed+0x2>
    389e:	f0 90 30 22 	lds	r15, 0x2230	; 0x802230 <Speed+0x3>
    38a2:	a7 01       	movw	r20, r14
    38a4:	96 01       	movw	r18, r12
    38a6:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__addsf3>
    38aa:	2b 01       	movw	r4, r22
    38ac:	3c 01       	movw	r6, r24
			OutR=Speed-(Diff*(float) (LINEFOLLOW_SPEED_KP));
    38ae:	a5 01       	movw	r20, r10
    38b0:	94 01       	movw	r18, r8
    38b2:	c7 01       	movw	r24, r14
    38b4:	b6 01       	movw	r22, r12
    38b6:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__subsf3>
    38ba:	4b 01       	movw	r8, r22
    38bc:	5c 01       	movw	r10, r24
			if (OutL<0) OutL=0;
    38be:	20 e0       	ldi	r18, 0x00	; 0
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	a9 01       	movw	r20, r18
    38c4:	c3 01       	movw	r24, r6
    38c6:	b2 01       	movw	r22, r4
    38c8:	0e 94 c0 22 	call	0x4580	; 0x4580 <__cmpsf2>
    38cc:	87 ff       	sbrs	r24, 7
    38ce:	0e c0       	rjmp	.+28     	; 0x38ec <WorkerLineFollowerSpeed+0x10a>
    38d0:	e1 2c       	mov	r14, r1
    38d2:	f1 2c       	mov	r15, r1
			if (OutR<0) OutR=0;
    38d4:	20 e0       	ldi	r18, 0x00	; 0
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	a9 01       	movw	r20, r18
    38da:	c5 01       	movw	r24, r10
    38dc:	b4 01       	movw	r22, r8
    38de:	0e 94 c0 22 	call	0x4580	; 0x4580 <__cmpsf2>
    38e2:	87 ff       	sbrs	r24, 7
    38e4:	a2 cf       	rjmp	.-188    	; 0x382a <WorkerLineFollowerSpeed+0x48>
    38e6:	60 e0       	ldi	r22, 0x00	; 0
    38e8:	70 e0       	ldi	r23, 0x00	; 0
    38ea:	a3 cf       	rjmp	.-186    	; 0x3832 <WorkerLineFollowerSpeed+0x50>
    38ec:	c3 01       	movw	r24, r6
    38ee:	b2 01       	movw	r22, r4
    38f0:	0e 94 37 23 	call	0x466e	; 0x466e <__fixsfsi>
    38f4:	7b 01       	movw	r14, r22
    38f6:	ee cf       	rjmp	.-36     	; 0x38d4 <WorkerLineFollowerSpeed+0xf2>
			MotorSpeedSet((int16_t) OutL, (int16_t) OutR);	
			
			if (xSemaphoreTake(StopSema,0)==pdPASS)
			{
				MotorSpeedSet(0,0);	
    38f8:	60 e0       	ldi	r22, 0x00	; 0
    38fa:	70 e0       	ldi	r23, 0x00	; 0
    38fc:	80 e0       	ldi	r24, 0x00	; 0
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <MotorSpeedSet>
			vTaskDelayUntil( &xLastWakeTime, xPeriod );
		}

		
		
	}
    3904:	75 cf       	rjmp	.-278    	; 0x37f0 <WorkerLineFollowerSpeed+0xe>

00003906 <InitLineFollowerSpeedTask>:
void WorkerLineFollowerSpeed(void *pvParameters);


//Function definitions
void InitLineFollowerSpeedTask()
{
    3906:	ef 92       	push	r14
    3908:	ff 92       	push	r15
    390a:	0f 93       	push	r16
	StartSema=xSemaphoreCreateBinary();
    390c:	43 e0       	ldi	r20, 0x03	; 3
    390e:	60 e0       	ldi	r22, 0x00	; 0
    3910:	81 e0       	ldi	r24, 0x01	; 1
    3912:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <xQueueGenericCreate>
    3916:	80 93 2b 22 	sts	0x222B, r24	; 0x80222b <StartSema>
    391a:	90 93 2c 22 	sts	0x222C, r25	; 0x80222c <StartSema+0x1>
	StopSema=xSemaphoreCreateBinary();
    391e:	43 e0       	ldi	r20, 0x03	; 3
    3920:	60 e0       	ldi	r22, 0x00	; 0
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <xQueueGenericCreate>
    3928:	80 93 29 22 	sts	0x2229, r24	; 0x802229 <StopSema>
    392c:	90 93 2a 22 	sts	0x222A, r25	; 0x80222a <StopSema+0x1>
	xTaskCreate( WorkerLineFollowerSpeed, "LFSpeed", 512, NULL, tskIDLE_PRIORITY+2, NULL );
    3930:	e1 2c       	mov	r14, r1
    3932:	f1 2c       	mov	r15, r1
    3934:	02 e0       	ldi	r16, 0x02	; 2
    3936:	20 e0       	ldi	r18, 0x00	; 0
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	40 e0       	ldi	r20, 0x00	; 0
    393c:	52 e0       	ldi	r21, 0x02	; 2
    393e:	63 e3       	ldi	r22, 0x33	; 51
    3940:	71 e2       	ldi	r23, 0x21	; 33
    3942:	81 ef       	ldi	r24, 0xF1	; 241
    3944:	9b e1       	ldi	r25, 0x1B	; 27
    3946:	0e 94 06 14 	call	0x280c	; 0x280c <xTaskCreate>
}
    394a:	0f 91       	pop	r16
    394c:	ff 90       	pop	r15
    394e:	ef 90       	pop	r14
    3950:	08 95       	ret

00003952 <StartLineFollower>:
	}
}

void StartLineFollower(float Speed)
{
	ReqSpeed=Speed;
    3952:	60 93 31 22 	sts	0x2231, r22	; 0x802231 <ReqSpeed>
    3956:	70 93 32 22 	sts	0x2232, r23	; 0x802232 <ReqSpeed+0x1>
    395a:	80 93 33 22 	sts	0x2233, r24	; 0x802233 <ReqSpeed+0x2>
    395e:	90 93 34 22 	sts	0x2234, r25	; 0x802234 <ReqSpeed+0x3>
	xSemaphoreGive(StartSema);
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	40 e0       	ldi	r20, 0x00	; 0
    3966:	50 e0       	ldi	r21, 0x00	; 0
    3968:	60 e0       	ldi	r22, 0x00	; 0
    396a:	70 e0       	ldi	r23, 0x00	; 0
    396c:	80 91 2b 22 	lds	r24, 0x222B	; 0x80222b <StartSema>
    3970:	90 91 2c 22 	lds	r25, 0x222C	; 0x80222c <StartSema+0x1>
    3974:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <xQueueGenericSend>

00003978 <StopLineFollower>:
	
}
void StopLineFollower()
{
	xSemaphoreGive(StopSema);
    3978:	20 e0       	ldi	r18, 0x00	; 0
    397a:	40 e0       	ldi	r20, 0x00	; 0
    397c:	50 e0       	ldi	r21, 0x00	; 0
    397e:	60 e0       	ldi	r22, 0x00	; 0
    3980:	70 e0       	ldi	r23, 0x00	; 0
    3982:	80 91 29 22 	lds	r24, 0x2229	; 0x802229 <StopSema>
    3986:	90 91 2a 22 	lds	r25, 0x222A	; 0x80222a <StopSema+0x1>
    398a:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <xQueueGenericSend>

0000398e <WorkerMotion>:
	MotionCmd.Cmd=CMD_DRIVE_STRAIGHT;
	MotionCmd.Params[0]=Distance;
	MotionCmd.Params[1]=Speed;
	xQueueSendToBack(CmdQueue,&MotionCmd,portMAX_DELAY);	//Issue command
	xSemaphoreTake(CmdCompleteSema,portMAX_DELAY);			//Block until command has been executed
}
    398e:	cf 93       	push	r28
    3990:	df 93       	push	r29
    3992:	cd b7       	in	r28, 0x3d	; 61
    3994:	de b7       	in	r29, 0x3e	; 62
    3996:	67 97       	sbiw	r28, 0x17	; 23
    3998:	cd bf       	out	0x3d, r28	; 61
    399a:	de bf       	out	0x3e, r29	; 62
    399c:	0f c0       	rjmp	.+30     	; 0x39bc <WorkerMotion+0x2e>
    399e:	82 30       	cpi	r24, 0x02	; 2
    39a0:	09 f4       	brne	.+2      	; 0x39a4 <WorkerMotion+0x16>
    39a2:	ae c0       	rjmp	.+348    	; 0x3b00 <WorkerMotion+0x172>
    39a4:	83 30       	cpi	r24, 0x03	; 3
    39a6:	09 f4       	brne	.+2      	; 0x39aa <WorkerMotion+0x1c>
    39a8:	fa c0       	rjmp	.+500    	; 0x3b9e <WorkerMotion+0x210>
    39aa:	80 91 37 22 	lds	r24, 0x2237	; 0x802237 <CmdQueue>
    39ae:	90 91 38 22 	lds	r25, 0x2238	; 0x802238 <CmdQueue+0x1>
    39b2:	0e 94 75 12 	call	0x24ea	; 0x24ea <uxQueueMessagesWaiting>
    39b6:	88 23       	and	r24, r24
    39b8:	09 f4       	brne	.+2      	; 0x39bc <WorkerMotion+0x2e>
    39ba:	96 c0       	rjmp	.+300    	; 0x3ae8 <WorkerMotion+0x15a>
    39bc:	4f ef       	ldi	r20, 0xFF	; 255
    39be:	5f ef       	ldi	r21, 0xFF	; 255
    39c0:	be 01       	movw	r22, r28
    39c2:	6f 5f       	subi	r22, 0xFF	; 255
    39c4:	7f 4f       	sbci	r23, 0xFF	; 255
    39c6:	80 91 37 22 	lds	r24, 0x2237	; 0x802237 <CmdQueue>
    39ca:	90 91 38 22 	lds	r25, 0x2238	; 0x802238 <CmdQueue+0x1>
    39ce:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <xQueueReceive>
    39d2:	89 81       	ldd	r24, Y+1	; 0x01
    39d4:	81 30       	cpi	r24, 0x01	; 1
    39d6:	19 f7       	brne	.-58     	; 0x399e <WorkerMotion+0x10>
    39d8:	4e 80       	ldd	r4, Y+6	; 0x06
    39da:	5f 80       	ldd	r5, Y+7	; 0x07
    39dc:	68 84       	ldd	r6, Y+8	; 0x08
    39de:	79 84       	ldd	r7, Y+9	; 0x09
    39e0:	8a 80       	ldd	r8, Y+2	; 0x02
    39e2:	9b 80       	ldd	r9, Y+3	; 0x03
    39e4:	ac 80       	ldd	r10, Y+4	; 0x04
    39e6:	bd 80       	ldd	r11, Y+5	; 0x05
    39e8:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <xTaskGetTickCount>
    39ec:	8a 87       	std	Y+10, r24	; 0x0a
    39ee:	9b 87       	std	Y+11, r25	; 0x0b
    39f0:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <EnableMotorPosTask>
    39f4:	0e 94 49 21 	call	0x4292	; 0x4292 <EnableMotorSpeedTask>
    39f8:	0e 94 77 04 	call	0x8ee	; 0x8ee <DriverMotorGetEncoder>
    39fc:	6b 01       	movw	r12, r22
    39fe:	7c 01       	movw	r14, r24
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	a9 01       	movw	r20, r18
    3a06:	c5 01       	movw	r24, r10
    3a08:	b4 01       	movw	r22, r8
    3a0a:	0e 94 1f 24 	call	0x483e	; 0x483e <__gesf2>
    3a0e:	2d ec       	ldi	r18, 0xCD	; 205
    3a10:	3c e4       	ldi	r19, 0x4C	; 76
    3a12:	4f e4       	ldi	r20, 0x4F	; 79
    3a14:	53 e4       	ldi	r21, 0x43	; 67
    3a16:	18 16       	cp	r1, r24
    3a18:	0c f0       	brlt	.+2      	; 0x3a1c <WorkerMotion+0x8e>
    3a1a:	50 c1       	rjmp	.+672    	; 0x3cbc <WorkerMotion+0x32e>
    3a1c:	c5 01       	movw	r24, r10
    3a1e:	b4 01       	movw	r22, r8
    3a20:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	44 eb       	ldi	r20, 0xB4	; 180
    3a2a:	53 e4       	ldi	r21, 0x43	; 67
    3a2c:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsf3>
    3a30:	20 e0       	ldi	r18, 0x00	; 0
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	40 e4       	ldi	r20, 0x40	; 64
    3a36:	50 e4       	ldi	r21, 0x40	; 64
    3a38:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    3a3c:	6c 8b       	std	Y+20, r22	; 0x14
    3a3e:	7d 8b       	std	Y+21, r23	; 0x15
    3a40:	8e 8b       	std	Y+22, r24	; 0x16
    3a42:	9f 8b       	std	Y+23, r25	; 0x17
    3a44:	b6 01       	movw	r22, r12
    3a46:	dd 0c       	add	r13, r13
    3a48:	88 0b       	sbc	r24, r24
    3a4a:	99 0b       	sbc	r25, r25
    3a4c:	0e 94 6f 23 	call	0x46de	; 0x46de <__floatsisf>
    3a50:	9b 01       	movw	r18, r22
    3a52:	ac 01       	movw	r20, r24
    3a54:	6c 89       	ldd	r22, Y+20	; 0x14
    3a56:	7d 89       	ldd	r23, Y+21	; 0x15
    3a58:	8e 89       	ldd	r24, Y+22	; 0x16
    3a5a:	9f 89       	ldd	r25, Y+23	; 0x17
    3a5c:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__addsf3>
    3a60:	0e 94 37 23 	call	0x466e	; 0x466e <__fixsfsi>
    3a64:	8b 01       	movw	r16, r22
    3a66:	2d ec       	ldi	r18, 0xCD	; 205
    3a68:	3c e4       	ldi	r19, 0x4C	; 76
    3a6a:	4f e4       	ldi	r20, 0x4F	; 79
    3a6c:	53 e4       	ldi	r21, 0x43	; 67
    3a6e:	c3 01       	movw	r24, r6
    3a70:	b2 01       	movw	r22, r4
    3a72:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	44 eb       	ldi	r20, 0xB4	; 180
    3a7c:	53 e4       	ldi	r21, 0x43	; 67
    3a7e:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsf3>
    3a82:	20 e0       	ldi	r18, 0x00	; 0
    3a84:	30 e0       	ldi	r19, 0x00	; 0
    3a86:	40 e4       	ldi	r20, 0x40	; 64
    3a88:	50 e4       	ldi	r21, 0x40	; 64
    3a8a:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    3a8e:	0e 94 37 23 	call	0x466e	; 0x466e <__fixsfsi>
    3a92:	dc 01       	movw	r26, r24
    3a94:	cb 01       	movw	r24, r22
    3a96:	bc 01       	movw	r22, r24
    3a98:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <MotorSpeedSet>
    3a9c:	09 c0       	rjmp	.+18     	; 0x3ab0 <WorkerMotion+0x122>
    3a9e:	0c 15       	cp	r16, r12
    3aa0:	1d 05       	cpc	r17, r13
    3aa2:	b4 f0       	brlt	.+44     	; 0x3ad0 <WorkerMotion+0x142>
    3aa4:	6a e0       	ldi	r22, 0x0A	; 10
    3aa6:	70 e0       	ldi	r23, 0x00	; 0
    3aa8:	ce 01       	movw	r24, r28
    3aaa:	0a 96       	adiw	r24, 0x0a	; 10
    3aac:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <vTaskDelayUntil>
    3ab0:	0e 94 77 04 	call	0x8ee	; 0x8ee <DriverMotorGetEncoder>
    3ab4:	6b 01       	movw	r12, r22
    3ab6:	7c 01       	movw	r14, r24
    3ab8:	20 e0       	ldi	r18, 0x00	; 0
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	a9 01       	movw	r20, r18
    3abe:	c5 01       	movw	r24, r10
    3ac0:	b4 01       	movw	r22, r8
    3ac2:	0e 94 1f 24 	call	0x483e	; 0x483e <__gesf2>
    3ac6:	18 16       	cp	r1, r24
    3ac8:	54 f3       	brlt	.-44     	; 0x3a9e <WorkerMotion+0x110>
    3aca:	c0 16       	cp	r12, r16
    3acc:	d1 06       	cpc	r13, r17
    3ace:	54 f7       	brge	.-44     	; 0x3aa4 <WorkerMotion+0x116>
    3ad0:	0e 94 95 20 	call	0x412a	; 0x412a <DisableMotorPosTask>
    3ad4:	0e 94 55 21 	call	0x42aa	; 0x42aa <DisableMotorSpeedTask>
    3ad8:	80 91 37 22 	lds	r24, 0x2237	; 0x802237 <CmdQueue>
    3adc:	90 91 38 22 	lds	r25, 0x2238	; 0x802238 <CmdQueue+0x1>
    3ae0:	0e 94 75 12 	call	0x24ea	; 0x24ea <uxQueueMessagesWaiting>
    3ae4:	81 11       	cpse	r24, r1
    3ae6:	6a cf       	rjmp	.-300    	; 0x39bc <WorkerMotion+0x2e>
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	40 e0       	ldi	r20, 0x00	; 0
    3aec:	50 e0       	ldi	r21, 0x00	; 0
    3aee:	60 e0       	ldi	r22, 0x00	; 0
    3af0:	70 e0       	ldi	r23, 0x00	; 0
    3af2:	80 91 35 22 	lds	r24, 0x2235	; 0x802235 <CmdCompleteSema>
    3af6:	90 91 36 22 	lds	r25, 0x2236	; 0x802236 <CmdCompleteSema+0x1>
    3afa:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <xQueueGenericSend>
    3afe:	5e cf       	rjmp	.-324    	; 0x39bc <WorkerMotion+0x2e>
    3b00:	ca 80       	ldd	r12, Y+2	; 0x02
    3b02:	db 80       	ldd	r13, Y+3	; 0x03
    3b04:	ec 80       	ldd	r14, Y+4	; 0x04
    3b06:	fd 80       	ldd	r15, Y+5	; 0x05
    3b08:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <xTaskGetTickCount>
    3b0c:	8a 8b       	std	Y+18, r24	; 0x12
    3b0e:	9b 8b       	std	Y+19, r25	; 0x13
    3b10:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <EnableMotorPosTask>
    3b14:	0e 94 49 21 	call	0x4292	; 0x4292 <EnableMotorSpeedTask>
    3b18:	0e 94 77 04 	call	0x8ee	; 0x8ee <DriverMotorGetEncoder>
    3b1c:	2d ec       	ldi	r18, 0xCD	; 205
    3b1e:	3c e4       	ldi	r19, 0x4C	; 76
    3b20:	4f e4       	ldi	r20, 0x4F	; 79
    3b22:	53 e4       	ldi	r21, 0x43	; 67
    3b24:	c7 01       	movw	r24, r14
    3b26:	b6 01       	movw	r22, r12
    3b28:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    3b2c:	20 e0       	ldi	r18, 0x00	; 0
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	44 eb       	ldi	r20, 0xB4	; 180
    3b32:	53 e4       	ldi	r21, 0x43	; 67
    3b34:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsf3>
    3b38:	20 e0       	ldi	r18, 0x00	; 0
    3b3a:	30 e0       	ldi	r19, 0x00	; 0
    3b3c:	40 e4       	ldi	r20, 0x40	; 64
    3b3e:	50 e4       	ldi	r21, 0x40	; 64
    3b40:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    3b44:	0e 94 a9 1c 	call	0x3952	; 0x3952 <StartLineFollower>
    3b48:	00 e0       	ldi	r16, 0x00	; 0
    3b4a:	10 e0       	ldi	r17, 0x00	; 0
    3b4c:	0b c0       	rjmp	.+22     	; 0x3b64 <WorkerMotion+0x1d6>
    3b4e:	0f 5f       	subi	r16, 0xFF	; 255
    3b50:	1f 4f       	sbci	r17, 0xFF	; 255
    3b52:	05 31       	cpi	r16, 0x15	; 21
    3b54:	11 05       	cpc	r17, r1
    3b56:	e4 f4       	brge	.+56     	; 0x3b90 <WorkerMotion+0x202>
    3b58:	6a e0       	ldi	r22, 0x0A	; 10
    3b5a:	70 e0       	ldi	r23, 0x00	; 0
    3b5c:	ce 01       	movw	r24, r28
    3b5e:	42 96       	adiw	r24, 0x12	; 18
    3b60:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <vTaskDelayUntil>
    3b64:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <GetADCData>
    3b68:	2a 87       	std	Y+10, r18	; 0x0a
    3b6a:	3b 87       	std	Y+11, r19	; 0x0b
    3b6c:	4c 87       	std	Y+12, r20	; 0x0c
    3b6e:	5d 87       	std	Y+13, r21	; 0x0d
    3b70:	6e 87       	std	Y+14, r22	; 0x0e
    3b72:	7f 87       	std	Y+15, r23	; 0x0f
    3b74:	88 8b       	std	Y+16, r24	; 0x10
    3b76:	99 8b       	std	Y+17, r25	; 0x11
    3b78:	2a 85       	ldd	r18, Y+10	; 0x0a
    3b7a:	3b 85       	ldd	r19, Y+11	; 0x0b
    3b7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b80:	82 0f       	add	r24, r18
    3b82:	93 1f       	adc	r25, r19
    3b84:	8a 38       	cpi	r24, 0x8A	; 138
    3b86:	93 41       	sbci	r25, 0x13	; 19
    3b88:	14 f7       	brge	.-60     	; 0x3b4e <WorkerMotion+0x1c0>
    3b8a:	00 e0       	ldi	r16, 0x00	; 0
    3b8c:	10 e0       	ldi	r17, 0x00	; 0
    3b8e:	e4 cf       	rjmp	.-56     	; 0x3b58 <WorkerMotion+0x1ca>
    3b90:	0e 94 bc 1c 	call	0x3978	; 0x3978 <StopLineFollower>
    3b94:	0e 94 95 20 	call	0x412a	; 0x412a <DisableMotorPosTask>
    3b98:	0e 94 55 21 	call	0x42aa	; 0x42aa <DisableMotorSpeedTask>
    3b9c:	06 cf       	rjmp	.-500    	; 0x39aa <WorkerMotion+0x1c>
    3b9e:	4e 80       	ldd	r4, Y+6	; 0x06
    3ba0:	5f 80       	ldd	r5, Y+7	; 0x07
    3ba2:	68 84       	ldd	r6, Y+8	; 0x08
    3ba4:	79 84       	ldd	r7, Y+9	; 0x09
    3ba6:	8a 80       	ldd	r8, Y+2	; 0x02
    3ba8:	9b 80       	ldd	r9, Y+3	; 0x03
    3baa:	ac 80       	ldd	r10, Y+4	; 0x04
    3bac:	bd 80       	ldd	r11, Y+5	; 0x05
    3bae:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <xTaskGetTickCount>
    3bb2:	8a 87       	std	Y+10, r24	; 0x0a
    3bb4:	9b 87       	std	Y+11, r25	; 0x0b
    3bb6:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <EnableMotorPosTask>
    3bba:	0e 94 49 21 	call	0x4292	; 0x4292 <EnableMotorSpeedTask>
    3bbe:	0e 94 77 04 	call	0x8ee	; 0x8ee <DriverMotorGetEncoder>
    3bc2:	6b 01       	movw	r12, r22
    3bc4:	7c 01       	movw	r14, r24
    3bc6:	26 ec       	ldi	r18, 0xC6	; 198
    3bc8:	39 ed       	ldi	r19, 0xD9	; 217
    3bca:	47 e7       	ldi	r20, 0x77	; 119
    3bcc:	5f e3       	ldi	r21, 0x3F	; 63
    3bce:	c5 01       	movw	r24, r10
    3bd0:	b4 01       	movw	r22, r8
    3bd2:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsf3>
    3bd6:	4b 01       	movw	r8, r22
    3bd8:	5c 01       	movw	r10, r24
    3bda:	20 e0       	ldi	r18, 0x00	; 0
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	a9 01       	movw	r20, r18
    3be0:	0e 94 1f 24 	call	0x483e	; 0x483e <__gesf2>
    3be4:	18 16       	cp	r1, r24
    3be6:	0c f0       	brlt	.+2      	; 0x3bea <WorkerMotion+0x25c>
    3be8:	ab c0       	rjmp	.+342    	; 0x3d40 <WorkerMotion+0x3b2>
    3bea:	b6 01       	movw	r22, r12
    3bec:	dd 0c       	add	r13, r13
    3bee:	88 0b       	sbc	r24, r24
    3bf0:	99 0b       	sbc	r25, r25
    3bf2:	0e 94 6f 23 	call	0x46de	; 0x46de <__floatsisf>
    3bf6:	6b 01       	movw	r12, r22
    3bf8:	7c 01       	movw	r14, r24
    3bfa:	2d ec       	ldi	r18, 0xCD	; 205
    3bfc:	3c e4       	ldi	r19, 0x4C	; 76
    3bfe:	4f e4       	ldi	r20, 0x4F	; 79
    3c00:	53 e4       	ldi	r21, 0x43	; 67
    3c02:	c5 01       	movw	r24, r10
    3c04:	b4 01       	movw	r22, r8
    3c06:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	44 eb       	ldi	r20, 0xB4	; 180
    3c10:	53 e4       	ldi	r21, 0x43	; 67
    3c12:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsf3>
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	40 e4       	ldi	r20, 0x40	; 64
    3c1c:	50 e4       	ldi	r21, 0x40	; 64
    3c1e:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    3c22:	9b 01       	movw	r18, r22
    3c24:	ac 01       	movw	r20, r24
    3c26:	c7 01       	movw	r24, r14
    3c28:	b6 01       	movw	r22, r12
    3c2a:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__subsf3>
    3c2e:	0e 94 37 23 	call	0x466e	; 0x466e <__fixsfsi>
    3c32:	8b 01       	movw	r16, r22
    3c34:	2d ec       	ldi	r18, 0xCD	; 205
    3c36:	3c e4       	ldi	r19, 0x4C	; 76
    3c38:	4f e4       	ldi	r20, 0x4F	; 79
    3c3a:	53 e4       	ldi	r21, 0x43	; 67
    3c3c:	c3 01       	movw	r24, r6
    3c3e:	b2 01       	movw	r22, r4
    3c40:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	44 eb       	ldi	r20, 0xB4	; 180
    3c4a:	53 e4       	ldi	r21, 0x43	; 67
    3c4c:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsf3>
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	40 e4       	ldi	r20, 0x40	; 64
    3c56:	50 e4       	ldi	r21, 0x40	; 64
    3c58:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    3c5c:	2b 01       	movw	r4, r22
    3c5e:	3c 01       	movw	r6, r24
    3c60:	0e 94 37 23 	call	0x466e	; 0x466e <__fixsfsi>
    3c64:	6b 01       	movw	r12, r22
    3c66:	7c 01       	movw	r14, r24
    3c68:	c3 01       	movw	r24, r6
    3c6a:	b2 01       	movw	r22, r4
    3c6c:	90 58       	subi	r25, 0x80	; 128
    3c6e:	0e 94 37 23 	call	0x466e	; 0x466e <__fixsfsi>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	b6 01       	movw	r22, r12
    3c78:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <MotorSpeedSet>
    3c7c:	0a c0       	rjmp	.+20     	; 0x3c92 <WorkerMotion+0x304>
    3c7e:	c0 16       	cp	r12, r16
    3c80:	d1 06       	cpc	r13, r17
    3c82:	0c f4       	brge	.+2      	; 0x3c86 <WorkerMotion+0x2f8>
    3c84:	25 cf       	rjmp	.-438    	; 0x3ad0 <WorkerMotion+0x142>
    3c86:	6a e0       	ldi	r22, 0x0A	; 10
    3c88:	70 e0       	ldi	r23, 0x00	; 0
    3c8a:	ce 01       	movw	r24, r28
    3c8c:	0a 96       	adiw	r24, 0x0a	; 10
    3c8e:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <vTaskDelayUntil>
    3c92:	0e 94 77 04 	call	0x8ee	; 0x8ee <DriverMotorGetEncoder>
    3c96:	6b 01       	movw	r12, r22
    3c98:	7c 01       	movw	r14, r24
    3c9a:	20 e0       	ldi	r18, 0x00	; 0
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	a9 01       	movw	r20, r18
    3ca0:	c5 01       	movw	r24, r10
    3ca2:	b4 01       	movw	r22, r8
    3ca4:	0e 94 1f 24 	call	0x483e	; 0x483e <__gesf2>
    3ca8:	18 16       	cp	r1, r24
    3caa:	4c f3       	brlt	.-46     	; 0x3c7e <WorkerMotion+0x2f0>
    3cac:	0c 15       	cp	r16, r12
    3cae:	1d 05       	cpc	r17, r13
    3cb0:	54 f7       	brge	.-44     	; 0x3c86 <WorkerMotion+0x2f8>
    3cb2:	0e 94 95 20 	call	0x412a	; 0x412a <DisableMotorPosTask>
    3cb6:	0e 94 55 21 	call	0x42aa	; 0x42aa <DisableMotorSpeedTask>
    3cba:	0e cf       	rjmp	.-484    	; 0x3ad8 <WorkerMotion+0x14a>
    3cbc:	c5 01       	movw	r24, r10
    3cbe:	b4 01       	movw	r22, r8
    3cc0:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	44 eb       	ldi	r20, 0xB4	; 180
    3cca:	53 e4       	ldi	r21, 0x43	; 67
    3ccc:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsf3>
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	40 e4       	ldi	r20, 0x40	; 64
    3cd6:	50 e4       	ldi	r21, 0x40	; 64
    3cd8:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    3cdc:	6c 8b       	std	Y+20, r22	; 0x14
    3cde:	7d 8b       	std	Y+21, r23	; 0x15
    3ce0:	8e 8b       	std	Y+22, r24	; 0x16
    3ce2:	9f 8b       	std	Y+23, r25	; 0x17
    3ce4:	b6 01       	movw	r22, r12
    3ce6:	dd 0c       	add	r13, r13
    3ce8:	88 0b       	sbc	r24, r24
    3cea:	99 0b       	sbc	r25, r25
    3cec:	0e 94 6f 23 	call	0x46de	; 0x46de <__floatsisf>
    3cf0:	9b 01       	movw	r18, r22
    3cf2:	ac 01       	movw	r20, r24
    3cf4:	6c 89       	ldd	r22, Y+20	; 0x14
    3cf6:	7d 89       	ldd	r23, Y+21	; 0x15
    3cf8:	8e 89       	ldd	r24, Y+22	; 0x16
    3cfa:	9f 89       	ldd	r25, Y+23	; 0x17
    3cfc:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__addsf3>
    3d00:	0e 94 37 23 	call	0x466e	; 0x466e <__fixsfsi>
    3d04:	8b 01       	movw	r16, r22
    3d06:	2d ec       	ldi	r18, 0xCD	; 205
    3d08:	3c e4       	ldi	r19, 0x4C	; 76
    3d0a:	4f e4       	ldi	r20, 0x4F	; 79
    3d0c:	53 e4       	ldi	r21, 0x43	; 67
    3d0e:	c3 01       	movw	r24, r6
    3d10:	b2 01       	movw	r22, r4
    3d12:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	30 e0       	ldi	r19, 0x00	; 0
    3d1a:	44 eb       	ldi	r20, 0xB4	; 180
    3d1c:	53 e4       	ldi	r21, 0x43	; 67
    3d1e:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsf3>
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	40 e4       	ldi	r20, 0x40	; 64
    3d28:	50 e4       	ldi	r21, 0x40	; 64
    3d2a:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    3d2e:	90 58       	subi	r25, 0x80	; 128
    3d30:	0e 94 37 23 	call	0x466e	; 0x466e <__fixsfsi>
    3d34:	dc 01       	movw	r26, r24
    3d36:	cb 01       	movw	r24, r22
    3d38:	bc 01       	movw	r22, r24
    3d3a:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <MotorSpeedSet>
    3d3e:	b8 ce       	rjmp	.-656    	; 0x3ab0 <WorkerMotion+0x122>
    3d40:	b6 01       	movw	r22, r12
    3d42:	dd 0c       	add	r13, r13
    3d44:	88 0b       	sbc	r24, r24
    3d46:	99 0b       	sbc	r25, r25
    3d48:	0e 94 6f 23 	call	0x46de	; 0x46de <__floatsisf>
    3d4c:	6b 01       	movw	r12, r22
    3d4e:	7c 01       	movw	r14, r24
    3d50:	2d ec       	ldi	r18, 0xCD	; 205
    3d52:	3c e4       	ldi	r19, 0x4C	; 76
    3d54:	4f e4       	ldi	r20, 0x4F	; 79
    3d56:	53 e4       	ldi	r21, 0x43	; 67
    3d58:	c5 01       	movw	r24, r10
    3d5a:	b4 01       	movw	r22, r8
    3d5c:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    3d60:	20 e0       	ldi	r18, 0x00	; 0
    3d62:	30 e0       	ldi	r19, 0x00	; 0
    3d64:	44 eb       	ldi	r20, 0xB4	; 180
    3d66:	53 e4       	ldi	r21, 0x43	; 67
    3d68:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsf3>
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	40 e4       	ldi	r20, 0x40	; 64
    3d72:	50 e4       	ldi	r21, 0x40	; 64
    3d74:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    3d78:	9b 01       	movw	r18, r22
    3d7a:	ac 01       	movw	r20, r24
    3d7c:	c7 01       	movw	r24, r14
    3d7e:	b6 01       	movw	r22, r12
    3d80:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__subsf3>
    3d84:	0e 94 37 23 	call	0x466e	; 0x466e <__fixsfsi>
    3d88:	8b 01       	movw	r16, r22
    3d8a:	2d ec       	ldi	r18, 0xCD	; 205
    3d8c:	3c e4       	ldi	r19, 0x4C	; 76
    3d8e:	4f e4       	ldi	r20, 0x4F	; 79
    3d90:	53 e4       	ldi	r21, 0x43	; 67
    3d92:	c3 01       	movw	r24, r6
    3d94:	b2 01       	movw	r22, r4
    3d96:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    3d9a:	20 e0       	ldi	r18, 0x00	; 0
    3d9c:	30 e0       	ldi	r19, 0x00	; 0
    3d9e:	44 eb       	ldi	r20, 0xB4	; 180
    3da0:	53 e4       	ldi	r21, 0x43	; 67
    3da2:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsf3>
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	40 e4       	ldi	r20, 0x40	; 64
    3dac:	50 e4       	ldi	r21, 0x40	; 64
    3dae:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    3db2:	2b 01       	movw	r4, r22
    3db4:	3c 01       	movw	r6, r24
    3db6:	90 58       	subi	r25, 0x80	; 128
    3db8:	0e 94 37 23 	call	0x466e	; 0x466e <__fixsfsi>
    3dbc:	6b 01       	movw	r12, r22
    3dbe:	7c 01       	movw	r14, r24
    3dc0:	c3 01       	movw	r24, r6
    3dc2:	b2 01       	movw	r22, r4
    3dc4:	0e 94 37 23 	call	0x466e	; 0x466e <__fixsfsi>
    3dc8:	dc 01       	movw	r26, r24
    3dca:	cb 01       	movw	r24, r22
    3dcc:	b6 01       	movw	r22, r12
    3dce:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <MotorSpeedSet>
    3dd2:	5f cf       	rjmp	.-322    	; 0x3c92 <WorkerMotion+0x304>

00003dd4 <InitMotionTask>:
    3dd4:	ef 92       	push	r14
    3dd6:	ff 92       	push	r15
    3dd8:	0f 93       	push	r16
    3dda:	e1 2c       	mov	r14, r1
    3ddc:	f1 2c       	mov	r15, r1
    3dde:	03 e0       	ldi	r16, 0x03	; 3
    3de0:	20 e0       	ldi	r18, 0x00	; 0
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	40 e0       	ldi	r20, 0x00	; 0
    3de6:	51 e0       	ldi	r21, 0x01	; 1
    3de8:	6b e3       	ldi	r22, 0x3B	; 59
    3dea:	71 e2       	ldi	r23, 0x21	; 33
    3dec:	87 ec       	ldi	r24, 0xC7	; 199
    3dee:	9c e1       	ldi	r25, 0x1C	; 28
    3df0:	0e 94 06 14 	call	0x280c	; 0x280c <xTaskCreate>
    3df4:	40 e0       	ldi	r20, 0x00	; 0
    3df6:	69 e0       	ldi	r22, 0x09	; 9
    3df8:	81 e0       	ldi	r24, 0x01	; 1
    3dfa:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <xQueueGenericCreate>
    3dfe:	80 93 37 22 	sts	0x2237, r24	; 0x802237 <CmdQueue>
    3e02:	90 93 38 22 	sts	0x2238, r25	; 0x802238 <CmdQueue+0x1>
    3e06:	43 e0       	ldi	r20, 0x03	; 3
    3e08:	60 e0       	ldi	r22, 0x00	; 0
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <xQueueGenericCreate>
    3e10:	80 93 35 22 	sts	0x2235, r24	; 0x802235 <CmdCompleteSema>
    3e14:	90 93 36 22 	sts	0x2236, r25	; 0x802236 <CmdCompleteSema+0x1>
    3e18:	0f 91       	pop	r16
    3e1a:	ff 90       	pop	r15
    3e1c:	ef 90       	pop	r14
    3e1e:	08 95       	ret

00003e20 <DriveSegment>:
void DriveSegment(float Speed)
{
    3e20:	cf 93       	push	r28
    3e22:	df 93       	push	r29
    3e24:	cd b7       	in	r28, 0x3d	; 61
    3e26:	de b7       	in	r29, 0x3e	; 62
    3e28:	29 97       	sbiw	r28, 0x09	; 9
    3e2a:	cd bf       	out	0x3d, r28	; 61
    3e2c:	de bf       	out	0x3e, r29	; 62
	MotionCmdStruct MotionCmd;
	MotionCmd.Cmd=CMD_DRIVE_SEGMENT;
    3e2e:	22 e0       	ldi	r18, 0x02	; 2
    3e30:	29 83       	std	Y+1, r18	; 0x01
	MotionCmd.Params[0]=Speed;
    3e32:	6a 83       	std	Y+2, r22	; 0x02
    3e34:	7b 83       	std	Y+3, r23	; 0x03
    3e36:	8c 83       	std	Y+4, r24	; 0x04
    3e38:	9d 83       	std	Y+5, r25	; 0x05
	xQueueSendToBack(CmdQueue,&MotionCmd,portMAX_DELAY);	//Issue command
    3e3a:	20 e0       	ldi	r18, 0x00	; 0
    3e3c:	4f ef       	ldi	r20, 0xFF	; 255
    3e3e:	5f ef       	ldi	r21, 0xFF	; 255
    3e40:	be 01       	movw	r22, r28
    3e42:	6f 5f       	subi	r22, 0xFF	; 255
    3e44:	7f 4f       	sbci	r23, 0xFF	; 255
    3e46:	80 91 37 22 	lds	r24, 0x2237	; 0x802237 <CmdQueue>
    3e4a:	90 91 38 22 	lds	r25, 0x2238	; 0x802238 <CmdQueue+0x1>
    3e4e:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <xQueueGenericSend>
	xSemaphoreTake(CmdCompleteSema,portMAX_DELAY);			//Block until command has been executed
    3e52:	6f ef       	ldi	r22, 0xFF	; 255
    3e54:	7f ef       	ldi	r23, 0xFF	; 255
    3e56:	80 91 35 22 	lds	r24, 0x2235	; 0x802235 <CmdCompleteSema>
    3e5a:	90 91 36 22 	lds	r25, 0x2236	; 0x802236 <CmdCompleteSema+0x1>
    3e5e:	0e 94 73 10 	call	0x20e6	; 0x20e6 <xQueueSemaphoreTake>
}
    3e62:	29 96       	adiw	r28, 0x09	; 9
    3e64:	cd bf       	out	0x3d, r28	; 61
    3e66:	de bf       	out	0x3e, r29	; 62
    3e68:	df 91       	pop	r29
    3e6a:	cf 91       	pop	r28
    3e6c:	08 95       	ret

00003e6e <WorkerMotorPos>:
	IncSet.IncSet2=IncSet2;
	xQueueSend(IncSetQueue,&IncSet,portMAX_DELAY);
}

void WorkerMotorPos(void *pvParameters)
{
    3e6e:	cf 93       	push	r28
    3e70:	df 93       	push	r29
    3e72:	cd b7       	in	r28, 0x3d	; 61
    3e74:	de b7       	in	r29, 0x3e	; 62
    3e76:	2c 97       	sbiw	r28, 0x0c	; 12
    3e78:	cd bf       	out	0x3d, r28	; 61
    3e7a:	de bf       	out	0x3e, r29	; 62
	float Err1=0,Err2=0;
	
	IncSetStruct IncSet;
	EncoderStruct EncoderInfo;
	
	xLastWakeTime = xTaskGetTickCount();
    3e7c:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <xTaskGetTickCount>
    3e80:	80 93 39 22 	sts	0x2239, r24	; 0x802239 <xLastWakeTime>
    3e84:	90 93 3a 22 	sts	0x223A, r25	; 0x80223a <xLastWakeTime+0x1>
void WorkerMotorPos(void *pvParameters)
{
	
	const TickType_t xPeriod = 10;
	
	float Set1=0,Set2=0;
    3e88:	19 86       	std	Y+9, r1	; 0x09
    3e8a:	1a 86       	std	Y+10, r1	; 0x0a
    3e8c:	1b 86       	std	Y+11, r1	; 0x0b
    3e8e:	1c 86       	std	Y+12, r1	; 0x0c
    3e90:	1d 82       	std	Y+5, r1	; 0x05
    3e92:	1e 82       	std	Y+6, r1	; 0x06
    3e94:	1f 82       	std	Y+7, r1	; 0x07
    3e96:	18 86       	std	Y+8, r1	; 0x08
    3e98:	77 c0       	rjmp	.+238    	; 0x3f88 <WorkerMotorPos+0x11a>
			//PID 1
			Err1=Set1-EncoderInfo.Cnt1;
			Out1=Err1*MOTPOS_KP;
			if (Out1>0) Out1+=MOTPOS_FF_OFFSET;
			if (Out1>4095) Out1=4095;
			if (Out1<0) Out1-=MOTPOS_FF_OFFSET;			
    3e9a:	20 e0       	ldi	r18, 0x00	; 0
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	a9 01       	movw	r20, r18
    3ea0:	c7 01       	movw	r24, r14
    3ea2:	b6 01       	movw	r22, r12
    3ea4:	0e 94 c0 22 	call	0x4580	; 0x4580 <__cmpsf2>
    3ea8:	87 ff       	sbrs	r24, 7
    3eaa:	0a c0       	rjmp	.+20     	; 0x3ec0 <WorkerMotorPos+0x52>
    3eac:	20 e0       	ldi	r18, 0x00	; 0
    3eae:	30 e8       	ldi	r19, 0x80	; 128
    3eb0:	4b eb       	ldi	r20, 0xBB	; 187
    3eb2:	54 e4       	ldi	r21, 0x44	; 68
    3eb4:	c7 01       	movw	r24, r14
    3eb6:	b6 01       	movw	r22, r12
    3eb8:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__subsf3>
    3ebc:	6b 01       	movw	r12, r22
    3ebe:	7c 01       	movw	r14, r24
			if (Out1<-4095) Out1=-4095;
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	30 ef       	ldi	r19, 0xF0	; 240
    3ec4:	4f e7       	ldi	r20, 0x7F	; 127
    3ec6:	55 ec       	ldi	r21, 0xC5	; 197
    3ec8:	c7 01       	movw	r24, r14
    3eca:	b6 01       	movw	r22, r12
    3ecc:	0e 94 c0 22 	call	0x4580	; 0x4580 <__cmpsf2>
    3ed0:	87 ff       	sbrs	r24, 7
    3ed2:	b6 c0       	rjmp	.+364    	; 0x4040 <WorkerMotorPos+0x1d2>
    3ed4:	01 e0       	ldi	r16, 0x01	; 1
    3ed6:	10 ef       	ldi	r17, 0xF0	; 240

			//PID 2
			Err2=Set2-EncoderInfo.Cnt2;
			Out2=Err2*MOTPOS_KP;
    3ed8:	c5 01       	movw	r24, r10
    3eda:	b4 01       	movw	r22, r8
    3edc:	0e 94 6f 23 	call	0x46de	; 0x46de <__floatsisf>
    3ee0:	9b 01       	movw	r18, r22
    3ee2:	ac 01       	movw	r20, r24
    3ee4:	69 85       	ldd	r22, Y+9	; 0x09
    3ee6:	7a 85       	ldd	r23, Y+10	; 0x0a
    3ee8:	8b 85       	ldd	r24, Y+11	; 0x0b
    3eea:	9c 85       	ldd	r25, Y+12	; 0x0c
    3eec:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__subsf3>
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	46 e9       	ldi	r20, 0x96	; 150
    3ef6:	53 e4       	ldi	r21, 0x43	; 67
    3ef8:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsf3>
    3efc:	6b 01       	movw	r12, r22
    3efe:	7c 01       	movw	r14, r24
			if (Out2>0) Out2+=MOTPOS_FF_OFFSET;
    3f00:	20 e0       	ldi	r18, 0x00	; 0
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	a9 01       	movw	r20, r18
    3f06:	0e 94 1f 24 	call	0x483e	; 0x483e <__gesf2>
    3f0a:	18 16       	cp	r1, r24
    3f0c:	54 f4       	brge	.+20     	; 0x3f22 <WorkerMotorPos+0xb4>
    3f0e:	20 e0       	ldi	r18, 0x00	; 0
    3f10:	30 e8       	ldi	r19, 0x80	; 128
    3f12:	4b eb       	ldi	r20, 0xBB	; 187
    3f14:	54 e4       	ldi	r21, 0x44	; 68
    3f16:	c7 01       	movw	r24, r14
    3f18:	b6 01       	movw	r22, r12
    3f1a:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__addsf3>
    3f1e:	6b 01       	movw	r12, r22
    3f20:	7c 01       	movw	r14, r24
			if (Out2>4095) Out2=4095;
    3f22:	20 e0       	ldi	r18, 0x00	; 0
    3f24:	30 ef       	ldi	r19, 0xF0	; 240
    3f26:	4f e7       	ldi	r20, 0x7F	; 127
    3f28:	55 e4       	ldi	r21, 0x45	; 69
    3f2a:	c7 01       	movw	r24, r14
    3f2c:	b6 01       	movw	r22, r12
    3f2e:	0e 94 1f 24 	call	0x483e	; 0x483e <__gesf2>
    3f32:	18 16       	cp	r1, r24
    3f34:	0c f4       	brge	.+2      	; 0x3f38 <WorkerMotorPos+0xca>
    3f36:	8a c0       	rjmp	.+276    	; 0x404c <WorkerMotorPos+0x1de>
			if (Out2<0) Out2-=MOTPOS_FF_OFFSET;
    3f38:	20 e0       	ldi	r18, 0x00	; 0
    3f3a:	30 e0       	ldi	r19, 0x00	; 0
    3f3c:	a9 01       	movw	r20, r18
    3f3e:	c7 01       	movw	r24, r14
    3f40:	b6 01       	movw	r22, r12
    3f42:	0e 94 c0 22 	call	0x4580	; 0x4580 <__cmpsf2>
    3f46:	87 ff       	sbrs	r24, 7
    3f48:	0a c0       	rjmp	.+20     	; 0x3f5e <WorkerMotorPos+0xf0>
    3f4a:	20 e0       	ldi	r18, 0x00	; 0
    3f4c:	30 e8       	ldi	r19, 0x80	; 128
    3f4e:	4b eb       	ldi	r20, 0xBB	; 187
    3f50:	54 e4       	ldi	r21, 0x44	; 68
    3f52:	c7 01       	movw	r24, r14
    3f54:	b6 01       	movw	r22, r12
    3f56:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__subsf3>
    3f5a:	6b 01       	movw	r12, r22
    3f5c:	7c 01       	movw	r14, r24
			if (Out2<-4095) Out2=-4095;
    3f5e:	20 e0       	ldi	r18, 0x00	; 0
    3f60:	30 ef       	ldi	r19, 0xF0	; 240
    3f62:	4f e7       	ldi	r20, 0x7F	; 127
    3f64:	55 ec       	ldi	r21, 0xC5	; 197
    3f66:	c7 01       	movw	r24, r14
    3f68:	b6 01       	movw	r22, r12
    3f6a:	0e 94 c0 22 	call	0x4580	; 0x4580 <__cmpsf2>
    3f6e:	87 ff       	sbrs	r24, 7
    3f70:	74 c0       	rjmp	.+232    	; 0x405a <WorkerMotorPos+0x1ec>
    3f72:	61 e0       	ldi	r22, 0x01	; 1
    3f74:	70 ef       	ldi	r23, 0xF0	; 240
			
			//printf ("Err:%f   Out:%f\r\n",Err2 ,Out2);			
			
			DriverMotorSet(Out1,Out2);
    3f76:	c8 01       	movw	r24, r16
    3f78:	0e 94 0c 04 	call	0x818	; 0x818 <DriverMotorSet>
			
			vTaskDelayUntil( &xLastWakeTime, xPeriod );
    3f7c:	6a e0       	ldi	r22, 0x0A	; 10
    3f7e:	70 e0       	ldi	r23, 0x00	; 0
    3f80:	89 e3       	ldi	r24, 0x39	; 57
    3f82:	92 e2       	ldi	r25, 0x22	; 34
    3f84:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <vTaskDelayUntil>
	
	xLastWakeTime = xTaskGetTickCount();
	
	while (1)
	{		
			EncoderInfo=DriverMotorGetEncoder();
    3f88:	0e 94 77 04 	call	0x8ee	; 0x8ee <DriverMotorGetEncoder>
    3f8c:	6b 01       	movw	r12, r22
    3f8e:	7c 01       	movw	r14, r24

			//Process reset setpoint command
			if (xSemaphoreTake(ResetSetpointSema,0)==pdPASS)
    3f90:	60 e0       	ldi	r22, 0x00	; 0
    3f92:	70 e0       	ldi	r23, 0x00	; 0
    3f94:	80 91 3f 22 	lds	r24, 0x223F	; 0x80223f <ResetSetpointSema>
    3f98:	90 91 40 22 	lds	r25, 0x2240	; 0x802240 <ResetSetpointSema+0x1>
    3f9c:	0e 94 73 10 	call	0x20e6	; 0x20e6 <xQueueSemaphoreTake>
			{
				Set1=EncoderInfo.Cnt1;
    3fa0:	26 01       	movw	r4, r12
    3fa2:	dd 0c       	add	r13, r13
    3fa4:	66 08       	sbc	r6, r6
    3fa6:	77 08       	sbc	r7, r7
	while (1)
	{		
			EncoderInfo=DriverMotorGetEncoder();

			//Process reset setpoint command
			if (xSemaphoreTake(ResetSetpointSema,0)==pdPASS)
    3fa8:	81 30       	cpi	r24, 0x01	; 1
    3faa:	09 f4       	brne	.+2      	; 0x3fae <WorkerMotorPos+0x140>
    3fac:	90 c0       	rjmp	.+288    	; 0x40ce <WorkerMotorPos+0x260>
    3fae:	47 01       	movw	r8, r14
    3fb0:	ff 0c       	add	r15, r15
    3fb2:	aa 08       	sbc	r10, r10
    3fb4:	bb 08       	sbc	r11, r11
				Set1=EncoderInfo.Cnt1;
				Set2=EncoderInfo.Cnt2;
			}
			
			//Process setpoint increment data
			if (xQueueReceive(IncSetQueue,&IncSet,0)==pdPASS)
    3fb6:	40 e0       	ldi	r20, 0x00	; 0
    3fb8:	50 e0       	ldi	r21, 0x00	; 0
    3fba:	be 01       	movw	r22, r28
    3fbc:	6f 5f       	subi	r22, 0xFF	; 255
    3fbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3fc0:	80 91 3d 22 	lds	r24, 0x223D	; 0x80223d <IncSetQueue>
    3fc4:	90 91 3e 22 	lds	r25, 0x223E	; 0x80223e <IncSetQueue+0x1>
    3fc8:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <xQueueReceive>
    3fcc:	81 30       	cpi	r24, 0x01	; 1
    3fce:	09 f4       	brne	.+2      	; 0x3fd2 <WorkerMotorPos+0x164>
    3fd0:	49 c0       	rjmp	.+146    	; 0x4064 <WorkerMotorPos+0x1f6>
				Set2+=((float) IncSet.IncSet2)/100;
			}
			
			//PID 1
			Err1=Set1-EncoderInfo.Cnt1;
			Out1=Err1*MOTPOS_KP;
    3fd2:	c3 01       	movw	r24, r6
    3fd4:	b2 01       	movw	r22, r4
    3fd6:	0e 94 6f 23 	call	0x46de	; 0x46de <__floatsisf>
    3fda:	9b 01       	movw	r18, r22
    3fdc:	ac 01       	movw	r20, r24
    3fde:	6d 81       	ldd	r22, Y+5	; 0x05
    3fe0:	7e 81       	ldd	r23, Y+6	; 0x06
    3fe2:	8f 81       	ldd	r24, Y+7	; 0x07
    3fe4:	98 85       	ldd	r25, Y+8	; 0x08
    3fe6:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__subsf3>
    3fea:	20 e0       	ldi	r18, 0x00	; 0
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	46 e9       	ldi	r20, 0x96	; 150
    3ff0:	53 e4       	ldi	r21, 0x43	; 67
    3ff2:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsf3>
    3ff6:	6b 01       	movw	r12, r22
    3ff8:	7c 01       	movw	r14, r24
			if (Out1>0) Out1+=MOTPOS_FF_OFFSET;
    3ffa:	20 e0       	ldi	r18, 0x00	; 0
    3ffc:	30 e0       	ldi	r19, 0x00	; 0
    3ffe:	a9 01       	movw	r20, r18
    4000:	0e 94 1f 24 	call	0x483e	; 0x483e <__gesf2>
    4004:	18 16       	cp	r1, r24
    4006:	54 f4       	brge	.+20     	; 0x401c <WorkerMotorPos+0x1ae>
    4008:	20 e0       	ldi	r18, 0x00	; 0
    400a:	30 e8       	ldi	r19, 0x80	; 128
    400c:	4b eb       	ldi	r20, 0xBB	; 187
    400e:	54 e4       	ldi	r21, 0x44	; 68
    4010:	c7 01       	movw	r24, r14
    4012:	b6 01       	movw	r22, r12
    4014:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__addsf3>
    4018:	6b 01       	movw	r12, r22
    401a:	7c 01       	movw	r14, r24
			if (Out1>4095) Out1=4095;
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	30 ef       	ldi	r19, 0xF0	; 240
    4020:	4f e7       	ldi	r20, 0x7F	; 127
    4022:	55 e4       	ldi	r21, 0x45	; 69
    4024:	c7 01       	movw	r24, r14
    4026:	b6 01       	movw	r22, r12
    4028:	0e 94 1f 24 	call	0x483e	; 0x483e <__gesf2>
    402c:	18 16       	cp	r1, r24
    402e:	0c f0       	brlt	.+2      	; 0x4032 <WorkerMotorPos+0x1c4>
    4030:	34 cf       	rjmp	.-408    	; 0x3e9a <WorkerMotorPos+0x2c>
    4032:	c1 2c       	mov	r12, r1
    4034:	90 ef       	ldi	r25, 0xF0	; 240
    4036:	d9 2e       	mov	r13, r25
    4038:	9f e7       	ldi	r25, 0x7F	; 127
    403a:	e9 2e       	mov	r14, r25
    403c:	95 e4       	ldi	r25, 0x45	; 69
    403e:	f9 2e       	mov	r15, r25
    4040:	c7 01       	movw	r24, r14
    4042:	b6 01       	movw	r22, r12
    4044:	0e 94 37 23 	call	0x466e	; 0x466e <__fixsfsi>
    4048:	8b 01       	movw	r16, r22
    404a:	46 cf       	rjmp	.-372    	; 0x3ed8 <WorkerMotorPos+0x6a>

			//PID 2
			Err2=Set2-EncoderInfo.Cnt2;
			Out2=Err2*MOTPOS_KP;
			if (Out2>0) Out2+=MOTPOS_FF_OFFSET;
			if (Out2>4095) Out2=4095;
    404c:	c1 2c       	mov	r12, r1
    404e:	80 ef       	ldi	r24, 0xF0	; 240
    4050:	d8 2e       	mov	r13, r24
    4052:	8f e7       	ldi	r24, 0x7F	; 127
    4054:	e8 2e       	mov	r14, r24
    4056:	85 e4       	ldi	r24, 0x45	; 69
    4058:	f8 2e       	mov	r15, r24
    405a:	c7 01       	movw	r24, r14
    405c:	b6 01       	movw	r22, r12
    405e:	0e 94 37 23 	call	0x466e	; 0x466e <__fixsfsi>
    4062:	89 cf       	rjmp	.-238    	; 0x3f76 <WorkerMotorPos+0x108>
			}
			
			//Process setpoint increment data
			if (xQueueReceive(IncSetQueue,&IncSet,0)==pdPASS)
			{
				Set1+=((float) IncSet.IncSet1)/100;
    4064:	69 81       	ldd	r22, Y+1	; 0x01
    4066:	7a 81       	ldd	r23, Y+2	; 0x02
    4068:	07 2e       	mov	r0, r23
    406a:	00 0c       	add	r0, r0
    406c:	88 0b       	sbc	r24, r24
    406e:	99 0b       	sbc	r25, r25
    4070:	0e 94 6f 23 	call	0x46de	; 0x46de <__floatsisf>
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	48 ec       	ldi	r20, 0xC8	; 200
    407a:	52 e4       	ldi	r21, 0x42	; 66
    407c:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    4080:	9b 01       	movw	r18, r22
    4082:	ac 01       	movw	r20, r24
    4084:	6d 81       	ldd	r22, Y+5	; 0x05
    4086:	7e 81       	ldd	r23, Y+6	; 0x06
    4088:	8f 81       	ldd	r24, Y+7	; 0x07
    408a:	98 85       	ldd	r25, Y+8	; 0x08
    408c:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__addsf3>
    4090:	6d 83       	std	Y+5, r22	; 0x05
    4092:	7e 83       	std	Y+6, r23	; 0x06
    4094:	8f 83       	std	Y+7, r24	; 0x07
    4096:	98 87       	std	Y+8, r25	; 0x08
				Set2+=((float) IncSet.IncSet2)/100;
    4098:	6b 81       	ldd	r22, Y+3	; 0x03
    409a:	7c 81       	ldd	r23, Y+4	; 0x04
    409c:	07 2e       	mov	r0, r23
    409e:	00 0c       	add	r0, r0
    40a0:	88 0b       	sbc	r24, r24
    40a2:	99 0b       	sbc	r25, r25
    40a4:	0e 94 6f 23 	call	0x46de	; 0x46de <__floatsisf>
    40a8:	20 e0       	ldi	r18, 0x00	; 0
    40aa:	30 e0       	ldi	r19, 0x00	; 0
    40ac:	48 ec       	ldi	r20, 0xC8	; 200
    40ae:	52 e4       	ldi	r21, 0x42	; 66
    40b0:	0e 94 c5 22 	call	0x458a	; 0x458a <__divsf3>
    40b4:	9b 01       	movw	r18, r22
    40b6:	ac 01       	movw	r20, r24
    40b8:	69 85       	ldd	r22, Y+9	; 0x09
    40ba:	7a 85       	ldd	r23, Y+10	; 0x0a
    40bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    40be:	9c 85       	ldd	r25, Y+12	; 0x0c
    40c0:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__addsf3>
    40c4:	69 87       	std	Y+9, r22	; 0x09
    40c6:	7a 87       	std	Y+10, r23	; 0x0a
    40c8:	8b 87       	std	Y+11, r24	; 0x0b
    40ca:	9c 87       	std	Y+12, r25	; 0x0c
    40cc:	82 cf       	rjmp	.-252    	; 0x3fd2 <WorkerMotorPos+0x164>
			EncoderInfo=DriverMotorGetEncoder();

			//Process reset setpoint command
			if (xSemaphoreTake(ResetSetpointSema,0)==pdPASS)
			{
				Set1=EncoderInfo.Cnt1;
    40ce:	c3 01       	movw	r24, r6
    40d0:	b2 01       	movw	r22, r4
    40d2:	0e 94 6f 23 	call	0x46de	; 0x46de <__floatsisf>
    40d6:	6d 83       	std	Y+5, r22	; 0x05
    40d8:	7e 83       	std	Y+6, r23	; 0x06
    40da:	8f 83       	std	Y+7, r24	; 0x07
    40dc:	98 87       	std	Y+8, r25	; 0x08
				Set2=EncoderInfo.Cnt2;
    40de:	47 01       	movw	r8, r14
    40e0:	ff 0c       	add	r15, r15
    40e2:	aa 08       	sbc	r10, r10
    40e4:	bb 08       	sbc	r11, r11
    40e6:	c5 01       	movw	r24, r10
    40e8:	b4 01       	movw	r22, r8
    40ea:	0e 94 6f 23 	call	0x46de	; 0x46de <__floatsisf>
    40ee:	69 87       	std	Y+9, r22	; 0x09
    40f0:	7a 87       	std	Y+10, r23	; 0x0a
    40f2:	8b 87       	std	Y+11, r24	; 0x0b
    40f4:	9c 87       	std	Y+12, r25	; 0x0c
    40f6:	5f cf       	rjmp	.-322    	; 0x3fb6 <WorkerMotorPos+0x148>

000040f8 <EnableMotorPosTask>:
	vSemaphoreCreateBinary(ResetSetpointSema);
}

void EnableMotorPosTask()
{
	DriverMotorResetEncoder();
    40f8:	0e 94 b4 06 	call	0xd68	; 0xd68 <DriverMotorResetEncoder>
	xSemaphoreGive(ResetSetpointSema);
    40fc:	20 e0       	ldi	r18, 0x00	; 0
    40fe:	40 e0       	ldi	r20, 0x00	; 0
    4100:	50 e0       	ldi	r21, 0x00	; 0
    4102:	60 e0       	ldi	r22, 0x00	; 0
    4104:	70 e0       	ldi	r23, 0x00	; 0
    4106:	80 91 3f 22 	lds	r24, 0x223F	; 0x80223f <ResetSetpointSema>
    410a:	90 91 40 22 	lds	r25, 0x2240	; 0x802240 <ResetSetpointSema+0x1>
    410e:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <xQueueGenericSend>
	xLastWakeTime = xTaskGetTickCount();
    4112:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <xTaskGetTickCount>
    4116:	80 93 39 22 	sts	0x2239, r24	; 0x802239 <xLastWakeTime>
    411a:	90 93 3a 22 	sts	0x223A, r25	; 0x80223a <xLastWakeTime+0x1>
	vTaskResume(MotorPosTaskHandle);
    411e:	80 91 3b 22 	lds	r24, 0x223B	; 0x80223b <MotorPosTaskHandle>
    4122:	90 91 3c 22 	lds	r25, 0x223C	; 0x80223c <MotorPosTaskHandle+0x1>
    4126:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <vTaskResume>

0000412a <DisableMotorPosTask>:
}

void DisableMotorPosTask()
{
	vTaskSuspend(MotorPosTaskHandle);
    412a:	80 91 3b 22 	lds	r24, 0x223B	; 0x80223b <MotorPosTaskHandle>
    412e:	90 91 3c 22 	lds	r25, 0x223C	; 0x80223c <MotorPosTaskHandle+0x1>
    4132:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <vTaskSuspend>
	DriverMotorSet(0,0);
    4136:	60 e0       	ldi	r22, 0x00	; 0
    4138:	70 e0       	ldi	r23, 0x00	; 0
    413a:	80 e0       	ldi	r24, 0x00	; 0
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	0c 94 0c 04 	jmp	0x818	; 0x818 <DriverMotorSet>

00004142 <InitMotorPosTask>:
//Private function prototypes
void WorkerMotorPos(void *pvParameters);

//Function definitions
void InitMotorPosTask()
{
    4142:	ef 92       	push	r14
    4144:	ff 92       	push	r15
    4146:	0f 93       	push	r16
	DriverMotorInit();
    4148:	0e 94 db 03 	call	0x7b6	; 0x7b6 <DriverMotorInit>
	xTaskCreate( WorkerMotorPos, "motpos", 256, NULL, tskIDLE_PRIORITY+3, &MotorPosTaskHandle );
    414c:	8b e3       	ldi	r24, 0x3B	; 59
    414e:	e8 2e       	mov	r14, r24
    4150:	82 e2       	ldi	r24, 0x22	; 34
    4152:	f8 2e       	mov	r15, r24
    4154:	03 e0       	ldi	r16, 0x03	; 3
    4156:	20 e0       	ldi	r18, 0x00	; 0
    4158:	30 e0       	ldi	r19, 0x00	; 0
    415a:	40 e0       	ldi	r20, 0x00	; 0
    415c:	51 e0       	ldi	r21, 0x01	; 1
    415e:	62 e4       	ldi	r22, 0x42	; 66
    4160:	71 e2       	ldi	r23, 0x21	; 33
    4162:	87 e3       	ldi	r24, 0x37	; 55
    4164:	9f e1       	ldi	r25, 0x1F	; 31
    4166:	0e 94 06 14 	call	0x280c	; 0x280c <xTaskCreate>
	DisableMotorPosTask(); 	
    416a:	0e 94 95 20 	call	0x412a	; 0x412a <DisableMotorPosTask>
	
	IncSetQueue=xQueueCreate(1,sizeof(IncSetStruct));
    416e:	40 e0       	ldi	r20, 0x00	; 0
    4170:	64 e0       	ldi	r22, 0x04	; 4
    4172:	81 e0       	ldi	r24, 0x01	; 1
    4174:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <xQueueGenericCreate>
    4178:	80 93 3d 22 	sts	0x223D, r24	; 0x80223d <IncSetQueue>
    417c:	90 93 3e 22 	sts	0x223E, r25	; 0x80223e <IncSetQueue+0x1>
	vSemaphoreCreateBinary(ResetSetpointSema);
    4180:	43 e0       	ldi	r20, 0x03	; 3
    4182:	60 e0       	ldi	r22, 0x00	; 0
    4184:	81 e0       	ldi	r24, 0x01	; 1
    4186:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <xQueueGenericCreate>
    418a:	80 93 3f 22 	sts	0x223F, r24	; 0x80223f <ResetSetpointSema>
    418e:	90 93 40 22 	sts	0x2240, r25	; 0x802240 <ResetSetpointSema+0x1>
    4192:	00 97       	sbiw	r24, 0x00	; 0
    4194:	51 f0       	breq	.+20     	; 0x41aa <InitMotorPosTask+0x68>
    4196:	20 e0       	ldi	r18, 0x00	; 0
    4198:	40 e0       	ldi	r20, 0x00	; 0
    419a:	50 e0       	ldi	r21, 0x00	; 0
    419c:	60 e0       	ldi	r22, 0x00	; 0
    419e:	70 e0       	ldi	r23, 0x00	; 0
}
    41a0:	0f 91       	pop	r16
    41a2:	ff 90       	pop	r15
    41a4:	ef 90       	pop	r14
	DriverMotorInit();
	xTaskCreate( WorkerMotorPos, "motpos", 256, NULL, tskIDLE_PRIORITY+3, &MotorPosTaskHandle );
	DisableMotorPosTask(); 	
	
	IncSetQueue=xQueueCreate(1,sizeof(IncSetStruct));
	vSemaphoreCreateBinary(ResetSetpointSema);
    41a6:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <xQueueGenericSend>
}
    41aa:	0f 91       	pop	r16
    41ac:	ff 90       	pop	r15
    41ae:	ef 90       	pop	r14
    41b0:	08 95       	ret

000041b2 <MotorPosIncSet>:
	DriverMotorSet(0,0);
}


void MotorPosIncSet(int16_t IncSet1,int16_t IncSet2)
{
    41b2:	cf 93       	push	r28
    41b4:	df 93       	push	r29
    41b6:	00 d0       	rcall	.+0      	; 0x41b8 <MotorPosIncSet+0x6>
    41b8:	1f 92       	push	r1
    41ba:	cd b7       	in	r28, 0x3d	; 61
    41bc:	de b7       	in	r29, 0x3e	; 62
	IncSetStruct IncSet;
	IncSet.IncSet1=IncSet1;
    41be:	89 83       	std	Y+1, r24	; 0x01
    41c0:	9a 83       	std	Y+2, r25	; 0x02
	IncSet.IncSet2=IncSet2;
    41c2:	6b 83       	std	Y+3, r22	; 0x03
    41c4:	7c 83       	std	Y+4, r23	; 0x04
	xQueueSend(IncSetQueue,&IncSet,portMAX_DELAY);
    41c6:	20 e0       	ldi	r18, 0x00	; 0
    41c8:	4f ef       	ldi	r20, 0xFF	; 255
    41ca:	5f ef       	ldi	r21, 0xFF	; 255
    41cc:	be 01       	movw	r22, r28
    41ce:	6f 5f       	subi	r22, 0xFF	; 255
    41d0:	7f 4f       	sbci	r23, 0xFF	; 255
    41d2:	80 91 3d 22 	lds	r24, 0x223D	; 0x80223d <IncSetQueue>
    41d6:	90 91 3e 22 	lds	r25, 0x223E	; 0x80223e <IncSetQueue+0x1>
    41da:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <xQueueGenericSend>
}
    41de:	24 96       	adiw	r28, 0x04	; 4
    41e0:	cd bf       	out	0x3d, r28	; 61
    41e2:	de bf       	out	0x3e, r29	; 62
    41e4:	df 91       	pop	r29
    41e6:	cf 91       	pop	r28
    41e8:	08 95       	ret

000041ea <WorkerMotorSpeed>:
	xQueueOverwrite(MotorSpeedQueue,&MotorSpeed);
	
}

void WorkerMotorSpeed(void *pvParameters)
{
    41ea:	cf 93       	push	r28
    41ec:	df 93       	push	r29
    41ee:	00 d0       	rcall	.+0      	; 0x41f0 <WorkerMotorSpeed+0x6>
    41f0:	1f 92       	push	r1
    41f2:	cd b7       	in	r28, 0x3d	; 61
    41f4:	de b7       	in	r29, 0x3e	; 62
	const TickType_t xPeriod = 10;
	MotorSpeedStruct MotorSpeed;

	xLastWakeTime = xTaskGetTickCount();
    41f6:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <xTaskGetTickCount>
    41fa:	80 93 41 22 	sts	0x2241, r24	; 0x802241 <xLastWakeTime>
    41fe:	90 93 42 22 	sts	0x2242, r25	; 0x802242 <xLastWakeTime+0x1>
	
	while (1)
	{
			xQueuePeek(MotorSpeedQueue,&MotorSpeed,portMAX_DELAY);
    4202:	4f ef       	ldi	r20, 0xFF	; 255
    4204:	5f ef       	ldi	r21, 0xFF	; 255
    4206:	be 01       	movw	r22, r28
    4208:	6f 5f       	subi	r22, 0xFF	; 255
    420a:	7f 4f       	sbci	r23, 0xFF	; 255
    420c:	80 91 45 22 	lds	r24, 0x2245	; 0x802245 <MotorSpeedQueue>
    4210:	90 91 46 22 	lds	r25, 0x2246	; 0x802246 <MotorSpeedQueue+0x1>
    4214:	0e 94 6d 11 	call	0x22da	; 0x22da <xQueuePeek>
			MotorPosIncSet(MotorSpeed.Speed1,MotorSpeed.Speed2);
    4218:	6b 81       	ldd	r22, Y+3	; 0x03
    421a:	7c 81       	ldd	r23, Y+4	; 0x04
    421c:	89 81       	ldd	r24, Y+1	; 0x01
    421e:	9a 81       	ldd	r25, Y+2	; 0x02
    4220:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <MotorPosIncSet>
			
			vTaskDelayUntil( &xLastWakeTime, xPeriod );
    4224:	6a e0       	ldi	r22, 0x0A	; 10
    4226:	70 e0       	ldi	r23, 0x00	; 0
    4228:	81 e4       	ldi	r24, 0x41	; 65
    422a:	92 e2       	ldi	r25, 0x22	; 34
    422c:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <vTaskDelayUntil>
    4230:	e8 cf       	rjmp	.-48     	; 0x4202 <WorkerMotorSpeed+0x18>

00004232 <InitMotorSpeedTask>:
//Private function prototypes
void WorkerMotorSpeed(void *pvParameters);

//Function definitions
void InitMotorSpeedTask()
{
    4232:	ef 92       	push	r14
    4234:	ff 92       	push	r15
    4236:	0f 93       	push	r16
	xTaskCreate( WorkerMotorSpeed, "motspd", 256, NULL, tskIDLE_PRIORITY+3, &MotorSpeedTaskHandle );	
    4238:	83 e4       	ldi	r24, 0x43	; 67
    423a:	e8 2e       	mov	r14, r24
    423c:	82 e2       	ldi	r24, 0x22	; 34
    423e:	f8 2e       	mov	r15, r24
    4240:	03 e0       	ldi	r16, 0x03	; 3
    4242:	20 e0       	ldi	r18, 0x00	; 0
    4244:	30 e0       	ldi	r19, 0x00	; 0
    4246:	40 e0       	ldi	r20, 0x00	; 0
    4248:	51 e0       	ldi	r21, 0x01	; 1
    424a:	69 e4       	ldi	r22, 0x49	; 73
    424c:	71 e2       	ldi	r23, 0x21	; 33
    424e:	85 ef       	ldi	r24, 0xF5	; 245
    4250:	90 e2       	ldi	r25, 0x20	; 32
    4252:	0e 94 06 14 	call	0x280c	; 0x280c <xTaskCreate>
	vTaskResume(MotorSpeedTaskHandle);
}

void DisableMotorSpeedTask()
{
	vTaskSuspend(MotorSpeedTaskHandle);
    4256:	80 91 43 22 	lds	r24, 0x2243	; 0x802243 <MotorSpeedTaskHandle>
    425a:	90 91 44 22 	lds	r25, 0x2244	; 0x802244 <MotorSpeedTaskHandle+0x1>
    425e:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <vTaskSuspend>
void InitMotorSpeedTask()
{
	xTaskCreate( WorkerMotorSpeed, "motspd", 256, NULL, tskIDLE_PRIORITY+3, &MotorSpeedTaskHandle );	
	DisableMotorSpeedTask();
	
	MotorSpeedQueue=xQueueCreate(1,sizeof(MotorSpeedStruct));
    4262:	40 e0       	ldi	r20, 0x00	; 0
    4264:	64 e0       	ldi	r22, 0x04	; 4
    4266:	81 e0       	ldi	r24, 0x01	; 1
    4268:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <xQueueGenericCreate>
    426c:	80 93 45 22 	sts	0x2245, r24	; 0x802245 <MotorSpeedQueue>
    4270:	90 93 46 22 	sts	0x2246, r25	; 0x802246 <MotorSpeedQueue+0x1>
}

void MotorSpeedSet(int16_t Speed1,int16_t Speed2)
{
	
	MotorSpeed.Speed1=Speed1;
    4274:	e7 e4       	ldi	r30, 0x47	; 71
    4276:	f2 e2       	ldi	r31, 0x22	; 34
    4278:	10 82       	st	Z, r1
    427a:	11 82       	std	Z+1, r1	; 0x01
	MotorSpeed.Speed2=Speed2;
    427c:	12 82       	std	Z+2, r1	; 0x02
    427e:	13 82       	std	Z+3, r1	; 0x03
	xQueueOverwrite(MotorSpeedQueue,&MotorSpeed);
    4280:	22 e0       	ldi	r18, 0x02	; 2
    4282:	40 e0       	ldi	r20, 0x00	; 0
    4284:	50 e0       	ldi	r21, 0x00	; 0
    4286:	bf 01       	movw	r22, r30
	xTaskCreate( WorkerMotorSpeed, "motspd", 256, NULL, tskIDLE_PRIORITY+3, &MotorSpeedTaskHandle );	
	DisableMotorSpeedTask();
	
	MotorSpeedQueue=xQueueCreate(1,sizeof(MotorSpeedStruct));
	MotorSpeedSet(0,0);
}
    4288:	0f 91       	pop	r16
    428a:	ff 90       	pop	r15
    428c:	ef 90       	pop	r14
void MotorSpeedSet(int16_t Speed1,int16_t Speed2)
{
	
	MotorSpeed.Speed1=Speed1;
	MotorSpeed.Speed2=Speed2;
	xQueueOverwrite(MotorSpeedQueue,&MotorSpeed);
    428e:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <xQueueGenericSend>

00004292 <EnableMotorSpeedTask>:
	MotorSpeedSet(0,0);
}

void EnableMotorSpeedTask()
{
	xLastWakeTime = xTaskGetTickCount();
    4292:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <xTaskGetTickCount>
    4296:	80 93 41 22 	sts	0x2241, r24	; 0x802241 <xLastWakeTime>
    429a:	90 93 42 22 	sts	0x2242, r25	; 0x802242 <xLastWakeTime+0x1>
	vTaskResume(MotorSpeedTaskHandle);
    429e:	80 91 43 22 	lds	r24, 0x2243	; 0x802243 <MotorSpeedTaskHandle>
    42a2:	90 91 44 22 	lds	r25, 0x2244	; 0x802244 <MotorSpeedTaskHandle+0x1>
    42a6:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <vTaskResume>

000042aa <DisableMotorSpeedTask>:
}

void DisableMotorSpeedTask()
{
	vTaskSuspend(MotorSpeedTaskHandle);
    42aa:	80 91 43 22 	lds	r24, 0x2243	; 0x802243 <MotorSpeedTaskHandle>
    42ae:	90 91 44 22 	lds	r25, 0x2244	; 0x802244 <MotorSpeedTaskHandle+0x1>
    42b2:	0c 94 3c 15 	jmp	0x2a78	; 0x2a78 <vTaskSuspend>

000042b6 <MotorSpeedSet>:
}

void MotorSpeedSet(int16_t Speed1,int16_t Speed2)
{
	
	MotorSpeed.Speed1=Speed1;
    42b6:	e7 e4       	ldi	r30, 0x47	; 71
    42b8:	f2 e2       	ldi	r31, 0x22	; 34
    42ba:	80 83       	st	Z, r24
    42bc:	91 83       	std	Z+1, r25	; 0x01
	MotorSpeed.Speed2=Speed2;
    42be:	62 83       	std	Z+2, r22	; 0x02
    42c0:	73 83       	std	Z+3, r23	; 0x03
	xQueueOverwrite(MotorSpeedQueue,&MotorSpeed);
    42c2:	22 e0       	ldi	r18, 0x02	; 2
    42c4:	40 e0       	ldi	r20, 0x00	; 0
    42c6:	50 e0       	ldi	r21, 0x00	; 0
    42c8:	bf 01       	movw	r22, r30
    42ca:	80 91 45 22 	lds	r24, 0x2245	; 0x802245 <MotorSpeedQueue>
    42ce:	90 91 46 22 	lds	r25, 0x2246	; 0x802246 <MotorSpeedQueue+0x1>
    42d2:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <xQueueGenericSend>

000042d6 <workerSleepTask>:
void workerSleepTask(void *pvParameters){
	while(1) {
		// Do nothing
		vTaskDelay(2000);
		uint8_t portf = PORTF.IN;
		printf("PORTF: %d\r", portf);
    42d6:	c0 e5       	ldi	r28, 0x50	; 80
    42d8:	d1 e2       	ldi	r29, 0x21	; 33

		DriverPowerVccAuxSet(0);
		PORTF.DIRCLR = 0b00111111; 
    42da:	1f e3       	ldi	r17, 0x3F	; 63


void workerSleepTask(void *pvParameters){
	while(1) {
		// Do nothing
		vTaskDelay(2000);
    42dc:	80 ed       	ldi	r24, 0xD0	; 208
    42de:	97 e0       	ldi	r25, 0x07	; 7
    42e0:	0e 94 0f 18 	call	0x301e	; 0x301e <vTaskDelay>
		uint8_t portf = PORTF.IN;
    42e4:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
		printf("PORTF: %d\r", portf);
    42e8:	1f 92       	push	r1
    42ea:	8f 93       	push	r24
    42ec:	df 93       	push	r29
    42ee:	cf 93       	push	r28
    42f0:	0e 94 c3 2a 	call	0x5586	; 0x5586 <printf>

		DriverPowerVccAuxSet(0);
    42f4:	80 e0       	ldi	r24, 0x00	; 0
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	0e 94 cc 06 	call	0xd98	; 0xd98 <DriverPowerVccAuxSet>
		PORTF.DIRCLR = 0b00111111; 
    42fc:	10 93 a2 06 	sts	0x06A2, r17	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7006a2>
		PMIC.CTRL &= 0b11111110; // Disable Low level interrupts
    4300:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    4304:	8e 7f       	andi	r24, 0xFE	; 254
    4306:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		vTaskDelay(10);
    430a:	8a e0       	ldi	r24, 0x0A	; 10
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	0e 94 0f 18 	call	0x301e	; 0x301e <vTaskDelay>
		sleep_mode();
    4312:	80 91 48 00 	lds	r24, 0x0048	; 0x800048 <__TEXT_REGION_LENGTH__+0x700048>
    4316:	81 60       	ori	r24, 0x01	; 1
    4318:	80 93 48 00 	sts	0x0048, r24	; 0x800048 <__TEXT_REGION_LENGTH__+0x700048>
    431c:	88 95       	sleep
    431e:	80 91 48 00 	lds	r24, 0x0048	; 0x800048 <__TEXT_REGION_LENGTH__+0x700048>
    4322:	8e 7f       	andi	r24, 0xFE	; 254
    4324:	80 93 48 00 	sts	0x0048, r24	; 0x800048 <__TEXT_REGION_LENGTH__+0x700048>
    4328:	0f 90       	pop	r0
    432a:	0f 90       	pop	r0
    432c:	0f 90       	pop	r0
    432e:	0f 90       	pop	r0
    4330:	d5 cf       	rjmp	.-86     	; 0x42dc <workerSleepTask+0x6>

00004332 <InitSleepTask>:
volatile bool sleepflag;


static void workerSleepTask(void *pvParameters);

void InitSleepTask(void) {
    4332:	ef 92       	push	r14
    4334:	ff 92       	push	r15
    4336:	0f 93       	push	r16
	//Enable interrupts
	PMIC.CTRL |= 0b10000111;
    4338:	e0 ea       	ldi	r30, 0xA0	; 160
    433a:	f0 e0       	ldi	r31, 0x00	; 0
    433c:	82 81       	ldd	r24, Z+2	; 0x02
    433e:	87 68       	ori	r24, 0x87	; 135
    4340:	82 83       	std	Z+2, r24	; 0x02
	sei();
    4342:	78 94       	sei
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    4344:	e8 e4       	ldi	r30, 0x48	; 72
    4346:	f0 e0       	ldi	r31, 0x00	; 0
    4348:	80 81       	ld	r24, Z
    434a:	81 7f       	andi	r24, 0xF1	; 241
    434c:	84 60       	ori	r24, 0x04	; 4
    434e:	80 83       	st	Z, r24
	
	// Enable interrupt on pin 7
	PORTF.DIRCLR = 0b10000000;
    4350:	e0 ea       	ldi	r30, 0xA0	; 160
    4352:	f6 e0       	ldi	r31, 0x06	; 6
    4354:	80 e8       	ldi	r24, 0x80	; 128
    4356:	82 83       	std	Z+2, r24	; 0x02
	PORTF.INT0MASK = 0b10000000;
    4358:	82 87       	std	Z+10, r24	; 0x0a
	PORTF.PIN7CTRL = 0b01011001;
    435a:	89 e5       	ldi	r24, 0x59	; 89
    435c:	87 8b       	std	Z+23, r24	; 0x17
	
	xTaskCreate( workerSleepTask , "slp", 256, NULL, tskIDLE_PRIORITY, NULL );
    435e:	e1 2c       	mov	r14, r1
    4360:	f1 2c       	mov	r15, r1
    4362:	00 e0       	ldi	r16, 0x00	; 0
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	30 e0       	ldi	r19, 0x00	; 0
    4368:	40 e0       	ldi	r20, 0x00	; 0
    436a:	51 e0       	ldi	r21, 0x01	; 1
    436c:	6b e5       	ldi	r22, 0x5B	; 91
    436e:	71 e2       	ldi	r23, 0x21	; 33
    4370:	8b e6       	ldi	r24, 0x6B	; 107
    4372:	91 e2       	ldi	r25, 0x21	; 33
    4374:	0e 94 06 14 	call	0x280c	; 0x280c <xTaskCreate>
}
    4378:	0f 91       	pop	r16
    437a:	ff 90       	pop	r15
    437c:	ef 90       	pop	r14
    437e:	08 95       	ret

00004380 <__vector_104>:
		vTaskDelay(10);
		sleep_mode();
	}
}

ISR(PORTF_INT0_vect) {
    4380:	1f 92       	push	r1
    4382:	0f 92       	push	r0
    4384:	0f b6       	in	r0, 0x3f	; 63
    4386:	0f 92       	push	r0
    4388:	11 24       	eor	r1, r1
    438a:	0b b6       	in	r0, 0x3b	; 59
    438c:	0f 92       	push	r0
    438e:	2f 93       	push	r18
    4390:	3f 93       	push	r19
    4392:	4f 93       	push	r20
    4394:	5f 93       	push	r21
    4396:	6f 93       	push	r22
    4398:	7f 93       	push	r23
    439a:	8f 93       	push	r24
    439c:	9f 93       	push	r25
    439e:	af 93       	push	r26
    43a0:	bf 93       	push	r27
    43a2:	ef 93       	push	r30
    43a4:	ff 93       	push	r31
	DriverLedToggle(0b1000);
    43a6:	88 e0       	ldi	r24, 0x08	; 8
    43a8:	0e 94 cb 03 	call	0x796	; 0x796 <DriverLedToggle>
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
	// Reset sleep settings
	PMIC.CTRL |= 0b00000111;
    43ac:	e0 ea       	ldi	r30, 0xA0	; 160
    43ae:	f0 e0       	ldi	r31, 0x00	; 0
    43b0:	82 81       	ldd	r24, Z+2	; 0x02
    43b2:	87 60       	ori	r24, 0x07	; 7
    43b4:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRSET = 0b00111111;
    43b6:	8f e3       	ldi	r24, 0x3F	; 63
    43b8:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
	DriverPowerVccAuxSet(1);
    43bc:	81 e0       	ldi	r24, 0x01	; 1
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	0e 94 cc 06 	call	0xd98	; 0xd98 <DriverPowerVccAuxSet>
	printf("INTERRUPT!");
    43c4:	87 e5       	ldi	r24, 0x57	; 87
    43c6:	90 e2       	ldi	r25, 0x20	; 32
    43c8:	9f 93       	push	r25
    43ca:	8f 93       	push	r24
    43cc:	0e 94 c3 2a 	call	0x5586	; 0x5586 <printf>
	
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}
    43d0:	0f 90       	pop	r0
    43d2:	0f 90       	pop	r0
    43d4:	ff 91       	pop	r31
    43d6:	ef 91       	pop	r30
    43d8:	bf 91       	pop	r27
    43da:	af 91       	pop	r26
    43dc:	9f 91       	pop	r25
    43de:	8f 91       	pop	r24
    43e0:	7f 91       	pop	r23
    43e2:	6f 91       	pop	r22
    43e4:	5f 91       	pop	r21
    43e6:	4f 91       	pop	r20
    43e8:	3f 91       	pop	r19
    43ea:	2f 91       	pop	r18
    43ec:	0f 90       	pop	r0
    43ee:	0b be       	out	0x3b, r0	; 59
    43f0:	0f 90       	pop	r0
    43f2:	0f be       	out	0x3f, r0	; 63
    43f4:	0f 90       	pop	r0
    43f6:	1f 90       	pop	r1
    43f8:	18 95       	reti

000043fa <WorkerStartup>:
{
	xTaskCreate( WorkerStartup, "startup", 256, NULL, tskIDLE_PRIORITY+3, NULL );	
}

static void WorkerStartup(void *pvParameters)
{
    43fa:	cf 93       	push	r28
    43fc:	df 93       	push	r29
    43fe:	cd b7       	in	r28, 0x3d	; 61
    4400:	de b7       	in	r29, 0x3e	; 62
    4402:	28 97       	sbiw	r28, 0x08	; 8
    4404:	cd bf       	out	0x3d, r28	; 61
    4406:	de bf       	out	0x3e, r29	; 62
	int res;
	
	DriverPowerVccAuxSet(1);//Enable Auxillary power line
    4408:	81 e0       	ldi	r24, 0x01	; 1
    440a:	0e 94 cc 06 	call	0xd98	; 0xd98 <DriverPowerVccAuxSet>
	vTaskDelay(1);
    440e:	81 e0       	ldi	r24, 0x01	; 1
    4410:	90 e0       	ldi	r25, 0x00	; 0
    4412:	0e 94 0f 18 	call	0x301e	; 0x301e <vTaskDelay>
	DriverCursorstickInit();//Initialize cursor stick
    4416:	0e 94 ba 02 	call	0x574	; 0x574 <DriverCursorstickInit>
	DriverLedInit();		//Initialize LED's
    441a:	0e 94 ad 03 	call	0x75a	; 0x75a <DriverLedInit>
	DriverUSARTInit();		//USART init and link to stdio
    441e:	0e 94 c1 08 	call	0x1182	; 0x1182 <DriverUSARTInit>
	DriverPowerInit();		//Initialize aux power driver
    4422:	0e 94 c8 06 	call	0xd90	; 0xd90 <DriverPowerInit>
	
	DriverTWIMInit();		//Initialize TWI in master mode
    4426:	0e 94 f1 06 	call	0xde2	; 0xde2 <DriverTWIMInit>
	DriverPL9823Init();		//Initialize PL9823 LEDs
    442a:	0e 94 c2 06 	call	0xd84	; 0xd84 <DriverPL9823Init>
	DriverAdcInit();		//Initialize ADC driver
    442e:	0e 94 b8 01 	call	0x370	; 0x370 <DriverAdcInit>
	//DriverMotorInit();
	
	//DriverOLEDInit(2);		//Initialize OLED display
	DriverAdps9960Init();	//Initialize color sensor	
    4432:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DriverAdps9960Init>
	//DriverVL53L0XInit();	//Initialize rangefinder

	
	vTaskDelay(50);
    4436:	82 e3       	ldi	r24, 0x32	; 50
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	0e 94 0f 18 	call	0x301e	; 0x301e <vTaskDelay>
	
	//Enable test output (T21)
	PORTA.DIRSET=1<<5;	
    443e:	80 e2       	ldi	r24, 0x20	; 32
    4440:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	//Initialize application tasks			
	
	//InitOLEDMenuTask();
	InitADCTask();
    4444:	0e 94 33 1b 	call	0x3666	; 0x3666 <InitADCTask>
	InitMotorPosTask();
    4448:	0e 94 a1 20 	call	0x4142	; 0x4142 <InitMotorPosTask>
	InitMotorSpeedTask();
    444c:	0e 94 19 21 	call	0x4232	; 0x4232 <InitMotorSpeedTask>
	InitLineFollowerSpeedTask();
    4450:	0e 94 83 1c 	call	0x3906	; 0x3906 <InitLineFollowerSpeedTask>
	InitLineFollowerDirectTask();
    4454:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <InitLineFollowerDirectTask>
	//InitRGBTask();
	//InitGyroTask();
	//InitTerminalTask();
	InitMotionTask();
    4458:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <InitMotionTask>
	InitSleepTask();
    445c:	0e 94 99 21 	call	0x4332	; 0x4332 <InitSleepTask>
	
	float Pars[MAX_PARS];
	DriveSegment(Pars[0]);
    4460:	69 81       	ldd	r22, Y+1	; 0x01
    4462:	7a 81       	ldd	r23, Y+2	; 0x02
    4464:	8b 81       	ldd	r24, Y+3	; 0x03
    4466:	9c 81       	ldd	r25, Y+4	; 0x04
    4468:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <DriveSegment>
	
	vTaskSuspend(NULL);
    446c:	80 e0       	ldi	r24, 0x00	; 0
    446e:	90 e0       	ldi	r25, 0x00	; 0

}
    4470:	28 96       	adiw	r28, 0x08	; 8
    4472:	cd bf       	out	0x3d, r28	; 61
    4474:	de bf       	out	0x3e, r29	; 62
    4476:	df 91       	pop	r29
    4478:	cf 91       	pop	r28
	InitSleepTask();
	
	float Pars[MAX_PARS];
	DriveSegment(Pars[0]);
	
	vTaskSuspend(NULL);
    447a:	0c 94 3c 15 	jmp	0x2a78	; 0x2a78 <vTaskSuspend>

0000447e <InitStartupTask>:
//Private function prototypes
static void WorkerStartup(void *pvParameters);

//Function definitions
void InitStartupTask()
{
    447e:	ef 92       	push	r14
    4480:	ff 92       	push	r15
    4482:	0f 93       	push	r16
	xTaskCreate( WorkerStartup, "startup", 256, NULL, tskIDLE_PRIORITY+3, NULL );	
    4484:	e1 2c       	mov	r14, r1
    4486:	f1 2c       	mov	r15, r1
    4488:	03 e0       	ldi	r16, 0x03	; 3
    448a:	20 e0       	ldi	r18, 0x00	; 0
    448c:	30 e0       	ldi	r19, 0x00	; 0
    448e:	40 e0       	ldi	r20, 0x00	; 0
    4490:	51 e0       	ldi	r21, 0x01	; 1
    4492:	6f e5       	ldi	r22, 0x5F	; 95
    4494:	71 e2       	ldi	r23, 0x21	; 33
    4496:	8d ef       	ldi	r24, 0xFD	; 253
    4498:	91 e2       	ldi	r25, 0x21	; 33
    449a:	0e 94 06 14 	call	0x280c	; 0x280c <xTaskCreate>
}
    449e:	0f 91       	pop	r16
    44a0:	ff 90       	pop	r15
    44a2:	ef 90       	pop	r14
    44a4:	08 95       	ret

000044a6 <__subsf3>:
    44a6:	50 58       	subi	r21, 0x80	; 128

000044a8 <__addsf3>:
    44a8:	bb 27       	eor	r27, r27
    44aa:	aa 27       	eor	r26, r26
    44ac:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <__addsf3x>
    44b0:	0c 94 e5 23 	jmp	0x47ca	; 0x47ca <__fp_round>
    44b4:	0e 94 d7 23 	call	0x47ae	; 0x47ae <__fp_pscA>
    44b8:	38 f0       	brcs	.+14     	; 0x44c8 <__addsf3+0x20>
    44ba:	0e 94 de 23 	call	0x47bc	; 0x47bc <__fp_pscB>
    44be:	20 f0       	brcs	.+8      	; 0x44c8 <__addsf3+0x20>
    44c0:	39 f4       	brne	.+14     	; 0x44d0 <__addsf3+0x28>
    44c2:	9f 3f       	cpi	r25, 0xFF	; 255
    44c4:	19 f4       	brne	.+6      	; 0x44cc <__addsf3+0x24>
    44c6:	26 f4       	brtc	.+8      	; 0x44d0 <__addsf3+0x28>
    44c8:	0c 94 d4 23 	jmp	0x47a8	; 0x47a8 <__fp_nan>
    44cc:	0e f4       	brtc	.+2      	; 0x44d0 <__addsf3+0x28>
    44ce:	e0 95       	com	r30
    44d0:	e7 fb       	bst	r30, 7
    44d2:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__fp_inf>

000044d6 <__addsf3x>:
    44d6:	e9 2f       	mov	r30, r25
    44d8:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__fp_split3>
    44dc:	58 f3       	brcs	.-42     	; 0x44b4 <__addsf3+0xc>
    44de:	ba 17       	cp	r27, r26
    44e0:	62 07       	cpc	r22, r18
    44e2:	73 07       	cpc	r23, r19
    44e4:	84 07       	cpc	r24, r20
    44e6:	95 07       	cpc	r25, r21
    44e8:	20 f0       	brcs	.+8      	; 0x44f2 <__addsf3x+0x1c>
    44ea:	79 f4       	brne	.+30     	; 0x450a <__addsf3x+0x34>
    44ec:	a6 f5       	brtc	.+104    	; 0x4556 <__addsf3x+0x80>
    44ee:	0c 94 18 24 	jmp	0x4830	; 0x4830 <__fp_zero>
    44f2:	0e f4       	brtc	.+2      	; 0x44f6 <__addsf3x+0x20>
    44f4:	e0 95       	com	r30
    44f6:	0b 2e       	mov	r0, r27
    44f8:	ba 2f       	mov	r27, r26
    44fa:	a0 2d       	mov	r26, r0
    44fc:	0b 01       	movw	r0, r22
    44fe:	b9 01       	movw	r22, r18
    4500:	90 01       	movw	r18, r0
    4502:	0c 01       	movw	r0, r24
    4504:	ca 01       	movw	r24, r20
    4506:	a0 01       	movw	r20, r0
    4508:	11 24       	eor	r1, r1
    450a:	ff 27       	eor	r31, r31
    450c:	59 1b       	sub	r21, r25
    450e:	99 f0       	breq	.+38     	; 0x4536 <__addsf3x+0x60>
    4510:	59 3f       	cpi	r21, 0xF9	; 249
    4512:	50 f4       	brcc	.+20     	; 0x4528 <__addsf3x+0x52>
    4514:	50 3e       	cpi	r21, 0xE0	; 224
    4516:	68 f1       	brcs	.+90     	; 0x4572 <__addsf3x+0x9c>
    4518:	1a 16       	cp	r1, r26
    451a:	f0 40       	sbci	r31, 0x00	; 0
    451c:	a2 2f       	mov	r26, r18
    451e:	23 2f       	mov	r18, r19
    4520:	34 2f       	mov	r19, r20
    4522:	44 27       	eor	r20, r20
    4524:	58 5f       	subi	r21, 0xF8	; 248
    4526:	f3 cf       	rjmp	.-26     	; 0x450e <__addsf3x+0x38>
    4528:	46 95       	lsr	r20
    452a:	37 95       	ror	r19
    452c:	27 95       	ror	r18
    452e:	a7 95       	ror	r26
    4530:	f0 40       	sbci	r31, 0x00	; 0
    4532:	53 95       	inc	r21
    4534:	c9 f7       	brne	.-14     	; 0x4528 <__addsf3x+0x52>
    4536:	7e f4       	brtc	.+30     	; 0x4556 <__addsf3x+0x80>
    4538:	1f 16       	cp	r1, r31
    453a:	ba 0b       	sbc	r27, r26
    453c:	62 0b       	sbc	r22, r18
    453e:	73 0b       	sbc	r23, r19
    4540:	84 0b       	sbc	r24, r20
    4542:	ba f0       	brmi	.+46     	; 0x4572 <__addsf3x+0x9c>
    4544:	91 50       	subi	r25, 0x01	; 1
    4546:	a1 f0       	breq	.+40     	; 0x4570 <__addsf3x+0x9a>
    4548:	ff 0f       	add	r31, r31
    454a:	bb 1f       	adc	r27, r27
    454c:	66 1f       	adc	r22, r22
    454e:	77 1f       	adc	r23, r23
    4550:	88 1f       	adc	r24, r24
    4552:	c2 f7       	brpl	.-16     	; 0x4544 <__addsf3x+0x6e>
    4554:	0e c0       	rjmp	.+28     	; 0x4572 <__addsf3x+0x9c>
    4556:	ba 0f       	add	r27, r26
    4558:	62 1f       	adc	r22, r18
    455a:	73 1f       	adc	r23, r19
    455c:	84 1f       	adc	r24, r20
    455e:	48 f4       	brcc	.+18     	; 0x4572 <__addsf3x+0x9c>
    4560:	87 95       	ror	r24
    4562:	77 95       	ror	r23
    4564:	67 95       	ror	r22
    4566:	b7 95       	ror	r27
    4568:	f7 95       	ror	r31
    456a:	9e 3f       	cpi	r25, 0xFE	; 254
    456c:	08 f0       	brcs	.+2      	; 0x4570 <__addsf3x+0x9a>
    456e:	b0 cf       	rjmp	.-160    	; 0x44d0 <__addsf3+0x28>
    4570:	93 95       	inc	r25
    4572:	88 0f       	add	r24, r24
    4574:	08 f0       	brcs	.+2      	; 0x4578 <__addsf3x+0xa2>
    4576:	99 27       	eor	r25, r25
    4578:	ee 0f       	add	r30, r30
    457a:	97 95       	ror	r25
    457c:	87 95       	ror	r24
    457e:	08 95       	ret

00004580 <__cmpsf2>:
    4580:	0e 94 aa 23 	call	0x4754	; 0x4754 <__fp_cmp>
    4584:	08 f4       	brcc	.+2      	; 0x4588 <__cmpsf2+0x8>
    4586:	81 e0       	ldi	r24, 0x01	; 1
    4588:	08 95       	ret

0000458a <__divsf3>:
    458a:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <__divsf3x>
    458e:	0c 94 e5 23 	jmp	0x47ca	; 0x47ca <__fp_round>
    4592:	0e 94 de 23 	call	0x47bc	; 0x47bc <__fp_pscB>
    4596:	58 f0       	brcs	.+22     	; 0x45ae <__divsf3+0x24>
    4598:	0e 94 d7 23 	call	0x47ae	; 0x47ae <__fp_pscA>
    459c:	40 f0       	brcs	.+16     	; 0x45ae <__divsf3+0x24>
    459e:	29 f4       	brne	.+10     	; 0x45aa <__divsf3+0x20>
    45a0:	5f 3f       	cpi	r21, 0xFF	; 255
    45a2:	29 f0       	breq	.+10     	; 0x45ae <__divsf3+0x24>
    45a4:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__fp_inf>
    45a8:	51 11       	cpse	r21, r1
    45aa:	0c 94 19 24 	jmp	0x4832	; 0x4832 <__fp_szero>
    45ae:	0c 94 d4 23 	jmp	0x47a8	; 0x47a8 <__fp_nan>

000045b2 <__divsf3x>:
    45b2:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__fp_split3>
    45b6:	68 f3       	brcs	.-38     	; 0x4592 <__divsf3+0x8>

000045b8 <__divsf3_pse>:
    45b8:	99 23       	and	r25, r25
    45ba:	b1 f3       	breq	.-20     	; 0x45a8 <__divsf3+0x1e>
    45bc:	55 23       	and	r21, r21
    45be:	91 f3       	breq	.-28     	; 0x45a4 <__divsf3+0x1a>
    45c0:	95 1b       	sub	r25, r21
    45c2:	55 0b       	sbc	r21, r21
    45c4:	bb 27       	eor	r27, r27
    45c6:	aa 27       	eor	r26, r26
    45c8:	62 17       	cp	r22, r18
    45ca:	73 07       	cpc	r23, r19
    45cc:	84 07       	cpc	r24, r20
    45ce:	38 f0       	brcs	.+14     	; 0x45de <__divsf3_pse+0x26>
    45d0:	9f 5f       	subi	r25, 0xFF	; 255
    45d2:	5f 4f       	sbci	r21, 0xFF	; 255
    45d4:	22 0f       	add	r18, r18
    45d6:	33 1f       	adc	r19, r19
    45d8:	44 1f       	adc	r20, r20
    45da:	aa 1f       	adc	r26, r26
    45dc:	a9 f3       	breq	.-22     	; 0x45c8 <__divsf3_pse+0x10>
    45de:	35 d0       	rcall	.+106    	; 0x464a <__divsf3_pse+0x92>
    45e0:	0e 2e       	mov	r0, r30
    45e2:	3a f0       	brmi	.+14     	; 0x45f2 <__divsf3_pse+0x3a>
    45e4:	e0 e8       	ldi	r30, 0x80	; 128
    45e6:	32 d0       	rcall	.+100    	; 0x464c <__divsf3_pse+0x94>
    45e8:	91 50       	subi	r25, 0x01	; 1
    45ea:	50 40       	sbci	r21, 0x00	; 0
    45ec:	e6 95       	lsr	r30
    45ee:	00 1c       	adc	r0, r0
    45f0:	ca f7       	brpl	.-14     	; 0x45e4 <__divsf3_pse+0x2c>
    45f2:	2b d0       	rcall	.+86     	; 0x464a <__divsf3_pse+0x92>
    45f4:	fe 2f       	mov	r31, r30
    45f6:	29 d0       	rcall	.+82     	; 0x464a <__divsf3_pse+0x92>
    45f8:	66 0f       	add	r22, r22
    45fa:	77 1f       	adc	r23, r23
    45fc:	88 1f       	adc	r24, r24
    45fe:	bb 1f       	adc	r27, r27
    4600:	26 17       	cp	r18, r22
    4602:	37 07       	cpc	r19, r23
    4604:	48 07       	cpc	r20, r24
    4606:	ab 07       	cpc	r26, r27
    4608:	b0 e8       	ldi	r27, 0x80	; 128
    460a:	09 f0       	breq	.+2      	; 0x460e <__divsf3_pse+0x56>
    460c:	bb 0b       	sbc	r27, r27
    460e:	80 2d       	mov	r24, r0
    4610:	bf 01       	movw	r22, r30
    4612:	ff 27       	eor	r31, r31
    4614:	93 58       	subi	r25, 0x83	; 131
    4616:	5f 4f       	sbci	r21, 0xFF	; 255
    4618:	3a f0       	brmi	.+14     	; 0x4628 <__divsf3_pse+0x70>
    461a:	9e 3f       	cpi	r25, 0xFE	; 254
    461c:	51 05       	cpc	r21, r1
    461e:	78 f0       	brcs	.+30     	; 0x463e <__divsf3_pse+0x86>
    4620:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__fp_inf>
    4624:	0c 94 19 24 	jmp	0x4832	; 0x4832 <__fp_szero>
    4628:	5f 3f       	cpi	r21, 0xFF	; 255
    462a:	e4 f3       	brlt	.-8      	; 0x4624 <__divsf3_pse+0x6c>
    462c:	98 3e       	cpi	r25, 0xE8	; 232
    462e:	d4 f3       	brlt	.-12     	; 0x4624 <__divsf3_pse+0x6c>
    4630:	86 95       	lsr	r24
    4632:	77 95       	ror	r23
    4634:	67 95       	ror	r22
    4636:	b7 95       	ror	r27
    4638:	f7 95       	ror	r31
    463a:	9f 5f       	subi	r25, 0xFF	; 255
    463c:	c9 f7       	brne	.-14     	; 0x4630 <__divsf3_pse+0x78>
    463e:	88 0f       	add	r24, r24
    4640:	91 1d       	adc	r25, r1
    4642:	96 95       	lsr	r25
    4644:	87 95       	ror	r24
    4646:	97 f9       	bld	r25, 7
    4648:	08 95       	ret
    464a:	e1 e0       	ldi	r30, 0x01	; 1
    464c:	66 0f       	add	r22, r22
    464e:	77 1f       	adc	r23, r23
    4650:	88 1f       	adc	r24, r24
    4652:	bb 1f       	adc	r27, r27
    4654:	62 17       	cp	r22, r18
    4656:	73 07       	cpc	r23, r19
    4658:	84 07       	cpc	r24, r20
    465a:	ba 07       	cpc	r27, r26
    465c:	20 f0       	brcs	.+8      	; 0x4666 <__divsf3_pse+0xae>
    465e:	62 1b       	sub	r22, r18
    4660:	73 0b       	sbc	r23, r19
    4662:	84 0b       	sbc	r24, r20
    4664:	ba 0b       	sbc	r27, r26
    4666:	ee 1f       	adc	r30, r30
    4668:	88 f7       	brcc	.-30     	; 0x464c <__divsf3_pse+0x94>
    466a:	e0 95       	com	r30
    466c:	08 95       	ret

0000466e <__fixsfsi>:
    466e:	0e 94 3e 23 	call	0x467c	; 0x467c <__fixunssfsi>
    4672:	68 94       	set
    4674:	b1 11       	cpse	r27, r1
    4676:	0c 94 19 24 	jmp	0x4832	; 0x4832 <__fp_szero>
    467a:	08 95       	ret

0000467c <__fixunssfsi>:
    467c:	0e 94 fe 23 	call	0x47fc	; 0x47fc <__fp_splitA>
    4680:	88 f0       	brcs	.+34     	; 0x46a4 <__fixunssfsi+0x28>
    4682:	9f 57       	subi	r25, 0x7F	; 127
    4684:	98 f0       	brcs	.+38     	; 0x46ac <__fixunssfsi+0x30>
    4686:	b9 2f       	mov	r27, r25
    4688:	99 27       	eor	r25, r25
    468a:	b7 51       	subi	r27, 0x17	; 23
    468c:	b0 f0       	brcs	.+44     	; 0x46ba <__fixunssfsi+0x3e>
    468e:	e1 f0       	breq	.+56     	; 0x46c8 <__fixunssfsi+0x4c>
    4690:	66 0f       	add	r22, r22
    4692:	77 1f       	adc	r23, r23
    4694:	88 1f       	adc	r24, r24
    4696:	99 1f       	adc	r25, r25
    4698:	1a f0       	brmi	.+6      	; 0x46a0 <__fixunssfsi+0x24>
    469a:	ba 95       	dec	r27
    469c:	c9 f7       	brne	.-14     	; 0x4690 <__fixunssfsi+0x14>
    469e:	14 c0       	rjmp	.+40     	; 0x46c8 <__fixunssfsi+0x4c>
    46a0:	b1 30       	cpi	r27, 0x01	; 1
    46a2:	91 f0       	breq	.+36     	; 0x46c8 <__fixunssfsi+0x4c>
    46a4:	0e 94 18 24 	call	0x4830	; 0x4830 <__fp_zero>
    46a8:	b1 e0       	ldi	r27, 0x01	; 1
    46aa:	08 95       	ret
    46ac:	0c 94 18 24 	jmp	0x4830	; 0x4830 <__fp_zero>
    46b0:	67 2f       	mov	r22, r23
    46b2:	78 2f       	mov	r23, r24
    46b4:	88 27       	eor	r24, r24
    46b6:	b8 5f       	subi	r27, 0xF8	; 248
    46b8:	39 f0       	breq	.+14     	; 0x46c8 <__fixunssfsi+0x4c>
    46ba:	b9 3f       	cpi	r27, 0xF9	; 249
    46bc:	cc f3       	brlt	.-14     	; 0x46b0 <__fixunssfsi+0x34>
    46be:	86 95       	lsr	r24
    46c0:	77 95       	ror	r23
    46c2:	67 95       	ror	r22
    46c4:	b3 95       	inc	r27
    46c6:	d9 f7       	brne	.-10     	; 0x46be <__fixunssfsi+0x42>
    46c8:	3e f4       	brtc	.+14     	; 0x46d8 <__fixunssfsi+0x5c>
    46ca:	90 95       	com	r25
    46cc:	80 95       	com	r24
    46ce:	70 95       	com	r23
    46d0:	61 95       	neg	r22
    46d2:	7f 4f       	sbci	r23, 0xFF	; 255
    46d4:	8f 4f       	sbci	r24, 0xFF	; 255
    46d6:	9f 4f       	sbci	r25, 0xFF	; 255
    46d8:	08 95       	ret

000046da <__floatunsisf>:
    46da:	e8 94       	clt
    46dc:	09 c0       	rjmp	.+18     	; 0x46f0 <__floatsisf+0x12>

000046de <__floatsisf>:
    46de:	97 fb       	bst	r25, 7
    46e0:	3e f4       	brtc	.+14     	; 0x46f0 <__floatsisf+0x12>
    46e2:	90 95       	com	r25
    46e4:	80 95       	com	r24
    46e6:	70 95       	com	r23
    46e8:	61 95       	neg	r22
    46ea:	7f 4f       	sbci	r23, 0xFF	; 255
    46ec:	8f 4f       	sbci	r24, 0xFF	; 255
    46ee:	9f 4f       	sbci	r25, 0xFF	; 255
    46f0:	99 23       	and	r25, r25
    46f2:	a9 f0       	breq	.+42     	; 0x471e <__floatsisf+0x40>
    46f4:	f9 2f       	mov	r31, r25
    46f6:	96 e9       	ldi	r25, 0x96	; 150
    46f8:	bb 27       	eor	r27, r27
    46fa:	93 95       	inc	r25
    46fc:	f6 95       	lsr	r31
    46fe:	87 95       	ror	r24
    4700:	77 95       	ror	r23
    4702:	67 95       	ror	r22
    4704:	b7 95       	ror	r27
    4706:	f1 11       	cpse	r31, r1
    4708:	f8 cf       	rjmp	.-16     	; 0x46fa <__floatsisf+0x1c>
    470a:	fa f4       	brpl	.+62     	; 0x474a <__floatsisf+0x6c>
    470c:	bb 0f       	add	r27, r27
    470e:	11 f4       	brne	.+4      	; 0x4714 <__floatsisf+0x36>
    4710:	60 ff       	sbrs	r22, 0
    4712:	1b c0       	rjmp	.+54     	; 0x474a <__floatsisf+0x6c>
    4714:	6f 5f       	subi	r22, 0xFF	; 255
    4716:	7f 4f       	sbci	r23, 0xFF	; 255
    4718:	8f 4f       	sbci	r24, 0xFF	; 255
    471a:	9f 4f       	sbci	r25, 0xFF	; 255
    471c:	16 c0       	rjmp	.+44     	; 0x474a <__floatsisf+0x6c>
    471e:	88 23       	and	r24, r24
    4720:	11 f0       	breq	.+4      	; 0x4726 <__floatsisf+0x48>
    4722:	96 e9       	ldi	r25, 0x96	; 150
    4724:	11 c0       	rjmp	.+34     	; 0x4748 <__floatsisf+0x6a>
    4726:	77 23       	and	r23, r23
    4728:	21 f0       	breq	.+8      	; 0x4732 <__floatsisf+0x54>
    472a:	9e e8       	ldi	r25, 0x8E	; 142
    472c:	87 2f       	mov	r24, r23
    472e:	76 2f       	mov	r23, r22
    4730:	05 c0       	rjmp	.+10     	; 0x473c <__floatsisf+0x5e>
    4732:	66 23       	and	r22, r22
    4734:	71 f0       	breq	.+28     	; 0x4752 <__floatsisf+0x74>
    4736:	96 e8       	ldi	r25, 0x86	; 134
    4738:	86 2f       	mov	r24, r22
    473a:	70 e0       	ldi	r23, 0x00	; 0
    473c:	60 e0       	ldi	r22, 0x00	; 0
    473e:	2a f0       	brmi	.+10     	; 0x474a <__floatsisf+0x6c>
    4740:	9a 95       	dec	r25
    4742:	66 0f       	add	r22, r22
    4744:	77 1f       	adc	r23, r23
    4746:	88 1f       	adc	r24, r24
    4748:	da f7       	brpl	.-10     	; 0x4740 <__floatsisf+0x62>
    474a:	88 0f       	add	r24, r24
    474c:	96 95       	lsr	r25
    474e:	87 95       	ror	r24
    4750:	97 f9       	bld	r25, 7
    4752:	08 95       	ret

00004754 <__fp_cmp>:
    4754:	99 0f       	add	r25, r25
    4756:	00 08       	sbc	r0, r0
    4758:	55 0f       	add	r21, r21
    475a:	aa 0b       	sbc	r26, r26
    475c:	e0 e8       	ldi	r30, 0x80	; 128
    475e:	fe ef       	ldi	r31, 0xFE	; 254
    4760:	16 16       	cp	r1, r22
    4762:	17 06       	cpc	r1, r23
    4764:	e8 07       	cpc	r30, r24
    4766:	f9 07       	cpc	r31, r25
    4768:	c0 f0       	brcs	.+48     	; 0x479a <__fp_cmp+0x46>
    476a:	12 16       	cp	r1, r18
    476c:	13 06       	cpc	r1, r19
    476e:	e4 07       	cpc	r30, r20
    4770:	f5 07       	cpc	r31, r21
    4772:	98 f0       	brcs	.+38     	; 0x479a <__fp_cmp+0x46>
    4774:	62 1b       	sub	r22, r18
    4776:	73 0b       	sbc	r23, r19
    4778:	84 0b       	sbc	r24, r20
    477a:	95 0b       	sbc	r25, r21
    477c:	39 f4       	brne	.+14     	; 0x478c <__fp_cmp+0x38>
    477e:	0a 26       	eor	r0, r26
    4780:	61 f0       	breq	.+24     	; 0x479a <__fp_cmp+0x46>
    4782:	23 2b       	or	r18, r19
    4784:	24 2b       	or	r18, r20
    4786:	25 2b       	or	r18, r21
    4788:	21 f4       	brne	.+8      	; 0x4792 <__fp_cmp+0x3e>
    478a:	08 95       	ret
    478c:	0a 26       	eor	r0, r26
    478e:	09 f4       	brne	.+2      	; 0x4792 <__fp_cmp+0x3e>
    4790:	a1 40       	sbci	r26, 0x01	; 1
    4792:	a6 95       	lsr	r26
    4794:	8f ef       	ldi	r24, 0xFF	; 255
    4796:	81 1d       	adc	r24, r1
    4798:	81 1d       	adc	r24, r1
    479a:	08 95       	ret

0000479c <__fp_inf>:
    479c:	97 f9       	bld	r25, 7
    479e:	9f 67       	ori	r25, 0x7F	; 127
    47a0:	80 e8       	ldi	r24, 0x80	; 128
    47a2:	70 e0       	ldi	r23, 0x00	; 0
    47a4:	60 e0       	ldi	r22, 0x00	; 0
    47a6:	08 95       	ret

000047a8 <__fp_nan>:
    47a8:	9f ef       	ldi	r25, 0xFF	; 255
    47aa:	80 ec       	ldi	r24, 0xC0	; 192
    47ac:	08 95       	ret

000047ae <__fp_pscA>:
    47ae:	00 24       	eor	r0, r0
    47b0:	0a 94       	dec	r0
    47b2:	16 16       	cp	r1, r22
    47b4:	17 06       	cpc	r1, r23
    47b6:	18 06       	cpc	r1, r24
    47b8:	09 06       	cpc	r0, r25
    47ba:	08 95       	ret

000047bc <__fp_pscB>:
    47bc:	00 24       	eor	r0, r0
    47be:	0a 94       	dec	r0
    47c0:	12 16       	cp	r1, r18
    47c2:	13 06       	cpc	r1, r19
    47c4:	14 06       	cpc	r1, r20
    47c6:	05 06       	cpc	r0, r21
    47c8:	08 95       	ret

000047ca <__fp_round>:
    47ca:	09 2e       	mov	r0, r25
    47cc:	03 94       	inc	r0
    47ce:	00 0c       	add	r0, r0
    47d0:	11 f4       	brne	.+4      	; 0x47d6 <__fp_round+0xc>
    47d2:	88 23       	and	r24, r24
    47d4:	52 f0       	brmi	.+20     	; 0x47ea <__fp_round+0x20>
    47d6:	bb 0f       	add	r27, r27
    47d8:	40 f4       	brcc	.+16     	; 0x47ea <__fp_round+0x20>
    47da:	bf 2b       	or	r27, r31
    47dc:	11 f4       	brne	.+4      	; 0x47e2 <__fp_round+0x18>
    47de:	60 ff       	sbrs	r22, 0
    47e0:	04 c0       	rjmp	.+8      	; 0x47ea <__fp_round+0x20>
    47e2:	6f 5f       	subi	r22, 0xFF	; 255
    47e4:	7f 4f       	sbci	r23, 0xFF	; 255
    47e6:	8f 4f       	sbci	r24, 0xFF	; 255
    47e8:	9f 4f       	sbci	r25, 0xFF	; 255
    47ea:	08 95       	ret

000047ec <__fp_split3>:
    47ec:	57 fd       	sbrc	r21, 7
    47ee:	90 58       	subi	r25, 0x80	; 128
    47f0:	44 0f       	add	r20, r20
    47f2:	55 1f       	adc	r21, r21
    47f4:	59 f0       	breq	.+22     	; 0x480c <__fp_splitA+0x10>
    47f6:	5f 3f       	cpi	r21, 0xFF	; 255
    47f8:	71 f0       	breq	.+28     	; 0x4816 <__fp_splitA+0x1a>
    47fa:	47 95       	ror	r20

000047fc <__fp_splitA>:
    47fc:	88 0f       	add	r24, r24
    47fe:	97 fb       	bst	r25, 7
    4800:	99 1f       	adc	r25, r25
    4802:	61 f0       	breq	.+24     	; 0x481c <__fp_splitA+0x20>
    4804:	9f 3f       	cpi	r25, 0xFF	; 255
    4806:	79 f0       	breq	.+30     	; 0x4826 <__fp_splitA+0x2a>
    4808:	87 95       	ror	r24
    480a:	08 95       	ret
    480c:	12 16       	cp	r1, r18
    480e:	13 06       	cpc	r1, r19
    4810:	14 06       	cpc	r1, r20
    4812:	55 1f       	adc	r21, r21
    4814:	f2 cf       	rjmp	.-28     	; 0x47fa <__fp_split3+0xe>
    4816:	46 95       	lsr	r20
    4818:	f1 df       	rcall	.-30     	; 0x47fc <__fp_splitA>
    481a:	08 c0       	rjmp	.+16     	; 0x482c <__fp_splitA+0x30>
    481c:	16 16       	cp	r1, r22
    481e:	17 06       	cpc	r1, r23
    4820:	18 06       	cpc	r1, r24
    4822:	99 1f       	adc	r25, r25
    4824:	f1 cf       	rjmp	.-30     	; 0x4808 <__fp_splitA+0xc>
    4826:	86 95       	lsr	r24
    4828:	71 05       	cpc	r23, r1
    482a:	61 05       	cpc	r22, r1
    482c:	08 94       	sec
    482e:	08 95       	ret

00004830 <__fp_zero>:
    4830:	e8 94       	clt

00004832 <__fp_szero>:
    4832:	bb 27       	eor	r27, r27
    4834:	66 27       	eor	r22, r22
    4836:	77 27       	eor	r23, r23
    4838:	cb 01       	movw	r24, r22
    483a:	97 f9       	bld	r25, 7
    483c:	08 95       	ret

0000483e <__gesf2>:
    483e:	0e 94 aa 23 	call	0x4754	; 0x4754 <__fp_cmp>
    4842:	08 f4       	brcc	.+2      	; 0x4846 <__gesf2+0x8>
    4844:	8f ef       	ldi	r24, 0xFF	; 255
    4846:	08 95       	ret

00004848 <__mulsf3>:
    4848:	0e 94 37 24 	call	0x486e	; 0x486e <__mulsf3x>
    484c:	0c 94 e5 23 	jmp	0x47ca	; 0x47ca <__fp_round>
    4850:	0e 94 d7 23 	call	0x47ae	; 0x47ae <__fp_pscA>
    4854:	38 f0       	brcs	.+14     	; 0x4864 <__mulsf3+0x1c>
    4856:	0e 94 de 23 	call	0x47bc	; 0x47bc <__fp_pscB>
    485a:	20 f0       	brcs	.+8      	; 0x4864 <__mulsf3+0x1c>
    485c:	95 23       	and	r25, r21
    485e:	11 f0       	breq	.+4      	; 0x4864 <__mulsf3+0x1c>
    4860:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__fp_inf>
    4864:	0c 94 d4 23 	jmp	0x47a8	; 0x47a8 <__fp_nan>
    4868:	11 24       	eor	r1, r1
    486a:	0c 94 19 24 	jmp	0x4832	; 0x4832 <__fp_szero>

0000486e <__mulsf3x>:
    486e:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__fp_split3>
    4872:	70 f3       	brcs	.-36     	; 0x4850 <__mulsf3+0x8>

00004874 <__mulsf3_pse>:
    4874:	95 9f       	mul	r25, r21
    4876:	c1 f3       	breq	.-16     	; 0x4868 <__mulsf3+0x20>
    4878:	95 0f       	add	r25, r21
    487a:	50 e0       	ldi	r21, 0x00	; 0
    487c:	55 1f       	adc	r21, r21
    487e:	62 9f       	mul	r22, r18
    4880:	f0 01       	movw	r30, r0
    4882:	72 9f       	mul	r23, r18
    4884:	bb 27       	eor	r27, r27
    4886:	f0 0d       	add	r31, r0
    4888:	b1 1d       	adc	r27, r1
    488a:	63 9f       	mul	r22, r19
    488c:	aa 27       	eor	r26, r26
    488e:	f0 0d       	add	r31, r0
    4890:	b1 1d       	adc	r27, r1
    4892:	aa 1f       	adc	r26, r26
    4894:	64 9f       	mul	r22, r20
    4896:	66 27       	eor	r22, r22
    4898:	b0 0d       	add	r27, r0
    489a:	a1 1d       	adc	r26, r1
    489c:	66 1f       	adc	r22, r22
    489e:	82 9f       	mul	r24, r18
    48a0:	22 27       	eor	r18, r18
    48a2:	b0 0d       	add	r27, r0
    48a4:	a1 1d       	adc	r26, r1
    48a6:	62 1f       	adc	r22, r18
    48a8:	73 9f       	mul	r23, r19
    48aa:	b0 0d       	add	r27, r0
    48ac:	a1 1d       	adc	r26, r1
    48ae:	62 1f       	adc	r22, r18
    48b0:	83 9f       	mul	r24, r19
    48b2:	a0 0d       	add	r26, r0
    48b4:	61 1d       	adc	r22, r1
    48b6:	22 1f       	adc	r18, r18
    48b8:	74 9f       	mul	r23, r20
    48ba:	33 27       	eor	r19, r19
    48bc:	a0 0d       	add	r26, r0
    48be:	61 1d       	adc	r22, r1
    48c0:	23 1f       	adc	r18, r19
    48c2:	84 9f       	mul	r24, r20
    48c4:	60 0d       	add	r22, r0
    48c6:	21 1d       	adc	r18, r1
    48c8:	82 2f       	mov	r24, r18
    48ca:	76 2f       	mov	r23, r22
    48cc:	6a 2f       	mov	r22, r26
    48ce:	11 24       	eor	r1, r1
    48d0:	9f 57       	subi	r25, 0x7F	; 127
    48d2:	50 40       	sbci	r21, 0x00	; 0
    48d4:	9a f0       	brmi	.+38     	; 0x48fc <__mulsf3_pse+0x88>
    48d6:	f1 f0       	breq	.+60     	; 0x4914 <__mulsf3_pse+0xa0>
    48d8:	88 23       	and	r24, r24
    48da:	4a f0       	brmi	.+18     	; 0x48ee <__mulsf3_pse+0x7a>
    48dc:	ee 0f       	add	r30, r30
    48de:	ff 1f       	adc	r31, r31
    48e0:	bb 1f       	adc	r27, r27
    48e2:	66 1f       	adc	r22, r22
    48e4:	77 1f       	adc	r23, r23
    48e6:	88 1f       	adc	r24, r24
    48e8:	91 50       	subi	r25, 0x01	; 1
    48ea:	50 40       	sbci	r21, 0x00	; 0
    48ec:	a9 f7       	brne	.-22     	; 0x48d8 <__mulsf3_pse+0x64>
    48ee:	9e 3f       	cpi	r25, 0xFE	; 254
    48f0:	51 05       	cpc	r21, r1
    48f2:	80 f0       	brcs	.+32     	; 0x4914 <__mulsf3_pse+0xa0>
    48f4:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__fp_inf>
    48f8:	0c 94 19 24 	jmp	0x4832	; 0x4832 <__fp_szero>
    48fc:	5f 3f       	cpi	r21, 0xFF	; 255
    48fe:	e4 f3       	brlt	.-8      	; 0x48f8 <__mulsf3_pse+0x84>
    4900:	98 3e       	cpi	r25, 0xE8	; 232
    4902:	d4 f3       	brlt	.-12     	; 0x48f8 <__mulsf3_pse+0x84>
    4904:	86 95       	lsr	r24
    4906:	77 95       	ror	r23
    4908:	67 95       	ror	r22
    490a:	b7 95       	ror	r27
    490c:	f7 95       	ror	r31
    490e:	e7 95       	ror	r30
    4910:	9f 5f       	subi	r25, 0xFF	; 255
    4912:	c1 f7       	brne	.-16     	; 0x4904 <__mulsf3_pse+0x90>
    4914:	fe 2b       	or	r31, r30
    4916:	88 0f       	add	r24, r24
    4918:	91 1d       	adc	r25, r1
    491a:	96 95       	lsr	r25
    491c:	87 95       	ror	r24
    491e:	97 f9       	bld	r25, 7
    4920:	08 95       	ret

00004922 <vfprintf>:
    4922:	2f 92       	push	r2
    4924:	3f 92       	push	r3
    4926:	4f 92       	push	r4
    4928:	5f 92       	push	r5
    492a:	6f 92       	push	r6
    492c:	7f 92       	push	r7
    492e:	8f 92       	push	r8
    4930:	9f 92       	push	r9
    4932:	af 92       	push	r10
    4934:	bf 92       	push	r11
    4936:	cf 92       	push	r12
    4938:	df 92       	push	r13
    493a:	ef 92       	push	r14
    493c:	ff 92       	push	r15
    493e:	0f 93       	push	r16
    4940:	1f 93       	push	r17
    4942:	cf 93       	push	r28
    4944:	df 93       	push	r29
    4946:	cd b7       	in	r28, 0x3d	; 61
    4948:	de b7       	in	r29, 0x3e	; 62
    494a:	60 97       	sbiw	r28, 0x10	; 16
    494c:	cd bf       	out	0x3d, r28	; 61
    494e:	de bf       	out	0x3e, r29	; 62
    4950:	7c 01       	movw	r14, r24
    4952:	1b 01       	movw	r2, r22
    4954:	6a 01       	movw	r12, r20
    4956:	fc 01       	movw	r30, r24
    4958:	16 82       	std	Z+6, r1	; 0x06
    495a:	17 82       	std	Z+7, r1	; 0x07
    495c:	83 81       	ldd	r24, Z+3	; 0x03
    495e:	81 ff       	sbrs	r24, 1
    4960:	44 c3       	rjmp	.+1672   	; 0x4fea <vfprintf+0x6c8>
    4962:	9e 01       	movw	r18, r28
    4964:	2f 5f       	subi	r18, 0xFF	; 255
    4966:	3f 4f       	sbci	r19, 0xFF	; 255
    4968:	39 01       	movw	r6, r18
    496a:	f7 01       	movw	r30, r14
    496c:	93 81       	ldd	r25, Z+3	; 0x03
    496e:	f1 01       	movw	r30, r2
    4970:	93 fd       	sbrc	r25, 3
    4972:	85 91       	lpm	r24, Z+
    4974:	93 ff       	sbrs	r25, 3
    4976:	81 91       	ld	r24, Z+
    4978:	1f 01       	movw	r2, r30
    497a:	88 23       	and	r24, r24
    497c:	09 f4       	brne	.+2      	; 0x4980 <vfprintf+0x5e>
    497e:	31 c3       	rjmp	.+1634   	; 0x4fe2 <vfprintf+0x6c0>
    4980:	85 32       	cpi	r24, 0x25	; 37
    4982:	39 f4       	brne	.+14     	; 0x4992 <vfprintf+0x70>
    4984:	93 fd       	sbrc	r25, 3
    4986:	85 91       	lpm	r24, Z+
    4988:	93 ff       	sbrs	r25, 3
    498a:	81 91       	ld	r24, Z+
    498c:	1f 01       	movw	r2, r30
    498e:	85 32       	cpi	r24, 0x25	; 37
    4990:	39 f4       	brne	.+14     	; 0x49a0 <vfprintf+0x7e>
    4992:	b7 01       	movw	r22, r14
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    499a:	56 01       	movw	r10, r12
    499c:	65 01       	movw	r12, r10
    499e:	e5 cf       	rjmp	.-54     	; 0x496a <vfprintf+0x48>
    49a0:	10 e0       	ldi	r17, 0x00	; 0
    49a2:	51 2c       	mov	r5, r1
    49a4:	91 2c       	mov	r9, r1
    49a6:	ff e1       	ldi	r31, 0x1F	; 31
    49a8:	f9 15       	cp	r31, r9
    49aa:	d8 f0       	brcs	.+54     	; 0x49e2 <vfprintf+0xc0>
    49ac:	8b 32       	cpi	r24, 0x2B	; 43
    49ae:	79 f0       	breq	.+30     	; 0x49ce <vfprintf+0xac>
    49b0:	38 f4       	brcc	.+14     	; 0x49c0 <vfprintf+0x9e>
    49b2:	80 32       	cpi	r24, 0x20	; 32
    49b4:	79 f0       	breq	.+30     	; 0x49d4 <vfprintf+0xb2>
    49b6:	83 32       	cpi	r24, 0x23	; 35
    49b8:	a1 f4       	brne	.+40     	; 0x49e2 <vfprintf+0xc0>
    49ba:	f9 2d       	mov	r31, r9
    49bc:	f0 61       	ori	r31, 0x10	; 16
    49be:	2e c0       	rjmp	.+92     	; 0x4a1c <vfprintf+0xfa>
    49c0:	8d 32       	cpi	r24, 0x2D	; 45
    49c2:	61 f0       	breq	.+24     	; 0x49dc <vfprintf+0xba>
    49c4:	80 33       	cpi	r24, 0x30	; 48
    49c6:	69 f4       	brne	.+26     	; 0x49e2 <vfprintf+0xc0>
    49c8:	29 2d       	mov	r18, r9
    49ca:	21 60       	ori	r18, 0x01	; 1
    49cc:	2d c0       	rjmp	.+90     	; 0x4a28 <vfprintf+0x106>
    49ce:	39 2d       	mov	r19, r9
    49d0:	32 60       	ori	r19, 0x02	; 2
    49d2:	93 2e       	mov	r9, r19
    49d4:	89 2d       	mov	r24, r9
    49d6:	84 60       	ori	r24, 0x04	; 4
    49d8:	98 2e       	mov	r9, r24
    49da:	2a c0       	rjmp	.+84     	; 0x4a30 <vfprintf+0x10e>
    49dc:	e9 2d       	mov	r30, r9
    49de:	e8 60       	ori	r30, 0x08	; 8
    49e0:	15 c0       	rjmp	.+42     	; 0x4a0c <vfprintf+0xea>
    49e2:	97 fc       	sbrc	r9, 7
    49e4:	2d c0       	rjmp	.+90     	; 0x4a40 <vfprintf+0x11e>
    49e6:	20 ed       	ldi	r18, 0xD0	; 208
    49e8:	28 0f       	add	r18, r24
    49ea:	2a 30       	cpi	r18, 0x0A	; 10
    49ec:	88 f4       	brcc	.+34     	; 0x4a10 <vfprintf+0xee>
    49ee:	96 fe       	sbrs	r9, 6
    49f0:	06 c0       	rjmp	.+12     	; 0x49fe <vfprintf+0xdc>
    49f2:	3a e0       	ldi	r19, 0x0A	; 10
    49f4:	13 9f       	mul	r17, r19
    49f6:	20 0d       	add	r18, r0
    49f8:	11 24       	eor	r1, r1
    49fa:	12 2f       	mov	r17, r18
    49fc:	19 c0       	rjmp	.+50     	; 0x4a30 <vfprintf+0x10e>
    49fe:	8a e0       	ldi	r24, 0x0A	; 10
    4a00:	58 9e       	mul	r5, r24
    4a02:	20 0d       	add	r18, r0
    4a04:	11 24       	eor	r1, r1
    4a06:	52 2e       	mov	r5, r18
    4a08:	e9 2d       	mov	r30, r9
    4a0a:	e0 62       	ori	r30, 0x20	; 32
    4a0c:	9e 2e       	mov	r9, r30
    4a0e:	10 c0       	rjmp	.+32     	; 0x4a30 <vfprintf+0x10e>
    4a10:	8e 32       	cpi	r24, 0x2E	; 46
    4a12:	31 f4       	brne	.+12     	; 0x4a20 <vfprintf+0xfe>
    4a14:	96 fc       	sbrc	r9, 6
    4a16:	e5 c2       	rjmp	.+1482   	; 0x4fe2 <vfprintf+0x6c0>
    4a18:	f9 2d       	mov	r31, r9
    4a1a:	f0 64       	ori	r31, 0x40	; 64
    4a1c:	9f 2e       	mov	r9, r31
    4a1e:	08 c0       	rjmp	.+16     	; 0x4a30 <vfprintf+0x10e>
    4a20:	8c 36       	cpi	r24, 0x6C	; 108
    4a22:	21 f4       	brne	.+8      	; 0x4a2c <vfprintf+0x10a>
    4a24:	29 2d       	mov	r18, r9
    4a26:	20 68       	ori	r18, 0x80	; 128
    4a28:	92 2e       	mov	r9, r18
    4a2a:	02 c0       	rjmp	.+4      	; 0x4a30 <vfprintf+0x10e>
    4a2c:	88 36       	cpi	r24, 0x68	; 104
    4a2e:	41 f4       	brne	.+16     	; 0x4a40 <vfprintf+0x11e>
    4a30:	f1 01       	movw	r30, r2
    4a32:	93 fd       	sbrc	r25, 3
    4a34:	85 91       	lpm	r24, Z+
    4a36:	93 ff       	sbrs	r25, 3
    4a38:	81 91       	ld	r24, Z+
    4a3a:	1f 01       	movw	r2, r30
    4a3c:	81 11       	cpse	r24, r1
    4a3e:	b3 cf       	rjmp	.-154    	; 0x49a6 <vfprintf+0x84>
    4a40:	9b eb       	ldi	r25, 0xBB	; 187
    4a42:	98 0f       	add	r25, r24
    4a44:	93 30       	cpi	r25, 0x03	; 3
    4a46:	20 f4       	brcc	.+8      	; 0x4a50 <vfprintf+0x12e>
    4a48:	99 2d       	mov	r25, r9
    4a4a:	90 61       	ori	r25, 0x10	; 16
    4a4c:	80 5e       	subi	r24, 0xE0	; 224
    4a4e:	07 c0       	rjmp	.+14     	; 0x4a5e <vfprintf+0x13c>
    4a50:	9b e9       	ldi	r25, 0x9B	; 155
    4a52:	98 0f       	add	r25, r24
    4a54:	93 30       	cpi	r25, 0x03	; 3
    4a56:	08 f0       	brcs	.+2      	; 0x4a5a <vfprintf+0x138>
    4a58:	66 c1       	rjmp	.+716    	; 0x4d26 <vfprintf+0x404>
    4a5a:	99 2d       	mov	r25, r9
    4a5c:	9f 7e       	andi	r25, 0xEF	; 239
    4a5e:	96 ff       	sbrs	r25, 6
    4a60:	16 e0       	ldi	r17, 0x06	; 6
    4a62:	9f 73       	andi	r25, 0x3F	; 63
    4a64:	99 2e       	mov	r9, r25
    4a66:	85 36       	cpi	r24, 0x65	; 101
    4a68:	19 f4       	brne	.+6      	; 0x4a70 <vfprintf+0x14e>
    4a6a:	90 64       	ori	r25, 0x40	; 64
    4a6c:	99 2e       	mov	r9, r25
    4a6e:	08 c0       	rjmp	.+16     	; 0x4a80 <vfprintf+0x15e>
    4a70:	86 36       	cpi	r24, 0x66	; 102
    4a72:	21 f4       	brne	.+8      	; 0x4a7c <vfprintf+0x15a>
    4a74:	39 2f       	mov	r19, r25
    4a76:	30 68       	ori	r19, 0x80	; 128
    4a78:	93 2e       	mov	r9, r19
    4a7a:	02 c0       	rjmp	.+4      	; 0x4a80 <vfprintf+0x15e>
    4a7c:	11 11       	cpse	r17, r1
    4a7e:	11 50       	subi	r17, 0x01	; 1
    4a80:	97 fe       	sbrs	r9, 7
    4a82:	07 c0       	rjmp	.+14     	; 0x4a92 <vfprintf+0x170>
    4a84:	1c 33       	cpi	r17, 0x3C	; 60
    4a86:	50 f4       	brcc	.+20     	; 0x4a9c <vfprintf+0x17a>
    4a88:	44 24       	eor	r4, r4
    4a8a:	43 94       	inc	r4
    4a8c:	41 0e       	add	r4, r17
    4a8e:	27 e0       	ldi	r18, 0x07	; 7
    4a90:	0b c0       	rjmp	.+22     	; 0x4aa8 <vfprintf+0x186>
    4a92:	18 30       	cpi	r17, 0x08	; 8
    4a94:	38 f0       	brcs	.+14     	; 0x4aa4 <vfprintf+0x182>
    4a96:	27 e0       	ldi	r18, 0x07	; 7
    4a98:	17 e0       	ldi	r17, 0x07	; 7
    4a9a:	05 c0       	rjmp	.+10     	; 0x4aa6 <vfprintf+0x184>
    4a9c:	27 e0       	ldi	r18, 0x07	; 7
    4a9e:	9c e3       	ldi	r25, 0x3C	; 60
    4aa0:	49 2e       	mov	r4, r25
    4aa2:	02 c0       	rjmp	.+4      	; 0x4aa8 <vfprintf+0x186>
    4aa4:	21 2f       	mov	r18, r17
    4aa6:	41 2c       	mov	r4, r1
    4aa8:	56 01       	movw	r10, r12
    4aaa:	84 e0       	ldi	r24, 0x04	; 4
    4aac:	a8 0e       	add	r10, r24
    4aae:	b1 1c       	adc	r11, r1
    4ab0:	f6 01       	movw	r30, r12
    4ab2:	60 81       	ld	r22, Z
    4ab4:	71 81       	ldd	r23, Z+1	; 0x01
    4ab6:	82 81       	ldd	r24, Z+2	; 0x02
    4ab8:	93 81       	ldd	r25, Z+3	; 0x03
    4aba:	04 2d       	mov	r16, r4
    4abc:	a3 01       	movw	r20, r6
    4abe:	0e 94 89 29 	call	0x5312	; 0x5312 <__ftoa_engine>
    4ac2:	6c 01       	movw	r12, r24
    4ac4:	f9 81       	ldd	r31, Y+1	; 0x01
    4ac6:	fc 87       	std	Y+12, r31	; 0x0c
    4ac8:	f0 ff       	sbrs	r31, 0
    4aca:	02 c0       	rjmp	.+4      	; 0x4ad0 <vfprintf+0x1ae>
    4acc:	f3 ff       	sbrs	r31, 3
    4ace:	06 c0       	rjmp	.+12     	; 0x4adc <vfprintf+0x1ba>
    4ad0:	91 fc       	sbrc	r9, 1
    4ad2:	06 c0       	rjmp	.+12     	; 0x4ae0 <vfprintf+0x1be>
    4ad4:	92 fe       	sbrs	r9, 2
    4ad6:	06 c0       	rjmp	.+12     	; 0x4ae4 <vfprintf+0x1c2>
    4ad8:	00 e2       	ldi	r16, 0x20	; 32
    4ada:	05 c0       	rjmp	.+10     	; 0x4ae6 <vfprintf+0x1c4>
    4adc:	0d e2       	ldi	r16, 0x2D	; 45
    4ade:	03 c0       	rjmp	.+6      	; 0x4ae6 <vfprintf+0x1c4>
    4ae0:	0b e2       	ldi	r16, 0x2B	; 43
    4ae2:	01 c0       	rjmp	.+2      	; 0x4ae6 <vfprintf+0x1c4>
    4ae4:	00 e0       	ldi	r16, 0x00	; 0
    4ae6:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ae8:	8c 70       	andi	r24, 0x0C	; 12
    4aea:	19 f0       	breq	.+6      	; 0x4af2 <vfprintf+0x1d0>
    4aec:	01 11       	cpse	r16, r1
    4aee:	5a c2       	rjmp	.+1204   	; 0x4fa4 <vfprintf+0x682>
    4af0:	9b c2       	rjmp	.+1334   	; 0x5028 <vfprintf+0x706>
    4af2:	97 fe       	sbrs	r9, 7
    4af4:	10 c0       	rjmp	.+32     	; 0x4b16 <vfprintf+0x1f4>
    4af6:	4c 0c       	add	r4, r12
    4af8:	fc 85       	ldd	r31, Y+12	; 0x0c
    4afa:	f4 ff       	sbrs	r31, 4
    4afc:	04 c0       	rjmp	.+8      	; 0x4b06 <vfprintf+0x1e4>
    4afe:	8a 81       	ldd	r24, Y+2	; 0x02
    4b00:	81 33       	cpi	r24, 0x31	; 49
    4b02:	09 f4       	brne	.+2      	; 0x4b06 <vfprintf+0x1e4>
    4b04:	4a 94       	dec	r4
    4b06:	14 14       	cp	r1, r4
    4b08:	74 f5       	brge	.+92     	; 0x4b66 <vfprintf+0x244>
    4b0a:	28 e0       	ldi	r18, 0x08	; 8
    4b0c:	24 15       	cp	r18, r4
    4b0e:	78 f5       	brcc	.+94     	; 0x4b6e <vfprintf+0x24c>
    4b10:	88 e0       	ldi	r24, 0x08	; 8
    4b12:	48 2e       	mov	r4, r24
    4b14:	2c c0       	rjmp	.+88     	; 0x4b6e <vfprintf+0x24c>
    4b16:	96 fc       	sbrc	r9, 6
    4b18:	2a c0       	rjmp	.+84     	; 0x4b6e <vfprintf+0x24c>
    4b1a:	81 2f       	mov	r24, r17
    4b1c:	90 e0       	ldi	r25, 0x00	; 0
    4b1e:	8c 15       	cp	r24, r12
    4b20:	9d 05       	cpc	r25, r13
    4b22:	9c f0       	brlt	.+38     	; 0x4b4a <vfprintf+0x228>
    4b24:	3c ef       	ldi	r19, 0xFC	; 252
    4b26:	c3 16       	cp	r12, r19
    4b28:	3f ef       	ldi	r19, 0xFF	; 255
    4b2a:	d3 06       	cpc	r13, r19
    4b2c:	74 f0       	brlt	.+28     	; 0x4b4a <vfprintf+0x228>
    4b2e:	89 2d       	mov	r24, r9
    4b30:	80 68       	ori	r24, 0x80	; 128
    4b32:	98 2e       	mov	r9, r24
    4b34:	0a c0       	rjmp	.+20     	; 0x4b4a <vfprintf+0x228>
    4b36:	e2 e0       	ldi	r30, 0x02	; 2
    4b38:	f0 e0       	ldi	r31, 0x00	; 0
    4b3a:	ec 0f       	add	r30, r28
    4b3c:	fd 1f       	adc	r31, r29
    4b3e:	e1 0f       	add	r30, r17
    4b40:	f1 1d       	adc	r31, r1
    4b42:	80 81       	ld	r24, Z
    4b44:	80 33       	cpi	r24, 0x30	; 48
    4b46:	19 f4       	brne	.+6      	; 0x4b4e <vfprintf+0x22c>
    4b48:	11 50       	subi	r17, 0x01	; 1
    4b4a:	11 11       	cpse	r17, r1
    4b4c:	f4 cf       	rjmp	.-24     	; 0x4b36 <vfprintf+0x214>
    4b4e:	97 fe       	sbrs	r9, 7
    4b50:	0e c0       	rjmp	.+28     	; 0x4b6e <vfprintf+0x24c>
    4b52:	44 24       	eor	r4, r4
    4b54:	43 94       	inc	r4
    4b56:	41 0e       	add	r4, r17
    4b58:	81 2f       	mov	r24, r17
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	c8 16       	cp	r12, r24
    4b5e:	d9 06       	cpc	r13, r25
    4b60:	2c f4       	brge	.+10     	; 0x4b6c <vfprintf+0x24a>
    4b62:	1c 19       	sub	r17, r12
    4b64:	04 c0       	rjmp	.+8      	; 0x4b6e <vfprintf+0x24c>
    4b66:	44 24       	eor	r4, r4
    4b68:	43 94       	inc	r4
    4b6a:	01 c0       	rjmp	.+2      	; 0x4b6e <vfprintf+0x24c>
    4b6c:	10 e0       	ldi	r17, 0x00	; 0
    4b6e:	97 fe       	sbrs	r9, 7
    4b70:	06 c0       	rjmp	.+12     	; 0x4b7e <vfprintf+0x25c>
    4b72:	1c 14       	cp	r1, r12
    4b74:	1d 04       	cpc	r1, r13
    4b76:	34 f4       	brge	.+12     	; 0x4b84 <vfprintf+0x262>
    4b78:	c6 01       	movw	r24, r12
    4b7a:	01 96       	adiw	r24, 0x01	; 1
    4b7c:	05 c0       	rjmp	.+10     	; 0x4b88 <vfprintf+0x266>
    4b7e:	85 e0       	ldi	r24, 0x05	; 5
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	02 c0       	rjmp	.+4      	; 0x4b88 <vfprintf+0x266>
    4b84:	81 e0       	ldi	r24, 0x01	; 1
    4b86:	90 e0       	ldi	r25, 0x00	; 0
    4b88:	01 11       	cpse	r16, r1
    4b8a:	01 96       	adiw	r24, 0x01	; 1
    4b8c:	11 23       	and	r17, r17
    4b8e:	31 f0       	breq	.+12     	; 0x4b9c <vfprintf+0x27a>
    4b90:	21 2f       	mov	r18, r17
    4b92:	30 e0       	ldi	r19, 0x00	; 0
    4b94:	2f 5f       	subi	r18, 0xFF	; 255
    4b96:	3f 4f       	sbci	r19, 0xFF	; 255
    4b98:	82 0f       	add	r24, r18
    4b9a:	93 1f       	adc	r25, r19
    4b9c:	25 2d       	mov	r18, r5
    4b9e:	30 e0       	ldi	r19, 0x00	; 0
    4ba0:	82 17       	cp	r24, r18
    4ba2:	93 07       	cpc	r25, r19
    4ba4:	14 f4       	brge	.+4      	; 0x4baa <vfprintf+0x288>
    4ba6:	58 1a       	sub	r5, r24
    4ba8:	01 c0       	rjmp	.+2      	; 0x4bac <vfprintf+0x28a>
    4baa:	51 2c       	mov	r5, r1
    4bac:	89 2d       	mov	r24, r9
    4bae:	89 70       	andi	r24, 0x09	; 9
    4bb0:	49 f4       	brne	.+18     	; 0x4bc4 <vfprintf+0x2a2>
    4bb2:	55 20       	and	r5, r5
    4bb4:	39 f0       	breq	.+14     	; 0x4bc4 <vfprintf+0x2a2>
    4bb6:	b7 01       	movw	r22, r14
    4bb8:	80 e2       	ldi	r24, 0x20	; 32
    4bba:	90 e0       	ldi	r25, 0x00	; 0
    4bbc:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4bc0:	5a 94       	dec	r5
    4bc2:	f7 cf       	rjmp	.-18     	; 0x4bb2 <vfprintf+0x290>
    4bc4:	00 23       	and	r16, r16
    4bc6:	29 f0       	breq	.+10     	; 0x4bd2 <vfprintf+0x2b0>
    4bc8:	b7 01       	movw	r22, r14
    4bca:	80 2f       	mov	r24, r16
    4bcc:	90 e0       	ldi	r25, 0x00	; 0
    4bce:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4bd2:	93 fc       	sbrc	r9, 3
    4bd4:	09 c0       	rjmp	.+18     	; 0x4be8 <vfprintf+0x2c6>
    4bd6:	55 20       	and	r5, r5
    4bd8:	39 f0       	breq	.+14     	; 0x4be8 <vfprintf+0x2c6>
    4bda:	b7 01       	movw	r22, r14
    4bdc:	80 e3       	ldi	r24, 0x30	; 48
    4bde:	90 e0       	ldi	r25, 0x00	; 0
    4be0:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4be4:	5a 94       	dec	r5
    4be6:	f7 cf       	rjmp	.-18     	; 0x4bd6 <vfprintf+0x2b4>
    4be8:	97 fe       	sbrs	r9, 7
    4bea:	4c c0       	rjmp	.+152    	; 0x4c84 <vfprintf+0x362>
    4bec:	46 01       	movw	r8, r12
    4bee:	d7 fe       	sbrs	r13, 7
    4bf0:	02 c0       	rjmp	.+4      	; 0x4bf6 <vfprintf+0x2d4>
    4bf2:	81 2c       	mov	r8, r1
    4bf4:	91 2c       	mov	r9, r1
    4bf6:	c6 01       	movw	r24, r12
    4bf8:	88 19       	sub	r24, r8
    4bfa:	99 09       	sbc	r25, r9
    4bfc:	f3 01       	movw	r30, r6
    4bfe:	e8 0f       	add	r30, r24
    4c00:	f9 1f       	adc	r31, r25
    4c02:	ed 87       	std	Y+13, r30	; 0x0d
    4c04:	fe 87       	std	Y+14, r31	; 0x0e
    4c06:	96 01       	movw	r18, r12
    4c08:	24 19       	sub	r18, r4
    4c0a:	31 09       	sbc	r19, r1
    4c0c:	2f 87       	std	Y+15, r18	; 0x0f
    4c0e:	38 8b       	std	Y+16, r19	; 0x10
    4c10:	01 2f       	mov	r16, r17
    4c12:	10 e0       	ldi	r17, 0x00	; 0
    4c14:	11 95       	neg	r17
    4c16:	01 95       	neg	r16
    4c18:	11 09       	sbc	r17, r1
    4c1a:	3f ef       	ldi	r19, 0xFF	; 255
    4c1c:	83 16       	cp	r8, r19
    4c1e:	93 06       	cpc	r9, r19
    4c20:	29 f4       	brne	.+10     	; 0x4c2c <vfprintf+0x30a>
    4c22:	b7 01       	movw	r22, r14
    4c24:	8e e2       	ldi	r24, 0x2E	; 46
    4c26:	90 e0       	ldi	r25, 0x00	; 0
    4c28:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4c2c:	c8 14       	cp	r12, r8
    4c2e:	d9 04       	cpc	r13, r9
    4c30:	4c f0       	brlt	.+18     	; 0x4c44 <vfprintf+0x322>
    4c32:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c34:	98 89       	ldd	r25, Y+16	; 0x10
    4c36:	88 15       	cp	r24, r8
    4c38:	99 05       	cpc	r25, r9
    4c3a:	24 f4       	brge	.+8      	; 0x4c44 <vfprintf+0x322>
    4c3c:	ed 85       	ldd	r30, Y+13	; 0x0d
    4c3e:	fe 85       	ldd	r31, Y+14	; 0x0e
    4c40:	81 81       	ldd	r24, Z+1	; 0x01
    4c42:	01 c0       	rjmp	.+2      	; 0x4c46 <vfprintf+0x324>
    4c44:	80 e3       	ldi	r24, 0x30	; 48
    4c46:	f1 e0       	ldi	r31, 0x01	; 1
    4c48:	8f 1a       	sub	r8, r31
    4c4a:	91 08       	sbc	r9, r1
    4c4c:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c4e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4c50:	2f 5f       	subi	r18, 0xFF	; 255
    4c52:	3f 4f       	sbci	r19, 0xFF	; 255
    4c54:	2d 87       	std	Y+13, r18	; 0x0d
    4c56:	3e 87       	std	Y+14, r19	; 0x0e
    4c58:	80 16       	cp	r8, r16
    4c5a:	91 06       	cpc	r9, r17
    4c5c:	2c f0       	brlt	.+10     	; 0x4c68 <vfprintf+0x346>
    4c5e:	b7 01       	movw	r22, r14
    4c60:	90 e0       	ldi	r25, 0x00	; 0
    4c62:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4c66:	d9 cf       	rjmp	.-78     	; 0x4c1a <vfprintf+0x2f8>
    4c68:	c8 14       	cp	r12, r8
    4c6a:	d9 04       	cpc	r13, r9
    4c6c:	41 f4       	brne	.+16     	; 0x4c7e <vfprintf+0x35c>
    4c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c70:	96 33       	cpi	r25, 0x36	; 54
    4c72:	20 f4       	brcc	.+8      	; 0x4c7c <vfprintf+0x35a>
    4c74:	95 33       	cpi	r25, 0x35	; 53
    4c76:	19 f4       	brne	.+6      	; 0x4c7e <vfprintf+0x35c>
    4c78:	3c 85       	ldd	r19, Y+12	; 0x0c
    4c7a:	34 ff       	sbrs	r19, 4
    4c7c:	81 e3       	ldi	r24, 0x31	; 49
    4c7e:	b7 01       	movw	r22, r14
    4c80:	90 e0       	ldi	r25, 0x00	; 0
    4c82:	4e c0       	rjmp	.+156    	; 0x4d20 <vfprintf+0x3fe>
    4c84:	8a 81       	ldd	r24, Y+2	; 0x02
    4c86:	81 33       	cpi	r24, 0x31	; 49
    4c88:	19 f0       	breq	.+6      	; 0x4c90 <vfprintf+0x36e>
    4c8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c8c:	9f 7e       	andi	r25, 0xEF	; 239
    4c8e:	9c 87       	std	Y+12, r25	; 0x0c
    4c90:	b7 01       	movw	r22, r14
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4c98:	11 11       	cpse	r17, r1
    4c9a:	05 c0       	rjmp	.+10     	; 0x4ca6 <vfprintf+0x384>
    4c9c:	94 fc       	sbrc	r9, 4
    4c9e:	18 c0       	rjmp	.+48     	; 0x4cd0 <vfprintf+0x3ae>
    4ca0:	85 e6       	ldi	r24, 0x65	; 101
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	17 c0       	rjmp	.+46     	; 0x4cd4 <vfprintf+0x3b2>
    4ca6:	b7 01       	movw	r22, r14
    4ca8:	8e e2       	ldi	r24, 0x2E	; 46
    4caa:	90 e0       	ldi	r25, 0x00	; 0
    4cac:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4cb0:	1e 5f       	subi	r17, 0xFE	; 254
    4cb2:	82 e0       	ldi	r24, 0x02	; 2
    4cb4:	01 e0       	ldi	r16, 0x01	; 1
    4cb6:	08 0f       	add	r16, r24
    4cb8:	f3 01       	movw	r30, r6
    4cba:	e8 0f       	add	r30, r24
    4cbc:	f1 1d       	adc	r31, r1
    4cbe:	80 81       	ld	r24, Z
    4cc0:	b7 01       	movw	r22, r14
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4cc8:	80 2f       	mov	r24, r16
    4cca:	01 13       	cpse	r16, r17
    4ccc:	f3 cf       	rjmp	.-26     	; 0x4cb4 <vfprintf+0x392>
    4cce:	e6 cf       	rjmp	.-52     	; 0x4c9c <vfprintf+0x37a>
    4cd0:	85 e4       	ldi	r24, 0x45	; 69
    4cd2:	90 e0       	ldi	r25, 0x00	; 0
    4cd4:	b7 01       	movw	r22, r14
    4cd6:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4cda:	d7 fc       	sbrc	r13, 7
    4cdc:	06 c0       	rjmp	.+12     	; 0x4cea <vfprintf+0x3c8>
    4cde:	c1 14       	cp	r12, r1
    4ce0:	d1 04       	cpc	r13, r1
    4ce2:	41 f4       	brne	.+16     	; 0x4cf4 <vfprintf+0x3d2>
    4ce4:	ec 85       	ldd	r30, Y+12	; 0x0c
    4ce6:	e4 ff       	sbrs	r30, 4
    4ce8:	05 c0       	rjmp	.+10     	; 0x4cf4 <vfprintf+0x3d2>
    4cea:	d1 94       	neg	r13
    4cec:	c1 94       	neg	r12
    4cee:	d1 08       	sbc	r13, r1
    4cf0:	8d e2       	ldi	r24, 0x2D	; 45
    4cf2:	01 c0       	rjmp	.+2      	; 0x4cf6 <vfprintf+0x3d4>
    4cf4:	8b e2       	ldi	r24, 0x2B	; 43
    4cf6:	b7 01       	movw	r22, r14
    4cf8:	90 e0       	ldi	r25, 0x00	; 0
    4cfa:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4cfe:	80 e3       	ldi	r24, 0x30	; 48
    4d00:	2a e0       	ldi	r18, 0x0A	; 10
    4d02:	c2 16       	cp	r12, r18
    4d04:	d1 04       	cpc	r13, r1
    4d06:	2c f0       	brlt	.+10     	; 0x4d12 <vfprintf+0x3f0>
    4d08:	8f 5f       	subi	r24, 0xFF	; 255
    4d0a:	fa e0       	ldi	r31, 0x0A	; 10
    4d0c:	cf 1a       	sub	r12, r31
    4d0e:	d1 08       	sbc	r13, r1
    4d10:	f7 cf       	rjmp	.-18     	; 0x4d00 <vfprintf+0x3de>
    4d12:	b7 01       	movw	r22, r14
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4d1a:	b7 01       	movw	r22, r14
    4d1c:	c6 01       	movw	r24, r12
    4d1e:	c0 96       	adiw	r24, 0x30	; 48
    4d20:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4d24:	54 c1       	rjmp	.+680    	; 0x4fce <vfprintf+0x6ac>
    4d26:	83 36       	cpi	r24, 0x63	; 99
    4d28:	31 f0       	breq	.+12     	; 0x4d36 <vfprintf+0x414>
    4d2a:	83 37       	cpi	r24, 0x73	; 115
    4d2c:	79 f0       	breq	.+30     	; 0x4d4c <vfprintf+0x42a>
    4d2e:	83 35       	cpi	r24, 0x53	; 83
    4d30:	09 f0       	breq	.+2      	; 0x4d34 <vfprintf+0x412>
    4d32:	56 c0       	rjmp	.+172    	; 0x4de0 <vfprintf+0x4be>
    4d34:	20 c0       	rjmp	.+64     	; 0x4d76 <vfprintf+0x454>
    4d36:	56 01       	movw	r10, r12
    4d38:	32 e0       	ldi	r19, 0x02	; 2
    4d3a:	a3 0e       	add	r10, r19
    4d3c:	b1 1c       	adc	r11, r1
    4d3e:	f6 01       	movw	r30, r12
    4d40:	80 81       	ld	r24, Z
    4d42:	89 83       	std	Y+1, r24	; 0x01
    4d44:	01 e0       	ldi	r16, 0x01	; 1
    4d46:	10 e0       	ldi	r17, 0x00	; 0
    4d48:	63 01       	movw	r12, r6
    4d4a:	12 c0       	rjmp	.+36     	; 0x4d70 <vfprintf+0x44e>
    4d4c:	56 01       	movw	r10, r12
    4d4e:	f2 e0       	ldi	r31, 0x02	; 2
    4d50:	af 0e       	add	r10, r31
    4d52:	b1 1c       	adc	r11, r1
    4d54:	f6 01       	movw	r30, r12
    4d56:	c0 80       	ld	r12, Z
    4d58:	d1 80       	ldd	r13, Z+1	; 0x01
    4d5a:	96 fe       	sbrs	r9, 6
    4d5c:	03 c0       	rjmp	.+6      	; 0x4d64 <vfprintf+0x442>
    4d5e:	61 2f       	mov	r22, r17
    4d60:	70 e0       	ldi	r23, 0x00	; 0
    4d62:	02 c0       	rjmp	.+4      	; 0x4d68 <vfprintf+0x446>
    4d64:	6f ef       	ldi	r22, 0xFF	; 255
    4d66:	7f ef       	ldi	r23, 0xFF	; 255
    4d68:	c6 01       	movw	r24, r12
    4d6a:	0e 94 7c 2a 	call	0x54f8	; 0x54f8 <strnlen>
    4d6e:	8c 01       	movw	r16, r24
    4d70:	f9 2d       	mov	r31, r9
    4d72:	ff 77       	andi	r31, 0x7F	; 127
    4d74:	14 c0       	rjmp	.+40     	; 0x4d9e <vfprintf+0x47c>
    4d76:	56 01       	movw	r10, r12
    4d78:	22 e0       	ldi	r18, 0x02	; 2
    4d7a:	a2 0e       	add	r10, r18
    4d7c:	b1 1c       	adc	r11, r1
    4d7e:	f6 01       	movw	r30, r12
    4d80:	c0 80       	ld	r12, Z
    4d82:	d1 80       	ldd	r13, Z+1	; 0x01
    4d84:	96 fe       	sbrs	r9, 6
    4d86:	03 c0       	rjmp	.+6      	; 0x4d8e <vfprintf+0x46c>
    4d88:	61 2f       	mov	r22, r17
    4d8a:	70 e0       	ldi	r23, 0x00	; 0
    4d8c:	02 c0       	rjmp	.+4      	; 0x4d92 <vfprintf+0x470>
    4d8e:	6f ef       	ldi	r22, 0xFF	; 255
    4d90:	7f ef       	ldi	r23, 0xFF	; 255
    4d92:	c6 01       	movw	r24, r12
    4d94:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <strnlen_P>
    4d98:	8c 01       	movw	r16, r24
    4d9a:	f9 2d       	mov	r31, r9
    4d9c:	f0 68       	ori	r31, 0x80	; 128
    4d9e:	9f 2e       	mov	r9, r31
    4da0:	f3 fd       	sbrc	r31, 3
    4da2:	1a c0       	rjmp	.+52     	; 0x4dd8 <vfprintf+0x4b6>
    4da4:	85 2d       	mov	r24, r5
    4da6:	90 e0       	ldi	r25, 0x00	; 0
    4da8:	08 17       	cp	r16, r24
    4daa:	19 07       	cpc	r17, r25
    4dac:	a8 f4       	brcc	.+42     	; 0x4dd8 <vfprintf+0x4b6>
    4dae:	b7 01       	movw	r22, r14
    4db0:	80 e2       	ldi	r24, 0x20	; 32
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4db8:	5a 94       	dec	r5
    4dba:	f4 cf       	rjmp	.-24     	; 0x4da4 <vfprintf+0x482>
    4dbc:	f6 01       	movw	r30, r12
    4dbe:	97 fc       	sbrc	r9, 7
    4dc0:	85 91       	lpm	r24, Z+
    4dc2:	97 fe       	sbrs	r9, 7
    4dc4:	81 91       	ld	r24, Z+
    4dc6:	6f 01       	movw	r12, r30
    4dc8:	b7 01       	movw	r22, r14
    4dca:	90 e0       	ldi	r25, 0x00	; 0
    4dcc:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4dd0:	51 10       	cpse	r5, r1
    4dd2:	5a 94       	dec	r5
    4dd4:	01 50       	subi	r16, 0x01	; 1
    4dd6:	11 09       	sbc	r17, r1
    4dd8:	01 15       	cp	r16, r1
    4dda:	11 05       	cpc	r17, r1
    4ddc:	79 f7       	brne	.-34     	; 0x4dbc <vfprintf+0x49a>
    4dde:	f7 c0       	rjmp	.+494    	; 0x4fce <vfprintf+0x6ac>
    4de0:	84 36       	cpi	r24, 0x64	; 100
    4de2:	11 f0       	breq	.+4      	; 0x4de8 <vfprintf+0x4c6>
    4de4:	89 36       	cpi	r24, 0x69	; 105
    4de6:	61 f5       	brne	.+88     	; 0x4e40 <vfprintf+0x51e>
    4de8:	56 01       	movw	r10, r12
    4dea:	97 fe       	sbrs	r9, 7
    4dec:	09 c0       	rjmp	.+18     	; 0x4e00 <vfprintf+0x4de>
    4dee:	24 e0       	ldi	r18, 0x04	; 4
    4df0:	a2 0e       	add	r10, r18
    4df2:	b1 1c       	adc	r11, r1
    4df4:	f6 01       	movw	r30, r12
    4df6:	60 81       	ld	r22, Z
    4df8:	71 81       	ldd	r23, Z+1	; 0x01
    4dfa:	82 81       	ldd	r24, Z+2	; 0x02
    4dfc:	93 81       	ldd	r25, Z+3	; 0x03
    4dfe:	0a c0       	rjmp	.+20     	; 0x4e14 <vfprintf+0x4f2>
    4e00:	f2 e0       	ldi	r31, 0x02	; 2
    4e02:	af 0e       	add	r10, r31
    4e04:	b1 1c       	adc	r11, r1
    4e06:	f6 01       	movw	r30, r12
    4e08:	60 81       	ld	r22, Z
    4e0a:	71 81       	ldd	r23, Z+1	; 0x01
    4e0c:	07 2e       	mov	r0, r23
    4e0e:	00 0c       	add	r0, r0
    4e10:	88 0b       	sbc	r24, r24
    4e12:	99 0b       	sbc	r25, r25
    4e14:	f9 2d       	mov	r31, r9
    4e16:	ff 76       	andi	r31, 0x6F	; 111
    4e18:	9f 2e       	mov	r9, r31
    4e1a:	97 ff       	sbrs	r25, 7
    4e1c:	09 c0       	rjmp	.+18     	; 0x4e30 <vfprintf+0x50e>
    4e1e:	90 95       	com	r25
    4e20:	80 95       	com	r24
    4e22:	70 95       	com	r23
    4e24:	61 95       	neg	r22
    4e26:	7f 4f       	sbci	r23, 0xFF	; 255
    4e28:	8f 4f       	sbci	r24, 0xFF	; 255
    4e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e2c:	f0 68       	ori	r31, 0x80	; 128
    4e2e:	9f 2e       	mov	r9, r31
    4e30:	2a e0       	ldi	r18, 0x0A	; 10
    4e32:	30 e0       	ldi	r19, 0x00	; 0
    4e34:	a3 01       	movw	r20, r6
    4e36:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__ultoa_invert>
    4e3a:	c8 2e       	mov	r12, r24
    4e3c:	c6 18       	sub	r12, r6
    4e3e:	3f c0       	rjmp	.+126    	; 0x4ebe <vfprintf+0x59c>
    4e40:	09 2d       	mov	r16, r9
    4e42:	85 37       	cpi	r24, 0x75	; 117
    4e44:	21 f4       	brne	.+8      	; 0x4e4e <vfprintf+0x52c>
    4e46:	0f 7e       	andi	r16, 0xEF	; 239
    4e48:	2a e0       	ldi	r18, 0x0A	; 10
    4e4a:	30 e0       	ldi	r19, 0x00	; 0
    4e4c:	1d c0       	rjmp	.+58     	; 0x4e88 <vfprintf+0x566>
    4e4e:	09 7f       	andi	r16, 0xF9	; 249
    4e50:	8f 36       	cpi	r24, 0x6F	; 111
    4e52:	91 f0       	breq	.+36     	; 0x4e78 <vfprintf+0x556>
    4e54:	18 f4       	brcc	.+6      	; 0x4e5c <vfprintf+0x53a>
    4e56:	88 35       	cpi	r24, 0x58	; 88
    4e58:	59 f0       	breq	.+22     	; 0x4e70 <vfprintf+0x54e>
    4e5a:	c3 c0       	rjmp	.+390    	; 0x4fe2 <vfprintf+0x6c0>
    4e5c:	80 37       	cpi	r24, 0x70	; 112
    4e5e:	19 f0       	breq	.+6      	; 0x4e66 <vfprintf+0x544>
    4e60:	88 37       	cpi	r24, 0x78	; 120
    4e62:	11 f0       	breq	.+4      	; 0x4e68 <vfprintf+0x546>
    4e64:	be c0       	rjmp	.+380    	; 0x4fe2 <vfprintf+0x6c0>
    4e66:	00 61       	ori	r16, 0x10	; 16
    4e68:	04 ff       	sbrs	r16, 4
    4e6a:	09 c0       	rjmp	.+18     	; 0x4e7e <vfprintf+0x55c>
    4e6c:	04 60       	ori	r16, 0x04	; 4
    4e6e:	07 c0       	rjmp	.+14     	; 0x4e7e <vfprintf+0x55c>
    4e70:	94 fe       	sbrs	r9, 4
    4e72:	08 c0       	rjmp	.+16     	; 0x4e84 <vfprintf+0x562>
    4e74:	06 60       	ori	r16, 0x06	; 6
    4e76:	06 c0       	rjmp	.+12     	; 0x4e84 <vfprintf+0x562>
    4e78:	28 e0       	ldi	r18, 0x08	; 8
    4e7a:	30 e0       	ldi	r19, 0x00	; 0
    4e7c:	05 c0       	rjmp	.+10     	; 0x4e88 <vfprintf+0x566>
    4e7e:	20 e1       	ldi	r18, 0x10	; 16
    4e80:	30 e0       	ldi	r19, 0x00	; 0
    4e82:	02 c0       	rjmp	.+4      	; 0x4e88 <vfprintf+0x566>
    4e84:	20 e1       	ldi	r18, 0x10	; 16
    4e86:	32 e0       	ldi	r19, 0x02	; 2
    4e88:	56 01       	movw	r10, r12
    4e8a:	07 ff       	sbrs	r16, 7
    4e8c:	09 c0       	rjmp	.+18     	; 0x4ea0 <vfprintf+0x57e>
    4e8e:	84 e0       	ldi	r24, 0x04	; 4
    4e90:	a8 0e       	add	r10, r24
    4e92:	b1 1c       	adc	r11, r1
    4e94:	f6 01       	movw	r30, r12
    4e96:	60 81       	ld	r22, Z
    4e98:	71 81       	ldd	r23, Z+1	; 0x01
    4e9a:	82 81       	ldd	r24, Z+2	; 0x02
    4e9c:	93 81       	ldd	r25, Z+3	; 0x03
    4e9e:	08 c0       	rjmp	.+16     	; 0x4eb0 <vfprintf+0x58e>
    4ea0:	f2 e0       	ldi	r31, 0x02	; 2
    4ea2:	af 0e       	add	r10, r31
    4ea4:	b1 1c       	adc	r11, r1
    4ea6:	f6 01       	movw	r30, r12
    4ea8:	60 81       	ld	r22, Z
    4eaa:	71 81       	ldd	r23, Z+1	; 0x01
    4eac:	80 e0       	ldi	r24, 0x00	; 0
    4eae:	90 e0       	ldi	r25, 0x00	; 0
    4eb0:	a3 01       	movw	r20, r6
    4eb2:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__ultoa_invert>
    4eb6:	c8 2e       	mov	r12, r24
    4eb8:	c6 18       	sub	r12, r6
    4eba:	0f 77       	andi	r16, 0x7F	; 127
    4ebc:	90 2e       	mov	r9, r16
    4ebe:	96 fe       	sbrs	r9, 6
    4ec0:	0b c0       	rjmp	.+22     	; 0x4ed8 <vfprintf+0x5b6>
    4ec2:	09 2d       	mov	r16, r9
    4ec4:	0e 7f       	andi	r16, 0xFE	; 254
    4ec6:	c1 16       	cp	r12, r17
    4ec8:	50 f4       	brcc	.+20     	; 0x4ede <vfprintf+0x5bc>
    4eca:	94 fe       	sbrs	r9, 4
    4ecc:	0a c0       	rjmp	.+20     	; 0x4ee2 <vfprintf+0x5c0>
    4ece:	92 fc       	sbrc	r9, 2
    4ed0:	08 c0       	rjmp	.+16     	; 0x4ee2 <vfprintf+0x5c0>
    4ed2:	09 2d       	mov	r16, r9
    4ed4:	0e 7e       	andi	r16, 0xEE	; 238
    4ed6:	05 c0       	rjmp	.+10     	; 0x4ee2 <vfprintf+0x5c0>
    4ed8:	dc 2c       	mov	r13, r12
    4eda:	09 2d       	mov	r16, r9
    4edc:	03 c0       	rjmp	.+6      	; 0x4ee4 <vfprintf+0x5c2>
    4ede:	dc 2c       	mov	r13, r12
    4ee0:	01 c0       	rjmp	.+2      	; 0x4ee4 <vfprintf+0x5c2>
    4ee2:	d1 2e       	mov	r13, r17
    4ee4:	04 ff       	sbrs	r16, 4
    4ee6:	0d c0       	rjmp	.+26     	; 0x4f02 <vfprintf+0x5e0>
    4ee8:	fe 01       	movw	r30, r28
    4eea:	ec 0d       	add	r30, r12
    4eec:	f1 1d       	adc	r31, r1
    4eee:	80 81       	ld	r24, Z
    4ef0:	80 33       	cpi	r24, 0x30	; 48
    4ef2:	11 f4       	brne	.+4      	; 0x4ef8 <vfprintf+0x5d6>
    4ef4:	09 7e       	andi	r16, 0xE9	; 233
    4ef6:	09 c0       	rjmp	.+18     	; 0x4f0a <vfprintf+0x5e8>
    4ef8:	02 ff       	sbrs	r16, 2
    4efa:	06 c0       	rjmp	.+12     	; 0x4f08 <vfprintf+0x5e6>
    4efc:	d3 94       	inc	r13
    4efe:	d3 94       	inc	r13
    4f00:	04 c0       	rjmp	.+8      	; 0x4f0a <vfprintf+0x5e8>
    4f02:	80 2f       	mov	r24, r16
    4f04:	86 78       	andi	r24, 0x86	; 134
    4f06:	09 f0       	breq	.+2      	; 0x4f0a <vfprintf+0x5e8>
    4f08:	d3 94       	inc	r13
    4f0a:	03 fd       	sbrc	r16, 3
    4f0c:	11 c0       	rjmp	.+34     	; 0x4f30 <vfprintf+0x60e>
    4f0e:	00 ff       	sbrs	r16, 0
    4f10:	06 c0       	rjmp	.+12     	; 0x4f1e <vfprintf+0x5fc>
    4f12:	1c 2d       	mov	r17, r12
    4f14:	d5 14       	cp	r13, r5
    4f16:	80 f4       	brcc	.+32     	; 0x4f38 <vfprintf+0x616>
    4f18:	15 0d       	add	r17, r5
    4f1a:	1d 19       	sub	r17, r13
    4f1c:	0d c0       	rjmp	.+26     	; 0x4f38 <vfprintf+0x616>
    4f1e:	d5 14       	cp	r13, r5
    4f20:	58 f4       	brcc	.+22     	; 0x4f38 <vfprintf+0x616>
    4f22:	b7 01       	movw	r22, r14
    4f24:	80 e2       	ldi	r24, 0x20	; 32
    4f26:	90 e0       	ldi	r25, 0x00	; 0
    4f28:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4f2c:	d3 94       	inc	r13
    4f2e:	f7 cf       	rjmp	.-18     	; 0x4f1e <vfprintf+0x5fc>
    4f30:	d5 14       	cp	r13, r5
    4f32:	10 f4       	brcc	.+4      	; 0x4f38 <vfprintf+0x616>
    4f34:	5d 18       	sub	r5, r13
    4f36:	01 c0       	rjmp	.+2      	; 0x4f3a <vfprintf+0x618>
    4f38:	51 2c       	mov	r5, r1
    4f3a:	04 ff       	sbrs	r16, 4
    4f3c:	10 c0       	rjmp	.+32     	; 0x4f5e <vfprintf+0x63c>
    4f3e:	b7 01       	movw	r22, r14
    4f40:	80 e3       	ldi	r24, 0x30	; 48
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4f48:	02 ff       	sbrs	r16, 2
    4f4a:	17 c0       	rjmp	.+46     	; 0x4f7a <vfprintf+0x658>
    4f4c:	01 fd       	sbrc	r16, 1
    4f4e:	03 c0       	rjmp	.+6      	; 0x4f56 <vfprintf+0x634>
    4f50:	88 e7       	ldi	r24, 0x78	; 120
    4f52:	90 e0       	ldi	r25, 0x00	; 0
    4f54:	02 c0       	rjmp	.+4      	; 0x4f5a <vfprintf+0x638>
    4f56:	88 e5       	ldi	r24, 0x58	; 88
    4f58:	90 e0       	ldi	r25, 0x00	; 0
    4f5a:	b7 01       	movw	r22, r14
    4f5c:	0c c0       	rjmp	.+24     	; 0x4f76 <vfprintf+0x654>
    4f5e:	80 2f       	mov	r24, r16
    4f60:	86 78       	andi	r24, 0x86	; 134
    4f62:	59 f0       	breq	.+22     	; 0x4f7a <vfprintf+0x658>
    4f64:	01 ff       	sbrs	r16, 1
    4f66:	02 c0       	rjmp	.+4      	; 0x4f6c <vfprintf+0x64a>
    4f68:	8b e2       	ldi	r24, 0x2B	; 43
    4f6a:	01 c0       	rjmp	.+2      	; 0x4f6e <vfprintf+0x64c>
    4f6c:	80 e2       	ldi	r24, 0x20	; 32
    4f6e:	07 fd       	sbrc	r16, 7
    4f70:	8d e2       	ldi	r24, 0x2D	; 45
    4f72:	b7 01       	movw	r22, r14
    4f74:	90 e0       	ldi	r25, 0x00	; 0
    4f76:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4f7a:	c1 16       	cp	r12, r17
    4f7c:	38 f4       	brcc	.+14     	; 0x4f8c <vfprintf+0x66a>
    4f7e:	b7 01       	movw	r22, r14
    4f80:	80 e3       	ldi	r24, 0x30	; 48
    4f82:	90 e0       	ldi	r25, 0x00	; 0
    4f84:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4f88:	11 50       	subi	r17, 0x01	; 1
    4f8a:	f7 cf       	rjmp	.-18     	; 0x4f7a <vfprintf+0x658>
    4f8c:	ca 94       	dec	r12
    4f8e:	f3 01       	movw	r30, r6
    4f90:	ec 0d       	add	r30, r12
    4f92:	f1 1d       	adc	r31, r1
    4f94:	80 81       	ld	r24, Z
    4f96:	b7 01       	movw	r22, r14
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4f9e:	c1 10       	cpse	r12, r1
    4fa0:	f5 cf       	rjmp	.-22     	; 0x4f8c <vfprintf+0x66a>
    4fa2:	15 c0       	rjmp	.+42     	; 0x4fce <vfprintf+0x6ac>
    4fa4:	f4 e0       	ldi	r31, 0x04	; 4
    4fa6:	f5 15       	cp	r31, r5
    4fa8:	60 f5       	brcc	.+88     	; 0x5002 <vfprintf+0x6e0>
    4faa:	84 e0       	ldi	r24, 0x04	; 4
    4fac:	58 1a       	sub	r5, r24
    4fae:	93 fe       	sbrs	r9, 3
    4fb0:	1f c0       	rjmp	.+62     	; 0x4ff0 <vfprintf+0x6ce>
    4fb2:	01 11       	cpse	r16, r1
    4fb4:	27 c0       	rjmp	.+78     	; 0x5004 <vfprintf+0x6e2>
    4fb6:	2c 85       	ldd	r18, Y+12	; 0x0c
    4fb8:	23 ff       	sbrs	r18, 3
    4fba:	2a c0       	rjmp	.+84     	; 0x5010 <vfprintf+0x6ee>
    4fbc:	08 e2       	ldi	r16, 0x28	; 40
    4fbe:	12 e0       	ldi	r17, 0x02	; 2
    4fc0:	39 2d       	mov	r19, r9
    4fc2:	30 71       	andi	r19, 0x10	; 16
    4fc4:	93 2e       	mov	r9, r19
    4fc6:	f8 01       	movw	r30, r16
    4fc8:	84 91       	lpm	r24, Z
    4fca:	81 11       	cpse	r24, r1
    4fcc:	24 c0       	rjmp	.+72     	; 0x5016 <vfprintf+0x6f4>
    4fce:	55 20       	and	r5, r5
    4fd0:	09 f4       	brne	.+2      	; 0x4fd4 <vfprintf+0x6b2>
    4fd2:	e4 cc       	rjmp	.-1592   	; 0x499c <vfprintf+0x7a>
    4fd4:	b7 01       	movw	r22, r14
    4fd6:	80 e2       	ldi	r24, 0x20	; 32
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4fde:	5a 94       	dec	r5
    4fe0:	f6 cf       	rjmp	.-20     	; 0x4fce <vfprintf+0x6ac>
    4fe2:	f7 01       	movw	r30, r14
    4fe4:	86 81       	ldd	r24, Z+6	; 0x06
    4fe6:	97 81       	ldd	r25, Z+7	; 0x07
    4fe8:	26 c0       	rjmp	.+76     	; 0x5036 <vfprintf+0x714>
    4fea:	8f ef       	ldi	r24, 0xFF	; 255
    4fec:	9f ef       	ldi	r25, 0xFF	; 255
    4fee:	23 c0       	rjmp	.+70     	; 0x5036 <vfprintf+0x714>
    4ff0:	b7 01       	movw	r22, r14
    4ff2:	80 e2       	ldi	r24, 0x20	; 32
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    4ffa:	5a 94       	dec	r5
    4ffc:	51 10       	cpse	r5, r1
    4ffe:	f8 cf       	rjmp	.-16     	; 0x4ff0 <vfprintf+0x6ce>
    5000:	d8 cf       	rjmp	.-80     	; 0x4fb2 <vfprintf+0x690>
    5002:	51 2c       	mov	r5, r1
    5004:	b7 01       	movw	r22, r14
    5006:	80 2f       	mov	r24, r16
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    500e:	d3 cf       	rjmp	.-90     	; 0x4fb6 <vfprintf+0x694>
    5010:	0c e2       	ldi	r16, 0x2C	; 44
    5012:	12 e0       	ldi	r17, 0x02	; 2
    5014:	d5 cf       	rjmp	.-86     	; 0x4fc0 <vfprintf+0x69e>
    5016:	91 10       	cpse	r9, r1
    5018:	80 52       	subi	r24, 0x20	; 32
    501a:	b7 01       	movw	r22, r14
    501c:	90 e0       	ldi	r25, 0x00	; 0
    501e:	0e 94 87 2a 	call	0x550e	; 0x550e <fputc>
    5022:	0f 5f       	subi	r16, 0xFF	; 255
    5024:	1f 4f       	sbci	r17, 0xFF	; 255
    5026:	cf cf       	rjmp	.-98     	; 0x4fc6 <vfprintf+0x6a4>
    5028:	23 e0       	ldi	r18, 0x03	; 3
    502a:	25 15       	cp	r18, r5
    502c:	10 f4       	brcc	.+4      	; 0x5032 <vfprintf+0x710>
    502e:	83 e0       	ldi	r24, 0x03	; 3
    5030:	bd cf       	rjmp	.-134    	; 0x4fac <vfprintf+0x68a>
    5032:	51 2c       	mov	r5, r1
    5034:	c0 cf       	rjmp	.-128    	; 0x4fb6 <vfprintf+0x694>
    5036:	60 96       	adiw	r28, 0x10	; 16
    5038:	cd bf       	out	0x3d, r28	; 61
    503a:	de bf       	out	0x3e, r29	; 62
    503c:	df 91       	pop	r29
    503e:	cf 91       	pop	r28
    5040:	1f 91       	pop	r17
    5042:	0f 91       	pop	r16
    5044:	ff 90       	pop	r15
    5046:	ef 90       	pop	r14
    5048:	df 90       	pop	r13
    504a:	cf 90       	pop	r12
    504c:	bf 90       	pop	r11
    504e:	af 90       	pop	r10
    5050:	9f 90       	pop	r9
    5052:	8f 90       	pop	r8
    5054:	7f 90       	pop	r7
    5056:	6f 90       	pop	r6
    5058:	5f 90       	pop	r5
    505a:	4f 90       	pop	r4
    505c:	3f 90       	pop	r3
    505e:	2f 90       	pop	r2
    5060:	08 95       	ret

00005062 <__udivmodhi4>:
    5062:	aa 1b       	sub	r26, r26
    5064:	bb 1b       	sub	r27, r27
    5066:	51 e1       	ldi	r21, 0x11	; 17
    5068:	07 c0       	rjmp	.+14     	; 0x5078 <__udivmodhi4_ep>

0000506a <__udivmodhi4_loop>:
    506a:	aa 1f       	adc	r26, r26
    506c:	bb 1f       	adc	r27, r27
    506e:	a6 17       	cp	r26, r22
    5070:	b7 07       	cpc	r27, r23
    5072:	10 f0       	brcs	.+4      	; 0x5078 <__udivmodhi4_ep>
    5074:	a6 1b       	sub	r26, r22
    5076:	b7 0b       	sbc	r27, r23

00005078 <__udivmodhi4_ep>:
    5078:	88 1f       	adc	r24, r24
    507a:	99 1f       	adc	r25, r25
    507c:	5a 95       	dec	r21
    507e:	a9 f7       	brne	.-22     	; 0x506a <__udivmodhi4_loop>
    5080:	80 95       	com	r24
    5082:	90 95       	com	r25
    5084:	bc 01       	movw	r22, r24
    5086:	cd 01       	movw	r24, r26
    5088:	08 95       	ret

0000508a <__divmodhi4>:
    508a:	97 fb       	bst	r25, 7
    508c:	07 2e       	mov	r0, r23
    508e:	16 f4       	brtc	.+4      	; 0x5094 <__divmodhi4+0xa>
    5090:	00 94       	com	r0
    5092:	07 d0       	rcall	.+14     	; 0x50a2 <__divmodhi4_neg1>
    5094:	77 fd       	sbrc	r23, 7
    5096:	09 d0       	rcall	.+18     	; 0x50aa <__divmodhi4_neg2>
    5098:	0e 94 31 28 	call	0x5062	; 0x5062 <__udivmodhi4>
    509c:	07 fc       	sbrc	r0, 7
    509e:	05 d0       	rcall	.+10     	; 0x50aa <__divmodhi4_neg2>
    50a0:	3e f4       	brtc	.+14     	; 0x50b0 <__divmodhi4_exit>

000050a2 <__divmodhi4_neg1>:
    50a2:	90 95       	com	r25
    50a4:	81 95       	neg	r24
    50a6:	9f 4f       	sbci	r25, 0xFF	; 255
    50a8:	08 95       	ret

000050aa <__divmodhi4_neg2>:
    50aa:	70 95       	com	r23
    50ac:	61 95       	neg	r22
    50ae:	7f 4f       	sbci	r23, 0xFF	; 255

000050b0 <__divmodhi4_exit>:
    50b0:	08 95       	ret

000050b2 <__umulhisi3>:
    50b2:	a2 9f       	mul	r26, r18
    50b4:	b0 01       	movw	r22, r0
    50b6:	b3 9f       	mul	r27, r19
    50b8:	c0 01       	movw	r24, r0
    50ba:	a3 9f       	mul	r26, r19
    50bc:	70 0d       	add	r23, r0
    50be:	81 1d       	adc	r24, r1
    50c0:	11 24       	eor	r1, r1
    50c2:	91 1d       	adc	r25, r1
    50c4:	b2 9f       	mul	r27, r18
    50c6:	70 0d       	add	r23, r0
    50c8:	81 1d       	adc	r24, r1
    50ca:	11 24       	eor	r1, r1
    50cc:	91 1d       	adc	r25, r1
    50ce:	08 95       	ret

000050d0 <malloc>:
    50d0:	0f 93       	push	r16
    50d2:	1f 93       	push	r17
    50d4:	cf 93       	push	r28
    50d6:	df 93       	push	r29
    50d8:	82 30       	cpi	r24, 0x02	; 2
    50da:	91 05       	cpc	r25, r1
    50dc:	10 f4       	brcc	.+4      	; 0x50e2 <malloc+0x12>
    50de:	82 e0       	ldi	r24, 0x02	; 2
    50e0:	90 e0       	ldi	r25, 0x00	; 0
    50e2:	e0 91 63 22 	lds	r30, 0x2263	; 0x802263 <__flp>
    50e6:	f0 91 64 22 	lds	r31, 0x2264	; 0x802264 <__flp+0x1>
    50ea:	20 e0       	ldi	r18, 0x00	; 0
    50ec:	30 e0       	ldi	r19, 0x00	; 0
    50ee:	a0 e0       	ldi	r26, 0x00	; 0
    50f0:	b0 e0       	ldi	r27, 0x00	; 0
    50f2:	30 97       	sbiw	r30, 0x00	; 0
    50f4:	19 f1       	breq	.+70     	; 0x513c <malloc+0x6c>
    50f6:	40 81       	ld	r20, Z
    50f8:	51 81       	ldd	r21, Z+1	; 0x01
    50fa:	02 81       	ldd	r16, Z+2	; 0x02
    50fc:	13 81       	ldd	r17, Z+3	; 0x03
    50fe:	48 17       	cp	r20, r24
    5100:	59 07       	cpc	r21, r25
    5102:	c8 f0       	brcs	.+50     	; 0x5136 <malloc+0x66>
    5104:	84 17       	cp	r24, r20
    5106:	95 07       	cpc	r25, r21
    5108:	69 f4       	brne	.+26     	; 0x5124 <malloc+0x54>
    510a:	10 97       	sbiw	r26, 0x00	; 0
    510c:	31 f0       	breq	.+12     	; 0x511a <malloc+0x4a>
    510e:	12 96       	adiw	r26, 0x02	; 2
    5110:	0c 93       	st	X, r16
    5112:	12 97       	sbiw	r26, 0x02	; 2
    5114:	13 96       	adiw	r26, 0x03	; 3
    5116:	1c 93       	st	X, r17
    5118:	27 c0       	rjmp	.+78     	; 0x5168 <malloc+0x98>
    511a:	00 93 63 22 	sts	0x2263, r16	; 0x802263 <__flp>
    511e:	10 93 64 22 	sts	0x2264, r17	; 0x802264 <__flp+0x1>
    5122:	22 c0       	rjmp	.+68     	; 0x5168 <malloc+0x98>
    5124:	21 15       	cp	r18, r1
    5126:	31 05       	cpc	r19, r1
    5128:	19 f0       	breq	.+6      	; 0x5130 <malloc+0x60>
    512a:	42 17       	cp	r20, r18
    512c:	53 07       	cpc	r21, r19
    512e:	18 f4       	brcc	.+6      	; 0x5136 <malloc+0x66>
    5130:	9a 01       	movw	r18, r20
    5132:	bd 01       	movw	r22, r26
    5134:	ef 01       	movw	r28, r30
    5136:	df 01       	movw	r26, r30
    5138:	f8 01       	movw	r30, r16
    513a:	db cf       	rjmp	.-74     	; 0x50f2 <malloc+0x22>
    513c:	21 15       	cp	r18, r1
    513e:	31 05       	cpc	r19, r1
    5140:	f9 f0       	breq	.+62     	; 0x5180 <malloc+0xb0>
    5142:	28 1b       	sub	r18, r24
    5144:	39 0b       	sbc	r19, r25
    5146:	24 30       	cpi	r18, 0x04	; 4
    5148:	31 05       	cpc	r19, r1
    514a:	80 f4       	brcc	.+32     	; 0x516c <malloc+0x9c>
    514c:	8a 81       	ldd	r24, Y+2	; 0x02
    514e:	9b 81       	ldd	r25, Y+3	; 0x03
    5150:	61 15       	cp	r22, r1
    5152:	71 05       	cpc	r23, r1
    5154:	21 f0       	breq	.+8      	; 0x515e <malloc+0x8e>
    5156:	fb 01       	movw	r30, r22
    5158:	82 83       	std	Z+2, r24	; 0x02
    515a:	93 83       	std	Z+3, r25	; 0x03
    515c:	04 c0       	rjmp	.+8      	; 0x5166 <malloc+0x96>
    515e:	80 93 63 22 	sts	0x2263, r24	; 0x802263 <__flp>
    5162:	90 93 64 22 	sts	0x2264, r25	; 0x802264 <__flp+0x1>
    5166:	fe 01       	movw	r30, r28
    5168:	32 96       	adiw	r30, 0x02	; 2
    516a:	44 c0       	rjmp	.+136    	; 0x51f4 <malloc+0x124>
    516c:	fe 01       	movw	r30, r28
    516e:	e2 0f       	add	r30, r18
    5170:	f3 1f       	adc	r31, r19
    5172:	81 93       	st	Z+, r24
    5174:	91 93       	st	Z+, r25
    5176:	22 50       	subi	r18, 0x02	; 2
    5178:	31 09       	sbc	r19, r1
    517a:	28 83       	st	Y, r18
    517c:	39 83       	std	Y+1, r19	; 0x01
    517e:	3a c0       	rjmp	.+116    	; 0x51f4 <malloc+0x124>
    5180:	20 91 61 22 	lds	r18, 0x2261	; 0x802261 <__brkval>
    5184:	30 91 62 22 	lds	r19, 0x2262	; 0x802262 <__brkval+0x1>
    5188:	23 2b       	or	r18, r19
    518a:	41 f4       	brne	.+16     	; 0x519c <malloc+0xcc>
    518c:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    5190:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    5194:	20 93 61 22 	sts	0x2261, r18	; 0x802261 <__brkval>
    5198:	30 93 62 22 	sts	0x2262, r19	; 0x802262 <__brkval+0x1>
    519c:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    51a0:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    51a4:	21 15       	cp	r18, r1
    51a6:	31 05       	cpc	r19, r1
    51a8:	41 f4       	brne	.+16     	; 0x51ba <malloc+0xea>
    51aa:	2d b7       	in	r18, 0x3d	; 61
    51ac:	3e b7       	in	r19, 0x3e	; 62
    51ae:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    51b2:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    51b6:	24 1b       	sub	r18, r20
    51b8:	35 0b       	sbc	r19, r21
    51ba:	e0 91 61 22 	lds	r30, 0x2261	; 0x802261 <__brkval>
    51be:	f0 91 62 22 	lds	r31, 0x2262	; 0x802262 <__brkval+0x1>
    51c2:	e2 17       	cp	r30, r18
    51c4:	f3 07       	cpc	r31, r19
    51c6:	a0 f4       	brcc	.+40     	; 0x51f0 <malloc+0x120>
    51c8:	2e 1b       	sub	r18, r30
    51ca:	3f 0b       	sbc	r19, r31
    51cc:	28 17       	cp	r18, r24
    51ce:	39 07       	cpc	r19, r25
    51d0:	78 f0       	brcs	.+30     	; 0x51f0 <malloc+0x120>
    51d2:	ac 01       	movw	r20, r24
    51d4:	4e 5f       	subi	r20, 0xFE	; 254
    51d6:	5f 4f       	sbci	r21, 0xFF	; 255
    51d8:	24 17       	cp	r18, r20
    51da:	35 07       	cpc	r19, r21
    51dc:	48 f0       	brcs	.+18     	; 0x51f0 <malloc+0x120>
    51de:	4e 0f       	add	r20, r30
    51e0:	5f 1f       	adc	r21, r31
    51e2:	40 93 61 22 	sts	0x2261, r20	; 0x802261 <__brkval>
    51e6:	50 93 62 22 	sts	0x2262, r21	; 0x802262 <__brkval+0x1>
    51ea:	81 93       	st	Z+, r24
    51ec:	91 93       	st	Z+, r25
    51ee:	02 c0       	rjmp	.+4      	; 0x51f4 <malloc+0x124>
    51f0:	e0 e0       	ldi	r30, 0x00	; 0
    51f2:	f0 e0       	ldi	r31, 0x00	; 0
    51f4:	cf 01       	movw	r24, r30
    51f6:	df 91       	pop	r29
    51f8:	cf 91       	pop	r28
    51fa:	1f 91       	pop	r17
    51fc:	0f 91       	pop	r16
    51fe:	08 95       	ret

00005200 <free>:
    5200:	cf 93       	push	r28
    5202:	df 93       	push	r29
    5204:	00 97       	sbiw	r24, 0x00	; 0
    5206:	09 f4       	brne	.+2      	; 0x520a <free+0xa>
    5208:	81 c0       	rjmp	.+258    	; 0x530c <free+0x10c>
    520a:	fc 01       	movw	r30, r24
    520c:	32 97       	sbiw	r30, 0x02	; 2
    520e:	12 82       	std	Z+2, r1	; 0x02
    5210:	13 82       	std	Z+3, r1	; 0x03
    5212:	a0 91 63 22 	lds	r26, 0x2263	; 0x802263 <__flp>
    5216:	b0 91 64 22 	lds	r27, 0x2264	; 0x802264 <__flp+0x1>
    521a:	10 97       	sbiw	r26, 0x00	; 0
    521c:	81 f4       	brne	.+32     	; 0x523e <free+0x3e>
    521e:	20 81       	ld	r18, Z
    5220:	31 81       	ldd	r19, Z+1	; 0x01
    5222:	82 0f       	add	r24, r18
    5224:	93 1f       	adc	r25, r19
    5226:	20 91 61 22 	lds	r18, 0x2261	; 0x802261 <__brkval>
    522a:	30 91 62 22 	lds	r19, 0x2262	; 0x802262 <__brkval+0x1>
    522e:	28 17       	cp	r18, r24
    5230:	39 07       	cpc	r19, r25
    5232:	51 f5       	brne	.+84     	; 0x5288 <free+0x88>
    5234:	e0 93 61 22 	sts	0x2261, r30	; 0x802261 <__brkval>
    5238:	f0 93 62 22 	sts	0x2262, r31	; 0x802262 <__brkval+0x1>
    523c:	67 c0       	rjmp	.+206    	; 0x530c <free+0x10c>
    523e:	ed 01       	movw	r28, r26
    5240:	20 e0       	ldi	r18, 0x00	; 0
    5242:	30 e0       	ldi	r19, 0x00	; 0
    5244:	ce 17       	cp	r28, r30
    5246:	df 07       	cpc	r29, r31
    5248:	40 f4       	brcc	.+16     	; 0x525a <free+0x5a>
    524a:	4a 81       	ldd	r20, Y+2	; 0x02
    524c:	5b 81       	ldd	r21, Y+3	; 0x03
    524e:	9e 01       	movw	r18, r28
    5250:	41 15       	cp	r20, r1
    5252:	51 05       	cpc	r21, r1
    5254:	f1 f0       	breq	.+60     	; 0x5292 <free+0x92>
    5256:	ea 01       	movw	r28, r20
    5258:	f5 cf       	rjmp	.-22     	; 0x5244 <free+0x44>
    525a:	c2 83       	std	Z+2, r28	; 0x02
    525c:	d3 83       	std	Z+3, r29	; 0x03
    525e:	40 81       	ld	r20, Z
    5260:	51 81       	ldd	r21, Z+1	; 0x01
    5262:	84 0f       	add	r24, r20
    5264:	95 1f       	adc	r25, r21
    5266:	c8 17       	cp	r28, r24
    5268:	d9 07       	cpc	r29, r25
    526a:	59 f4       	brne	.+22     	; 0x5282 <free+0x82>
    526c:	88 81       	ld	r24, Y
    526e:	99 81       	ldd	r25, Y+1	; 0x01
    5270:	84 0f       	add	r24, r20
    5272:	95 1f       	adc	r25, r21
    5274:	02 96       	adiw	r24, 0x02	; 2
    5276:	80 83       	st	Z, r24
    5278:	91 83       	std	Z+1, r25	; 0x01
    527a:	8a 81       	ldd	r24, Y+2	; 0x02
    527c:	9b 81       	ldd	r25, Y+3	; 0x03
    527e:	82 83       	std	Z+2, r24	; 0x02
    5280:	93 83       	std	Z+3, r25	; 0x03
    5282:	21 15       	cp	r18, r1
    5284:	31 05       	cpc	r19, r1
    5286:	29 f4       	brne	.+10     	; 0x5292 <free+0x92>
    5288:	e0 93 63 22 	sts	0x2263, r30	; 0x802263 <__flp>
    528c:	f0 93 64 22 	sts	0x2264, r31	; 0x802264 <__flp+0x1>
    5290:	3d c0       	rjmp	.+122    	; 0x530c <free+0x10c>
    5292:	e9 01       	movw	r28, r18
    5294:	ea 83       	std	Y+2, r30	; 0x02
    5296:	fb 83       	std	Y+3, r31	; 0x03
    5298:	49 91       	ld	r20, Y+
    529a:	59 91       	ld	r21, Y+
    529c:	c4 0f       	add	r28, r20
    529e:	d5 1f       	adc	r29, r21
    52a0:	ec 17       	cp	r30, r28
    52a2:	fd 07       	cpc	r31, r29
    52a4:	61 f4       	brne	.+24     	; 0x52be <free+0xbe>
    52a6:	80 81       	ld	r24, Z
    52a8:	91 81       	ldd	r25, Z+1	; 0x01
    52aa:	84 0f       	add	r24, r20
    52ac:	95 1f       	adc	r25, r21
    52ae:	02 96       	adiw	r24, 0x02	; 2
    52b0:	e9 01       	movw	r28, r18
    52b2:	88 83       	st	Y, r24
    52b4:	99 83       	std	Y+1, r25	; 0x01
    52b6:	82 81       	ldd	r24, Z+2	; 0x02
    52b8:	93 81       	ldd	r25, Z+3	; 0x03
    52ba:	8a 83       	std	Y+2, r24	; 0x02
    52bc:	9b 83       	std	Y+3, r25	; 0x03
    52be:	e0 e0       	ldi	r30, 0x00	; 0
    52c0:	f0 e0       	ldi	r31, 0x00	; 0
    52c2:	12 96       	adiw	r26, 0x02	; 2
    52c4:	8d 91       	ld	r24, X+
    52c6:	9c 91       	ld	r25, X
    52c8:	13 97       	sbiw	r26, 0x03	; 3
    52ca:	00 97       	sbiw	r24, 0x00	; 0
    52cc:	19 f0       	breq	.+6      	; 0x52d4 <free+0xd4>
    52ce:	fd 01       	movw	r30, r26
    52d0:	dc 01       	movw	r26, r24
    52d2:	f7 cf       	rjmp	.-18     	; 0x52c2 <free+0xc2>
    52d4:	8d 91       	ld	r24, X+
    52d6:	9c 91       	ld	r25, X
    52d8:	11 97       	sbiw	r26, 0x01	; 1
    52da:	9d 01       	movw	r18, r26
    52dc:	2e 5f       	subi	r18, 0xFE	; 254
    52de:	3f 4f       	sbci	r19, 0xFF	; 255
    52e0:	82 0f       	add	r24, r18
    52e2:	93 1f       	adc	r25, r19
    52e4:	20 91 61 22 	lds	r18, 0x2261	; 0x802261 <__brkval>
    52e8:	30 91 62 22 	lds	r19, 0x2262	; 0x802262 <__brkval+0x1>
    52ec:	28 17       	cp	r18, r24
    52ee:	39 07       	cpc	r19, r25
    52f0:	69 f4       	brne	.+26     	; 0x530c <free+0x10c>
    52f2:	30 97       	sbiw	r30, 0x00	; 0
    52f4:	29 f4       	brne	.+10     	; 0x5300 <free+0x100>
    52f6:	10 92 63 22 	sts	0x2263, r1	; 0x802263 <__flp>
    52fa:	10 92 64 22 	sts	0x2264, r1	; 0x802264 <__flp+0x1>
    52fe:	02 c0       	rjmp	.+4      	; 0x5304 <free+0x104>
    5300:	12 82       	std	Z+2, r1	; 0x02
    5302:	13 82       	std	Z+3, r1	; 0x03
    5304:	a0 93 61 22 	sts	0x2261, r26	; 0x802261 <__brkval>
    5308:	b0 93 62 22 	sts	0x2262, r27	; 0x802262 <__brkval+0x1>
    530c:	df 91       	pop	r29
    530e:	cf 91       	pop	r28
    5310:	08 95       	ret

00005312 <__ftoa_engine>:
    5312:	28 30       	cpi	r18, 0x08	; 8
    5314:	08 f0       	brcs	.+2      	; 0x5318 <__ftoa_engine+0x6>
    5316:	27 e0       	ldi	r18, 0x07	; 7
    5318:	33 27       	eor	r19, r19
    531a:	da 01       	movw	r26, r20
    531c:	99 0f       	add	r25, r25
    531e:	31 1d       	adc	r19, r1
    5320:	87 fd       	sbrc	r24, 7
    5322:	91 60       	ori	r25, 0x01	; 1
    5324:	00 96       	adiw	r24, 0x00	; 0
    5326:	61 05       	cpc	r22, r1
    5328:	71 05       	cpc	r23, r1
    532a:	39 f4       	brne	.+14     	; 0x533a <__ftoa_engine+0x28>
    532c:	32 60       	ori	r19, 0x02	; 2
    532e:	2e 5f       	subi	r18, 0xFE	; 254
    5330:	3d 93       	st	X+, r19
    5332:	30 e3       	ldi	r19, 0x30	; 48
    5334:	2a 95       	dec	r18
    5336:	e1 f7       	brne	.-8      	; 0x5330 <__ftoa_engine+0x1e>
    5338:	08 95       	ret
    533a:	9f 3f       	cpi	r25, 0xFF	; 255
    533c:	30 f0       	brcs	.+12     	; 0x534a <__ftoa_engine+0x38>
    533e:	80 38       	cpi	r24, 0x80	; 128
    5340:	71 05       	cpc	r23, r1
    5342:	61 05       	cpc	r22, r1
    5344:	09 f0       	breq	.+2      	; 0x5348 <__ftoa_engine+0x36>
    5346:	3c 5f       	subi	r19, 0xFC	; 252
    5348:	3c 5f       	subi	r19, 0xFC	; 252
    534a:	3d 93       	st	X+, r19
    534c:	91 30       	cpi	r25, 0x01	; 1
    534e:	08 f0       	brcs	.+2      	; 0x5352 <__ftoa_engine+0x40>
    5350:	80 68       	ori	r24, 0x80	; 128
    5352:	91 1d       	adc	r25, r1
    5354:	df 93       	push	r29
    5356:	cf 93       	push	r28
    5358:	1f 93       	push	r17
    535a:	0f 93       	push	r16
    535c:	ff 92       	push	r15
    535e:	ef 92       	push	r14
    5360:	19 2f       	mov	r17, r25
    5362:	98 7f       	andi	r25, 0xF8	; 248
    5364:	96 95       	lsr	r25
    5366:	e9 2f       	mov	r30, r25
    5368:	96 95       	lsr	r25
    536a:	96 95       	lsr	r25
    536c:	e9 0f       	add	r30, r25
    536e:	ff 27       	eor	r31, r31
    5370:	e6 57       	subi	r30, 0x76	; 118
    5372:	fd 4f       	sbci	r31, 0xFD	; 253
    5374:	99 27       	eor	r25, r25
    5376:	33 27       	eor	r19, r19
    5378:	ee 24       	eor	r14, r14
    537a:	ff 24       	eor	r15, r15
    537c:	a7 01       	movw	r20, r14
    537e:	e7 01       	movw	r28, r14
    5380:	05 90       	lpm	r0, Z+
    5382:	08 94       	sec
    5384:	07 94       	ror	r0
    5386:	28 f4       	brcc	.+10     	; 0x5392 <__ftoa_engine+0x80>
    5388:	36 0f       	add	r19, r22
    538a:	e7 1e       	adc	r14, r23
    538c:	f8 1e       	adc	r15, r24
    538e:	49 1f       	adc	r20, r25
    5390:	51 1d       	adc	r21, r1
    5392:	66 0f       	add	r22, r22
    5394:	77 1f       	adc	r23, r23
    5396:	88 1f       	adc	r24, r24
    5398:	99 1f       	adc	r25, r25
    539a:	06 94       	lsr	r0
    539c:	a1 f7       	brne	.-24     	; 0x5386 <__ftoa_engine+0x74>
    539e:	05 90       	lpm	r0, Z+
    53a0:	07 94       	ror	r0
    53a2:	28 f4       	brcc	.+10     	; 0x53ae <__ftoa_engine+0x9c>
    53a4:	e7 0e       	add	r14, r23
    53a6:	f8 1e       	adc	r15, r24
    53a8:	49 1f       	adc	r20, r25
    53aa:	56 1f       	adc	r21, r22
    53ac:	c1 1d       	adc	r28, r1
    53ae:	77 0f       	add	r23, r23
    53b0:	88 1f       	adc	r24, r24
    53b2:	99 1f       	adc	r25, r25
    53b4:	66 1f       	adc	r22, r22
    53b6:	06 94       	lsr	r0
    53b8:	a1 f7       	brne	.-24     	; 0x53a2 <__ftoa_engine+0x90>
    53ba:	05 90       	lpm	r0, Z+
    53bc:	07 94       	ror	r0
    53be:	28 f4       	brcc	.+10     	; 0x53ca <__ftoa_engine+0xb8>
    53c0:	f8 0e       	add	r15, r24
    53c2:	49 1f       	adc	r20, r25
    53c4:	56 1f       	adc	r21, r22
    53c6:	c7 1f       	adc	r28, r23
    53c8:	d1 1d       	adc	r29, r1
    53ca:	88 0f       	add	r24, r24
    53cc:	99 1f       	adc	r25, r25
    53ce:	66 1f       	adc	r22, r22
    53d0:	77 1f       	adc	r23, r23
    53d2:	06 94       	lsr	r0
    53d4:	a1 f7       	brne	.-24     	; 0x53be <__ftoa_engine+0xac>
    53d6:	05 90       	lpm	r0, Z+
    53d8:	07 94       	ror	r0
    53da:	20 f4       	brcc	.+8      	; 0x53e4 <__ftoa_engine+0xd2>
    53dc:	49 0f       	add	r20, r25
    53de:	56 1f       	adc	r21, r22
    53e0:	c7 1f       	adc	r28, r23
    53e2:	d8 1f       	adc	r29, r24
    53e4:	99 0f       	add	r25, r25
    53e6:	66 1f       	adc	r22, r22
    53e8:	77 1f       	adc	r23, r23
    53ea:	88 1f       	adc	r24, r24
    53ec:	06 94       	lsr	r0
    53ee:	a9 f7       	brne	.-22     	; 0x53da <__ftoa_engine+0xc8>
    53f0:	84 91       	lpm	r24, Z
    53f2:	10 95       	com	r17
    53f4:	17 70       	andi	r17, 0x07	; 7
    53f6:	41 f0       	breq	.+16     	; 0x5408 <__ftoa_engine+0xf6>
    53f8:	d6 95       	lsr	r29
    53fa:	c7 95       	ror	r28
    53fc:	57 95       	ror	r21
    53fe:	47 95       	ror	r20
    5400:	f7 94       	ror	r15
    5402:	e7 94       	ror	r14
    5404:	1a 95       	dec	r17
    5406:	c1 f7       	brne	.-16     	; 0x53f8 <__ftoa_engine+0xe6>
    5408:	e0 e3       	ldi	r30, 0x30	; 48
    540a:	f2 e0       	ldi	r31, 0x02	; 2
    540c:	68 94       	set
    540e:	15 90       	lpm	r1, Z+
    5410:	15 91       	lpm	r17, Z+
    5412:	35 91       	lpm	r19, Z+
    5414:	65 91       	lpm	r22, Z+
    5416:	95 91       	lpm	r25, Z+
    5418:	05 90       	lpm	r0, Z+
    541a:	7f e2       	ldi	r23, 0x2F	; 47
    541c:	73 95       	inc	r23
    541e:	e1 18       	sub	r14, r1
    5420:	f1 0a       	sbc	r15, r17
    5422:	43 0b       	sbc	r20, r19
    5424:	56 0b       	sbc	r21, r22
    5426:	c9 0b       	sbc	r28, r25
    5428:	d0 09       	sbc	r29, r0
    542a:	c0 f7       	brcc	.-16     	; 0x541c <__ftoa_engine+0x10a>
    542c:	e1 0c       	add	r14, r1
    542e:	f1 1e       	adc	r15, r17
    5430:	43 1f       	adc	r20, r19
    5432:	56 1f       	adc	r21, r22
    5434:	c9 1f       	adc	r28, r25
    5436:	d0 1d       	adc	r29, r0
    5438:	7e f4       	brtc	.+30     	; 0x5458 <__ftoa_engine+0x146>
    543a:	70 33       	cpi	r23, 0x30	; 48
    543c:	11 f4       	brne	.+4      	; 0x5442 <__ftoa_engine+0x130>
    543e:	8a 95       	dec	r24
    5440:	e6 cf       	rjmp	.-52     	; 0x540e <__ftoa_engine+0xfc>
    5442:	e8 94       	clt
    5444:	01 50       	subi	r16, 0x01	; 1
    5446:	30 f0       	brcs	.+12     	; 0x5454 <__ftoa_engine+0x142>
    5448:	08 0f       	add	r16, r24
    544a:	0a f4       	brpl	.+2      	; 0x544e <__ftoa_engine+0x13c>
    544c:	00 27       	eor	r16, r16
    544e:	02 17       	cp	r16, r18
    5450:	08 f4       	brcc	.+2      	; 0x5454 <__ftoa_engine+0x142>
    5452:	20 2f       	mov	r18, r16
    5454:	23 95       	inc	r18
    5456:	02 2f       	mov	r16, r18
    5458:	7a 33       	cpi	r23, 0x3A	; 58
    545a:	28 f0       	brcs	.+10     	; 0x5466 <__ftoa_engine+0x154>
    545c:	79 e3       	ldi	r23, 0x39	; 57
    545e:	7d 93       	st	X+, r23
    5460:	2a 95       	dec	r18
    5462:	e9 f7       	brne	.-6      	; 0x545e <__ftoa_engine+0x14c>
    5464:	10 c0       	rjmp	.+32     	; 0x5486 <__ftoa_engine+0x174>
    5466:	7d 93       	st	X+, r23
    5468:	2a 95       	dec	r18
    546a:	89 f6       	brne	.-94     	; 0x540e <__ftoa_engine+0xfc>
    546c:	06 94       	lsr	r0
    546e:	97 95       	ror	r25
    5470:	67 95       	ror	r22
    5472:	37 95       	ror	r19
    5474:	17 95       	ror	r17
    5476:	17 94       	ror	r1
    5478:	e1 18       	sub	r14, r1
    547a:	f1 0a       	sbc	r15, r17
    547c:	43 0b       	sbc	r20, r19
    547e:	56 0b       	sbc	r21, r22
    5480:	c9 0b       	sbc	r28, r25
    5482:	d0 09       	sbc	r29, r0
    5484:	98 f0       	brcs	.+38     	; 0x54ac <__ftoa_engine+0x19a>
    5486:	23 95       	inc	r18
    5488:	7e 91       	ld	r23, -X
    548a:	73 95       	inc	r23
    548c:	7a 33       	cpi	r23, 0x3A	; 58
    548e:	08 f0       	brcs	.+2      	; 0x5492 <__ftoa_engine+0x180>
    5490:	70 e3       	ldi	r23, 0x30	; 48
    5492:	7c 93       	st	X, r23
    5494:	20 13       	cpse	r18, r16
    5496:	b8 f7       	brcc	.-18     	; 0x5486 <__ftoa_engine+0x174>
    5498:	7e 91       	ld	r23, -X
    549a:	70 61       	ori	r23, 0x10	; 16
    549c:	7d 93       	st	X+, r23
    549e:	30 f0       	brcs	.+12     	; 0x54ac <__ftoa_engine+0x19a>
    54a0:	83 95       	inc	r24
    54a2:	71 e3       	ldi	r23, 0x31	; 49
    54a4:	7d 93       	st	X+, r23
    54a6:	70 e3       	ldi	r23, 0x30	; 48
    54a8:	2a 95       	dec	r18
    54aa:	e1 f7       	brne	.-8      	; 0x54a4 <__ftoa_engine+0x192>
    54ac:	11 24       	eor	r1, r1
    54ae:	ef 90       	pop	r14
    54b0:	ff 90       	pop	r15
    54b2:	0f 91       	pop	r16
    54b4:	1f 91       	pop	r17
    54b6:	cf 91       	pop	r28
    54b8:	df 91       	pop	r29
    54ba:	99 27       	eor	r25, r25
    54bc:	87 fd       	sbrc	r24, 7
    54be:	90 95       	com	r25
    54c0:	08 95       	ret

000054c2 <strnlen_P>:
    54c2:	fc 01       	movw	r30, r24
    54c4:	05 90       	lpm	r0, Z+
    54c6:	61 50       	subi	r22, 0x01	; 1
    54c8:	70 40       	sbci	r23, 0x00	; 0
    54ca:	01 10       	cpse	r0, r1
    54cc:	d8 f7       	brcc	.-10     	; 0x54c4 <strnlen_P+0x2>
    54ce:	80 95       	com	r24
    54d0:	90 95       	com	r25
    54d2:	8e 0f       	add	r24, r30
    54d4:	9f 1f       	adc	r25, r31
    54d6:	08 95       	ret

000054d8 <memcpy>:
    54d8:	fb 01       	movw	r30, r22
    54da:	dc 01       	movw	r26, r24
    54dc:	02 c0       	rjmp	.+4      	; 0x54e2 <memcpy+0xa>
    54de:	01 90       	ld	r0, Z+
    54e0:	0d 92       	st	X+, r0
    54e2:	41 50       	subi	r20, 0x01	; 1
    54e4:	50 40       	sbci	r21, 0x00	; 0
    54e6:	d8 f7       	brcc	.-10     	; 0x54de <memcpy+0x6>
    54e8:	08 95       	ret

000054ea <memset>:
    54ea:	dc 01       	movw	r26, r24
    54ec:	01 c0       	rjmp	.+2      	; 0x54f0 <memset+0x6>
    54ee:	6d 93       	st	X+, r22
    54f0:	41 50       	subi	r20, 0x01	; 1
    54f2:	50 40       	sbci	r21, 0x00	; 0
    54f4:	e0 f7       	brcc	.-8      	; 0x54ee <memset+0x4>
    54f6:	08 95       	ret

000054f8 <strnlen>:
    54f8:	fc 01       	movw	r30, r24
    54fa:	61 50       	subi	r22, 0x01	; 1
    54fc:	70 40       	sbci	r23, 0x00	; 0
    54fe:	01 90       	ld	r0, Z+
    5500:	01 10       	cpse	r0, r1
    5502:	d8 f7       	brcc	.-10     	; 0x54fa <strnlen+0x2>
    5504:	80 95       	com	r24
    5506:	90 95       	com	r25
    5508:	8e 0f       	add	r24, r30
    550a:	9f 1f       	adc	r25, r31
    550c:	08 95       	ret

0000550e <fputc>:
    550e:	0f 93       	push	r16
    5510:	1f 93       	push	r17
    5512:	cf 93       	push	r28
    5514:	df 93       	push	r29
    5516:	fb 01       	movw	r30, r22
    5518:	23 81       	ldd	r18, Z+3	; 0x03
    551a:	21 fd       	sbrc	r18, 1
    551c:	03 c0       	rjmp	.+6      	; 0x5524 <fputc+0x16>
    551e:	8f ef       	ldi	r24, 0xFF	; 255
    5520:	9f ef       	ldi	r25, 0xFF	; 255
    5522:	2c c0       	rjmp	.+88     	; 0x557c <fputc+0x6e>
    5524:	22 ff       	sbrs	r18, 2
    5526:	16 c0       	rjmp	.+44     	; 0x5554 <fputc+0x46>
    5528:	46 81       	ldd	r20, Z+6	; 0x06
    552a:	57 81       	ldd	r21, Z+7	; 0x07
    552c:	24 81       	ldd	r18, Z+4	; 0x04
    552e:	35 81       	ldd	r19, Z+5	; 0x05
    5530:	42 17       	cp	r20, r18
    5532:	53 07       	cpc	r21, r19
    5534:	44 f4       	brge	.+16     	; 0x5546 <fputc+0x38>
    5536:	a0 81       	ld	r26, Z
    5538:	b1 81       	ldd	r27, Z+1	; 0x01
    553a:	9d 01       	movw	r18, r26
    553c:	2f 5f       	subi	r18, 0xFF	; 255
    553e:	3f 4f       	sbci	r19, 0xFF	; 255
    5540:	20 83       	st	Z, r18
    5542:	31 83       	std	Z+1, r19	; 0x01
    5544:	8c 93       	st	X, r24
    5546:	26 81       	ldd	r18, Z+6	; 0x06
    5548:	37 81       	ldd	r19, Z+7	; 0x07
    554a:	2f 5f       	subi	r18, 0xFF	; 255
    554c:	3f 4f       	sbci	r19, 0xFF	; 255
    554e:	26 83       	std	Z+6, r18	; 0x06
    5550:	37 83       	std	Z+7, r19	; 0x07
    5552:	14 c0       	rjmp	.+40     	; 0x557c <fputc+0x6e>
    5554:	8b 01       	movw	r16, r22
    5556:	ec 01       	movw	r28, r24
    5558:	fb 01       	movw	r30, r22
    555a:	00 84       	ldd	r0, Z+8	; 0x08
    555c:	f1 85       	ldd	r31, Z+9	; 0x09
    555e:	e0 2d       	mov	r30, r0
    5560:	19 95       	eicall
    5562:	89 2b       	or	r24, r25
    5564:	e1 f6       	brne	.-72     	; 0x551e <fputc+0x10>
    5566:	d8 01       	movw	r26, r16
    5568:	16 96       	adiw	r26, 0x06	; 6
    556a:	8d 91       	ld	r24, X+
    556c:	9c 91       	ld	r25, X
    556e:	17 97       	sbiw	r26, 0x07	; 7
    5570:	01 96       	adiw	r24, 0x01	; 1
    5572:	16 96       	adiw	r26, 0x06	; 6
    5574:	8d 93       	st	X+, r24
    5576:	9c 93       	st	X, r25
    5578:	17 97       	sbiw	r26, 0x07	; 7
    557a:	ce 01       	movw	r24, r28
    557c:	df 91       	pop	r29
    557e:	cf 91       	pop	r28
    5580:	1f 91       	pop	r17
    5582:	0f 91       	pop	r16
    5584:	08 95       	ret

00005586 <printf>:
    5586:	cf 93       	push	r28
    5588:	df 93       	push	r29
    558a:	cd b7       	in	r28, 0x3d	; 61
    558c:	de b7       	in	r29, 0x3e	; 62
    558e:	ae 01       	movw	r20, r28
    5590:	4a 5f       	subi	r20, 0xFA	; 250
    5592:	5f 4f       	sbci	r21, 0xFF	; 255
    5594:	fa 01       	movw	r30, r20
    5596:	61 91       	ld	r22, Z+
    5598:	71 91       	ld	r23, Z+
    559a:	af 01       	movw	r20, r30
    559c:	80 91 67 22 	lds	r24, 0x2267	; 0x802267 <__iob+0x2>
    55a0:	90 91 68 22 	lds	r25, 0x2268	; 0x802268 <__iob+0x3>
    55a4:	0e 94 91 24 	call	0x4922	; 0x4922 <vfprintf>
    55a8:	df 91       	pop	r29
    55aa:	cf 91       	pop	r28
    55ac:	08 95       	ret

000055ae <__ultoa_invert>:
    55ae:	fa 01       	movw	r30, r20
    55b0:	aa 27       	eor	r26, r26
    55b2:	28 30       	cpi	r18, 0x08	; 8
    55b4:	51 f1       	breq	.+84     	; 0x560a <__ultoa_invert+0x5c>
    55b6:	20 31       	cpi	r18, 0x10	; 16
    55b8:	81 f1       	breq	.+96     	; 0x561a <__ultoa_invert+0x6c>
    55ba:	e8 94       	clt
    55bc:	6f 93       	push	r22
    55be:	6e 7f       	andi	r22, 0xFE	; 254
    55c0:	6e 5f       	subi	r22, 0xFE	; 254
    55c2:	7f 4f       	sbci	r23, 0xFF	; 255
    55c4:	8f 4f       	sbci	r24, 0xFF	; 255
    55c6:	9f 4f       	sbci	r25, 0xFF	; 255
    55c8:	af 4f       	sbci	r26, 0xFF	; 255
    55ca:	b1 e0       	ldi	r27, 0x01	; 1
    55cc:	3e d0       	rcall	.+124    	; 0x564a <__ultoa_invert+0x9c>
    55ce:	b4 e0       	ldi	r27, 0x04	; 4
    55d0:	3c d0       	rcall	.+120    	; 0x564a <__ultoa_invert+0x9c>
    55d2:	67 0f       	add	r22, r23
    55d4:	78 1f       	adc	r23, r24
    55d6:	89 1f       	adc	r24, r25
    55d8:	9a 1f       	adc	r25, r26
    55da:	a1 1d       	adc	r26, r1
    55dc:	68 0f       	add	r22, r24
    55de:	79 1f       	adc	r23, r25
    55e0:	8a 1f       	adc	r24, r26
    55e2:	91 1d       	adc	r25, r1
    55e4:	a1 1d       	adc	r26, r1
    55e6:	6a 0f       	add	r22, r26
    55e8:	71 1d       	adc	r23, r1
    55ea:	81 1d       	adc	r24, r1
    55ec:	91 1d       	adc	r25, r1
    55ee:	a1 1d       	adc	r26, r1
    55f0:	20 d0       	rcall	.+64     	; 0x5632 <__ultoa_invert+0x84>
    55f2:	09 f4       	brne	.+2      	; 0x55f6 <__ultoa_invert+0x48>
    55f4:	68 94       	set
    55f6:	3f 91       	pop	r19
    55f8:	2a e0       	ldi	r18, 0x0A	; 10
    55fa:	26 9f       	mul	r18, r22
    55fc:	11 24       	eor	r1, r1
    55fe:	30 19       	sub	r19, r0
    5600:	30 5d       	subi	r19, 0xD0	; 208
    5602:	31 93       	st	Z+, r19
    5604:	de f6       	brtc	.-74     	; 0x55bc <__ultoa_invert+0xe>
    5606:	cf 01       	movw	r24, r30
    5608:	08 95       	ret
    560a:	46 2f       	mov	r20, r22
    560c:	47 70       	andi	r20, 0x07	; 7
    560e:	40 5d       	subi	r20, 0xD0	; 208
    5610:	41 93       	st	Z+, r20
    5612:	b3 e0       	ldi	r27, 0x03	; 3
    5614:	0f d0       	rcall	.+30     	; 0x5634 <__ultoa_invert+0x86>
    5616:	c9 f7       	brne	.-14     	; 0x560a <__ultoa_invert+0x5c>
    5618:	f6 cf       	rjmp	.-20     	; 0x5606 <__ultoa_invert+0x58>
    561a:	46 2f       	mov	r20, r22
    561c:	4f 70       	andi	r20, 0x0F	; 15
    561e:	40 5d       	subi	r20, 0xD0	; 208
    5620:	4a 33       	cpi	r20, 0x3A	; 58
    5622:	18 f0       	brcs	.+6      	; 0x562a <__ultoa_invert+0x7c>
    5624:	49 5d       	subi	r20, 0xD9	; 217
    5626:	31 fd       	sbrc	r19, 1
    5628:	40 52       	subi	r20, 0x20	; 32
    562a:	41 93       	st	Z+, r20
    562c:	02 d0       	rcall	.+4      	; 0x5632 <__ultoa_invert+0x84>
    562e:	a9 f7       	brne	.-22     	; 0x561a <__ultoa_invert+0x6c>
    5630:	ea cf       	rjmp	.-44     	; 0x5606 <__ultoa_invert+0x58>
    5632:	b4 e0       	ldi	r27, 0x04	; 4
    5634:	a6 95       	lsr	r26
    5636:	97 95       	ror	r25
    5638:	87 95       	ror	r24
    563a:	77 95       	ror	r23
    563c:	67 95       	ror	r22
    563e:	ba 95       	dec	r27
    5640:	c9 f7       	brne	.-14     	; 0x5634 <__ultoa_invert+0x86>
    5642:	00 97       	sbiw	r24, 0x00	; 0
    5644:	61 05       	cpc	r22, r1
    5646:	71 05       	cpc	r23, r1
    5648:	08 95       	ret
    564a:	9b 01       	movw	r18, r22
    564c:	ac 01       	movw	r20, r24
    564e:	0a 2e       	mov	r0, r26
    5650:	06 94       	lsr	r0
    5652:	57 95       	ror	r21
    5654:	47 95       	ror	r20
    5656:	37 95       	ror	r19
    5658:	27 95       	ror	r18
    565a:	ba 95       	dec	r27
    565c:	c9 f7       	brne	.-14     	; 0x5650 <__ultoa_invert+0xa2>
    565e:	62 0f       	add	r22, r18
    5660:	73 1f       	adc	r23, r19
    5662:	84 1f       	adc	r24, r20
    5664:	95 1f       	adc	r25, r21
    5666:	a0 1d       	adc	r26, r0
    5668:	08 95       	ret

0000566a <_exit>:
    566a:	f8 94       	cli

0000566c <__stop_program>:
    566c:	ff cf       	rjmp	.-2      	; 0x566c <__stop_program>
