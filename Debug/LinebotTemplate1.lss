
LinebotTemplate1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002254  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00802000  00002254  000022e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00802098  00802098  00002380  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000240c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00002450  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000059b5  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003347  00000000  00000000  0000806d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b22  00000000  00000000  0000b3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000073c  00000000  00000000  0000ced8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002a96  00000000  00000000  0000d614  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000de9  00000000  00000000  000100aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00010e93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 83 01 	jmp	0x306	; 0x306 <__ctors_end>
       4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
       8:	0c 94 91 04 	jmp	0x922	; 0x922 <__vector_2>
       c:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__vector_3>
      10:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      14:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      18:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      1c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      20:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      24:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      28:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      2c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      30:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      34:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      38:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__vector_14>
      3c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      40:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      44:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      48:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      4c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      50:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      54:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      58:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      5c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      60:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      64:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      68:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      6c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      70:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      74:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      78:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      7c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      80:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      84:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      88:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      8c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      90:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      94:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      98:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      9c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      a0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      a4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      a8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      ac:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__vector_43>
      b0:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__vector_44>
      b4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      b8:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__vector_46>
      bc:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      c0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      c4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      c8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      cc:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      d0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      d4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      d8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      dc:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      e0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      e4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      e8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      ec:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      f0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      f4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      f8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      fc:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     100:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     104:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     108:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     10c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     110:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     114:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     118:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     11c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     120:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     124:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     128:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     12c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     130:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     134:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     138:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     13c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     140:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     144:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     148:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     14c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     150:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     154:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     158:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     15c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     160:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     164:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     168:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     16c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     170:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     174:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     178:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     17c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     180:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     184:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     188:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     18c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     190:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     194:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     198:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     19c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1a0:	0c 94 2b 03 	jmp	0x656	; 0x656 <__vector_104>
     1a4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1a8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1ac:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1b0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1b4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1b8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1bc:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1c0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1c4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1c8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1cc:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1d0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1d4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1d8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1dc:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1e0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1e4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1e8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1ec:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1f0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1f4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1f8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <stdio_putchar>
     200:	0c 94 06 09 	jmp	0x120c	; 0x120c <stdio_getchar>

00000204 <__trampolines_end>:
     204:	6e 61       	ori	r22, 0x1E	; 30
     206:	6e 00       	.word	0x006e	; ????

00000208 <__c.2332>:
     208:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     218:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     228:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     238:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     248:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     258:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     268:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     278:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     288:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     298:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000306 <__ctors_end>:
     306:	11 24       	eor	r1, r1
     308:	1f be       	out	0x3f, r1	; 63
     30a:	cf ef       	ldi	r28, 0xFF	; 255
     30c:	cd bf       	out	0x3d, r28	; 61
     30e:	df e9       	ldi	r29, 0x9F	; 159
     310:	de bf       	out	0x3e, r29	; 62
     312:	00 e0       	ldi	r16, 0x00	; 0
     314:	0c bf       	out	0x3c, r16	; 60

00000316 <__do_copy_data>:
     316:	10 e2       	ldi	r17, 0x20	; 32
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e2       	ldi	r27, 0x20	; 32
     31c:	e4 e5       	ldi	r30, 0x54	; 84
     31e:	f2 e2       	ldi	r31, 0x22	; 34
     320:	00 e0       	ldi	r16, 0x00	; 0
     322:	0b bf       	out	0x3b, r16	; 59
     324:	02 c0       	rjmp	.+4      	; 0x32a <__do_copy_data+0x14>
     326:	07 90       	elpm	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	a8 39       	cpi	r26, 0x98	; 152
     32c:	b1 07       	cpc	r27, r17
     32e:	d9 f7       	brne	.-10     	; 0x326 <__do_copy_data+0x10>

00000330 <__do_clear_bss>:
     330:	20 e2       	ldi	r18, 0x20	; 32
     332:	a8 e9       	ldi	r26, 0x98	; 152
     334:	b0 e2       	ldi	r27, 0x20	; 32
     336:	01 c0       	rjmp	.+2      	; 0x33a <.do_clear_bss_start>

00000338 <.do_clear_bss_loop>:
     338:	1d 92       	st	X+, r1

0000033a <.do_clear_bss_start>:
     33a:	ac 3c       	cpi	r26, 0xCC	; 204
     33c:	b2 07       	cpc	r27, r18
     33e:	e1 f7       	brne	.-8      	; 0x338 <.do_clear_bss_loop>
     340:	0e 94 20 09 	call	0x1240	; 0x1240 <main>
     344:	0c 94 28 11 	jmp	0x2250	; 0x2250 <_exit>

00000348 <__bad_interrupt>:
     348:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000034c <DriverPL9823BitbangSet>:
     34c:	0f 92       	push	r0
     34e:	df 93       	push	r29
     350:	d8 e0       	ldi	r29, 0x08	; 8
     352:	e8 e9       	ldi	r30, 0x98	; 152
     354:	f0 e2       	ldi	r31, 0x20	; 32
     356:	61 93       	st	Z+, r22
     358:	71 93       	st	Z+, r23
     35a:	81 93       	st	Z+, r24
     35c:	21 93       	st	Z+, r18
     35e:	31 93       	st	Z+, r19
     360:	41 93       	st	Z+, r20
     362:	e1 92       	st	Z+, r14
     364:	f1 92       	st	Z+, r15
     366:	01 93       	st	Z+, r16
     368:	a1 92       	st	Z+, r10
     36a:	b1 92       	st	Z+, r11
     36c:	c1 92       	st	Z+, r12
     36e:	e8 e9       	ldi	r30, 0x98	; 152
     370:	f0 e2       	ldi	r31, 0x20	; 32

00000372 <startx>:
     372:	e8 e9       	ldi	r30, 0x98	; 152
     374:	f0 e2       	ldi	r31, 0x20	; 32
     376:	d0 93 66 06 	sts	0x0666, r29	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     37a:	5f ef       	ldi	r21, 0xFF	; 255
     37c:	63 e0       	ldi	r22, 0x03	; 3

0000037e <delay200>:
     37e:	5a 95       	dec	r21
     380:	f1 f7       	brne	.-4      	; 0x37e <delay200>
     382:	6a 95       	dec	r22
     384:	e1 f7       	brne	.-8      	; 0x37e <delay200>
     386:	04 e0       	ldi	r16, 0x04	; 4

00000388 <loop1>:
     388:	13 e0       	ldi	r17, 0x03	; 3

0000038a <loop2>:
     38a:	d0 93 65 06 	sts	0x0665, r29	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     38e:	21 91       	ld	r18, Z+
     390:	38 e0       	ldi	r19, 0x08	; 8

00000392 <loop3>:
     392:	d0 93 65 06 	sts	0x0665, r29	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	...
     3a2:	00 00       	nop
     3a4:	27 ff       	sbrs	r18, 7
     3a6:	d0 93 66 06 	sts	0x0666, r29	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     3aa:	00 00       	nop
     3ac:	00 00       	nop
     3ae:	22 0f       	add	r18, r18
     3b0:	59 e0       	ldi	r21, 0x09	; 9

000003b2 <delay32>:
     3b2:	5a 95       	dec	r21
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <delay32>
     3b6:	d0 93 66 06 	sts	0x0666, r29	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	...
     3c6:	3a 95       	dec	r19
     3c8:	21 f7       	brne	.-56     	; 0x392 <loop3>
     3ca:	1a 95       	dec	r17
     3cc:	f1 f6       	brne	.-68     	; 0x38a <loop2>
     3ce:	0a 95       	dec	r16
     3d0:	d9 f6       	brne	.-74     	; 0x388 <loop1>
     3d2:	d0 93 65 06 	sts	0x0665, r29	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     3d6:	df 91       	pop	r29
     3d8:	0f 90       	pop	r0
     3da:	11 24       	eor	r1, r1

000003dc <end>:
     3dc:	08 95       	ret

000003de <DriverAdcInit>:
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
     3e6:	00 00       	nop
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <DriverAdps9960Init>:

#define REG_ID 0x92
#define ID 0xAB

void DriverAdps9960Init(void)
{
     3ee:	0f 93       	push	r16
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <DriverAdps9960Init+0x8>
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
	uint8_t res;
	uint8_t Buffer[2];
	Buffer[0]=REG_ENABLE;
     3fa:	80 e8       	ldi	r24, 0x80	; 128
     3fc:	8a 83       	std	Y+2, r24	; 0x02
	Buffer[1]=(1<<REG_ENABLE_PON);
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	8b 83       	std	Y+3, r24	; 0x03
	res=TWIMWrite(ADPS9960_ADDR,Buffer,2);
     402:	ce 01       	movw	r24, r28
     404:	02 96       	adiw	r24, 0x02	; 2
     406:	42 e0       	ldi	r20, 0x02	; 2
     408:	bc 01       	movw	r22, r24
     40a:	89 e3       	ldi	r24, 0x39	; 57
     40c:	0e 94 f5 06 	call	0xdea	; 0xdea <TWIMWrite>
     410:	89 83       	std	Y+1, r24	; 0x01
	
	Buffer[0]=REG_ID;
     412:	82 e9       	ldi	r24, 0x92	; 146
     414:	8a 83       	std	Y+2, r24	; 0x02
	TWIMWriteRead(ADPS9960_ADDR,Buffer,1,Buffer,1);
     416:	9e 01       	movw	r18, r28
     418:	2e 5f       	subi	r18, 0xFE	; 254
     41a:	3f 4f       	sbci	r19, 0xFF	; 255
     41c:	ce 01       	movw	r24, r28
     41e:	02 96       	adiw	r24, 0x02	; 2
     420:	01 e0       	ldi	r16, 0x01	; 1
     422:	41 e0       	ldi	r20, 0x01	; 1
     424:	bc 01       	movw	r22, r24
     426:	89 e3       	ldi	r24, 0x39	; 57
     428:	0e 94 14 07 	call	0xe28	; 0xe28 <TWIMWriteRead>
	if (Buffer[0]!=ID)
     42c:	8a 81       	ldd	r24, Y+2	; 0x02
     42e:	8b 3a       	cpi	r24, 0xAB	; 171
     430:	99 f0       	breq	.+38     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		printf ("ADPS9960 ID readback fail: %d read\r\n",Buffer[0]);
     432:	8a 81       	ldd	r24, Y+2	; 0x02
     434:	88 2f       	mov	r24, r24
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	29 2f       	mov	r18, r25
     43a:	2f 93       	push	r18
     43c:	8f 93       	push	r24
     43e:	8e e0       	ldi	r24, 0x0E	; 14
     440:	90 e2       	ldi	r25, 0x20	; 32
     442:	89 2f       	mov	r24, r25
     444:	8f 93       	push	r24
     446:	8e e0       	ldi	r24, 0x0E	; 14
     448:	90 e2       	ldi	r25, 0x20	; 32
     44a:	8f 93       	push	r24
     44c:	0e 94 b6 10 	call	0x216c	; 0x216c <printf>
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0

	Buffer[0]=REG_ATIME;
     458:	81 e8       	ldi	r24, 0x81	; 129
     45a:	8a 83       	std	Y+2, r24	; 0x02
	Buffer[1]=219; //100ms integration time
     45c:	8b ed       	ldi	r24, 0xDB	; 219
     45e:	8b 83       	std	Y+3, r24	; 0x03
	res=TWIMWrite(ADPS9960_ADDR,Buffer,2);
     460:	ce 01       	movw	r24, r28
     462:	02 96       	adiw	r24, 0x02	; 2
     464:	42 e0       	ldi	r20, 0x02	; 2
     466:	bc 01       	movw	r22, r24
     468:	89 e3       	ldi	r24, 0x39	; 57
     46a:	0e 94 f5 06 	call	0xdea	; 0xdea <TWIMWrite>
     46e:	89 83       	std	Y+1, r24	; 0x01

	Buffer[0]=REG_CTRL1;
     470:	8f e8       	ldi	r24, 0x8F	; 143
     472:	8a 83       	std	Y+2, r24	; 0x02
	Buffer[1]=0b11<<REG_CTRL1_AGAIN; //max gain
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	8b 83       	std	Y+3, r24	; 0x03
	res=TWIMWrite(ADPS9960_ADDR,Buffer,2);
     478:	ce 01       	movw	r24, r28
     47a:	02 96       	adiw	r24, 0x02	; 2
     47c:	42 e0       	ldi	r20, 0x02	; 2
     47e:	bc 01       	movw	r22, r24
     480:	89 e3       	ldi	r24, 0x39	; 57
     482:	0e 94 f5 06 	call	0xdea	; 0xdea <TWIMWrite>
     486:	89 83       	std	Y+1, r24	; 0x01

}
     488:	00 00       	nop
     48a:	23 96       	adiw	r28, 0x03	; 3
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	de bf       	out	0x3e, r29	; 62
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	0f 91       	pop	r16
     496:	08 95       	ret

00000498 <DriverAdps9960Get>:

void DriverAdps9960Get(uint16_t *Clear,uint16_t *Red,uint16_t *Green, uint16_t *Blue)
{
     498:	0f 93       	push	r16
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	6c 97       	sbiw	r28, 0x1c	; 28
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	8d 8b       	std	Y+21, r24	; 0x15
     4aa:	9e 8b       	std	Y+22, r25	; 0x16
     4ac:	6f 8b       	std	Y+23, r22	; 0x17
     4ae:	78 8f       	std	Y+24, r23	; 0x18
     4b0:	49 8f       	std	Y+25, r20	; 0x19
     4b2:	5a 8f       	std	Y+26, r21	; 0x1a
     4b4:	2b 8f       	std	Y+27, r18	; 0x1b
     4b6:	3c 8f       	std	Y+28, r19	; 0x1c
	uint8_t res;
	uint8_t Buffer[9];
	uint16_t *C=(uint16_t *) &(Buffer[0]),*R=(uint16_t *) &(Buffer[2]),*G=(uint16_t *) &(Buffer[4]),*B=(uint16_t *) &(Buffer[6]);
     4b8:	ce 01       	movw	r24, r28
     4ba:	0c 96       	adiw	r24, 0x0c	; 12
     4bc:	89 83       	std	Y+1, r24	; 0x01
     4be:	9a 83       	std	Y+2, r25	; 0x02
     4c0:	ce 01       	movw	r24, r28
     4c2:	0c 96       	adiw	r24, 0x0c	; 12
     4c4:	02 96       	adiw	r24, 0x02	; 2
     4c6:	8b 83       	std	Y+3, r24	; 0x03
     4c8:	9c 83       	std	Y+4, r25	; 0x04
     4ca:	ce 01       	movw	r24, r28
     4cc:	0c 96       	adiw	r24, 0x0c	; 12
     4ce:	04 96       	adiw	r24, 0x04	; 4
     4d0:	8d 83       	std	Y+5, r24	; 0x05
     4d2:	9e 83       	std	Y+6, r25	; 0x06
     4d4:	ce 01       	movw	r24, r28
     4d6:	0c 96       	adiw	r24, 0x0c	; 12
     4d8:	06 96       	adiw	r24, 0x06	; 6
     4da:	8f 83       	std	Y+7, r24	; 0x07
     4dc:	98 87       	std	Y+8, r25	; 0x08
	uint8_t *Status=&(Buffer[0]);
     4de:	ce 01       	movw	r24, r28
     4e0:	0c 96       	adiw	r24, 0x0c	; 12
     4e2:	89 87       	std	Y+9, r24	; 0x09
     4e4:	9a 87       	std	Y+10, r25	; 0x0a


	Buffer[0]=REG_ENABLE;
     4e6:	80 e8       	ldi	r24, 0x80	; 128
     4e8:	8c 87       	std	Y+12, r24	; 0x0c
	Buffer[1]=(1<<REG_ENABLE_PON) | (1<<REG_ENABLE_AEN);
     4ea:	83 e0       	ldi	r24, 0x03	; 3
     4ec:	8d 87       	std	Y+13, r24	; 0x0d
	res=TWIMWrite(ADPS9960_ADDR,Buffer,2);
     4ee:	ce 01       	movw	r24, r28
     4f0:	0c 96       	adiw	r24, 0x0c	; 12
     4f2:	42 e0       	ldi	r20, 0x02	; 2
     4f4:	bc 01       	movw	r22, r24
     4f6:	89 e3       	ldi	r24, 0x39	; 57
     4f8:	0e 94 f5 06 	call	0xdea	; 0xdea <TWIMWrite>
     4fc:	8b 87       	std	Y+11, r24	; 0x0b


	do 
	{
		Buffer[0]=REG_STATUS;
     4fe:	83 e9       	ldi	r24, 0x93	; 147
     500:	8c 87       	std	Y+12, r24	; 0x0c
		res=TWIMWriteRead(ADPS9960_ADDR,Buffer,1,Buffer,1);
     502:	9e 01       	movw	r18, r28
     504:	24 5f       	subi	r18, 0xF4	; 244
     506:	3f 4f       	sbci	r19, 0xFF	; 255
     508:	ce 01       	movw	r24, r28
     50a:	0c 96       	adiw	r24, 0x0c	; 12
     50c:	01 e0       	ldi	r16, 0x01	; 1
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	bc 01       	movw	r22, r24
     512:	89 e3       	ldi	r24, 0x39	; 57
     514:	0e 94 14 07 	call	0xe28	; 0xe28 <TWIMWriteRead>
     518:	8b 87       	std	Y+11, r24	; 0x0b
		//printf ("STATUS:%d\r\n",Buffer[0]);
	} while (!(Buffer[0] & (1<<REG_STATUX_AVALID)) );
     51a:	8c 85       	ldd	r24, Y+12	; 0x0c
     51c:	88 2f       	mov	r24, r24
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	81 70       	andi	r24, 0x01	; 1
     522:	99 27       	eor	r25, r25
     524:	89 2b       	or	r24, r25
     526:	59 f3       	breq	.-42     	; 0x4fe <DriverAdps9960Get+0x66>


	Buffer[0]=REG_CDATA;
     528:	84 e9       	ldi	r24, 0x94	; 148
     52a:	8c 87       	std	Y+12, r24	; 0x0c
	res=TWIMWriteRead(ADPS9960_ADDR,Buffer,1,Buffer,8);
     52c:	9e 01       	movw	r18, r28
     52e:	24 5f       	subi	r18, 0xF4	; 244
     530:	3f 4f       	sbci	r19, 0xFF	; 255
     532:	ce 01       	movw	r24, r28
     534:	0c 96       	adiw	r24, 0x0c	; 12
     536:	08 e0       	ldi	r16, 0x08	; 8
     538:	41 e0       	ldi	r20, 0x01	; 1
     53a:	bc 01       	movw	r22, r24
     53c:	89 e3       	ldi	r24, 0x39	; 57
     53e:	0e 94 14 07 	call	0xe28	; 0xe28 <TWIMWriteRead>
     542:	8b 87       	std	Y+11, r24	; 0x0b
	//printf ("TwimWriteRead:%d\r\n",res);

	if (Clear!=NULL) *Clear=*C;	
     544:	8d 89       	ldd	r24, Y+21	; 0x15
     546:	9e 89       	ldd	r25, Y+22	; 0x16
     548:	89 2b       	or	r24, r25
     54a:	51 f0       	breq	.+20     	; 0x560 <DriverAdps9960Get+0xc8>
     54c:	89 81       	ldd	r24, Y+1	; 0x01
     54e:	9a 81       	ldd	r25, Y+2	; 0x02
     550:	fc 01       	movw	r30, r24
     552:	20 81       	ld	r18, Z
     554:	31 81       	ldd	r19, Z+1	; 0x01
     556:	8d 89       	ldd	r24, Y+21	; 0x15
     558:	9e 89       	ldd	r25, Y+22	; 0x16
     55a:	fc 01       	movw	r30, r24
     55c:	20 83       	st	Z, r18
     55e:	31 83       	std	Z+1, r19	; 0x01
	if (Red!=NULL) *Red=*R;
     560:	8f 89       	ldd	r24, Y+23	; 0x17
     562:	98 8d       	ldd	r25, Y+24	; 0x18
     564:	89 2b       	or	r24, r25
     566:	51 f0       	breq	.+20     	; 0x57c <DriverAdps9960Get+0xe4>
     568:	8b 81       	ldd	r24, Y+3	; 0x03
     56a:	9c 81       	ldd	r25, Y+4	; 0x04
     56c:	fc 01       	movw	r30, r24
     56e:	20 81       	ld	r18, Z
     570:	31 81       	ldd	r19, Z+1	; 0x01
     572:	8f 89       	ldd	r24, Y+23	; 0x17
     574:	98 8d       	ldd	r25, Y+24	; 0x18
     576:	fc 01       	movw	r30, r24
     578:	20 83       	st	Z, r18
     57a:	31 83       	std	Z+1, r19	; 0x01
	if (Green!=NULL) *Green=*G;
     57c:	89 8d       	ldd	r24, Y+25	; 0x19
     57e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     580:	89 2b       	or	r24, r25
     582:	51 f0       	breq	.+20     	; 0x598 <DriverAdps9960Get+0x100>
     584:	8d 81       	ldd	r24, Y+5	; 0x05
     586:	9e 81       	ldd	r25, Y+6	; 0x06
     588:	fc 01       	movw	r30, r24
     58a:	20 81       	ld	r18, Z
     58c:	31 81       	ldd	r19, Z+1	; 0x01
     58e:	89 8d       	ldd	r24, Y+25	; 0x19
     590:	9a 8d       	ldd	r25, Y+26	; 0x1a
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
     596:	31 83       	std	Z+1, r19	; 0x01
	if (Blue!=NULL) *Blue=*B;
     598:	8b 8d       	ldd	r24, Y+27	; 0x1b
     59a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     59c:	89 2b       	or	r24, r25
     59e:	51 f0       	breq	.+20     	; 0x5b4 <DriverAdps9960Get+0x11c>
     5a0:	8f 81       	ldd	r24, Y+7	; 0x07
     5a2:	98 85       	ldd	r25, Y+8	; 0x08
     5a4:	fc 01       	movw	r30, r24
     5a6:	20 81       	ld	r18, Z
     5a8:	31 81       	ldd	r19, Z+1	; 0x01
     5aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5ae:	fc 01       	movw	r30, r24
     5b0:	20 83       	st	Z, r18
     5b2:	31 83       	std	Z+1, r19	; 0x01

     5b4:	00 00       	nop
     5b6:	6c 96       	adiw	r28, 0x1c	; 28
     5b8:	cd bf       	out	0x3d, r28	; 61
     5ba:	de bf       	out	0x3e, r29	; 62
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	0f 91       	pop	r16
     5c2:	08 95       	ret

000005c4 <InitInterrupts>:
 *
 * Created: 24/10/2023 14:49:33
 *  Author: pjlys
 */ 

void InitInterrupts() {
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
	// Wake up
	PORTF.INTCTRL = 0b0011;			//High level interrupts on INT0
     5cc:	80 ea       	ldi	r24, 0xA0	; 160
     5ce:	96 e0       	ldi	r25, 0x06	; 6
     5d0:	23 e0       	ldi	r18, 0x03	; 3
     5d2:	fc 01       	movw	r30, r24
     5d4:	21 87       	std	Z+9, r18	; 0x09
	PORTF.INT0MASK = 0b10000000;	//Set interrupt on SWC (pin7)
     5d6:	80 ea       	ldi	r24, 0xA0	; 160
     5d8:	96 e0       	ldi	r25, 0x06	; 6
     5da:	20 e8       	ldi	r18, 0x80	; 128
     5dc:	fc 01       	movw	r30, r24
     5de:	22 87       	std	Z+10, r18	; 0x0a
	PORTF.PIN7CTRL = 0b00000001;	//No inv; Totem; Rising
     5e0:	80 ea       	ldi	r24, 0xA0	; 160
     5e2:	96 e0       	ldi	r25, 0x06	; 6
     5e4:	21 e0       	ldi	r18, 0x01	; 1
     5e6:	fc 01       	movw	r30, r24
     5e8:	27 8b       	std	Z+23, r18	; 0x17
	
	//Interrupt handling
	PMIC.CTRL = 0b10000111;			//round robin scheduling + all interrupts enabled
     5ea:	80 ea       	ldi	r24, 0xA0	; 160
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	27 e8       	ldi	r18, 0x87	; 135
     5f0:	fc 01       	movw	r30, r24
     5f2:	22 83       	std	Z+2, r18	; 0x02
	SREG = 0b10000000;				//enable global interrupt
     5f4:	8f e3       	ldi	r24, 0x3F	; 63
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	20 e8       	ldi	r18, 0x80	; 128
     5fa:	fc 01       	movw	r30, r24
     5fc:	20 83       	st	Z, r18
	
	// Start timer
	TCC0.CTRLA = 0b0111;		//Prescaler = 1024 --> f = fclk /1024 = 31.25 KHz
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	98 e0       	ldi	r25, 0x08	; 8
     602:	27 e0       	ldi	r18, 0x07	; 7
     604:	fc 01       	movw	r30, r24
     606:	20 83       	st	Z, r18
	TCC0.CTRLB = 0;				//Normal mode
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	98 e0       	ldi	r25, 0x08	; 8
     60c:	fc 01       	movw	r30, r24
     60e:	11 82       	std	Z+1, r1	; 0x01
	TCC0.PER = 60000;			//Trigger timer every 1s
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	98 e0       	ldi	r25, 0x08	; 8
     614:	20 e6       	ldi	r18, 0x60	; 96
     616:	3a ee       	ldi	r19, 0xEA	; 234
     618:	fc 01       	movw	r30, r24
     61a:	26 a3       	std	Z+38, r18	; 0x26
     61c:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.INTCTRLA = 0b0010;		//Timer error interrupt level = off; Timer overflow interrupt level = medium
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	98 e0       	ldi	r25, 0x08	; 8
     622:	22 e0       	ldi	r18, 0x02	; 2
     624:	fc 01       	movw	r30, r24
     626:	26 83       	std	Z+6, r18	; 0x06
}
     628:	00 00       	nop
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <getSleepFlag>:

bool getSleepFlag(void) {
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
	return timerExpired;
     638:	80 91 af 20 	lds	r24, 0x20AF	; 0x8020af <timerExpired>
}
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	08 95       	ret

00000642 <clearSleepFlag>:

void clearSleepFlag(void) {
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
	timerExpired = false;
     64a:	10 92 af 20 	sts	0x20AF, r1	; 0x8020af <timerExpired>
}
     64e:	00 00       	nop
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <__vector_104>:

ISR(PORTF_INT0_vect){
     656:	1f 92       	push	r1
     658:	0f 92       	push	r0
     65a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     65e:	0f 92       	push	r0
     660:	11 24       	eor	r1, r1
     662:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     666:	0f 92       	push	r0
     668:	2f 93       	push	r18
     66a:	3f 93       	push	r19
     66c:	4f 93       	push	r20
     66e:	5f 93       	push	r21
     670:	6f 93       	push	r22
     672:	7f 93       	push	r23
     674:	8f 93       	push	r24
     676:	9f 93       	push	r25
     678:	af 93       	push	r26
     67a:	bf 93       	push	r27
     67c:	ef 93       	push	r30
     67e:	ff 93       	push	r31
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
	printf("Woken up\n\r");
     688:	83 e3       	ldi	r24, 0x33	; 51
     68a:	90 e2       	ldi	r25, 0x20	; 32
     68c:	89 2f       	mov	r24, r25
     68e:	8f 93       	push	r24
     690:	83 e3       	ldi	r24, 0x33	; 51
     692:	90 e2       	ldi	r25, 0x20	; 32
     694:	8f 93       	push	r24
     696:	0e 94 b6 10 	call	0x216c	; 0x216c <printf>
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
}
     69e:	00 00       	nop
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	ff 91       	pop	r31
     6a6:	ef 91       	pop	r30
     6a8:	bf 91       	pop	r27
     6aa:	af 91       	pop	r26
     6ac:	9f 91       	pop	r25
     6ae:	8f 91       	pop	r24
     6b0:	7f 91       	pop	r23
     6b2:	6f 91       	pop	r22
     6b4:	5f 91       	pop	r21
     6b6:	4f 91       	pop	r20
     6b8:	3f 91       	pop	r19
     6ba:	2f 91       	pop	r18
     6bc:	0f 90       	pop	r0
     6be:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     6c2:	0f 90       	pop	r0
     6c4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     6c8:	0f 90       	pop	r0
     6ca:	1f 90       	pop	r1
     6cc:	18 95       	reti

000006ce <__vector_14>:

ISR(TCC0_OVF_vect) {
     6ce:	1f 92       	push	r1
     6d0:	0f 92       	push	r0
     6d2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     6d6:	0f 92       	push	r0
     6d8:	11 24       	eor	r1, r1
     6da:	8f 93       	push	r24
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
	timerExpired = true;
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	80 93 af 20 	sts	0x20AF, r24	; 0x8020af <timerExpired>
}
     6ea:	00 00       	nop
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	8f 91       	pop	r24
     6f2:	0f 90       	pop	r0
     6f4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     6f8:	0f 90       	pop	r0
     6fa:	1f 90       	pop	r1
     6fc:	18 95       	reti

000006fe <DriverLedInit>:
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	cd b7       	in	r28, 0x3d	; 61
     704:	de b7       	in	r29, 0x3e	; 62
     706:	80 e2       	ldi	r24, 0x20	; 32
     708:	96 e0       	ldi	r25, 0x06	; 6
     70a:	27 e0       	ldi	r18, 0x07	; 7
     70c:	fc 01       	movw	r30, r24
     70e:	21 83       	std	Z+1, r18	; 0x01
     710:	80 e2       	ldi	r24, 0x20	; 32
     712:	96 e0       	ldi	r25, 0x06	; 6
     714:	28 e5       	ldi	r18, 0x58	; 88
     716:	fc 01       	movw	r30, r24
     718:	20 8b       	std	Z+16, r18	; 0x10
     71a:	80 e2       	ldi	r24, 0x20	; 32
     71c:	96 e0       	ldi	r25, 0x06	; 6
     71e:	28 e5       	ldi	r18, 0x58	; 88
     720:	fc 01       	movw	r30, r24
     722:	21 8b       	std	Z+17, r18	; 0x11
     724:	80 e2       	ldi	r24, 0x20	; 32
     726:	96 e0       	ldi	r25, 0x06	; 6
     728:	28 e5       	ldi	r18, 0x58	; 88
     72a:	fc 01       	movw	r30, r24
     72c:	22 8b       	std	Z+18, r18	; 0x12
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	96 e0       	ldi	r25, 0x06	; 6
     732:	20 e8       	ldi	r18, 0x80	; 128
     734:	fc 01       	movw	r30, r24
     736:	21 83       	std	Z+1, r18	; 0x01
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	96 e0       	ldi	r25, 0x06	; 6
     73c:	28 e5       	ldi	r18, 0x58	; 88
     73e:	fc 01       	movw	r30, r24
     740:	27 8b       	std	Z+23, r18	; 0x17
     742:	00 00       	nop
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <DriverLedWrite>:
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	1f 92       	push	r1
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	80 e2       	ldi	r24, 0x20	; 32
     758:	96 e0       	ldi	r25, 0x06	; 6
     75a:	29 81       	ldd	r18, Y+1	; 0x01
     75c:	27 70       	andi	r18, 0x07	; 7
     75e:	fc 01       	movw	r30, r24
     760:	24 83       	std	Z+4, r18	; 0x04
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	96 e0       	ldi	r25, 0x06	; 6
     766:	29 81       	ldd	r18, Y+1	; 0x01
     768:	28 70       	andi	r18, 0x08	; 8
     76a:	22 95       	swap	r18
     76c:	20 7f       	andi	r18, 0xF0	; 240
     76e:	fc 01       	movw	r30, r24
     770:	24 83       	std	Z+4, r18	; 0x04
     772:	00 00       	nop
     774:	0f 90       	pop	r0
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <DriverMotorInit>:
EncoderStruct DriverMotorGetEncoder(void){
	EncoderStruct st;
	st.Cnt1 = motor1Pos;
	st.Cnt2 = motor2Pos;
	return st;
}
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
     784:	80 ea       	ldi	r24, 0xA0	; 160
     786:	96 e0       	ldi	r25, 0x06	; 6
     788:	2f e3       	ldi	r18, 0x3F	; 63
     78a:	fc 01       	movw	r30, r24
     78c:	21 83       	std	Z+1, r18	; 0x01
     78e:	80 ea       	ldi	r24, 0xA0	; 160
     790:	96 e0       	ldi	r25, 0x06	; 6
     792:	28 e5       	ldi	r18, 0x58	; 88
     794:	fc 01       	movw	r30, r24
     796:	25 8b       	std	Z+21, r18	; 0x15
     798:	80 ea       	ldi	r24, 0xA0	; 160
     79a:	96 e0       	ldi	r25, 0x06	; 6
     79c:	28 e5       	ldi	r18, 0x58	; 88
     79e:	fc 01       	movw	r30, r24
     7a0:	24 8b       	std	Z+20, r18	; 0x14
     7a2:	80 ea       	ldi	r24, 0xA0	; 160
     7a4:	96 e0       	ldi	r25, 0x06	; 6
     7a6:	20 e1       	ldi	r18, 0x10	; 16
     7a8:	fc 01       	movw	r30, r24
     7aa:	23 8b       	std	Z+19, r18	; 0x13
     7ac:	80 ea       	ldi	r24, 0xA0	; 160
     7ae:	96 e0       	ldi	r25, 0x06	; 6
     7b0:	20 e1       	ldi	r18, 0x10	; 16
     7b2:	fc 01       	movw	r30, r24
     7b4:	22 8b       	std	Z+18, r18	; 0x12
     7b6:	80 ea       	ldi	r24, 0xA0	; 160
     7b8:	96 e0       	ldi	r25, 0x06	; 6
     7ba:	20 e1       	ldi	r18, 0x10	; 16
     7bc:	fc 01       	movw	r30, r24
     7be:	21 8b       	std	Z+17, r18	; 0x11
     7c0:	80 ea       	ldi	r24, 0xA0	; 160
     7c2:	96 e0       	ldi	r25, 0x06	; 6
     7c4:	20 e1       	ldi	r18, 0x10	; 16
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 8b       	std	Z+16, r18	; 0x10
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	9b e0       	ldi	r25, 0x0B	; 11
     7ce:	27 e0       	ldi	r18, 0x07	; 7
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 83       	st	Z, r18
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	9b e0       	ldi	r25, 0x0B	; 11
     7d8:	23 ef       	ldi	r18, 0xF3	; 243
     7da:	fc 01       	movw	r30, r24
     7dc:	21 83       	std	Z+1, r18	; 0x01
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	9b e0       	ldi	r25, 0x0B	; 11
     7e2:	2f ef       	ldi	r18, 0xFF	; 255
     7e4:	3f e0       	ldi	r19, 0x0F	; 15
     7e6:	fc 01       	movw	r30, r24
     7e8:	26 a3       	std	Z+38, r18	; 0x26
     7ea:	37 a3       	std	Z+39, r19	; 0x27
     7ec:	80 e4       	ldi	r24, 0x40	; 64
     7ee:	96 e0       	ldi	r25, 0x06	; 6
     7f0:	25 e0       	ldi	r18, 0x05	; 5
     7f2:	fc 01       	movw	r30, r24
     7f4:	21 87       	std	Z+9, r18	; 0x09
     7f6:	80 e4       	ldi	r24, 0x40	; 64
     7f8:	96 e0       	ldi	r25, 0x06	; 6
     7fa:	20 e8       	ldi	r18, 0x80	; 128
     7fc:	fc 01       	movw	r30, r24
     7fe:	22 87       	std	Z+10, r18	; 0x0a
     800:	80 e4       	ldi	r24, 0x40	; 64
     802:	96 e0       	ldi	r25, 0x06	; 6
     804:	20 e4       	ldi	r18, 0x40	; 64
     806:	fc 01       	movw	r30, r24
     808:	23 87       	std	Z+11, r18	; 0x0b
     80a:	80 e4       	ldi	r24, 0x40	; 64
     80c:	96 e0       	ldi	r25, 0x06	; 6
     80e:	fc 01       	movw	r30, r24
     810:	17 8a       	std	Z+23, r1	; 0x17
     812:	80 e4       	ldi	r24, 0x40	; 64
     814:	96 e0       	ldi	r25, 0x06	; 6
     816:	fc 01       	movw	r30, r24
     818:	16 8a       	std	Z+22, r1	; 0x16
     81a:	80 e8       	ldi	r24, 0x80	; 128
     81c:	96 e0       	ldi	r25, 0x06	; 6
     81e:	25 e0       	ldi	r18, 0x05	; 5
     820:	fc 01       	movw	r30, r24
     822:	21 87       	std	Z+9, r18	; 0x09
     824:	80 e8       	ldi	r24, 0x80	; 128
     826:	96 e0       	ldi	r25, 0x06	; 6
     828:	20 e8       	ldi	r18, 0x80	; 128
     82a:	fc 01       	movw	r30, r24
     82c:	22 87       	std	Z+10, r18	; 0x0a
     82e:	80 e8       	ldi	r24, 0x80	; 128
     830:	96 e0       	ldi	r25, 0x06	; 6
     832:	20 e4       	ldi	r18, 0x40	; 64
     834:	fc 01       	movw	r30, r24
     836:	23 87       	std	Z+11, r18	; 0x0b
     838:	80 e8       	ldi	r24, 0x80	; 128
     83a:	96 e0       	ldi	r25, 0x06	; 6
     83c:	fc 01       	movw	r30, r24
     83e:	17 8a       	std	Z+23, r1	; 0x17
     840:	80 e8       	ldi	r24, 0x80	; 128
     842:	96 e0       	ldi	r25, 0x06	; 6
     844:	fc 01       	movw	r30, r24
     846:	16 8a       	std	Z+22, r1	; 0x16
     848:	00 00       	nop
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <DriverMotorSet>:
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	00 d0       	rcall	.+0      	; 0x856 <DriverMotorSet+0x6>
     856:	1f 92       	push	r1
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	89 83       	std	Y+1, r24	; 0x01
     85e:	9a 83       	std	Y+2, r25	; 0x02
     860:	6b 83       	std	Y+3, r22	; 0x03
     862:	7c 83       	std	Y+4, r23	; 0x04
     864:	8c 81       	ldd	r24, Y+4	; 0x04
     866:	8f 93       	push	r24
     868:	8b 81       	ldd	r24, Y+3	; 0x03
     86a:	8f 93       	push	r24
     86c:	8a 81       	ldd	r24, Y+2	; 0x02
     86e:	8f 93       	push	r24
     870:	89 81       	ldd	r24, Y+1	; 0x01
     872:	8f 93       	push	r24
     874:	8e e3       	ldi	r24, 0x3E	; 62
     876:	90 e2       	ldi	r25, 0x20	; 32
     878:	89 2f       	mov	r24, r25
     87a:	8f 93       	push	r24
     87c:	8e e3       	ldi	r24, 0x3E	; 62
     87e:	90 e2       	ldi	r25, 0x20	; 32
     880:	8f 93       	push	r24
     882:	0e 94 b6 10 	call	0x216c	; 0x216c <printf>
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	89 81       	ldd	r24, Y+1	; 0x01
     894:	9a 81       	ldd	r25, Y+2	; 0x02
     896:	99 23       	and	r25, r25
     898:	84 f4       	brge	.+32     	; 0x8ba <DriverMotorSet+0x6a>
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	9b e0       	ldi	r25, 0x0B	; 11
     89e:	29 81       	ldd	r18, Y+1	; 0x01
     8a0:	3a 81       	ldd	r19, Y+2	; 0x02
     8a2:	31 95       	neg	r19
     8a4:	21 95       	neg	r18
     8a6:	31 09       	sbc	r19, r1
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 a7       	std	Z+40, r18	; 0x28
     8ac:	31 a7       	std	Z+41, r19	; 0x29
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	9b e0       	ldi	r25, 0x0B	; 11
     8b2:	fc 01       	movw	r30, r24
     8b4:	12 a6       	std	Z+42, r1	; 0x2a
     8b6:	13 a6       	std	Z+43, r1	; 0x2b
     8b8:	0c c0       	rjmp	.+24     	; 0x8d2 <DriverMotorSet+0x82>
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	9b e0       	ldi	r25, 0x0B	; 11
     8be:	fc 01       	movw	r30, r24
     8c0:	10 a6       	std	Z+40, r1	; 0x28
     8c2:	11 a6       	std	Z+41, r1	; 0x29
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	9b e0       	ldi	r25, 0x0B	; 11
     8c8:	29 81       	ldd	r18, Y+1	; 0x01
     8ca:	3a 81       	ldd	r19, Y+2	; 0x02
     8cc:	fc 01       	movw	r30, r24
     8ce:	22 a7       	std	Z+42, r18	; 0x2a
     8d0:	33 a7       	std	Z+43, r19	; 0x2b
     8d2:	8b 81       	ldd	r24, Y+3	; 0x03
     8d4:	9c 81       	ldd	r25, Y+4	; 0x04
     8d6:	18 16       	cp	r1, r24
     8d8:	19 06       	cpc	r1, r25
     8da:	6c f4       	brge	.+26     	; 0x8f6 <DriverMotorSet+0xa6>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	9b e0       	ldi	r25, 0x0B	; 11
     8e0:	2b 81       	ldd	r18, Y+3	; 0x03
     8e2:	3c 81       	ldd	r19, Y+4	; 0x04
     8e4:	fc 01       	movw	r30, r24
     8e6:	24 a7       	std	Z+44, r18	; 0x2c
     8e8:	35 a7       	std	Z+45, r19	; 0x2d
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	9b e0       	ldi	r25, 0x0B	; 11
     8ee:	fc 01       	movw	r30, r24
     8f0:	16 a6       	std	Z+46, r1	; 0x2e
     8f2:	17 a6       	std	Z+47, r1	; 0x2f
     8f4:	0f c0       	rjmp	.+30     	; 0x914 <DriverMotorSet+0xc4>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	9b e0       	ldi	r25, 0x0B	; 11
     8fa:	fc 01       	movw	r30, r24
     8fc:	14 a6       	std	Z+44, r1	; 0x2c
     8fe:	15 a6       	std	Z+45, r1	; 0x2d
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	9b e0       	ldi	r25, 0x0B	; 11
     904:	2b 81       	ldd	r18, Y+3	; 0x03
     906:	3c 81       	ldd	r19, Y+4	; 0x04
     908:	31 95       	neg	r19
     90a:	21 95       	neg	r18
     90c:	31 09       	sbc	r19, r1
     90e:	fc 01       	movw	r30, r24
     910:	26 a7       	std	Z+46, r18	; 0x2e
     912:	37 a7       	std	Z+47, r19	; 0x2f
     914:	00 00       	nop
     916:	24 96       	adiw	r28, 0x04	; 4
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	08 95       	ret

00000922 <__vector_2>:


//###ISRs###
ISR(PORTC_INT0_vect){ //interrupt op pin C7
     922:	1f 92       	push	r1
     924:	0f 92       	push	r0
     926:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     92a:	0f 92       	push	r0
     92c:	11 24       	eor	r1, r1
     92e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     932:	0f 92       	push	r0
     934:	8f 93       	push	r24
     936:	9f 93       	push	r25
     938:	ef 93       	push	r30
     93a:	ff 93       	push	r31
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	1f 92       	push	r1
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
	char input = PORTC.IN>>6;
     946:	80 e4       	ldi	r24, 0x40	; 64
     948:	96 e0       	ldi	r25, 0x06	; 6
     94a:	fc 01       	movw	r30, r24
     94c:	80 85       	ldd	r24, Z+8	; 0x08
     94e:	82 95       	swap	r24
     950:	86 95       	lsr	r24
     952:	86 95       	lsr	r24
     954:	83 70       	andi	r24, 0x03	; 3
     956:	89 83       	std	Y+1, r24	; 0x01
	if (input&0b1)				//als pin 6 hoog is
     958:	89 81       	ldd	r24, Y+1	; 0x01
     95a:	88 2f       	mov	r24, r24
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	81 70       	andi	r24, 0x01	; 1
     960:	99 27       	eor	r25, r25
     962:	89 2b       	or	r24, r25
     964:	d9 f0       	breq	.+54     	; 0x99c <__vector_2+0x7a>
	{
		if (input&0b10)				//als rising edge op pin 7
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	88 2f       	mov	r24, r24
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	82 70       	andi	r24, 0x02	; 2
     96e:	99 27       	eor	r25, r25
     970:	89 2b       	or	r24, r25
     972:	51 f0       	breq	.+20     	; 0x988 <__vector_2+0x66>
		{
			motor1Pos--;					//teller--
     974:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <motor1Pos>
     978:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <motor1Pos+0x1>
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	80 93 b0 20 	sts	0x20B0, r24	; 0x8020b0 <motor1Pos>
     982:	90 93 b1 20 	sts	0x20B1, r25	; 0x8020b1 <motor1Pos+0x1>
			motor1Pos++;					//teller++
			} else {					//als falling edge op pin7
			motor1Pos--;					//teller--
		}
	}
}
     986:	24 c0       	rjmp	.+72     	; 0x9d0 <__vector_2+0xae>
	{
		if (input&0b10)				//als rising edge op pin 7
		{
			motor1Pos--;					//teller--
			} else{						//als falling edge op pin7
			motor1Pos++;					//teller++
     988:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <motor1Pos>
     98c:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <motor1Pos+0x1>
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	80 93 b0 20 	sts	0x20B0, r24	; 0x8020b0 <motor1Pos>
     996:	90 93 b1 20 	sts	0x20B1, r25	; 0x8020b1 <motor1Pos+0x1>
			motor1Pos++;					//teller++
			} else {					//als falling edge op pin7
			motor1Pos--;					//teller--
		}
	}
}
     99a:	1a c0       	rjmp	.+52     	; 0x9d0 <__vector_2+0xae>
			motor1Pos--;					//teller--
			} else{						//als falling edge op pin7
			motor1Pos++;					//teller++
		}
		} else {					//als pin 6 laag is
		if (input&0b10)				//als rising edge op pin 7
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	88 2f       	mov	r24, r24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	82 70       	andi	r24, 0x02	; 2
     9a4:	99 27       	eor	r25, r25
     9a6:	89 2b       	or	r24, r25
     9a8:	51 f0       	breq	.+20     	; 0x9be <__vector_2+0x9c>
		{
			motor1Pos++;					//teller++
     9aa:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <motor1Pos>
     9ae:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <motor1Pos+0x1>
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	80 93 b0 20 	sts	0x20B0, r24	; 0x8020b0 <motor1Pos>
     9b8:	90 93 b1 20 	sts	0x20B1, r25	; 0x8020b1 <motor1Pos+0x1>
			} else {					//als falling edge op pin7
			motor1Pos--;					//teller--
		}
	}
}
     9bc:	09 c0       	rjmp	.+18     	; 0x9d0 <__vector_2+0xae>
		} else {					//als pin 6 laag is
		if (input&0b10)				//als rising edge op pin 7
		{
			motor1Pos++;					//teller++
			} else {					//als falling edge op pin7
			motor1Pos--;					//teller--
     9be:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <motor1Pos>
     9c2:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <motor1Pos+0x1>
     9c6:	01 97       	sbiw	r24, 0x01	; 1
     9c8:	80 93 b0 20 	sts	0x20B0, r24	; 0x8020b0 <motor1Pos>
     9cc:	90 93 b1 20 	sts	0x20B1, r25	; 0x8020b1 <motor1Pos+0x1>
		}
	}
}
     9d0:	00 00       	nop
     9d2:	0f 90       	pop	r0
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	ff 91       	pop	r31
     9da:	ef 91       	pop	r30
     9dc:	9f 91       	pop	r25
     9de:	8f 91       	pop	r24
     9e0:	0f 90       	pop	r0
     9e2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     9e6:	0f 90       	pop	r0
     9e8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     9ec:	0f 90       	pop	r0
     9ee:	1f 90       	pop	r1
     9f0:	18 95       	reti

000009f2 <__vector_3>:

ISR(PORTC_INT1_vect){	//interrupt op pin C6
     9f2:	1f 92       	push	r1
     9f4:	0f 92       	push	r0
     9f6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     9fa:	0f 92       	push	r0
     9fc:	11 24       	eor	r1, r1
     9fe:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a02:	0f 92       	push	r0
     a04:	8f 93       	push	r24
     a06:	9f 93       	push	r25
     a08:	ef 93       	push	r30
     a0a:	ff 93       	push	r31
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	1f 92       	push	r1
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
	char input = PORTC.IN>>6;
     a16:	80 e4       	ldi	r24, 0x40	; 64
     a18:	96 e0       	ldi	r25, 0x06	; 6
     a1a:	fc 01       	movw	r30, r24
     a1c:	80 85       	ldd	r24, Z+8	; 0x08
     a1e:	82 95       	swap	r24
     a20:	86 95       	lsr	r24
     a22:	86 95       	lsr	r24
     a24:	83 70       	andi	r24, 0x03	; 3
     a26:	89 83       	std	Y+1, r24	; 0x01
	if (input&0b10)			//als C7 hoog is
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	88 2f       	mov	r24, r24
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	82 70       	andi	r24, 0x02	; 2
     a30:	99 27       	eor	r25, r25
     a32:	89 2b       	or	r24, r25
     a34:	d9 f0       	breq	.+54     	; 0xa6c <__vector_3+0x7a>
	{
		if (input&0b1)			//als RE C6	
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	88 2f       	mov	r24, r24
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	81 70       	andi	r24, 0x01	; 1
     a3e:	99 27       	eor	r25, r25
     a40:	89 2b       	or	r24, r25
     a42:	51 f0       	breq	.+20     	; 0xa58 <__vector_3+0x66>
		{
			motor1Pos++;				//teller++
     a44:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <motor1Pos>
     a48:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <motor1Pos+0x1>
     a4c:	01 96       	adiw	r24, 0x01	; 1
     a4e:	80 93 b0 20 	sts	0x20B0, r24	; 0x8020b0 <motor1Pos>
     a52:	90 93 b1 20 	sts	0x20B1, r25	; 0x8020b1 <motor1Pos+0x1>
			motor1Pos--;				//teller++
		} else {				//als FE C6
			motor1Pos++;				//teller--
		}
	}
}
     a56:	24 c0       	rjmp	.+72     	; 0xaa0 <__vector_3+0xae>
	{
		if (input&0b1)			//als RE C6	
		{
			motor1Pos++;				//teller++
		} else {				//als FE C6
			motor1Pos--;				//teller--
     a58:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <motor1Pos>
     a5c:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <motor1Pos+0x1>
     a60:	01 97       	sbiw	r24, 0x01	; 1
     a62:	80 93 b0 20 	sts	0x20B0, r24	; 0x8020b0 <motor1Pos>
     a66:	90 93 b1 20 	sts	0x20B1, r25	; 0x8020b1 <motor1Pos+0x1>
			motor1Pos--;				//teller++
		} else {				//als FE C6
			motor1Pos++;				//teller--
		}
	}
}
     a6a:	1a c0       	rjmp	.+52     	; 0xaa0 <__vector_3+0xae>
			motor1Pos++;				//teller++
		} else {				//als FE C6
			motor1Pos--;				//teller--
		}
	} else {				//als C7 laag is
		if (input&0b10)			//als RE C6
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	88 2f       	mov	r24, r24
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	82 70       	andi	r24, 0x02	; 2
     a74:	99 27       	eor	r25, r25
     a76:	89 2b       	or	r24, r25
     a78:	51 f0       	breq	.+20     	; 0xa8e <__vector_3+0x9c>
		{					
			motor1Pos--;				//teller++
     a7a:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <motor1Pos>
     a7e:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <motor1Pos+0x1>
     a82:	01 97       	sbiw	r24, 0x01	; 1
     a84:	80 93 b0 20 	sts	0x20B0, r24	; 0x8020b0 <motor1Pos>
     a88:	90 93 b1 20 	sts	0x20B1, r25	; 0x8020b1 <motor1Pos+0x1>
		} else {				//als FE C6
			motor1Pos++;				//teller--
		}
	}
}
     a8c:	09 c0       	rjmp	.+18     	; 0xaa0 <__vector_3+0xae>
	} else {				//als C7 laag is
		if (input&0b10)			//als RE C6
		{					
			motor1Pos--;				//teller++
		} else {				//als FE C6
			motor1Pos++;				//teller--
     a8e:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <motor1Pos>
     a92:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <motor1Pos+0x1>
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	80 93 b0 20 	sts	0x20B0, r24	; 0x8020b0 <motor1Pos>
     a9c:	90 93 b1 20 	sts	0x20B1, r25	; 0x8020b1 <motor1Pos+0x1>
		}
	}
}
     aa0:	00 00       	nop
     aa2:	0f 90       	pop	r0
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	ff 91       	pop	r31
     aaa:	ef 91       	pop	r30
     aac:	9f 91       	pop	r25
     aae:	8f 91       	pop	r24
     ab0:	0f 90       	pop	r0
     ab2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ab6:	0f 90       	pop	r0
     ab8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     abc:	0f 90       	pop	r0
     abe:	1f 90       	pop	r1
     ac0:	18 95       	reti

00000ac2 <__vector_43>:

ISR(PORTE_INT0_vect){ //interrupt op pin E7
     ac2:	1f 92       	push	r1
     ac4:	0f 92       	push	r0
     ac6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     aca:	0f 92       	push	r0
     acc:	11 24       	eor	r1, r1
     ace:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ad2:	0f 92       	push	r0
     ad4:	8f 93       	push	r24
     ad6:	9f 93       	push	r25
     ad8:	ef 93       	push	r30
     ada:	ff 93       	push	r31
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	1f 92       	push	r1
     ae2:	cd b7       	in	r28, 0x3d	; 61
     ae4:	de b7       	in	r29, 0x3e	; 62
	char input = PORTE.IN>>6;
     ae6:	80 e8       	ldi	r24, 0x80	; 128
     ae8:	96 e0       	ldi	r25, 0x06	; 6
     aea:	fc 01       	movw	r30, r24
     aec:	80 85       	ldd	r24, Z+8	; 0x08
     aee:	82 95       	swap	r24
     af0:	86 95       	lsr	r24
     af2:	86 95       	lsr	r24
     af4:	83 70       	andi	r24, 0x03	; 3
     af6:	89 83       	std	Y+1, r24	; 0x01
	if (input&0b1)				//als pin 6 hoog is
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	88 2f       	mov	r24, r24
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	81 70       	andi	r24, 0x01	; 1
     b00:	99 27       	eor	r25, r25
     b02:	89 2b       	or	r24, r25
     b04:	d9 f0       	breq	.+54     	; 0xb3c <__vector_43+0x7a>
	{
		if (input&0b10)				//als rising edge op pin 7
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	88 2f       	mov	r24, r24
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	82 70       	andi	r24, 0x02	; 2
     b0e:	99 27       	eor	r25, r25
     b10:	89 2b       	or	r24, r25
     b12:	51 f0       	breq	.+20     	; 0xb28 <__vector_43+0x66>
		{
			motor2Pos--;					//teller--
     b14:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <motor2Pos>
     b18:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <motor2Pos+0x1>
     b1c:	01 97       	sbiw	r24, 0x01	; 1
     b1e:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <motor2Pos>
     b22:	90 93 b3 20 	sts	0x20B3, r25	; 0x8020b3 <motor2Pos+0x1>
			motor2Pos++;					//teller++
			} else {					//als falling edge op pin7
			motor2Pos--;					//teller--
		}
	}
}
     b26:	24 c0       	rjmp	.+72     	; 0xb70 <__vector_43+0xae>
	{
		if (input&0b10)				//als rising edge op pin 7
		{
			motor2Pos--;					//teller--
			} else{						//als falling edge op pin7
			motor2Pos++;					//teller++
     b28:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <motor2Pos>
     b2c:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <motor2Pos+0x1>
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <motor2Pos>
     b36:	90 93 b3 20 	sts	0x20B3, r25	; 0x8020b3 <motor2Pos+0x1>
			motor2Pos++;					//teller++
			} else {					//als falling edge op pin7
			motor2Pos--;					//teller--
		}
	}
}
     b3a:	1a c0       	rjmp	.+52     	; 0xb70 <__vector_43+0xae>
			motor2Pos--;					//teller--
			} else{						//als falling edge op pin7
			motor2Pos++;					//teller++
		}
		} else {				//als pin 6 laag is
		if (input&0b10)				//als rising edge op pin 7
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	88 2f       	mov	r24, r24
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	82 70       	andi	r24, 0x02	; 2
     b44:	99 27       	eor	r25, r25
     b46:	89 2b       	or	r24, r25
     b48:	51 f0       	breq	.+20     	; 0xb5e <__vector_43+0x9c>
		{
			motor2Pos++;					//teller++
     b4a:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <motor2Pos>
     b4e:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <motor2Pos+0x1>
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <motor2Pos>
     b58:	90 93 b3 20 	sts	0x20B3, r25	; 0x8020b3 <motor2Pos+0x1>
			} else {					//als falling edge op pin7
			motor2Pos--;					//teller--
		}
	}
}
     b5c:	09 c0       	rjmp	.+18     	; 0xb70 <__vector_43+0xae>
		} else {				//als pin 6 laag is
		if (input&0b10)				//als rising edge op pin 7
		{
			motor2Pos++;					//teller++
			} else {					//als falling edge op pin7
			motor2Pos--;					//teller--
     b5e:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <motor2Pos>
     b62:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <motor2Pos+0x1>
     b66:	01 97       	sbiw	r24, 0x01	; 1
     b68:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <motor2Pos>
     b6c:	90 93 b3 20 	sts	0x20B3, r25	; 0x8020b3 <motor2Pos+0x1>
		}
	}
}
     b70:	00 00       	nop
     b72:	0f 90       	pop	r0
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	ff 91       	pop	r31
     b7a:	ef 91       	pop	r30
     b7c:	9f 91       	pop	r25
     b7e:	8f 91       	pop	r24
     b80:	0f 90       	pop	r0
     b82:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b86:	0f 90       	pop	r0
     b88:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     b8c:	0f 90       	pop	r0
     b8e:	1f 90       	pop	r1
     b90:	18 95       	reti

00000b92 <__vector_44>:

ISR(PORTE_INT1_vect){	//Interrupt op E6
     b92:	1f 92       	push	r1
     b94:	0f 92       	push	r0
     b96:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     b9a:	0f 92       	push	r0
     b9c:	11 24       	eor	r1, r1
     b9e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     ba2:	0f 92       	push	r0
     ba4:	8f 93       	push	r24
     ba6:	9f 93       	push	r25
     ba8:	ef 93       	push	r30
     baa:	ff 93       	push	r31
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	1f 92       	push	r1
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
	char input = PORTE.IN>>6;
     bb6:	80 e8       	ldi	r24, 0x80	; 128
     bb8:	96 e0       	ldi	r25, 0x06	; 6
     bba:	fc 01       	movw	r30, r24
     bbc:	80 85       	ldd	r24, Z+8	; 0x08
     bbe:	82 95       	swap	r24
     bc0:	86 95       	lsr	r24
     bc2:	86 95       	lsr	r24
     bc4:	83 70       	andi	r24, 0x03	; 3
     bc6:	89 83       	std	Y+1, r24	; 0x01
	if (input&0b10)			//als E7 hoog is
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	88 2f       	mov	r24, r24
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	82 70       	andi	r24, 0x02	; 2
     bd0:	99 27       	eor	r25, r25
     bd2:	89 2b       	or	r24, r25
     bd4:	d9 f0       	breq	.+54     	; 0xc0c <__vector_44+0x7a>
	{
		if (input&0b1)			//als RE E6
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	88 2f       	mov	r24, r24
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	81 70       	andi	r24, 0x01	; 1
     bde:	99 27       	eor	r25, r25
     be0:	89 2b       	or	r24, r25
     be2:	51 f0       	breq	.+20     	; 0xbf8 <__vector_44+0x66>
		{
			motor2Pos++;			//teller++
     be4:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <motor2Pos>
     be8:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <motor2Pos+0x1>
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <motor2Pos>
     bf2:	90 93 b3 20 	sts	0x20B3, r25	; 0x8020b3 <motor2Pos+0x1>
			motor2Pos--;			//teller++
			} else {			//als FE E6
			motor2Pos++;			//teller--
		}
	}
}
     bf6:	24 c0       	rjmp	.+72     	; 0xc40 <__vector_44+0xae>
	{
		if (input&0b1)			//als RE E6
		{
			motor2Pos++;			//teller++
			} else {			//als FE E6
			motor2Pos--;			//teller--
     bf8:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <motor2Pos>
     bfc:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <motor2Pos+0x1>
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <motor2Pos>
     c06:	90 93 b3 20 	sts	0x20B3, r25	; 0x8020b3 <motor2Pos+0x1>
			motor2Pos--;			//teller++
			} else {			//als FE E6
			motor2Pos++;			//teller--
		}
	}
}
     c0a:	1a c0       	rjmp	.+52     	; 0xc40 <__vector_44+0xae>
			motor2Pos++;			//teller++
			} else {			//als FE E6
			motor2Pos--;			//teller--
		}
		} else {			//als E7 laag is
		if (input&0b10)			//als RE E6
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	88 2f       	mov	r24, r24
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	82 70       	andi	r24, 0x02	; 2
     c14:	99 27       	eor	r25, r25
     c16:	89 2b       	or	r24, r25
     c18:	51 f0       	breq	.+20     	; 0xc2e <__vector_44+0x9c>
		{
			motor2Pos--;			//teller++
     c1a:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <motor2Pos>
     c1e:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <motor2Pos+0x1>
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <motor2Pos>
     c28:	90 93 b3 20 	sts	0x20B3, r25	; 0x8020b3 <motor2Pos+0x1>
			} else {			//als FE E6
			motor2Pos++;			//teller--
		}
	}
}
     c2c:	09 c0       	rjmp	.+18     	; 0xc40 <__vector_44+0xae>
		} else {			//als E7 laag is
		if (input&0b10)			//als RE E6
		{
			motor2Pos--;			//teller++
			} else {			//als FE E6
			motor2Pos++;			//teller--
     c2e:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <motor2Pos>
     c32:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <motor2Pos+0x1>
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <motor2Pos>
     c3c:	90 93 b3 20 	sts	0x20B3, r25	; 0x8020b3 <motor2Pos+0x1>
		}
	}
}
     c40:	00 00       	nop
     c42:	0f 90       	pop	r0
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	ff 91       	pop	r31
     c4a:	ef 91       	pop	r30
     c4c:	9f 91       	pop	r25
     c4e:	8f 91       	pop	r24
     c50:	0f 90       	pop	r0
     c52:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c56:	0f 90       	pop	r0
     c58:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c5c:	0f 90       	pop	r0
     c5e:	1f 90       	pop	r1
     c60:	18 95       	reti

00000c62 <DriverPL9823Init>:
#include "Driverpl9823.h"

void DriverPL9823BitbangSet(uint32_t FrontLeft,uint32_t FrontRight,uint32_t RearRight,uint32_t RearLeft);

void DriverPL9823Init()
{
     c62:	af 92       	push	r10
     c64:	bf 92       	push	r11
     c66:	cf 92       	push	r12
     c68:	df 92       	push	r13
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
	//CS init
	PORTA.DIRSET=1<<6;
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	96 e0       	ldi	r25, 0x06	; 6
     c7e:	20 e4       	ldi	r18, 0x40	; 64
     c80:	fc 01       	movw	r30, r24
     c82:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUTCLR=1<<6;
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	96 e0       	ldi	r25, 0x06	; 6
     c88:	20 e4       	ldi	r18, 0x40	; 64
     c8a:	fc 01       	movw	r30, r24
     c8c:	26 83       	std	Z+6, r18	; 0x06
	//Data init
	PORTD.DIRSET=1<<3;
     c8e:	80 e6       	ldi	r24, 0x60	; 96
     c90:	96 e0       	ldi	r25, 0x06	; 6
     c92:	28 e0       	ldi	r18, 0x08	; 8
     c94:	fc 01       	movw	r30, r24
     c96:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTSET=1<<3;
     c98:	80 e6       	ldi	r24, 0x60	; 96
     c9a:	96 e0       	ldi	r25, 0x06	; 6
     c9c:	28 e0       	ldi	r18, 0x08	; 8
     c9e:	fc 01       	movw	r30, r24
     ca0:	25 83       	std	Z+5, r18	; 0x05
	
	DriverPL9823Set(PL9823_BLANK, PL9823_BLANK, PL9823_BLANK, PL9823_BLANK);
     ca2:	a1 2c       	mov	r10, r1
     ca4:	b1 2c       	mov	r11, r1
     ca6:	65 01       	movw	r12, r10
     ca8:	e1 2c       	mov	r14, r1
     caa:	f1 2c       	mov	r15, r1
     cac:	87 01       	movw	r16, r14
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	a9 01       	movw	r20, r18
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	cb 01       	movw	r24, r22
     cba:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DriverPL9823Set>
}
     cbe:	00 00       	nop
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	df 90       	pop	r13
     cce:	cf 90       	pop	r12
     cd0:	bf 90       	pop	r11
     cd2:	af 90       	pop	r10
     cd4:	08 95       	ret

00000cd6 <DriverPL9823Set>:

void DriverPL9823Set(uint32_t FrontLeft,uint32_t FrontRight,uint32_t RearRight,uint32_t RearLeft)
{
     cd6:	af 92       	push	r10
     cd8:	bf 92       	push	r11
     cda:	cf 92       	push	r12
     cdc:	df 92       	push	r13
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	60 97       	sbiw	r28, 0x10	; 16
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	69 83       	std	Y+1, r22	; 0x01
     cf6:	7a 83       	std	Y+2, r23	; 0x02
     cf8:	8b 83       	std	Y+3, r24	; 0x03
     cfa:	9c 83       	std	Y+4, r25	; 0x04
     cfc:	2d 83       	std	Y+5, r18	; 0x05
     cfe:	3e 83       	std	Y+6, r19	; 0x06
     d00:	4f 83       	std	Y+7, r20	; 0x07
     d02:	58 87       	std	Y+8, r21	; 0x08
     d04:	e9 86       	std	Y+9, r14	; 0x09
     d06:	fa 86       	std	Y+10, r15	; 0x0a
     d08:	0b 87       	std	Y+11, r16	; 0x0b
     d0a:	1c 87       	std	Y+12, r17	; 0x0c
     d0c:	ad 86       	std	Y+13, r10	; 0x0d
     d0e:	be 86       	std	Y+14, r11	; 0x0e
     d10:	cf 86       	std	Y+15, r12	; 0x0f
     d12:	d8 8a       	std	Y+16, r13	; 0x10
	PORTA.OUTSET=1<<6; //CS enable
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	96 e0       	ldi	r25, 0x06	; 6
     d18:	20 e4       	ldi	r18, 0x40	; 64
     d1a:	fc 01       	movw	r30, r24
     d1c:	25 83       	std	Z+5, r18	; 0x05
	DriverPL9823BitbangSet(FrontLeft, FrontRight, RearRight, RearLeft);
     d1e:	ad 84       	ldd	r10, Y+13	; 0x0d
     d20:	be 84       	ldd	r11, Y+14	; 0x0e
     d22:	cf 84       	ldd	r12, Y+15	; 0x0f
     d24:	d8 88       	ldd	r13, Y+16	; 0x10
     d26:	e9 84       	ldd	r14, Y+9	; 0x09
     d28:	fa 84       	ldd	r15, Y+10	; 0x0a
     d2a:	0b 85       	ldd	r16, Y+11	; 0x0b
     d2c:	1c 85       	ldd	r17, Y+12	; 0x0c
     d2e:	2d 81       	ldd	r18, Y+5	; 0x05
     d30:	3e 81       	ldd	r19, Y+6	; 0x06
     d32:	4f 81       	ldd	r20, Y+7	; 0x07
     d34:	58 85       	ldd	r21, Y+8	; 0x08
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	9a 81       	ldd	r25, Y+2	; 0x02
     d3a:	ab 81       	ldd	r26, Y+3	; 0x03
     d3c:	bc 81       	ldd	r27, Y+4	; 0x04
     d3e:	bc 01       	movw	r22, r24
     d40:	cd 01       	movw	r24, r26
     d42:	0e 94 a6 01 	call	0x34c	; 0x34c <DriverPL9823BitbangSet>
	PORTA.OUTCLR=1<<6; //CS disable
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	96 e0       	ldi	r25, 0x06	; 6
     d4a:	20 e4       	ldi	r18, 0x40	; 64
     d4c:	fc 01       	movw	r30, r24
     d4e:	26 83       	std	Z+6, r18	; 0x06
}
     d50:	00 00       	nop
     d52:	60 96       	adiw	r28, 0x10	; 16
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	1f 91       	pop	r17
     d5e:	0f 91       	pop	r16
     d60:	ff 90       	pop	r15
     d62:	ef 90       	pop	r14
     d64:	df 90       	pop	r13
     d66:	cf 90       	pop	r12
     d68:	bf 90       	pop	r11
     d6a:	af 90       	pop	r10
     d6c:	08 95       	ret

00000d6e <DriverSysClkXtalInit>:
     d6e:	8b ec       	ldi	r24, 0xCB	; 203
     d70:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
     d74:	88 e0       	ldi	r24, 0x08	; 8
     d76:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
     d7a:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     d7e:	83 ff       	sbrs	r24, 3
     d80:	fc cf       	rjmp	.-8      	; 0xd7a <DriverSysClkXtalInit+0xc>
     d82:	82 ec       	ldi	r24, 0xC2	; 194
     d84:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
     d88:	88 e1       	ldi	r24, 0x18	; 24
     d8a:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
     d8e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     d92:	84 ff       	sbrs	r24, 4
     d94:	fc cf       	rjmp	.-8      	; 0xd8e <DriverSysClkXtalInit+0x20>
     d96:	88 ed       	ldi	r24, 0xD8	; 216
     d98:	84 bf       	out	0x34, r24	; 52
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	08 95       	ret

00000da4 <DriverTWIMInit>:

uint8_t TWIMRead(uint8_t address,uint8_t *readData,uint8_t bytesToRead)
{
	uint8_t twi_status = TWIMWriteRead(address, NULL, 0,readData, bytesToRead);
	return twi_status;
}
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	10 92 ad 20 	sts	0x20AD, r1	; 0x8020ad <Twim_status>
     db0:	80 e8       	ldi	r24, 0x80	; 128
     db2:	96 e0       	ldi	r25, 0x06	; 6
     db4:	28 e1       	ldi	r18, 0x18	; 24
     db6:	fc 01       	movw	r30, r24
     db8:	20 8b       	std	Z+16, r18	; 0x10
     dba:	80 e8       	ldi	r24, 0x80	; 128
     dbc:	96 e0       	ldi	r25, 0x06	; 6
     dbe:	28 e1       	ldi	r18, 0x18	; 24
     dc0:	fc 01       	movw	r30, r24
     dc2:	21 8b       	std	Z+17, r18	; 0x11
     dc4:	80 ea       	ldi	r24, 0xA0	; 160
     dc6:	94 e0       	ldi	r25, 0x04	; 4
     dc8:	28 e7       	ldi	r18, 0x78	; 120
     dca:	fc 01       	movw	r30, r24
     dcc:	21 83       	std	Z+1, r18	; 0x01
     dce:	80 ea       	ldi	r24, 0xA0	; 160
     dd0:	94 e0       	ldi	r25, 0x04	; 4
     dd2:	23 e2       	ldi	r18, 0x23	; 35
     dd4:	fc 01       	movw	r30, r24
     dd6:	25 83       	std	Z+5, r18	; 0x05
     dd8:	80 ea       	ldi	r24, 0xA0	; 160
     dda:	94 e0       	ldi	r25, 0x04	; 4
     ddc:	21 e0       	ldi	r18, 0x01	; 1
     dde:	fc 01       	movw	r30, r24
     de0:	24 83       	std	Z+4, r18	; 0x04
     de2:	00 00       	nop
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	08 95       	ret

00000dea <TWIMWrite>:
     dea:	0f 93       	push	r16
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	25 97       	sbiw	r28, 0x05	; 5
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	8a 83       	std	Y+2, r24	; 0x02
     dfc:	6b 83       	std	Y+3, r22	; 0x03
     dfe:	7c 83       	std	Y+4, r23	; 0x04
     e00:	4d 83       	std	Y+5, r20	; 0x05
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	9c 81       	ldd	r25, Y+4	; 0x04
     e06:	00 e0       	ldi	r16, 0x00	; 0
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	4d 81       	ldd	r20, Y+5	; 0x05
     e0e:	bc 01       	movw	r22, r24
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	0e 94 14 07 	call	0xe28	; 0xe28 <TWIMWriteRead>
     e16:	89 83       	std	Y+1, r24	; 0x01
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	25 96       	adiw	r28, 0x05	; 5
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	0f 91       	pop	r16
     e26:	08 95       	ret

00000e28 <TWIMWriteRead>:

uint8_t TWIMWriteRead(uint8_t address, uint8_t *writeData, uint8_t bytesToWrite, uint8_t *readData, uint8_t bytesToRead)
{
     e28:	0f 93       	push	r16
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	29 97       	sbiw	r28, 0x09	; 9
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	8b 83       	std	Y+3, r24	; 0x03
     e3a:	6c 83       	std	Y+4, r22	; 0x04
     e3c:	7d 83       	std	Y+5, r23	; 0x05
     e3e:	4e 83       	std	Y+6, r20	; 0x06
     e40:	2f 83       	std	Y+7, r18	; 0x07
     e42:	38 87       	std	Y+8, r19	; 0x08
     e44:	09 87       	std	Y+9, r16	; 0x09
	Twim_writeData=writeData;
     e46:	8c 81       	ldd	r24, Y+4	; 0x04
     e48:	9d 81       	ldd	r25, Y+5	; 0x05
     e4a:	80 93 a5 20 	sts	0x20A5, r24	; 0x8020a5 <Twim_writeData>
     e4e:	90 93 a6 20 	sts	0x20A6, r25	; 0x8020a6 <Twim_writeData+0x1>
	Twim_readData=readData;
     e52:	8f 81       	ldd	r24, Y+7	; 0x07
     e54:	98 85       	ldd	r25, Y+8	; 0x08
     e56:	80 93 a7 20 	sts	0x20A7, r24	; 0x8020a7 <Twim_readData>
     e5a:	90 93 a8 20 	sts	0x20A8, r25	; 0x8020a8 <Twim_readData+0x1>

	/*Initiate transaction if bus is ready. */
	if (Twim_status == TWIM_STATUS_READY) 
     e5e:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <Twim_status>
     e62:	88 23       	and	r24, r24
     e64:	d9 f5       	brne	.+118    	; 0xedc <TWIMWriteRead+0xb4>
	{
		Twim_status = TWIM_STATUS_BUSY;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	80 93 ad 20 	sts	0x20AD, r24	; 0x8020ad <Twim_status>
		Twim_result = TWIM_RESULT_UNKNOWN;
     e6c:	10 92 ae 20 	sts	0x20AE, r1	; 0x8020ae <Twim_result>

		Twim_address = address<<1;
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	88 0f       	add	r24, r24
     e74:	80 93 a4 20 	sts	0x20A4, r24	; 0x8020a4 <Twim_address>

		Twim_bytesToWrite = bytesToWrite;
     e78:	8e 81       	ldd	r24, Y+6	; 0x06
     e7a:	80 93 a9 20 	sts	0x20A9, r24	; 0x8020a9 <Twim_bytesToWrite>
		Twim_bytesToRead = bytesToRead;
     e7e:	89 85       	ldd	r24, Y+9	; 0x09
     e80:	80 93 aa 20 	sts	0x20AA, r24	; 0x8020aa <Twim_bytesToRead>
		Twim_bytesWritten = 0;
     e84:	10 92 ab 20 	sts	0x20AB, r1	; 0x8020ab <Twim_bytesWritten>
		Twim_bytesRead = 0;
     e88:	10 92 ac 20 	sts	0x20AC, r1	; 0x8020ac <Twim_bytesRead>

		/* If write command, send the START condition + Address +
		 * 'R/_W = 0'
		 */
		if (Twim_bytesToWrite > 0) {
     e8c:	80 91 a9 20 	lds	r24, 0x20A9	; 0x8020a9 <Twim_bytesToWrite>
     e90:	88 23       	and	r24, r24
     e92:	51 f0       	breq	.+20     	; 0xea8 <TWIMWriteRead+0x80>
			uint8_t writeAddress = Twim_address & ~0x01;
     e94:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <Twim_address>
     e98:	8e 7f       	andi	r24, 0xFE	; 254
     e9a:	89 83       	std	Y+1, r24	; 0x01
			TWIM_BUS.MASTER.ADDR = writeAddress;
     e9c:	80 ea       	ldi	r24, 0xA0	; 160
     e9e:	94 e0       	ldi	r25, 0x04	; 4
     ea0:	29 81       	ldd	r18, Y+1	; 0x01
     ea2:	fc 01       	movw	r30, r24
     ea4:	26 83       	std	Z+6, r18	; 0x06
     ea6:	0d c0       	rjmp	.+26     	; 0xec2 <TWIMWriteRead+0x9a>
		}

		/* If read command, send the START condition + Address +
		 * 'R/_W = 1'
		 */
		else if (Twim_bytesToRead > 0) 
     ea8:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <Twim_bytesToRead>
     eac:	88 23       	and	r24, r24
     eae:	49 f0       	breq	.+18     	; 0xec2 <TWIMWriteRead+0x9a>
		{
			uint8_t readAddress = Twim_address | 0x01;
     eb0:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <Twim_address>
     eb4:	81 60       	ori	r24, 0x01	; 1
     eb6:	8a 83       	std	Y+2, r24	; 0x02
			TWIM_BUS.MASTER.ADDR = readAddress;
     eb8:	80 ea       	ldi	r24, 0xA0	; 160
     eba:	94 e0       	ldi	r25, 0x04	; 4
     ebc:	2a 81       	ldd	r18, Y+2	; 0x02
     ebe:	fc 01       	movw	r30, r24
     ec0:	26 83       	std	Z+6, r18	; 0x06
		}
		while (Twim_status != TWIM_STATUS_READY); //Block until RX complete
     ec2:	00 00       	nop
     ec4:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <Twim_status>
     ec8:	88 23       	and	r24, r24
     eca:	e1 f7       	brne	.-8      	; 0xec4 <TWIMWriteRead+0x9c>
		if (Twim_result==TWIM_RESULT_OK)
     ecc:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <Twim_result>
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	11 f4       	brne	.+4      	; 0xed8 <TWIMWriteRead+0xb0>
			return true;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	03 c0       	rjmp	.+6      	; 0xede <TWIMWriteRead+0xb6>
		else
			{
			#ifdef DRIVERTWIMASTER_DEBUG
				//printf ("TWIM_RESULT:%d\r\n",Twim_result);
			#endif
			return false;	
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	01 c0       	rjmp	.+2      	; 0xede <TWIMWriteRead+0xb6>
			}
			
	} 
	else 
	{
		return false;
     edc:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     ede:	29 96       	adiw	r28, 0x09	; 9
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	0f 91       	pop	r16
     eea:	08 95       	ret

00000eec <TWIMArbitrationLostBusErrorHandler>:

void TWIMArbitrationLostBusErrorHandler()
{
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	1f 92       	push	r1
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     ef6:	80 ea       	ldi	r24, 0xA0	; 160
     ef8:	94 e0       	ldi	r25, 0x04	; 4
     efa:	fc 01       	movw	r30, r24
     efc:	84 81       	ldd	r24, Z+4	; 0x04
     efe:	89 83       	std	Y+1, r24	; 0x01

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	88 2f       	mov	r24, r24
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	84 70       	andi	r24, 0x04	; 4
     f08:	99 27       	eor	r25, r25
     f0a:	89 2b       	or	r24, r25
     f0c:	21 f0       	breq	.+8      	; 0xf16 <TWIMArbitrationLostBusErrorHandler+0x2a>
		Twim_result = TWIM_RESULT_BUS_ERROR;
     f0e:	84 e0       	ldi	r24, 0x04	; 4
     f10:	80 93 ae 20 	sts	0x20AE, r24	; 0x8020ae <Twim_result>
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <TWIMArbitrationLostBusErrorHandler+0x30>
	}
	/* If arbitration lost. */
	else {
		Twim_result = TWIM_RESULT_ARBITRATION_LOST;
     f16:	83 e0       	ldi	r24, 0x03	; 3
     f18:	80 93 ae 20 	sts	0x20AE, r24	; 0x8020ae <Twim_result>
	}

	/* Clear interrupt flag. */
	TWIM_BUS.MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     f1c:	80 ea       	ldi	r24, 0xA0	; 160
     f1e:	94 e0       	ldi	r25, 0x04	; 4
     f20:	29 81       	ldd	r18, Y+1	; 0x01
     f22:	28 60       	ori	r18, 0x08	; 8
     f24:	fc 01       	movw	r30, r24
     f26:	24 83       	std	Z+4, r18	; 0x04

	Twim_status = TWIM_STATUS_READY;
     f28:	10 92 ad 20 	sts	0x20AD, r1	; 0x8020ad <Twim_status>
}
     f2c:	00 00       	nop
     f2e:	0f 90       	pop	r0
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	08 95       	ret

00000f36 <TWIMWriteHandler>:

void TWIMWriteHandler()
{
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <TWIMWriteHandler+0x6>
     f3c:	1f 92       	push	r1
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = Twim_bytesToWrite;
     f42:	80 91 a9 20 	lds	r24, 0x20A9	; 0x8020a9 <Twim_bytesToWrite>
     f46:	89 83       	std	Y+1, r24	; 0x01
	uint8_t bytesToRead   = Twim_bytesToRead;
     f48:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <Twim_bytesToRead>
     f4c:	8a 83       	std	Y+2, r24	; 0x02

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (TWIM_BUS.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
     f4e:	80 ea       	ldi	r24, 0xA0	; 160
     f50:	94 e0       	ldi	r25, 0x04	; 4
     f52:	fc 01       	movw	r30, r24
     f54:	84 81       	ldd	r24, Z+4	; 0x04
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	80 71       	andi	r24, 0x10	; 16
     f5c:	99 27       	eor	r25, r25
     f5e:	89 2b       	or	r24, r25
     f60:	59 f0       	breq	.+22     	; 0xf78 <TWIMWriteHandler+0x42>
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     f62:	80 ea       	ldi	r24, 0xA0	; 160
     f64:	94 e0       	ldi	r25, 0x04	; 4
     f66:	23 e0       	ldi	r18, 0x03	; 3
     f68:	fc 01       	movw	r30, r24
     f6a:	23 83       	std	Z+3, r18	; 0x03
		Twim_result = TWIM_RESULT_NACK_RECEIVED;
     f6c:	85 e0       	ldi	r24, 0x05	; 5
     f6e:	80 93 ae 20 	sts	0x20AE, r24	; 0x8020ae <Twim_result>
		Twim_status = TWIM_STATUS_READY;
     f72:	10 92 ad 20 	sts	0x20AD, r1	; 0x8020ad <Twim_status>
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
	}
}
     f76:	34 c0       	rjmp	.+104    	; 0xfe0 <TWIMWriteHandler+0xaa>
		Twim_result = TWIM_RESULT_NACK_RECEIVED;
		Twim_status = TWIM_STATUS_READY;
	}

	/* If more bytes to write, send data. */
	else if (Twim_bytesWritten < bytesToWrite) {
     f78:	90 91 ab 20 	lds	r25, 0x20AB	; 0x8020ab <Twim_bytesWritten>
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	98 17       	cp	r25, r24
     f80:	c0 f4       	brcc	.+48     	; 0xfb2 <TWIMWriteHandler+0x7c>
		uint8_t data = Twim_writeData[Twim_bytesWritten];
     f82:	20 91 a5 20 	lds	r18, 0x20A5	; 0x8020a5 <Twim_writeData>
     f86:	30 91 a6 20 	lds	r19, 0x20A6	; 0x8020a6 <Twim_writeData+0x1>
     f8a:	80 91 ab 20 	lds	r24, 0x20AB	; 0x8020ab <Twim_bytesWritten>
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	82 0f       	add	r24, r18
     f94:	93 1f       	adc	r25, r19
     f96:	fc 01       	movw	r30, r24
     f98:	80 81       	ld	r24, Z
     f9a:	8b 83       	std	Y+3, r24	; 0x03
			TWIM_BUS.MASTER.DATA = data;
     f9c:	80 ea       	ldi	r24, 0xA0	; 160
     f9e:	94 e0       	ldi	r25, 0x04	; 4
     fa0:	2b 81       	ldd	r18, Y+3	; 0x03
     fa2:	fc 01       	movw	r30, r24
     fa4:	27 83       	std	Z+7, r18	; 0x07
		++Twim_bytesWritten;
     fa6:	80 91 ab 20 	lds	r24, 0x20AB	; 0x8020ab <Twim_bytesWritten>
     faa:	8f 5f       	subi	r24, 0xFF	; 255
     fac:	80 93 ab 20 	sts	0x20AB, r24	; 0x8020ab <Twim_bytesWritten>
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
	}
}
     fb0:	17 c0       	rjmp	.+46     	; 0xfe0 <TWIMWriteHandler+0xaa>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (Twim_bytesRead < bytesToRead) {
     fb2:	90 91 ac 20 	lds	r25, 0x20AC	; 0x8020ac <Twim_bytesRead>
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	98 17       	cp	r25, r24
     fba:	50 f4       	brcc	.+20     	; 0xfd0 <TWIMWriteHandler+0x9a>
		uint8_t readAddress = Twim_address | 0x01;
     fbc:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <Twim_address>
     fc0:	81 60       	ori	r24, 0x01	; 1
     fc2:	8c 83       	std	Y+4, r24	; 0x04
		TWIM_BUS.MASTER.ADDR = readAddress;
     fc4:	80 ea       	ldi	r24, 0xA0	; 160
     fc6:	94 e0       	ldi	r25, 0x04	; 4
     fc8:	2c 81       	ldd	r18, Y+4	; 0x04
     fca:	fc 01       	movw	r30, r24
     fcc:	26 83       	std	Z+6, r18	; 0x06
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
	}
}
     fce:	08 c0       	rjmp	.+16     	; 0xfe0 <TWIMWriteHandler+0xaa>
		TWIM_BUS.MASTER.ADDR = readAddress;
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     fd0:	80 ea       	ldi	r24, 0xA0	; 160
     fd2:	94 e0       	ldi	r25, 0x04	; 4
     fd4:	23 e0       	ldi	r18, 0x03	; 3
     fd6:	fc 01       	movw	r30, r24
     fd8:	23 83       	std	Z+3, r18	; 0x03
		TWIMTransactionFinished(TWIM_RESULT_OK);
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	0e 94 3d 08 	call	0x107a	; 0x107a <TWIMTransactionFinished>
	}
}
     fe0:	00 00       	nop
     fe2:	24 96       	adiw	r28, 0x04	; 4
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	08 95       	ret

00000fee <TWIMReadHandler>:

void TWIMReadHandler()
{
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	1f 92       	push	r1
     ff4:	1f 92       	push	r1
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
	/* Fetch data if bytes to be read. */
	if (Twim_bytesRead < TWIM_READ_BUFFER_SIZE) {
     ffa:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <Twim_bytesRead>
     ffe:	80 32       	cpi	r24, 0x20	; 32
    1000:	c0 f4       	brcc	.+48     	; 0x1032 <TWIMReadHandler+0x44>
		uint8_t data = TWIM_BUS.MASTER.DATA;
    1002:	80 ea       	ldi	r24, 0xA0	; 160
    1004:	94 e0       	ldi	r25, 0x04	; 4
    1006:	fc 01       	movw	r30, r24
    1008:	87 81       	ldd	r24, Z+7	; 0x07
    100a:	89 83       	std	Y+1, r24	; 0x01
		Twim_readData[Twim_bytesRead] = data;
    100c:	20 91 a7 20 	lds	r18, 0x20A7	; 0x8020a7 <Twim_readData>
    1010:	30 91 a8 20 	lds	r19, 0x20A8	; 0x8020a8 <Twim_readData+0x1>
    1014:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <Twim_bytesRead>
    1018:	88 2f       	mov	r24, r24
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	82 0f       	add	r24, r18
    101e:	93 1f       	adc	r25, r19
    1020:	29 81       	ldd	r18, Y+1	; 0x01
    1022:	fc 01       	movw	r30, r24
    1024:	20 83       	st	Z, r18
		Twim_bytesRead++;
    1026:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <Twim_bytesRead>
    102a:	8f 5f       	subi	r24, 0xFF	; 255
    102c:	80 93 ac 20 	sts	0x20AC, r24	; 0x8020ac <Twim_bytesRead>
    1030:	08 c0       	rjmp	.+16     	; 0x1042 <TWIMReadHandler+0x54>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1032:	80 ea       	ldi	r24, 0xA0	; 160
    1034:	94 e0       	ldi	r25, 0x04	; 4
    1036:	23 e0       	ldi	r18, 0x03	; 3
    1038:	fc 01       	movw	r30, r24
    103a:	23 83       	std	Z+3, r18	; 0x03
		TWIMTransactionFinished(TWIM_RESULT_BUFFER_OVERFLOW);
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	0e 94 3d 08 	call	0x107a	; 0x107a <TWIMTransactionFinished>
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = Twim_bytesToRead;
    1042:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <Twim_bytesToRead>
    1046:	8a 83       	std	Y+2, r24	; 0x02

	/* If more bytes to read, issue ACK and start a byte read. */
	if (Twim_bytesRead < bytesToRead) {
    1048:	90 91 ac 20 	lds	r25, 0x20AC	; 0x8020ac <Twim_bytesRead>
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	98 17       	cp	r25, r24
    1050:	30 f4       	brcc	.+12     	; 0x105e <TWIMReadHandler+0x70>
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1052:	80 ea       	ldi	r24, 0xA0	; 160
    1054:	94 e0       	ldi	r25, 0x04	; 4
    1056:	22 e0       	ldi	r18, 0x02	; 2
    1058:	fc 01       	movw	r30, r24
    105a:	23 83       	std	Z+3, r18	; 0x03
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
		                               TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
	}
}
    105c:	08 c0       	rjmp	.+16     	; 0x106e <TWIMReadHandler+0x80>
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    105e:	80 ea       	ldi	r24, 0xA0	; 160
    1060:	94 e0       	ldi	r25, 0x04	; 4
    1062:	27 e0       	ldi	r18, 0x07	; 7
    1064:	fc 01       	movw	r30, r24
    1066:	23 83       	std	Z+3, r18	; 0x03
		                               TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	0e 94 3d 08 	call	0x107a	; 0x107a <TWIMTransactionFinished>
	}
}
    106e:	00 00       	nop
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <TWIMTransactionFinished>:

void TWIMTransactionFinished( uint8_t result)
{
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	1f 92       	push	r1
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	89 83       	std	Y+1, r24	; 0x01
	Twim_result = result;
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	80 93 ae 20 	sts	0x20AE, r24	; 0x8020ae <Twim_result>
	Twim_status = TWIM_STATUS_READY;
    108c:	10 92 ad 20 	sts	0x20AD, r1	; 0x8020ad <Twim_status>
}
    1090:	00 00       	nop
    1092:	0f 90       	pop	r0
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	08 95       	ret

0000109a <__vector_46>:

ISR (TWIM_BUS_vect)
{
    109a:	1f 92       	push	r1
    109c:	0f 92       	push	r0
    109e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    10a2:	0f 92       	push	r0
    10a4:	11 24       	eor	r1, r1
    10a6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    10aa:	0f 92       	push	r0
    10ac:	2f 93       	push	r18
    10ae:	3f 93       	push	r19
    10b0:	4f 93       	push	r20
    10b2:	5f 93       	push	r21
    10b4:	6f 93       	push	r22
    10b6:	7f 93       	push	r23
    10b8:	8f 93       	push	r24
    10ba:	9f 93       	push	r25
    10bc:	af 93       	push	r26
    10be:	bf 93       	push	r27
    10c0:	ef 93       	push	r30
    10c2:	ff 93       	push	r31
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	1f 92       	push	r1
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
    10ce:	80 ea       	ldi	r24, 0xA0	; 160
    10d0:	94 e0       	ldi	r25, 0x04	; 4
    10d2:	fc 01       	movw	r30, r24
    10d4:	84 81       	ldd	r24, Z+4	; 0x04
    10d6:	89 83       	std	Y+1, r24	; 0x01

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	88 70       	andi	r24, 0x08	; 8
    10e0:	99 27       	eor	r25, r25
    10e2:	89 2b       	or	r24, r25
    10e4:	39 f4       	brne	.+14     	; 0x10f4 <__vector_46+0x5a>
	(currentStatus & TWI_MASTER_BUSERR_bm)) {
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	84 70       	andi	r24, 0x04	; 4
    10ee:	99 27       	eor	r25, r25
ISR (TWIM_BUS_vect)
{
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    10f0:	89 2b       	or	r24, r25
    10f2:	19 f0       	breq	.+6      	; 0x10fa <__vector_46+0x60>
	(currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWIMArbitrationLostBusErrorHandler();
    10f4:	0e 94 76 07 	call	0xeec	; 0xeec <TWIMArbitrationLostBusErrorHandler>
    10f8:	13 c0       	rjmp	.+38     	; 0x1120 <__vector_46+0x86>
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	80 74       	andi	r24, 0x40	; 64
    1102:	99 27       	eor	r25, r25
    1104:	89 2b       	or	r24, r25
    1106:	19 f0       	breq	.+6      	; 0x110e <__vector_46+0x74>
		TWIMWriteHandler();
    1108:	0e 94 9b 07 	call	0xf36	; 0xf36 <TWIMWriteHandler>
    110c:	09 c0       	rjmp	.+18     	; 0x1120 <__vector_46+0x86>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	88 23       	and	r24, r24
    1112:	1c f4       	brge	.+6      	; 0x111a <__vector_46+0x80>
		TWIMReadHandler();
    1114:	0e 94 f7 07 	call	0xfee	; 0xfee <TWIMReadHandler>
    1118:	03 c0       	rjmp	.+6      	; 0x1120 <__vector_46+0x86>
	}

	/* If unexpected state. */
	else {
		TWIMTransactionFinished(TWIM_RESULT_FAIL);
    111a:	86 e0       	ldi	r24, 0x06	; 6
    111c:	0e 94 3d 08 	call	0x107a	; 0x107a <TWIMTransactionFinished>
	}
	
	if (Twim_status == TWIM_STATUS_READY) //Transaction finished
    1120:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <Twim_status>
	{	
	}
}
    1124:	00 00       	nop
    1126:	0f 90       	pop	r0
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	ff 91       	pop	r31
    112e:	ef 91       	pop	r30
    1130:	bf 91       	pop	r27
    1132:	af 91       	pop	r26
    1134:	9f 91       	pop	r25
    1136:	8f 91       	pop	r24
    1138:	7f 91       	pop	r23
    113a:	6f 91       	pop	r22
    113c:	5f 91       	pop	r21
    113e:	4f 91       	pop	r20
    1140:	3f 91       	pop	r19
    1142:	2f 91       	pop	r18
    1144:	0f 90       	pop	r0
    1146:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    114a:	0f 90       	pop	r0
    114c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1150:	0f 90       	pop	r0
    1152:	1f 90       	pop	r1
    1154:	18 95       	reti

00001156 <DriverUSARTInit>:
static int stdio_putchar(char c, FILE * stream);
static int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_RW);

void DriverUSARTInit(void)
{
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	
    115e:	80 e8       	ldi	r24, 0x80	; 128
    1160:	96 e0       	ldi	r25, 0x06	; 6
    1162:	28 e0       	ldi	r18, 0x08	; 8
    1164:	fc 01       	movw	r30, r24
    1166:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;
    1168:	80 e8       	ldi	r24, 0x80	; 128
    116a:	96 e0       	ldi	r25, 0x06	; 6
    116c:	24 e0       	ldi	r18, 0x04	; 4
    116e:	fc 01       	movw	r30, r24
    1170:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000; //No interrupt triggered
    1172:	80 ea       	ldi	r24, 0xA0	; 160
    1174:	9a e0       	ldi	r25, 0x0A	; 10
    1176:	fc 01       	movw	r30, r24
    1178:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000; //RxEn and TxEn
    117a:	80 ea       	ldi	r24, 0xA0	; 160
    117c:	9a e0       	ldi	r25, 0x0A	; 10
    117e:	28 e1       	ldi	r18, 0x18	; 24
    1180:	fc 01       	movw	r30, r24
    1182:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011;	 //Async, Pmode disabled, 1 stop bit, Character size =8
    1184:	80 ea       	ldi	r24, 0xA0	; 160
    1186:	9a e0       	ldi	r25, 0x0A	; 10
    1188:	23 e0       	ldi	r18, 0x03	; 3
    118a:	fc 01       	movw	r30, r24
    118c:	25 83       	std	Z+5, r18	; 0x05
	
	USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 19200 baud
    118e:	80 ea       	ldi	r24, 0xA0	; 160
    1190:	9a e0       	ldi	r25, 0x0A	; 10
    1192:	25 ee       	ldi	r18, 0xE5	; 229
    1194:	fc 01       	movw	r30, r24
    1196:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0xBC; 
    1198:	80 ea       	ldi	r24, 0xA0	; 160
    119a:	9a e0       	ldi	r25, 0x0A	; 10
    119c:	2c eb       	ldi	r18, 0xBC	; 188
    119e:	fc 01       	movw	r30, r24
    11a0:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio;
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	90 e2       	ldi	r25, 0x20	; 32
    11a6:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <__iob+0x2>
    11aa:	90 93 c9 20 	sts	0x20C9, r25	; 0x8020c9 <__iob+0x3>
	stdin=&UsartStdio;
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	90 e2       	ldi	r25, 0x20	; 32
    11b2:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <__iob>
    11b6:	90 93 c7 20 	sts	0x20C7, r25	; 0x8020c7 <__iob+0x1>
}
    11ba:	00 00       	nop
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	08 95       	ret

000011c2 <stdio_putchar>:


static int stdio_putchar(char c, FILE * stream)
{
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <stdio_putchar+0x6>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	6a 83       	std	Y+2, r22	; 0x02
    11d0:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = c;
    11d2:	80 ea       	ldi	r24, 0xA0	; 160
    11d4:	9a e0       	ldi	r25, 0x0A	; 10
    11d6:	29 81       	ldd	r18, Y+1	; 0x01
    11d8:	fc 01       	movw	r30, r24
    11da:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000));
    11dc:	00 00       	nop
    11de:	80 ea       	ldi	r24, 0xA0	; 160
    11e0:	9a e0       	ldi	r25, 0x0A	; 10
    11e2:	fc 01       	movw	r30, r24
    11e4:	81 81       	ldd	r24, Z+1	; 0x01
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	80 74       	andi	r24, 0x40	; 64
    11ec:	99 27       	eor	r25, r25
    11ee:	89 2b       	or	r24, r25
    11f0:	b1 f3       	breq	.-20     	; 0x11de <stdio_putchar+0x1c>
	USART.STATUS=0b01000000;
    11f2:	80 ea       	ldi	r24, 0xA0	; 160
    11f4:	9a e0       	ldi	r25, 0x0A	; 10
    11f6:	20 e4       	ldi	r18, 0x40	; 64
    11f8:	fc 01       	movw	r30, r24
    11fa:	21 83       	std	Z+1, r18	; 0x01
	return 0;
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
}
    1200:	23 96       	adiw	r28, 0x03	; 3
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	08 95       	ret

0000120c <stdio_getchar>:
	
static int stdio_getchar(FILE *stream)
{
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	1f 92       	push	r1
    1212:	1f 92       	push	r1
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000));
    121c:	00 00       	nop
    121e:	80 ea       	ldi	r24, 0xA0	; 160
    1220:	9a e0       	ldi	r25, 0x0A	; 10
    1222:	fc 01       	movw	r30, r24
    1224:	81 81       	ldd	r24, Z+1	; 0x01
    1226:	88 23       	and	r24, r24
    1228:	d4 f7       	brge	.-12     	; 0x121e <stdio_getchar+0x12>
	return USART.DATA;
    122a:	80 ea       	ldi	r24, 0xA0	; 160
    122c:	9a e0       	ldi	r25, 0x0A	; 10
    122e:	fc 01       	movw	r30, r24
    1230:	80 81       	ld	r24, Z
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
}
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	08 95       	ret

00001240 <main>:


char text[10];
uint16_t clear, red, green, blue;

int main(void) {
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	6c 97       	sbiw	r28, 0x1c	; 28
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	de bf       	out	0x3e, r29	; 62
	//Enable sleep
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    124e:	88 e4       	ldi	r24, 0x48	; 72
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	28 e4       	ldi	r18, 0x48	; 72
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	f9 01       	movw	r30, r18
    1258:	20 81       	ld	r18, Z
    125a:	21 7f       	andi	r18, 0xF1	; 241
    125c:	24 60       	ori	r18, 0x04	; 4
    125e:	fc 01       	movw	r30, r24
    1260:	20 83       	st	Z, r18
	sleep_enable();
    1262:	88 e4       	ldi	r24, 0x48	; 72
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	28 e4       	ldi	r18, 0x48	; 72
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	f9 01       	movw	r30, r18
    126c:	20 81       	ld	r18, Z
    126e:	21 60       	ori	r18, 0x01	; 1
    1270:	fc 01       	movw	r30, r24
    1272:	20 83       	st	Z, r18
	//Initialize drivers
	DriverSysClkXtalInit();					//Clock init
    1274:	0e 94 b7 06 	call	0xd6e	; 0xd6e <DriverSysClkXtalInit>
	DriverUSARTInit();						//USART init and link to stdio
    1278:	0e 94 ab 08 	call	0x1156	; 0x1156 <DriverUSARTInit>
	printf("Initialising Drivers\n\r");		//(Check if terminal is working)
    127c:	8f e4       	ldi	r24, 0x4F	; 79
    127e:	90 e2       	ldi	r25, 0x20	; 32
    1280:	89 2f       	mov	r24, r25
    1282:	8f 93       	push	r24
    1284:	8f e4       	ldi	r24, 0x4F	; 79
    1286:	90 e2       	ldi	r25, 0x20	; 32
    1288:	8f 93       	push	r24
    128a:	0e 94 b6 10 	call	0x216c	; 0x216c <printf>
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
	DriverTWIMInit();						//Initialize TWI in master mode
    1292:	0e 94 d2 06 	call	0xda4	; 0xda4 <DriverTWIMInit>
	DriverLedInit();						//Initialize LED's
    1296:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DriverLedInit>
	DriverPowerInit();						//Initialize aux power driver
    129a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <DriverPowerInit>
	DriverAdcInit();						//Initialize ADC driver
    129e:	0e 94 ef 01 	call	0x3de	; 0x3de <DriverAdcInit>
	DriverMotorInit();						//Initialize motor driver
    12a2:	0e 94 be 03 	call	0x77c	; 0x77c <DriverMotorInit>
	InitInterrupts();						//Global interrupts and GPIO wake up
    12a6:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <InitInterrupts>
	DriverPL9823Init();						//RGB Driver
    12aa:	0e 94 31 06 	call	0xc62	; 0xc62 <DriverPL9823Init>
	DriverPowerVccAuxSet(1);				//Enable Auxillary power line
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DriverPowerVccAuxSet>
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	a0 e8       	ldi	r26, 0x80	; 128
    12ba:	bf e3       	ldi	r27, 0x3F	; 63
    12bc:	8d 83       	std	Y+5, r24	; 0x05
    12be:	9e 83       	std	Y+6, r25	; 0x06
    12c0:	af 83       	std	Y+7, r26	; 0x07
    12c2:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	4a ef       	ldi	r20, 0xFA	; 250
    12ca:	55 e4       	ldi	r21, 0x45	; 69
    12cc:	6d 81       	ldd	r22, Y+5	; 0x05
    12ce:	7e 81       	ldd	r23, Y+6	; 0x06
    12d0:	8f 81       	ldd	r24, Y+7	; 0x07
    12d2:	98 85       	ldd	r25, Y+8	; 0x08
    12d4:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	89 87       	std	Y+9, r24	; 0x09
    12de:	9a 87       	std	Y+10, r25	; 0x0a
    12e0:	ab 87       	std	Y+11, r26	; 0x0b
    12e2:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e8       	ldi	r20, 0x80	; 128
    12ea:	5f e3       	ldi	r21, 0x3F	; 63
    12ec:	69 85       	ldd	r22, Y+9	; 0x09
    12ee:	7a 85       	ldd	r23, Y+10	; 0x0a
    12f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    12f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    12f4:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__cmpsf2>
    12f8:	88 23       	and	r24, r24
    12fa:	2c f4       	brge	.+10     	; 0x1306 <main+0xc6>
		__ticks = 1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	8d 87       	std	Y+13, r24	; 0x0d
    1302:	9e 87       	std	Y+14, r25	; 0x0e
    1304:	3f c0       	rjmp	.+126    	; 0x1384 <main+0x144>
	else if (__tmp > 65535)
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	4f e7       	ldi	r20, 0x7F	; 127
    130c:	57 e4       	ldi	r21, 0x47	; 71
    130e:	69 85       	ldd	r22, Y+9	; 0x09
    1310:	7a 85       	ldd	r23, Y+10	; 0x0a
    1312:	8b 85       	ldd	r24, Y+11	; 0x0b
    1314:	9c 85       	ldd	r25, Y+12	; 0x0c
    1316:	0e 94 44 0b 	call	0x1688	; 0x1688 <__gesf2>
    131a:	18 16       	cp	r1, r24
    131c:	4c f5       	brge	.+82     	; 0x1370 <main+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e2       	ldi	r20, 0x20	; 32
    1324:	51 e4       	ldi	r21, 0x41	; 65
    1326:	6d 81       	ldd	r22, Y+5	; 0x05
    1328:	7e 81       	ldd	r23, Y+6	; 0x06
    132a:	8f 81       	ldd	r24, Y+7	; 0x07
    132c:	98 85       	ldd	r25, Y+8	; 0x08
    132e:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	bc 01       	movw	r22, r24
    1338:	cd 01       	movw	r24, r26
    133a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	8d 87       	std	Y+13, r24	; 0x0d
    1344:	9e 87       	std	Y+14, r25	; 0x0e
    1346:	0f c0       	rjmp	.+30     	; 0x1366 <main+0x126>
    1348:	80 e2       	ldi	r24, 0x20	; 32
    134a:	93 e0       	ldi	r25, 0x03	; 3
    134c:	8f 87       	std	Y+15, r24	; 0x0f
    134e:	98 8b       	std	Y+16, r25	; 0x10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1350:	8f 85       	ldd	r24, Y+15	; 0x0f
    1352:	98 89       	ldd	r25, Y+16	; 0x10
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <main+0x114>
    1358:	8f 87       	std	Y+15, r24	; 0x0f
    135a:	98 8b       	std	Y+16, r25	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135c:	8d 85       	ldd	r24, Y+13	; 0x0d
    135e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	8d 87       	std	Y+13, r24	; 0x0d
    1364:	9e 87       	std	Y+14, r25	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1366:	8d 85       	ldd	r24, Y+13	; 0x0d
    1368:	9e 85       	ldd	r25, Y+14	; 0x0e
    136a:	89 2b       	or	r24, r25
    136c:	69 f7       	brne	.-38     	; 0x1348 <main+0x108>
    136e:	14 c0       	rjmp	.+40     	; 0x1398 <main+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1370:	69 85       	ldd	r22, Y+9	; 0x09
    1372:	7a 85       	ldd	r23, Y+10	; 0x0a
    1374:	8b 85       	ldd	r24, Y+11	; 0x0b
    1376:	9c 85       	ldd	r25, Y+12	; 0x0c
    1378:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	8d 87       	std	Y+13, r24	; 0x0d
    1382:	9e 87       	std	Y+14, r25	; 0x0e
    1384:	8d 85       	ldd	r24, Y+13	; 0x0d
    1386:	9e 85       	ldd	r25, Y+14	; 0x0e
    1388:	89 8b       	std	Y+17, r24	; 0x11
    138a:	9a 8b       	std	Y+18, r25	; 0x12
    138c:	89 89       	ldd	r24, Y+17	; 0x11
    138e:	9a 89       	ldd	r25, Y+18	; 0x12
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <main+0x150>
    1394:	89 8b       	std	Y+17, r24	; 0x11
    1396:	9a 8b       	std	Y+18, r25	; 0x12
	_delay_ms(1);
	DriverAdps9960Init();					//Photo sensor
    1398:	0e 94 f7 01 	call	0x3ee	; 0x3ee <DriverAdps9960Init>

	printf("\n\rStart run\n\n\r");
    139c:	86 e6       	ldi	r24, 0x66	; 102
    139e:	90 e2       	ldi	r25, 0x20	; 32
    13a0:	89 2f       	mov	r24, r25
    13a2:	8f 93       	push	r24
    13a4:	86 e6       	ldi	r24, 0x66	; 102
    13a6:	90 e2       	ldi	r25, 0x20	; 32
    13a8:	8f 93       	push	r24
    13aa:	0e 94 b6 10 	call	0x216c	; 0x216c <printf>
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
	DriverMotorSet(1500,1500);						//Drive
    13b2:	6c ed       	ldi	r22, 0xDC	; 220
    13b4:	75 e0       	ldi	r23, 0x05	; 5
    13b6:	8c ed       	ldi	r24, 0xDC	; 220
    13b8:	95 e0       	ldi	r25, 0x05	; 5
    13ba:	0e 94 28 04 	call	0x850	; 0x850 <DriverMotorSet>
	DriverLedWrite(0b111);							//Enable leds
    13be:	87 e0       	ldi	r24, 0x07	; 7
    13c0:	0e 94 a5 03 	call	0x74a	; 0x74a <DriverLedWrite>
	DriverAdps9960Get(&clear, &red, &green, &blue); //Measure photo sensor data
    13c4:	24 eb       	ldi	r18, 0xB4	; 180
    13c6:	30 e2       	ldi	r19, 0x20	; 32
    13c8:	46 eb       	ldi	r20, 0xB6	; 182
    13ca:	50 e2       	ldi	r21, 0x20	; 32
    13cc:	68 eb       	ldi	r22, 0xB8	; 184
    13ce:	70 e2       	ldi	r23, 0x20	; 32
    13d0:	84 ec       	ldi	r24, 0xC4	; 196
    13d2:	90 e2       	ldi	r25, 0x20	; 32
    13d4:	0e 94 4c 02 	call	0x498	; 0x498 <DriverAdps9960Get>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	aa ef       	ldi	r26, 0xFA	; 250
    13de:	b3 e4       	ldi	r27, 0x43	; 67
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	9a 83       	std	Y+2, r25	; 0x02
    13e4:	ab 83       	std	Y+3, r26	; 0x03
    13e6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	4a ef       	ldi	r20, 0xFA	; 250
    13ee:	55 e4       	ldi	r21, 0x45	; 69
    13f0:	69 81       	ldd	r22, Y+1	; 0x01
    13f2:	7a 81       	ldd	r23, Y+2	; 0x02
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	9c 81       	ldd	r25, Y+4	; 0x04
    13f8:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	8b 8b       	std	Y+19, r24	; 0x13
    1402:	9c 8b       	std	Y+20, r25	; 0x14
    1404:	ad 8b       	std	Y+21, r26	; 0x15
    1406:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e8       	ldi	r20, 0x80	; 128
    140e:	5f e3       	ldi	r21, 0x3F	; 63
    1410:	6b 89       	ldd	r22, Y+19	; 0x13
    1412:	7c 89       	ldd	r23, Y+20	; 0x14
    1414:	8d 89       	ldd	r24, Y+21	; 0x15
    1416:	9e 89       	ldd	r25, Y+22	; 0x16
    1418:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__cmpsf2>
    141c:	88 23       	and	r24, r24
    141e:	2c f4       	brge	.+10     	; 0x142a <main+0x1ea>
		__ticks = 1;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	8f 8b       	std	Y+23, r24	; 0x17
    1426:	98 8f       	std	Y+24, r25	; 0x18
    1428:	3f c0       	rjmp	.+126    	; 0x14a8 <main+0x268>
	else if (__tmp > 65535)
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	3f ef       	ldi	r19, 0xFF	; 255
    142e:	4f e7       	ldi	r20, 0x7F	; 127
    1430:	57 e4       	ldi	r21, 0x47	; 71
    1432:	6b 89       	ldd	r22, Y+19	; 0x13
    1434:	7c 89       	ldd	r23, Y+20	; 0x14
    1436:	8d 89       	ldd	r24, Y+21	; 0x15
    1438:	9e 89       	ldd	r25, Y+22	; 0x16
    143a:	0e 94 44 0b 	call	0x1688	; 0x1688 <__gesf2>
    143e:	18 16       	cp	r1, r24
    1440:	4c f5       	brge	.+82     	; 0x1494 <main+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e2       	ldi	r20, 0x20	; 32
    1448:	51 e4       	ldi	r21, 0x41	; 65
    144a:	69 81       	ldd	r22, Y+1	; 0x01
    144c:	7a 81       	ldd	r23, Y+2	; 0x02
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	bc 01       	movw	r22, r24
    145c:	cd 01       	movw	r24, r26
    145e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	8f 8b       	std	Y+23, r24	; 0x17
    1468:	98 8f       	std	Y+24, r25	; 0x18
    146a:	0f c0       	rjmp	.+30     	; 0x148a <main+0x24a>
    146c:	80 e2       	ldi	r24, 0x20	; 32
    146e:	93 e0       	ldi	r25, 0x03	; 3
    1470:	89 8f       	std	Y+25, r24	; 0x19
    1472:	9a 8f       	std	Y+26, r25	; 0x1a
    1474:	89 8d       	ldd	r24, Y+25	; 0x19
    1476:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <main+0x238>
    147c:	89 8f       	std	Y+25, r24	; 0x19
    147e:	9a 8f       	std	Y+26, r25	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1480:	8f 89       	ldd	r24, Y+23	; 0x17
    1482:	98 8d       	ldd	r25, Y+24	; 0x18
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	8f 8b       	std	Y+23, r24	; 0x17
    1488:	98 8f       	std	Y+24, r25	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148a:	8f 89       	ldd	r24, Y+23	; 0x17
    148c:	98 8d       	ldd	r25, Y+24	; 0x18
    148e:	89 2b       	or	r24, r25
    1490:	69 f7       	brne	.-38     	; 0x146c <main+0x22c>
    1492:	14 c0       	rjmp	.+40     	; 0x14bc <main+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1494:	6b 89       	ldd	r22, Y+19	; 0x13
    1496:	7c 89       	ldd	r23, Y+20	; 0x14
    1498:	8d 89       	ldd	r24, Y+21	; 0x15
    149a:	9e 89       	ldd	r25, Y+22	; 0x16
    149c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__fixunssfsi>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	8f 8b       	std	Y+23, r24	; 0x17
    14a6:	98 8f       	std	Y+24, r25	; 0x18
    14a8:	8f 89       	ldd	r24, Y+23	; 0x17
    14aa:	98 8d       	ldd	r25, Y+24	; 0x18
    14ac:	8b 8f       	std	Y+27, r24	; 0x1b
    14ae:	9c 8f       	std	Y+28, r25	; 0x1c
    14b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	f1 f7       	brne	.-4      	; 0x14b4 <main+0x274>
    14b8:	8b 8f       	std	Y+27, r24	; 0x1b
    14ba:	9c 8f       	std	Y+28, r25	; 0x1c

	while(1) {
		_delay_ms(500);
		printf ("C:%d\t R:%d\t G:%d\t B:%d\t\n\r", clear, red, green, blue);	//Print photo data
    14bc:	60 91 b4 20 	lds	r22, 0x20B4	; 0x8020b4 <blue>
    14c0:	70 91 b5 20 	lds	r23, 0x20B5	; 0x8020b5 <blue+0x1>
    14c4:	40 91 b6 20 	lds	r20, 0x20B6	; 0x8020b6 <green>
    14c8:	50 91 b7 20 	lds	r21, 0x20B7	; 0x8020b7 <green+0x1>
    14cc:	20 91 b8 20 	lds	r18, 0x20B8	; 0x8020b8 <red>
    14d0:	30 91 b9 20 	lds	r19, 0x20B9	; 0x8020b9 <red+0x1>
    14d4:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <clear>
    14d8:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <clear+0x1>
    14dc:	e7 2f       	mov	r30, r23
    14de:	ef 93       	push	r30
    14e0:	6f 93       	push	r22
    14e2:	65 2f       	mov	r22, r21
    14e4:	6f 93       	push	r22
    14e6:	4f 93       	push	r20
    14e8:	43 2f       	mov	r20, r19
    14ea:	4f 93       	push	r20
    14ec:	2f 93       	push	r18
    14ee:	29 2f       	mov	r18, r25
    14f0:	2f 93       	push	r18
    14f2:	8f 93       	push	r24
    14f4:	85 e7       	ldi	r24, 0x75	; 117
    14f6:	90 e2       	ldi	r25, 0x20	; 32
    14f8:	89 2f       	mov	r24, r25
    14fa:	8f 93       	push	r24
    14fc:	85 e7       	ldi	r24, 0x75	; 117
    14fe:	90 e2       	ldi	r25, 0x20	; 32
    1500:	8f 93       	push	r24
    1502:	0e 94 b6 10 	call	0x216c	; 0x216c <printf>
    1506:	8d b7       	in	r24, 0x3d	; 61
    1508:	9e b7       	in	r25, 0x3e	; 62
    150a:	0a 96       	adiw	r24, 0x0a	; 10
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	de bf       	out	0x3e, r29	; 62
		DriverAdps9960Get(&clear, &red, &green, &blue); //Measure photo sensor data
    1510:	24 eb       	ldi	r18, 0xB4	; 180
    1512:	30 e2       	ldi	r19, 0x20	; 32
    1514:	46 eb       	ldi	r20, 0xB6	; 182
    1516:	50 e2       	ldi	r21, 0x20	; 32
    1518:	68 eb       	ldi	r22, 0xB8	; 184
    151a:	70 e2       	ldi	r23, 0x20	; 32
    151c:	84 ec       	ldi	r24, 0xC4	; 196
    151e:	90 e2       	ldi	r25, 0x20	; 32
    1520:	0e 94 4c 02 	call	0x498	; 0x498 <DriverAdps9960Get>

		if (getSleepFlag()){							//Check for sleep flag set
    1524:	0e 94 18 03 	call	0x630	; 0x630 <getSleepFlag>
    1528:	88 23       	and	r24, r24
    152a:	09 f4       	brne	.+2      	; 0x152e <main+0x2ee>
    152c:	55 cf       	rjmp	.-342    	; 0x13d8 <main+0x198>
			DriverMotorSet(0,0);
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0e 94 28 04 	call	0x850	; 0x850 <DriverMotorSet>
			printf("Sleep\n\r");
    153a:	8f e8       	ldi	r24, 0x8F	; 143
    153c:	90 e2       	ldi	r25, 0x20	; 32
    153e:	89 2f       	mov	r24, r25
    1540:	8f 93       	push	r24
    1542:	8f e8       	ldi	r24, 0x8F	; 143
    1544:	90 e2       	ldi	r25, 0x20	; 32
    1546:	8f 93       	push	r24
    1548:	0e 94 b6 10 	call	0x216c	; 0x216c <printf>
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
			clearSleepFlag();
    1550:	0e 94 21 03 	call	0x642	; 0x642 <clearSleepFlag>
			DriverPowerVccAuxSet(0);
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DriverPowerVccAuxSet>
			PMIC.CTRL = 0b00000100;			//only H-lvl interrupts
    155a:	80 ea       	ldi	r24, 0xA0	; 160
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	24 e0       	ldi	r18, 0x04	; 4
    1560:	fc 01       	movw	r30, r24
    1562:	22 83       	std	Z+2, r18	; 0x02
			PORTF.DIRCLR = 0b00111111;
    1564:	80 ea       	ldi	r24, 0xA0	; 160
    1566:	96 e0       	ldi	r25, 0x06	; 6
    1568:	2f e3       	ldi	r18, 0x3F	; 63
    156a:	fc 01       	movw	r30, r24
    156c:	22 83       	std	Z+2, r18	; 0x02
			sleep_cpu();
    156e:	88 95       	sleep
			PORTF.DIRSET = 0b00111111;
    1570:	80 ea       	ldi	r24, 0xA0	; 160
    1572:	96 e0       	ldi	r25, 0x06	; 6
    1574:	2f e3       	ldi	r18, 0x3F	; 63
    1576:	fc 01       	movw	r30, r24
    1578:	21 83       	std	Z+1, r18	; 0x01
			PMIC.CTRL = 0b10000111;			//round robin scheduling + all interrupts enabled
    157a:	80 ea       	ldi	r24, 0xA0	; 160
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	27 e8       	ldi	r18, 0x87	; 135
    1580:	fc 01       	movw	r30, r24
    1582:	22 83       	std	Z+2, r18	; 0x02
		}
	}
    1584:	29 cf       	rjmp	.-430    	; 0x13d8 <main+0x198>

00001586 <__cmpsf2>:
    1586:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__fp_cmp>
    158a:	08 f4       	brcc	.+2      	; 0x158e <__cmpsf2+0x8>
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	08 95       	ret

00001590 <__fixunssfsi>:
    1590:	0e 94 23 0b 	call	0x1646	; 0x1646 <__fp_splitA>
    1594:	88 f0       	brcs	.+34     	; 0x15b8 <__fixunssfsi+0x28>
    1596:	9f 57       	subi	r25, 0x7F	; 127
    1598:	98 f0       	brcs	.+38     	; 0x15c0 <__fixunssfsi+0x30>
    159a:	b9 2f       	mov	r27, r25
    159c:	99 27       	eor	r25, r25
    159e:	b7 51       	subi	r27, 0x17	; 23
    15a0:	b0 f0       	brcs	.+44     	; 0x15ce <__fixunssfsi+0x3e>
    15a2:	e1 f0       	breq	.+56     	; 0x15dc <__fixunssfsi+0x4c>
    15a4:	66 0f       	add	r22, r22
    15a6:	77 1f       	adc	r23, r23
    15a8:	88 1f       	adc	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	1a f0       	brmi	.+6      	; 0x15b4 <__fixunssfsi+0x24>
    15ae:	ba 95       	dec	r27
    15b0:	c9 f7       	brne	.-14     	; 0x15a4 <__fixunssfsi+0x14>
    15b2:	14 c0       	rjmp	.+40     	; 0x15dc <__fixunssfsi+0x4c>
    15b4:	b1 30       	cpi	r27, 0x01	; 1
    15b6:	91 f0       	breq	.+36     	; 0x15dc <__fixunssfsi+0x4c>
    15b8:	0e 94 3d 0b 	call	0x167a	; 0x167a <__fp_zero>
    15bc:	b1 e0       	ldi	r27, 0x01	; 1
    15be:	08 95       	ret
    15c0:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__fp_zero>
    15c4:	67 2f       	mov	r22, r23
    15c6:	78 2f       	mov	r23, r24
    15c8:	88 27       	eor	r24, r24
    15ca:	b8 5f       	subi	r27, 0xF8	; 248
    15cc:	39 f0       	breq	.+14     	; 0x15dc <__fixunssfsi+0x4c>
    15ce:	b9 3f       	cpi	r27, 0xF9	; 249
    15d0:	cc f3       	brlt	.-14     	; 0x15c4 <__fixunssfsi+0x34>
    15d2:	86 95       	lsr	r24
    15d4:	77 95       	ror	r23
    15d6:	67 95       	ror	r22
    15d8:	b3 95       	inc	r27
    15da:	d9 f7       	brne	.-10     	; 0x15d2 <__fixunssfsi+0x42>
    15dc:	3e f4       	brtc	.+14     	; 0x15ec <__fixunssfsi+0x5c>
    15de:	90 95       	com	r25
    15e0:	80 95       	com	r24
    15e2:	70 95       	com	r23
    15e4:	61 95       	neg	r22
    15e6:	7f 4f       	sbci	r23, 0xFF	; 255
    15e8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ea:	9f 4f       	sbci	r25, 0xFF	; 255
    15ec:	08 95       	ret

000015ee <__fp_cmp>:
    15ee:	99 0f       	add	r25, r25
    15f0:	00 08       	sbc	r0, r0
    15f2:	55 0f       	add	r21, r21
    15f4:	aa 0b       	sbc	r26, r26
    15f6:	e0 e8       	ldi	r30, 0x80	; 128
    15f8:	fe ef       	ldi	r31, 0xFE	; 254
    15fa:	16 16       	cp	r1, r22
    15fc:	17 06       	cpc	r1, r23
    15fe:	e8 07       	cpc	r30, r24
    1600:	f9 07       	cpc	r31, r25
    1602:	c0 f0       	brcs	.+48     	; 0x1634 <__fp_cmp+0x46>
    1604:	12 16       	cp	r1, r18
    1606:	13 06       	cpc	r1, r19
    1608:	e4 07       	cpc	r30, r20
    160a:	f5 07       	cpc	r31, r21
    160c:	98 f0       	brcs	.+38     	; 0x1634 <__fp_cmp+0x46>
    160e:	62 1b       	sub	r22, r18
    1610:	73 0b       	sbc	r23, r19
    1612:	84 0b       	sbc	r24, r20
    1614:	95 0b       	sbc	r25, r21
    1616:	39 f4       	brne	.+14     	; 0x1626 <__fp_cmp+0x38>
    1618:	0a 26       	eor	r0, r26
    161a:	61 f0       	breq	.+24     	; 0x1634 <__fp_cmp+0x46>
    161c:	23 2b       	or	r18, r19
    161e:	24 2b       	or	r18, r20
    1620:	25 2b       	or	r18, r21
    1622:	21 f4       	brne	.+8      	; 0x162c <__fp_cmp+0x3e>
    1624:	08 95       	ret
    1626:	0a 26       	eor	r0, r26
    1628:	09 f4       	brne	.+2      	; 0x162c <__fp_cmp+0x3e>
    162a:	a1 40       	sbci	r26, 0x01	; 1
    162c:	a6 95       	lsr	r26
    162e:	8f ef       	ldi	r24, 0xFF	; 255
    1630:	81 1d       	adc	r24, r1
    1632:	81 1d       	adc	r24, r1
    1634:	08 95       	ret

00001636 <__fp_split3>:
    1636:	57 fd       	sbrc	r21, 7
    1638:	90 58       	subi	r25, 0x80	; 128
    163a:	44 0f       	add	r20, r20
    163c:	55 1f       	adc	r21, r21
    163e:	59 f0       	breq	.+22     	; 0x1656 <__fp_splitA+0x10>
    1640:	5f 3f       	cpi	r21, 0xFF	; 255
    1642:	71 f0       	breq	.+28     	; 0x1660 <__fp_splitA+0x1a>
    1644:	47 95       	ror	r20

00001646 <__fp_splitA>:
    1646:	88 0f       	add	r24, r24
    1648:	97 fb       	bst	r25, 7
    164a:	99 1f       	adc	r25, r25
    164c:	61 f0       	breq	.+24     	; 0x1666 <__fp_splitA+0x20>
    164e:	9f 3f       	cpi	r25, 0xFF	; 255
    1650:	79 f0       	breq	.+30     	; 0x1670 <__fp_splitA+0x2a>
    1652:	87 95       	ror	r24
    1654:	08 95       	ret
    1656:	12 16       	cp	r1, r18
    1658:	13 06       	cpc	r1, r19
    165a:	14 06       	cpc	r1, r20
    165c:	55 1f       	adc	r21, r21
    165e:	f2 cf       	rjmp	.-28     	; 0x1644 <__fp_split3+0xe>
    1660:	46 95       	lsr	r20
    1662:	f1 df       	rcall	.-30     	; 0x1646 <__fp_splitA>
    1664:	08 c0       	rjmp	.+16     	; 0x1676 <__fp_splitA+0x30>
    1666:	16 16       	cp	r1, r22
    1668:	17 06       	cpc	r1, r23
    166a:	18 06       	cpc	r1, r24
    166c:	99 1f       	adc	r25, r25
    166e:	f1 cf       	rjmp	.-30     	; 0x1652 <__fp_splitA+0xc>
    1670:	86 95       	lsr	r24
    1672:	71 05       	cpc	r23, r1
    1674:	61 05       	cpc	r22, r1
    1676:	08 94       	sec
    1678:	08 95       	ret

0000167a <__fp_zero>:
    167a:	e8 94       	clt

0000167c <__fp_szero>:
    167c:	bb 27       	eor	r27, r27
    167e:	66 27       	eor	r22, r22
    1680:	77 27       	eor	r23, r23
    1682:	cb 01       	movw	r24, r22
    1684:	97 f9       	bld	r25, 7
    1686:	08 95       	ret

00001688 <__gesf2>:
    1688:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__fp_cmp>
    168c:	08 f4       	brcc	.+2      	; 0x1690 <__gesf2+0x8>
    168e:	8f ef       	ldi	r24, 0xFF	; 255
    1690:	08 95       	ret

00001692 <__mulsf3>:
    1692:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__mulsf3x>
    1696:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_round>
    169a:	0e 94 bf 0b 	call	0x177e	; 0x177e <__fp_pscA>
    169e:	38 f0       	brcs	.+14     	; 0x16ae <__mulsf3+0x1c>
    16a0:	0e 94 c6 0b 	call	0x178c	; 0x178c <__fp_pscB>
    16a4:	20 f0       	brcs	.+8      	; 0x16ae <__mulsf3+0x1c>
    16a6:	95 23       	and	r25, r21
    16a8:	11 f0       	breq	.+4      	; 0x16ae <__mulsf3+0x1c>
    16aa:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__fp_inf>
    16ae:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__fp_nan>
    16b2:	11 24       	eor	r1, r1
    16b4:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__fp_szero>

000016b8 <__mulsf3x>:
    16b8:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__fp_split3>
    16bc:	70 f3       	brcs	.-36     	; 0x169a <__mulsf3+0x8>

000016be <__mulsf3_pse>:
    16be:	95 9f       	mul	r25, r21
    16c0:	c1 f3       	breq	.-16     	; 0x16b2 <__mulsf3+0x20>
    16c2:	95 0f       	add	r25, r21
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	55 1f       	adc	r21, r21
    16c8:	62 9f       	mul	r22, r18
    16ca:	f0 01       	movw	r30, r0
    16cc:	72 9f       	mul	r23, r18
    16ce:	bb 27       	eor	r27, r27
    16d0:	f0 0d       	add	r31, r0
    16d2:	b1 1d       	adc	r27, r1
    16d4:	63 9f       	mul	r22, r19
    16d6:	aa 27       	eor	r26, r26
    16d8:	f0 0d       	add	r31, r0
    16da:	b1 1d       	adc	r27, r1
    16dc:	aa 1f       	adc	r26, r26
    16de:	64 9f       	mul	r22, r20
    16e0:	66 27       	eor	r22, r22
    16e2:	b0 0d       	add	r27, r0
    16e4:	a1 1d       	adc	r26, r1
    16e6:	66 1f       	adc	r22, r22
    16e8:	82 9f       	mul	r24, r18
    16ea:	22 27       	eor	r18, r18
    16ec:	b0 0d       	add	r27, r0
    16ee:	a1 1d       	adc	r26, r1
    16f0:	62 1f       	adc	r22, r18
    16f2:	73 9f       	mul	r23, r19
    16f4:	b0 0d       	add	r27, r0
    16f6:	a1 1d       	adc	r26, r1
    16f8:	62 1f       	adc	r22, r18
    16fa:	83 9f       	mul	r24, r19
    16fc:	a0 0d       	add	r26, r0
    16fe:	61 1d       	adc	r22, r1
    1700:	22 1f       	adc	r18, r18
    1702:	74 9f       	mul	r23, r20
    1704:	33 27       	eor	r19, r19
    1706:	a0 0d       	add	r26, r0
    1708:	61 1d       	adc	r22, r1
    170a:	23 1f       	adc	r18, r19
    170c:	84 9f       	mul	r24, r20
    170e:	60 0d       	add	r22, r0
    1710:	21 1d       	adc	r18, r1
    1712:	82 2f       	mov	r24, r18
    1714:	76 2f       	mov	r23, r22
    1716:	6a 2f       	mov	r22, r26
    1718:	11 24       	eor	r1, r1
    171a:	9f 57       	subi	r25, 0x7F	; 127
    171c:	50 40       	sbci	r21, 0x00	; 0
    171e:	9a f0       	brmi	.+38     	; 0x1746 <__mulsf3_pse+0x88>
    1720:	f1 f0       	breq	.+60     	; 0x175e <__mulsf3_pse+0xa0>
    1722:	88 23       	and	r24, r24
    1724:	4a f0       	brmi	.+18     	; 0x1738 <__mulsf3_pse+0x7a>
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	bb 1f       	adc	r27, r27
    172c:	66 1f       	adc	r22, r22
    172e:	77 1f       	adc	r23, r23
    1730:	88 1f       	adc	r24, r24
    1732:	91 50       	subi	r25, 0x01	; 1
    1734:	50 40       	sbci	r21, 0x00	; 0
    1736:	a9 f7       	brne	.-22     	; 0x1722 <__mulsf3_pse+0x64>
    1738:	9e 3f       	cpi	r25, 0xFE	; 254
    173a:	51 05       	cpc	r21, r1
    173c:	80 f0       	brcs	.+32     	; 0x175e <__mulsf3_pse+0xa0>
    173e:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__fp_inf>
    1742:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__fp_szero>
    1746:	5f 3f       	cpi	r21, 0xFF	; 255
    1748:	e4 f3       	brlt	.-8      	; 0x1742 <__mulsf3_pse+0x84>
    174a:	98 3e       	cpi	r25, 0xE8	; 232
    174c:	d4 f3       	brlt	.-12     	; 0x1742 <__mulsf3_pse+0x84>
    174e:	86 95       	lsr	r24
    1750:	77 95       	ror	r23
    1752:	67 95       	ror	r22
    1754:	b7 95       	ror	r27
    1756:	f7 95       	ror	r31
    1758:	e7 95       	ror	r30
    175a:	9f 5f       	subi	r25, 0xFF	; 255
    175c:	c1 f7       	brne	.-16     	; 0x174e <__mulsf3_pse+0x90>
    175e:	fe 2b       	or	r31, r30
    1760:	88 0f       	add	r24, r24
    1762:	91 1d       	adc	r25, r1
    1764:	96 95       	lsr	r25
    1766:	87 95       	ror	r24
    1768:	97 f9       	bld	r25, 7
    176a:	08 95       	ret

0000176c <__fp_inf>:
    176c:	97 f9       	bld	r25, 7
    176e:	9f 67       	ori	r25, 0x7F	; 127
    1770:	80 e8       	ldi	r24, 0x80	; 128
    1772:	70 e0       	ldi	r23, 0x00	; 0
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	08 95       	ret

00001778 <__fp_nan>:
    1778:	9f ef       	ldi	r25, 0xFF	; 255
    177a:	80 ec       	ldi	r24, 0xC0	; 192
    177c:	08 95       	ret

0000177e <__fp_pscA>:
    177e:	00 24       	eor	r0, r0
    1780:	0a 94       	dec	r0
    1782:	16 16       	cp	r1, r22
    1784:	17 06       	cpc	r1, r23
    1786:	18 06       	cpc	r1, r24
    1788:	09 06       	cpc	r0, r25
    178a:	08 95       	ret

0000178c <__fp_pscB>:
    178c:	00 24       	eor	r0, r0
    178e:	0a 94       	dec	r0
    1790:	12 16       	cp	r1, r18
    1792:	13 06       	cpc	r1, r19
    1794:	14 06       	cpc	r1, r20
    1796:	05 06       	cpc	r0, r21
    1798:	08 95       	ret

0000179a <__fp_round>:
    179a:	09 2e       	mov	r0, r25
    179c:	03 94       	inc	r0
    179e:	00 0c       	add	r0, r0
    17a0:	11 f4       	brne	.+4      	; 0x17a6 <__fp_round+0xc>
    17a2:	88 23       	and	r24, r24
    17a4:	52 f0       	brmi	.+20     	; 0x17ba <__fp_round+0x20>
    17a6:	bb 0f       	add	r27, r27
    17a8:	40 f4       	brcc	.+16     	; 0x17ba <__fp_round+0x20>
    17aa:	bf 2b       	or	r27, r31
    17ac:	11 f4       	brne	.+4      	; 0x17b2 <__fp_round+0x18>
    17ae:	60 ff       	sbrs	r22, 0
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <__fp_round+0x20>
    17b2:	6f 5f       	subi	r22, 0xFF	; 255
    17b4:	7f 4f       	sbci	r23, 0xFF	; 255
    17b6:	8f 4f       	sbci	r24, 0xFF	; 255
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	08 95       	ret

000017bc <DriverPowerInit>:
    17bc:	80 e2       	ldi	r24, 0x20	; 32
    17be:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    17c2:	08 95       	ret

000017c4 <DriverPowerVccAuxSet>:
    17c4:	81 11       	cpse	r24, r1
    17c6:	04 c0       	rjmp	.+8      	; 0x17d0 <DriverPowerVccAuxSet+0xc>
    17c8:	80 e2       	ldi	r24, 0x20	; 32
    17ca:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    17ce:	08 95       	ret
    17d0:	80 e2       	ldi	r24, 0x20	; 32
    17d2:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    17d6:	08 95       	ret

000017d8 <vfprintf>:
    17d8:	2f 92       	push	r2
    17da:	3f 92       	push	r3
    17dc:	4f 92       	push	r4
    17de:	5f 92       	push	r5
    17e0:	6f 92       	push	r6
    17e2:	7f 92       	push	r7
    17e4:	8f 92       	push	r8
    17e6:	9f 92       	push	r9
    17e8:	af 92       	push	r10
    17ea:	bf 92       	push	r11
    17ec:	cf 92       	push	r12
    17ee:	df 92       	push	r13
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	60 97       	sbiw	r28, 0x10	; 16
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	7c 01       	movw	r14, r24
    1808:	1b 01       	movw	r2, r22
    180a:	6a 01       	movw	r12, r20
    180c:	fc 01       	movw	r30, r24
    180e:	16 82       	std	Z+6, r1	; 0x06
    1810:	17 82       	std	Z+7, r1	; 0x07
    1812:	83 81       	ldd	r24, Z+3	; 0x03
    1814:	81 ff       	sbrs	r24, 1
    1816:	44 c3       	rjmp	.+1672   	; 0x1ea0 <vfprintf+0x6c8>
    1818:	9e 01       	movw	r18, r28
    181a:	2f 5f       	subi	r18, 0xFF	; 255
    181c:	3f 4f       	sbci	r19, 0xFF	; 255
    181e:	39 01       	movw	r6, r18
    1820:	f7 01       	movw	r30, r14
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	f1 01       	movw	r30, r2
    1826:	93 fd       	sbrc	r25, 3
    1828:	85 91       	lpm	r24, Z+
    182a:	93 ff       	sbrs	r25, 3
    182c:	81 91       	ld	r24, Z+
    182e:	1f 01       	movw	r2, r30
    1830:	88 23       	and	r24, r24
    1832:	09 f4       	brne	.+2      	; 0x1836 <vfprintf+0x5e>
    1834:	31 c3       	rjmp	.+1634   	; 0x1e98 <vfprintf+0x6c0>
    1836:	85 32       	cpi	r24, 0x25	; 37
    1838:	39 f4       	brne	.+14     	; 0x1848 <vfprintf+0x70>
    183a:	93 fd       	sbrc	r25, 3
    183c:	85 91       	lpm	r24, Z+
    183e:	93 ff       	sbrs	r25, 3
    1840:	81 91       	ld	r24, Z+
    1842:	1f 01       	movw	r2, r30
    1844:	85 32       	cpi	r24, 0x25	; 37
    1846:	39 f4       	brne	.+14     	; 0x1856 <vfprintf+0x7e>
    1848:	b7 01       	movw	r22, r14
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1850:	56 01       	movw	r10, r12
    1852:	65 01       	movw	r12, r10
    1854:	e5 cf       	rjmp	.-54     	; 0x1820 <vfprintf+0x48>
    1856:	10 e0       	ldi	r17, 0x00	; 0
    1858:	51 2c       	mov	r5, r1
    185a:	91 2c       	mov	r9, r1
    185c:	ff e1       	ldi	r31, 0x1F	; 31
    185e:	f9 15       	cp	r31, r9
    1860:	d8 f0       	brcs	.+54     	; 0x1898 <vfprintf+0xc0>
    1862:	8b 32       	cpi	r24, 0x2B	; 43
    1864:	79 f0       	breq	.+30     	; 0x1884 <vfprintf+0xac>
    1866:	38 f4       	brcc	.+14     	; 0x1876 <vfprintf+0x9e>
    1868:	80 32       	cpi	r24, 0x20	; 32
    186a:	79 f0       	breq	.+30     	; 0x188a <vfprintf+0xb2>
    186c:	83 32       	cpi	r24, 0x23	; 35
    186e:	a1 f4       	brne	.+40     	; 0x1898 <vfprintf+0xc0>
    1870:	f9 2d       	mov	r31, r9
    1872:	f0 61       	ori	r31, 0x10	; 16
    1874:	2e c0       	rjmp	.+92     	; 0x18d2 <vfprintf+0xfa>
    1876:	8d 32       	cpi	r24, 0x2D	; 45
    1878:	61 f0       	breq	.+24     	; 0x1892 <vfprintf+0xba>
    187a:	80 33       	cpi	r24, 0x30	; 48
    187c:	69 f4       	brne	.+26     	; 0x1898 <vfprintf+0xc0>
    187e:	29 2d       	mov	r18, r9
    1880:	21 60       	ori	r18, 0x01	; 1
    1882:	2d c0       	rjmp	.+90     	; 0x18de <vfprintf+0x106>
    1884:	39 2d       	mov	r19, r9
    1886:	32 60       	ori	r19, 0x02	; 2
    1888:	93 2e       	mov	r9, r19
    188a:	89 2d       	mov	r24, r9
    188c:	84 60       	ori	r24, 0x04	; 4
    188e:	98 2e       	mov	r9, r24
    1890:	2a c0       	rjmp	.+84     	; 0x18e6 <vfprintf+0x10e>
    1892:	e9 2d       	mov	r30, r9
    1894:	e8 60       	ori	r30, 0x08	; 8
    1896:	15 c0       	rjmp	.+42     	; 0x18c2 <vfprintf+0xea>
    1898:	97 fc       	sbrc	r9, 7
    189a:	2d c0       	rjmp	.+90     	; 0x18f6 <vfprintf+0x11e>
    189c:	20 ed       	ldi	r18, 0xD0	; 208
    189e:	28 0f       	add	r18, r24
    18a0:	2a 30       	cpi	r18, 0x0A	; 10
    18a2:	88 f4       	brcc	.+34     	; 0x18c6 <vfprintf+0xee>
    18a4:	96 fe       	sbrs	r9, 6
    18a6:	06 c0       	rjmp	.+12     	; 0x18b4 <vfprintf+0xdc>
    18a8:	3a e0       	ldi	r19, 0x0A	; 10
    18aa:	13 9f       	mul	r17, r19
    18ac:	20 0d       	add	r18, r0
    18ae:	11 24       	eor	r1, r1
    18b0:	12 2f       	mov	r17, r18
    18b2:	19 c0       	rjmp	.+50     	; 0x18e6 <vfprintf+0x10e>
    18b4:	8a e0       	ldi	r24, 0x0A	; 10
    18b6:	58 9e       	mul	r5, r24
    18b8:	20 0d       	add	r18, r0
    18ba:	11 24       	eor	r1, r1
    18bc:	52 2e       	mov	r5, r18
    18be:	e9 2d       	mov	r30, r9
    18c0:	e0 62       	ori	r30, 0x20	; 32
    18c2:	9e 2e       	mov	r9, r30
    18c4:	10 c0       	rjmp	.+32     	; 0x18e6 <vfprintf+0x10e>
    18c6:	8e 32       	cpi	r24, 0x2E	; 46
    18c8:	31 f4       	brne	.+12     	; 0x18d6 <vfprintf+0xfe>
    18ca:	96 fc       	sbrc	r9, 6
    18cc:	e5 c2       	rjmp	.+1482   	; 0x1e98 <vfprintf+0x6c0>
    18ce:	f9 2d       	mov	r31, r9
    18d0:	f0 64       	ori	r31, 0x40	; 64
    18d2:	9f 2e       	mov	r9, r31
    18d4:	08 c0       	rjmp	.+16     	; 0x18e6 <vfprintf+0x10e>
    18d6:	8c 36       	cpi	r24, 0x6C	; 108
    18d8:	21 f4       	brne	.+8      	; 0x18e2 <vfprintf+0x10a>
    18da:	29 2d       	mov	r18, r9
    18dc:	20 68       	ori	r18, 0x80	; 128
    18de:	92 2e       	mov	r9, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <vfprintf+0x10e>
    18e2:	88 36       	cpi	r24, 0x68	; 104
    18e4:	41 f4       	brne	.+16     	; 0x18f6 <vfprintf+0x11e>
    18e6:	f1 01       	movw	r30, r2
    18e8:	93 fd       	sbrc	r25, 3
    18ea:	85 91       	lpm	r24, Z+
    18ec:	93 ff       	sbrs	r25, 3
    18ee:	81 91       	ld	r24, Z+
    18f0:	1f 01       	movw	r2, r30
    18f2:	81 11       	cpse	r24, r1
    18f4:	b3 cf       	rjmp	.-154    	; 0x185c <vfprintf+0x84>
    18f6:	9b eb       	ldi	r25, 0xBB	; 187
    18f8:	98 0f       	add	r25, r24
    18fa:	93 30       	cpi	r25, 0x03	; 3
    18fc:	20 f4       	brcc	.+8      	; 0x1906 <vfprintf+0x12e>
    18fe:	99 2d       	mov	r25, r9
    1900:	90 61       	ori	r25, 0x10	; 16
    1902:	80 5e       	subi	r24, 0xE0	; 224
    1904:	07 c0       	rjmp	.+14     	; 0x1914 <vfprintf+0x13c>
    1906:	9b e9       	ldi	r25, 0x9B	; 155
    1908:	98 0f       	add	r25, r24
    190a:	93 30       	cpi	r25, 0x03	; 3
    190c:	08 f0       	brcs	.+2      	; 0x1910 <vfprintf+0x138>
    190e:	66 c1       	rjmp	.+716    	; 0x1bdc <vfprintf+0x404>
    1910:	99 2d       	mov	r25, r9
    1912:	9f 7e       	andi	r25, 0xEF	; 239
    1914:	96 ff       	sbrs	r25, 6
    1916:	16 e0       	ldi	r17, 0x06	; 6
    1918:	9f 73       	andi	r25, 0x3F	; 63
    191a:	99 2e       	mov	r9, r25
    191c:	85 36       	cpi	r24, 0x65	; 101
    191e:	19 f4       	brne	.+6      	; 0x1926 <vfprintf+0x14e>
    1920:	90 64       	ori	r25, 0x40	; 64
    1922:	99 2e       	mov	r9, r25
    1924:	08 c0       	rjmp	.+16     	; 0x1936 <vfprintf+0x15e>
    1926:	86 36       	cpi	r24, 0x66	; 102
    1928:	21 f4       	brne	.+8      	; 0x1932 <vfprintf+0x15a>
    192a:	39 2f       	mov	r19, r25
    192c:	30 68       	ori	r19, 0x80	; 128
    192e:	93 2e       	mov	r9, r19
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <vfprintf+0x15e>
    1932:	11 11       	cpse	r17, r1
    1934:	11 50       	subi	r17, 0x01	; 1
    1936:	97 fe       	sbrs	r9, 7
    1938:	07 c0       	rjmp	.+14     	; 0x1948 <vfprintf+0x170>
    193a:	1c 33       	cpi	r17, 0x3C	; 60
    193c:	50 f4       	brcc	.+20     	; 0x1952 <vfprintf+0x17a>
    193e:	44 24       	eor	r4, r4
    1940:	43 94       	inc	r4
    1942:	41 0e       	add	r4, r17
    1944:	27 e0       	ldi	r18, 0x07	; 7
    1946:	0b c0       	rjmp	.+22     	; 0x195e <vfprintf+0x186>
    1948:	18 30       	cpi	r17, 0x08	; 8
    194a:	38 f0       	brcs	.+14     	; 0x195a <vfprintf+0x182>
    194c:	27 e0       	ldi	r18, 0x07	; 7
    194e:	17 e0       	ldi	r17, 0x07	; 7
    1950:	05 c0       	rjmp	.+10     	; 0x195c <vfprintf+0x184>
    1952:	27 e0       	ldi	r18, 0x07	; 7
    1954:	9c e3       	ldi	r25, 0x3C	; 60
    1956:	49 2e       	mov	r4, r25
    1958:	02 c0       	rjmp	.+4      	; 0x195e <vfprintf+0x186>
    195a:	21 2f       	mov	r18, r17
    195c:	41 2c       	mov	r4, r1
    195e:	56 01       	movw	r10, r12
    1960:	84 e0       	ldi	r24, 0x04	; 4
    1962:	a8 0e       	add	r10, r24
    1964:	b1 1c       	adc	r11, r1
    1966:	f6 01       	movw	r30, r12
    1968:	60 81       	ld	r22, Z
    196a:	71 81       	ldd	r23, Z+1	; 0x01
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	93 81       	ldd	r25, Z+3	; 0x03
    1970:	04 2d       	mov	r16, r4
    1972:	a3 01       	movw	r20, r6
    1974:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__ftoa_engine>
    1978:	6c 01       	movw	r12, r24
    197a:	f9 81       	ldd	r31, Y+1	; 0x01
    197c:	fc 87       	std	Y+12, r31	; 0x0c
    197e:	f0 ff       	sbrs	r31, 0
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <vfprintf+0x1ae>
    1982:	f3 ff       	sbrs	r31, 3
    1984:	06 c0       	rjmp	.+12     	; 0x1992 <vfprintf+0x1ba>
    1986:	91 fc       	sbrc	r9, 1
    1988:	06 c0       	rjmp	.+12     	; 0x1996 <vfprintf+0x1be>
    198a:	92 fe       	sbrs	r9, 2
    198c:	06 c0       	rjmp	.+12     	; 0x199a <vfprintf+0x1c2>
    198e:	00 e2       	ldi	r16, 0x20	; 32
    1990:	05 c0       	rjmp	.+10     	; 0x199c <vfprintf+0x1c4>
    1992:	0d e2       	ldi	r16, 0x2D	; 45
    1994:	03 c0       	rjmp	.+6      	; 0x199c <vfprintf+0x1c4>
    1996:	0b e2       	ldi	r16, 0x2B	; 43
    1998:	01 c0       	rjmp	.+2      	; 0x199c <vfprintf+0x1c4>
    199a:	00 e0       	ldi	r16, 0x00	; 0
    199c:	8c 85       	ldd	r24, Y+12	; 0x0c
    199e:	8c 70       	andi	r24, 0x0C	; 12
    19a0:	19 f0       	breq	.+6      	; 0x19a8 <vfprintf+0x1d0>
    19a2:	01 11       	cpse	r16, r1
    19a4:	5a c2       	rjmp	.+1204   	; 0x1e5a <vfprintf+0x682>
    19a6:	9b c2       	rjmp	.+1334   	; 0x1ede <vfprintf+0x706>
    19a8:	97 fe       	sbrs	r9, 7
    19aa:	10 c0       	rjmp	.+32     	; 0x19cc <vfprintf+0x1f4>
    19ac:	4c 0c       	add	r4, r12
    19ae:	fc 85       	ldd	r31, Y+12	; 0x0c
    19b0:	f4 ff       	sbrs	r31, 4
    19b2:	04 c0       	rjmp	.+8      	; 0x19bc <vfprintf+0x1e4>
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	81 33       	cpi	r24, 0x31	; 49
    19b8:	09 f4       	brne	.+2      	; 0x19bc <vfprintf+0x1e4>
    19ba:	4a 94       	dec	r4
    19bc:	14 14       	cp	r1, r4
    19be:	74 f5       	brge	.+92     	; 0x1a1c <vfprintf+0x244>
    19c0:	28 e0       	ldi	r18, 0x08	; 8
    19c2:	24 15       	cp	r18, r4
    19c4:	78 f5       	brcc	.+94     	; 0x1a24 <vfprintf+0x24c>
    19c6:	88 e0       	ldi	r24, 0x08	; 8
    19c8:	48 2e       	mov	r4, r24
    19ca:	2c c0       	rjmp	.+88     	; 0x1a24 <vfprintf+0x24c>
    19cc:	96 fc       	sbrc	r9, 6
    19ce:	2a c0       	rjmp	.+84     	; 0x1a24 <vfprintf+0x24c>
    19d0:	81 2f       	mov	r24, r17
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	8c 15       	cp	r24, r12
    19d6:	9d 05       	cpc	r25, r13
    19d8:	9c f0       	brlt	.+38     	; 0x1a00 <vfprintf+0x228>
    19da:	3c ef       	ldi	r19, 0xFC	; 252
    19dc:	c3 16       	cp	r12, r19
    19de:	3f ef       	ldi	r19, 0xFF	; 255
    19e0:	d3 06       	cpc	r13, r19
    19e2:	74 f0       	brlt	.+28     	; 0x1a00 <vfprintf+0x228>
    19e4:	89 2d       	mov	r24, r9
    19e6:	80 68       	ori	r24, 0x80	; 128
    19e8:	98 2e       	mov	r9, r24
    19ea:	0a c0       	rjmp	.+20     	; 0x1a00 <vfprintf+0x228>
    19ec:	e2 e0       	ldi	r30, 0x02	; 2
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	ec 0f       	add	r30, r28
    19f2:	fd 1f       	adc	r31, r29
    19f4:	e1 0f       	add	r30, r17
    19f6:	f1 1d       	adc	r31, r1
    19f8:	80 81       	ld	r24, Z
    19fa:	80 33       	cpi	r24, 0x30	; 48
    19fc:	19 f4       	brne	.+6      	; 0x1a04 <vfprintf+0x22c>
    19fe:	11 50       	subi	r17, 0x01	; 1
    1a00:	11 11       	cpse	r17, r1
    1a02:	f4 cf       	rjmp	.-24     	; 0x19ec <vfprintf+0x214>
    1a04:	97 fe       	sbrs	r9, 7
    1a06:	0e c0       	rjmp	.+28     	; 0x1a24 <vfprintf+0x24c>
    1a08:	44 24       	eor	r4, r4
    1a0a:	43 94       	inc	r4
    1a0c:	41 0e       	add	r4, r17
    1a0e:	81 2f       	mov	r24, r17
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	c8 16       	cp	r12, r24
    1a14:	d9 06       	cpc	r13, r25
    1a16:	2c f4       	brge	.+10     	; 0x1a22 <vfprintf+0x24a>
    1a18:	1c 19       	sub	r17, r12
    1a1a:	04 c0       	rjmp	.+8      	; 0x1a24 <vfprintf+0x24c>
    1a1c:	44 24       	eor	r4, r4
    1a1e:	43 94       	inc	r4
    1a20:	01 c0       	rjmp	.+2      	; 0x1a24 <vfprintf+0x24c>
    1a22:	10 e0       	ldi	r17, 0x00	; 0
    1a24:	97 fe       	sbrs	r9, 7
    1a26:	06 c0       	rjmp	.+12     	; 0x1a34 <vfprintf+0x25c>
    1a28:	1c 14       	cp	r1, r12
    1a2a:	1d 04       	cpc	r1, r13
    1a2c:	34 f4       	brge	.+12     	; 0x1a3a <vfprintf+0x262>
    1a2e:	c6 01       	movw	r24, r12
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	05 c0       	rjmp	.+10     	; 0x1a3e <vfprintf+0x266>
    1a34:	85 e0       	ldi	r24, 0x05	; 5
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <vfprintf+0x266>
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	01 11       	cpse	r16, r1
    1a40:	01 96       	adiw	r24, 0x01	; 1
    1a42:	11 23       	and	r17, r17
    1a44:	31 f0       	breq	.+12     	; 0x1a52 <vfprintf+0x27a>
    1a46:	21 2f       	mov	r18, r17
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	2f 5f       	subi	r18, 0xFF	; 255
    1a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4e:	82 0f       	add	r24, r18
    1a50:	93 1f       	adc	r25, r19
    1a52:	25 2d       	mov	r18, r5
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	82 17       	cp	r24, r18
    1a58:	93 07       	cpc	r25, r19
    1a5a:	14 f4       	brge	.+4      	; 0x1a60 <vfprintf+0x288>
    1a5c:	58 1a       	sub	r5, r24
    1a5e:	01 c0       	rjmp	.+2      	; 0x1a62 <vfprintf+0x28a>
    1a60:	51 2c       	mov	r5, r1
    1a62:	89 2d       	mov	r24, r9
    1a64:	89 70       	andi	r24, 0x09	; 9
    1a66:	49 f4       	brne	.+18     	; 0x1a7a <vfprintf+0x2a2>
    1a68:	55 20       	and	r5, r5
    1a6a:	39 f0       	breq	.+14     	; 0x1a7a <vfprintf+0x2a2>
    1a6c:	b7 01       	movw	r22, r14
    1a6e:	80 e2       	ldi	r24, 0x20	; 32
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1a76:	5a 94       	dec	r5
    1a78:	f7 cf       	rjmp	.-18     	; 0x1a68 <vfprintf+0x290>
    1a7a:	00 23       	and	r16, r16
    1a7c:	29 f0       	breq	.+10     	; 0x1a88 <vfprintf+0x2b0>
    1a7e:	b7 01       	movw	r22, r14
    1a80:	80 2f       	mov	r24, r16
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1a88:	93 fc       	sbrc	r9, 3
    1a8a:	09 c0       	rjmp	.+18     	; 0x1a9e <vfprintf+0x2c6>
    1a8c:	55 20       	and	r5, r5
    1a8e:	39 f0       	breq	.+14     	; 0x1a9e <vfprintf+0x2c6>
    1a90:	b7 01       	movw	r22, r14
    1a92:	80 e3       	ldi	r24, 0x30	; 48
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1a9a:	5a 94       	dec	r5
    1a9c:	f7 cf       	rjmp	.-18     	; 0x1a8c <vfprintf+0x2b4>
    1a9e:	97 fe       	sbrs	r9, 7
    1aa0:	4c c0       	rjmp	.+152    	; 0x1b3a <vfprintf+0x362>
    1aa2:	46 01       	movw	r8, r12
    1aa4:	d7 fe       	sbrs	r13, 7
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <vfprintf+0x2d4>
    1aa8:	81 2c       	mov	r8, r1
    1aaa:	91 2c       	mov	r9, r1
    1aac:	c6 01       	movw	r24, r12
    1aae:	88 19       	sub	r24, r8
    1ab0:	99 09       	sbc	r25, r9
    1ab2:	f3 01       	movw	r30, r6
    1ab4:	e8 0f       	add	r30, r24
    1ab6:	f9 1f       	adc	r31, r25
    1ab8:	ed 87       	std	Y+13, r30	; 0x0d
    1aba:	fe 87       	std	Y+14, r31	; 0x0e
    1abc:	96 01       	movw	r18, r12
    1abe:	24 19       	sub	r18, r4
    1ac0:	31 09       	sbc	r19, r1
    1ac2:	2f 87       	std	Y+15, r18	; 0x0f
    1ac4:	38 8b       	std	Y+16, r19	; 0x10
    1ac6:	01 2f       	mov	r16, r17
    1ac8:	10 e0       	ldi	r17, 0x00	; 0
    1aca:	11 95       	neg	r17
    1acc:	01 95       	neg	r16
    1ace:	11 09       	sbc	r17, r1
    1ad0:	3f ef       	ldi	r19, 0xFF	; 255
    1ad2:	83 16       	cp	r8, r19
    1ad4:	93 06       	cpc	r9, r19
    1ad6:	29 f4       	brne	.+10     	; 0x1ae2 <vfprintf+0x30a>
    1ad8:	b7 01       	movw	r22, r14
    1ada:	8e e2       	ldi	r24, 0x2E	; 46
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1ae2:	c8 14       	cp	r12, r8
    1ae4:	d9 04       	cpc	r13, r9
    1ae6:	4c f0       	brlt	.+18     	; 0x1afa <vfprintf+0x322>
    1ae8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aea:	98 89       	ldd	r25, Y+16	; 0x10
    1aec:	88 15       	cp	r24, r8
    1aee:	99 05       	cpc	r25, r9
    1af0:	24 f4       	brge	.+8      	; 0x1afa <vfprintf+0x322>
    1af2:	ed 85       	ldd	r30, Y+13	; 0x0d
    1af4:	fe 85       	ldd	r31, Y+14	; 0x0e
    1af6:	81 81       	ldd	r24, Z+1	; 0x01
    1af8:	01 c0       	rjmp	.+2      	; 0x1afc <vfprintf+0x324>
    1afa:	80 e3       	ldi	r24, 0x30	; 48
    1afc:	f1 e0       	ldi	r31, 0x01	; 1
    1afe:	8f 1a       	sub	r8, r31
    1b00:	91 08       	sbc	r9, r1
    1b02:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b04:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b06:	2f 5f       	subi	r18, 0xFF	; 255
    1b08:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0a:	2d 87       	std	Y+13, r18	; 0x0d
    1b0c:	3e 87       	std	Y+14, r19	; 0x0e
    1b0e:	80 16       	cp	r8, r16
    1b10:	91 06       	cpc	r9, r17
    1b12:	2c f0       	brlt	.+10     	; 0x1b1e <vfprintf+0x346>
    1b14:	b7 01       	movw	r22, r14
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1b1c:	d9 cf       	rjmp	.-78     	; 0x1ad0 <vfprintf+0x2f8>
    1b1e:	c8 14       	cp	r12, r8
    1b20:	d9 04       	cpc	r13, r9
    1b22:	41 f4       	brne	.+16     	; 0x1b34 <vfprintf+0x35c>
    1b24:	9a 81       	ldd	r25, Y+2	; 0x02
    1b26:	96 33       	cpi	r25, 0x36	; 54
    1b28:	20 f4       	brcc	.+8      	; 0x1b32 <vfprintf+0x35a>
    1b2a:	95 33       	cpi	r25, 0x35	; 53
    1b2c:	19 f4       	brne	.+6      	; 0x1b34 <vfprintf+0x35c>
    1b2e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b30:	34 ff       	sbrs	r19, 4
    1b32:	81 e3       	ldi	r24, 0x31	; 49
    1b34:	b7 01       	movw	r22, r14
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	4e c0       	rjmp	.+156    	; 0x1bd6 <vfprintf+0x3fe>
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	81 33       	cpi	r24, 0x31	; 49
    1b3e:	19 f0       	breq	.+6      	; 0x1b46 <vfprintf+0x36e>
    1b40:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b42:	9f 7e       	andi	r25, 0xEF	; 239
    1b44:	9c 87       	std	Y+12, r25	; 0x0c
    1b46:	b7 01       	movw	r22, r14
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1b4e:	11 11       	cpse	r17, r1
    1b50:	05 c0       	rjmp	.+10     	; 0x1b5c <vfprintf+0x384>
    1b52:	94 fc       	sbrc	r9, 4
    1b54:	18 c0       	rjmp	.+48     	; 0x1b86 <vfprintf+0x3ae>
    1b56:	85 e6       	ldi	r24, 0x65	; 101
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	17 c0       	rjmp	.+46     	; 0x1b8a <vfprintf+0x3b2>
    1b5c:	b7 01       	movw	r22, r14
    1b5e:	8e e2       	ldi	r24, 0x2E	; 46
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1b66:	1e 5f       	subi	r17, 0xFE	; 254
    1b68:	82 e0       	ldi	r24, 0x02	; 2
    1b6a:	01 e0       	ldi	r16, 0x01	; 1
    1b6c:	08 0f       	add	r16, r24
    1b6e:	f3 01       	movw	r30, r6
    1b70:	e8 0f       	add	r30, r24
    1b72:	f1 1d       	adc	r31, r1
    1b74:	80 81       	ld	r24, Z
    1b76:	b7 01       	movw	r22, r14
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1b7e:	80 2f       	mov	r24, r16
    1b80:	01 13       	cpse	r16, r17
    1b82:	f3 cf       	rjmp	.-26     	; 0x1b6a <vfprintf+0x392>
    1b84:	e6 cf       	rjmp	.-52     	; 0x1b52 <vfprintf+0x37a>
    1b86:	85 e4       	ldi	r24, 0x45	; 69
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	b7 01       	movw	r22, r14
    1b8c:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1b90:	d7 fc       	sbrc	r13, 7
    1b92:	06 c0       	rjmp	.+12     	; 0x1ba0 <vfprintf+0x3c8>
    1b94:	c1 14       	cp	r12, r1
    1b96:	d1 04       	cpc	r13, r1
    1b98:	41 f4       	brne	.+16     	; 0x1baa <vfprintf+0x3d2>
    1b9a:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b9c:	e4 ff       	sbrs	r30, 4
    1b9e:	05 c0       	rjmp	.+10     	; 0x1baa <vfprintf+0x3d2>
    1ba0:	d1 94       	neg	r13
    1ba2:	c1 94       	neg	r12
    1ba4:	d1 08       	sbc	r13, r1
    1ba6:	8d e2       	ldi	r24, 0x2D	; 45
    1ba8:	01 c0       	rjmp	.+2      	; 0x1bac <vfprintf+0x3d4>
    1baa:	8b e2       	ldi	r24, 0x2B	; 43
    1bac:	b7 01       	movw	r22, r14
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1bb4:	80 e3       	ldi	r24, 0x30	; 48
    1bb6:	2a e0       	ldi	r18, 0x0A	; 10
    1bb8:	c2 16       	cp	r12, r18
    1bba:	d1 04       	cpc	r13, r1
    1bbc:	2c f0       	brlt	.+10     	; 0x1bc8 <vfprintf+0x3f0>
    1bbe:	8f 5f       	subi	r24, 0xFF	; 255
    1bc0:	fa e0       	ldi	r31, 0x0A	; 10
    1bc2:	cf 1a       	sub	r12, r31
    1bc4:	d1 08       	sbc	r13, r1
    1bc6:	f7 cf       	rjmp	.-18     	; 0x1bb6 <vfprintf+0x3de>
    1bc8:	b7 01       	movw	r22, r14
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1bd0:	b7 01       	movw	r22, r14
    1bd2:	c6 01       	movw	r24, r12
    1bd4:	c0 96       	adiw	r24, 0x30	; 48
    1bd6:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1bda:	54 c1       	rjmp	.+680    	; 0x1e84 <vfprintf+0x6ac>
    1bdc:	83 36       	cpi	r24, 0x63	; 99
    1bde:	31 f0       	breq	.+12     	; 0x1bec <vfprintf+0x414>
    1be0:	83 37       	cpi	r24, 0x73	; 115
    1be2:	79 f0       	breq	.+30     	; 0x1c02 <vfprintf+0x42a>
    1be4:	83 35       	cpi	r24, 0x53	; 83
    1be6:	09 f0       	breq	.+2      	; 0x1bea <vfprintf+0x412>
    1be8:	56 c0       	rjmp	.+172    	; 0x1c96 <vfprintf+0x4be>
    1bea:	20 c0       	rjmp	.+64     	; 0x1c2c <vfprintf+0x454>
    1bec:	56 01       	movw	r10, r12
    1bee:	32 e0       	ldi	r19, 0x02	; 2
    1bf0:	a3 0e       	add	r10, r19
    1bf2:	b1 1c       	adc	r11, r1
    1bf4:	f6 01       	movw	r30, r12
    1bf6:	80 81       	ld	r24, Z
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	01 e0       	ldi	r16, 0x01	; 1
    1bfc:	10 e0       	ldi	r17, 0x00	; 0
    1bfe:	63 01       	movw	r12, r6
    1c00:	12 c0       	rjmp	.+36     	; 0x1c26 <vfprintf+0x44e>
    1c02:	56 01       	movw	r10, r12
    1c04:	f2 e0       	ldi	r31, 0x02	; 2
    1c06:	af 0e       	add	r10, r31
    1c08:	b1 1c       	adc	r11, r1
    1c0a:	f6 01       	movw	r30, r12
    1c0c:	c0 80       	ld	r12, Z
    1c0e:	d1 80       	ldd	r13, Z+1	; 0x01
    1c10:	96 fe       	sbrs	r9, 6
    1c12:	03 c0       	rjmp	.+6      	; 0x1c1a <vfprintf+0x442>
    1c14:	61 2f       	mov	r22, r17
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <vfprintf+0x446>
    1c1a:	6f ef       	ldi	r22, 0xFF	; 255
    1c1c:	7f ef       	ldi	r23, 0xFF	; 255
    1c1e:	c6 01       	movw	r24, r12
    1c20:	0e 94 6f 10 	call	0x20de	; 0x20de <strnlen>
    1c24:	8c 01       	movw	r16, r24
    1c26:	f9 2d       	mov	r31, r9
    1c28:	ff 77       	andi	r31, 0x7F	; 127
    1c2a:	14 c0       	rjmp	.+40     	; 0x1c54 <vfprintf+0x47c>
    1c2c:	56 01       	movw	r10, r12
    1c2e:	22 e0       	ldi	r18, 0x02	; 2
    1c30:	a2 0e       	add	r10, r18
    1c32:	b1 1c       	adc	r11, r1
    1c34:	f6 01       	movw	r30, r12
    1c36:	c0 80       	ld	r12, Z
    1c38:	d1 80       	ldd	r13, Z+1	; 0x01
    1c3a:	96 fe       	sbrs	r9, 6
    1c3c:	03 c0       	rjmp	.+6      	; 0x1c44 <vfprintf+0x46c>
    1c3e:	61 2f       	mov	r22, r17
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <vfprintf+0x470>
    1c44:	6f ef       	ldi	r22, 0xFF	; 255
    1c46:	7f ef       	ldi	r23, 0xFF	; 255
    1c48:	c6 01       	movw	r24, r12
    1c4a:	0e 94 64 10 	call	0x20c8	; 0x20c8 <strnlen_P>
    1c4e:	8c 01       	movw	r16, r24
    1c50:	f9 2d       	mov	r31, r9
    1c52:	f0 68       	ori	r31, 0x80	; 128
    1c54:	9f 2e       	mov	r9, r31
    1c56:	f3 fd       	sbrc	r31, 3
    1c58:	1a c0       	rjmp	.+52     	; 0x1c8e <vfprintf+0x4b6>
    1c5a:	85 2d       	mov	r24, r5
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	08 17       	cp	r16, r24
    1c60:	19 07       	cpc	r17, r25
    1c62:	a8 f4       	brcc	.+42     	; 0x1c8e <vfprintf+0x4b6>
    1c64:	b7 01       	movw	r22, r14
    1c66:	80 e2       	ldi	r24, 0x20	; 32
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1c6e:	5a 94       	dec	r5
    1c70:	f4 cf       	rjmp	.-24     	; 0x1c5a <vfprintf+0x482>
    1c72:	f6 01       	movw	r30, r12
    1c74:	97 fc       	sbrc	r9, 7
    1c76:	85 91       	lpm	r24, Z+
    1c78:	97 fe       	sbrs	r9, 7
    1c7a:	81 91       	ld	r24, Z+
    1c7c:	6f 01       	movw	r12, r30
    1c7e:	b7 01       	movw	r22, r14
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1c86:	51 10       	cpse	r5, r1
    1c88:	5a 94       	dec	r5
    1c8a:	01 50       	subi	r16, 0x01	; 1
    1c8c:	11 09       	sbc	r17, r1
    1c8e:	01 15       	cp	r16, r1
    1c90:	11 05       	cpc	r17, r1
    1c92:	79 f7       	brne	.-34     	; 0x1c72 <vfprintf+0x49a>
    1c94:	f7 c0       	rjmp	.+494    	; 0x1e84 <vfprintf+0x6ac>
    1c96:	84 36       	cpi	r24, 0x64	; 100
    1c98:	11 f0       	breq	.+4      	; 0x1c9e <vfprintf+0x4c6>
    1c9a:	89 36       	cpi	r24, 0x69	; 105
    1c9c:	61 f5       	brne	.+88     	; 0x1cf6 <vfprintf+0x51e>
    1c9e:	56 01       	movw	r10, r12
    1ca0:	97 fe       	sbrs	r9, 7
    1ca2:	09 c0       	rjmp	.+18     	; 0x1cb6 <vfprintf+0x4de>
    1ca4:	24 e0       	ldi	r18, 0x04	; 4
    1ca6:	a2 0e       	add	r10, r18
    1ca8:	b1 1c       	adc	r11, r1
    1caa:	f6 01       	movw	r30, r12
    1cac:	60 81       	ld	r22, Z
    1cae:	71 81       	ldd	r23, Z+1	; 0x01
    1cb0:	82 81       	ldd	r24, Z+2	; 0x02
    1cb2:	93 81       	ldd	r25, Z+3	; 0x03
    1cb4:	0a c0       	rjmp	.+20     	; 0x1cca <vfprintf+0x4f2>
    1cb6:	f2 e0       	ldi	r31, 0x02	; 2
    1cb8:	af 0e       	add	r10, r31
    1cba:	b1 1c       	adc	r11, r1
    1cbc:	f6 01       	movw	r30, r12
    1cbe:	60 81       	ld	r22, Z
    1cc0:	71 81       	ldd	r23, Z+1	; 0x01
    1cc2:	07 2e       	mov	r0, r23
    1cc4:	00 0c       	add	r0, r0
    1cc6:	88 0b       	sbc	r24, r24
    1cc8:	99 0b       	sbc	r25, r25
    1cca:	f9 2d       	mov	r31, r9
    1ccc:	ff 76       	andi	r31, 0x6F	; 111
    1cce:	9f 2e       	mov	r9, r31
    1cd0:	97 ff       	sbrs	r25, 7
    1cd2:	09 c0       	rjmp	.+18     	; 0x1ce6 <vfprintf+0x50e>
    1cd4:	90 95       	com	r25
    1cd6:	80 95       	com	r24
    1cd8:	70 95       	com	r23
    1cda:	61 95       	neg	r22
    1cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cde:	8f 4f       	sbci	r24, 0xFF	; 255
    1ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce2:	f0 68       	ori	r31, 0x80	; 128
    1ce4:	9f 2e       	mov	r9, r31
    1ce6:	2a e0       	ldi	r18, 0x0A	; 10
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	a3 01       	movw	r20, r6
    1cec:	0e 94 ca 10 	call	0x2194	; 0x2194 <__ultoa_invert>
    1cf0:	c8 2e       	mov	r12, r24
    1cf2:	c6 18       	sub	r12, r6
    1cf4:	3f c0       	rjmp	.+126    	; 0x1d74 <vfprintf+0x59c>
    1cf6:	09 2d       	mov	r16, r9
    1cf8:	85 37       	cpi	r24, 0x75	; 117
    1cfa:	21 f4       	brne	.+8      	; 0x1d04 <vfprintf+0x52c>
    1cfc:	0f 7e       	andi	r16, 0xEF	; 239
    1cfe:	2a e0       	ldi	r18, 0x0A	; 10
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	1d c0       	rjmp	.+58     	; 0x1d3e <vfprintf+0x566>
    1d04:	09 7f       	andi	r16, 0xF9	; 249
    1d06:	8f 36       	cpi	r24, 0x6F	; 111
    1d08:	91 f0       	breq	.+36     	; 0x1d2e <vfprintf+0x556>
    1d0a:	18 f4       	brcc	.+6      	; 0x1d12 <vfprintf+0x53a>
    1d0c:	88 35       	cpi	r24, 0x58	; 88
    1d0e:	59 f0       	breq	.+22     	; 0x1d26 <vfprintf+0x54e>
    1d10:	c3 c0       	rjmp	.+390    	; 0x1e98 <vfprintf+0x6c0>
    1d12:	80 37       	cpi	r24, 0x70	; 112
    1d14:	19 f0       	breq	.+6      	; 0x1d1c <vfprintf+0x544>
    1d16:	88 37       	cpi	r24, 0x78	; 120
    1d18:	11 f0       	breq	.+4      	; 0x1d1e <vfprintf+0x546>
    1d1a:	be c0       	rjmp	.+380    	; 0x1e98 <vfprintf+0x6c0>
    1d1c:	00 61       	ori	r16, 0x10	; 16
    1d1e:	04 ff       	sbrs	r16, 4
    1d20:	09 c0       	rjmp	.+18     	; 0x1d34 <vfprintf+0x55c>
    1d22:	04 60       	ori	r16, 0x04	; 4
    1d24:	07 c0       	rjmp	.+14     	; 0x1d34 <vfprintf+0x55c>
    1d26:	94 fe       	sbrs	r9, 4
    1d28:	08 c0       	rjmp	.+16     	; 0x1d3a <vfprintf+0x562>
    1d2a:	06 60       	ori	r16, 0x06	; 6
    1d2c:	06 c0       	rjmp	.+12     	; 0x1d3a <vfprintf+0x562>
    1d2e:	28 e0       	ldi	r18, 0x08	; 8
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	05 c0       	rjmp	.+10     	; 0x1d3e <vfprintf+0x566>
    1d34:	20 e1       	ldi	r18, 0x10	; 16
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <vfprintf+0x566>
    1d3a:	20 e1       	ldi	r18, 0x10	; 16
    1d3c:	32 e0       	ldi	r19, 0x02	; 2
    1d3e:	56 01       	movw	r10, r12
    1d40:	07 ff       	sbrs	r16, 7
    1d42:	09 c0       	rjmp	.+18     	; 0x1d56 <vfprintf+0x57e>
    1d44:	84 e0       	ldi	r24, 0x04	; 4
    1d46:	a8 0e       	add	r10, r24
    1d48:	b1 1c       	adc	r11, r1
    1d4a:	f6 01       	movw	r30, r12
    1d4c:	60 81       	ld	r22, Z
    1d4e:	71 81       	ldd	r23, Z+1	; 0x01
    1d50:	82 81       	ldd	r24, Z+2	; 0x02
    1d52:	93 81       	ldd	r25, Z+3	; 0x03
    1d54:	08 c0       	rjmp	.+16     	; 0x1d66 <vfprintf+0x58e>
    1d56:	f2 e0       	ldi	r31, 0x02	; 2
    1d58:	af 0e       	add	r10, r31
    1d5a:	b1 1c       	adc	r11, r1
    1d5c:	f6 01       	movw	r30, r12
    1d5e:	60 81       	ld	r22, Z
    1d60:	71 81       	ldd	r23, Z+1	; 0x01
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a3 01       	movw	r20, r6
    1d68:	0e 94 ca 10 	call	0x2194	; 0x2194 <__ultoa_invert>
    1d6c:	c8 2e       	mov	r12, r24
    1d6e:	c6 18       	sub	r12, r6
    1d70:	0f 77       	andi	r16, 0x7F	; 127
    1d72:	90 2e       	mov	r9, r16
    1d74:	96 fe       	sbrs	r9, 6
    1d76:	0b c0       	rjmp	.+22     	; 0x1d8e <vfprintf+0x5b6>
    1d78:	09 2d       	mov	r16, r9
    1d7a:	0e 7f       	andi	r16, 0xFE	; 254
    1d7c:	c1 16       	cp	r12, r17
    1d7e:	50 f4       	brcc	.+20     	; 0x1d94 <vfprintf+0x5bc>
    1d80:	94 fe       	sbrs	r9, 4
    1d82:	0a c0       	rjmp	.+20     	; 0x1d98 <vfprintf+0x5c0>
    1d84:	92 fc       	sbrc	r9, 2
    1d86:	08 c0       	rjmp	.+16     	; 0x1d98 <vfprintf+0x5c0>
    1d88:	09 2d       	mov	r16, r9
    1d8a:	0e 7e       	andi	r16, 0xEE	; 238
    1d8c:	05 c0       	rjmp	.+10     	; 0x1d98 <vfprintf+0x5c0>
    1d8e:	dc 2c       	mov	r13, r12
    1d90:	09 2d       	mov	r16, r9
    1d92:	03 c0       	rjmp	.+6      	; 0x1d9a <vfprintf+0x5c2>
    1d94:	dc 2c       	mov	r13, r12
    1d96:	01 c0       	rjmp	.+2      	; 0x1d9a <vfprintf+0x5c2>
    1d98:	d1 2e       	mov	r13, r17
    1d9a:	04 ff       	sbrs	r16, 4
    1d9c:	0d c0       	rjmp	.+26     	; 0x1db8 <vfprintf+0x5e0>
    1d9e:	fe 01       	movw	r30, r28
    1da0:	ec 0d       	add	r30, r12
    1da2:	f1 1d       	adc	r31, r1
    1da4:	80 81       	ld	r24, Z
    1da6:	80 33       	cpi	r24, 0x30	; 48
    1da8:	11 f4       	brne	.+4      	; 0x1dae <vfprintf+0x5d6>
    1daa:	09 7e       	andi	r16, 0xE9	; 233
    1dac:	09 c0       	rjmp	.+18     	; 0x1dc0 <vfprintf+0x5e8>
    1dae:	02 ff       	sbrs	r16, 2
    1db0:	06 c0       	rjmp	.+12     	; 0x1dbe <vfprintf+0x5e6>
    1db2:	d3 94       	inc	r13
    1db4:	d3 94       	inc	r13
    1db6:	04 c0       	rjmp	.+8      	; 0x1dc0 <vfprintf+0x5e8>
    1db8:	80 2f       	mov	r24, r16
    1dba:	86 78       	andi	r24, 0x86	; 134
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <vfprintf+0x5e8>
    1dbe:	d3 94       	inc	r13
    1dc0:	03 fd       	sbrc	r16, 3
    1dc2:	11 c0       	rjmp	.+34     	; 0x1de6 <vfprintf+0x60e>
    1dc4:	00 ff       	sbrs	r16, 0
    1dc6:	06 c0       	rjmp	.+12     	; 0x1dd4 <vfprintf+0x5fc>
    1dc8:	1c 2d       	mov	r17, r12
    1dca:	d5 14       	cp	r13, r5
    1dcc:	80 f4       	brcc	.+32     	; 0x1dee <vfprintf+0x616>
    1dce:	15 0d       	add	r17, r5
    1dd0:	1d 19       	sub	r17, r13
    1dd2:	0d c0       	rjmp	.+26     	; 0x1dee <vfprintf+0x616>
    1dd4:	d5 14       	cp	r13, r5
    1dd6:	58 f4       	brcc	.+22     	; 0x1dee <vfprintf+0x616>
    1dd8:	b7 01       	movw	r22, r14
    1dda:	80 e2       	ldi	r24, 0x20	; 32
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1de2:	d3 94       	inc	r13
    1de4:	f7 cf       	rjmp	.-18     	; 0x1dd4 <vfprintf+0x5fc>
    1de6:	d5 14       	cp	r13, r5
    1de8:	10 f4       	brcc	.+4      	; 0x1dee <vfprintf+0x616>
    1dea:	5d 18       	sub	r5, r13
    1dec:	01 c0       	rjmp	.+2      	; 0x1df0 <vfprintf+0x618>
    1dee:	51 2c       	mov	r5, r1
    1df0:	04 ff       	sbrs	r16, 4
    1df2:	10 c0       	rjmp	.+32     	; 0x1e14 <vfprintf+0x63c>
    1df4:	b7 01       	movw	r22, r14
    1df6:	80 e3       	ldi	r24, 0x30	; 48
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1dfe:	02 ff       	sbrs	r16, 2
    1e00:	17 c0       	rjmp	.+46     	; 0x1e30 <vfprintf+0x658>
    1e02:	01 fd       	sbrc	r16, 1
    1e04:	03 c0       	rjmp	.+6      	; 0x1e0c <vfprintf+0x634>
    1e06:	88 e7       	ldi	r24, 0x78	; 120
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <vfprintf+0x638>
    1e0c:	88 e5       	ldi	r24, 0x58	; 88
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	b7 01       	movw	r22, r14
    1e12:	0c c0       	rjmp	.+24     	; 0x1e2c <vfprintf+0x654>
    1e14:	80 2f       	mov	r24, r16
    1e16:	86 78       	andi	r24, 0x86	; 134
    1e18:	59 f0       	breq	.+22     	; 0x1e30 <vfprintf+0x658>
    1e1a:	01 ff       	sbrs	r16, 1
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <vfprintf+0x64a>
    1e1e:	8b e2       	ldi	r24, 0x2B	; 43
    1e20:	01 c0       	rjmp	.+2      	; 0x1e24 <vfprintf+0x64c>
    1e22:	80 e2       	ldi	r24, 0x20	; 32
    1e24:	07 fd       	sbrc	r16, 7
    1e26:	8d e2       	ldi	r24, 0x2D	; 45
    1e28:	b7 01       	movw	r22, r14
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1e30:	c1 16       	cp	r12, r17
    1e32:	38 f4       	brcc	.+14     	; 0x1e42 <vfprintf+0x66a>
    1e34:	b7 01       	movw	r22, r14
    1e36:	80 e3       	ldi	r24, 0x30	; 48
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1e3e:	11 50       	subi	r17, 0x01	; 1
    1e40:	f7 cf       	rjmp	.-18     	; 0x1e30 <vfprintf+0x658>
    1e42:	ca 94       	dec	r12
    1e44:	f3 01       	movw	r30, r6
    1e46:	ec 0d       	add	r30, r12
    1e48:	f1 1d       	adc	r31, r1
    1e4a:	80 81       	ld	r24, Z
    1e4c:	b7 01       	movw	r22, r14
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1e54:	c1 10       	cpse	r12, r1
    1e56:	f5 cf       	rjmp	.-22     	; 0x1e42 <vfprintf+0x66a>
    1e58:	15 c0       	rjmp	.+42     	; 0x1e84 <vfprintf+0x6ac>
    1e5a:	f4 e0       	ldi	r31, 0x04	; 4
    1e5c:	f5 15       	cp	r31, r5
    1e5e:	60 f5       	brcc	.+88     	; 0x1eb8 <vfprintf+0x6e0>
    1e60:	84 e0       	ldi	r24, 0x04	; 4
    1e62:	58 1a       	sub	r5, r24
    1e64:	93 fe       	sbrs	r9, 3
    1e66:	1f c0       	rjmp	.+62     	; 0x1ea6 <vfprintf+0x6ce>
    1e68:	01 11       	cpse	r16, r1
    1e6a:	27 c0       	rjmp	.+78     	; 0x1eba <vfprintf+0x6e2>
    1e6c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e6e:	23 ff       	sbrs	r18, 3
    1e70:	2a c0       	rjmp	.+84     	; 0x1ec6 <vfprintf+0x6ee>
    1e72:	04 e0       	ldi	r16, 0x04	; 4
    1e74:	12 e0       	ldi	r17, 0x02	; 2
    1e76:	39 2d       	mov	r19, r9
    1e78:	30 71       	andi	r19, 0x10	; 16
    1e7a:	93 2e       	mov	r9, r19
    1e7c:	f8 01       	movw	r30, r16
    1e7e:	84 91       	lpm	r24, Z
    1e80:	81 11       	cpse	r24, r1
    1e82:	24 c0       	rjmp	.+72     	; 0x1ecc <vfprintf+0x6f4>
    1e84:	55 20       	and	r5, r5
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <vfprintf+0x6b2>
    1e88:	e4 cc       	rjmp	.-1592   	; 0x1852 <vfprintf+0x7a>
    1e8a:	b7 01       	movw	r22, r14
    1e8c:	80 e2       	ldi	r24, 0x20	; 32
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1e94:	5a 94       	dec	r5
    1e96:	f6 cf       	rjmp	.-20     	; 0x1e84 <vfprintf+0x6ac>
    1e98:	f7 01       	movw	r30, r14
    1e9a:	86 81       	ldd	r24, Z+6	; 0x06
    1e9c:	97 81       	ldd	r25, Z+7	; 0x07
    1e9e:	26 c0       	rjmp	.+76     	; 0x1eec <vfprintf+0x714>
    1ea0:	8f ef       	ldi	r24, 0xFF	; 255
    1ea2:	9f ef       	ldi	r25, 0xFF	; 255
    1ea4:	23 c0       	rjmp	.+70     	; 0x1eec <vfprintf+0x714>
    1ea6:	b7 01       	movw	r22, r14
    1ea8:	80 e2       	ldi	r24, 0x20	; 32
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1eb0:	5a 94       	dec	r5
    1eb2:	51 10       	cpse	r5, r1
    1eb4:	f8 cf       	rjmp	.-16     	; 0x1ea6 <vfprintf+0x6ce>
    1eb6:	d8 cf       	rjmp	.-80     	; 0x1e68 <vfprintf+0x690>
    1eb8:	51 2c       	mov	r5, r1
    1eba:	b7 01       	movw	r22, r14
    1ebc:	80 2f       	mov	r24, r16
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1ec4:	d3 cf       	rjmp	.-90     	; 0x1e6c <vfprintf+0x694>
    1ec6:	08 e0       	ldi	r16, 0x08	; 8
    1ec8:	12 e0       	ldi	r17, 0x02	; 2
    1eca:	d5 cf       	rjmp	.-86     	; 0x1e76 <vfprintf+0x69e>
    1ecc:	91 10       	cpse	r9, r1
    1ece:	80 52       	subi	r24, 0x20	; 32
    1ed0:	b7 01       	movw	r22, r14
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1ed8:	0f 5f       	subi	r16, 0xFF	; 255
    1eda:	1f 4f       	sbci	r17, 0xFF	; 255
    1edc:	cf cf       	rjmp	.-98     	; 0x1e7c <vfprintf+0x6a4>
    1ede:	23 e0       	ldi	r18, 0x03	; 3
    1ee0:	25 15       	cp	r18, r5
    1ee2:	10 f4       	brcc	.+4      	; 0x1ee8 <vfprintf+0x710>
    1ee4:	83 e0       	ldi	r24, 0x03	; 3
    1ee6:	bd cf       	rjmp	.-134    	; 0x1e62 <vfprintf+0x68a>
    1ee8:	51 2c       	mov	r5, r1
    1eea:	c0 cf       	rjmp	.-128    	; 0x1e6c <vfprintf+0x694>
    1eec:	60 96       	adiw	r28, 0x10	; 16
    1eee:	cd bf       	out	0x3d, r28	; 61
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	ff 90       	pop	r15
    1efc:	ef 90       	pop	r14
    1efe:	df 90       	pop	r13
    1f00:	cf 90       	pop	r12
    1f02:	bf 90       	pop	r11
    1f04:	af 90       	pop	r10
    1f06:	9f 90       	pop	r9
    1f08:	8f 90       	pop	r8
    1f0a:	7f 90       	pop	r7
    1f0c:	6f 90       	pop	r6
    1f0e:	5f 90       	pop	r5
    1f10:	4f 90       	pop	r4
    1f12:	3f 90       	pop	r3
    1f14:	2f 90       	pop	r2
    1f16:	08 95       	ret

00001f18 <__ftoa_engine>:
    1f18:	28 30       	cpi	r18, 0x08	; 8
    1f1a:	08 f0       	brcs	.+2      	; 0x1f1e <__ftoa_engine+0x6>
    1f1c:	27 e0       	ldi	r18, 0x07	; 7
    1f1e:	33 27       	eor	r19, r19
    1f20:	da 01       	movw	r26, r20
    1f22:	99 0f       	add	r25, r25
    1f24:	31 1d       	adc	r19, r1
    1f26:	87 fd       	sbrc	r24, 7
    1f28:	91 60       	ori	r25, 0x01	; 1
    1f2a:	00 96       	adiw	r24, 0x00	; 0
    1f2c:	61 05       	cpc	r22, r1
    1f2e:	71 05       	cpc	r23, r1
    1f30:	39 f4       	brne	.+14     	; 0x1f40 <__ftoa_engine+0x28>
    1f32:	32 60       	ori	r19, 0x02	; 2
    1f34:	2e 5f       	subi	r18, 0xFE	; 254
    1f36:	3d 93       	st	X+, r19
    1f38:	30 e3       	ldi	r19, 0x30	; 48
    1f3a:	2a 95       	dec	r18
    1f3c:	e1 f7       	brne	.-8      	; 0x1f36 <__ftoa_engine+0x1e>
    1f3e:	08 95       	ret
    1f40:	9f 3f       	cpi	r25, 0xFF	; 255
    1f42:	30 f0       	brcs	.+12     	; 0x1f50 <__ftoa_engine+0x38>
    1f44:	80 38       	cpi	r24, 0x80	; 128
    1f46:	71 05       	cpc	r23, r1
    1f48:	61 05       	cpc	r22, r1
    1f4a:	09 f0       	breq	.+2      	; 0x1f4e <__ftoa_engine+0x36>
    1f4c:	3c 5f       	subi	r19, 0xFC	; 252
    1f4e:	3c 5f       	subi	r19, 0xFC	; 252
    1f50:	3d 93       	st	X+, r19
    1f52:	91 30       	cpi	r25, 0x01	; 1
    1f54:	08 f0       	brcs	.+2      	; 0x1f58 <__ftoa_engine+0x40>
    1f56:	80 68       	ori	r24, 0x80	; 128
    1f58:	91 1d       	adc	r25, r1
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	1f 93       	push	r17
    1f60:	0f 93       	push	r16
    1f62:	ff 92       	push	r15
    1f64:	ef 92       	push	r14
    1f66:	19 2f       	mov	r17, r25
    1f68:	98 7f       	andi	r25, 0xF8	; 248
    1f6a:	96 95       	lsr	r25
    1f6c:	e9 2f       	mov	r30, r25
    1f6e:	96 95       	lsr	r25
    1f70:	96 95       	lsr	r25
    1f72:	e9 0f       	add	r30, r25
    1f74:	ff 27       	eor	r31, r31
    1f76:	ea 59       	subi	r30, 0x9A	; 154
    1f78:	fd 4f       	sbci	r31, 0xFD	; 253
    1f7a:	99 27       	eor	r25, r25
    1f7c:	33 27       	eor	r19, r19
    1f7e:	ee 24       	eor	r14, r14
    1f80:	ff 24       	eor	r15, r15
    1f82:	a7 01       	movw	r20, r14
    1f84:	e7 01       	movw	r28, r14
    1f86:	05 90       	lpm	r0, Z+
    1f88:	08 94       	sec
    1f8a:	07 94       	ror	r0
    1f8c:	28 f4       	brcc	.+10     	; 0x1f98 <__ftoa_engine+0x80>
    1f8e:	36 0f       	add	r19, r22
    1f90:	e7 1e       	adc	r14, r23
    1f92:	f8 1e       	adc	r15, r24
    1f94:	49 1f       	adc	r20, r25
    1f96:	51 1d       	adc	r21, r1
    1f98:	66 0f       	add	r22, r22
    1f9a:	77 1f       	adc	r23, r23
    1f9c:	88 1f       	adc	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	06 94       	lsr	r0
    1fa2:	a1 f7       	brne	.-24     	; 0x1f8c <__ftoa_engine+0x74>
    1fa4:	05 90       	lpm	r0, Z+
    1fa6:	07 94       	ror	r0
    1fa8:	28 f4       	brcc	.+10     	; 0x1fb4 <__ftoa_engine+0x9c>
    1faa:	e7 0e       	add	r14, r23
    1fac:	f8 1e       	adc	r15, r24
    1fae:	49 1f       	adc	r20, r25
    1fb0:	56 1f       	adc	r21, r22
    1fb2:	c1 1d       	adc	r28, r1
    1fb4:	77 0f       	add	r23, r23
    1fb6:	88 1f       	adc	r24, r24
    1fb8:	99 1f       	adc	r25, r25
    1fba:	66 1f       	adc	r22, r22
    1fbc:	06 94       	lsr	r0
    1fbe:	a1 f7       	brne	.-24     	; 0x1fa8 <__ftoa_engine+0x90>
    1fc0:	05 90       	lpm	r0, Z+
    1fc2:	07 94       	ror	r0
    1fc4:	28 f4       	brcc	.+10     	; 0x1fd0 <__ftoa_engine+0xb8>
    1fc6:	f8 0e       	add	r15, r24
    1fc8:	49 1f       	adc	r20, r25
    1fca:	56 1f       	adc	r21, r22
    1fcc:	c7 1f       	adc	r28, r23
    1fce:	d1 1d       	adc	r29, r1
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	66 1f       	adc	r22, r22
    1fd6:	77 1f       	adc	r23, r23
    1fd8:	06 94       	lsr	r0
    1fda:	a1 f7       	brne	.-24     	; 0x1fc4 <__ftoa_engine+0xac>
    1fdc:	05 90       	lpm	r0, Z+
    1fde:	07 94       	ror	r0
    1fe0:	20 f4       	brcc	.+8      	; 0x1fea <__ftoa_engine+0xd2>
    1fe2:	49 0f       	add	r20, r25
    1fe4:	56 1f       	adc	r21, r22
    1fe6:	c7 1f       	adc	r28, r23
    1fe8:	d8 1f       	adc	r29, r24
    1fea:	99 0f       	add	r25, r25
    1fec:	66 1f       	adc	r22, r22
    1fee:	77 1f       	adc	r23, r23
    1ff0:	88 1f       	adc	r24, r24
    1ff2:	06 94       	lsr	r0
    1ff4:	a9 f7       	brne	.-22     	; 0x1fe0 <__ftoa_engine+0xc8>
    1ff6:	84 91       	lpm	r24, Z
    1ff8:	10 95       	com	r17
    1ffa:	17 70       	andi	r17, 0x07	; 7
    1ffc:	41 f0       	breq	.+16     	; 0x200e <__ftoa_engine+0xf6>
    1ffe:	d6 95       	lsr	r29
    2000:	c7 95       	ror	r28
    2002:	57 95       	ror	r21
    2004:	47 95       	ror	r20
    2006:	f7 94       	ror	r15
    2008:	e7 94       	ror	r14
    200a:	1a 95       	dec	r17
    200c:	c1 f7       	brne	.-16     	; 0x1ffe <__ftoa_engine+0xe6>
    200e:	ec e0       	ldi	r30, 0x0C	; 12
    2010:	f2 e0       	ldi	r31, 0x02	; 2
    2012:	68 94       	set
    2014:	15 90       	lpm	r1, Z+
    2016:	15 91       	lpm	r17, Z+
    2018:	35 91       	lpm	r19, Z+
    201a:	65 91       	lpm	r22, Z+
    201c:	95 91       	lpm	r25, Z+
    201e:	05 90       	lpm	r0, Z+
    2020:	7f e2       	ldi	r23, 0x2F	; 47
    2022:	73 95       	inc	r23
    2024:	e1 18       	sub	r14, r1
    2026:	f1 0a       	sbc	r15, r17
    2028:	43 0b       	sbc	r20, r19
    202a:	56 0b       	sbc	r21, r22
    202c:	c9 0b       	sbc	r28, r25
    202e:	d0 09       	sbc	r29, r0
    2030:	c0 f7       	brcc	.-16     	; 0x2022 <__ftoa_engine+0x10a>
    2032:	e1 0c       	add	r14, r1
    2034:	f1 1e       	adc	r15, r17
    2036:	43 1f       	adc	r20, r19
    2038:	56 1f       	adc	r21, r22
    203a:	c9 1f       	adc	r28, r25
    203c:	d0 1d       	adc	r29, r0
    203e:	7e f4       	brtc	.+30     	; 0x205e <__ftoa_engine+0x146>
    2040:	70 33       	cpi	r23, 0x30	; 48
    2042:	11 f4       	brne	.+4      	; 0x2048 <__ftoa_engine+0x130>
    2044:	8a 95       	dec	r24
    2046:	e6 cf       	rjmp	.-52     	; 0x2014 <__ftoa_engine+0xfc>
    2048:	e8 94       	clt
    204a:	01 50       	subi	r16, 0x01	; 1
    204c:	30 f0       	brcs	.+12     	; 0x205a <__ftoa_engine+0x142>
    204e:	08 0f       	add	r16, r24
    2050:	0a f4       	brpl	.+2      	; 0x2054 <__ftoa_engine+0x13c>
    2052:	00 27       	eor	r16, r16
    2054:	02 17       	cp	r16, r18
    2056:	08 f4       	brcc	.+2      	; 0x205a <__ftoa_engine+0x142>
    2058:	20 2f       	mov	r18, r16
    205a:	23 95       	inc	r18
    205c:	02 2f       	mov	r16, r18
    205e:	7a 33       	cpi	r23, 0x3A	; 58
    2060:	28 f0       	brcs	.+10     	; 0x206c <__ftoa_engine+0x154>
    2062:	79 e3       	ldi	r23, 0x39	; 57
    2064:	7d 93       	st	X+, r23
    2066:	2a 95       	dec	r18
    2068:	e9 f7       	brne	.-6      	; 0x2064 <__ftoa_engine+0x14c>
    206a:	10 c0       	rjmp	.+32     	; 0x208c <__ftoa_engine+0x174>
    206c:	7d 93       	st	X+, r23
    206e:	2a 95       	dec	r18
    2070:	89 f6       	brne	.-94     	; 0x2014 <__ftoa_engine+0xfc>
    2072:	06 94       	lsr	r0
    2074:	97 95       	ror	r25
    2076:	67 95       	ror	r22
    2078:	37 95       	ror	r19
    207a:	17 95       	ror	r17
    207c:	17 94       	ror	r1
    207e:	e1 18       	sub	r14, r1
    2080:	f1 0a       	sbc	r15, r17
    2082:	43 0b       	sbc	r20, r19
    2084:	56 0b       	sbc	r21, r22
    2086:	c9 0b       	sbc	r28, r25
    2088:	d0 09       	sbc	r29, r0
    208a:	98 f0       	brcs	.+38     	; 0x20b2 <__ftoa_engine+0x19a>
    208c:	23 95       	inc	r18
    208e:	7e 91       	ld	r23, -X
    2090:	73 95       	inc	r23
    2092:	7a 33       	cpi	r23, 0x3A	; 58
    2094:	08 f0       	brcs	.+2      	; 0x2098 <__ftoa_engine+0x180>
    2096:	70 e3       	ldi	r23, 0x30	; 48
    2098:	7c 93       	st	X, r23
    209a:	20 13       	cpse	r18, r16
    209c:	b8 f7       	brcc	.-18     	; 0x208c <__ftoa_engine+0x174>
    209e:	7e 91       	ld	r23, -X
    20a0:	70 61       	ori	r23, 0x10	; 16
    20a2:	7d 93       	st	X+, r23
    20a4:	30 f0       	brcs	.+12     	; 0x20b2 <__ftoa_engine+0x19a>
    20a6:	83 95       	inc	r24
    20a8:	71 e3       	ldi	r23, 0x31	; 49
    20aa:	7d 93       	st	X+, r23
    20ac:	70 e3       	ldi	r23, 0x30	; 48
    20ae:	2a 95       	dec	r18
    20b0:	e1 f7       	brne	.-8      	; 0x20aa <__ftoa_engine+0x192>
    20b2:	11 24       	eor	r1, r1
    20b4:	ef 90       	pop	r14
    20b6:	ff 90       	pop	r15
    20b8:	0f 91       	pop	r16
    20ba:	1f 91       	pop	r17
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	99 27       	eor	r25, r25
    20c2:	87 fd       	sbrc	r24, 7
    20c4:	90 95       	com	r25
    20c6:	08 95       	ret

000020c8 <strnlen_P>:
    20c8:	fc 01       	movw	r30, r24
    20ca:	05 90       	lpm	r0, Z+
    20cc:	61 50       	subi	r22, 0x01	; 1
    20ce:	70 40       	sbci	r23, 0x00	; 0
    20d0:	01 10       	cpse	r0, r1
    20d2:	d8 f7       	brcc	.-10     	; 0x20ca <strnlen_P+0x2>
    20d4:	80 95       	com	r24
    20d6:	90 95       	com	r25
    20d8:	8e 0f       	add	r24, r30
    20da:	9f 1f       	adc	r25, r31
    20dc:	08 95       	ret

000020de <strnlen>:
    20de:	fc 01       	movw	r30, r24
    20e0:	61 50       	subi	r22, 0x01	; 1
    20e2:	70 40       	sbci	r23, 0x00	; 0
    20e4:	01 90       	ld	r0, Z+
    20e6:	01 10       	cpse	r0, r1
    20e8:	d8 f7       	brcc	.-10     	; 0x20e0 <strnlen+0x2>
    20ea:	80 95       	com	r24
    20ec:	90 95       	com	r25
    20ee:	8e 0f       	add	r24, r30
    20f0:	9f 1f       	adc	r25, r31
    20f2:	08 95       	ret

000020f4 <fputc>:
    20f4:	0f 93       	push	r16
    20f6:	1f 93       	push	r17
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
    20fc:	fb 01       	movw	r30, r22
    20fe:	23 81       	ldd	r18, Z+3	; 0x03
    2100:	21 fd       	sbrc	r18, 1
    2102:	03 c0       	rjmp	.+6      	; 0x210a <fputc+0x16>
    2104:	8f ef       	ldi	r24, 0xFF	; 255
    2106:	9f ef       	ldi	r25, 0xFF	; 255
    2108:	2c c0       	rjmp	.+88     	; 0x2162 <fputc+0x6e>
    210a:	22 ff       	sbrs	r18, 2
    210c:	16 c0       	rjmp	.+44     	; 0x213a <fputc+0x46>
    210e:	46 81       	ldd	r20, Z+6	; 0x06
    2110:	57 81       	ldd	r21, Z+7	; 0x07
    2112:	24 81       	ldd	r18, Z+4	; 0x04
    2114:	35 81       	ldd	r19, Z+5	; 0x05
    2116:	42 17       	cp	r20, r18
    2118:	53 07       	cpc	r21, r19
    211a:	44 f4       	brge	.+16     	; 0x212c <fputc+0x38>
    211c:	a0 81       	ld	r26, Z
    211e:	b1 81       	ldd	r27, Z+1	; 0x01
    2120:	9d 01       	movw	r18, r26
    2122:	2f 5f       	subi	r18, 0xFF	; 255
    2124:	3f 4f       	sbci	r19, 0xFF	; 255
    2126:	20 83       	st	Z, r18
    2128:	31 83       	std	Z+1, r19	; 0x01
    212a:	8c 93       	st	X, r24
    212c:	26 81       	ldd	r18, Z+6	; 0x06
    212e:	37 81       	ldd	r19, Z+7	; 0x07
    2130:	2f 5f       	subi	r18, 0xFF	; 255
    2132:	3f 4f       	sbci	r19, 0xFF	; 255
    2134:	26 83       	std	Z+6, r18	; 0x06
    2136:	37 83       	std	Z+7, r19	; 0x07
    2138:	14 c0       	rjmp	.+40     	; 0x2162 <fputc+0x6e>
    213a:	8b 01       	movw	r16, r22
    213c:	ec 01       	movw	r28, r24
    213e:	fb 01       	movw	r30, r22
    2140:	00 84       	ldd	r0, Z+8	; 0x08
    2142:	f1 85       	ldd	r31, Z+9	; 0x09
    2144:	e0 2d       	mov	r30, r0
    2146:	19 95       	eicall
    2148:	89 2b       	or	r24, r25
    214a:	e1 f6       	brne	.-72     	; 0x2104 <fputc+0x10>
    214c:	d8 01       	movw	r26, r16
    214e:	16 96       	adiw	r26, 0x06	; 6
    2150:	8d 91       	ld	r24, X+
    2152:	9c 91       	ld	r25, X
    2154:	17 97       	sbiw	r26, 0x07	; 7
    2156:	01 96       	adiw	r24, 0x01	; 1
    2158:	16 96       	adiw	r26, 0x06	; 6
    215a:	8d 93       	st	X+, r24
    215c:	9c 93       	st	X, r25
    215e:	17 97       	sbiw	r26, 0x07	; 7
    2160:	ce 01       	movw	r24, r28
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	1f 91       	pop	r17
    2168:	0f 91       	pop	r16
    216a:	08 95       	ret

0000216c <printf>:
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	ae 01       	movw	r20, r28
    2176:	4a 5f       	subi	r20, 0xFA	; 250
    2178:	5f 4f       	sbci	r21, 0xFF	; 255
    217a:	fa 01       	movw	r30, r20
    217c:	61 91       	ld	r22, Z+
    217e:	71 91       	ld	r23, Z+
    2180:	af 01       	movw	r20, r30
    2182:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <__iob+0x2>
    2186:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <__iob+0x3>
    218a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <vfprintf>
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	08 95       	ret

00002194 <__ultoa_invert>:
    2194:	fa 01       	movw	r30, r20
    2196:	aa 27       	eor	r26, r26
    2198:	28 30       	cpi	r18, 0x08	; 8
    219a:	51 f1       	breq	.+84     	; 0x21f0 <__ultoa_invert+0x5c>
    219c:	20 31       	cpi	r18, 0x10	; 16
    219e:	81 f1       	breq	.+96     	; 0x2200 <__ultoa_invert+0x6c>
    21a0:	e8 94       	clt
    21a2:	6f 93       	push	r22
    21a4:	6e 7f       	andi	r22, 0xFE	; 254
    21a6:	6e 5f       	subi	r22, 0xFE	; 254
    21a8:	7f 4f       	sbci	r23, 0xFF	; 255
    21aa:	8f 4f       	sbci	r24, 0xFF	; 255
    21ac:	9f 4f       	sbci	r25, 0xFF	; 255
    21ae:	af 4f       	sbci	r26, 0xFF	; 255
    21b0:	b1 e0       	ldi	r27, 0x01	; 1
    21b2:	3e d0       	rcall	.+124    	; 0x2230 <__ultoa_invert+0x9c>
    21b4:	b4 e0       	ldi	r27, 0x04	; 4
    21b6:	3c d0       	rcall	.+120    	; 0x2230 <__ultoa_invert+0x9c>
    21b8:	67 0f       	add	r22, r23
    21ba:	78 1f       	adc	r23, r24
    21bc:	89 1f       	adc	r24, r25
    21be:	9a 1f       	adc	r25, r26
    21c0:	a1 1d       	adc	r26, r1
    21c2:	68 0f       	add	r22, r24
    21c4:	79 1f       	adc	r23, r25
    21c6:	8a 1f       	adc	r24, r26
    21c8:	91 1d       	adc	r25, r1
    21ca:	a1 1d       	adc	r26, r1
    21cc:	6a 0f       	add	r22, r26
    21ce:	71 1d       	adc	r23, r1
    21d0:	81 1d       	adc	r24, r1
    21d2:	91 1d       	adc	r25, r1
    21d4:	a1 1d       	adc	r26, r1
    21d6:	20 d0       	rcall	.+64     	; 0x2218 <__ultoa_invert+0x84>
    21d8:	09 f4       	brne	.+2      	; 0x21dc <__ultoa_invert+0x48>
    21da:	68 94       	set
    21dc:	3f 91       	pop	r19
    21de:	2a e0       	ldi	r18, 0x0A	; 10
    21e0:	26 9f       	mul	r18, r22
    21e2:	11 24       	eor	r1, r1
    21e4:	30 19       	sub	r19, r0
    21e6:	30 5d       	subi	r19, 0xD0	; 208
    21e8:	31 93       	st	Z+, r19
    21ea:	de f6       	brtc	.-74     	; 0x21a2 <__ultoa_invert+0xe>
    21ec:	cf 01       	movw	r24, r30
    21ee:	08 95       	ret
    21f0:	46 2f       	mov	r20, r22
    21f2:	47 70       	andi	r20, 0x07	; 7
    21f4:	40 5d       	subi	r20, 0xD0	; 208
    21f6:	41 93       	st	Z+, r20
    21f8:	b3 e0       	ldi	r27, 0x03	; 3
    21fa:	0f d0       	rcall	.+30     	; 0x221a <__ultoa_invert+0x86>
    21fc:	c9 f7       	brne	.-14     	; 0x21f0 <__ultoa_invert+0x5c>
    21fe:	f6 cf       	rjmp	.-20     	; 0x21ec <__ultoa_invert+0x58>
    2200:	46 2f       	mov	r20, r22
    2202:	4f 70       	andi	r20, 0x0F	; 15
    2204:	40 5d       	subi	r20, 0xD0	; 208
    2206:	4a 33       	cpi	r20, 0x3A	; 58
    2208:	18 f0       	brcs	.+6      	; 0x2210 <__ultoa_invert+0x7c>
    220a:	49 5d       	subi	r20, 0xD9	; 217
    220c:	31 fd       	sbrc	r19, 1
    220e:	40 52       	subi	r20, 0x20	; 32
    2210:	41 93       	st	Z+, r20
    2212:	02 d0       	rcall	.+4      	; 0x2218 <__ultoa_invert+0x84>
    2214:	a9 f7       	brne	.-22     	; 0x2200 <__ultoa_invert+0x6c>
    2216:	ea cf       	rjmp	.-44     	; 0x21ec <__ultoa_invert+0x58>
    2218:	b4 e0       	ldi	r27, 0x04	; 4
    221a:	a6 95       	lsr	r26
    221c:	97 95       	ror	r25
    221e:	87 95       	ror	r24
    2220:	77 95       	ror	r23
    2222:	67 95       	ror	r22
    2224:	ba 95       	dec	r27
    2226:	c9 f7       	brne	.-14     	; 0x221a <__ultoa_invert+0x86>
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	61 05       	cpc	r22, r1
    222c:	71 05       	cpc	r23, r1
    222e:	08 95       	ret
    2230:	9b 01       	movw	r18, r22
    2232:	ac 01       	movw	r20, r24
    2234:	0a 2e       	mov	r0, r26
    2236:	06 94       	lsr	r0
    2238:	57 95       	ror	r21
    223a:	47 95       	ror	r20
    223c:	37 95       	ror	r19
    223e:	27 95       	ror	r18
    2240:	ba 95       	dec	r27
    2242:	c9 f7       	brne	.-14     	; 0x2236 <__ultoa_invert+0xa2>
    2244:	62 0f       	add	r22, r18
    2246:	73 1f       	adc	r23, r19
    2248:	84 1f       	adc	r24, r20
    224a:	95 1f       	adc	r25, r21
    224c:	a0 1d       	adc	r26, r0
    224e:	08 95       	ret

00002250 <_exit>:
    2250:	f8 94       	cli

00002252 <__stop_program>:
    2252:	ff cf       	rjmp	.-2      	; 0x2252 <__stop_program>
