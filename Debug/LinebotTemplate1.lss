
LinebotTemplate1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002246  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00802000  00002246  000022da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00802086  00802086  00002360  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00002430  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005743  00000000  00000000  000026a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003327  00000000  00000000  00007deb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001af5  00000000  00000000  0000b112  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000077c  00000000  00000000  0000cc08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002a9b  00000000  00000000  0000d384  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e6b  00000000  00000000  0000fe1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00010c8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 83 01 	jmp	0x306	; 0x306 <__ctors_end>
       4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
       8:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__vector_2>
       c:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__vector_3>
      10:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      14:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      18:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      1c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      20:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      24:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      28:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      2c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      30:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      34:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      38:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_14>
      3c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      40:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      44:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      48:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      4c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      50:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      54:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      58:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      5c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      60:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      64:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      68:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      6c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      70:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      74:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      78:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      7c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      80:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      84:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      88:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      8c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      90:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      94:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      98:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      9c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      a0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      a4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      a8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      ac:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__vector_43>
      b0:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__vector_44>
      b4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      b8:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__vector_46>
      bc:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      c0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      c4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      c8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      cc:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      d0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      d4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      d8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      dc:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      e0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      e4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      e8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      ec:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      f0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      f4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      f8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      fc:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     100:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     104:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     108:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     10c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     110:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     114:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     118:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     11c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     120:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     124:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     128:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     12c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     130:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     134:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     138:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     13c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     140:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     144:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     148:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     14c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     150:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     154:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     158:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     15c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     160:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     164:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     168:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     16c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     170:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     174:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     178:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     17c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     180:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     184:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     188:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     18c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     190:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     194:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     198:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     19c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1a0:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__vector_104>
     1a4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1a8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1ac:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1b0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1b4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1b8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1bc:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1c0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1c4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1c8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1cc:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1d0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1d4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1d8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1dc:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1e0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1e4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1e8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1ec:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1f0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1f4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     1f8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 02 09 	jmp	0x1204	; 0x1204 <stdio_getchar>
     200:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <stdio_putchar>

00000204 <__trampolines_end>:
     204:	6e 61       	ori	r22, 0x1E	; 30
     206:	6e 00       	.word	0x006e	; ????

00000208 <__c.2332>:
     208:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     218:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     228:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     238:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     248:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     258:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     268:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     278:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     288:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     298:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000306 <__ctors_end>:
     306:	11 24       	eor	r1, r1
     308:	1f be       	out	0x3f, r1	; 63
     30a:	cf ef       	ldi	r28, 0xFF	; 255
     30c:	cd bf       	out	0x3d, r28	; 61
     30e:	df e9       	ldi	r29, 0x9F	; 159
     310:	de bf       	out	0x3e, r29	; 62
     312:	00 e0       	ldi	r16, 0x00	; 0
     314:	0c bf       	out	0x3c, r16	; 60

00000316 <__do_copy_data>:
     316:	10 e2       	ldi	r17, 0x20	; 32
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e2       	ldi	r27, 0x20	; 32
     31c:	e6 e4       	ldi	r30, 0x46	; 70
     31e:	f2 e2       	ldi	r31, 0x22	; 34
     320:	00 e0       	ldi	r16, 0x00	; 0
     322:	0b bf       	out	0x3b, r16	; 59
     324:	02 c0       	rjmp	.+4      	; 0x32a <__do_copy_data+0x14>
     326:	07 90       	elpm	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	a6 38       	cpi	r26, 0x86	; 134
     32c:	b1 07       	cpc	r27, r17
     32e:	d9 f7       	brne	.-10     	; 0x326 <__do_copy_data+0x10>

00000330 <__do_clear_bss>:
     330:	20 e2       	ldi	r18, 0x20	; 32
     332:	a6 e8       	ldi	r26, 0x86	; 134
     334:	b0 e2       	ldi	r27, 0x20	; 32
     336:	01 c0       	rjmp	.+2      	; 0x33a <.do_clear_bss_start>

00000338 <.do_clear_bss_loop>:
     338:	1d 92       	st	X+, r1

0000033a <.do_clear_bss_start>:
     33a:	aa 3b       	cpi	r26, 0xBA	; 186
     33c:	b2 07       	cpc	r27, r18
     33e:	e1 f7       	brne	.-8      	; 0x338 <.do_clear_bss_loop>
     340:	0e 94 af 0a 	call	0x155e	; 0x155e <main>
     344:	0c 94 21 11 	jmp	0x2242	; 0x2242 <_exit>

00000348 <__bad_interrupt>:
     348:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000034c <DriverPL9823BitbangSet>:
     34c:	0f 92       	push	r0
     34e:	df 93       	push	r29
     350:	d8 e0       	ldi	r29, 0x08	; 8
     352:	e6 e8       	ldi	r30, 0x86	; 134
     354:	f0 e2       	ldi	r31, 0x20	; 32
     356:	61 93       	st	Z+, r22
     358:	71 93       	st	Z+, r23
     35a:	81 93       	st	Z+, r24
     35c:	21 93       	st	Z+, r18
     35e:	31 93       	st	Z+, r19
     360:	41 93       	st	Z+, r20
     362:	e1 92       	st	Z+, r14
     364:	f1 92       	st	Z+, r15
     366:	01 93       	st	Z+, r16
     368:	a1 92       	st	Z+, r10
     36a:	b1 92       	st	Z+, r11
     36c:	c1 92       	st	Z+, r12
     36e:	e6 e8       	ldi	r30, 0x86	; 134
     370:	f0 e2       	ldi	r31, 0x20	; 32

00000372 <startx>:
     372:	e6 e8       	ldi	r30, 0x86	; 134
     374:	f0 e2       	ldi	r31, 0x20	; 32
     376:	d0 93 66 06 	sts	0x0666, r29	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     37a:	5f ef       	ldi	r21, 0xFF	; 255
     37c:	63 e0       	ldi	r22, 0x03	; 3

0000037e <delay200>:
     37e:	5a 95       	dec	r21
     380:	f1 f7       	brne	.-4      	; 0x37e <delay200>
     382:	6a 95       	dec	r22
     384:	e1 f7       	brne	.-8      	; 0x37e <delay200>
     386:	04 e0       	ldi	r16, 0x04	; 4

00000388 <loop1>:
     388:	13 e0       	ldi	r17, 0x03	; 3

0000038a <loop2>:
     38a:	d0 93 65 06 	sts	0x0665, r29	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     38e:	21 91       	ld	r18, Z+
     390:	38 e0       	ldi	r19, 0x08	; 8

00000392 <loop3>:
     392:	d0 93 65 06 	sts	0x0665, r29	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	...
     3a2:	00 00       	nop
     3a4:	27 ff       	sbrs	r18, 7
     3a6:	d0 93 66 06 	sts	0x0666, r29	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     3aa:	00 00       	nop
     3ac:	00 00       	nop
     3ae:	22 0f       	add	r18, r18
     3b0:	59 e0       	ldi	r21, 0x09	; 9

000003b2 <delay32>:
     3b2:	5a 95       	dec	r21
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <delay32>
     3b6:	d0 93 66 06 	sts	0x0666, r29	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	...
     3c6:	3a 95       	dec	r19
     3c8:	21 f7       	brne	.-56     	; 0x392 <loop3>
     3ca:	1a 95       	dec	r17
     3cc:	f1 f6       	brne	.-68     	; 0x38a <loop2>
     3ce:	0a 95       	dec	r16
     3d0:	d9 f6       	brne	.-74     	; 0x388 <loop1>
     3d2:	d0 93 65 06 	sts	0x0665, r29	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     3d6:	df 91       	pop	r29
     3d8:	0f 90       	pop	r0
     3da:	11 24       	eor	r1, r1

000003dc <end>:
     3dc:	08 95       	ret

000003de <DriverAdcInit>:
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
     3e6:	00 00       	nop
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <DriverAdps9960Init>:

#define REG_ID 0x92
#define ID 0xAB

void DriverAdps9960Init(void)
{
     3ee:	0f 93       	push	r16
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <DriverAdps9960Init+0x8>
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
	uint8_t res;
	uint8_t Buffer[2];
	Buffer[0]=REG_ENABLE;
     3fa:	80 e8       	ldi	r24, 0x80	; 128
     3fc:	8a 83       	std	Y+2, r24	; 0x02
	Buffer[1]=(1<<REG_ENABLE_PON);
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	8b 83       	std	Y+3, r24	; 0x03
	res=TWIMWrite(ADPS9960_ADDR,Buffer,2);
     402:	ce 01       	movw	r24, r28
     404:	02 96       	adiw	r24, 0x02	; 2
     406:	42 e0       	ldi	r20, 0x02	; 2
     408:	bc 01       	movw	r22, r24
     40a:	89 e3       	ldi	r24, 0x39	; 57
     40c:	0e 94 f1 06 	call	0xde2	; 0xde2 <TWIMWrite>
     410:	89 83       	std	Y+1, r24	; 0x01
	
	Buffer[0]=REG_ID;
     412:	82 e9       	ldi	r24, 0x92	; 146
     414:	8a 83       	std	Y+2, r24	; 0x02
	TWIMWriteRead(ADPS9960_ADDR,Buffer,1,Buffer,1);
     416:	9e 01       	movw	r18, r28
     418:	2e 5f       	subi	r18, 0xFE	; 254
     41a:	3f 4f       	sbci	r19, 0xFF	; 255
     41c:	ce 01       	movw	r24, r28
     41e:	02 96       	adiw	r24, 0x02	; 2
     420:	01 e0       	ldi	r16, 0x01	; 1
     422:	41 e0       	ldi	r20, 0x01	; 1
     424:	bc 01       	movw	r22, r24
     426:	89 e3       	ldi	r24, 0x39	; 57
     428:	0e 94 10 07 	call	0xe20	; 0xe20 <TWIMWriteRead>
	if (Buffer[0]!=ID)
     42c:	8a 81       	ldd	r24, Y+2	; 0x02
     42e:	8b 3a       	cpi	r24, 0xAB	; 171
     430:	99 f0       	breq	.+38     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		printf ("ADPS9960 ID readback fail: %d read\r\n",Buffer[0]);
     432:	8a 81       	ldd	r24, Y+2	; 0x02
     434:	88 2f       	mov	r24, r24
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	29 2f       	mov	r18, r25
     43a:	2f 93       	push	r18
     43c:	8f 93       	push	r24
     43e:	8e e0       	ldi	r24, 0x0E	; 14
     440:	90 e2       	ldi	r25, 0x20	; 32
     442:	89 2f       	mov	r24, r25
     444:	8f 93       	push	r24
     446:	8e e0       	ldi	r24, 0x0E	; 14
     448:	90 e2       	ldi	r25, 0x20	; 32
     44a:	8f 93       	push	r24
     44c:	0e 94 af 10 	call	0x215e	; 0x215e <printf>
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0

	Buffer[0]=REG_ATIME;
     458:	81 e8       	ldi	r24, 0x81	; 129
     45a:	8a 83       	std	Y+2, r24	; 0x02
	Buffer[1]=219; //100ms integration time
     45c:	8b ed       	ldi	r24, 0xDB	; 219
     45e:	8b 83       	std	Y+3, r24	; 0x03
	res=TWIMWrite(ADPS9960_ADDR,Buffer,2);
     460:	ce 01       	movw	r24, r28
     462:	02 96       	adiw	r24, 0x02	; 2
     464:	42 e0       	ldi	r20, 0x02	; 2
     466:	bc 01       	movw	r22, r24
     468:	89 e3       	ldi	r24, 0x39	; 57
     46a:	0e 94 f1 06 	call	0xde2	; 0xde2 <TWIMWrite>
     46e:	89 83       	std	Y+1, r24	; 0x01

	Buffer[0]=REG_CTRL1;
     470:	8f e8       	ldi	r24, 0x8F	; 143
     472:	8a 83       	std	Y+2, r24	; 0x02
	Buffer[1]=0b11<<REG_CTRL1_AGAIN; //max gain
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	8b 83       	std	Y+3, r24	; 0x03
	res=TWIMWrite(ADPS9960_ADDR,Buffer,2);
     478:	ce 01       	movw	r24, r28
     47a:	02 96       	adiw	r24, 0x02	; 2
     47c:	42 e0       	ldi	r20, 0x02	; 2
     47e:	bc 01       	movw	r22, r24
     480:	89 e3       	ldi	r24, 0x39	; 57
     482:	0e 94 f1 06 	call	0xde2	; 0xde2 <TWIMWrite>
     486:	89 83       	std	Y+1, r24	; 0x01

}
     488:	00 00       	nop
     48a:	23 96       	adiw	r28, 0x03	; 3
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	de bf       	out	0x3e, r29	; 62
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	0f 91       	pop	r16
     496:	08 95       	ret

00000498 <DriverAdps9960Get>:

void DriverAdps9960Get(uint16_t *Clear,uint16_t *Red,uint16_t *Green, uint16_t *Blue)
{
     498:	0f 93       	push	r16
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	6c 97       	sbiw	r28, 0x1c	; 28
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	8d 8b       	std	Y+21, r24	; 0x15
     4aa:	9e 8b       	std	Y+22, r25	; 0x16
     4ac:	6f 8b       	std	Y+23, r22	; 0x17
     4ae:	78 8f       	std	Y+24, r23	; 0x18
     4b0:	49 8f       	std	Y+25, r20	; 0x19
     4b2:	5a 8f       	std	Y+26, r21	; 0x1a
     4b4:	2b 8f       	std	Y+27, r18	; 0x1b
     4b6:	3c 8f       	std	Y+28, r19	; 0x1c
	uint8_t res;
	uint8_t Buffer[9];
	uint16_t *C=(uint16_t *) &(Buffer[0]),*R=(uint16_t *) &(Buffer[2]),*G=(uint16_t *) &(Buffer[4]),*B=(uint16_t *) &(Buffer[6]);
     4b8:	ce 01       	movw	r24, r28
     4ba:	0c 96       	adiw	r24, 0x0c	; 12
     4bc:	89 83       	std	Y+1, r24	; 0x01
     4be:	9a 83       	std	Y+2, r25	; 0x02
     4c0:	ce 01       	movw	r24, r28
     4c2:	0c 96       	adiw	r24, 0x0c	; 12
     4c4:	02 96       	adiw	r24, 0x02	; 2
     4c6:	8b 83       	std	Y+3, r24	; 0x03
     4c8:	9c 83       	std	Y+4, r25	; 0x04
     4ca:	ce 01       	movw	r24, r28
     4cc:	0c 96       	adiw	r24, 0x0c	; 12
     4ce:	04 96       	adiw	r24, 0x04	; 4
     4d0:	8d 83       	std	Y+5, r24	; 0x05
     4d2:	9e 83       	std	Y+6, r25	; 0x06
     4d4:	ce 01       	movw	r24, r28
     4d6:	0c 96       	adiw	r24, 0x0c	; 12
     4d8:	06 96       	adiw	r24, 0x06	; 6
     4da:	8f 83       	std	Y+7, r24	; 0x07
     4dc:	98 87       	std	Y+8, r25	; 0x08
	uint8_t *Status=&(Buffer[0]);
     4de:	ce 01       	movw	r24, r28
     4e0:	0c 96       	adiw	r24, 0x0c	; 12
     4e2:	89 87       	std	Y+9, r24	; 0x09
     4e4:	9a 87       	std	Y+10, r25	; 0x0a


	Buffer[0]=REG_ENABLE;
     4e6:	80 e8       	ldi	r24, 0x80	; 128
     4e8:	8c 87       	std	Y+12, r24	; 0x0c
	Buffer[1]=(1<<REG_ENABLE_PON) | (1<<REG_ENABLE_AEN);
     4ea:	83 e0       	ldi	r24, 0x03	; 3
     4ec:	8d 87       	std	Y+13, r24	; 0x0d
	res=TWIMWrite(ADPS9960_ADDR,Buffer,2);
     4ee:	ce 01       	movw	r24, r28
     4f0:	0c 96       	adiw	r24, 0x0c	; 12
     4f2:	42 e0       	ldi	r20, 0x02	; 2
     4f4:	bc 01       	movw	r22, r24
     4f6:	89 e3       	ldi	r24, 0x39	; 57
     4f8:	0e 94 f1 06 	call	0xde2	; 0xde2 <TWIMWrite>
     4fc:	8b 87       	std	Y+11, r24	; 0x0b


	do 
	{
		Buffer[0]=REG_STATUS;
     4fe:	83 e9       	ldi	r24, 0x93	; 147
     500:	8c 87       	std	Y+12, r24	; 0x0c
		res=TWIMWriteRead(ADPS9960_ADDR,Buffer,1,Buffer,1);
     502:	9e 01       	movw	r18, r28
     504:	24 5f       	subi	r18, 0xF4	; 244
     506:	3f 4f       	sbci	r19, 0xFF	; 255
     508:	ce 01       	movw	r24, r28
     50a:	0c 96       	adiw	r24, 0x0c	; 12
     50c:	01 e0       	ldi	r16, 0x01	; 1
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	bc 01       	movw	r22, r24
     512:	89 e3       	ldi	r24, 0x39	; 57
     514:	0e 94 10 07 	call	0xe20	; 0xe20 <TWIMWriteRead>
     518:	8b 87       	std	Y+11, r24	; 0x0b
		//printf ("STATUS:%d\r\n",Buffer[0]);
	} while (!(Buffer[0] & (1<<REG_STATUX_AVALID)) );
     51a:	8c 85       	ldd	r24, Y+12	; 0x0c
     51c:	88 2f       	mov	r24, r24
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	81 70       	andi	r24, 0x01	; 1
     522:	99 27       	eor	r25, r25
     524:	89 2b       	or	r24, r25
     526:	59 f3       	breq	.-42     	; 0x4fe <DriverAdps9960Get+0x66>


	Buffer[0]=REG_CDATA;
     528:	84 e9       	ldi	r24, 0x94	; 148
     52a:	8c 87       	std	Y+12, r24	; 0x0c
	res=TWIMWriteRead(ADPS9960_ADDR,Buffer,1,Buffer,8);
     52c:	9e 01       	movw	r18, r28
     52e:	24 5f       	subi	r18, 0xF4	; 244
     530:	3f 4f       	sbci	r19, 0xFF	; 255
     532:	ce 01       	movw	r24, r28
     534:	0c 96       	adiw	r24, 0x0c	; 12
     536:	08 e0       	ldi	r16, 0x08	; 8
     538:	41 e0       	ldi	r20, 0x01	; 1
     53a:	bc 01       	movw	r22, r24
     53c:	89 e3       	ldi	r24, 0x39	; 57
     53e:	0e 94 10 07 	call	0xe20	; 0xe20 <TWIMWriteRead>
     542:	8b 87       	std	Y+11, r24	; 0x0b
	//printf ("TwimWriteRead:%d\r\n",res);

	if (Clear!=NULL) *Clear=*C;	
     544:	8d 89       	ldd	r24, Y+21	; 0x15
     546:	9e 89       	ldd	r25, Y+22	; 0x16
     548:	89 2b       	or	r24, r25
     54a:	51 f0       	breq	.+20     	; 0x560 <DriverAdps9960Get+0xc8>
     54c:	89 81       	ldd	r24, Y+1	; 0x01
     54e:	9a 81       	ldd	r25, Y+2	; 0x02
     550:	fc 01       	movw	r30, r24
     552:	20 81       	ld	r18, Z
     554:	31 81       	ldd	r19, Z+1	; 0x01
     556:	8d 89       	ldd	r24, Y+21	; 0x15
     558:	9e 89       	ldd	r25, Y+22	; 0x16
     55a:	fc 01       	movw	r30, r24
     55c:	20 83       	st	Z, r18
     55e:	31 83       	std	Z+1, r19	; 0x01
	if (Red!=NULL) *Red=*R;
     560:	8f 89       	ldd	r24, Y+23	; 0x17
     562:	98 8d       	ldd	r25, Y+24	; 0x18
     564:	89 2b       	or	r24, r25
     566:	51 f0       	breq	.+20     	; 0x57c <DriverAdps9960Get+0xe4>
     568:	8b 81       	ldd	r24, Y+3	; 0x03
     56a:	9c 81       	ldd	r25, Y+4	; 0x04
     56c:	fc 01       	movw	r30, r24
     56e:	20 81       	ld	r18, Z
     570:	31 81       	ldd	r19, Z+1	; 0x01
     572:	8f 89       	ldd	r24, Y+23	; 0x17
     574:	98 8d       	ldd	r25, Y+24	; 0x18
     576:	fc 01       	movw	r30, r24
     578:	20 83       	st	Z, r18
     57a:	31 83       	std	Z+1, r19	; 0x01
	if (Green!=NULL) *Green=*G;
     57c:	89 8d       	ldd	r24, Y+25	; 0x19
     57e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     580:	89 2b       	or	r24, r25
     582:	51 f0       	breq	.+20     	; 0x598 <DriverAdps9960Get+0x100>
     584:	8d 81       	ldd	r24, Y+5	; 0x05
     586:	9e 81       	ldd	r25, Y+6	; 0x06
     588:	fc 01       	movw	r30, r24
     58a:	20 81       	ld	r18, Z
     58c:	31 81       	ldd	r19, Z+1	; 0x01
     58e:	89 8d       	ldd	r24, Y+25	; 0x19
     590:	9a 8d       	ldd	r25, Y+26	; 0x1a
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
     596:	31 83       	std	Z+1, r19	; 0x01
	if (Blue!=NULL) *Blue=*B;
     598:	8b 8d       	ldd	r24, Y+27	; 0x1b
     59a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     59c:	89 2b       	or	r24, r25
     59e:	51 f0       	breq	.+20     	; 0x5b4 <DriverAdps9960Get+0x11c>
     5a0:	8f 81       	ldd	r24, Y+7	; 0x07
     5a2:	98 85       	ldd	r25, Y+8	; 0x08
     5a4:	fc 01       	movw	r30, r24
     5a6:	20 81       	ld	r18, Z
     5a8:	31 81       	ldd	r19, Z+1	; 0x01
     5aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5ae:	fc 01       	movw	r30, r24
     5b0:	20 83       	st	Z, r18
     5b2:	31 83       	std	Z+1, r19	; 0x01

     5b4:	00 00       	nop
     5b6:	6c 96       	adiw	r28, 0x1c	; 28
     5b8:	cd bf       	out	0x3d, r28	; 61
     5ba:	de bf       	out	0x3e, r29	; 62
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	0f 91       	pop	r16
     5c2:	08 95       	ret

000005c4 <InitInterrupts>:
 *
 * Created: 24/10/2023 14:49:33
 *  Author: pjlys
 */ 

void InitInterrupts() {
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
	//Enable sleep
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     5cc:	88 e4       	ldi	r24, 0x48	; 72
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	28 e4       	ldi	r18, 0x48	; 72
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	f9 01       	movw	r30, r18
     5d6:	20 81       	ld	r18, Z
     5d8:	21 7f       	andi	r18, 0xF1	; 241
     5da:	24 60       	ori	r18, 0x04	; 4
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18
	sleep_enable();
     5e0:	88 e4       	ldi	r24, 0x48	; 72
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	28 e4       	ldi	r18, 0x48	; 72
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	f9 01       	movw	r30, r18
     5ea:	20 81       	ld	r18, Z
     5ec:	21 60       	ori	r18, 0x01	; 1
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18
	// Wake up
	PORTF.INTCTRL = 0b0011;			//High level interrupts on INT0
     5f2:	80 ea       	ldi	r24, 0xA0	; 160
     5f4:	96 e0       	ldi	r25, 0x06	; 6
     5f6:	23 e0       	ldi	r18, 0x03	; 3
     5f8:	fc 01       	movw	r30, r24
     5fa:	21 87       	std	Z+9, r18	; 0x09
	PORTF.INT0MASK = 0b10000000;	//Set interrupt on SWC (pin7)
     5fc:	80 ea       	ldi	r24, 0xA0	; 160
     5fe:	96 e0       	ldi	r25, 0x06	; 6
     600:	20 e8       	ldi	r18, 0x80	; 128
     602:	fc 01       	movw	r30, r24
     604:	22 87       	std	Z+10, r18	; 0x0a
	PORTF.PIN7CTRL = 0b00000001;	//No inv; Totem; Rising
     606:	80 ea       	ldi	r24, 0xA0	; 160
     608:	96 e0       	ldi	r25, 0x06	; 6
     60a:	21 e0       	ldi	r18, 0x01	; 1
     60c:	fc 01       	movw	r30, r24
     60e:	27 8b       	std	Z+23, r18	; 0x17
	//Interrupt handling
	PMIC.CTRL = 0b10000111;			//round robin scheduling + all interrupts enabled
     610:	80 ea       	ldi	r24, 0xA0	; 160
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	27 e8       	ldi	r18, 0x87	; 135
     616:	fc 01       	movw	r30, r24
     618:	22 83       	std	Z+2, r18	; 0x02
	SREG = 0b10000000;				//enable global interrupt
     61a:	8f e3       	ldi	r24, 0x3F	; 63
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	20 e8       	ldi	r18, 0x80	; 128
     620:	fc 01       	movw	r30, r24
     622:	20 83       	st	Z, r18
	
	// Start timer
	TCC0.CTRLA = 0b0111;		//Prescaler = 1024 --> f = fclk /1024 = 31.25 KHz
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	98 e0       	ldi	r25, 0x08	; 8
     628:	27 e0       	ldi	r18, 0x07	; 7
     62a:	fc 01       	movw	r30, r24
     62c:	20 83       	st	Z, r18
	TCC0.CTRLB = 0;				//Normal mode
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	98 e0       	ldi	r25, 0x08	; 8
     632:	fc 01       	movw	r30, r24
     634:	11 82       	std	Z+1, r1	; 0x01
	TCC0.PER = 60000;			//Trigger timer every 1s
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	98 e0       	ldi	r25, 0x08	; 8
     63a:	20 e6       	ldi	r18, 0x60	; 96
     63c:	3a ee       	ldi	r19, 0xEA	; 234
     63e:	fc 01       	movw	r30, r24
     640:	26 a3       	std	Z+38, r18	; 0x26
     642:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.INTCTRLA = 0b0010;		//Timer error interrupt level = high; Timer overflow interrupt level = medium
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	98 e0       	ldi	r25, 0x08	; 8
     648:	22 e0       	ldi	r18, 0x02	; 2
     64a:	fc 01       	movw	r30, r24
     64c:	26 83       	std	Z+6, r18	; 0x06
}
     64e:	00 00       	nop
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <getSleepFlag>:

bool getSleepFlag(void) {
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
	return timerExpired;
     65e:	80 91 9d 20 	lds	r24, 0x209D	; 0x80209d <timerExpired>
}
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	08 95       	ret

00000668 <clearSleepFlag>:

void clearSleepFlag(void) {
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
	timerExpired = false;
     670:	10 92 9d 20 	sts	0x209D, r1	; 0x80209d <timerExpired>
}
     674:	00 00       	nop
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <__vector_104>:

ISR(PORTF_INT0_vect){
     67c:	1f 92       	push	r1
     67e:	0f 92       	push	r0
     680:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     684:	0f 92       	push	r0
     686:	11 24       	eor	r1, r1
     688:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     68c:	0f 92       	push	r0
     68e:	2f 93       	push	r18
     690:	3f 93       	push	r19
     692:	4f 93       	push	r20
     694:	5f 93       	push	r21
     696:	6f 93       	push	r22
     698:	7f 93       	push	r23
     69a:	8f 93       	push	r24
     69c:	9f 93       	push	r25
     69e:	af 93       	push	r26
     6a0:	bf 93       	push	r27
     6a2:	ef 93       	push	r30
     6a4:	ff 93       	push	r31
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
	printf("Woken up");
     6ae:	83 e3       	ldi	r24, 0x33	; 51
     6b0:	90 e2       	ldi	r25, 0x20	; 32
     6b2:	89 2f       	mov	r24, r25
     6b4:	8f 93       	push	r24
     6b6:	83 e3       	ldi	r24, 0x33	; 51
     6b8:	90 e2       	ldi	r25, 0x20	; 32
     6ba:	8f 93       	push	r24
     6bc:	0e 94 af 10 	call	0x215e	; 0x215e <printf>
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
}
     6c4:	00 00       	nop
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	ff 91       	pop	r31
     6cc:	ef 91       	pop	r30
     6ce:	bf 91       	pop	r27
     6d0:	af 91       	pop	r26
     6d2:	9f 91       	pop	r25
     6d4:	8f 91       	pop	r24
     6d6:	7f 91       	pop	r23
     6d8:	6f 91       	pop	r22
     6da:	5f 91       	pop	r21
     6dc:	4f 91       	pop	r20
     6de:	3f 91       	pop	r19
     6e0:	2f 91       	pop	r18
     6e2:	0f 90       	pop	r0
     6e4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     6e8:	0f 90       	pop	r0
     6ea:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     6ee:	0f 90       	pop	r0
     6f0:	1f 90       	pop	r1
     6f2:	18 95       	reti

000006f4 <__vector_14>:

ISR(TCC0_OVF_vect) {
     6f4:	1f 92       	push	r1
     6f6:	0f 92       	push	r0
     6f8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     6fc:	0f 92       	push	r0
     6fe:	11 24       	eor	r1, r1
     700:	8f 93       	push	r24
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
	timerExpired = true;
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	80 93 9d 20 	sts	0x209D, r24	; 0x80209d <timerExpired>
}
     710:	00 00       	nop
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	8f 91       	pop	r24
     718:	0f 90       	pop	r0
     71a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     71e:	0f 90       	pop	r0
     720:	1f 90       	pop	r1
     722:	18 95       	reti

00000724 <DriverLedInit>:
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	80 e2       	ldi	r24, 0x20	; 32
     72e:	96 e0       	ldi	r25, 0x06	; 6
     730:	27 e0       	ldi	r18, 0x07	; 7
     732:	fc 01       	movw	r30, r24
     734:	21 83       	std	Z+1, r18	; 0x01
     736:	80 e2       	ldi	r24, 0x20	; 32
     738:	96 e0       	ldi	r25, 0x06	; 6
     73a:	28 e5       	ldi	r18, 0x58	; 88
     73c:	fc 01       	movw	r30, r24
     73e:	20 8b       	std	Z+16, r18	; 0x10
     740:	80 e2       	ldi	r24, 0x20	; 32
     742:	96 e0       	ldi	r25, 0x06	; 6
     744:	28 e5       	ldi	r18, 0x58	; 88
     746:	fc 01       	movw	r30, r24
     748:	21 8b       	std	Z+17, r18	; 0x11
     74a:	80 e2       	ldi	r24, 0x20	; 32
     74c:	96 e0       	ldi	r25, 0x06	; 6
     74e:	28 e5       	ldi	r18, 0x58	; 88
     750:	fc 01       	movw	r30, r24
     752:	22 8b       	std	Z+18, r18	; 0x12
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	96 e0       	ldi	r25, 0x06	; 6
     758:	20 e8       	ldi	r18, 0x80	; 128
     75a:	fc 01       	movw	r30, r24
     75c:	21 83       	std	Z+1, r18	; 0x01
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	96 e0       	ldi	r25, 0x06	; 6
     762:	28 e5       	ldi	r18, 0x58	; 88
     764:	fc 01       	movw	r30, r24
     766:	27 8b       	std	Z+23, r18	; 0x17
     768:	00 00       	nop
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	08 95       	ret

00000770 <DriverLedWrite>:
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	1f 92       	push	r1
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	89 83       	std	Y+1, r24	; 0x01
     77c:	80 e2       	ldi	r24, 0x20	; 32
     77e:	96 e0       	ldi	r25, 0x06	; 6
     780:	29 81       	ldd	r18, Y+1	; 0x01
     782:	27 70       	andi	r18, 0x07	; 7
     784:	fc 01       	movw	r30, r24
     786:	24 83       	std	Z+4, r18	; 0x04
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	96 e0       	ldi	r25, 0x06	; 6
     78c:	29 81       	ldd	r18, Y+1	; 0x01
     78e:	28 70       	andi	r18, 0x08	; 8
     790:	22 95       	swap	r18
     792:	20 7f       	andi	r18, 0xF0	; 240
     794:	fc 01       	movw	r30, r24
     796:	24 83       	std	Z+4, r18	; 0x04
     798:	00 00       	nop
     79a:	0f 90       	pop	r0
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	08 95       	ret

000007a2 <DriverMotorInit>:
EncoderStruct DriverMotorGetEncoder(void){
	EncoderStruct st;
	st.Cnt1 = motor1Pos;
	st.Cnt2 = motor2Pos;
	return st;
}
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	80 ea       	ldi	r24, 0xA0	; 160
     7ac:	96 e0       	ldi	r25, 0x06	; 6
     7ae:	2f e3       	ldi	r18, 0x3F	; 63
     7b0:	fc 01       	movw	r30, r24
     7b2:	21 83       	std	Z+1, r18	; 0x01
     7b4:	80 ea       	ldi	r24, 0xA0	; 160
     7b6:	96 e0       	ldi	r25, 0x06	; 6
     7b8:	28 e5       	ldi	r18, 0x58	; 88
     7ba:	fc 01       	movw	r30, r24
     7bc:	25 8b       	std	Z+21, r18	; 0x15
     7be:	80 ea       	ldi	r24, 0xA0	; 160
     7c0:	96 e0       	ldi	r25, 0x06	; 6
     7c2:	28 e5       	ldi	r18, 0x58	; 88
     7c4:	fc 01       	movw	r30, r24
     7c6:	24 8b       	std	Z+20, r18	; 0x14
     7c8:	80 ea       	ldi	r24, 0xA0	; 160
     7ca:	96 e0       	ldi	r25, 0x06	; 6
     7cc:	20 e1       	ldi	r18, 0x10	; 16
     7ce:	fc 01       	movw	r30, r24
     7d0:	23 8b       	std	Z+19, r18	; 0x13
     7d2:	80 ea       	ldi	r24, 0xA0	; 160
     7d4:	96 e0       	ldi	r25, 0x06	; 6
     7d6:	20 e1       	ldi	r18, 0x10	; 16
     7d8:	fc 01       	movw	r30, r24
     7da:	22 8b       	std	Z+18, r18	; 0x12
     7dc:	80 ea       	ldi	r24, 0xA0	; 160
     7de:	96 e0       	ldi	r25, 0x06	; 6
     7e0:	20 e1       	ldi	r18, 0x10	; 16
     7e2:	fc 01       	movw	r30, r24
     7e4:	21 8b       	std	Z+17, r18	; 0x11
     7e6:	80 ea       	ldi	r24, 0xA0	; 160
     7e8:	96 e0       	ldi	r25, 0x06	; 6
     7ea:	20 e1       	ldi	r18, 0x10	; 16
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 8b       	std	Z+16, r18	; 0x10
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	9b e0       	ldi	r25, 0x0B	; 11
     7f4:	27 e0       	ldi	r18, 0x07	; 7
     7f6:	fc 01       	movw	r30, r24
     7f8:	20 83       	st	Z, r18
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	9b e0       	ldi	r25, 0x0B	; 11
     7fe:	23 ef       	ldi	r18, 0xF3	; 243
     800:	fc 01       	movw	r30, r24
     802:	21 83       	std	Z+1, r18	; 0x01
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	9b e0       	ldi	r25, 0x0B	; 11
     808:	2f ef       	ldi	r18, 0xFF	; 255
     80a:	3f e0       	ldi	r19, 0x0F	; 15
     80c:	fc 01       	movw	r30, r24
     80e:	26 a3       	std	Z+38, r18	; 0x26
     810:	37 a3       	std	Z+39, r19	; 0x27
     812:	80 e4       	ldi	r24, 0x40	; 64
     814:	96 e0       	ldi	r25, 0x06	; 6
     816:	25 e0       	ldi	r18, 0x05	; 5
     818:	fc 01       	movw	r30, r24
     81a:	21 87       	std	Z+9, r18	; 0x09
     81c:	80 e4       	ldi	r24, 0x40	; 64
     81e:	96 e0       	ldi	r25, 0x06	; 6
     820:	20 e8       	ldi	r18, 0x80	; 128
     822:	fc 01       	movw	r30, r24
     824:	22 87       	std	Z+10, r18	; 0x0a
     826:	80 e4       	ldi	r24, 0x40	; 64
     828:	96 e0       	ldi	r25, 0x06	; 6
     82a:	20 e4       	ldi	r18, 0x40	; 64
     82c:	fc 01       	movw	r30, r24
     82e:	23 87       	std	Z+11, r18	; 0x0b
     830:	80 e4       	ldi	r24, 0x40	; 64
     832:	96 e0       	ldi	r25, 0x06	; 6
     834:	fc 01       	movw	r30, r24
     836:	17 8a       	std	Z+23, r1	; 0x17
     838:	80 e4       	ldi	r24, 0x40	; 64
     83a:	96 e0       	ldi	r25, 0x06	; 6
     83c:	fc 01       	movw	r30, r24
     83e:	16 8a       	std	Z+22, r1	; 0x16
     840:	80 e8       	ldi	r24, 0x80	; 128
     842:	96 e0       	ldi	r25, 0x06	; 6
     844:	25 e0       	ldi	r18, 0x05	; 5
     846:	fc 01       	movw	r30, r24
     848:	21 87       	std	Z+9, r18	; 0x09
     84a:	80 e8       	ldi	r24, 0x80	; 128
     84c:	96 e0       	ldi	r25, 0x06	; 6
     84e:	20 e8       	ldi	r18, 0x80	; 128
     850:	fc 01       	movw	r30, r24
     852:	22 87       	std	Z+10, r18	; 0x0a
     854:	80 e8       	ldi	r24, 0x80	; 128
     856:	96 e0       	ldi	r25, 0x06	; 6
     858:	20 e4       	ldi	r18, 0x40	; 64
     85a:	fc 01       	movw	r30, r24
     85c:	23 87       	std	Z+11, r18	; 0x0b
     85e:	80 e8       	ldi	r24, 0x80	; 128
     860:	96 e0       	ldi	r25, 0x06	; 6
     862:	fc 01       	movw	r30, r24
     864:	17 8a       	std	Z+23, r1	; 0x17
     866:	80 e8       	ldi	r24, 0x80	; 128
     868:	96 e0       	ldi	r25, 0x06	; 6
     86a:	fc 01       	movw	r30, r24
     86c:	16 8a       	std	Z+22, r1	; 0x16
     86e:	00 00       	nop
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <DriverMotorSet>:
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	00 d0       	rcall	.+0      	; 0x87c <DriverMotorSet+0x6>
     87c:	1f 92       	push	r1
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	89 83       	std	Y+1, r24	; 0x01
     884:	9a 83       	std	Y+2, r25	; 0x02
     886:	6b 83       	std	Y+3, r22	; 0x03
     888:	7c 83       	std	Y+4, r23	; 0x04
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	9a 81       	ldd	r25, Y+2	; 0x02
     88e:	99 23       	and	r25, r25
     890:	84 f4       	brge	.+32     	; 0x8b2 <DriverMotorSet+0x3c>
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	9b e0       	ldi	r25, 0x0B	; 11
     896:	29 81       	ldd	r18, Y+1	; 0x01
     898:	3a 81       	ldd	r19, Y+2	; 0x02
     89a:	31 95       	neg	r19
     89c:	21 95       	neg	r18
     89e:	31 09       	sbc	r19, r1
     8a0:	fc 01       	movw	r30, r24
     8a2:	20 a7       	std	Z+40, r18	; 0x28
     8a4:	31 a7       	std	Z+41, r19	; 0x29
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	9b e0       	ldi	r25, 0x0B	; 11
     8aa:	fc 01       	movw	r30, r24
     8ac:	12 a6       	std	Z+42, r1	; 0x2a
     8ae:	13 a6       	std	Z+43, r1	; 0x2b
     8b0:	0c c0       	rjmp	.+24     	; 0x8ca <DriverMotorSet+0x54>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	9b e0       	ldi	r25, 0x0B	; 11
     8b6:	fc 01       	movw	r30, r24
     8b8:	10 a6       	std	Z+40, r1	; 0x28
     8ba:	11 a6       	std	Z+41, r1	; 0x29
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	9b e0       	ldi	r25, 0x0B	; 11
     8c0:	29 81       	ldd	r18, Y+1	; 0x01
     8c2:	3a 81       	ldd	r19, Y+2	; 0x02
     8c4:	fc 01       	movw	r30, r24
     8c6:	22 a7       	std	Z+42, r18	; 0x2a
     8c8:	33 a7       	std	Z+43, r19	; 0x2b
     8ca:	8b 81       	ldd	r24, Y+3	; 0x03
     8cc:	9c 81       	ldd	r25, Y+4	; 0x04
     8ce:	18 16       	cp	r1, r24
     8d0:	19 06       	cpc	r1, r25
     8d2:	6c f4       	brge	.+26     	; 0x8ee <DriverMotorSet+0x78>
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	9b e0       	ldi	r25, 0x0B	; 11
     8d8:	2b 81       	ldd	r18, Y+3	; 0x03
     8da:	3c 81       	ldd	r19, Y+4	; 0x04
     8dc:	fc 01       	movw	r30, r24
     8de:	24 a7       	std	Z+44, r18	; 0x2c
     8e0:	35 a7       	std	Z+45, r19	; 0x2d
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	9b e0       	ldi	r25, 0x0B	; 11
     8e6:	fc 01       	movw	r30, r24
     8e8:	16 a6       	std	Z+46, r1	; 0x2e
     8ea:	17 a6       	std	Z+47, r1	; 0x2f
     8ec:	0f c0       	rjmp	.+30     	; 0x90c <DriverMotorSet+0x96>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	9b e0       	ldi	r25, 0x0B	; 11
     8f2:	fc 01       	movw	r30, r24
     8f4:	14 a6       	std	Z+44, r1	; 0x2c
     8f6:	15 a6       	std	Z+45, r1	; 0x2d
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9b e0       	ldi	r25, 0x0B	; 11
     8fc:	2b 81       	ldd	r18, Y+3	; 0x03
     8fe:	3c 81       	ldd	r19, Y+4	; 0x04
     900:	31 95       	neg	r19
     902:	21 95       	neg	r18
     904:	31 09       	sbc	r19, r1
     906:	fc 01       	movw	r30, r24
     908:	26 a7       	std	Z+46, r18	; 0x2e
     90a:	37 a7       	std	Z+47, r19	; 0x2f
     90c:	00 00       	nop
     90e:	24 96       	adiw	r28, 0x04	; 4
     910:	cd bf       	out	0x3d, r28	; 61
     912:	de bf       	out	0x3e, r29	; 62
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <__vector_2>:


//###ISRs###
ISR(PORTC_INT0_vect){ //interrupt op pin C7
     91a:	1f 92       	push	r1
     91c:	0f 92       	push	r0
     91e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     922:	0f 92       	push	r0
     924:	11 24       	eor	r1, r1
     926:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     92a:	0f 92       	push	r0
     92c:	8f 93       	push	r24
     92e:	9f 93       	push	r25
     930:	ef 93       	push	r30
     932:	ff 93       	push	r31
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	1f 92       	push	r1
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
	char input = PORTC.IN>>6;
     93e:	80 e4       	ldi	r24, 0x40	; 64
     940:	96 e0       	ldi	r25, 0x06	; 6
     942:	fc 01       	movw	r30, r24
     944:	80 85       	ldd	r24, Z+8	; 0x08
     946:	82 95       	swap	r24
     948:	86 95       	lsr	r24
     94a:	86 95       	lsr	r24
     94c:	83 70       	andi	r24, 0x03	; 3
     94e:	89 83       	std	Y+1, r24	; 0x01
	if (input&0b1)				//als pin 6 hoog is
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	88 2f       	mov	r24, r24
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	81 70       	andi	r24, 0x01	; 1
     958:	99 27       	eor	r25, r25
     95a:	89 2b       	or	r24, r25
     95c:	d9 f0       	breq	.+54     	; 0x994 <__vector_2+0x7a>
	{
		if (input&0b10)				//als rising edge op pin 7
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	88 2f       	mov	r24, r24
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	82 70       	andi	r24, 0x02	; 2
     966:	99 27       	eor	r25, r25
     968:	89 2b       	or	r24, r25
     96a:	51 f0       	breq	.+20     	; 0x980 <__vector_2+0x66>
		{
			motor1Pos--;					//teller--
     96c:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <motor1Pos>
     970:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <motor1Pos+0x1>
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <motor1Pos>
     97a:	90 93 9f 20 	sts	0x209F, r25	; 0x80209f <motor1Pos+0x1>
			motor1Pos++;					//teller++
			} else {					//als falling edge op pin7
			motor1Pos--;					//teller--
		}
	}
}
     97e:	24 c0       	rjmp	.+72     	; 0x9c8 <__vector_2+0xae>
	{
		if (input&0b10)				//als rising edge op pin 7
		{
			motor1Pos--;					//teller--
			} else{						//als falling edge op pin7
			motor1Pos++;					//teller++
     980:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <motor1Pos>
     984:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <motor1Pos+0x1>
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <motor1Pos>
     98e:	90 93 9f 20 	sts	0x209F, r25	; 0x80209f <motor1Pos+0x1>
			motor1Pos++;					//teller++
			} else {					//als falling edge op pin7
			motor1Pos--;					//teller--
		}
	}
}
     992:	1a c0       	rjmp	.+52     	; 0x9c8 <__vector_2+0xae>
			motor1Pos--;					//teller--
			} else{						//als falling edge op pin7
			motor1Pos++;					//teller++
		}
		} else {					//als pin 6 laag is
		if (input&0b10)				//als rising edge op pin 7
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	88 2f       	mov	r24, r24
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	82 70       	andi	r24, 0x02	; 2
     99c:	99 27       	eor	r25, r25
     99e:	89 2b       	or	r24, r25
     9a0:	51 f0       	breq	.+20     	; 0x9b6 <__vector_2+0x9c>
		{
			motor1Pos++;					//teller++
     9a2:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <motor1Pos>
     9a6:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <motor1Pos+0x1>
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <motor1Pos>
     9b0:	90 93 9f 20 	sts	0x209F, r25	; 0x80209f <motor1Pos+0x1>
			} else {					//als falling edge op pin7
			motor1Pos--;					//teller--
		}
	}
}
     9b4:	09 c0       	rjmp	.+18     	; 0x9c8 <__vector_2+0xae>
		} else {					//als pin 6 laag is
		if (input&0b10)				//als rising edge op pin 7
		{
			motor1Pos++;					//teller++
			} else {					//als falling edge op pin7
			motor1Pos--;					//teller--
     9b6:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <motor1Pos>
     9ba:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <motor1Pos+0x1>
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <motor1Pos>
     9c4:	90 93 9f 20 	sts	0x209F, r25	; 0x80209f <motor1Pos+0x1>
		}
	}
}
     9c8:	00 00       	nop
     9ca:	0f 90       	pop	r0
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	ff 91       	pop	r31
     9d2:	ef 91       	pop	r30
     9d4:	9f 91       	pop	r25
     9d6:	8f 91       	pop	r24
     9d8:	0f 90       	pop	r0
     9da:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     9de:	0f 90       	pop	r0
     9e0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     9e4:	0f 90       	pop	r0
     9e6:	1f 90       	pop	r1
     9e8:	18 95       	reti

000009ea <__vector_3>:

ISR(PORTC_INT1_vect){	//interrupt op pin C6
     9ea:	1f 92       	push	r1
     9ec:	0f 92       	push	r0
     9ee:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     9f2:	0f 92       	push	r0
     9f4:	11 24       	eor	r1, r1
     9f6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     9fa:	0f 92       	push	r0
     9fc:	8f 93       	push	r24
     9fe:	9f 93       	push	r25
     a00:	ef 93       	push	r30
     a02:	ff 93       	push	r31
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	1f 92       	push	r1
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
	char input = PORTC.IN>>6;
     a0e:	80 e4       	ldi	r24, 0x40	; 64
     a10:	96 e0       	ldi	r25, 0x06	; 6
     a12:	fc 01       	movw	r30, r24
     a14:	80 85       	ldd	r24, Z+8	; 0x08
     a16:	82 95       	swap	r24
     a18:	86 95       	lsr	r24
     a1a:	86 95       	lsr	r24
     a1c:	83 70       	andi	r24, 0x03	; 3
     a1e:	89 83       	std	Y+1, r24	; 0x01
	if (input&0b10)			//als C7 hoog is
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	88 2f       	mov	r24, r24
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	82 70       	andi	r24, 0x02	; 2
     a28:	99 27       	eor	r25, r25
     a2a:	89 2b       	or	r24, r25
     a2c:	d9 f0       	breq	.+54     	; 0xa64 <__vector_3+0x7a>
	{
		if (input&0b1)			//als RE C6	
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	88 2f       	mov	r24, r24
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	81 70       	andi	r24, 0x01	; 1
     a36:	99 27       	eor	r25, r25
     a38:	89 2b       	or	r24, r25
     a3a:	51 f0       	breq	.+20     	; 0xa50 <__vector_3+0x66>
		{
			motor1Pos++;				//teller++
     a3c:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <motor1Pos>
     a40:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <motor1Pos+0x1>
     a44:	01 96       	adiw	r24, 0x01	; 1
     a46:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <motor1Pos>
     a4a:	90 93 9f 20 	sts	0x209F, r25	; 0x80209f <motor1Pos+0x1>
			motor1Pos--;				//teller++
		} else {				//als FE C6
			motor1Pos++;				//teller--
		}
	}
}
     a4e:	24 c0       	rjmp	.+72     	; 0xa98 <__vector_3+0xae>
	{
		if (input&0b1)			//als RE C6	
		{
			motor1Pos++;				//teller++
		} else {				//als FE C6
			motor1Pos--;				//teller--
     a50:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <motor1Pos>
     a54:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <motor1Pos+0x1>
     a58:	01 97       	sbiw	r24, 0x01	; 1
     a5a:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <motor1Pos>
     a5e:	90 93 9f 20 	sts	0x209F, r25	; 0x80209f <motor1Pos+0x1>
			motor1Pos--;				//teller++
		} else {				//als FE C6
			motor1Pos++;				//teller--
		}
	}
}
     a62:	1a c0       	rjmp	.+52     	; 0xa98 <__vector_3+0xae>
			motor1Pos++;				//teller++
		} else {				//als FE C6
			motor1Pos--;				//teller--
		}
	} else {				//als C7 laag is
		if (input&0b10)			//als RE C6
     a64:	89 81       	ldd	r24, Y+1	; 0x01
     a66:	88 2f       	mov	r24, r24
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	82 70       	andi	r24, 0x02	; 2
     a6c:	99 27       	eor	r25, r25
     a6e:	89 2b       	or	r24, r25
     a70:	51 f0       	breq	.+20     	; 0xa86 <__vector_3+0x9c>
		{					
			motor1Pos--;				//teller++
     a72:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <motor1Pos>
     a76:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <motor1Pos+0x1>
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <motor1Pos>
     a80:	90 93 9f 20 	sts	0x209F, r25	; 0x80209f <motor1Pos+0x1>
		} else {				//als FE C6
			motor1Pos++;				//teller--
		}
	}
}
     a84:	09 c0       	rjmp	.+18     	; 0xa98 <__vector_3+0xae>
	} else {				//als C7 laag is
		if (input&0b10)			//als RE C6
		{					
			motor1Pos--;				//teller++
		} else {				//als FE C6
			motor1Pos++;				//teller--
     a86:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <motor1Pos>
     a8a:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <motor1Pos+0x1>
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <motor1Pos>
     a94:	90 93 9f 20 	sts	0x209F, r25	; 0x80209f <motor1Pos+0x1>
		}
	}
}
     a98:	00 00       	nop
     a9a:	0f 90       	pop	r0
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	ff 91       	pop	r31
     aa2:	ef 91       	pop	r30
     aa4:	9f 91       	pop	r25
     aa6:	8f 91       	pop	r24
     aa8:	0f 90       	pop	r0
     aaa:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     aae:	0f 90       	pop	r0
     ab0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     ab4:	0f 90       	pop	r0
     ab6:	1f 90       	pop	r1
     ab8:	18 95       	reti

00000aba <__vector_43>:

ISR(PORTE_INT0_vect){ //interrupt op pin E7
     aba:	1f 92       	push	r1
     abc:	0f 92       	push	r0
     abe:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     ac2:	0f 92       	push	r0
     ac4:	11 24       	eor	r1, r1
     ac6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     aca:	0f 92       	push	r0
     acc:	8f 93       	push	r24
     ace:	9f 93       	push	r25
     ad0:	ef 93       	push	r30
     ad2:	ff 93       	push	r31
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	1f 92       	push	r1
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
	char input = PORTE.IN>>6;
     ade:	80 e8       	ldi	r24, 0x80	; 128
     ae0:	96 e0       	ldi	r25, 0x06	; 6
     ae2:	fc 01       	movw	r30, r24
     ae4:	80 85       	ldd	r24, Z+8	; 0x08
     ae6:	82 95       	swap	r24
     ae8:	86 95       	lsr	r24
     aea:	86 95       	lsr	r24
     aec:	83 70       	andi	r24, 0x03	; 3
     aee:	89 83       	std	Y+1, r24	; 0x01
	if (input&0b1)				//als pin 6 hoog is
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	88 2f       	mov	r24, r24
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	81 70       	andi	r24, 0x01	; 1
     af8:	99 27       	eor	r25, r25
     afa:	89 2b       	or	r24, r25
     afc:	d9 f0       	breq	.+54     	; 0xb34 <__vector_43+0x7a>
	{
		if (input&0b10)				//als rising edge op pin 7
     afe:	89 81       	ldd	r24, Y+1	; 0x01
     b00:	88 2f       	mov	r24, r24
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	82 70       	andi	r24, 0x02	; 2
     b06:	99 27       	eor	r25, r25
     b08:	89 2b       	or	r24, r25
     b0a:	51 f0       	breq	.+20     	; 0xb20 <__vector_43+0x66>
		{
			motor2Pos--;					//teller--
     b0c:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <motor2Pos>
     b10:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <motor2Pos+0x1>
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	80 93 a0 20 	sts	0x20A0, r24	; 0x8020a0 <motor2Pos>
     b1a:	90 93 a1 20 	sts	0x20A1, r25	; 0x8020a1 <motor2Pos+0x1>
			motor2Pos++;					//teller++
			} else {					//als falling edge op pin7
			motor2Pos--;					//teller--
		}
	}
}
     b1e:	24 c0       	rjmp	.+72     	; 0xb68 <__vector_43+0xae>
	{
		if (input&0b10)				//als rising edge op pin 7
		{
			motor2Pos--;					//teller--
			} else{						//als falling edge op pin7
			motor2Pos++;					//teller++
     b20:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <motor2Pos>
     b24:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <motor2Pos+0x1>
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	80 93 a0 20 	sts	0x20A0, r24	; 0x8020a0 <motor2Pos>
     b2e:	90 93 a1 20 	sts	0x20A1, r25	; 0x8020a1 <motor2Pos+0x1>
			motor2Pos++;					//teller++
			} else {					//als falling edge op pin7
			motor2Pos--;					//teller--
		}
	}
}
     b32:	1a c0       	rjmp	.+52     	; 0xb68 <__vector_43+0xae>
			motor2Pos--;					//teller--
			} else{						//als falling edge op pin7
			motor2Pos++;					//teller++
		}
		} else {				//als pin 6 laag is
		if (input&0b10)				//als rising edge op pin 7
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	88 2f       	mov	r24, r24
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	82 70       	andi	r24, 0x02	; 2
     b3c:	99 27       	eor	r25, r25
     b3e:	89 2b       	or	r24, r25
     b40:	51 f0       	breq	.+20     	; 0xb56 <__vector_43+0x9c>
		{
			motor2Pos++;					//teller++
     b42:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <motor2Pos>
     b46:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <motor2Pos+0x1>
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	80 93 a0 20 	sts	0x20A0, r24	; 0x8020a0 <motor2Pos>
     b50:	90 93 a1 20 	sts	0x20A1, r25	; 0x8020a1 <motor2Pos+0x1>
			} else {					//als falling edge op pin7
			motor2Pos--;					//teller--
		}
	}
}
     b54:	09 c0       	rjmp	.+18     	; 0xb68 <__vector_43+0xae>
		} else {				//als pin 6 laag is
		if (input&0b10)				//als rising edge op pin 7
		{
			motor2Pos++;					//teller++
			} else {					//als falling edge op pin7
			motor2Pos--;					//teller--
     b56:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <motor2Pos>
     b5a:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <motor2Pos+0x1>
     b5e:	01 97       	sbiw	r24, 0x01	; 1
     b60:	80 93 a0 20 	sts	0x20A0, r24	; 0x8020a0 <motor2Pos>
     b64:	90 93 a1 20 	sts	0x20A1, r25	; 0x8020a1 <motor2Pos+0x1>
		}
	}
}
     b68:	00 00       	nop
     b6a:	0f 90       	pop	r0
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	ff 91       	pop	r31
     b72:	ef 91       	pop	r30
     b74:	9f 91       	pop	r25
     b76:	8f 91       	pop	r24
     b78:	0f 90       	pop	r0
     b7a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b7e:	0f 90       	pop	r0
     b80:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     b84:	0f 90       	pop	r0
     b86:	1f 90       	pop	r1
     b88:	18 95       	reti

00000b8a <__vector_44>:

ISR(PORTE_INT1_vect){	//Interrupt op E6
     b8a:	1f 92       	push	r1
     b8c:	0f 92       	push	r0
     b8e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     b92:	0f 92       	push	r0
     b94:	11 24       	eor	r1, r1
     b96:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     b9a:	0f 92       	push	r0
     b9c:	8f 93       	push	r24
     b9e:	9f 93       	push	r25
     ba0:	ef 93       	push	r30
     ba2:	ff 93       	push	r31
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	1f 92       	push	r1
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
	char input = PORTE.IN>>6;
     bae:	80 e8       	ldi	r24, 0x80	; 128
     bb0:	96 e0       	ldi	r25, 0x06	; 6
     bb2:	fc 01       	movw	r30, r24
     bb4:	80 85       	ldd	r24, Z+8	; 0x08
     bb6:	82 95       	swap	r24
     bb8:	86 95       	lsr	r24
     bba:	86 95       	lsr	r24
     bbc:	83 70       	andi	r24, 0x03	; 3
     bbe:	89 83       	std	Y+1, r24	; 0x01
	if (input&0b10)			//als E7 hoog is
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	88 2f       	mov	r24, r24
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	82 70       	andi	r24, 0x02	; 2
     bc8:	99 27       	eor	r25, r25
     bca:	89 2b       	or	r24, r25
     bcc:	d9 f0       	breq	.+54     	; 0xc04 <__vector_44+0x7a>
	{
		if (input&0b1)			//als RE E6
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	88 2f       	mov	r24, r24
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	81 70       	andi	r24, 0x01	; 1
     bd6:	99 27       	eor	r25, r25
     bd8:	89 2b       	or	r24, r25
     bda:	51 f0       	breq	.+20     	; 0xbf0 <__vector_44+0x66>
		{
			motor2Pos++;			//teller++
     bdc:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <motor2Pos>
     be0:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <motor2Pos+0x1>
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	80 93 a0 20 	sts	0x20A0, r24	; 0x8020a0 <motor2Pos>
     bea:	90 93 a1 20 	sts	0x20A1, r25	; 0x8020a1 <motor2Pos+0x1>
			motor2Pos--;			//teller++
			} else {			//als FE E6
			motor2Pos++;			//teller--
		}
	}
}
     bee:	24 c0       	rjmp	.+72     	; 0xc38 <__vector_44+0xae>
	{
		if (input&0b1)			//als RE E6
		{
			motor2Pos++;			//teller++
			} else {			//als FE E6
			motor2Pos--;			//teller--
     bf0:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <motor2Pos>
     bf4:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <motor2Pos+0x1>
     bf8:	01 97       	sbiw	r24, 0x01	; 1
     bfa:	80 93 a0 20 	sts	0x20A0, r24	; 0x8020a0 <motor2Pos>
     bfe:	90 93 a1 20 	sts	0x20A1, r25	; 0x8020a1 <motor2Pos+0x1>
			motor2Pos--;			//teller++
			} else {			//als FE E6
			motor2Pos++;			//teller--
		}
	}
}
     c02:	1a c0       	rjmp	.+52     	; 0xc38 <__vector_44+0xae>
			motor2Pos++;			//teller++
			} else {			//als FE E6
			motor2Pos--;			//teller--
		}
		} else {			//als E7 laag is
		if (input&0b10)			//als RE E6
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	88 2f       	mov	r24, r24
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	82 70       	andi	r24, 0x02	; 2
     c0c:	99 27       	eor	r25, r25
     c0e:	89 2b       	or	r24, r25
     c10:	51 f0       	breq	.+20     	; 0xc26 <__vector_44+0x9c>
		{
			motor2Pos--;			//teller++
     c12:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <motor2Pos>
     c16:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <motor2Pos+0x1>
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	80 93 a0 20 	sts	0x20A0, r24	; 0x8020a0 <motor2Pos>
     c20:	90 93 a1 20 	sts	0x20A1, r25	; 0x8020a1 <motor2Pos+0x1>
			} else {			//als FE E6
			motor2Pos++;			//teller--
		}
	}
}
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__vector_44+0xae>
		} else {			//als E7 laag is
		if (input&0b10)			//als RE E6
		{
			motor2Pos--;			//teller++
			} else {			//als FE E6
			motor2Pos++;			//teller--
     c26:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <motor2Pos>
     c2a:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <motor2Pos+0x1>
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	80 93 a0 20 	sts	0x20A0, r24	; 0x8020a0 <motor2Pos>
     c34:	90 93 a1 20 	sts	0x20A1, r25	; 0x8020a1 <motor2Pos+0x1>
		}
	}
}
     c38:	00 00       	nop
     c3a:	0f 90       	pop	r0
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	ff 91       	pop	r31
     c42:	ef 91       	pop	r30
     c44:	9f 91       	pop	r25
     c46:	8f 91       	pop	r24
     c48:	0f 90       	pop	r0
     c4a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     c4e:	0f 90       	pop	r0
     c50:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     c54:	0f 90       	pop	r0
     c56:	1f 90       	pop	r1
     c58:	18 95       	reti

00000c5a <DriverPL9823Init>:
#include "Driverpl9823.h"

void DriverPL9823BitbangSet(uint32_t FrontLeft,uint32_t FrontRight,uint32_t RearRight,uint32_t RearLeft);

void DriverPL9823Init()
{
     c5a:	af 92       	push	r10
     c5c:	bf 92       	push	r11
     c5e:	cf 92       	push	r12
     c60:	df 92       	push	r13
     c62:	ef 92       	push	r14
     c64:	ff 92       	push	r15
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
	//CS init
	PORTA.DIRSET=1<<6;
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	96 e0       	ldi	r25, 0x06	; 6
     c76:	20 e4       	ldi	r18, 0x40	; 64
     c78:	fc 01       	movw	r30, r24
     c7a:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUTCLR=1<<6;
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	96 e0       	ldi	r25, 0x06	; 6
     c80:	20 e4       	ldi	r18, 0x40	; 64
     c82:	fc 01       	movw	r30, r24
     c84:	26 83       	std	Z+6, r18	; 0x06
	//Data init
	PORTD.DIRSET=1<<3;
     c86:	80 e6       	ldi	r24, 0x60	; 96
     c88:	96 e0       	ldi	r25, 0x06	; 6
     c8a:	28 e0       	ldi	r18, 0x08	; 8
     c8c:	fc 01       	movw	r30, r24
     c8e:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTSET=1<<3;
     c90:	80 e6       	ldi	r24, 0x60	; 96
     c92:	96 e0       	ldi	r25, 0x06	; 6
     c94:	28 e0       	ldi	r18, 0x08	; 8
     c96:	fc 01       	movw	r30, r24
     c98:	25 83       	std	Z+5, r18	; 0x05
	
	DriverPL9823Set(PL9823_BLANK, PL9823_BLANK, PL9823_BLANK, PL9823_BLANK);
     c9a:	a1 2c       	mov	r10, r1
     c9c:	b1 2c       	mov	r11, r1
     c9e:	65 01       	movw	r12, r10
     ca0:	e1 2c       	mov	r14, r1
     ca2:	f1 2c       	mov	r15, r1
     ca4:	87 01       	movw	r16, r14
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	a9 01       	movw	r20, r18
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	cb 01       	movw	r24, r22
     cb2:	0e 94 67 06 	call	0xcce	; 0xcce <DriverPL9823Set>
}
     cb6:	00 00       	nop
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	df 90       	pop	r13
     cc6:	cf 90       	pop	r12
     cc8:	bf 90       	pop	r11
     cca:	af 90       	pop	r10
     ccc:	08 95       	ret

00000cce <DriverPL9823Set>:

void DriverPL9823Set(uint32_t FrontLeft,uint32_t FrontRight,uint32_t RearRight,uint32_t RearLeft)
{
     cce:	af 92       	push	r10
     cd0:	bf 92       	push	r11
     cd2:	cf 92       	push	r12
     cd4:	df 92       	push	r13
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	60 97       	sbiw	r28, 0x10	; 16
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	69 83       	std	Y+1, r22	; 0x01
     cee:	7a 83       	std	Y+2, r23	; 0x02
     cf0:	8b 83       	std	Y+3, r24	; 0x03
     cf2:	9c 83       	std	Y+4, r25	; 0x04
     cf4:	2d 83       	std	Y+5, r18	; 0x05
     cf6:	3e 83       	std	Y+6, r19	; 0x06
     cf8:	4f 83       	std	Y+7, r20	; 0x07
     cfa:	58 87       	std	Y+8, r21	; 0x08
     cfc:	e9 86       	std	Y+9, r14	; 0x09
     cfe:	fa 86       	std	Y+10, r15	; 0x0a
     d00:	0b 87       	std	Y+11, r16	; 0x0b
     d02:	1c 87       	std	Y+12, r17	; 0x0c
     d04:	ad 86       	std	Y+13, r10	; 0x0d
     d06:	be 86       	std	Y+14, r11	; 0x0e
     d08:	cf 86       	std	Y+15, r12	; 0x0f
     d0a:	d8 8a       	std	Y+16, r13	; 0x10
	PORTA.OUTSET=1<<6; //CS enable
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	96 e0       	ldi	r25, 0x06	; 6
     d10:	20 e4       	ldi	r18, 0x40	; 64
     d12:	fc 01       	movw	r30, r24
     d14:	25 83       	std	Z+5, r18	; 0x05
	DriverPL9823BitbangSet(FrontLeft, FrontRight, RearRight, RearLeft);
     d16:	ad 84       	ldd	r10, Y+13	; 0x0d
     d18:	be 84       	ldd	r11, Y+14	; 0x0e
     d1a:	cf 84       	ldd	r12, Y+15	; 0x0f
     d1c:	d8 88       	ldd	r13, Y+16	; 0x10
     d1e:	e9 84       	ldd	r14, Y+9	; 0x09
     d20:	fa 84       	ldd	r15, Y+10	; 0x0a
     d22:	0b 85       	ldd	r16, Y+11	; 0x0b
     d24:	1c 85       	ldd	r17, Y+12	; 0x0c
     d26:	2d 81       	ldd	r18, Y+5	; 0x05
     d28:	3e 81       	ldd	r19, Y+6	; 0x06
     d2a:	4f 81       	ldd	r20, Y+7	; 0x07
     d2c:	58 85       	ldd	r21, Y+8	; 0x08
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	9a 81       	ldd	r25, Y+2	; 0x02
     d32:	ab 81       	ldd	r26, Y+3	; 0x03
     d34:	bc 81       	ldd	r27, Y+4	; 0x04
     d36:	bc 01       	movw	r22, r24
     d38:	cd 01       	movw	r24, r26
     d3a:	0e 94 a6 01 	call	0x34c	; 0x34c <DriverPL9823BitbangSet>
	PORTA.OUTCLR=1<<6; //CS disable
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	96 e0       	ldi	r25, 0x06	; 6
     d42:	20 e4       	ldi	r18, 0x40	; 64
     d44:	fc 01       	movw	r30, r24
     d46:	26 83       	std	Z+6, r18	; 0x06
}
     d48:	00 00       	nop
     d4a:	60 96       	adiw	r28, 0x10	; 16
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	ff 90       	pop	r15
     d5a:	ef 90       	pop	r14
     d5c:	df 90       	pop	r13
     d5e:	cf 90       	pop	r12
     d60:	bf 90       	pop	r11
     d62:	af 90       	pop	r10
     d64:	08 95       	ret

00000d66 <DriverSysClkXtalInit>:
     d66:	8b ec       	ldi	r24, 0xCB	; 203
     d68:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
     d6c:	88 e0       	ldi	r24, 0x08	; 8
     d6e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
     d72:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     d76:	83 ff       	sbrs	r24, 3
     d78:	fc cf       	rjmp	.-8      	; 0xd72 <DriverSysClkXtalInit+0xc>
     d7a:	82 ec       	ldi	r24, 0xC2	; 194
     d7c:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
     d80:	88 e1       	ldi	r24, 0x18	; 24
     d82:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
     d86:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     d8a:	84 ff       	sbrs	r24, 4
     d8c:	fc cf       	rjmp	.-8      	; 0xd86 <DriverSysClkXtalInit+0x20>
     d8e:	88 ed       	ldi	r24, 0xD8	; 216
     d90:	84 bf       	out	0x34, r24	; 52
     d92:	84 e0       	ldi	r24, 0x04	; 4
     d94:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	08 95       	ret

00000d9c <DriverTWIMInit>:

uint8_t TWIMRead(uint8_t address,uint8_t *readData,uint8_t bytesToRead)
{
	uint8_t twi_status = TWIMWriteRead(address, NULL, 0,readData, bytesToRead);
	return twi_status;
}
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	10 92 9b 20 	sts	0x209B, r1	; 0x80209b <Twim_status>
     da8:	80 e8       	ldi	r24, 0x80	; 128
     daa:	96 e0       	ldi	r25, 0x06	; 6
     dac:	28 e1       	ldi	r18, 0x18	; 24
     dae:	fc 01       	movw	r30, r24
     db0:	20 8b       	std	Z+16, r18	; 0x10
     db2:	80 e8       	ldi	r24, 0x80	; 128
     db4:	96 e0       	ldi	r25, 0x06	; 6
     db6:	28 e1       	ldi	r18, 0x18	; 24
     db8:	fc 01       	movw	r30, r24
     dba:	21 8b       	std	Z+17, r18	; 0x11
     dbc:	80 ea       	ldi	r24, 0xA0	; 160
     dbe:	94 e0       	ldi	r25, 0x04	; 4
     dc0:	28 e7       	ldi	r18, 0x78	; 120
     dc2:	fc 01       	movw	r30, r24
     dc4:	21 83       	std	Z+1, r18	; 0x01
     dc6:	80 ea       	ldi	r24, 0xA0	; 160
     dc8:	94 e0       	ldi	r25, 0x04	; 4
     dca:	23 e2       	ldi	r18, 0x23	; 35
     dcc:	fc 01       	movw	r30, r24
     dce:	25 83       	std	Z+5, r18	; 0x05
     dd0:	80 ea       	ldi	r24, 0xA0	; 160
     dd2:	94 e0       	ldi	r25, 0x04	; 4
     dd4:	21 e0       	ldi	r18, 0x01	; 1
     dd6:	fc 01       	movw	r30, r24
     dd8:	24 83       	std	Z+4, r18	; 0x04
     dda:	00 00       	nop
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <TWIMWrite>:
     de2:	0f 93       	push	r16
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	25 97       	sbiw	r28, 0x05	; 5
     dee:	cd bf       	out	0x3d, r28	; 61
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	8a 83       	std	Y+2, r24	; 0x02
     df4:	6b 83       	std	Y+3, r22	; 0x03
     df6:	7c 83       	std	Y+4, r23	; 0x04
     df8:	4d 83       	std	Y+5, r20	; 0x05
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	9c 81       	ldd	r25, Y+4	; 0x04
     dfe:	00 e0       	ldi	r16, 0x00	; 0
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	4d 81       	ldd	r20, Y+5	; 0x05
     e06:	bc 01       	movw	r22, r24
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	0e 94 10 07 	call	0xe20	; 0xe20 <TWIMWriteRead>
     e0e:	89 83       	std	Y+1, r24	; 0x01
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	25 96       	adiw	r28, 0x05	; 5
     e14:	cd bf       	out	0x3d, r28	; 61
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	0f 91       	pop	r16
     e1e:	08 95       	ret

00000e20 <TWIMWriteRead>:

uint8_t TWIMWriteRead(uint8_t address, uint8_t *writeData, uint8_t bytesToWrite, uint8_t *readData, uint8_t bytesToRead)
{
     e20:	0f 93       	push	r16
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	29 97       	sbiw	r28, 0x09	; 9
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	8b 83       	std	Y+3, r24	; 0x03
     e32:	6c 83       	std	Y+4, r22	; 0x04
     e34:	7d 83       	std	Y+5, r23	; 0x05
     e36:	4e 83       	std	Y+6, r20	; 0x06
     e38:	2f 83       	std	Y+7, r18	; 0x07
     e3a:	38 87       	std	Y+8, r19	; 0x08
     e3c:	09 87       	std	Y+9, r16	; 0x09
	Twim_writeData=writeData;
     e3e:	8c 81       	ldd	r24, Y+4	; 0x04
     e40:	9d 81       	ldd	r25, Y+5	; 0x05
     e42:	80 93 93 20 	sts	0x2093, r24	; 0x802093 <Twim_writeData>
     e46:	90 93 94 20 	sts	0x2094, r25	; 0x802094 <Twim_writeData+0x1>
	Twim_readData=readData;
     e4a:	8f 81       	ldd	r24, Y+7	; 0x07
     e4c:	98 85       	ldd	r25, Y+8	; 0x08
     e4e:	80 93 95 20 	sts	0x2095, r24	; 0x802095 <Twim_readData>
     e52:	90 93 96 20 	sts	0x2096, r25	; 0x802096 <Twim_readData+0x1>

	/*Initiate transaction if bus is ready. */
	if (Twim_status == TWIM_STATUS_READY) 
     e56:	80 91 9b 20 	lds	r24, 0x209B	; 0x80209b <Twim_status>
     e5a:	88 23       	and	r24, r24
     e5c:	d9 f5       	brne	.+118    	; 0xed4 <TWIMWriteRead+0xb4>
	{
		Twim_status = TWIM_STATUS_BUSY;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	80 93 9b 20 	sts	0x209B, r24	; 0x80209b <Twim_status>
		Twim_result = TWIM_RESULT_UNKNOWN;
     e64:	10 92 9c 20 	sts	0x209C, r1	; 0x80209c <Twim_result>

		Twim_address = address<<1;
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	88 0f       	add	r24, r24
     e6c:	80 93 92 20 	sts	0x2092, r24	; 0x802092 <Twim_address>

		Twim_bytesToWrite = bytesToWrite;
     e70:	8e 81       	ldd	r24, Y+6	; 0x06
     e72:	80 93 97 20 	sts	0x2097, r24	; 0x802097 <Twim_bytesToWrite>
		Twim_bytesToRead = bytesToRead;
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	80 93 98 20 	sts	0x2098, r24	; 0x802098 <Twim_bytesToRead>
		Twim_bytesWritten = 0;
     e7c:	10 92 99 20 	sts	0x2099, r1	; 0x802099 <Twim_bytesWritten>
		Twim_bytesRead = 0;
     e80:	10 92 9a 20 	sts	0x209A, r1	; 0x80209a <Twim_bytesRead>

		/* If write command, send the START condition + Address +
		 * 'R/_W = 0'
		 */
		if (Twim_bytesToWrite > 0) {
     e84:	80 91 97 20 	lds	r24, 0x2097	; 0x802097 <Twim_bytesToWrite>
     e88:	88 23       	and	r24, r24
     e8a:	51 f0       	breq	.+20     	; 0xea0 <TWIMWriteRead+0x80>
			uint8_t writeAddress = Twim_address & ~0x01;
     e8c:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <Twim_address>
     e90:	8e 7f       	andi	r24, 0xFE	; 254
     e92:	89 83       	std	Y+1, r24	; 0x01
			TWIM_BUS.MASTER.ADDR = writeAddress;
     e94:	80 ea       	ldi	r24, 0xA0	; 160
     e96:	94 e0       	ldi	r25, 0x04	; 4
     e98:	29 81       	ldd	r18, Y+1	; 0x01
     e9a:	fc 01       	movw	r30, r24
     e9c:	26 83       	std	Z+6, r18	; 0x06
     e9e:	0d c0       	rjmp	.+26     	; 0xeba <TWIMWriteRead+0x9a>
		}

		/* If read command, send the START condition + Address +
		 * 'R/_W = 1'
		 */
		else if (Twim_bytesToRead > 0) 
     ea0:	80 91 98 20 	lds	r24, 0x2098	; 0x802098 <Twim_bytesToRead>
     ea4:	88 23       	and	r24, r24
     ea6:	49 f0       	breq	.+18     	; 0xeba <TWIMWriteRead+0x9a>
		{
			uint8_t readAddress = Twim_address | 0x01;
     ea8:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <Twim_address>
     eac:	81 60       	ori	r24, 0x01	; 1
     eae:	8a 83       	std	Y+2, r24	; 0x02
			TWIM_BUS.MASTER.ADDR = readAddress;
     eb0:	80 ea       	ldi	r24, 0xA0	; 160
     eb2:	94 e0       	ldi	r25, 0x04	; 4
     eb4:	2a 81       	ldd	r18, Y+2	; 0x02
     eb6:	fc 01       	movw	r30, r24
     eb8:	26 83       	std	Z+6, r18	; 0x06
		}
		while (Twim_status != TWIM_STATUS_READY); //Block until RX complete
     eba:	00 00       	nop
     ebc:	80 91 9b 20 	lds	r24, 0x209B	; 0x80209b <Twim_status>
     ec0:	88 23       	and	r24, r24
     ec2:	e1 f7       	brne	.-8      	; 0xebc <TWIMWriteRead+0x9c>
		if (Twim_result==TWIM_RESULT_OK)
     ec4:	80 91 9c 20 	lds	r24, 0x209C	; 0x80209c <Twim_result>
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	11 f4       	brne	.+4      	; 0xed0 <TWIMWriteRead+0xb0>
			return true;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	03 c0       	rjmp	.+6      	; 0xed6 <TWIMWriteRead+0xb6>
		else
			{
			#ifdef DRIVERTWIMASTER_DEBUG
				//printf ("TWIM_RESULT:%d\r\n",Twim_result);
			#endif
			return false;	
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	01 c0       	rjmp	.+2      	; 0xed6 <TWIMWriteRead+0xb6>
			}
			
	} 
	else 
	{
		return false;
     ed4:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     ed6:	29 96       	adiw	r28, 0x09	; 9
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	0f 91       	pop	r16
     ee2:	08 95       	ret

00000ee4 <TWIMArbitrationLostBusErrorHandler>:

void TWIMArbitrationLostBusErrorHandler()
{
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	1f 92       	push	r1
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
     eee:	80 ea       	ldi	r24, 0xA0	; 160
     ef0:	94 e0       	ldi	r25, 0x04	; 4
     ef2:	fc 01       	movw	r30, r24
     ef4:	84 81       	ldd	r24, Z+4	; 0x04
     ef6:	89 83       	std	Y+1, r24	; 0x01

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	88 2f       	mov	r24, r24
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	84 70       	andi	r24, 0x04	; 4
     f00:	99 27       	eor	r25, r25
     f02:	89 2b       	or	r24, r25
     f04:	21 f0       	breq	.+8      	; 0xf0e <TWIMArbitrationLostBusErrorHandler+0x2a>
		Twim_result = TWIM_RESULT_BUS_ERROR;
     f06:	84 e0       	ldi	r24, 0x04	; 4
     f08:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <Twim_result>
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <TWIMArbitrationLostBusErrorHandler+0x30>
	}
	/* If arbitration lost. */
	else {
		Twim_result = TWIM_RESULT_ARBITRATION_LOST;
     f0e:	83 e0       	ldi	r24, 0x03	; 3
     f10:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <Twim_result>
	}

	/* Clear interrupt flag. */
	TWIM_BUS.MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     f14:	80 ea       	ldi	r24, 0xA0	; 160
     f16:	94 e0       	ldi	r25, 0x04	; 4
     f18:	29 81       	ldd	r18, Y+1	; 0x01
     f1a:	28 60       	ori	r18, 0x08	; 8
     f1c:	fc 01       	movw	r30, r24
     f1e:	24 83       	std	Z+4, r18	; 0x04

	Twim_status = TWIM_STATUS_READY;
     f20:	10 92 9b 20 	sts	0x209B, r1	; 0x80209b <Twim_status>
}
     f24:	00 00       	nop
     f26:	0f 90       	pop	r0
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	08 95       	ret

00000f2e <TWIMWriteHandler>:

void TWIMWriteHandler()
{
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	00 d0       	rcall	.+0      	; 0xf34 <TWIMWriteHandler+0x6>
     f34:	1f 92       	push	r1
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = Twim_bytesToWrite;
     f3a:	80 91 97 20 	lds	r24, 0x2097	; 0x802097 <Twim_bytesToWrite>
     f3e:	89 83       	std	Y+1, r24	; 0x01
	uint8_t bytesToRead   = Twim_bytesToRead;
     f40:	80 91 98 20 	lds	r24, 0x2098	; 0x802098 <Twim_bytesToRead>
     f44:	8a 83       	std	Y+2, r24	; 0x02

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (TWIM_BUS.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
     f46:	80 ea       	ldi	r24, 0xA0	; 160
     f48:	94 e0       	ldi	r25, 0x04	; 4
     f4a:	fc 01       	movw	r30, r24
     f4c:	84 81       	ldd	r24, Z+4	; 0x04
     f4e:	88 2f       	mov	r24, r24
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	80 71       	andi	r24, 0x10	; 16
     f54:	99 27       	eor	r25, r25
     f56:	89 2b       	or	r24, r25
     f58:	59 f0       	breq	.+22     	; 0xf70 <TWIMWriteHandler+0x42>
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     f5a:	80 ea       	ldi	r24, 0xA0	; 160
     f5c:	94 e0       	ldi	r25, 0x04	; 4
     f5e:	23 e0       	ldi	r18, 0x03	; 3
     f60:	fc 01       	movw	r30, r24
     f62:	23 83       	std	Z+3, r18	; 0x03
		Twim_result = TWIM_RESULT_NACK_RECEIVED;
     f64:	85 e0       	ldi	r24, 0x05	; 5
     f66:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <Twim_result>
		Twim_status = TWIM_STATUS_READY;
     f6a:	10 92 9b 20 	sts	0x209B, r1	; 0x80209b <Twim_status>
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
	}
}
     f6e:	34 c0       	rjmp	.+104    	; 0xfd8 <TWIMWriteHandler+0xaa>
		Twim_result = TWIM_RESULT_NACK_RECEIVED;
		Twim_status = TWIM_STATUS_READY;
	}

	/* If more bytes to write, send data. */
	else if (Twim_bytesWritten < bytesToWrite) {
     f70:	90 91 99 20 	lds	r25, 0x2099	; 0x802099 <Twim_bytesWritten>
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	98 17       	cp	r25, r24
     f78:	c0 f4       	brcc	.+48     	; 0xfaa <TWIMWriteHandler+0x7c>
		uint8_t data = Twim_writeData[Twim_bytesWritten];
     f7a:	20 91 93 20 	lds	r18, 0x2093	; 0x802093 <Twim_writeData>
     f7e:	30 91 94 20 	lds	r19, 0x2094	; 0x802094 <Twim_writeData+0x1>
     f82:	80 91 99 20 	lds	r24, 0x2099	; 0x802099 <Twim_bytesWritten>
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	82 0f       	add	r24, r18
     f8c:	93 1f       	adc	r25, r19
     f8e:	fc 01       	movw	r30, r24
     f90:	80 81       	ld	r24, Z
     f92:	8b 83       	std	Y+3, r24	; 0x03
			TWIM_BUS.MASTER.DATA = data;
     f94:	80 ea       	ldi	r24, 0xA0	; 160
     f96:	94 e0       	ldi	r25, 0x04	; 4
     f98:	2b 81       	ldd	r18, Y+3	; 0x03
     f9a:	fc 01       	movw	r30, r24
     f9c:	27 83       	std	Z+7, r18	; 0x07
		++Twim_bytesWritten;
     f9e:	80 91 99 20 	lds	r24, 0x2099	; 0x802099 <Twim_bytesWritten>
     fa2:	8f 5f       	subi	r24, 0xFF	; 255
     fa4:	80 93 99 20 	sts	0x2099, r24	; 0x802099 <Twim_bytesWritten>
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
	}
}
     fa8:	17 c0       	rjmp	.+46     	; 0xfd8 <TWIMWriteHandler+0xaa>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (Twim_bytesRead < bytesToRead) {
     faa:	90 91 9a 20 	lds	r25, 0x209A	; 0x80209a <Twim_bytesRead>
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	98 17       	cp	r25, r24
     fb2:	50 f4       	brcc	.+20     	; 0xfc8 <TWIMWriteHandler+0x9a>
		uint8_t readAddress = Twim_address | 0x01;
     fb4:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <Twim_address>
     fb8:	81 60       	ori	r24, 0x01	; 1
     fba:	8c 83       	std	Y+4, r24	; 0x04
		TWIM_BUS.MASTER.ADDR = readAddress;
     fbc:	80 ea       	ldi	r24, 0xA0	; 160
     fbe:	94 e0       	ldi	r25, 0x04	; 4
     fc0:	2c 81       	ldd	r18, Y+4	; 0x04
     fc2:	fc 01       	movw	r30, r24
     fc4:	26 83       	std	Z+6, r18	; 0x06
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
	}
}
     fc6:	08 c0       	rjmp	.+16     	; 0xfd8 <TWIMWriteHandler+0xaa>
		TWIM_BUS.MASTER.ADDR = readAddress;
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     fc8:	80 ea       	ldi	r24, 0xA0	; 160
     fca:	94 e0       	ldi	r25, 0x04	; 4
     fcc:	23 e0       	ldi	r18, 0x03	; 3
     fce:	fc 01       	movw	r30, r24
     fd0:	23 83       	std	Z+3, r18	; 0x03
		TWIMTransactionFinished(TWIM_RESULT_OK);
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	0e 94 39 08 	call	0x1072	; 0x1072 <TWIMTransactionFinished>
	}
}
     fd8:	00 00       	nop
     fda:	24 96       	adiw	r28, 0x04	; 4
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	08 95       	ret

00000fe6 <TWIMReadHandler>:

void TWIMReadHandler()
{
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	1f 92       	push	r1
     fec:	1f 92       	push	r1
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
	/* Fetch data if bytes to be read. */
	if (Twim_bytesRead < TWIM_READ_BUFFER_SIZE) {
     ff2:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <Twim_bytesRead>
     ff6:	80 32       	cpi	r24, 0x20	; 32
     ff8:	c0 f4       	brcc	.+48     	; 0x102a <TWIMReadHandler+0x44>
		uint8_t data = TWIM_BUS.MASTER.DATA;
     ffa:	80 ea       	ldi	r24, 0xA0	; 160
     ffc:	94 e0       	ldi	r25, 0x04	; 4
     ffe:	fc 01       	movw	r30, r24
    1000:	87 81       	ldd	r24, Z+7	; 0x07
    1002:	89 83       	std	Y+1, r24	; 0x01
		Twim_readData[Twim_bytesRead] = data;
    1004:	20 91 95 20 	lds	r18, 0x2095	; 0x802095 <Twim_readData>
    1008:	30 91 96 20 	lds	r19, 0x2096	; 0x802096 <Twim_readData+0x1>
    100c:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <Twim_bytesRead>
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	82 0f       	add	r24, r18
    1016:	93 1f       	adc	r25, r19
    1018:	29 81       	ldd	r18, Y+1	; 0x01
    101a:	fc 01       	movw	r30, r24
    101c:	20 83       	st	Z, r18
		Twim_bytesRead++;
    101e:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <Twim_bytesRead>
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	80 93 9a 20 	sts	0x209A, r24	; 0x80209a <Twim_bytesRead>
    1028:	08 c0       	rjmp	.+16     	; 0x103a <TWIMReadHandler+0x54>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    102a:	80 ea       	ldi	r24, 0xA0	; 160
    102c:	94 e0       	ldi	r25, 0x04	; 4
    102e:	23 e0       	ldi	r18, 0x03	; 3
    1030:	fc 01       	movw	r30, r24
    1032:	23 83       	std	Z+3, r18	; 0x03
		TWIMTransactionFinished(TWIM_RESULT_BUFFER_OVERFLOW);
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	0e 94 39 08 	call	0x1072	; 0x1072 <TWIMTransactionFinished>
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = Twim_bytesToRead;
    103a:	80 91 98 20 	lds	r24, 0x2098	; 0x802098 <Twim_bytesToRead>
    103e:	8a 83       	std	Y+2, r24	; 0x02

	/* If more bytes to read, issue ACK and start a byte read. */
	if (Twim_bytesRead < bytesToRead) {
    1040:	90 91 9a 20 	lds	r25, 0x209A	; 0x80209a <Twim_bytesRead>
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	98 17       	cp	r25, r24
    1048:	30 f4       	brcc	.+12     	; 0x1056 <TWIMReadHandler+0x70>
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    104a:	80 ea       	ldi	r24, 0xA0	; 160
    104c:	94 e0       	ldi	r25, 0x04	; 4
    104e:	22 e0       	ldi	r18, 0x02	; 2
    1050:	fc 01       	movw	r30, r24
    1052:	23 83       	std	Z+3, r18	; 0x03
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
		                               TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
	}
}
    1054:	08 c0       	rjmp	.+16     	; 0x1066 <TWIMReadHandler+0x80>
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		TWIM_BUS.MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    1056:	80 ea       	ldi	r24, 0xA0	; 160
    1058:	94 e0       	ldi	r25, 0x04	; 4
    105a:	27 e0       	ldi	r18, 0x07	; 7
    105c:	fc 01       	movw	r30, r24
    105e:	23 83       	std	Z+3, r18	; 0x03
		                               TWI_MASTER_CMD_STOP_gc;
		TWIMTransactionFinished(TWIM_RESULT_OK);
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	0e 94 39 08 	call	0x1072	; 0x1072 <TWIMTransactionFinished>
	}
}
    1066:	00 00       	nop
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	08 95       	ret

00001072 <TWIMTransactionFinished>:

void TWIMTransactionFinished( uint8_t result)
{
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	1f 92       	push	r1
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	89 83       	std	Y+1, r24	; 0x01
	Twim_result = result;
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <Twim_result>
	Twim_status = TWIM_STATUS_READY;
    1084:	10 92 9b 20 	sts	0x209B, r1	; 0x80209b <Twim_status>
}
    1088:	00 00       	nop
    108a:	0f 90       	pop	r0
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <__vector_46>:

ISR (TWIM_BUS_vect)
{
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    109a:	0f 92       	push	r0
    109c:	11 24       	eor	r1, r1
    109e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    10a2:	0f 92       	push	r0
    10a4:	2f 93       	push	r18
    10a6:	3f 93       	push	r19
    10a8:	4f 93       	push	r20
    10aa:	5f 93       	push	r21
    10ac:	6f 93       	push	r22
    10ae:	7f 93       	push	r23
    10b0:	8f 93       	push	r24
    10b2:	9f 93       	push	r25
    10b4:	af 93       	push	r26
    10b6:	bf 93       	push	r27
    10b8:	ef 93       	push	r30
    10ba:	ff 93       	push	r31
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	1f 92       	push	r1
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
    10c6:	80 ea       	ldi	r24, 0xA0	; 160
    10c8:	94 e0       	ldi	r25, 0x04	; 4
    10ca:	fc 01       	movw	r30, r24
    10cc:	84 81       	ldd	r24, Z+4	; 0x04
    10ce:	89 83       	std	Y+1, r24	; 0x01

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	88 70       	andi	r24, 0x08	; 8
    10d8:	99 27       	eor	r25, r25
    10da:	89 2b       	or	r24, r25
    10dc:	39 f4       	brne	.+14     	; 0x10ec <__vector_46+0x5a>
	(currentStatus & TWI_MASTER_BUSERR_bm)) {
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	88 2f       	mov	r24, r24
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	84 70       	andi	r24, 0x04	; 4
    10e6:	99 27       	eor	r25, r25
ISR (TWIM_BUS_vect)
{
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    10e8:	89 2b       	or	r24, r25
    10ea:	19 f0       	breq	.+6      	; 0x10f2 <__vector_46+0x60>
	(currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWIMArbitrationLostBusErrorHandler();
    10ec:	0e 94 72 07 	call	0xee4	; 0xee4 <TWIMArbitrationLostBusErrorHandler>
    10f0:	13 c0       	rjmp	.+38     	; 0x1118 <__vector_46+0x86>
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	80 74       	andi	r24, 0x40	; 64
    10fa:	99 27       	eor	r25, r25
    10fc:	89 2b       	or	r24, r25
    10fe:	19 f0       	breq	.+6      	; 0x1106 <__vector_46+0x74>
		TWIMWriteHandler();
    1100:	0e 94 97 07 	call	0xf2e	; 0xf2e <TWIMWriteHandler>
    1104:	09 c0       	rjmp	.+18     	; 0x1118 <__vector_46+0x86>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	88 23       	and	r24, r24
    110a:	1c f4       	brge	.+6      	; 0x1112 <__vector_46+0x80>
		TWIMReadHandler();
    110c:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <TWIMReadHandler>
    1110:	03 c0       	rjmp	.+6      	; 0x1118 <__vector_46+0x86>
	}

	/* If unexpected state. */
	else {
		TWIMTransactionFinished(TWIM_RESULT_FAIL);
    1112:	86 e0       	ldi	r24, 0x06	; 6
    1114:	0e 94 39 08 	call	0x1072	; 0x1072 <TWIMTransactionFinished>
	}
	
	if (Twim_status == TWIM_STATUS_READY) //Transaction finished
    1118:	80 91 9b 20 	lds	r24, 0x209B	; 0x80209b <Twim_status>
	{	
	}
}
    111c:	00 00       	nop
    111e:	0f 90       	pop	r0
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	ff 91       	pop	r31
    1126:	ef 91       	pop	r30
    1128:	bf 91       	pop	r27
    112a:	af 91       	pop	r26
    112c:	9f 91       	pop	r25
    112e:	8f 91       	pop	r24
    1130:	7f 91       	pop	r23
    1132:	6f 91       	pop	r22
    1134:	5f 91       	pop	r21
    1136:	4f 91       	pop	r20
    1138:	3f 91       	pop	r19
    113a:	2f 91       	pop	r18
    113c:	0f 90       	pop	r0
    113e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    1142:	0f 90       	pop	r0
    1144:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1148:	0f 90       	pop	r0
    114a:	1f 90       	pop	r1
    114c:	18 95       	reti

0000114e <DriverUSARTInit>:
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	80 e8       	ldi	r24, 0x80	; 128
    1158:	96 e0       	ldi	r25, 0x06	; 6
    115a:	28 e0       	ldi	r18, 0x08	; 8
    115c:	fc 01       	movw	r30, r24
    115e:	21 83       	std	Z+1, r18	; 0x01
    1160:	80 e8       	ldi	r24, 0x80	; 128
    1162:	96 e0       	ldi	r25, 0x06	; 6
    1164:	24 e0       	ldi	r18, 0x04	; 4
    1166:	fc 01       	movw	r30, r24
    1168:	22 83       	std	Z+2, r18	; 0x02
    116a:	80 ea       	ldi	r24, 0xA0	; 160
    116c:	9a e0       	ldi	r25, 0x0A	; 10
    116e:	fc 01       	movw	r30, r24
    1170:	13 82       	std	Z+3, r1	; 0x03
    1172:	80 ea       	ldi	r24, 0xA0	; 160
    1174:	9a e0       	ldi	r25, 0x0A	; 10
    1176:	28 e1       	ldi	r18, 0x18	; 24
    1178:	fc 01       	movw	r30, r24
    117a:	24 83       	std	Z+4, r18	; 0x04
    117c:	80 ea       	ldi	r24, 0xA0	; 160
    117e:	9a e0       	ldi	r25, 0x0A	; 10
    1180:	23 e0       	ldi	r18, 0x03	; 3
    1182:	fc 01       	movw	r30, r24
    1184:	25 83       	std	Z+5, r18	; 0x05
    1186:	80 ea       	ldi	r24, 0xA0	; 160
    1188:	9a e0       	ldi	r25, 0x0A	; 10
    118a:	25 ee       	ldi	r18, 0xE5	; 229
    118c:	fc 01       	movw	r30, r24
    118e:	26 83       	std	Z+6, r18	; 0x06
    1190:	80 ea       	ldi	r24, 0xA0	; 160
    1192:	9a e0       	ldi	r25, 0x0A	; 10
    1194:	2c eb       	ldi	r18, 0xBC	; 188
    1196:	fc 01       	movw	r30, r24
    1198:	27 83       	std	Z+7, r18	; 0x07
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e2       	ldi	r25, 0x20	; 32
    119e:	80 93 b6 20 	sts	0x20B6, r24	; 0x8020b6 <__iob+0x2>
    11a2:	90 93 b7 20 	sts	0x20B7, r25	; 0x8020b7 <__iob+0x3>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e2       	ldi	r25, 0x20	; 32
    11aa:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <__iob>
    11ae:	90 93 b5 20 	sts	0x20B5, r25	; 0x8020b5 <__iob+0x1>
    11b2:	00 00       	nop
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	08 95       	ret

000011ba <stdio_putchar>:
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <stdio_putchar+0x6>
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	6a 83       	std	Y+2, r22	; 0x02
    11c8:	7b 83       	std	Y+3, r23	; 0x03
    11ca:	80 ea       	ldi	r24, 0xA0	; 160
    11cc:	9a e0       	ldi	r25, 0x0A	; 10
    11ce:	29 81       	ldd	r18, Y+1	; 0x01
    11d0:	fc 01       	movw	r30, r24
    11d2:	20 83       	st	Z, r18
    11d4:	00 00       	nop
    11d6:	80 ea       	ldi	r24, 0xA0	; 160
    11d8:	9a e0       	ldi	r25, 0x0A	; 10
    11da:	fc 01       	movw	r30, r24
    11dc:	81 81       	ldd	r24, Z+1	; 0x01
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	80 74       	andi	r24, 0x40	; 64
    11e4:	99 27       	eor	r25, r25
    11e6:	89 2b       	or	r24, r25
    11e8:	b1 f3       	breq	.-20     	; 0x11d6 <stdio_putchar+0x1c>
    11ea:	80 ea       	ldi	r24, 0xA0	; 160
    11ec:	9a e0       	ldi	r25, 0x0A	; 10
    11ee:	20 e4       	ldi	r18, 0x40	; 64
    11f0:	fc 01       	movw	r30, r24
    11f2:	21 83       	std	Z+1, r18	; 0x01
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	23 96       	adiw	r28, 0x03	; 3
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <stdio_getchar>:
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	1f 92       	push	r1
    120a:	1f 92       	push	r1
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	9a 83       	std	Y+2, r25	; 0x02
    1214:	00 00       	nop
    1216:	80 ea       	ldi	r24, 0xA0	; 160
    1218:	9a e0       	ldi	r25, 0x0A	; 10
    121a:	fc 01       	movw	r30, r24
    121c:	81 81       	ldd	r24, Z+1	; 0x01
    121e:	88 23       	and	r24, r24
    1220:	d4 f7       	brge	.-12     	; 0x1216 <stdio_getchar+0x12>
    1222:	80 ea       	ldi	r24, 0xA0	; 160
    1224:	9a e0       	ldi	r25, 0x0A	; 10
    1226:	fc 01       	movw	r30, r24
    1228:	80 81       	ld	r24, Z
    122a:	88 2f       	mov	r24, r24
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	08 95       	ret

00001238 <init>:
#include <stdio.h>

char text[10];
uint16_t clear, red, green, blue;

int init() {
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	2e 97       	sbiw	r28, 0x0e	; 14
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	de bf       	out	0x3e, r29	; 62
	//Initialize drivers
	DriverSysClkXtalInit();					//Clock init
    1246:	0e 94 b3 06 	call	0xd66	; 0xd66 <DriverSysClkXtalInit>
	DriverUSARTInit();						//USART init and link to stdio
    124a:	0e 94 a7 08 	call	0x114e	; 0x114e <DriverUSARTInit>
	printf("Initialising Drivers\n\r");		//(Check if terminal is working)
    124e:	8c e3       	ldi	r24, 0x3C	; 60
    1250:	90 e2       	ldi	r25, 0x20	; 32
    1252:	89 2f       	mov	r24, r25
    1254:	8f 93       	push	r24
    1256:	8c e3       	ldi	r24, 0x3C	; 60
    1258:	90 e2       	ldi	r25, 0x20	; 32
    125a:	8f 93       	push	r24
    125c:	0e 94 af 10 	call	0x215e	; 0x215e <printf>
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
	DriverTWIMInit();						//Initialize TWI in master mode
    1264:	0e 94 ce 06 	call	0xd9c	; 0xd9c <DriverTWIMInit>
	DriverLedInit();						//Initialize LED's
    1268:	0e 94 92 03 	call	0x724	; 0x724 <DriverLedInit>
	DriverPowerInit();						//Initialize aux power driver
    126c:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <DriverPowerInit>
	DriverAdcInit();						//Initialize ADC driver
    1270:	0e 94 ef 01 	call	0x3de	; 0x3de <DriverAdcInit>
	DriverMotorInit();						//Initialize motor driver
    1274:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <DriverMotorInit>
	InitInterrupts();						//Global interrupts and GPIO wake up
    1278:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <InitInterrupts>
	DriverPL9823Init();						//RGB Driver
    127c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <DriverPL9823Init>
	DriverPowerVccAuxSet(1);				//Enable Auxillary power line
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <DriverPowerVccAuxSet>
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	a0 e8       	ldi	r26, 0x80	; 128
    128c:	bf e3       	ldi	r27, 0x3F	; 63
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	9a 83       	std	Y+2, r25	; 0x02
    1292:	ab 83       	std	Y+3, r26	; 0x03
    1294:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	4a ef       	ldi	r20, 0xFA	; 250
    129c:	55 e4       	ldi	r21, 0x45	; 69
    129e:	69 81       	ldd	r22, Y+1	; 0x01
    12a0:	7a 81       	ldd	r23, Y+2	; 0x02
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	9e 83       	std	Y+6, r25	; 0x06
    12b2:	af 83       	std	Y+7, r26	; 0x07
    12b4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e8       	ldi	r20, 0x80	; 128
    12bc:	5f e3       	ldi	r21, 0x3F	; 63
    12be:	6d 81       	ldd	r22, Y+5	; 0x05
    12c0:	7e 81       	ldd	r23, Y+6	; 0x06
    12c2:	8f 81       	ldd	r24, Y+7	; 0x07
    12c4:	98 85       	ldd	r25, Y+8	; 0x08
    12c6:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__cmpsf2>
    12ca:	88 23       	and	r24, r24
    12cc:	2c f4       	brge	.+10     	; 0x12d8 <init+0xa0>
		__ticks = 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	89 87       	std	Y+9, r24	; 0x09
    12d4:	9a 87       	std	Y+10, r25	; 0x0a
    12d6:	3f c0       	rjmp	.+126    	; 0x1356 <init+0x11e>
	else if (__tmp > 65535)
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	3f ef       	ldi	r19, 0xFF	; 255
    12dc:	4f e7       	ldi	r20, 0x7F	; 127
    12de:	57 e4       	ldi	r21, 0x47	; 71
    12e0:	6d 81       	ldd	r22, Y+5	; 0x05
    12e2:	7e 81       	ldd	r23, Y+6	; 0x06
    12e4:	8f 81       	ldd	r24, Y+7	; 0x07
    12e6:	98 85       	ldd	r25, Y+8	; 0x08
    12e8:	0e 94 3d 0b 	call	0x167a	; 0x167a <__gesf2>
    12ec:	18 16       	cp	r1, r24
    12ee:	4c f5       	brge	.+82     	; 0x1342 <init+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e2       	ldi	r20, 0x20	; 32
    12f6:	51 e4       	ldi	r21, 0x41	; 65
    12f8:	69 81       	ldd	r22, Y+1	; 0x01
    12fa:	7a 81       	ldd	r23, Y+2	; 0x02
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	bc 01       	movw	r22, r24
    130a:	cd 01       	movw	r24, r26
    130c:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	89 87       	std	Y+9, r24	; 0x09
    1316:	9a 87       	std	Y+10, r25	; 0x0a
    1318:	0f c0       	rjmp	.+30     	; 0x1338 <init+0x100>
    131a:	80 e2       	ldi	r24, 0x20	; 32
    131c:	93 e0       	ldi	r25, 0x03	; 3
    131e:	8b 87       	std	Y+11, r24	; 0x0b
    1320:	9c 87       	std	Y+12, r25	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1322:	8b 85       	ldd	r24, Y+11	; 0x0b
    1324:	9c 85       	ldd	r25, Y+12	; 0x0c
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <init+0xee>
    132a:	8b 87       	std	Y+11, r24	; 0x0b
    132c:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132e:	89 85       	ldd	r24, Y+9	; 0x09
    1330:	9a 85       	ldd	r25, Y+10	; 0x0a
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	89 87       	std	Y+9, r24	; 0x09
    1336:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1338:	89 85       	ldd	r24, Y+9	; 0x09
    133a:	9a 85       	ldd	r25, Y+10	; 0x0a
    133c:	89 2b       	or	r24, r25
    133e:	69 f7       	brne	.-38     	; 0x131a <init+0xe2>
    1340:	14 c0       	rjmp	.+40     	; 0x136a <init+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1342:	6d 81       	ldd	r22, Y+5	; 0x05
    1344:	7e 81       	ldd	r23, Y+6	; 0x06
    1346:	8f 81       	ldd	r24, Y+7	; 0x07
    1348:	98 85       	ldd	r25, Y+8	; 0x08
    134a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	89 87       	std	Y+9, r24	; 0x09
    1354:	9a 87       	std	Y+10, r25	; 0x0a
    1356:	89 85       	ldd	r24, Y+9	; 0x09
    1358:	9a 85       	ldd	r25, Y+10	; 0x0a
    135a:	8d 87       	std	Y+13, r24	; 0x0d
    135c:	9e 87       	std	Y+14, r25	; 0x0e
    135e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1360:	9e 85       	ldd	r25, Y+14	; 0x0e
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <init+0x12a>
    1366:	8d 87       	std	Y+13, r24	; 0x0d
    1368:	9e 87       	std	Y+14, r25	; 0x0e
	_delay_ms(1);
	DriverAdps9960Init();					//Photo sensor
    136a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <DriverAdps9960Init>
}
    136e:	00 00       	nop
    1370:	2e 96       	adiw	r28, 0x0e	; 14
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	08 95       	ret

0000137c <run>:


int run(void) {
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	2e 97       	sbiw	r28, 0x0e	; 14
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	de bf       	out	0x3e, r29	; 62
	printf("\n\rStart run\n\n\r");
    138a:	83 e5       	ldi	r24, 0x53	; 83
    138c:	90 e2       	ldi	r25, 0x20	; 32
    138e:	89 2f       	mov	r24, r25
    1390:	8f 93       	push	r24
    1392:	83 e5       	ldi	r24, 0x53	; 83
    1394:	90 e2       	ldi	r25, 0x20	; 32
    1396:	8f 93       	push	r24
    1398:	0e 94 af 10 	call	0x215e	; 0x215e <printf>
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
	DriverMotorSet(1500,1500);						//Drive
    13a0:	6c ed       	ldi	r22, 0xDC	; 220
    13a2:	75 e0       	ldi	r23, 0x05	; 5
    13a4:	8c ed       	ldi	r24, 0xDC	; 220
    13a6:	95 e0       	ldi	r25, 0x05	; 5
    13a8:	0e 94 3b 04 	call	0x876	; 0x876 <DriverMotorSet>
	DriverLedWrite(0b111);							//Enable leds
    13ac:	87 e0       	ldi	r24, 0x07	; 7
    13ae:	0e 94 b8 03 	call	0x770	; 0x770 <DriverLedWrite>
	DriverAdps9960Get(&clear, &red, &green, &blue); //Measure photo sensor data
    13b2:	22 ea       	ldi	r18, 0xA2	; 162
    13b4:	30 e2       	ldi	r19, 0x20	; 32
    13b6:	44 ea       	ldi	r20, 0xA4	; 164
    13b8:	50 e2       	ldi	r21, 0x20	; 32
    13ba:	66 ea       	ldi	r22, 0xA6	; 166
    13bc:	70 e2       	ldi	r23, 0x20	; 32
    13be:	82 eb       	ldi	r24, 0xB2	; 178
    13c0:	90 e2       	ldi	r25, 0x20	; 32
    13c2:	0e 94 4c 02 	call	0x498	; 0x498 <DriverAdps9960Get>
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	aa ef       	ldi	r26, 0xFA	; 250
    13cc:	b3 e4       	ldi	r27, 0x43	; 67
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	9a 83       	std	Y+2, r25	; 0x02
    13d2:	ab 83       	std	Y+3, r26	; 0x03
    13d4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	4a ef       	ldi	r20, 0xFA	; 250
    13dc:	55 e4       	ldi	r21, 0x45	; 69
    13de:	69 81       	ldd	r22, Y+1	; 0x01
    13e0:	7a 81       	ldd	r23, Y+2	; 0x02
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	8d 83       	std	Y+5, r24	; 0x05
    13f0:	9e 83       	std	Y+6, r25	; 0x06
    13f2:	af 83       	std	Y+7, r26	; 0x07
    13f4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e8       	ldi	r20, 0x80	; 128
    13fc:	5f e3       	ldi	r21, 0x3F	; 63
    13fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1400:	7e 81       	ldd	r23, Y+6	; 0x06
    1402:	8f 81       	ldd	r24, Y+7	; 0x07
    1404:	98 85       	ldd	r25, Y+8	; 0x08
    1406:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__cmpsf2>
    140a:	88 23       	and	r24, r24
    140c:	2c f4       	brge	.+10     	; 0x1418 <run+0x9c>
		__ticks = 1;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	89 87       	std	Y+9, r24	; 0x09
    1414:	9a 87       	std	Y+10, r25	; 0x0a
    1416:	3f c0       	rjmp	.+126    	; 0x1496 <run+0x11a>
	else if (__tmp > 65535)
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	3f ef       	ldi	r19, 0xFF	; 255
    141c:	4f e7       	ldi	r20, 0x7F	; 127
    141e:	57 e4       	ldi	r21, 0x47	; 71
    1420:	6d 81       	ldd	r22, Y+5	; 0x05
    1422:	7e 81       	ldd	r23, Y+6	; 0x06
    1424:	8f 81       	ldd	r24, Y+7	; 0x07
    1426:	98 85       	ldd	r25, Y+8	; 0x08
    1428:	0e 94 3d 0b 	call	0x167a	; 0x167a <__gesf2>
    142c:	18 16       	cp	r1, r24
    142e:	4c f5       	brge	.+82     	; 0x1482 <run+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e2       	ldi	r20, 0x20	; 32
    1436:	51 e4       	ldi	r21, 0x41	; 65
    1438:	69 81       	ldd	r22, Y+1	; 0x01
    143a:	7a 81       	ldd	r23, Y+2	; 0x02
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	bc 01       	movw	r22, r24
    144a:	cd 01       	movw	r24, r26
    144c:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__fixunssfsi>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	89 87       	std	Y+9, r24	; 0x09
    1456:	9a 87       	std	Y+10, r25	; 0x0a
    1458:	0f c0       	rjmp	.+30     	; 0x1478 <run+0xfc>
    145a:	80 e2       	ldi	r24, 0x20	; 32
    145c:	93 e0       	ldi	r25, 0x03	; 3
    145e:	8b 87       	std	Y+11, r24	; 0x0b
    1460:	9c 87       	std	Y+12, r25	; 0x0c
    1462:	8b 85       	ldd	r24, Y+11	; 0x0b
    1464:	9c 85       	ldd	r25, Y+12	; 0x0c
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <run+0xea>
    146a:	8b 87       	std	Y+11, r24	; 0x0b
    146c:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146e:	89 85       	ldd	r24, Y+9	; 0x09
    1470:	9a 85       	ldd	r25, Y+10	; 0x0a
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	89 87       	std	Y+9, r24	; 0x09
    1476:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1478:	89 85       	ldd	r24, Y+9	; 0x09
    147a:	9a 85       	ldd	r25, Y+10	; 0x0a
    147c:	89 2b       	or	r24, r25
    147e:	69 f7       	brne	.-38     	; 0x145a <run+0xde>
    1480:	14 c0       	rjmp	.+40     	; 0x14aa <run+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1482:	6d 81       	ldd	r22, Y+5	; 0x05
    1484:	7e 81       	ldd	r23, Y+6	; 0x06
    1486:	8f 81       	ldd	r24, Y+7	; 0x07
    1488:	98 85       	ldd	r25, Y+8	; 0x08
    148a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__fixunssfsi>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	89 87       	std	Y+9, r24	; 0x09
    1494:	9a 87       	std	Y+10, r25	; 0x0a
    1496:	89 85       	ldd	r24, Y+9	; 0x09
    1498:	9a 85       	ldd	r25, Y+10	; 0x0a
    149a:	8d 87       	std	Y+13, r24	; 0x0d
    149c:	9e 87       	std	Y+14, r25	; 0x0e
    149e:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	f1 f7       	brne	.-4      	; 0x14a2 <run+0x126>
    14a6:	8d 87       	std	Y+13, r24	; 0x0d
    14a8:	9e 87       	std	Y+14, r25	; 0x0e

	while(1) {
		_delay_ms(500);
		printf ("C:%d\t R:%d\t G:%d\t B:%d\t\n\r", clear, red, green, blue);	//Print photo data
    14aa:	60 91 a2 20 	lds	r22, 0x20A2	; 0x8020a2 <blue>
    14ae:	70 91 a3 20 	lds	r23, 0x20A3	; 0x8020a3 <blue+0x1>
    14b2:	40 91 a4 20 	lds	r20, 0x20A4	; 0x8020a4 <green>
    14b6:	50 91 a5 20 	lds	r21, 0x20A5	; 0x8020a5 <green+0x1>
    14ba:	20 91 a6 20 	lds	r18, 0x20A6	; 0x8020a6 <red>
    14be:	30 91 a7 20 	lds	r19, 0x20A7	; 0x8020a7 <red+0x1>
    14c2:	80 91 b2 20 	lds	r24, 0x20B2	; 0x8020b2 <clear>
    14c6:	90 91 b3 20 	lds	r25, 0x20B3	; 0x8020b3 <clear+0x1>
    14ca:	e7 2f       	mov	r30, r23
    14cc:	ef 93       	push	r30
    14ce:	6f 93       	push	r22
    14d0:	65 2f       	mov	r22, r21
    14d2:	6f 93       	push	r22
    14d4:	4f 93       	push	r20
    14d6:	43 2f       	mov	r20, r19
    14d8:	4f 93       	push	r20
    14da:	2f 93       	push	r18
    14dc:	29 2f       	mov	r18, r25
    14de:	2f 93       	push	r18
    14e0:	8f 93       	push	r24
    14e2:	82 e6       	ldi	r24, 0x62	; 98
    14e4:	90 e2       	ldi	r25, 0x20	; 32
    14e6:	89 2f       	mov	r24, r25
    14e8:	8f 93       	push	r24
    14ea:	82 e6       	ldi	r24, 0x62	; 98
    14ec:	90 e2       	ldi	r25, 0x20	; 32
    14ee:	8f 93       	push	r24
    14f0:	0e 94 af 10 	call	0x215e	; 0x215e <printf>
    14f4:	8d b7       	in	r24, 0x3d	; 61
    14f6:	9e b7       	in	r25, 0x3e	; 62
    14f8:	0a 96       	adiw	r24, 0x0a	; 10
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	de bf       	out	0x3e, r29	; 62
		DriverAdps9960Get(&clear, &red, &green, &blue); //Measure photo sensor data
    14fe:	22 ea       	ldi	r18, 0xA2	; 162
    1500:	30 e2       	ldi	r19, 0x20	; 32
    1502:	44 ea       	ldi	r20, 0xA4	; 164
    1504:	50 e2       	ldi	r21, 0x20	; 32
    1506:	66 ea       	ldi	r22, 0xA6	; 166
    1508:	70 e2       	ldi	r23, 0x20	; 32
    150a:	82 eb       	ldi	r24, 0xB2	; 178
    150c:	90 e2       	ldi	r25, 0x20	; 32
    150e:	0e 94 4c 02 	call	0x498	; 0x498 <DriverAdps9960Get>

		if (getSleepFlag()){							//Check for sleep flag set
    1512:	0e 94 2b 03 	call	0x656	; 0x656 <getSleepFlag>
    1516:	88 23       	and	r24, r24
    1518:	09 f4       	brne	.+2      	; 0x151c <run+0x1a0>
    151a:	55 cf       	rjmp	.-342    	; 0x13c6 <run+0x4a>
			clearSleepFlag();
    151c:	0e 94 34 03 	call	0x668	; 0x668 <clearSleepFlag>
			DriverPowerVccAuxSet(0);
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <DriverPowerVccAuxSet>
			DriverMotorSet(0,0);
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 3b 04 	call	0x876	; 0x876 <DriverMotorSet>
			sei();
    1532:	78 94       	sei
			sleep_cpu();
    1534:	88 95       	sleep
			printf("\n\rSleep\n\r");
    1536:	8c e7       	ldi	r24, 0x7C	; 124
    1538:	90 e2       	ldi	r25, 0x20	; 32
    153a:	89 2f       	mov	r24, r25
    153c:	8f 93       	push	r24
    153e:	8c e7       	ldi	r24, 0x7C	; 124
    1540:	90 e2       	ldi	r25, 0x20	; 32
    1542:	8f 93       	push	r24
    1544:	0e 94 af 10 	call	0x215e	; 0x215e <printf>
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
			break;				
    154c:	00 00       	nop
		}
	}
	return 0;
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
}
    1552:	2e 96       	adiw	r28, 0x0e	; 14
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	08 95       	ret

0000155e <main>:


int main(void)
{
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
	init();
    1566:	0e 94 1c 09 	call	0x1238	; 0x1238 <init>
	run();
    156a:	0e 94 be 09 	call	0x137c	; 0x137c <run>
	
	return 0;
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	90 e0       	ldi	r25, 0x00	; 0
}
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	08 95       	ret

00001578 <__cmpsf2>:
    1578:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__fp_cmp>
    157c:	08 f4       	brcc	.+2      	; 0x1580 <__cmpsf2+0x8>
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	08 95       	ret

00001582 <__fixunssfsi>:
    1582:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__fp_splitA>
    1586:	88 f0       	brcs	.+34     	; 0x15aa <__fixunssfsi+0x28>
    1588:	9f 57       	subi	r25, 0x7F	; 127
    158a:	98 f0       	brcs	.+38     	; 0x15b2 <__fixunssfsi+0x30>
    158c:	b9 2f       	mov	r27, r25
    158e:	99 27       	eor	r25, r25
    1590:	b7 51       	subi	r27, 0x17	; 23
    1592:	b0 f0       	brcs	.+44     	; 0x15c0 <__fixunssfsi+0x3e>
    1594:	e1 f0       	breq	.+56     	; 0x15ce <__fixunssfsi+0x4c>
    1596:	66 0f       	add	r22, r22
    1598:	77 1f       	adc	r23, r23
    159a:	88 1f       	adc	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	1a f0       	brmi	.+6      	; 0x15a6 <__fixunssfsi+0x24>
    15a0:	ba 95       	dec	r27
    15a2:	c9 f7       	brne	.-14     	; 0x1596 <__fixunssfsi+0x14>
    15a4:	14 c0       	rjmp	.+40     	; 0x15ce <__fixunssfsi+0x4c>
    15a6:	b1 30       	cpi	r27, 0x01	; 1
    15a8:	91 f0       	breq	.+36     	; 0x15ce <__fixunssfsi+0x4c>
    15aa:	0e 94 36 0b 	call	0x166c	; 0x166c <__fp_zero>
    15ae:	b1 e0       	ldi	r27, 0x01	; 1
    15b0:	08 95       	ret
    15b2:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__fp_zero>
    15b6:	67 2f       	mov	r22, r23
    15b8:	78 2f       	mov	r23, r24
    15ba:	88 27       	eor	r24, r24
    15bc:	b8 5f       	subi	r27, 0xF8	; 248
    15be:	39 f0       	breq	.+14     	; 0x15ce <__fixunssfsi+0x4c>
    15c0:	b9 3f       	cpi	r27, 0xF9	; 249
    15c2:	cc f3       	brlt	.-14     	; 0x15b6 <__fixunssfsi+0x34>
    15c4:	86 95       	lsr	r24
    15c6:	77 95       	ror	r23
    15c8:	67 95       	ror	r22
    15ca:	b3 95       	inc	r27
    15cc:	d9 f7       	brne	.-10     	; 0x15c4 <__fixunssfsi+0x42>
    15ce:	3e f4       	brtc	.+14     	; 0x15de <__fixunssfsi+0x5c>
    15d0:	90 95       	com	r25
    15d2:	80 95       	com	r24
    15d4:	70 95       	com	r23
    15d6:	61 95       	neg	r22
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255
    15da:	8f 4f       	sbci	r24, 0xFF	; 255
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	08 95       	ret

000015e0 <__fp_cmp>:
    15e0:	99 0f       	add	r25, r25
    15e2:	00 08       	sbc	r0, r0
    15e4:	55 0f       	add	r21, r21
    15e6:	aa 0b       	sbc	r26, r26
    15e8:	e0 e8       	ldi	r30, 0x80	; 128
    15ea:	fe ef       	ldi	r31, 0xFE	; 254
    15ec:	16 16       	cp	r1, r22
    15ee:	17 06       	cpc	r1, r23
    15f0:	e8 07       	cpc	r30, r24
    15f2:	f9 07       	cpc	r31, r25
    15f4:	c0 f0       	brcs	.+48     	; 0x1626 <__fp_cmp+0x46>
    15f6:	12 16       	cp	r1, r18
    15f8:	13 06       	cpc	r1, r19
    15fa:	e4 07       	cpc	r30, r20
    15fc:	f5 07       	cpc	r31, r21
    15fe:	98 f0       	brcs	.+38     	; 0x1626 <__fp_cmp+0x46>
    1600:	62 1b       	sub	r22, r18
    1602:	73 0b       	sbc	r23, r19
    1604:	84 0b       	sbc	r24, r20
    1606:	95 0b       	sbc	r25, r21
    1608:	39 f4       	brne	.+14     	; 0x1618 <__fp_cmp+0x38>
    160a:	0a 26       	eor	r0, r26
    160c:	61 f0       	breq	.+24     	; 0x1626 <__fp_cmp+0x46>
    160e:	23 2b       	or	r18, r19
    1610:	24 2b       	or	r18, r20
    1612:	25 2b       	or	r18, r21
    1614:	21 f4       	brne	.+8      	; 0x161e <__fp_cmp+0x3e>
    1616:	08 95       	ret
    1618:	0a 26       	eor	r0, r26
    161a:	09 f4       	brne	.+2      	; 0x161e <__fp_cmp+0x3e>
    161c:	a1 40       	sbci	r26, 0x01	; 1
    161e:	a6 95       	lsr	r26
    1620:	8f ef       	ldi	r24, 0xFF	; 255
    1622:	81 1d       	adc	r24, r1
    1624:	81 1d       	adc	r24, r1
    1626:	08 95       	ret

00001628 <__fp_split3>:
    1628:	57 fd       	sbrc	r21, 7
    162a:	90 58       	subi	r25, 0x80	; 128
    162c:	44 0f       	add	r20, r20
    162e:	55 1f       	adc	r21, r21
    1630:	59 f0       	breq	.+22     	; 0x1648 <__fp_splitA+0x10>
    1632:	5f 3f       	cpi	r21, 0xFF	; 255
    1634:	71 f0       	breq	.+28     	; 0x1652 <__fp_splitA+0x1a>
    1636:	47 95       	ror	r20

00001638 <__fp_splitA>:
    1638:	88 0f       	add	r24, r24
    163a:	97 fb       	bst	r25, 7
    163c:	99 1f       	adc	r25, r25
    163e:	61 f0       	breq	.+24     	; 0x1658 <__fp_splitA+0x20>
    1640:	9f 3f       	cpi	r25, 0xFF	; 255
    1642:	79 f0       	breq	.+30     	; 0x1662 <__fp_splitA+0x2a>
    1644:	87 95       	ror	r24
    1646:	08 95       	ret
    1648:	12 16       	cp	r1, r18
    164a:	13 06       	cpc	r1, r19
    164c:	14 06       	cpc	r1, r20
    164e:	55 1f       	adc	r21, r21
    1650:	f2 cf       	rjmp	.-28     	; 0x1636 <__fp_split3+0xe>
    1652:	46 95       	lsr	r20
    1654:	f1 df       	rcall	.-30     	; 0x1638 <__fp_splitA>
    1656:	08 c0       	rjmp	.+16     	; 0x1668 <__fp_splitA+0x30>
    1658:	16 16       	cp	r1, r22
    165a:	17 06       	cpc	r1, r23
    165c:	18 06       	cpc	r1, r24
    165e:	99 1f       	adc	r25, r25
    1660:	f1 cf       	rjmp	.-30     	; 0x1644 <__fp_splitA+0xc>
    1662:	86 95       	lsr	r24
    1664:	71 05       	cpc	r23, r1
    1666:	61 05       	cpc	r22, r1
    1668:	08 94       	sec
    166a:	08 95       	ret

0000166c <__fp_zero>:
    166c:	e8 94       	clt

0000166e <__fp_szero>:
    166e:	bb 27       	eor	r27, r27
    1670:	66 27       	eor	r22, r22
    1672:	77 27       	eor	r23, r23
    1674:	cb 01       	movw	r24, r22
    1676:	97 f9       	bld	r25, 7
    1678:	08 95       	ret

0000167a <__gesf2>:
    167a:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__fp_cmp>
    167e:	08 f4       	brcc	.+2      	; 0x1682 <__gesf2+0x8>
    1680:	8f ef       	ldi	r24, 0xFF	; 255
    1682:	08 95       	ret

00001684 <__mulsf3>:
    1684:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__mulsf3x>
    1688:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__fp_round>
    168c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fp_pscA>
    1690:	38 f0       	brcs	.+14     	; 0x16a0 <__mulsf3+0x1c>
    1692:	0e 94 bf 0b 	call	0x177e	; 0x177e <__fp_pscB>
    1696:	20 f0       	brcs	.+8      	; 0x16a0 <__mulsf3+0x1c>
    1698:	95 23       	and	r25, r21
    169a:	11 f0       	breq	.+4      	; 0x16a0 <__mulsf3+0x1c>
    169c:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__fp_inf>
    16a0:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <__fp_nan>
    16a4:	11 24       	eor	r1, r1
    16a6:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__fp_szero>

000016aa <__mulsf3x>:
    16aa:	0e 94 14 0b 	call	0x1628	; 0x1628 <__fp_split3>
    16ae:	70 f3       	brcs	.-36     	; 0x168c <__mulsf3+0x8>

000016b0 <__mulsf3_pse>:
    16b0:	95 9f       	mul	r25, r21
    16b2:	c1 f3       	breq	.-16     	; 0x16a4 <__mulsf3+0x20>
    16b4:	95 0f       	add	r25, r21
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	55 1f       	adc	r21, r21
    16ba:	62 9f       	mul	r22, r18
    16bc:	f0 01       	movw	r30, r0
    16be:	72 9f       	mul	r23, r18
    16c0:	bb 27       	eor	r27, r27
    16c2:	f0 0d       	add	r31, r0
    16c4:	b1 1d       	adc	r27, r1
    16c6:	63 9f       	mul	r22, r19
    16c8:	aa 27       	eor	r26, r26
    16ca:	f0 0d       	add	r31, r0
    16cc:	b1 1d       	adc	r27, r1
    16ce:	aa 1f       	adc	r26, r26
    16d0:	64 9f       	mul	r22, r20
    16d2:	66 27       	eor	r22, r22
    16d4:	b0 0d       	add	r27, r0
    16d6:	a1 1d       	adc	r26, r1
    16d8:	66 1f       	adc	r22, r22
    16da:	82 9f       	mul	r24, r18
    16dc:	22 27       	eor	r18, r18
    16de:	b0 0d       	add	r27, r0
    16e0:	a1 1d       	adc	r26, r1
    16e2:	62 1f       	adc	r22, r18
    16e4:	73 9f       	mul	r23, r19
    16e6:	b0 0d       	add	r27, r0
    16e8:	a1 1d       	adc	r26, r1
    16ea:	62 1f       	adc	r22, r18
    16ec:	83 9f       	mul	r24, r19
    16ee:	a0 0d       	add	r26, r0
    16f0:	61 1d       	adc	r22, r1
    16f2:	22 1f       	adc	r18, r18
    16f4:	74 9f       	mul	r23, r20
    16f6:	33 27       	eor	r19, r19
    16f8:	a0 0d       	add	r26, r0
    16fa:	61 1d       	adc	r22, r1
    16fc:	23 1f       	adc	r18, r19
    16fe:	84 9f       	mul	r24, r20
    1700:	60 0d       	add	r22, r0
    1702:	21 1d       	adc	r18, r1
    1704:	82 2f       	mov	r24, r18
    1706:	76 2f       	mov	r23, r22
    1708:	6a 2f       	mov	r22, r26
    170a:	11 24       	eor	r1, r1
    170c:	9f 57       	subi	r25, 0x7F	; 127
    170e:	50 40       	sbci	r21, 0x00	; 0
    1710:	9a f0       	brmi	.+38     	; 0x1738 <__mulsf3_pse+0x88>
    1712:	f1 f0       	breq	.+60     	; 0x1750 <__mulsf3_pse+0xa0>
    1714:	88 23       	and	r24, r24
    1716:	4a f0       	brmi	.+18     	; 0x172a <__mulsf3_pse+0x7a>
    1718:	ee 0f       	add	r30, r30
    171a:	ff 1f       	adc	r31, r31
    171c:	bb 1f       	adc	r27, r27
    171e:	66 1f       	adc	r22, r22
    1720:	77 1f       	adc	r23, r23
    1722:	88 1f       	adc	r24, r24
    1724:	91 50       	subi	r25, 0x01	; 1
    1726:	50 40       	sbci	r21, 0x00	; 0
    1728:	a9 f7       	brne	.-22     	; 0x1714 <__mulsf3_pse+0x64>
    172a:	9e 3f       	cpi	r25, 0xFE	; 254
    172c:	51 05       	cpc	r21, r1
    172e:	80 f0       	brcs	.+32     	; 0x1750 <__mulsf3_pse+0xa0>
    1730:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__fp_inf>
    1734:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__fp_szero>
    1738:	5f 3f       	cpi	r21, 0xFF	; 255
    173a:	e4 f3       	brlt	.-8      	; 0x1734 <__mulsf3_pse+0x84>
    173c:	98 3e       	cpi	r25, 0xE8	; 232
    173e:	d4 f3       	brlt	.-12     	; 0x1734 <__mulsf3_pse+0x84>
    1740:	86 95       	lsr	r24
    1742:	77 95       	ror	r23
    1744:	67 95       	ror	r22
    1746:	b7 95       	ror	r27
    1748:	f7 95       	ror	r31
    174a:	e7 95       	ror	r30
    174c:	9f 5f       	subi	r25, 0xFF	; 255
    174e:	c1 f7       	brne	.-16     	; 0x1740 <__mulsf3_pse+0x90>
    1750:	fe 2b       	or	r31, r30
    1752:	88 0f       	add	r24, r24
    1754:	91 1d       	adc	r25, r1
    1756:	96 95       	lsr	r25
    1758:	87 95       	ror	r24
    175a:	97 f9       	bld	r25, 7
    175c:	08 95       	ret

0000175e <__fp_inf>:
    175e:	97 f9       	bld	r25, 7
    1760:	9f 67       	ori	r25, 0x7F	; 127
    1762:	80 e8       	ldi	r24, 0x80	; 128
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	08 95       	ret

0000176a <__fp_nan>:
    176a:	9f ef       	ldi	r25, 0xFF	; 255
    176c:	80 ec       	ldi	r24, 0xC0	; 192
    176e:	08 95       	ret

00001770 <__fp_pscA>:
    1770:	00 24       	eor	r0, r0
    1772:	0a 94       	dec	r0
    1774:	16 16       	cp	r1, r22
    1776:	17 06       	cpc	r1, r23
    1778:	18 06       	cpc	r1, r24
    177a:	09 06       	cpc	r0, r25
    177c:	08 95       	ret

0000177e <__fp_pscB>:
    177e:	00 24       	eor	r0, r0
    1780:	0a 94       	dec	r0
    1782:	12 16       	cp	r1, r18
    1784:	13 06       	cpc	r1, r19
    1786:	14 06       	cpc	r1, r20
    1788:	05 06       	cpc	r0, r21
    178a:	08 95       	ret

0000178c <__fp_round>:
    178c:	09 2e       	mov	r0, r25
    178e:	03 94       	inc	r0
    1790:	00 0c       	add	r0, r0
    1792:	11 f4       	brne	.+4      	; 0x1798 <__fp_round+0xc>
    1794:	88 23       	and	r24, r24
    1796:	52 f0       	brmi	.+20     	; 0x17ac <__fp_round+0x20>
    1798:	bb 0f       	add	r27, r27
    179a:	40 f4       	brcc	.+16     	; 0x17ac <__fp_round+0x20>
    179c:	bf 2b       	or	r27, r31
    179e:	11 f4       	brne	.+4      	; 0x17a4 <__fp_round+0x18>
    17a0:	60 ff       	sbrs	r22, 0
    17a2:	04 c0       	rjmp	.+8      	; 0x17ac <__fp_round+0x20>
    17a4:	6f 5f       	subi	r22, 0xFF	; 255
    17a6:	7f 4f       	sbci	r23, 0xFF	; 255
    17a8:	8f 4f       	sbci	r24, 0xFF	; 255
    17aa:	9f 4f       	sbci	r25, 0xFF	; 255
    17ac:	08 95       	ret

000017ae <DriverPowerInit>:
    17ae:	80 e2       	ldi	r24, 0x20	; 32
    17b0:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    17b4:	08 95       	ret

000017b6 <DriverPowerVccAuxSet>:
    17b6:	81 11       	cpse	r24, r1
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <DriverPowerVccAuxSet+0xc>
    17ba:	80 e2       	ldi	r24, 0x20	; 32
    17bc:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    17c0:	08 95       	ret
    17c2:	80 e2       	ldi	r24, 0x20	; 32
    17c4:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    17c8:	08 95       	ret

000017ca <vfprintf>:
    17ca:	2f 92       	push	r2
    17cc:	3f 92       	push	r3
    17ce:	4f 92       	push	r4
    17d0:	5f 92       	push	r5
    17d2:	6f 92       	push	r6
    17d4:	7f 92       	push	r7
    17d6:	8f 92       	push	r8
    17d8:	9f 92       	push	r9
    17da:	af 92       	push	r10
    17dc:	bf 92       	push	r11
    17de:	cf 92       	push	r12
    17e0:	df 92       	push	r13
    17e2:	ef 92       	push	r14
    17e4:	ff 92       	push	r15
    17e6:	0f 93       	push	r16
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	60 97       	sbiw	r28, 0x10	; 16
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	7c 01       	movw	r14, r24
    17fa:	1b 01       	movw	r2, r22
    17fc:	6a 01       	movw	r12, r20
    17fe:	fc 01       	movw	r30, r24
    1800:	16 82       	std	Z+6, r1	; 0x06
    1802:	17 82       	std	Z+7, r1	; 0x07
    1804:	83 81       	ldd	r24, Z+3	; 0x03
    1806:	81 ff       	sbrs	r24, 1
    1808:	44 c3       	rjmp	.+1672   	; 0x1e92 <vfprintf+0x6c8>
    180a:	9e 01       	movw	r18, r28
    180c:	2f 5f       	subi	r18, 0xFF	; 255
    180e:	3f 4f       	sbci	r19, 0xFF	; 255
    1810:	39 01       	movw	r6, r18
    1812:	f7 01       	movw	r30, r14
    1814:	93 81       	ldd	r25, Z+3	; 0x03
    1816:	f1 01       	movw	r30, r2
    1818:	93 fd       	sbrc	r25, 3
    181a:	85 91       	lpm	r24, Z+
    181c:	93 ff       	sbrs	r25, 3
    181e:	81 91       	ld	r24, Z+
    1820:	1f 01       	movw	r2, r30
    1822:	88 23       	and	r24, r24
    1824:	09 f4       	brne	.+2      	; 0x1828 <vfprintf+0x5e>
    1826:	31 c3       	rjmp	.+1634   	; 0x1e8a <vfprintf+0x6c0>
    1828:	85 32       	cpi	r24, 0x25	; 37
    182a:	39 f4       	brne	.+14     	; 0x183a <vfprintf+0x70>
    182c:	93 fd       	sbrc	r25, 3
    182e:	85 91       	lpm	r24, Z+
    1830:	93 ff       	sbrs	r25, 3
    1832:	81 91       	ld	r24, Z+
    1834:	1f 01       	movw	r2, r30
    1836:	85 32       	cpi	r24, 0x25	; 37
    1838:	39 f4       	brne	.+14     	; 0x1848 <vfprintf+0x7e>
    183a:	b7 01       	movw	r22, r14
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1842:	56 01       	movw	r10, r12
    1844:	65 01       	movw	r12, r10
    1846:	e5 cf       	rjmp	.-54     	; 0x1812 <vfprintf+0x48>
    1848:	10 e0       	ldi	r17, 0x00	; 0
    184a:	51 2c       	mov	r5, r1
    184c:	91 2c       	mov	r9, r1
    184e:	ff e1       	ldi	r31, 0x1F	; 31
    1850:	f9 15       	cp	r31, r9
    1852:	d8 f0       	brcs	.+54     	; 0x188a <vfprintf+0xc0>
    1854:	8b 32       	cpi	r24, 0x2B	; 43
    1856:	79 f0       	breq	.+30     	; 0x1876 <vfprintf+0xac>
    1858:	38 f4       	brcc	.+14     	; 0x1868 <vfprintf+0x9e>
    185a:	80 32       	cpi	r24, 0x20	; 32
    185c:	79 f0       	breq	.+30     	; 0x187c <vfprintf+0xb2>
    185e:	83 32       	cpi	r24, 0x23	; 35
    1860:	a1 f4       	brne	.+40     	; 0x188a <vfprintf+0xc0>
    1862:	f9 2d       	mov	r31, r9
    1864:	f0 61       	ori	r31, 0x10	; 16
    1866:	2e c0       	rjmp	.+92     	; 0x18c4 <vfprintf+0xfa>
    1868:	8d 32       	cpi	r24, 0x2D	; 45
    186a:	61 f0       	breq	.+24     	; 0x1884 <vfprintf+0xba>
    186c:	80 33       	cpi	r24, 0x30	; 48
    186e:	69 f4       	brne	.+26     	; 0x188a <vfprintf+0xc0>
    1870:	29 2d       	mov	r18, r9
    1872:	21 60       	ori	r18, 0x01	; 1
    1874:	2d c0       	rjmp	.+90     	; 0x18d0 <vfprintf+0x106>
    1876:	39 2d       	mov	r19, r9
    1878:	32 60       	ori	r19, 0x02	; 2
    187a:	93 2e       	mov	r9, r19
    187c:	89 2d       	mov	r24, r9
    187e:	84 60       	ori	r24, 0x04	; 4
    1880:	98 2e       	mov	r9, r24
    1882:	2a c0       	rjmp	.+84     	; 0x18d8 <vfprintf+0x10e>
    1884:	e9 2d       	mov	r30, r9
    1886:	e8 60       	ori	r30, 0x08	; 8
    1888:	15 c0       	rjmp	.+42     	; 0x18b4 <vfprintf+0xea>
    188a:	97 fc       	sbrc	r9, 7
    188c:	2d c0       	rjmp	.+90     	; 0x18e8 <vfprintf+0x11e>
    188e:	20 ed       	ldi	r18, 0xD0	; 208
    1890:	28 0f       	add	r18, r24
    1892:	2a 30       	cpi	r18, 0x0A	; 10
    1894:	88 f4       	brcc	.+34     	; 0x18b8 <vfprintf+0xee>
    1896:	96 fe       	sbrs	r9, 6
    1898:	06 c0       	rjmp	.+12     	; 0x18a6 <vfprintf+0xdc>
    189a:	3a e0       	ldi	r19, 0x0A	; 10
    189c:	13 9f       	mul	r17, r19
    189e:	20 0d       	add	r18, r0
    18a0:	11 24       	eor	r1, r1
    18a2:	12 2f       	mov	r17, r18
    18a4:	19 c0       	rjmp	.+50     	; 0x18d8 <vfprintf+0x10e>
    18a6:	8a e0       	ldi	r24, 0x0A	; 10
    18a8:	58 9e       	mul	r5, r24
    18aa:	20 0d       	add	r18, r0
    18ac:	11 24       	eor	r1, r1
    18ae:	52 2e       	mov	r5, r18
    18b0:	e9 2d       	mov	r30, r9
    18b2:	e0 62       	ori	r30, 0x20	; 32
    18b4:	9e 2e       	mov	r9, r30
    18b6:	10 c0       	rjmp	.+32     	; 0x18d8 <vfprintf+0x10e>
    18b8:	8e 32       	cpi	r24, 0x2E	; 46
    18ba:	31 f4       	brne	.+12     	; 0x18c8 <vfprintf+0xfe>
    18bc:	96 fc       	sbrc	r9, 6
    18be:	e5 c2       	rjmp	.+1482   	; 0x1e8a <vfprintf+0x6c0>
    18c0:	f9 2d       	mov	r31, r9
    18c2:	f0 64       	ori	r31, 0x40	; 64
    18c4:	9f 2e       	mov	r9, r31
    18c6:	08 c0       	rjmp	.+16     	; 0x18d8 <vfprintf+0x10e>
    18c8:	8c 36       	cpi	r24, 0x6C	; 108
    18ca:	21 f4       	brne	.+8      	; 0x18d4 <vfprintf+0x10a>
    18cc:	29 2d       	mov	r18, r9
    18ce:	20 68       	ori	r18, 0x80	; 128
    18d0:	92 2e       	mov	r9, r18
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <vfprintf+0x10e>
    18d4:	88 36       	cpi	r24, 0x68	; 104
    18d6:	41 f4       	brne	.+16     	; 0x18e8 <vfprintf+0x11e>
    18d8:	f1 01       	movw	r30, r2
    18da:	93 fd       	sbrc	r25, 3
    18dc:	85 91       	lpm	r24, Z+
    18de:	93 ff       	sbrs	r25, 3
    18e0:	81 91       	ld	r24, Z+
    18e2:	1f 01       	movw	r2, r30
    18e4:	81 11       	cpse	r24, r1
    18e6:	b3 cf       	rjmp	.-154    	; 0x184e <vfprintf+0x84>
    18e8:	9b eb       	ldi	r25, 0xBB	; 187
    18ea:	98 0f       	add	r25, r24
    18ec:	93 30       	cpi	r25, 0x03	; 3
    18ee:	20 f4       	brcc	.+8      	; 0x18f8 <vfprintf+0x12e>
    18f0:	99 2d       	mov	r25, r9
    18f2:	90 61       	ori	r25, 0x10	; 16
    18f4:	80 5e       	subi	r24, 0xE0	; 224
    18f6:	07 c0       	rjmp	.+14     	; 0x1906 <vfprintf+0x13c>
    18f8:	9b e9       	ldi	r25, 0x9B	; 155
    18fa:	98 0f       	add	r25, r24
    18fc:	93 30       	cpi	r25, 0x03	; 3
    18fe:	08 f0       	brcs	.+2      	; 0x1902 <vfprintf+0x138>
    1900:	66 c1       	rjmp	.+716    	; 0x1bce <vfprintf+0x404>
    1902:	99 2d       	mov	r25, r9
    1904:	9f 7e       	andi	r25, 0xEF	; 239
    1906:	96 ff       	sbrs	r25, 6
    1908:	16 e0       	ldi	r17, 0x06	; 6
    190a:	9f 73       	andi	r25, 0x3F	; 63
    190c:	99 2e       	mov	r9, r25
    190e:	85 36       	cpi	r24, 0x65	; 101
    1910:	19 f4       	brne	.+6      	; 0x1918 <vfprintf+0x14e>
    1912:	90 64       	ori	r25, 0x40	; 64
    1914:	99 2e       	mov	r9, r25
    1916:	08 c0       	rjmp	.+16     	; 0x1928 <vfprintf+0x15e>
    1918:	86 36       	cpi	r24, 0x66	; 102
    191a:	21 f4       	brne	.+8      	; 0x1924 <vfprintf+0x15a>
    191c:	39 2f       	mov	r19, r25
    191e:	30 68       	ori	r19, 0x80	; 128
    1920:	93 2e       	mov	r9, r19
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <vfprintf+0x15e>
    1924:	11 11       	cpse	r17, r1
    1926:	11 50       	subi	r17, 0x01	; 1
    1928:	97 fe       	sbrs	r9, 7
    192a:	07 c0       	rjmp	.+14     	; 0x193a <vfprintf+0x170>
    192c:	1c 33       	cpi	r17, 0x3C	; 60
    192e:	50 f4       	brcc	.+20     	; 0x1944 <vfprintf+0x17a>
    1930:	44 24       	eor	r4, r4
    1932:	43 94       	inc	r4
    1934:	41 0e       	add	r4, r17
    1936:	27 e0       	ldi	r18, 0x07	; 7
    1938:	0b c0       	rjmp	.+22     	; 0x1950 <vfprintf+0x186>
    193a:	18 30       	cpi	r17, 0x08	; 8
    193c:	38 f0       	brcs	.+14     	; 0x194c <vfprintf+0x182>
    193e:	27 e0       	ldi	r18, 0x07	; 7
    1940:	17 e0       	ldi	r17, 0x07	; 7
    1942:	05 c0       	rjmp	.+10     	; 0x194e <vfprintf+0x184>
    1944:	27 e0       	ldi	r18, 0x07	; 7
    1946:	9c e3       	ldi	r25, 0x3C	; 60
    1948:	49 2e       	mov	r4, r25
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <vfprintf+0x186>
    194c:	21 2f       	mov	r18, r17
    194e:	41 2c       	mov	r4, r1
    1950:	56 01       	movw	r10, r12
    1952:	84 e0       	ldi	r24, 0x04	; 4
    1954:	a8 0e       	add	r10, r24
    1956:	b1 1c       	adc	r11, r1
    1958:	f6 01       	movw	r30, r12
    195a:	60 81       	ld	r22, Z
    195c:	71 81       	ldd	r23, Z+1	; 0x01
    195e:	82 81       	ldd	r24, Z+2	; 0x02
    1960:	93 81       	ldd	r25, Z+3	; 0x03
    1962:	04 2d       	mov	r16, r4
    1964:	a3 01       	movw	r20, r6
    1966:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__ftoa_engine>
    196a:	6c 01       	movw	r12, r24
    196c:	f9 81       	ldd	r31, Y+1	; 0x01
    196e:	fc 87       	std	Y+12, r31	; 0x0c
    1970:	f0 ff       	sbrs	r31, 0
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <vfprintf+0x1ae>
    1974:	f3 ff       	sbrs	r31, 3
    1976:	06 c0       	rjmp	.+12     	; 0x1984 <vfprintf+0x1ba>
    1978:	91 fc       	sbrc	r9, 1
    197a:	06 c0       	rjmp	.+12     	; 0x1988 <vfprintf+0x1be>
    197c:	92 fe       	sbrs	r9, 2
    197e:	06 c0       	rjmp	.+12     	; 0x198c <vfprintf+0x1c2>
    1980:	00 e2       	ldi	r16, 0x20	; 32
    1982:	05 c0       	rjmp	.+10     	; 0x198e <vfprintf+0x1c4>
    1984:	0d e2       	ldi	r16, 0x2D	; 45
    1986:	03 c0       	rjmp	.+6      	; 0x198e <vfprintf+0x1c4>
    1988:	0b e2       	ldi	r16, 0x2B	; 43
    198a:	01 c0       	rjmp	.+2      	; 0x198e <vfprintf+0x1c4>
    198c:	00 e0       	ldi	r16, 0x00	; 0
    198e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1990:	8c 70       	andi	r24, 0x0C	; 12
    1992:	19 f0       	breq	.+6      	; 0x199a <vfprintf+0x1d0>
    1994:	01 11       	cpse	r16, r1
    1996:	5a c2       	rjmp	.+1204   	; 0x1e4c <vfprintf+0x682>
    1998:	9b c2       	rjmp	.+1334   	; 0x1ed0 <vfprintf+0x706>
    199a:	97 fe       	sbrs	r9, 7
    199c:	10 c0       	rjmp	.+32     	; 0x19be <vfprintf+0x1f4>
    199e:	4c 0c       	add	r4, r12
    19a0:	fc 85       	ldd	r31, Y+12	; 0x0c
    19a2:	f4 ff       	sbrs	r31, 4
    19a4:	04 c0       	rjmp	.+8      	; 0x19ae <vfprintf+0x1e4>
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	81 33       	cpi	r24, 0x31	; 49
    19aa:	09 f4       	brne	.+2      	; 0x19ae <vfprintf+0x1e4>
    19ac:	4a 94       	dec	r4
    19ae:	14 14       	cp	r1, r4
    19b0:	74 f5       	brge	.+92     	; 0x1a0e <vfprintf+0x244>
    19b2:	28 e0       	ldi	r18, 0x08	; 8
    19b4:	24 15       	cp	r18, r4
    19b6:	78 f5       	brcc	.+94     	; 0x1a16 <vfprintf+0x24c>
    19b8:	88 e0       	ldi	r24, 0x08	; 8
    19ba:	48 2e       	mov	r4, r24
    19bc:	2c c0       	rjmp	.+88     	; 0x1a16 <vfprintf+0x24c>
    19be:	96 fc       	sbrc	r9, 6
    19c0:	2a c0       	rjmp	.+84     	; 0x1a16 <vfprintf+0x24c>
    19c2:	81 2f       	mov	r24, r17
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	8c 15       	cp	r24, r12
    19c8:	9d 05       	cpc	r25, r13
    19ca:	9c f0       	brlt	.+38     	; 0x19f2 <vfprintf+0x228>
    19cc:	3c ef       	ldi	r19, 0xFC	; 252
    19ce:	c3 16       	cp	r12, r19
    19d0:	3f ef       	ldi	r19, 0xFF	; 255
    19d2:	d3 06       	cpc	r13, r19
    19d4:	74 f0       	brlt	.+28     	; 0x19f2 <vfprintf+0x228>
    19d6:	89 2d       	mov	r24, r9
    19d8:	80 68       	ori	r24, 0x80	; 128
    19da:	98 2e       	mov	r9, r24
    19dc:	0a c0       	rjmp	.+20     	; 0x19f2 <vfprintf+0x228>
    19de:	e2 e0       	ldi	r30, 0x02	; 2
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	ec 0f       	add	r30, r28
    19e4:	fd 1f       	adc	r31, r29
    19e6:	e1 0f       	add	r30, r17
    19e8:	f1 1d       	adc	r31, r1
    19ea:	80 81       	ld	r24, Z
    19ec:	80 33       	cpi	r24, 0x30	; 48
    19ee:	19 f4       	brne	.+6      	; 0x19f6 <vfprintf+0x22c>
    19f0:	11 50       	subi	r17, 0x01	; 1
    19f2:	11 11       	cpse	r17, r1
    19f4:	f4 cf       	rjmp	.-24     	; 0x19de <vfprintf+0x214>
    19f6:	97 fe       	sbrs	r9, 7
    19f8:	0e c0       	rjmp	.+28     	; 0x1a16 <vfprintf+0x24c>
    19fa:	44 24       	eor	r4, r4
    19fc:	43 94       	inc	r4
    19fe:	41 0e       	add	r4, r17
    1a00:	81 2f       	mov	r24, r17
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	c8 16       	cp	r12, r24
    1a06:	d9 06       	cpc	r13, r25
    1a08:	2c f4       	brge	.+10     	; 0x1a14 <vfprintf+0x24a>
    1a0a:	1c 19       	sub	r17, r12
    1a0c:	04 c0       	rjmp	.+8      	; 0x1a16 <vfprintf+0x24c>
    1a0e:	44 24       	eor	r4, r4
    1a10:	43 94       	inc	r4
    1a12:	01 c0       	rjmp	.+2      	; 0x1a16 <vfprintf+0x24c>
    1a14:	10 e0       	ldi	r17, 0x00	; 0
    1a16:	97 fe       	sbrs	r9, 7
    1a18:	06 c0       	rjmp	.+12     	; 0x1a26 <vfprintf+0x25c>
    1a1a:	1c 14       	cp	r1, r12
    1a1c:	1d 04       	cpc	r1, r13
    1a1e:	34 f4       	brge	.+12     	; 0x1a2c <vfprintf+0x262>
    1a20:	c6 01       	movw	r24, r12
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	05 c0       	rjmp	.+10     	; 0x1a30 <vfprintf+0x266>
    1a26:	85 e0       	ldi	r24, 0x05	; 5
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <vfprintf+0x266>
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	01 11       	cpse	r16, r1
    1a32:	01 96       	adiw	r24, 0x01	; 1
    1a34:	11 23       	and	r17, r17
    1a36:	31 f0       	breq	.+12     	; 0x1a44 <vfprintf+0x27a>
    1a38:	21 2f       	mov	r18, r17
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	2f 5f       	subi	r18, 0xFF	; 255
    1a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a40:	82 0f       	add	r24, r18
    1a42:	93 1f       	adc	r25, r19
    1a44:	25 2d       	mov	r18, r5
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	82 17       	cp	r24, r18
    1a4a:	93 07       	cpc	r25, r19
    1a4c:	14 f4       	brge	.+4      	; 0x1a52 <vfprintf+0x288>
    1a4e:	58 1a       	sub	r5, r24
    1a50:	01 c0       	rjmp	.+2      	; 0x1a54 <vfprintf+0x28a>
    1a52:	51 2c       	mov	r5, r1
    1a54:	89 2d       	mov	r24, r9
    1a56:	89 70       	andi	r24, 0x09	; 9
    1a58:	49 f4       	brne	.+18     	; 0x1a6c <vfprintf+0x2a2>
    1a5a:	55 20       	and	r5, r5
    1a5c:	39 f0       	breq	.+14     	; 0x1a6c <vfprintf+0x2a2>
    1a5e:	b7 01       	movw	r22, r14
    1a60:	80 e2       	ldi	r24, 0x20	; 32
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1a68:	5a 94       	dec	r5
    1a6a:	f7 cf       	rjmp	.-18     	; 0x1a5a <vfprintf+0x290>
    1a6c:	00 23       	and	r16, r16
    1a6e:	29 f0       	breq	.+10     	; 0x1a7a <vfprintf+0x2b0>
    1a70:	b7 01       	movw	r22, r14
    1a72:	80 2f       	mov	r24, r16
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1a7a:	93 fc       	sbrc	r9, 3
    1a7c:	09 c0       	rjmp	.+18     	; 0x1a90 <vfprintf+0x2c6>
    1a7e:	55 20       	and	r5, r5
    1a80:	39 f0       	breq	.+14     	; 0x1a90 <vfprintf+0x2c6>
    1a82:	b7 01       	movw	r22, r14
    1a84:	80 e3       	ldi	r24, 0x30	; 48
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1a8c:	5a 94       	dec	r5
    1a8e:	f7 cf       	rjmp	.-18     	; 0x1a7e <vfprintf+0x2b4>
    1a90:	97 fe       	sbrs	r9, 7
    1a92:	4c c0       	rjmp	.+152    	; 0x1b2c <vfprintf+0x362>
    1a94:	46 01       	movw	r8, r12
    1a96:	d7 fe       	sbrs	r13, 7
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <vfprintf+0x2d4>
    1a9a:	81 2c       	mov	r8, r1
    1a9c:	91 2c       	mov	r9, r1
    1a9e:	c6 01       	movw	r24, r12
    1aa0:	88 19       	sub	r24, r8
    1aa2:	99 09       	sbc	r25, r9
    1aa4:	f3 01       	movw	r30, r6
    1aa6:	e8 0f       	add	r30, r24
    1aa8:	f9 1f       	adc	r31, r25
    1aaa:	ed 87       	std	Y+13, r30	; 0x0d
    1aac:	fe 87       	std	Y+14, r31	; 0x0e
    1aae:	96 01       	movw	r18, r12
    1ab0:	24 19       	sub	r18, r4
    1ab2:	31 09       	sbc	r19, r1
    1ab4:	2f 87       	std	Y+15, r18	; 0x0f
    1ab6:	38 8b       	std	Y+16, r19	; 0x10
    1ab8:	01 2f       	mov	r16, r17
    1aba:	10 e0       	ldi	r17, 0x00	; 0
    1abc:	11 95       	neg	r17
    1abe:	01 95       	neg	r16
    1ac0:	11 09       	sbc	r17, r1
    1ac2:	3f ef       	ldi	r19, 0xFF	; 255
    1ac4:	83 16       	cp	r8, r19
    1ac6:	93 06       	cpc	r9, r19
    1ac8:	29 f4       	brne	.+10     	; 0x1ad4 <vfprintf+0x30a>
    1aca:	b7 01       	movw	r22, r14
    1acc:	8e e2       	ldi	r24, 0x2E	; 46
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1ad4:	c8 14       	cp	r12, r8
    1ad6:	d9 04       	cpc	r13, r9
    1ad8:	4c f0       	brlt	.+18     	; 0x1aec <vfprintf+0x322>
    1ada:	8f 85       	ldd	r24, Y+15	; 0x0f
    1adc:	98 89       	ldd	r25, Y+16	; 0x10
    1ade:	88 15       	cp	r24, r8
    1ae0:	99 05       	cpc	r25, r9
    1ae2:	24 f4       	brge	.+8      	; 0x1aec <vfprintf+0x322>
    1ae4:	ed 85       	ldd	r30, Y+13	; 0x0d
    1ae6:	fe 85       	ldd	r31, Y+14	; 0x0e
    1ae8:	81 81       	ldd	r24, Z+1	; 0x01
    1aea:	01 c0       	rjmp	.+2      	; 0x1aee <vfprintf+0x324>
    1aec:	80 e3       	ldi	r24, 0x30	; 48
    1aee:	f1 e0       	ldi	r31, 0x01	; 1
    1af0:	8f 1a       	sub	r8, r31
    1af2:	91 08       	sbc	r9, r1
    1af4:	2d 85       	ldd	r18, Y+13	; 0x0d
    1af6:	3e 85       	ldd	r19, Y+14	; 0x0e
    1af8:	2f 5f       	subi	r18, 0xFF	; 255
    1afa:	3f 4f       	sbci	r19, 0xFF	; 255
    1afc:	2d 87       	std	Y+13, r18	; 0x0d
    1afe:	3e 87       	std	Y+14, r19	; 0x0e
    1b00:	80 16       	cp	r8, r16
    1b02:	91 06       	cpc	r9, r17
    1b04:	2c f0       	brlt	.+10     	; 0x1b10 <vfprintf+0x346>
    1b06:	b7 01       	movw	r22, r14
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1b0e:	d9 cf       	rjmp	.-78     	; 0x1ac2 <vfprintf+0x2f8>
    1b10:	c8 14       	cp	r12, r8
    1b12:	d9 04       	cpc	r13, r9
    1b14:	41 f4       	brne	.+16     	; 0x1b26 <vfprintf+0x35c>
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	96 33       	cpi	r25, 0x36	; 54
    1b1a:	20 f4       	brcc	.+8      	; 0x1b24 <vfprintf+0x35a>
    1b1c:	95 33       	cpi	r25, 0x35	; 53
    1b1e:	19 f4       	brne	.+6      	; 0x1b26 <vfprintf+0x35c>
    1b20:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b22:	34 ff       	sbrs	r19, 4
    1b24:	81 e3       	ldi	r24, 0x31	; 49
    1b26:	b7 01       	movw	r22, r14
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	4e c0       	rjmp	.+156    	; 0x1bc8 <vfprintf+0x3fe>
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	81 33       	cpi	r24, 0x31	; 49
    1b30:	19 f0       	breq	.+6      	; 0x1b38 <vfprintf+0x36e>
    1b32:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b34:	9f 7e       	andi	r25, 0xEF	; 239
    1b36:	9c 87       	std	Y+12, r25	; 0x0c
    1b38:	b7 01       	movw	r22, r14
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1b40:	11 11       	cpse	r17, r1
    1b42:	05 c0       	rjmp	.+10     	; 0x1b4e <vfprintf+0x384>
    1b44:	94 fc       	sbrc	r9, 4
    1b46:	18 c0       	rjmp	.+48     	; 0x1b78 <vfprintf+0x3ae>
    1b48:	85 e6       	ldi	r24, 0x65	; 101
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	17 c0       	rjmp	.+46     	; 0x1b7c <vfprintf+0x3b2>
    1b4e:	b7 01       	movw	r22, r14
    1b50:	8e e2       	ldi	r24, 0x2E	; 46
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1b58:	1e 5f       	subi	r17, 0xFE	; 254
    1b5a:	82 e0       	ldi	r24, 0x02	; 2
    1b5c:	01 e0       	ldi	r16, 0x01	; 1
    1b5e:	08 0f       	add	r16, r24
    1b60:	f3 01       	movw	r30, r6
    1b62:	e8 0f       	add	r30, r24
    1b64:	f1 1d       	adc	r31, r1
    1b66:	80 81       	ld	r24, Z
    1b68:	b7 01       	movw	r22, r14
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1b70:	80 2f       	mov	r24, r16
    1b72:	01 13       	cpse	r16, r17
    1b74:	f3 cf       	rjmp	.-26     	; 0x1b5c <vfprintf+0x392>
    1b76:	e6 cf       	rjmp	.-52     	; 0x1b44 <vfprintf+0x37a>
    1b78:	85 e4       	ldi	r24, 0x45	; 69
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	b7 01       	movw	r22, r14
    1b7e:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1b82:	d7 fc       	sbrc	r13, 7
    1b84:	06 c0       	rjmp	.+12     	; 0x1b92 <vfprintf+0x3c8>
    1b86:	c1 14       	cp	r12, r1
    1b88:	d1 04       	cpc	r13, r1
    1b8a:	41 f4       	brne	.+16     	; 0x1b9c <vfprintf+0x3d2>
    1b8c:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b8e:	e4 ff       	sbrs	r30, 4
    1b90:	05 c0       	rjmp	.+10     	; 0x1b9c <vfprintf+0x3d2>
    1b92:	d1 94       	neg	r13
    1b94:	c1 94       	neg	r12
    1b96:	d1 08       	sbc	r13, r1
    1b98:	8d e2       	ldi	r24, 0x2D	; 45
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <vfprintf+0x3d4>
    1b9c:	8b e2       	ldi	r24, 0x2B	; 43
    1b9e:	b7 01       	movw	r22, r14
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1ba6:	80 e3       	ldi	r24, 0x30	; 48
    1ba8:	2a e0       	ldi	r18, 0x0A	; 10
    1baa:	c2 16       	cp	r12, r18
    1bac:	d1 04       	cpc	r13, r1
    1bae:	2c f0       	brlt	.+10     	; 0x1bba <vfprintf+0x3f0>
    1bb0:	8f 5f       	subi	r24, 0xFF	; 255
    1bb2:	fa e0       	ldi	r31, 0x0A	; 10
    1bb4:	cf 1a       	sub	r12, r31
    1bb6:	d1 08       	sbc	r13, r1
    1bb8:	f7 cf       	rjmp	.-18     	; 0x1ba8 <vfprintf+0x3de>
    1bba:	b7 01       	movw	r22, r14
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1bc2:	b7 01       	movw	r22, r14
    1bc4:	c6 01       	movw	r24, r12
    1bc6:	c0 96       	adiw	r24, 0x30	; 48
    1bc8:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1bcc:	54 c1       	rjmp	.+680    	; 0x1e76 <vfprintf+0x6ac>
    1bce:	83 36       	cpi	r24, 0x63	; 99
    1bd0:	31 f0       	breq	.+12     	; 0x1bde <vfprintf+0x414>
    1bd2:	83 37       	cpi	r24, 0x73	; 115
    1bd4:	79 f0       	breq	.+30     	; 0x1bf4 <vfprintf+0x42a>
    1bd6:	83 35       	cpi	r24, 0x53	; 83
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <vfprintf+0x412>
    1bda:	56 c0       	rjmp	.+172    	; 0x1c88 <vfprintf+0x4be>
    1bdc:	20 c0       	rjmp	.+64     	; 0x1c1e <vfprintf+0x454>
    1bde:	56 01       	movw	r10, r12
    1be0:	32 e0       	ldi	r19, 0x02	; 2
    1be2:	a3 0e       	add	r10, r19
    1be4:	b1 1c       	adc	r11, r1
    1be6:	f6 01       	movw	r30, r12
    1be8:	80 81       	ld	r24, Z
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	01 e0       	ldi	r16, 0x01	; 1
    1bee:	10 e0       	ldi	r17, 0x00	; 0
    1bf0:	63 01       	movw	r12, r6
    1bf2:	12 c0       	rjmp	.+36     	; 0x1c18 <vfprintf+0x44e>
    1bf4:	56 01       	movw	r10, r12
    1bf6:	f2 e0       	ldi	r31, 0x02	; 2
    1bf8:	af 0e       	add	r10, r31
    1bfa:	b1 1c       	adc	r11, r1
    1bfc:	f6 01       	movw	r30, r12
    1bfe:	c0 80       	ld	r12, Z
    1c00:	d1 80       	ldd	r13, Z+1	; 0x01
    1c02:	96 fe       	sbrs	r9, 6
    1c04:	03 c0       	rjmp	.+6      	; 0x1c0c <vfprintf+0x442>
    1c06:	61 2f       	mov	r22, r17
    1c08:	70 e0       	ldi	r23, 0x00	; 0
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <vfprintf+0x446>
    1c0c:	6f ef       	ldi	r22, 0xFF	; 255
    1c0e:	7f ef       	ldi	r23, 0xFF	; 255
    1c10:	c6 01       	movw	r24, r12
    1c12:	0e 94 68 10 	call	0x20d0	; 0x20d0 <strnlen>
    1c16:	8c 01       	movw	r16, r24
    1c18:	f9 2d       	mov	r31, r9
    1c1a:	ff 77       	andi	r31, 0x7F	; 127
    1c1c:	14 c0       	rjmp	.+40     	; 0x1c46 <vfprintf+0x47c>
    1c1e:	56 01       	movw	r10, r12
    1c20:	22 e0       	ldi	r18, 0x02	; 2
    1c22:	a2 0e       	add	r10, r18
    1c24:	b1 1c       	adc	r11, r1
    1c26:	f6 01       	movw	r30, r12
    1c28:	c0 80       	ld	r12, Z
    1c2a:	d1 80       	ldd	r13, Z+1	; 0x01
    1c2c:	96 fe       	sbrs	r9, 6
    1c2e:	03 c0       	rjmp	.+6      	; 0x1c36 <vfprintf+0x46c>
    1c30:	61 2f       	mov	r22, r17
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <vfprintf+0x470>
    1c36:	6f ef       	ldi	r22, 0xFF	; 255
    1c38:	7f ef       	ldi	r23, 0xFF	; 255
    1c3a:	c6 01       	movw	r24, r12
    1c3c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <strnlen_P>
    1c40:	8c 01       	movw	r16, r24
    1c42:	f9 2d       	mov	r31, r9
    1c44:	f0 68       	ori	r31, 0x80	; 128
    1c46:	9f 2e       	mov	r9, r31
    1c48:	f3 fd       	sbrc	r31, 3
    1c4a:	1a c0       	rjmp	.+52     	; 0x1c80 <vfprintf+0x4b6>
    1c4c:	85 2d       	mov	r24, r5
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	08 17       	cp	r16, r24
    1c52:	19 07       	cpc	r17, r25
    1c54:	a8 f4       	brcc	.+42     	; 0x1c80 <vfprintf+0x4b6>
    1c56:	b7 01       	movw	r22, r14
    1c58:	80 e2       	ldi	r24, 0x20	; 32
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1c60:	5a 94       	dec	r5
    1c62:	f4 cf       	rjmp	.-24     	; 0x1c4c <vfprintf+0x482>
    1c64:	f6 01       	movw	r30, r12
    1c66:	97 fc       	sbrc	r9, 7
    1c68:	85 91       	lpm	r24, Z+
    1c6a:	97 fe       	sbrs	r9, 7
    1c6c:	81 91       	ld	r24, Z+
    1c6e:	6f 01       	movw	r12, r30
    1c70:	b7 01       	movw	r22, r14
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1c78:	51 10       	cpse	r5, r1
    1c7a:	5a 94       	dec	r5
    1c7c:	01 50       	subi	r16, 0x01	; 1
    1c7e:	11 09       	sbc	r17, r1
    1c80:	01 15       	cp	r16, r1
    1c82:	11 05       	cpc	r17, r1
    1c84:	79 f7       	brne	.-34     	; 0x1c64 <vfprintf+0x49a>
    1c86:	f7 c0       	rjmp	.+494    	; 0x1e76 <vfprintf+0x6ac>
    1c88:	84 36       	cpi	r24, 0x64	; 100
    1c8a:	11 f0       	breq	.+4      	; 0x1c90 <vfprintf+0x4c6>
    1c8c:	89 36       	cpi	r24, 0x69	; 105
    1c8e:	61 f5       	brne	.+88     	; 0x1ce8 <vfprintf+0x51e>
    1c90:	56 01       	movw	r10, r12
    1c92:	97 fe       	sbrs	r9, 7
    1c94:	09 c0       	rjmp	.+18     	; 0x1ca8 <vfprintf+0x4de>
    1c96:	24 e0       	ldi	r18, 0x04	; 4
    1c98:	a2 0e       	add	r10, r18
    1c9a:	b1 1c       	adc	r11, r1
    1c9c:	f6 01       	movw	r30, r12
    1c9e:	60 81       	ld	r22, Z
    1ca0:	71 81       	ldd	r23, Z+1	; 0x01
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	93 81       	ldd	r25, Z+3	; 0x03
    1ca6:	0a c0       	rjmp	.+20     	; 0x1cbc <vfprintf+0x4f2>
    1ca8:	f2 e0       	ldi	r31, 0x02	; 2
    1caa:	af 0e       	add	r10, r31
    1cac:	b1 1c       	adc	r11, r1
    1cae:	f6 01       	movw	r30, r12
    1cb0:	60 81       	ld	r22, Z
    1cb2:	71 81       	ldd	r23, Z+1	; 0x01
    1cb4:	07 2e       	mov	r0, r23
    1cb6:	00 0c       	add	r0, r0
    1cb8:	88 0b       	sbc	r24, r24
    1cba:	99 0b       	sbc	r25, r25
    1cbc:	f9 2d       	mov	r31, r9
    1cbe:	ff 76       	andi	r31, 0x6F	; 111
    1cc0:	9f 2e       	mov	r9, r31
    1cc2:	97 ff       	sbrs	r25, 7
    1cc4:	09 c0       	rjmp	.+18     	; 0x1cd8 <vfprintf+0x50e>
    1cc6:	90 95       	com	r25
    1cc8:	80 95       	com	r24
    1cca:	70 95       	com	r23
    1ccc:	61 95       	neg	r22
    1cce:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd4:	f0 68       	ori	r31, 0x80	; 128
    1cd6:	9f 2e       	mov	r9, r31
    1cd8:	2a e0       	ldi	r18, 0x0A	; 10
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	a3 01       	movw	r20, r6
    1cde:	0e 94 c3 10 	call	0x2186	; 0x2186 <__ultoa_invert>
    1ce2:	c8 2e       	mov	r12, r24
    1ce4:	c6 18       	sub	r12, r6
    1ce6:	3f c0       	rjmp	.+126    	; 0x1d66 <vfprintf+0x59c>
    1ce8:	09 2d       	mov	r16, r9
    1cea:	85 37       	cpi	r24, 0x75	; 117
    1cec:	21 f4       	brne	.+8      	; 0x1cf6 <vfprintf+0x52c>
    1cee:	0f 7e       	andi	r16, 0xEF	; 239
    1cf0:	2a e0       	ldi	r18, 0x0A	; 10
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	1d c0       	rjmp	.+58     	; 0x1d30 <vfprintf+0x566>
    1cf6:	09 7f       	andi	r16, 0xF9	; 249
    1cf8:	8f 36       	cpi	r24, 0x6F	; 111
    1cfa:	91 f0       	breq	.+36     	; 0x1d20 <vfprintf+0x556>
    1cfc:	18 f4       	brcc	.+6      	; 0x1d04 <vfprintf+0x53a>
    1cfe:	88 35       	cpi	r24, 0x58	; 88
    1d00:	59 f0       	breq	.+22     	; 0x1d18 <vfprintf+0x54e>
    1d02:	c3 c0       	rjmp	.+390    	; 0x1e8a <vfprintf+0x6c0>
    1d04:	80 37       	cpi	r24, 0x70	; 112
    1d06:	19 f0       	breq	.+6      	; 0x1d0e <vfprintf+0x544>
    1d08:	88 37       	cpi	r24, 0x78	; 120
    1d0a:	11 f0       	breq	.+4      	; 0x1d10 <vfprintf+0x546>
    1d0c:	be c0       	rjmp	.+380    	; 0x1e8a <vfprintf+0x6c0>
    1d0e:	00 61       	ori	r16, 0x10	; 16
    1d10:	04 ff       	sbrs	r16, 4
    1d12:	09 c0       	rjmp	.+18     	; 0x1d26 <vfprintf+0x55c>
    1d14:	04 60       	ori	r16, 0x04	; 4
    1d16:	07 c0       	rjmp	.+14     	; 0x1d26 <vfprintf+0x55c>
    1d18:	94 fe       	sbrs	r9, 4
    1d1a:	08 c0       	rjmp	.+16     	; 0x1d2c <vfprintf+0x562>
    1d1c:	06 60       	ori	r16, 0x06	; 6
    1d1e:	06 c0       	rjmp	.+12     	; 0x1d2c <vfprintf+0x562>
    1d20:	28 e0       	ldi	r18, 0x08	; 8
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	05 c0       	rjmp	.+10     	; 0x1d30 <vfprintf+0x566>
    1d26:	20 e1       	ldi	r18, 0x10	; 16
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <vfprintf+0x566>
    1d2c:	20 e1       	ldi	r18, 0x10	; 16
    1d2e:	32 e0       	ldi	r19, 0x02	; 2
    1d30:	56 01       	movw	r10, r12
    1d32:	07 ff       	sbrs	r16, 7
    1d34:	09 c0       	rjmp	.+18     	; 0x1d48 <vfprintf+0x57e>
    1d36:	84 e0       	ldi	r24, 0x04	; 4
    1d38:	a8 0e       	add	r10, r24
    1d3a:	b1 1c       	adc	r11, r1
    1d3c:	f6 01       	movw	r30, r12
    1d3e:	60 81       	ld	r22, Z
    1d40:	71 81       	ldd	r23, Z+1	; 0x01
    1d42:	82 81       	ldd	r24, Z+2	; 0x02
    1d44:	93 81       	ldd	r25, Z+3	; 0x03
    1d46:	08 c0       	rjmp	.+16     	; 0x1d58 <vfprintf+0x58e>
    1d48:	f2 e0       	ldi	r31, 0x02	; 2
    1d4a:	af 0e       	add	r10, r31
    1d4c:	b1 1c       	adc	r11, r1
    1d4e:	f6 01       	movw	r30, r12
    1d50:	60 81       	ld	r22, Z
    1d52:	71 81       	ldd	r23, Z+1	; 0x01
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a3 01       	movw	r20, r6
    1d5a:	0e 94 c3 10 	call	0x2186	; 0x2186 <__ultoa_invert>
    1d5e:	c8 2e       	mov	r12, r24
    1d60:	c6 18       	sub	r12, r6
    1d62:	0f 77       	andi	r16, 0x7F	; 127
    1d64:	90 2e       	mov	r9, r16
    1d66:	96 fe       	sbrs	r9, 6
    1d68:	0b c0       	rjmp	.+22     	; 0x1d80 <vfprintf+0x5b6>
    1d6a:	09 2d       	mov	r16, r9
    1d6c:	0e 7f       	andi	r16, 0xFE	; 254
    1d6e:	c1 16       	cp	r12, r17
    1d70:	50 f4       	brcc	.+20     	; 0x1d86 <vfprintf+0x5bc>
    1d72:	94 fe       	sbrs	r9, 4
    1d74:	0a c0       	rjmp	.+20     	; 0x1d8a <vfprintf+0x5c0>
    1d76:	92 fc       	sbrc	r9, 2
    1d78:	08 c0       	rjmp	.+16     	; 0x1d8a <vfprintf+0x5c0>
    1d7a:	09 2d       	mov	r16, r9
    1d7c:	0e 7e       	andi	r16, 0xEE	; 238
    1d7e:	05 c0       	rjmp	.+10     	; 0x1d8a <vfprintf+0x5c0>
    1d80:	dc 2c       	mov	r13, r12
    1d82:	09 2d       	mov	r16, r9
    1d84:	03 c0       	rjmp	.+6      	; 0x1d8c <vfprintf+0x5c2>
    1d86:	dc 2c       	mov	r13, r12
    1d88:	01 c0       	rjmp	.+2      	; 0x1d8c <vfprintf+0x5c2>
    1d8a:	d1 2e       	mov	r13, r17
    1d8c:	04 ff       	sbrs	r16, 4
    1d8e:	0d c0       	rjmp	.+26     	; 0x1daa <vfprintf+0x5e0>
    1d90:	fe 01       	movw	r30, r28
    1d92:	ec 0d       	add	r30, r12
    1d94:	f1 1d       	adc	r31, r1
    1d96:	80 81       	ld	r24, Z
    1d98:	80 33       	cpi	r24, 0x30	; 48
    1d9a:	11 f4       	brne	.+4      	; 0x1da0 <vfprintf+0x5d6>
    1d9c:	09 7e       	andi	r16, 0xE9	; 233
    1d9e:	09 c0       	rjmp	.+18     	; 0x1db2 <vfprintf+0x5e8>
    1da0:	02 ff       	sbrs	r16, 2
    1da2:	06 c0       	rjmp	.+12     	; 0x1db0 <vfprintf+0x5e6>
    1da4:	d3 94       	inc	r13
    1da6:	d3 94       	inc	r13
    1da8:	04 c0       	rjmp	.+8      	; 0x1db2 <vfprintf+0x5e8>
    1daa:	80 2f       	mov	r24, r16
    1dac:	86 78       	andi	r24, 0x86	; 134
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <vfprintf+0x5e8>
    1db0:	d3 94       	inc	r13
    1db2:	03 fd       	sbrc	r16, 3
    1db4:	11 c0       	rjmp	.+34     	; 0x1dd8 <vfprintf+0x60e>
    1db6:	00 ff       	sbrs	r16, 0
    1db8:	06 c0       	rjmp	.+12     	; 0x1dc6 <vfprintf+0x5fc>
    1dba:	1c 2d       	mov	r17, r12
    1dbc:	d5 14       	cp	r13, r5
    1dbe:	80 f4       	brcc	.+32     	; 0x1de0 <vfprintf+0x616>
    1dc0:	15 0d       	add	r17, r5
    1dc2:	1d 19       	sub	r17, r13
    1dc4:	0d c0       	rjmp	.+26     	; 0x1de0 <vfprintf+0x616>
    1dc6:	d5 14       	cp	r13, r5
    1dc8:	58 f4       	brcc	.+22     	; 0x1de0 <vfprintf+0x616>
    1dca:	b7 01       	movw	r22, r14
    1dcc:	80 e2       	ldi	r24, 0x20	; 32
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1dd4:	d3 94       	inc	r13
    1dd6:	f7 cf       	rjmp	.-18     	; 0x1dc6 <vfprintf+0x5fc>
    1dd8:	d5 14       	cp	r13, r5
    1dda:	10 f4       	brcc	.+4      	; 0x1de0 <vfprintf+0x616>
    1ddc:	5d 18       	sub	r5, r13
    1dde:	01 c0       	rjmp	.+2      	; 0x1de2 <vfprintf+0x618>
    1de0:	51 2c       	mov	r5, r1
    1de2:	04 ff       	sbrs	r16, 4
    1de4:	10 c0       	rjmp	.+32     	; 0x1e06 <vfprintf+0x63c>
    1de6:	b7 01       	movw	r22, r14
    1de8:	80 e3       	ldi	r24, 0x30	; 48
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1df0:	02 ff       	sbrs	r16, 2
    1df2:	17 c0       	rjmp	.+46     	; 0x1e22 <vfprintf+0x658>
    1df4:	01 fd       	sbrc	r16, 1
    1df6:	03 c0       	rjmp	.+6      	; 0x1dfe <vfprintf+0x634>
    1df8:	88 e7       	ldi	r24, 0x78	; 120
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <vfprintf+0x638>
    1dfe:	88 e5       	ldi	r24, 0x58	; 88
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	b7 01       	movw	r22, r14
    1e04:	0c c0       	rjmp	.+24     	; 0x1e1e <vfprintf+0x654>
    1e06:	80 2f       	mov	r24, r16
    1e08:	86 78       	andi	r24, 0x86	; 134
    1e0a:	59 f0       	breq	.+22     	; 0x1e22 <vfprintf+0x658>
    1e0c:	01 ff       	sbrs	r16, 1
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <vfprintf+0x64a>
    1e10:	8b e2       	ldi	r24, 0x2B	; 43
    1e12:	01 c0       	rjmp	.+2      	; 0x1e16 <vfprintf+0x64c>
    1e14:	80 e2       	ldi	r24, 0x20	; 32
    1e16:	07 fd       	sbrc	r16, 7
    1e18:	8d e2       	ldi	r24, 0x2D	; 45
    1e1a:	b7 01       	movw	r22, r14
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1e22:	c1 16       	cp	r12, r17
    1e24:	38 f4       	brcc	.+14     	; 0x1e34 <vfprintf+0x66a>
    1e26:	b7 01       	movw	r22, r14
    1e28:	80 e3       	ldi	r24, 0x30	; 48
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1e30:	11 50       	subi	r17, 0x01	; 1
    1e32:	f7 cf       	rjmp	.-18     	; 0x1e22 <vfprintf+0x658>
    1e34:	ca 94       	dec	r12
    1e36:	f3 01       	movw	r30, r6
    1e38:	ec 0d       	add	r30, r12
    1e3a:	f1 1d       	adc	r31, r1
    1e3c:	80 81       	ld	r24, Z
    1e3e:	b7 01       	movw	r22, r14
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1e46:	c1 10       	cpse	r12, r1
    1e48:	f5 cf       	rjmp	.-22     	; 0x1e34 <vfprintf+0x66a>
    1e4a:	15 c0       	rjmp	.+42     	; 0x1e76 <vfprintf+0x6ac>
    1e4c:	f4 e0       	ldi	r31, 0x04	; 4
    1e4e:	f5 15       	cp	r31, r5
    1e50:	60 f5       	brcc	.+88     	; 0x1eaa <vfprintf+0x6e0>
    1e52:	84 e0       	ldi	r24, 0x04	; 4
    1e54:	58 1a       	sub	r5, r24
    1e56:	93 fe       	sbrs	r9, 3
    1e58:	1f c0       	rjmp	.+62     	; 0x1e98 <vfprintf+0x6ce>
    1e5a:	01 11       	cpse	r16, r1
    1e5c:	27 c0       	rjmp	.+78     	; 0x1eac <vfprintf+0x6e2>
    1e5e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e60:	23 ff       	sbrs	r18, 3
    1e62:	2a c0       	rjmp	.+84     	; 0x1eb8 <vfprintf+0x6ee>
    1e64:	04 e0       	ldi	r16, 0x04	; 4
    1e66:	12 e0       	ldi	r17, 0x02	; 2
    1e68:	39 2d       	mov	r19, r9
    1e6a:	30 71       	andi	r19, 0x10	; 16
    1e6c:	93 2e       	mov	r9, r19
    1e6e:	f8 01       	movw	r30, r16
    1e70:	84 91       	lpm	r24, Z
    1e72:	81 11       	cpse	r24, r1
    1e74:	24 c0       	rjmp	.+72     	; 0x1ebe <vfprintf+0x6f4>
    1e76:	55 20       	and	r5, r5
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <vfprintf+0x6b2>
    1e7a:	e4 cc       	rjmp	.-1592   	; 0x1844 <vfprintf+0x7a>
    1e7c:	b7 01       	movw	r22, r14
    1e7e:	80 e2       	ldi	r24, 0x20	; 32
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1e86:	5a 94       	dec	r5
    1e88:	f6 cf       	rjmp	.-20     	; 0x1e76 <vfprintf+0x6ac>
    1e8a:	f7 01       	movw	r30, r14
    1e8c:	86 81       	ldd	r24, Z+6	; 0x06
    1e8e:	97 81       	ldd	r25, Z+7	; 0x07
    1e90:	26 c0       	rjmp	.+76     	; 0x1ede <vfprintf+0x714>
    1e92:	8f ef       	ldi	r24, 0xFF	; 255
    1e94:	9f ef       	ldi	r25, 0xFF	; 255
    1e96:	23 c0       	rjmp	.+70     	; 0x1ede <vfprintf+0x714>
    1e98:	b7 01       	movw	r22, r14
    1e9a:	80 e2       	ldi	r24, 0x20	; 32
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1ea2:	5a 94       	dec	r5
    1ea4:	51 10       	cpse	r5, r1
    1ea6:	f8 cf       	rjmp	.-16     	; 0x1e98 <vfprintf+0x6ce>
    1ea8:	d8 cf       	rjmp	.-80     	; 0x1e5a <vfprintf+0x690>
    1eaa:	51 2c       	mov	r5, r1
    1eac:	b7 01       	movw	r22, r14
    1eae:	80 2f       	mov	r24, r16
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1eb6:	d3 cf       	rjmp	.-90     	; 0x1e5e <vfprintf+0x694>
    1eb8:	08 e0       	ldi	r16, 0x08	; 8
    1eba:	12 e0       	ldi	r17, 0x02	; 2
    1ebc:	d5 cf       	rjmp	.-86     	; 0x1e68 <vfprintf+0x69e>
    1ebe:	91 10       	cpse	r9, r1
    1ec0:	80 52       	subi	r24, 0x20	; 32
    1ec2:	b7 01       	movw	r22, r14
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	0e 94 73 10 	call	0x20e6	; 0x20e6 <fputc>
    1eca:	0f 5f       	subi	r16, 0xFF	; 255
    1ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ece:	cf cf       	rjmp	.-98     	; 0x1e6e <vfprintf+0x6a4>
    1ed0:	23 e0       	ldi	r18, 0x03	; 3
    1ed2:	25 15       	cp	r18, r5
    1ed4:	10 f4       	brcc	.+4      	; 0x1eda <vfprintf+0x710>
    1ed6:	83 e0       	ldi	r24, 0x03	; 3
    1ed8:	bd cf       	rjmp	.-134    	; 0x1e54 <vfprintf+0x68a>
    1eda:	51 2c       	mov	r5, r1
    1edc:	c0 cf       	rjmp	.-128    	; 0x1e5e <vfprintf+0x694>
    1ede:	60 96       	adiw	r28, 0x10	; 16
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	df 91       	pop	r29
    1ee6:	cf 91       	pop	r28
    1ee8:	1f 91       	pop	r17
    1eea:	0f 91       	pop	r16
    1eec:	ff 90       	pop	r15
    1eee:	ef 90       	pop	r14
    1ef0:	df 90       	pop	r13
    1ef2:	cf 90       	pop	r12
    1ef4:	bf 90       	pop	r11
    1ef6:	af 90       	pop	r10
    1ef8:	9f 90       	pop	r9
    1efa:	8f 90       	pop	r8
    1efc:	7f 90       	pop	r7
    1efe:	6f 90       	pop	r6
    1f00:	5f 90       	pop	r5
    1f02:	4f 90       	pop	r4
    1f04:	3f 90       	pop	r3
    1f06:	2f 90       	pop	r2
    1f08:	08 95       	ret

00001f0a <__ftoa_engine>:
    1f0a:	28 30       	cpi	r18, 0x08	; 8
    1f0c:	08 f0       	brcs	.+2      	; 0x1f10 <__ftoa_engine+0x6>
    1f0e:	27 e0       	ldi	r18, 0x07	; 7
    1f10:	33 27       	eor	r19, r19
    1f12:	da 01       	movw	r26, r20
    1f14:	99 0f       	add	r25, r25
    1f16:	31 1d       	adc	r19, r1
    1f18:	87 fd       	sbrc	r24, 7
    1f1a:	91 60       	ori	r25, 0x01	; 1
    1f1c:	00 96       	adiw	r24, 0x00	; 0
    1f1e:	61 05       	cpc	r22, r1
    1f20:	71 05       	cpc	r23, r1
    1f22:	39 f4       	brne	.+14     	; 0x1f32 <__ftoa_engine+0x28>
    1f24:	32 60       	ori	r19, 0x02	; 2
    1f26:	2e 5f       	subi	r18, 0xFE	; 254
    1f28:	3d 93       	st	X+, r19
    1f2a:	30 e3       	ldi	r19, 0x30	; 48
    1f2c:	2a 95       	dec	r18
    1f2e:	e1 f7       	brne	.-8      	; 0x1f28 <__ftoa_engine+0x1e>
    1f30:	08 95       	ret
    1f32:	9f 3f       	cpi	r25, 0xFF	; 255
    1f34:	30 f0       	brcs	.+12     	; 0x1f42 <__ftoa_engine+0x38>
    1f36:	80 38       	cpi	r24, 0x80	; 128
    1f38:	71 05       	cpc	r23, r1
    1f3a:	61 05       	cpc	r22, r1
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <__ftoa_engine+0x36>
    1f3e:	3c 5f       	subi	r19, 0xFC	; 252
    1f40:	3c 5f       	subi	r19, 0xFC	; 252
    1f42:	3d 93       	st	X+, r19
    1f44:	91 30       	cpi	r25, 0x01	; 1
    1f46:	08 f0       	brcs	.+2      	; 0x1f4a <__ftoa_engine+0x40>
    1f48:	80 68       	ori	r24, 0x80	; 128
    1f4a:	91 1d       	adc	r25, r1
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	1f 93       	push	r17
    1f52:	0f 93       	push	r16
    1f54:	ff 92       	push	r15
    1f56:	ef 92       	push	r14
    1f58:	19 2f       	mov	r17, r25
    1f5a:	98 7f       	andi	r25, 0xF8	; 248
    1f5c:	96 95       	lsr	r25
    1f5e:	e9 2f       	mov	r30, r25
    1f60:	96 95       	lsr	r25
    1f62:	96 95       	lsr	r25
    1f64:	e9 0f       	add	r30, r25
    1f66:	ff 27       	eor	r31, r31
    1f68:	ea 59       	subi	r30, 0x9A	; 154
    1f6a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f6c:	99 27       	eor	r25, r25
    1f6e:	33 27       	eor	r19, r19
    1f70:	ee 24       	eor	r14, r14
    1f72:	ff 24       	eor	r15, r15
    1f74:	a7 01       	movw	r20, r14
    1f76:	e7 01       	movw	r28, r14
    1f78:	05 90       	lpm	r0, Z+
    1f7a:	08 94       	sec
    1f7c:	07 94       	ror	r0
    1f7e:	28 f4       	brcc	.+10     	; 0x1f8a <__ftoa_engine+0x80>
    1f80:	36 0f       	add	r19, r22
    1f82:	e7 1e       	adc	r14, r23
    1f84:	f8 1e       	adc	r15, r24
    1f86:	49 1f       	adc	r20, r25
    1f88:	51 1d       	adc	r21, r1
    1f8a:	66 0f       	add	r22, r22
    1f8c:	77 1f       	adc	r23, r23
    1f8e:	88 1f       	adc	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	06 94       	lsr	r0
    1f94:	a1 f7       	brne	.-24     	; 0x1f7e <__ftoa_engine+0x74>
    1f96:	05 90       	lpm	r0, Z+
    1f98:	07 94       	ror	r0
    1f9a:	28 f4       	brcc	.+10     	; 0x1fa6 <__ftoa_engine+0x9c>
    1f9c:	e7 0e       	add	r14, r23
    1f9e:	f8 1e       	adc	r15, r24
    1fa0:	49 1f       	adc	r20, r25
    1fa2:	56 1f       	adc	r21, r22
    1fa4:	c1 1d       	adc	r28, r1
    1fa6:	77 0f       	add	r23, r23
    1fa8:	88 1f       	adc	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	66 1f       	adc	r22, r22
    1fae:	06 94       	lsr	r0
    1fb0:	a1 f7       	brne	.-24     	; 0x1f9a <__ftoa_engine+0x90>
    1fb2:	05 90       	lpm	r0, Z+
    1fb4:	07 94       	ror	r0
    1fb6:	28 f4       	brcc	.+10     	; 0x1fc2 <__ftoa_engine+0xb8>
    1fb8:	f8 0e       	add	r15, r24
    1fba:	49 1f       	adc	r20, r25
    1fbc:	56 1f       	adc	r21, r22
    1fbe:	c7 1f       	adc	r28, r23
    1fc0:	d1 1d       	adc	r29, r1
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	66 1f       	adc	r22, r22
    1fc8:	77 1f       	adc	r23, r23
    1fca:	06 94       	lsr	r0
    1fcc:	a1 f7       	brne	.-24     	; 0x1fb6 <__ftoa_engine+0xac>
    1fce:	05 90       	lpm	r0, Z+
    1fd0:	07 94       	ror	r0
    1fd2:	20 f4       	brcc	.+8      	; 0x1fdc <__ftoa_engine+0xd2>
    1fd4:	49 0f       	add	r20, r25
    1fd6:	56 1f       	adc	r21, r22
    1fd8:	c7 1f       	adc	r28, r23
    1fda:	d8 1f       	adc	r29, r24
    1fdc:	99 0f       	add	r25, r25
    1fde:	66 1f       	adc	r22, r22
    1fe0:	77 1f       	adc	r23, r23
    1fe2:	88 1f       	adc	r24, r24
    1fe4:	06 94       	lsr	r0
    1fe6:	a9 f7       	brne	.-22     	; 0x1fd2 <__ftoa_engine+0xc8>
    1fe8:	84 91       	lpm	r24, Z
    1fea:	10 95       	com	r17
    1fec:	17 70       	andi	r17, 0x07	; 7
    1fee:	41 f0       	breq	.+16     	; 0x2000 <__ftoa_engine+0xf6>
    1ff0:	d6 95       	lsr	r29
    1ff2:	c7 95       	ror	r28
    1ff4:	57 95       	ror	r21
    1ff6:	47 95       	ror	r20
    1ff8:	f7 94       	ror	r15
    1ffa:	e7 94       	ror	r14
    1ffc:	1a 95       	dec	r17
    1ffe:	c1 f7       	brne	.-16     	; 0x1ff0 <__ftoa_engine+0xe6>
    2000:	ec e0       	ldi	r30, 0x0C	; 12
    2002:	f2 e0       	ldi	r31, 0x02	; 2
    2004:	68 94       	set
    2006:	15 90       	lpm	r1, Z+
    2008:	15 91       	lpm	r17, Z+
    200a:	35 91       	lpm	r19, Z+
    200c:	65 91       	lpm	r22, Z+
    200e:	95 91       	lpm	r25, Z+
    2010:	05 90       	lpm	r0, Z+
    2012:	7f e2       	ldi	r23, 0x2F	; 47
    2014:	73 95       	inc	r23
    2016:	e1 18       	sub	r14, r1
    2018:	f1 0a       	sbc	r15, r17
    201a:	43 0b       	sbc	r20, r19
    201c:	56 0b       	sbc	r21, r22
    201e:	c9 0b       	sbc	r28, r25
    2020:	d0 09       	sbc	r29, r0
    2022:	c0 f7       	brcc	.-16     	; 0x2014 <__ftoa_engine+0x10a>
    2024:	e1 0c       	add	r14, r1
    2026:	f1 1e       	adc	r15, r17
    2028:	43 1f       	adc	r20, r19
    202a:	56 1f       	adc	r21, r22
    202c:	c9 1f       	adc	r28, r25
    202e:	d0 1d       	adc	r29, r0
    2030:	7e f4       	brtc	.+30     	; 0x2050 <__ftoa_engine+0x146>
    2032:	70 33       	cpi	r23, 0x30	; 48
    2034:	11 f4       	brne	.+4      	; 0x203a <__ftoa_engine+0x130>
    2036:	8a 95       	dec	r24
    2038:	e6 cf       	rjmp	.-52     	; 0x2006 <__ftoa_engine+0xfc>
    203a:	e8 94       	clt
    203c:	01 50       	subi	r16, 0x01	; 1
    203e:	30 f0       	brcs	.+12     	; 0x204c <__ftoa_engine+0x142>
    2040:	08 0f       	add	r16, r24
    2042:	0a f4       	brpl	.+2      	; 0x2046 <__ftoa_engine+0x13c>
    2044:	00 27       	eor	r16, r16
    2046:	02 17       	cp	r16, r18
    2048:	08 f4       	brcc	.+2      	; 0x204c <__ftoa_engine+0x142>
    204a:	20 2f       	mov	r18, r16
    204c:	23 95       	inc	r18
    204e:	02 2f       	mov	r16, r18
    2050:	7a 33       	cpi	r23, 0x3A	; 58
    2052:	28 f0       	brcs	.+10     	; 0x205e <__ftoa_engine+0x154>
    2054:	79 e3       	ldi	r23, 0x39	; 57
    2056:	7d 93       	st	X+, r23
    2058:	2a 95       	dec	r18
    205a:	e9 f7       	brne	.-6      	; 0x2056 <__ftoa_engine+0x14c>
    205c:	10 c0       	rjmp	.+32     	; 0x207e <__ftoa_engine+0x174>
    205e:	7d 93       	st	X+, r23
    2060:	2a 95       	dec	r18
    2062:	89 f6       	brne	.-94     	; 0x2006 <__ftoa_engine+0xfc>
    2064:	06 94       	lsr	r0
    2066:	97 95       	ror	r25
    2068:	67 95       	ror	r22
    206a:	37 95       	ror	r19
    206c:	17 95       	ror	r17
    206e:	17 94       	ror	r1
    2070:	e1 18       	sub	r14, r1
    2072:	f1 0a       	sbc	r15, r17
    2074:	43 0b       	sbc	r20, r19
    2076:	56 0b       	sbc	r21, r22
    2078:	c9 0b       	sbc	r28, r25
    207a:	d0 09       	sbc	r29, r0
    207c:	98 f0       	brcs	.+38     	; 0x20a4 <__ftoa_engine+0x19a>
    207e:	23 95       	inc	r18
    2080:	7e 91       	ld	r23, -X
    2082:	73 95       	inc	r23
    2084:	7a 33       	cpi	r23, 0x3A	; 58
    2086:	08 f0       	brcs	.+2      	; 0x208a <__ftoa_engine+0x180>
    2088:	70 e3       	ldi	r23, 0x30	; 48
    208a:	7c 93       	st	X, r23
    208c:	20 13       	cpse	r18, r16
    208e:	b8 f7       	brcc	.-18     	; 0x207e <__ftoa_engine+0x174>
    2090:	7e 91       	ld	r23, -X
    2092:	70 61       	ori	r23, 0x10	; 16
    2094:	7d 93       	st	X+, r23
    2096:	30 f0       	brcs	.+12     	; 0x20a4 <__ftoa_engine+0x19a>
    2098:	83 95       	inc	r24
    209a:	71 e3       	ldi	r23, 0x31	; 49
    209c:	7d 93       	st	X+, r23
    209e:	70 e3       	ldi	r23, 0x30	; 48
    20a0:	2a 95       	dec	r18
    20a2:	e1 f7       	brne	.-8      	; 0x209c <__ftoa_engine+0x192>
    20a4:	11 24       	eor	r1, r1
    20a6:	ef 90       	pop	r14
    20a8:	ff 90       	pop	r15
    20aa:	0f 91       	pop	r16
    20ac:	1f 91       	pop	r17
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	99 27       	eor	r25, r25
    20b4:	87 fd       	sbrc	r24, 7
    20b6:	90 95       	com	r25
    20b8:	08 95       	ret

000020ba <strnlen_P>:
    20ba:	fc 01       	movw	r30, r24
    20bc:	05 90       	lpm	r0, Z+
    20be:	61 50       	subi	r22, 0x01	; 1
    20c0:	70 40       	sbci	r23, 0x00	; 0
    20c2:	01 10       	cpse	r0, r1
    20c4:	d8 f7       	brcc	.-10     	; 0x20bc <strnlen_P+0x2>
    20c6:	80 95       	com	r24
    20c8:	90 95       	com	r25
    20ca:	8e 0f       	add	r24, r30
    20cc:	9f 1f       	adc	r25, r31
    20ce:	08 95       	ret

000020d0 <strnlen>:
    20d0:	fc 01       	movw	r30, r24
    20d2:	61 50       	subi	r22, 0x01	; 1
    20d4:	70 40       	sbci	r23, 0x00	; 0
    20d6:	01 90       	ld	r0, Z+
    20d8:	01 10       	cpse	r0, r1
    20da:	d8 f7       	brcc	.-10     	; 0x20d2 <strnlen+0x2>
    20dc:	80 95       	com	r24
    20de:	90 95       	com	r25
    20e0:	8e 0f       	add	r24, r30
    20e2:	9f 1f       	adc	r25, r31
    20e4:	08 95       	ret

000020e6 <fputc>:
    20e6:	0f 93       	push	r16
    20e8:	1f 93       	push	r17
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
    20ee:	fb 01       	movw	r30, r22
    20f0:	23 81       	ldd	r18, Z+3	; 0x03
    20f2:	21 fd       	sbrc	r18, 1
    20f4:	03 c0       	rjmp	.+6      	; 0x20fc <fputc+0x16>
    20f6:	8f ef       	ldi	r24, 0xFF	; 255
    20f8:	9f ef       	ldi	r25, 0xFF	; 255
    20fa:	2c c0       	rjmp	.+88     	; 0x2154 <fputc+0x6e>
    20fc:	22 ff       	sbrs	r18, 2
    20fe:	16 c0       	rjmp	.+44     	; 0x212c <fputc+0x46>
    2100:	46 81       	ldd	r20, Z+6	; 0x06
    2102:	57 81       	ldd	r21, Z+7	; 0x07
    2104:	24 81       	ldd	r18, Z+4	; 0x04
    2106:	35 81       	ldd	r19, Z+5	; 0x05
    2108:	42 17       	cp	r20, r18
    210a:	53 07       	cpc	r21, r19
    210c:	44 f4       	brge	.+16     	; 0x211e <fputc+0x38>
    210e:	a0 81       	ld	r26, Z
    2110:	b1 81       	ldd	r27, Z+1	; 0x01
    2112:	9d 01       	movw	r18, r26
    2114:	2f 5f       	subi	r18, 0xFF	; 255
    2116:	3f 4f       	sbci	r19, 0xFF	; 255
    2118:	20 83       	st	Z, r18
    211a:	31 83       	std	Z+1, r19	; 0x01
    211c:	8c 93       	st	X, r24
    211e:	26 81       	ldd	r18, Z+6	; 0x06
    2120:	37 81       	ldd	r19, Z+7	; 0x07
    2122:	2f 5f       	subi	r18, 0xFF	; 255
    2124:	3f 4f       	sbci	r19, 0xFF	; 255
    2126:	26 83       	std	Z+6, r18	; 0x06
    2128:	37 83       	std	Z+7, r19	; 0x07
    212a:	14 c0       	rjmp	.+40     	; 0x2154 <fputc+0x6e>
    212c:	8b 01       	movw	r16, r22
    212e:	ec 01       	movw	r28, r24
    2130:	fb 01       	movw	r30, r22
    2132:	00 84       	ldd	r0, Z+8	; 0x08
    2134:	f1 85       	ldd	r31, Z+9	; 0x09
    2136:	e0 2d       	mov	r30, r0
    2138:	19 95       	eicall
    213a:	89 2b       	or	r24, r25
    213c:	e1 f6       	brne	.-72     	; 0x20f6 <fputc+0x10>
    213e:	d8 01       	movw	r26, r16
    2140:	16 96       	adiw	r26, 0x06	; 6
    2142:	8d 91       	ld	r24, X+
    2144:	9c 91       	ld	r25, X
    2146:	17 97       	sbiw	r26, 0x07	; 7
    2148:	01 96       	adiw	r24, 0x01	; 1
    214a:	16 96       	adiw	r26, 0x06	; 6
    214c:	8d 93       	st	X+, r24
    214e:	9c 93       	st	X, r25
    2150:	17 97       	sbiw	r26, 0x07	; 7
    2152:	ce 01       	movw	r24, r28
    2154:	df 91       	pop	r29
    2156:	cf 91       	pop	r28
    2158:	1f 91       	pop	r17
    215a:	0f 91       	pop	r16
    215c:	08 95       	ret

0000215e <printf>:
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	ae 01       	movw	r20, r28
    2168:	4a 5f       	subi	r20, 0xFA	; 250
    216a:	5f 4f       	sbci	r21, 0xFF	; 255
    216c:	fa 01       	movw	r30, r20
    216e:	61 91       	ld	r22, Z+
    2170:	71 91       	ld	r23, Z+
    2172:	af 01       	movw	r20, r30
    2174:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <__iob+0x2>
    2178:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <__iob+0x3>
    217c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <vfprintf>
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	08 95       	ret

00002186 <__ultoa_invert>:
    2186:	fa 01       	movw	r30, r20
    2188:	aa 27       	eor	r26, r26
    218a:	28 30       	cpi	r18, 0x08	; 8
    218c:	51 f1       	breq	.+84     	; 0x21e2 <__ultoa_invert+0x5c>
    218e:	20 31       	cpi	r18, 0x10	; 16
    2190:	81 f1       	breq	.+96     	; 0x21f2 <__ultoa_invert+0x6c>
    2192:	e8 94       	clt
    2194:	6f 93       	push	r22
    2196:	6e 7f       	andi	r22, 0xFE	; 254
    2198:	6e 5f       	subi	r22, 0xFE	; 254
    219a:	7f 4f       	sbci	r23, 0xFF	; 255
    219c:	8f 4f       	sbci	r24, 0xFF	; 255
    219e:	9f 4f       	sbci	r25, 0xFF	; 255
    21a0:	af 4f       	sbci	r26, 0xFF	; 255
    21a2:	b1 e0       	ldi	r27, 0x01	; 1
    21a4:	3e d0       	rcall	.+124    	; 0x2222 <__ultoa_invert+0x9c>
    21a6:	b4 e0       	ldi	r27, 0x04	; 4
    21a8:	3c d0       	rcall	.+120    	; 0x2222 <__ultoa_invert+0x9c>
    21aa:	67 0f       	add	r22, r23
    21ac:	78 1f       	adc	r23, r24
    21ae:	89 1f       	adc	r24, r25
    21b0:	9a 1f       	adc	r25, r26
    21b2:	a1 1d       	adc	r26, r1
    21b4:	68 0f       	add	r22, r24
    21b6:	79 1f       	adc	r23, r25
    21b8:	8a 1f       	adc	r24, r26
    21ba:	91 1d       	adc	r25, r1
    21bc:	a1 1d       	adc	r26, r1
    21be:	6a 0f       	add	r22, r26
    21c0:	71 1d       	adc	r23, r1
    21c2:	81 1d       	adc	r24, r1
    21c4:	91 1d       	adc	r25, r1
    21c6:	a1 1d       	adc	r26, r1
    21c8:	20 d0       	rcall	.+64     	; 0x220a <__ultoa_invert+0x84>
    21ca:	09 f4       	brne	.+2      	; 0x21ce <__ultoa_invert+0x48>
    21cc:	68 94       	set
    21ce:	3f 91       	pop	r19
    21d0:	2a e0       	ldi	r18, 0x0A	; 10
    21d2:	26 9f       	mul	r18, r22
    21d4:	11 24       	eor	r1, r1
    21d6:	30 19       	sub	r19, r0
    21d8:	30 5d       	subi	r19, 0xD0	; 208
    21da:	31 93       	st	Z+, r19
    21dc:	de f6       	brtc	.-74     	; 0x2194 <__ultoa_invert+0xe>
    21de:	cf 01       	movw	r24, r30
    21e0:	08 95       	ret
    21e2:	46 2f       	mov	r20, r22
    21e4:	47 70       	andi	r20, 0x07	; 7
    21e6:	40 5d       	subi	r20, 0xD0	; 208
    21e8:	41 93       	st	Z+, r20
    21ea:	b3 e0       	ldi	r27, 0x03	; 3
    21ec:	0f d0       	rcall	.+30     	; 0x220c <__ultoa_invert+0x86>
    21ee:	c9 f7       	brne	.-14     	; 0x21e2 <__ultoa_invert+0x5c>
    21f0:	f6 cf       	rjmp	.-20     	; 0x21de <__ultoa_invert+0x58>
    21f2:	46 2f       	mov	r20, r22
    21f4:	4f 70       	andi	r20, 0x0F	; 15
    21f6:	40 5d       	subi	r20, 0xD0	; 208
    21f8:	4a 33       	cpi	r20, 0x3A	; 58
    21fa:	18 f0       	brcs	.+6      	; 0x2202 <__ultoa_invert+0x7c>
    21fc:	49 5d       	subi	r20, 0xD9	; 217
    21fe:	31 fd       	sbrc	r19, 1
    2200:	40 52       	subi	r20, 0x20	; 32
    2202:	41 93       	st	Z+, r20
    2204:	02 d0       	rcall	.+4      	; 0x220a <__ultoa_invert+0x84>
    2206:	a9 f7       	brne	.-22     	; 0x21f2 <__ultoa_invert+0x6c>
    2208:	ea cf       	rjmp	.-44     	; 0x21de <__ultoa_invert+0x58>
    220a:	b4 e0       	ldi	r27, 0x04	; 4
    220c:	a6 95       	lsr	r26
    220e:	97 95       	ror	r25
    2210:	87 95       	ror	r24
    2212:	77 95       	ror	r23
    2214:	67 95       	ror	r22
    2216:	ba 95       	dec	r27
    2218:	c9 f7       	brne	.-14     	; 0x220c <__ultoa_invert+0x86>
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	61 05       	cpc	r22, r1
    221e:	71 05       	cpc	r23, r1
    2220:	08 95       	ret
    2222:	9b 01       	movw	r18, r22
    2224:	ac 01       	movw	r20, r24
    2226:	0a 2e       	mov	r0, r26
    2228:	06 94       	lsr	r0
    222a:	57 95       	ror	r21
    222c:	47 95       	ror	r20
    222e:	37 95       	ror	r19
    2230:	27 95       	ror	r18
    2232:	ba 95       	dec	r27
    2234:	c9 f7       	brne	.-14     	; 0x2228 <__ultoa_invert+0xa2>
    2236:	62 0f       	add	r22, r18
    2238:	73 1f       	adc	r23, r19
    223a:	84 1f       	adc	r24, r20
    223c:	95 1f       	adc	r25, r21
    223e:	a0 1d       	adc	r26, r0
    2240:	08 95       	ret

00002242 <_exit>:
    2242:	f8 94       	cli

00002244 <__stop_program>:
    2244:	ff cf       	rjmp	.-2      	; 0x2244 <__stop_program>
