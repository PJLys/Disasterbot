
test_function.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 05 00 20 89 86 00 08 d9 86 00 08 49 bc 00 08     ... ........I...
	...
 800002c:	d9 86 00 08 00 00 00 00 00 00 00 00 d9 86 00 08     ................
 800003c:	d9 86 00 08 d9 86 00 08 d9 86 00 08 d9 86 00 08     ................
 800004c:	d9 86 00 08 d9 86 00 08 3d b0 00 08 3d b0 00 08     ........=...=...
 800005c:	3d b0 00 08 d9 86 00 08 d9 86 00 08 d9 86 00 08     =...............
 800006c:	d9 86 00 08 d9 86 00 08 f9 be 00 08 61 c4 00 08     ............a...
 800007c:	d9 86 00 08 d9 86 00 08 d9 86 00 08 d9 86 00 08     ................
 800008c:	00 00 00 00 d9 86 00 08 d9 86 00 08 d9 86 00 08     ................
 800009c:	d9 86 00 08 d9 86 00 08 d9 86 00 08 d9 86 00 08     ................
 80000ac:	41 c4 00 08 31 c4 00 08 51 c4 00 08 00 00 00 00     A...1...Q.......
 80000bc:	d9 86 00 08                                         ....

080000c0 <deregister_tm_clones>:
 80000c0:	4804      	ldr	r0, [pc, #16]	; (80000d4 <deregister_tm_clones+0x14>)
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <deregister_tm_clones+0x18>)
 80000c4:	b510      	push	{r4, lr}
 80000c6:	4283      	cmp	r3, r0
 80000c8:	d003      	beq.n	80000d2 <deregister_tm_clones+0x12>
 80000ca:	4b04      	ldr	r3, [pc, #16]	; (80000dc <deregister_tm_clones+0x1c>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d000      	beq.n	80000d2 <deregister_tm_clones+0x12>
 80000d0:	4798      	blx	r3
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000648 	.word	0x20000648
 80000d8:	20000648 	.word	0x20000648
 80000dc:	00000000 	.word	0x00000000

080000e0 <register_tm_clones>:
 80000e0:	4806      	ldr	r0, [pc, #24]	; (80000fc <register_tm_clones+0x1c>)
 80000e2:	4907      	ldr	r1, [pc, #28]	; (8000100 <register_tm_clones+0x20>)
 80000e4:	1a09      	subs	r1, r1, r0
 80000e6:	108b      	asrs	r3, r1, #2
 80000e8:	0fc9      	lsrs	r1, r1, #31
 80000ea:	18c9      	adds	r1, r1, r3
 80000ec:	b510      	push	{r4, lr}
 80000ee:	1049      	asrs	r1, r1, #1
 80000f0:	d003      	beq.n	80000fa <register_tm_clones+0x1a>
 80000f2:	4b04      	ldr	r3, [pc, #16]	; (8000104 <register_tm_clones+0x24>)
 80000f4:	2b00      	cmp	r3, #0
 80000f6:	d000      	beq.n	80000fa <register_tm_clones+0x1a>
 80000f8:	4798      	blx	r3
 80000fa:	bd10      	pop	{r4, pc}
 80000fc:	20000648 	.word	0x20000648
 8000100:	20000648 	.word	0x20000648
 8000104:	00000000 	.word	0x00000000

08000108 <__do_global_dtors_aux>:
 8000108:	b510      	push	{r4, lr}
 800010a:	4c07      	ldr	r4, [pc, #28]	; (8000128 <__do_global_dtors_aux+0x20>)
 800010c:	7823      	ldrb	r3, [r4, #0]
 800010e:	2b00      	cmp	r3, #0
 8000110:	d109      	bne.n	8000126 <__do_global_dtors_aux+0x1e>
 8000112:	f7ff ffd5 	bl	80000c0 <deregister_tm_clones>
 8000116:	4b05      	ldr	r3, [pc, #20]	; (800012c <__do_global_dtors_aux+0x24>)
 8000118:	2b00      	cmp	r3, #0
 800011a:	d002      	beq.n	8000122 <__do_global_dtors_aux+0x1a>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x28>)
 800011e:	e000      	b.n	8000122 <__do_global_dtors_aux+0x1a>
 8000120:	bf00      	nop
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000648 	.word	0x20000648
 800012c:	00000000 	.word	0x00000000
 8000130:	0801ae2c 	.word	0x0801ae2c

08000134 <frame_dummy>:
 8000134:	4b05      	ldr	r3, [pc, #20]	; (800014c <frame_dummy+0x18>)
 8000136:	b510      	push	{r4, lr}
 8000138:	2b00      	cmp	r3, #0
 800013a:	d003      	beq.n	8000144 <frame_dummy+0x10>
 800013c:	4904      	ldr	r1, [pc, #16]	; (8000150 <frame_dummy+0x1c>)
 800013e:	4805      	ldr	r0, [pc, #20]	; (8000154 <frame_dummy+0x20>)
 8000140:	e000      	b.n	8000144 <frame_dummy+0x10>
 8000142:	bf00      	nop
 8000144:	f7ff ffcc 	bl	80000e0 <register_tm_clones>
 8000148:	bd10      	pop	{r4, pc}
 800014a:	46c0      	nop			; (mov r8, r8)
 800014c:	00000000 	.word	0x00000000
 8000150:	2000064c 	.word	0x2000064c
 8000154:	0801ae2c 	.word	0x0801ae2c

08000158 <ask_data>:
} Request;


uart_handle_t* uarthandler;

void ask_data(){
 8000158:	b500      	push	{lr}
 800015a:	b083      	sub	sp, #12
    //send request
    uint8_t payload[3];
    payload[0] = START_DELIMITER;
 800015c:	a901      	add	r1, sp, #4
 800015e:	2373      	movs	r3, #115	; 0x73
 8000160:	700b      	strb	r3, [r1, #0]
    payload[1] = DATA_REQ;
 8000162:	3b72      	subs	r3, #114	; 0x72
 8000164:	704b      	strb	r3, [r1, #1]
    payload[2] = END_DELIMITER;
 8000166:	3364      	adds	r3, #100	; 0x64
 8000168:	708b      	strb	r3, [r1, #2]
    uart_send_bytes(uarthandler,payload,sizeof(payload));
 800016a:	4b06      	ldr	r3, [pc, #24]	; (8000184 <ask_data+0x2c>)
 800016c:	6818      	ldr	r0, [r3, #0]
 800016e:	2203      	movs	r2, #3
 8000170:	f00c f91d 	bl	800c3ae <uart_send_bytes>
    //non blocking delay ot allow reception
    int i = 30000;//no clue how much delay this is but it's delay..
 8000174:	4b04      	ldr	r3, [pc, #16]	; (8000188 <ask_data+0x30>)
    while(i!=0){
 8000176:	2b00      	cmp	r3, #0
 8000178:	d001      	beq.n	800017e <ask_data+0x26>
        i--;
 800017a:	3b01      	subs	r3, #1
 800017c:	e7fb      	b.n	8000176 <ask_data+0x1e>
    }
}
 800017e:	b003      	add	sp, #12
 8000180:	bd00      	pop	{pc}
 8000182:	46c0      	nop			; (mov r8, r8)
 8000184:	20000674 	.word	0x20000674
 8000188:	00007530 	.word	0x00007530

0800018c <startTask>:

void startTask(){
 800018c:	b510      	push	{r4, lr}
 800018e:	b082      	sub	sp, #8
 *					EINVAL if an invalid priority was specified.
 *					EALREADY if the task was already scheduled.
 */
inline error_t timer_post_task_prio_delay(task_t task, timer_tick_t delay, uint8_t priority)
{
    return timer_post_task_prio(task, timer_get_counter_value() + delay, priority, 0, NULL);
 8000190:	f010 f8b6 	bl	8010300 <timer_get_counter_value>
 8000194:	2380      	movs	r3, #128	; 0x80
 8000196:	00db      	lsls	r3, r3, #3
 8000198:	18c1      	adds	r1, r0, r3
 800019a:	2400      	movs	r4, #0
 800019c:	9400      	str	r4, [sp, #0]
 800019e:	2300      	movs	r3, #0
 80001a0:	2207      	movs	r2, #7
 80001a2:	4808      	ldr	r0, [pc, #32]	; (80001c4 <startTask+0x38>)
 80001a4:	f010 fabe 	bl	8010724 <timer_post_task_prio>
 80001a8:	f010 f8aa 	bl	8010300 <timer_get_counter_value>
 80001ac:	23a0      	movs	r3, #160	; 0xa0
 80001ae:	019b      	lsls	r3, r3, #6
 80001b0:	18c1      	adds	r1, r0, r3
 80001b2:	9400      	str	r4, [sp, #0]
 80001b4:	2300      	movs	r3, #0
 80001b6:	2207      	movs	r2, #7
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <startTask+0x3c>)
 80001ba:	f010 fab3 	bl	8010724 <timer_post_task_prio>
    //wakeup_STM();
    timer_post_task_delay(&ask_data, SENSOR_INTERVAL_SEC);
    timer_post_task_delay(&startTask, SENSOR_INTERVAL_SEC*10);
}
 80001be:	b002      	add	sp, #8
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	46c0      	nop			; (mov r8, r8)
 80001c4:	08000159 	.word	0x08000159
 80001c8:	0800018d 	.word	0x0800018d

080001cc <process_received_data>:

void process_received_data(uint8_t* buffer, uint8_t size){
 80001cc:	b500      	push	{lr}
 80001ce:	b083      	sub	sp, #12
    //uart_send_string(uarthandler,"received");
    CustomMessage message;
    size_t offset = 0;
    // Manually copy data from buffer to struct fields
    message.startDelimiter = buffer[offset++];
    message.sensorType = buffer[offset++];
 80001d0:	7842      	ldrb	r2, [r0, #1]
    //message.timestamp = (uint32_t)buffer[offset] | ((uint32_t)buffer[offset + 1] << 8) | ((uint32_t)buffer[offset + 2] << 16) | ((uint32_t)buffer[offset + 3] << 24);
    //offset += 4;
    message.sensorData = (uint32_t)buffer[offset] | ((uint32_t)buffer[offset + 1] << 8) | ((uint32_t)buffer[offset + 2] << 16) | ((uint32_t)buffer[offset +3] << 24);
 80001d2:	7883      	ldrb	r3, [r0, #2]
 80001d4:	78c1      	ldrb	r1, [r0, #3]
 80001d6:	0209      	lsls	r1, r1, #8
 80001d8:	430b      	orrs	r3, r1
 80001da:	7901      	ldrb	r1, [r0, #4]
 80001dc:	0409      	lsls	r1, r1, #16
 80001de:	430b      	orrs	r3, r1
 80001e0:	7941      	ldrb	r1, [r0, #5]
 80001e2:	0609      	lsls	r1, r1, #24
 80001e4:	430b      	orrs	r3, r1
    static uint32_t data = 0;
    static uint32_t temperature = 40;


    //check delimiters
    if (message.sensorType == TEMPERATURE_SENSOR){ //temperature
 80001e6:	2a02      	cmp	r2, #2
 80001e8:	d01c      	beq.n	8000224 <process_received_data+0x58>
        data = __builtin_bswap32(message.sensorData); // need to store in big endian in fs
        int rc = d7ap_fs_write_file(TEMPERATURE_FILE_ID, 0, (uint8_t*)&data, SENSOR_FILE_SIZE, ROOT_AUTH);
        assert(rc == 0);
        data = __builtin_bswap32(data); // revert to make sure we're working with the right value(?)
        //uart_send_string("temperature processed \n\r");
    } else if (message.sensorType == HUMIDITY_SENSOR){
 80001ea:	2a03      	cmp	r2, #3
 80001ec:	d031      	beq.n	8000252 <process_received_data+0x86>
        data = __builtin_bswap32(message.sensorData); // need to store in big endian in fs
        int rc = d7ap_fs_write_file(HUMIDITY_FILE_ID, 0, (uint8_t*)&data, SENSOR_FILE_SIZE, ROOT_AUTH);
        assert(rc == 0);
        data = __builtin_bswap32(data); // revert to make sure we're working with the right value(?)
    }else if (message.sensorType == LIGHT_SENSOR){
 80001ee:	2a04      	cmp	r2, #4
 80001f0:	d046      	beq.n	8000280 <process_received_data+0xb4>
        data = __builtin_bswap32(message.sensorData); // need to store in big endian in fs
        int rc = d7ap_fs_write_file(LIGHT_FILE_ID, 0, (uint8_t*)&data, SENSOR_FILE_SIZE, ROOT_AUTH);
        assert(rc == 0);
        data = __builtin_bswap32(data); // revert to make sure we're working with the right value(?)
    }else if (message.sensorType == RADIO_SENSOR){
 80001f2:	2a05      	cmp	r2, #5
 80001f4:	d05b      	beq.n	80002ae <process_received_data+0xe2>
        data = __builtin_bswap32(message.sensorData); // need to store in big endian in fs
        int rc = d7ap_fs_write_file(RADIO_FILE_ID, 0, (uint8_t*)&data, SENSOR_FILE_SIZE, ROOT_AUTH);
        assert(rc == 0);
        data = __builtin_bswap32(data); // revert to make sure we're working with the right value(?)
    }else if (message.sensorType == DUST_SENSOR){
 80001f6:	2a07      	cmp	r2, #7
 80001f8:	d100      	bne.n	80001fc <process_received_data+0x30>
 80001fa:	e06f      	b.n	80002dc <process_received_data+0x110>
        data = __builtin_bswap32(message.sensorData); // need to store in big endian in fs
        int rc = d7ap_fs_write_file(DUST_FILE_ID, 0, (uint8_t*)&data, SENSOR_FILE_SIZE, ROOT_AUTH);
        assert(rc == 0);
        data = __builtin_bswap32(data); // revert to make sure we're working with the right value(?)
    }else{
        data = __builtin_bswap32(temperature); // need to store in big endian in fs
 80001fc:	4a46      	ldr	r2, [pc, #280]	; (8000318 <process_received_data+0x14c>)
 80001fe:	23a0      	movs	r3, #160	; 0xa0
 8000200:	059b      	lsls	r3, r3, #22
 8000202:	6013      	str	r3, [r2, #0]
        int rc = d7ap_fs_write_file(TEMPERATURE_FILE_ID, 0, (uint8_t*)&data, SENSOR_FILE_SIZE, ROOT_AUTH);
 8000204:	2300      	movs	r3, #0
 8000206:	9300      	str	r3, [sp, #0]
 8000208:	3304      	adds	r3, #4
 800020a:	2100      	movs	r1, #0
 800020c:	203c      	movs	r0, #60	; 0x3c
 800020e:	f007 fea7 	bl	8007f60 <d7ap_fs_write_file>
        assert(rc == 0);
 8000212:	2800      	cmp	r0, #0
 8000214:	d000      	beq.n	8000218 <process_received_data+0x4c>
 8000216:	e078      	b.n	800030a <process_received_data+0x13e>
        data = __builtin_bswap32(temperature); // revert to make sure we're working with the right value(?)
 8000218:	4b3f      	ldr	r3, [pc, #252]	; (8000318 <process_received_data+0x14c>)
 800021a:	22a0      	movs	r2, #160	; 0xa0
 800021c:	0592      	lsls	r2, r2, #22
 800021e:	601a      	str	r2, [r3, #0]
    }
   // push_data(buffer,size, message);
}
 8000220:	b003      	add	sp, #12
 8000222:	bd00      	pop	{pc}
        data = __builtin_bswap32(message.sensorData); // need to store in big endian in fs
 8000224:	ba1b      	rev	r3, r3
 8000226:	4a3c      	ldr	r2, [pc, #240]	; (8000318 <process_received_data+0x14c>)
 8000228:	6013      	str	r3, [r2, #0]
        int rc = d7ap_fs_write_file(TEMPERATURE_FILE_ID, 0, (uint8_t*)&data, SENSOR_FILE_SIZE, ROOT_AUTH);
 800022a:	2300      	movs	r3, #0
 800022c:	9300      	str	r3, [sp, #0]
 800022e:	3304      	adds	r3, #4
 8000230:	2100      	movs	r1, #0
 8000232:	203c      	movs	r0, #60	; 0x3c
 8000234:	f007 fe94 	bl	8007f60 <d7ap_fs_write_file>
        assert(rc == 0);
 8000238:	2800      	cmp	r0, #0
 800023a:	d104      	bne.n	8000246 <process_received_data+0x7a>
        data = __builtin_bswap32(data); // revert to make sure we're working with the right value(?)
 800023c:	4a36      	ldr	r2, [pc, #216]	; (8000318 <process_received_data+0x14c>)
 800023e:	6813      	ldr	r3, [r2, #0]
 8000240:	ba1b      	rev	r3, r3
 8000242:	6013      	str	r3, [r2, #0]
 8000244:	e7ec      	b.n	8000220 <process_received_data+0x54>
        assert(rc == 0);
 8000246:	4b35      	ldr	r3, [pc, #212]	; (800031c <process_received_data+0x150>)
 8000248:	4a35      	ldr	r2, [pc, #212]	; (8000320 <process_received_data+0x154>)
 800024a:	21a5      	movs	r1, #165	; 0xa5
 800024c:	4835      	ldr	r0, [pc, #212]	; (8000324 <process_received_data+0x158>)
 800024e:	f008 f9d7 	bl	8008600 <__assert_func>
        data = __builtin_bswap32(message.sensorData); // need to store in big endian in fs
 8000252:	ba1b      	rev	r3, r3
 8000254:	4a30      	ldr	r2, [pc, #192]	; (8000318 <process_received_data+0x14c>)
 8000256:	6013      	str	r3, [r2, #0]
        int rc = d7ap_fs_write_file(HUMIDITY_FILE_ID, 0, (uint8_t*)&data, SENSOR_FILE_SIZE, ROOT_AUTH);
 8000258:	2300      	movs	r3, #0
 800025a:	9300      	str	r3, [sp, #0]
 800025c:	3304      	adds	r3, #4
 800025e:	2100      	movs	r1, #0
 8000260:	203e      	movs	r0, #62	; 0x3e
 8000262:	f007 fe7d 	bl	8007f60 <d7ap_fs_write_file>
        assert(rc == 0);
 8000266:	2800      	cmp	r0, #0
 8000268:	d104      	bne.n	8000274 <process_received_data+0xa8>
        data = __builtin_bswap32(data); // revert to make sure we're working with the right value(?)
 800026a:	4a2b      	ldr	r2, [pc, #172]	; (8000318 <process_received_data+0x14c>)
 800026c:	6813      	ldr	r3, [r2, #0]
 800026e:	ba1b      	rev	r3, r3
 8000270:	6013      	str	r3, [r2, #0]
 8000272:	e7d5      	b.n	8000220 <process_received_data+0x54>
        assert(rc == 0);
 8000274:	4b29      	ldr	r3, [pc, #164]	; (800031c <process_received_data+0x150>)
 8000276:	4a2a      	ldr	r2, [pc, #168]	; (8000320 <process_received_data+0x154>)
 8000278:	21ab      	movs	r1, #171	; 0xab
 800027a:	482a      	ldr	r0, [pc, #168]	; (8000324 <process_received_data+0x158>)
 800027c:	f008 f9c0 	bl	8008600 <__assert_func>
        data = __builtin_bswap32(message.sensorData); // need to store in big endian in fs
 8000280:	ba1b      	rev	r3, r3
 8000282:	4a25      	ldr	r2, [pc, #148]	; (8000318 <process_received_data+0x14c>)
 8000284:	6013      	str	r3, [r2, #0]
        int rc = d7ap_fs_write_file(LIGHT_FILE_ID, 0, (uint8_t*)&data, SENSOR_FILE_SIZE, ROOT_AUTH);
 8000286:	2300      	movs	r3, #0
 8000288:	9300      	str	r3, [sp, #0]
 800028a:	3304      	adds	r3, #4
 800028c:	2100      	movs	r1, #0
 800028e:	203d      	movs	r0, #61	; 0x3d
 8000290:	f007 fe66 	bl	8007f60 <d7ap_fs_write_file>
        assert(rc == 0);
 8000294:	2800      	cmp	r0, #0
 8000296:	d104      	bne.n	80002a2 <process_received_data+0xd6>
        data = __builtin_bswap32(data); // revert to make sure we're working with the right value(?)
 8000298:	4a1f      	ldr	r2, [pc, #124]	; (8000318 <process_received_data+0x14c>)
 800029a:	6813      	ldr	r3, [r2, #0]
 800029c:	ba1b      	rev	r3, r3
 800029e:	6013      	str	r3, [r2, #0]
 80002a0:	e7be      	b.n	8000220 <process_received_data+0x54>
        assert(rc == 0);
 80002a2:	4b1e      	ldr	r3, [pc, #120]	; (800031c <process_received_data+0x150>)
 80002a4:	4a1e      	ldr	r2, [pc, #120]	; (8000320 <process_received_data+0x154>)
 80002a6:	21b0      	movs	r1, #176	; 0xb0
 80002a8:	481e      	ldr	r0, [pc, #120]	; (8000324 <process_received_data+0x158>)
 80002aa:	f008 f9a9 	bl	8008600 <__assert_func>
        data = __builtin_bswap32(message.sensorData); // need to store in big endian in fs
 80002ae:	ba1b      	rev	r3, r3
 80002b0:	4a19      	ldr	r2, [pc, #100]	; (8000318 <process_received_data+0x14c>)
 80002b2:	6013      	str	r3, [r2, #0]
        int rc = d7ap_fs_write_file(RADIO_FILE_ID, 0, (uint8_t*)&data, SENSOR_FILE_SIZE, ROOT_AUTH);
 80002b4:	2300      	movs	r3, #0
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	3304      	adds	r3, #4
 80002ba:	2100      	movs	r1, #0
 80002bc:	203f      	movs	r0, #63	; 0x3f
 80002be:	f007 fe4f 	bl	8007f60 <d7ap_fs_write_file>
        assert(rc == 0);
 80002c2:	2800      	cmp	r0, #0
 80002c4:	d104      	bne.n	80002d0 <process_received_data+0x104>
        data = __builtin_bswap32(data); // revert to make sure we're working with the right value(?)
 80002c6:	4a14      	ldr	r2, [pc, #80]	; (8000318 <process_received_data+0x14c>)
 80002c8:	6813      	ldr	r3, [r2, #0]
 80002ca:	ba1b      	rev	r3, r3
 80002cc:	6013      	str	r3, [r2, #0]
 80002ce:	e7a7      	b.n	8000220 <process_received_data+0x54>
        assert(rc == 0);
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <process_received_data+0x150>)
 80002d2:	4a13      	ldr	r2, [pc, #76]	; (8000320 <process_received_data+0x154>)
 80002d4:	21b5      	movs	r1, #181	; 0xb5
 80002d6:	4813      	ldr	r0, [pc, #76]	; (8000324 <process_received_data+0x158>)
 80002d8:	f008 f992 	bl	8008600 <__assert_func>
        data = __builtin_bswap32(message.sensorData); // need to store in big endian in fs
 80002dc:	ba1b      	rev	r3, r3
 80002de:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <process_received_data+0x14c>)
 80002e0:	6013      	str	r3, [r2, #0]
        int rc = d7ap_fs_write_file(DUST_FILE_ID, 0, (uint8_t*)&data, SENSOR_FILE_SIZE, ROOT_AUTH);
 80002e2:	2300      	movs	r3, #0
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	3304      	adds	r3, #4
 80002e8:	2100      	movs	r1, #0
 80002ea:	2041      	movs	r0, #65	; 0x41
 80002ec:	f007 fe38 	bl	8007f60 <d7ap_fs_write_file>
        assert(rc == 0);
 80002f0:	2800      	cmp	r0, #0
 80002f2:	d104      	bne.n	80002fe <process_received_data+0x132>
        data = __builtin_bswap32(data); // revert to make sure we're working with the right value(?)
 80002f4:	4a08      	ldr	r2, [pc, #32]	; (8000318 <process_received_data+0x14c>)
 80002f6:	6813      	ldr	r3, [r2, #0]
 80002f8:	ba1b      	rev	r3, r3
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	e790      	b.n	8000220 <process_received_data+0x54>
        assert(rc == 0);
 80002fe:	4b07      	ldr	r3, [pc, #28]	; (800031c <process_received_data+0x150>)
 8000300:	4a07      	ldr	r2, [pc, #28]	; (8000320 <process_received_data+0x154>)
 8000302:	21ba      	movs	r1, #186	; 0xba
 8000304:	4807      	ldr	r0, [pc, #28]	; (8000324 <process_received_data+0x158>)
 8000306:	f008 f97b 	bl	8008600 <__assert_func>
        assert(rc == 0);
 800030a:	4b04      	ldr	r3, [pc, #16]	; (800031c <process_received_data+0x150>)
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <process_received_data+0x154>)
 800030e:	21bf      	movs	r1, #191	; 0xbf
 8000310:	4804      	ldr	r0, [pc, #16]	; (8000324 <process_received_data+0x158>)
 8000312:	f008 f975 	bl	8008600 <__assert_func>
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	20000664 	.word	0x20000664
 800031c:	080168cc 	.word	0x080168cc
 8000320:	08016928 	.word	0x08016928
 8000324:	080168d4 	.word	0x080168d4

08000328 <uart_rx_callback>:

void uart_rx_callback(uart_handle_t* uart_handler, uint8_t byte){
 8000328:	b510      	push	{r4, lr}
    //accumulate bytes in the buffer
    if (byte == START_DELIMITER) transmissionStarted=1;
 800032a:	2973      	cmp	r1, #115	; 0x73
 800032c:	d010      	beq.n	8000350 <uart_rx_callback+0x28>
    if(transmissionStarted){
 800032e:	4b0f      	ldr	r3, [pc, #60]	; (800036c <uart_rx_callback+0x44>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d00b      	beq.n	800034e <uart_rx_callback+0x26>
        if(data_buffer_index < DATA_BUFFER_SIZE){
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <uart_rx_callback+0x48>)
 8000338:	881b      	ldrh	r3, [r3, #0]
 800033a:	2b06      	cmp	r3, #6
 800033c:	d807      	bhi.n	800034e <uart_rx_callback+0x26>
            data_buffer[data_buffer_index++] = byte;
 800033e:	1c5a      	adds	r2, r3, #1
 8000340:	b292      	uxth	r2, r2
 8000342:	480b      	ldr	r0, [pc, #44]	; (8000370 <uart_rx_callback+0x48>)
 8000344:	8002      	strh	r2, [r0, #0]
 8000346:	480b      	ldr	r0, [pc, #44]	; (8000374 <uart_rx_callback+0x4c>)
 8000348:	54c1      	strb	r1, [r0, r3]
            if(byte == END_DELIMITER){
 800034a:	2965      	cmp	r1, #101	; 0x65
 800034c:	d004      	beq.n	8000358 <uart_rx_callback+0x30>
                process_received_data(data_buffer,tempIndex);
            }
        }
        
    }  
}
 800034e:	bd10      	pop	{r4, pc}
    if (byte == START_DELIMITER) transmissionStarted=1;
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <uart_rx_callback+0x44>)
 8000352:	2201      	movs	r2, #1
 8000354:	701a      	strb	r2, [r3, #0]
 8000356:	e7ea      	b.n	800032e <uart_rx_callback+0x6>
                transmissionStarted = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	4904      	ldr	r1, [pc, #16]	; (800036c <uart_rx_callback+0x44>)
 800035c:	700b      	strb	r3, [r1, #0]
                uint8_t tempIndex = data_buffer_index;
 800035e:	b2d1      	uxtb	r1, r2
                data_buffer_index=0;
 8000360:	4a03      	ldr	r2, [pc, #12]	; (8000370 <uart_rx_callback+0x48>)
 8000362:	8013      	strh	r3, [r2, #0]
                process_received_data(data_buffer,tempIndex);
 8000364:	f7ff ff32 	bl	80001cc <process_received_data>
}
 8000368:	e7f1      	b.n	800034e <uart_rx_callback+0x26>
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	20000672 	.word	0x20000672
 8000370:	20000670 	.word	0x20000670
 8000374:	20000668 	.word	0x20000668

08000378 <init_user_files>:

 // timer_post_task_delay(&execute_sensor_measurement, SENSOR_INTERVAL_SEC);
}

void init_user_files()
{
 8000378:	b510      	push	{r4, lr}
 800037a:	b086      	sub	sp, #24
  // file 0x40: contains our sensor data
  d7ap_fs_file_header_t sensor_file_header = (d7ap_fs_file_header_t) {
 800037c:	2400      	movs	r4, #0
 800037e:	9403      	str	r4, [sp, #12]
 8000380:	2204      	movs	r2, #4
 8000382:	2304      	movs	r3, #4
 8000384:	2120      	movs	r1, #32
 8000386:	430b      	orrs	r3, r1
 8000388:	4669      	mov	r1, sp
 800038a:	730b      	strb	r3, [r1, #12]
 800038c:	2303      	movs	r3, #3
 800038e:	734b      	strb	r3, [r1, #13]
 8000390:	9204      	str	r2, [sp, #16]
 8000392:	9205      	str	r2, [sp, #20]
      .file_properties.storage_class = FS_STORAGE_PERMANENT,
      .length = SENSOR_FILE_SIZE,
      .allocated_length = SENSOR_FILE_SIZE,
  };

  d7ap_fs_init_file(TEMPERATURE_FILE_ID, &sensor_file_header, NULL);
 8000394:	2200      	movs	r2, #0
 8000396:	a903      	add	r1, sp, #12
 8000398:	203c      	movs	r0, #60	; 0x3c
 800039a:	f007 fba7 	bl	8007aec <d7ap_fs_init_file>
  d7ap_fs_init_file(HUMIDITY_FILE_ID, &sensor_file_header, NULL);
 800039e:	2200      	movs	r2, #0
 80003a0:	a903      	add	r1, sp, #12
 80003a2:	203e      	movs	r0, #62	; 0x3e
 80003a4:	f007 fba2 	bl	8007aec <d7ap_fs_init_file>
  d7ap_fs_init_file(LIGHT_FILE_ID, &sensor_file_header, NULL);
 80003a8:	2200      	movs	r2, #0
 80003aa:	a903      	add	r1, sp, #12
 80003ac:	203d      	movs	r0, #61	; 0x3d
 80003ae:	f007 fb9d 	bl	8007aec <d7ap_fs_init_file>
  d7ap_fs_init_file(RADIO_FILE_ID, &sensor_file_header, NULL);
 80003b2:	2200      	movs	r2, #0
 80003b4:	a903      	add	r1, sp, #12
 80003b6:	203f      	movs	r0, #63	; 0x3f
 80003b8:	f007 fb98 	bl	8007aec <d7ap_fs_init_file>
  d7ap_fs_init_file(DUST_FILE_ID, &sensor_file_header, NULL);
 80003bc:	2200      	movs	r2, #0
 80003be:	a903      	add	r1, sp, #12
 80003c0:	2041      	movs	r0, #65	; 0x41
 80003c2:	f007 fb93 	bl	8007aec <d7ap_fs_init_file>
  d7ap_fs_init_file(TEST_FILE_ID, &sensor_file_header, NULL);
 80003c6:	2200      	movs	r2, #0
 80003c8:	a903      	add	r1, sp, #12
 80003ca:	2043      	movs	r0, #67	; 0x43
 80003cc:	f007 fb8e 	bl	8007aec <d7ap_fs_init_file>
 80003d0:	f00f ff96 	bl	8010300 <timer_get_counter_value>
 80003d4:	2380      	movs	r3, #128	; 0x80
 80003d6:	00db      	lsls	r3, r3, #3
 80003d8:	18c1      	adds	r1, r0, r3
 80003da:	9400      	str	r4, [sp, #0]
 80003dc:	2300      	movs	r3, #0
 80003de:	2207      	movs	r2, #7
 80003e0:	4802      	ldr	r0, [pc, #8]	; (80003ec <init_user_files+0x74>)
 80003e2:	f010 f99f 	bl	8010724 <timer_post_task_prio>
  
  timer_post_task_delay(&startTask, SENSOR_INTERVAL_SEC);
}
 80003e6:	b006      	add	sp, #24
 80003e8:	bd10      	pop	{r4, pc}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	0800018d 	.word	0x0800018d

080003f0 <bootstrap>:

static alp_init_args_t alp_init_args;

void bootstrap()
{
 80003f0:	b510      	push	{r4, lr}
    log_print_string("Device booted\n");
 80003f2:	4811      	ldr	r0, [pc, #68]	; (8000438 <bootstrap+0x48>)
 80003f4:	f00e fdda 	bl	800efac <log_print_string>
    
    alp_layer_init(NULL, false);
 80003f8:	2100      	movs	r1, #0
 80003fa:	2000      	movs	r0, #0
 80003fc:	f000 fd52 	bl	8000ea4 <alp_layer_init>
    
    d7ap_fs_write_dll_conf_active_access_class(0x11); // use scanning AC, visible in d7ap_fs_data.c
 8000400:	2011      	movs	r0, #17
 8000402:	f007 fe77 	bl	80080f4 <d7ap_fs_write_dll_conf_active_access_class>
    init_user_files();
 8000406:	f7ff ffb7 	bl	8000378 <init_user_files>

    uarthandler = uart_init(UART_PORT_IDX, UART_BAUDRATE, UART_PINS);
 800040a:	21e1      	movs	r1, #225	; 0xe1
 800040c:	2200      	movs	r2, #0
 800040e:	0249      	lsls	r1, r1, #9
 8000410:	2000      	movs	r0, #0
 8000412:	f00b fe61 	bl	800c0d8 <uart_init>
 8000416:	4c09      	ldr	r4, [pc, #36]	; (800043c <bootstrap+0x4c>)
 8000418:	6020      	str	r0, [r4, #0]
    if(uarthandler == NULL) {
        // Initialization failed, handle the error
    }
    
    uart_set_rx_interrupt_callback(uarthandler, uart_rx_callback);
 800041a:	4909      	ldr	r1, [pc, #36]	; (8000440 <bootstrap+0x50>)
 800041c:	f00b ffc2 	bl	800c3a4 <uart_set_rx_interrupt_callback>
    uart_rx_interrupt_enable(uarthandler);
 8000420:	6820      	ldr	r0, [r4, #0]
 8000422:	f00b ffcd 	bl	800c3c0 <uart_rx_interrupt_enable>
 * \param task		The task to register
 *
 * \return error_t 	SUCCESS if the task was registered successfully
 *                  EALREADY if the task was already registered
 */
static inline error_t sched_register_task(task_t task) { return sched_register_task_allow_multiple(task, false);}
 8000426:	2100      	movs	r1, #0
 8000428:	4806      	ldr	r0, [pc, #24]	; (8000444 <bootstrap+0x54>)
 800042a:	f00f f81f 	bl	800f46c <sched_register_task_allow_multiple>
 800042e:	2100      	movs	r1, #0
 8000430:	4805      	ldr	r0, [pc, #20]	; (8000448 <bootstrap+0x58>)
 8000432:	f00f f81b 	bl	800f46c <sched_register_task_allow_multiple>
    //sched_register_task(&execute_sensor_measurement);
    //sched_post_task(&execute_sensor_measurement);
    sched_register_task(&startTask);
    sched_register_task(&ask_data);
    //uart_send_string(uarthandler, "Test");
}
 8000436:	bd10      	pop	{r4, pc}
 8000438:	08016918 	.word	0x08016918
 800043c:	20000674 	.word	0x20000674
 8000440:	08000329 	.word	0x08000329
 8000444:	0800018d 	.word	0x0800018d
 8000448:	08000159 	.word	0x08000159

0800044c <get_request_command>:
        }
    }
}

static alp_command_t* get_request_command(uint8_t tag_id, uint8_t itf_id)
{
 800044c:	b530      	push	{r4, r5, lr}
    for (uint8_t i = 0; i < MODULE_ALP_MAX_ACTIVE_COMMAND_COUNT; i++) {
 800044e:	2300      	movs	r3, #0
 8000450:	e001      	b.n	8000456 <get_request_command+0xa>
 8000452:	3301      	adds	r3, #1
 8000454:	b2db      	uxtb	r3, r3
 8000456:	2b07      	cmp	r3, #7
 8000458:	d82d      	bhi.n	80004b6 <get_request_command+0x6a>
        if (commands[i].forward_itf_id == itf_id && commands[i].tag_id == tag_id && commands[i].is_active && !commands[i].is_response) {
 800045a:	005c      	lsls	r4, r3, #1
 800045c:	18e4      	adds	r4, r4, r3
 800045e:	0162      	lsls	r2, r4, #5
 8000460:	1b12      	subs	r2, r2, r4
 8000462:	0092      	lsls	r2, r2, #2
 8000464:	4c15      	ldr	r4, [pc, #84]	; (80004bc <get_request_command+0x70>)
 8000466:	18a2      	adds	r2, r4, r2
 8000468:	79d2      	ldrb	r2, [r2, #7]
 800046a:	428a      	cmp	r2, r1
 800046c:	d1f1      	bne.n	8000452 <get_request_command+0x6>
 800046e:	005c      	lsls	r4, r3, #1
 8000470:	18e4      	adds	r4, r4, r3
 8000472:	0162      	lsls	r2, r4, #5
 8000474:	1b12      	subs	r2, r2, r4
 8000476:	0092      	lsls	r2, r2, #2
 8000478:	4c10      	ldr	r4, [pc, #64]	; (80004bc <get_request_command+0x70>)
 800047a:	18a2      	adds	r2, r4, r2
 800047c:	7a92      	ldrb	r2, [r2, #10]
 800047e:	4282      	cmp	r2, r0
 8000480:	d1e7      	bne.n	8000452 <get_request_command+0x6>
 8000482:	005c      	lsls	r4, r3, #1
 8000484:	18e4      	adds	r4, r4, r3
 8000486:	0162      	lsls	r2, r4, #5
 8000488:	1b12      	subs	r2, r2, r4
 800048a:	0092      	lsls	r2, r2, #2
 800048c:	4c0b      	ldr	r4, [pc, #44]	; (80004bc <get_request_command+0x70>)
 800048e:	5d12      	ldrb	r2, [r2, r4]
 8000490:	2a00      	cmp	r2, #0
 8000492:	d0de      	beq.n	8000452 <get_request_command+0x6>
 8000494:	005c      	lsls	r4, r3, #1
 8000496:	18e4      	adds	r4, r4, r3
 8000498:	0162      	lsls	r2, r4, #5
 800049a:	1b12      	subs	r2, r2, r4
 800049c:	0092      	lsls	r2, r2, #2
 800049e:	4c07      	ldr	r4, [pc, #28]	; (80004bc <get_request_command+0x70>)
 80004a0:	18a2      	adds	r2, r4, r2
 80004a2:	7852      	ldrb	r2, [r2, #1]
 80004a4:	2a00      	cmp	r2, #0
 80004a6:	d1d4      	bne.n	8000452 <get_request_command+0x6>
            DPRINT("found matching req command with tag %i for fwd itf %i in slot %i\n", tag_id, itf_id, i);
            return &(commands[i]);
 80004a8:	0058      	lsls	r0, r3, #1
 80004aa:	18c5      	adds	r5, r0, r3
 80004ac:	0168      	lsls	r0, r5, #5
 80004ae:	1b40      	subs	r0, r0, r5
 80004b0:	0080      	lsls	r0, r0, #2
 80004b2:	1900      	adds	r0, r0, r4
 80004b4:	e000      	b.n	80004b8 <get_request_command+0x6c>
        }
    }

    DPRINT("No matching req command found with tag %i fwd over itf %i\n", tag_id, itf_id);
    return NULL;
 80004b6:	2000      	movs	r0, #0
}
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	20000678 	.word	0x20000678

080004c0 <alp_layer_get_command_by_transid>:

static alp_command_t* alp_layer_get_command_by_transid(uint16_t trans_id, uint8_t itf_id) {
 80004c0:	b530      	push	{r4, r5, lr}
  for(uint8_t i = 0; i < MODULE_ALP_MAX_ACTIVE_COMMAND_COUNT; i++) {
 80004c2:	2300      	movs	r3, #0
 80004c4:	e001      	b.n	80004ca <alp_layer_get_command_by_transid+0xa>
 80004c6:	3301      	adds	r3, #1
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	2b07      	cmp	r3, #7
 80004cc:	d823      	bhi.n	8000516 <alp_layer_get_command_by_transid+0x56>
    if(commands[i].forward_itf_id == itf_id && commands[i].trans_id == trans_id && commands[i].is_active) {
 80004ce:	005c      	lsls	r4, r3, #1
 80004d0:	18e4      	adds	r4, r4, r3
 80004d2:	0162      	lsls	r2, r4, #5
 80004d4:	1b12      	subs	r2, r2, r4
 80004d6:	0092      	lsls	r2, r2, #2
 80004d8:	4c10      	ldr	r4, [pc, #64]	; (800051c <alp_layer_get_command_by_transid+0x5c>)
 80004da:	18a2      	adds	r2, r4, r2
 80004dc:	79d2      	ldrb	r2, [r2, #7]
 80004de:	428a      	cmp	r2, r1
 80004e0:	d1f1      	bne.n	80004c6 <alp_layer_get_command_by_transid+0x6>
 80004e2:	005c      	lsls	r4, r3, #1
 80004e4:	18e4      	adds	r4, r4, r3
 80004e6:	0162      	lsls	r2, r4, #5
 80004e8:	1b12      	subs	r2, r2, r4
 80004ea:	0092      	lsls	r2, r2, #2
 80004ec:	4c0b      	ldr	r4, [pc, #44]	; (800051c <alp_layer_get_command_by_transid+0x5c>)
 80004ee:	18a2      	adds	r2, r4, r2
 80004f0:	8912      	ldrh	r2, [r2, #8]
 80004f2:	4282      	cmp	r2, r0
 80004f4:	d1e7      	bne.n	80004c6 <alp_layer_get_command_by_transid+0x6>
 80004f6:	005c      	lsls	r4, r3, #1
 80004f8:	18e4      	adds	r4, r4, r3
 80004fa:	0162      	lsls	r2, r4, #5
 80004fc:	1b12      	subs	r2, r2, r4
 80004fe:	0092      	lsls	r2, r2, #2
 8000500:	4c06      	ldr	r4, [pc, #24]	; (800051c <alp_layer_get_command_by_transid+0x5c>)
 8000502:	5d12      	ldrb	r2, [r2, r4]
 8000504:	2a00      	cmp	r2, #0
 8000506:	d0de      	beq.n	80004c6 <alp_layer_get_command_by_transid+0x6>
        DPRINT("command trans Id %i in slot %i\n", trans_id, i);
        return &(commands[i]);
 8000508:	0058      	lsls	r0, r3, #1
 800050a:	18c5      	adds	r5, r0, r3
 800050c:	0168      	lsls	r0, r5, #5
 800050e:	1b40      	subs	r0, r0, r5
 8000510:	0080      	lsls	r0, r0, #2
 8000512:	1900      	adds	r0, r0, r4
 8000514:	e000      	b.n	8000518 <alp_layer_get_command_by_transid+0x58>
    }
  }

  DPRINT("No active command found with transaction Id = %i transmitted over itf %i\n", trans_id, itf_id);
  return NULL;
 8000516:	2000      	movs	r0, #0
}
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	20000678 	.word	0x20000678

08000520 <alp_translate_error>:

static alp_status_codes_t alp_translate_error(int rc)
{
    switch (rc) {
 8000520:	2800      	cmp	r0, #0
 8000522:	da29      	bge.n	8000578 <alp_translate_error+0x58>
 8000524:	0003      	movs	r3, r0
 8000526:	331b      	adds	r3, #27
 8000528:	db07      	blt.n	800053a <alp_translate_error+0x1a>
 800052a:	0003      	movs	r3, r0
 800052c:	331b      	adds	r3, #27
 800052e:	301b      	adds	r0, #27
 8000530:	d312      	bcc.n	8000558 <alp_translate_error+0x38>
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4a14      	ldr	r2, [pc, #80]	; (8000588 <alp_translate_error+0x68>)
 8000536:	58d3      	ldr	r3, [r2, r3]
 8000538:	469f      	mov	pc, r3
 800053a:	0003      	movs	r3, r0
 800053c:	338a      	adds	r3, #138	; 0x8a
 800053e:	d01d      	beq.n	800057c <alp_translate_error+0x5c>
 8000540:	0003      	movs	r3, r0
 8000542:	3369      	adds	r3, #105	; 0x69
 8000544:	d101      	bne.n	800054a <alp_translate_error+0x2a>
    case -EINVAL:
        return ALP_STATUS_LENGTH_OUT_OF_BOUNDS;
    case -ESIZE:
        return ALP_STATUS_WRONG_OPERAND_FORMAT;
    case -ENOBUFS:
        return ALP_STATUS_DATA_OVERFLOW;
 8000546:	20f8      	movs	r0, #248	; 0xf8
 8000548:	e003      	b.n	8000552 <alp_translate_error+0x32>
    switch (rc) {
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <alp_translate_error+0x6c>)
 800054c:	4298      	cmp	r0, r3
 800054e:	d117      	bne.n	8000580 <alp_translate_error+0x60>
        return ALP_STATUS_WRONG_OPERAND_FORMAT;
 8000550:	20f4      	movs	r0, #244	; 0xf4
    case -EACCES:
        return ALP_STATUS_INSUFFICIENT_PERMISSIONS;
    default:
        return ALP_STATUS_UNKNOWN_ERROR;
    }
}
 8000552:	4770      	bx	lr
    switch (rc) {
 8000554:	20ff      	movs	r0, #255	; 0xff
 8000556:	e7fc      	b.n	8000552 <alp_translate_error+0x32>
        return ALP_STATUS_UNKNOWN_ERROR;
 8000558:	2080      	movs	r0, #128	; 0x80
 800055a:	e7fa      	b.n	8000552 <alp_translate_error+0x32>
        return ALP_STATUS_DATA_OVERFLOW;
 800055c:	20f8      	movs	r0, #248	; 0xf8
 800055e:	e7f8      	b.n	8000552 <alp_translate_error+0x32>
        return ALP_STATUS_FILE_ID_OUT_OF_BOUNDS;
 8000560:	20e4      	movs	r0, #228	; 0xe4
 8000562:	e7f6      	b.n	8000552 <alp_translate_error+0x32>
        return ALP_STATUS_UNKNOWN_OPERATION;
 8000564:	20f6      	movs	r0, #246	; 0xf6
 8000566:	e7f4      	b.n	8000552 <alp_translate_error+0x32>
        return ALP_STATUS_NOT_YET_IMPLEMENTED;
 8000568:	20e2      	movs	r0, #226	; 0xe2
 800056a:	e7f2      	b.n	8000552 <alp_translate_error+0x32>
        return ALP_STATUS_FIFO_OUT_OF_BOUNDS;
 800056c:	20e0      	movs	r0, #224	; 0xe0
 800056e:	e7f0      	b.n	8000552 <alp_translate_error+0x32>
        return ALP_STATUS_FILE_ID_ALREADY_EXISTS;
 8000570:	20fe      	movs	r0, #254	; 0xfe
 8000572:	e7ee      	b.n	8000552 <alp_translate_error+0x32>
        return ALP_STATUS_INSUFFICIENT_PERMISSIONS;
 8000574:	20fc      	movs	r0, #252	; 0xfc
 8000576:	e7ec      	b.n	8000552 <alp_translate_error+0x32>
        return ALP_STATUS_UNKNOWN_ERROR;
 8000578:	2080      	movs	r0, #128	; 0x80
 800057a:	e7ea      	b.n	8000552 <alp_translate_error+0x32>
        return ALP_STATUS_WRONG_OPERAND_FORMAT;
 800057c:	20f4      	movs	r0, #244	; 0xf4
 800057e:	e7e8      	b.n	8000552 <alp_translate_error+0x32>
        return ALP_STATUS_UNKNOWN_ERROR;
 8000580:	2080      	movs	r0, #128	; 0x80
 8000582:	e7e6      	b.n	8000552 <alp_translate_error+0x32>
        return ALP_STATUS_LENGTH_OUT_OF_BOUNDS;
 8000584:	20fb      	movs	r0, #251	; 0xfb
 8000586:	e7e4      	b.n	8000552 <alp_translate_error+0x32>
 8000588:	0801695c 	.word	0x0801695c
 800058c:	ffffec76 	.word	0xffffec76

08000590 <interface_file_changed_callback>:
}

static void interface_file_changed_callback(uint8_t file_id)
{
    (void)file_id; // suppress unused warning
    interface_file_changed = true;
 8000590:	4b01      	ldr	r3, [pc, #4]	; (8000598 <interface_file_changed_callback+0x8>)
 8000592:	2201      	movs	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
}
 8000596:	4770      	bx	lr
 8000598:	20000500 	.word	0x20000500

0800059c <process_op_response_tag>:
    return ALP_STATUS_PARTIALLY_COMPLETED;
}

static alp_status_codes_t process_op_response_tag(alp_action_t* action, alp_command_t* command, uint8_t* tag_id, bool* is_response_completed, bool* is_response_error)
{
    *tag_id = action->tag_id_operand.tag_id;
 800059c:	7901      	ldrb	r1, [r0, #4]
 800059e:	7011      	strb	r1, [r2, #0]
    *is_response_completed = action->ctrl.b7;
 80005a0:	7802      	ldrb	r2, [r0, #0]
 80005a2:	09d2      	lsrs	r2, r2, #7
 80005a4:	701a      	strb	r2, [r3, #0]
    *is_response_error = action->ctrl.b6;
 80005a6:	7803      	ldrb	r3, [r0, #0]
 80005a8:	065b      	lsls	r3, r3, #25
 80005aa:	0fdb      	lsrs	r3, r3, #31
 80005ac:	9a00      	ldr	r2, [sp, #0]
 80005ae:	7013      	strb	r3, [r2, #0]
    DPRINT("tag response %i EOP %i, ERR %i\n", *tag_id, *is_response_completed, *is_response_error);
    return ALP_STATUS_OK;
}
 80005b0:	2000      	movs	r0, #0
 80005b2:	4770      	bx	lr

080005b4 <process_op_request_tag>:
    return ALP_STATUS_OK;
}

static alp_status_codes_t process_op_request_tag(alp_action_t* action, uint8_t* tag_id, bool* respond_when_completed)
{
    *tag_id = action->tag_id_operand.tag_id;
 80005b4:	7903      	ldrb	r3, [r0, #4]
 80005b6:	700b      	strb	r3, [r1, #0]
    *respond_when_completed = action->ctrl.b7;
 80005b8:	7803      	ldrb	r3, [r0, #0]
 80005ba:	09db      	lsrs	r3, r3, #7
 80005bc:	7013      	strb	r3, [r2, #0]
    DPRINT("tag req %i, EOP %i", *tag_id, *respond_when_completed);
    return ALP_STATUS_OK;
}
 80005be:	2000      	movs	r0, #0
 80005c0:	4770      	bx	lr
	...

080005c4 <find_interface>:
    DPRINT("interface %02X not registered, can therefore not be forwarded");
    return false;
}

static alp_interface_t* find_interface(uint8_t itf_id)
{
 80005c4:	b510      	push	{r4, lr}
 80005c6:	0004      	movs	r4, r0
    for (uint8_t i = 0; i < MODULE_ALP_INTERFACE_CNT; i++) {
 80005c8:	2300      	movs	r3, #0
 80005ca:	e001      	b.n	80005d0 <find_interface+0xc>
 80005cc:	3301      	adds	r3, #1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2b05      	cmp	r3, #5
 80005d2:	d808      	bhi.n	80005e6 <find_interface+0x22>
        if ((interfaces[i] != NULL) && (interfaces[i]->itf_id == itf_id)) {
 80005d4:	009a      	lsls	r2, r3, #2
 80005d6:	4905      	ldr	r1, [pc, #20]	; (80005ec <find_interface+0x28>)
 80005d8:	5850      	ldr	r0, [r2, r1]
 80005da:	2800      	cmp	r0, #0
 80005dc:	d0f6      	beq.n	80005cc <find_interface+0x8>
 80005de:	7802      	ldrb	r2, [r0, #0]
 80005e0:	42a2      	cmp	r2, r4
 80005e2:	d1f3      	bne.n	80005cc <find_interface+0x8>
 80005e4:	e000      	b.n	80005e8 <find_interface+0x24>
            return interfaces[i];
        }
    }

    DPRINT("interface %i not found", itf_id);
    return NULL;
 80005e6:	2000      	movs	r0, #0
}
 80005e8:	bd10      	pop	{r4, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	20001780 	.word	0x20001780

080005f0 <free_command>:
static void free_command(alp_command_t* command) {
 80005f0:	b510      	push	{r4, lr}
 80005f2:	0004      	movs	r4, r0
  memset(command, 0, sizeof (alp_command_t));
 80005f4:	22ba      	movs	r2, #186	; 0xba
 80005f6:	0052      	lsls	r2, r2, #1
 80005f8:	2100      	movs	r1, #0
 80005fa:	f014 fc3d 	bl	8014e78 <memset>
  command->is_active = false;
 80005fe:	2300      	movs	r3, #0
 8000600:	7023      	strb	r3, [r4, #0]
  fifo_init(&command->alp_command_fifo, command->alp_command, ALP_PAYLOAD_MAX_SIZE);
 8000602:	0021      	movs	r1, r4
 8000604:	3174      	adds	r1, #116	; 0x74
 8000606:	0020      	movs	r0, r4
 8000608:	3064      	adds	r0, #100	; 0x64
 800060a:	22ff      	movs	r2, #255	; 0xff
 800060c:	f00e f8ad 	bl	800e76a <fifo_init>
}
 8000610:	bd10      	pop	{r4, pc}
	...

08000614 <process_op_read_file_data>:
{
 8000614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000616:	b089      	sub	sp, #36	; 0x24
 8000618:	000d      	movs	r5, r1
 800061a:	9203      	str	r2, [sp, #12]
    alp_operand_file_data_request_t operand = action->file_data_request_operand;
 800061c:	aa05      	add	r2, sp, #20
 800061e:	3004      	adds	r0, #4
 8000620:	0011      	movs	r1, r2
 8000622:	c8d0      	ldmia	r0!, {r4, r6, r7}
 8000624:	c1d0      	stmia	r1!, {r4, r6, r7}
    if (operand.requested_data_length <= 0 || operand.requested_data_length > ALP_PAYLOAD_MAX_SIZE)
 8000626:	9a07      	ldr	r2, [sp, #28]
 8000628:	3a01      	subs	r2, #1
 800062a:	2afe      	cmp	r2, #254	; 0xfe
 800062c:	d82b      	bhi.n	8000686 <process_op_read_file_data+0x72>
    int rc = d7ap_fs_read_file(operand.file_offset.file_id, operand.file_offset.offset, alp_data, &operand.requested_data_length, origin_auth);
 800062e:	aa05      	add	r2, sp, #20
 8000630:	9906      	ldr	r1, [sp, #24]
 8000632:	7810      	ldrb	r0, [r2, #0]
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	ab07      	add	r3, sp, #28
 8000638:	4a15      	ldr	r2, [pc, #84]	; (8000690 <process_op_read_file_data+0x7c>)
 800063a:	f007 fb31 	bl	8007ca0 <d7ap_fs_read_file>
    if (rc == -ENOENT && init_args != NULL && init_args->alp_unhandled_read_action_cb != NULL) // give the application layer the chance to fullfill this request ...
 800063e:	1c83      	adds	r3, r0, #2
 8000640:	d004      	beq.n	800064c <process_op_read_file_data+0x38>
    if (rc == SUCCESS) {
 8000642:	2800      	cmp	r0, #0
 8000644:	d012      	beq.n	800066c <process_op_read_file_data+0x58>
        return alp_translate_error(rc);
 8000646:	f7ff ff6b 	bl	8000520 <alp_translate_error>
 800064a:	e01d      	b.n	8000688 <process_op_read_file_data+0x74>
    if (rc == -ENOENT && init_args != NULL && init_args->alp_unhandled_read_action_cb != NULL) // give the application layer the chance to fullfill this request ...
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <process_op_read_file_data+0x80>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d0f6      	beq.n	8000642 <process_op_read_file_data+0x2e>
 8000654:	689e      	ldr	r6, [r3, #8]
 8000656:	2e00      	cmp	r6, #0
 8000658:	d0f3      	beq.n	8000642 <process_op_read_file_data+0x2e>
        rc = init_args->alp_unhandled_read_action_cb(&command->origin_itf_status, operand, alp_data);
 800065a:	9803      	ldr	r0, [sp, #12]
 800065c:	300b      	adds	r0, #11
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <process_op_read_file_data+0x7c>)
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	9905      	ldr	r1, [sp, #20]
 8000664:	9a06      	ldr	r2, [sp, #24]
 8000666:	9b07      	ldr	r3, [sp, #28]
 8000668:	47b0      	blx	r6
 800066a:	e7ea      	b.n	8000642 <process_op_read_file_data+0x2e>
        if(!alp_append_return_file_data_action(resp_command, operand.file_offset.file_id, operand.file_offset.offset, operand.requested_data_length, alp_data))
 800066c:	a905      	add	r1, sp, #20
 800066e:	9b07      	ldr	r3, [sp, #28]
 8000670:	9a06      	ldr	r2, [sp, #24]
 8000672:	7809      	ldrb	r1, [r1, #0]
 8000674:	4806      	ldr	r0, [pc, #24]	; (8000690 <process_op_read_file_data+0x7c>)
 8000676:	9000      	str	r0, [sp, #0]
 8000678:	0028      	movs	r0, r5
 800067a:	f001 fa5f 	bl	8001b3c <alp_append_return_file_data_action>
 800067e:	2800      	cmp	r0, #0
 8000680:	d004      	beq.n	800068c <process_op_read_file_data+0x78>
    return ALP_STATUS_OK;
 8000682:	2000      	movs	r0, #0
 8000684:	e000      	b.n	8000688 <process_op_read_file_data+0x74>
        return ALP_STATUS_EXCEEDS_MAX_ALP_SIZE;
 8000686:	20e1      	movs	r0, #225	; 0xe1
}
 8000688:	b009      	add	sp, #36	; 0x24
 800068a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ALP_STATUS_FIFO_OUT_OF_BOUNDS;
 800068c:	20e0      	movs	r0, #224	; 0xe0
 800068e:	e7fb      	b.n	8000688 <process_op_read_file_data+0x74>
 8000690:	2000132c 	.word	0x2000132c
 8000694:	20001218 	.word	0x20001218

08000698 <process_op_return_file_data>:
{
 8000698:	b530      	push	{r4, r5, lr}
 800069a:	b083      	sub	sp, #12
 800069c:	000c      	movs	r4, r1
            action->file_data_operand.provided_data_length, action->file_data_operand.data))
 800069e:	0005      	movs	r5, r0
 80006a0:	3510      	adds	r5, #16
    if (!alp_append_return_file_data_action(unsollicited_response_command,
 80006a2:	68c3      	ldr	r3, [r0, #12]
 80006a4:	6882      	ldr	r2, [r0, #8]
 80006a6:	7901      	ldrb	r1, [r0, #4]
 80006a8:	9500      	str	r5, [sp, #0]
 80006aa:	0020      	movs	r0, r4
 80006ac:	f001 fa46 	bl	8001b3c <alp_append_return_file_data_action>
 80006b0:	2800      	cmp	r0, #0
 80006b2:	d004      	beq.n	80006be <process_op_return_file_data+0x26>
    unsollicited_response_command->is_unsollicited = true;
 80006b4:	2301      	movs	r3, #1
 80006b6:	71a3      	strb	r3, [r4, #6]
    return ALP_STATUS_OK;
 80006b8:	2000      	movs	r0, #0
}
 80006ba:	b003      	add	sp, #12
 80006bc:	bd30      	pop	{r4, r5, pc}
        return ALP_STATUS_FIFO_OUT_OF_BOUNDS;
 80006be:	20e0      	movs	r0, #224	; 0xe0
 80006c0:	e7fb      	b.n	80006ba <process_op_return_file_data+0x22>

080006c2 <process_op_read_file_properties>:
{
 80006c2:	b570      	push	{r4, r5, r6, lr}
 80006c4:	b086      	sub	sp, #24
 80006c6:	0004      	movs	r4, r0
 80006c8:	000e      	movs	r6, r1
    err = d7ap_fs_read_file_header(action->file_id_operand.file_id, &file_header);
 80006ca:	7900      	ldrb	r0, [r0, #4]
 80006cc:	a903      	add	r1, sp, #12
 80006ce:	f007 fa1c 	bl	8007b0a <d7ap_fs_read_file_header>
    if (err != SUCCESS) 
 80006d2:	2800      	cmp	r0, #0
 80006d4:	d003      	beq.n	80006de <process_op_read_file_properties+0x1c>
        return alp_translate_error(err);
 80006d6:	f7ff ff23 	bl	8000520 <alp_translate_error>
}
 80006da:	b006      	add	sp, #24
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
    file_header.length = __builtin_bswap32(file_header.length);
 80006de:	9b04      	ldr	r3, [sp, #16]
 80006e0:	ba1b      	rev	r3, r3
 80006e2:	9304      	str	r3, [sp, #16]
    file_header.allocated_length = __builtin_bswap32(file_header.allocated_length);
 80006e4:	9b05      	ldr	r3, [sp, #20]
 80006e6:	9301      	str	r3, [sp, #4]
 80006e8:	ba1b      	rev	r3, r3
 80006ea:	9305      	str	r3, [sp, #20]
    err = fifo_put_byte(&resp_command->alp_command_fifo, ALP_OP_RETURN_FILE_PROPERTIES);
 80006ec:	3664      	adds	r6, #100	; 0x64
 80006ee:	2121      	movs	r1, #33	; 0x21
 80006f0:	0030      	movs	r0, r6
 80006f2:	f00e f899 	bl	800e828 <fifo_put_byte>
 80006f6:	0005      	movs	r5, r0
    err += fifo_put_byte(&resp_command->alp_command_fifo, action->file_id_operand.file_id);
 80006f8:	7921      	ldrb	r1, [r4, #4]
 80006fa:	0030      	movs	r0, r6
 80006fc:	f00e f894 	bl	800e828 <fifo_put_byte>
 8000700:	182d      	adds	r5, r5, r0
    err += fifo_put(&resp_command->alp_command_fifo, (uint8_t*)&file_header, sizeof(d7ap_fs_file_header_t));
 8000702:	220c      	movs	r2, #12
 8000704:	a903      	add	r1, sp, #12
 8000706:	0030      	movs	r0, r6
 8000708:	f00e f836 	bl	800e778 <fifo_put>
 800070c:	182d      	adds	r5, r5, r0
    return err == SUCCESS ? ALP_STATUS_OK : ALP_STATUS_FIFO_OUT_OF_BOUNDS;
 800070e:	2d00      	cmp	r5, #0
 8000710:	d101      	bne.n	8000716 <process_op_read_file_properties+0x54>
 8000712:	2000      	movs	r0, #0
 8000714:	e7e1      	b.n	80006da <process_op_read_file_properties+0x18>
 8000716:	20e0      	movs	r0, #224	; 0xe0
 8000718:	e7df      	b.n	80006da <process_op_read_file_properties+0x18>

0800071a <process_op_write_file_data>:
static alp_status_codes_t process_op_write_file_data(alp_action_t* action, authentication_t origin_auth) {
 800071a:	b510      	push	{r4, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	000c      	movs	r4, r1
    if (action->file_data_operand.provided_data_length > ALP_PAYLOAD_MAX_SIZE)
 8000720:	68c3      	ldr	r3, [r0, #12]
 8000722:	2bff      	cmp	r3, #255	; 0xff
 8000724:	d80b      	bhi.n	800073e <process_op_write_file_data+0x24>
        action->file_data_operand.data, action->file_data_operand.provided_data_length, origin_auth);
 8000726:	0002      	movs	r2, r0
 8000728:	3210      	adds	r2, #16
    int rc = d7ap_fs_write_file(action->file_data_operand.file_offset.file_id, action->file_data_operand.file_offset.offset,
 800072a:	6881      	ldr	r1, [r0, #8]
 800072c:	7900      	ldrb	r0, [r0, #4]
 800072e:	9400      	str	r4, [sp, #0]
 8000730:	f007 fc16 	bl	8007f60 <d7ap_fs_write_file>
    return rc == SUCCESS ? ALP_STATUS_OK : alp_translate_error(rc);
 8000734:	2800      	cmp	r0, #0
 8000736:	d005      	beq.n	8000744 <process_op_write_file_data+0x2a>
 8000738:	f7ff fef2 	bl	8000520 <alp_translate_error>
 800073c:	e000      	b.n	8000740 <process_op_write_file_data+0x26>
        return ALP_STATUS_EXCEEDS_MAX_ALP_SIZE;
 800073e:	20e1      	movs	r0, #225	; 0xe1
}
 8000740:	b002      	add	sp, #8
 8000742:	bd10      	pop	{r4, pc}
    return rc == SUCCESS ? ALP_STATUS_OK : alp_translate_error(rc);
 8000744:	2000      	movs	r0, #0
 8000746:	e7fb      	b.n	8000740 <process_op_write_file_data+0x26>

08000748 <write_itf_command>:
{
 8000748:	b500      	push	{lr}
 800074a:	b085      	sub	sp, #20
 800074c:	220f      	movs	r2, #15
 800074e:	446a      	add	r2, sp
 8000750:	7010      	strb	r0, [r2, #0]
    int rc = d7ap_fs_write_file(USER_FILE_ALP_CTRL_FILE_ID, 0, (uint8_t*)&action, 1, origin_auth); // gets handled in write file callback
 8000752:	9100      	str	r1, [sp, #0]
 8000754:	2301      	movs	r3, #1
 8000756:	2100      	movs	r1, #0
 8000758:	2040      	movs	r0, #64	; 0x40
 800075a:	f007 fc01 	bl	8007f60 <d7ap_fs_write_file>
    return rc == SUCCESS ? ALP_STATUS_OK : alp_translate_error(rc);
 800075e:	2800      	cmp	r0, #0
 8000760:	d003      	beq.n	800076a <write_itf_command+0x22>
 8000762:	f7ff fedd 	bl	8000520 <alp_translate_error>
}
 8000766:	b005      	add	sp, #20
 8000768:	bd00      	pop	{pc}
    return rc == SUCCESS ? ALP_STATUS_OK : alp_translate_error(rc);
 800076a:	2000      	movs	r0, #0
 800076c:	e7fb      	b.n	8000766 <write_itf_command+0x1e>

0800076e <process_op_start_itf>:
{
 800076e:	b510      	push	{r4, lr}
    return write_itf_command(ITF_START, origin_auth);
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff ffe9 	bl	8000748 <write_itf_command>
}
 8000776:	bd10      	pop	{r4, pc}

08000778 <process_op_stop_itf>:
{
 8000778:	b510      	push	{r4, lr}
    return write_itf_command(ITF_STOP, origin_auth);
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff ffe4 	bl	8000748 <write_itf_command>
}
 8000780:	bd10      	pop	{r4, pc}

08000782 <process_op_write_file_properties>:
{
 8000782:	b510      	push	{r4, lr}
 8000784:	000a      	movs	r2, r1
    int rc = d7ap_fs_write_file_header(action->file_header_operand.file_id, &action->file_header_operand.file_header, origin_auth);
 8000786:	1d41      	adds	r1, r0, #5
 8000788:	7900      	ldrb	r0, [r0, #4]
 800078a:	f007 f9f5 	bl	8007b78 <d7ap_fs_write_file_header>
    return rc == SUCCESS ? ALP_STATUS_OK : alp_translate_error(rc);
 800078e:	2800      	cmp	r0, #0
 8000790:	d002      	beq.n	8000798 <process_op_write_file_properties+0x16>
 8000792:	f7ff fec5 	bl	8000520 <alp_translate_error>
}
 8000796:	bd10      	pop	{r4, pc}
    return rc == SUCCESS ? ALP_STATUS_OK : alp_translate_error(rc);
 8000798:	2000      	movs	r0, #0
 800079a:	e7fc      	b.n	8000796 <process_op_write_file_properties+0x14>

0800079c <process_op_status>:
{
 800079c:	b510      	push	{r4, lr}
 800079e:	0003      	movs	r3, r0
 80007a0:	000c      	movs	r4, r1
    if (!action->ctrl.b7 && !action->ctrl.b6) {
 80007a2:	7802      	ldrb	r2, [r0, #0]
 80007a4:	09d2      	lsrs	r2, r2, #7
 80007a6:	d102      	bne.n	80007ae <process_op_status+0x12>
 80007a8:	7801      	ldrb	r1, [r0, #0]
 80007aa:	0649      	lsls	r1, r1, #25
 80007ac:	d50f      	bpl.n	80007ce <process_op_status+0x32>
    } else if (!action->ctrl.b7 && action->ctrl.b6) {
 80007ae:	2a00      	cmp	r2, #0
 80007b0:	d10f      	bne.n	80007d2 <process_op_status+0x36>
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	0652      	lsls	r2, r2, #25
 80007b6:	d50e      	bpl.n	80007d6 <process_op_status+0x3a>
        memcpy(&command->origin_itf_status, &action->interface_status, sizeof(alp_interface_status_t));
 80007b8:	0020      	movs	r0, r4
 80007ba:	300b      	adds	r0, #11
 80007bc:	1d19      	adds	r1, r3, #4
 80007be:	222a      	movs	r2, #42	; 0x2a
 80007c0:	f014 fb06 	bl	8014dd0 <memcpy>
        command->origin_itf_id = command->origin_itf_status.itf_id; 
 80007c4:	7ae2      	ldrb	r2, [r4, #11]
 80007c6:	2335      	movs	r3, #53	; 0x35
 80007c8:	54e2      	strb	r2, [r4, r3]
    return ALP_STATUS_OK;
 80007ca:	2000      	movs	r0, #0
}
 80007cc:	bd10      	pop	{r4, pc}
    return ALP_STATUS_OK;
 80007ce:	2000      	movs	r0, #0
 80007d0:	e7fc      	b.n	80007cc <process_op_status+0x30>
        return ALP_STATUS_NOT_YET_IMPLEMENTED;
 80007d2:	20e2      	movs	r0, #226	; 0xe2
 80007d4:	e7fa      	b.n	80007cc <process_op_status+0x30>
 80007d6:	20e2      	movs	r0, #226	; 0xe2
 80007d8:	e7f8      	b.n	80007cc <process_op_status+0x30>

080007da <process_op_forward>:
{
 80007da:	b570      	push	{r4, r5, r6, lr}
 80007dc:	0004      	movs	r4, r0
 80007de:	000d      	movs	r5, r1
 80007e0:	0010      	movs	r0, r2
    memcpy(session_config, &action->interface_config, sizeof(alp_interface_config_t));
 80007e2:	1d21      	adds	r1, r4, #4
 80007e4:	222c      	movs	r2, #44	; 0x2c
 80007e6:	f014 faf3 	bl	8014dd0 <memcpy>
    *itf_id = action->interface_config.itf_id;
 80007ea:	7923      	ldrb	r3, [r4, #4]
 80007ec:	702b      	strb	r3, [r5, #0]
}
 80007ee:	2001      	movs	r0, #1
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080007f4 <process_op_indirect_forward>:
{
 80007f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f6:	b087      	sub	sp, #28
 80007f8:	0005      	movs	r5, r0
 80007fa:	000f      	movs	r7, r1
 80007fc:	9203      	str	r2, [sp, #12]
    if ((previous_interface_file_id != action->indirect_interface_operand.interface_file_id)
 80007fe:	7900      	ldrb	r0, [r0, #4]
 8000800:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <process_op_indirect_forward+0xd4>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4298      	cmp	r0, r3
 8000806:	d016      	beq.n	8000836 <process_op_indirect_forward+0x42>
        interface_file_changed = false;
 8000808:	4a30      	ldr	r2, [pc, #192]	; (80008cc <process_op_indirect_forward+0xd8>)
 800080a:	2100      	movs	r1, #0
 800080c:	7011      	strb	r1, [r2, #0]
        if (previous_interface_file_id != action->indirect_interface_operand.interface_file_id) {
 800080e:	4298      	cmp	r0, r3
 8000810:	d119      	bne.n	8000846 <process_op_indirect_forward+0x52>
            *itf_id = session_config_saved.itf_id;
 8000812:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <process_op_indirect_forward+0xdc>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	703b      	strb	r3, [r7, #0]
        re_read = true;
 8000818:	2601      	movs	r6, #1
    for (uint8_t i = 0; i < MODULE_ALP_INTERFACE_CNT; i++) {
 800081a:	2300      	movs	r3, #0
 800081c:	2b05      	cmp	r3, #5
 800081e:	d84e      	bhi.n	80008be <process_op_indirect_forward+0xca>
        if (*itf_id == interfaces[i]->itf_id) {
 8000820:	7839      	ldrb	r1, [r7, #0]
 8000822:	9302      	str	r3, [sp, #8]
 8000824:	009c      	lsls	r4, r3, #2
 8000826:	4a2b      	ldr	r2, [pc, #172]	; (80008d4 <process_op_indirect_forward+0xe0>)
 8000828:	58a2      	ldr	r2, [r4, r2]
 800082a:	7812      	ldrb	r2, [r2, #0]
 800082c:	4291      	cmp	r1, r2
 800082e:	d026      	beq.n	800087e <process_op_indirect_forward+0x8a>
    for (uint8_t i = 0; i < MODULE_ALP_INTERFACE_CNT; i++) {
 8000830:	3301      	adds	r3, #1
 8000832:	b2db      	uxtb	r3, r3
 8000834:	e7f2      	b.n	800081c <process_op_indirect_forward+0x28>
        || interface_file_changed) {
 8000836:	4a25      	ldr	r2, [pc, #148]	; (80008cc <process_op_indirect_forward+0xd8>)
 8000838:	7816      	ldrb	r6, [r2, #0]
 800083a:	2e00      	cmp	r6, #0
 800083c:	d1e4      	bne.n	8000808 <process_op_indirect_forward+0x14>
        *itf_id = session_config_saved.itf_id;
 800083e:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <process_op_indirect_forward+0xdc>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	700b      	strb	r3, [r1, #0]
 8000844:	e7e9      	b.n	800081a <process_op_indirect_forward+0x26>
            if (fs_is_file_defined(action->indirect_interface_operand.interface_file_id)) {
 8000846:	f00e fb97 	bl	800ef78 <fs_is_file_defined>
 800084a:	1e06      	subs	r6, r0, #0
 800084c:	d03a      	beq.n	80008c4 <process_op_indirect_forward+0xd0>
                d7ap_fs_unregister_file_modified_callback(previous_interface_file_id);
 800084e:	4c1e      	ldr	r4, [pc, #120]	; (80008c8 <process_op_indirect_forward+0xd4>)
 8000850:	7820      	ldrb	r0, [r4, #0]
 8000852:	f007 fc5d 	bl	8008110 <d7ap_fs_unregister_file_modified_callback>
                d7ap_fs_register_file_modified_callback(action->indirect_interface_operand.interface_file_id, &interface_file_changed_callback);
 8000856:	7928      	ldrb	r0, [r5, #4]
 8000858:	491f      	ldr	r1, [pc, #124]	; (80008d8 <process_op_indirect_forward+0xe4>)
 800085a:	f007 fc69 	bl	8008130 <d7ap_fs_register_file_modified_callback>
                uint32_t length = 1;
 800085e:	2301      	movs	r3, #1
 8000860:	9305      	str	r3, [sp, #20]
                d7ap_fs_read_file(action->indirect_interface_operand.interface_file_id, 0, itf_id, &length, ROOT_AUTH);
 8000862:	7928      	ldrb	r0, [r5, #4]
 8000864:	2300      	movs	r3, #0
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	ab05      	add	r3, sp, #20
 800086a:	003a      	movs	r2, r7
 800086c:	2100      	movs	r1, #0
 800086e:	f007 fa17 	bl	8007ca0 <d7ap_fs_read_file>
                previous_interface_file_id = action->indirect_interface_operand.interface_file_id;
 8000872:	792b      	ldrb	r3, [r5, #4]
 8000874:	7023      	strb	r3, [r4, #0]
                session_config_saved.itf_id = *itf_id;
 8000876:	783a      	ldrb	r2, [r7, #0]
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <process_op_indirect_forward+0xdc>)
 800087a:	701a      	strb	r2, [r3, #0]
 800087c:	e7cd      	b.n	800081a <process_op_indirect_forward+0x26>
            session_config->itf_id = *itf_id;
 800087e:	9b03      	ldr	r3, [sp, #12]
 8000880:	7019      	strb	r1, [r3, #0]
            if (re_read) {
 8000882:	2e00      	cmp	r6, #0
 8000884:	d10c      	bne.n	80008a0 <process_op_indirect_forward+0xac>
                memcpy(session_config->itf_config, session_config_saved.itf_config, interfaces[i]->itf_cfg_len);
 8000886:	9803      	ldr	r0, [sp, #12]
 8000888:	3001      	adds	r0, #1
 800088a:	9b02      	ldr	r3, [sp, #8]
 800088c:	009e      	lsls	r6, r3, #2
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <process_op_indirect_forward+0xe0>)
 8000890:	58f3      	ldr	r3, [r6, r3]
 8000892:	785a      	ldrb	r2, [r3, #1]
 8000894:	490e      	ldr	r1, [pc, #56]	; (80008d0 <process_op_indirect_forward+0xdc>)
 8000896:	3101      	adds	r1, #1
 8000898:	f014 fa9a 	bl	8014dd0 <memcpy>
            return ALP_STATUS_PARTIALLY_COMPLETED;
 800089c:	2001      	movs	r0, #1
 800089e:	e00f      	b.n	80008c0 <process_op_indirect_forward+0xcc>
                session_config_saved.itf_id = *itf_id;
 80008a0:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <process_op_indirect_forward+0xdc>)
 80008a2:	7011      	strb	r1, [r2, #0]
                uint32_t itf_cfg_len = interfaces[i]->itf_cfg_len;
 80008a4:	490b      	ldr	r1, [pc, #44]	; (80008d4 <process_op_indirect_forward+0xe0>)
 80008a6:	5863      	ldr	r3, [r4, r1]
 80008a8:	785b      	ldrb	r3, [r3, #1]
 80008aa:	9305      	str	r3, [sp, #20]
                d7ap_fs_read_file(action->indirect_interface_operand.interface_file_id, 1,
 80008ac:	3201      	adds	r2, #1
 80008ae:	7928      	ldrb	r0, [r5, #4]
 80008b0:	2300      	movs	r3, #0
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	ab05      	add	r3, sp, #20
 80008b6:	2101      	movs	r1, #1
 80008b8:	f007 f9f2 	bl	8007ca0 <d7ap_fs_read_file>
            if (!ctrl.b7)
 80008bc:	e7e3      	b.n	8000886 <process_op_indirect_forward+0x92>
    return ALP_STATUS_WRONG_OPERAND_FORMAT;
 80008be:	20f4      	movs	r0, #244	; 0xf4
}
 80008c0:	b007      	add	sp, #28
 80008c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return ALP_STATUS_WRONG_OPERAND_FORMAT;
 80008c4:	20f4      	movs	r0, #244	; 0xf4
 80008c6:	e7fb      	b.n	80008c0 <process_op_indirect_forward+0xcc>
 80008c8:	200014ce 	.word	0x200014ce
 80008cc:	20000500 	.word	0x20000500
 80008d0:	200014d0 	.word	0x200014d0
 80008d4:	20001780 	.word	0x20001780
 80008d8:	08000591 	.word	0x08000591

080008dc <process_op_create_file>:
static alp_status_codes_t process_op_create_file(alp_action_t* action) {
 80008dc:	b510      	push	{r4, lr}
    int rc = d7ap_fs_init_file(action->file_header_operand.file_id, &action->file_header_operand.file_header, NULL);
 80008de:	1d41      	adds	r1, r0, #5
 80008e0:	7900      	ldrb	r0, [r0, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	f007 f902 	bl	8007aec <d7ap_fs_init_file>
    return rc == SUCCESS ? ALP_STATUS_OK : alp_translate_error(rc);
 80008e8:	2800      	cmp	r0, #0
 80008ea:	d002      	beq.n	80008f2 <process_op_create_file+0x16>
 80008ec:	f7ff fe18 	bl	8000520 <alp_translate_error>
}
 80008f0:	bd10      	pop	{r4, pc}
    return rc == SUCCESS ? ALP_STATUS_OK : alp_translate_error(rc);
 80008f2:	2000      	movs	r0, #0
 80008f4:	e7fc      	b.n	80008f0 <process_op_create_file+0x14>
	...

080008f8 <init_auth_key_files>:
{
 80008f8:	b500      	push	{lr}
 80008fa:	b085      	sub	sp, #20
    d7ap_fs_file_header_t file_header = {
 80008fc:	a901      	add	r1, sp, #4
 80008fe:	2300      	movs	r3, #0
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	3303      	adds	r3, #3
 8000904:	704b      	strb	r3, [r1, #1]
 8000906:	3325      	adds	r3, #37	; 0x25
 8000908:	604b      	str	r3, [r1, #4]
 800090a:	608b      	str	r3, [r1, #8]
    int rc = d7ap_fs_init_file(ALP_FILE_ID_ROOT_AUTH_KEY, &file_header, NULL);
 800090c:	2200      	movs	r2, #0
 800090e:	2018      	movs	r0, #24
 8000910:	f007 f8ec 	bl	8007aec <d7ap_fs_init_file>
    if(rc != -EEXIST && rc != SUCCESS) {
 8000914:	0003      	movs	r3, r0
 8000916:	3311      	adds	r3, #17
 8000918:	d001      	beq.n	800091e <init_auth_key_files+0x26>
 800091a:	2800      	cmp	r0, #0
 800091c:	d10b      	bne.n	8000936 <init_auth_key_files+0x3e>
    rc = d7ap_fs_init_file(ALP_FILE_ID_USER_AUTH_KEY, &file_header, NULL);
 800091e:	2200      	movs	r2, #0
 8000920:	a901      	add	r1, sp, #4
 8000922:	2019      	movs	r0, #25
 8000924:	f007 f8e2 	bl	8007aec <d7ap_fs_init_file>
    if(rc != -EEXIST && rc != SUCCESS) {
 8000928:	0003      	movs	r3, r0
 800092a:	3311      	adds	r3, #17
 800092c:	d001      	beq.n	8000932 <init_auth_key_files+0x3a>
 800092e:	2800      	cmp	r0, #0
 8000930:	d106      	bne.n	8000940 <init_auth_key_files+0x48>
}
 8000932:	b005      	add	sp, #20
 8000934:	bd00      	pop	{pc}
        log_print_error_string("Error initing ALP root auth key file: %d", rc);
 8000936:	0001      	movs	r1, r0
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <init_auth_key_files+0x54>)
 800093a:	f00e fb51 	bl	800efe0 <log_print_error_string>
 800093e:	e7ee      	b.n	800091e <init_auth_key_files+0x26>
        log_print_error_string("Error initing ALP user auth key file: %d", rc);
 8000940:	0001      	movs	r1, r0
 8000942:	4803      	ldr	r0, [pc, #12]	; (8000950 <init_auth_key_files+0x58>)
 8000944:	f00e fb4c 	bl	800efe0 <log_print_error_string>
}
 8000948:	e7f3      	b.n	8000932 <init_auth_key_files+0x3a>
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	08016a08 	.word	0x08016a08
 8000950:	08016a34 	.word	0x08016a34

08000954 <transmit_response>:

static error_t transmit_response(
    alp_command_t* resp, alp_itf_id_t transmit_itf, alp_interface_status_t* origin_itf_status)
{
 8000954:	b530      	push	{r4, r5, lr}
 8000956:	b083      	sub	sp, #12
 8000958:	0004      	movs	r4, r0
 800095a:	000d      	movs	r5, r1
 800095c:	0011      	movs	r1, r2
    DPRINT("async response to ori itf %i completed %i", transmit_itf, resp->is_response_completed);
    // when the command originates from the app code call callbacks directly, since this is not a 'real' interface
    if (transmit_itf == ALP_ITF_ID_HOST) {
 800095e:	2d00      	cmp	r5, #0
 8000960:	d019      	beq.n	8000996 <transmit_response+0x42>
        if(init_args && init_args->alp_command_result_cb)
            init_args->alp_command_result_cb(resp, origin_itf_status);
        return SUCCESS;
    }

    if (origin_itf_status) {
 8000962:	2a00      	cmp	r2, #0
 8000964:	d003      	beq.n	800096e <transmit_response+0x1a>
        if (!alp_append_interface_status(resp, origin_itf_status))
 8000966:	f001 f974 	bl	8001c52 <alp_append_interface_status>
 800096a:	2800      	cmp	r0, #0
 800096c:	d024      	beq.n	80009b8 <transmit_response+0x64>
            return ALP_STATUS_FIFO_OUT_OF_BOUNDS;
    }

    alp_interface_t* interface = find_interface(transmit_itf);
 800096e:	0028      	movs	r0, r5
 8000970:	f7ff fe28 	bl	80005c4 <find_interface>
 8000974:	1e05      	subs	r5, r0, #0
    if (interface == NULL) {
 8000976:	d018      	beq.n	80009aa <transmit_response+0x56>
        DPRINT("interface %i not found", transmit_itf);
        assert(false); // Leaving this assert as it is technically not possible to answer a request without a registered
                       // interface
    }

    uint8_t alp_response_length = (uint8_t)fifo_get_size(&resp->alp_command_fifo);
 8000978:	0020      	movs	r0, r4
 800097a:	3064      	adds	r0, #100	; 0x64
 800097c:	f00d ff5f 	bl	800e83e <fifo_get_size>
 8000980:	b2c1      	uxtb	r1, r0
    uint8_t expected_response_length = 0; // TODO alp_get_expected_response_length(&resp->alp_command_fifo);
    DPRINT("interface found, sending len %i, expect %i answer", alp_response_length, expected_response_length);
    return interface->send_command(
 8000982:	686d      	ldr	r5, [r5, #4]
        resp->alp_command, alp_response_length, expected_response_length, &resp->trans_id, NULL);
 8000984:	0020      	movs	r0, r4
 8000986:	3074      	adds	r0, #116	; 0x74
    return interface->send_command(
 8000988:	0023      	movs	r3, r4
 800098a:	3308      	adds	r3, #8
 800098c:	2200      	movs	r2, #0
 800098e:	9200      	str	r2, [sp, #0]
 8000990:	47a8      	blx	r5
}
 8000992:	b003      	add	sp, #12
 8000994:	bd30      	pop	{r4, r5, pc}
        if(init_args && init_args->alp_command_result_cb)
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <transmit_response+0x68>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d003      	beq.n	80009a6 <transmit_response+0x52>
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d000      	beq.n	80009a6 <transmit_response+0x52>
            init_args->alp_command_result_cb(resp, origin_itf_status);
 80009a4:	4798      	blx	r3
        return SUCCESS;
 80009a6:	2000      	movs	r0, #0
 80009a8:	e7f3      	b.n	8000992 <transmit_response+0x3e>
        assert(false); // Leaving this assert as it is technically not possible to answer a request without a registered
 80009aa:	21b7      	movs	r1, #183	; 0xb7
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <transmit_response+0x6c>)
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <transmit_response+0x70>)
 80009b0:	0089      	lsls	r1, r1, #2
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <transmit_response+0x74>)
 80009b4:	f007 fe24 	bl	8008600 <__assert_func>
            return ALP_STATUS_FIFO_OUT_OF_BOUNDS;
 80009b8:	20e0      	movs	r0, #224	; 0xe0
 80009ba:	e7ea      	b.n	8000992 <transmit_response+0x3e>
 80009bc:	20001218 	.word	0x20001218
 80009c0:	080169c8 	.word	0x080169c8
 80009c4:	08017144 	.word	0x08017144
 80009c8:	08016a60 	.word	0x08016a60

080009cc <alp_layer_free_commands>:
{
 80009cc:	b510      	push	{r4, lr}
  for(uint8_t i = 0; i < MODULE_ALP_MAX_ACTIVE_COMMAND_COUNT; i++) {
 80009ce:	2400      	movs	r4, #0
 80009d0:	e00a      	b.n	80009e8 <alp_layer_free_commands+0x1c>
    free_command(&commands[i]);
 80009d2:	0062      	lsls	r2, r4, #1
 80009d4:	1912      	adds	r2, r2, r4
 80009d6:	0153      	lsls	r3, r2, #5
 80009d8:	1a9b      	subs	r3, r3, r2
 80009da:	0098      	lsls	r0, r3, #2
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <alp_layer_free_commands+0x24>)
 80009de:	18c0      	adds	r0, r0, r3
 80009e0:	f7ff fe06 	bl	80005f0 <free_command>
  for(uint8_t i = 0; i < MODULE_ALP_MAX_ACTIVE_COMMAND_COUNT; i++) {
 80009e4:	3401      	adds	r4, #1
 80009e6:	b2e4      	uxtb	r4, r4
 80009e8:	2c07      	cmp	r4, #7
 80009ea:	d9f2      	bls.n	80009d2 <alp_layer_free_commands+0x6>
}
 80009ec:	bd10      	pop	{r4, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	20000678 	.word	0x20000678

080009f4 <alp_layer_command_alloc>:
{
 80009f4:	b570      	push	{r4, r5, r6, lr}
 80009f6:	000a      	movs	r2, r1
    for (uint8_t i = 0; i < MODULE_ALP_MAX_ACTIVE_COMMAND_COUNT; i++) {
 80009f8:	2300      	movs	r3, #0
 80009fa:	e01c      	b.n	8000a36 <alp_layer_command_alloc+0x42>
                next_tag_id++;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <alp_layer_command_alloc+0x80>)
 80009fe:	7819      	ldrb	r1, [r3, #0]
 8000a00:	3101      	adds	r1, #1
 8000a02:	b2c9      	uxtb	r1, r1
 8000a04:	7019      	strb	r1, [r3, #0]
                if(!alp_append_tag_request_action(&commands[i], next_tag_id, always_respond))
 8000a06:	006b      	lsls	r3, r5, #1
 8000a08:	195b      	adds	r3, r3, r5
 8000a0a:	0158      	lsls	r0, r3, #5
 8000a0c:	1ac0      	subs	r0, r0, r3
 8000a0e:	0080      	lsls	r0, r0, #2
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <alp_layer_command_alloc+0x84>)
 8000a12:	18c0      	adds	r0, r0, r3
 8000a14:	f001 f8f0 	bl	8001bf8 <alp_append_tag_request_action>
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	d028      	beq.n	8000a6e <alp_layer_command_alloc+0x7a>
                commands[i].tag_id = next_tag_id;
 8000a1c:	006a      	lsls	r2, r5, #1
 8000a1e:	1952      	adds	r2, r2, r5
 8000a20:	0153      	lsls	r3, r2, #5
 8000a22:	1a9b      	subs	r3, r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <alp_layer_command_alloc+0x84>)
 8000a28:	18d3      	adds	r3, r2, r3
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <alp_layer_command_alloc+0x80>)
 8000a2c:	7812      	ldrb	r2, [r2, #0]
 8000a2e:	729a      	strb	r2, [r3, #10]
 8000a30:	e013      	b.n	8000a5a <alp_layer_command_alloc+0x66>
    for (uint8_t i = 0; i < MODULE_ALP_MAX_ACTIVE_COMMAND_COUNT; i++) {
 8000a32:	3301      	adds	r3, #1
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b07      	cmp	r3, #7
 8000a38:	d817      	bhi.n	8000a6a <alp_layer_command_alloc+0x76>
        if (commands[i].is_active == false) {
 8000a3a:	001d      	movs	r5, r3
 8000a3c:	0059      	lsls	r1, r3, #1
 8000a3e:	18c9      	adds	r1, r1, r3
 8000a40:	014c      	lsls	r4, r1, #5
 8000a42:	1a64      	subs	r4, r4, r1
 8000a44:	00a4      	lsls	r4, r4, #2
 8000a46:	490c      	ldr	r1, [pc, #48]	; (8000a78 <alp_layer_command_alloc+0x84>)
 8000a48:	5c61      	ldrb	r1, [r4, r1]
 8000a4a:	2900      	cmp	r1, #0
 8000a4c:	d1f1      	bne.n	8000a32 <alp_layer_command_alloc+0x3e>
            commands[i].is_active = true;
 8000a4e:	0023      	movs	r3, r4
 8000a50:	4909      	ldr	r1, [pc, #36]	; (8000a78 <alp_layer_command_alloc+0x84>)
 8000a52:	2401      	movs	r4, #1
 8000a54:	545c      	strb	r4, [r3, r1]
            if (with_tag_request) {
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d1d0      	bne.n	80009fc <alp_layer_command_alloc+0x8>
            return &(commands[i]);
 8000a5a:	0068      	lsls	r0, r5, #1
 8000a5c:	1945      	adds	r5, r0, r5
 8000a5e:	0168      	lsls	r0, r5, #5
 8000a60:	1b40      	subs	r0, r0, r5
 8000a62:	0080      	lsls	r0, r0, #2
 8000a64:	4d04      	ldr	r5, [pc, #16]	; (8000a78 <alp_layer_command_alloc+0x84>)
 8000a66:	1940      	adds	r0, r0, r5
 8000a68:	e000      	b.n	8000a6c <alp_layer_command_alloc+0x78>
    return NULL;
 8000a6a:	2000      	movs	r0, #0
}
 8000a6c:	bd70      	pop	{r4, r5, r6, pc}
                    return NULL;
 8000a6e:	2000      	movs	r0, #0
 8000a70:	e7fc      	b.n	8000a6c <alp_layer_command_alloc+0x78>
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	200014cd 	.word	0x200014cd
 8000a78:	20000678 	.word	0x20000678

08000a7c <alp_layer_register_interface>:
void alp_layer_register_interface(alp_interface_t* interface) {
 8000a7c:	b510      	push	{r4, lr}
  alp_register_interface(interface);
 8000a7e:	f000 fec5 	bl	800180c <alp_register_interface>
}
 8000a82:	bd10      	pop	{r4, pc}

08000a84 <process_arithm_predicate>:
bool process_arithm_predicate(uint8_t* value1, uint8_t* value2, uint32_t len, alp_query_arithmetic_comparison_type_t comp_type) {
 8000a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a86:	0006      	movs	r6, r0
 8000a88:	000f      	movs	r7, r1
 8000a8a:	0015      	movs	r5, r2
 8000a8c:	001c      	movs	r4, r3
  bool is_equal = memcmp(value1, value2, len) == 0;
 8000a8e:	f014 f977 	bl	8014d80 <memcmp>
  if(is_equal) {
 8000a92:	2800      	cmp	r0, #0
 8000a94:	d109      	bne.n	8000aaa <process_arithm_predicate+0x26>
    if(comp_type == ARITH_COMP_TYPE_EQUALITY || comp_type == ARITH_COMP_TYPE_GREATER_THAN_OR_EQUAL_TO || comp_type == ARITH_COMP_TYPE_LESS_THAN_OR_EQUAL_TO)
 8000a96:	2c01      	cmp	r4, #1
 8000a98:	d025      	beq.n	8000ae6 <process_arithm_predicate+0x62>
 8000a9a:	2c05      	cmp	r4, #5
 8000a9c:	d025      	beq.n	8000aea <process_arithm_predicate+0x66>
 8000a9e:	2c03      	cmp	r4, #3
 8000aa0:	d001      	beq.n	8000aa6 <process_arithm_predicate+0x22>
      return false;
 8000aa2:	2000      	movs	r0, #0
}
 8000aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return true;
 8000aa6:	3001      	adds	r0, #1
 8000aa8:	e7fc      	b.n	8000aa4 <process_arithm_predicate+0x20>
  } else if(comp_type == ARITH_COMP_TYPE_INEQUALITY) {
 8000aaa:	2c00      	cmp	r4, #0
 8000aac:	d01f      	beq.n	8000aee <process_arithm_predicate+0x6a>
  for(uint32_t i = 0; i < len; i++) {
 8000aae:	2300      	movs	r3, #0
 8000ab0:	42ab      	cmp	r3, r5
 8000ab2:	d212      	bcs.n	8000ada <process_arithm_predicate+0x56>
    if(value1[i] == value2[i])
 8000ab4:	5cf1      	ldrb	r1, [r6, r3]
 8000ab6:	5cfa      	ldrb	r2, [r7, r3]
 8000ab8:	4291      	cmp	r1, r2
 8000aba:	d00c      	beq.n	8000ad6 <process_arithm_predicate+0x52>
    if(value1[i] > value2[i] && (comp_type == ARITH_COMP_TYPE_GREATER_THAN || comp_type == ARITH_COMP_TYPE_GREATER_THAN_OR_EQUAL_TO))
 8000abc:	d903      	bls.n	8000ac6 <process_arithm_predicate+0x42>
 8000abe:	1f23      	subs	r3, r4, #4
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d915      	bls.n	8000af2 <process_arithm_predicate+0x6e>
    else if(value1[i] < value2[i] && (comp_type == ARITH_COMP_TYPE_LESS_THAN || comp_type == ARITH_COMP_TYPE_LESS_THAN_OR_EQUAL_TO))
 8000ac6:	4291      	cmp	r1, r2
 8000ac8:	d215      	bcs.n	8000af6 <process_arithm_predicate+0x72>
 8000aca:	3c02      	subs	r4, #2
 8000acc:	b2e4      	uxtb	r4, r4
 8000ace:	2c01      	cmp	r4, #1
 8000ad0:	d913      	bls.n	8000afa <process_arithm_predicate+0x76>
      return false;
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	e7e6      	b.n	8000aa4 <process_arithm_predicate+0x20>
  for(uint32_t i = 0; i < len; i++) {
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	e7ea      	b.n	8000ab0 <process_arithm_predicate+0x2c>
  log_print_error_string("process_arithm_predicate type %i got to unreachable code", comp_type);
 8000ada:	0021      	movs	r1, r4
 8000adc:	4808      	ldr	r0, [pc, #32]	; (8000b00 <process_arithm_predicate+0x7c>)
 8000ade:	f00e fa7f 	bl	800efe0 <log_print_error_string>
  return false; //not implemented type should always fail
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	e7de      	b.n	8000aa4 <process_arithm_predicate+0x20>
      return true;
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	e7dc      	b.n	8000aa4 <process_arithm_predicate+0x20>
 8000aea:	2001      	movs	r0, #1
 8000aec:	e7da      	b.n	8000aa4 <process_arithm_predicate+0x20>
    return true;
 8000aee:	2001      	movs	r0, #1
 8000af0:	e7d8      	b.n	8000aa4 <process_arithm_predicate+0x20>
      return true;
 8000af2:	2001      	movs	r0, #1
 8000af4:	e7d6      	b.n	8000aa4 <process_arithm_predicate+0x20>
      return false;
 8000af6:	2000      	movs	r0, #0
 8000af8:	e7d4      	b.n	8000aa4 <process_arithm_predicate+0x20>
      return true;
 8000afa:	2001      	movs	r0, #1
 8000afc:	e7d2      	b.n	8000aa4 <process_arithm_predicate+0x20>
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	08016a98 	.word	0x08016a98

08000b04 <process_op_break_query>:
{
 8000b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b06:	b08d      	sub	sp, #52	; 0x34
 8000b08:	0004      	movs	r4, r0
 8000b0a:	9103      	str	r1, [sp, #12]
    if(action->query_operand.code.type != QUERY_CODE_TYPE_ARITHM_COMP_WITH_VALUE_IN_QUERY)
 8000b0c:	7903      	ldrb	r3, [r0, #4]
 8000b0e:	221f      	movs	r2, #31
 8000b10:	0018      	movs	r0, r3
 8000b12:	4390      	bics	r0, r2
 8000b14:	0002      	movs	r2, r0
 8000b16:	2840      	cmp	r0, #64	; 0x40
 8000b18:	d14c      	bne.n	8000bb4 <process_op_break_query+0xb0>
    if(action->query_operand.code.mask)
 8000b1a:	3a30      	subs	r2, #48	; 0x30
 8000b1c:	0016      	movs	r6, r2
 8000b1e:	401e      	ands	r6, r3
 8000b20:	421a      	tst	r2, r3
 8000b22:	d14b      	bne.n	8000bbc <process_op_break_query+0xb8>
    if((action->query_operand.code.param & 0x08) == 0)
 8000b24:	071f      	lsls	r7, r3, #28
 8000b26:	0f3f      	lsrs	r7, r7, #28
    alp_query_arithmetic_comparison_type_t comp_type = action->query_operand.code.param & 0x07;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	401f      	ands	r7, r3
    fifo_init_filled(&temp_fifo, action->query_operand.compare_body, ALP_QUERY_COMPARE_BODY_MAX_SIZE, ALP_QUERY_COMPARE_BODY_MAX_SIZE);
 8000b2c:	335d      	adds	r3, #93	; 0x5d
 8000b2e:	3254      	adds	r2, #84	; 0x54
 8000b30:	0020      	movs	r0, r4
 8000b32:	3009      	adds	r0, #9
 8000b34:	0001      	movs	r1, r0
 8000b36:	a808      	add	r0, sp, #32
 8000b38:	f00d fe06 	bl	800e748 <fifo_init_filled>
    memset(alp_data, 0, action->query_operand.compare_operand_length);
 8000b3c:	6862      	ldr	r2, [r4, #4]
 8000b3e:	0a13      	lsrs	r3, r2, #8
 8000b40:	7a22      	ldrb	r2, [r4, #8]
 8000b42:	0612      	lsls	r2, r2, #24
 8000b44:	431a      	orrs	r2, r3
 8000b46:	4d20      	ldr	r5, [pc, #128]	; (8000bc8 <process_op_break_query+0xc4>)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	0028      	movs	r0, r5
 8000b4c:	f014 f994 	bl	8014e78 <memset>
    if(fifo_pop(&temp_fifo, alp_data, action->query_operand.compare_operand_length) != SUCCESS)
 8000b50:	6862      	ldr	r2, [r4, #4]
 8000b52:	0a12      	lsrs	r2, r2, #8
 8000b54:	b292      	uxth	r2, r2
 8000b56:	0029      	movs	r1, r5
 8000b58:	a808      	add	r0, sp, #32
 8000b5a:	f00d ff0e 	bl	800e97a <fifo_pop>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	d12e      	bne.n	8000bc0 <process_op_break_query+0xbc>
    if(!alp_parse_file_offset_operand(&temp_fifo, &offset_a))
 8000b62:	a906      	add	r1, sp, #24
 8000b64:	a808      	add	r0, sp, #32
 8000b66:	f000 ff13 	bl	8001990 <alp_parse_file_offset_operand>
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	d02a      	beq.n	8000bc4 <process_op_break_query+0xc0>
    uint32_t length = action->query_operand.compare_operand_length;
 8000b6e:	6862      	ldr	r2, [r4, #4]
 8000b70:	0a12      	lsrs	r2, r2, #8
 8000b72:	7a23      	ldrb	r3, [r4, #8]
 8000b74:	061b      	lsls	r3, r3, #24
 8000b76:	4313      	orrs	r3, r2
 8000b78:	9305      	str	r3, [sp, #20]
    int rc = d7ap_fs_read_file(offset_a.file_id, offset_a.offset, alp_data2, &length, origin_auth);
 8000b7a:	ab06      	add	r3, sp, #24
 8000b7c:	9907      	ldr	r1, [sp, #28]
 8000b7e:	7818      	ldrb	r0, [r3, #0]
 8000b80:	9b03      	ldr	r3, [sp, #12]
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	ab05      	add	r3, sp, #20
 8000b86:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <process_op_break_query+0xc8>)
 8000b88:	f007 f88a 	bl	8007ca0 <d7ap_fs_read_file>
    if(rc != SUCCESS)
 8000b8c:	2800      	cmp	r0, #0
 8000b8e:	d003      	beq.n	8000b98 <process_op_break_query+0x94>
        return alp_translate_error(rc);
 8000b90:	f7ff fcc6 	bl	8000520 <alp_translate_error>
 8000b94:	0006      	movs	r6, r0
 8000b96:	e00e      	b.n	8000bb6 <process_op_break_query+0xb2>
    if(!process_arithm_predicate(alp_data2, alp_data, action->query_operand.compare_operand_length, comp_type)) {
 8000b98:	6863      	ldr	r3, [r4, #4]
 8000b9a:	0a1b      	lsrs	r3, r3, #8
 8000b9c:	7a22      	ldrb	r2, [r4, #8]
 8000b9e:	0612      	lsls	r2, r2, #24
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	003b      	movs	r3, r7
 8000ba4:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <process_op_break_query+0xc4>)
 8000ba6:	4809      	ldr	r0, [pc, #36]	; (8000bcc <process_op_break_query+0xc8>)
 8000ba8:	f7ff ff6c 	bl	8000a84 <process_arithm_predicate>
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d102      	bne.n	8000bb6 <process_op_break_query+0xb2>
        return ALP_STATUS_BREAK_QUERY_FAILED;
 8000bb0:	26e3      	movs	r6, #227	; 0xe3
 8000bb2:	e000      	b.n	8000bb6 <process_op_break_query+0xb2>
        return ALP_STATUS_NOT_YET_IMPLEMENTED;
 8000bb4:	26e2      	movs	r6, #226	; 0xe2
}
 8000bb6:	0030      	movs	r0, r6
 8000bb8:	b00d      	add	sp, #52	; 0x34
 8000bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ALP_STATUS_NOT_YET_IMPLEMENTED;
 8000bbc:	26e2      	movs	r6, #226	; 0xe2
 8000bbe:	e7fa      	b.n	8000bb6 <process_op_break_query+0xb2>
        return ALP_STATUS_FIFO_OUT_OF_BOUNDS;
 8000bc0:	26e0      	movs	r6, #224	; 0xe0
 8000bc2:	e7f8      	b.n	8000bb6 <process_op_break_query+0xb2>
        return ALP_STATUS_FIFO_OUT_OF_BOUNDS;
 8000bc4:	26e0      	movs	r6, #224	; 0xe0
 8000bc6:	e7f6      	b.n	8000bb6 <process_op_break_query+0xb2>
 8000bc8:	2000132c 	.word	0x2000132c
 8000bcc:	2000142c 	.word	0x2000142c

08000bd0 <alp_layer_process>:
    free_command(command);
    return;
}

bool alp_layer_process(alp_command_t* command)
{
 8000bd0:	b510      	push	{r4, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	9001      	str	r0, [sp, #4]
    DPRINT_DATA(command->alp_command, fifo_get_size(&command->alp_command_fifo));
    int expected_response_length = alp_get_expected_response_length(command);
 8000bd6:	f001 f861 	bl	8001c9c <alp_get_expected_response_length>
 8000bda:	1e04      	subs	r4, r0, #0
    if(expected_response_length < 0) {
 8000bdc:	db19      	blt.n	8000c12 <alp_layer_process+0x42>
        log_print_error_string("alp_layer_process, alp_get_expected_response_length failed with error: %i", expected_response_length);
        free_command(command);
        return false;
    }
    DPRINT("This ALP command will initiate a response containing <%d> bytes\n", expected_response_length);
    if (expected_response_length == 0) {
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d102      	bne.n	8000be8 <alp_layer_process+0x18>
        command->respond_when_completed = false;
 8000be2:	2300      	movs	r3, #0
 8000be4:	9a01      	ldr	r2, [sp, #4]
 8000be6:	7093      	strb	r3, [r2, #2]
    }
    
    // add to fifo for later processing
    if(fifo_put(&command_fifo, (uint8_t*)&command, sizeof(alp_command_t*)) != SUCCESS) {
 8000be8:	2204      	movs	r2, #4
 8000bea:	a901      	add	r1, sp, #4
 8000bec:	4811      	ldr	r0, [pc, #68]	; (8000c34 <alp_layer_process+0x64>)
 8000bee:	f00d fdc3 	bl	800e778 <fifo_put>
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	d116      	bne.n	8000c24 <alp_layer_process+0x54>
        free_command(command);
        return false;
    }
    error_t e = sched_post_task_prio(&process_async, MIN_PRIORITY, NULL);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2107      	movs	r1, #7
 8000bfa:	480f      	ldr	r0, [pc, #60]	; (8000c38 <alp_layer_process+0x68>)
 8000bfc:	f00e fcd2 	bl	800f5a4 <sched_post_task_prio>
    if((e != SUCCESS) && (e != -EALREADY))
 8000c00:	2800      	cmp	r0, #0
 8000c02:	d001      	beq.n	8000c08 <alp_layer_process+0x38>
 8000c04:	3078      	adds	r0, #120	; 0x78
 8000c06:	d112      	bne.n	8000c2e <alp_layer_process+0x5e>
        return false;
    
    return (expected_response_length > 0);
 8000c08:	17e0      	asrs	r0, r4, #31
 8000c0a:	1b00      	subs	r0, r0, r4
 8000c0c:	0fc0      	lsrs	r0, r0, #31
}
 8000c0e:	b002      	add	sp, #8
 8000c10:	bd10      	pop	{r4, pc}
        log_print_error_string("alp_layer_process, alp_get_expected_response_length failed with error: %i", expected_response_length);
 8000c12:	0001      	movs	r1, r0
 8000c14:	4809      	ldr	r0, [pc, #36]	; (8000c3c <alp_layer_process+0x6c>)
 8000c16:	f00e f9e3 	bl	800efe0 <log_print_error_string>
        free_command(command);
 8000c1a:	9801      	ldr	r0, [sp, #4]
 8000c1c:	f7ff fce8 	bl	80005f0 <free_command>
        return false;
 8000c20:	2000      	movs	r0, #0
 8000c22:	e7f4      	b.n	8000c0e <alp_layer_process+0x3e>
        free_command(command);
 8000c24:	9801      	ldr	r0, [sp, #4]
 8000c26:	f7ff fce3 	bl	80005f0 <free_command>
        return false;
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	e7ef      	b.n	8000c0e <alp_layer_process+0x3e>
        return false;
 8000c2e:	2000      	movs	r0, #0
 8000c30:	e7ed      	b.n	8000c0e <alp_layer_process+0x3e>
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	20001494 	.word	0x20001494
 8000c38:	0800105d 	.word	0x0800105d
 8000c3c:	08016ad4 	.word	0x08016ad4

08000c40 <alp_layer_process_d7aactp>:
    alp_layer_process(resp);
}

#ifdef MODULE_D7AP
void alp_layer_process_d7aactp(uint8_t *interface_config, uint8_t* alp_command, uint32_t alp_command_length)
{
 8000c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c42:	0007      	movs	r7, r0
 8000c44:	000e      	movs	r6, r1
 8000c46:	0015      	movs	r5, r2
    alp_interface_config_t* alp_interface_config = (alp_interface_config_t*)interface_config;
    // TODO refactor, might be removed
    alp_command_t* command = alp_layer_command_alloc(false, false);
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff fed2 	bl	80009f4 <alp_layer_command_alloc>
 8000c50:	1e04      	subs	r4, r0, #0
    if(command == NULL) {
 8000c52:	d013      	beq.n	8000c7c <alp_layer_process_d7aactp+0x3c>
        log_print_error_string("process d7aactp failed as alloc failed");
        return;
    }

    command->use_d7aactp = true;
 8000c54:	2336      	movs	r3, #54	; 0x36
 8000c56:	2201      	movs	r2, #1
 8000c58:	54c2      	strb	r2, [r0, r3]
    memcpy(&command->d7aactp_interface_config, alp_interface_config, sizeof(alp_interface_config_t));
 8000c5a:	322b      	adds	r2, #43	; 0x2b
 8000c5c:	0039      	movs	r1, r7
 8000c5e:	3037      	adds	r0, #55	; 0x37
 8000c60:	f014 f8b6 	bl	8014dd0 <memcpy>
    error_t e = fifo_put(&command->alp_command_fifo, alp_command, alp_command_length);
 8000c64:	b2aa      	uxth	r2, r5
 8000c66:	0020      	movs	r0, r4
 8000c68:	3064      	adds	r0, #100	; 0x64
 8000c6a:	0031      	movs	r1, r6
 8000c6c:	f00d fd84 	bl	800e778 <fifo_put>
    if(e != SUCCESS) {
 8000c70:	2800      	cmp	r0, #0
 8000c72:	d107      	bne.n	8000c84 <alp_layer_process_d7aactp+0x44>
        log_print_error_string("process d7aactp failed as fifo put of %i bytes failed", alp_command_length);
        free_command(command);
        return;
    }
    
    alp_layer_process(command);
 8000c74:	0020      	movs	r0, r4
 8000c76:	f7ff ffab 	bl	8000bd0 <alp_layer_process>
}
 8000c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        log_print_error_string("process d7aactp failed as alloc failed");
 8000c7c:	4805      	ldr	r0, [pc, #20]	; (8000c94 <alp_layer_process_d7aactp+0x54>)
 8000c7e:	f00e f9af 	bl	800efe0 <log_print_error_string>
        return;
 8000c82:	e7fa      	b.n	8000c7a <alp_layer_process_d7aactp+0x3a>
        log_print_error_string("process d7aactp failed as fifo put of %i bytes failed", alp_command_length);
 8000c84:	0029      	movs	r1, r5
 8000c86:	4804      	ldr	r0, [pc, #16]	; (8000c98 <alp_layer_process_d7aactp+0x58>)
 8000c88:	f00e f9aa 	bl	800efe0 <log_print_error_string>
        free_command(command);
 8000c8c:	0020      	movs	r0, r4
 8000c8e:	f7ff fcaf 	bl	80005f0 <free_command>
        return;
 8000c92:	e7f2      	b.n	8000c7a <alp_layer_process_d7aactp+0x3a>
 8000c94:	08016b20 	.word	0x08016b20
 8000c98:	08016b48 	.word	0x08016b48

08000c9c <alp_layer_forwarded_command_completed>:
{
 8000c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9e:	46ce      	mov	lr, r9
 8000ca0:	b500      	push	{lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	0005      	movs	r5, r0
 8000ca6:	4689      	mov	r9, r1
 8000ca8:	1e14      	subs	r4, r2, #0
 8000caa:	9301      	str	r3, [sp, #4]
    if(status == NULL) {
 8000cac:	d027      	beq.n	8000cfe <alp_layer_forwarded_command_completed+0x62>
    alp_command_t* command = alp_layer_get_command_by_transid(trans_id, status->itf_id);
 8000cae:	7816      	ldrb	r6, [r2, #0]
 8000cb0:	0031      	movs	r1, r6
 8000cb2:	f7ff fc05 	bl	80004c0 <alp_layer_get_command_by_transid>
 8000cb6:	1e07      	subs	r7, r0, #0
    if(command == NULL) {
 8000cb8:	d025      	beq.n	8000d06 <alp_layer_forwarded_command_completed+0x6a>
    alp_command_t* resp = alp_layer_command_alloc(false, false);
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff fe99 	bl	80009f4 <alp_layer_command_alloc>
 8000cc2:	1e05      	subs	r5, r0, #0
    if(resp == NULL) {
 8000cc4:	d025      	beq.n	8000d12 <alp_layer_forwarded_command_completed+0x76>
    err += !alp_append_interface_status(resp, status);
 8000cc6:	0021      	movs	r1, r4
 8000cc8:	f000 ffc3 	bl	8001c52 <alp_append_interface_status>
 8000ccc:	2601      	movs	r6, #1
 8000cce:	4070      	eors	r0, r6
 8000cd0:	b2c4      	uxtb	r4, r0
    err += !alp_append_tag_response_action(resp, command->tag_id, command_completed, *error != SUCCESS);
 8000cd2:	464b      	mov	r3, r9
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	1e5a      	subs	r2, r3, #1
 8000cd8:	4193      	sbcs	r3, r2
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	7ab9      	ldrb	r1, [r7, #10]
 8000cde:	9a01      	ldr	r2, [sp, #4]
 8000ce0:	0028      	movs	r0, r5
 8000ce2:	f000 ff9e 	bl	8001c22 <alp_append_tag_response_action>
 8000ce6:	4070      	eors	r0, r6
 8000ce8:	b2c0      	uxtb	r0, r0
 8000cea:	1824      	adds	r4, r4, r0
    if(err != SUCCESS) {
 8000cec:	2c00      	cmp	r4, #0
 8000cee:	d117      	bne.n	8000d20 <alp_layer_forwarded_command_completed+0x84>
    alp_layer_process(resp);
 8000cf0:	0028      	movs	r0, r5
 8000cf2:	f7ff ff6d 	bl	8000bd0 <alp_layer_process>
}
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bc04      	pop	{r2}
 8000cfa:	4691      	mov	r9, r2
 8000cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        log_print_error_string("forwarded command completed with NULL alp_interface_status");
 8000cfe:	480d      	ldr	r0, [pc, #52]	; (8000d34 <alp_layer_forwarded_command_completed+0x98>)
 8000d00:	f00e f96e 	bl	800efe0 <log_print_error_string>
        return;
 8000d04:	e7f7      	b.n	8000cf6 <alp_layer_forwarded_command_completed+0x5a>
        log_print_error_string("forwarded command completed failed as command with trans id %i and itf id %i not found", trans_id, status->itf_id);
 8000d06:	0032      	movs	r2, r6
 8000d08:	0029      	movs	r1, r5
 8000d0a:	480b      	ldr	r0, [pc, #44]	; (8000d38 <alp_layer_forwarded_command_completed+0x9c>)
 8000d0c:	f00e f968 	bl	800efe0 <log_print_error_string>
        return;
 8000d10:	e7f1      	b.n	8000cf6 <alp_layer_forwarded_command_completed+0x5a>
        log_print_error_string("forwarded command completed failed as alloc of resp command failed");
 8000d12:	480a      	ldr	r0, [pc, #40]	; (8000d3c <alp_layer_forwarded_command_completed+0xa0>)
 8000d14:	f00e f964 	bl	800efe0 <log_print_error_string>
        free_command(command);
 8000d18:	0038      	movs	r0, r7
 8000d1a:	f7ff fc69 	bl	80005f0 <free_command>
        return;
 8000d1e:	e7ea      	b.n	8000cf6 <alp_layer_forwarded_command_completed+0x5a>
        log_print_error_string("forwarded command completed failed as alp appends failed on resp command");
 8000d20:	4807      	ldr	r0, [pc, #28]	; (8000d40 <alp_layer_forwarded_command_completed+0xa4>)
 8000d22:	f00e f95d 	bl	800efe0 <log_print_error_string>
        free_command(resp);
 8000d26:	0028      	movs	r0, r5
 8000d28:	f7ff fc62 	bl	80005f0 <free_command>
        free_command(command);
 8000d2c:	0038      	movs	r0, r7
 8000d2e:	f7ff fc5f 	bl	80005f0 <free_command>
        return;
 8000d32:	e7e0      	b.n	8000cf6 <alp_layer_forwarded_command_completed+0x5a>
 8000d34:	08016b80 	.word	0x08016b80
 8000d38:	08016bbc 	.word	0x08016bbc
 8000d3c:	08016c14 	.word	0x08016c14
 8000d40:	08016c58 	.word	0x08016c58

08000d44 <itf_clear_commands>:
{
 8000d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d46:	46c6      	mov	lr, r8
 8000d48:	b500      	push	{lr}
 8000d4a:	b08c      	sub	sp, #48	; 0x30
 8000d4c:	0006      	movs	r6, r0
    for(uint8_t i = 0; i < MODULE_ALP_MAX_ACTIVE_COMMAND_COUNT; i++)
 8000d4e:	2400      	movs	r4, #0
 8000d50:	e019      	b.n	8000d86 <itf_clear_commands+0x42>
                error_t err = ALP_STATUS_ITF_STOPPED;
 8000d52:	23e9      	movs	r3, #233	; 0xe9
 8000d54:	9300      	str	r3, [sp, #0]
                alp_interface_status_t empty_itf_status = { .itf_id = commands[i].forward_itf_id, .len = 0 };
 8000d56:	ab01      	add	r3, sp, #4
 8000d58:	4698      	mov	r8, r3
 8000d5a:	222a      	movs	r2, #42	; 0x2a
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f014 f88a 	bl	8014e78 <memset>
 8000d64:	4643      	mov	r3, r8
 8000d66:	701f      	strb	r7, [r3, #0]
                alp_layer_forwarded_command_completed(commands[i].trans_id, &err, &empty_itf_status, true);
 8000d68:	0063      	lsls	r3, r4, #1
 8000d6a:	191d      	adds	r5, r3, r4
 8000d6c:	016b      	lsls	r3, r5, #5
 8000d6e:	1b5d      	subs	r5, r3, r5
 8000d70:	00ad      	lsls	r5, r5, #2
 8000d72:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <itf_clear_commands+0x78>)
 8000d74:	195d      	adds	r5, r3, r5
 8000d76:	8928      	ldrh	r0, [r5, #8]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	4669      	mov	r1, sp
 8000d7e:	f7ff ff8d 	bl	8000c9c <alp_layer_forwarded_command_completed>
    for(uint8_t i = 0; i < MODULE_ALP_MAX_ACTIVE_COMMAND_COUNT; i++)
 8000d82:	3401      	adds	r4, #1
 8000d84:	b2e4      	uxtb	r4, r4
 8000d86:	2c07      	cmp	r4, #7
 8000d88:	d813      	bhi.n	8000db2 <itf_clear_commands+0x6e>
            if(commands[i].is_active && (commands[i].forward_itf_id == itf_id))
 8000d8a:	0062      	lsls	r2, r4, #1
 8000d8c:	1912      	adds	r2, r2, r4
 8000d8e:	0153      	lsls	r3, r2, #5
 8000d90:	1a9b      	subs	r3, r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <itf_clear_commands+0x78>)
 8000d96:	5c9b      	ldrb	r3, [r3, r2]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0f2      	beq.n	8000d82 <itf_clear_commands+0x3e>
 8000d9c:	0062      	lsls	r2, r4, #1
 8000d9e:	1912      	adds	r2, r2, r4
 8000da0:	0153      	lsls	r3, r2, #5
 8000da2:	1a9b      	subs	r3, r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <itf_clear_commands+0x78>)
 8000da8:	18d3      	adds	r3, r2, r3
 8000daa:	79df      	ldrb	r7, [r3, #7]
 8000dac:	42b7      	cmp	r7, r6
 8000dae:	d1e8      	bne.n	8000d82 <itf_clear_commands+0x3e>
 8000db0:	e7cf      	b.n	8000d52 <itf_clear_commands+0xe>
}
 8000db2:	b00c      	add	sp, #48	; 0x30
 8000db4:	bc04      	pop	{r2}
 8000db6:	4690      	mov	r8, r2
 8000db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	20000678 	.word	0x20000678

08000dc0 <itf_ctrl_file_callback>:
{
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	b084      	sub	sp, #16
    uint32_t file_length = USER_FILE_ALP_CTRL_SIZE;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	9303      	str	r3, [sp, #12]
    err = d7ap_fs_read_file(
 8000dc8:	2300      	movs	r3, #0
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	ab03      	add	r3, sp, #12
 8000dce:	4a2f      	ldr	r2, [pc, #188]	; (8000e8c <itf_ctrl_file_callback+0xcc>)
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2040      	movs	r0, #64	; 0x40
 8000dd4:	f006 ff64 	bl	8007ca0 <d7ap_fs_read_file>
 8000dd8:	1e01      	subs	r1, r0, #0
    if (err != SUCCESS) {
 8000dda:	d105      	bne.n	8000de8 <itf_ctrl_file_callback+0x28>
    if (current_itf_ctrl.action == ITF_STOP) {
 8000ddc:	4b2b      	ldr	r3, [pc, #172]	; (8000e8c <itf_ctrl_file_callback+0xcc>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d00a      	beq.n	8000dfa <itf_ctrl_file_callback+0x3a>
        for (uint8_t i = 0; i < MODULE_ALP_INTERFACE_CNT; i++) {
 8000de4:	2300      	movs	r3, #0
 8000de6:	e017      	b.n	8000e18 <itf_ctrl_file_callback+0x58>
        log_print_error_string("alp_layer: stack ctrl file callback: read file returned error %i", err);
 8000de8:	4829      	ldr	r0, [pc, #164]	; (8000e90 <itf_ctrl_file_callback+0xd0>)
 8000dea:	f00e f8f9 	bl	800efe0 <log_print_error_string>
        current_itf_ctrl = (itf_ctrl_t) {
 8000dee:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <itf_ctrl_file_callback+0xcc>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	2200      	movs	r2, #0
 8000df6:	705a      	strb	r2, [r3, #1]
 8000df8:	e7f0      	b.n	8000ddc <itf_ctrl_file_callback+0x1c>
        if (!current_itf_deinit)
 8000dfa:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <itf_ctrl_file_callback+0xd4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d042      	beq.n	8000e88 <itf_ctrl_file_callback+0xc8>
        current_itf_deinit();
 8000e02:	4798      	blx	r3
        current_itf_deinit = NULL;
 8000e04:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <itf_ctrl_file_callback+0xd4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
        itf_clear_commands(current_itf_ctrl.interface);
 8000e0a:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <itf_ctrl_file_callback+0xcc>)
 8000e0c:	7858      	ldrb	r0, [r3, #1]
 8000e0e:	f7ff ff99 	bl	8000d44 <itf_clear_commands>
 8000e12:	e039      	b.n	8000e88 <itf_ctrl_file_callback+0xc8>
        for (uint8_t i = 0; i < MODULE_ALP_INTERFACE_CNT; i++) {
 8000e14:	3301      	adds	r3, #1
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b05      	cmp	r3, #5
 8000e1a:	d830      	bhi.n	8000e7e <itf_ctrl_file_callback+0xbe>
            if(interfaces[i] && (interfaces[i]->itf_id == current_itf_ctrl.interface)) {
 8000e1c:	001c      	movs	r4, r3
 8000e1e:	009a      	lsls	r2, r3, #2
 8000e20:	491d      	ldr	r1, [pc, #116]	; (8000e98 <itf_ctrl_file_callback+0xd8>)
 8000e22:	5852      	ldr	r2, [r2, r1]
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	d0f5      	beq.n	8000e14 <itf_ctrl_file_callback+0x54>
 8000e28:	7810      	ldrb	r0, [r2, #0]
 8000e2a:	4918      	ldr	r1, [pc, #96]	; (8000e8c <itf_ctrl_file_callback+0xcc>)
 8000e2c:	7849      	ldrb	r1, [r1, #1]
 8000e2e:	4288      	cmp	r0, r1
 8000e30:	d1f0      	bne.n	8000e14 <itf_ctrl_file_callback+0x54>
                if (interfaces[i]->unique && interfaces[i]->init) {
 8000e32:	7c13      	ldrb	r3, [r2, #16]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d027      	beq.n	8000e88 <itf_ctrl_file_callback+0xc8>
 8000e38:	6893      	ldr	r3, [r2, #8]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d024      	beq.n	8000e88 <itf_ctrl_file_callback+0xc8>
                    if (current_itf_deinit) {
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <itf_ctrl_file_callback+0xd4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <itf_ctrl_file_callback+0x8e>
                        if (interfaces[i]->deinit == current_itf_deinit) // interface is already inited
 8000e46:	68d2      	ldr	r2, [r2, #12]
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d01d      	beq.n	8000e88 <itf_ctrl_file_callback+0xc8>
                            current_itf_deinit();
 8000e4c:	4798      	blx	r3
                    err = interfaces[i]->init();
 8000e4e:	4e12      	ldr	r6, [pc, #72]	; (8000e98 <itf_ctrl_file_callback+0xd8>)
 8000e50:	00a4      	lsls	r4, r4, #2
 8000e52:	59a3      	ldr	r3, [r4, r6]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	4798      	blx	r3
 8000e58:	1e05      	subs	r5, r0, #0
                    current_itf_deinit = interfaces[i]->deinit;
 8000e5a:	59a3      	ldr	r3, [r4, r6]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <itf_ctrl_file_callback+0xd4>)
 8000e60:	6013      	str	r3, [r2, #0]
                    if(err < 0) {
 8000e62:	da11      	bge.n	8000e88 <itf_ctrl_file_callback+0xc8>
                        current_itf_deinit();
 8000e64:	4798      	blx	r3
                        current_itf_deinit = NULL;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <itf_ctrl_file_callback+0xd4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
                        current_itf_ctrl.action = ITF_STOP;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <itf_ctrl_file_callback+0xcc>)
 8000e6e:	3201      	adds	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
                        log_print_error_string("failed to init interface %i with error %i. Stopping", current_itf_ctrl.interface, err);
 8000e72:	7859      	ldrb	r1, [r3, #1]
 8000e74:	002a      	movs	r2, r5
 8000e76:	4809      	ldr	r0, [pc, #36]	; (8000e9c <itf_ctrl_file_callback+0xdc>)
 8000e78:	f00e f8b2 	bl	800efe0 <log_print_error_string>
                return;
 8000e7c:	e004      	b.n	8000e88 <itf_ctrl_file_callback+0xc8>
            "tried to start an interface (%i) that is not registered", current_itf_ctrl.interface);
 8000e7e:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <itf_ctrl_file_callback+0xcc>)
 8000e80:	7859      	ldrb	r1, [r3, #1]
        log_print_error_string(
 8000e82:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <itf_ctrl_file_callback+0xe0>)
 8000e84:	f00e f8ac 	bl	800efe0 <log_print_error_string>
}
 8000e88:	b004      	add	sp, #16
 8000e8a:	bd70      	pop	{r4, r5, r6, pc}
 8000e8c:	200014c4 	.word	0x200014c4
 8000e90:	08016ca4 	.word	0x08016ca4
 8000e94:	200014c8 	.word	0x200014c8
 8000e98:	20001780 	.word	0x20001780
 8000e9c:	08016ce8 	.word	0x08016ce8
 8000ea0:	08016d1c 	.word	0x08016d1c

08000ea4 <alp_layer_init>:
{
 8000ea4:	b510      	push	{r4, lr}
  init_args = alp_init_args;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <alp_layer_init+0x58>)
 8000ea8:	6018      	str	r0, [r3, #0]
  fwd_unsollicited_serial = forward_unsollicited_over_serial;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <alp_layer_init+0x5c>)
 8000eac:	7019      	strb	r1, [r3, #0]
  fifo_init(&command_fifo, (uint8_t*)command_fifo_buffer, MODULE_ALP_MAX_ACTIVE_COMMAND_COUNT*sizeof(alp_command_t*));
 8000eae:	2220      	movs	r2, #32
 8000eb0:	4914      	ldr	r1, [pc, #80]	; (8000f04 <alp_layer_init+0x60>)
 8000eb2:	4815      	ldr	r0, [pc, #84]	; (8000f08 <alp_layer_init+0x64>)
 8000eb4:	f00d fc59 	bl	800e76a <fifo_init>
  alp_layer_free_commands();
 8000eb8:	f7ff fd88 	bl	80009cc <alp_layer_free_commands>
  d7ap_fs_init();
 8000ebc:	f007 f85c 	bl	8007f78 <d7ap_fs_init>
  d7ap_fs_set_process_d7aactp_callback(&alp_layer_process_d7aactp);
 8000ec0:	4812      	ldr	r0, [pc, #72]	; (8000f0c <alp_layer_init+0x68>)
 8000ec2:	f006 fdc1 	bl	8007a48 <d7ap_fs_set_process_d7aactp_callback>
  init_auth_key_files();
 8000ec6:	f7ff fd17 	bl	80008f8 <init_auth_key_files>
  serial_interface_register();
 8000eca:	f001 f827 	bl	8001f1c <serial_interface_register>
  d7ap_interface_register();
 8000ece:	f001 f959 	bl	8002184 <d7ap_interface_register>
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	480e      	ldr	r0, [pc, #56]	; (8000f10 <alp_layer_init+0x6c>)
 8000ed6:	f00e fac9 	bl	800f46c <sched_register_task_allow_multiple>
  if(fs_is_file_defined(USER_FILE_ALP_CTRL_FILE_ID)) {
 8000eda:	2040      	movs	r0, #64	; 0x40
 8000edc:	f00e f84c 	bl	800ef78 <fs_is_file_defined>
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	d103      	bne.n	8000eec <alp_layer_init+0x48>
    current_itf_ctrl.raw_itf_ctrl = 0;
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <alp_layer_init+0x70>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	801a      	strh	r2, [r3, #0]
}
 8000eea:	bd10      	pop	{r4, pc}
    d7ap_fs_register_file_modified_callback(USER_FILE_ALP_CTRL_FILE_ID, &itf_ctrl_file_callback);
 8000eec:	490a      	ldr	r1, [pc, #40]	; (8000f18 <alp_layer_init+0x74>)
 8000eee:	2040      	movs	r0, #64	; 0x40
 8000ef0:	f007 f91e 	bl	8008130 <d7ap_fs_register_file_modified_callback>
    itf_ctrl_file_callback(USER_FILE_ALP_CTRL_FILE_ID);
 8000ef4:	2040      	movs	r0, #64	; 0x40
 8000ef6:	f7ff ff63 	bl	8000dc0 <itf_ctrl_file_callback>
 8000efa:	e7f6      	b.n	8000eea <alp_layer_init+0x46>
 8000efc:	20001218 	.word	0x20001218
 8000f00:	200014cc 	.word	0x200014cc
 8000f04:	200014a4 	.word	0x200014a4
 8000f08:	20001494 	.word	0x20001494
 8000f0c:	08000c41 	.word	0x08000c41
 8000f10:	0800105d 	.word	0x0800105d
 8000f14:	200014c4 	.word	0x200014c4
 8000f18:	08000dc1 	.word	0x08000dc1

08000f1c <forward_command>:
{
 8000f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f1e:	46ce      	mov	lr, r9
 8000f20:	4647      	mov	r7, r8
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b08f      	sub	sp, #60	; 0x3c
 8000f26:	0006      	movs	r6, r0
 8000f28:	000c      	movs	r4, r1
    alp_interface_status_t empty_itf_status = { .itf_id = 0, .len = 0 };
 8000f2a:	222a      	movs	r2, #42	; 0x2a
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	a803      	add	r0, sp, #12
 8000f30:	f013 ffa2 	bl	8014e78 <memset>
    for (uint8_t i = 0; i < MODULE_ALP_INTERFACE_CNT; i++) {
 8000f34:	2300      	movs	r3, #0
 8000f36:	2b05      	cmp	r3, #5
 8000f38:	d900      	bls.n	8000f3c <forward_command+0x20>
 8000f3a:	e080      	b.n	800103e <forward_command+0x122>
        if (command->forward_itf_id == interfaces[i]->itf_id) {
 8000f3c:	79f1      	ldrb	r1, [r6, #7]
 8000f3e:	001d      	movs	r5, r3
 8000f40:	009a      	lsls	r2, r3, #2
 8000f42:	4842      	ldr	r0, [pc, #264]	; (800104c <forward_command+0x130>)
 8000f44:	5812      	ldr	r2, [r2, r0]
 8000f46:	7810      	ldrb	r0, [r2, #0]
 8000f48:	4281      	cmp	r1, r0
 8000f4a:	d002      	beq.n	8000f52 <forward_command+0x36>
    for (uint8_t i = 0; i < MODULE_ALP_INTERFACE_CNT; i++) {
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	e7f1      	b.n	8000f36 <forward_command+0x1a>
            if(interfaces[i] && interfaces[i]->unique) {
 8000f52:	2a00      	cmp	r2, #0
 8000f54:	d028      	beq.n	8000fa8 <forward_command+0x8c>
 8000f56:	7c17      	ldrb	r7, [r2, #16]
 8000f58:	2f00      	cmp	r7, #0
 8000f5a:	d025      	beq.n	8000fa8 <forward_command+0x8c>
                if(current_itf_ctrl.action == ITF_STOP) {
 8000f5c:	4b3c      	ldr	r3, [pc, #240]	; (8001050 <forward_command+0x134>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d02c      	beq.n	8000fbe <forward_command+0xa2>
                } else if(interfaces[i]->deinit != current_itf_deinit) {
 8000f64:	68d2      	ldr	r2, [r2, #12]
 8000f66:	4b3b      	ldr	r3, [pc, #236]	; (8001054 <forward_command+0x138>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d01c      	beq.n	8000fa8 <forward_command+0x8c>
                    if(current_itf_deinit) {
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d004      	beq.n	8000f7c <forward_command+0x60>
                        current_itf_deinit();
 8000f72:	4798      	blx	r3
                        itf_clear_commands(current_itf_ctrl.interface);
 8000f74:	4b36      	ldr	r3, [pc, #216]	; (8001050 <forward_command+0x134>)
 8000f76:	7858      	ldrb	r0, [r3, #1]
 8000f78:	f7ff fee4 	bl	8000d44 <itf_clear_commands>
                    interfaces[i]->init();
 8000f7c:	4f33      	ldr	r7, [pc, #204]	; (800104c <forward_command+0x130>)
 8000f7e:	00ab      	lsls	r3, r5, #2
 8000f80:	4698      	mov	r8, r3
 8000f82:	59db      	ldr	r3, [r3, r7]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	4798      	blx	r3
                    current_itf_deinit = interfaces[i]->deinit;
 8000f88:	4643      	mov	r3, r8
 8000f8a:	59db      	ldr	r3, [r3, r7]
 8000f8c:	4a31      	ldr	r2, [pc, #196]	; (8001054 <forward_command+0x138>)
 8000f8e:	68d9      	ldr	r1, [r3, #12]
 8000f90:	6011      	str	r1, [r2, #0]
                    current_itf_ctrl.interface = interfaces[i]->itf_id;
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4a2e      	ldr	r2, [pc, #184]	; (8001050 <forward_command+0x134>)
 8000f96:	7053      	strb	r3, [r2, #1]
                    d7ap_fs_write_file_with_callback(USER_FILE_ALP_CTRL_FILE_ID, 0, (uint8_t*)&current_itf_ctrl.raw_itf_ctrl, USER_FILE_ALP_CTRL_SIZE, ROOT_AUTH, false);
 8000f98:	2300      	movs	r3, #0
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2040      	movs	r0, #64	; 0x40
 8000fa4:	f006 ff68 	bl	8007e78 <d7ap_fs_write_file_with_callback>
            uint16_t forwarded_alp_size = fifo_get_size(&command->alp_command_fifo);
 8000fa8:	2364      	movs	r3, #100	; 0x64
 8000faa:	4699      	mov	r9, r3
 8000fac:	44b1      	add	r9, r6
 8000fae:	4648      	mov	r0, r9
 8000fb0:	f00d fc45 	bl	800e83e <fifo_get_size>
 8000fb4:	0007      	movs	r7, r0
            if(forwarded_alp_size > ALP_PAYLOAD_MAX_SIZE)
 8000fb6:	28ff      	cmp	r0, #255	; 0xff
 8000fb8:	d90f      	bls.n	8000fda <forward_command+0xbe>
                return false;
 8000fba:	2700      	movs	r7, #0
 8000fbc:	e040      	b.n	8001040 <forward_command+0x124>
                    command->trans_id = command->tag_id;
 8000fbe:	7ab0      	ldrb	r0, [r6, #10]
 8000fc0:	8130      	strh	r0, [r6, #8]
                    error_t err = ALP_STATUS_ITF_STOPPED;
 8000fc2:	33e8      	adds	r3, #232	; 0xe8
 8000fc4:	9302      	str	r3, [sp, #8]
                    empty_itf_status.itf_id = command->forward_itf_id;
 8000fc6:	aa03      	add	r2, sp, #12
 8000fc8:	7011      	strb	r1, [r2, #0]
                    alp_layer_forwarded_command_completed(command->trans_id, &err, &empty_itf_status, true);
 8000fca:	3be8      	subs	r3, #232	; 0xe8
 8000fcc:	a902      	add	r1, sp, #8
 8000fce:	f7ff fe65 	bl	8000c9c <alp_layer_forwarded_command_completed>
                    log_print_error_string("tried to forward something over a unique itf while stack stop is active");
 8000fd2:	4821      	ldr	r0, [pc, #132]	; (8001058 <forward_command+0x13c>)
 8000fd4:	f00e f804 	bl	800efe0 <log_print_error_string>
                    return true;
 8000fd8:	e032      	b.n	8001040 <forward_command+0x124>
            fifo_pop(&command->alp_command_fifo, command->alp_command, forwarded_alp_size);
 8000fda:	2374      	movs	r3, #116	; 0x74
 8000fdc:	4698      	mov	r8, r3
 8000fde:	44b0      	add	r8, r6
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	4641      	mov	r1, r8
 8000fe4:	4648      	mov	r0, r9
 8000fe6:	f00d fcc8 	bl	800e97a <fifo_pop>
            int expected_response_length = alp_get_expected_response_length(command);
 8000fea:	0030      	movs	r0, r6
 8000fec:	f000 fe56 	bl	8001c9c <alp_get_expected_response_length>
            if(expected_response_length < 0) {
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	db16      	blt.n	8001022 <forward_command+0x106>
            command->forward_itf_id = itf_config->itf_id;
 8000ff4:	7823      	ldrb	r3, [r4, #0]
 8000ff6:	71f3      	strb	r3, [r6, #7]
            error_t error = interfaces[i]->send_command(command->alp_command, forwarded_alp_size, expected_response_length, &command->trans_id, itf_config);
 8000ff8:	00ad      	lsls	r5, r5, #2
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <forward_command+0x130>)
 8000ffc:	58eb      	ldr	r3, [r5, r3]
 8000ffe:	685d      	ldr	r5, [r3, #4]
 8001000:	0033      	movs	r3, r6
 8001002:	3308      	adds	r3, #8
 8001004:	b2c2      	uxtb	r2, r0
 8001006:	b2f9      	uxtb	r1, r7
 8001008:	9400      	str	r4, [sp, #0]
 800100a:	4640      	mov	r0, r8
 800100c:	47a8      	blx	r5
 800100e:	9002      	str	r0, [sp, #8]
            if (command->trans_id == 0)
 8001010:	8933      	ldrh	r3, [r6, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <forward_command+0xfe>
                command->trans_id = command->tag_id; // interface does not provide transaction tracking, using tag_id
 8001016:	7ab3      	ldrb	r3, [r6, #10]
 8001018:	8133      	strh	r3, [r6, #8]
            if (error) {
 800101a:	2800      	cmp	r0, #0
 800101c:	d106      	bne.n	800102c <forward_command+0x110>
            return true;
 800101e:	2701      	movs	r7, #1
 8001020:	e00e      	b.n	8001040 <forward_command+0x124>
                free_command(command);
 8001022:	0030      	movs	r0, r6
 8001024:	f7ff fae4 	bl	80005f0 <free_command>
                return false;
 8001028:	2700      	movs	r7, #0
 800102a:	e009      	b.n	8001040 <forward_command+0x124>
                empty_itf_status.itf_id = command->forward_itf_id;
 800102c:	79f3      	ldrb	r3, [r6, #7]
 800102e:	aa03      	add	r2, sp, #12
 8001030:	7013      	strb	r3, [r2, #0]
                alp_layer_forwarded_command_completed(command->trans_id, &error, &empty_itf_status, true);
 8001032:	8930      	ldrh	r0, [r6, #8]
 8001034:	2301      	movs	r3, #1
 8001036:	a902      	add	r1, sp, #8
 8001038:	f7ff fe30 	bl	8000c9c <alp_layer_forwarded_command_completed>
 800103c:	e7ef      	b.n	800101e <forward_command+0x102>
    return false;
 800103e:	2700      	movs	r7, #0
}
 8001040:	0038      	movs	r0, r7
 8001042:	b00f      	add	sp, #60	; 0x3c
 8001044:	bc0c      	pop	{r2, r3}
 8001046:	4690      	mov	r8, r2
 8001048:	4699      	mov	r9, r3
 800104a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800104c:	20001780 	.word	0x20001780
 8001050:	200014c4 	.word	0x200014c4
 8001054:	200014c8 	.word	0x200014c8
 8001058:	08016d54 	.word	0x08016d54

0800105c <process_async>:
{
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	46c6      	mov	lr, r8
 8001060:	b500      	push	{lr}
 8001062:	b08e      	sub	sp, #56	; 0x38
    if (fifo_pop(&command_fifo, (void*)&command, sizeof(alp_command_t*)) != SUCCESS) {
 8001064:	2204      	movs	r2, #4
 8001066:	49c1      	ldr	r1, [pc, #772]	; (800136c <process_async+0x310>)
 8001068:	48c1      	ldr	r0, [pc, #772]	; (8001370 <process_async+0x314>)
 800106a:	f00d fc86 	bl	800e97a <fifo_pop>
 800106e:	2800      	cmp	r0, #0
 8001070:	d003      	beq.n	800107a <process_async+0x1e>
}
 8001072:	b00e      	add	sp, #56	; 0x38
 8001074:	bc04      	pop	{r2}
 8001076:	4690      	mov	r8, r2
 8001078:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (fifo_get_size(&command_fifo) > 0) {
 800107a:	48bd      	ldr	r0, [pc, #756]	; (8001370 <process_async+0x314>)
 800107c:	f00d fbdf 	bl	800e83e <fifo_get_size>
 8001080:	2800      	cmp	r0, #0
 8001082:	d113      	bne.n	80010ac <process_async+0x50>
    alp_command_t* resp_command = alp_layer_command_alloc(false, false);
 8001084:	2100      	movs	r1, #0
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff fcb4 	bl	80009f4 <alp_layer_command_alloc>
 800108c:	1e05      	subs	r5, r0, #0
    if(resp_command == NULL) {
 800108e:	d013      	beq.n	80010b8 <process_async+0x5c>
    switch(command->origin_itf_id) {
 8001090:	4bb6      	ldr	r3, [pc, #728]	; (800136c <process_async+0x310>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	2335      	movs	r3, #53	; 0x35
 8001096:	5cd4      	ldrb	r4, [r2, r3]
 8001098:	2c03      	cmp	r4, #3
 800109a:	d100      	bne.n	800109e <process_async+0x42>
 800109c:	e145      	b.n	800132a <process_async+0x2ce>
 800109e:	d813      	bhi.n	80010c8 <process_async+0x6c>
 80010a0:	2c00      	cmp	r4, #0
 80010a2:	d046      	beq.n	8001132 <process_async+0xd6>
 80010a4:	2c01      	cmp	r4, #1
 80010a6:	d044      	beq.n	8001132 <process_async+0xd6>
        origin_auth = GUEST_AUTH;
 80010a8:	2402      	movs	r4, #2
 80010aa:	e042      	b.n	8001132 <process_async+0xd6>
        sched_post_task_prio(&process_async, MIN_PRIORITY, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2107      	movs	r1, #7
 80010b0:	48b0      	ldr	r0, [pc, #704]	; (8001374 <process_async+0x318>)
 80010b2:	f00e fa77 	bl	800f5a4 <sched_post_task_prio>
 80010b6:	e7e5      	b.n	8001084 <process_async+0x28>
        log_print_error_string("process async: alloc command failed for the response command, dropping command");
 80010b8:	48af      	ldr	r0, [pc, #700]	; (8001378 <process_async+0x31c>)
 80010ba:	f00d ff91 	bl	800efe0 <log_print_error_string>
        free_command(command);
 80010be:	4bab      	ldr	r3, [pc, #684]	; (800136c <process_async+0x310>)
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	f7ff fa95 	bl	80005f0 <free_command>
        return;
 80010c6:	e7d4      	b.n	8001072 <process_async+0x16>
    switch(command->origin_itf_id) {
 80010c8:	2c04      	cmp	r4, #4
 80010ca:	d001      	beq.n	80010d0 <process_async+0x74>
        origin_auth = GUEST_AUTH;
 80010cc:	2402      	movs	r4, #2
 80010ce:	e030      	b.n	8001132 <process_async+0xd6>
        origin_auth = USER_AUTH;
 80010d0:	3c03      	subs	r4, #3
 80010d2:	e02e      	b.n	8001132 <process_async+0xd6>
                    .operation); // we are not sure here that the operation got read but could still be nice to know
 80010d4:	4ba9      	ldr	r3, [pc, #676]	; (800137c <process_async+0x320>)
 80010d6:	7819      	ldrb	r1, [r3, #0]
 80010d8:	0689      	lsls	r1, r1, #26
 80010da:	0e89      	lsrs	r1, r1, #26
            log_print_error_string("parsing failed in process async, the action we tried could be %i",
 80010dc:	48a8      	ldr	r0, [pc, #672]	; (8001380 <process_async+0x324>)
 80010de:	f00d ff7f 	bl	800efe0 <log_print_error_string>
            free_command(command);
 80010e2:	4ba2      	ldr	r3, [pc, #648]	; (800136c <process_async+0x310>)
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	f7ff fa83 	bl	80005f0 <free_command>
            free_command(resp_command);
 80010ea:	0028      	movs	r0, r5
 80010ec:	f7ff fa80 	bl	80005f0 <free_command>
 * \return error_t	SUCCESS if the task was successfully scheduled
 *			EINVAL if the task was not registered with the scheduler
 *			EALREADY if the task was already scheduled. If this is the case,
 *			the task will be executed but only once.
 */
static inline error_t sched_post_task(task_t task) { return sched_post_task_prio(task,DEFAULT_PRIORITY, NULL);}
 80010f0:	2200      	movs	r2, #0
 80010f2:	2107      	movs	r1, #7
 80010f4:	489f      	ldr	r0, [pc, #636]	; (8001374 <process_async+0x318>)
 80010f6:	f00e fa55 	bl	800f5a4 <sched_post_task_prio>
            return;
 80010fa:	e7ba      	b.n	8001072 <process_async+0x16>
            alp_status = process_op_read_file_data(&action, resp_command, command, origin_auth);
 80010fc:	4b9b      	ldr	r3, [pc, #620]	; (800136c <process_async+0x310>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	0023      	movs	r3, r4
 8001102:	0029      	movs	r1, r5
 8001104:	489d      	ldr	r0, [pc, #628]	; (800137c <process_async+0x320>)
 8001106:	f7ff fa85 	bl	8000614 <process_op_read_file_data>
        if(alp_status != ALP_STATUS_OK && alp_status != ALP_STATUS_PARTIALLY_COMPLETED) {
 800110a:	2801      	cmp	r0, #1
 800110c:	d900      	bls.n	8001110 <process_async+0xb4>
 800110e:	e096      	b.n	800123e <process_async+0x1e2>
        if (command->origin_itf_id != ALP_ITF_ID_HOST && command->is_response) {
 8001110:	4b96      	ldr	r3, [pc, #600]	; (800136c <process_async+0x310>)
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	2335      	movs	r3, #53	; 0x35
 8001116:	5cc3      	ldrb	r3, [r0, r3]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <process_async+0xc8>
 800111c:	7843      	ldrb	r3, [r0, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d000      	beq.n	8001124 <process_async+0xc8>
 8001122:	e106      	b.n	8001332 <process_async+0x2d6>
        if (command->forward_itf_id != ALP_ITF_ID_HOST) {
 8001124:	79c3      	ldrb	r3, [r0, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <process_async+0xd6>
            if (!command->is_response) {
 800112a:	7843      	ldrb	r3, [r0, #1]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d100      	bne.n	8001132 <process_async+0xd6>
 8001130:	e0f4      	b.n	800131c <process_async+0x2c0>
    while (fifo_get_size(&command->alp_command_fifo) > 0) {
 8001132:	4b8e      	ldr	r3, [pc, #568]	; (800136c <process_async+0x310>)
 8001134:	6818      	ldr	r0, [r3, #0]
 8001136:	3064      	adds	r0, #100	; 0x64
 8001138:	f00d fb81 	bl	800e83e <fifo_get_size>
 800113c:	2800      	cmp	r0, #0
 800113e:	d100      	bne.n	8001142 <process_async+0xe6>
 8001140:	e0f5      	b.n	800132e <process_async+0x2d2>
        if (!alp_parse_action(command, &action)) {
 8001142:	4b8a      	ldr	r3, [pc, #552]	; (800136c <process_async+0x310>)
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	498d      	ldr	r1, [pc, #564]	; (800137c <process_async+0x320>)
 8001148:	f000 fd02 	bl	8001b50 <alp_parse_action>
 800114c:	2800      	cmp	r0, #0
 800114e:	d0c1      	beq.n	80010d4 <process_async+0x78>
        switch (action.ctrl.operation) {
 8001150:	4b8a      	ldr	r3, [pc, #552]	; (800137c <process_async+0x320>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	069b      	lsls	r3, r3, #26
 8001156:	0e9b      	lsrs	r3, r3, #26
 8001158:	2b36      	cmp	r3, #54	; 0x36
 800115a:	d86f      	bhi.n	800123c <process_async+0x1e0>
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4a89      	ldr	r2, [pc, #548]	; (8001384 <process_async+0x328>)
 8001160:	58d3      	ldr	r3, [r2, r3]
 8001162:	469f      	mov	pc, r3
            alp_status = process_op_read_file_properties(&action, resp_command);
 8001164:	0029      	movs	r1, r5
 8001166:	4885      	ldr	r0, [pc, #532]	; (800137c <process_async+0x320>)
 8001168:	f7ff faab 	bl	80006c2 <process_op_read_file_properties>
            break;
 800116c:	e7cd      	b.n	800110a <process_async+0xae>
            alp_status = process_op_write_file_data(&action, origin_auth);
 800116e:	0021      	movs	r1, r4
 8001170:	4882      	ldr	r0, [pc, #520]	; (800137c <process_async+0x320>)
 8001172:	f7ff fad2 	bl	800071a <process_op_write_file_data>
            break;
 8001176:	e7c8      	b.n	800110a <process_async+0xae>
            alp_status = process_op_write_file_properties(&action, origin_auth);
 8001178:	0021      	movs	r1, r4
 800117a:	4880      	ldr	r0, [pc, #512]	; (800137c <process_async+0x320>)
 800117c:	f7ff fb01 	bl	8000782 <process_op_write_file_properties>
            break;
 8001180:	e7c3      	b.n	800110a <process_async+0xae>
            alp_status = process_op_break_query(&action, origin_auth);
 8001182:	0021      	movs	r1, r4
 8001184:	487d      	ldr	r0, [pc, #500]	; (800137c <process_async+0x320>)
 8001186:	f7ff fcbd 	bl	8000b04 <process_op_break_query>
            break;
 800118a:	e7be      	b.n	800110a <process_async+0xae>
            alp_status = process_op_status(&action, command);
 800118c:	4b77      	ldr	r3, [pc, #476]	; (800136c <process_async+0x310>)
 800118e:	6819      	ldr	r1, [r3, #0]
 8001190:	487a      	ldr	r0, [pc, #488]	; (800137c <process_async+0x320>)
 8001192:	f7ff fb03 	bl	800079c <process_op_status>
            break;
 8001196:	e7b8      	b.n	800110a <process_async+0xae>
            alp_status = process_op_response_tag(&action, command, &resp_tag_id, &command->is_response_completed, &command->is_response_error);
 8001198:	4e74      	ldr	r6, [pc, #464]	; (800136c <process_async+0x310>)
 800119a:	6831      	ldr	r1, [r6, #0]
 800119c:	1ccb      	adds	r3, r1, #3
 800119e:	270b      	movs	r7, #11
 80011a0:	446f      	add	r7, sp
 80011a2:	1d0a      	adds	r2, r1, #4
 80011a4:	9200      	str	r2, [sp, #0]
 80011a6:	003a      	movs	r2, r7
 80011a8:	4874      	ldr	r0, [pc, #464]	; (800137c <process_async+0x320>)
 80011aa:	f7ff f9f7 	bl	800059c <process_op_response_tag>
            command->is_response = true;
 80011ae:	2301      	movs	r3, #1
 80011b0:	6832      	ldr	r2, [r6, #0]
 80011b2:	7053      	strb	r3, [r2, #1]
            if((command->tag_id != resp_tag_id) && (command->tag_id != 0)) {
 80011b4:	6833      	ldr	r3, [r6, #0]
 80011b6:	7a9a      	ldrb	r2, [r3, #10]
 80011b8:	7839      	ldrb	r1, [r7, #0]
 80011ba:	428a      	cmp	r2, r1
 80011bc:	d001      	beq.n	80011c2 <process_async+0x166>
 80011be:	2a00      	cmp	r2, #0
 80011c0:	d103      	bne.n	80011ca <process_async+0x16e>
            command->tag_id = resp_tag_id;
 80011c2:	7299      	strb	r1, [r3, #10]
            resp_command->is_unsollicited = false;
 80011c4:	2300      	movs	r3, #0
 80011c6:	71ab      	strb	r3, [r5, #6]
            break;
 80011c8:	e79f      	b.n	800110a <process_async+0xae>
                log_print_error_string("process_async: tag_id's don't sync up! (%i != %i != 0)", resp_tag_id, command->tag_id);
 80011ca:	486f      	ldr	r0, [pc, #444]	; (8001388 <process_async+0x32c>)
 80011cc:	f00d ff08 	bl	800efe0 <log_print_error_string>
                free_command(command);
 80011d0:	4b66      	ldr	r3, [pc, #408]	; (800136c <process_async+0x310>)
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	f7ff fa0c 	bl	80005f0 <free_command>
                free_command(resp_command);
 80011d8:	0028      	movs	r0, r5
 80011da:	f7ff fa09 	bl	80005f0 <free_command>
                return;
 80011de:	e748      	b.n	8001072 <process_async+0x16>
            alp_status = process_op_forward(&action, &command->forward_itf_id, &forward_interface_config);
 80011e0:	4b62      	ldr	r3, [pc, #392]	; (800136c <process_async+0x310>)
 80011e2:	6819      	ldr	r1, [r3, #0]
 80011e4:	3107      	adds	r1, #7
 80011e6:	aa03      	add	r2, sp, #12
 80011e8:	4864      	ldr	r0, [pc, #400]	; (800137c <process_async+0x320>)
 80011ea:	f7ff faf6 	bl	80007da <process_op_forward>
            break;
 80011ee:	e78c      	b.n	800110a <process_async+0xae>
            alp_status = process_op_indirect_forward(&action, &command->forward_itf_id, &forward_interface_config);
 80011f0:	4b5e      	ldr	r3, [pc, #376]	; (800136c <process_async+0x310>)
 80011f2:	6819      	ldr	r1, [r3, #0]
 80011f4:	3107      	adds	r1, #7
 80011f6:	aa03      	add	r2, sp, #12
 80011f8:	4860      	ldr	r0, [pc, #384]	; (800137c <process_async+0x320>)
 80011fa:	f7ff fafb 	bl	80007f4 <process_op_indirect_forward>
            break;
 80011fe:	e784      	b.n	800110a <process_async+0xae>
            alp_status = process_op_request_tag(&action, &command->tag_id, &command->respond_when_completed);
 8001200:	4e5a      	ldr	r6, [pc, #360]	; (800136c <process_async+0x310>)
 8001202:	6831      	ldr	r1, [r6, #0]
 8001204:	1c8a      	adds	r2, r1, #2
 8001206:	310a      	adds	r1, #10
 8001208:	485c      	ldr	r0, [pc, #368]	; (800137c <process_async+0x320>)
 800120a:	f7ff f9d3 	bl	80005b4 <process_op_request_tag>
            command->is_tag_requested = true;
 800120e:	6833      	ldr	r3, [r6, #0]
 8001210:	2201      	movs	r2, #1
 8001212:	715a      	strb	r2, [r3, #5]
            break;
 8001214:	e779      	b.n	800110a <process_async+0xae>
            alp_status = process_op_return_file_data(&action, resp_command);
 8001216:	0029      	movs	r1, r5
 8001218:	4858      	ldr	r0, [pc, #352]	; (800137c <process_async+0x320>)
 800121a:	f7ff fa3d 	bl	8000698 <process_op_return_file_data>
            break;
 800121e:	e774      	b.n	800110a <process_async+0xae>
            alp_status = process_op_create_file(&action);
 8001220:	4856      	ldr	r0, [pc, #344]	; (800137c <process_async+0x320>)
 8001222:	f7ff fb5b 	bl	80008dc <process_op_create_file>
            break;
 8001226:	e770      	b.n	800110a <process_async+0xae>
            alp_status = process_op_start_itf(&action, origin_auth);
 8001228:	0021      	movs	r1, r4
 800122a:	4854      	ldr	r0, [pc, #336]	; (800137c <process_async+0x320>)
 800122c:	f7ff fa9f 	bl	800076e <process_op_start_itf>
            break;
 8001230:	e76b      	b.n	800110a <process_async+0xae>
            alp_status = process_op_stop_itf(&action, origin_auth);
 8001232:	0021      	movs	r1, r4
 8001234:	4851      	ldr	r0, [pc, #324]	; (800137c <process_async+0x320>)
 8001236:	f7ff fa9f 	bl	8000778 <process_op_stop_itf>
            break;
 800123a:	e766      	b.n	800110a <process_async+0xae>
            alp_status = ALP_STATUS_UNKNOWN_OPERATION;
 800123c:	20f6      	movs	r0, #246	; 0xf6
            error = (alp_status != ALP_STATUS_BREAK_QUERY_FAILED);
 800123e:	0003      	movs	r3, r0
 8001240:	3be3      	subs	r3, #227	; 0xe3
 8001242:	1e5a      	subs	r2, r3, #1
 8001244:	4193      	sbcs	r3, r2
 8001246:	b2de      	uxtb	r6, r3
            if(error)
 8001248:	28e3      	cmp	r0, #227	; 0xe3
 800124a:	d15e      	bne.n	800130a <process_async+0x2ae>
    if (command->use_d7aactp) {
 800124c:	4b47      	ldr	r3, [pc, #284]	; (800136c <process_async+0x310>)
 800124e:	681c      	ldr	r4, [r3, #0]
 8001250:	2336      	movs	r3, #54	; 0x36
 8001252:	5ce3      	ldrb	r3, [r4, r3]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d16e      	bne.n	8001336 <process_async+0x2da>
    if (command->is_response) {
 8001258:	7863      	ldrb	r3, [r4, #1]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d100      	bne.n	8001260 <process_async+0x204>
 800125e:	e0bb      	b.n	80013d8 <process_async+0x37c>
        alp_command_t* request_command = get_request_command(command->tag_id, command->origin_itf_id);
 8001260:	7aa7      	ldrb	r7, [r4, #10]
 8001262:	2335      	movs	r3, #53	; 0x35
 8001264:	5ce3      	ldrb	r3, [r4, r3]
 8001266:	4698      	mov	r8, r3
 8001268:	0019      	movs	r1, r3
 800126a:	0038      	movs	r0, r7
 800126c:	f7ff f8ee 	bl	800044c <get_request_command>
 8001270:	1e06      	subs	r6, r0, #0
        if(request_command == NULL) { //we have no request, clean up
 8001272:	d06d      	beq.n	8001350 <process_async+0x2f4>
        uint8_t cmd_size = fifo_get_size(&command->alp_command_fifo);
 8001274:	0020      	movs	r0, r4
 8001276:	3064      	adds	r0, #100	; 0x64
 8001278:	f00d fae1 	bl	800e83e <fifo_get_size>
 800127c:	0004      	movs	r4, r0
 800127e:	b2c3      	uxtb	r3, r0
        if (cmd_size > 0 || request_command->respond_when_completed) {
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <process_async+0x22e>
 8001284:	78b3      	ldrb	r3, [r6, #2]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d024      	beq.n	80012d4 <process_async+0x278>
            if(request_command->origin_itf_id != ALP_ITF_ID_HOST) {
 800128a:	2335      	movs	r3, #53	; 0x35
 800128c:	5cf3      	ldrb	r3, [r6, r3]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <process_async+0x23e>
                if(request_command->respond_when_completed) {
 8001292:	78b3      	ldrb	r3, [r6, #2]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d000      	beq.n	800129a <process_async+0x23e>
 8001298:	e080      	b.n	800139c <process_async+0x340>
            resp_command->is_response = true;
 800129a:	2301      	movs	r3, #1
 800129c:	706b      	strb	r3, [r5, #1]
            resp_command->is_response_completed = command->is_response_completed;
 800129e:	4f33      	ldr	r7, [pc, #204]	; (800136c <process_async+0x310>)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	78db      	ldrb	r3, [r3, #3]
 80012a4:	70eb      	strb	r3, [r5, #3]
            fifo_pop(&command->alp_command_fifo, alp_data, cmd_size);
 80012a6:	20ff      	movs	r0, #255	; 0xff
 80012a8:	4004      	ands	r4, r0
 80012aa:	4b38      	ldr	r3, [pc, #224]	; (800138c <process_async+0x330>)
 80012ac:	4698      	mov	r8, r3
 80012ae:	6838      	ldr	r0, [r7, #0]
 80012b0:	3064      	adds	r0, #100	; 0x64
 80012b2:	0022      	movs	r2, r4
 80012b4:	0019      	movs	r1, r3
 80012b6:	f00d fb60 	bl	800e97a <fifo_pop>
            fifo_put(&resp_command->alp_command_fifo, alp_data, cmd_size);
 80012ba:	0028      	movs	r0, r5
 80012bc:	3064      	adds	r0, #100	; 0x64
 80012be:	0022      	movs	r2, r4
 80012c0:	4641      	mov	r1, r8
 80012c2:	f00d fa59 	bl	800e778 <fifo_put>
            transmit_response(resp_command, request_command->origin_itf_id, &command->origin_itf_status);
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	320b      	adds	r2, #11
 80012ca:	2335      	movs	r3, #53	; 0x35
 80012cc:	5cf1      	ldrb	r1, [r6, r3]
 80012ce:	0028      	movs	r0, r5
 80012d0:	f7ff fb40 	bl	8000954 <transmit_response>
        if (command->is_response_completed) {
 80012d4:	4b25      	ldr	r3, [pc, #148]	; (800136c <process_async+0x310>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	78da      	ldrb	r2, [r3, #3]
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d100      	bne.n	80012e0 <process_async+0x284>
 80012de:	e09d      	b.n	800141c <process_async+0x3c0>
            if (request_command->origin_itf_id == ALP_ITF_ID_HOST && (init_args != NULL) && (init_args->alp_command_completed_cb != NULL)) {
 80012e0:	2235      	movs	r2, #53	; 0x35
 80012e2:	5cb2      	ldrb	r2, [r6, r2]
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	d10c      	bne.n	8001302 <process_async+0x2a6>
 80012e8:	4a29      	ldr	r2, [pc, #164]	; (8001390 <process_async+0x334>)
 80012ea:	6812      	ldr	r2, [r2, #0]
 80012ec:	2a00      	cmp	r2, #0
 80012ee:	d008      	beq.n	8001302 <process_async+0x2a6>
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	2a00      	cmp	r2, #0
 80012f4:	d005      	beq.n	8001302 <process_async+0x2a6>
                init_args->alp_command_completed_cb(request_command->tag_id, !command->is_response_error);
 80012f6:	7919      	ldrb	r1, [r3, #4]
 80012f8:	2301      	movs	r3, #1
 80012fa:	4059      	eors	r1, r3
 80012fc:	b2c9      	uxtb	r1, r1
 80012fe:	7ab0      	ldrb	r0, [r6, #10]
 8001300:	4790      	blx	r2
            free_command(request_command);
 8001302:	0030      	movs	r0, r6
 8001304:	f7ff f974 	bl	80005f0 <free_command>
 8001308:	e088      	b.n	800141c <process_async+0x3c0>
                log_print_error_string("process async process command %i went wrong with error code 0x%02X", action.ctrl.operation, alp_status);
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <process_async+0x320>)
 800130c:	7819      	ldrb	r1, [r3, #0]
 800130e:	0689      	lsls	r1, r1, #26
 8001310:	0e89      	lsrs	r1, r1, #26
 8001312:	0002      	movs	r2, r0
 8001314:	481f      	ldr	r0, [pc, #124]	; (8001394 <process_async+0x338>)
 8001316:	f00d fe63 	bl	800efe0 <log_print_error_string>
 800131a:	e797      	b.n	800124c <process_async+0x1f0>
                forward_command(command, &forward_interface_config);
 800131c:	a903      	add	r1, sp, #12
 800131e:	f7ff fdfd 	bl	8000f1c <forward_command>
                free_command(resp_command); // command itself will be free-ed when interface responds with this command
 8001322:	0028      	movs	r0, r5
 8001324:	f7ff f964 	bl	80005f0 <free_command>
                return;
 8001328:	e6a3      	b.n	8001072 <process_async+0x16>
        origin_auth = GUEST_AUTH;
 800132a:	2402      	movs	r4, #2
 800132c:	e701      	b.n	8001132 <process_async+0xd6>
    bool error = false;
 800132e:	2600      	movs	r6, #0
 8001330:	e78c      	b.n	800124c <process_async+0x1f0>
 8001332:	2600      	movs	r6, #0
 8001334:	e78a      	b.n	800124c <process_async+0x1f0>
        resp_command->forward_itf_id = command->d7aactp_interface_config.itf_id;
 8001336:	2337      	movs	r3, #55	; 0x37
 8001338:	5ce3      	ldrb	r3, [r4, r3]
 800133a:	71eb      	strb	r3, [r5, #7]
        forward_command(resp_command, &command->d7aactp_interface_config);
 800133c:	0021      	movs	r1, r4
 800133e:	3137      	adds	r1, #55	; 0x37
 8001340:	0028      	movs	r0, r5
 8001342:	f7ff fdeb 	bl	8000f1c <forward_command>
        free_command(command);
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <process_async+0x310>)
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	f7ff f951 	bl	80005f0 <free_command>
        return;
 800134e:	e690      	b.n	8001072 <process_async+0x16>
            log_print_error_string("process_async: found no request command for response command with tag %i and origin itf %i", command->tag_id, command->origin_itf_id);
 8001350:	4642      	mov	r2, r8
 8001352:	0039      	movs	r1, r7
 8001354:	4810      	ldr	r0, [pc, #64]	; (8001398 <process_async+0x33c>)
 8001356:	f00d fe43 	bl	800efe0 <log_print_error_string>
            free_command(command);
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <process_async+0x310>)
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	f7ff f947 	bl	80005f0 <free_command>
            free_command(resp_command);
 8001362:	0028      	movs	r0, r5
 8001364:	f7ff f944 	bl	80005f0 <free_command>
            return;
 8001368:	e683      	b.n	8001072 <process_async+0x16>
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	20001490 	.word	0x20001490
 8001370:	20001494 	.word	0x20001494
 8001374:	0800105d 	.word	0x0800105d
 8001378:	08016d9c 	.word	0x08016d9c
 800137c:	2000121c 	.word	0x2000121c
 8001380:	08016dec 	.word	0x08016dec
 8001384:	08016f9c 	.word	0x08016f9c
 8001388:	08016e30 	.word	0x08016e30
 800138c:	2000132c 	.word	0x2000132c
 8001390:	20001218 	.word	0x20001218
 8001394:	08016e68 	.word	0x08016e68
 8001398:	08016eac 	.word	0x08016eac
                    if(!alp_append_tag_response_action(resp_command, request_command->tag_id, command->is_response_completed, command->is_response_error)) {
 800139c:	4b33      	ldr	r3, [pc, #204]	; (800146c <process_async+0x410>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	7913      	ldrb	r3, [r2, #4]
 80013a2:	78d2      	ldrb	r2, [r2, #3]
 80013a4:	7ab1      	ldrb	r1, [r6, #10]
 80013a6:	0028      	movs	r0, r5
 80013a8:	f000 fc3b 	bl	8001c22 <alp_append_tag_response_action>
 80013ac:	2800      	cmp	r0, #0
 80013ae:	d000      	beq.n	80013b2 <process_async+0x356>
 80013b0:	e773      	b.n	800129a <process_async+0x23e>
                        log_print_error_string("process_async: command is response but no room (%i) in resp_command to add response tag", fifo_get_size(&resp_command->alp_command_fifo));
 80013b2:	0028      	movs	r0, r5
 80013b4:	3064      	adds	r0, #100	; 0x64
 80013b6:	f00d fa42 	bl	800e83e <fifo_get_size>
 80013ba:	0001      	movs	r1, r0
 80013bc:	482c      	ldr	r0, [pc, #176]	; (8001470 <process_async+0x414>)
 80013be:	f00d fe0f 	bl	800efe0 <log_print_error_string>
                        free_command(resp_command);
 80013c2:	0028      	movs	r0, r5
 80013c4:	f7ff f914 	bl	80005f0 <free_command>
                        free_command(command);
 80013c8:	4b28      	ldr	r3, [pc, #160]	; (800146c <process_async+0x410>)
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	f7ff f910 	bl	80005f0 <free_command>
                        free_command(request_command);
 80013d0:	0030      	movs	r0, r6
 80013d2:	f7ff f90d 	bl	80005f0 <free_command>
                        return;
 80013d6:	e64c      	b.n	8001072 <process_async+0x16>
        if (resp_command->is_unsollicited) {
 80013d8:	79ab      	ldrb	r3, [r5, #6]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00a      	beq.n	80013f4 <process_async+0x398>
            if(fwd_unsollicited_serial)
 80013de:	4b25      	ldr	r3, [pc, #148]	; (8001474 <process_async+0x418>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d122      	bne.n	800142c <process_async+0x3d0>
            transmit_response(resp_command, ALP_ITF_ID_HOST, &command->origin_itf_status);
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <process_async+0x410>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	320b      	adds	r2, #11
 80013ec:	2100      	movs	r1, #0
 80013ee:	0028      	movs	r0, r5
 80013f0:	f7ff fab0 	bl	8000954 <transmit_response>
        if (command->respond_when_completed) {
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <process_async+0x410>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	789a      	ldrb	r2, [r3, #2]
 80013fa:	2a00      	cmp	r2, #0
 80013fc:	d00e      	beq.n	800141c <process_async+0x3c0>
            if (command->is_tag_requested && command->origin_itf_id != ALP_ITF_ID_HOST) {
 80013fe:	795a      	ldrb	r2, [r3, #5]
 8001400:	2a00      	cmp	r2, #0
 8001402:	d003      	beq.n	800140c <process_async+0x3b0>
 8001404:	2235      	movs	r2, #53	; 0x35
 8001406:	5c9a      	ldrb	r2, [r3, r2]
 8001408:	2a00      	cmp	r2, #0
 800140a:	d116      	bne.n	800143a <process_async+0x3de>
            transmit_response(resp_command, command->origin_itf_id, NULL);
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <process_async+0x410>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	2335      	movs	r3, #53	; 0x35
 8001412:	5cd1      	ldrb	r1, [r2, r3]
 8001414:	2200      	movs	r2, #0
 8001416:	0028      	movs	r0, r5
 8001418:	f7ff fa9c 	bl	8000954 <transmit_response>
    free_command(resp_command);
 800141c:	0028      	movs	r0, r5
 800141e:	f7ff f8e7 	bl	80005f0 <free_command>
    free_command(command);
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <process_async+0x410>)
 8001424:	6818      	ldr	r0, [r3, #0]
 8001426:	f7ff f8e3 	bl	80005f0 <free_command>
    return;
 800142a:	e622      	b.n	8001072 <process_async+0x16>
                transmit_response(resp_command, ALP_ITF_ID_SERIAL, &command->origin_itf_status);
 800142c:	0022      	movs	r2, r4
 800142e:	320b      	adds	r2, #11
 8001430:	2101      	movs	r1, #1
 8001432:	0028      	movs	r0, r5
 8001434:	f7ff fa8e 	bl	8000954 <transmit_response>
 8001438:	e7d5      	b.n	80013e6 <process_async+0x38a>
                if(!alp_append_tag_response_action(resp_command, command->tag_id, true, error)) {
 800143a:	7a99      	ldrb	r1, [r3, #10]
 800143c:	0033      	movs	r3, r6
 800143e:	2201      	movs	r2, #1
 8001440:	0028      	movs	r0, r5
 8001442:	f000 fbee 	bl	8001c22 <alp_append_tag_response_action>
 8001446:	2800      	cmp	r0, #0
 8001448:	d1e0      	bne.n	800140c <process_async+0x3b0>
                    log_print_error_string("process async: tag is requested but no room (%i) for tag", fifo_get_size(&resp_command->alp_command_fifo));
 800144a:	0028      	movs	r0, r5
 800144c:	3064      	adds	r0, #100	; 0x64
 800144e:	f00d f9f6 	bl	800e83e <fifo_get_size>
 8001452:	0001      	movs	r1, r0
 8001454:	4808      	ldr	r0, [pc, #32]	; (8001478 <process_async+0x41c>)
 8001456:	f00d fdc3 	bl	800efe0 <log_print_error_string>
                    free_command(command);
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <process_async+0x410>)
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	f7ff f8c7 	bl	80005f0 <free_command>
                    free_command(resp_command);
 8001462:	0028      	movs	r0, r5
 8001464:	f7ff f8c4 	bl	80005f0 <free_command>
 8001468:	e7d0      	b.n	800140c <process_async+0x3b0>
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	20001490 	.word	0x20001490
 8001470:	08016f08 	.word	0x08016f08
 8001474:	200014cc 	.word	0x200014cc
 8001478:	08016f60 	.word	0x08016f60

0800147c <alp_layer_received_response>:
{
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	46d6      	mov	lr, sl
 8001480:	b500      	push	{lr}
 8001482:	b082      	sub	sp, #8
 8001484:	0006      	movs	r6, r0
 8001486:	9100      	str	r1, [sp, #0]
 8001488:	9201      	str	r2, [sp, #4]
 800148a:	001c      	movs	r4, r3
    alp_command_t* command = alp_layer_get_command_by_transid(trans_id, itf_status->itf_id);
 800148c:	781f      	ldrb	r7, [r3, #0]
 800148e:	0039      	movs	r1, r7
 8001490:	f7ff f816 	bl	80004c0 <alp_layer_get_command_by_transid>
 8001494:	1e05      	subs	r5, r0, #0
    if(command == NULL) {
 8001496:	d027      	beq.n	80014e8 <alp_layer_received_response+0x6c>
    alp_command_t* resp = alp_layer_command_alloc(false, false);
 8001498:	2100      	movs	r1, #0
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff faaa 	bl	80009f4 <alp_layer_command_alloc>
 80014a0:	1e07      	subs	r7, r0, #0
    if(resp == NULL) {
 80014a2:	d027      	beq.n	80014f4 <alp_layer_received_response+0x78>
    err = !alp_append_interface_status(resp, itf_status);
 80014a4:	0021      	movs	r1, r4
 80014a6:	f000 fbd4 	bl	8001c52 <alp_append_interface_status>
 80014aa:	2401      	movs	r4, #1
 80014ac:	4060      	eors	r0, r4
 80014ae:	b2c3      	uxtb	r3, r0
 80014b0:	469a      	mov	sl, r3
    err += !alp_append_tag_response_action(resp, command->tag_id, false, false);
 80014b2:	7aa9      	ldrb	r1, [r5, #10]
 80014b4:	2300      	movs	r3, #0
 80014b6:	2200      	movs	r2, #0
 80014b8:	0038      	movs	r0, r7
 80014ba:	f000 fbb2 	bl	8001c22 <alp_append_tag_response_action>
 80014be:	4044      	eors	r4, r0
 80014c0:	b2e4      	uxtb	r4, r4
 80014c2:	4454      	add	r4, sl
    resp->trans_id = trans_id;
 80014c4:	813e      	strh	r6, [r7, #8]
    err += fifo_put(&resp->alp_command_fifo, payload, payload_length);
 80014c6:	466b      	mov	r3, sp
 80014c8:	889a      	ldrh	r2, [r3, #4]
 80014ca:	0038      	movs	r0, r7
 80014cc:	3064      	adds	r0, #100	; 0x64
 80014ce:	9900      	ldr	r1, [sp, #0]
 80014d0:	f00d f952 	bl	800e778 <fifo_put>
 80014d4:	1824      	adds	r4, r4, r0
    if(err != SUCCESS) {
 80014d6:	2c00      	cmp	r4, #0
 80014d8:	d113      	bne.n	8001502 <alp_layer_received_response+0x86>
    alp_layer_process(resp);
 80014da:	0038      	movs	r0, r7
 80014dc:	f7ff fb78 	bl	8000bd0 <alp_layer_process>
}
 80014e0:	b002      	add	sp, #8
 80014e2:	bc04      	pop	{r2}
 80014e4:	4692      	mov	sl, r2
 80014e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        log_print_error_string("received response failed as command with trans id %i and itf id %i not found", trans_id, itf_status->itf_id);
 80014e8:	003a      	movs	r2, r7
 80014ea:	0031      	movs	r1, r6
 80014ec:	480a      	ldr	r0, [pc, #40]	; (8001518 <alp_layer_received_response+0x9c>)
 80014ee:	f00d fd77 	bl	800efe0 <log_print_error_string>
        return;
 80014f2:	e7f5      	b.n	80014e0 <alp_layer_received_response+0x64>
        log_print_error_string("received response failed as alloc of resp command failed");
 80014f4:	4809      	ldr	r0, [pc, #36]	; (800151c <alp_layer_received_response+0xa0>)
 80014f6:	f00d fd73 	bl	800efe0 <log_print_error_string>
        free_command(command);
 80014fa:	0028      	movs	r0, r5
 80014fc:	f7ff f878 	bl	80005f0 <free_command>
        return;
 8001500:	e7ee      	b.n	80014e0 <alp_layer_received_response+0x64>
        log_print_error_string("received response failed as alp appends failed on resp command");
 8001502:	4807      	ldr	r0, [pc, #28]	; (8001520 <alp_layer_received_response+0xa4>)
 8001504:	f00d fd6c 	bl	800efe0 <log_print_error_string>
        free_command(resp);
 8001508:	0038      	movs	r0, r7
 800150a:	f7ff f871 	bl	80005f0 <free_command>
        free_command(command);
 800150e:	0028      	movs	r0, r5
 8001510:	f7ff f86e 	bl	80005f0 <free_command>
        return;
 8001514:	e7e4      	b.n	80014e0 <alp_layer_received_response+0x64>
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	08017078 	.word	0x08017078
 800151c:	080170c8 	.word	0x080170c8
 8001520:	08017104 	.word	0x08017104

08001524 <parse_operand_start>:
static bool parse_operand_start(alp_command_t* command, alp_action_t* action)
{
    DPRINT("start interface");
    //add which interface should be started?
    return true;
}
 8001524:	2001      	movs	r0, #1
 8001526:	4770      	bx	lr

08001528 <parse_operand_stop>:
static bool parse_operand_stop(alp_command_t* command, alp_action_t* action)
{
    DPRINT("stop interface");
    //add which interface should be stopped?
    return true;
}
 8001528:	2001      	movs	r0, #1
 800152a:	4770      	bx	lr

0800152c <parse_operand_file_id>:
{
 800152c:	b510      	push	{r4, lr}
    if(fifo_pop(&command->alp_command_fifo, &action->file_id_operand.file_id, 1) != SUCCESS)
 800152e:	3104      	adds	r1, #4
 8001530:	3064      	adds	r0, #100	; 0x64
 8001532:	2201      	movs	r2, #1
 8001534:	f00d fa21 	bl	800e97a <fifo_pop>
 8001538:	2800      	cmp	r0, #0
 800153a:	d101      	bne.n	8001540 <parse_operand_file_id+0x14>
    return true;
 800153c:	3001      	adds	r0, #1
}
 800153e:	bd10      	pop	{r4, pc}
        return false;
 8001540:	2000      	movs	r0, #0
 8001542:	e7fc      	b.n	800153e <parse_operand_file_id+0x12>

08001544 <parse_operand_tag_id>:
{
 8001544:	b510      	push	{r4, lr}
    return (fifo_pop(&command->alp_command_fifo, &action->tag_id_operand.tag_id, 1) == SUCCESS);
 8001546:	3104      	adds	r1, #4
 8001548:	3064      	adds	r0, #100	; 0x64
 800154a:	2201      	movs	r2, #1
 800154c:	f00d fa15 	bl	800e97a <fifo_pop>
 8001550:	4243      	negs	r3, r0
 8001552:	4158      	adcs	r0, r3
 8001554:	b2c0      	uxtb	r0, r0
}
 8001556:	bd10      	pop	{r4, pc}

08001558 <parse_operand_file_header>:
{
 8001558:	b570      	push	{r4, r5, r6, lr}
 800155a:	000c      	movs	r4, r1
    fifo_t* cmd_fifo = &command->alp_command_fifo;
 800155c:	3064      	adds	r0, #100	; 0x64
 800155e:	0005      	movs	r5, r0
    if(fifo_pop(cmd_fifo, &action->file_header_operand.file_id, 1) != SUCCESS)
 8001560:	3104      	adds	r1, #4
 8001562:	2201      	movs	r2, #1
 8001564:	f00d fa09 	bl	800e97a <fifo_pop>
 8001568:	2800      	cmp	r0, #0
 800156a:	d001      	beq.n	8001570 <parse_operand_file_header+0x18>
        return false;
 800156c:	2000      	movs	r0, #0
}
 800156e:	bd70      	pop	{r4, r5, r6, pc}
    if(fifo_pop(cmd_fifo, (uint8_t*)&action->file_header_operand.file_header, sizeof(d7ap_fs_file_header_t)) != SUCCESS)
 8001570:	1d61      	adds	r1, r4, #5
 8001572:	220c      	movs	r2, #12
 8001574:	0028      	movs	r0, r5
 8001576:	f00d fa00 	bl	800e97a <fifo_pop>
 800157a:	2800      	cmp	r0, #0
 800157c:	d11b      	bne.n	80015b6 <parse_operand_file_header+0x5e>
    action->file_header_operand.file_header.length = __builtin_bswap32(action->file_header_operand.file_header.length);
 800157e:	68a3      	ldr	r3, [r4, #8]
 8001580:	0a1a      	lsrs	r2, r3, #8
 8001582:	7b23      	ldrb	r3, [r4, #12]
 8001584:	061b      	lsls	r3, r3, #24
 8001586:	4313      	orrs	r3, r2
 8001588:	ba1b      	rev	r3, r3
 800158a:	7263      	strb	r3, [r4, #9]
 800158c:	0a19      	lsrs	r1, r3, #8
 800158e:	72a1      	strb	r1, [r4, #10]
 8001590:	0c19      	lsrs	r1, r3, #16
 8001592:	72e1      	strb	r1, [r4, #11]
 8001594:	0e1b      	lsrs	r3, r3, #24
 8001596:	7323      	strb	r3, [r4, #12]
        = __builtin_bswap32(action->file_header_operand.file_header.allocated_length);
 8001598:	68e3      	ldr	r3, [r4, #12]
 800159a:	0a1a      	lsrs	r2, r3, #8
 800159c:	7c23      	ldrb	r3, [r4, #16]
 800159e:	061b      	lsls	r3, r3, #24
 80015a0:	4313      	orrs	r3, r2
 80015a2:	ba1b      	rev	r3, r3
 80015a4:	7363      	strb	r3, [r4, #13]
 80015a6:	0a19      	lsrs	r1, r3, #8
 80015a8:	73a1      	strb	r1, [r4, #14]
 80015aa:	0c19      	lsrs	r1, r3, #16
 80015ac:	73e1      	strb	r1, [r4, #15]
 80015ae:	0e1b      	lsrs	r3, r3, #24
 80015b0:	7423      	strb	r3, [r4, #16]
    return true;
 80015b2:	3001      	adds	r0, #1
 80015b4:	e7db      	b.n	800156e <parse_operand_file_header+0x16>
        return false;
 80015b6:	2000      	movs	r0, #0
 80015b8:	e7d9      	b.n	800156e <parse_operand_file_header+0x16>
	...

080015bc <parse_operand_indirect_interface>:
{
 80015bc:	b530      	push	{r4, r5, lr}
 80015be:	b085      	sub	sp, #20
 80015c0:	000c      	movs	r4, r1
    fifo_t* cmd_fifo = &command->alp_command_fifo;
 80015c2:	3064      	adds	r0, #100	; 0x64
 80015c4:	0005      	movs	r5, r0
    if(fifo_pop(cmd_fifo, &action->indirect_interface_operand.interface_file_id, 1) != SUCCESS)
 80015c6:	3104      	adds	r1, #4
 80015c8:	2201      	movs	r2, #1
 80015ca:	f00d f9d6 	bl	800e97a <fifo_pop>
 80015ce:	2800      	cmp	r0, #0
 80015d0:	d154      	bne.n	800167c <parse_operand_indirect_interface+0xc0>
    if (action->ctrl.b7) {
 80015d2:	2300      	movs	r3, #0
 80015d4:	56e3      	ldrsb	r3, [r4, r3]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	db02      	blt.n	80015e0 <parse_operand_indirect_interface+0x24>
    return true;
 80015da:	2001      	movs	r0, #1
}
 80015dc:	b005      	add	sp, #20
 80015de:	bd30      	pop	{r4, r5, pc}
        uint32_t length = 1;
 80015e0:	2301      	movs	r3, #1
 80015e2:	9303      	str	r3, [sp, #12]
        if(d7ap_fs_read_file(action->indirect_interface_operand.interface_file_id, 0, &itf_id, &length, ROOT_AUTH) != SUCCESS)
 80015e4:	7920      	ldrb	r0, [r4, #4]
 80015e6:	2300      	movs	r3, #0
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	ab03      	add	r3, sp, #12
 80015ec:	220b      	movs	r2, #11
 80015ee:	446a      	add	r2, sp
 80015f0:	2100      	movs	r1, #0
 80015f2:	f006 fb55 	bl	8007ca0 <d7ap_fs_read_file>
 80015f6:	2800      	cmp	r0, #0
 80015f8:	d13c      	bne.n	8001674 <parse_operand_indirect_interface+0xb8>
        for (uint8_t i = 0; i < MODULE_ALP_INTERFACE_CNT; i++) {
 80015fa:	2300      	movs	r3, #0
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d837      	bhi.n	8001670 <parse_operand_indirect_interface+0xb4>
            if (itf_id == interfaces[i]->itf_id) {
 8001600:	009a      	lsls	r2, r3, #2
 8001602:	491f      	ldr	r1, [pc, #124]	; (8001680 <parse_operand_indirect_interface+0xc4>)
 8001604:	5852      	ldr	r2, [r2, r1]
 8001606:	7811      	ldrb	r1, [r2, #0]
 8001608:	220b      	movs	r2, #11
 800160a:	446a      	add	r2, sp
 800160c:	7812      	ldrb	r2, [r2, #0]
 800160e:	4291      	cmp	r1, r2
 8001610:	d002      	beq.n	8001618 <parse_operand_indirect_interface+0x5c>
        for (uint8_t i = 0; i < MODULE_ALP_INTERFACE_CNT; i++) {
 8001612:	3301      	adds	r3, #1
 8001614:	b2db      	uxtb	r3, r3
 8001616:	e7f1      	b.n	80015fc <parse_operand_indirect_interface+0x40>
                if(fifo_pop(cmd_fifo, action->indirect_interface_operand.overload_data, 2) != SUCCESS)
 8001618:	1d61      	adds	r1, r4, #5
 800161a:	2202      	movs	r2, #2
 800161c:	0028      	movs	r0, r5
 800161e:	f00d f9ac 	bl	800e97a <fifo_pop>
 8001622:	2800      	cmp	r0, #0
 8001624:	d001      	beq.n	800162a <parse_operand_indirect_interface+0x6e>
                    return false;
 8001626:	2000      	movs	r0, #0
 8001628:	e7d8      	b.n	80015dc <parse_operand_indirect_interface+0x20>
                        ->d7ap_session_config.addressee.ctrl.id_type);
 800162a:	7a23      	ldrb	r3, [r4, #8]
 800162c:	069b      	lsls	r3, r3, #26
 800162e:	0f9b      	lsrs	r3, r3, #30
 *
 * @param[in] id_type  The addressee Id type
 * @return  The length of the addressee Id according the addressee Id type
 */
static inline uint8_t d7ap_addressee_id_length(d7ap_addressee_id_type_t id_type) {
  switch(id_type)
 8001630:	2b02      	cmp	r3, #2
 8001632:	d019      	beq.n	8001668 <parse_operand_indirect_interface+0xac>
 8001634:	d80d      	bhi.n	8001652 <parse_operand_indirect_interface+0x96>
 8001636:	2b00      	cmp	r3, #0
 8001638:	d018      	beq.n	800166c <parse_operand_indirect_interface+0xb0>
 800163a:	2b01      	cmp	r3, #1
 800163c:	d10d      	bne.n	800165a <parse_operand_indirect_interface+0x9e>
 800163e:	2200      	movs	r2, #0
                if(fifo_pop(cmd_fifo, action->indirect_interface_operand.overload_data + 2, id_len) != SUCCESS)
 8001640:	b292      	uxth	r2, r2
 8001642:	1de1      	adds	r1, r4, #7
 8001644:	0028      	movs	r0, r5
 8001646:	f00d f998 	bl	800e97a <fifo_pop>
 800164a:	2800      	cmp	r0, #0
 800164c:	d014      	beq.n	8001678 <parse_operand_indirect_interface+0xbc>
                    return false;
 800164e:	2000      	movs	r0, #0
 8001650:	e7c4      	b.n	80015dc <parse_operand_indirect_interface+0x20>
 8001652:	2b03      	cmp	r3, #3
 8001654:	d101      	bne.n	800165a <parse_operand_indirect_interface+0x9e>
      case ID_TYPE_NBID:
        return ID_TYPE_NBID_ID_LENGTH;
      case ID_TYPE_UID:
        return ID_TYPE_UID_ID_LENGTH;
      case ID_TYPE_VID:
        return ID_TYPE_VID_LENGTH;
 8001656:	2202      	movs	r2, #2
 8001658:	e7f2      	b.n	8001640 <parse_operand_indirect_interface+0x84>
      default:
        assert(false);
 800165a:	2190      	movs	r1, #144	; 0x90
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <parse_operand_indirect_interface+0xc8>)
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <parse_operand_indirect_interface+0xcc>)
 8001660:	0049      	lsls	r1, r1, #1
 8001662:	480a      	ldr	r0, [pc, #40]	; (800168c <parse_operand_indirect_interface+0xd0>)
 8001664:	f006 ffcc 	bl	8008600 <__assert_func>
        return ID_TYPE_UID_ID_LENGTH;
 8001668:	2208      	movs	r2, #8
 800166a:	e7e9      	b.n	8001640 <parse_operand_indirect_interface+0x84>
        return ID_TYPE_NBID_ID_LENGTH;
 800166c:	2201      	movs	r2, #1
 800166e:	e7e7      	b.n	8001640 <parse_operand_indirect_interface+0x84>
        return false;
 8001670:	2000      	movs	r0, #0
 8001672:	e7b3      	b.n	80015dc <parse_operand_indirect_interface+0x20>
            return false;
 8001674:	2000      	movs	r0, #0
 8001676:	e7b1      	b.n	80015dc <parse_operand_indirect_interface+0x20>
                return true;
 8001678:	2001      	movs	r0, #1
 800167a:	e7af      	b.n	80015dc <parse_operand_indirect_interface+0x20>
        return false;
 800167c:	2000      	movs	r0, #0
 800167e:	e7ad      	b.n	80015dc <parse_operand_indirect_interface+0x20>
 8001680:	20001780 	.word	0x20001780
 8001684:	080169c8 	.word	0x080169c8
 8001688:	08017310 	.word	0x08017310
 800168c:	080169d0 	.word	0x080169d0

08001690 <parse_op_forward>:
{
 8001690:	b570      	push	{r4, r5, r6, lr}
 8001692:	000c      	movs	r4, r1
    fifo_t* cmd_fifo = &command->alp_command_fifo;
 8001694:	3064      	adds	r0, #100	; 0x64
 8001696:	0005      	movs	r5, r0
    if(fifo_pop(cmd_fifo, &action->interface_config.itf_id, 1) != SUCCESS)
 8001698:	3104      	adds	r1, #4
 800169a:	2201      	movs	r2, #1
 800169c:	f00d f96d 	bl	800e97a <fifo_pop>
 80016a0:	2800      	cmp	r0, #0
 80016a2:	d146      	bne.n	8001732 <parse_op_forward+0xa2>
    if (action->interface_config.itf_id == ALP_ITF_ID_D7ASP) {
 80016a4:	7920      	ldrb	r0, [r4, #4]
 80016a6:	28d7      	cmp	r0, #215	; 0xd7
 80016a8:	d00b      	beq.n	80016c2 <parse_op_forward+0x32>
    for (uint8_t i = 0; i < MODULE_ALP_INTERFACE_CNT; i++) {
 80016aa:	2300      	movs	r3, #0
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	d83e      	bhi.n	800172e <parse_op_forward+0x9e>
        if (action->interface_config.itf_id == interfaces[i]->itf_id) {
 80016b0:	009a      	lsls	r2, r3, #2
 80016b2:	4922      	ldr	r1, [pc, #136]	; (800173c <parse_op_forward+0xac>)
 80016b4:	5852      	ldr	r2, [r2, r1]
 80016b6:	7811      	ldrb	r1, [r2, #0]
 80016b8:	4288      	cmp	r0, r1
 80016ba:	d02f      	beq.n	800171c <parse_op_forward+0x8c>
    for (uint8_t i = 0; i < MODULE_ALP_INTERFACE_CNT; i++) {
 80016bc:	3301      	adds	r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	e7f4      	b.n	80016ac <parse_op_forward+0x1c>
        if(fifo_pop(cmd_fifo, action->interface_config.itf_config, min_size) != SUCCESS)
 80016c2:	1d61      	adds	r1, r4, #5
 80016c4:	2204      	movs	r2, #4
 80016c6:	0028      	movs	r0, r5
 80016c8:	f00d f957 	bl	800e97a <fifo_pop>
 80016cc:	2800      	cmp	r0, #0
 80016ce:	d001      	beq.n	80016d4 <parse_op_forward+0x44>
            return false;
 80016d0:	2000      	movs	r0, #0
 80016d2:	e02d      	b.n	8001730 <parse_op_forward+0xa0>
        uint8_t id_len = d7ap_addressee_id_length(((alp_interface_config_d7ap_t*)&(action->interface_config))->d7ap_session_config.addressee.ctrl.id_type);
 80016d4:	79e3      	ldrb	r3, [r4, #7]
 80016d6:	069b      	lsls	r3, r3, #26
 80016d8:	0f9b      	lsrs	r3, r3, #30
  switch(id_type)
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d01a      	beq.n	8001714 <parse_op_forward+0x84>
 80016de:	d80e      	bhi.n	80016fe <parse_op_forward+0x6e>
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d019      	beq.n	8001718 <parse_op_forward+0x88>
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10e      	bne.n	8001706 <parse_op_forward+0x76>
 80016e8:	2200      	movs	r2, #0
        return (fifo_pop(cmd_fifo, action->interface_config.itf_config + min_size, id_len) == SUCCESS);
 80016ea:	b292      	uxth	r2, r2
 80016ec:	0021      	movs	r1, r4
 80016ee:	3109      	adds	r1, #9
 80016f0:	0028      	movs	r0, r5
 80016f2:	f00d f942 	bl	800e97a <fifo_pop>
 80016f6:	4243      	negs	r3, r0
 80016f8:	4158      	adcs	r0, r3
 80016fa:	b2c0      	uxtb	r0, r0
 80016fc:	e018      	b.n	8001730 <parse_op_forward+0xa0>
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d101      	bne.n	8001706 <parse_op_forward+0x76>
        return ID_TYPE_VID_LENGTH;
 8001702:	2202      	movs	r2, #2
 8001704:	e7f1      	b.n	80016ea <parse_op_forward+0x5a>
        assert(false);
 8001706:	2190      	movs	r1, #144	; 0x90
 8001708:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <parse_op_forward+0xb0>)
 800170a:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <parse_op_forward+0xb4>)
 800170c:	0049      	lsls	r1, r1, #1
 800170e:	480e      	ldr	r0, [pc, #56]	; (8001748 <parse_op_forward+0xb8>)
 8001710:	f006 ff76 	bl	8008600 <__assert_func>
        return ID_TYPE_UID_ID_LENGTH;
 8001714:	2208      	movs	r2, #8
 8001716:	e7e8      	b.n	80016ea <parse_op_forward+0x5a>
        return ID_TYPE_NBID_ID_LENGTH;
 8001718:	2201      	movs	r2, #1
 800171a:	e7e6      	b.n	80016ea <parse_op_forward+0x5a>
            if(fifo_pop(cmd_fifo, action->interface_config.itf_config, interfaces[i]->itf_cfg_len) != SUCCESS)
 800171c:	1d61      	adds	r1, r4, #5
 800171e:	7852      	ldrb	r2, [r2, #1]
 8001720:	0028      	movs	r0, r5
 8001722:	f00d f92a 	bl	800e97a <fifo_pop>
 8001726:	2800      	cmp	r0, #0
 8001728:	d005      	beq.n	8001736 <parse_op_forward+0xa6>
                return false;
 800172a:	2000      	movs	r0, #0
 800172c:	e000      	b.n	8001730 <parse_op_forward+0xa0>
    return false;
 800172e:	2000      	movs	r0, #0
}
 8001730:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 8001732:	2000      	movs	r0, #0
 8001734:	e7fc      	b.n	8001730 <parse_op_forward+0xa0>
            return true;
 8001736:	2001      	movs	r0, #1
 8001738:	e7fa      	b.n	8001730 <parse_op_forward+0xa0>
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	20001780 	.word	0x20001780
 8001740:	080169c8 	.word	0x080169c8
 8001744:	08017310 	.word	0x08017310
 8001748:	080169d0 	.word	0x080169d0

0800174c <parse_operand_interface_config>:
{
 800174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174e:	000c      	movs	r4, r1
    fifo_t* cmd_fifo = &command->alp_command_fifo;
 8001750:	3064      	adds	r0, #100	; 0x64
 8001752:	0005      	movs	r5, r0
    if(fifo_pop(cmd_fifo, &action->interface_config.itf_id, 1) != SUCCESS)
 8001754:	3104      	adds	r1, #4
 8001756:	2201      	movs	r2, #1
 8001758:	f00d f90f 	bl	800e97a <fifo_pop>
 800175c:	2800      	cmp	r0, #0
 800175e:	d149      	bne.n	80017f4 <parse_operand_interface_config+0xa8>
    for (uint8_t i = 0; i < MODULE_ALP_INTERFACE_CNT; i++) {
 8001760:	2300      	movs	r3, #0
 8001762:	2b05      	cmp	r3, #5
 8001764:	d844      	bhi.n	80017f0 <parse_operand_interface_config+0xa4>
        if (action->interface_config.itf_id == interfaces[i]->itf_id) {
 8001766:	7921      	ldrb	r1, [r4, #4]
 8001768:	009a      	lsls	r2, r3, #2
 800176a:	4824      	ldr	r0, [pc, #144]	; (80017fc <parse_operand_interface_config+0xb0>)
 800176c:	5812      	ldr	r2, [r2, r0]
 800176e:	7810      	ldrb	r0, [r2, #0]
 8001770:	4281      	cmp	r1, r0
 8001772:	d002      	beq.n	800177a <parse_operand_interface_config+0x2e>
    for (uint8_t i = 0; i < MODULE_ALP_INTERFACE_CNT; i++) {
 8001774:	3301      	adds	r3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	e7f3      	b.n	8001762 <parse_operand_interface_config+0x16>
            if (action->interface_config.itf_id == ALP_ITF_ID_D7ASP) {
 800177a:	29d7      	cmp	r1, #215	; 0xd7
 800177c:	d008      	beq.n	8001790 <parse_operand_interface_config+0x44>
                if(fifo_pop(&command->alp_command_fifo, action->interface_config.itf_config, interfaces[i]->itf_cfg_len) != SUCCESS)
 800177e:	1d61      	adds	r1, r4, #5
 8001780:	7852      	ldrb	r2, [r2, #1]
 8001782:	0028      	movs	r0, r5
 8001784:	f00d f8f9 	bl	800e97a <fifo_pop>
 8001788:	2800      	cmp	r0, #0
 800178a:	d135      	bne.n	80017f8 <parse_operand_interface_config+0xac>
            return true;
 800178c:	2001      	movs	r0, #1
 800178e:	e030      	b.n	80017f2 <parse_operand_interface_config+0xa6>
                uint8_t min_size = interfaces[i]->itf_cfg_len - 8; // substract max size of responder ID
 8001790:	7852      	ldrb	r2, [r2, #1]
 8001792:	3a08      	subs	r2, #8
 8001794:	b2d7      	uxtb	r7, r2
                if(fifo_pop(cmd_fifo, action->interface_config.itf_config, min_size) != SUCCESS)
 8001796:	1d66      	adds	r6, r4, #5
 8001798:	003a      	movs	r2, r7
 800179a:	0031      	movs	r1, r6
 800179c:	0028      	movs	r0, r5
 800179e:	f00d f8ec 	bl	800e97a <fifo_pop>
 80017a2:	2800      	cmp	r0, #0
 80017a4:	d001      	beq.n	80017aa <parse_operand_interface_config+0x5e>
                    return false;
 80017a6:	2000      	movs	r0, #0
 80017a8:	e023      	b.n	80017f2 <parse_operand_interface_config+0xa6>
                                                   ->addressee.ctrl.id_type);
 80017aa:	79e3      	ldrb	r3, [r4, #7]
 80017ac:	069b      	lsls	r3, r3, #26
 80017ae:	0f9b      	lsrs	r3, r3, #30
  switch(id_type)
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d019      	beq.n	80017e8 <parse_operand_interface_config+0x9c>
 80017b4:	d80d      	bhi.n	80017d2 <parse_operand_interface_config+0x86>
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d018      	beq.n	80017ec <parse_operand_interface_config+0xa0>
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d10d      	bne.n	80017da <parse_operand_interface_config+0x8e>
 80017be:	2200      	movs	r2, #0
                if(fifo_pop(&command->alp_command_fifo, action->interface_config.itf_config + min_size, id_len) != SUCCESS)
 80017c0:	b292      	uxth	r2, r2
 80017c2:	19f1      	adds	r1, r6, r7
 80017c4:	0028      	movs	r0, r5
 80017c6:	f00d f8d8 	bl	800e97a <fifo_pop>
 80017ca:	2800      	cmp	r0, #0
 80017cc:	d0de      	beq.n	800178c <parse_operand_interface_config+0x40>
                    return false;
 80017ce:	2000      	movs	r0, #0
 80017d0:	e00f      	b.n	80017f2 <parse_operand_interface_config+0xa6>
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d101      	bne.n	80017da <parse_operand_interface_config+0x8e>
        return ID_TYPE_VID_LENGTH;
 80017d6:	2202      	movs	r2, #2
 80017d8:	e7f2      	b.n	80017c0 <parse_operand_interface_config+0x74>
        assert(false);
 80017da:	2190      	movs	r1, #144	; 0x90
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <parse_operand_interface_config+0xb4>)
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <parse_operand_interface_config+0xb8>)
 80017e0:	0049      	lsls	r1, r1, #1
 80017e2:	4809      	ldr	r0, [pc, #36]	; (8001808 <parse_operand_interface_config+0xbc>)
 80017e4:	f006 ff0c 	bl	8008600 <__assert_func>
        return ID_TYPE_UID_ID_LENGTH;
 80017e8:	2208      	movs	r2, #8
 80017ea:	e7e9      	b.n	80017c0 <parse_operand_interface_config+0x74>
        return ID_TYPE_NBID_ID_LENGTH;
 80017ec:	2201      	movs	r2, #1
 80017ee:	e7e7      	b.n	80017c0 <parse_operand_interface_config+0x74>
    return false;
 80017f0:	2000      	movs	r0, #0
}
 80017f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
 80017f4:	2000      	movs	r0, #0
 80017f6:	e7fc      	b.n	80017f2 <parse_operand_interface_config+0xa6>
                    return false;
 80017f8:	2000      	movs	r0, #0
 80017fa:	e7fa      	b.n	80017f2 <parse_operand_interface_config+0xa6>
 80017fc:	20001780 	.word	0x20001780
 8001800:	080169c8 	.word	0x080169c8
 8001804:	08017310 	.word	0x08017310
 8001808:	080169d0 	.word	0x080169d0

0800180c <alp_register_interface>:
{
 800180c:	b510      	push	{r4, lr}
  for(uint8_t i=0; i < MODULE_ALP_INTERFACE_CNT; i++) {
 800180e:	2300      	movs	r3, #0
 8001810:	2b05      	cmp	r3, #5
 8001812:	d814      	bhi.n	800183e <alp_register_interface+0x32>
    if(interfaces[i] == NULL) {                 //interface empty, add new one
 8001814:	009a      	lsls	r2, r3, #2
 8001816:	490b      	ldr	r1, [pc, #44]	; (8001844 <alp_register_interface+0x38>)
 8001818:	5852      	ldr	r2, [r2, r1]
 800181a:	2a00      	cmp	r2, #0
 800181c:	d006      	beq.n	800182c <alp_register_interface+0x20>
    } else if(interfaces[i]->itf_id == itf->itf_id) { //interface already present, only update
 800181e:	7811      	ldrb	r1, [r2, #0]
 8001820:	7802      	ldrb	r2, [r0, #0]
 8001822:	4291      	cmp	r1, r2
 8001824:	d006      	beq.n	8001834 <alp_register_interface+0x28>
  for(uint8_t i=0; i < MODULE_ALP_INTERFACE_CNT; i++) {
 8001826:	3301      	adds	r3, #1
 8001828:	b2db      	uxtb	r3, r3
 800182a:	e7f1      	b.n	8001810 <alp_register_interface+0x4>
      interfaces[i] = itf;
 800182c:	009c      	lsls	r4, r3, #2
 800182e:	5060      	str	r0, [r4, r1]
      return ALP_STATUS_OK;
 8001830:	2000      	movs	r0, #0
 8001832:	e005      	b.n	8001840 <alp_register_interface+0x34>
      interfaces[i] = itf;
 8001834:	009c      	lsls	r4, r3, #2
 8001836:	4b03      	ldr	r3, [pc, #12]	; (8001844 <alp_register_interface+0x38>)
 8001838:	50e0      	str	r0, [r4, r3]
      return ALP_STATUS_PARTIALLY_COMPLETED; 
 800183a:	2001      	movs	r0, #1
 800183c:	e000      	b.n	8001840 <alp_register_interface+0x34>
  return ALP_STATUS_UNKNOWN_ERROR;                  //all slots are taken, return error
 800183e:	2080      	movs	r0, #128	; 0x80
}
 8001840:	bd10      	pop	{r4, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	20001780 	.word	0x20001780

08001848 <alp_parse_length_operand>:
{
 8001848:	b570      	push	{r4, r5, r6, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	0006      	movs	r6, r0
 800184e:	000d      	movs	r5, r1
    uint8_t len = 0;
 8001850:	466b      	mov	r3, sp
 8001852:	1dd9      	adds	r1, r3, #7
 8001854:	2300      	movs	r3, #0
 8001856:	700b      	strb	r3, [r1, #0]
    if(fifo_pop(cmd_fifo, &len, 1) != SUCCESS)
 8001858:	2201      	movs	r2, #1
 800185a:	f00d f88e 	bl	800e97a <fifo_pop>
 800185e:	2800      	cmp	r0, #0
 8001860:	d123      	bne.n	80018aa <alp_parse_length_operand+0x62>
    uint8_t field_len = len >> 6;
 8001862:	466b      	mov	r3, sp
 8001864:	79da      	ldrb	r2, [r3, #7]
 8001866:	0994      	lsrs	r4, r2, #6
    if(field_len == 0) {
 8001868:	d01a      	beq.n	80018a0 <alp_parse_length_operand+0x58>
    *length = (len & 0x3F) << ( 8 * field_len); // mask field length specificier bits and shift before adding other length bytes
 800186a:	233f      	movs	r3, #63	; 0x3f
 800186c:	4013      	ands	r3, r2
 800186e:	00e2      	lsls	r2, r4, #3
 8001870:	4093      	lsls	r3, r2
 8001872:	602b      	str	r3, [r5, #0]
    for(; field_len > 0; field_len--) {
 8001874:	2c00      	cmp	r4, #0
 8001876:	d016      	beq.n	80018a6 <alp_parse_length_operand+0x5e>
        if(fifo_pop(cmd_fifo, &len, 1) != SUCCESS)
 8001878:	2201      	movs	r2, #1
 800187a:	466b      	mov	r3, sp
 800187c:	1dd9      	adds	r1, r3, #7
 800187e:	0030      	movs	r0, r6
 8001880:	f00d f87b 	bl	800e97a <fifo_pop>
 8001884:	2800      	cmp	r0, #0
 8001886:	d113      	bne.n	80018b0 <alp_parse_length_operand+0x68>
        *length += len << (8 * (field_len - 1));
 8001888:	3c01      	subs	r4, #1
 800188a:	00e2      	lsls	r2, r4, #3
 800188c:	466b      	mov	r3, sp
 800188e:	3307      	adds	r3, #7
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	4093      	lsls	r3, r2
 8001894:	682a      	ldr	r2, [r5, #0]
 8001896:	4694      	mov	ip, r2
 8001898:	4463      	add	r3, ip
 800189a:	602b      	str	r3, [r5, #0]
    for(; field_len > 0; field_len--) {
 800189c:	b2e4      	uxtb	r4, r4
 800189e:	e7e9      	b.n	8001874 <alp_parse_length_operand+0x2c>
        *length = (uint32_t)len;
 80018a0:	602a      	str	r2, [r5, #0]
        return true;
 80018a2:	3001      	adds	r0, #1
 80018a4:	e002      	b.n	80018ac <alp_parse_length_operand+0x64>
    return true;
 80018a6:	2001      	movs	r0, #1
 80018a8:	e000      	b.n	80018ac <alp_parse_length_operand+0x64>
        return false;
 80018aa:	2000      	movs	r0, #0
}
 80018ac:	b002      	add	sp, #8
 80018ae:	bd70      	pop	{r4, r5, r6, pc}
            return false;
 80018b0:	2000      	movs	r0, #0
 80018b2:	e7fb      	b.n	80018ac <alp_parse_length_operand+0x64>

080018b4 <parse_operand_status>:
{
 80018b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b6:	b083      	sub	sp, #12
 80018b8:	000d      	movs	r5, r1
 80018ba:	001e      	movs	r6, r3
    fifo_t* cmd_fifo = &command->alp_command_fifo;
 80018bc:	3064      	adds	r0, #100	; 0x64
 80018be:	0007      	movs	r7, r0
    if (!b7 && !b6) {
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <parse_operand_status+0x14>
 80018c4:	2a00      	cmp	r2, #0
 80018c6:	d005      	beq.n	80018d4 <parse_operand_status+0x20>
    } else if (!b7 && b6) {
 80018c8:	2e00      	cmp	r6, #0
 80018ca:	d122      	bne.n	8001912 <parse_operand_status+0x5e>
 80018cc:	2a00      	cmp	r2, #0
 80018ce:	d106      	bne.n	80018de <parse_operand_status+0x2a>
        return false;
 80018d0:	0014      	movs	r4, r2
 80018d2:	e01f      	b.n	8001914 <parse_operand_status+0x60>
        fifo_skip(cmd_fifo, 1);
 80018d4:	2101      	movs	r1, #1
 80018d6:	f00d f805 	bl	800e8e4 <fifo_skip>
    return true;
 80018da:	2401      	movs	r4, #1
        fifo_skip(cmd_fifo, 1);
 80018dc:	e01a      	b.n	8001914 <parse_operand_status+0x60>
        if(fifo_pop(cmd_fifo, &action->interface_status.itf_id, 1) != SUCCESS)
 80018de:	1d29      	adds	r1, r5, #4
 80018e0:	2201      	movs	r2, #1
 80018e2:	0038      	movs	r0, r7
 80018e4:	f00d f849 	bl	800e97a <fifo_pop>
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d001      	beq.n	80018f0 <parse_operand_status+0x3c>
            return false;
 80018ec:	0034      	movs	r4, r6
 80018ee:	e011      	b.n	8001914 <parse_operand_status+0x60>
        if(!alp_parse_length_operand(cmd_fifo, &temp_len))
 80018f0:	a901      	add	r1, sp, #4
 80018f2:	0038      	movs	r0, r7
 80018f4:	f7ff ffa8 	bl	8001848 <alp_parse_length_operand>
 80018f8:	1e04      	subs	r4, r0, #0
 80018fa:	d0f7      	beq.n	80018ec <parse_operand_status+0x38>
        action->interface_status.len = (uint8_t) temp_len;
 80018fc:	9b01      	ldr	r3, [sp, #4]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	716a      	strb	r2, [r5, #5]
        if(fifo_pop(cmd_fifo, action->interface_status.itf_status, action->interface_status.len) != SUCCESS)
 8001902:	1da9      	adds	r1, r5, #6
 8001904:	b292      	uxth	r2, r2
 8001906:	0038      	movs	r0, r7
 8001908:	f00d f837 	bl	800e97a <fifo_pop>
 800190c:	2800      	cmp	r0, #0
 800190e:	d001      	beq.n	8001914 <parse_operand_status+0x60>
 8001910:	e7ec      	b.n	80018ec <parse_operand_status+0x38>
        return false;
 8001912:	2400      	movs	r4, #0
}
 8001914:	0020      	movs	r0, r4
 8001916:	b003      	add	sp, #12
 8001918:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800191a <alp_fifo_append_length_operand>:
bool alp_fifo_append_length_operand(fifo_t* cmd_fifo, uint32_t length) {
 800191a:	b570      	push	{r4, r5, r6, lr}
 800191c:	b084      	sub	sp, #16
 800191e:	0006      	movs	r6, r0
 8001920:	9101      	str	r1, [sp, #4]
    if (length < 64) {
 8001922:	293f      	cmp	r1, #63	; 0x3f
 8001924:	d92a      	bls.n	800197c <alp_fifo_append_length_operand+0x62>
    if (length > 0x3FFF)
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	01db      	lsls	r3, r3, #7
 800192a:	4299      	cmp	r1, r3
 800192c:	d22e      	bcs.n	800198c <alp_fifo_append_length_operand+0x72>
    uint8_t size = 1;
 800192e:	2401      	movs	r4, #1
    if (length > 0x3FFFFF)
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	03db      	lsls	r3, r3, #15
 8001934:	4299      	cmp	r1, r3
 8001936:	d300      	bcc.n	800193a <alp_fifo_append_length_operand+0x20>
        size = 3;
 8001938:	2403      	movs	r4, #3
    byte += (size << 6); // length specifier bits
 800193a:	01a3      	lsls	r3, r4, #6
 800193c:	b2db      	uxtb	r3, r3
 800193e:	466a      	mov	r2, sp
 8001940:	73d3      	strb	r3, [r2, #15]
    byte += ((uint8_t*)(&length))[size];
 8001942:	aa01      	add	r2, sp, #4
 8001944:	5d12      	ldrb	r2, [r2, r4]
 8001946:	189b      	adds	r3, r3, r2
 8001948:	466a      	mov	r2, sp
 800194a:	73d3      	strb	r3, [r2, #15]
    rc = fifo_put(cmd_fifo, &byte, 1);
 800194c:	2201      	movs	r2, #1
 800194e:	230f      	movs	r3, #15
 8001950:	446b      	add	r3, sp
 8001952:	0019      	movs	r1, r3
 8001954:	0030      	movs	r0, r6
 8001956:	f00c ff0f 	bl	800e778 <fifo_put>
 800195a:	0005      	movs	r5, r0
        size--;
 800195c:	3c01      	subs	r4, #1
 800195e:	b2e4      	uxtb	r4, r4
        rc += fifo_put(cmd_fifo, (uint8_t*)&length + size, 1);
 8001960:	ab01      	add	r3, sp, #4
 8001962:	1919      	adds	r1, r3, r4
 8001964:	2201      	movs	r2, #1
 8001966:	0030      	movs	r0, r6
 8001968:	f00c ff06 	bl	800e778 <fifo_put>
 800196c:	182d      	adds	r5, r5, r0
    } while (size > 0);
 800196e:	2c00      	cmp	r4, #0
 8001970:	d1f4      	bne.n	800195c <alp_fifo_append_length_operand+0x42>
    return rc == SUCCESS;
 8001972:	4268      	negs	r0, r5
 8001974:	4168      	adcs	r0, r5
 8001976:	b2c0      	uxtb	r0, r0
}
 8001978:	b004      	add	sp, #16
 800197a:	bd70      	pop	{r4, r5, r6, pc}
        return (fifo_put(cmd_fifo, (uint8_t*)&length, 1) == SUCCESS);
 800197c:	2201      	movs	r2, #1
 800197e:	a901      	add	r1, sp, #4
 8001980:	f00c fefa 	bl	800e778 <fifo_put>
 8001984:	4243      	negs	r3, r0
 8001986:	4158      	adcs	r0, r3
 8001988:	b2c0      	uxtb	r0, r0
 800198a:	e7f5      	b.n	8001978 <alp_fifo_append_length_operand+0x5e>
        size = 2;
 800198c:	2402      	movs	r4, #2
 800198e:	e7cf      	b.n	8001930 <alp_fifo_append_length_operand+0x16>

08001990 <alp_parse_file_offset_operand>:
{
 8001990:	b570      	push	{r4, r5, r6, lr}
 8001992:	0005      	movs	r5, r0
 8001994:	000c      	movs	r4, r1
    if(fifo_pop(cmd_fifo, &operand->file_id, 1) != SUCCESS)
 8001996:	2201      	movs	r2, #1
 8001998:	f00c ffef 	bl	800e97a <fifo_pop>
 800199c:	2800      	cmp	r0, #0
 800199e:	d001      	beq.n	80019a4 <alp_parse_file_offset_operand+0x14>
        return false;
 80019a0:	2000      	movs	r0, #0
}
 80019a2:	bd70      	pop	{r4, r5, r6, pc}
    return alp_parse_length_operand(cmd_fifo, &operand->offset);
 80019a4:	1d21      	adds	r1, r4, #4
 80019a6:	0028      	movs	r0, r5
 80019a8:	f7ff ff4e 	bl	8001848 <alp_parse_length_operand>
 80019ac:	e7f9      	b.n	80019a2 <alp_parse_file_offset_operand+0x12>

080019ae <parse_operand_file_data>:
{
 80019ae:	b570      	push	{r4, r5, r6, lr}
 80019b0:	000d      	movs	r5, r1
    fifo_t* cmd_fifo = &command->alp_command_fifo;
 80019b2:	3064      	adds	r0, #100	; 0x64
 80019b4:	0006      	movs	r6, r0
    if(!alp_parse_file_offset_operand(cmd_fifo, &action->file_data_operand.file_offset))
 80019b6:	3104      	adds	r1, #4
 80019b8:	f7ff ffea 	bl	8001990 <alp_parse_file_offset_operand>
 80019bc:	1e04      	subs	r4, r0, #0
 80019be:	d101      	bne.n	80019c4 <parse_operand_file_data+0x16>
}
 80019c0:	0020      	movs	r0, r4
 80019c2:	bd70      	pop	{r4, r5, r6, pc}
    if(!alp_parse_length_operand(cmd_fifo, &action->file_data_operand.provided_data_length))
 80019c4:	0029      	movs	r1, r5
 80019c6:	310c      	adds	r1, #12
 80019c8:	0030      	movs	r0, r6
 80019ca:	f7ff ff3d 	bl	8001848 <alp_parse_length_operand>
 80019ce:	1e04      	subs	r4, r0, #0
 80019d0:	d0f6      	beq.n	80019c0 <parse_operand_file_data+0x12>
    if(action->file_data_operand.provided_data_length > sizeof(action->file_data_operand.data))
 80019d2:	68ea      	ldr	r2, [r5, #12]
 80019d4:	2aff      	cmp	r2, #255	; 0xff
 80019d6:	d901      	bls.n	80019dc <parse_operand_file_data+0x2e>
        return false;
 80019d8:	2400      	movs	r4, #0
 80019da:	e7f1      	b.n	80019c0 <parse_operand_file_data+0x12>
    if(fifo_pop(cmd_fifo, action->file_data_operand.data, action->file_data_operand.provided_data_length) != SUCCESS)
 80019dc:	0029      	movs	r1, r5
 80019de:	3110      	adds	r1, #16
 80019e0:	b292      	uxth	r2, r2
 80019e2:	0030      	movs	r0, r6
 80019e4:	f00c ffc9 	bl	800e97a <fifo_pop>
 80019e8:	2800      	cmp	r0, #0
 80019ea:	d0e9      	beq.n	80019c0 <parse_operand_file_data+0x12>
        return false;
 80019ec:	2400      	movs	r4, #0
 80019ee:	e7e7      	b.n	80019c0 <parse_operand_file_data+0x12>

080019f0 <parse_operand_file_data_request>:
{
 80019f0:	b570      	push	{r4, r5, r6, lr}
 80019f2:	000c      	movs	r4, r1
    if(!alp_parse_file_offset_operand(&command->alp_command_fifo, &action->file_data_request_operand.file_offset))
 80019f4:	3064      	adds	r0, #100	; 0x64
 80019f6:	0005      	movs	r5, r0
 80019f8:	3104      	adds	r1, #4
 80019fa:	f7ff ffc9 	bl	8001990 <alp_parse_file_offset_operand>
 80019fe:	2800      	cmp	r0, #0
 8001a00:	d100      	bne.n	8001a04 <parse_operand_file_data_request+0x14>
}
 8001a02:	bd70      	pop	{r4, r5, r6, pc}
    if(!alp_parse_length_operand(&command->alp_command_fifo, &action->file_data_request_operand.requested_data_length))
 8001a04:	0021      	movs	r1, r4
 8001a06:	310c      	adds	r1, #12
 8001a08:	0028      	movs	r0, r5
 8001a0a:	f7ff ff1d 	bl	8001848 <alp_parse_length_operand>
 8001a0e:	e7f8      	b.n	8001a02 <parse_operand_file_data_request+0x12>

08001a10 <parse_operand_query>:
{
 8001a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a12:	46c6      	mov	lr, r8
 8001a14:	b500      	push	{lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	0007      	movs	r7, r0
 8001a1a:	000c      	movs	r4, r1
    fifo_t* cmd_fifo = &command->alp_command_fifo;
 8001a1c:	0006      	movs	r6, r0
 8001a1e:	3664      	adds	r6, #100	; 0x64
    if(fifo_pop(cmd_fifo, &action->query_operand.code.raw, 1) != SUCCESS)
 8001a20:	3104      	adds	r1, #4
 8001a22:	2201      	movs	r2, #1
 8001a24:	0030      	movs	r0, r6
 8001a26:	f00c ffa8 	bl	800e97a <fifo_pop>
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	d150      	bne.n	8001ad0 <parse_operand_query+0xc0>
    if(action->query_operand.code.type != QUERY_CODE_TYPE_ARITHM_COMP_WITH_VALUE_IN_QUERY)
 8001a2e:	7923      	ldrb	r3, [r4, #4]
 8001a30:	221f      	movs	r2, #31
 8001a32:	0019      	movs	r1, r3
 8001a34:	4391      	bics	r1, r2
 8001a36:	2940      	cmp	r1, #64	; 0x40
 8001a38:	d150      	bne.n	8001adc <parse_operand_query+0xcc>
    if(action->query_operand.code.mask)
 8001a3a:	06db      	lsls	r3, r3, #27
 8001a3c:	d501      	bpl.n	8001a42 <parse_operand_query+0x32>
        return false;
 8001a3e:	2500      	movs	r5, #0
 8001a40:	e047      	b.n	8001ad2 <parse_operand_query+0xc2>
    if(!alp_parse_length_operand(cmd_fifo, &temp))
 8001a42:	a907      	add	r1, sp, #28
 8001a44:	0030      	movs	r0, r6
 8001a46:	f7ff feff 	bl	8001848 <alp_parse_length_operand>
 8001a4a:	1e05      	subs	r5, r0, #0
 8001a4c:	d041      	beq.n	8001ad2 <parse_operand_query+0xc2>
    action->query_operand.compare_operand_length = temp;
 8001a4e:	9a07      	ldr	r2, [sp, #28]
 8001a50:	7162      	strb	r2, [r4, #5]
 8001a52:	0a11      	lsrs	r1, r2, #8
 8001a54:	71a1      	strb	r1, [r4, #6]
 8001a56:	0c11      	lsrs	r1, r2, #16
 8001a58:	71e1      	strb	r1, [r4, #7]
 8001a5a:	0e11      	lsrs	r1, r2, #24
 8001a5c:	7221      	strb	r1, [r4, #8]
    if (action->query_operand.compare_operand_length > ALP_QUERY_COMPARE_BODY_MAX_SIZE)
 8001a5e:	2a64      	cmp	r2, #100	; 0x64
 8001a60:	d901      	bls.n	8001a66 <parse_operand_query+0x56>
        return false;
 8001a62:	2500      	movs	r5, #0
 8001a64:	e035      	b.n	8001ad2 <parse_operand_query+0xc2>
    if(fifo_pop(cmd_fifo, action->query_operand.compare_body, (uint16_t)action->query_operand.compare_operand_length) != SUCCESS)
 8001a66:	2309      	movs	r3, #9
 8001a68:	4698      	mov	r8, r3
 8001a6a:	44a0      	add	r8, r4
 8001a6c:	b292      	uxth	r2, r2
 8001a6e:	4641      	mov	r1, r8
 8001a70:	0030      	movs	r0, r6
 8001a72:	f00c ff82 	bl	800e97a <fifo_pop>
 8001a76:	2800      	cmp	r0, #0
 8001a78:	d001      	beq.n	8001a7e <parse_operand_query+0x6e>
        return false;
 8001a7a:	2500      	movs	r5, #0
 8001a7c:	e029      	b.n	8001ad2 <parse_operand_query+0xc2>
    uint16_t subset_size = sizeof(alp_operand_file_offset_t) > fifo_get_size(cmd_fifo) ? fifo_get_size(cmd_fifo) : sizeof(alp_operand_file_offset_t);
 8001a7e:	0030      	movs	r0, r6
 8001a80:	f00c fedd 	bl	800e83e <fifo_get_size>
 8001a84:	2807      	cmp	r0, #7
 8001a86:	d91e      	bls.n	8001ac6 <parse_operand_query+0xb6>
 8001a88:	2308      	movs	r3, #8
    fifo_init_subview(&temp_fifo, cmd_fifo, 0, subset_size);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	0031      	movs	r1, r6
 8001a8e:	a803      	add	r0, sp, #12
 8001a90:	f00c feea 	bl	800e868 <fifo_init_subview>
    if(!alp_parse_file_offset_operand(&temp_fifo, &temp_offset)) // TODO assuming only 1 file offset operant. Why does this get discarded?
 8001a94:	a901      	add	r1, sp, #4
 8001a96:	a803      	add	r0, sp, #12
 8001a98:	f7ff ff7a 	bl	8001990 <alp_parse_file_offset_operand>
 8001a9c:	1e05      	subs	r5, r0, #0
 8001a9e:	d018      	beq.n	8001ad2 <parse_operand_query+0xc2>
    if (fifo_pop(cmd_fifo, action->query_operand.compare_body + action->query_operand.compare_operand_length,
 8001aa0:	6863      	ldr	r3, [r4, #4]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	7a21      	ldrb	r1, [r4, #8]
 8001aa6:	0609      	lsls	r1, r1, #24
 8001aa8:	4319      	orrs	r1, r3
        temp_fifo.head_idx - cmd_fifo->head_idx) != SUCCESS)
 8001aaa:	ab03      	add	r3, sp, #12
 8001aac:	881a      	ldrh	r2, [r3, #0]
 8001aae:	2364      	movs	r3, #100	; 0x64
 8001ab0:	5afb      	ldrh	r3, [r7, r3]
    if (fifo_pop(cmd_fifo, action->query_operand.compare_body + action->query_operand.compare_operand_length,
 8001ab2:	1ad2      	subs	r2, r2, r3
 8001ab4:	b292      	uxth	r2, r2
 8001ab6:	4441      	add	r1, r8
 8001ab8:	0030      	movs	r0, r6
 8001aba:	f00c ff5e 	bl	800e97a <fifo_pop>
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	d007      	beq.n	8001ad2 <parse_operand_query+0xc2>
        return false;
 8001ac2:	2500      	movs	r5, #0
 8001ac4:	e005      	b.n	8001ad2 <parse_operand_query+0xc2>
    uint16_t subset_size = sizeof(alp_operand_file_offset_t) > fifo_get_size(cmd_fifo) ? fifo_get_size(cmd_fifo) : sizeof(alp_operand_file_offset_t);
 8001ac6:	0030      	movs	r0, r6
 8001ac8:	f00c feb9 	bl	800e83e <fifo_get_size>
 8001acc:	0003      	movs	r3, r0
 8001ace:	e7dc      	b.n	8001a8a <parse_operand_query+0x7a>
        return false;
 8001ad0:	2500      	movs	r5, #0
}
 8001ad2:	0028      	movs	r0, r5
 8001ad4:	b008      	add	sp, #32
 8001ad6:	bc04      	pop	{r2}
 8001ad8:	4690      	mov	r8, r2
 8001ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return false;
 8001adc:	2500      	movs	r5, #0
 8001ade:	e7f8      	b.n	8001ad2 <parse_operand_query+0xc2>

08001ae0 <alp_fifo_append_return_file_data_action>:
bool alp_fifo_append_return_file_data_action(fifo_t* cmd_fifo, uint8_t file_id, uint32_t offset, uint32_t length, uint8_t* data) {
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	46c6      	mov	lr, r8
 8001ae4:	b500      	push	{lr}
 8001ae6:	0006      	movs	r6, r0
 8001ae8:	4688      	mov	r8, r1
 8001aea:	0017      	movs	r7, r2
 8001aec:	001d      	movs	r5, r3
    rc = fifo_put_byte(cmd_fifo, ALP_OP_RETURN_FILE_DATA);
 8001aee:	2120      	movs	r1, #32
 8001af0:	f00c fe9a 	bl	800e828 <fifo_put_byte>
 8001af4:	0004      	movs	r4, r0
    rc += fifo_put_byte(cmd_fifo, file_id);
 8001af6:	4641      	mov	r1, r8
 8001af8:	0030      	movs	r0, r6
 8001afa:	f00c fe95 	bl	800e828 <fifo_put_byte>
 8001afe:	1824      	adds	r4, r4, r0
    rc += !alp_fifo_append_length_operand(cmd_fifo, offset);
 8001b00:	0039      	movs	r1, r7
 8001b02:	0030      	movs	r0, r6
 8001b04:	f7ff ff09 	bl	800191a <alp_fifo_append_length_operand>
 8001b08:	2701      	movs	r7, #1
 8001b0a:	4078      	eors	r0, r7
 8001b0c:	b2c0      	uxtb	r0, r0
 8001b0e:	1824      	adds	r4, r4, r0
    rc += !alp_fifo_append_length_operand(cmd_fifo, length);
 8001b10:	0029      	movs	r1, r5
 8001b12:	0030      	movs	r0, r6
 8001b14:	f7ff ff01 	bl	800191a <alp_fifo_append_length_operand>
 8001b18:	4078      	eors	r0, r7
 8001b1a:	b2c0      	uxtb	r0, r0
 8001b1c:	1824      	adds	r4, r4, r0
    if(data != NULL)
 8001b1e:	9b06      	ldr	r3, [sp, #24]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <alp_fifo_append_return_file_data_action+0x50>
        rc += fifo_put(cmd_fifo, data, length);
 8001b24:	b2aa      	uxth	r2, r5
 8001b26:	0019      	movs	r1, r3
 8001b28:	0030      	movs	r0, r6
 8001b2a:	f00c fe25 	bl	800e778 <fifo_put>
 8001b2e:	1824      	adds	r4, r4, r0
    return rc == SUCCESS;
 8001b30:	4260      	negs	r0, r4
 8001b32:	4160      	adcs	r0, r4
 8001b34:	b2c0      	uxtb	r0, r0
}
 8001b36:	bc04      	pop	{r2}
 8001b38:	4690      	mov	r8, r2
 8001b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b3c <alp_append_return_file_data_action>:
bool alp_append_return_file_data_action(alp_command_t* command, uint8_t file_id, uint32_t offset, uint32_t length, uint8_t* data) {
 8001b3c:	b510      	push	{r4, lr}
 8001b3e:	b082      	sub	sp, #8
    return alp_fifo_append_return_file_data_action(&command->alp_command_fifo, file_id, offset, length, data);
 8001b40:	3064      	adds	r0, #100	; 0x64
 8001b42:	9c04      	ldr	r4, [sp, #16]
 8001b44:	9400      	str	r4, [sp, #0]
 8001b46:	f7ff ffcb 	bl	8001ae0 <alp_fifo_append_return_file_data_action>
}
 8001b4a:	b002      	add	sp, #8
 8001b4c:	bd10      	pop	{r4, pc}
	...

08001b50 <alp_parse_action>:

bool alp_parse_action(alp_command_t* command, alp_action_t* action)
{
 8001b50:	b570      	push	{r4, r5, r6, lr}
 8001b52:	0005      	movs	r5, r0
 8001b54:	000c      	movs	r4, r1
    fifo_t* cmd_fifo = &command->alp_command_fifo;
 8001b56:	3064      	adds	r0, #100	; 0x64
    if(fifo_pop(cmd_fifo, &action->ctrl.raw, 1) != SUCCESS)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f00c ff0e 	bl	800e97a <fifo_pop>
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d143      	bne.n	8001bea <alp_parse_action+0x9a>
        return false;
    DPRINT("ALP op %i", action->ctrl.operation);
    bool succeeded;
    
    switch (action->ctrl.operation) {
 8001b62:	7823      	ldrb	r3, [r4, #0]
 8001b64:	069b      	lsls	r3, r3, #26
 8001b66:	0e9b      	lsrs	r3, r3, #26
 8001b68:	2b36      	cmp	r3, #54	; 0x36
 8001b6a:	d840      	bhi.n	8001bee <alp_parse_action+0x9e>
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4a21      	ldr	r2, [pc, #132]	; (8001bf4 <alp_parse_action+0xa4>)
 8001b70:	58d3      	ldr	r3, [r2, r3]
 8001b72:	469f      	mov	pc, r3
    case ALP_OP_WRITE_FILE_DATA:
    case ALP_OP_RETURN_FILE_DATA:
        succeeded = parse_operand_file_data(command, action);
 8001b74:	0021      	movs	r1, r4
 8001b76:	0028      	movs	r0, r5
 8001b78:	f7ff ff19 	bl	80019ae <parse_operand_file_data>
        break;
 8001b7c:	e038      	b.n	8001bf0 <alp_parse_action+0xa0>
    case ALP_OP_READ_FILE_DATA:
        succeeded = parse_operand_file_data_request(command, action);
 8001b7e:	0021      	movs	r1, r4
 8001b80:	0028      	movs	r0, r5
 8001b82:	f7ff ff35 	bl	80019f0 <parse_operand_file_data_request>
        break;
 8001b86:	e033      	b.n	8001bf0 <alp_parse_action+0xa0>
    case ALP_OP_READ_FILE_PROPERTIES:
        succeeded = parse_operand_file_id(command, action);
 8001b88:	0021      	movs	r1, r4
 8001b8a:	0028      	movs	r0, r5
 8001b8c:	f7ff fcce 	bl	800152c <parse_operand_file_id>
        break;
 8001b90:	e02e      	b.n	8001bf0 <alp_parse_action+0xa0>
    case ALP_OP_WRITE_FILE_PROPERTIES:
    case ALP_OP_CREATE_FILE:
        succeeded = parse_operand_file_header(command, action);
 8001b92:	0021      	movs	r1, r4
 8001b94:	0028      	movs	r0, r5
 8001b96:	f7ff fcdf 	bl	8001558 <parse_operand_file_header>
        break;
 8001b9a:	e029      	b.n	8001bf0 <alp_parse_action+0xa0>
    case ALP_OP_STATUS:
        succeeded = parse_operand_status(command, action, action->ctrl.b6, action->ctrl.b7);
 8001b9c:	7822      	ldrb	r2, [r4, #0]
 8001b9e:	09d3      	lsrs	r3, r2, #7
 8001ba0:	0652      	lsls	r2, r2, #25
 8001ba2:	0fd2      	lsrs	r2, r2, #31
 8001ba4:	0021      	movs	r1, r4
 8001ba6:	0028      	movs	r0, r5
 8001ba8:	f7ff fe84 	bl	80018b4 <parse_operand_status>
        break;
 8001bac:	e020      	b.n	8001bf0 <alp_parse_action+0xa0>
    case ALP_OP_BREAK_QUERY:
    case ALP_OP_ACTION_QUERY:
        succeeded = parse_operand_query(command, action);
 8001bae:	0021      	movs	r1, r4
 8001bb0:	0028      	movs	r0, r5
 8001bb2:	f7ff ff2d 	bl	8001a10 <parse_operand_query>
        break;
 8001bb6:	e01b      	b.n	8001bf0 <alp_parse_action+0xa0>
    case ALP_OP_RESPONSE_TAG:
    case ALP_OP_REQUEST_TAG:
        succeeded = parse_operand_tag_id(command, action);
 8001bb8:	0021      	movs	r1, r4
 8001bba:	0028      	movs	r0, r5
 8001bbc:	f7ff fcc2 	bl	8001544 <parse_operand_tag_id>
        break;
 8001bc0:	e016      	b.n	8001bf0 <alp_parse_action+0xa0>
    case ALP_OP_FORWARD:
        succeeded = parse_operand_interface_config(command, action);
 8001bc2:	0021      	movs	r1, r4
 8001bc4:	0028      	movs	r0, r5
 8001bc6:	f7ff fdc1 	bl	800174c <parse_operand_interface_config>
        break;
 8001bca:	e011      	b.n	8001bf0 <alp_parse_action+0xa0>
    case ALP_OP_INDIRECT_FORWARD:
        succeeded = parse_operand_indirect_interface(command, action);
 8001bcc:	0021      	movs	r1, r4
 8001bce:	0028      	movs	r0, r5
 8001bd0:	f7ff fcf4 	bl	80015bc <parse_operand_indirect_interface>
        break;
 8001bd4:	e00c      	b.n	8001bf0 <alp_parse_action+0xa0>
    case ALP_OP_START_ITF:
        succeeded = parse_operand_start(command, action);
 8001bd6:	0021      	movs	r1, r4
 8001bd8:	0028      	movs	r0, r5
 8001bda:	f7ff fca3 	bl	8001524 <parse_operand_start>
        break;
 8001bde:	e007      	b.n	8001bf0 <alp_parse_action+0xa0>
    case ALP_OP_STOP_ITF:
        succeeded = parse_operand_stop(command, action);
 8001be0:	0021      	movs	r1, r4
 8001be2:	0028      	movs	r0, r5
 8001be4:	f7ff fca0 	bl	8001528 <parse_operand_stop>
        break;
 8001be8:	e002      	b.n	8001bf0 <alp_parse_action+0xa0>
        return false;
 8001bea:	2000      	movs	r0, #0
 8001bec:	e000      	b.n	8001bf0 <alp_parse_action+0xa0>
    switch (action->ctrl.operation) {
 8001bee:	2000      	movs	r0, #0
    default:
        succeeded = false;
    }
    return succeeded;
}
 8001bf0:	bd70      	pop	{r4, r5, r6, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	08017158 	.word	0x08017158

08001bf8 <alp_append_tag_request_action>:
    DPRINT("Expected ALP response length=%i", expected_response_length);
    return (int)expected_response_length;
}

bool alp_append_tag_request_action(alp_command_t* command, uint8_t tag_id, bool eop)
{
 8001bf8:	b570      	push	{r4, r5, r6, lr}
 8001bfa:	000e      	movs	r6, r1
    fifo_t* cmd_fifo = &command->alp_command_fifo;
 8001bfc:	3064      	adds	r0, #100	; 0x64
 8001bfe:	0005      	movs	r5, r0
    DPRINT("append tag req %i", tag_id);
    uint8_t op = ALP_OP_REQUEST_TAG | (eop << 7);
 8001c00:	01d2      	lsls	r2, r2, #7
 8001c02:	2134      	movs	r1, #52	; 0x34
 8001c04:	430a      	orrs	r2, r1
 8001c06:	b252      	sxtb	r2, r2
 8001c08:	b2d1      	uxtb	r1, r2
    int rc = fifo_put_byte(cmd_fifo, op);
 8001c0a:	f00c fe0d 	bl	800e828 <fifo_put_byte>
 8001c0e:	0004      	movs	r4, r0
    rc += fifo_put_byte(cmd_fifo, tag_id);
 8001c10:	0031      	movs	r1, r6
 8001c12:	0028      	movs	r0, r5
 8001c14:	f00c fe08 	bl	800e828 <fifo_put_byte>
 8001c18:	1820      	adds	r0, r4, r0
    return (rc == SUCCESS);
 8001c1a:	4244      	negs	r4, r0
 8001c1c:	4160      	adcs	r0, r4
 8001c1e:	b2c0      	uxtb	r0, r0
}
 8001c20:	bd70      	pop	{r4, r5, r6, pc}

08001c22 <alp_append_tag_response_action>:
    uint8_t op = ALP_OP_STOP_ITF;
    return (fifo_put_byte(&command->alp_command_fifo, op) == SUCCESS);
}

bool alp_append_tag_response_action(alp_command_t* command, uint8_t tag_id, bool eop, bool err)
{
 8001c22:	b570      	push	{r4, r5, r6, lr}
 8001c24:	000d      	movs	r5, r1
    fifo_t* cmd_fifo = &command->alp_command_fifo;
 8001c26:	3064      	adds	r0, #100	; 0x64
 8001c28:	0004      	movs	r4, r0
    DPRINT("append tag resp %i err %i", tag_id, err);
    uint8_t op = ALP_OP_RESPONSE_TAG | (eop << 7) | (err << 6);
 8001c2a:	01d2      	lsls	r2, r2, #7
 8001c2c:	2123      	movs	r1, #35	; 0x23
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	b252      	sxtb	r2, r2
 8001c32:	019b      	lsls	r3, r3, #6
 8001c34:	431a      	orrs	r2, r3
 8001c36:	b252      	sxtb	r2, r2
 8001c38:	b2d1      	uxtb	r1, r2
    int rc = fifo_put_byte(cmd_fifo, op);
 8001c3a:	f00c fdf5 	bl	800e828 <fifo_put_byte>
 8001c3e:	0006      	movs	r6, r0
    rc += fifo_put_byte(cmd_fifo, tag_id);
 8001c40:	0029      	movs	r1, r5
 8001c42:	0020      	movs	r0, r4
 8001c44:	f00c fdf0 	bl	800e828 <fifo_put_byte>
 8001c48:	1830      	adds	r0, r6, r0
    return (rc == SUCCESS);
 8001c4a:	4246      	negs	r6, r0
 8001c4c:	4170      	adcs	r0, r6
 8001c4e:	b2c0      	uxtb	r0, r0
}
 8001c50:	bd70      	pop	{r4, r5, r6, pc}

08001c52 <alp_append_interface_status>:
    rc += fifo_put(cmd_fifo, data, length);
    return (rc == SUCCESS);
}

bool alp_append_interface_status(alp_command_t* command, alp_interface_status_t* status)
{
 8001c52:	b570      	push	{r4, r5, r6, lr}
 8001c54:	000e      	movs	r6, r1
    fifo_t* cmd_fifo = &command->alp_command_fifo;
 8001c56:	3064      	adds	r0, #100	; 0x64
 8001c58:	0005      	movs	r5, r0
    int rc = fifo_put_byte(cmd_fifo, ALP_OP_STATUS + (1 << 6));
 8001c5a:	2162      	movs	r1, #98	; 0x62
 8001c5c:	f00c fde4 	bl	800e828 <fifo_put_byte>
 8001c60:	0004      	movs	r4, r0
    rc += fifo_put(cmd_fifo, (uint8_t*)status, status->len + 2);
 8001c62:	7872      	ldrb	r2, [r6, #1]
 8001c64:	3202      	adds	r2, #2
 8001c66:	0031      	movs	r1, r6
 8001c68:	0028      	movs	r0, r5
 8001c6a:	f00c fd85 	bl	800e778 <fifo_put>
 8001c6e:	1820      	adds	r0, r4, r0
    return (rc == SUCCESS);
 8001c70:	4244      	negs	r4, r0
 8001c72:	4160      	adcs	r0, r4
 8001c74:	b2c0      	uxtb	r0, r0
}
 8001c76:	bd70      	pop	{r4, r5, r6, pc}

08001c78 <alp_length_operand_coded_length>:
            .allocated_length = __builtin_bswap32(length) } };
    rc += fifo_put(cmd_fifo, (uint8_t*)&header, sizeof(alp_operand_file_header_t));
    return (rc == SUCCESS);
}

uint8_t alp_length_operand_coded_length(uint32_t length) {
 8001c78:	0003      	movs	r3, r0
  uint8_t coded_len = 1;
  if(length > 0x3F)
 8001c7a:	283f      	cmp	r0, #63	; 0x3f
 8001c7c:	d80a      	bhi.n	8001c94 <alp_length_operand_coded_length+0x1c>
  uint8_t coded_len = 1;
 8001c7e:	2001      	movs	r0, #1
    coded_len = 2;

  if(length > 0x3FFF)
 8001c80:	2280      	movs	r2, #128	; 0x80
 8001c82:	01d2      	lsls	r2, r2, #7
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d300      	bcc.n	8001c8a <alp_length_operand_coded_length+0x12>
    coded_len = 3;
 8001c88:	2003      	movs	r0, #3

  if(length > 0x3FFFFF)
 8001c8a:	2280      	movs	r2, #128	; 0x80
 8001c8c:	03d2      	lsls	r2, r2, #15
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d202      	bcs.n	8001c98 <alp_length_operand_coded_length+0x20>
    coded_len = 4;

  return coded_len;
}
 8001c92:	4770      	bx	lr
    coded_len = 2;
 8001c94:	2002      	movs	r0, #2
 8001c96:	e7f3      	b.n	8001c80 <alp_length_operand_coded_length+0x8>
    coded_len = 4;
 8001c98:	2004      	movs	r0, #4
 8001c9a:	e7fa      	b.n	8001c92 <alp_length_operand_coded_length+0x1a>

08001c9c <alp_get_expected_response_length>:
{
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	0001      	movs	r1, r0
    memcpy(&command_copy, command, sizeof(alp_command_t)); // use a copy, so we don't pop from the original command
 8001ca2:	22ba      	movs	r2, #186	; 0xba
 8001ca4:	0052      	lsls	r2, r2, #1
 8001ca6:	4877      	ldr	r0, [pc, #476]	; (8001e84 <alp_get_expected_response_length+0x1e8>)
 8001ca8:	f013 f892 	bl	8014dd0 <memcpy>
    uint32_t length = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	9303      	str	r3, [sp, #12]
    error_t e = 0;
 8001cb0:	2400      	movs	r4, #0
    uint8_t expected_response_length = 0;
 8001cb2:	2500      	movs	r5, #0
    while (fifo_get_size(command_copy_fifo) > 0) {
 8001cb4:	4874      	ldr	r0, [pc, #464]	; (8001e88 <alp_get_expected_response_length+0x1ec>)
 8001cb6:	f00c fdc2 	bl	800e83e <fifo_get_size>
 8001cba:	2800      	cmp	r0, #0
 8001cbc:	d100      	bne.n	8001cc0 <alp_get_expected_response_length+0x24>
 8001cbe:	e0da      	b.n	8001e76 <alp_get_expected_response_length+0x1da>
        if(fifo_pop(command_copy_fifo, &control.raw, 1) != SUCCESS)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	a901      	add	r1, sp, #4
 8001cc4:	4870      	ldr	r0, [pc, #448]	; (8001e88 <alp_get_expected_response_length+0x1ec>)
 8001cc6:	f00c fe58 	bl	800e97a <fifo_pop>
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d000      	beq.n	8001cd0 <alp_get_expected_response_length+0x34>
 8001cce:	e0cf      	b.n	8001e70 <alp_get_expected_response_length+0x1d4>
        switch (control.operation) {
 8001cd0:	ab01      	add	r3, sp, #4
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	069b      	lsls	r3, r3, #26
 8001cd6:	0e9b      	lsrs	r3, r3, #26
 8001cd8:	2b36      	cmp	r3, #54	; 0x36
 8001cda:	d900      	bls.n	8001cde <alp_get_expected_response_length+0x42>
 8001cdc:	e0be      	b.n	8001e5c <alp_get_expected_response_length+0x1c0>
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4a6a      	ldr	r2, [pc, #424]	; (8001e8c <alp_get_expected_response_length+0x1f0>)
 8001ce2:	58d3      	ldr	r3, [r2, r3]
 8001ce4:	469f      	mov	pc, r3
            e += fifo_skip(command_copy_fifo, 1); // skip file ID
 8001ce6:	4e68      	ldr	r6, [pc, #416]	; (8001e88 <alp_get_expected_response_length+0x1ec>)
 8001ce8:	2101      	movs	r1, #1
 8001cea:	0030      	movs	r0, r6
 8001cec:	f00c fdfa 	bl	800e8e4 <fifo_skip>
 8001cf0:	1824      	adds	r4, r4, r0
            e += !alp_parse_length_operand(command_copy_fifo, &offset);
 8001cf2:	a902      	add	r1, sp, #8
 8001cf4:	0030      	movs	r0, r6
 8001cf6:	f7ff fda7 	bl	8001848 <alp_parse_length_operand>
 8001cfa:	2701      	movs	r7, #1
 8001cfc:	4078      	eors	r0, r7
 8001cfe:	b2c0      	uxtb	r0, r0
 8001d00:	1824      	adds	r4, r4, r0
            e += !alp_parse_length_operand(command_copy_fifo, &length);
 8001d02:	a903      	add	r1, sp, #12
 8001d04:	0030      	movs	r0, r6
 8001d06:	f7ff fd9f 	bl	8001848 <alp_parse_length_operand>
 8001d0a:	4078      	eors	r0, r7
 8001d0c:	b2c0      	uxtb	r0, r0
 8001d0e:	1824      	adds	r4, r4, r0
            expected_response_length += alp_length_operand_coded_length(length); // the length of the provided data operand
 8001d10:	9803      	ldr	r0, [sp, #12]
 8001d12:	f7ff ffb1 	bl	8001c78 <alp_length_operand_coded_length>
 8001d16:	182d      	adds	r5, r5, r0
 8001d18:	b2ed      	uxtb	r5, r5
            expected_response_length += alp_length_operand_coded_length(offset) + 1; // the length of the offset operand
 8001d1a:	9802      	ldr	r0, [sp, #8]
 8001d1c:	f7ff ffac 	bl	8001c78 <alp_length_operand_coded_length>
 8001d20:	3001      	adds	r0, #1
 8001d22:	182d      	adds	r5, r5, r0
 8001d24:	b2ed      	uxtb	r5, r5
            expected_response_length += 1; // the opcode
 8001d26:	3501      	adds	r5, #1
 8001d28:	b2ed      	uxtb	r5, r5
            break;
 8001d2a:	e7c3      	b.n	8001cb4 <alp_get_expected_response_length+0x18>
            e += fifo_skip(command_copy_fifo, 1); //skip file ID
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	4856      	ldr	r0, [pc, #344]	; (8001e88 <alp_get_expected_response_length+0x1ec>)
 8001d30:	f00c fdd8 	bl	800e8e4 <fifo_skip>
 8001d34:	1824      	adds	r4, r4, r0
            break;
 8001d36:	e7bd      	b.n	8001cb4 <alp_get_expected_response_length+0x18>
            e += fifo_skip(command_copy_fifo, 1); // skip tag ID operand
 8001d38:	2101      	movs	r1, #1
 8001d3a:	4853      	ldr	r0, [pc, #332]	; (8001e88 <alp_get_expected_response_length+0x1ec>)
 8001d3c:	f00c fdd2 	bl	800e8e4 <fifo_skip>
 8001d40:	1824      	adds	r4, r4, r0
            expected_response_length += 2;
 8001d42:	3502      	adds	r5, #2
 8001d44:	b2ed      	uxtb	r5, r5
            break;
 8001d46:	e7b5      	b.n	8001cb4 <alp_get_expected_response_length+0x18>
            e += fifo_skip(command_copy_fifo, 1); // skip tag ID operand
 8001d48:	2101      	movs	r1, #1
 8001d4a:	484f      	ldr	r0, [pc, #316]	; (8001e88 <alp_get_expected_response_length+0x1ec>)
 8001d4c:	f00c fdca 	bl	800e8e4 <fifo_skip>
 8001d50:	1824      	adds	r4, r4, r0
            break;
 8001d52:	e7af      	b.n	8001cb4 <alp_get_expected_response_length+0x18>
            e += fifo_skip(command_copy_fifo, 1); // skip file ID
 8001d54:	4e4c      	ldr	r6, [pc, #304]	; (8001e88 <alp_get_expected_response_length+0x1ec>)
 8001d56:	2101      	movs	r1, #1
 8001d58:	0030      	movs	r0, r6
 8001d5a:	f00c fdc3 	bl	800e8e4 <fifo_skip>
 8001d5e:	1824      	adds	r4, r4, r0
            e += !alp_parse_length_operand(command_copy_fifo, &data_len); // offset
 8001d60:	a902      	add	r1, sp, #8
 8001d62:	0030      	movs	r0, r6
 8001d64:	f7ff fd70 	bl	8001848 <alp_parse_length_operand>
 8001d68:	2701      	movs	r7, #1
 8001d6a:	4078      	eors	r0, r7
 8001d6c:	b2c0      	uxtb	r0, r0
 8001d6e:	1824      	adds	r4, r4, r0
            e += !alp_parse_length_operand(command_copy_fifo, &data_len);
 8001d70:	a902      	add	r1, sp, #8
 8001d72:	0030      	movs	r0, r6
 8001d74:	f7ff fd68 	bl	8001848 <alp_parse_length_operand>
 8001d78:	4078      	eors	r0, r7
 8001d7a:	b2c0      	uxtb	r0, r0
 8001d7c:	1824      	adds	r4, r4, r0
            e += fifo_skip(command_copy_fifo, data_len);
 8001d7e:	9b02      	ldr	r3, [sp, #8]
 8001d80:	b299      	uxth	r1, r3
 8001d82:	0030      	movs	r0, r6
 8001d84:	f00c fdae 	bl	800e8e4 <fifo_skip>
 8001d88:	1824      	adds	r4, r4, r0
            break;
 8001d8a:	e793      	b.n	8001cb4 <alp_get_expected_response_length+0x18>
            e += !parse_op_forward(&command_copy, &action);
 8001d8c:	4940      	ldr	r1, [pc, #256]	; (8001e90 <alp_get_expected_response_length+0x1f4>)
 8001d8e:	483d      	ldr	r0, [pc, #244]	; (8001e84 <alp_get_expected_response_length+0x1e8>)
 8001d90:	f7ff fc7e 	bl	8001690 <parse_op_forward>
 8001d94:	2301      	movs	r3, #1
 8001d96:	4058      	eors	r0, r3
 8001d98:	b2c0      	uxtb	r0, r0
 8001d9a:	1824      	adds	r4, r4, r0
            break;
 8001d9c:	e78a      	b.n	8001cb4 <alp_get_expected_response_length+0x18>
            e += fifo_skip(command_copy_fifo, 1); // skip interface file id
 8001d9e:	2101      	movs	r1, #1
 8001da0:	4839      	ldr	r0, [pc, #228]	; (8001e88 <alp_get_expected_response_length+0x1ec>)
 8001da2:	f00c fd9f 	bl	800e8e4 <fifo_skip>
 8001da6:	1824      	adds	r4, r4, r0
            if(control.b7)
 8001da8:	ab01      	add	r3, sp, #4
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	b25b      	sxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	da80      	bge.n	8001cb4 <alp_get_expected_response_length+0x18>
                return -EPERM;
 8001db2:	2001      	movs	r0, #1
 8001db4:	4240      	negs	r0, r0
 8001db6:	e053      	b.n	8001e60 <alp_get_expected_response_length+0x1c4>
            e += fifo_skip(command_copy_fifo, (1 + sizeof(d7ap_fs_file_header_t))); // skip file ID & header
 8001db8:	210d      	movs	r1, #13
 8001dba:	4833      	ldr	r0, [pc, #204]	; (8001e88 <alp_get_expected_response_length+0x1ec>)
 8001dbc:	f00c fd92 	bl	800e8e4 <fifo_skip>
 8001dc0:	1824      	adds	r4, r4, r0
            break;
 8001dc2:	e777      	b.n	8001cb4 <alp_get_expected_response_length+0x18>
            e += fifo_skip(command_copy_fifo, 1);
 8001dc4:	4e30      	ldr	r6, [pc, #192]	; (8001e88 <alp_get_expected_response_length+0x1ec>)
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	0030      	movs	r0, r6
 8001dca:	f00c fd8b 	bl	800e8e4 <fifo_skip>
 8001dce:	1824      	adds	r4, r4, r0
            e += !alp_parse_length_operand(command_copy_fifo, &length);
 8001dd0:	a903      	add	r1, sp, #12
 8001dd2:	0030      	movs	r0, r6
 8001dd4:	f7ff fd38 	bl	8001848 <alp_parse_length_operand>
 8001dd8:	2701      	movs	r7, #1
 8001dda:	4078      	eors	r0, r7
 8001ddc:	b2c0      	uxtb	r0, r0
 8001dde:	1824      	adds	r4, r4, r0
            e += fifo_skip(command_copy_fifo, (uint16_t)length);
 8001de0:	9b03      	ldr	r3, [sp, #12]
 8001de2:	b299      	uxth	r1, r3
 8001de4:	0030      	movs	r0, r6
 8001de6:	f00c fd7d 	bl	800e8e4 <fifo_skip>
 8001dea:	1824      	adds	r4, r4, r0
            e += fifo_skip(command_copy_fifo, 1);
 8001dec:	2101      	movs	r1, #1
 8001dee:	0030      	movs	r0, r6
 8001df0:	f00c fd78 	bl	800e8e4 <fifo_skip>
 8001df4:	1824      	adds	r4, r4, r0
            e += !alp_parse_length_operand(command_copy_fifo, &length);
 8001df6:	a903      	add	r1, sp, #12
 8001df8:	0030      	movs	r0, r6
 8001dfa:	f7ff fd25 	bl	8001848 <alp_parse_length_operand>
 8001dfe:	4078      	eors	r0, r7
 8001e00:	b2c0      	uxtb	r0, r0
 8001e02:	1824      	adds	r4, r4, r0
            break;
 8001e04:	e756      	b.n	8001cb4 <alp_get_expected_response_length+0x18>
            if (!control.b6 && !control.b7) {
 8001e06:	ab01      	add	r3, sp, #4
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	065b      	lsls	r3, r3, #25
 8001e0c:	d403      	bmi.n	8001e16 <alp_get_expected_response_length+0x17a>
 8001e0e:	ab01      	add	r3, sp, #4
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	09db      	lsrs	r3, r3, #7
 8001e14:	d01c      	beq.n	8001e50 <alp_get_expected_response_length+0x1b4>
            } else if (control.b6 && !control.b7) {
 8001e16:	ab01      	add	r3, sp, #4
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	065b      	lsls	r3, r3, #25
 8001e1c:	d522      	bpl.n	8001e64 <alp_get_expected_response_length+0x1c8>
 8001e1e:	ab01      	add	r3, sp, #4
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	09db      	lsrs	r3, r3, #7
 8001e24:	d121      	bne.n	8001e6a <alp_get_expected_response_length+0x1ce>
                e += fifo_skip(command_copy_fifo, 1); // skip status code
 8001e26:	4e18      	ldr	r6, [pc, #96]	; (8001e88 <alp_get_expected_response_length+0x1ec>)
 8001e28:	2101      	movs	r1, #1
 8001e2a:	0030      	movs	r0, r6
 8001e2c:	f00c fd5a 	bl	800e8e4 <fifo_skip>
 8001e30:	1824      	adds	r4, r4, r0
                e += !alp_parse_length_operand(command_copy_fifo, &length);
 8001e32:	a903      	add	r1, sp, #12
 8001e34:	0030      	movs	r0, r6
 8001e36:	f7ff fd07 	bl	8001848 <alp_parse_length_operand>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	4058      	eors	r0, r3
 8001e3e:	b2c0      	uxtb	r0, r0
 8001e40:	1824      	adds	r4, r4, r0
                e += fifo_skip(command_copy_fifo, (uint16_t)length); // itf_status_len + itf status
 8001e42:	9b03      	ldr	r3, [sp, #12]
 8001e44:	b299      	uxth	r1, r3
 8001e46:	0030      	movs	r0, r6
 8001e48:	f00c fd4c 	bl	800e8e4 <fifo_skip>
 8001e4c:	1824      	adds	r4, r4, r0
 8001e4e:	e731      	b.n	8001cb4 <alp_get_expected_response_length+0x18>
                e += fifo_skip(command_copy_fifo, 1); // skip status code
 8001e50:	2101      	movs	r1, #1
 8001e52:	480d      	ldr	r0, [pc, #52]	; (8001e88 <alp_get_expected_response_length+0x1ec>)
 8001e54:	f00c fd46 	bl	800e8e4 <fifo_skip>
 8001e58:	1824      	adds	r4, r4, r0
 8001e5a:	e72b      	b.n	8001cb4 <alp_get_expected_response_length+0x18>
        switch (control.operation) {
 8001e5c:	2008      	movs	r0, #8
 8001e5e:	4240      	negs	r0, r0
}
 8001e60:	b005      	add	sp, #20
 8001e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return -ENOEXEC; 
 8001e64:	2008      	movs	r0, #8
 8001e66:	4240      	negs	r0, r0
 8001e68:	e7fa      	b.n	8001e60 <alp_get_expected_response_length+0x1c4>
 8001e6a:	2008      	movs	r0, #8
 8001e6c:	4240      	negs	r0, r0
 8001e6e:	e7f7      	b.n	8001e60 <alp_get_expected_response_length+0x1c4>
            return -EINVAL;
 8001e70:	2016      	movs	r0, #22
 8001e72:	4240      	negs	r0, r0
 8001e74:	e7f4      	b.n	8001e60 <alp_get_expected_response_length+0x1c4>
    if(e != SUCCESS)
 8001e76:	2c00      	cmp	r4, #0
 8001e78:	d101      	bne.n	8001e7e <alp_get_expected_response_length+0x1e2>
    return (int)expected_response_length;
 8001e7a:	0028      	movs	r0, r5
 8001e7c:	e7f0      	b.n	8001e60 <alp_get_expected_response_length+0x1c4>
        return -EFAULT;
 8001e7e:	200e      	movs	r0, #14
 8001e80:	4240      	negs	r0, r0
 8001e82:	e7ed      	b.n	8001e60 <alp_get_expected_response_length+0x1c4>
 8001e84:	2000160c 	.word	0x2000160c
 8001e88:	20001670 	.word	0x20001670
 8001e8c:	08017234 	.word	0x08017234
 8001e90:	200014fc 	.word	0x200014fc

08001e94 <serial_interface_cmd_handler>:
    .itf_id = ALP_ITF_ID_SERIAL,
    .len = 0
};

static void serial_interface_cmd_handler(fifo_t* cmd_fifo)
{
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	0004      	movs	r4, r0
    error_t err;
    uint8_t alp_command_len=fifo_get_size(cmd_fifo);
 8001e98:	f00c fcd1 	bl	800e83e <fifo_get_size>
 8001e9c:	0006      	movs	r6, r0
    start_atomic();
 8001e9e:	f008 fd83 	bl	800a9a8 <start_atomic>
    err = fifo_pop(cmd_fifo, alp_command, alp_command_len); assert(err == SUCCESS); // pop full ALP command
 8001ea2:	25ff      	movs	r5, #255	; 0xff
 8001ea4:	4035      	ands	r5, r6
 8001ea6:	002a      	movs	r2, r5
 8001ea8:	4913      	ldr	r1, [pc, #76]	; (8001ef8 <serial_interface_cmd_handler+0x64>)
 8001eaa:	0020      	movs	r0, r4
 8001eac:	f00c fd65 	bl	800e97a <fifo_pop>
 8001eb0:	2800      	cmp	r0, #0
 8001eb2:	d117      	bne.n	8001ee4 <serial_interface_cmd_handler+0x50>
    end_atomic();
 8001eb4:	f008 fd86 	bl	800a9c4 <end_atomic>

    alp_command_t* command = alp_layer_command_alloc(false, false);
 8001eb8:	2100      	movs	r1, #0
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7fe fd9a 	bl	80009f4 <alp_layer_command_alloc>
 8001ec0:	1e04      	subs	r4, r0, #0
    if(command == NULL)
 8001ec2:	d015      	beq.n	8001ef0 <serial_interface_cmd_handler+0x5c>
    {
        log_print_error_string("serial_interface_cmd_handler: unable to allocate alp command");
        return;

    }
    command->origin_itf_id = ALP_ITF_ID_SERIAL;
 8001ec4:	2335      	movs	r3, #53	; 0x35
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	54c2      	strb	r2, [r0, r3]
    alp_append_interface_status(command, &serial_itf_status);
 8001eca:	490c      	ldr	r1, [pc, #48]	; (8001efc <serial_interface_cmd_handler+0x68>)
 8001ecc:	f7ff fec1 	bl	8001c52 <alp_append_interface_status>
    fifo_put(&command->alp_command_fifo, alp_command, alp_command_len);
 8001ed0:	0020      	movs	r0, r4
 8001ed2:	3064      	adds	r0, #100	; 0x64
 8001ed4:	002a      	movs	r2, r5
 8001ed6:	4908      	ldr	r1, [pc, #32]	; (8001ef8 <serial_interface_cmd_handler+0x64>)
 8001ed8:	f00c fc4e 	bl	800e778 <fifo_put>
    // alp_layer_process(command->alp_command, fifo_get_size(&command->alp_command_fifo));
    alp_layer_process(command);
 8001edc:	0020      	movs	r0, r4
 8001ede:	f7fe fe77 	bl	8000bd0 <alp_layer_process>
}
 8001ee2:	bd70      	pop	{r4, r5, r6, pc}
    err = fifo_pop(cmd_fifo, alp_command, alp_command_len); assert(err == SUCCESS); // pop full ALP command
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <serial_interface_cmd_handler+0x6c>)
 8001ee6:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <serial_interface_cmd_handler+0x70>)
 8001ee8:	2142      	movs	r1, #66	; 0x42
 8001eea:	4807      	ldr	r0, [pc, #28]	; (8001f08 <serial_interface_cmd_handler+0x74>)
 8001eec:	f006 fb88 	bl	8008600 <__assert_func>
        log_print_error_string("serial_interface_cmd_handler: unable to allocate alp command");
 8001ef0:	4806      	ldr	r0, [pc, #24]	; (8001f0c <serial_interface_cmd_handler+0x78>)
 8001ef2:	f00d f875 	bl	800efe0 <log_print_error_string>
        return;
 8001ef6:	e7f4      	b.n	8001ee2 <serial_interface_cmd_handler+0x4e>
 8001ef8:	20001798 	.word	0x20001798
 8001efc:	20000504 	.word	0x20000504
 8001f00:	0801732c 	.word	0x0801732c
 8001f04:	080173d0 	.word	0x080173d0
 8001f08:	0801733c 	.word	0x0801733c
 8001f0c:	0801737c 	.word	0x0801737c

08001f10 <serial_interface_send>:

static error_t serial_interface_send(uint8_t* payload, uint8_t payload_length,
    __attribute__((__unused__)) uint8_t expected_response_length,
    __attribute__((__unused__)) uint16_t* trans_id,
    __attribute__((__unused__)) alp_interface_config_t* session_config)
{
 8001f10:	b510      	push	{r4, lr}
    DPRINT("sending payload to serial interface");
    DPRINT_DATA(payload, payload_length);
    return modem_interface_transfer_bytes(payload, payload_length, SERIAL_MESSAGE_TYPE_ALP_DATA);
 8001f12:	2201      	movs	r2, #1
 8001f14:	f00d f8ae 	bl	800f074 <modem_interface_transfer_bytes>
}
 8001f18:	bd10      	pop	{r4, pc}
	...

08001f1c <serial_interface_register>:
void serial_interface_register() {
 8001f1c:	b570      	push	{r4, r5, r6, lr}
    alp_modem_interface = (alp_interface_t) {
 8001f1e:	4c09      	ldr	r4, [pc, #36]	; (8001f44 <serial_interface_register+0x28>)
 8001f20:	4909      	ldr	r1, [pc, #36]	; (8001f48 <serial_interface_register+0x2c>)
 8001f22:	0023      	movs	r3, r4
 8001f24:	000a      	movs	r2, r1
 8001f26:	ca23      	ldmia	r2!, {r0, r1, r5}
 8001f28:	c323      	stmia	r3!, {r0, r1, r5}
 8001f2a:	ca03      	ldmia	r2!, {r0, r1}
 8001f2c:	c303      	stmia	r3!, {r0, r1}
    modem_interface_init();
 8001f2e:	f00d f885 	bl	800f03c <modem_interface_init>
    alp_layer_register_interface(&alp_modem_interface);
 8001f32:	0020      	movs	r0, r4
 8001f34:	f7fe fda2 	bl	8000a7c <alp_layer_register_interface>
    modem_interface_register_handler(&serial_interface_cmd_handler, SERIAL_MESSAGE_TYPE_ALP_DATA);
 8001f38:	2101      	movs	r1, #1
 8001f3a:	4804      	ldr	r0, [pc, #16]	; (8001f4c <serial_interface_register+0x30>)
 8001f3c:	f00d f8a6 	bl	800f08c <modem_interface_register_handler>
}
 8001f40:	bd70      	pop	{r4, r5, r6, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	20001898 	.word	0x20001898
 8001f48:	080173bc 	.word	0x080173bc
 8001f4c:	08001e95 	.word	0x08001e95

08001f50 <d7ap_interface_stop>:
    DPRINT("alp_client_id is %i",alp_client_id);
    return SUCCESS;
}

static void d7ap_interface_stop()
{
 8001f50:	b510      	push	{r4, lr}
    if(!inited)
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <d7ap_interface_stop+0x18>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d100      	bne.n	8001f5c <d7ap_interface_stop+0xc>
        return;
    d7ap_stop();
    inited = false;
}
 8001f5a:	bd10      	pop	{r4, pc}
    d7ap_stop();
 8001f5c:	f000 fb88 	bl	8002670 <d7ap_stop>
    inited = false;
 8001f60:	4b01      	ldr	r3, [pc, #4]	; (8001f68 <d7ap_interface_stop+0x18>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
 8001f66:	e7f8      	b.n	8001f5a <d7ap_interface_stop+0xa>
 8001f68:	200018c4 	.word	0x200018c4

08001f6c <d7ap_interface_init>:
{
 8001f6c:	b530      	push	{r4, r5, lr}
 8001f6e:	b085      	sub	sp, #20
    if(inited)
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <d7ap_interface_init+0x34>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d110      	bne.n	8001f9a <d7ap_interface_init+0x2e>
    d7ap_init();
 8001f78:	f000 fb66 	bl	8002648 <d7ap_init>
    d7ap_resource_desc_t alp_desc = {
 8001f7c:	a801      	add	r0, sp, #4
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <d7ap_interface_init+0x38>)
 8001f80:	0002      	movs	r2, r0
 8001f82:	cb32      	ldmia	r3!, {r1, r4, r5}
 8001f84:	c232      	stmia	r2!, {r1, r4, r5}
    alp_client_id = d7ap_register(&alp_desc);
 8001f86:	f000 fb81 	bl	800268c <d7ap_register>
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <d7ap_interface_init+0x3c>)
 8001f8c:	7018      	strb	r0, [r3, #0]
    inited = true;
 8001f8e:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <d7ap_interface_init+0x34>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	701a      	strb	r2, [r3, #0]
    return SUCCESS;
 8001f94:	2000      	movs	r0, #0
}
 8001f96:	b005      	add	sp, #20
 8001f98:	bd30      	pop	{r4, r5, pc}
        return EALREADY;
 8001f9a:	2078      	movs	r0, #120	; 0x78
 8001f9c:	e7fb      	b.n	8001f96 <d7ap_interface_init+0x2a>
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	200018c4 	.word	0x200018c4
 8001fa4:	0801742c 	.word	0x0801742c
 8001fa8:	200018ac 	.word	0x200018ac

08001fac <d7ap_command_completed>:
static alp_interface_status_t empty_itf_status = {
    .itf_id = ALP_ITF_ID_D7ASP,
    .len = 0
};

static void d7ap_command_completed(uint16_t trans_id, error_t error) {
 8001fac:	b500      	push	{lr}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	9101      	str	r1, [sp, #4]
    // TODO D7ASP ALP status maps to D7ASP Result, which is only relevant for responses and not for the command (dialog as a whole)
    // TBD in D7 PAG, for now supply 'empty' D7 status
    alp_layer_forwarded_command_completed(trans_id, &error, &empty_itf_status, true);
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	4a02      	ldr	r2, [pc, #8]	; (8001fc0 <d7ap_command_completed+0x14>)
 8001fb6:	a901      	add	r1, sp, #4
 8001fb8:	f7fe fe70 	bl	8000c9c <alp_layer_forwarded_command_completed>
}
 8001fbc:	b003      	add	sp, #12
 8001fbe:	bd00      	pop	{pc}
 8001fc0:	20000530 	.word	0x20000530

08001fc4 <d7ap_alp_send>:
static error_t d7ap_alp_send(uint8_t* payload, uint8_t payload_length, uint8_t expected_response_length, uint16_t* trans_id, alp_interface_config_t* itf_cfg) {
 8001fc4:	b530      	push	{r4, r5, lr}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	0004      	movs	r4, r0
 8001fca:	000d      	movs	r5, r1
    if(itf_cfg != NULL) {
 8001fcc:	9906      	ldr	r1, [sp, #24]
 8001fce:	2900      	cmp	r1, #0
 8001fd0:	d00a      	beq.n	8001fe8 <d7ap_alp_send+0x24>
        return d7ap_send(alp_client_id, (d7ap_session_config_t*)&itf_cfg->itf_config, payload, payload_length, expected_response_length, trans_id);
 8001fd2:	3101      	adds	r1, #1
 8001fd4:	4809      	ldr	r0, [pc, #36]	; (8001ffc <d7ap_alp_send+0x38>)
 8001fd6:	7800      	ldrb	r0, [r0, #0]
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	9200      	str	r2, [sp, #0]
 8001fdc:	002b      	movs	r3, r5
 8001fde:	0022      	movs	r2, r4
 8001fe0:	f000 fb92 	bl	8002708 <d7ap_send>
}
 8001fe4:	b003      	add	sp, #12
 8001fe6:	bd30      	pop	{r4, r5, pc}
        return d7ap_send(alp_client_id, NULL, payload, payload_length, expected_response_length, trans_id);
 8001fe8:	4904      	ldr	r1, [pc, #16]	; (8001ffc <d7ap_alp_send+0x38>)
 8001fea:	7808      	ldrb	r0, [r1, #0]
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	9200      	str	r2, [sp, #0]
 8001ff0:	002b      	movs	r3, r5
 8001ff2:	0022      	movs	r2, r4
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	f000 fb87 	bl	8002708 <d7ap_send>
 8001ffa:	e7f3      	b.n	8001fe4 <d7ap_alp_send+0x20>
 8001ffc:	200018ac 	.word	0x200018ac

08002000 <serialize_session_result_to_alp_interface_status>:
{
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	b08c      	sub	sp, #48	; 0x30
 8002004:	0006      	movs	r6, r0
 8002006:	000c      	movs	r4, r1
    alp_interface_status_t d7_status = (alp_interface_status_t) {
 8002008:	ad01      	add	r5, sp, #4
 800200a:	222a      	movs	r2, #42	; 0x2a
 800200c:	2100      	movs	r1, #0
 800200e:	0028      	movs	r0, r5
 8002010:	f012 ff32 	bl	8014e78 <memset>
 8002014:	23d7      	movs	r3, #215	; 0xd7
 8002016:	702b      	strb	r3, [r5, #0]
        .len = 12 + d7ap_addressee_id_length(session_result->addressee.ctrl.id_type),
 8002018:	7aa3      	ldrb	r3, [r4, #10]
 800201a:	069b      	lsls	r3, r3, #26
 800201c:	0f9b      	lsrs	r3, r3, #30
  switch(id_type)
 800201e:	2b02      	cmp	r3, #2
 8002020:	d04c      	beq.n	80020bc <serialize_session_result_to_alp_interface_status+0xbc>
 8002022:	d840      	bhi.n	80020a6 <serialize_session_result_to_alp_interface_status+0xa6>
 8002024:	2b00      	cmp	r3, #0
 8002026:	d04b      	beq.n	80020c0 <serialize_session_result_to_alp_interface_status+0xc0>
 8002028:	2b01      	cmp	r3, #1
 800202a:	d140      	bne.n	80020ae <serialize_session_result_to_alp_interface_status+0xae>
 800202c:	2300      	movs	r3, #0
 800202e:	330c      	adds	r3, #12
    alp_interface_status_t d7_status = (alp_interface_status_t) {
 8002030:	ad01      	add	r5, sp, #4
 8002032:	706b      	strb	r3, [r5, #1]
    (*ptr) = session_result->channel.channel_header;
 8002034:	7823      	ldrb	r3, [r4, #0]
 8002036:	70ab      	strb	r3, [r5, #2]
    uint16_t center_freq = __builtin_bswap16(session_result->channel.center_freq_index);
 8002038:	7862      	ldrb	r2, [r4, #1]
 800203a:	78a3      	ldrb	r3, [r4, #2]
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	4313      	orrs	r3, r2
 8002040:	ba5b      	rev16	r3, r3
 8002042:	466a      	mov	r2, sp
 8002044:	1c91      	adds	r1, r2, #2
 8002046:	800b      	strh	r3, [r1, #0]
    memcpy(ptr, &center_freq, 2);
 8002048:	2202      	movs	r2, #2
 800204a:	466b      	mov	r3, sp
 800204c:	1dd8      	adds	r0, r3, #7
 800204e:	f012 febf 	bl	8014dd0 <memcpy>
    (*ptr) = session_result->rx_level;
 8002052:	78e3      	ldrb	r3, [r4, #3]
 8002054:	716b      	strb	r3, [r5, #5]
    (*ptr) = session_result->link_budget;
 8002056:	7923      	ldrb	r3, [r4, #4]
 8002058:	71ab      	strb	r3, [r5, #6]
    (*ptr) = session_result->target_rx_level;
 800205a:	7963      	ldrb	r3, [r4, #5]
 800205c:	71eb      	strb	r3, [r5, #7]
    (*ptr) = session_result->status.raw;
 800205e:	79a3      	ldrb	r3, [r4, #6]
 8002060:	722b      	strb	r3, [r5, #8]
    (*ptr) = session_result->fifo_token;
 8002062:	79e3      	ldrb	r3, [r4, #7]
 8002064:	726b      	strb	r3, [r5, #9]
    (*ptr) = session_result->seqnr;
 8002066:	7a23      	ldrb	r3, [r4, #8]
 8002068:	72ab      	strb	r3, [r5, #10]
    (*ptr) = session_result->response_to;
 800206a:	7a63      	ldrb	r3, [r4, #9]
 800206c:	72eb      	strb	r3, [r5, #11]
    (*ptr) = session_result->addressee.ctrl.raw;
 800206e:	7aa3      	ldrb	r3, [r4, #10]
 8002070:	732b      	strb	r3, [r5, #12]
    (*ptr) = session_result->addressee.access_class;
 8002072:	7ae2      	ldrb	r2, [r4, #11]
 8002074:	736a      	strb	r2, [r5, #13]
    memcpy(ptr, session_result->addressee.id, d7ap_addressee_id_length(session_result->addressee.ctrl.id_type));
 8002076:	0021      	movs	r1, r4
 8002078:	310c      	adds	r1, #12
 800207a:	069b      	lsls	r3, r3, #26
 800207c:	0f9b      	lsrs	r3, r3, #30
 800207e:	2b02      	cmp	r3, #2
 8002080:	d02b      	beq.n	80020da <serialize_session_result_to_alp_interface_status+0xda>
 8002082:	d81f      	bhi.n	80020c4 <serialize_session_result_to_alp_interface_status+0xc4>
 8002084:	2b00      	cmp	r3, #0
 8002086:	d02a      	beq.n	80020de <serialize_session_result_to_alp_interface_status+0xde>
 8002088:	2b01      	cmp	r3, #1
 800208a:	d11f      	bne.n	80020cc <serialize_session_result_to_alp_interface_status+0xcc>
 800208c:	2200      	movs	r2, #0
 800208e:	2012      	movs	r0, #18
 8002090:	4468      	add	r0, sp
 8002092:	f012 fe9d 	bl	8014dd0 <memcpy>
    return d7_status;
 8002096:	222a      	movs	r2, #42	; 0x2a
 8002098:	a901      	add	r1, sp, #4
 800209a:	0030      	movs	r0, r6
 800209c:	f012 fe98 	bl	8014dd0 <memcpy>
}
 80020a0:	0030      	movs	r0, r6
 80020a2:	b00c      	add	sp, #48	; 0x30
 80020a4:	bd70      	pop	{r4, r5, r6, pc}
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d101      	bne.n	80020ae <serialize_session_result_to_alp_interface_status+0xae>
        return ID_TYPE_VID_LENGTH;
 80020aa:	2302      	movs	r3, #2
 80020ac:	e7bf      	b.n	800202e <serialize_session_result_to_alp_interface_status+0x2e>
        assert(false);
 80020ae:	2190      	movs	r1, #144	; 0x90
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <serialize_session_result_to_alp_interface_status+0xe4>)
 80020b2:	4a0d      	ldr	r2, [pc, #52]	; (80020e8 <serialize_session_result_to_alp_interface_status+0xe8>)
 80020b4:	0049      	lsls	r1, r1, #1
 80020b6:	480d      	ldr	r0, [pc, #52]	; (80020ec <serialize_session_result_to_alp_interface_status+0xec>)
 80020b8:	f006 faa2 	bl	8008600 <__assert_func>
        return ID_TYPE_UID_ID_LENGTH;
 80020bc:	2308      	movs	r3, #8
 80020be:	e7b6      	b.n	800202e <serialize_session_result_to_alp_interface_status+0x2e>
        return ID_TYPE_NBID_ID_LENGTH;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e7b4      	b.n	800202e <serialize_session_result_to_alp_interface_status+0x2e>
  switch(id_type)
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d101      	bne.n	80020cc <serialize_session_result_to_alp_interface_status+0xcc>
        return ID_TYPE_VID_LENGTH;
 80020c8:	2202      	movs	r2, #2
 80020ca:	e7e0      	b.n	800208e <serialize_session_result_to_alp_interface_status+0x8e>
        assert(false);
 80020cc:	2190      	movs	r1, #144	; 0x90
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <serialize_session_result_to_alp_interface_status+0xe4>)
 80020d0:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <serialize_session_result_to_alp_interface_status+0xe8>)
 80020d2:	0049      	lsls	r1, r1, #1
 80020d4:	4805      	ldr	r0, [pc, #20]	; (80020ec <serialize_session_result_to_alp_interface_status+0xec>)
 80020d6:	f006 fa93 	bl	8008600 <__assert_func>
        return ID_TYPE_UID_ID_LENGTH;
 80020da:	2208      	movs	r2, #8
 80020dc:	e7d7      	b.n	800208e <serialize_session_result_to_alp_interface_status+0x8e>
        return ID_TYPE_NBID_ID_LENGTH;
 80020de:	2201      	movs	r2, #1
 80020e0:	e7d5      	b.n	800208e <serialize_session_result_to_alp_interface_status+0x8e>
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	080169c8 	.word	0x080169c8
 80020e8:	0801744c 	.word	0x0801744c
 80020ec:	080169d0 	.word	0x080169d0

080020f0 <command_from_d7ap>:
static bool command_from_d7ap(uint8_t* payload, uint8_t len, d7ap_session_result_t result, bool response_expected) {
 80020f0:	b082      	sub	sp, #8
 80020f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f4:	b08d      	sub	sp, #52	; 0x34
 80020f6:	0006      	movs	r6, r0
 80020f8:	000d      	movs	r5, r1
 80020fa:	9212      	str	r2, [sp, #72]	; 0x48
 80020fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80020fe:	ab17      	add	r3, sp, #92	; 0x5c
 8002100:	781f      	ldrb	r7, [r3, #0]
    alp_interface_status_t d7_status = serialize_session_result_to_alp_interface_status(&result);
 8002102:	a912      	add	r1, sp, #72	; 0x48
 8002104:	a801      	add	r0, sp, #4
 8002106:	f7ff ff7b 	bl	8002000 <serialize_session_result_to_alp_interface_status>
    alp_command_t* command = alp_layer_command_alloc(false, false);
 800210a:	2100      	movs	r1, #0
 800210c:	2000      	movs	r0, #0
 800210e:	f7fe fc71 	bl	80009f4 <alp_layer_command_alloc>
 8002112:	1e04      	subs	r4, r0, #0
    if (command == NULL) {
 8002114:	d014      	beq.n	8002140 <command_from_d7ap+0x50>
    command->origin_itf_id = ALP_ITF_ID_D7ASP;
 8002116:	2335      	movs	r3, #53	; 0x35
 8002118:	22d7      	movs	r2, #215	; 0xd7
 800211a:	54c2      	strb	r2, [r0, r3]
    command->respond_when_completed = response_expected;
 800211c:	7087      	strb	r7, [r0, #2]
    alp_append_interface_status(command, &d7_status);
 800211e:	a901      	add	r1, sp, #4
 8002120:	f7ff fd97 	bl	8001c52 <alp_append_interface_status>
    fifo_put(&command->alp_command_fifo, payload, len);
 8002124:	b2aa      	uxth	r2, r5
 8002126:	0020      	movs	r0, r4
 8002128:	3064      	adds	r0, #100	; 0x64
 800212a:	0031      	movs	r1, r6
 800212c:	f00c fb24 	bl	800e778 <fifo_put>
    return alp_layer_process(command);
 8002130:	0020      	movs	r0, r4
 8002132:	f7fe fd4d 	bl	8000bd0 <alp_layer_process>
}
 8002136:	b00d      	add	sp, #52	; 0x34
 8002138:	bcf0      	pop	{r4, r5, r6, r7}
 800213a:	bc08      	pop	{r3}
 800213c:	b002      	add	sp, #8
 800213e:	4718      	bx	r3
        assert(false); // TODO error handling
 8002140:	4b02      	ldr	r3, [pc, #8]	; (800214c <command_from_d7ap+0x5c>)
 8002142:	4a03      	ldr	r2, [pc, #12]	; (8002150 <command_from_d7ap+0x60>)
 8002144:	2175      	movs	r1, #117	; 0x75
 8002146:	4803      	ldr	r0, [pc, #12]	; (8002154 <command_from_d7ap+0x64>)
 8002148:	f006 fa5a 	bl	8008600 <__assert_func>
 800214c:	080169c8 	.word	0x080169c8
 8002150:	08017468 	.word	0x08017468
 8002154:	080173f0 	.word	0x080173f0

08002158 <response_from_d7ap>:
static void response_from_d7ap(uint16_t trans_id, uint8_t* payload, uint8_t len, d7ap_session_result_t result) {
 8002158:	b082      	sub	sp, #8
 800215a:	b570      	push	{r4, r5, r6, lr}
 800215c:	b08c      	sub	sp, #48	; 0x30
 800215e:	0004      	movs	r4, r0
 8002160:	000d      	movs	r5, r1
 8002162:	0016      	movs	r6, r2
 8002164:	9311      	str	r3, [sp, #68]	; 0x44
    alp_interface_status_t d7_status = serialize_session_result_to_alp_interface_status(&result);
 8002166:	a911      	add	r1, sp, #68	; 0x44
 8002168:	a801      	add	r0, sp, #4
 800216a:	f7ff ff49 	bl	8002000 <serialize_session_result_to_alp_interface_status>
    alp_layer_received_response(trans_id, payload, len, &d7_status);
 800216e:	ab01      	add	r3, sp, #4
 8002170:	0032      	movs	r2, r6
 8002172:	0029      	movs	r1, r5
 8002174:	0020      	movs	r0, r4
 8002176:	f7ff f981 	bl	800147c <alp_layer_received_response>
}
 800217a:	b00c      	add	sp, #48	; 0x30
 800217c:	bc70      	pop	{r4, r5, r6}
 800217e:	bc08      	pop	{r3}
 8002180:	b002      	add	sp, #8
 8002182:	4718      	bx	r3

08002184 <d7ap_interface_register>:

void d7ap_interface_register()
{
 8002184:	b570      	push	{r4, r5, r6, lr}
    d7_alp_interface = (alp_interface_t) {
 8002186:	4805      	ldr	r0, [pc, #20]	; (800219c <d7ap_interface_register+0x18>)
 8002188:	0002      	movs	r2, r0
 800218a:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <d7ap_interface_register+0x1c>)
 800218c:	330c      	adds	r3, #12
 800218e:	cb32      	ldmia	r3!, {r1, r4, r5}
 8002190:	c232      	stmia	r2!, {r1, r4, r5}
 8002192:	cb12      	ldmia	r3!, {r1, r4}
 8002194:	c212      	stmia	r2!, {r1, r4}
        .init = d7ap_interface_init,
        .deinit = d7ap_interface_stop,
        .unique = true
    };
    
    alp_layer_register_interface(&d7_alp_interface);
 8002196:	f7fe fc71 	bl	8000a7c <alp_layer_register_interface>
}
 800219a:	bd70      	pop	{r4, r5, r6, pc}
 800219c:	200018b0 	.word	0x200018b0
 80021a0:	0801742c 	.word	0x0801742c

080021a4 <bitmap_get>:
 * \param bitmap    The bitmap. Note: the user is responsible for initializing this.
 * \param pos       The bit number to get. Note: the user is responsible for checking pos is not bigger then the bitmap itself
 */
static bool bitmap_get(uint8_t* bitmap, uint8_t pos)
{
    return bitmap[pos / 8] & (1 << (pos & 7))? true : false;
 80021a4:	08cb      	lsrs	r3, r1, #3
 80021a6:	5cc0      	ldrb	r0, [r0, r3]
 80021a8:	2307      	movs	r3, #7
 80021aa:	4019      	ands	r1, r3
 80021ac:	0003      	movs	r3, r0
 80021ae:	410b      	asrs	r3, r1
 80021b0:	2001      	movs	r0, #1
 80021b2:	4018      	ands	r0, r3
}
 80021b4:	4770      	bx	lr

080021b6 <free_session>:
    }
}

static void free_session(session_t* session) {
    DPRINT("[D7AP] Free session %i", session->token);
    session->active = false;
 80021b6:	2300      	movs	r3, #0
 80021b8:	7003      	strb	r3, [r0, #0]
    session->request_nb = 0;
 80021ba:	70c3      	strb	r3, [r0, #3]
    session->client_id = INVALID_CLIENT_ID;
 80021bc:	22ff      	movs	r2, #255	; 0xff
 80021be:	7082      	strb	r2, [r0, #2]
    session->token = 0;
 80021c0:	7043      	strb	r3, [r0, #1]
};
 80021c2:	4770      	bx	lr

080021c4 <alloc_session>:

static session_t* alloc_session(uint8_t client_id) {
 80021c4:	b510      	push	{r4, lr}
    for(uint8_t i = 0; i < MODULE_D7AP_MAX_SESSION_COUNT; i++) {
 80021c6:	2300      	movs	r3, #0
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d80d      	bhi.n	80021e8 <alloc_session+0x24>
        if(sessions[i].client_id == INVALID_CLIENT_ID) {
 80021cc:	00d9      	lsls	r1, r3, #3
 80021ce:	4a07      	ldr	r2, [pc, #28]	; (80021ec <alloc_session+0x28>)
 80021d0:	1852      	adds	r2, r2, r1
 80021d2:	7892      	ldrb	r2, [r2, #2]
 80021d4:	2aff      	cmp	r2, #255	; 0xff
 80021d6:	d002      	beq.n	80021de <alloc_session+0x1a>
    for(uint8_t i = 0; i < MODULE_D7AP_MAX_SESSION_COUNT; i++) {
 80021d8:	3301      	adds	r3, #1
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	e7f4      	b.n	80021c8 <alloc_session+0x4>
            sessions[i].client_id = client_id;
 80021de:	4b03      	ldr	r3, [pc, #12]	; (80021ec <alloc_session+0x28>)
 80021e0:	185b      	adds	r3, r3, r1
 80021e2:	7098      	strb	r0, [r3, #2]
        return &(sessions[i]);
 80021e4:	0018      	movs	r0, r3
 80021e6:	e000      	b.n	80021ea <alloc_session+0x26>
        }
    }

    DPRINT("[D7AP] Could not allocate session, all %i reserved slots active", MODULE_D7AP_MAX_SESSION_COUNT);
    return NULL;
 80021e8:	2000      	movs	r0, #0
}
 80021ea:	bd10      	pop	{r4, pc}
 80021ec:	200018c8 	.word	0x200018c8

080021f0 <init_session_list>:

static void init_session_list()
{
 80021f0:	b510      	push	{r4, lr}
    for(uint8_t i = 0; i < MODULE_D7AP_MAX_SESSION_COUNT; i++) {
 80021f2:	2400      	movs	r4, #0
 80021f4:	e006      	b.n	8002204 <init_session_list+0x14>
        free_session(&sessions[i]);
 80021f6:	00e3      	lsls	r3, r4, #3
 80021f8:	4804      	ldr	r0, [pc, #16]	; (800220c <init_session_list+0x1c>)
 80021fa:	18c0      	adds	r0, r0, r3
 80021fc:	f7ff ffdb 	bl	80021b6 <free_session>
    for(uint8_t i = 0; i < MODULE_D7AP_MAX_SESSION_COUNT; i++) {
 8002200:	3401      	adds	r4, #1
 8002202:	b2e4      	uxtb	r4, r4
 8002204:	2c01      	cmp	r4, #1
 8002206:	d9f6      	bls.n	80021f6 <init_session_list+0x6>
    }
}
 8002208:	bd10      	pop	{r4, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	200018c8 	.word	0x200018c8

08002210 <get_session_by_session_token>:

    d7ap_stack_state = D7AP_STACK_STATE_STOPPED;
}

static session_t* get_session_by_session_token(uint8_t session_token)
{
 8002210:	b510      	push	{r4, lr}
    for(uint8_t i = 0; i < MODULE_D7AP_MAX_SESSION_COUNT; i++) {
 8002212:	2300      	movs	r3, #0
 8002214:	2b01      	cmp	r3, #1
 8002216:	d80b      	bhi.n	8002230 <get_session_by_session_token+0x20>
        if(sessions[i].token == session_token)
 8002218:	00d9      	lsls	r1, r3, #3
 800221a:	4a06      	ldr	r2, [pc, #24]	; (8002234 <get_session_by_session_token+0x24>)
 800221c:	1852      	adds	r2, r2, r1
 800221e:	7852      	ldrb	r2, [r2, #1]
 8002220:	4282      	cmp	r2, r0
 8002222:	d002      	beq.n	800222a <get_session_by_session_token+0x1a>
    for(uint8_t i = 0; i < MODULE_D7AP_MAX_SESSION_COUNT; i++) {
 8002224:	3301      	adds	r3, #1
 8002226:	b2db      	uxtb	r3, r3
 8002228:	e7f4      	b.n	8002214 <get_session_by_session_token+0x4>
            return &(sessions[i]);
 800222a:	4802      	ldr	r0, [pc, #8]	; (8002234 <get_session_by_session_token+0x24>)
 800222c:	1840      	adds	r0, r0, r1
 800222e:	e000      	b.n	8002232 <get_session_by_session_token+0x22>
    }

    return NULL;
 8002230:	2000      	movs	r0, #0
}
 8002232:	bd10      	pop	{r4, pc}
 8002234:	200018c8 	.word	0x200018c8

08002238 <switch_state>:
{
 8002238:	b510      	push	{r4, lr}
    switch(new_state)
 800223a:	2803      	cmp	r0, #3
 800223c:	d01c      	beq.n	8002278 <switch_state+0x40>
 800223e:	d80f      	bhi.n	8002260 <switch_state+0x28>
 8002240:	2801      	cmp	r0, #1
 8002242:	d030      	beq.n	80022a6 <switch_state+0x6e>
 8002244:	2802      	cmp	r0, #2
 8002246:	d13c      	bne.n	80022c2 <switch_state+0x8a>
            switch(d7ap_stack_state)
 8002248:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <switch_state+0x98>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d910      	bls.n	8002272 <switch_state+0x3a>
 8002250:	2b02      	cmp	r3, #2
 8002252:	d01b      	beq.n	800228c <switch_state+0x54>
                    assert(false);
 8002254:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <switch_state+0x9c>)
 8002256:	4a20      	ldr	r2, [pc, #128]	; (80022d8 <switch_state+0xa0>)
 8002258:	2166      	movs	r1, #102	; 0x66
 800225a:	4820      	ldr	r0, [pc, #128]	; (80022dc <switch_state+0xa4>)
 800225c:	f006 f9d0 	bl	8008600 <__assert_func>
    switch(new_state)
 8002260:	2804      	cmp	r0, #4
 8002262:	d12e      	bne.n	80022c2 <switch_state+0x8a>
            switch(d7ap_stack_state)
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <switch_state+0x98>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d816      	bhi.n	800229a <switch_state+0x62>
                    d7ap_stack_state = new_state;
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <switch_state+0x98>)
 800226e:	7018      	strb	r0, [r3, #0]
            break;
 8002270:	e00c      	b.n	800228c <switch_state+0x54>
                    d7ap_stack_state = new_state;
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <switch_state+0x98>)
 8002274:	7018      	strb	r0, [r3, #0]
                    break;
 8002276:	e009      	b.n	800228c <switch_state+0x54>
            switch(d7ap_stack_state)
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <switch_state+0x98>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d903      	bls.n	8002288 <switch_state+0x50>
 8002280:	3b03      	subs	r3, #3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d802      	bhi.n	800228e <switch_state+0x56>
                    d7ap_stack_state = new_state;
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <switch_state+0x98>)
 800228a:	7018      	strb	r0, [r3, #0]
}
 800228c:	bd10      	pop	{r4, pc}
                    assert(false);
 800228e:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <switch_state+0x9c>)
 8002290:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <switch_state+0xa0>)
 8002292:	2175      	movs	r1, #117	; 0x75
 8002294:	4811      	ldr	r0, [pc, #68]	; (80022dc <switch_state+0xa4>)
 8002296:	f006 f9b3 	bl	8008600 <__assert_func>
                    assert(false);
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <switch_state+0x9c>)
 800229c:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <switch_state+0xa0>)
 800229e:	2182      	movs	r1, #130	; 0x82
 80022a0:	480e      	ldr	r0, [pc, #56]	; (80022dc <switch_state+0xa4>)
 80022a2:	f006 f9ad 	bl	8008600 <__assert_func>
            switch(d7ap_stack_state)
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <switch_state+0x98>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d802      	bhi.n	80022b6 <switch_state+0x7e>
                    d7ap_stack_state = new_state;
 80022b0:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <switch_state+0x98>)
 80022b2:	7018      	strb	r0, [r3, #0]
            break;
 80022b4:	e7ea      	b.n	800228c <switch_state+0x54>
                    assert(false);
 80022b6:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <switch_state+0x9c>)
 80022b8:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <switch_state+0xa0>)
 80022ba:	2191      	movs	r1, #145	; 0x91
 80022bc:	4807      	ldr	r0, [pc, #28]	; (80022dc <switch_state+0xa4>)
 80022be:	f006 f99f 	bl	8008600 <__assert_func>
            assert(false);
 80022c2:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <switch_state+0x9c>)
 80022c4:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <switch_state+0xa0>)
 80022c6:	2196      	movs	r1, #150	; 0x96
 80022c8:	4804      	ldr	r0, [pc, #16]	; (80022dc <switch_state+0xa4>)
 80022ca:	f006 f999 	bl	8008600 <__assert_func>
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	200018c5 	.word	0x200018c5
 80022d4:	080169c8 	.word	0x080169c8
 80022d8:	08017510 	.word	0x08017510
 80022dc:	0801747c 	.word	0x0801747c

080022e0 <on_access_profile_file_changed>:
static void on_access_profile_file_changed(uint8_t file_id) {
 80022e0:	b510      	push	{r4, lr}
 80022e2:	0004      	movs	r4, r0
  d7atp_notify_access_profile_file_changed(file_id);
 80022e4:	f001 fb4e 	bl	8003984 <d7atp_notify_access_profile_file_changed>
  dll_notify_access_profile_file_changed(file_id);
 80022e8:	0020      	movs	r0, r4
 80022ea:	f004 f85d 	bl	80063a8 <dll_notify_access_profile_file_changed>
}
 80022ee:	bd10      	pop	{r4, pc}

080022f0 <d7ap_stack_init>:
{
 80022f0:	b510      	push	{r4, lr}
    assert(d7ap_stack_state == D7AP_STACK_STATE_STOPPED);
 80022f2:	4b12      	ldr	r3, [pc, #72]	; (800233c <d7ap_stack_init+0x4c>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d110      	bne.n	800231c <d7ap_stack_init+0x2c>
    d7ap_stack_state = D7AP_STACK_STATE_IDLE;
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <d7ap_stack_init+0x4c>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]
    d7asp_init();
 8002300:	f000 fd40 	bl	8002d84 <d7asp_init>
    d7atp_init();
 8002304:	f001 fafa 	bl	80038fc <d7atp_init>
    d7anp_init();
 8002308:	f002 f8fc 	bl	8004504 <d7anp_init>
    packet_queue_init();
 800230c:	f003 f824 	bl	8005358 <packet_queue_init>
    dll_init();
 8002310:	f004 f87e 	bl	8006410 <dll_init>
    init_session_list();
 8002314:	f7ff ff6c 	bl	80021f0 <init_session_list>
    for(int i = 0; i < 15; i++)
 8002318:	2400      	movs	r4, #0
 800231a:	e00c      	b.n	8002336 <d7ap_stack_init+0x46>
    assert(d7ap_stack_state == D7AP_STACK_STATE_STOPPED);
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <d7ap_stack_init+0x50>)
 800231e:	4a09      	ldr	r2, [pc, #36]	; (8002344 <d7ap_stack_init+0x54>)
 8002320:	21bd      	movs	r1, #189	; 0xbd
 8002322:	4809      	ldr	r0, [pc, #36]	; (8002348 <d7ap_stack_init+0x58>)
 8002324:	f006 f96c 	bl	8008600 <__assert_func>
      d7ap_fs_register_file_modified_callback(D7A_FILE_ACCESS_PROFILE_ID + i, &on_access_profile_file_changed);
 8002328:	0020      	movs	r0, r4
 800232a:	3020      	adds	r0, #32
 800232c:	b2c0      	uxtb	r0, r0
 800232e:	4907      	ldr	r1, [pc, #28]	; (800234c <d7ap_stack_init+0x5c>)
 8002330:	f005 fefe 	bl	8008130 <d7ap_fs_register_file_modified_callback>
    for(int i = 0; i < 15; i++)
 8002334:	3401      	adds	r4, #1
 8002336:	2c0e      	cmp	r4, #14
 8002338:	ddf6      	ble.n	8002328 <d7ap_stack_init+0x38>
}
 800233a:	bd10      	pop	{r4, pc}
 800233c:	200018c5 	.word	0x200018c5
 8002340:	080174b8 	.word	0x080174b8
 8002344:	08017520 	.word	0x08017520
 8002348:	0801747c 	.word	0x0801747c
 800234c:	080022e1 	.word	0x080022e1

08002350 <d7ap_stack_stop>:
{
 8002350:	b510      	push	{r4, lr}
    d7asp_stop();
 8002352:	f000 fd63 	bl	8002e1c <d7asp_stop>
    d7atp_stop();
 8002356:	f001 fb1b 	bl	8003990 <d7atp_stop>
    d7anp_stop();
 800235a:	f002 f93d 	bl	80045d8 <d7anp_stop>
    dll_stop();
 800235e:	f004 f923 	bl	80065a8 <dll_stop>
    hw_radio_stop();
 8002362:	f00b f931 	bl	800d5c8 <hw_radio_stop>
    d7ap_stack_state = D7AP_STACK_STATE_STOPPED;
 8002366:	4b02      	ldr	r3, [pc, #8]	; (8002370 <d7ap_stack_stop+0x20>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
}
 800236c:	bd10      	pop	{r4, pc}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	200018c5 	.word	0x200018c5

08002374 <d7ap_stack_send>:
    return NULL;
}*/

error_t d7ap_stack_send(uint8_t client_id, d7ap_session_config_t* config, uint8_t* payload,
                        uint8_t len, uint8_t expected_response_length, uint16_t *trans_id)
{
 8002374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002376:	46ce      	mov	lr, r9
 8002378:	b500      	push	{lr}
 800237a:	b082      	sub	sp, #8
 800237c:	9001      	str	r0, [sp, #4]
 800237e:	0008      	movs	r0, r1
 8002380:	0017      	movs	r7, r2
 8002382:	001e      	movs	r6, r3
 8002384:	ab08      	add	r3, sp, #32
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4699      	mov	r9, r3

    // When an application response is expected, forward the payload directly to the current D7A session
    // TODO how to filter by client Id since we don't know to which client the request is addressed?
    if (d7ap_stack_state == D7AP_STACK_STATE_WAIT_APP_ANSWER)
 800238a:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <d7ap_stack_send+0x8c>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b04      	cmp	r3, #4
 8002390:	d024      	beq.n	80023dc <d7ap_stack_send+0x68>
        DPRINT_DATA(payload, len);
        return (d7asp_send_response(payload, len));
    }

    // Create or return the master session if the current one is compatible with the given session configuration.
    uint8_t session_token = d7asp_master_session_create(config);
 8002392:	f000 fd55 	bl	8002e40 <d7asp_master_session_create>
 8002396:	1e05      	subs	r5, r0, #0

    if(session_token == 0)
 8002398:	d02c      	beq.n	80023f4 <d7ap_stack_send+0x80>
        return ERETRY;

    // Check if a session already exists
    session_t* session = get_session_by_session_token(session_token);
 800239a:	f7ff ff39 	bl	8002210 <get_session_by_session_token>
 800239e:	1e04      	subs	r4, r0, #0

    if (session == NULL) {
 80023a0:	d021      	beq.n	80023e6 <d7ap_stack_send+0x72>
            return -ESIZE;

        session->token = session_token;
    }

    if (session->request_nb == MODULE_D7AP_FIFO_MAX_REQUESTS_COUNT)
 80023a2:	78e3      	ldrb	r3, [r4, #3]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d029      	beq.n	80023fc <d7ap_stack_send+0x88>
        return -ESIZE;

    //TODO handle here the fragmentation if needed?

    uint8_t request_id = d7asp_queue_request(session->token,
 80023a8:	7860      	ldrb	r0, [r4, #1]
 80023aa:	464b      	mov	r3, r9
 80023ac:	0032      	movs	r2, r6
 80023ae:	0039      	movs	r1, r7
 80023b0:	f000 fe1e 	bl	8002ff0 <d7asp_queue_request>
                                             payload, len,
                                             expected_response_length);

    session->trans_id[session->request_nb] = ((uint16_t)session->token << 8) | (request_id & 0x00FF);
 80023b4:	7863      	ldrb	r3, [r4, #1]
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	78e2      	ldrb	r2, [r4, #3]
 80023ba:	4303      	orrs	r3, r0
 80023bc:	b29b      	uxth	r3, r3
 80023be:	0052      	lsls	r2, r2, #1
 80023c0:	18a2      	adds	r2, r4, r2
 80023c2:	8093      	strh	r3, [r2, #4]

    if (trans_id != NULL) {
 80023c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023c6:	2a00      	cmp	r2, #0
 80023c8:	d000      	beq.n	80023cc <d7ap_stack_send+0x58>
        *trans_id = session->trans_id[session->request_nb];
 80023ca:	8013      	strh	r3, [r2, #0]
        DPRINT("[D7AP] request posted with request_nb %d", session->request_nb);
    }
    
    DPRINT_DATA(payload, len);

    session->request_nb++;
 80023cc:	78e3      	ldrb	r3, [r4, #3]
 80023ce:	3301      	adds	r3, #1
 80023d0:	70e3      	strb	r3, [r4, #3]
    return SUCCESS;
 80023d2:	2000      	movs	r0, #0
}
 80023d4:	b002      	add	sp, #8
 80023d6:	bc04      	pop	{r2}
 80023d8:	4691      	mov	r9, r2
 80023da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return (d7asp_send_response(payload, len));
 80023dc:	0031      	movs	r1, r6
 80023de:	0010      	movs	r0, r2
 80023e0:	f000 fdba 	bl	8002f58 <d7asp_send_response>
 80023e4:	e7f6      	b.n	80023d4 <d7ap_stack_send+0x60>
        session = alloc_session(client_id);
 80023e6:	9801      	ldr	r0, [sp, #4]
 80023e8:	f7ff feec 	bl	80021c4 <alloc_session>
 80023ec:	1e04      	subs	r4, r0, #0
        if (session == NULL)
 80023ee:	d003      	beq.n	80023f8 <d7ap_stack_send+0x84>
        session->token = session_token;
 80023f0:	7045      	strb	r5, [r0, #1]
 80023f2:	e7d6      	b.n	80023a2 <d7ap_stack_send+0x2e>
        return ERETRY;
 80023f4:	4803      	ldr	r0, [pc, #12]	; (8002404 <d7ap_stack_send+0x90>)
 80023f6:	e7ed      	b.n	80023d4 <d7ap_stack_send+0x60>
            return -ESIZE;
 80023f8:	4803      	ldr	r0, [pc, #12]	; (8002408 <d7ap_stack_send+0x94>)
 80023fa:	e7eb      	b.n	80023d4 <d7ap_stack_send+0x60>
        return -ESIZE;
 80023fc:	4802      	ldr	r0, [pc, #8]	; (8002408 <d7ap_stack_send+0x94>)
 80023fe:	e7e9      	b.n	80023d4 <d7ap_stack_send+0x60>
 8002400:	200018c5 	.word	0x200018c5
 8002404:	0000138d 	.word	0x0000138d
 8002408:	ffffec76 	.word	0xffffec76

0800240c <d7ap_stack_process_unsolicited_request>:

bool d7ap_stack_process_unsolicited_request(uint8_t *payload, uint8_t length, d7ap_session_result_t result, bool response_expected)
{
 800240c:	b082      	sub	sp, #8
 800240e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002410:	46ce      	mov	lr, r9
 8002412:	4647      	mov	r7, r8
 8002414:	b580      	push	{r7, lr}
 8002416:	b085      	sub	sp, #20
 8002418:	4681      	mov	r9, r0
 800241a:	4688      	mov	r8, r1
 800241c:	920c      	str	r2, [sp, #48]	; 0x30
 800241e:	930d      	str	r3, [sp, #52]	; 0x34
 8002420:	aa11      	add	r2, sp, #68	; 0x44
 8002422:	7815      	ldrb	r5, [r2, #0]

    //TODO handle here the re-assembly if needed?
    DPRINT("[D7AP] received an unsolicited request");
    DPRINT_DATA(payload, length);

    slave_session.active = true;
 8002424:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <d7ap_stack_process_unsolicited_request+0x8c>)
 8002426:	2101      	movs	r1, #1
 8002428:	7011      	strb	r1, [r2, #0]
    slave_session.token = result.fifo_token;
 800242a:	0e1b      	lsrs	r3, r3, #24
 800242c:	7093      	strb	r3, [r2, #2]
    slave_session.expected_response = response_expected;
 800242e:	7055      	strb	r5, [r2, #1]

    // Forward this unsolicited request to all clients
    for(uint8_t i = 0; i < registered_client_nb; i++)
 8002430:	2400      	movs	r4, #0
    bool expect_upper_layer_resp_payload = false;
 8002432:	2300      	movs	r3, #0
 8002434:	001f      	movs	r7, r3
    for(uint8_t i = 0; i < registered_client_nb; i++)
 8002436:	e001      	b.n	800243c <d7ap_stack_process_unsolicited_request+0x30>
 8002438:	3401      	adds	r4, #1
 800243a:	b2e4      	uxtb	r4, r4
 800243c:	4b17      	ldr	r3, [pc, #92]	; (800249c <d7ap_stack_process_unsolicited_request+0x90>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	42a3      	cmp	r3, r4
 8002442:	d913      	bls.n	800246c <d7ap_stack_process_unsolicited_request+0x60>
    {
        if (registered_client[i].unsolicited_cb)
 8002444:	0063      	lsls	r3, r4, #1
 8002446:	191b      	adds	r3, r3, r4
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <d7ap_stack_process_unsolicited_request+0x94>)
 800244c:	18d3      	adds	r3, r2, r3
 800244e:	689e      	ldr	r6, [r3, #8]
 8002450:	2e00      	cmp	r6, #0
 8002452:	d0f1      	beq.n	8002438 <d7ap_stack_process_unsolicited_request+0x2c>
            expect_upper_layer_resp_payload = registered_client[i].unsolicited_cb(payload, length, result, response_expected);
 8002454:	9503      	str	r5, [sp, #12]
 8002456:	ab0e      	add	r3, sp, #56	; 0x38
 8002458:	466a      	mov	r2, sp
 800245a:	cb83      	ldmia	r3!, {r0, r1, r7}
 800245c:	c283      	stmia	r2!, {r0, r1, r7}
 800245e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002460:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002462:	4641      	mov	r1, r8
 8002464:	4648      	mov	r0, r9
 8002466:	47b0      	blx	r6
 8002468:	0007      	movs	r7, r0
 800246a:	e7e5      	b.n	8002438 <d7ap_stack_process_unsolicited_request+0x2c>
    }

    if ((slave_session.expected_response) && (expect_upper_layer_resp_payload))
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <d7ap_stack_process_unsolicited_request+0x8c>)
 800246e:	785b      	ldrb	r3, [r3, #1]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <d7ap_stack_process_unsolicited_request+0x6c>
 8002474:	2f00      	cmp	r7, #0
 8002476:	d10b      	bne.n	8002490 <d7ap_stack_process_unsolicited_request+0x84>
        switch_state(D7AP_STACK_STATE_WAIT_APP_ANSWER);
    else
        switch_state(D7AP_STACK_STATE_RECEIVING);
 8002478:	2003      	movs	r0, #3
 800247a:	f7ff fedd 	bl	8002238 <switch_state>

    return expect_upper_layer_resp_payload;
}
 800247e:	0038      	movs	r0, r7
 8002480:	b005      	add	sp, #20
 8002482:	bc0c      	pop	{r2, r3}
 8002484:	4690      	mov	r8, r2
 8002486:	4699      	mov	r9, r3
 8002488:	bcf0      	pop	{r4, r5, r6, r7}
 800248a:	bc08      	pop	{r3}
 800248c:	b002      	add	sp, #8
 800248e:	4718      	bx	r3
        switch_state(D7AP_STACK_STATE_WAIT_APP_ANSWER);
 8002490:	2004      	movs	r0, #4
 8002492:	f7ff fed1 	bl	8002238 <switch_state>
 8002496:	e7f2      	b.n	800247e <d7ap_stack_process_unsolicited_request+0x72>
 8002498:	200018d8 	.word	0x200018d8
 800249c:	200018f4 	.word	0x200018f4
 80024a0:	200018dc 	.word	0x200018dc

080024a4 <d7ap_stack_process_received_response>:

void d7ap_stack_process_received_response(uint8_t *payload, uint8_t length, d7ap_session_result_t result)
{
 80024a4:	b082      	sub	sp, #8
 80024a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a8:	b087      	sub	sp, #28
 80024aa:	9005      	str	r0, [sp, #20]
 80024ac:	000d      	movs	r5, r1
 80024ae:	920c      	str	r2, [sp, #48]	; 0x30
 80024b0:	930d      	str	r3, [sp, #52]	; 0x34
    DPRINT("[D7AP] received a response");
    DPRINT_DATA(payload, length);
    session_t* session = get_session_by_session_token(result.fifo_token);
 80024b2:	0e1f      	lsrs	r7, r3, #24
 80024b4:	0038      	movs	r0, r7
 80024b6:	f7ff feab 	bl	8002210 <get_session_by_session_token>
 80024ba:	1e06      	subs	r6, r0, #0

    assert(session != NULL);
 80024bc:	d005      	beq.n	80024ca <d7ap_stack_process_received_response+0x26>

    uint16_t trans_id = ((uint16_t)result.fifo_token << 8) | (result.seqnr & 0x00FF);
 80024be:	023f      	lsls	r7, r7, #8
 80024c0:	ab0c      	add	r3, sp, #48	; 0x30
 80024c2:	7a18      	ldrb	r0, [r3, #8]
 80024c4:	4338      	orrs	r0, r7
    uint8_t i = 0;

    DPRINT("[D7AP] received trans_id %02X", trans_id);
    DPRINT("[D7AP] session->request_nb %d", session->request_nb);

    for(i = 0; i < session->request_nb; i++)
 80024c6:	2200      	movs	r2, #0
 80024c8:	e008      	b.n	80024dc <d7ap_stack_process_received_response+0x38>
    assert(session != NULL);
 80024ca:	21a1      	movs	r1, #161	; 0xa1
 80024cc:	4b17      	ldr	r3, [pc, #92]	; (800252c <d7ap_stack_process_received_response+0x88>)
 80024ce:	4a18      	ldr	r2, [pc, #96]	; (8002530 <d7ap_stack_process_received_response+0x8c>)
 80024d0:	0049      	lsls	r1, r1, #1
 80024d2:	4818      	ldr	r0, [pc, #96]	; (8002534 <d7ap_stack_process_received_response+0x90>)
 80024d4:	f006 f894 	bl	8008600 <__assert_func>
    for(i = 0; i < session->request_nb; i++)
 80024d8:	3201      	adds	r2, #1
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	78f7      	ldrb	r7, [r6, #3]
 80024de:	4297      	cmp	r7, r2
 80024e0:	d904      	bls.n	80024ec <d7ap_stack_process_received_response+0x48>
    {
    	DPRINT("[D7AP] session->trans_id[i] = %02X", session->trans_id[i]);
    	if (session->trans_id[i] == trans_id)
 80024e2:	0051      	lsls	r1, r2, #1
 80024e4:	1871      	adds	r1, r6, r1
 80024e6:	8889      	ldrh	r1, [r1, #4]
 80024e8:	4281      	cmp	r1, r0
 80024ea:	d1f5      	bne.n	80024d8 <d7ap_stack_process_received_response+0x34>
            break;
    }

    assert(i < session->request_nb);
 80024ec:	4297      	cmp	r7, r2
 80024ee:	d916      	bls.n	800251e <d7ap_stack_process_received_response+0x7a>

    if (registered_client[session->client_id].receive_cb)
 80024f0:	78b2      	ldrb	r2, [r6, #2]
 80024f2:	0053      	lsls	r3, r2, #1
 80024f4:	189b      	adds	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <d7ap_stack_process_received_response+0x94>)
 80024fa:	589e      	ldr	r6, [r3, r2]
 80024fc:	2e00      	cmp	r6, #0
 80024fe:	d009      	beq.n	8002514 <d7ap_stack_process_received_response+0x70>
        registered_client[session->client_id].receive_cb(trans_id, payload, length, result);
 8002500:	ab0d      	add	r3, sp, #52	; 0x34
 8002502:	466a      	mov	r2, sp
 8002504:	cb92      	ldmia	r3!, {r1, r4, r7}
 8002506:	c292      	stmia	r2!, {r1, r4, r7}
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800250e:	002a      	movs	r2, r5
 8002510:	9905      	ldr	r1, [sp, #20]
 8002512:	47b0      	blx	r6
}
 8002514:	b007      	add	sp, #28
 8002516:	bcf0      	pop	{r4, r5, r6, r7}
 8002518:	bc08      	pop	{r3}
 800251a:	b002      	add	sp, #8
 800251c:	4718      	bx	r3
    assert(i < session->request_nb);
 800251e:	2152      	movs	r1, #82	; 0x52
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <d7ap_stack_process_received_response+0x98>)
 8002522:	4a03      	ldr	r2, [pc, #12]	; (8002530 <d7ap_stack_process_received_response+0x8c>)
 8002524:	31ff      	adds	r1, #255	; 0xff
 8002526:	4803      	ldr	r0, [pc, #12]	; (8002534 <d7ap_stack_process_received_response+0x90>)
 8002528:	f006 f86a 	bl	8008600 <__assert_func>
 800252c:	080174e8 	.word	0x080174e8
 8002530:	08017530 	.word	0x08017530
 8002534:	0801747c 	.word	0x0801747c
 8002538:	200018dc 	.word	0x200018dc
 800253c:	080174f8 	.word	0x080174f8

08002540 <d7ap_stack_session_completed>:

void d7ap_stack_session_completed(uint8_t session_token, uint8_t* progress_bitmap, uint8_t* success_bitmap, uint8_t bitmap_byte_count)
{
 8002540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002542:	46ce      	mov	lr, r9
 8002544:	4647      	mov	r7, r8
 8002546:	b580      	push	{r7, lr}
 8002548:	4689      	mov	r9, r1
 800254a:	4690      	mov	r8, r2
    DPRINT("[D7AP] session is completed");
    error_t error;
    uint8_t request_id;
    session_t* session = get_session_by_session_token(session_token);
 800254c:	f7ff fe60 	bl	8002210 <get_session_by_session_token>
 8002550:	1e05      	subs	r5, r0, #0

    assert(session != NULL);
 8002552:	d00a      	beq.n	800256a <d7ap_stack_session_completed+0x2a>

    if (registered_client[session->client_id].transmitted_cb == NULL)
 8002554:	7882      	ldrb	r2, [r0, #2]
 8002556:	0053      	lsls	r3, r2, #1
 8002558:	189b      	adds	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4a1d      	ldr	r2, [pc, #116]	; (80025d4 <d7ap_stack_session_completed+0x94>)
 800255e:	18d3      	adds	r3, r2, r3
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d02e      	beq.n	80025c4 <d7ap_stack_session_completed+0x84>
        goto free_session;

    for(uint8_t i = 0; i < session->request_nb; i++)
 8002566:	2400      	movs	r4, #0
 8002568:	e012      	b.n	8002590 <d7ap_stack_session_completed+0x50>
    assert(session != NULL);
 800256a:	21af      	movs	r1, #175	; 0xaf
 800256c:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <d7ap_stack_session_completed+0x98>)
 800256e:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <d7ap_stack_session_completed+0x9c>)
 8002570:	0049      	lsls	r1, r1, #1
 8002572:	481b      	ldr	r0, [pc, #108]	; (80025e0 <d7ap_stack_session_completed+0xa0>)
 8002574:	f006 f844 	bl	8008600 <__assert_func>
    {
        request_id = (uint8_t)(session->trans_id[i] & 0xFF);
        error = bitmap_get(progress_bitmap, request_id) && bitmap_get(success_bitmap, request_id) ? SUCCESS : FAIL;
 8002578:	491a      	ldr	r1, [pc, #104]	; (80025e4 <d7ap_stack_session_completed+0xa4>)

        registered_client[session->client_id].transmitted_cb(session->trans_id[i], error);
 800257a:	78aa      	ldrb	r2, [r5, #2]
 800257c:	0053      	lsls	r3, r2, #1
 800257e:	189b      	adds	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4a14      	ldr	r2, [pc, #80]	; (80025d4 <d7ap_stack_session_completed+0x94>)
 8002584:	18d3      	adds	r3, r2, r3
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	0030      	movs	r0, r6
 800258a:	4798      	blx	r3
    for(uint8_t i = 0; i < session->request_nb; i++)
 800258c:	3401      	adds	r4, #1
 800258e:	b2e4      	uxtb	r4, r4
 8002590:	78eb      	ldrb	r3, [r5, #3]
 8002592:	42a3      	cmp	r3, r4
 8002594:	d913      	bls.n	80025be <d7ap_stack_session_completed+0x7e>
        request_id = (uint8_t)(session->trans_id[i] & 0xFF);
 8002596:	0063      	lsls	r3, r4, #1
 8002598:	18eb      	adds	r3, r5, r3
 800259a:	889e      	ldrh	r6, [r3, #4]
 800259c:	791f      	ldrb	r7, [r3, #4]
        error = bitmap_get(progress_bitmap, request_id) && bitmap_get(success_bitmap, request_id) ? SUCCESS : FAIL;
 800259e:	0039      	movs	r1, r7
 80025a0:	4648      	mov	r0, r9
 80025a2:	f7ff fdff 	bl	80021a4 <bitmap_get>
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d0e6      	beq.n	8002578 <d7ap_stack_session_completed+0x38>
 80025aa:	0039      	movs	r1, r7
 80025ac:	4640      	mov	r0, r8
 80025ae:	f7ff fdf9 	bl	80021a4 <bitmap_get>
 80025b2:	2800      	cmp	r0, #0
 80025b4:	d001      	beq.n	80025ba <d7ap_stack_session_completed+0x7a>
 80025b6:	2100      	movs	r1, #0
 80025b8:	e7df      	b.n	800257a <d7ap_stack_session_completed+0x3a>
 80025ba:	490a      	ldr	r1, [pc, #40]	; (80025e4 <d7ap_stack_session_completed+0xa4>)
 80025bc:	e7dd      	b.n	800257a <d7ap_stack_session_completed+0x3a>
    }

    switch_state(D7AP_STACK_STATE_IDLE);
 80025be:	2001      	movs	r0, #1
 80025c0:	f7ff fe3a 	bl	8002238 <switch_state>

free_session:
    free_session(session);
 80025c4:	0028      	movs	r0, r5
 80025c6:	f7ff fdf6 	bl	80021b6 <free_session>
}
 80025ca:	bc0c      	pop	{r2, r3}
 80025cc:	4690      	mov	r8, r2
 80025ce:	4699      	mov	r9, r3
 80025d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	200018dc 	.word	0x200018dc
 80025d8:	080174e8 	.word	0x080174e8
 80025dc:	08017558 	.word	0x08017558
 80025e0:	0801747c 	.word	0x0801747c
 80025e4:	00001389 	.word	0x00001389

080025e8 <d7ap_stack_signal_active_master_session>:

void d7ap_stack_signal_active_master_session(uint8_t session_token)
{
 80025e8:	b510      	push	{r4, lr}
 80025ea:	0004      	movs	r4, r0
    switch_state(D7AP_STACK_STATE_TRANSMITTING);
 80025ec:	2002      	movs	r0, #2
 80025ee:	f7ff fe23 	bl	8002238 <switch_state>
    DPRINT("[D7AP] session[%d] is now active", session_token);
    session_t* session = get_session_by_session_token(session_token);
 80025f2:	0020      	movs	r0, r4
 80025f4:	f7ff fe0c 	bl	8002210 <get_session_by_session_token>

    assert(session != NULL);
 80025f8:	2800      	cmp	r0, #0
 80025fa:	d002      	beq.n	8002602 <d7ap_stack_signal_active_master_session+0x1a>
    session->active = true;
 80025fc:	2301      	movs	r3, #1
 80025fe:	7003      	strb	r3, [r0, #0]
}
 8002600:	bd10      	pop	{r4, pc}
    assert(session != NULL);
 8002602:	2178      	movs	r1, #120	; 0x78
 8002604:	4b02      	ldr	r3, [pc, #8]	; (8002610 <d7ap_stack_signal_active_master_session+0x28>)
 8002606:	4a03      	ldr	r2, [pc, #12]	; (8002614 <d7ap_stack_signal_active_master_session+0x2c>)
 8002608:	31ff      	adds	r1, #255	; 0xff
 800260a:	4803      	ldr	r0, [pc, #12]	; (8002618 <d7ap_stack_signal_active_master_session+0x30>)
 800260c:	f005 fff8 	bl	8008600 <__assert_func>
 8002610:	080174e8 	.word	0x080174e8
 8002614:	08017578 	.word	0x08017578
 8002618:	0801747c 	.word	0x0801747c

0800261c <d7ap_stack_signal_slave_session_terminated>:


void d7ap_stack_signal_slave_session_terminated(void)
{
 800261c:	b510      	push	{r4, lr}
    DPRINT("[D7AP] slave session is terminated");
    slave_session.active = false;
 800261e:	4b03      	ldr	r3, [pc, #12]	; (800262c <d7ap_stack_signal_slave_session_terminated+0x10>)
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
    switch_state(D7AP_STACK_STATE_IDLE);
 8002624:	2001      	movs	r0, #1
 8002626:	f7ff fe07 	bl	8002238 <switch_state>
}
 800262a:	bd10      	pop	{r4, pc}
 800262c:	200018d8 	.word	0x200018d8

08002630 <d7ap_stack_signal_transaction_terminated>:

void d7ap_stack_signal_transaction_terminated(void)
{
 8002630:	b510      	push	{r4, lr}
    DPRINT("[D7AP] transaction is terminated");

    if ( d7ap_stack_state ==  D7AP_STACK_STATE_WAIT_APP_ANSWER)
 8002632:	4b04      	ldr	r3, [pc, #16]	; (8002644 <d7ap_stack_signal_transaction_terminated+0x14>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b04      	cmp	r3, #4
 8002638:	d000      	beq.n	800263c <d7ap_stack_signal_transaction_terminated+0xc>
        switch_state(D7AP_STACK_STATE_RECEIVING);
}
 800263a:	bd10      	pop	{r4, pc}
        switch_state(D7AP_STACK_STATE_RECEIVING);
 800263c:	2003      	movs	r0, #3
 800263e:	f7ff fdfb 	bl	8002238 <switch_state>
}
 8002642:	e7fa      	b.n	800263a <d7ap_stack_signal_transaction_terminated+0xa>
 8002644:	200018c5 	.word	0x200018c5

08002648 <d7ap_init>:
uint8_t registered_client_nb = 0;
bool inited = false;


void d7ap_init()
{
 8002648:	b510      	push	{r4, lr}
    if(inited)
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <d7ap_init+0x20>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d000      	beq.n	8002654 <d7ap_init+0xc>
    inited = true;

    // Initialize the D7AP stack
    d7ap_stack_init();
    registered_client_nb = 0;
}
 8002652:	bd10      	pop	{r4, pc}
    inited = true;
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <d7ap_init+0x20>)
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
    d7ap_stack_init();
 800265a:	f7ff fe49 	bl	80022f0 <d7ap_stack_init>
    registered_client_nb = 0;
 800265e:	4b03      	ldr	r3, [pc, #12]	; (800266c <d7ap_init+0x24>)
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
 8002664:	e7f5      	b.n	8002652 <d7ap_init+0xa>
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	200018db 	.word	0x200018db
 800266c:	200018f4 	.word	0x200018f4

08002670 <d7ap_stop>:

void d7ap_stop()
{
 8002670:	b510      	push	{r4, lr}
    inited = false;
 8002672:	2400      	movs	r4, #0
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <d7ap_stop+0x14>)
 8002676:	701c      	strb	r4, [r3, #0]
    d7ap_stack_stop();
 8002678:	f7ff fe6a 	bl	8002350 <d7ap_stack_stop>
    registered_client_nb = 0;
 800267c:	4b02      	ldr	r3, [pc, #8]	; (8002688 <d7ap_stop+0x18>)
 800267e:	701c      	strb	r4, [r3, #0]
}
 8002680:	bd10      	pop	{r4, pc}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	200018db 	.word	0x200018db
 8002688:	200018f4 	.word	0x200018f4

0800268c <d7ap_register>:
 * @param[in] desc pointer to the client resource
 *
 * @return  the client Id
 */
uint8_t d7ap_register(d7ap_resource_desc_t* desc)
{
 800268c:	b570      	push	{r4, r5, r6, lr}
 800268e:	0003      	movs	r3, r0
    assert(inited);
 8002690:	4a0f      	ldr	r2, [pc, #60]	; (80026d0 <d7ap_register+0x44>)
 8002692:	7812      	ldrb	r2, [r2, #0]
 8002694:	2a00      	cmp	r2, #0
 8002696:	d00e      	beq.n	80026b6 <d7ap_register+0x2a>
    assert(registered_client_nb < MODULE_D7AP_MAX_CLIENT_COUNT);
 8002698:	4a0e      	ldr	r2, [pc, #56]	; (80026d4 <d7ap_register+0x48>)
 800269a:	7810      	ldrb	r0, [r2, #0]
 800269c:	2801      	cmp	r0, #1
 800269e:	d810      	bhi.n	80026c2 <d7ap_register+0x36>
    registered_client[registered_client_nb] = *desc;
 80026a0:	0042      	lsls	r2, r0, #1
 80026a2:	1812      	adds	r2, r2, r0
 80026a4:	0091      	lsls	r1, r2, #2
 80026a6:	4a0c      	ldr	r2, [pc, #48]	; (80026d8 <d7ap_register+0x4c>)
 80026a8:	1852      	adds	r2, r2, r1
 80026aa:	cb32      	ldmia	r3!, {r1, r4, r5}
 80026ac:	c232      	stmia	r2!, {r1, r4, r5}
    registered_client_nb++;
 80026ae:	1c42      	adds	r2, r0, #1
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <d7ap_register+0x48>)
 80026b2:	701a      	strb	r2, [r3, #0]
    return (registered_client_nb-1);
}
 80026b4:	bd70      	pop	{r4, r5, r6, pc}
    assert(inited);
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <d7ap_register+0x50>)
 80026b8:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <d7ap_register+0x54>)
 80026ba:	214f      	movs	r1, #79	; 0x4f
 80026bc:	4809      	ldr	r0, [pc, #36]	; (80026e4 <d7ap_register+0x58>)
 80026be:	f005 ff9f 	bl	8008600 <__assert_func>
    assert(registered_client_nb < MODULE_D7AP_MAX_CLIENT_COUNT);
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <d7ap_register+0x5c>)
 80026c4:	4a06      	ldr	r2, [pc, #24]	; (80026e0 <d7ap_register+0x54>)
 80026c6:	2150      	movs	r1, #80	; 0x50
 80026c8:	4806      	ldr	r0, [pc, #24]	; (80026e4 <d7ap_register+0x58>)
 80026ca:	f005 ff99 	bl	8008600 <__assert_func>
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	200018db 	.word	0x200018db
 80026d4:	200018f4 	.word	0x200018f4
 80026d8:	200018dc 	.word	0x200018dc
 80026dc:	080175a0 	.word	0x080175a0
 80026e0:	08017610 	.word	0x08017610
 80026e4:	080175a8 	.word	0x080175a8
 80026e8:	080175dc 	.word	0x080175dc

080026ec <d7ap_read_vid>:
    assert(client_id < registered_client_nb);

}*/

int d7ap_read_vid(uint8_t *buffer)
{
 80026ec:	b500      	push	{lr}
 80026ee:	b085      	sub	sp, #20
 80026f0:	0002      	movs	r2, r0
    uint32_t length = ID_TYPE_VID_LENGTH;
 80026f2:	2302      	movs	r3, #2
 80026f4:	9303      	str	r3, [sp, #12]
    return (d7ap_fs_read_file(D7A_FILE_VID_FILE_ID, 0, buffer, &length, ROOT_AUTH));
 80026f6:	2300      	movs	r3, #0
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	ab03      	add	r3, sp, #12
 80026fc:	2100      	movs	r1, #0
 80026fe:	2006      	movs	r0, #6
 8002700:	f005 face 	bl	8007ca0 <d7ap_fs_read_file>
}
 8002704:	b005      	add	sp, #20
 8002706:	bd00      	pop	{pc}

08002708 <d7ap_send>:
 * @return 0 on success
 * @return an error (errno.h) in case of failure
 */
error_t d7ap_send(uint8_t client_id, d7ap_session_config_t* config, uint8_t* payload,
                  uint8_t len, uint8_t expected_response_len, uint16_t *trans_id)
{
 8002708:	b530      	push	{r4, r5, lr}
 800270a:	b083      	sub	sp, #12
 800270c:	ac06      	add	r4, sp, #24
 800270e:	7825      	ldrb	r5, [r4, #0]
    error_t error;

    if (client_id >= registered_client_nb)
 8002710:	4c06      	ldr	r4, [pc, #24]	; (800272c <d7ap_send+0x24>)
 8002712:	7824      	ldrb	r4, [r4, #0]
 8002714:	4284      	cmp	r4, r0
 8002716:	d906      	bls.n	8002726 <d7ap_send+0x1e>
        return -ESIZE;

    error = d7ap_stack_send(client_id, config, payload, len, expected_response_len, trans_id);
 8002718:	9c07      	ldr	r4, [sp, #28]
 800271a:	9401      	str	r4, [sp, #4]
 800271c:	9500      	str	r5, [sp, #0]
 800271e:	f7ff fe29 	bl	8002374 <d7ap_stack_send>
    {
        DPRINT("d7ap_stack_send failed with error %x", error);
    }

    return error;
}
 8002722:	b003      	add	sp, #12
 8002724:	bd30      	pop	{r4, r5, pc}
        return -ESIZE;
 8002726:	4802      	ldr	r0, [pc, #8]	; (8002730 <d7ap_send+0x28>)
 8002728:	e7fb      	b.n	8002722 <d7ap_send+0x1a>
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	200018f4 	.word	0x200018f4
 8002730:	ffffec76 	.word	0xffffec76

08002734 <bitmap_get>:
    return bitmap[pos / 8] & (1 << (pos & 7))? true : false;
 8002734:	08cb      	lsrs	r3, r1, #3
 8002736:	5cc0      	ldrb	r0, [r0, r3]
 8002738:	2307      	movs	r3, #7
 800273a:	4019      	ands	r1, r3
 800273c:	0003      	movs	r3, r0
 800273e:	410b      	asrs	r3, r1
 8002740:	2001      	movs	r0, #1
 8002742:	4018      	ands	r0, r3
}
 8002744:	4770      	bx	lr

08002746 <bitmap_search>:
 * \param flag      Determines if we search for 1 or 0
 * \param size      The max number of bits to search
 * \return The index of the first occurance of flag, or -1 when not found
 */
static int8_t bitmap_search(uint8_t* bitmap, bool flag, uint8_t size)
{
 8002746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002748:	0007      	movs	r7, r0
 800274a:	000e      	movs	r6, r1
 800274c:	0015      	movs	r5, r2
    uint8_t i;
    for(i = 0; i < size; i++)
 800274e:	2400      	movs	r4, #0
 8002750:	42ac      	cmp	r4, r5
 8002752:	d20a      	bcs.n	800276a <bitmap_search+0x24>
        if(bitmap_get(bitmap, i) == flag)
 8002754:	0021      	movs	r1, r4
 8002756:	0038      	movs	r0, r7
 8002758:	f7ff ffec 	bl	8002734 <bitmap_get>
 800275c:	42b0      	cmp	r0, r6
 800275e:	d002      	beq.n	8002766 <bitmap_search+0x20>
    for(i = 0; i < size; i++)
 8002760:	3401      	adds	r4, #1
 8002762:	b2e4      	uxtb	r4, r4
 8002764:	e7f4      	b.n	8002750 <bitmap_search+0xa>
            return i;
 8002766:	b260      	sxtb	r0, r4
 8002768:	e001      	b.n	800276e <bitmap_search+0x28>

    return -1;
 800276a:	2001      	movs	r0, #1
 800276c:	4240      	negs	r0, r0
}
 800276e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002770 <mark_current_request_done>:

static void switch_state(state_t new_state);

static void mark_current_request_done()
{
    bitmap_set(current_master_session.progress_bitmap, current_request_id);
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <mark_current_request_done+0x1c>)
 8002772:	781b      	ldrb	r3, [r3, #0]
    bitmap[pos / 8] |= (1 << (pos & 7));
 8002774:	08d9      	lsrs	r1, r3, #3
 8002776:	4806      	ldr	r0, [pc, #24]	; (8002790 <mark_current_request_done+0x20>)
 8002778:	2207      	movs	r2, #7
 800277a:	401a      	ands	r2, r3
 800277c:	2301      	movs	r3, #1
 800277e:	4093      	lsls	r3, r2
 8002780:	001a      	movs	r2, r3
 8002782:	5c43      	ldrb	r3, [r0, r1]
 8002784:	4313      	orrs	r3, r2
 8002786:	5443      	strb	r3, [r0, r1]
    // current_request_packet will be free-ed in the packet_queue when the transaction is completed
}
 8002788:	4770      	bx	lr
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	200019e2 	.word	0x200019e2
 8002790:	20001906 	.word	0x20001906

08002794 <mark_current_request_successful>:

static void mark_current_request_successful()
{
    bitmap_set(current_master_session.success_bitmap, current_request_id);
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <mark_current_request_successful+0x1c>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	08d9      	lsrs	r1, r3, #3
 800279a:	4806      	ldr	r0, [pc, #24]	; (80027b4 <mark_current_request_successful+0x20>)
 800279c:	2207      	movs	r2, #7
 800279e:	401a      	ands	r2, r3
 80027a0:	2301      	movs	r3, #1
 80027a2:	4093      	lsls	r3, r2
 80027a4:	001a      	movs	r2, r3
 80027a6:	5c43      	ldrb	r3, [r0, r1]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	5443      	strb	r3, [r0, r1]
}
 80027ac:	4770      	bx	lr
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	200019e2 	.word	0x200019e2
 80027b4:	20001907 	.word	0x20001907

080027b8 <get_master_session_from_token>:

    return current_master_session.token;
}

static d7asp_master_session_t* get_master_session_from_token(uint8_t session_token)
{
 80027b8:	b510      	push	{r4, lr}
    //TODO handle a list of sessions
    //for now, return systematically the current master session
    assert(current_master_session.token == session_token);
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <get_master_session_from_token+0x1c>)
 80027bc:	7b5b      	ldrb	r3, [r3, #13]
 80027be:	4283      	cmp	r3, r0
 80027c0:	d101      	bne.n	80027c6 <get_master_session_from_token+0xe>
    return(&current_master_session);
}
 80027c2:	4804      	ldr	r0, [pc, #16]	; (80027d4 <get_master_session_from_token+0x1c>)
 80027c4:	bd10      	pop	{r4, pc}
    assert(current_master_session.token == session_token);
 80027c6:	21c4      	movs	r1, #196	; 0xc4
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <get_master_session_from_token+0x20>)
 80027ca:	4a04      	ldr	r2, [pc, #16]	; (80027dc <get_master_session_from_token+0x24>)
 80027cc:	31ff      	adds	r1, #255	; 0xff
 80027ce:	4804      	ldr	r0, [pc, #16]	; (80027e0 <get_master_session_from_token+0x28>)
 80027d0:	f005 ff16 	bl	8008600 <__assert_func>
 80027d4:	200018f8 	.word	0x200018f8
 80027d8:	08017620 	.word	0x08017620
 80027dc:	08017d10 	.word	0x08017d10
 80027e0:	08017650 	.word	0x08017650

080027e4 <init_master_session>:
static void init_master_session(d7asp_master_session_t* session) {
 80027e4:	b510      	push	{r4, lr}
 80027e6:	0004      	movs	r4, r0
    session->state = D7ASP_MASTER_SESSION_IDLE;
 80027e8:	2300      	movs	r3, #0
 80027ea:	7303      	strb	r3, [r0, #12]
        session->token = get_rnd() % 0xFF;
 80027ec:	f00c fd26 	bl	800f23c <get_rnd>
 80027f0:	21ff      	movs	r1, #255	; 0xff
 80027f2:	f00f fa13 	bl	8011c1c <__aeabi_uidivmod>
 80027f6:	b2c9      	uxtb	r1, r1
 80027f8:	7361      	strb	r1, [r4, #13]
    } while(session->token == 0);
 80027fa:	2900      	cmp	r1, #0
 80027fc:	d0f6      	beq.n	80027ec <init_master_session+0x8>
    memset(session->progress_bitmap, 0x00, REQUESTS_BITMAP_BYTE_COUNT);
 80027fe:	0020      	movs	r0, r4
 8002800:	300e      	adds	r0, #14
 8002802:	2201      	movs	r2, #1
 8002804:	2100      	movs	r1, #0
 8002806:	f012 fb37 	bl	8014e78 <memset>
    memset(session->success_bitmap, 0x00, REQUESTS_BITMAP_BYTE_COUNT);
 800280a:	0020      	movs	r0, r4
 800280c:	300f      	adds	r0, #15
 800280e:	2201      	movs	r2, #1
 8002810:	2100      	movs	r1, #0
 8002812:	f012 fb31 	bl	8014e78 <memset>
    session->next_request_id = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	7423      	strb	r3, [r4, #16]
    session->request_buffer_tail_idx = 0;
 800281a:	7463      	strb	r3, [r4, #17]
    memset(session->requests_indices, 0x00, MODULE_D7AP_FIFO_MAX_REQUESTS_COUNT);
 800281c:	0020      	movs	r0, r4
 800281e:	3012      	adds	r0, #18
 8002820:	2202      	movs	r2, #2
 8002822:	2100      	movs	r1, #0
 8002824:	f012 fb28 	bl	8014e78 <memset>
    memset(session->requests_lengths, 0x00, MODULE_D7AP_FIFO_MAX_REQUESTS_COUNT);
 8002828:	0020      	movs	r0, r4
 800282a:	3014      	adds	r0, #20
 800282c:	2202      	movs	r2, #2
 800282e:	2100      	movs	r1, #0
 8002830:	f012 fb22 	bl	8014e78 <memset>
    memset(session->response_lengths, 255, MODULE_D7AP_FIFO_MAX_REQUESTS_COUNT);
 8002834:	0020      	movs	r0, r4
 8002836:	3016      	adds	r0, #22
 8002838:	2202      	movs	r2, #2
 800283a:	21ff      	movs	r1, #255	; 0xff
 800283c:	f012 fb1c 	bl	8014e78 <memset>
    memset(session->request_buffer, 0x00, MODULE_D7AP_FIFO_COMMAND_BUFFER_SIZE);
 8002840:	0020      	movs	r0, r4
 8002842:	3018      	adds	r0, #24
 8002844:	22c8      	movs	r2, #200	; 0xc8
 8002846:	2100      	movs	r1, #0
 8002848:	f012 fb16 	bl	8014e78 <memset>
}
 800284c:	bd10      	pop	{r4, pc}
	...

08002850 <schedule_current_session>:
static void schedule_current_session() {
 8002850:	b510      	push	{r4, lr}
    assert(d7asp_state == D7ASP_STATE_MASTER || d7asp_state == D7ASP_STATE_PENDING_MASTER || d7asp_state == D7ASP_STATE_SLAVE);
 8002852:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <schedule_current_session+0x50>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b03      	cmp	r3, #3
 8002858:	d003      	beq.n	8002862 <schedule_current_session+0x12>
 800285a:	2b05      	cmp	r3, #5
 800285c:	d001      	beq.n	8002862 <schedule_current_session+0x12>
 800285e:	2b02      	cmp	r3, #2
 8002860:	d10b      	bne.n	800287a <schedule_current_session+0x2a>
    assert(current_master_session.state >= D7ASP_MASTER_SESSION_PENDING);
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <schedule_current_session+0x54>)
 8002864:	7b1b      	ldrb	r3, [r3, #12]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d90d      	bls.n	8002886 <schedule_current_session+0x36>
    current_session_timer.next_event = 0;
 800286a:	480f      	ldr	r0, [pc, #60]	; (80028a8 <schedule_current_session+0x58>)
 800286c:	2300      	movs	r3, #0
 800286e:	6043      	str	r3, [r0, #4]
    int rtc = timer_add_event(&current_session_timer);
 8002870:	f00d ffe0 	bl	8010834 <timer_add_event>
    assert(rtc == SUCCESS);
 8002874:	2800      	cmp	r0, #0
 8002876:	d10c      	bne.n	8002892 <schedule_current_session+0x42>
}
 8002878:	bd10      	pop	{r4, pc}
    assert(d7asp_state == D7ASP_STATE_MASTER || d7asp_state == D7ASP_STATE_PENDING_MASTER || d7asp_state == D7ASP_STATE_SLAVE);
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <schedule_current_session+0x5c>)
 800287c:	4a0c      	ldr	r2, [pc, #48]	; (80028b0 <schedule_current_session+0x60>)
 800287e:	21a8      	movs	r1, #168	; 0xa8
 8002880:	480c      	ldr	r0, [pc, #48]	; (80028b4 <schedule_current_session+0x64>)
 8002882:	f005 febd 	bl	8008600 <__assert_func>
    assert(current_master_session.state >= D7ASP_MASTER_SESSION_PENDING);
 8002886:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <schedule_current_session+0x68>)
 8002888:	4a09      	ldr	r2, [pc, #36]	; (80028b0 <schedule_current_session+0x60>)
 800288a:	21a9      	movs	r1, #169	; 0xa9
 800288c:	4809      	ldr	r0, [pc, #36]	; (80028b4 <schedule_current_session+0x64>)
 800288e:	f005 feb7 	bl	8008600 <__assert_func>
    assert(rtc == SUCCESS);
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <schedule_current_session+0x6c>)
 8002894:	4a06      	ldr	r2, [pc, #24]	; (80028b0 <schedule_current_session+0x60>)
 8002896:	21ae      	movs	r1, #174	; 0xae
 8002898:	4806      	ldr	r0, [pc, #24]	; (80028b4 <schedule_current_session+0x64>)
 800289a:	f005 feb1 	bl	8008600 <__assert_func>
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	200019f1 	.word	0x200019f1
 80028a4:	200018f8 	.word	0x200018f8
 80028a8:	20001a00 	.word	0x20001a00
 80028ac:	08017684 	.word	0x08017684
 80028b0:	08017c94 	.word	0x08017c94
 80028b4:	08017650 	.word	0x08017650
 80028b8:	080176f8 	.word	0x080176f8
 80028bc:	08017738 	.word	0x08017738

080028c0 <switch_state>:
{
 80028c0:	b510      	push	{r4, lr}
    switch(new_state)
 80028c2:	2806      	cmp	r0, #6
 80028c4:	d900      	bls.n	80028c8 <switch_state+0x8>
 80028c6:	e072      	b.n	80029ae <switch_state+0xee>
 80028c8:	0083      	lsls	r3, r0, #2
 80028ca:	4a3c      	ldr	r2, [pc, #240]	; (80029bc <switch_state+0xfc>)
 80028cc:	58d3      	ldr	r3, [r2, r3]
 80028ce:	469f      	mov	pc, r3
            switch(d7asp_state)
 80028d0:	4b3b      	ldr	r3, [pc, #236]	; (80029c0 <switch_state+0x100>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d00e      	beq.n	80028f6 <switch_state+0x36>
 80028d8:	d806      	bhi.n	80028e8 <switch_state+0x28>
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d10f      	bne.n	80028fe <switch_state+0x3e>
                    d7asp_state = new_state;
 80028de:	4b38      	ldr	r3, [pc, #224]	; (80029c0 <switch_state+0x100>)
 80028e0:	7018      	strb	r0, [r3, #0]
                    schedule_current_session();
 80028e2:	f7ff ffb5 	bl	8002850 <schedule_current_session>
                    break;
 80028e6:	e061      	b.n	80029ac <switch_state+0xec>
 80028e8:	3b04      	subs	r3, #4
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d806      	bhi.n	80028fe <switch_state+0x3e>
                    d7asp_state = new_state;
 80028f0:	4b33      	ldr	r3, [pc, #204]	; (80029c0 <switch_state+0x100>)
 80028f2:	7018      	strb	r0, [r3, #0]
                    break;
 80028f4:	e05a      	b.n	80029ac <switch_state+0xec>
                    d7asp_state = D7ASP_STATE_SLAVE_PENDING_MASTER;
 80028f6:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <switch_state+0x100>)
 80028f8:	2204      	movs	r2, #4
 80028fa:	701a      	strb	r2, [r3, #0]
                    break;
 80028fc:	e056      	b.n	80029ac <switch_state+0xec>
                    assert(false);
 80028fe:	2136      	movs	r1, #54	; 0x36
 8002900:	4b30      	ldr	r3, [pc, #192]	; (80029c4 <switch_state+0x104>)
 8002902:	4a31      	ldr	r2, [pc, #196]	; (80029c8 <switch_state+0x108>)
 8002904:	31ff      	adds	r1, #255	; 0xff
 8002906:	4831      	ldr	r0, [pc, #196]	; (80029cc <switch_state+0x10c>)
 8002908:	f005 fe7a 	bl	8008600 <__assert_func>
            switch(d7asp_state)
 800290c:	4b2c      	ldr	r3, [pc, #176]	; (80029c0 <switch_state+0x100>)
 800290e:	781a      	ldrb	r2, [r3, #0]
 8002910:	2a06      	cmp	r2, #6
 8002912:	d80a      	bhi.n	800292a <switch_state+0x6a>
 8002914:	2301      	movs	r3, #1
 8002916:	4093      	lsls	r3, r2
 8002918:	224a      	movs	r2, #74	; 0x4a
 800291a:	421a      	tst	r2, r3
 800291c:	d005      	beq.n	800292a <switch_state+0x6a>
                    d7asp_state = new_state;
 800291e:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <switch_state+0x100>)
 8002920:	7018      	strb	r0, [r3, #0]
                    current_request_id = NO_ACTIVE_REQUEST_ID;
 8002922:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <switch_state+0x110>)
 8002924:	32b5      	adds	r2, #181	; 0xb5
 8002926:	701a      	strb	r2, [r3, #0]
            break;
 8002928:	e040      	b.n	80029ac <switch_state+0xec>
                    assert(false);
 800292a:	21a2      	movs	r1, #162	; 0xa2
 800292c:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <switch_state+0x104>)
 800292e:	4a26      	ldr	r2, [pc, #152]	; (80029c8 <switch_state+0x108>)
 8002930:	0049      	lsls	r1, r1, #1
 8002932:	4826      	ldr	r0, [pc, #152]	; (80029cc <switch_state+0x10c>)
 8002934:	f005 fe64 	bl	8008600 <__assert_func>
            assert(d7asp_state == D7ASP_STATE_SLAVE || d7asp_state == D7ASP_STATE_PENDING_MASTER ||
 8002938:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <switch_state+0x100>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d003      	beq.n	8002948 <switch_state+0x88>
 8002940:	2b05      	cmp	r3, #5
 8002942:	d001      	beq.n	8002948 <switch_state+0x88>
 8002944:	2b06      	cmp	r3, #6
 8002946:	d103      	bne.n	8002950 <switch_state+0x90>
            d7asp_state = D7ASP_STATE_SLAVE_PENDING_MASTER;
 8002948:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <switch_state+0x100>)
 800294a:	2204      	movs	r2, #4
 800294c:	701a      	strb	r2, [r3, #0]
            break;
 800294e:	e02d      	b.n	80029ac <switch_state+0xec>
            assert(d7asp_state == D7ASP_STATE_SLAVE || d7asp_state == D7ASP_STATE_PENDING_MASTER ||
 8002950:	21a4      	movs	r1, #164	; 0xa4
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <switch_state+0x114>)
 8002954:	4a1c      	ldr	r2, [pc, #112]	; (80029c8 <switch_state+0x108>)
 8002956:	0049      	lsls	r1, r1, #1
 8002958:	481c      	ldr	r0, [pc, #112]	; (80029cc <switch_state+0x10c>)
 800295a:	f005 fe51 	bl	8008600 <__assert_func>
            assert(d7asp_state == D7ASP_STATE_IDLE || d7asp_state == D7ASP_STATE_SLAVE);
 800295e:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <switch_state+0x100>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	3b01      	subs	r3, #1
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d803      	bhi.n	8002972 <switch_state+0xb2>
            d7asp_state = D7ASP_STATE_PENDING_MASTER;
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <switch_state+0x100>)
 800296c:	2205      	movs	r2, #5
 800296e:	701a      	strb	r2, [r3, #0]
            break;
 8002970:	e01c      	b.n	80029ac <switch_state+0xec>
            assert(d7asp_state == D7ASP_STATE_IDLE || d7asp_state == D7ASP_STATE_SLAVE);
 8002972:	21a7      	movs	r1, #167	; 0xa7
 8002974:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <switch_state+0x118>)
 8002976:	4a14      	ldr	r2, [pc, #80]	; (80029c8 <switch_state+0x108>)
 8002978:	0049      	lsls	r1, r1, #1
 800297a:	4814      	ldr	r0, [pc, #80]	; (80029cc <switch_state+0x10c>)
 800297c:	f005 fe40 	bl	8008600 <__assert_func>
            assert(d7asp_state == D7ASP_STATE_SLAVE || d7asp_state == D7ASP_STATE_SLAVE_PENDING_MASTER);
 8002980:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <switch_state+0x100>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d001      	beq.n	800298c <switch_state+0xcc>
 8002988:	2b04      	cmp	r3, #4
 800298a:	d103      	bne.n	8002994 <switch_state+0xd4>
            d7asp_state = D7ASP_STATE_SLAVE_WAITING_RESPONSE;
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <switch_state+0x100>)
 800298e:	2206      	movs	r2, #6
 8002990:	701a      	strb	r2, [r3, #0]
            break;
 8002992:	e00b      	b.n	80029ac <switch_state+0xec>
            assert(d7asp_state == D7ASP_STATE_SLAVE || d7asp_state == D7ASP_STATE_SLAVE_PENDING_MASTER);
 8002994:	2154      	movs	r1, #84	; 0x54
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <switch_state+0x11c>)
 8002998:	4a0b      	ldr	r2, [pc, #44]	; (80029c8 <switch_state+0x108>)
 800299a:	31ff      	adds	r1, #255	; 0xff
 800299c:	480b      	ldr	r0, [pc, #44]	; (80029cc <switch_state+0x10c>)
 800299e:	f005 fe2f 	bl	8008600 <__assert_func>
            d7asp_state = new_state;
 80029a2:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <switch_state+0x100>)
 80029a4:	7018      	strb	r0, [r3, #0]
            current_request_id = NO_ACTIVE_REQUEST_ID;
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <switch_state+0x110>)
 80029a8:	22ff      	movs	r2, #255	; 0xff
 80029aa:	701a      	strb	r2, [r3, #0]
}
 80029ac:	bd10      	pop	{r4, pc}
            assert(false);
 80029ae:	215e      	movs	r1, #94	; 0x5e
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <switch_state+0x104>)
 80029b2:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <switch_state+0x108>)
 80029b4:	31ff      	adds	r1, #255	; 0xff
 80029b6:	4805      	ldr	r0, [pc, #20]	; (80029cc <switch_state+0x10c>)
 80029b8:	f005 fe22 	bl	8008600 <__assert_func>
 80029bc:	08017864 	.word	0x08017864
 80029c0:	200019f1 	.word	0x200019f1
 80029c4:	080169c8 	.word	0x080169c8
 80029c8:	08017cbc 	.word	0x08017cbc
 80029cc:	08017650 	.word	0x08017650
 80029d0:	200019e2 	.word	0x200019e2
 80029d4:	08017748 	.word	0x08017748
 80029d8:	080177cc 	.word	0x080177cc
 80029dc:	08017810 	.word	0x08017810

080029e0 <flush_completed>:
static void flush_completed() {
 80029e0:	b510      	push	{r4, lr}
                                   current_master_session.success_bitmap, current_master_session.next_request_id - 1);
 80029e2:	4c0b      	ldr	r4, [pc, #44]	; (8002a10 <flush_completed+0x30>)
 80029e4:	7c23      	ldrb	r3, [r4, #16]
    d7ap_stack_session_completed(current_master_session.token, current_master_session.progress_bitmap,
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	0022      	movs	r2, r4
 80029ec:	320f      	adds	r2, #15
 80029ee:	0021      	movs	r1, r4
 80029f0:	310e      	adds	r1, #14
 80029f2:	7b60      	ldrb	r0, [r4, #13]
 80029f4:	f7ff fda4 	bl	8002540 <d7ap_stack_session_completed>
    init_master_session(&current_master_session);
 80029f8:	0020      	movs	r0, r4
 80029fa:	f7ff fef3 	bl	80027e4 <init_master_session>
    current_master_session.state = D7ASP_MASTER_SESSION_IDLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	7323      	strb	r3, [r4, #12]
    d7atp_signal_dialog_termination();
 8002a02:	f000 ff5b 	bl	80038bc <d7atp_signal_dialog_termination>
    switch_state(D7ASP_STATE_IDLE);
 8002a06:	2001      	movs	r0, #1
 8002a08:	f7ff ff5a 	bl	80028c0 <switch_state>
}
 8002a0c:	bd10      	pop	{r4, pc}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	200018f8 	.word	0x200018f8

08002a14 <flush_fifos>:
{
 8002a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a16:	b087      	sub	sp, #28
    if (d7asp_state != D7ASP_STATE_MASTER && d7asp_state != D7ASP_STATE_PENDING_MASTER)
 8002a18:	4b64      	ldr	r3, [pc, #400]	; (8002bac <flush_fifos+0x198>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d001      	beq.n	8002a24 <flush_fifos+0x10>
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	d13a      	bne.n	8002a9a <flush_fifos+0x86>
    if(current_master_session.state != D7ASP_MASTER_SESSION_PENDING &&
 8002a24:	4a62      	ldr	r2, [pc, #392]	; (8002bb0 <flush_fifos+0x19c>)
 8002a26:	7b14      	ldrb	r4, [r2, #12]
 8002a28:	2c02      	cmp	r4, #2
 8002a2a:	d005      	beq.n	8002a38 <flush_fifos+0x24>
 8002a2c:	2c05      	cmp	r4, #5
 8002a2e:	d003      	beq.n	8002a38 <flush_fifos+0x24>
       current_master_session.state != D7ASP_MASTER_SESSION_ACTIVE &&
 8002a30:	2c03      	cmp	r4, #3
 8002a32:	d001      	beq.n	8002a38 <flush_fifos+0x24>
       current_master_session.state != D7ASP_MASTER_SESSION_PENDING_DORMANT_TIMEOUT &&
 8002a34:	2c04      	cmp	r4, #4
 8002a36:	d130      	bne.n	8002a9a <flush_fifos+0x86>
    current_master_session.state = D7ASP_MASTER_SESSION_ACTIVE;
 8002a38:	4a5d      	ldr	r2, [pc, #372]	; (8002bb0 <flush_fifos+0x19c>)
 8002a3a:	2105      	movs	r1, #5
 8002a3c:	7311      	strb	r1, [r2, #12]
    if (d7asp_state == D7ASP_STATE_PENDING_MASTER)
 8002a3e:	2b05      	cmp	r3, #5
 8002a40:	d02d      	beq.n	8002a9e <flush_fifos+0x8a>
    current_responder_lowest_lb.lb = LB_MAX;
 8002a42:	4b5c      	ldr	r3, [pc, #368]	; (8002bb4 <flush_fifos+0x1a0>)
 8002a44:	228c      	movs	r2, #140	; 0x8c
 8002a46:	701a      	strb	r2, [r3, #0]
    hw_watchdog_feed(); // TODO do here?
 8002a48:	f009 fd2a 	bl	800c4a0 <hw_watchdog_feed>
    if (current_request_id == NO_ACTIVE_REQUEST_ID)
 8002a4c:	4b5a      	ldr	r3, [pc, #360]	; (8002bb8 <flush_fifos+0x1a4>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2bff      	cmp	r3, #255	; 0xff
 8002a52:	d02c      	beq.n	8002aae <flush_fifos+0x9a>
        if (current_request_retry_count == single_request_retry_limit)
 8002a54:	4b59      	ldr	r3, [pc, #356]	; (8002bbc <flush_fifos+0x1a8>)
 8002a56:	781a      	ldrb	r2, [r3, #0]
 8002a58:	4b59      	ldr	r3, [pc, #356]	; (8002bc0 <flush_fifos+0x1ac>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d100      	bne.n	8002a62 <flush_fifos+0x4e>
 8002a60:	e097      	b.n	8002b92 <flush_fifos+0x17e>
        packet_queue_mark_processing(current_request_packet);
 8002a62:	4c58      	ldr	r4, [pc, #352]	; (8002bc4 <flush_fifos+0x1b0>)
 8002a64:	6820      	ldr	r0, [r4, #0]
 8002a66:	f002 fcf3 	bl	8005450 <packet_queue_mark_processing>
        current_request_packet->type = RETRY_REQUEST;
 8002a6a:	6822      	ldr	r2, [r4, #0]
 8002a6c:	232c      	movs	r3, #44	; 0x2c
 8002a6e:	2102      	movs	r1, #2
 8002a70:	54d1      	strb	r1, [r2, r3]
    ret = d7atp_send_request(current_master_session.token, current_request_id, (current_request_id == current_master_session.next_request_id - 1),
 8002a72:	4b51      	ldr	r3, [pc, #324]	; (8002bb8 <flush_fifos+0x1a4>)
 8002a74:	7819      	ldrb	r1, [r3, #0]
 8002a76:	4c4e      	ldr	r4, [pc, #312]	; (8002bb0 <flush_fifos+0x19c>)
 8002a78:	7c22      	ldrb	r2, [r4, #16]
 8002a7a:	3a01      	subs	r2, #1
 8002a7c:	4b51      	ldr	r3, [pc, #324]	; (8002bc4 <flush_fifos+0x1b0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	1a8a      	subs	r2, r1, r2
 8002a82:	4250      	negs	r0, r2
 8002a84:	4142      	adcs	r2, r0
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	7b60      	ldrb	r0, [r4, #13]
 8002a8a:	1865      	adds	r5, r4, r1
 8002a8c:	7dad      	ldrb	r5, [r5, #22]
 8002a8e:	9502      	str	r5, [sp, #8]
 8002a90:	2500      	movs	r5, #0
 8002a92:	9501      	str	r5, [sp, #4]
 8002a94:	9400      	str	r4, [sp, #0]
 8002a96:	f000 ff8d 	bl	80039b4 <d7atp_send_request>
}
 8002a9a:	b007      	add	sp, #28
 8002a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch_state(D7ASP_STATE_MASTER);
 8002a9e:	2003      	movs	r0, #3
 8002aa0:	f7ff ff0e 	bl	80028c0 <switch_state>
        d7ap_stack_signal_active_master_session(current_master_session.token);
 8002aa4:	4b42      	ldr	r3, [pc, #264]	; (8002bb0 <flush_fifos+0x19c>)
 8002aa6:	7b58      	ldrb	r0, [r3, #13]
 8002aa8:	f7ff fd9e 	bl	80025e8 <d7ap_stack_signal_active_master_session>
 8002aac:	e7c9      	b.n	8002a42 <flush_fifos+0x2e>
        int8_t found_next_req_index = bitmap_search(current_master_session.progress_bitmap, false, MODULE_D7AP_FIFO_MAX_REQUESTS_COUNT);
 8002aae:	2202      	movs	r2, #2
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4845      	ldr	r0, [pc, #276]	; (8002bc8 <flush_fifos+0x1b4>)
 8002ab4:	f7ff fe47 	bl	8002746 <bitmap_search>
        if (found_next_req_index == -1 || found_next_req_index == current_master_session.next_request_id)
 8002ab8:	1c42      	adds	r2, r0, #1
 8002aba:	d036      	beq.n	8002b2a <flush_fifos+0x116>
 8002abc:	4a3c      	ldr	r2, [pc, #240]	; (8002bb0 <flush_fifos+0x19c>)
 8002abe:	7c12      	ldrb	r2, [r2, #16]
 8002ac0:	4290      	cmp	r0, r2
 8002ac2:	d032      	beq.n	8002b2a <flush_fifos+0x116>
        current_request_id = found_next_req_index;
 8002ac4:	4b3c      	ldr	r3, [pc, #240]	; (8002bb8 <flush_fifos+0x1a4>)
 8002ac6:	7018      	strb	r0, [r3, #0]
        current_request_retry_count = 0;
 8002ac8:	4b3c      	ldr	r3, [pc, #240]	; (8002bbc <flush_fifos+0x1a8>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
        current_request_packet = packet_queue_alloc_packet();
 8002ace:	f002 fc59 	bl	8005384 <packet_queue_alloc_packet>
 8002ad2:	4b3c      	ldr	r3, [pc, #240]	; (8002bc4 <flush_fifos+0x1b0>)
 8002ad4:	6018      	str	r0, [r3, #0]
        assert(current_request_packet);
 8002ad6:	2800      	cmp	r0, #0
 8002ad8:	d02a      	beq.n	8002b30 <flush_fifos+0x11c>
        packet_queue_mark_processing(current_request_packet);
 8002ada:	f002 fcb9 	bl	8005450 <packet_queue_mark_processing>
        current_request_packet->d7anp_addressee = &(current_master_session.config.addressee); // TODO explicitly pass addressee down the stack layers?
 8002ade:	4b39      	ldr	r3, [pc, #228]	; (8002bc4 <flush_fifos+0x1b0>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4b3a      	ldr	r3, [pc, #232]	; (8002bcc <flush_fifos+0x1b8>)
 8002ae4:	6213      	str	r3, [r2, #32]
        if(current_master_session.config.qos.qos_resp_mode == SESSION_RESP_MODE_PREFERRED
 8002ae6:	3b02      	subs	r3, #2
 8002ae8:	781a      	ldrb	r2, [r3, #0]
 8002aea:	2307      	movs	r3, #7
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b06      	cmp	r3, #6
 8002af0:	d024      	beq.n	8002b3c <flush_fifos+0x128>
        memcpy(current_request_packet->payload, current_master_session.request_buffer + current_master_session.requests_indices[current_request_id], current_master_session.requests_lengths[current_request_id]);
 8002af2:	4e34      	ldr	r6, [pc, #208]	; (8002bc4 <flush_fifos+0x1b0>)
 8002af4:	6830      	ldr	r0, [r6, #0]
 8002af6:	3033      	adds	r0, #51	; 0x33
 8002af8:	4f2f      	ldr	r7, [pc, #188]	; (8002bb8 <flush_fifos+0x1a4>)
 8002afa:	783b      	ldrb	r3, [r7, #0]
 8002afc:	4d2c      	ldr	r5, [pc, #176]	; (8002bb0 <flush_fifos+0x19c>)
 8002afe:	18eb      	adds	r3, r5, r3
 8002b00:	7c99      	ldrb	r1, [r3, #18]
 8002b02:	7d1a      	ldrb	r2, [r3, #20]
 8002b04:	002b      	movs	r3, r5
 8002b06:	3318      	adds	r3, #24
 8002b08:	18c9      	adds	r1, r1, r3
 8002b0a:	f012 f961 	bl	8014dd0 <memcpy>
        current_request_packet->payload_length = current_master_session.requests_lengths[current_request_id];
 8002b0e:	783a      	ldrb	r2, [r7, #0]
 8002b10:	6833      	ldr	r3, [r6, #0]
 8002b12:	18ad      	adds	r5, r5, r2
 8002b14:	7d28      	ldrb	r0, [r5, #20]
 8002b16:	2132      	movs	r1, #50	; 0x32
 8002b18:	5458      	strb	r0, [r3, r1]
        if(is_triggered_dormant_session)
 8002b1a:	2c04      	cmp	r4, #4
 8002b1c:	d031      	beq.n	8002b82 <flush_fifos+0x16e>
            if (current_request_id == 0)
 8002b1e:	2a00      	cmp	r2, #0
 8002b20:	d133      	bne.n	8002b8a <flush_fifos+0x176>
                current_request_packet->type = INITIAL_REQUEST;
 8002b22:	322c      	adds	r2, #44	; 0x2c
 8002b24:	2100      	movs	r1, #0
 8002b26:	5499      	strb	r1, [r3, r2]
 8002b28:	e7a3      	b.n	8002a72 <flush_fifos+0x5e>
            flush_completed();
 8002b2a:	f7ff ff59 	bl	80029e0 <flush_completed>
            return;
 8002b2e:	e7b4      	b.n	8002a9a <flush_fifos+0x86>
        assert(current_request_packet);
 8002b30:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <flush_fifos+0x1bc>)
 8002b32:	4a28      	ldr	r2, [pc, #160]	; (8002bd4 <flush_fifos+0x1c0>)
 8002b34:	21df      	movs	r1, #223	; 0xdf
 8002b36:	4828      	ldr	r0, [pc, #160]	; (8002bd8 <flush_fifos+0x1c4>)
 8002b38:	f005 fd62 	bl	8008600 <__assert_func>
           && memcmp(current_master_session.preferred_addressee.id,(uint8_t[8]){ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 8) != 0)
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	2100      	movs	r1, #0
 8002b40:	a804      	add	r0, sp, #16
 8002b42:	f012 f999 	bl	8014e78 <memset>
 8002b46:	2208      	movs	r2, #8
 8002b48:	a904      	add	r1, sp, #16
 8002b4a:	4824      	ldr	r0, [pc, #144]	; (8002bdc <flush_fifos+0x1c8>)
 8002b4c:	f012 f918 	bl	8014d80 <memcmp>
 8002b50:	2800      	cmp	r0, #0
 8002b52:	d0ce      	beq.n	8002af2 <flush_fifos+0xde>
            current_master_session.preferred_addressee.access_class = current_master_session.config.addressee.access_class;
 8002b54:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <flush_fifos+0x19c>)
 8002b56:	78d9      	ldrb	r1, [r3, #3]
 8002b58:	22e1      	movs	r2, #225	; 0xe1
 8002b5a:	5499      	strb	r1, [r3, r2]
            current_master_session.preferred_addressee.ctrl.nls_method = current_master_session.config.addressee.ctrl.nls_method;
 8002b5c:	789a      	ldrb	r2, [r3, #2]
 8002b5e:	0710      	lsls	r0, r2, #28
 8002b60:	25e0      	movs	r5, #224	; 0xe0
 8002b62:	0f00      	lsrs	r0, r0, #28
 8002b64:	5d59      	ldrb	r1, [r3, r5]
 8002b66:	260f      	movs	r6, #15
 8002b68:	43b1      	bics	r1, r6
 8002b6a:	4301      	orrs	r1, r0
 8002b6c:	5559      	strb	r1, [r3, r5]
            current_master_session.config.addressee.ctrl.id_type = ID_TYPE_UID; // TODO no VID for now
 8002b6e:	2130      	movs	r1, #48	; 0x30
 8002b70:	438a      	bics	r2, r1
 8002b72:	2120      	movs	r1, #32
 8002b74:	430a      	orrs	r2, r1
 8002b76:	709a      	strb	r2, [r3, #2]
            current_request_packet->d7anp_addressee = &current_master_session.preferred_addressee;
 8002b78:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <flush_fifos+0x1b0>)
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	33e0      	adds	r3, #224	; 0xe0
 8002b7e:	6213      	str	r3, [r2, #32]
 8002b80:	e7b7      	b.n	8002af2 <flush_fifos+0xde>
            current_request_packet->type = REQUEST_IN_DIALOG_EXTENSION;
 8002b82:	222c      	movs	r2, #44	; 0x2c
 8002b84:	392c      	subs	r1, #44	; 0x2c
 8002b86:	5499      	strb	r1, [r3, r2]
 8002b88:	e773      	b.n	8002a72 <flush_fifos+0x5e>
                current_request_packet->type =  SUBSEQUENT_REQUEST;
 8002b8a:	222c      	movs	r2, #44	; 0x2c
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	5499      	strb	r1, [r3, r2]
 8002b90:	e76f      	b.n	8002a72 <flush_fifos+0x5e>
            mark_current_request_done();
 8002b92:	f7ff fded 	bl	8002770 <mark_current_request_done>
            packet_queue_free_packet(current_request_packet);
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <flush_fifos+0x1b0>)
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	f002 fc0d 	bl	80053b8 <packet_queue_free_packet>
            current_request_id = NO_ACTIVE_REQUEST_ID;
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <flush_fifos+0x1a4>)
 8002ba0:	22ff      	movs	r2, #255	; 0xff
 8002ba2:	701a      	strb	r2, [r3, #0]
            schedule_current_session(); //reschedule the d7ap stack to continue flushing the session until all request handled ...
 8002ba4:	f7ff fe54 	bl	8002850 <schedule_current_session>
            return;
 8002ba8:	e777      	b.n	8002a9a <flush_fifos+0x86>
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	200019f1 	.word	0x200019f1
 8002bb0:	200018f8 	.word	0x200018f8
 8002bb4:	200019f4 	.word	0x200019f4
 8002bb8:	200019e2 	.word	0x200019e2
 8002bbc:	200019e8 	.word	0x200019e8
 8002bc0:	200019f0 	.word	0x200019f0
 8002bc4:	200019e4 	.word	0x200019e4
 8002bc8:	20001906 	.word	0x20001906
 8002bcc:	200018fa 	.word	0x200018fa
 8002bd0:	08017880 	.word	0x08017880
 8002bd4:	08017cb0 	.word	0x08017cb0
 8002bd8:	08017650 	.word	0x08017650
 8002bdc:	200019da 	.word	0x200019da

08002be0 <dormant_session_timeout>:
static void dormant_session_timeout() {
 8002be0:	b510      	push	{r4, lr}
  if(current_master_session.state == D7ASP_MASTER_SESSION_DORMANT) {
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <dormant_session_timeout+0x28>)
 8002be4:	7b1b      	ldrb	r3, [r3, #12]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d000      	beq.n	8002bec <dormant_session_timeout+0xc>
}
 8002bea:	bd10      	pop	{r4, pc}
    current_master_session.state = D7ASP_MASTER_SESSION_PENDING_DORMANT_TIMEOUT;
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <dormant_session_timeout+0x28>)
 8002bee:	2203      	movs	r2, #3
 8002bf0:	731a      	strb	r2, [r3, #12]
    if(d7asp_state == D7ASP_STATE_IDLE)
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <dormant_session_timeout+0x2c>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d002      	beq.n	8002c00 <dormant_session_timeout+0x20>
    schedule_current_session();
 8002bfa:	f7ff fe29 	bl	8002850 <schedule_current_session>
}
 8002bfe:	e7f4      	b.n	8002bea <dormant_session_timeout+0xa>
      d7asp_state = D7ASP_STATE_PENDING_MASTER;
 8002c00:	4b02      	ldr	r3, [pc, #8]	; (8002c0c <dormant_session_timeout+0x2c>)
 8002c02:	3202      	adds	r2, #2
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	e7f8      	b.n	8002bfa <dormant_session_timeout+0x1a>
 8002c08:	200018f8 	.word	0x200018f8
 8002c0c:	200019f1 	.word	0x200019f1

08002c10 <on_request_completed>:
        return false;
    }
}

static void on_request_completed()
{
 8002c10:	b510      	push	{r4, lr}
 8002c12:	b084      	sub	sp, #16
    assert(d7asp_state == D7ASP_STATE_MASTER);
 8002c14:	4b30      	ldr	r3, [pc, #192]	; (8002cd8 <on_request_completed+0xc8>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d11a      	bne.n	8002c52 <on_request_completed+0x42>
    DPRINT("request completed");

    if(current_master_session.config.qos.qos_resp_mode == SESSION_RESP_MODE_PREFERRED) {
 8002c1c:	4b2f      	ldr	r3, [pc, #188]	; (8002cdc <on_request_completed+0xcc>)
 8002c1e:	781a      	ldrb	r2, [r3, #0]
 8002c20:	2307      	movs	r3, #7
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b06      	cmp	r3, #6
 8002c26:	d01a      	beq.n	8002c5e <on_request_completed+0x4e>

      DPRINT("preferred addressee with LB %i is now:", current_responder_lowest_lb.lb);
      DPRINT_DATA(current_master_session.preferred_addressee.id, 8);
    }

    if (!bitmap_get(current_master_session.progress_bitmap, current_request_id))
 8002c28:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <on_request_completed+0xd0>)
 8002c2a:	7819      	ldrb	r1, [r3, #0]
 8002c2c:	482d      	ldr	r0, [pc, #180]	; (8002ce4 <on_request_completed+0xd4>)
 8002c2e:	f7ff fd81 	bl	8002734 <bitmap_get>
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d13d      	bne.n	8002cb2 <on_request_completed+0xa2>
    {
        if(current_master_session.config.qos.qos_resp_mode == SESSION_RESP_MODE_PREFERRED
 8002c36:	4b29      	ldr	r3, [pc, #164]	; (8002cdc <on_request_completed+0xcc>)
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	2307      	movs	r3, #7
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b06      	cmp	r3, #6
 8002c40:	d01d      	beq.n	8002c7e <on_request_completed+0x6e>
        {
            DPRINT("No ack from preferred addressee, switching to bcast");
            current_responder_lowest_lb.lb = LB_MAX;
            memcpy(current_master_session.preferred_addressee.id, (uint8_t[8]){ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 8);
        }
        current_request_retry_count++;
 8002c42:	4a29      	ldr	r2, [pc, #164]	; (8002ce8 <on_request_completed+0xd8>)
 8002c44:	7813      	ldrb	r3, [r2, #0]
 8002c46:	3301      	adds	r3, #1
 8002c48:	7013      	strb	r3, [r2, #0]
            return;
        }
        current_request_id = NO_ACTIVE_REQUEST_ID;
    }

    schedule_current_session(); // reschedule the d7ap stack to continue flushing the session until all request handled
 8002c4a:	f7ff fe01 	bl	8002850 <schedule_current_session>
}
 8002c4e:	b004      	add	sp, #16
 8002c50:	bd10      	pop	{r4, pc}
    assert(d7asp_state == D7ASP_STATE_MASTER);
 8002c52:	4b26      	ldr	r3, [pc, #152]	; (8002cec <on_request_completed+0xdc>)
 8002c54:	4a26      	ldr	r2, [pc, #152]	; (8002cf0 <on_request_completed+0xe0>)
 8002c56:	4927      	ldr	r1, [pc, #156]	; (8002cf4 <on_request_completed+0xe4>)
 8002c58:	4827      	ldr	r0, [pc, #156]	; (8002cf8 <on_request_completed+0xe8>)
 8002c5a:	f005 fcd1 	bl	8008600 <__assert_func>
      memcpy(current_master_session.preferred_addressee.id, current_responder_lowest_lb.id, 8); // TODO assume UID for now
 8002c5e:	4927      	ldr	r1, [pc, #156]	; (8002cfc <on_request_completed+0xec>)
 8002c60:	4c27      	ldr	r4, [pc, #156]	; (8002d00 <on_request_completed+0xf0>)
 8002c62:	2208      	movs	r2, #8
 8002c64:	3101      	adds	r1, #1
 8002c66:	0020      	movs	r0, r4
 8002c68:	f012 f8b2 	bl	8014dd0 <memcpy>
      current_master_session.preferred_addressee.ctrl.id_type = ID_TYPE_UID;
 8002c6c:	3ce2      	subs	r4, #226	; 0xe2
 8002c6e:	22e0      	movs	r2, #224	; 0xe0
 8002c70:	5ca3      	ldrb	r3, [r4, r2]
 8002c72:	2130      	movs	r1, #48	; 0x30
 8002c74:	438b      	bics	r3, r1
 8002c76:	2120      	movs	r1, #32
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	54a3      	strb	r3, [r4, r2]
 8002c7c:	e7d4      	b.n	8002c28 <on_request_completed+0x18>
          && memcmp(current_master_session.preferred_addressee.id, (uint8_t[8]){ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 8) != 0)
 8002c7e:	2208      	movs	r2, #8
 8002c80:	2100      	movs	r1, #0
 8002c82:	4668      	mov	r0, sp
 8002c84:	f012 f8f8 	bl	8014e78 <memset>
 8002c88:	2208      	movs	r2, #8
 8002c8a:	4669      	mov	r1, sp
 8002c8c:	481c      	ldr	r0, [pc, #112]	; (8002d00 <on_request_completed+0xf0>)
 8002c8e:	f012 f877 	bl	8014d80 <memcmp>
 8002c92:	2800      	cmp	r0, #0
 8002c94:	d0d5      	beq.n	8002c42 <on_request_completed+0x32>
            current_responder_lowest_lb.lb = LB_MAX;
 8002c96:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <on_request_completed+0xec>)
 8002c98:	228c      	movs	r2, #140	; 0x8c
 8002c9a:	701a      	strb	r2, [r3, #0]
            memcpy(current_master_session.preferred_addressee.id, (uint8_t[8]){ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 8);
 8002c9c:	3a84      	subs	r2, #132	; 0x84
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	a802      	add	r0, sp, #8
 8002ca2:	f012 f8e9 	bl	8014e78 <memset>
 8002ca6:	2208      	movs	r2, #8
 8002ca8:	a902      	add	r1, sp, #8
 8002caa:	4815      	ldr	r0, [pc, #84]	; (8002d00 <on_request_completed+0xf0>)
 8002cac:	f012 f890 	bl	8014dd0 <memcpy>
 8002cb0:	e7c7      	b.n	8002c42 <on_request_completed+0x32>
        packet_queue_free_packet(current_request_packet);
 8002cb2:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <on_request_completed+0xf4>)
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	f002 fb7f 	bl	80053b8 <packet_queue_free_packet>
        if (current_request_id == current_master_session.next_request_id - 1)
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <on_request_completed+0xd0>)
 8002cbc:	781a      	ldrb	r2, [r3, #0]
 8002cbe:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <on_request_completed+0xcc>)
 8002cc0:	7c1b      	ldrb	r3, [r3, #16]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d003      	beq.n	8002cd0 <on_request_completed+0xc0>
        current_request_id = NO_ACTIVE_REQUEST_ID;
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <on_request_completed+0xd0>)
 8002cca:	22ff      	movs	r2, #255	; 0xff
 8002ccc:	701a      	strb	r2, [r3, #0]
 8002cce:	e7bc      	b.n	8002c4a <on_request_completed+0x3a>
            flush_completed();
 8002cd0:	f7ff fe86 	bl	80029e0 <flush_completed>
            return;
 8002cd4:	e7bb      	b.n	8002c4e <on_request_completed+0x3e>
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	200019f1 	.word	0x200019f1
 8002cdc:	200018f8 	.word	0x200018f8
 8002ce0:	200019e2 	.word	0x200019e2
 8002ce4:	20001906 	.word	0x20001906
 8002ce8:	200019e8 	.word	0x200019e8
 8002cec:	08017898 	.word	0x08017898
 8002cf0:	08017d84 	.word	0x08017d84
 8002cf4:	000002e6 	.word	0x000002e6
 8002cf8:	08017650 	.word	0x08017650
 8002cfc:	200019f4 	.word	0x200019f4
 8002d00:	200019da 	.word	0x200019da
 8002d04:	200019e4 	.word	0x200019e4

08002d08 <schedule_dormant_session>:
static void schedule_dormant_session(d7asp_master_session_t* dormant_session) {
 8002d08:	b5d0      	push	{r4, r6, r7, lr}
 8002d0a:	0004      	movs	r4, r0
  assert(dormant_session->state == D7ASP_MASTER_SESSION_DORMANT);
 8002d0c:	7b03      	ldrb	r3, [r0, #12]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d11e      	bne.n	8002d50 <schedule_dormant_session+0x48>
  timer_tick_t timeout = CT_DECOMPRESS(dormant_session->config.dormant_timeout);
 8002d12:	7840      	ldrb	r0, [r0, #1]
 8002d14:	0940      	lsrs	r0, r0, #5
 8002d16:	f011 fd43 	bl	80147a0 <__aeabi_i2d>
 8002d1a:	0002      	movs	r2, r0
 8002d1c:	000b      	movs	r3, r1
 8002d1e:	2000      	movs	r0, #0
 8002d20:	4912      	ldr	r1, [pc, #72]	; (8002d6c <schedule_dormant_session+0x64>)
 8002d22:	f00e fe33 	bl	801198c <pow>
 8002d26:	0006      	movs	r6, r0
 8002d28:	000f      	movs	r7, r1
 8002d2a:	7863      	ldrb	r3, [r4, #1]
 8002d2c:	201f      	movs	r0, #31
 8002d2e:	4018      	ands	r0, r3
 8002d30:	f011 fd36 	bl	80147a0 <__aeabi_i2d>
 8002d34:	0032      	movs	r2, r6
 8002d36:	003b      	movs	r3, r7
 8002d38:	f010 fee0 	bl	8013afc <__aeabi_dmul>
 8002d3c:	f00f f936 	bl	8011fac <__aeabi_d2uiz>
  dormant_session_timer.next_event = timeout * 1024;
 8002d40:	0283      	lsls	r3, r0, #10
 8002d42:	480b      	ldr	r0, [pc, #44]	; (8002d70 <schedule_dormant_session+0x68>)
 8002d44:	6043      	str	r3, [r0, #4]
  error_t rtc = timer_add_event(&dormant_session_timer);
 8002d46:	f00d fd75 	bl	8010834 <timer_add_event>
  assert(rtc == SUCCESS);
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	d107      	bne.n	8002d5e <schedule_dormant_session+0x56>
}
 8002d4e:	bdd0      	pop	{r4, r6, r7, pc}
  assert(dormant_session->state == D7ASP_MASTER_SESSION_DORMANT);
 8002d50:	21b7      	movs	r1, #183	; 0xb7
 8002d52:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <schedule_dormant_session+0x6c>)
 8002d54:	4a08      	ldr	r2, [pc, #32]	; (8002d78 <schedule_dormant_session+0x70>)
 8002d56:	0049      	lsls	r1, r1, #1
 8002d58:	4808      	ldr	r0, [pc, #32]	; (8002d7c <schedule_dormant_session+0x74>)
 8002d5a:	f005 fc51 	bl	8008600 <__assert_func>
  assert(rtc == SUCCESS);
 8002d5e:	2174      	movs	r1, #116	; 0x74
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <schedule_dormant_session+0x78>)
 8002d62:	4a05      	ldr	r2, [pc, #20]	; (8002d78 <schedule_dormant_session+0x70>)
 8002d64:	31ff      	adds	r1, #255	; 0xff
 8002d66:	4805      	ldr	r0, [pc, #20]	; (8002d7c <schedule_dormant_session+0x74>)
 8002d68:	f005 fc4a 	bl	8008600 <__assert_func>
 8002d6c:	40100000 	.word	0x40100000
 8002d70:	20001a14 	.word	0x20001a14
 8002d74:	080178bc 	.word	0x080178bc
 8002d78:	08017ccc 	.word	0x08017ccc
 8002d7c:	08017650 	.word	0x08017650
 8002d80:	08017738 	.word	0x08017738

08002d84 <d7asp_init>:
{
 8002d84:	b510      	push	{r4, lr}
 8002d86:	b084      	sub	sp, #16
    assert(d7asp_state == D7ASP_STATE_STOPPED);
 8002d88:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <d7asp_init+0x6c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d128      	bne.n	8002de2 <d7asp_init+0x5e>
    d7asp_state = D7ASP_STATE_IDLE;
 8002d90:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <d7asp_init+0x6c>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
    current_request_id = NO_ACTIVE_REQUEST_ID;
 8002d96:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <d7asp_init+0x70>)
 8002d98:	32fe      	adds	r2, #254	; 0xfe
 8002d9a:	701a      	strb	r2, [r3, #0]
    current_master_session.state = D7ASP_MASTER_SESSION_IDLE;
 8002d9c:	4c16      	ldr	r4, [pc, #88]	; (8002df8 <d7asp_init+0x74>)
 8002d9e:	2300      	movs	r3, #0
 8002da0:	7323      	strb	r3, [r4, #12]
    memcpy(current_responder_lowest_lb.id, (uint8_t[8]){ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 8);
 8002da2:	3af7      	subs	r2, #247	; 0xf7
 8002da4:	2100      	movs	r1, #0
 8002da6:	4668      	mov	r0, sp
 8002da8:	f012 f866 	bl	8014e78 <memset>
 8002dac:	4813      	ldr	r0, [pc, #76]	; (8002dfc <d7asp_init+0x78>)
 8002dae:	2208      	movs	r2, #8
 8002db0:	4669      	mov	r1, sp
 8002db2:	3001      	adds	r0, #1
 8002db4:	f012 f80c 	bl	8014dd0 <memcpy>
    memcpy(current_master_session.preferred_addressee.id, (uint8_t[8]){ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 8);
 8002db8:	2208      	movs	r2, #8
 8002dba:	2100      	movs	r1, #0
 8002dbc:	a802      	add	r0, sp, #8
 8002dbe:	f012 f85b 	bl	8014e78 <memset>
 8002dc2:	0020      	movs	r0, r4
 8002dc4:	30e2      	adds	r0, #226	; 0xe2
 8002dc6:	2208      	movs	r2, #8
 8002dc8:	a902      	add	r1, sp, #8
 8002dca:	f012 f801 	bl	8014dd0 <memcpy>
    timer_init_event(&dormant_session_timer, &dormant_session_timeout);
 8002dce:	490c      	ldr	r1, [pc, #48]	; (8002e00 <d7asp_init+0x7c>)
 8002dd0:	480c      	ldr	r0, [pc, #48]	; (8002e04 <d7asp_init+0x80>)
 8002dd2:	f00d fa89 	bl	80102e8 <timer_init_event>
    timer_init_event(&current_session_timer, &flush_fifos);
 8002dd6:	490c      	ldr	r1, [pc, #48]	; (8002e08 <d7asp_init+0x84>)
 8002dd8:	480c      	ldr	r0, [pc, #48]	; (8002e0c <d7asp_init+0x88>)
 8002dda:	f00d fa85 	bl	80102e8 <timer_init_event>
}
 8002dde:	b004      	add	sp, #16
 8002de0:	bd10      	pop	{r4, pc}
    assert(d7asp_state == D7ASP_STATE_STOPPED);
 8002de2:	21bc      	movs	r1, #188	; 0xbc
 8002de4:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <d7asp_init+0x8c>)
 8002de6:	4a0b      	ldr	r2, [pc, #44]	; (8002e14 <d7asp_init+0x90>)
 8002de8:	0049      	lsls	r1, r1, #1
 8002dea:	480b      	ldr	r0, [pc, #44]	; (8002e18 <d7asp_init+0x94>)
 8002dec:	f005 fc08 	bl	8008600 <__assert_func>
 8002df0:	200019f1 	.word	0x200019f1
 8002df4:	200019e2 	.word	0x200019e2
 8002df8:	200018f8 	.word	0x200018f8
 8002dfc:	200019f4 	.word	0x200019f4
 8002e00:	08002be1 	.word	0x08002be1
 8002e04:	20001a14 	.word	0x20001a14
 8002e08:	08002a15 	.word	0x08002a15
 8002e0c:	20001a00 	.word	0x20001a00
 8002e10:	080178f4 	.word	0x080178f4
 8002e14:	08017ce8 	.word	0x08017ce8
 8002e18:	08017650 	.word	0x08017650

08002e1c <d7asp_stop>:
{
 8002e1c:	b510      	push	{r4, lr}
    d7asp_state = D7ASP_STATE_STOPPED;
 8002e1e:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <d7asp_stop+0x18>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
    timer_cancel_event(&current_session_timer);
 8002e24:	4804      	ldr	r0, [pc, #16]	; (8002e38 <d7asp_stop+0x1c>)
 8002e26:	f00d fd45 	bl	80108b4 <timer_cancel_event>
    timer_cancel_event(&dormant_session_timer);
 8002e2a:	4804      	ldr	r0, [pc, #16]	; (8002e3c <d7asp_stop+0x20>)
 8002e2c:	f00d fd42 	bl	80108b4 <timer_cancel_event>
}
 8002e30:	bd10      	pop	{r4, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	200019f1 	.word	0x200019f1
 8002e38:	20001a00 	.word	0x20001a00
 8002e3c:	20001a14 	.word	0x20001a14

08002e40 <d7asp_master_session_create>:
uint8_t d7asp_master_session_create(d7ap_session_config_t* d7asp_master_session_config) {
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	0004      	movs	r4, r0
    if (current_master_session.state != D7ASP_MASTER_SESSION_IDLE)
 8002e44:	4b3c      	ldr	r3, [pc, #240]	; (8002f38 <d7asp_master_session_create+0xf8>)
 8002e46:	7b1b      	ldrb	r3, [r3, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d03f      	beq.n	8002ecc <d7asp_master_session_create+0x8c>
        if ((current_master_session.config.addressee.access_class == d7asp_master_session_config->addressee.access_class) &&
 8002e4c:	4b3a      	ldr	r3, [pc, #232]	; (8002f38 <d7asp_master_session_create+0xf8>)
 8002e4e:	78da      	ldrb	r2, [r3, #3]
 8002e50:	78c3      	ldrb	r3, [r0, #3]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d10f      	bne.n	8002e76 <d7asp_master_session_create+0x36>
                (current_master_session.config.addressee.ctrl.nls_method == d7asp_master_session_config->addressee.ctrl.nls_method) &&
 8002e56:	4b38      	ldr	r3, [pc, #224]	; (8002f38 <d7asp_master_session_create+0xf8>)
 8002e58:	789b      	ldrb	r3, [r3, #2]
 8002e5a:	7882      	ldrb	r2, [r0, #2]
 8002e5c:	4053      	eors	r3, r2
        if ((current_master_session.config.addressee.access_class == d7asp_master_session_config->addressee.access_class) &&
 8002e5e:	071a      	lsls	r2, r3, #28
 8002e60:	d109      	bne.n	8002e76 <d7asp_master_session_create+0x36>
                ((d7asp_master_session_config->qos.qos_resp_mode == SESSION_RESP_MODE_PREFERRED && current_master_session.config.qos.qos_resp_mode == SESSION_RESP_MODE_PREFERRED) ||
 8002e62:	7801      	ldrb	r1, [r0, #0]
 8002e64:	2207      	movs	r2, #7
 8002e66:	400a      	ands	r2, r1
                (current_master_session.config.addressee.ctrl.nls_method == d7asp_master_session_config->addressee.ctrl.nls_method) &&
 8002e68:	2a06      	cmp	r2, #6
 8002e6a:	d006      	beq.n	8002e7a <d7asp_master_session_create+0x3a>
                (current_master_session.config.addressee.ctrl.id_type == d7asp_master_session_config->addressee.ctrl.id_type && 
 8002e6c:	2130      	movs	r1, #48	; 0x30
 8002e6e:	000a      	movs	r2, r1
 8002e70:	401a      	ands	r2, r3
                ((d7asp_master_session_config->qos.qos_resp_mode == SESSION_RESP_MODE_PREFERRED && current_master_session.config.qos.qos_resp_mode == SESSION_RESP_MODE_PREFERRED) ||
 8002e72:	4219      	tst	r1, r3
 8002e74:	d008      	beq.n	8002e88 <d7asp_master_session_create+0x48>
            return 0;
 8002e76:	2000      	movs	r0, #0
}
 8002e78:	bd70      	pop	{r4, r5, r6, pc}
                ((d7asp_master_session_config->qos.qos_resp_mode == SESSION_RESP_MODE_PREFERRED && current_master_session.config.qos.qos_resp_mode == SESSION_RESP_MODE_PREFERRED) ||
 8002e7a:	4a2f      	ldr	r2, [pc, #188]	; (8002f38 <d7asp_master_session_create+0xf8>)
 8002e7c:	7811      	ldrb	r1, [r2, #0]
 8002e7e:	2207      	movs	r2, #7
 8002e80:	400a      	ands	r2, r1
 8002e82:	2a06      	cmp	r2, #6
 8002e84:	d1f2      	bne.n	8002e6c <d7asp_master_session_create+0x2c>
 8002e86:	e00f      	b.n	8002ea8 <d7asp_master_session_create+0x68>
                memcmp(current_master_session.config.addressee.id, d7asp_master_session_config->addressee.id, d7ap_addressee_id_length(d7asp_master_session_config->addressee.ctrl.id_type)) == 0)))
 8002e88:	1d21      	adds	r1, r4, #4
 8002e8a:	78a3      	ldrb	r3, [r4, #2]
 8002e8c:	069b      	lsls	r3, r3, #26
 8002e8e:	0f9b      	lsrs	r3, r3, #30
  switch(id_type)
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d017      	beq.n	8002ec4 <d7asp_master_session_create+0x84>
 8002e94:	d80b      	bhi.n	8002eae <d7asp_master_session_create+0x6e>
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d016      	beq.n	8002ec8 <d7asp_master_session_create+0x88>
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d10b      	bne.n	8002eb6 <d7asp_master_session_create+0x76>
 8002e9e:	4827      	ldr	r0, [pc, #156]	; (8002f3c <d7asp_master_session_create+0xfc>)
 8002ea0:	f011 ff6e 	bl	8014d80 <memcmp>
                (current_master_session.config.addressee.ctrl.id_type == d7asp_master_session_config->addressee.ctrl.id_type && 
 8002ea4:	2800      	cmp	r0, #0
 8002ea6:	d1e6      	bne.n	8002e76 <d7asp_master_session_create+0x36>
            return current_master_session.token;
 8002ea8:	4b23      	ldr	r3, [pc, #140]	; (8002f38 <d7asp_master_session_create+0xf8>)
 8002eaa:	7b58      	ldrb	r0, [r3, #13]
 8002eac:	e7e4      	b.n	8002e78 <d7asp_master_session_create+0x38>
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d101      	bne.n	8002eb6 <d7asp_master_session_create+0x76>
        return ID_TYPE_VID_LENGTH;
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	e7f3      	b.n	8002e9e <d7asp_master_session_create+0x5e>
        assert(false);
 8002eb6:	2190      	movs	r1, #144	; 0x90
 8002eb8:	4b21      	ldr	r3, [pc, #132]	; (8002f40 <d7asp_master_session_create+0x100>)
 8002eba:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <d7asp_master_session_create+0x104>)
 8002ebc:	0049      	lsls	r1, r1, #1
 8002ebe:	4822      	ldr	r0, [pc, #136]	; (8002f48 <d7asp_master_session_create+0x108>)
 8002ec0:	f005 fb9e 	bl	8008600 <__assert_func>
        return ID_TYPE_UID_ID_LENGTH;
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	e7ea      	b.n	8002e9e <d7asp_master_session_create+0x5e>
        return ID_TYPE_NBID_ID_LENGTH;
 8002ec8:	2201      	movs	r2, #1
 8002eca:	e7e8      	b.n	8002e9e <d7asp_master_session_create+0x5e>
    init_master_session(&current_master_session);
 8002ecc:	4d1a      	ldr	r5, [pc, #104]	; (8002f38 <d7asp_master_session_create+0xf8>)
 8002ece:	0028      	movs	r0, r5
 8002ed0:	f7ff fc88 	bl	80027e4 <init_master_session>
    current_master_session.config.qos = d7asp_master_session_config->qos;
 8002ed4:	7823      	ldrb	r3, [r4, #0]
 8002ed6:	702b      	strb	r3, [r5, #0]
    current_master_session.config.dormant_timeout = d7asp_master_session_config->dormant_timeout;
 8002ed8:	7863      	ldrb	r3, [r4, #1]
 8002eda:	706b      	strb	r3, [r5, #1]
    current_master_session.config.addressee.ctrl = d7asp_master_session_config->addressee.ctrl;
 8002edc:	78a3      	ldrb	r3, [r4, #2]
 8002ede:	70ab      	strb	r3, [r5, #2]
    current_master_session.config.addressee.access_class = d7asp_master_session_config->addressee.access_class;
 8002ee0:	78e3      	ldrb	r3, [r4, #3]
 8002ee2:	70eb      	strb	r3, [r5, #3]
    if(current_master_session.config.qos.qos_resp_mode != SESSION_RESP_MODE_PREFERRED) {
 8002ee4:	782a      	ldrb	r2, [r5, #0]
 8002ee6:	2307      	movs	r3, #7
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b06      	cmp	r3, #6
 8002eec:	d111      	bne.n	8002f12 <d7asp_master_session_create+0xd2>
      current_master_session.config.addressee.id[0] = d7asp_master_session_config->addressee.id[0];
 8002eee:	7922      	ldrb	r2, [r4, #4]
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <d7asp_master_session_create+0xf8>)
 8002ef2:	711a      	strb	r2, [r3, #4]
      assert(d7asp_master_session_config->addressee.ctrl.id_type == ID_TYPE_NBID
 8002ef4:	78a3      	ldrb	r3, [r4, #2]
 8002ef6:	2230      	movs	r2, #48	; 0x30
 8002ef8:	0011      	movs	r1, r2
 8002efa:	4019      	ands	r1, r3
 8002efc:	421a      	tst	r2, r3
 8002efe:	d00d      	beq.n	8002f1c <d7asp_master_session_create+0xdc>
 8002f00:	2910      	cmp	r1, #16
 8002f02:	d00b      	beq.n	8002f1c <d7asp_master_session_create+0xdc>
 8002f04:	21b4      	movs	r1, #180	; 0xb4
 8002f06:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <d7asp_master_session_create+0x10c>)
 8002f08:	4a11      	ldr	r2, [pc, #68]	; (8002f50 <d7asp_master_session_create+0x110>)
 8002f0a:	31ff      	adds	r1, #255	; 0xff
 8002f0c:	4811      	ldr	r0, [pc, #68]	; (8002f54 <d7asp_master_session_create+0x114>)
 8002f0e:	f005 fb77 	bl	8008600 <__assert_func>
      memcpy(current_master_session.config.addressee.id, d7asp_master_session_config->addressee.id, sizeof(current_master_session.config.addressee.id));
 8002f12:	1d21      	adds	r1, r4, #4
 8002f14:	2208      	movs	r2, #8
 8002f16:	4809      	ldr	r0, [pc, #36]	; (8002f3c <d7asp_master_session_create+0xfc>)
 8002f18:	f011 ff5a 	bl	8014dd0 <memcpy>
    if(current_master_session.config.dormant_timeout) {
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <d7asp_master_session_create+0xf8>)
 8002f1e:	785b      	ldrb	r3, [r3, #1]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d102      	bne.n	8002f2a <d7asp_master_session_create+0xea>
    return current_master_session.token;
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <d7asp_master_session_create+0xf8>)
 8002f26:	7b58      	ldrb	r0, [r3, #13]
 8002f28:	e7a6      	b.n	8002e78 <d7asp_master_session_create+0x38>
      current_master_session.state = D7ASP_MASTER_SESSION_DORMANT;
 8002f2a:	4803      	ldr	r0, [pc, #12]	; (8002f38 <d7asp_master_session_create+0xf8>)
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	7303      	strb	r3, [r0, #12]
      schedule_dormant_session(&current_master_session);
 8002f30:	f7ff feea 	bl	8002d08 <schedule_dormant_session>
 8002f34:	e7f6      	b.n	8002f24 <d7asp_master_session_create+0xe4>
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	200018f8 	.word	0x200018f8
 8002f3c:	200018fc 	.word	0x200018fc
 8002f40:	080169c8 	.word	0x080169c8
 8002f44:	08017c78 	.word	0x08017c78
 8002f48:	080169d0 	.word	0x080169d0
 8002f4c:	08017918 	.word	0x08017918
 8002f50:	08017cf4 	.word	0x08017cf4
 8002f54:	08017650 	.word	0x08017650

08002f58 <d7asp_send_response>:
{
 8002f58:	b500      	push	{lr}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	000a      	movs	r2, r1
    if (d7asp_state != D7ASP_STATE_SLAVE_WAITING_RESPONSE)
 8002f60:	491d      	ldr	r1, [pc, #116]	; (8002fd8 <d7asp_send_response+0x80>)
 8002f62:	7809      	ldrb	r1, [r1, #0]
 8002f64:	2906      	cmp	r1, #6
 8002f66:	d134      	bne.n	8002fd2 <d7asp_send_response+0x7a>
    if(length > MODULE_D7AP_PAYLOAD_SIZE)
 8002f68:	2aef      	cmp	r2, #239	; 0xef
 8002f6a:	d81f      	bhi.n	8002fac <d7asp_send_response+0x54>
    current_response_packet->payload_length = length;
 8002f6c:	491b      	ldr	r1, [pc, #108]	; (8002fdc <d7asp_send_response+0x84>)
 8002f6e:	6808      	ldr	r0, [r1, #0]
 8002f70:	2132      	movs	r1, #50	; 0x32
 8002f72:	5442      	strb	r2, [r0, r1]
    memcpy(current_response_packet->payload, payload, length);
 8002f74:	3033      	adds	r0, #51	; 0x33
 8002f76:	0019      	movs	r1, r3
 8002f78:	f011 ff2a 	bl	8014dd0 <memcpy>
    if (current_master_session.state == D7ASP_MASTER_SESSION_ACTIVE)
 8002f7c:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <d7asp_send_response+0x88>)
 8002f7e:	7b1b      	ldrb	r3, [r3, #12]
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d01d      	beq.n	8002fc0 <d7asp_send_response+0x68>
        switch_state(D7ASP_STATE_SLAVE);
 8002f84:	2002      	movs	r0, #2
 8002f86:	f7ff fc9b 	bl	80028c0 <switch_state>
    if ((!ID_TYPE_IS_BROADCAST(current_response_packet->dll_header.control_target_id_type))
 8002f8a:	4b14      	ldr	r3, [pc, #80]	; (8002fdc <d7asp_send_response+0x84>)
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	7983      	ldrb	r3, [r0, #6]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d903      	bls.n	8002f9c <d7asp_send_response+0x44>
            && (d7asp_state == D7ASP_STATE_SLAVE_PENDING_MASTER))
 8002f94:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <d7asp_send_response+0x80>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d015      	beq.n	8002fc8 <d7asp_send_response+0x70>
        current_response_packet->d7atp_ctrl.ctrl_is_start = 0;
 8002f9c:	7f02      	ldrb	r2, [r0, #28]
 8002f9e:	237f      	movs	r3, #127	; 0x7f
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	7703      	strb	r3, [r0, #28]
    return(d7atp_send_response(current_response_packet));
 8002fa4:	f000 fdd8 	bl	8003b58 <d7atp_send_response>
}
 8002fa8:	b003      	add	sp, #12
 8002faa:	bd00      	pop	{pc}
        log_print_error_string("%s:%s Payload too large, %d > %d", __FILE__, __FUNCTION__, length, MODULE_D7AP_PAYLOAD_SIZE);
 8002fac:	23ef      	movs	r3, #239	; 0xef
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	0013      	movs	r3, r2
 8002fb2:	4a0c      	ldr	r2, [pc, #48]	; (8002fe4 <d7asp_send_response+0x8c>)
 8002fb4:	490c      	ldr	r1, [pc, #48]	; (8002fe8 <d7asp_send_response+0x90>)
 8002fb6:	480d      	ldr	r0, [pc, #52]	; (8002fec <d7asp_send_response+0x94>)
 8002fb8:	f00c f812 	bl	800efe0 <log_print_error_string>
        return EFBIG;
 8002fbc:	201b      	movs	r0, #27
 8002fbe:	e7f3      	b.n	8002fa8 <d7asp_send_response+0x50>
        switch_state(D7ASP_STATE_SLAVE_PENDING_MASTER);
 8002fc0:	2004      	movs	r0, #4
 8002fc2:	f7ff fc7d 	bl	80028c0 <switch_state>
 8002fc6:	e7e0      	b.n	8002f8a <d7asp_send_response+0x32>
        current_response_packet->d7atp_ctrl.ctrl_is_start = true;
 8002fc8:	7f02      	ldrb	r2, [r0, #28]
 8002fca:	3b84      	subs	r3, #132	; 0x84
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	7703      	strb	r3, [r0, #28]
 8002fd0:	e7e8      	b.n	8002fa4 <d7asp_send_response+0x4c>
        return EINVAL;
 8002fd2:	2016      	movs	r0, #22
 8002fd4:	e7e8      	b.n	8002fa8 <d7asp_send_response+0x50>
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	200019f1 	.word	0x200019f1
 8002fdc:	200019ec 	.word	0x200019ec
 8002fe0:	200018f8 	.word	0x200018f8
 8002fe4:	08017c64 	.word	0x08017c64
 8002fe8:	08017650 	.word	0x08017650
 8002fec:	080179a4 	.word	0x080179a4

08002ff0 <d7asp_queue_request>:
{
 8002ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff2:	46c6      	mov	lr, r8
 8002ff4:	b500      	push	{lr}
 8002ff6:	4688      	mov	r8, r1
 8002ff8:	0015      	movs	r5, r2
 8002ffa:	001e      	movs	r6, r3
    d7asp_master_session_t *session = get_master_session_from_token(session_token);
 8002ffc:	f7ff fbdc 	bl	80027b8 <get_master_session_from_token>
 8003000:	1e04      	subs	r4, r0, #0
    assert(session != NULL);
 8003002:	d036      	beq.n	8003072 <d7asp_queue_request+0x82>
    assert(session->request_buffer_tail_idx + alp_payload_length < MODULE_D7AP_FIFO_COMMAND_BUFFER_SIZE);
 8003004:	7c40      	ldrb	r0, [r0, #17]
 8003006:	182b      	adds	r3, r5, r0
 8003008:	2bc7      	cmp	r3, #199	; 0xc7
 800300a:	dc39      	bgt.n	8003080 <d7asp_queue_request+0x90>
    assert(session->next_request_id < MODULE_D7AP_FIFO_MAX_REQUESTS_COUNT); // TODO do not assert but let upper layer handle this
 800300c:	7c27      	ldrb	r7, [r4, #16]
 800300e:	2f01      	cmp	r7, #1
 8003010:	d83d      	bhi.n	800308e <d7asp_queue_request+0x9e>
    assert(!(expected_alp_response_length > 0 &&
 8003012:	2e00      	cmp	r6, #0
 8003014:	d007      	beq.n	8003026 <d7asp_queue_request+0x36>
 8003016:	7823      	ldrb	r3, [r4, #0]
 8003018:	2207      	movs	r2, #7
 800301a:	0011      	movs	r1, r2
 800301c:	4019      	ands	r1, r3
 800301e:	421a      	tst	r2, r3
 8003020:	d03c      	beq.n	800309c <d7asp_queue_request+0xac>
 8003022:	2904      	cmp	r1, #4
 8003024:	d03a      	beq.n	800309c <d7asp_queue_request+0xac>
    single_request_retry_limit = 1; // TODO read from SEL config file
 8003026:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <d7asp_queue_request+0xd8>)
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
    session->requests_indices[request_id] = session->request_buffer_tail_idx;
 800302c:	19e3      	adds	r3, r4, r7
 800302e:	7498      	strb	r0, [r3, #18]
    session->requests_lengths[request_id] = alp_payload_length;
 8003030:	751d      	strb	r5, [r3, #20]
    session->response_lengths[request_id] = expected_alp_response_length;
 8003032:	759e      	strb	r6, [r3, #22]
    memcpy(session->request_buffer + session->request_buffer_tail_idx, alp_payload_buffer, alp_payload_length);
 8003034:	0023      	movs	r3, r4
 8003036:	3318      	adds	r3, #24
 8003038:	1818      	adds	r0, r3, r0
 800303a:	002a      	movs	r2, r5
 800303c:	4641      	mov	r1, r8
 800303e:	f011 fec7 	bl	8014dd0 <memcpy>
    session->request_buffer_tail_idx += alp_payload_length + 1;
 8003042:	7c62      	ldrb	r2, [r4, #17]
 8003044:	18ad      	adds	r5, r5, r2
 8003046:	3501      	adds	r5, #1
 8003048:	7465      	strb	r5, [r4, #17]
    session->next_request_id++;
 800304a:	7c23      	ldrb	r3, [r4, #16]
 800304c:	3301      	adds	r3, #1
 800304e:	7423      	strb	r3, [r4, #16]
    if(current_master_session.state == D7ASP_MASTER_SESSION_IDLE) {
 8003050:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <d7asp_queue_request+0xdc>)
 8003052:	7b1b      	ldrb	r3, [r3, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d102      	bne.n	800305e <d7asp_queue_request+0x6e>
      current_master_session.state = D7ASP_MASTER_SESSION_PENDING;
 8003058:	4b1c      	ldr	r3, [pc, #112]	; (80030cc <d7asp_queue_request+0xdc>)
 800305a:	2202      	movs	r2, #2
 800305c:	731a      	strb	r2, [r3, #12]
    if ((d7asp_state == D7ASP_STATE_IDLE) && (current_master_session.state != D7ASP_MASTER_SESSION_DORMANT))
 800305e:	4b1c      	ldr	r3, [pc, #112]	; (80030d0 <d7asp_queue_request+0xe0>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d021      	beq.n	80030aa <d7asp_queue_request+0xba>
    else if (d7asp_state == D7ASP_STATE_SLAVE)
 8003066:	2b02      	cmp	r3, #2
 8003068:	d029      	beq.n	80030be <d7asp_queue_request+0xce>
}
 800306a:	0038      	movs	r0, r7
 800306c:	bc04      	pop	{r2}
 800306e:	4690      	mov	r8, r2
 8003070:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(session != NULL);
 8003072:	21fa      	movs	r1, #250	; 0xfa
 8003074:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <d7asp_queue_request+0xe4>)
 8003076:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <d7asp_queue_request+0xe8>)
 8003078:	31ff      	adds	r1, #255	; 0xff
 800307a:	4818      	ldr	r0, [pc, #96]	; (80030dc <d7asp_queue_request+0xec>)
 800307c:	f005 fac0 	bl	8008600 <__assert_func>
    assert(session->request_buffer_tail_idx + alp_payload_length < MODULE_D7AP_FIFO_COMMAND_BUFFER_SIZE);
 8003080:	21fd      	movs	r1, #253	; 0xfd
 8003082:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <d7asp_queue_request+0xf0>)
 8003084:	4a14      	ldr	r2, [pc, #80]	; (80030d8 <d7asp_queue_request+0xe8>)
 8003086:	0049      	lsls	r1, r1, #1
 8003088:	4814      	ldr	r0, [pc, #80]	; (80030dc <d7asp_queue_request+0xec>)
 800308a:	f005 fab9 	bl	8008600 <__assert_func>
    assert(session->next_request_id < MODULE_D7AP_FIFO_MAX_REQUESTS_COUNT); // TODO do not assert but let upper layer handle this
 800308e:	21fc      	movs	r1, #252	; 0xfc
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <d7asp_queue_request+0xf4>)
 8003092:	4a11      	ldr	r2, [pc, #68]	; (80030d8 <d7asp_queue_request+0xe8>)
 8003094:	31ff      	adds	r1, #255	; 0xff
 8003096:	4811      	ldr	r0, [pc, #68]	; (80030dc <d7asp_queue_request+0xec>)
 8003098:	f005 fab2 	bl	8008600 <__assert_func>
    assert(!(expected_alp_response_length > 0 &&
 800309c:	21fe      	movs	r1, #254	; 0xfe
 800309e:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <d7asp_queue_request+0xf8>)
 80030a0:	4a0d      	ldr	r2, [pc, #52]	; (80030d8 <d7asp_queue_request+0xe8>)
 80030a2:	0049      	lsls	r1, r1, #1
 80030a4:	480d      	ldr	r0, [pc, #52]	; (80030dc <d7asp_queue_request+0xec>)
 80030a6:	f005 faab 	bl	8008600 <__assert_func>
    if ((d7asp_state == D7ASP_STATE_IDLE) && (current_master_session.state != D7ASP_MASTER_SESSION_DORMANT))
 80030aa:	4a08      	ldr	r2, [pc, #32]	; (80030cc <d7asp_queue_request+0xdc>)
 80030ac:	7b12      	ldrb	r2, [r2, #12]
 80030ae:	2a01      	cmp	r2, #1
 80030b0:	d0d9      	beq.n	8003066 <d7asp_queue_request+0x76>
        switch_state(D7ASP_STATE_PENDING_MASTER);
 80030b2:	2005      	movs	r0, #5
 80030b4:	f7ff fc04 	bl	80028c0 <switch_state>
        schedule_current_session();
 80030b8:	f7ff fbca 	bl	8002850 <schedule_current_session>
 80030bc:	e7d5      	b.n	800306a <d7asp_queue_request+0x7a>
        switch_state(D7ASP_STATE_SLAVE_PENDING_MASTER);
 80030be:	2004      	movs	r0, #4
 80030c0:	f7ff fbfe 	bl	80028c0 <switch_state>
 80030c4:	e7d1      	b.n	800306a <d7asp_queue_request+0x7a>
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	200019f0 	.word	0x200019f0
 80030cc:	200018f8 	.word	0x200018f8
 80030d0:	200019f1 	.word	0x200019f1
 80030d4:	080174e8 	.word	0x080174e8
 80030d8:	08017d30 	.word	0x08017d30
 80030dc:	08017650 	.word	0x08017650
 80030e0:	080179c8 	.word	0x080179c8
 80030e4:	08017a28 	.word	0x08017a28
 80030e8:	08017a68 	.word	0x08017a68

080030ec <d7asp_process_received_response>:
{
 80030ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ee:	b091      	sub	sp, #68	; 0x44
 80030f0:	0004      	movs	r4, r0
 80030f2:	9105      	str	r1, [sp, #20]
    hw_watchdog_feed(); // TODO do here?
 80030f4:	f009 f9d4 	bl	800c4a0 <hw_watchdog_feed>
    d7ap_session_result_t result = {
 80030f8:	ad07      	add	r5, sp, #28
 80030fa:	2210      	movs	r2, #16
 80030fc:	2100      	movs	r1, #0
 80030fe:	a808      	add	r0, sp, #32
 8003100:	f011 feba 	bl	8014e78 <memset>
            .channel_header = packet->phy_config.rx.channel_id.channel_header_raw,
 8003104:	2391      	movs	r3, #145	; 0x91
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	5ce3      	ldrb	r3, [r4, r3]
    d7ap_session_result_t result = {
 800310a:	702b      	strb	r3, [r5, #0]
            .center_freq_index = packet->phy_config.rx.channel_id.center_freq_index,
 800310c:	2324      	movs	r3, #36	; 0x24
 800310e:	33ff      	adds	r3, #255	; 0xff
 8003110:	5ce2      	ldrb	r2, [r4, r3]
 8003112:	3301      	adds	r3, #1
 8003114:	5ce3      	ldrb	r3, [r4, r3]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	4313      	orrs	r3, r2
    d7ap_session_result_t result = {
 800311a:	2215      	movs	r2, #21
 800311c:	a902      	add	r1, sp, #8
 800311e:	468c      	mov	ip, r1
 8003120:	4462      	add	r2, ip
 8003122:	7013      	strb	r3, [r2, #0]
 8003124:	0a1b      	lsrs	r3, r3, #8
 8003126:	7053      	strb	r3, [r2, #1]
 8003128:	2397      	movs	r3, #151	; 0x97
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	5ce2      	ldrb	r2, [r4, r3]
 800312e:	4253      	negs	r3, r2
 8003130:	70eb      	strb	r3, [r5, #3]
        .link_budget = (packet->dll_header.control_eirp_index - 32) - packet->hw_radio_packet.rx_meta.rssi,
 8003132:	7963      	ldrb	r3, [r4, #5]
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	3b20      	subs	r3, #32
    d7ap_session_result_t result = {
 8003138:	712b      	strb	r3, [r5, #4]
 800313a:	2350      	movs	r3, #80	; 0x50
 800313c:	716b      	strb	r3, [r5, #5]
            .nls = (packet->d7anp_ctrl.nls_method ? true : false),
 800313e:	79e2      	ldrb	r2, [r4, #7]
 8003140:	3b41      	subs	r3, #65	; 0x41
 8003142:	4013      	ands	r3, r2
 8003144:	1e5a      	subs	r2, r3, #1
 8003146:	4193      	sbcs	r3, r2
 8003148:	b2db      	uxtb	r3, r3
    d7ap_session_result_t result = {
 800314a:	01db      	lsls	r3, r3, #7
 800314c:	71ab      	strb	r3, [r5, #6]
        .response_to = packet->d7atp_tc,
 800314e:	2328      	movs	r3, #40	; 0x28
 8003150:	5ce3      	ldrb	r3, [r4, r3]
    d7ap_session_result_t result = {
 8003152:	726b      	strb	r3, [r5, #9]
 8003154:	220a      	movs	r2, #10
 8003156:	6a21      	ldr	r1, [r4, #32]
 8003158:	201e      	movs	r0, #30
 800315a:	4460      	add	r0, ip
 800315c:	f011 fe38 	bl	8014dd0 <memcpy>
    assert(d7asp_state == D7ASP_STATE_MASTER);
 8003160:	4b64      	ldr	r3, [pc, #400]	; (80032f4 <d7asp_process_received_response+0x208>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b03      	cmp	r3, #3
 8003166:	d152      	bne.n	800320e <d7asp_process_received_response+0x122>
    assert(packet->d7atp_dialog_id == current_master_session.token);
 8003168:	2326      	movs	r3, #38	; 0x26
 800316a:	5ce3      	ldrb	r3, [r4, r3]
 800316c:	4a62      	ldr	r2, [pc, #392]	; (80032f8 <d7asp_process_received_response+0x20c>)
 800316e:	7b50      	ldrb	r0, [r2, #13]
 8003170:	4283      	cmp	r3, r0
 8003172:	d152      	bne.n	800321a <d7asp_process_received_response+0x12e>
    assert(packet->d7atp_transaction_id == current_request_id);
 8003174:	2327      	movs	r3, #39	; 0x27
 8003176:	5ce3      	ldrb	r3, [r4, r3]
 8003178:	4a60      	ldr	r2, [pc, #384]	; (80032fc <d7asp_process_received_response+0x210>)
 800317a:	7811      	ldrb	r1, [r2, #0]
 800317c:	428b      	cmp	r3, r1
 800317e:	d153      	bne.n	8003228 <d7asp_process_received_response+0x13c>
    if (current_master_session.config.qos.qos_resp_mode != SESSION_RESP_MODE_NO
 8003180:	4b5d      	ldr	r3, [pc, #372]	; (80032f8 <d7asp_process_received_response+0x20c>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2207      	movs	r2, #7
 8003186:	0015      	movs	r5, r2
 8003188:	401d      	ands	r5, r3
 800318a:	421a      	tst	r2, r3
 800318c:	d01b      	beq.n	80031c6 <d7asp_process_received_response+0xda>
       && current_master_session.config.qos.qos_resp_mode != SESSION_RESP_MODE_NO_RPT)
 800318e:	2d04      	cmp	r5, #4
 8003190:	d019      	beq.n	80031c6 <d7asp_process_received_response+0xda>
        if((current_master_session.config.qos.qos_resp_mode == SESSION_RESP_MODE_PREFERRED) 
 8003192:	2d06      	cmp	r5, #6
 8003194:	d105      	bne.n	80031a2 <d7asp_process_received_response+0xb6>
            && (current_master_session.config.addressee.ctrl.id_type == ID_TYPE_UID) 
 8003196:	4b58      	ldr	r3, [pc, #352]	; (80032f8 <d7asp_process_received_response+0x20c>)
 8003198:	789a      	ldrb	r2, [r3, #2]
 800319a:	2330      	movs	r3, #48	; 0x30
 800319c:	4013      	ands	r3, r2
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d048      	beq.n	8003234 <d7asp_process_received_response+0x148>
        result.fifo_token = current_master_session.token;
 80031a2:	ab07      	add	r3, sp, #28
 80031a4:	71d8      	strb	r0, [r3, #7]
        result.seqnr = current_request_id;
 80031a6:	7219      	strb	r1, [r3, #8]
        mark_current_request_successful();
 80031a8:	f7ff faf4 	bl	8002794 <mark_current_request_successful>
        mark_current_request_done();
 80031ac:	f7ff fae0 	bl	8002770 <mark_current_request_done>
        if(current_master_session.config.qos.qos_resp_mode == SESSION_RESP_MODE_PREFERRED
 80031b0:	4b51      	ldr	r3, [pc, #324]	; (80032f8 <d7asp_process_received_response+0x20c>)
 80031b2:	781a      	ldrb	r2, [r3, #0]
 80031b4:	2307      	movs	r3, #7
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b06      	cmp	r3, #6
 80031ba:	d057      	beq.n	800326c <d7asp_process_received_response+0x180>
        assert(packet != current_request_packet);
 80031bc:	4b50      	ldr	r3, [pc, #320]	; (8003300 <d7asp_process_received_response+0x214>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	42a3      	cmp	r3, r4
 80031c2:	d100      	bne.n	80031c6 <d7asp_process_received_response+0xda>
 80031c4:	e06e      	b.n	80032a4 <d7asp_process_received_response+0x1b8>
    d7ap_stack_process_received_response(packet->payload, packet->payload_length, result);
 80031c6:	0020      	movs	r0, r4
 80031c8:	3033      	adds	r0, #51	; 0x33
 80031ca:	2332      	movs	r3, #50	; 0x32
 80031cc:	5ce1      	ldrb	r1, [r4, r3]
 80031ce:	ab09      	add	r3, sp, #36	; 0x24
 80031d0:	466a      	mov	r2, sp
 80031d2:	cbe0      	ldmia	r3!, {r5, r6, r7}
 80031d4:	c2e0      	stmia	r2!, {r5, r6, r7}
 80031d6:	9a07      	ldr	r2, [sp, #28]
 80031d8:	9b08      	ldr	r3, [sp, #32]
 80031da:	f7ff f963 	bl	80024a4 <d7ap_stack_process_received_response>
    packet_queue_free_packet(packet); // ACK can be cleaned
 80031de:	0020      	movs	r0, r4
 80031e0:	f002 f8ea 	bl	80053b8 <packet_queue_free_packet>
    if (!ID_TYPE_IS_BROADCAST(current_master_session.config.addressee.ctrl.id_type))
 80031e4:	4b44      	ldr	r3, [pc, #272]	; (80032f8 <d7asp_process_received_response+0x20c>)
 80031e6:	789b      	ldrb	r3, [r3, #2]
 80031e8:	2230      	movs	r2, #48	; 0x30
 80031ea:	0011      	movs	r1, r2
 80031ec:	4019      	ands	r1, r3
 80031ee:	421a      	tst	r2, r3
 80031f0:	d001      	beq.n	80031f6 <d7asp_process_received_response+0x10a>
 80031f2:	2910      	cmp	r1, #16
 80031f4:	d15c      	bne.n	80032b0 <d7asp_process_received_response+0x1c4>
    else if ((extension) && (current_request_id == current_master_session.next_request_id - 1))
 80031f6:	9b05      	ldr	r3, [sp, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d006      	beq.n	800320a <d7asp_process_received_response+0x11e>
 80031fc:	4b3f      	ldr	r3, [pc, #252]	; (80032fc <d7asp_process_received_response+0x210>)
 80031fe:	7819      	ldrb	r1, [r3, #0]
 8003200:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <d7asp_process_received_response+0x20c>)
 8003202:	7c1b      	ldrb	r3, [r3, #16]
 8003204:	1e5a      	subs	r2, r3, #1
 8003206:	4291      	cmp	r1, r2
 8003208:	d066      	beq.n	80032d8 <d7asp_process_received_response+0x1ec>
}
 800320a:	b011      	add	sp, #68	; 0x44
 800320c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(d7asp_state == D7ASP_STATE_MASTER);
 800320e:	4b3d      	ldr	r3, [pc, #244]	; (8003304 <d7asp_process_received_response+0x218>)
 8003210:	4a3d      	ldr	r2, [pc, #244]	; (8003308 <d7asp_process_received_response+0x21c>)
 8003212:	493e      	ldr	r1, [pc, #248]	; (800330c <d7asp_process_received_response+0x220>)
 8003214:	483e      	ldr	r0, [pc, #248]	; (8003310 <d7asp_process_received_response+0x224>)
 8003216:	f005 f9f3 	bl	8008600 <__assert_func>
    assert(packet->d7atp_dialog_id == current_master_session.token);
 800321a:	218d      	movs	r1, #141	; 0x8d
 800321c:	4b3d      	ldr	r3, [pc, #244]	; (8003314 <d7asp_process_received_response+0x228>)
 800321e:	4a3a      	ldr	r2, [pc, #232]	; (8003308 <d7asp_process_received_response+0x21c>)
 8003220:	0089      	lsls	r1, r1, #2
 8003222:	483b      	ldr	r0, [pc, #236]	; (8003310 <d7asp_process_received_response+0x224>)
 8003224:	f005 f9ec 	bl	8008600 <__assert_func>
    assert(packet->d7atp_transaction_id == current_request_id);
 8003228:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <d7asp_process_received_response+0x22c>)
 800322a:	4a37      	ldr	r2, [pc, #220]	; (8003308 <d7asp_process_received_response+0x21c>)
 800322c:	493b      	ldr	r1, [pc, #236]	; (800331c <d7asp_process_received_response+0x230>)
 800322e:	4838      	ldr	r0, [pc, #224]	; (8003310 <d7asp_process_received_response+0x224>)
 8003230:	f005 f9e6 	bl	8008600 <__assert_func>
            && (packet->d7atp_ctrl.ctrl_xoff)) {
 8003234:	7f23      	ldrb	r3, [r4, #28]
 8003236:	065b      	lsls	r3, r3, #25
 8003238:	d5b3      	bpl.n	80031a2 <d7asp_process_received_response+0xb6>
                (uint8_t[8]) { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 8);
 800323a:	2208      	movs	r2, #8
 800323c:	2100      	movs	r1, #0
 800323e:	a80c      	add	r0, sp, #48	; 0x30
 8003240:	f011 fe1a 	bl	8014e78 <memset>
            memcpy(current_master_session.preferred_addressee.id,
 8003244:	2208      	movs	r2, #8
 8003246:	a90c      	add	r1, sp, #48	; 0x30
 8003248:	4835      	ldr	r0, [pc, #212]	; (8003320 <d7asp_process_received_response+0x234>)
 800324a:	f011 fdc1 	bl	8014dd0 <memcpy>
            memcpy(current_responder_lowest_lb.id, (uint8_t[8]) { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, 8);
 800324e:	2208      	movs	r2, #8
 8003250:	2100      	movs	r1, #0
 8003252:	a80e      	add	r0, sp, #56	; 0x38
 8003254:	f011 fe10 	bl	8014e78 <memset>
 8003258:	4832      	ldr	r0, [pc, #200]	; (8003324 <d7asp_process_received_response+0x238>)
 800325a:	2208      	movs	r2, #8
 800325c:	a90e      	add	r1, sp, #56	; 0x38
 800325e:	3001      	adds	r0, #1
 8003260:	f011 fdb6 	bl	8014dd0 <memcpy>
            packet_queue_free_packet(packet);
 8003264:	0020      	movs	r0, r4
 8003266:	f002 f8a7 	bl	80053b8 <packet_queue_free_packet>
            return;
 800326a:	e7ce      	b.n	800320a <d7asp_process_received_response+0x11e>
           && ID_TYPE_IS_BROADCAST(current_master_session.config.addressee.ctrl.id_type))
 800326c:	4b22      	ldr	r3, [pc, #136]	; (80032f8 <d7asp_process_received_response+0x20c>)
 800326e:	789b      	ldrb	r3, [r3, #2]
 8003270:	2230      	movs	r2, #48	; 0x30
 8003272:	0011      	movs	r1, r2
 8003274:	4019      	ands	r1, r3
 8003276:	421a      	tst	r2, r3
 8003278:	d001      	beq.n	800327e <d7asp_process_received_response+0x192>
 800327a:	2910      	cmp	r1, #16
 800327c:	d19e      	bne.n	80031bc <d7asp_process_received_response+0xd0>
            if(result.link_budget < current_responder_lowest_lb.lb && (!packet->d7atp_ctrl.ctrl_xoff))
 800327e:	ab07      	add	r3, sp, #28
 8003280:	791a      	ldrb	r2, [r3, #4]
 8003282:	4b28      	ldr	r3, [pc, #160]	; (8003324 <d7asp_process_received_response+0x238>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d298      	bcs.n	80031bc <d7asp_process_received_response+0xd0>
 800328a:	7f23      	ldrb	r3, [r4, #28]
 800328c:	065b      	lsls	r3, r3, #25
 800328e:	d495      	bmi.n	80031bc <d7asp_process_received_response+0xd0>
                memcpy(current_responder_lowest_lb.id, result.addressee.id, 8); // TODO assume UID for now
 8003290:	4d24      	ldr	r5, [pc, #144]	; (8003324 <d7asp_process_received_response+0x238>)
 8003292:	1c68      	adds	r0, r5, #1
 8003294:	2208      	movs	r2, #8
 8003296:	a90a      	add	r1, sp, #40	; 0x28
 8003298:	f011 fd9a 	bl	8014dd0 <memcpy>
                current_responder_lowest_lb.lb = result.link_budget;
 800329c:	ab07      	add	r3, sp, #28
 800329e:	791b      	ldrb	r3, [r3, #4]
 80032a0:	702b      	strb	r3, [r5, #0]
 80032a2:	e78b      	b.n	80031bc <d7asp_process_received_response+0xd0>
        assert(packet != current_request_packet);
 80032a4:	4b20      	ldr	r3, [pc, #128]	; (8003328 <d7asp_process_received_response+0x23c>)
 80032a6:	4a18      	ldr	r2, [pc, #96]	; (8003308 <d7asp_process_received_response+0x21c>)
 80032a8:	4920      	ldr	r1, [pc, #128]	; (800332c <d7asp_process_received_response+0x240>)
 80032aa:	4819      	ldr	r0, [pc, #100]	; (8003310 <d7asp_process_received_response+0x224>)
 80032ac:	f005 f9a8 	bl	8008600 <__assert_func>
        packet_queue_free_packet(current_request_packet);
 80032b0:	4b13      	ldr	r3, [pc, #76]	; (8003300 <d7asp_process_received_response+0x214>)
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	f002 f880 	bl	80053b8 <packet_queue_free_packet>
        if (current_request_id == current_master_session.next_request_id - 1)
 80032b8:	4b10      	ldr	r3, [pc, #64]	; (80032fc <d7asp_process_received_response+0x210>)
 80032ba:	781a      	ldrb	r2, [r3, #0]
 80032bc:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <d7asp_process_received_response+0x20c>)
 80032be:	7c1b      	ldrb	r3, [r3, #16]
 80032c0:	3b01      	subs	r3, #1
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d005      	beq.n	80032d2 <d7asp_process_received_response+0x1e6>
        current_request_id = NO_ACTIVE_REQUEST_ID;
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <d7asp_process_received_response+0x210>)
 80032c8:	22ff      	movs	r2, #255	; 0xff
 80032ca:	701a      	strb	r2, [r3, #0]
        schedule_current_session(); // continue flushing until all request handled ...
 80032cc:	f7ff fac0 	bl	8002850 <schedule_current_session>
 80032d0:	e79b      	b.n	800320a <d7asp_process_received_response+0x11e>
            flush_completed();
 80032d2:	f7ff fb85 	bl	80029e0 <flush_completed>
            return;
 80032d6:	e798      	b.n	800320a <d7asp_process_received_response+0x11e>
        d7ap_stack_session_completed(current_master_session.token, current_master_session.progress_bitmap,
 80032d8:	b2d3      	uxtb	r3, r2
 80032da:	4a15      	ldr	r2, [pc, #84]	; (8003330 <d7asp_process_received_response+0x244>)
 80032dc:	1e51      	subs	r1, r2, #1
 80032de:	0014      	movs	r4, r2
 80032e0:	3c0f      	subs	r4, #15
 80032e2:	7b60      	ldrb	r0, [r4, #13]
 80032e4:	f7ff f92c 	bl	8002540 <d7ap_stack_session_completed>
        current_master_session.state = D7ASP_MASTER_SESSION_IDLE;
 80032e8:	2300      	movs	r3, #0
 80032ea:	7323      	strb	r3, [r4, #12]
        switch_state(D7ASP_STATE_SLAVE);
 80032ec:	2002      	movs	r0, #2
 80032ee:	f7ff fae7 	bl	80028c0 <switch_state>
 80032f2:	e78a      	b.n	800320a <d7asp_process_received_response+0x11e>
 80032f4:	200019f1 	.word	0x200019f1
 80032f8:	200018f8 	.word	0x200018f8
 80032fc:	200019e2 	.word	0x200019e2
 8003300:	200019e4 	.word	0x200019e4
 8003304:	08017898 	.word	0x08017898
 8003308:	08017d44 	.word	0x08017d44
 800330c:	00000233 	.word	0x00000233
 8003310:	08017650 	.word	0x08017650
 8003314:	08017b0c 	.word	0x08017b0c
 8003318:	08017b44 	.word	0x08017b44
 800331c:	00000235 	.word	0x00000235
 8003320:	200019da 	.word	0x200019da
 8003324:	200019f4 	.word	0x200019f4
 8003328:	08017b78 	.word	0x08017b78
 800332c:	00000259 	.word	0x00000259
 8003330:	20001907 	.word	0x20001907

08003334 <d7asp_process_received_packet>:
{
 8003334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003336:	b08b      	sub	sp, #44	; 0x2c
 8003338:	0004      	movs	r4, r0
    assert(d7asp_state == D7ASP_STATE_IDLE ||
 800333a:	4b70      	ldr	r3, [pc, #448]	; (80034fc <d7asp_process_received_packet+0x1c8>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	1e5a      	subs	r2, r3, #1
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	2a01      	cmp	r2, #1
 8003344:	d903      	bls.n	800334e <d7asp_process_received_packet+0x1a>
 8003346:	2b05      	cmp	r3, #5
 8003348:	d001      	beq.n	800334e <d7asp_process_received_packet+0x1a>
 800334a:	2b04      	cmp	r3, #4
 800334c:	d124      	bne.n	8003398 <d7asp_process_received_packet+0x64>
    if (d7asp_state == D7ASP_STATE_IDLE)
 800334e:	2b01      	cmp	r3, #1
 8003350:	d028      	beq.n	80033a4 <d7asp_process_received_packet+0x70>
    else if (d7asp_state == D7ASP_STATE_PENDING_MASTER)
 8003352:	2b05      	cmp	r3, #5
 8003354:	d02a      	beq.n	80033ac <d7asp_process_received_packet+0x78>
    if (packet->payload_length > 0)
 8003356:	2332      	movs	r3, #50	; 0x32
 8003358:	5ce6      	ldrb	r6, [r4, r3]
 800335a:	2e00      	cmp	r6, #0
 800335c:	d12a      	bne.n	80033b4 <d7asp_process_received_packet+0x80>
    bool expect_upper_layer_resp_payload = false;
 800335e:	2500      	movs	r5, #0
    if (current_master_session.state == D7ASP_MASTER_SESSION_DORMANT &&
 8003360:	4b67      	ldr	r3, [pc, #412]	; (8003500 <d7asp_process_received_packet+0x1cc>)
 8003362:	7b1a      	ldrb	r2, [r3, #12]
 8003364:	2a01      	cmp	r2, #1
 8003366:	d068      	beq.n	800343a <d7asp_process_received_packet+0x106>
    if ((!ID_TYPE_IS_BROADCAST(packet->dll_header.control_target_id_type)) &&
 8003368:	79a3      	ldrb	r3, [r4, #6]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d904      	bls.n	8003378 <d7asp_process_received_packet+0x44>
        (d7asp_state == D7ASP_STATE_SLAVE) && (current_master_session.state == D7ASP_MASTER_SESSION_PENDING_DORMANT_TRIGGERED))
 800336e:	4b63      	ldr	r3, [pc, #396]	; (80034fc <d7asp_process_received_packet+0x1c8>)
 8003370:	781b      	ldrb	r3, [r3, #0]
    if ((!ID_TYPE_IS_BROADCAST(packet->dll_header.control_target_id_type)) &&
 8003372:	2b02      	cmp	r3, #2
 8003374:	d100      	bne.n	8003378 <d7asp_process_received_packet+0x44>
 8003376:	e088      	b.n	800348a <d7asp_process_received_packet+0x156>
        packet->d7atp_ctrl.ctrl_is_start = 0;
 8003378:	7f22      	ldrb	r2, [r4, #28]
 800337a:	237f      	movs	r3, #127	; 0x7f
 800337c:	4013      	ands	r3, r2
 800337e:	7723      	strb	r3, [r4, #28]
    if (packet->d7atp_ctrl.ctrl_is_ack_requested)
 8003380:	7f23      	ldrb	r3, [r4, #28]
 8003382:	071b      	lsls	r3, r3, #28
 8003384:	d400      	bmi.n	8003388 <d7asp_process_received_packet+0x54>
 8003386:	e0b3      	b.n	80034f0 <d7asp_process_received_packet+0x1bc>
        current_response_packet = packet;
 8003388:	4b5e      	ldr	r3, [pc, #376]	; (8003504 <d7asp_process_received_packet+0x1d0>)
 800338a:	601c      	str	r4, [r3, #0]
        if(expect_upper_layer_resp_payload == false) {
 800338c:	2d00      	cmp	r5, #0
 800338e:	d000      	beq.n	8003392 <d7asp_process_received_packet+0x5e>
 8003390:	e0aa      	b.n	80034e8 <d7asp_process_received_packet+0x1b4>
}
 8003392:	0028      	movs	r0, r5
 8003394:	b00b      	add	sp, #44	; 0x2c
 8003396:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(d7asp_state == D7ASP_STATE_IDLE ||
 8003398:	4b5b      	ldr	r3, [pc, #364]	; (8003508 <d7asp_process_received_packet+0x1d4>)
 800339a:	4a5c      	ldr	r2, [pc, #368]	; (800350c <d7asp_process_received_packet+0x1d8>)
 800339c:	495c      	ldr	r1, [pc, #368]	; (8003510 <d7asp_process_received_packet+0x1dc>)
 800339e:	485d      	ldr	r0, [pc, #372]	; (8003514 <d7asp_process_received_packet+0x1e0>)
 80033a0:	f005 f92e 	bl	8008600 <__assert_func>
        switch_state(D7ASP_STATE_SLAVE); // don't switch when already in slave state
 80033a4:	2002      	movs	r0, #2
 80033a6:	f7ff fa8b 	bl	80028c0 <switch_state>
 80033aa:	e7d4      	b.n	8003356 <d7asp_process_received_packet+0x22>
        switch_state(D7ASP_STATE_SLAVE_PENDING_MASTER);
 80033ac:	2004      	movs	r0, #4
 80033ae:	f7ff fa87 	bl	80028c0 <switch_state>
 80033b2:	e7d0      	b.n	8003356 <d7asp_process_received_packet+0x22>
        d7ap_session_result_t result = {
 80033b4:	ad05      	add	r5, sp, #20
                .channel_header = packet->phy_config.rx.channel_id.channel_header_raw,
 80033b6:	33f0      	adds	r3, #240	; 0xf0
 80033b8:	5ce3      	ldrb	r3, [r4, r3]
        d7ap_session_result_t result = {
 80033ba:	702b      	strb	r3, [r5, #0]
                .center_freq_index = packet->phy_config.rx.channel_id.center_freq_index,
 80033bc:	2324      	movs	r3, #36	; 0x24
 80033be:	33ff      	adds	r3, #255	; 0xff
 80033c0:	5ce2      	ldrb	r2, [r4, r3]
 80033c2:	3301      	adds	r3, #1
 80033c4:	5ce3      	ldrb	r3, [r4, r3]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	4313      	orrs	r3, r2
        d7ap_session_result_t result = {
 80033ca:	2215      	movs	r2, #21
 80033cc:	446a      	add	r2, sp
 80033ce:	7013      	strb	r3, [r2, #0]
 80033d0:	0a1b      	lsrs	r3, r3, #8
 80033d2:	7053      	strb	r3, [r2, #1]
 80033d4:	2397      	movs	r3, #151	; 0x97
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	5ce2      	ldrb	r2, [r4, r3]
 80033da:	4253      	negs	r3, r2
 80033dc:	70eb      	strb	r3, [r5, #3]
            .link_budget = (packet->dll_header.control_eirp_index - 32) - packet->hw_radio_packet.rx_meta.rssi,
 80033de:	7963      	ldrb	r3, [r4, #5]
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	3b20      	subs	r3, #32
        d7ap_session_result_t result = {
 80033e4:	712b      	strb	r3, [r5, #4]
 80033e6:	2350      	movs	r3, #80	; 0x50
 80033e8:	716b      	strb	r3, [r5, #5]
                .nls = (packet->d7anp_ctrl.nls_method ? true : false),
 80033ea:	79e2      	ldrb	r2, [r4, #7]
 80033ec:	3b41      	subs	r3, #65	; 0x41
 80033ee:	4013      	ands	r3, r2
 80033f0:	1e5a      	subs	r2, r3, #1
 80033f2:	4193      	sbcs	r3, r2
 80033f4:	b2db      	uxtb	r3, r3
        d7ap_session_result_t result = {
 80033f6:	01db      	lsls	r3, r3, #7
 80033f8:	71ab      	strb	r3, [r5, #6]
            .fifo_token =  packet->d7atp_dialog_id,
 80033fa:	2326      	movs	r3, #38	; 0x26
 80033fc:	5ce3      	ldrb	r3, [r4, r3]
        d7ap_session_result_t result = {
 80033fe:	71eb      	strb	r3, [r5, #7]
            .seqnr = packet->d7atp_transaction_id
 8003400:	2327      	movs	r3, #39	; 0x27
 8003402:	5ce3      	ldrb	r3, [r4, r3]
        d7ap_session_result_t result = {
 8003404:	722b      	strb	r3, [r5, #8]
            .response_to = packet->d7atp_tc,
 8003406:	2328      	movs	r3, #40	; 0x28
 8003408:	5ce3      	ldrb	r3, [r4, r3]
        d7ap_session_result_t result = {
 800340a:	726b      	strb	r3, [r5, #9]
 800340c:	220a      	movs	r2, #10
 800340e:	6a21      	ldr	r1, [r4, #32]
 8003410:	201e      	movs	r0, #30
 8003412:	4468      	add	r0, sp
 8003414:	f011 fcdc 	bl	8014dd0 <memcpy>
        expect_upper_layer_resp_payload = d7ap_stack_process_unsolicited_request(packet->payload, packet->payload_length, result, packet->d7atp_ctrl.ctrl_is_ack_requested);
 8003418:	7f23      	ldrb	r3, [r4, #28]
 800341a:	071b      	lsls	r3, r3, #28
 800341c:	0fdb      	lsrs	r3, r3, #31
 800341e:	9303      	str	r3, [sp, #12]
 8003420:	ab07      	add	r3, sp, #28
 8003422:	466a      	mov	r2, sp
 8003424:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003426:	c283      	stmia	r2!, {r0, r1, r7}
 8003428:	9a05      	ldr	r2, [sp, #20]
 800342a:	686b      	ldr	r3, [r5, #4]
 800342c:	0031      	movs	r1, r6
 800342e:	0020      	movs	r0, r4
 8003430:	3033      	adds	r0, #51	; 0x33
 8003432:	f7fe ffeb 	bl	800240c <d7ap_stack_process_unsolicited_request>
 8003436:	0005      	movs	r5, r0
 8003438:	e792      	b.n	8003360 <d7asp_process_received_packet+0x2c>
        (!ID_TYPE_IS_BROADCAST(packet->dll_header.control_target_id_type)) &&
 800343a:	79a3      	ldrb	r3, [r4, #6]
    if (current_master_session.state == D7ASP_MASTER_SESSION_DORMANT &&
 800343c:	2b01      	cmp	r3, #1
 800343e:	d800      	bhi.n	8003442 <d7asp_process_received_packet+0x10e>
 8003440:	e792      	b.n	8003368 <d7asp_process_received_packet+0x34>
        memcmp(current_master_session.config.addressee.id, packet->d7anp_addressee->id, d7ap_addressee_id_length(packet->d7anp_addressee->ctrl.id_type)) == 0) {
 8003442:	6a23      	ldr	r3, [r4, #32]
 8003444:	1c99      	adds	r1, r3, #2
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	069b      	lsls	r3, r3, #26
 800344a:	0f9b      	lsrs	r3, r3, #30
  switch(id_type)
 800344c:	2b02      	cmp	r3, #2
 800344e:	d01a      	beq.n	8003486 <d7asp_process_received_packet+0x152>
 8003450:	d80e      	bhi.n	8003470 <d7asp_process_received_packet+0x13c>
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <d7asp_process_received_packet+0x128>
 8003456:	2b01      	cmp	r3, #1
 8003458:	d10e      	bne.n	8003478 <d7asp_process_received_packet+0x144>
 800345a:	2200      	movs	r2, #0
 800345c:	482e      	ldr	r0, [pc, #184]	; (8003518 <d7asp_process_received_packet+0x1e4>)
 800345e:	f011 fc8f 	bl	8014d80 <memcmp>
        (!ID_TYPE_IS_BROADCAST(packet->dll_header.control_target_id_type)) &&
 8003462:	2800      	cmp	r0, #0
 8003464:	d000      	beq.n	8003468 <d7asp_process_received_packet+0x134>
 8003466:	e77f      	b.n	8003368 <d7asp_process_received_packet+0x34>
        current_master_session.state = D7ASP_MASTER_SESSION_PENDING_DORMANT_TRIGGERED;
 8003468:	4b25      	ldr	r3, [pc, #148]	; (8003500 <d7asp_process_received_packet+0x1cc>)
 800346a:	2204      	movs	r2, #4
 800346c:	731a      	strb	r2, [r3, #12]
 800346e:	e77b      	b.n	8003368 <d7asp_process_received_packet+0x34>
 8003470:	2b03      	cmp	r3, #3
 8003472:	d101      	bne.n	8003478 <d7asp_process_received_packet+0x144>
        return ID_TYPE_VID_LENGTH;
 8003474:	2202      	movs	r2, #2
 8003476:	e7f1      	b.n	800345c <d7asp_process_received_packet+0x128>
        assert(false);
 8003478:	2190      	movs	r1, #144	; 0x90
 800347a:	4b28      	ldr	r3, [pc, #160]	; (800351c <d7asp_process_received_packet+0x1e8>)
 800347c:	4a28      	ldr	r2, [pc, #160]	; (8003520 <d7asp_process_received_packet+0x1ec>)
 800347e:	0049      	lsls	r1, r1, #1
 8003480:	4828      	ldr	r0, [pc, #160]	; (8003524 <d7asp_process_received_packet+0x1f0>)
 8003482:	f005 f8bd 	bl	8008600 <__assert_func>
        return ID_TYPE_UID_ID_LENGTH;
 8003486:	2208      	movs	r2, #8
 8003488:	e7e8      	b.n	800345c <d7asp_process_received_packet+0x128>
        (d7asp_state == D7ASP_STATE_SLAVE) && (current_master_session.state == D7ASP_MASTER_SESSION_PENDING_DORMANT_TRIGGERED))
 800348a:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <d7asp_process_received_packet+0x1cc>)
 800348c:	7b1b      	ldrb	r3, [r3, #12]
 800348e:	2b04      	cmp	r3, #4
 8003490:	d000      	beq.n	8003494 <d7asp_process_received_packet+0x160>
 8003492:	e771      	b.n	8003378 <d7asp_process_received_packet+0x44>
        packet->d7atp_ctrl.ctrl_is_start = true;
 8003494:	7f22      	ldrb	r2, [r4, #28]
 8003496:	3b84      	subs	r3, #132	; 0x84
 8003498:	4313      	orrs	r3, r2
        packet->d7atp_ctrl.ctrl_tl = true;
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2220      	movs	r2, #32
 800349e:	4313      	orrs	r3, r2
 80034a0:	7723      	strb	r3, [r4, #28]
        uint16_t len = packet->payload_length;
 80034a2:	2332      	movs	r3, #50	; 0x32
 80034a4:	5ce2      	ldrb	r2, [r4, r3]
        if(len < 255 - 20)
 80034a6:	2aea      	cmp	r2, #234	; 0xea
 80034a8:	d800      	bhi.n	80034ac <d7asp_process_received_packet+0x178>
            len += 20;
 80034aa:	3214      	adds	r2, #20
        uint16_t estimated_tl = phy_calculate_tx_duration(packet->phy_config.rx.channel_id.channel_header.ch_class,
 80034ac:	2791      	movs	r7, #145	; 0x91
 80034ae:	007f      	lsls	r7, r7, #1
 80034b0:	5de1      	ldrb	r1, [r4, r7]
 80034b2:	0708      	lsls	r0, r1, #28
 80034b4:	0f80      	lsrs	r0, r0, #30
                                                          packet->phy_config.rx.channel_id.channel_header.ch_coding,
 80034b6:	0789      	lsls	r1, r1, #30
 80034b8:	0f89      	lsrs	r1, r1, #30
        uint16_t estimated_tl = phy_calculate_tx_duration(packet->phy_config.rx.channel_id.channel_header.ch_class,
 80034ba:	2300      	movs	r3, #0
 80034bc:	f003 fec6 	bl	800724c <phy_calculate_tx_duration>
        estimated_tl += t_g; // Tt < silent time < Tg ~ in practice 4.26 ms
 80034c0:	3005      	adds	r0, #5
 80034c2:	b286      	uxth	r6, r0
        estimated_tl += phy_calculate_tx_duration(packet->phy_config.rx.channel_id.channel_header.ch_class,
 80034c4:	5de1      	ldrb	r1, [r4, r7]
 80034c6:	0708      	lsls	r0, r1, #28
 80034c8:	0f80      	lsrs	r0, r0, #30
                                                  packet->phy_config.rx.channel_id.channel_header.ch_coding,
 80034ca:	0789      	lsls	r1, r1, #30
 80034cc:	0f89      	lsrs	r1, r1, #30
        estimated_tl += phy_calculate_tx_duration(packet->phy_config.rx.channel_id.channel_header.ch_class,
 80034ce:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <d7asp_process_received_packet+0x1cc>)
 80034d0:	7d1a      	ldrb	r2, [r3, #20]
 80034d2:	2300      	movs	r3, #0
 80034d4:	f003 feba 	bl	800724c <phy_calculate_tx_duration>
 80034d8:	1830      	adds	r0, r6, r0
 80034da:	b280      	uxth	r0, r0
        packet->d7atp_tl = compress_data(estimated_tl, true);
 80034dc:	2101      	movs	r1, #1
 80034de:	f00a fdbb 	bl	800e058 <compress_data>
 80034e2:	2329      	movs	r3, #41	; 0x29
 80034e4:	54e0      	strb	r0, [r4, r3]
    {
 80034e6:	e74b      	b.n	8003380 <d7asp_process_received_packet+0x4c>
          switch_state(D7ASP_STATE_SLAVE_WAITING_RESPONSE);
 80034e8:	2006      	movs	r0, #6
 80034ea:	f7ff f9e9 	bl	80028c0 <switch_state>
          return true;
 80034ee:	e750      	b.n	8003392 <d7asp_process_received_packet+0x5e>
        packet_queue_free_packet(packet);
 80034f0:	0020      	movs	r0, r4
 80034f2:	f001 ff61 	bl	80053b8 <packet_queue_free_packet>
        return false;
 80034f6:	2500      	movs	r5, #0
 80034f8:	e74b      	b.n	8003392 <d7asp_process_received_packet+0x5e>
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	200019f1 	.word	0x200019f1
 8003500:	200018f8 	.word	0x200018f8
 8003504:	200019ec 	.word	0x200019ec
 8003508:	08017b9c 	.word	0x08017b9c
 800350c:	08017d64 	.word	0x08017d64
 8003510:	00000283 	.word	0x00000283
 8003514:	08017650 	.word	0x08017650
 8003518:	200018fc 	.word	0x200018fc
 800351c:	080169c8 	.word	0x080169c8
 8003520:	08017c78 	.word	0x08017c78
 8003524:	080169d0 	.word	0x080169d0

08003528 <d7asp_signal_packet_transmitted>:

void d7asp_signal_packet_transmitted(packet_t *packet)
{
 8003528:	b510      	push	{r4, lr}
    DPRINT("Packet transmitted");
    if (d7asp_state == D7ASP_STATE_MASTER)
 800352a:	4b13      	ldr	r3, [pc, #76]	; (8003578 <d7asp_signal_packet_transmitted+0x50>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d00d      	beq.n	800354e <d7asp_signal_packet_transmitted+0x26>
        {
            mark_current_request_done();
            mark_current_request_successful();
        }
    }
    else if (d7asp_state == D7ASP_STATE_SLAVE || d7asp_state == D7ASP_STATE_SLAVE_PENDING_MASTER)
 8003532:	2b02      	cmp	r3, #2
 8003534:	d001      	beq.n	800353a <d7asp_signal_packet_transmitted+0x12>
 8003536:	2b04      	cmp	r3, #4
 8003538:	d108      	bne.n	800354c <d7asp_signal_packet_transmitted+0x24>
    {
        assert(current_response_packet == packet);
 800353a:	4b10      	ldr	r3, [pc, #64]	; (800357c <d7asp_signal_packet_transmitted+0x54>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4283      	cmp	r3, r0
 8003540:	d113      	bne.n	800356a <d7asp_signal_packet_transmitted+0x42>

        // when in slave session we can immediately cleanup the transmitted response.
        // requests (in master sessions) will be cleanup upon termination of the dialog.
        current_response_packet = NULL;
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <d7asp_signal_packet_transmitted+0x54>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
        packet_queue_free_packet(packet);
 8003548:	f001 ff36 	bl	80053b8 <packet_queue_free_packet>
    }
}
 800354c:	bd10      	pop	{r4, pc}
        if (current_master_session.config.qos.qos_resp_mode == SESSION_RESP_MODE_NO ||
 800354e:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <d7asp_signal_packet_transmitted+0x58>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2207      	movs	r2, #7
 8003554:	0011      	movs	r1, r2
 8003556:	4019      	ands	r1, r3
 8003558:	421a      	tst	r2, r3
 800355a:	d001      	beq.n	8003560 <d7asp_signal_packet_transmitted+0x38>
 800355c:	2904      	cmp	r1, #4
 800355e:	d1f5      	bne.n	800354c <d7asp_signal_packet_transmitted+0x24>
            mark_current_request_done();
 8003560:	f7ff f906 	bl	8002770 <mark_current_request_done>
            mark_current_request_successful();
 8003564:	f7ff f916 	bl	8002794 <mark_current_request_successful>
 8003568:	e7f0      	b.n	800354c <d7asp_signal_packet_transmitted+0x24>
        assert(current_response_packet == packet);
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <d7asp_signal_packet_transmitted+0x5c>)
 800356c:	4a06      	ldr	r2, [pc, #24]	; (8003588 <d7asp_signal_packet_transmitted+0x60>)
 800356e:	4907      	ldr	r1, [pc, #28]	; (800358c <d7asp_signal_packet_transmitted+0x64>)
 8003570:	4807      	ldr	r0, [pc, #28]	; (8003590 <d7asp_signal_packet_transmitted+0x68>)
 8003572:	f005 f845 	bl	8008600 <__assert_func>
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	200019f1 	.word	0x200019f1
 800357c:	200019ec 	.word	0x200019ec
 8003580:	200018f8 	.word	0x200018f8
 8003584:	08017c40 	.word	0x08017c40
 8003588:	08017d9c 	.word	0x08017d9c
 800358c:	0000031f 	.word	0x0000031f
 8003590:	08017650 	.word	0x08017650

08003594 <d7asp_signal_transmission_failure>:

void d7asp_signal_transmission_failure()
{
 8003594:	b510      	push	{r4, lr}
    if (d7asp_state == D7ASP_STATE_MASTER)
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <d7asp_signal_transmission_failure+0x28>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d004      	beq.n	80035a8 <d7asp_signal_transmission_failure+0x14>
        on_request_completed();
    else if (d7asp_state == D7ASP_STATE_SLAVE ||
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d005      	beq.n	80035ae <d7asp_signal_transmission_failure+0x1a>
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d003      	beq.n	80035ae <d7asp_signal_transmission_failure+0x1a>
             d7asp_state == D7ASP_STATE_SLAVE_PENDING_MASTER)
    {
        packet_queue_free_packet(current_response_packet);
        current_response_packet = NULL;
    }
}
 80035a6:	bd10      	pop	{r4, pc}
        on_request_completed();
 80035a8:	f7ff fb32 	bl	8002c10 <on_request_completed>
 80035ac:	e7fb      	b.n	80035a6 <d7asp_signal_transmission_failure+0x12>
        packet_queue_free_packet(current_response_packet);
 80035ae:	4c04      	ldr	r4, [pc, #16]	; (80035c0 <d7asp_signal_transmission_failure+0x2c>)
 80035b0:	6820      	ldr	r0, [r4, #0]
 80035b2:	f001 ff01 	bl	80053b8 <packet_queue_free_packet>
        current_response_packet = NULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	6023      	str	r3, [r4, #0]
}
 80035ba:	e7f4      	b.n	80035a6 <d7asp_signal_transmission_failure+0x12>
 80035bc:	200019f1 	.word	0x200019f1
 80035c0:	200019ec 	.word	0x200019ec

080035c4 <d7asp_signal_transaction_terminated>:

void d7asp_signal_transaction_terminated()
{
 80035c4:	b510      	push	{r4, lr}
    if (d7asp_state == D7ASP_STATE_SLAVE_WAITING_RESPONSE)
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <d7asp_signal_transaction_terminated+0x34>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b06      	cmp	r3, #6
 80035cc:	d002      	beq.n	80035d4 <d7asp_signal_transaction_terminated+0x10>
        else
            switch_state(D7ASP_STATE_SLAVE);

        d7ap_stack_signal_transaction_terminated();
    }
    else if (d7asp_state == D7ASP_STATE_MASTER)
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d00e      	beq.n	80035f0 <d7asp_signal_transaction_terminated+0x2c>
        on_request_completed();
}
 80035d2:	bd10      	pop	{r4, pc}
        if (current_master_session.state == D7ASP_MASTER_SESSION_ACTIVE)
 80035d4:	4b09      	ldr	r3, [pc, #36]	; (80035fc <d7asp_signal_transaction_terminated+0x38>)
 80035d6:	7b1b      	ldrb	r3, [r3, #12]
 80035d8:	2b05      	cmp	r3, #5
 80035da:	d005      	beq.n	80035e8 <d7asp_signal_transaction_terminated+0x24>
            switch_state(D7ASP_STATE_SLAVE);
 80035dc:	2002      	movs	r0, #2
 80035de:	f7ff f96f 	bl	80028c0 <switch_state>
        d7ap_stack_signal_transaction_terminated();
 80035e2:	f7ff f825 	bl	8002630 <d7ap_stack_signal_transaction_terminated>
 80035e6:	e7f4      	b.n	80035d2 <d7asp_signal_transaction_terminated+0xe>
            switch_state(D7ASP_STATE_SLAVE_PENDING_MASTER);
 80035e8:	2004      	movs	r0, #4
 80035ea:	f7ff f969 	bl	80028c0 <switch_state>
 80035ee:	e7f8      	b.n	80035e2 <d7asp_signal_transaction_terminated+0x1e>
        on_request_completed();
 80035f0:	f7ff fb0e 	bl	8002c10 <on_request_completed>
}
 80035f4:	e7ed      	b.n	80035d2 <d7asp_signal_transaction_terminated+0xe>
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	200019f1 	.word	0x200019f1
 80035fc:	200018f8 	.word	0x200018f8

08003600 <d7asp_signal_dialog_terminated>:

void d7asp_signal_dialog_terminated()
{
 8003600:	b510      	push	{r4, lr}
    assert(d7asp_state == D7ASP_STATE_SLAVE ||
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <d7asp_signal_dialog_terminated+0x4c>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d001      	beq.n	800360e <d7asp_signal_dialog_terminated+0xe>
 800360a:	2b04      	cmp	r3, #4
 800360c:	d112      	bne.n	8003634 <d7asp_signal_dialog_terminated+0x34>
           d7asp_state == D7ASP_STATE_SLAVE_PENDING_MASTER);

    if (current_response_packet)
 800360e:	4b10      	ldr	r3, [pc, #64]	; (8003650 <d7asp_signal_dialog_terminated+0x50>)
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	2800      	cmp	r0, #0
 8003614:	d004      	beq.n	8003620 <d7asp_signal_dialog_terminated+0x20>
    {
        DPRINT("Discard the response since the dialog is now terminated");
        packet_queue_free_packet(current_response_packet);
 8003616:	f001 fecf 	bl	80053b8 <packet_queue_free_packet>
        current_response_packet = NULL;
 800361a:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <d7asp_signal_dialog_terminated+0x50>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
    }

    if (current_master_session.state == D7ASP_MASTER_SESSION_PENDING_DORMANT_TRIGGERED) {
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <d7asp_signal_dialog_terminated+0x54>)
 8003622:	7b1b      	ldrb	r3, [r3, #12]
 8003624:	2b04      	cmp	r3, #4
 8003626:	d00b      	beq.n	8003640 <d7asp_signal_dialog_terminated+0x40>
      switch_state(D7ASP_STATE_PENDING_MASTER);
      schedule_current_session();
    } else {
      switch_state(D7ASP_STATE_IDLE);
 8003628:	2001      	movs	r0, #1
 800362a:	f7ff f949 	bl	80028c0 <switch_state>
    }

    d7ap_stack_signal_slave_session_terminated();
 800362e:	f7fe fff5 	bl	800261c <d7ap_stack_signal_slave_session_terminated>
}
 8003632:	bd10      	pop	{r4, pc}
    assert(d7asp_state == D7ASP_STATE_SLAVE ||
 8003634:	4b08      	ldr	r3, [pc, #32]	; (8003658 <d7asp_signal_dialog_terminated+0x58>)
 8003636:	4a09      	ldr	r2, [pc, #36]	; (800365c <d7asp_signal_dialog_terminated+0x5c>)
 8003638:	4909      	ldr	r1, [pc, #36]	; (8003660 <d7asp_signal_dialog_terminated+0x60>)
 800363a:	480a      	ldr	r0, [pc, #40]	; (8003664 <d7asp_signal_dialog_terminated+0x64>)
 800363c:	f004 ffe0 	bl	8008600 <__assert_func>
      switch_state(D7ASP_STATE_PENDING_MASTER);
 8003640:	2005      	movs	r0, #5
 8003642:	f7ff f93d 	bl	80028c0 <switch_state>
      schedule_current_session();
 8003646:	f7ff f903 	bl	8002850 <schedule_current_session>
 800364a:	e7f0      	b.n	800362e <d7asp_signal_dialog_terminated+0x2e>
 800364c:	200019f1 	.word	0x200019f1
 8003650:	200019ec 	.word	0x200019ec
 8003654:	200018f8 	.word	0x200018f8
 8003658:	08017810 	.word	0x08017810
 800365c:	08017dbc 	.word	0x08017dbc
 8003660:	00000346 	.word	0x00000346
 8003664:	08017650 	.word	0x08017650

08003668 <switch_state>:

#define IS_IN_MASTER_TRANSACTION() (d7atp_state == D7ATP_STATE_MASTER_TRANSACTION_REQUEST_PERIOD || \
                                    d7atp_state == D7ATP_STATE_MASTER_TRANSACTION_RESPONSE_PERIOD)

static void switch_state(state_t new_state)
{
 8003668:	b510      	push	{r4, lr}
    switch(new_state)
 800366a:	2806      	cmp	r0, #6
 800366c:	d84b      	bhi.n	8003706 <switch_state+0x9e>
 800366e:	0083      	lsls	r3, r0, #2
 8003670:	4a28      	ldr	r2, [pc, #160]	; (8003714 <switch_state+0xac>)
 8003672:	58d3      	ldr	r3, [r2, r3]
 8003674:	469f      	mov	pc, r3
    {
    case D7ATP_STATE_MASTER_TRANSACTION_REQUEST_PERIOD:
        DPRINT("Switching to D7ATP_STATE_MASTER_TRANSACTION_REQUEST_PERIOD");
        assert(d7atp_state == D7ATP_STATE_IDLE ||
 8003676:	4b28      	ldr	r3, [pc, #160]	; (8003718 <switch_state+0xb0>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d001      	beq.n	8003682 <switch_state+0x1a>
 800367e:	2b03      	cmp	r3, #3
 8003680:	d102      	bne.n	8003688 <switch_state+0x20>
               d7atp_state == D7ATP_STATE_MASTER_TRANSACTION_RESPONSE_PERIOD);
        d7atp_state = new_state;
 8003682:	4b25      	ldr	r3, [pc, #148]	; (8003718 <switch_state+0xb0>)
 8003684:	7018      	strb	r0, [r3, #0]
        break;
 8003686:	e03d      	b.n	8003704 <switch_state+0x9c>
        assert(d7atp_state == D7ATP_STATE_IDLE ||
 8003688:	4b24      	ldr	r3, [pc, #144]	; (800371c <switch_state+0xb4>)
 800368a:	4a25      	ldr	r2, [pc, #148]	; (8003720 <switch_state+0xb8>)
 800368c:	2165      	movs	r1, #101	; 0x65
 800368e:	4825      	ldr	r0, [pc, #148]	; (8003724 <switch_state+0xbc>)
 8003690:	f004 ffb6 	bl	8008600 <__assert_func>
    case D7ATP_STATE_MASTER_TRANSACTION_RESPONSE_PERIOD:
        DPRINT("Switching to D7ATP_STATE_MASTER_TRANSACTION_RESPONSE_PERIOD");
        assert(d7atp_state == D7ATP_STATE_MASTER_TRANSACTION_REQUEST_PERIOD);
 8003694:	4b20      	ldr	r3, [pc, #128]	; (8003718 <switch_state+0xb0>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d102      	bne.n	80036a2 <switch_state+0x3a>
        d7atp_state = new_state;
 800369c:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <switch_state+0xb0>)
 800369e:	7018      	strb	r0, [r3, #0]
        break;
 80036a0:	e030      	b.n	8003704 <switch_state+0x9c>
        assert(d7atp_state == D7ATP_STATE_MASTER_TRANSACTION_REQUEST_PERIOD);
 80036a2:	4b21      	ldr	r3, [pc, #132]	; (8003728 <switch_state+0xc0>)
 80036a4:	4a1e      	ldr	r2, [pc, #120]	; (8003720 <switch_state+0xb8>)
 80036a6:	216b      	movs	r1, #107	; 0x6b
 80036a8:	481e      	ldr	r0, [pc, #120]	; (8003724 <switch_state+0xbc>)
 80036aa:	f004 ffa9 	bl	8008600 <__assert_func>
    case D7ATP_STATE_SLAVE_TRANSACTION_RECEIVED_REQUEST:
        DPRINT("Switching to D7ATP_STATE_SLAVE_TRANSACTION_RECEIVED_REQUEST");
        assert(d7atp_state == D7ATP_STATE_IDLE || d7atp_state == D7ATP_STATE_SLAVE_TRANSACTION_RESPONSE_PERIOD);
 80036ae:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <switch_state+0xb0>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d001      	beq.n	80036ba <switch_state+0x52>
 80036b6:	2b06      	cmp	r3, #6
 80036b8:	d102      	bne.n	80036c0 <switch_state+0x58>
        d7atp_state = new_state;
 80036ba:	4b17      	ldr	r3, [pc, #92]	; (8003718 <switch_state+0xb0>)
 80036bc:	7018      	strb	r0, [r3, #0]
        break;
 80036be:	e021      	b.n	8003704 <switch_state+0x9c>
        assert(d7atp_state == D7ATP_STATE_IDLE || d7atp_state == D7ATP_STATE_SLAVE_TRANSACTION_RESPONSE_PERIOD);
 80036c0:	4b1a      	ldr	r3, [pc, #104]	; (800372c <switch_state+0xc4>)
 80036c2:	4a17      	ldr	r2, [pc, #92]	; (8003720 <switch_state+0xb8>)
 80036c4:	2170      	movs	r1, #112	; 0x70
 80036c6:	4817      	ldr	r0, [pc, #92]	; (8003724 <switch_state+0xbc>)
 80036c8:	f004 ff9a 	bl	8008600 <__assert_func>
    case D7ATP_STATE_SLAVE_TRANSACTION_SENDING_RESPONSE:
        DPRINT("Switching to D7ATP_STATE_SLAVE_TRANSACTION_SENDING_RESPONSE");
        assert(d7atp_state == D7ATP_STATE_SLAVE_TRANSACTION_RECEIVED_REQUEST);
 80036cc:	4b12      	ldr	r3, [pc, #72]	; (8003718 <switch_state+0xb0>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d102      	bne.n	80036da <switch_state+0x72>
        d7atp_state = new_state;
 80036d4:	4b10      	ldr	r3, [pc, #64]	; (8003718 <switch_state+0xb0>)
 80036d6:	7018      	strb	r0, [r3, #0]
        break;
 80036d8:	e014      	b.n	8003704 <switch_state+0x9c>
        assert(d7atp_state == D7ATP_STATE_SLAVE_TRANSACTION_RECEIVED_REQUEST);
 80036da:	4b15      	ldr	r3, [pc, #84]	; (8003730 <switch_state+0xc8>)
 80036dc:	4a10      	ldr	r2, [pc, #64]	; (8003720 <switch_state+0xb8>)
 80036de:	2175      	movs	r1, #117	; 0x75
 80036e0:	4810      	ldr	r0, [pc, #64]	; (8003724 <switch_state+0xbc>)
 80036e2:	f004 ff8d 	bl	8008600 <__assert_func>
    case D7ATP_STATE_SLAVE_TRANSACTION_RESPONSE_PERIOD:
        DPRINT("Switching to D7ATP_STATE_SLAVE_TRANSACTION_RESPONSE_PERIOD");
        assert(d7atp_state == D7ATP_STATE_SLAVE_TRANSACTION_SENDING_RESPONSE);
 80036e6:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <switch_state+0xb0>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b05      	cmp	r3, #5
 80036ec:	d102      	bne.n	80036f4 <switch_state+0x8c>
        d7atp_state = new_state;
 80036ee:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <switch_state+0xb0>)
 80036f0:	7018      	strb	r0, [r3, #0]
        break;
 80036f2:	e007      	b.n	8003704 <switch_state+0x9c>
        assert(d7atp_state == D7ATP_STATE_SLAVE_TRANSACTION_SENDING_RESPONSE);
 80036f4:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <switch_state+0xcc>)
 80036f6:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <switch_state+0xb8>)
 80036f8:	217a      	movs	r1, #122	; 0x7a
 80036fa:	480a      	ldr	r0, [pc, #40]	; (8003724 <switch_state+0xbc>)
 80036fc:	f004 ff80 	bl	8008600 <__assert_func>
    case D7ATP_STATE_IDLE:
        DPRINT("Switching to D7ATP_STATE_IDLE");
        d7atp_state = new_state;
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <switch_state+0xb0>)
 8003702:	7018      	strb	r0, [r3, #0]
        break;
    default:
        assert(false);
    }
}
 8003704:	bd10      	pop	{r4, pc}
        assert(false);
 8003706:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <switch_state+0xd0>)
 8003708:	4a05      	ldr	r2, [pc, #20]	; (8003720 <switch_state+0xb8>)
 800370a:	2182      	movs	r1, #130	; 0x82
 800370c:	4805      	ldr	r0, [pc, #20]	; (8003724 <switch_state+0xbc>)
 800370e:	f004 ff77 	bl	8008600 <__assert_func>
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	08017f94 	.word	0x08017f94
 8003718:	20001a80 	.word	0x20001a80
 800371c:	08017ddc 	.word	0x08017ddc
 8003720:	08018338 	.word	0x08018338
 8003724:	08017e40 	.word	0x08017e40
 8003728:	08017e74 	.word	0x08017e74
 800372c:	08017eb4 	.word	0x08017eb4
 8003730:	08017f14 	.word	0x08017f14
 8003734:	08017f54 	.word	0x08017f54
 8003738:	080169c8 	.word	0x080169c8

0800373c <terminate_dialog>:

    d7anp_start_foreground_scan();
}

static void terminate_dialog()
{
 800373c:	b510      	push	{r4, lr}
    DPRINT("Dialog terminated");

    switch_state(D7ATP_STATE_IDLE);
 800373e:	2001      	movs	r0, #1
 8003740:	f7ff ff92 	bl	8003668 <switch_state>
    current_dialog_id = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	4a07      	ldr	r2, [pc, #28]	; (8003764 <terminate_dialog+0x28>)
 8003748:	7013      	strb	r3, [r2, #0]
    current_transaction_id = NO_ACTIVE_REQUEST_ID;
 800374a:	4a07      	ldr	r2, [pc, #28]	; (8003768 <terminate_dialog+0x2c>)
 800374c:	21ff      	movs	r1, #255	; 0xff
 800374e:	7011      	strb	r1, [r2, #0]
    stop_dialog_after_tx = false;
 8003750:	4a06      	ldr	r2, [pc, #24]	; (800376c <terminate_dialog+0x30>)
 8003752:	7013      	strb	r3, [r2, #0]

    // Discard eventually the Tc timer
    timer_cancel_event(&d7atp_response_period_expired_timer);
 8003754:	4806      	ldr	r0, [pc, #24]	; (8003770 <terminate_dialog+0x34>)
 8003756:	f00d f8ad 	bl	80108b4 <timer_cancel_event>

    d7asp_signal_dialog_terminated();
 800375a:	f7ff ff51 	bl	8003600 <d7asp_signal_dialog_terminated>
    dll_notify_dialog_terminated();
 800375e:	f002 fe53 	bl	8006408 <dll_notify_dialog_terminated>
}
 8003762:	bd10      	pop	{r4, pc}
 8003764:	20001a7e 	.word	0x20001a7e
 8003768:	20001a7f 	.word	0x20001a7f
 800376c:	20001a81 	.word	0x20001a81
 8003770:	20001a98 	.word	0x20001a98

08003774 <execution_delay_timeout_handler>:
{
 8003774:	b510      	push	{r4, lr}
    assert(d7atp_state == D7ATP_STATE_MASTER_TRANSACTION_RESPONSE_PERIOD);
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <execution_delay_timeout_handler+0x1c>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d102      	bne.n	8003784 <execution_delay_timeout_handler+0x10>
    d7anp_start_foreground_scan();
 800377e:	f000 fe7d 	bl	800447c <d7anp_start_foreground_scan>
}
 8003782:	bd10      	pop	{r4, pc}
    assert(d7atp_state == D7ATP_STATE_MASTER_TRANSACTION_RESPONSE_PERIOD);
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <execution_delay_timeout_handler+0x20>)
 8003786:	4a04      	ldr	r2, [pc, #16]	; (8003798 <execution_delay_timeout_handler+0x24>)
 8003788:	2188      	movs	r1, #136	; 0x88
 800378a:	4804      	ldr	r0, [pc, #16]	; (800379c <execution_delay_timeout_handler+0x28>)
 800378c:	f004 ff38 	bl	8008600 <__assert_func>
 8003790:	20001a80 	.word	0x20001a80
 8003794:	08017fb0 	.word	0x08017fb0
 8003798:	08018348 	.word	0x08018348
 800379c:	08017e40 	.word	0x08017e40

080037a0 <response_period_timeout_handler>:

static void response_period_timeout_handler()
{
 80037a0:	b510      	push	{r4, lr}
//    DEBUG_PIN_CLR(2);
    DPRINT("Expiration of the response period");

    assert(d7atp_state == D7ATP_STATE_SLAVE_TRANSACTION_RESPONSE_PERIOD
 80037a2:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <response_period_timeout_handler+0x50>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d003      	beq.n	80037b2 <response_period_timeout_handler+0x12>
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d001      	beq.n	80037b2 <response_period_timeout_handler+0x12>
 80037ae:	2b05      	cmp	r3, #5
 80037b0:	d10d      	bne.n	80037ce <response_period_timeout_handler+0x2e>
           || d7atp_state == D7ATP_STATE_SLAVE_TRANSACTION_RECEIVED_REQUEST
           || d7atp_state == D7ATP_STATE_SLAVE_TRANSACTION_SENDING_RESPONSE);

    current_transaction_id = NO_ACTIVE_REQUEST_ID;
 80037b2:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <response_period_timeout_handler+0x54>)
 80037b4:	22ff      	movs	r2, #255	; 0xff
 80037b6:	701a      	strb	r2, [r3, #0]
    DPRINT("Transaction is terminated");
    d7asp_signal_transaction_terminated();
 80037b8:	f7ff ff04 	bl	80035c4 <d7asp_signal_transaction_terminated>

    if (stop_dialog_after_tx)
 80037bc:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <response_period_timeout_handler+0x58>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10a      	bne.n	80037da <response_period_timeout_handler+0x3a>
    {
        // no FG scan required after transaction, we can end dialog now
        d7anp_stop_foreground_scan();
        terminate_dialog();
    }
    else if (current_Tl_received > 0)
 80037c4:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <response_period_timeout_handler+0x5c>)
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	2800      	cmp	r0, #0
 80037ca:	d10b      	bne.n	80037e4 <response_period_timeout_handler+0x44>
    {
        d7anp_set_foreground_scan_timeout(current_Tl_received);
        d7anp_start_foreground_scan();
    }
}
 80037cc:	bd10      	pop	{r4, pc}
    assert(d7atp_state == D7ATP_STATE_SLAVE_TRANSACTION_RESPONSE_PERIOD
 80037ce:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <response_period_timeout_handler+0x60>)
 80037d0:	4a0c      	ldr	r2, [pc, #48]	; (8003804 <response_period_timeout_handler+0x64>)
 80037d2:	21a5      	movs	r1, #165	; 0xa5
 80037d4:	480c      	ldr	r0, [pc, #48]	; (8003808 <response_period_timeout_handler+0x68>)
 80037d6:	f004 ff13 	bl	8008600 <__assert_func>
        d7anp_stop_foreground_scan();
 80037da:	f000 fe83 	bl	80044e4 <d7anp_stop_foreground_scan>
        terminate_dialog();
 80037de:	f7ff ffad 	bl	800373c <terminate_dialog>
 80037e2:	e7f3      	b.n	80037cc <response_period_timeout_handler+0x2c>
        d7anp_set_foreground_scan_timeout(current_Tl_received);
 80037e4:	f000 fe64 	bl	80044b0 <d7anp_set_foreground_scan_timeout>
        d7anp_start_foreground_scan();
 80037e8:	f000 fe48 	bl	800447c <d7anp_start_foreground_scan>
}
 80037ec:	e7ee      	b.n	80037cc <response_period_timeout_handler+0x2c>
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	20001a80 	.word	0x20001a80
 80037f4:	20001a7f 	.word	0x20001a7f
 80037f8:	20001a81 	.word	0x20001a81
 80037fc:	20001a6c 	.word	0x20001a6c
 8003800:	08017ff0 	.word	0x08017ff0
 8003804:	08018368 	.word	0x08018368
 8003808:	08017e40 	.word	0x08017e40

0800380c <sel_config_modified_callback>:
    DPRINT("adjusted timeout val = %i (-%i)", timeout_ticks, delta);
    return timeout_ticks;
}

static void sel_config_modified_callback(uint8_t file_id)
{
 800380c:	b510      	push	{r4, lr}
 800380e:	b084      	sub	sp, #16
    d7a_segment_filter_options_t segment_filter_options;
    uint32_t length = D7A_FILE_SEL_CONF_SEGMENT_FILTER_SIZE;
 8003810:	2301      	movs	r3, #1
 8003812:	9302      	str	r3, [sp, #8]
    d7ap_fs_read_file(D7A_FILE_SEL_CONF_FILE_ID, D7A_FILE_SEL_CONF_SEGMENT_FILTER_OFFSET, &segment_filter_options.raw, &length, ROOT_AUTH);
 8003814:	ac03      	add	r4, sp, #12
 8003816:	2300      	movs	r3, #0
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	ab02      	add	r3, sp, #8
 800381c:	0022      	movs	r2, r4
 800381e:	2105      	movs	r1, #5
 8003820:	2012      	movs	r0, #18
 8003822:	f004 fa3d 	bl	8007ca0 <d7ap_fs_read_file>
    ctrl_xoff = segment_filter_options.xoff;
 8003826:	7823      	ldrb	r3, [r4, #0]
 8003828:	06db      	lsls	r3, r3, #27
 800382a:	0fdb      	lsrs	r3, r3, #31
 800382c:	4a01      	ldr	r2, [pc, #4]	; (8003834 <sel_config_modified_callback+0x28>)
 800382e:	7013      	strb	r3, [r2, #0]
}
 8003830:	b004      	add	sp, #16
 8003832:	bd10      	pop	{r4, pc}
 8003834:	20001a82 	.word	0x20001a82

08003838 <schedule_response_period_timeout_handler>:

static void schedule_response_period_timeout_handler(timer_tick_t timeout_ticks)
{
 8003838:	b510      	push	{r4, lr}
//    DEBUG_PIN_SET(2);

    DPRINT("Starting response_period timer (%i ticks)", timeout_ticks);

    d7atp_response_period_expired_timer.next_event = timeout_ticks;
 800383a:	4b07      	ldr	r3, [pc, #28]	; (8003858 <schedule_response_period_timeout_handler+0x20>)
 800383c:	6058      	str	r0, [r3, #4]
    error_t rtc = timer_add_event(&d7atp_response_period_expired_timer);
 800383e:	0018      	movs	r0, r3
 8003840:	f00c fff8 	bl	8010834 <timer_add_event>
    assert(rtc == SUCCESS);
 8003844:	2800      	cmp	r0, #0
 8003846:	d100      	bne.n	800384a <schedule_response_period_timeout_handler+0x12>
}
 8003848:	bd10      	pop	{r4, pc}
    assert(rtc == SUCCESS);
 800384a:	4b04      	ldr	r3, [pc, #16]	; (800385c <schedule_response_period_timeout_handler+0x24>)
 800384c:	4a04      	ldr	r2, [pc, #16]	; (8003860 <schedule_response_period_timeout_handler+0x28>)
 800384e:	21d8      	movs	r1, #216	; 0xd8
 8003850:	4804      	ldr	r0, [pc, #16]	; (8003864 <schedule_response_period_timeout_handler+0x2c>)
 8003852:	f004 fed5 	bl	8008600 <__assert_func>
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	20001a98 	.word	0x20001a98
 800385c:	08017738 	.word	0x08017738
 8003860:	08018388 	.word	0x08018388
 8003864:	08017e40 	.word	0x08017e40

08003868 <adjust_timeout_value>:
{
 8003868:	b570      	push	{r4, r5, r6, lr}
 800386a:	0005      	movs	r5, r0
 800386c:	000c      	movs	r4, r1
    timer_tick_t delta = timer_get_counter_value() - request_received_timestamp;
 800386e:	f00c fd47 	bl	8010300 <timer_get_counter_value>
 8003872:	1b03      	subs	r3, r0, r4
    if (timeout_ticks > delta)
 8003874:	42ab      	cmp	r3, r5
 8003876:	d202      	bcs.n	800387e <adjust_timeout_value+0x16>
        timeout_ticks -= delta;
 8003878:	1a20      	subs	r0, r4, r0
 800387a:	1940      	adds	r0, r0, r5
}
 800387c:	bd70      	pop	{r4, r5, r6, pc}
        timeout_ticks = 0;
 800387e:	2000      	movs	r0, #0
    return timeout_ticks;
 8003880:	e7fc      	b.n	800387c <adjust_timeout_value+0x14>
	...

08003884 <d7atp_signal_foreground_scan_expired>:

void d7atp_signal_foreground_scan_expired()
{
 8003884:	b510      	push	{r4, lr}
    // Reset the transaction Id
    current_transaction_id = NO_ACTIVE_REQUEST_ID;
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <d7atp_signal_foreground_scan_expired+0x30>)
 8003888:	22ff      	movs	r2, #255	; 0xff
 800388a:	701a      	strb	r2, [r3, #0]

    // In case of slave, we can consider that the dialog is terminated
    if (d7atp_state == D7ATP_STATE_SLAVE_TRANSACTION_RESPONSE_PERIOD
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <d7atp_signal_foreground_scan_expired+0x34>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b06      	cmp	r3, #6
 8003892:	d008      	beq.n	80038a6 <d7atp_signal_foreground_scan_expired+0x22>
        || d7atp_state == D7ATP_STATE_SLAVE_TRANSACTION_RECEIVED_REQUEST
 8003894:	2b04      	cmp	r3, #4
 8003896:	d006      	beq.n	80038a6 <d7atp_signal_foreground_scan_expired+0x22>
        || d7atp_state == D7ATP_STATE_SLAVE_TRANSACTION_SENDING_RESPONSE )
 8003898:	2b05      	cmp	r3, #5
 800389a:	d004      	beq.n	80038a6 <d7atp_signal_foreground_scan_expired+0x22>
    {
        terminate_dialog();
    }
    else if (d7atp_state == D7ATP_STATE_MASTER_TRANSACTION_RESPONSE_PERIOD)
 800389c:	2b03      	cmp	r3, #3
 800389e:	d005      	beq.n	80038ac <d7atp_signal_foreground_scan_expired+0x28>
    }
    else
    {
        DPRINT("A FG scan initiated probably by an advertising background frame "
        "or after a dormant session notification is expired");
        dll_notify_dialog_terminated(); // enter scan automation
 80038a0:	f002 fdb2 	bl	8006408 <dll_notify_dialog_terminated>
    }
}
 80038a4:	e001      	b.n	80038aa <d7atp_signal_foreground_scan_expired+0x26>
        terminate_dialog();
 80038a6:	f7ff ff49 	bl	800373c <terminate_dialog>
}
 80038aa:	bd10      	pop	{r4, pc}
        d7asp_signal_transaction_terminated();
 80038ac:	f7ff fe8a 	bl	80035c4 <d7asp_signal_transaction_terminated>
 80038b0:	e7fb      	b.n	80038aa <d7atp_signal_foreground_scan_expired+0x26>
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	20001a7f 	.word	0x20001a7f
 80038b8:	20001a80 	.word	0x20001a80

080038bc <d7atp_signal_dialog_termination>:

void d7atp_signal_dialog_termination()
{
 80038bc:	b510      	push	{r4, lr}
    DPRINT("Dialog is terminated by upper layer");

    // It means that we are not participating in a dialog and we can accept
    // segments marked with START flag set to 1.
    switch_state(D7ATP_STATE_IDLE);
 80038be:	2001      	movs	r0, #1
 80038c0:	f7ff fed2 	bl	8003668 <switch_state>
    current_dialog_id = 0;
 80038c4:	4b09      	ldr	r3, [pc, #36]	; (80038ec <d7atp_signal_dialog_termination+0x30>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	701a      	strb	r2, [r3, #0]
    current_transaction_id = NO_ACTIVE_REQUEST_ID;
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <d7atp_signal_dialog_termination+0x34>)
 80038cc:	32ff      	adds	r2, #255	; 0xff
 80038ce:	701a      	strb	r2, [r3, #0]

    // Discard eventually the Tc timer
    timer_cancel_event(&d7atp_response_period_expired_timer);
 80038d0:	4808      	ldr	r0, [pc, #32]	; (80038f4 <d7atp_signal_dialog_termination+0x38>)
 80038d2:	f00c ffef 	bl	80108b4 <timer_cancel_event>

    if(current_Tl_received == 0) {
 80038d6:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <d7atp_signal_dialog_termination+0x3c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d000      	beq.n	80038e0 <d7atp_signal_dialog_termination+0x24>
      // notify DLL that the dialog is over
      dll_notify_dialog_terminated();
    } else {
      DPRINT("Tl set, don't stop FG scan");
    }
}
 80038de:	bd10      	pop	{r4, pc}
      d7anp_stop_foreground_scan();
 80038e0:	f000 fe00 	bl	80044e4 <d7anp_stop_foreground_scan>
      dll_notify_dialog_terminated();
 80038e4:	f002 fd90 	bl	8006408 <dll_notify_dialog_terminated>
}
 80038e8:	e7f9      	b.n	80038de <d7atp_signal_dialog_termination+0x22>
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	20001a7e 	.word	0x20001a7e
 80038f0:	20001a7f 	.word	0x20001a7f
 80038f4:	20001a98 	.word	0x20001a98
 80038f8:	20001a6c 	.word	0x20001a6c

080038fc <d7atp_init>:
    // stop the DLL foreground scan
    d7anp_stop_foreground_scan();
}

void d7atp_init()
{
 80038fc:	b510      	push	{r4, lr}
    assert(d7atp_state == D7ATP_STATE_STOPPED);
 80038fe:	4b14      	ldr	r3, [pc, #80]	; (8003950 <d7atp_init+0x54>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d11c      	bne.n	8003940 <d7atp_init+0x44>

    d7atp_state = D7ATP_STATE_IDLE;
 8003906:	4b12      	ldr	r3, [pc, #72]	; (8003950 <d7atp_init+0x54>)
 8003908:	2201      	movs	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]
    current_access_class = ACCESS_CLASS_NOT_SET;
 800390c:	4b11      	ldr	r3, [pc, #68]	; (8003954 <d7atp_init+0x58>)
 800390e:	32fe      	adds	r2, #254	; 0xfe
 8003910:	701a      	strb	r2, [r3, #0]
    current_dialog_id = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	4a10      	ldr	r2, [pc, #64]	; (8003958 <d7atp_init+0x5c>)
 8003916:	7013      	strb	r3, [r2, #0]
    current_Tl_received = 0;
 8003918:	4a10      	ldr	r2, [pc, #64]	; (800395c <d7atp_init+0x60>)
 800391a:	6013      	str	r3, [r2, #0]
    stop_dialog_after_tx = false;
 800391c:	4a10      	ldr	r2, [pc, #64]	; (8003960 <d7atp_init+0x64>)
 800391e:	7013      	strb	r3, [r2, #0]
    timer_init_event(&d7atp_response_period_expired_timer, &response_period_timeout_handler);
 8003920:	4910      	ldr	r1, [pc, #64]	; (8003964 <d7atp_init+0x68>)
 8003922:	4811      	ldr	r0, [pc, #68]	; (8003968 <d7atp_init+0x6c>)
 8003924:	f00c fce0 	bl	80102e8 <timer_init_event>
    timer_init_event(&d7atp_execution_delay_expired_timer, &execution_delay_timeout_handler);
 8003928:	4910      	ldr	r1, [pc, #64]	; (800396c <d7atp_init+0x70>)
 800392a:	4811      	ldr	r0, [pc, #68]	; (8003970 <d7atp_init+0x74>)
 800392c:	f00c fcdc 	bl	80102e8 <timer_init_event>

    d7ap_fs_register_file_modified_callback(D7A_FILE_SEL_CONF_FILE_ID, &sel_config_modified_callback);
 8003930:	4910      	ldr	r1, [pc, #64]	; (8003974 <d7atp_init+0x78>)
 8003932:	2012      	movs	r0, #18
 8003934:	f004 fbfc 	bl	8008130 <d7ap_fs_register_file_modified_callback>
    sel_config_modified_callback(D7A_FILE_SEL_CONF_FILE_ID);
 8003938:	2012      	movs	r0, #18
 800393a:	f7ff ff67 	bl	800380c <sel_config_modified_callback>
}
 800393e:	bd10      	pop	{r4, pc}
    assert(d7atp_state == D7ATP_STATE_STOPPED);
 8003940:	211a      	movs	r1, #26
 8003942:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <d7atp_init+0x7c>)
 8003944:	4a0d      	ldr	r2, [pc, #52]	; (800397c <d7atp_init+0x80>)
 8003946:	31ff      	adds	r1, #255	; 0xff
 8003948:	480d      	ldr	r0, [pc, #52]	; (8003980 <d7atp_init+0x84>)
 800394a:	f004 fe59 	bl	8008600 <__assert_func>
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	20001a80 	.word	0x20001a80
 8003954:	20001a70 	.word	0x20001a70
 8003958:	20001a7e 	.word	0x20001a7e
 800395c:	20001a6c 	.word	0x20001a6c
 8003960:	20001a81 	.word	0x20001a81
 8003964:	080037a1 	.word	0x080037a1
 8003968:	20001a98 	.word	0x20001a98
 800396c:	08003775 	.word	0x08003775
 8003970:	20001a84 	.word	0x20001a84
 8003974:	0800380d 	.word	0x0800380d
 8003978:	080180b0 	.word	0x080180b0
 800397c:	080183b4 	.word	0x080183b4
 8003980:	08017e40 	.word	0x08017e40

08003984 <d7atp_notify_access_profile_file_changed>:

void d7atp_notify_access_profile_file_changed(uint8_t file_id)
{
    // invalidate cached access class
    current_access_class = ACCESS_CLASS_NOT_SET;
 8003984:	4b01      	ldr	r3, [pc, #4]	; (800398c <d7atp_notify_access_profile_file_changed+0x8>)
 8003986:	22ff      	movs	r2, #255	; 0xff
 8003988:	701a      	strb	r2, [r3, #0]
}
 800398a:	4770      	bx	lr
 800398c:	20001a70 	.word	0x20001a70

08003990 <d7atp_stop>:

void d7atp_stop()
{
 8003990:	b510      	push	{r4, lr}
    d7atp_state = D7ATP_STATE_STOPPED;
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <d7atp_stop+0x18>)
 8003994:	2200      	movs	r2, #0
 8003996:	701a      	strb	r2, [r3, #0]
    timer_cancel_event(&d7atp_response_period_expired_timer);
 8003998:	4804      	ldr	r0, [pc, #16]	; (80039ac <d7atp_stop+0x1c>)
 800399a:	f00c ff8b 	bl	80108b4 <timer_cancel_event>
    timer_cancel_event(&d7atp_execution_delay_expired_timer);
 800399e:	4804      	ldr	r0, [pc, #16]	; (80039b0 <d7atp_stop+0x20>)
 80039a0:	f00c ff88 	bl	80108b4 <timer_cancel_event>
}
 80039a4:	bd10      	pop	{r4, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	20001a80 	.word	0x20001a80
 80039ac:	20001a98 	.word	0x20001a98
 80039b0:	20001a84 	.word	0x20001a84

080039b4 <d7atp_send_request>:

error_t d7atp_send_request(uint8_t dialog_id, uint8_t transaction_id, bool is_last_transaction,
                        packet_t* packet, d7ap_session_qos_t* qos_settings, uint8_t listen_timeout, uint8_t expected_response_length)
{
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	0006      	movs	r6, r0
 80039b8:	000f      	movs	r7, r1
 80039ba:	001c      	movs	r4, r3
 80039bc:	ab08      	add	r3, sp, #32
 80039be:	781d      	ldrb	r5, [r3, #0]
    // unused parameters
    (void)is_last_transaction;
    (void)listen_timeout;

    /* check that we are not initiating a different dialog if a dialog is still ongoing */
    if (current_dialog_id)
 80039c0:	4b5c      	ldr	r3, [pc, #368]	; (8003b34 <d7atp_send_request+0x180>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <d7atp_send_request+0x18>
    {
        assert( dialog_id == current_dialog_id);
 80039c8:	4283      	cmp	r3, r0
 80039ca:	d120      	bne.n	8003a0e <d7atp_send_request+0x5a>
    }

    if (d7atp_state != D7ATP_STATE_MASTER_TRANSACTION_REQUEST_PERIOD)
 80039cc:	4b5a      	ldr	r3, [pc, #360]	; (8003b38 <d7atp_send_request+0x184>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d123      	bne.n	8003a1c <d7atp_send_request+0x68>
        switch_state(D7ATP_STATE_MASTER_TRANSACTION_REQUEST_PERIOD);

    if ( packet->type == RETRY_REQUEST )
 80039d4:	232c      	movs	r3, #44	; 0x2c
 80039d6:	5ce3      	ldrb	r3, [r4, r3]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d023      	beq.n	8003a24 <d7atp_send_request+0x70>
        DPRINT("Retry the transmission with the same packet content");
        current_transaction_id = transaction_id;
        goto send_packet;
    }

    current_dialog_id = dialog_id;
 80039dc:	4b55      	ldr	r3, [pc, #340]	; (8003b34 <d7atp_send_request+0x180>)
 80039de:	701e      	strb	r6, [r3, #0]
    current_transaction_id = transaction_id;
 80039e0:	4b56      	ldr	r3, [pc, #344]	; (8003b3c <d7atp_send_request+0x188>)
 80039e2:	701f      	strb	r7, [r3, #0]
    packet->d7atp_dialog_id = current_dialog_id;
 80039e4:	2326      	movs	r3, #38	; 0x26
 80039e6:	54e6      	strb	r6, [r4, r3]
    packet->d7atp_transaction_id = current_transaction_id;
 80039e8:	3301      	adds	r3, #1
 80039ea:	54e7      	strb	r7, [r4, r3]

    uint8_t access_class = packet->d7anp_addressee->access_class;
 80039ec:	6a23      	ldr	r3, [r4, #32]
 80039ee:	785e      	ldrb	r6, [r3, #1]
    if (access_class != current_access_class)
 80039f0:	4a53      	ldr	r2, [pc, #332]	; (8003b40 <d7atp_send_request+0x18c>)
 80039f2:	7812      	ldrb	r2, [r2, #0]
 80039f4:	42b2      	cmp	r2, r6
 80039f6:	d118      	bne.n	8003a2a <d7atp_send_request+0x76>
    }

    DPRINT("Start dialog Id=%i transID=%i on AC=%x, expected resp len=%i", dialog_id, transaction_id, access_class, expected_response_length);

    bool ack_requested = true;
    if ((qos_settings->qos_resp_mode == SESSION_RESP_MODE_NO || qos_settings->qos_resp_mode == SESSION_RESP_MODE_NO_RPT)
 80039f8:	9b06      	ldr	r3, [sp, #24]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2207      	movs	r2, #7
 80039fe:	0011      	movs	r1, r2
 8003a00:	4019      	ands	r1, r3
 8003a02:	421a      	tst	r2, r3
 8003a04:	d018      	beq.n	8003a38 <d7atp_send_request+0x84>
 8003a06:	2904      	cmp	r1, #4
 8003a08:	d016      	beq.n	8003a38 <d7atp_send_request+0x84>
    bool ack_requested = true;
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	e017      	b.n	8003a3e <d7atp_send_request+0x8a>
        assert( dialog_id == current_dialog_id);
 8003a0e:	219f      	movs	r1, #159	; 0x9f
 8003a10:	4b4c      	ldr	r3, [pc, #304]	; (8003b44 <d7atp_send_request+0x190>)
 8003a12:	4a4d      	ldr	r2, [pc, #308]	; (8003b48 <d7atp_send_request+0x194>)
 8003a14:	0049      	lsls	r1, r1, #1
 8003a16:	484d      	ldr	r0, [pc, #308]	; (8003b4c <d7atp_send_request+0x198>)
 8003a18:	f004 fdf2 	bl	8008600 <__assert_func>
        switch_state(D7ATP_STATE_MASTER_TRANSACTION_REQUEST_PERIOD);
 8003a1c:	2002      	movs	r0, #2
 8003a1e:	f7ff fe23 	bl	8003668 <switch_state>
 8003a22:	e7d7      	b.n	80039d4 <d7atp_send_request+0x20>
        current_transaction_id = transaction_id;
 8003a24:	4b45      	ldr	r3, [pc, #276]	; (8003b3c <d7atp_send_request+0x188>)
 8003a26:	701f      	strb	r7, [r3, #0]
        goto send_packet;
 8003a28:	e059      	b.n	8003ade <d7atp_send_request+0x12a>
        d7ap_fs_read_access_class(packet->d7anp_addressee->access_specifier, &active_addressee_access_profile);
 8003a2a:	0930      	lsrs	r0, r6, #4
 8003a2c:	4948      	ldr	r1, [pc, #288]	; (8003b50 <d7atp_send_request+0x19c>)
 8003a2e:	f004 f9d7 	bl	8007de0 <d7ap_fs_read_access_class>
        current_access_class = access_class;
 8003a32:	4b43      	ldr	r3, [pc, #268]	; (8003b40 <d7atp_send_request+0x18c>)
 8003a34:	701e      	strb	r6, [r3, #0]
 8003a36:	e7df      	b.n	80039f8 <d7atp_send_request+0x44>
        && expected_response_length == 0)
 8003a38:	2d00      	cmp	r5, #0
 8003a3a:	d055      	beq.n	8003ae8 <d7atp_send_request+0x134>
    bool ack_requested = true;
 8003a3c:	2201      	movs	r2, #1
    // FG scan timeout is set (and scan started) in d7atp_signal_packet_transmitted() for now, to be verified

    packet->d7atp_ctrl = (d7atp_ctrl_t){
        .ctrl_is_start = true,
        .ctrl_is_ack_requested = ack_requested,
        .ctrl_ack_not_void = qos_settings->qos_resp_mode == SESSION_RESP_MODE_ON_ERR? true : false,
 8003a3e:	3905      	subs	r1, #5
 8003a40:	424b      	negs	r3, r1
 8003a42:	4159      	adcs	r1, r3
 8003a44:	b2c9      	uxtb	r1, r1
    packet->d7atp_ctrl = (d7atp_ctrl_t){
 8003a46:	2301      	movs	r3, #1
 8003a48:	4019      	ands	r1, r3
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	0089      	lsls	r1, r1, #2
 8003a50:	4319      	orrs	r1, r3
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	425b      	negs	r3, r3
 8003a56:	4319      	orrs	r1, r3
 8003a58:	7721      	strb	r1, [r4, #28]
        .ctrl_te = false,
        .ctrl_agc = false,
        .ctrl_ack_record = false
    };

    if (ack_requested)
 8003a5a:	2a00      	cmp	r2, #0
 8003a5c:	d03f      	beq.n	8003ade <d7atp_send_request+0x12a>
    {
        // TODO payload length does not include headers ... + hardcoded subband
        // TODO this length does not include lower layers overhead for now, use a minimum len of 50 for now ...
        if (expected_response_length < 50)
 8003a5e:	2d31      	cmp	r5, #49	; 0x31
 8003a60:	d800      	bhi.n	8003a64 <d7atp_send_request+0xb0>
            expected_response_length = 50;
 8003a62:	2532      	movs	r5, #50	; 0x32

        uint16_t tx_duration_response = phy_calculate_tx_duration(active_addressee_access_profile.channel_header.ch_class,
 8003a64:	4b3a      	ldr	r3, [pc, #232]	; (8003b50 <d7atp_send_request+0x19c>)
 8003a66:	7819      	ldrb	r1, [r3, #0]
 8003a68:	0708      	lsls	r0, r1, #28
 8003a6a:	0f80      	lsrs	r0, r0, #30
                                                                  active_addressee_access_profile.channel_header.ch_coding,
 8003a6c:	0789      	lsls	r1, r1, #30
 8003a6e:	0f89      	lsrs	r1, r1, #30
        uint16_t tx_duration_response = phy_calculate_tx_duration(active_addressee_access_profile.channel_header.ch_class,
 8003a70:	b2aa      	uxth	r2, r5
 8003a72:	2300      	movs	r3, #0
 8003a74:	f003 fbea 	bl	800724c <phy_calculate_tx_duration>
 8003a78:	0005      	movs	r5, r0
                                                                  expected_response_length, false);
        uint8_t nb = 1;
        if (packet->d7anp_addressee->ctrl.id_type == ID_TYPE_NOID)
 8003a7a:	6a22      	ldr	r2, [r4, #32]
 8003a7c:	7811      	ldrb	r1, [r2, #0]
 8003a7e:	2330      	movs	r3, #48	; 0x30
 8003a80:	400b      	ands	r3, r1
 8003a82:	2b10      	cmp	r3, #16
 8003a84:	d04c      	beq.n	8003b20 <d7atp_send_request+0x16c>
            nb = 32;
        else if (packet->d7anp_addressee->ctrl.id_type == ID_TYPE_NBID)
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d030      	beq.n	8003aec <d7atp_send_request+0x138>
        uint8_t nb = 1;
 8003a8a:	2301      	movs	r3, #1
            nb = CT_DECOMPRESS(packet->d7anp_addressee->id[0]);

        // Tc(NB, LEN, CH) = ceil((SFC  * NB  + 1) * TTX(CH, LEN) + TG) with NB the number of concurrent devices and SF the collision Avoidance Spreading Factor
        uint16_t resp_tc = (SFc * nb + 1) * tx_duration_response + t_g;
 8003a8c:	0058      	lsls	r0, r3, #1
 8003a8e:	18c0      	adds	r0, r0, r3
 8003a90:	3001      	adds	r0, #1
 8003a92:	4368      	muls	r0, r5
 8003a94:	b280      	uxth	r0, r0
 8003a96:	3005      	adds	r0, #5
 8003a98:	b280      	uxth	r0, r0
        packet->d7atp_tc = compress_data(resp_tc, true);
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	f00a fadc 	bl	800e058 <compress_data>
 8003aa0:	2328      	movs	r3, #40	; 0x28
 8003aa2:	54e0      	strb	r0, [r4, r3]

        packet->d7atp_ctrl.ctrl_te = true;
 8003aa4:	7f23      	ldrb	r3, [r4, #28]
 8003aa6:	2210      	movs	r2, #16
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	7723      	strb	r3, [r4, #28]
        uint16_t execution_time = 6; // normal flow takes about 6 ticks
        if(active_addressee_access_profile.channel_header.ch_coding == PHY_CODING_FEC_PN9)
 8003aac:	4b28      	ldr	r3, [pc, #160]	; (8003b50 <d7atp_send_request+0x19c>)
 8003aae:	781a      	ldrb	r2, [r3, #0]
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d035      	beq.n	8003b24 <d7atp_send_request+0x170>
        uint16_t execution_time = 6; // normal flow takes about 6 ticks
 8003ab8:	2506      	movs	r5, #6
            execution_time += (packet->payload_length / 6); // software FEC decoding 6 bytes takes about 1 tick
        if(packet->d7anp_addressee->ctrl.nls_method != AES_NONE)
 8003aba:	6a23      	ldr	r3, [r4, #32]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	071b      	lsls	r3, r3, #28
 8003ac0:	d007      	beq.n	8003ad2 <d7atp_send_request+0x11e>
            execution_time += (packet->payload_length / 27); // software AES decryption 27 bytes takes about 1 tick
 8003ac2:	2332      	movs	r3, #50	; 0x32
 8003ac4:	5ce0      	ldrb	r0, [r4, r3]
 8003ac6:	211b      	movs	r1, #27
 8003ac8:	f00e f822 	bl	8011b10 <__udivsi3>
 8003acc:	b2c0      	uxtb	r0, r0
 8003ace:	182d      	adds	r5, r5, r0
 8003ad0:	b2ad      	uxth	r5, r5
        packet->d7atp_te = compress_data(execution_time, true);
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	0028      	movs	r0, r5
 8003ad6:	f00a fabf 	bl	800e058 <compress_data>
 8003ada:	232a      	movs	r3, #42	; 0x2a
 8003adc:	54e0      	strb	r0, [r4, r3]

        DPRINT("Tc <%i (Ti)> Tc <0x%02x (CT)> Tx duration <%i>", resp_tc, packet->d7atp_tc, tx_duration_response);
    }

send_packet:
    return(d7anp_tx_foreground_frame(packet, true));
 8003ade:	2101      	movs	r1, #1
 8003ae0:	0020      	movs	r0, r4
 8003ae2:	f000 fd8b 	bl	80045fc <d7anp_tx_foreground_frame>
}
 8003ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ack_requested = false;
 8003ae8:	2200      	movs	r2, #0
 8003aea:	e7a8      	b.n	8003a3e <d7atp_send_request+0x8a>
            nb = CT_DECOMPRESS(packet->d7anp_addressee->id[0]);
 8003aec:	7890      	ldrb	r0, [r2, #2]
 8003aee:	0940      	lsrs	r0, r0, #5
 8003af0:	f010 fe56 	bl	80147a0 <__aeabi_i2d>
 8003af4:	0002      	movs	r2, r0
 8003af6:	000b      	movs	r3, r1
 8003af8:	2000      	movs	r0, #0
 8003afa:	4916      	ldr	r1, [pc, #88]	; (8003b54 <d7atp_send_request+0x1a0>)
 8003afc:	f00d ff46 	bl	801198c <pow>
 8003b00:	0006      	movs	r6, r0
 8003b02:	000f      	movs	r7, r1
 8003b04:	6a23      	ldr	r3, [r4, #32]
 8003b06:	789b      	ldrb	r3, [r3, #2]
 8003b08:	201f      	movs	r0, #31
 8003b0a:	4018      	ands	r0, r3
 8003b0c:	f010 fe48 	bl	80147a0 <__aeabi_i2d>
 8003b10:	0032      	movs	r2, r6
 8003b12:	003b      	movs	r3, r7
 8003b14:	f00f fff2 	bl	8013afc <__aeabi_dmul>
 8003b18:	f00e fa48 	bl	8011fac <__aeabi_d2uiz>
 8003b1c:	b2c3      	uxtb	r3, r0
 8003b1e:	e7b5      	b.n	8003a8c <d7atp_send_request+0xd8>
            nb = 32;
 8003b20:	2320      	movs	r3, #32
 8003b22:	e7b3      	b.n	8003a8c <d7atp_send_request+0xd8>
            execution_time += (packet->payload_length / 6); // software FEC decoding 6 bytes takes about 1 tick
 8003b24:	3330      	adds	r3, #48	; 0x30
 8003b26:	5ce0      	ldrb	r0, [r4, r3]
 8003b28:	2106      	movs	r1, #6
 8003b2a:	f00d fff1 	bl	8011b10 <__udivsi3>
 8003b2e:	b2c5      	uxtb	r5, r0
 8003b30:	3506      	adds	r5, #6
 8003b32:	e7c2      	b.n	8003aba <d7atp_send_request+0x106>
 8003b34:	20001a7e 	.word	0x20001a7e
 8003b38:	20001a80 	.word	0x20001a80
 8003b3c:	20001a7f 	.word	0x20001a7f
 8003b40:	20001a70 	.word	0x20001a70
 8003b44:	080180d4 	.word	0x080180d4
 8003b48:	080183c0 	.word	0x080183c0
 8003b4c:	08017e40 	.word	0x08017e40
 8003b50:	20001a28 	.word	0x20001a28
 8003b54:	40100000 	.word	0x40100000

08003b58 <d7atp_send_response>:

error_t d7atp_send_response(packet_t* packet)
{
 8003b58:	b510      	push	{r4, lr}
 8003b5a:	0004      	movs	r4, r0
    switch_state(D7ATP_STATE_SLAVE_TRANSACTION_SENDING_RESPONSE);
 8003b5c:	2005      	movs	r0, #5
 8003b5e:	f7ff fd83 	bl	8003668 <switch_state>

    // modify the request headers and turn this into a response
    d7atp_ctrl_t* d7atp = &(packet->d7atp_ctrl);

    // leave ctrl_is_ack_requested as is, keep the requester value
    d7atp->ctrl_ack_not_void = false; // TODO
 8003b62:	7f23      	ldrb	r3, [r4, #28]
    d7atp->ctrl_ack_record = false; // TODO validate
 8003b64:	2204      	movs	r2, #4
 8003b66:	4393      	bics	r3, r2
 8003b68:	3a02      	subs	r2, #2
 8003b6a:	4393      	bics	r3, r2
 8003b6c:	7723      	strb	r3, [r4, #28]

    bool should_include_origin_template = false; // we don't need to send origin ID, the requester will filter based on dialogID, but ...

    if (ID_TYPE_IS_BROADCAST(packet->dll_header.control_target_id_type))
 8003b6e:	79a3      	ldrb	r3, [r4, #6]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d90b      	bls.n	8003b8c <d7atp_send_response+0x34>
        packet->type = RESPONSE_TO_BROADCAST;
    else
        packet->type = RESPONSE_TO_UNICAST;
 8003b74:	222c      	movs	r2, #44	; 0x2c
 8003b76:	2103      	movs	r1, #3
 8003b78:	54a1      	strb	r1, [r4, r2]

    if (ID_TYPE_IS_BROADCAST(packet->dll_header.control_target_id_type)
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d90a      	bls.n	8003b94 <d7atp_send_response+0x3c>
            || (packet->d7atp_ctrl.ctrl_is_start
            && packet->d7atp_ctrl.ctrl_is_ack_requested))
 8003b7e:	7f23      	ldrb	r3, [r4, #28]
 8003b80:	2277      	movs	r2, #119	; 0x77
 8003b82:	4393      	bics	r3, r2
            || (packet->d7atp_ctrl.ctrl_is_start
 8003b84:	2b88      	cmp	r3, #136	; 0x88
 8003b86:	d014      	beq.n	8003bb2 <d7atp_send_response+0x5a>
    bool should_include_origin_template = false; // we don't need to send origin ID, the requester will filter based on dialogID, but ...
 8003b88:	2100      	movs	r1, #0
 8003b8a:	e004      	b.n	8003b96 <d7atp_send_response+0x3e>
        packet->type = RESPONSE_TO_BROADCAST;
 8003b8c:	322a      	adds	r2, #42	; 0x2a
 8003b8e:	2104      	movs	r1, #4
 8003b90:	54a1      	strb	r1, [r4, r2]
 8003b92:	e7f2      	b.n	8003b7a <d7atp_send_response+0x22>
    {
        /*
         * origin template is provided in all requests in which the START flag is set to 1
         * and requesting responses, and in all responses to broadcast requests
         */
        should_include_origin_template = true;
 8003b94:	2101      	movs	r1, #1
    }

    /* 
     * a setting in the SEL_config file should be able to tell the requester this node should not be put as preferred. This XOFF bit indicates that
     */
    packet->d7atp_ctrl.ctrl_xoff = ctrl_xoff;
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <d7atp_send_response+0x60>)
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	401a      	ands	r2, r3
 8003b9e:	0192      	lsls	r2, r2, #6
 8003ba0:	7f23      	ldrb	r3, [r4, #28]
 8003ba2:	2040      	movs	r0, #64	; 0x40
 8003ba4:	4383      	bics	r3, r0
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	7723      	strb	r3, [r4, #28]
        DPRINT("extending dialog");
    }

    // dialog and transaction id remain the same
    DPRINT("Tl=%i", packet->d7atp_tl);
    return (d7anp_tx_foreground_frame(packet, should_include_origin_template));
 8003baa:	0020      	movs	r0, r4
 8003bac:	f000 fd26 	bl	80045fc <d7anp_tx_foreground_frame>
}
 8003bb0:	bd10      	pop	{r4, pc}
        should_include_origin_template = true;
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	e7ef      	b.n	8003b96 <d7atp_send_response+0x3e>
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	20001a82 	.word	0x20001a82

08003bbc <d7atp_assemble_packet_header>:

uint8_t d7atp_assemble_packet_header(packet_t* packet, uint8_t* data_ptr)
{
 8003bbc:	b510      	push	{r4, lr}
    uint8_t* d7atp_header_start = data_ptr;
    (*data_ptr) = packet->d7atp_ctrl.ctrl_raw; data_ptr++;
 8003bbe:	7f03      	ldrb	r3, [r0, #28]
 8003bc0:	700b      	strb	r3, [r1, #0]
    (*data_ptr) = packet->d7atp_dialog_id; data_ptr++;
 8003bc2:	2326      	movs	r3, #38	; 0x26
 8003bc4:	5cc3      	ldrb	r3, [r0, r3]
 8003bc6:	704b      	strb	r3, [r1, #1]
    (*data_ptr) = packet->d7atp_transaction_id; data_ptr++;
 8003bc8:	2327      	movs	r3, #39	; 0x27
 8003bca:	5cc3      	ldrb	r3, [r0, r3]
 8003bcc:	708b      	strb	r3, [r1, #2]
 8003bce:	1ccb      	adds	r3, r1, #3
    if (packet->d7atp_ctrl.ctrl_agc) {
 8003bd0:	7f02      	ldrb	r2, [r0, #28]
 8003bd2:	07d2      	lsls	r2, r2, #31
 8003bd4:	d503      	bpl.n	8003bde <d7atp_assemble_packet_header+0x22>
        (*data_ptr) = packet->d7atp_target_rx_level_i;
 8003bd6:	232b      	movs	r3, #43	; 0x2b
 8003bd8:	5cc3      	ldrb	r3, [r0, r3]
 8003bda:	70cb      	strb	r3, [r1, #3]
        data_ptr++;
 8003bdc:	1d0b      	adds	r3, r1, #4
    }

    if (packet->d7atp_ctrl.ctrl_tl) {
 8003bde:	7f02      	ldrb	r2, [r0, #28]
 8003be0:	0692      	lsls	r2, r2, #26
 8003be2:	d503      	bpl.n	8003bec <d7atp_assemble_packet_header+0x30>
        (*data_ptr) = packet->d7atp_tl;
 8003be4:	2229      	movs	r2, #41	; 0x29
 8003be6:	5c82      	ldrb	r2, [r0, r2]
 8003be8:	701a      	strb	r2, [r3, #0]
        data_ptr++;
 8003bea:	3301      	adds	r3, #1
    }

    if (packet->d7atp_ctrl.ctrl_te) {
 8003bec:	7f02      	ldrb	r2, [r0, #28]
 8003bee:	06d2      	lsls	r2, r2, #27
 8003bf0:	d503      	bpl.n	8003bfa <d7atp_assemble_packet_header+0x3e>
        (*data_ptr) = packet->d7atp_te;
 8003bf2:	222a      	movs	r2, #42	; 0x2a
 8003bf4:	5c82      	ldrb	r2, [r0, r2]
 8003bf6:	701a      	strb	r2, [r3, #0]
        data_ptr++;
 8003bf8:	3301      	adds	r3, #1
    }

    if (packet->d7atp_ctrl.ctrl_is_ack_requested && d7atp_state == D7ATP_STATE_MASTER_TRANSACTION_REQUEST_PERIOD) {
 8003bfa:	7f02      	ldrb	r2, [r0, #28]
 8003bfc:	0712      	lsls	r2, r2, #28
 8003bfe:	d503      	bpl.n	8003c08 <d7atp_assemble_packet_header+0x4c>
 8003c00:	4a0b      	ldr	r2, [pc, #44]	; (8003c30 <d7atp_assemble_packet_header+0x74>)
 8003c02:	7812      	ldrb	r2, [r2, #0]
 8003c04:	2a02      	cmp	r2, #2
 8003c06:	d007      	beq.n	8003c18 <d7atp_assemble_packet_header+0x5c>
    }

    //TODO check if at least one Responder has set the ACK_REQ flag
    //TODO aggregate the Device IDs of the Responders that set their ACK_REQ flags.
    // Provide the Responder or Requester ACK template when requested
    if (packet->d7atp_ctrl.ctrl_is_ack_requested && packet->d7atp_ctrl.ctrl_ack_not_void)
 8003c08:	7f04      	ldrb	r4, [r0, #28]
 8003c0a:	220c      	movs	r2, #12
 8003c0c:	4022      	ands	r2, r4
 8003c0e:	2a0c      	cmp	r2, #12
 8003c10:	d007      	beq.n	8003c22 <d7atp_assemble_packet_header+0x66>
        (*data_ptr) = packet->d7atp_transaction_id; data_ptr++; // transaction ID start
        (*data_ptr) = packet->d7atp_transaction_id; data_ptr++; // transaction ID stop
        // TODO ACK bitmap, support for multiple segments to ack not implemented yet
    }

    return data_ptr - d7atp_header_start;
 8003c12:	1a58      	subs	r0, r3, r1
 8003c14:	b2c0      	uxtb	r0, r0
}
 8003c16:	bd10      	pop	{r4, pc}
        (*data_ptr) = packet->d7atp_tc;
 8003c18:	3226      	adds	r2, #38	; 0x26
 8003c1a:	5c82      	ldrb	r2, [r0, r2]
 8003c1c:	701a      	strb	r2, [r3, #0]
        data_ptr++;
 8003c1e:	3301      	adds	r3, #1
 8003c20:	e7f2      	b.n	8003c08 <d7atp_assemble_packet_header+0x4c>
        (*data_ptr) = packet->d7atp_transaction_id; data_ptr++; // transaction ID start
 8003c22:	321b      	adds	r2, #27
 8003c24:	5c82      	ldrb	r2, [r0, r2]
 8003c26:	701a      	strb	r2, [r3, #0]
        (*data_ptr) = packet->d7atp_transaction_id; data_ptr++; // transaction ID stop
 8003c28:	705a      	strb	r2, [r3, #1]
 8003c2a:	3302      	adds	r3, #2
 8003c2c:	e7f1      	b.n	8003c12 <d7atp_assemble_packet_header+0x56>
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	20001a80 	.word	0x20001a80

08003c34 <d7atp_disassemble_packet_header>:

bool d7atp_disassemble_packet_header(packet_t *packet, uint8_t *data_idx)
{
 8003c34:	b510      	push	{r4, lr}
    if(packet->hw_radio_packet.length < (*data_idx + 3))
 8003c36:	780b      	ldrb	r3, [r1, #0]
 8003c38:	1c9c      	adds	r4, r3, #2
 8003c3a:	229a      	movs	r2, #154	; 0x9a
 8003c3c:	0052      	lsls	r2, r2, #1
 8003c3e:	5a82      	ldrh	r2, [r0, r2]
 8003c40:	4294      	cmp	r4, r2
 8003c42:	db00      	blt.n	8003c46 <d7atp_disassemble_packet_header+0x12>
 8003c44:	e093      	b.n	8003d6e <d7atp_disassemble_packet_header+0x13a>
    {
        return false;
    }
    packet->d7atp_ctrl.ctrl_raw = packet->hw_radio_packet.data[(*data_idx)]; (*data_idx)++;
 8003c46:	18c3      	adds	r3, r0, r3
 8003c48:	3337      	adds	r3, #55	; 0x37
 8003c4a:	33ff      	adds	r3, #255	; 0xff
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	7703      	strb	r3, [r0, #28]
 8003c50:	780b      	ldrb	r3, [r1, #0]
 8003c52:	3301      	adds	r3, #1
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	700b      	strb	r3, [r1, #0]
    packet->d7atp_dialog_id = packet->hw_radio_packet.data[(*data_idx)]; (*data_idx)++;
 8003c58:	18c3      	adds	r3, r0, r3
 8003c5a:	3337      	adds	r3, #55	; 0x37
 8003c5c:	33ff      	adds	r3, #255	; 0xff
 8003c5e:	781a      	ldrb	r2, [r3, #0]
 8003c60:	2326      	movs	r3, #38	; 0x26
 8003c62:	54c2      	strb	r2, [r0, r3]
 8003c64:	780b      	ldrb	r3, [r1, #0]
 8003c66:	3301      	adds	r3, #1
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	700b      	strb	r3, [r1, #0]
    packet->d7atp_transaction_id = packet->hw_radio_packet.data[(*data_idx)]; (*data_idx)++;
 8003c6c:	18c3      	adds	r3, r0, r3
 8003c6e:	3337      	adds	r3, #55	; 0x37
 8003c70:	33ff      	adds	r3, #255	; 0xff
 8003c72:	781a      	ldrb	r2, [r3, #0]
 8003c74:	2327      	movs	r3, #39	; 0x27
 8003c76:	54c2      	strb	r2, [r0, r3]
 8003c78:	780b      	ldrb	r3, [r1, #0]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	700b      	strb	r3, [r1, #0]
    if (packet->d7atp_ctrl.ctrl_agc) {
 8003c80:	7f02      	ldrb	r2, [r0, #28]
 8003c82:	07d2      	lsls	r2, r2, #31
 8003c84:	d50e      	bpl.n	8003ca4 <d7atp_disassemble_packet_header+0x70>
        if(packet->hw_radio_packet.length < (*data_idx + 1))
 8003c86:	229a      	movs	r2, #154	; 0x9a
 8003c88:	0052      	lsls	r2, r2, #1
 8003c8a:	5a82      	ldrh	r2, [r0, r2]
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	db00      	blt.n	8003c92 <d7atp_disassemble_packet_header+0x5e>
 8003c90:	e06f      	b.n	8003d72 <d7atp_disassemble_packet_header+0x13e>
        {
            return false;
        }
        packet->d7atp_target_rx_level_i = packet->hw_radio_packet.data[(*data_idx)];
 8003c92:	18c3      	adds	r3, r0, r3
 8003c94:	3337      	adds	r3, #55	; 0x37
 8003c96:	33ff      	adds	r3, #255	; 0xff
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	232b      	movs	r3, #43	; 0x2b
 8003c9c:	54c2      	strb	r2, [r0, r3]
        (*data_idx)++;
 8003c9e:	780b      	ldrb	r3, [r1, #0]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	700b      	strb	r3, [r1, #0]
    }

    if (packet->d7atp_ctrl.ctrl_tl) {
 8003ca4:	7f03      	ldrb	r3, [r0, #28]
 8003ca6:	069b      	lsls	r3, r3, #26
 8003ca8:	d50f      	bpl.n	8003cca <d7atp_disassemble_packet_header+0x96>
        if(packet->hw_radio_packet.length < (*data_idx + 1))
 8003caa:	780b      	ldrb	r3, [r1, #0]
 8003cac:	229a      	movs	r2, #154	; 0x9a
 8003cae:	0052      	lsls	r2, r2, #1
 8003cb0:	5a82      	ldrh	r2, [r0, r2]
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	da5f      	bge.n	8003d76 <d7atp_disassemble_packet_header+0x142>
        {
            return false;
        }
        packet->d7atp_tl = packet->hw_radio_packet.data[(*data_idx)];
 8003cb6:	18c3      	adds	r3, r0, r3
 8003cb8:	3337      	adds	r3, #55	; 0x37
 8003cba:	33ff      	adds	r3, #255	; 0xff
 8003cbc:	781a      	ldrb	r2, [r3, #0]
 8003cbe:	2329      	movs	r3, #41	; 0x29
 8003cc0:	54c2      	strb	r2, [r0, r3]
        (*data_idx)++;
 8003cc2:	780b      	ldrb	r3, [r1, #0]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	700b      	strb	r3, [r1, #0]
 8003cc8:	e002      	b.n	8003cd0 <d7atp_disassemble_packet_header+0x9c>
    }
    else
        packet->d7atp_tl = 0;
 8003cca:	2329      	movs	r3, #41	; 0x29
 8003ccc:	2200      	movs	r2, #0
 8003cce:	54c2      	strb	r2, [r0, r3]

    if (packet->d7atp_ctrl.ctrl_te) {
 8003cd0:	7f03      	ldrb	r3, [r0, #28]
 8003cd2:	06db      	lsls	r3, r3, #27
 8003cd4:	d50f      	bpl.n	8003cf6 <d7atp_disassemble_packet_header+0xc2>
        if(packet->hw_radio_packet.length < (*data_idx + 1))
 8003cd6:	780b      	ldrb	r3, [r1, #0]
 8003cd8:	229a      	movs	r2, #154	; 0x9a
 8003cda:	0052      	lsls	r2, r2, #1
 8003cdc:	5a82      	ldrh	r2, [r0, r2]
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	da4b      	bge.n	8003d7a <d7atp_disassemble_packet_header+0x146>
        {
            return false;
        }
        packet->d7atp_te = packet->hw_radio_packet.data[(*data_idx)];
 8003ce2:	18c3      	adds	r3, r0, r3
 8003ce4:	3337      	adds	r3, #55	; 0x37
 8003ce6:	33ff      	adds	r3, #255	; 0xff
 8003ce8:	781a      	ldrb	r2, [r3, #0]
 8003cea:	232a      	movs	r3, #42	; 0x2a
 8003cec:	54c2      	strb	r2, [r0, r3]
        (*data_idx)++;
 8003cee:	780b      	ldrb	r3, [r1, #0]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	700b      	strb	r3, [r1, #0]
 8003cf4:	e002      	b.n	8003cfc <d7atp_disassemble_packet_header+0xc8>
    }
    else
        packet->d7atp_te = 0;
 8003cf6:	232a      	movs	r3, #42	; 0x2a
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	54c2      	strb	r2, [r0, r3]

    if ((d7atp_state != D7ATP_STATE_MASTER_TRANSACTION_RESPONSE_PERIOD) && (packet->d7atp_ctrl.ctrl_is_ack_requested)) {
 8003cfc:	4b22      	ldr	r3, [pc, #136]	; (8003d88 <d7atp_disassemble_packet_header+0x154>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d011      	beq.n	8003d28 <d7atp_disassemble_packet_header+0xf4>
 8003d04:	7f03      	ldrb	r3, [r0, #28]
 8003d06:	071b      	lsls	r3, r3, #28
 8003d08:	d50e      	bpl.n	8003d28 <d7atp_disassemble_packet_header+0xf4>
        if(packet->hw_radio_packet.length < (*data_idx + 1))
 8003d0a:	780b      	ldrb	r3, [r1, #0]
 8003d0c:	229a      	movs	r2, #154	; 0x9a
 8003d0e:	0052      	lsls	r2, r2, #1
 8003d10:	5a82      	ldrh	r2, [r0, r2]
 8003d12:	4293      	cmp	r3, r2
 8003d14:	da33      	bge.n	8003d7e <d7atp_disassemble_packet_header+0x14a>
        {
            return false;
        }
        packet->d7atp_tc = packet->hw_radio_packet.data[(*data_idx)];
 8003d16:	18c3      	adds	r3, r0, r3
 8003d18:	3337      	adds	r3, #55	; 0x37
 8003d1a:	33ff      	adds	r3, #255	; 0xff
 8003d1c:	781a      	ldrb	r2, [r3, #0]
 8003d1e:	2328      	movs	r3, #40	; 0x28
 8003d20:	54c2      	strb	r2, [r0, r3]
        (*data_idx)++;
 8003d22:	780b      	ldrb	r3, [r1, #0]
 8003d24:	3301      	adds	r3, #1
 8003d26:	700b      	strb	r3, [r1, #0]
    }

    if (packet->d7atp_ctrl.ctrl_is_ack_requested && packet->d7atp_ctrl.ctrl_ack_not_void)
 8003d28:	7f02      	ldrb	r2, [r0, #28]
 8003d2a:	230c      	movs	r3, #12
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b0c      	cmp	r3, #12
 8003d30:	d001      	beq.n	8003d36 <d7atp_disassemble_packet_header+0x102>
        packet->d7atp_ack_template.ack_transaction_id_start = packet->hw_radio_packet.data[(*data_idx)]; (*data_idx)++;
        packet->d7atp_ack_template.ack_transaction_id_stop = packet->hw_radio_packet.data[(*data_idx)]; (*data_idx)++;
        // TODO ACK bitmap, support for multiple segments to ack not implemented yet
    }

    return true;
 8003d32:	2001      	movs	r0, #1
 8003d34:	e01c      	b.n	8003d70 <d7atp_disassemble_packet_header+0x13c>
        if(packet->hw_radio_packet.length < (*data_idx + 2))
 8003d36:	780b      	ldrb	r3, [r1, #0]
 8003d38:	1c5c      	adds	r4, r3, #1
 8003d3a:	229a      	movs	r2, #154	; 0x9a
 8003d3c:	0052      	lsls	r2, r2, #1
 8003d3e:	5a82      	ldrh	r2, [r0, r2]
 8003d40:	4294      	cmp	r4, r2
 8003d42:	da1e      	bge.n	8003d82 <d7atp_disassemble_packet_header+0x14e>
        packet->d7atp_ack_template.ack_transaction_id_start = packet->hw_radio_packet.data[(*data_idx)]; (*data_idx)++;
 8003d44:	18c3      	adds	r3, r0, r3
 8003d46:	3337      	adds	r3, #55	; 0x37
 8003d48:	33ff      	adds	r3, #255	; 0xff
 8003d4a:	781a      	ldrb	r2, [r3, #0]
 8003d4c:	2324      	movs	r3, #36	; 0x24
 8003d4e:	54c2      	strb	r2, [r0, r3]
 8003d50:	780b      	ldrb	r3, [r1, #0]
 8003d52:	3301      	adds	r3, #1
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	700b      	strb	r3, [r1, #0]
        packet->d7atp_ack_template.ack_transaction_id_stop = packet->hw_radio_packet.data[(*data_idx)]; (*data_idx)++;
 8003d58:	18c3      	adds	r3, r0, r3
 8003d5a:	3337      	adds	r3, #55	; 0x37
 8003d5c:	33ff      	adds	r3, #255	; 0xff
 8003d5e:	781a      	ldrb	r2, [r3, #0]
 8003d60:	2325      	movs	r3, #37	; 0x25
 8003d62:	54c2      	strb	r2, [r0, r3]
 8003d64:	780b      	ldrb	r3, [r1, #0]
 8003d66:	3301      	adds	r3, #1
 8003d68:	700b      	strb	r3, [r1, #0]
    return true;
 8003d6a:	2001      	movs	r0, #1
 8003d6c:	e000      	b.n	8003d70 <d7atp_disassemble_packet_header+0x13c>
        return false;
 8003d6e:	2000      	movs	r0, #0
}
 8003d70:	bd10      	pop	{r4, pc}
            return false;
 8003d72:	2000      	movs	r0, #0
 8003d74:	e7fc      	b.n	8003d70 <d7atp_disassemble_packet_header+0x13c>
            return false;
 8003d76:	2000      	movs	r0, #0
 8003d78:	e7fa      	b.n	8003d70 <d7atp_disassemble_packet_header+0x13c>
            return false;
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	e7f8      	b.n	8003d70 <d7atp_disassemble_packet_header+0x13c>
            return false;
 8003d7e:	2000      	movs	r0, #0
 8003d80:	e7f6      	b.n	8003d70 <d7atp_disassemble_packet_header+0x13c>
            return false;
 8003d82:	2000      	movs	r0, #0
 8003d84:	e7f4      	b.n	8003d70 <d7atp_disassemble_packet_header+0x13c>
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	20001a80 	.word	0x20001a80

08003d8c <d7atp_signal_packet_transmitted>:

void d7atp_signal_packet_transmitted(packet_t* packet)
{
 8003d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d8e:	46c6      	mov	lr, r8
 8003d90:	b500      	push	{lr}
 8003d92:	0004      	movs	r4, r0
    d7asp_signal_packet_transmitted(packet);
 8003d94:	f7ff fbc8 	bl	8003528 <d7asp_signal_packet_transmitted>

    if (d7atp_state == D7ATP_STATE_MASTER_TRANSACTION_REQUEST_PERIOD)
 8003d98:	4b52      	ldr	r3, [pc, #328]	; (8003ee4 <d7atp_signal_packet_transmitted+0x158>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d008      	beq.n	8003db2 <d7atp_signal_packet_transmitted+0x26>
        {
            current_transaction_id = NO_ACTIVE_REQUEST_ID;
            d7asp_signal_transaction_terminated();
        }
    }
    else if (d7atp_state == D7ATP_STATE_SLAVE_TRANSACTION_SENDING_RESPONSE)
 8003da0:	2b05      	cmp	r3, #5
 8003da2:	d100      	bne.n	8003da6 <d7atp_signal_packet_transmitted+0x1a>
 8003da4:	e087      	b.n	8003eb6 <d7atp_signal_packet_transmitted+0x12a>
            // no FG scan required after transaction, we can end dialog now
            d7anp_stop_foreground_scan();
            terminate_dialog();
        }
    }
    else if (d7atp_state == D7ATP_STATE_IDLE)
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d100      	bne.n	8003dac <d7atp_signal_packet_transmitted+0x20>
 8003daa:	e091      	b.n	8003ed0 <d7atp_signal_packet_transmitted+0x144>
        assert(!packet->d7atp_ctrl.ctrl_is_ack_requested); // can only occur in this case
}
 8003dac:	bc04      	pop	{r2}
 8003dae:	4690      	mov	r8, r2
 8003db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch_state(D7ATP_STATE_MASTER_TRANSACTION_RESPONSE_PERIOD);
 8003db2:	2003      	movs	r0, #3
 8003db4:	f7ff fc58 	bl	8003668 <switch_state>
        if (packet->d7atp_ctrl.ctrl_is_ack_requested)
 8003db8:	7f23      	ldrb	r3, [r4, #28]
 8003dba:	071b      	lsls	r3, r3, #28
 8003dbc:	d575      	bpl.n	8003eaa <d7atp_signal_packet_transmitted+0x11e>
            timer_tick_t Tc = CT_DECOMPRESS(packet->d7atp_tc);
 8003dbe:	2528      	movs	r5, #40	; 0x28
 8003dc0:	5d60      	ldrb	r0, [r4, r5]
 8003dc2:	0940      	lsrs	r0, r0, #5
 8003dc4:	f010 fcec 	bl	80147a0 <__aeabi_i2d>
 8003dc8:	0002      	movs	r2, r0
 8003dca:	000b      	movs	r3, r1
 8003dcc:	2000      	movs	r0, #0
 8003dce:	4946      	ldr	r1, [pc, #280]	; (8003ee8 <d7atp_signal_packet_transmitted+0x15c>)
 8003dd0:	f00d fddc 	bl	801198c <pow>
 8003dd4:	0006      	movs	r6, r0
 8003dd6:	000f      	movs	r7, r1
 8003dd8:	5d63      	ldrb	r3, [r4, r5]
 8003dda:	201f      	movs	r0, #31
 8003ddc:	4018      	ands	r0, r3
 8003dde:	f010 fcdf 	bl	80147a0 <__aeabi_i2d>
 8003de2:	0032      	movs	r2, r6
 8003de4:	003b      	movs	r3, r7
 8003de6:	f00f fe89 	bl	8013afc <__aeabi_dmul>
 8003dea:	f00e f8df 	bl	8011fac <__aeabi_d2uiz>
 8003dee:	0005      	movs	r5, r0
            if (packet->d7atp_ctrl.ctrl_te)
 8003df0:	7f23      	ldrb	r3, [r4, #28]
 8003df2:	06db      	lsls	r3, r3, #27
 8003df4:	d545      	bpl.n	8003e82 <d7atp_signal_packet_transmitted+0xf6>
                timer_tick_t Te = adjust_timeout_value(CT_DECOMPRESS(packet->d7atp_te), packet->hw_radio_packet.tx_meta.timestamp);
 8003df6:	232a      	movs	r3, #42	; 0x2a
 8003df8:	4698      	mov	r8, r3
 8003dfa:	5ce0      	ldrb	r0, [r4, r3]
 8003dfc:	0940      	lsrs	r0, r0, #5
 8003dfe:	f010 fccf 	bl	80147a0 <__aeabi_i2d>
 8003e02:	0002      	movs	r2, r0
 8003e04:	000b      	movs	r3, r1
 8003e06:	2000      	movs	r0, #0
 8003e08:	4937      	ldr	r1, [pc, #220]	; (8003ee8 <d7atp_signal_packet_transmitted+0x15c>)
 8003e0a:	f00d fdbf 	bl	801198c <pow>
 8003e0e:	0006      	movs	r6, r0
 8003e10:	000f      	movs	r7, r1
 8003e12:	4643      	mov	r3, r8
 8003e14:	5ce3      	ldrb	r3, [r4, r3]
 8003e16:	201f      	movs	r0, #31
 8003e18:	4018      	ands	r0, r3
 8003e1a:	f010 fcc1 	bl	80147a0 <__aeabi_i2d>
 8003e1e:	0032      	movs	r2, r6
 8003e20:	003b      	movs	r3, r7
 8003e22:	f00f fe6b 	bl	8013afc <__aeabi_dmul>
 8003e26:	2394      	movs	r3, #148	; 0x94
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	58e6      	ldr	r6, [r4, r3]
 8003e2c:	f00e f8be 	bl	8011fac <__aeabi_d2uiz>
 8003e30:	0031      	movs	r1, r6
 8003e32:	f7ff fd19 	bl	8003868 <adjust_timeout_value>
 8003e36:	1e06      	subs	r6, r0, #0
                if (Te)
 8003e38:	d12f      	bne.n	8003e9a <d7atp_signal_packet_transmitted+0x10e>
                    Tc += CT_DECOMPRESS(packet->d7atp_te);
 8003e3a:	232a      	movs	r3, #42	; 0x2a
 8003e3c:	4698      	mov	r8, r3
 8003e3e:	5ce0      	ldrb	r0, [r4, r3]
 8003e40:	0940      	lsrs	r0, r0, #5
 8003e42:	f010 fcad 	bl	80147a0 <__aeabi_i2d>
 8003e46:	0002      	movs	r2, r0
 8003e48:	000b      	movs	r3, r1
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	4926      	ldr	r1, [pc, #152]	; (8003ee8 <d7atp_signal_packet_transmitted+0x15c>)
 8003e4e:	f00d fd9d 	bl	801198c <pow>
 8003e52:	0006      	movs	r6, r0
 8003e54:	000f      	movs	r7, r1
 8003e56:	4643      	mov	r3, r8
 8003e58:	5ce3      	ldrb	r3, [r4, r3]
 8003e5a:	201f      	movs	r0, #31
 8003e5c:	4018      	ands	r0, r3
 8003e5e:	f010 fc9f 	bl	80147a0 <__aeabi_i2d>
 8003e62:	0032      	movs	r2, r6
 8003e64:	003b      	movs	r3, r7
 8003e66:	f00f fe49 	bl	8013afc <__aeabi_dmul>
 8003e6a:	0006      	movs	r6, r0
 8003e6c:	000f      	movs	r7, r1
 8003e6e:	0028      	movs	r0, r5
 8003e70:	f010 fcc6 	bl	8014800 <__aeabi_ui2d>
 8003e74:	0032      	movs	r2, r6
 8003e76:	003b      	movs	r3, r7
 8003e78:	f00e fed0 	bl	8012c1c <__aeabi_dadd>
 8003e7c:	f00e f896 	bl	8011fac <__aeabi_d2uiz>
 8003e80:	0005      	movs	r5, r0
            Tc = adjust_timeout_value( Tc, packet->hw_radio_packet.tx_meta.timestamp);
 8003e82:	2394      	movs	r3, #148	; 0x94
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	58e1      	ldr	r1, [r4, r3]
 8003e88:	0028      	movs	r0, r5
 8003e8a:	f7ff fced 	bl	8003868 <adjust_timeout_value>
            d7anp_set_foreground_scan_timeout(Tc + 2); // we include Tt here for now
 8003e8e:	3002      	adds	r0, #2
 8003e90:	f000 fb0e 	bl	80044b0 <d7anp_set_foreground_scan_timeout>
            d7anp_start_foreground_scan();
 8003e94:	f000 faf2 	bl	800447c <d7anp_start_foreground_scan>
 8003e98:	e788      	b.n	8003dac <d7atp_signal_packet_transmitted+0x20>
                    d7anp_set_foreground_scan_timeout(Tc + 2); // we include Tt here for now
 8003e9a:	1ca8      	adds	r0, r5, #2
 8003e9c:	f000 fb08 	bl	80044b0 <d7anp_set_foreground_scan_timeout>
                    d7atp_execution_delay_expired_timer.next_event = Te;
 8003ea0:	4812      	ldr	r0, [pc, #72]	; (8003eec <d7atp_signal_packet_transmitted+0x160>)
 8003ea2:	6046      	str	r6, [r0, #4]
                    timer_add_event(&d7atp_execution_delay_expired_timer);
 8003ea4:	f00c fcc6 	bl	8010834 <timer_add_event>
                    return;
 8003ea8:	e780      	b.n	8003dac <d7atp_signal_packet_transmitted+0x20>
            current_transaction_id = NO_ACTIVE_REQUEST_ID;
 8003eaa:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <d7atp_signal_packet_transmitted+0x164>)
 8003eac:	22ff      	movs	r2, #255	; 0xff
 8003eae:	701a      	strb	r2, [r3, #0]
            d7asp_signal_transaction_terminated();
 8003eb0:	f7ff fb88 	bl	80035c4 <d7asp_signal_transaction_terminated>
 8003eb4:	e77a      	b.n	8003dac <d7atp_signal_packet_transmitted+0x20>
        switch_state(D7ATP_STATE_SLAVE_TRANSACTION_RESPONSE_PERIOD);
 8003eb6:	2006      	movs	r0, #6
 8003eb8:	f7ff fbd6 	bl	8003668 <switch_state>
        if (stop_dialog_after_tx)
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <d7atp_signal_packet_transmitted+0x168>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d100      	bne.n	8003ec6 <d7atp_signal_packet_transmitted+0x13a>
 8003ec4:	e772      	b.n	8003dac <d7atp_signal_packet_transmitted+0x20>
            d7anp_stop_foreground_scan();
 8003ec6:	f000 fb0d 	bl	80044e4 <d7anp_stop_foreground_scan>
            terminate_dialog();
 8003eca:	f7ff fc37 	bl	800373c <terminate_dialog>
 8003ece:	e76d      	b.n	8003dac <d7atp_signal_packet_transmitted+0x20>
        assert(!packet->d7atp_ctrl.ctrl_is_ack_requested); // can only occur in this case
 8003ed0:	7f23      	ldrb	r3, [r4, #28]
 8003ed2:	071b      	lsls	r3, r3, #28
 8003ed4:	d400      	bmi.n	8003ed8 <d7atp_signal_packet_transmitted+0x14c>
 8003ed6:	e769      	b.n	8003dac <d7atp_signal_packet_transmitted+0x20>
 8003ed8:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <d7atp_signal_packet_transmitted+0x16c>)
 8003eda:	4a08      	ldr	r2, [pc, #32]	; (8003efc <d7atp_signal_packet_transmitted+0x170>)
 8003edc:	4908      	ldr	r1, [pc, #32]	; (8003f00 <d7atp_signal_packet_transmitted+0x174>)
 8003ede:	4809      	ldr	r0, [pc, #36]	; (8003f04 <d7atp_signal_packet_transmitted+0x178>)
 8003ee0:	f004 fb8e 	bl	8008600 <__assert_func>
 8003ee4:	20001a80 	.word	0x20001a80
 8003ee8:	40100000 	.word	0x40100000
 8003eec:	20001a84 	.word	0x20001a84
 8003ef0:	20001a7f 	.word	0x20001a7f
 8003ef4:	20001a81 	.word	0x20001a81
 8003ef8:	080180f4 	.word	0x080180f4
 8003efc:	080183d4 	.word	0x080183d4
 8003f00:	00000256 	.word	0x00000256
 8003f04:	08017e40 	.word	0x08017e40

08003f08 <d7atp_signal_transmission_failure>:

void d7atp_signal_transmission_failure()
{
 8003f08:	b510      	push	{r4, lr}
    assert((d7atp_state == D7ATP_STATE_MASTER_TRANSACTION_REQUEST_PERIOD) ||
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <d7atp_signal_transmission_failure+0x38>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d001      	beq.n	8003f16 <d7atp_signal_transmission_failure+0xe>
 8003f12:	2b05      	cmp	r3, #5
 8003f14:	d108      	bne.n	8003f28 <d7atp_signal_transmission_failure+0x20>
           (d7atp_state == D7ATP_STATE_SLAVE_TRANSACTION_SENDING_RESPONSE));

    DPRINT("CSMA-CA insertion failed, stopping transaction");

    if (d7atp_state == D7ATP_STATE_SLAVE_TRANSACTION_SENDING_RESPONSE && stop_dialog_after_tx)
 8003f16:	2b05      	cmp	r3, #5
 8003f18:	d103      	bne.n	8003f22 <d7atp_signal_transmission_failure+0x1a>
 8003f1a:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <d7atp_signal_transmission_failure+0x3c>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d108      	bne.n	8003f34 <d7atp_signal_transmission_failure+0x2c>
        d7anp_stop_foreground_scan();
        terminate_dialog();
        return;
    }

    d7asp_signal_transmission_failure();
 8003f22:	f7ff fb37 	bl	8003594 <d7asp_signal_transmission_failure>
}
 8003f26:	bd10      	pop	{r4, pc}
    assert((d7atp_state == D7ATP_STATE_MASTER_TRANSACTION_REQUEST_PERIOD) ||
 8003f28:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <d7atp_signal_transmission_failure+0x40>)
 8003f2a:	4a08      	ldr	r2, [pc, #32]	; (8003f4c <d7atp_signal_transmission_failure+0x44>)
 8003f2c:	4908      	ldr	r1, [pc, #32]	; (8003f50 <d7atp_signal_transmission_failure+0x48>)
 8003f2e:	4809      	ldr	r0, [pc, #36]	; (8003f54 <d7atp_signal_transmission_failure+0x4c>)
 8003f30:	f004 fb66 	bl	8008600 <__assert_func>
        d7anp_stop_foreground_scan();
 8003f34:	f000 fad6 	bl	80044e4 <d7anp_stop_foreground_scan>
        terminate_dialog();
 8003f38:	f7ff fc00 	bl	800373c <terminate_dialog>
        return;
 8003f3c:	e7f3      	b.n	8003f26 <d7atp_signal_transmission_failure+0x1e>
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	20001a80 	.word	0x20001a80
 8003f44:	20001a81 	.word	0x20001a81
 8003f48:	08018120 	.word	0x08018120
 8003f4c:	080183f4 	.word	0x080183f4
 8003f50:	0000025b 	.word	0x0000025b
 8003f54:	08017e40 	.word	0x08017e40

08003f58 <d7atp_process_received_packet>:

void d7atp_process_received_packet(packet_t* packet)
{
 8003f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f5a:	46c6      	mov	lr, r8
 8003f5c:	b500      	push	{lr}
 8003f5e:	0004      	movs	r4, r0
    bool extension = false;
    timer_tick_t Tc;

    assert(d7atp_state == D7ATP_STATE_MASTER_TRANSACTION_RESPONSE_PERIOD
 8003f60:	4bab      	ldr	r3, [pc, #684]	; (8004210 <d7atp_process_received_packet+0x2b8>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d003      	beq.n	8003f70 <d7atp_process_received_packet+0x18>
 8003f68:	2b06      	cmp	r3, #6
 8003f6a:	d001      	beq.n	8003f70 <d7atp_process_received_packet+0x18>
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d163      	bne.n	8004038 <d7atp_process_received_packet+0xe0>
           || d7atp_state == D7ATP_STATE_SLAVE_TRANSACTION_RESPONSE_PERIOD
           || d7atp_state == D7ATP_STATE_IDLE); // IDLE: when doing channel scanning outside of transaction

    // copy addressee from NP origin
    current_addressee.ctrl.id_type = packet->d7anp_ctrl.origin_id_type;
 8003f70:	79e3      	ldrb	r3, [r4, #7]
 8003f72:	069b      	lsls	r3, r3, #26
 8003f74:	4ea7      	ldr	r6, [pc, #668]	; (8004214 <d7atp_process_received_packet+0x2bc>)
 8003f76:	0f9b      	lsrs	r3, r3, #30
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	7832      	ldrb	r2, [r6, #0]
 8003f7c:	2130      	movs	r1, #48	; 0x30
 8003f7e:	438a      	bics	r2, r1
 8003f80:	4313      	orrs	r3, r2
 8003f82:	7033      	strb	r3, [r6, #0]
    current_addressee.access_class = packet->origin_access_class;
 8003f84:	7a23      	ldrb	r3, [r4, #8]
 8003f86:	7073      	strb	r3, [r6, #1]
    DPRINT("ORI AC=0x%02x", packet->origin_access_class);
    memcpy(current_addressee.id, packet->origin_access_id, 8);
 8003f88:	1cb0      	adds	r0, r6, #2
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	0021      	movs	r1, r4
 8003f8e:	3109      	adds	r1, #9
 8003f90:	f010 ff1e 	bl	8014dd0 <memcpy>
    packet->d7anp_addressee = &current_addressee;
 8003f94:	6226      	str	r6, [r4, #32]

    DPRINT("Recvd dialog %i trans id %i, curr %i - %i", packet->d7atp_dialog_id, packet->d7atp_transaction_id, current_dialog_id, current_transaction_id);

    if (packet->d7atp_tl)
 8003f96:	2329      	movs	r3, #41	; 0x29
 8003f98:	5ce0      	ldrb	r0, [r4, r3]
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d153      	bne.n	8004046 <d7atp_process_received_packet+0xee>
        current_Tl_received = CT_DECOMPRESS(packet->d7atp_tl);
    else
        current_Tl_received = 0;
 8003f9e:	4b9e      	ldr	r3, [pc, #632]	; (8004218 <d7atp_process_received_packet+0x2c0>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
    DPRINT("Tl=%i (CT) -> %i (Ti) ", packet->d7atp_tl, current_Tl_received);
    if (IS_IN_MASTER_TRANSACTION())
 8003fa4:	4b9a      	ldr	r3, [pc, #616]	; (8004210 <d7atp_process_received_packet+0x2b8>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	3b02      	subs	r3, #2
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d964      	bls.n	800407a <d7atp_process_received_packet+0x122>
    {
         /*
          * when participating in a Dialog, responder discards segments with Dialog ID
          * not matching the recorded Dialog ID
          */
        if ((current_dialog_id) && (current_dialog_id != packet->d7atp_dialog_id))
 8003fb0:	4b9a      	ldr	r3, [pc, #616]	; (800421c <d7atp_process_received_packet+0x2c4>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d004      	beq.n	8003fc2 <d7atp_process_received_packet+0x6a>
 8003fb8:	2226      	movs	r2, #38	; 0x26
 8003fba:	5ca2      	ldrb	r2, [r4, r2]
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d000      	beq.n	8003fc2 <d7atp_process_received_packet+0x6a>
 8003fc0:	e094      	b.n	80040ec <d7atp_process_received_packet+0x194>
            packet_queue_free_packet(packet);
            return;
        }

        // When not participating in a Dialog
        if ((!current_dialog_id) && (!packet->d7atp_ctrl.ctrl_is_start))
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <d7atp_process_received_packet+0x76>
 8003fc6:	7f23      	ldrb	r3, [r4, #28]
 8003fc8:	09db      	lsrs	r3, r3, #7
 8003fca:	d100      	bne.n	8003fce <d7atp_process_received_packet+0x76>
 8003fcc:	e095      	b.n	80040fa <d7atp_process_received_packet+0x1a2>
            packet_queue_free_packet(packet);
            return;
        }

         // The FG scan is only started when the response period expires.
        if (packet->d7atp_ctrl.ctrl_is_ack_requested)
 8003fce:	7f23      	ldrb	r3, [r4, #28]
 8003fd0:	071b      	lsls	r3, r3, #28
 8003fd2:	d400      	bmi.n	8003fd6 <d7atp_process_received_packet+0x7e>
 8003fd4:	e0cb      	b.n	800416e <d7atp_process_received_packet+0x216>
        {
            Tc = CT_DECOMPRESS(packet->d7atp_tc);
 8003fd6:	2528      	movs	r5, #40	; 0x28
 8003fd8:	5d60      	ldrb	r0, [r4, r5]
 8003fda:	0940      	lsrs	r0, r0, #5
 8003fdc:	f010 fbe0 	bl	80147a0 <__aeabi_i2d>
 8003fe0:	0002      	movs	r2, r0
 8003fe2:	000b      	movs	r3, r1
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	498e      	ldr	r1, [pc, #568]	; (8004220 <d7atp_process_received_packet+0x2c8>)
 8003fe8:	f00d fcd0 	bl	801198c <pow>
 8003fec:	0006      	movs	r6, r0
 8003fee:	000f      	movs	r7, r1
 8003ff0:	5d63      	ldrb	r3, [r4, r5]
 8003ff2:	201f      	movs	r0, #31
 8003ff4:	4018      	ands	r0, r3
 8003ff6:	f010 fbd3 	bl	80147a0 <__aeabi_i2d>
 8003ffa:	0032      	movs	r2, r6
 8003ffc:	003b      	movs	r3, r7
 8003ffe:	f00f fd7d 	bl	8013afc <__aeabi_dmul>
 8004002:	f00d ffd3 	bl	8011fac <__aeabi_d2uiz>
 8004006:	0005      	movs	r5, r0

            DPRINT("Tc=%i (CT) -> %i (Ti) ", packet->d7atp_tc, Tc);

            // extend Tc with Te
            if (packet->d7atp_ctrl.ctrl_te)
 8004008:	7f23      	ldrb	r3, [r4, #28]
 800400a:	06db      	lsls	r3, r3, #27
 800400c:	d500      	bpl.n	8004010 <d7atp_process_received_packet+0xb8>
 800400e:	e07b      	b.n	8004108 <d7atp_process_received_packet+0x1b0>
                Tc += CT_DECOMPRESS(packet->d7atp_te);

            // We choose to start the FG scan after the execution delay and the response period so Tl = Tl - Tc - Te
            if (current_Tl_received > Tc)
 8004010:	4b81      	ldr	r3, [pc, #516]	; (8004218 <d7atp_process_received_packet+0x2c0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	42ab      	cmp	r3, r5
 8004016:	d800      	bhi.n	800401a <d7atp_process_received_packet+0xc2>
 8004018:	e09b      	b.n	8004152 <d7atp_process_received_packet+0x1fa>
                current_Tl_received -= Tc;
 800401a:	1b5b      	subs	r3, r3, r5
 800401c:	4a7e      	ldr	r2, [pc, #504]	; (8004218 <d7atp_process_received_packet+0x2c0>)
 800401e:	6013      	str	r3, [r2, #0]
                // If there is no listen period, then we can end the dialog after the response transmission
                stop_dialog_after_tx = true;
            }


            Tc = adjust_timeout_value(Tc, packet->hw_radio_packet.rx_meta.timestamp);
 8004020:	2394      	movs	r3, #148	; 0x94
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	58e1      	ldr	r1, [r4, r3]
 8004026:	0028      	movs	r0, r5
 8004028:	f7ff fc1e 	bl	8003868 <adjust_timeout_value>
 800402c:	1e05      	subs	r5, r0, #0

            if (Tc == 0)
 800402e:	d100      	bne.n	8004032 <d7atp_process_received_packet+0xda>
 8004030:	e096      	b.n	8004160 <d7atp_process_received_packet+0x208>
                packet_queue_free_packet(packet);
                return;
            }

            /* stop eventually the FG scan and force the radio to go back to IDLE */
            d7anp_stop_foreground_scan();
 8004032:	f000 fa57 	bl	80044e4 <d7anp_stop_foreground_scan>
 8004036:	e0a4      	b.n	8004182 <d7atp_process_received_packet+0x22a>
    assert(d7atp_state == D7ATP_STATE_MASTER_TRANSACTION_RESPONSE_PERIOD
 8004038:	219c      	movs	r1, #156	; 0x9c
 800403a:	4b7a      	ldr	r3, [pc, #488]	; (8004224 <d7atp_process_received_packet+0x2cc>)
 800403c:	4a7a      	ldr	r2, [pc, #488]	; (8004228 <d7atp_process_received_packet+0x2d0>)
 800403e:	0089      	lsls	r1, r1, #2
 8004040:	487a      	ldr	r0, [pc, #488]	; (800422c <d7atp_process_received_packet+0x2d4>)
 8004042:	f004 fadd 	bl	8008600 <__assert_func>
        current_Tl_received = CT_DECOMPRESS(packet->d7atp_tl);
 8004046:	0940      	lsrs	r0, r0, #5
 8004048:	f010 fbaa 	bl	80147a0 <__aeabi_i2d>
 800404c:	0002      	movs	r2, r0
 800404e:	000b      	movs	r3, r1
 8004050:	2000      	movs	r0, #0
 8004052:	4973      	ldr	r1, [pc, #460]	; (8004220 <d7atp_process_received_packet+0x2c8>)
 8004054:	f00d fc9a 	bl	801198c <pow>
 8004058:	0006      	movs	r6, r0
 800405a:	000f      	movs	r7, r1
 800405c:	2329      	movs	r3, #41	; 0x29
 800405e:	5ce3      	ldrb	r3, [r4, r3]
 8004060:	201f      	movs	r0, #31
 8004062:	4018      	ands	r0, r3
 8004064:	f010 fb9c 	bl	80147a0 <__aeabi_i2d>
 8004068:	0032      	movs	r2, r6
 800406a:	003b      	movs	r3, r7
 800406c:	f00f fd46 	bl	8013afc <__aeabi_dmul>
 8004070:	f00d ff9c 	bl	8011fac <__aeabi_d2uiz>
 8004074:	4b68      	ldr	r3, [pc, #416]	; (8004218 <d7atp_process_received_packet+0x2c0>)
 8004076:	6018      	str	r0, [r3, #0]
 8004078:	e794      	b.n	8003fa4 <d7atp_process_received_packet+0x4c>
        if (packet->d7atp_dialog_id != current_dialog_id || packet->d7atp_transaction_id != current_transaction_id)
 800407a:	2326      	movs	r3, #38	; 0x26
 800407c:	5ce2      	ldrb	r2, [r4, r3]
 800407e:	4b67      	ldr	r3, [pc, #412]	; (800421c <d7atp_process_received_packet+0x2c4>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d105      	bne.n	8004092 <d7atp_process_received_packet+0x13a>
 8004086:	2327      	movs	r3, #39	; 0x27
 8004088:	5ce2      	ldrb	r2, [r4, r3]
 800408a:	4b69      	ldr	r3, [pc, #420]	; (8004230 <d7atp_process_received_packet+0x2d8>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d005      	beq.n	800409e <d7atp_process_received_packet+0x146>
            packet_queue_free_packet(packet);
 8004092:	0020      	movs	r0, r4
 8004094:	f001 f990 	bl	80053b8 <packet_queue_free_packet>
            }
        }
        else if (current_Tl_received == 0)
            terminate_dialog();
    }
}
 8004098:	bc04      	pop	{r2}
 800409a:	4690      	mov	r8, r2
 800409c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (packet->d7atp_ctrl.ctrl_is_start)
 800409e:	231c      	movs	r3, #28
 80040a0:	56e3      	ldrsb	r3, [r4, r3]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	da20      	bge.n	80040e8 <d7atp_process_received_packet+0x190>
            if (!ID_TYPE_IS_BROADCAST(packet->dll_header.control_target_id_type))
 80040a6:	79a3      	ldrb	r3, [r4, #6]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d916      	bls.n	80040da <d7atp_process_received_packet+0x182>
                current_Tl_received = adjust_timeout_value(current_Tl_received, packet->hw_radio_packet.rx_meta.timestamp);
 80040ac:	2394      	movs	r3, #148	; 0x94
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	58e1      	ldr	r1, [r4, r3]
 80040b2:	4d59      	ldr	r5, [pc, #356]	; (8004218 <d7atp_process_received_packet+0x2c0>)
 80040b4:	6828      	ldr	r0, [r5, #0]
 80040b6:	f7ff fbd7 	bl	8003868 <adjust_timeout_value>
 80040ba:	6028      	str	r0, [r5, #0]
                d7anp_set_foreground_scan_timeout(current_Tl_received);
 80040bc:	f000 f9f8 	bl	80044b0 <d7anp_set_foreground_scan_timeout>
                d7anp_start_foreground_scan();
 80040c0:	f000 f9dc 	bl	800447c <d7anp_start_foreground_scan>
                current_dialog_id = 0;
 80040c4:	4b55      	ldr	r3, [pc, #340]	; (800421c <d7atp_process_received_packet+0x2c4>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
                switch_state(D7ATP_STATE_IDLE);
 80040ca:	2001      	movs	r0, #1
 80040cc:	f7ff facc 	bl	8003668 <switch_state>
                extension = true;
 80040d0:	2101      	movs	r1, #1
        d7asp_process_received_response(packet, extension);
 80040d2:	0020      	movs	r0, r4
 80040d4:	f7ff f80a 	bl	80030ec <d7asp_process_received_response>
 80040d8:	e7de      	b.n	8004098 <d7atp_process_received_packet+0x140>
                log_print_error_string("Start dialog not allowed when in master transaction state, skipping segment");
 80040da:	4856      	ldr	r0, [pc, #344]	; (8004234 <d7atp_process_received_packet+0x2dc>)
 80040dc:	f00a ff80 	bl	800efe0 <log_print_error_string>
                packet_queue_free_packet(packet);
 80040e0:	0020      	movs	r0, r4
 80040e2:	f001 f969 	bl	80053b8 <packet_queue_free_packet>
                return;
 80040e6:	e7d7      	b.n	8004098 <d7atp_process_received_packet+0x140>
    bool extension = false;
 80040e8:	2100      	movs	r1, #0
 80040ea:	e7f2      	b.n	80040d2 <d7atp_process_received_packet+0x17a>
            log_print_error_string("Filtered frame with Dialog ID not matching the recorded Dialog ID");
 80040ec:	4852      	ldr	r0, [pc, #328]	; (8004238 <d7atp_process_received_packet+0x2e0>)
 80040ee:	f00a ff77 	bl	800efe0 <log_print_error_string>
            packet_queue_free_packet(packet);
 80040f2:	0020      	movs	r0, r4
 80040f4:	f001 f960 	bl	80053b8 <packet_queue_free_packet>
            return;
 80040f8:	e7ce      	b.n	8004098 <d7atp_process_received_packet+0x140>
            log_print_error_string("Filtered frame with START cleared");
 80040fa:	4850      	ldr	r0, [pc, #320]	; (800423c <d7atp_process_received_packet+0x2e4>)
 80040fc:	f00a ff70 	bl	800efe0 <log_print_error_string>
            packet_queue_free_packet(packet);
 8004100:	0020      	movs	r0, r4
 8004102:	f001 f959 	bl	80053b8 <packet_queue_free_packet>
            return;
 8004106:	e7c7      	b.n	8004098 <d7atp_process_received_packet+0x140>
                Tc += CT_DECOMPRESS(packet->d7atp_te);
 8004108:	232a      	movs	r3, #42	; 0x2a
 800410a:	4698      	mov	r8, r3
 800410c:	5ce0      	ldrb	r0, [r4, r3]
 800410e:	0940      	lsrs	r0, r0, #5
 8004110:	f010 fb46 	bl	80147a0 <__aeabi_i2d>
 8004114:	0002      	movs	r2, r0
 8004116:	000b      	movs	r3, r1
 8004118:	2000      	movs	r0, #0
 800411a:	4941      	ldr	r1, [pc, #260]	; (8004220 <d7atp_process_received_packet+0x2c8>)
 800411c:	f00d fc36 	bl	801198c <pow>
 8004120:	0006      	movs	r6, r0
 8004122:	000f      	movs	r7, r1
 8004124:	4643      	mov	r3, r8
 8004126:	5ce3      	ldrb	r3, [r4, r3]
 8004128:	201f      	movs	r0, #31
 800412a:	4018      	ands	r0, r3
 800412c:	f010 fb38 	bl	80147a0 <__aeabi_i2d>
 8004130:	0032      	movs	r2, r6
 8004132:	003b      	movs	r3, r7
 8004134:	f00f fce2 	bl	8013afc <__aeabi_dmul>
 8004138:	0006      	movs	r6, r0
 800413a:	000f      	movs	r7, r1
 800413c:	0028      	movs	r0, r5
 800413e:	f010 fb5f 	bl	8014800 <__aeabi_ui2d>
 8004142:	0032      	movs	r2, r6
 8004144:	003b      	movs	r3, r7
 8004146:	f00e fd69 	bl	8012c1c <__aeabi_dadd>
 800414a:	f00d ff2f 	bl	8011fac <__aeabi_d2uiz>
 800414e:	0005      	movs	r5, r0
 8004150:	e75e      	b.n	8004010 <d7atp_process_received_packet+0xb8>
                current_Tl_received = 0;
 8004152:	4b31      	ldr	r3, [pc, #196]	; (8004218 <d7atp_process_received_packet+0x2c0>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
                stop_dialog_after_tx = true;
 8004158:	4b39      	ldr	r3, [pc, #228]	; (8004240 <d7atp_process_received_packet+0x2e8>)
 800415a:	3201      	adds	r2, #1
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	e75f      	b.n	8004020 <d7atp_process_received_packet+0xc8>
                log_print_error_string("Discard the request since the response period is expired");
 8004160:	4838      	ldr	r0, [pc, #224]	; (8004244 <d7atp_process_received_packet+0x2ec>)
 8004162:	f00a ff3d 	bl	800efe0 <log_print_error_string>
                packet_queue_free_packet(packet);
 8004166:	0020      	movs	r0, r4
 8004168:	f001 f926 	bl	80053b8 <packet_queue_free_packet>
                return;
 800416c:	e794      	b.n	8004098 <d7atp_process_received_packet+0x140>
            current_Tl_received = adjust_timeout_value(current_Tl_received, packet->hw_radio_packet.rx_meta.timestamp);
 800416e:	2394      	movs	r3, #148	; 0x94
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	58e1      	ldr	r1, [r4, r3]
 8004174:	4e28      	ldr	r6, [pc, #160]	; (8004218 <d7atp_process_received_packet+0x2c0>)
 8004176:	6830      	ldr	r0, [r6, #0]
 8004178:	f7ff fb76 	bl	8003868 <adjust_timeout_value>
 800417c:	6030      	str	r0, [r6, #0]
            if (current_Tl_received > 0)
 800417e:	2800      	cmp	r0, #0
 8004180:	d127      	bne.n	80041d2 <d7atp_process_received_packet+0x27a>
        switch_state(D7ATP_STATE_SLAVE_TRANSACTION_RECEIVED_REQUEST);
 8004182:	2004      	movs	r0, #4
 8004184:	f7ff fa70 	bl	8003668 <switch_state>
        current_dialog_id = packet->d7atp_dialog_id;
 8004188:	2326      	movs	r3, #38	; 0x26
 800418a:	5ce2      	ldrb	r2, [r4, r3]
 800418c:	4b23      	ldr	r3, [pc, #140]	; (800421c <d7atp_process_received_packet+0x2c4>)
 800418e:	701a      	strb	r2, [r3, #0]
        current_transaction_id = packet->d7atp_transaction_id;
 8004190:	2327      	movs	r3, #39	; 0x27
 8004192:	5ce2      	ldrb	r2, [r4, r3]
 8004194:	4b26      	ldr	r3, [pc, #152]	; (8004230 <d7atp_process_received_packet+0x2d8>)
 8004196:	701a      	strb	r2, [r3, #0]
        packet->request_received_timestamp = packet->hw_radio_packet.rx_meta.timestamp;
 8004198:	2394      	movs	r3, #148	; 0x94
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	58e3      	ldr	r3, [r4, r3]
 800419e:	6023      	str	r3, [r4, #0]
        if (current_access_class != current_addressee.access_class)
 80041a0:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <d7atp_process_received_packet+0x2bc>)
 80041a2:	785a      	ldrb	r2, [r3, #1]
 80041a4:	4b28      	ldr	r3, [pc, #160]	; (8004248 <d7atp_process_received_packet+0x2f0>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d117      	bne.n	80041dc <d7atp_process_received_packet+0x284>
        bool response_payload_expected = d7asp_process_received_packet(packet);
 80041ac:	0020      	movs	r0, r4
 80041ae:	f7ff f8c1 	bl	8003334 <d7asp_process_received_packet>
        if (packet->d7atp_ctrl.ctrl_is_ack_requested)
 80041b2:	7f23      	ldrb	r3, [r4, #28]
 80041b4:	071b      	lsls	r3, r3, #28
 80041b6:	d522      	bpl.n	80041fe <d7atp_process_received_packet+0x2a6>
            if (response_payload_expected)
 80041b8:	2800      	cmp	r0, #0
 80041ba:	d118      	bne.n	80041ee <d7atp_process_received_packet+0x296>
                if (current_Tl_received)
 80041bc:	4b16      	ldr	r3, [pc, #88]	; (8004218 <d7atp_process_received_packet+0x2c0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d118      	bne.n	80041f6 <d7atp_process_received_packet+0x29e>
                packet->payload_length = 0;
 80041c4:	2332      	movs	r3, #50	; 0x32
 80041c6:	2200      	movs	r2, #0
 80041c8:	54e2      	strb	r2, [r4, r3]
                d7atp_send_response(packet);
 80041ca:	0020      	movs	r0, r4
 80041cc:	f7ff fcc4 	bl	8003b58 <d7atp_send_response>
 80041d0:	e762      	b.n	8004098 <d7atp_process_received_packet+0x140>
                d7anp_set_foreground_scan_timeout(current_Tl_received);
 80041d2:	f000 f96d 	bl	80044b0 <d7anp_set_foreground_scan_timeout>
                d7anp_start_foreground_scan();
 80041d6:	f000 f951 	bl	800447c <d7anp_start_foreground_scan>
 80041da:	e7d2      	b.n	8004182 <d7atp_process_received_packet+0x22a>
            d7ap_fs_read_access_class(current_addressee.access_specifier, &active_addressee_access_profile);
 80041dc:	4e0d      	ldr	r6, [pc, #52]	; (8004214 <d7atp_process_received_packet+0x2bc>)
 80041de:	0910      	lsrs	r0, r2, #4
 80041e0:	491a      	ldr	r1, [pc, #104]	; (800424c <d7atp_process_received_packet+0x2f4>)
 80041e2:	f003 fdfd 	bl	8007de0 <d7ap_fs_read_access_class>
            current_access_class = current_addressee.access_class;
 80041e6:	7872      	ldrb	r2, [r6, #1]
 80041e8:	4b17      	ldr	r3, [pc, #92]	; (8004248 <d7atp_process_received_packet+0x2f0>)
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	e7de      	b.n	80041ac <d7atp_process_received_packet+0x254>
                schedule_response_period_timeout_handler(Tc);
 80041ee:	0028      	movs	r0, r5
 80041f0:	f7ff fb22 	bl	8003838 <schedule_response_period_timeout_handler>
 80041f4:	e750      	b.n	8004098 <d7atp_process_received_packet+0x140>
                    schedule_response_period_timeout_handler(Tc);
 80041f6:	0028      	movs	r0, r5
 80041f8:	f7ff fb1e 	bl	8003838 <schedule_response_period_timeout_handler>
 80041fc:	e7e2      	b.n	80041c4 <d7atp_process_received_packet+0x26c>
        else if (current_Tl_received == 0)
 80041fe:	4b06      	ldr	r3, [pc, #24]	; (8004218 <d7atp_process_received_packet+0x2c0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d000      	beq.n	8004208 <d7atp_process_received_packet+0x2b0>
 8004206:	e747      	b.n	8004098 <d7atp_process_received_packet+0x140>
            terminate_dialog();
 8004208:	f7ff fa98 	bl	800373c <terminate_dialog>
 800420c:	e744      	b.n	8004098 <d7atp_process_received_packet+0x140>
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	20001a80 	.word	0x20001a80
 8004214:	20001a74 	.word	0x20001a74
 8004218:	20001a6c 	.word	0x20001a6c
 800421c:	20001a7e 	.word	0x20001a7e
 8004220:	40100000 	.word	0x40100000
 8004224:	080181a4 	.word	0x080181a4
 8004228:	08018418 	.word	0x08018418
 800422c:	08017e40 	.word	0x08017e40
 8004230:	20001a7f 	.word	0x20001a7f
 8004234:	08018248 	.word	0x08018248
 8004238:	08018294 	.word	0x08018294
 800423c:	080182d8 	.word	0x080182d8
 8004240:	20001a81 	.word	0x20001a81
 8004244:	080182fc 	.word	0x080182fc
 8004248:	20001a70 	.word	0x20001a70
 800424c:	20001a28 	.word	0x20001a28

08004250 <schedule_foreground_scan_expired_timer>:
    fg_scan_timeout_ticks = 0;
    d7atp_signal_foreground_scan_expired();
}

static void schedule_foreground_scan_expired_timer()
{
 8004250:	b510      	push	{r4, lr}
    // TODO in case of responder timeout_ticks counts from reception time , so subtract time passed between now and reception time
    // in case of requester timeout_ticks counts from transmission time, so subtract time passed between now and transmission time
    // since this FG scan is started directly from the ISR (transmitted callback), I don't expect a significative delta between now and the transmission time

    DPRINT("starting foreground scan expiration timer (%i ticks, now %i)", fg_scan_timeout_ticks, timer_get_counter_value());
    d7anp_fg_scan_expired_timer.next_event = fg_scan_timeout_ticks;
 8004252:	4807      	ldr	r0, [pc, #28]	; (8004270 <schedule_foreground_scan_expired_timer+0x20>)
 8004254:	4b07      	ldr	r3, [pc, #28]	; (8004274 <schedule_foreground_scan_expired_timer+0x24>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6043      	str	r3, [r0, #4]
    error_t rtc = timer_add_event(&d7anp_fg_scan_expired_timer);
 800425a:	f00c faeb 	bl	8010834 <timer_add_event>
    assert(rtc == SUCCESS);
 800425e:	2800      	cmp	r0, #0
 8004260:	d100      	bne.n	8004264 <schedule_foreground_scan_expired_timer+0x14>
}
 8004262:	bd10      	pop	{r4, pc}
    assert(rtc == SUCCESS);
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <schedule_foreground_scan_expired_timer+0x28>)
 8004266:	4a05      	ldr	r2, [pc, #20]	; (800427c <schedule_foreground_scan_expired_timer+0x2c>)
 8004268:	21a1      	movs	r1, #161	; 0xa1
 800426a:	4805      	ldr	r0, [pc, #20]	; (8004280 <schedule_foreground_scan_expired_timer+0x30>)
 800426c:	f004 f9c8 	bl	8008600 <__assert_func>
 8004270:	20001bd0 	.word	0x20001bd0
 8004274:	20001ab0 	.word	0x20001ab0
 8004278:	08017738 	.word	0x08017738
 800427c:	080186c0 	.word	0x080186c0
 8004280:	08018438 	.word	0x08018438

08004284 <schedule_foreground_scan_after_D7AAdvP>:
    dll_tx_frame(packet);
    return SUCCESS;
}

static void schedule_foreground_scan_after_D7AAdvP(timer_tick_t eta)
{
 8004284:	b510      	push	{r4, lr}
    DPRINT("Perform a dll foreground scan at the end of the delay period (%i ticks)", eta);
    d7anp_start_fg_scan_after_d7aadvp_timer.next_event = eta;
 8004286:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <schedule_foreground_scan_after_D7AAdvP+0x20>)
 8004288:	6058      	str	r0, [r3, #4]
    error_t rtc = timer_add_event(&d7anp_start_fg_scan_after_d7aadvp_timer);
 800428a:	0018      	movs	r0, r3
 800428c:	f00c fad2 	bl	8010834 <timer_add_event>
    assert(rtc == SUCCESS);
 8004290:	2800      	cmp	r0, #0
 8004292:	d100      	bne.n	8004296 <schedule_foreground_scan_after_D7AAdvP+0x12>
}
 8004294:	bd10      	pop	{r4, pc}
    assert(rtc == SUCCESS);
 8004296:	2154      	movs	r1, #84	; 0x54
 8004298:	4b03      	ldr	r3, [pc, #12]	; (80042a8 <schedule_foreground_scan_after_D7AAdvP+0x24>)
 800429a:	4a04      	ldr	r2, [pc, #16]	; (80042ac <schedule_foreground_scan_after_D7AAdvP+0x28>)
 800429c:	31ff      	adds	r1, #255	; 0xff
 800429e:	4804      	ldr	r0, [pc, #16]	; (80042b0 <schedule_foreground_scan_after_D7AAdvP+0x2c>)
 80042a0:	f004 f9ae 	bl	8008600 <__assert_func>
 80042a4:	20001be4 	.word	0x20001be4
 80042a8:	08017738 	.word	0x08017738
 80042ac:	0801873c 	.word	0x0801873c
 80042b0:	08018438 	.word	0x08018438

080042b4 <switch_state>:
{
 80042b4:	b510      	push	{r4, lr}
    switch(next_state)
 80042b6:	2802      	cmp	r0, #2
 80042b8:	d00b      	beq.n	80042d2 <switch_state+0x1e>
 80042ba:	2803      	cmp	r0, #3
 80042bc:	d027      	beq.n	800430e <switch_state+0x5a>
 80042be:	2801      	cmp	r0, #1
 80042c0:	d016      	beq.n	80042f0 <switch_state+0x3c>
    d7anp_state == D7ANP_STATE_FOREGROUND_SCAN? DEBUG_PIN_SET(3) : DEBUG_PIN_CLR(3);
 80042c2:	4b1c      	ldr	r3, [pc, #112]	; (8004334 <switch_state+0x80>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d030      	beq.n	800432c <switch_state+0x78>
 80042ca:	2003      	movs	r0, #3
 80042cc:	f004 f990 	bl	80085f0 <hw_debug_clr>
}
 80042d0:	bd10      	pop	{r4, pc}
          assert(d7anp_state == D7ANP_STATE_IDLE ||
 80042d2:	4b18      	ldr	r3, [pc, #96]	; (8004334 <switch_state+0x80>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d001      	beq.n	80042de <switch_state+0x2a>
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d102      	bne.n	80042e4 <switch_state+0x30>
          d7anp_state = next_state;
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <switch_state+0x80>)
 80042e0:	7018      	strb	r0, [r3, #0]
          break;
 80042e2:	e7ee      	b.n	80042c2 <switch_state+0xe>
          assert(d7anp_state == D7ANP_STATE_IDLE ||
 80042e4:	4b14      	ldr	r3, [pc, #80]	; (8004338 <switch_state+0x84>)
 80042e6:	4a15      	ldr	r2, [pc, #84]	; (800433c <switch_state+0x88>)
 80042e8:	2170      	movs	r1, #112	; 0x70
 80042ea:	4815      	ldr	r0, [pc, #84]	; (8004340 <switch_state+0x8c>)
 80042ec:	f004 f988 	bl	8008600 <__assert_func>
          assert(d7anp_state == D7ANP_STATE_TRANSMIT ||
 80042f0:	4b10      	ldr	r3, [pc, #64]	; (8004334 <switch_state+0x80>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	3b02      	subs	r3, #2
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d802      	bhi.n	8004302 <switch_state+0x4e>
          d7anp_state = next_state;
 80042fc:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <switch_state+0x80>)
 80042fe:	7018      	strb	r0, [r3, #0]
          break;
 8004300:	e7df      	b.n	80042c2 <switch_state+0xe>
          assert(d7anp_state == D7ANP_STATE_TRANSMIT ||
 8004302:	4b10      	ldr	r3, [pc, #64]	; (8004344 <switch_state+0x90>)
 8004304:	4a0d      	ldr	r2, [pc, #52]	; (800433c <switch_state+0x88>)
 8004306:	2176      	movs	r1, #118	; 0x76
 8004308:	480d      	ldr	r0, [pc, #52]	; (8004340 <switch_state+0x8c>)
 800430a:	f004 f979 	bl	8008600 <__assert_func>
          assert(d7anp_state == D7ANP_STATE_TRANSMIT ||
 800430e:	4b09      	ldr	r3, [pc, #36]	; (8004334 <switch_state+0x80>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	3b01      	subs	r3, #1
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b01      	cmp	r3, #1
 8004318:	d802      	bhi.n	8004320 <switch_state+0x6c>
          d7anp_state = next_state;
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <switch_state+0x80>)
 800431c:	7018      	strb	r0, [r3, #0]
          break;
 800431e:	e7d0      	b.n	80042c2 <switch_state+0xe>
          assert(d7anp_state == D7ANP_STATE_TRANSMIT ||
 8004320:	4b09      	ldr	r3, [pc, #36]	; (8004348 <switch_state+0x94>)
 8004322:	4a06      	ldr	r2, [pc, #24]	; (800433c <switch_state+0x88>)
 8004324:	217c      	movs	r1, #124	; 0x7c
 8004326:	4806      	ldr	r0, [pc, #24]	; (8004340 <switch_state+0x8c>)
 8004328:	f004 f96a 	bl	8008600 <__assert_func>
    d7anp_state == D7ANP_STATE_FOREGROUND_SCAN? DEBUG_PIN_SET(3) : DEBUG_PIN_CLR(3);
 800432c:	2003      	movs	r0, #3
 800432e:	f004 f95e 	bl	80085ee <hw_debug_set>
 8004332:	e7cd      	b.n	80042d0 <switch_state+0x1c>
 8004334:	20001aad 	.word	0x20001aad
 8004338:	0801846c 	.word	0x0801846c
 800433c:	08018698 	.word	0x08018698
 8004340:	08018438 	.word	0x08018438
 8004344:	080184bc 	.word	0x080184bc
 8004348:	08018510 	.word	0x08018510

0800434c <cancel_foreground_scan_task>:
{
 800434c:	b510      	push	{r4, lr}
    timer_cancel_event(&d7anp_fg_scan_expired_timer);
 800434e:	4803      	ldr	r0, [pc, #12]	; (800435c <cancel_foreground_scan_task+0x10>)
 8004350:	f00c fab0 	bl	80108b4 <timer_cancel_event>
    fg_scan_timeout_ticks = 0;
 8004354:	4b02      	ldr	r3, [pc, #8]	; (8004360 <cancel_foreground_scan_task+0x14>)
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
}
 800435a:	bd10      	pop	{r4, pc}
 800435c:	20001bd0 	.word	0x20001bd0
 8004360:	20001ab0 	.word	0x20001ab0

08004364 <d7anp_set_address_id>:
{
 8004364:	b510      	push	{r4, lr}
    d7ap_fs_read_uid(address_id);
 8004366:	4802      	ldr	r0, [pc, #8]	; (8004370 <d7anp_set_address_id+0xc>)
 8004368:	f003 fce4 	bl	8007d34 <d7ap_fs_read_uid>
}
 800436c:	bd10      	pop	{r4, pc}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	20001bc4 	.word	0x20001bc4

08004374 <foreground_scan_expired>:
{
 8004374:	b510      	push	{r4, lr}
    assert(d7anp_state == D7ANP_STATE_FOREGROUND_SCAN || d7anp_state == D7ANP_STATE_TRANSMIT);
 8004376:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <foreground_scan_expired+0x38>)
 8004378:	781a      	ldrb	r2, [r3, #0]
 800437a:	1e93      	subs	r3, r2, #2
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b01      	cmp	r3, #1
 8004380:	d809      	bhi.n	8004396 <foreground_scan_expired+0x22>
    if (d7anp_state == D7ANP_STATE_FOREGROUND_SCAN) // when in D7ANP_STATE_TRANSMIT d7anp_signal_packet_transmitted() will switch state
 8004382:	2a03      	cmp	r2, #3
 8004384:	d00d      	beq.n	80043a2 <foreground_scan_expired+0x2e>
    dll_stop_foreground_scan();
 8004386:	f002 faa7 	bl	80068d8 <dll_stop_foreground_scan>
    fg_scan_timeout_ticks = 0;
 800438a:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <foreground_scan_expired+0x3c>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
    d7atp_signal_foreground_scan_expired();
 8004390:	f7ff fa78 	bl	8003884 <d7atp_signal_foreground_scan_expired>
}
 8004394:	bd10      	pop	{r4, pc}
    assert(d7anp_state == D7ANP_STATE_FOREGROUND_SCAN || d7anp_state == D7ANP_STATE_TRANSMIT);
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <foreground_scan_expired+0x40>)
 8004398:	4a07      	ldr	r2, [pc, #28]	; (80043b8 <foreground_scan_expired+0x44>)
 800439a:	218d      	movs	r1, #141	; 0x8d
 800439c:	4807      	ldr	r0, [pc, #28]	; (80043bc <foreground_scan_expired+0x48>)
 800439e:	f004 f92f 	bl	8008600 <__assert_func>
      switch_state(D7ANP_STATE_IDLE);
 80043a2:	2001      	movs	r0, #1
 80043a4:	f7ff ff86 	bl	80042b4 <switch_state>
 80043a8:	e7ed      	b.n	8004386 <foreground_scan_expired+0x12>
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	20001aad 	.word	0x20001aad
 80043b0:	20001ab0 	.word	0x20001ab0
 80043b4:	08018558 	.word	0x08018558
 80043b8:	080186a8 	.word	0x080186a8
 80043bc:	08018438 	.word	0x08018438

080043c0 <set_key>:
{
 80043c0:	b500      	push	{lr}
 80043c2:	b085      	sub	sp, #20
    assert(d7ap_fs_read_nwl_security_key(key) == SUCCESS);
 80043c4:	4668      	mov	r0, sp
 80043c6:	f003 fcc3 	bl	8007d50 <d7ap_fs_read_nwl_security_key>
 80043ca:	2800      	cmp	r0, #0
 80043cc:	d104      	bne.n	80043d8 <set_key+0x18>
    AES128_init(key);
 80043ce:	4668      	mov	r0, sp
 80043d0:	f009 fc8a 	bl	800dce8 <AES128_init>
}
 80043d4:	b005      	add	sp, #20
 80043d6:	bd00      	pop	{pc}
    assert(d7ap_fs_read_nwl_security_key(key) == SUCCESS);
 80043d8:	4b02      	ldr	r3, [pc, #8]	; (80043e4 <set_key+0x24>)
 80043da:	4a03      	ldr	r2, [pc, #12]	; (80043e8 <set_key+0x28>)
 80043dc:	21de      	movs	r1, #222	; 0xde
 80043de:	4803      	ldr	r0, [pc, #12]	; (80043ec <set_key+0x2c>)
 80043e0:	f004 f90e 	bl	8008600 <__assert_func>
 80043e4:	080185ac 	.word	0x080185ac
 80043e8:	0801870c 	.word	0x0801870c
 80043ec:	08018438 	.word	0x08018438

080043f0 <build_header>:
{
    return ((uint32_t) buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
}

static void build_header(packet_t *packet, uint8_t payload_len, uint8_t *header)
{
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	0005      	movs	r5, r0
 80043f4:	000e      	movs	r6, r1
 80043f6:	0014      	movs	r4, r2
    /*
     * According DASH7 specification, this block is defined  as (LSB first):
     * B_0: Flags | NLS Method | Zeros padding | Origin ID | Control extension | Payload length
     */

    memset(header, 0, AES_BLOCK_SIZE); // for zero padding
 80043f8:	2210      	movs	r2, #16
 80043fa:	2100      	movs	r1, #0
 80043fc:	0020      	movs	r0, r4
 80043fe:	f010 fd3b 	bl	8014e78 <memset>

    /* the CBC-MAC header is defined according Table 7.4.6.1 */
    header[0] = SET_NLS_METHOD(packet->d7anp_ctrl.nls_method);
 8004402:	79eb      	ldrb	r3, [r5, #7]
 8004404:	071b      	lsls	r3, r3, #28
 8004406:	0e1b      	lsrs	r3, r3, #24
 8004408:	7023      	strb	r3, [r4, #0]
    memcpy( header + 6, packet->origin_access_id, packet->d7anp_ctrl.origin_id_type == ID_TYPE_VID? 2 : 8);
 800440a:	1da0      	adds	r0, r4, #6
 800440c:	0029      	movs	r1, r5
 800440e:	3109      	adds	r1, #9
 8004410:	79ea      	ldrb	r2, [r5, #7]
 8004412:	2330      	movs	r3, #48	; 0x30
 8004414:	4013      	ands	r3, r2
 8004416:	2b30      	cmp	r3, #48	; 0x30
 8004418:	d006      	beq.n	8004428 <build_header+0x38>
 800441a:	2208      	movs	r2, #8
 800441c:	f010 fcd8 	bl	8014dd0 <memcpy>
    header[14] = packet->d7anp_ctrl.raw;
 8004420:	79eb      	ldrb	r3, [r5, #7]
 8004422:	73a3      	strb	r3, [r4, #14]
    header[15] = payload_len;
 8004424:	73e6      	strb	r6, [r4, #15]

    DPRINT("Header for CBC-MAC");
    DPRINT_DATA(header, AES_BLOCK_SIZE);
}
 8004426:	bd70      	pop	{r4, r5, r6, pc}
    memcpy( header + 6, packet->origin_access_id, packet->d7anp_ctrl.origin_id_type == ID_TYPE_VID? 2 : 8);
 8004428:	2202      	movs	r2, #2
 800442a:	e7f7      	b.n	800441c <build_header+0x2c>

0800442c <build_iv>:

static void build_iv(packet_t *packet, uint8_t payload_len, uint8_t *iv)
{
 800442c:	b570      	push	{r4, r5, r6, lr}
 800442e:	0005      	movs	r5, r0
 8004430:	000e      	movs	r6, r1
 8004432:	0014      	movs	r4, r2
    /*
     * According DASH7 specification, the initialization vector is defined  as (LSB first):
     * IV: Block counter | NLS Method | Key counter | Frame counter | Origin ID | Control extension | Payload length
     */

    memset(iv, 0, AES_BLOCK_SIZE);
 8004434:	2210      	movs	r2, #16
 8004436:	2100      	movs	r1, #0
 8004438:	0020      	movs	r0, r4
 800443a:	f010 fd1d 	bl	8014e78 <memset>

    /* AES-CTR/AES-CCM Initialization Vector (IV)*/
    iv[0] = SET_NLS_METHOD(packet->d7anp_ctrl.nls_method);
 800443e:	79eb      	ldrb	r3, [r5, #7]
 8004440:	071b      	lsls	r3, r3, #28
 8004442:	0e1b      	lsrs	r3, r3, #24
 8004444:	7023      	strb	r3, [r4, #0]
    iv[1] = packet->d7anp_security.key_counter;
 8004446:	7d2b      	ldrb	r3, [r5, #20]
 8004448:	7063      	strb	r3, [r4, #1]
    write_be32(&iv[2], packet->d7anp_security.frame_counter);
 800444a:	69ab      	ldr	r3, [r5, #24]
    buf[0] = (val >> 24) & 0xff;
 800444c:	0e1a      	lsrs	r2, r3, #24
 800444e:	70a2      	strb	r2, [r4, #2]
    buf[1] = (val >> 16) & 0xff;
 8004450:	0c1a      	lsrs	r2, r3, #16
 8004452:	70e2      	strb	r2, [r4, #3]
    buf[2] = (val >> 8) & 0xff;
 8004454:	0a1a      	lsrs	r2, r3, #8
 8004456:	7122      	strb	r2, [r4, #4]
    buf[3] = val & 0xff;
 8004458:	7163      	strb	r3, [r4, #5]
    /* When Origin ID is not provided in the NWL frame, it is provided by upper layer.*/
    memcpy( iv + 6, packet->origin_access_id, packet->d7anp_ctrl.origin_id_type == ID_TYPE_VID? 2 : 8);
 800445a:	1da0      	adds	r0, r4, #6
 800445c:	0029      	movs	r1, r5
 800445e:	3109      	adds	r1, #9
 8004460:	79ea      	ldrb	r2, [r5, #7]
 8004462:	2330      	movs	r3, #48	; 0x30
 8004464:	4013      	ands	r3, r2
 8004466:	2b30      	cmp	r3, #48	; 0x30
 8004468:	d006      	beq.n	8004478 <build_iv+0x4c>
 800446a:	2208      	movs	r2, #8
 800446c:	f010 fcb0 	bl	8014dd0 <memcpy>
    iv[14] = packet->d7anp_ctrl.raw;
 8004470:	79eb      	ldrb	r3, [r5, #7]
 8004472:	73a3      	strb	r3, [r4, #14]
    iv[15] = payload_len;
 8004474:	73e6      	strb	r6, [r4, #15]

#if defined(FRAMEWORK_AES_LOG_ENABLED)
    DPRINT("iv for CTR/CCM");
    DPRINT_DATA(iv, AES_BLOCK_SIZE);
#endif
}
 8004476:	bd70      	pop	{r4, r5, r6, pc}
    memcpy( iv + 6, packet->origin_access_id, packet->d7anp_ctrl.origin_id_type == ID_TYPE_VID? 2 : 8);
 8004478:	2202      	movs	r2, #2
 800447a:	e7f7      	b.n	800446c <build_iv+0x40>

0800447c <d7anp_start_foreground_scan>:
{
 800447c:	b510      	push	{r4, lr}
    schedule_foreground_scan_expired_timer();
 800447e:	f7ff fee7 	bl	8004250 <schedule_foreground_scan_expired_timer>
    if (d7anp_state != D7ANP_STATE_FOREGROUND_SCAN)
 8004482:	4b05      	ldr	r3, [pc, #20]	; (8004498 <d7anp_start_foreground_scan+0x1c>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b03      	cmp	r3, #3
 8004488:	d100      	bne.n	800448c <d7anp_start_foreground_scan+0x10>
}
 800448a:	bd10      	pop	{r4, pc}
        switch_state(D7ANP_STATE_FOREGROUND_SCAN);
 800448c:	2003      	movs	r0, #3
 800448e:	f7ff ff11 	bl	80042b4 <switch_state>
        dll_start_foreground_scan();
 8004492:	f002 fa15 	bl	80068c0 <dll_start_foreground_scan>
}
 8004496:	e7f8      	b.n	800448a <d7anp_start_foreground_scan+0xe>
 8004498:	20001aad 	.word	0x20001aad

0800449c <start_foreground_scan_after_D7AAdvP>:
{
 800449c:	b510      	push	{r4, lr}
    fg_scan_timeout_ticks = FG_SCAN_TIMEOUT;
 800449e:	4b03      	ldr	r3, [pc, #12]	; (80044ac <start_foreground_scan_after_D7AAdvP+0x10>)
 80044a0:	22c8      	movs	r2, #200	; 0xc8
 80044a2:	601a      	str	r2, [r3, #0]
    d7anp_start_foreground_scan();
 80044a4:	f7ff ffea 	bl	800447c <d7anp_start_foreground_scan>
}
 80044a8:	bd10      	pop	{r4, pc}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	20001ab0 	.word	0x20001ab0

080044b0 <d7anp_set_foreground_scan_timeout>:
{
 80044b0:	b510      	push	{r4, lr}
    assert(d7anp_state == D7ANP_STATE_IDLE || d7anp_state == D7ANP_STATE_FOREGROUND_SCAN);
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <d7anp_set_foreground_scan_timeout+0x20>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d001      	beq.n	80044be <d7anp_set_foreground_scan_timeout+0xe>
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d102      	bne.n	80044c4 <d7anp_set_foreground_scan_timeout+0x14>
    fg_scan_timeout_ticks = timeout;
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <d7anp_set_foreground_scan_timeout+0x24>)
 80044c0:	6018      	str	r0, [r3, #0]
}
 80044c2:	bd10      	pop	{r4, pc}
    assert(d7anp_state == D7ANP_STATE_IDLE || d7anp_state == D7ANP_STATE_FOREGROUND_SCAN);
 80044c4:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <d7anp_set_foreground_scan_timeout+0x28>)
 80044c6:	4a05      	ldr	r2, [pc, #20]	; (80044dc <d7anp_set_foreground_scan_timeout+0x2c>)
 80044c8:	21b6      	movs	r1, #182	; 0xb6
 80044ca:	4805      	ldr	r0, [pc, #20]	; (80044e0 <d7anp_set_foreground_scan_timeout+0x30>)
 80044cc:	f004 f898 	bl	8008600 <__assert_func>
 80044d0:	20001aad 	.word	0x20001aad
 80044d4:	20001ab0 	.word	0x20001ab0
 80044d8:	0801846c 	.word	0x0801846c
 80044dc:	080186e8 	.word	0x080186e8
 80044e0:	08018438 	.word	0x08018438

080044e4 <d7anp_stop_foreground_scan>:
{
 80044e4:	b510      	push	{r4, lr}
    if (d7anp_state == D7ANP_STATE_FOREGROUND_SCAN)
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <d7anp_stop_foreground_scan+0x1c>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d002      	beq.n	80044f4 <d7anp_stop_foreground_scan+0x10>
    dll_stop_foreground_scan();
 80044ee:	f002 f9f3 	bl	80068d8 <dll_stop_foreground_scan>
}
 80044f2:	bd10      	pop	{r4, pc}
        cancel_foreground_scan_task();
 80044f4:	f7ff ff2a 	bl	800434c <cancel_foreground_scan_task>
        switch_state(D7ANP_STATE_IDLE);
 80044f8:	2001      	movs	r0, #1
 80044fa:	f7ff fedb 	bl	80042b4 <switch_state>
 80044fe:	e7f6      	b.n	80044ee <d7anp_stop_foreground_scan+0xa>
 8004500:	20001aad 	.word	0x20001aad

08004504 <d7anp_init>:
{
 8004504:	b510      	push	{r4, lr}
 8004506:	b082      	sub	sp, #8
    assert(d7anp_state == D7ANP_STATE_STOPPED);
 8004508:	4b22      	ldr	r3, [pc, #136]	; (8004594 <d7anp_init+0x90>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d130      	bne.n	8004572 <d7anp_init+0x6e>
    d7anp_state = D7ANP_STATE_IDLE;
 8004510:	4b20      	ldr	r3, [pc, #128]	; (8004594 <d7anp_init+0x90>)
 8004512:	2201      	movs	r2, #1
 8004514:	701a      	strb	r2, [r3, #0]
    fg_scan_timeout_ticks = 0;
 8004516:	4b20      	ldr	r3, [pc, #128]	; (8004598 <d7anp_init+0x94>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
    timer_init_event(&d7anp_fg_scan_expired_timer, &foreground_scan_expired);
 800451c:	491f      	ldr	r1, [pc, #124]	; (800459c <d7anp_init+0x98>)
 800451e:	4820      	ldr	r0, [pc, #128]	; (80045a0 <d7anp_init+0x9c>)
 8004520:	f00b fee2 	bl	80102e8 <timer_init_event>
    timer_init_event(&d7anp_start_fg_scan_after_d7aadvp_timer, &start_foreground_scan_after_D7AAdvP);
 8004524:	491f      	ldr	r1, [pc, #124]	; (80045a4 <d7anp_init+0xa0>)
 8004526:	4820      	ldr	r0, [pc, #128]	; (80045a8 <d7anp_init+0xa4>)
 8004528:	f00b fede 	bl	80102e8 <timer_init_event>
    d7ap_read_vid(address_id);
 800452c:	4c1f      	ldr	r4, [pc, #124]	; (80045ac <d7anp_init+0xa8>)
 800452e:	0020      	movs	r0, r4
 8004530:	f7fe f8dc 	bl	80026ec <d7ap_read_vid>
    if (memcmp(address_id, (uint8_t[2]){ 0xFF, 0xFF }, 2) == 0)
 8004534:	a901      	add	r1, sp, #4
 8004536:	4b1e      	ldr	r3, [pc, #120]	; (80045b0 <d7anp_init+0xac>)
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	800b      	strh	r3, [r1, #0]
 800453c:	2202      	movs	r2, #2
 800453e:	0020      	movs	r0, r4
 8004540:	f010 fc1e 	bl	8014d80 <memcmp>
 8004544:	2800      	cmp	r0, #0
 8004546:	d01a      	beq.n	800457e <d7anp_init+0x7a>
        address_id_type = ID_TYPE_VID;
 8004548:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <d7anp_init+0xb0>)
 800454a:	2203      	movs	r2, #3
 800454c:	701a      	strb	r2, [r3, #0]
    d7ap_fs_register_file_modified_callback(D7A_FILE_NWL_SECURITY_KEY, &set_key);
 800454e:	491a      	ldr	r1, [pc, #104]	; (80045b8 <d7anp_init+0xb4>)
 8004550:	200e      	movs	r0, #14
 8004552:	f003 fded 	bl	8008130 <d7ap_fs_register_file_modified_callback>
    set_key(D7A_FILE_NWL_SECURITY_KEY);
 8004556:	200e      	movs	r0, #14
 8004558:	f7ff ff32 	bl	80043c0 <set_key>
    d7ap_fs_read_nwl_security(&security_state);
 800455c:	4817      	ldr	r0, [pc, #92]	; (80045bc <d7anp_init+0xb8>)
 800455e:	f003 fc05 	bl	8007d6c <d7ap_fs_read_nwl_security>
    d7ap_fs_read_nwl_security_state_register(&node_security_state);
 8004562:	4817      	ldr	r0, [pc, #92]	; (80045c0 <d7anp_init+0xbc>)
 8004564:	f003 fc16 	bl	8007d94 <d7ap_fs_read_nwl_security_state_register>
    latest_node = NULL;
 8004568:	4b16      	ldr	r3, [pc, #88]	; (80045c4 <d7anp_init+0xc0>)
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
}
 800456e:	b002      	add	sp, #8
 8004570:	bd10      	pop	{r4, pc}
    assert(d7anp_state == D7ANP_STATE_STOPPED);
 8004572:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <d7anp_init+0xc4>)
 8004574:	4a15      	ldr	r2, [pc, #84]	; (80045cc <d7anp_init+0xc8>)
 8004576:	21e6      	movs	r1, #230	; 0xe6
 8004578:	4815      	ldr	r0, [pc, #84]	; (80045d0 <d7anp_init+0xcc>)
 800457a:	f004 f841 	bl	8008600 <__assert_func>
        d7ap_fs_register_file_modified_callback(D7A_FILE_UID_FILE_ID, &d7anp_set_address_id);
 800457e:	4915      	ldr	r1, [pc, #84]	; (80045d4 <d7anp_init+0xd0>)
 8004580:	f003 fdd6 	bl	8008130 <d7ap_fs_register_file_modified_callback>
        d7ap_fs_read_uid(address_id);
 8004584:	4809      	ldr	r0, [pc, #36]	; (80045ac <d7anp_init+0xa8>)
 8004586:	f003 fbd5 	bl	8007d34 <d7ap_fs_read_uid>
        address_id_type = ID_TYPE_UID;
 800458a:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <d7anp_init+0xb0>)
 800458c:	2202      	movs	r2, #2
 800458e:	701a      	strb	r2, [r3, #0]
 8004590:	e7dd      	b.n	800454e <d7anp_init+0x4a>
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	20001aad 	.word	0x20001aad
 8004598:	20001ab0 	.word	0x20001ab0
 800459c:	08004375 	.word	0x08004375
 80045a0:	20001bd0 	.word	0x20001bd0
 80045a4:	0800449d 	.word	0x0800449d
 80045a8:	20001be4 	.word	0x20001be4
 80045ac:	20001bc4 	.word	0x20001bc4
 80045b0:	08018684 	.word	0x08018684
 80045b4:	20001bcc 	.word	0x20001bcc
 80045b8:	080043c1 	.word	0x080043c1
 80045bc:	20001bbc 	.word	0x20001bbc
 80045c0:	20001ab8 	.word	0x20001ab8
 80045c4:	20001ab4 	.word	0x20001ab4
 80045c8:	080185dc 	.word	0x080185dc
 80045cc:	08018714 	.word	0x08018714
 80045d0:	08018438 	.word	0x08018438
 80045d4:	08004365 	.word	0x08004365

080045d8 <d7anp_stop>:
{
 80045d8:	b510      	push	{r4, lr}
    d7anp_state = D7ANP_STATE_STOPPED;
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <d7anp_stop+0x18>)
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]
    timer_cancel_event(&d7anp_fg_scan_expired_timer);
 80045e0:	4804      	ldr	r0, [pc, #16]	; (80045f4 <d7anp_stop+0x1c>)
 80045e2:	f00c f967 	bl	80108b4 <timer_cancel_event>
    timer_cancel_event(&d7anp_start_fg_scan_after_d7aadvp_timer);
 80045e6:	4804      	ldr	r0, [pc, #16]	; (80045f8 <d7anp_stop+0x20>)
 80045e8:	f00c f964 	bl	80108b4 <timer_cancel_event>
}
 80045ec:	bd10      	pop	{r4, pc}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	20001aad 	.word	0x20001aad
 80045f4:	20001bd0 	.word	0x20001bd0
 80045f8:	20001be4 	.word	0x20001be4

080045fc <d7anp_tx_foreground_frame>:
{
 80045fc:	b510      	push	{r4, lr}
 80045fe:	0004      	movs	r4, r0
    assert(d7anp_state == D7ANP_STATE_IDLE || d7anp_state == D7ANP_STATE_FOREGROUND_SCAN);
 8004600:	4b2c      	ldr	r3, [pc, #176]	; (80046b4 <d7anp_tx_foreground_frame+0xb8>)
 8004602:	781a      	ldrb	r2, [r3, #0]
 8004604:	2a01      	cmp	r2, #1
 8004606:	d001      	beq.n	800460c <d7anp_tx_foreground_frame+0x10>
 8004608:	2a03      	cmp	r2, #3
 800460a:	d13c      	bne.n	8004686 <d7anp_tx_foreground_frame+0x8a>
    packet->d7anp_ctrl.hop_enabled = false;
 800460c:	79e3      	ldrb	r3, [r4, #7]
 800460e:	2040      	movs	r0, #64	; 0x40
 8004610:	4383      	bics	r3, r0
 8004612:	71e3      	strb	r3, [r4, #7]
    d7anp_prev_state = d7anp_state;
 8004614:	4b28      	ldr	r3, [pc, #160]	; (80046b8 <d7anp_tx_foreground_frame+0xbc>)
 8004616:	701a      	strb	r2, [r3, #0]
    if (packet->type == RETRY_REQUEST)
 8004618:	232c      	movs	r3, #44	; 0x2c
 800461a:	5ce3      	ldrb	r3, [r4, r3]
 800461c:	2b02      	cmp	r3, #2
 800461e:	d00b      	beq.n	8004638 <d7anp_tx_foreground_frame+0x3c>
    if (!should_include_origin_template)
 8004620:	2900      	cmp	r1, #0
 8004622:	d137      	bne.n	8004694 <d7anp_tx_foreground_frame+0x98>
        packet->d7anp_ctrl.origin_id_type = ID_TYPE_NOID;
 8004624:	79e3      	ldrb	r3, [r4, #7]
 8004626:	2230      	movs	r2, #48	; 0x30
 8004628:	4393      	bics	r3, r2
 800462a:	2210      	movs	r2, #16
 800462c:	4313      	orrs	r3, r2
        packet->d7anp_ctrl.origin_void = true;
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2280      	movs	r2, #128	; 0x80
 8004632:	4252      	negs	r2, r2
 8004634:	4313      	orrs	r3, r2
 8004636:	71e3      	strb	r3, [r4, #7]
    packet->d7anp_ctrl.nls_method = packet->d7anp_addressee->ctrl.nls_method;
 8004638:	6a23      	ldr	r3, [r4, #32]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	071b      	lsls	r3, r3, #28
 800463e:	0f1b      	lsrs	r3, r3, #28
 8004640:	79e2      	ldrb	r2, [r4, #7]
 8004642:	210f      	movs	r1, #15
 8004644:	438a      	bics	r2, r1
 8004646:	4313      	orrs	r3, r2
 8004648:	71e3      	strb	r3, [r4, #7]
    if (packet->d7anp_ctrl.nls_method == AES_CTR ||
 800464a:	220f      	movs	r2, #15
 800464c:	4013      	ands	r3, r2
 800464e:	2b01      	cmp	r3, #1
 8004650:	d005      	beq.n	800465e <d7anp_tx_foreground_frame+0x62>
 8004652:	2b07      	cmp	r3, #7
 8004654:	d003      	beq.n	800465e <d7anp_tx_foreground_frame+0x62>
        packet->d7anp_ctrl.nls_method == AES_CCM_32 ||
 8004656:	2b06      	cmp	r3, #6
 8004658:	d001      	beq.n	800465e <d7anp_tx_foreground_frame+0x62>
        packet->d7anp_ctrl.nls_method == AES_CCM_64 ||
 800465a:	2b05      	cmp	r3, #5
 800465c:	d10b      	bne.n	8004676 <d7anp_tx_foreground_frame+0x7a>
        if (security_state.frame_counter == (uint32_t)~0)
 800465e:	4b17      	ldr	r3, [pc, #92]	; (80046bc <d7anp_tx_foreground_frame+0xc0>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	d023      	beq.n	80046ae <d7anp_tx_foreground_frame+0xb2>
        packet->d7anp_security.frame_counter = security_state.frame_counter++;
 8004666:	4815      	ldr	r0, [pc, #84]	; (80046bc <d7anp_tx_foreground_frame+0xc0>)
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	6042      	str	r2, [r0, #4]
 800466c:	61a3      	str	r3, [r4, #24]
        packet->d7anp_security.key_counter = security_state.key_counter;
 800466e:	7803      	ldrb	r3, [r0, #0]
 8004670:	7523      	strb	r3, [r4, #20]
        d7ap_fs_write_nwl_security(&security_state);
 8004672:	f003 fcc7 	bl	8008004 <d7ap_fs_write_nwl_security>
    switch_state(D7ANP_STATE_TRANSMIT);
 8004676:	2002      	movs	r0, #2
 8004678:	f7ff fe1c 	bl	80042b4 <switch_state>
    dll_tx_frame(packet);
 800467c:	0020      	movs	r0, r4
 800467e:	f001 ffbb 	bl	80065f8 <dll_tx_frame>
    return SUCCESS;
 8004682:	2000      	movs	r0, #0
}
 8004684:	bd10      	pop	{r4, pc}
    assert(d7anp_state == D7ANP_STATE_IDLE || d7anp_state == D7ANP_STATE_FOREGROUND_SCAN);
 8004686:	211a      	movs	r1, #26
 8004688:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <d7anp_tx_foreground_frame+0xc4>)
 800468a:	4a0e      	ldr	r2, [pc, #56]	; (80046c4 <d7anp_tx_foreground_frame+0xc8>)
 800468c:	31ff      	adds	r1, #255	; 0xff
 800468e:	480e      	ldr	r0, [pc, #56]	; (80046c8 <d7anp_tx_foreground_frame+0xcc>)
 8004690:	f003 ffb6 	bl	8008600 <__assert_func>
        packet->d7anp_ctrl.origin_id_type = address_id_type;
 8004694:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <d7anp_tx_foreground_frame+0xd0>)
 8004696:	781a      	ldrb	r2, [r3, #0]
 8004698:	2303      	movs	r3, #3
 800469a:	401a      	ands	r2, r3
 800469c:	0112      	lsls	r2, r2, #4
 800469e:	79e3      	ldrb	r3, [r4, #7]
 80046a0:	2130      	movs	r1, #48	; 0x30
 80046a2:	438b      	bics	r3, r1
        packet->d7anp_ctrl.origin_void = false;
 80046a4:	4313      	orrs	r3, r2
 80046a6:	227f      	movs	r2, #127	; 0x7f
 80046a8:	4013      	ands	r3, r2
 80046aa:	71e3      	strb	r3, [r4, #7]
 80046ac:	e7c4      	b.n	8004638 <d7anp_tx_foreground_frame+0x3c>
            return EPERM;
 80046ae:	2001      	movs	r0, #1
 80046b0:	e7e8      	b.n	8004684 <d7anp_tx_foreground_frame+0x88>
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	20001aad 	.word	0x20001aad
 80046b8:	20001aac 	.word	0x20001aac
 80046bc:	20001bbc 	.word	0x20001bbc
 80046c0:	0801846c 	.word	0x0801846c
 80046c4:	08018720 	.word	0x08018720
 80046c8:	08018438 	.word	0x08018438
 80046cc:	20001bcc 	.word	0x20001bcc

080046d0 <d7anp_secure_payload>:

uint8_t d7anp_secure_payload(packet_t *packet, uint8_t *payload, uint8_t payload_len)
{
 80046d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046d2:	46ce      	mov	lr, r9
 80046d4:	4647      	mov	r7, r8
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b095      	sub	sp, #84	; 0x54
 80046da:	0005      	movs	r5, r0
 80046dc:	4688      	mov	r8, r1
 80046de:	0016      	movs	r6, r2
    uint8_t auth_len;
    uint8_t add[AES_BLOCK_SIZE];
    uint8_t add_len = 0;

    DPRINT("Start Secure payload (len %d) ", payload_len );
    timer_tick_t time_elapsed = timer_get_counter_value();
 80046e0:	f00b fe0e 	bl	8010300 <timer_get_counter_value>


    nls_method = packet->d7anp_ctrl.nls_method;
 80046e4:	79ec      	ldrb	r4, [r5, #7]
 80046e6:	0724      	lsls	r4, r4, #28
 80046e8:	0f24      	lsrs	r4, r4, #28
    switch(nls_method)
 80046ea:	2c07      	cmp	r4, #7
 80046ec:	d807      	bhi.n	80046fe <d7anp_secure_payload+0x2e>
 80046ee:	00a3      	lsls	r3, r4, #2
 80046f0:	4a46      	ldr	r2, [pc, #280]	; (800480c <d7anp_secure_payload+0x13c>)
 80046f2:	58d3      	ldr	r3, [r2, r3]
 80046f4:	469f      	mov	pc, r3
        return 8;
 80046f6:	2708      	movs	r7, #8
 80046f8:	e00a      	b.n	8004710 <d7anp_secure_payload+0x40>
        return 4;
 80046fa:	2704      	movs	r7, #4
 80046fc:	e008      	b.n	8004710 <d7anp_secure_payload+0x40>
        assert(false);
 80046fe:	4b44      	ldr	r3, [pc, #272]	; (8004810 <d7anp_secure_payload+0x140>)
 8004700:	4a44      	ldr	r2, [pc, #272]	; (8004814 <d7anp_secure_payload+0x144>)
 8004702:	2165      	movs	r1, #101	; 0x65
 8004704:	4844      	ldr	r0, [pc, #272]	; (8004818 <d7anp_secure_payload+0x148>)
 8004706:	f003 ff7b 	bl	8008600 <__assert_func>
    nls_method = packet->d7anp_ctrl.nls_method;
 800470a:	2700      	movs	r7, #0
 800470c:	e000      	b.n	8004710 <d7anp_secure_payload+0x40>
        return 16;
 800470e:	2710      	movs	r7, #16
    auth_len = get_auth_len(nls_method);

    /* When unicast access, add the auxiliary authentication data composed of the destination address */
    if(auth_len && !ID_TYPE_IS_BROADCAST(packet->d7anp_addressee->ctrl.id_type))
 8004710:	2f00      	cmp	r7, #0
 8004712:	d017      	beq.n	8004744 <d7anp_secure_payload+0x74>
 8004714:	6a29      	ldr	r1, [r5, #32]
 8004716:	780b      	ldrb	r3, [r1, #0]
 8004718:	2230      	movs	r2, #48	; 0x30
 800471a:	0010      	movs	r0, r2
 800471c:	4018      	ands	r0, r3
 800471e:	4681      	mov	r9, r0
 8004720:	421a      	tst	r2, r3
 8004722:	d010      	beq.n	8004746 <d7anp_secure_payload+0x76>
 8004724:	0003      	movs	r3, r0
 8004726:	2810      	cmp	r0, #16
 8004728:	d026      	beq.n	8004778 <d7anp_secure_payload+0xa8>
    {
        add_len = packet->d7anp_addressee->ctrl.id_type == ID_TYPE_VID ? 2 : 8;
 800472a:	2830      	cmp	r0, #48	; 0x30
 800472c:	d007      	beq.n	800473e <d7anp_secure_payload+0x6e>
 800472e:	2308      	movs	r3, #8
 8004730:	4699      	mov	r9, r3
        memcpy(add, packet->d7anp_addressee->id, add_len);
 8004732:	3102      	adds	r1, #2
 8004734:	464a      	mov	r2, r9
 8004736:	a804      	add	r0, sp, #16
 8004738:	f010 fb4a 	bl	8014dd0 <memcpy>
 800473c:	e003      	b.n	8004746 <d7anp_secure_payload+0x76>
        add_len = packet->d7anp_addressee->ctrl.id_type == ID_TYPE_VID ? 2 : 8;
 800473e:	3b2e      	subs	r3, #46	; 0x2e
 8004740:	4699      	mov	r9, r3
 8004742:	e7f6      	b.n	8004732 <d7anp_secure_payload+0x62>
    uint8_t add_len = 0;
 8004744:	46b9      	mov	r9, r7
    }

    switch (nls_method)
 8004746:	2c04      	cmp	r4, #4
 8004748:	d819      	bhi.n	800477e <d7anp_secure_payload+0xae>
 800474a:	2c02      	cmp	r4, #2
 800474c:	d23c      	bcs.n	80047c8 <d7anp_secure_payload+0xf8>
 800474e:	2c01      	cmp	r4, #1
 8004750:	d10a      	bne.n	8004768 <d7anp_secure_payload+0x98>
    {
    case AES_CTR:
        // Build the initial counter block
        build_iv(packet, payload_len, ctr_blk);
 8004752:	aa10      	add	r2, sp, #64	; 0x40
 8004754:	0031      	movs	r1, r6
 8004756:	0028      	movs	r0, r5
 8004758:	f7ff fe68 	bl	800442c <build_iv>

        // the encrypted payload replaces the plaintext
        AES128_CTR_encrypt(payload, payload, payload_len, ctr_blk);
 800475c:	ab10      	add	r3, sp, #64	; 0x40
 800475e:	0032      	movs	r2, r6
 8004760:	4641      	mov	r1, r8
 8004762:	4640      	mov	r0, r8
 8004764:	f009 fade 	bl	800dd24 <AES128_CTR_encrypt>
        // TODO check that the payload length does not exceed the maximum size
        AES128_CCM_encrypt(payload, payload_len, header, add, add_len, ctr_blk, auth_len);
        break;
    }

    time_elapsed = timer_get_counter_value() - time_elapsed;
 8004768:	f00b fdca 	bl	8010300 <timer_get_counter_value>
    DPRINT("Payload secured in %i Ti", time_elapsed);
    return auth_len;
}
 800476c:	0038      	movs	r0, r7
 800476e:	b015      	add	sp, #84	; 0x54
 8004770:	bc0c      	pop	{r2, r3}
 8004772:	4690      	mov	r8, r2
 8004774:	4699      	mov	r9, r3
 8004776:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t add_len = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	4699      	mov	r9, r3
 800477c:	e7e3      	b.n	8004746 <d7anp_secure_payload+0x76>
    switch (nls_method)
 800477e:	340b      	adds	r4, #11
 8004780:	230f      	movs	r3, #15
 8004782:	401c      	ands	r4, r3
 8004784:	2c02      	cmp	r4, #2
 8004786:	d8ef      	bhi.n	8004768 <d7anp_secure_payload+0x98>
        build_iv(packet, payload_len, header);
 8004788:	aa0c      	add	r2, sp, #48	; 0x30
 800478a:	0031      	movs	r1, r6
 800478c:	0028      	movs	r0, r5
 800478e:	f7ff fe4d 	bl	800442c <build_iv>
        memcpy(ctr_blk, header, AES_BLOCK_SIZE);
 8004792:	ac10      	add	r4, sp, #64	; 0x40
 8004794:	2210      	movs	r2, #16
 8004796:	a90c      	add	r1, sp, #48	; 0x30
 8004798:	0020      	movs	r0, r4
 800479a:	f010 fb19 	bl	8014dd0 <memcpy>
        header[0] |= ( add_len > 0 );
 800479e:	464b      	mov	r3, r9
 80047a0:	1e5a      	subs	r2, r3, #1
 80047a2:	4193      	sbcs	r3, r2
 80047a4:	466a      	mov	r2, sp
 80047a6:	2130      	movs	r1, #48	; 0x30
 80047a8:	1852      	adds	r2, r2, r1
 80047aa:	7812      	ldrb	r2, [r2, #0]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	466a      	mov	r2, sp
 80047b0:	1852      	adds	r2, r2, r1
 80047b2:	7013      	strb	r3, [r2, #0]
        AES128_CCM_encrypt(payload, payload_len, header, add, add_len, ctr_blk, auth_len);
 80047b4:	9702      	str	r7, [sp, #8]
 80047b6:	9401      	str	r4, [sp, #4]
 80047b8:	464b      	mov	r3, r9
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	ab04      	add	r3, sp, #16
 80047be:	0031      	movs	r1, r6
 80047c0:	4640      	mov	r0, r8
 80047c2:	f009 fbae 	bl	800df22 <AES128_CCM_encrypt>
        break;
 80047c6:	e7cf      	b.n	8004768 <d7anp_secure_payload+0x98>
        build_header(packet, payload_len, header);
 80047c8:	aa0c      	add	r2, sp, #48	; 0x30
 80047ca:	0031      	movs	r1, r6
 80047cc:	0028      	movs	r0, r5
 80047ce:	f7ff fe0f 	bl	80043f0 <build_header>
        header[0] |= ( add_len > 0 );
 80047d2:	464b      	mov	r3, r9
 80047d4:	1e5a      	subs	r2, r3, #1
 80047d6:	4193      	sbcs	r3, r2
 80047d8:	466a      	mov	r2, sp
 80047da:	2130      	movs	r1, #48	; 0x30
 80047dc:	1852      	adds	r2, r2, r1
 80047de:	7812      	ldrb	r2, [r2, #0]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	466a      	mov	r2, sp
 80047e4:	1852      	adds	r2, r2, r1
 80047e6:	7013      	strb	r3, [r2, #0]
        AES128_CBC_MAC(auth, payload, payload_len, header, add, add_len, auth_len);
 80047e8:	9702      	str	r7, [sp, #8]
 80047ea:	464b      	mov	r3, r9
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	ab04      	add	r3, sp, #16
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	0013      	movs	r3, r2
 80047f4:	0032      	movs	r2, r6
 80047f6:	4641      	mov	r1, r8
 80047f8:	a808      	add	r0, sp, #32
 80047fa:	f009 faf9 	bl	800ddf0 <AES128_CBC_MAC>
        memcpy(payload + payload_len, auth, auth_len);
 80047fe:	0030      	movs	r0, r6
 8004800:	4440      	add	r0, r8
 8004802:	003a      	movs	r2, r7
 8004804:	a908      	add	r1, sp, #32
 8004806:	f010 fae3 	bl	8014dd0 <memcpy>
        break;
 800480a:	e7ad      	b.n	8004768 <d7anp_secure_payload+0x98>
 800480c:	08018600 	.word	0x08018600
 8004810:	080169c8 	.word	0x080169c8
 8004814:	08018688 	.word	0x08018688
 8004818:	08018438 	.word	0x08018438

0800481c <d7anp_unsecure_payload>:

bool d7anp_unsecure_payload(packet_t *packet, uint8_t index)
{
 800481c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800481e:	46de      	mov	lr, fp
 8004820:	464f      	mov	r7, r9
 8004822:	4646      	mov	r6, r8
 8004824:	b5c0      	push	{r6, r7, lr}
 8004826:	b096      	sub	sp, #88	; 0x58
 8004828:	0005      	movs	r5, r0
 800482a:	000f      	movs	r7, r1
    uint32_t payload_len;
    uint8_t *tag;
    uint8_t add[AES_BLOCK_SIZE];
    uint8_t add_len = 0;

    nls_method = packet->d7anp_ctrl.nls_method;
 800482c:	79c4      	ldrb	r4, [r0, #7]
 800482e:	0724      	lsls	r4, r4, #28
 8004830:	0f24      	lsrs	r4, r4, #28

    if(packet->hw_radio_packet.length < (index + CRC_SIZE))
 8004832:	3101      	adds	r1, #1
 8004834:	239a      	movs	r3, #154	; 0x9a
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	5ac3      	ldrh	r3, [r0, r3]
 800483a:	4299      	cmp	r1, r3
 800483c:	db06      	blt.n	800484c <d7anp_unsecure_payload+0x30>
    {
        return false;
 800483e:	2000      	movs	r0, #0
        /* remove the authentication Tag */
        packet->hw_radio_packet.length -= auth_len;
    }

    return true;
}
 8004840:	b016      	add	sp, #88	; 0x58
 8004842:	bc1c      	pop	{r2, r3, r4}
 8004844:	4690      	mov	r8, r2
 8004846:	4699      	mov	r9, r3
 8004848:	46a3      	mov	fp, r4
 800484a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    payload_len = packet->hw_radio_packet.length - index - CRC_SIZE; // exclude the headers CRC bytes // TODO exclude footers
 800484c:	1bdb      	subs	r3, r3, r7
 800484e:	3b02      	subs	r3, #2
    switch(nls_method)
 8004850:	2c07      	cmp	r4, #7
 8004852:	d807      	bhi.n	8004864 <d7anp_unsecure_payload+0x48>
 8004854:	00a2      	lsls	r2, r4, #2
 8004856:	495c      	ldr	r1, [pc, #368]	; (80049c8 <d7anp_unsecure_payload+0x1ac>)
 8004858:	588a      	ldr	r2, [r1, r2]
 800485a:	4697      	mov	pc, r2
        return 8;
 800485c:	2608      	movs	r6, #8
 800485e:	e00a      	b.n	8004876 <d7anp_unsecure_payload+0x5a>
        return 4;
 8004860:	2604      	movs	r6, #4
 8004862:	e008      	b.n	8004876 <d7anp_unsecure_payload+0x5a>
        assert(false);
 8004864:	4b59      	ldr	r3, [pc, #356]	; (80049cc <d7anp_unsecure_payload+0x1b0>)
 8004866:	4a5a      	ldr	r2, [pc, #360]	; (80049d0 <d7anp_unsecure_payload+0x1b4>)
 8004868:	2165      	movs	r1, #101	; 0x65
 800486a:	485a      	ldr	r0, [pc, #360]	; (80049d4 <d7anp_unsecure_payload+0x1b8>)
 800486c:	f003 fec8 	bl	8008600 <__assert_func>
    payload_len = packet->hw_radio_packet.length - index - CRC_SIZE; // exclude the headers CRC bytes // TODO exclude footers
 8004870:	2600      	movs	r6, #0
 8004872:	e000      	b.n	8004876 <d7anp_unsecure_payload+0x5a>
        return 16;
 8004874:	2610      	movs	r6, #16
    if(payload_len < auth_len)
 8004876:	9605      	str	r6, [sp, #20]
 8004878:	429e      	cmp	r6, r3
 800487a:	d900      	bls.n	800487e <d7anp_unsecure_payload+0x62>
 800487c:	e09c      	b.n	80049b8 <d7anp_unsecure_payload+0x19c>
    payload_len -= auth_len;
 800487e:	1b9b      	subs	r3, r3, r6
 8004880:	4699      	mov	r9, r3
    if (auth_len)
 8004882:	2e00      	cmp	r6, #0
 8004884:	d019      	beq.n	80048ba <d7anp_unsecure_payload+0x9e>
        tag = packet->hw_radio_packet.data + index + payload_len;
 8004886:	18fa      	adds	r2, r7, r3
 8004888:	002b      	movs	r3, r5
 800488a:	3337      	adds	r3, #55	; 0x37
 800488c:	33ff      	adds	r3, #255	; 0xff
 800488e:	4698      	mov	r8, r3
 8004890:	4490      	add	r8, r2
        if(packet->dll_header.control_target_id_type == ID_TYPE_UID)
 8004892:	79ab      	ldrb	r3, [r5, #6]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d004      	beq.n	80048a2 <d7anp_unsecure_payload+0x86>
        else if(packet->dll_header.control_target_id_type == ID_TYPE_VID)
 8004898:	2b03      	cmp	r3, #3
 800489a:	d008      	beq.n	80048ae <d7anp_unsecure_payload+0x92>
    uint8_t add_len = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	469b      	mov	fp, r3
 80048a0:	e00c      	b.n	80048bc <d7anp_unsecure_payload+0xa0>
            d7ap_fs_read_uid(add);
 80048a2:	a806      	add	r0, sp, #24
 80048a4:	f003 fa46 	bl	8007d34 <d7ap_fs_read_uid>
            add_len = 8;
 80048a8:	2308      	movs	r3, #8
 80048aa:	469b      	mov	fp, r3
 80048ac:	e006      	b.n	80048bc <d7anp_unsecure_payload+0xa0>
            d7ap_read_vid(add);
 80048ae:	a806      	add	r0, sp, #24
 80048b0:	f7fd ff1c 	bl	80026ec <d7ap_read_vid>
            add_len = 2;
 80048b4:	2302      	movs	r3, #2
 80048b6:	469b      	mov	fp, r3
 80048b8:	e000      	b.n	80048bc <d7anp_unsecure_payload+0xa0>
    uint8_t add_len = 0;
 80048ba:	46b3      	mov	fp, r6
    switch (nls_method)
 80048bc:	2c04      	cmp	r4, #4
 80048be:	d816      	bhi.n	80048ee <d7anp_unsecure_payload+0xd2>
 80048c0:	2c02      	cmp	r4, #2
 80048c2:	d24b      	bcs.n	800495c <d7anp_unsecure_payload+0x140>
 80048c4:	2c01      	cmp	r4, #1
 80048c6:	d110      	bne.n	80048ea <d7anp_unsecure_payload+0xce>
        build_iv(packet, payload_len, ctr_blk);
 80048c8:	464b      	mov	r3, r9
 80048ca:	b2d9      	uxtb	r1, r3
 80048cc:	aa12      	add	r2, sp, #72	; 0x48
 80048ce:	0028      	movs	r0, r5
 80048d0:	f7ff fdac 	bl	800442c <build_iv>
        AES128_CTR_encrypt(packet->hw_radio_packet.data + index,
 80048d4:	0028      	movs	r0, r5
 80048d6:	3037      	adds	r0, #55	; 0x37
 80048d8:	30ff      	adds	r0, #255	; 0xff
 80048da:	19c0      	adds	r0, r0, r7
 80048dc:	ab12      	add	r3, sp, #72	; 0x48
 80048de:	464a      	mov	r2, r9
 80048e0:	0001      	movs	r1, r0
 80048e2:	f009 fa1f 	bl	800dd24 <AES128_CTR_encrypt>
    return true;
 80048e6:	2001      	movs	r0, #1
        break;
 80048e8:	e7aa      	b.n	8004840 <d7anp_unsecure_payload+0x24>
    switch (nls_method)
 80048ea:	2001      	movs	r0, #1
 80048ec:	e7a8      	b.n	8004840 <d7anp_unsecure_payload+0x24>
 80048ee:	340b      	adds	r4, #11
 80048f0:	230f      	movs	r3, #15
 80048f2:	401c      	ands	r4, r3
 80048f4:	2c02      	cmp	r4, #2
 80048f6:	d861      	bhi.n	80049bc <d7anp_unsecure_payload+0x1a0>
        build_iv(packet, payload_len, header);
 80048f8:	464b      	mov	r3, r9
 80048fa:	b2dc      	uxtb	r4, r3
 80048fc:	aa0e      	add	r2, sp, #56	; 0x38
 80048fe:	0021      	movs	r1, r4
 8004900:	0028      	movs	r0, r5
 8004902:	f7ff fd93 	bl	800442c <build_iv>
        memcpy(ctr_blk, header, AES_BLOCK_SIZE);
 8004906:	ab12      	add	r3, sp, #72	; 0x48
 8004908:	4699      	mov	r9, r3
 800490a:	2210      	movs	r2, #16
 800490c:	a90e      	add	r1, sp, #56	; 0x38
 800490e:	0018      	movs	r0, r3
 8004910:	f010 fa5e 	bl	8014dd0 <memcpy>
        header[0] |= ( add_len > 0 );
 8004914:	465b      	mov	r3, fp
 8004916:	1e5a      	subs	r2, r3, #1
 8004918:	4193      	sbcs	r3, r2
 800491a:	aa02      	add	r2, sp, #8
 800491c:	2130      	movs	r1, #48	; 0x30
 800491e:	1852      	adds	r2, r2, r1
 8004920:	7812      	ldrb	r2, [r2, #0]
 8004922:	4313      	orrs	r3, r2
 8004924:	aa02      	add	r2, sp, #8
 8004926:	1852      	adds	r2, r2, r1
 8004928:	7013      	strb	r3, [r2, #0]
        if (AES128_CCM_decrypt(packet->hw_radio_packet.data + index,
 800492a:	0028      	movs	r0, r5
 800492c:	3037      	adds	r0, #55	; 0x37
 800492e:	30ff      	adds	r0, #255	; 0xff
 8004930:	19c0      	adds	r0, r0, r7
 8004932:	9603      	str	r6, [sp, #12]
 8004934:	4643      	mov	r3, r8
 8004936:	9302      	str	r3, [sp, #8]
 8004938:	464b      	mov	r3, r9
 800493a:	9301      	str	r3, [sp, #4]
 800493c:	465b      	mov	r3, fp
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	ab06      	add	r3, sp, #24
 8004942:	aa0e      	add	r2, sp, #56	; 0x38
 8004944:	0021      	movs	r1, r4
 8004946:	f009 fb37 	bl	800dfb8 <AES128_CCM_decrypt>
 800494a:	2800      	cmp	r0, #0
 800494c:	d13a      	bne.n	80049c4 <d7anp_unsecure_payload+0x1a8>
        packet->hw_radio_packet.length -= auth_len;
 800494e:	229a      	movs	r2, #154	; 0x9a
 8004950:	0052      	lsls	r2, r2, #1
 8004952:	5aab      	ldrh	r3, [r5, r2]
 8004954:	1b9b      	subs	r3, r3, r6
 8004956:	52ab      	strh	r3, [r5, r2]
    return true;
 8004958:	3001      	adds	r0, #1
 800495a:	e771      	b.n	8004840 <d7anp_unsecure_payload+0x24>
        build_header(packet, payload_len, header);
 800495c:	464b      	mov	r3, r9
 800495e:	b2dc      	uxtb	r4, r3
 8004960:	aa0e      	add	r2, sp, #56	; 0x38
 8004962:	0021      	movs	r1, r4
 8004964:	0028      	movs	r0, r5
 8004966:	f7ff fd43 	bl	80043f0 <build_header>
        header[0] |= ( add_len > 0 );
 800496a:	465b      	mov	r3, fp
 800496c:	1e5a      	subs	r2, r3, #1
 800496e:	4193      	sbcs	r3, r2
 8004970:	aa02      	add	r2, sp, #8
 8004972:	2130      	movs	r1, #48	; 0x30
 8004974:	1852      	adds	r2, r2, r1
 8004976:	7812      	ldrb	r2, [r2, #0]
 8004978:	4313      	orrs	r3, r2
 800497a:	aa02      	add	r2, sp, #8
 800497c:	1852      	adds	r2, r2, r1
 800497e:	7013      	strb	r3, [r2, #0]
        AES128_CBC_MAC(auth, packet->hw_radio_packet.data + index,
 8004980:	0029      	movs	r1, r5
 8004982:	3137      	adds	r1, #55	; 0x37
 8004984:	31ff      	adds	r1, #255	; 0xff
 8004986:	19c9      	adds	r1, r1, r7
 8004988:	9602      	str	r6, [sp, #8]
 800498a:	465b      	mov	r3, fp
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	ab06      	add	r3, sp, #24
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	ab0e      	add	r3, sp, #56	; 0x38
 8004994:	0022      	movs	r2, r4
 8004996:	a80a      	add	r0, sp, #40	; 0x28
 8004998:	f009 fa2a 	bl	800ddf0 <AES128_CBC_MAC>
        if (memcmp(auth, tag, auth_len) != 0)
 800499c:	9a05      	ldr	r2, [sp, #20]
 800499e:	4641      	mov	r1, r8
 80049a0:	a80a      	add	r0, sp, #40	; 0x28
 80049a2:	f010 f9ed 	bl	8014d80 <memcmp>
 80049a6:	2800      	cmp	r0, #0
 80049a8:	d10a      	bne.n	80049c0 <d7anp_unsecure_payload+0x1a4>
        packet->hw_radio_packet.length -= auth_len;
 80049aa:	229a      	movs	r2, #154	; 0x9a
 80049ac:	0052      	lsls	r2, r2, #1
 80049ae:	5aab      	ldrh	r3, [r5, r2]
 80049b0:	1b9b      	subs	r3, r3, r6
 80049b2:	52ab      	strh	r3, [r5, r2]
    return true;
 80049b4:	3001      	adds	r0, #1
        break;
 80049b6:	e743      	b.n	8004840 <d7anp_unsecure_payload+0x24>
        return false;
 80049b8:	2000      	movs	r0, #0
 80049ba:	e741      	b.n	8004840 <d7anp_unsecure_payload+0x24>
    switch (nls_method)
 80049bc:	2001      	movs	r0, #1
 80049be:	e73f      	b.n	8004840 <d7anp_unsecure_payload+0x24>
            return false;
 80049c0:	2000      	movs	r0, #0
 80049c2:	e73d      	b.n	8004840 <d7anp_unsecure_payload+0x24>
            return false;
 80049c4:	2000      	movs	r0, #0
 80049c6:	e73b      	b.n	8004840 <d7anp_unsecure_payload+0x24>
 80049c8:	08018620 	.word	0x08018620
 80049cc:	080169c8 	.word	0x080169c8
 80049d0:	08018688 	.word	0x08018688
 80049d4:	08018438 	.word	0x08018438

080049d8 <d7anp_assemble_packet_header>:
#endif

uint8_t d7anp_assemble_packet_header(packet_t *packet, uint8_t *data_ptr)
{
 80049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049da:	0005      	movs	r5, r0
 80049dc:	000e      	movs	r6, r1
    assert(!packet->d7anp_ctrl.hop_enabled); // TODO hopping not yet supported
 80049de:	79c3      	ldrb	r3, [r0, #7]
 80049e0:	065b      	lsls	r3, r3, #25
 80049e2:	d42d      	bmi.n	8004a40 <d7anp_assemble_packet_header+0x68>

    uint8_t* d7anp_header_start = data_ptr;
    (*data_ptr) = packet->d7anp_ctrl.raw; data_ptr++;
 80049e4:	79c3      	ldrb	r3, [r0, #7]
 80049e6:	700b      	strb	r3, [r1, #0]
 80049e8:	1c4c      	adds	r4, r1, #1

    if (!packet->d7anp_ctrl.origin_void)
 80049ea:	79c3      	ldrb	r3, [r0, #7]
 80049ec:	09db      	lsrs	r3, r3, #7
 80049ee:	d10e      	bne.n	8004a0e <d7anp_assemble_packet_header+0x36>
    {
        (*data_ptr) = packet->origin_access_class; data_ptr++;
 80049f0:	7a03      	ldrb	r3, [r0, #8]
 80049f2:	704b      	strb	r3, [r1, #1]
 80049f4:	1c8c      	adds	r4, r1, #2

        if (packet->d7anp_ctrl.origin_id_type == ID_TYPE_UID)
 80049f6:	79c2      	ldrb	r2, [r0, #7]
 80049f8:	2330      	movs	r3, #48	; 0x30
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d026      	beq.n	8004a4e <d7anp_assemble_packet_header+0x76>
        {
            memcpy(packet->origin_access_id, address_id, 8);
            memcpy(data_ptr, address_id, 8);
            data_ptr += 8;
        }
        else if (packet->d7anp_ctrl.origin_id_type == ID_TYPE_VID)
 8004a00:	2b30      	cmp	r3, #48	; 0x30
 8004a02:	d031      	beq.n	8004a68 <d7anp_assemble_packet_header+0x90>
        {
            memcpy(packet->origin_access_id, address_id, 2);
            memcpy(data_ptr, address_id, 2);
            data_ptr += 2;
        }
        else if (packet->d7anp_ctrl.origin_id_type == ID_TYPE_NBID)
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d102      	bne.n	8004a0e <d7anp_assemble_packet_header+0x36>
        {
            (*data_ptr) = packet->origin_access_id[0]; data_ptr++;
 8004a08:	7a43      	ldrb	r3, [r0, #9]
 8004a0a:	708b      	strb	r3, [r1, #2]
 8004a0c:	1ccc      	adds	r4, r1, #3
    }

    // TODO hopping ctrl

#if defined(MODULE_D7AP_NLS_ENABLED)
    if (packet->d7anp_ctrl.nls_method == AES_CTR ||
 8004a0e:	79ea      	ldrb	r2, [r5, #7]
 8004a10:	230f      	movs	r3, #15
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d005      	beq.n	8004a24 <d7anp_assemble_packet_header+0x4c>
 8004a18:	2b07      	cmp	r3, #7
 8004a1a:	d003      	beq.n	8004a24 <d7anp_assemble_packet_header+0x4c>
        packet->d7anp_ctrl.nls_method == AES_CCM_32 ||
 8004a1c:	2b06      	cmp	r3, #6
 8004a1e:	d001      	beq.n	8004a24 <d7anp_assemble_packet_header+0x4c>
        packet->d7anp_ctrl.nls_method == AES_CCM_64 ||
 8004a20:	2b05      	cmp	r3, #5
 8004a22:	d10a      	bne.n	8004a3a <d7anp_assemble_packet_header+0x62>
        packet->d7anp_ctrl.nls_method == AES_CCM_128)
    {
        (*data_ptr) = packet->d7anp_security.key_counter; data_ptr++;
 8004a24:	7d2b      	ldrb	r3, [r5, #20]
 8004a26:	7023      	strb	r3, [r4, #0]
        write_be32(data_ptr, packet->d7anp_security.frame_counter);
 8004a28:	69ab      	ldr	r3, [r5, #24]
    buf[0] = (val >> 24) & 0xff;
 8004a2a:	0e1a      	lsrs	r2, r3, #24
 8004a2c:	7062      	strb	r2, [r4, #1]
    buf[1] = (val >> 16) & 0xff;
 8004a2e:	0c1a      	lsrs	r2, r3, #16
 8004a30:	70a2      	strb	r2, [r4, #2]
    buf[2] = (val >> 8) & 0xff;
 8004a32:	0a1a      	lsrs	r2, r3, #8
 8004a34:	70e2      	strb	r2, [r4, #3]
    buf[3] = val & 0xff;
 8004a36:	7123      	strb	r3, [r4, #4]
        data_ptr += sizeof(uint32_t);
 8004a38:	3405      	adds	r4, #5
    }
#endif

    return data_ptr - d7anp_header_start;
 8004a3a:	1ba0      	subs	r0, r4, r6
 8004a3c:	b2c0      	uxtb	r0, r0
}
 8004a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(!packet->d7anp_ctrl.hop_enabled); // TODO hopping not yet supported
 8004a40:	2190      	movs	r1, #144	; 0x90
 8004a42:	4b10      	ldr	r3, [pc, #64]	; (8004a84 <d7anp_assemble_packet_header+0xac>)
 8004a44:	4a10      	ldr	r2, [pc, #64]	; (8004a88 <d7anp_assemble_packet_header+0xb0>)
 8004a46:	0089      	lsls	r1, r1, #2
 8004a48:	4810      	ldr	r0, [pc, #64]	; (8004a8c <d7anp_assemble_packet_header+0xb4>)
 8004a4a:	f003 fdd9 	bl	8008600 <__assert_func>
            memcpy(packet->origin_access_id, address_id, 8);
 8004a4e:	4f10      	ldr	r7, [pc, #64]	; (8004a90 <d7anp_assemble_packet_header+0xb8>)
 8004a50:	2208      	movs	r2, #8
 8004a52:	0039      	movs	r1, r7
 8004a54:	3009      	adds	r0, #9
 8004a56:	f010 f9bb 	bl	8014dd0 <memcpy>
            memcpy(data_ptr, address_id, 8);
 8004a5a:	2208      	movs	r2, #8
 8004a5c:	0039      	movs	r1, r7
 8004a5e:	0020      	movs	r0, r4
 8004a60:	f010 f9b6 	bl	8014dd0 <memcpy>
            data_ptr += 8;
 8004a64:	3408      	adds	r4, #8
 8004a66:	e7d2      	b.n	8004a0e <d7anp_assemble_packet_header+0x36>
            memcpy(packet->origin_access_id, address_id, 2);
 8004a68:	4f09      	ldr	r7, [pc, #36]	; (8004a90 <d7anp_assemble_packet_header+0xb8>)
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	0039      	movs	r1, r7
 8004a6e:	3009      	adds	r0, #9
 8004a70:	f010 f9ae 	bl	8014dd0 <memcpy>
            memcpy(data_ptr, address_id, 2);
 8004a74:	2202      	movs	r2, #2
 8004a76:	0039      	movs	r1, r7
 8004a78:	0020      	movs	r0, r4
 8004a7a:	f010 f9a9 	bl	8014dd0 <memcpy>
            data_ptr += 2;
 8004a7e:	1d34      	adds	r4, r6, #4
 8004a80:	e7c5      	b.n	8004a0e <d7anp_assemble_packet_header+0x36>
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	08018640 	.word	0x08018640
 8004a88:	08018764 	.word	0x08018764
 8004a8c:	08018438 	.word	0x08018438
 8004a90:	20001bc4 	.word	0x20001bc4

08004a94 <get_trusted_node>:

#if defined(MODULE_D7AP_NLS_ENABLED)
dae_nwl_trusted_node_t *get_trusted_node(uint8_t *address)
{
 8004a94:	b570      	push	{r4, r5, r6, lr}
 8004a96:	0006      	movs	r6, r0
    //look up the sender's address in the trusted node table
    for(uint8_t i = 0; i < node_security_state.trusted_node_nb; i++)
 8004a98:	2500      	movs	r5, #0
 8004a9a:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <get_trusted_node+0x38>)
 8004a9c:	785b      	ldrb	r3, [r3, #1]
 8004a9e:	42ab      	cmp	r3, r5
 8004aa0:	d912      	bls.n	8004ac8 <get_trusted_node+0x34>
    {
        if(memcmp(node_security_state.trusted_node_table[i].addr, address, 8) == 0)
 8004aa2:	0128      	lsls	r0, r5, #4
 8004aa4:	3008      	adds	r0, #8
 8004aa6:	4b09      	ldr	r3, [pc, #36]	; (8004acc <get_trusted_node+0x38>)
 8004aa8:	18c0      	adds	r0, r0, r3
 8004aaa:	3004      	adds	r0, #4
 8004aac:	2208      	movs	r2, #8
 8004aae:	0031      	movs	r1, r6
 8004ab0:	f010 f966 	bl	8014d80 <memcmp>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	d002      	beq.n	8004abe <get_trusted_node+0x2a>
    for(uint8_t i = 0; i < node_security_state.trusted_node_nb; i++)
 8004ab8:	3501      	adds	r5, #1
 8004aba:	b2ed      	uxtb	r5, r5
 8004abc:	e7ed      	b.n	8004a9a <get_trusted_node+0x6>
            return &(node_security_state.trusted_node_table[i]);
 8004abe:	012c      	lsls	r4, r5, #4
 8004ac0:	4802      	ldr	r0, [pc, #8]	; (8004acc <get_trusted_node+0x38>)
 8004ac2:	1820      	adds	r0, r4, r0
 8004ac4:	3004      	adds	r0, #4
 8004ac6:	e000      	b.n	8004aca <get_trusted_node+0x36>
    }

    return NULL;
 8004ac8:	2000      	movs	r0, #0
}
 8004aca:	bd70      	pop	{r4, r5, r6, pc}
 8004acc:	20001ab8 	.word	0x20001ab8

08004ad0 <add_trusted_node>:

dae_nwl_trusted_node_t *add_trusted_node(uint8_t *address, uint32_t frame_counter,
                                       uint8_t key_counter)
{
 8004ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	9000      	str	r0, [sp, #0]
 8004ad6:	000d      	movs	r5, r1
 8004ad8:	9201      	str	r2, [sp, #4]
    uint8_t index = node_security_state.trusted_node_nb;
 8004ada:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <add_trusted_node+0x44>)
 8004adc:	785b      	ldrb	r3, [r3, #1]
    dae_nwl_trusted_node_t *node;

    if (node_security_state.trusted_node_nb < FRAMEWORK_FS_TRUSTED_NODE_TABLE_SIZE)
 8004ade:	2b0f      	cmp	r3, #15
 8004ae0:	d816      	bhi.n	8004b10 <add_trusted_node+0x40>
        node_security_state.trusted_node_nb++;
 8004ae2:	4f0c      	ldr	r7, [pc, #48]	; (8004b14 <add_trusted_node+0x44>)
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	707a      	strb	r2, [r7, #1]
    {
        DPRINT("SSR is full !");
        return NULL;
    }

    node = &node_security_state.trusted_node_table[index];
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	19dc      	adds	r4, r3, r7
 8004aec:	1d26      	adds	r6, r4, #4
    memcpy(node->addr, address, 8);
 8004aee:	3308      	adds	r3, #8
 8004af0:	19db      	adds	r3, r3, r7
 8004af2:	1d18      	adds	r0, r3, #4
 8004af4:	2208      	movs	r2, #8
 8004af6:	9900      	ldr	r1, [sp, #0]
 8004af8:	f010 f96a 	bl	8014dd0 <memcpy>
    node->frame_counter = frame_counter;
 8004afc:	60a5      	str	r5, [r4, #8]
    node->key_counter = key_counter;
 8004afe:	9b01      	ldr	r3, [sp, #4]
 8004b00:	7123      	strb	r3, [r4, #4]

    DPRINT("Add node <%p> total number <%d>", node, node_security_state.trusted_node_nb);
    /* Update the FS */
    d7ap_fs_add_nwl_security_state_register_entry(node, node_security_state.trusted_node_nb);
 8004b02:	7879      	ldrb	r1, [r7, #1]
 8004b04:	0030      	movs	r0, r6
 8004b06:	f003 fac7 	bl	8008098 <d7ap_fs_add_nwl_security_state_register_entry>
    return node;
}
 8004b0a:	0030      	movs	r0, r6
 8004b0c:	b003      	add	sp, #12
 8004b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NULL;
 8004b10:	2600      	movs	r6, #0
 8004b12:	e7fa      	b.n	8004b0a <add_trusted_node+0x3a>
 8004b14:	20001ab8 	.word	0x20001ab8

08004b18 <d7anp_disassemble_packet_header>:
#endif

bool d7anp_disassemble_packet_header(packet_t* packet, uint8_t *data_idx)
{
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	0004      	movs	r4, r0
 8004b1c:	000d      	movs	r5, r1
    if(packet->hw_radio_packet.length < (*data_idx + 1))
 8004b1e:	780b      	ldrb	r3, [r1, #0]
 8004b20:	229a      	movs	r2, #154	; 0x9a
 8004b22:	0052      	lsls	r2, r2, #1
 8004b24:	5a82      	ldrh	r2, [r0, r2]
 8004b26:	4293      	cmp	r3, r2
 8004b28:	db00      	blt.n	8004b2c <d7anp_disassemble_packet_header+0x14>
 8004b2a:	e0c7      	b.n	8004cbc <d7anp_disassemble_packet_header+0x1a4>
    {
        return false;
    }
    packet->d7anp_ctrl.raw = packet->hw_radio_packet.data[(*data_idx)]; (*data_idx)++;
 8004b2c:	18c3      	adds	r3, r0, r3
 8004b2e:	3337      	adds	r3, #55	; 0x37
 8004b30:	33ff      	adds	r3, #255	; 0xff
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	71c3      	strb	r3, [r0, #7]
 8004b36:	780b      	ldrb	r3, [r1, #0]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	700b      	strb	r3, [r1, #0]

    if (!packet->d7anp_ctrl.origin_void)
 8004b3e:	79c0      	ldrb	r0, [r0, #7]
 8004b40:	09c0      	lsrs	r0, r0, #7
 8004b42:	d13f      	bne.n	8004bc4 <d7anp_disassemble_packet_header+0xac>
    {
        if(packet->hw_radio_packet.length < (*data_idx + 1))
 8004b44:	229a      	movs	r2, #154	; 0x9a
 8004b46:	0052      	lsls	r2, r2, #1
 8004b48:	5aa2      	ldrh	r2, [r4, r2]
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	db00      	blt.n	8004b50 <d7anp_disassemble_packet_header+0x38>
 8004b4e:	e0b6      	b.n	8004cbe <d7anp_disassemble_packet_header+0x1a6>
        {
            return false;
        }
        packet->origin_access_class = packet->hw_radio_packet.data[(*data_idx)]; (*data_idx)++;
 8004b50:	18e3      	adds	r3, r4, r3
 8004b52:	3337      	adds	r3, #55	; 0x37
 8004b54:	33ff      	adds	r3, #255	; 0xff
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	7223      	strb	r3, [r4, #8]
 8004b5a:	7809      	ldrb	r1, [r1, #0]
 8004b5c:	3101      	adds	r1, #1
 8004b5e:	b2c9      	uxtb	r1, r1
 8004b60:	7029      	strb	r1, [r5, #0]

        if (!ID_TYPE_IS_BROADCAST(packet->d7anp_ctrl.origin_id_type))
 8004b62:	79e3      	ldrb	r3, [r4, #7]
 8004b64:	2230      	movs	r2, #48	; 0x30
 8004b66:	0016      	movs	r6, r2
 8004b68:	401e      	ands	r6, r3
 8004b6a:	421a      	tst	r2, r3
 8004b6c:	d01a      	beq.n	8004ba4 <d7anp_disassemble_packet_header+0x8c>
 8004b6e:	2e10      	cmp	r6, #16
 8004b70:	d018      	beq.n	8004ba4 <d7anp_disassemble_packet_header+0x8c>
        {
            uint8_t origin_access_id_size = packet->d7anp_ctrl.origin_id_type == ID_TYPE_VID? 2 : 8;
 8004b72:	2e30      	cmp	r6, #48	; 0x30
 8004b74:	d014      	beq.n	8004ba0 <d7anp_disassemble_packet_header+0x88>
 8004b76:	2608      	movs	r6, #8
            if(packet->hw_radio_packet.length < (*data_idx + origin_access_id_size))
 8004b78:	239a      	movs	r3, #154	; 0x9a
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	5ae2      	ldrh	r2, [r4, r3]
 8004b7e:	1873      	adds	r3, r6, r1
 8004b80:	429a      	cmp	r2, r3
 8004b82:	da00      	bge.n	8004b86 <d7anp_disassemble_packet_header+0x6e>
 8004b84:	e09b      	b.n	8004cbe <d7anp_disassemble_packet_header+0x1a6>
            {
                return false;
            }
            memcpy(packet->origin_access_id, packet->hw_radio_packet.data + (*data_idx), origin_access_id_size); (*data_idx) += origin_access_id_size;
 8004b86:	0023      	movs	r3, r4
 8004b88:	3337      	adds	r3, #55	; 0x37
 8004b8a:	33ff      	adds	r3, #255	; 0xff
 8004b8c:	1859      	adds	r1, r3, r1
 8004b8e:	0032      	movs	r2, r6
 8004b90:	0020      	movs	r0, r4
 8004b92:	3009      	adds	r0, #9
 8004b94:	f010 f91c 	bl	8014dd0 <memcpy>
 8004b98:	782b      	ldrb	r3, [r5, #0]
 8004b9a:	18f6      	adds	r6, r6, r3
 8004b9c:	702e      	strb	r6, [r5, #0]
        {
 8004b9e:	e011      	b.n	8004bc4 <d7anp_disassemble_packet_header+0xac>
            uint8_t origin_access_id_size = packet->d7anp_ctrl.origin_id_type == ID_TYPE_VID? 2 : 8;
 8004ba0:	3e2e      	subs	r6, #46	; 0x2e
 8004ba2:	e7e9      	b.n	8004b78 <d7anp_disassemble_packet_header+0x60>
        }
        else if (packet->d7anp_ctrl.origin_id_type == ID_TYPE_NBID)
 8004ba4:	2e00      	cmp	r6, #0
 8004ba6:	d10d      	bne.n	8004bc4 <d7anp_disassemble_packet_header+0xac>
        {
            if(packet->hw_radio_packet.length < (*data_idx + 1))
 8004ba8:	239a      	movs	r3, #154	; 0x9a
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	5ae3      	ldrh	r3, [r4, r3]
 8004bae:	4299      	cmp	r1, r3
 8004bb0:	db00      	blt.n	8004bb4 <d7anp_disassemble_packet_header+0x9c>
 8004bb2:	e084      	b.n	8004cbe <d7anp_disassemble_packet_header+0x1a6>
            {
                return false;
            }
            packet->origin_access_id[0] = packet->hw_radio_packet.data[(*data_idx)];
 8004bb4:	1861      	adds	r1, r4, r1
 8004bb6:	3137      	adds	r1, #55	; 0x37
 8004bb8:	31ff      	adds	r1, #255	; 0xff
 8004bba:	780b      	ldrb	r3, [r1, #0]
 8004bbc:	7263      	strb	r3, [r4, #9]
            (*data_idx)++;
 8004bbe:	782b      	ldrb	r3, [r5, #0]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	702b      	strb	r3, [r5, #0]
    }

    // TODO hopping

#if defined(MODULE_D7AP_NLS_ENABLED)
    if (packet->d7anp_ctrl.nls_method)
 8004bc4:	79e3      	ldrb	r3, [r4, #7]
 8004bc6:	071b      	lsls	r3, r3, #28
 8004bc8:	d065      	beq.n	8004c96 <d7anp_disassemble_packet_header+0x17e>
    {
        dae_nwl_trusted_node_t *node;
        uint8_t nls_method = packet->d7anp_ctrl.nls_method;
 8004bca:	79e3      	ldrb	r3, [r4, #7]
 8004bcc:	071b      	lsls	r3, r3, #28
 8004bce:	0f1b      	lsrs	r3, r3, #28
        bool create_node = false;
        bool prevent_replay_attack = false;

        DPRINT("Received nls method %d", nls_method);

        if (nls_method == AES_CTR || nls_method == AES_CCM_32 ||
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d007      	beq.n	8004be4 <d7anp_disassemble_packet_header+0xcc>
 8004bd4:	2b07      	cmp	r3, #7
 8004bd6:	d005      	beq.n	8004be4 <d7anp_disassemble_packet_header+0xcc>
 8004bd8:	2b06      	cmp	r3, #6
 8004bda:	d003      	beq.n	8004be4 <d7anp_disassemble_packet_header+0xcc>
            nls_method == AES_CCM_64 || nls_method == AES_CCM_128)
 8004bdc:	2b05      	cmp	r3, #5
 8004bde:	d001      	beq.n	8004be4 <d7anp_disassemble_packet_header+0xcc>
        bool create_node = false;
 8004be0:	2600      	movs	r6, #0
 8004be2:	e050      	b.n	8004c86 <d7anp_disassemble_packet_header+0x16e>
        {
            if(packet->hw_radio_packet.length < (*data_idx + 1 + sizeof(uint32_t)))
 8004be4:	239a      	movs	r3, #154	; 0x9a
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	5ae1      	ldrh	r1, [r4, r3]
 8004bea:	782b      	ldrb	r3, [r5, #0]
 8004bec:	1d5a      	adds	r2, r3, #5
 8004bee:	4291      	cmp	r1, r2
 8004bf0:	d366      	bcc.n	8004cc0 <d7anp_disassemble_packet_header+0x1a8>
            {
                return false;
            }
            // extract the key counter and the frame counter
            packet->d7anp_security.key_counter = packet->hw_radio_packet.data[(*data_idx)]; (*data_idx)++;
 8004bf2:	18e3      	adds	r3, r4, r3
 8004bf4:	3337      	adds	r3, #55	; 0x37
 8004bf6:	33ff      	adds	r3, #255	; 0xff
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	7523      	strb	r3, [r4, #20]
 8004bfc:	782b      	ldrb	r3, [r5, #0]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	702b      	strb	r3, [r5, #0]
            packet->d7anp_security.frame_counter = read_be32(packet->hw_radio_packet.data + (*data_idx));
 8004c04:	0021      	movs	r1, r4
 8004c06:	3137      	adds	r1, #55	; 0x37
 8004c08:	31ff      	adds	r1, #255	; 0xff
 8004c0a:	18ca      	adds	r2, r1, r3
    return ((uint32_t) buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 8004c0c:	5ccb      	ldrb	r3, [r1, r3]
 8004c0e:	061b      	lsls	r3, r3, #24
 8004c10:	7851      	ldrb	r1, [r2, #1]
 8004c12:	0409      	lsls	r1, r1, #16
 8004c14:	430b      	orrs	r3, r1
 8004c16:	7891      	ldrb	r1, [r2, #2]
 8004c18:	0209      	lsls	r1, r1, #8
 8004c1a:	430b      	orrs	r3, r1
 8004c1c:	78d2      	ldrb	r2, [r2, #3]
 8004c1e:	4313      	orrs	r3, r2
            packet->d7anp_security.frame_counter = read_be32(packet->hw_radio_packet.data + (*data_idx));
 8004c20:	61a3      	str	r3, [r4, #24]
            (*data_idx) += sizeof(uint32_t);
 8004c22:	782b      	ldrb	r3, [r5, #0]
 8004c24:	3304      	adds	r3, #4
 8004c26:	702b      	strb	r3, [r5, #0]

            DPRINT("Received key counter <%d>, frame counter <%ld>", packet->d7anp_security.key_counter, packet->d7anp_security.frame_counter);

            if (node_security_state.filter_mode & ENABLE_SSR_FILTER)
 8004c28:	4b2a      	ldr	r3, [pc, #168]	; (8004cd4 <d7anp_disassemble_packet_header+0x1bc>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	07db      	lsls	r3, r3, #31
 8004c2e:	d529      	bpl.n	8004c84 <d7anp_disassemble_packet_header+0x16c>
        }

        if (prevent_replay_attack)
        {
            /* When Origin ID is not provided, try to use the latest node */
            if (ID_TYPE_IS_BROADCAST(packet->d7anp_ctrl.origin_id_type))
 8004c30:	79e3      	ldrb	r3, [r4, #7]
 8004c32:	2230      	movs	r2, #48	; 0x30
 8004c34:	0011      	movs	r1, r2
 8004c36:	4019      	ands	r1, r3
 8004c38:	421a      	tst	r2, r3
 8004c3a:	d001      	beq.n	8004c40 <d7anp_disassemble_packet_header+0x128>
 8004c3c:	2910      	cmp	r1, #16
 8004c3e:	d111      	bne.n	8004c64 <d7anp_disassemble_packet_header+0x14c>
            {
                // frame is not accepted if the Origin ID is really unknown
                if (!latest_node)
 8004c40:	4b25      	ldr	r3, [pc, #148]	; (8004cd8 <d7anp_disassemble_packet_header+0x1c0>)
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	2800      	cmp	r0, #0
 8004c46:	d03d      	beq.n	8004cc4 <d7anp_disassemble_packet_header+0x1ac>
                node = latest_node;
            }
            else
                node = get_trusted_node(packet->origin_access_id);

            if (node && (node->frame_counter > packet->d7anp_security.frame_counter ||
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	d005      	beq.n	8004c58 <d7anp_disassemble_packet_header+0x140>
 8004c4c:	6843      	ldr	r3, [r0, #4]
 8004c4e:	69a2      	ldr	r2, [r4, #24]
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d839      	bhi.n	8004cc8 <d7anp_disassemble_packet_header+0x1b0>
 8004c54:	3301      	adds	r3, #1
 8004c56:	d039      	beq.n	8004ccc <d7anp_disassemble_packet_header+0x1b4>
                DPRINT("Replay attack detected cnt %ld->%ld shift back", node->frame_counter, packet->d7anp_security.frame_counter);
                return false;
            }

            // update the node
            if (node)
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d008      	beq.n	8004c6e <d7anp_disassemble_packet_header+0x156>
                node->frame_counter = packet->d7anp_security.frame_counter;
 8004c5c:	69a3      	ldr	r3, [r4, #24]
 8004c5e:	6043      	str	r3, [r0, #4]
        bool create_node = false;
 8004c60:	2600      	movs	r6, #0
 8004c62:	e010      	b.n	8004c86 <d7anp_disassemble_packet_header+0x16e>
                node = get_trusted_node(packet->origin_access_id);
 8004c64:	0020      	movs	r0, r4
 8004c66:	3009      	adds	r0, #9
 8004c68:	f7ff ff14 	bl	8004a94 <get_trusted_node>
 8004c6c:	e7ec      	b.n	8004c48 <d7anp_disassemble_packet_header+0x130>
            else
            {
                if (ID_TYPE_IS_BROADCAST(packet->dll_header.control_target_id_type) &&
 8004c6e:	79a3      	ldrb	r3, [r4, #6]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d901      	bls.n	8004c78 <d7anp_disassemble_packet_header+0x160>
                {
                    DPRINT("New SSR entry not authorized in broadcast");
                    return false;
                }
                else
                    create_node = true;
 8004c74:	2601      	movs	r6, #1
 8004c76:	e006      	b.n	8004c86 <d7anp_disassemble_packet_header+0x16e>
                     !(node_security_state.filter_mode & ALLOW_NEW_SSR_ENTRY_IN_BCAST))
 8004c78:	4b16      	ldr	r3, [pc, #88]	; (8004cd4 <d7anp_disassemble_packet_header+0x1bc>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
                if (ID_TYPE_IS_BROADCAST(packet->dll_header.control_target_id_type) &&
 8004c7c:	079b      	lsls	r3, r3, #30
 8004c7e:	d527      	bpl.n	8004cd0 <d7anp_disassemble_packet_header+0x1b8>
                    create_node = true;
 8004c80:	2601      	movs	r6, #1
 8004c82:	e000      	b.n	8004c86 <d7anp_disassemble_packet_header+0x16e>
        bool create_node = false;
 8004c84:	2600      	movs	r6, #0
            }
        }

        if (!d7anp_unsecure_payload(packet, *data_idx))
 8004c86:	7829      	ldrb	r1, [r5, #0]
 8004c88:	0020      	movs	r0, r4
 8004c8a:	f7ff fdc7 	bl	800481c <d7anp_unsecure_payload>
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	d015      	beq.n	8004cbe <d7anp_disassemble_packet_header+0x1a6>
            return false;

        if (create_node)
 8004c92:	2e00      	cmp	r6, #0
 8004c94:	d104      	bne.n	8004ca0 <d7anp_disassemble_packet_header+0x188>
             add_trusted_node(packet->origin_access_id, packet->d7anp_security.frame_counter,
                              packet->d7anp_security.key_counter);
    }
#endif

    assert(!packet->d7anp_ctrl.hop_enabled); // TODO hopping not yet supported
 8004c96:	79e3      	ldrb	r3, [r4, #7]
 8004c98:	065b      	lsls	r3, r3, #25
 8004c9a:	d408      	bmi.n	8004cae <d7anp_disassemble_packet_header+0x196>

    return true;
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	e00e      	b.n	8004cbe <d7anp_disassemble_packet_header+0x1a6>
             add_trusted_node(packet->origin_access_id, packet->d7anp_security.frame_counter,
 8004ca0:	7d22      	ldrb	r2, [r4, #20]
 8004ca2:	69a1      	ldr	r1, [r4, #24]
 8004ca4:	0020      	movs	r0, r4
 8004ca6:	3009      	adds	r0, #9
 8004ca8:	f7ff ff12 	bl	8004ad0 <add_trusted_node>
 8004cac:	e7f3      	b.n	8004c96 <d7anp_disassemble_packet_header+0x17e>
    assert(!packet->d7anp_ctrl.hop_enabled); // TODO hopping not yet supported
 8004cae:	21c1      	movs	r1, #193	; 0xc1
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <d7anp_disassemble_packet_header+0x1c4>)
 8004cb2:	4a0b      	ldr	r2, [pc, #44]	; (8004ce0 <d7anp_disassemble_packet_header+0x1c8>)
 8004cb4:	0089      	lsls	r1, r1, #2
 8004cb6:	480b      	ldr	r0, [pc, #44]	; (8004ce4 <d7anp_disassemble_packet_header+0x1cc>)
 8004cb8:	f003 fca2 	bl	8008600 <__assert_func>
        return false;
 8004cbc:	2000      	movs	r0, #0
}
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}
                return false;
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	e7fc      	b.n	8004cbe <d7anp_disassemble_packet_header+0x1a6>
                     return false;
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	e7fa      	b.n	8004cbe <d7anp_disassemble_packet_header+0x1a6>
                return false;
 8004cc8:	2000      	movs	r0, #0
 8004cca:	e7f8      	b.n	8004cbe <d7anp_disassemble_packet_header+0x1a6>
 8004ccc:	2000      	movs	r0, #0
 8004cce:	e7f6      	b.n	8004cbe <d7anp_disassemble_packet_header+0x1a6>
                    return false;
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	e7f4      	b.n	8004cbe <d7anp_disassemble_packet_header+0x1a6>
 8004cd4:	20001ab8 	.word	0x20001ab8
 8004cd8:	20001ab4 	.word	0x20001ab4
 8004cdc:	08018640 	.word	0x08018640
 8004ce0:	08018784 	.word	0x08018784
 8004ce4:	08018438 	.word	0x08018438

08004ce8 <d7anp_signal_transmission_failure>:

void d7anp_signal_transmission_failure()
{
 8004ce8:	b510      	push	{r4, lr}
    assert(d7anp_state == D7ANP_STATE_TRANSMIT);
 8004cea:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <d7anp_signal_transmission_failure+0x24>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d106      	bne.n	8004d00 <d7anp_signal_transmission_failure+0x18>

    DPRINT("CSMA-CA insertion failed");

    // switch back to the previous state before the transmission
    switch_state(d7anp_prev_state);
 8004cf2:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <d7anp_signal_transmission_failure+0x28>)
 8004cf4:	7818      	ldrb	r0, [r3, #0]
 8004cf6:	f7ff fadd 	bl	80042b4 <switch_state>

    d7atp_signal_transmission_failure();
 8004cfa:	f7ff f905 	bl	8003f08 <d7atp_signal_transmission_failure>
}
 8004cfe:	bd10      	pop	{r4, pc}
    assert(d7anp_state == D7ANP_STATE_TRANSMIT);
 8004d00:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <d7anp_signal_transmission_failure+0x2c>)
 8004d02:	4a05      	ldr	r2, [pc, #20]	; (8004d18 <d7anp_signal_transmission_failure+0x30>)
 8004d04:	4905      	ldr	r1, [pc, #20]	; (8004d1c <d7anp_signal_transmission_failure+0x34>)
 8004d06:	4806      	ldr	r0, [pc, #24]	; (8004d20 <d7anp_signal_transmission_failure+0x38>)
 8004d08:	f003 fc7a 	bl	8008600 <__assert_func>
 8004d0c:	20001aad 	.word	0x20001aad
 8004d10:	20001aac 	.word	0x20001aac
 8004d14:	08018660 	.word	0x08018660
 8004d18:	080187a4 	.word	0x080187a4
 8004d1c:	0000030b 	.word	0x0000030b
 8004d20:	08018438 	.word	0x08018438

08004d24 <d7anp_signal_packet_transmitted>:

void d7anp_signal_packet_transmitted(packet_t* packet)
{
 8004d24:	b510      	push	{r4, lr}
 8004d26:	0004      	movs	r4, r0
    assert(d7anp_state == D7ANP_STATE_TRANSMIT);
 8004d28:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <d7anp_signal_packet_transmitted+0x28>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d107      	bne.n	8004d40 <d7anp_signal_packet_transmitted+0x1c>

    /* switch back to the same state as before the transmission */
    switch_state(d7anp_prev_state);
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <d7anp_signal_packet_transmitted+0x2c>)
 8004d32:	7818      	ldrb	r0, [r3, #0]
 8004d34:	f7ff fabe 	bl	80042b4 <switch_state>
    d7atp_signal_packet_transmitted(packet);
 8004d38:	0020      	movs	r0, r4
 8004d3a:	f7ff f827 	bl	8003d8c <d7atp_signal_packet_transmitted>

}
 8004d3e:	bd10      	pop	{r4, pc}
    assert(d7anp_state == D7ANP_STATE_TRANSMIT);
 8004d40:	4b04      	ldr	r3, [pc, #16]	; (8004d54 <d7anp_signal_packet_transmitted+0x30>)
 8004d42:	4a05      	ldr	r2, [pc, #20]	; (8004d58 <d7anp_signal_packet_transmitted+0x34>)
 8004d44:	4905      	ldr	r1, [pc, #20]	; (8004d5c <d7anp_signal_packet_transmitted+0x38>)
 8004d46:	4806      	ldr	r0, [pc, #24]	; (8004d60 <d7anp_signal_packet_transmitted+0x3c>)
 8004d48:	f003 fc5a 	bl	8008600 <__assert_func>
 8004d4c:	20001aad 	.word	0x20001aad
 8004d50:	20001aac 	.word	0x20001aac
 8004d54:	08018660 	.word	0x08018660
 8004d58:	080187c8 	.word	0x080187c8
 8004d5c:	00000317 	.word	0x00000317
 8004d60:	08018438 	.word	0x08018438

08004d64 <d7anp_process_received_packet>:

void d7anp_process_received_packet(packet_t* packet)
{
 8004d64:	b570      	push	{r4, r5, r6, lr}
 8004d66:	0004      	movs	r4, r0
    // TODO handle case where we are intermediate node while hopping (ie start FG scan, after auth if needed, and return)

    if (d7anp_state == D7ANP_STATE_FOREGROUND_SCAN)
 8004d68:	4b1b      	ldr	r3, [pc, #108]	; (8004dd8 <d7anp_process_received_packet+0x74>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d005      	beq.n	8004d7c <d7anp_process_received_packet+0x18>
    {
        DPRINT("Received packet while in D7ANP_STATE_FOREGROUND_SCAN");
    }
    else if (d7anp_state == D7ANP_STATE_IDLE)
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d12a      	bne.n	8004dca <d7anp_process_received_packet+0x66>
    {
        DPRINT("Received packet while in D7ANP_STATE_IDLE (scan automation)");

        // check if DLL was performing a background scan
        if (packet->type == BACKGROUND_ADV)
 8004d74:	332b      	adds	r3, #43	; 0x2b
 8004d76:	5cc3      	ldrb	r3, [r0, r3]
 8004d78:	2b05      	cmp	r3, #5
 8004d7a:	d003      	beq.n	8004d84 <d7anp_process_received_packet+0x20>
        }
    }
    else
        assert(false);

    d7atp_process_received_packet(packet);
 8004d7c:	0020      	movs	r0, r4
 8004d7e:	f7ff f8eb 	bl	8003f58 <d7atp_process_received_packet>
}
 8004d82:	bd70      	pop	{r4, r5, r6, pc}
            timer_tick_t time_elapsed = timer_get_counter_value() - packet->hw_radio_packet.rx_meta.timestamp;
 8004d84:	f00b fabc 	bl	8010300 <timer_get_counter_value>
 8004d88:	2394      	movs	r3, #148	; 0x94
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	58e3      	ldr	r3, [r4, r3]
 8004d8e:	1ac3      	subs	r3, r0, r3
            if (packet->ETA >= time_elapsed + FG_SCAN_STARTUP_TIME)
 8004d90:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8004d92:	1cda      	adds	r2, r3, #3
 8004d94:	4290      	cmp	r0, r2
 8004d96:	d312      	bcc.n	8004dbe <d7anp_process_received_packet+0x5a>
                uint16_t delay = packet->ETA - time_elapsed - FG_SCAN_STARTUP_TIME;
 8004d98:	1ac5      	subs	r5, r0, r3
 8004d9a:	b2ad      	uxth	r5, r5
 8004d9c:	3d03      	subs	r5, #3
 8004d9e:	b2ad      	uxth	r5, r5
                if(delay <= CLK_ACCURACY_100_MS * (packet->ETA/100 + 1))
 8004da0:	2164      	movs	r1, #100	; 0x64
 8004da2:	f00c feb5 	bl	8011b10 <__udivsi3>
 8004da6:	b280      	uxth	r0, r0
 8004da8:	1c43      	adds	r3, r0, #1
 8004daa:	429d      	cmp	r5, r3
 8004dac:	dd0b      	ble.n	8004dc6 <d7anp_process_received_packet+0x62>
                  delay -= CLK_ACCURACY_100_MS * (packet->ETA/100 + 1);
 8004dae:	1a28      	subs	r0, r5, r0
 8004db0:	b280      	uxth	r0, r0
 8004db2:	3801      	subs	r0, #1
 8004db4:	b280      	uxth	r0, r0
                schedule_foreground_scan_after_D7AAdvP(delay);
 8004db6:	f7ff fa65 	bl	8004284 <schedule_foreground_scan_after_D7AAdvP>
                dll_stop_background_scan();
 8004dba:	f001 f9fb 	bl	80061b4 <dll_stop_background_scan>
            packet_queue_free_packet(packet);
 8004dbe:	0020      	movs	r0, r4
 8004dc0:	f000 fafa 	bl	80053b8 <packet_queue_free_packet>
            return;
 8004dc4:	e7dd      	b.n	8004d82 <d7anp_process_received_packet+0x1e>
                  delay = 0;
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	e7f5      	b.n	8004db6 <d7anp_process_received_packet+0x52>
        assert(false);
 8004dca:	4b04      	ldr	r3, [pc, #16]	; (8004ddc <d7anp_process_received_packet+0x78>)
 8004dcc:	4a04      	ldr	r2, [pc, #16]	; (8004de0 <d7anp_process_received_packet+0x7c>)
 8004dce:	4905      	ldr	r1, [pc, #20]	; (8004de4 <d7anp_process_received_packet+0x80>)
 8004dd0:	4805      	ldr	r0, [pc, #20]	; (8004de8 <d7anp_process_received_packet+0x84>)
 8004dd2:	f003 fc15 	bl	8008600 <__assert_func>
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	20001aad 	.word	0x20001aad
 8004ddc:	080169c8 	.word	0x080169c8
 8004de0:	080187e8 	.word	0x080187e8
 8004de4:	00000349 	.word	0x00000349
 8004de8:	08018438 	.word	0x08018438

08004dec <cont_tx_done_callback>:
static engineering_mode_t active_mode = EM_OFF;

static void start_mode();
static void stop_mode();

static void cont_tx_done_callback(packet_t* packet) { 
 8004dec:	b510      	push	{r4, lr}
  phy_switch_to_sleep_mode();
 8004dee:	f002 f927 	bl	8007040 <phy_switch_to_sleep_mode>
}
 8004df2:	bd10      	pop	{r4, pc}

08004df4 <stop_mode>:
      phy_switch_to_standby_mode();
      break;
  }
}

static void stop_mode() {
 8004df4:	b510      	push	{r4, lr}
  switch (active_mode)
 8004df6:	4b08      	ldr	r3, [pc, #32]	; (8004e18 <stop_mode+0x24>)
 8004df8:	7819      	ldrb	r1, [r3, #0]
 8004dfa:	2902      	cmp	r1, #2
 8004dfc:	d005      	beq.n	8004e0a <stop_mode+0x16>
 8004dfe:	2905      	cmp	r1, #5
 8004e00:	d007      	beq.n	8004e12 <stop_mode+0x1e>
      break;
    case EM_CONTINUOUS_STANDBY:
      phy_switch_to_sleep_mode();
      break;
    default:
      log_print_error_string("we can't 'stop' mode %i", active_mode);
 8004e02:	4806      	ldr	r0, [pc, #24]	; (8004e1c <stop_mode+0x28>)
 8004e04:	f00a f8ec 	bl	800efe0 <log_print_error_string>
      break;
  }
}
 8004e08:	e002      	b.n	8004e10 <stop_mode+0x1c>
      stop = true;
 8004e0a:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <stop_mode+0x2c>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	701a      	strb	r2, [r3, #0]
}
 8004e10:	bd10      	pop	{r4, pc}
      phy_switch_to_sleep_mode();
 8004e12:	f002 f915 	bl	8007040 <phy_switch_to_sleep_mode>
      break;
 8004e16:	e7fb      	b.n	8004e10 <stop_mode+0x1c>
 8004e18:	20001bf8 	.word	0x20001bf8
 8004e1c:	08018808 	.word	0x08018808
 8004e20:	20001d2e 	.word	0x20001d2e

08004e24 <packet_received_em>:
static void packet_received_em(packet_t* packet) {
 8004e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e26:	46c6      	mov	lr, r8
 8004e28:	b500      	push	{lr}
 8004e2a:	b092      	sub	sp, #72	; 0x48
 8004e2c:	0004      	movs	r4, r0
  uint16_t crc = __builtin_bswap16(crc_calculate(packet->hw_radio_packet.data, packet->hw_radio_packet.length - 2));
 8004e2e:	0005      	movs	r5, r0
 8004e30:	3537      	adds	r5, #55	; 0x37
 8004e32:	35ff      	adds	r5, #255	; 0xff
 8004e34:	269a      	movs	r6, #154	; 0x9a
 8004e36:	0076      	lsls	r6, r6, #1
 8004e38:	5b81      	ldrh	r1, [r0, r6]
 8004e3a:	3902      	subs	r1, #2
 8004e3c:	b2c9      	uxtb	r1, r1
 8004e3e:	0028      	movs	r0, r5
 8004e40:	f009 f9da 	bl	800e1f8 <crc_calculate>
 8004e44:	ba43      	rev16	r3, r0
 8004e46:	203e      	movs	r0, #62	; 0x3e
 8004e48:	aa02      	add	r2, sp, #8
 8004e4a:	4694      	mov	ip, r2
 8004e4c:	4460      	add	r0, ip
 8004e4e:	8003      	strh	r3, [r0, #0]
  if(memcmp(&crc, packet->hw_radio_packet.data + packet->hw_radio_packet.length - 2, 2) != 0)
 8004e50:	5ba1      	ldrh	r1, [r4, r6]
 8004e52:	3902      	subs	r1, #2
 8004e54:	1869      	adds	r1, r5, r1
 8004e56:	2202      	movs	r2, #2
 8004e58:	f00f ff92 	bl	8014d80 <memcmp>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d00a      	beq.n	8004e76 <packet_received_em+0x52>
      per_missed_packets_counter++;
 8004e60:	4a5e      	ldr	r2, [pc, #376]	; (8004fdc <packet_received_em+0x1b8>)
 8004e62:	8813      	ldrh	r3, [r2, #0]
 8004e64:	3301      	adds	r3, #1
 8004e66:	8013      	strh	r3, [r2, #0]
  packet_queue_free_packet(packet);
 8004e68:	0020      	movs	r0, r4
 8004e6a:	f000 faa5 	bl	80053b8 <packet_queue_free_packet>
}
 8004e6e:	b012      	add	sp, #72	; 0x48
 8004e70:	bc04      	pop	{r2}
 8004e72:	4690      	mov	r8, r2
 8004e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
      uint16_t msg_counter = 0;
 8004e76:	230a      	movs	r3, #10
 8004e78:	aa02      	add	r2, sp, #8
 8004e7a:	4694      	mov	ip, r2
 8004e7c:	4463      	add	r3, ip
 8004e7e:	2200      	movs	r2, #0
 8004e80:	801a      	strh	r2, [r3, #0]
      uint16_t data_len = packet->hw_radio_packet.length - sizeof(msg_counter) - 2;
 8004e82:	239a      	movs	r3, #154	; 0x9a
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	5ae5      	ldrh	r5, [r4, r3]
 8004e88:	3d04      	subs	r5, #4
 8004e8a:	b2ad      	uxth	r5, r5
      if(data_len > sizeof(rx_data))
 8004e8c:	2d06      	cmp	r5, #6
 8004e8e:	d904      	bls.n	8004e9a <packet_received_em+0x76>
        per_missed_packets_counter++;
 8004e90:	4a52      	ldr	r2, [pc, #328]	; (8004fdc <packet_received_em+0x1b8>)
 8004e92:	8813      	ldrh	r3, [r2, #0]
 8004e94:	3301      	adds	r3, #1
 8004e96:	8013      	strh	r3, [r2, #0]
        DPRINT("##fault##");
 8004e98:	e7e6      	b.n	8004e68 <packet_received_em+0x44>
        memcpy(&msg_counter, packet->hw_radio_packet.data + 1, sizeof(msg_counter));
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	0021      	movs	r1, r4
 8004e9e:	3138      	adds	r1, #56	; 0x38
 8004ea0:	31ff      	adds	r1, #255	; 0xff
 8004ea2:	200a      	movs	r0, #10
 8004ea4:	ab02      	add	r3, sp, #8
 8004ea6:	469c      	mov	ip, r3
 8004ea8:	4460      	add	r0, ip
 8004eaa:	f00f ff91 	bl	8014dd0 <memcpy>
        memcpy(rx_data, packet->hw_radio_packet.data + 1 + sizeof(msg_counter), data_len);
 8004eae:	002a      	movs	r2, r5
 8004eb0:	0021      	movs	r1, r4
 8004eb2:	313a      	adds	r1, #58	; 0x3a
 8004eb4:	31ff      	adds	r1, #255	; 0xff
 8004eb6:	a805      	add	r0, sp, #20
 8004eb8:	f00f ff8a 	bl	8014dd0 <memcpy>
        if((per_start_index == 65535) || (msg_counter == 1)) {
 8004ebc:	4b48      	ldr	r3, [pc, #288]	; (8004fe0 <packet_received_em+0x1bc>)
 8004ebe:	881a      	ldrh	r2, [r3, #0]
 8004ec0:	4b48      	ldr	r3, [pc, #288]	; (8004fe4 <packet_received_em+0x1c0>)
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d006      	beq.n	8004ed4 <packet_received_em+0xb0>
 8004ec6:	230a      	movs	r3, #10
 8004ec8:	aa02      	add	r2, sp, #8
 8004eca:	4694      	mov	ip, r2
 8004ecc:	4463      	add	r3, ip
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d10e      	bne.n	8004ef2 <packet_received_em+0xce>
            per_start_index = msg_counter - 1;
 8004ed4:	230a      	movs	r3, #10
 8004ed6:	aa02      	add	r2, sp, #8
 8004ed8:	4694      	mov	ip, r2
 8004eda:	4463      	add	r3, ip
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	4a3f      	ldr	r2, [pc, #252]	; (8004fe0 <packet_received_em+0x1bc>)
 8004ee2:	8013      	strh	r3, [r2, #0]
            per_received_packets_counter = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4a40      	ldr	r2, [pc, #256]	; (8004fe8 <packet_received_em+0x1c4>)
 8004ee8:	8013      	strh	r3, [r2, #0]
            per_packet_counter = 0;
 8004eea:	4a40      	ldr	r2, [pc, #256]	; (8004fec <packet_received_em+0x1c8>)
 8004eec:	8013      	strh	r3, [r2, #0]
            per_missed_packets_counter = 0;
 8004eee:	4a3b      	ldr	r2, [pc, #236]	; (8004fdc <packet_received_em+0x1b8>)
 8004ef0:	8013      	strh	r3, [r2, #0]
        uint16_t expected_counter = per_packet_counter + 1 + per_start_index;
 8004ef2:	4b3e      	ldr	r3, [pc, #248]	; (8004fec <packet_received_em+0x1c8>)
 8004ef4:	8819      	ldrh	r1, [r3, #0]
 8004ef6:	4b3a      	ldr	r3, [pc, #232]	; (8004fe0 <packet_received_em+0x1bc>)
 8004ef8:	8818      	ldrh	r0, [r3, #0]
 8004efa:	180b      	adds	r3, r1, r0
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3301      	adds	r3, #1
 8004f00:	b29b      	uxth	r3, r3
        if(msg_counter == expected_counter)
 8004f02:	220a      	movs	r2, #10
 8004f04:	ad02      	add	r5, sp, #8
 8004f06:	46ac      	mov	ip, r5
 8004f08:	4462      	add	r2, ip
 8004f0a:	8812      	ldrh	r2, [r2, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d04d      	beq.n	8004fac <packet_received_em+0x188>
        else if(msg_counter > expected_counter)
 8004f10:	d954      	bls.n	8004fbc <packet_received_em+0x198>
            per_missed_packets_counter += msg_counter - expected_counter;
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	4931      	ldr	r1, [pc, #196]	; (8004fdc <packet_received_em+0x1b8>)
 8004f18:	880d      	ldrh	r5, [r1, #0]
 8004f1a:	195b      	adds	r3, r3, r5
 8004f1c:	800b      	strh	r3, [r1, #0]
            per_packet_counter = msg_counter - per_start_index;
 8004f1e:	1a12      	subs	r2, r2, r0
 8004f20:	4b32      	ldr	r3, [pc, #200]	; (8004fec <packet_received_em+0x1c8>)
 8004f22:	801a      	strh	r2, [r3, #0]
        assert((msg_counter - per_start_index) != 0); 
 8004f24:	230a      	movs	r3, #10
 8004f26:	aa02      	add	r2, sp, #8
 8004f28:	4694      	mov	ip, r2
 8004f2a:	4463      	add	r3, ip
 8004f2c:	881d      	ldrh	r5, [r3, #0]
 8004f2e:	4b2c      	ldr	r3, [pc, #176]	; (8004fe0 <packet_received_em+0x1bc>)
 8004f30:	881e      	ldrh	r6, [r3, #0]
 8004f32:	42b5      	cmp	r5, r6
 8004f34:	d048      	beq.n	8004fc8 <packet_received_em+0x1a4>
        if(msg_counter > 0)
 8004f36:	2d00      	cmp	r5, #0
 8004f38:	d04c      	beq.n	8004fd4 <packet_received_em+0x1b0>
            per = 100.0 - ((double)per_received_packets_counter / (double)(msg_counter - per_start_index)) * 100.0;
 8004f3a:	4b2b      	ldr	r3, [pc, #172]	; (8004fe8 <packet_received_em+0x1c4>)
 8004f3c:	8818      	ldrh	r0, [r3, #0]
 8004f3e:	f00f fc5f 	bl	8014800 <__aeabi_ui2d>
 8004f42:	9002      	str	r0, [sp, #8]
 8004f44:	9103      	str	r1, [sp, #12]
 8004f46:	1ba8      	subs	r0, r5, r6
 8004f48:	f00f fc2a 	bl	80147a0 <__aeabi_i2d>
 8004f4c:	0002      	movs	r2, r0
 8004f4e:	000b      	movs	r3, r1
 8004f50:	9802      	ldr	r0, [sp, #8]
 8004f52:	9903      	ldr	r1, [sp, #12]
 8004f54:	f00e f9cc 	bl	80132f0 <__aeabi_ddiv>
 8004f58:	2200      	movs	r2, #0
 8004f5a:	4b25      	ldr	r3, [pc, #148]	; (8004ff0 <packet_received_em+0x1cc>)
 8004f5c:	f00e fdce 	bl	8013afc <__aeabi_dmul>
 8004f60:	0002      	movs	r2, r0
 8004f62:	000b      	movs	r3, r1
 8004f64:	2000      	movs	r0, #0
 8004f66:	4922      	ldr	r1, [pc, #136]	; (8004ff0 <packet_received_em+0x1cc>)
 8004f68:	f00f f834 	bl	8013fd4 <__aeabi_dsub>
 8004f6c:	0006      	movs	r6, r0
 8004f6e:	000f      	movs	r7, r1
        if(msg_counter % 5 == 0) {
 8004f70:	2105      	movs	r1, #5
 8004f72:	0028      	movs	r0, r5
 8004f74:	f00c fe52 	bl	8011c1c <__aeabi_uidivmod>
 8004f78:	b289      	uxth	r1, r1
 8004f7a:	2900      	cmp	r1, #0
 8004f7c:	d000      	beq.n	8004f80 <packet_received_em+0x15c>
 8004f7e:	e773      	b.n	8004e68 <packet_received_em+0x44>
          sprintf(to_uart_uint, "PER %i%%. Counter %i, rssi %idBm      ", (int)per, msg_counter, packet->hw_radio_packet.rx_meta.rssi);
 8004f80:	2397      	movs	r3, #151	; 0x97
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	5ee3      	ldrsh	r3, [r4, r3]
 8004f86:	4698      	mov	r8, r3
 8004f88:	0030      	movs	r0, r6
 8004f8a:	0039      	movs	r1, r7
 8004f8c:	f00f fbd2 	bl	8014734 <__aeabi_d2iz>
 8004f90:	0002      	movs	r2, r0
 8004f92:	4643      	mov	r3, r8
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	002b      	movs	r3, r5
 8004f98:	4916      	ldr	r1, [pc, #88]	; (8004ff4 <packet_received_em+0x1d0>)
 8004f9a:	a807      	add	r0, sp, #28
 8004f9c:	f010 f952 	bl	8015244 <siprintf>
          modem_interface_transfer_bytes((uint8_t*)to_uart_uint, 40, 0x04); //SERIAL_MESSAGE_TYPE_LOGGING
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	2128      	movs	r1, #40	; 0x28
 8004fa4:	a807      	add	r0, sp, #28
 8004fa6:	f00a f865 	bl	800f074 <modem_interface_transfer_bytes>
          DPRINT("PER = %i%%\n counter <%i>, rssi <%idBm>, length <%i>, timestamp <%lu>\n", (int)per, msg_counter, packet->hw_radio_packet.rx_meta.rssi, packet->hw_radio_packet.length + 1, packet->hw_radio_packet.rx_meta.timestamp);
 8004faa:	e75d      	b.n	8004e68 <packet_received_em+0x44>
            per_received_packets_counter++;
 8004fac:	4a0e      	ldr	r2, [pc, #56]	; (8004fe8 <packet_received_em+0x1c4>)
 8004fae:	8813      	ldrh	r3, [r2, #0]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	8013      	strh	r3, [r2, #0]
            per_packet_counter++;
 8004fb4:	3101      	adds	r1, #1
 8004fb6:	4b0d      	ldr	r3, [pc, #52]	; (8004fec <packet_received_em+0x1c8>)
 8004fb8:	8019      	strh	r1, [r3, #0]
 8004fba:	e7b3      	b.n	8004f24 <packet_received_em+0x100>
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2107      	movs	r1, #7
 8004fc0:	480d      	ldr	r0, [pc, #52]	; (8004ff8 <packet_received_em+0x1d4>)
 8004fc2:	f00a faef 	bl	800f5a4 <sched_post_task_prio>
 8004fc6:	e7ad      	b.n	8004f24 <packet_received_em+0x100>
        assert((msg_counter - per_start_index) != 0); 
 8004fc8:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <packet_received_em+0x1d8>)
 8004fca:	4a0d      	ldr	r2, [pc, #52]	; (8005000 <packet_received_em+0x1dc>)
 8004fcc:	218d      	movs	r1, #141	; 0x8d
 8004fce:	480d      	ldr	r0, [pc, #52]	; (8005004 <packet_received_em+0x1e0>)
 8004fd0:	f003 fb16 	bl	8008600 <__assert_func>
        double per = 0;
 8004fd4:	2600      	movs	r6, #0
 8004fd6:	2700      	movs	r7, #0
 8004fd8:	e7ca      	b.n	8004f70 <packet_received_em+0x14c>
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	20001c0e 	.word	0x20001c0e
 8004fe0:	2000055a 	.word	0x2000055a
 8004fe4:	0000ffff 	.word	0x0000ffff
 8004fe8:	20001d24 	.word	0x20001d24
 8004fec:	20001d20 	.word	0x20001d20
 8004ff0:	40590000 	.word	0x40590000
 8004ff4:	08018888 	.word	0x08018888
 8004ff8:	08005049 	.word	0x08005049
 8004ffc:	08018820 	.word	0x08018820
 8005000:	080188e0 	.word	0x080188e0
 8005004:	08018848 	.word	0x08018848

08005008 <packet_transmitted_callback>:
static void packet_transmitted_callback(packet_t* packet) {
 8005008:	b500      	push	{lr}
 800500a:	b083      	sub	sp, #12
  if(per_packet_counter >= per_packet_limit && per_packet_limit != 25500) { //timeout of 255 = unlimited
 800500c:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <packet_transmitted_callback+0x30>)
 800500e:	881a      	ldrh	r2, [r3, #0]
 8005010:	4b0a      	ldr	r3, [pc, #40]	; (800503c <packet_transmitted_callback+0x34>)
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d302      	bcc.n	800501e <packet_transmitted_callback+0x16>
 8005018:	4a09      	ldr	r2, [pc, #36]	; (8005040 <packet_transmitted_callback+0x38>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d109      	bne.n	8005032 <packet_transmitted_callback+0x2a>
 800501e:	f00b f96f 	bl	8010300 <timer_get_counter_value>
 8005022:	0001      	movs	r1, r0
 8005024:	3114      	adds	r1, #20
 8005026:	2300      	movs	r3, #0
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	2207      	movs	r2, #7
 800502c:	4805      	ldr	r0, [pc, #20]	; (8005044 <packet_transmitted_callback+0x3c>)
 800502e:	f00b fb79 	bl	8010724 <timer_post_task_prio>
}
 8005032:	b003      	add	sp, #12
 8005034:	bd00      	pop	{pc}
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	20001d20 	.word	0x20001d20
 800503c:	20001d22 	.word	0x20001d22
 8005040:	0000639c 	.word	0x0000639c
 8005044:	08005049 	.word	0x08005049

08005048 <start_mode>:
static void start_mode() {
 8005048:	b530      	push	{r4, r5, lr}
 800504a:	b085      	sub	sp, #20
  switch (active_mode)
 800504c:	4b2f      	ldr	r3, [pc, #188]	; (800510c <start_mode+0xc4>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b05      	cmp	r3, #5
 8005052:	d805      	bhi.n	8005060 <start_mode+0x18>
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4a2e      	ldr	r2, [pc, #184]	; (8005110 <start_mode+0xc8>)
 8005058:	58d3      	ldr	r3, [r2, r3]
 800505a:	469f      	mov	pc, r3
      hw_reset();
 800505c:	f006 fddc 	bl	800bc18 <hw_reset>
}
 8005060:	b005      	add	sp, #20
 8005062:	bd30      	pop	{r4, r5, pc}
      phy_continuous_tx(&tx_cfg, timeout_em, &cont_tx_done_callback);
 8005064:	4b2b      	ldr	r3, [pc, #172]	; (8005114 <start_mode+0xcc>)
 8005066:	7819      	ldrb	r1, [r3, #0]
 8005068:	4a2b      	ldr	r2, [pc, #172]	; (8005118 <start_mode+0xd0>)
 800506a:	482c      	ldr	r0, [pc, #176]	; (800511c <start_mode+0xd4>)
 800506c:	f002 fc6a 	bl	8007944 <phy_continuous_tx>
      break;
 8005070:	e7f6      	b.n	8005060 <start_mode+0x18>
      if(!stop) {
 8005072:	4b2b      	ldr	r3, [pc, #172]	; (8005120 <start_mode+0xd8>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f2      	bne.n	8005060 <start_mode+0x18>
 800507a:	f00b f941 	bl	8010300 <timer_get_counter_value>
 800507e:	2396      	movs	r3, #150	; 0x96
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	18c1      	adds	r1, r0, r3
 8005084:	2300      	movs	r3, #0
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	2207      	movs	r2, #7
 800508a:	4826      	ldr	r0, [pc, #152]	; (8005124 <start_mode+0xdc>)
 800508c:	f00b fb4a 	bl	8010724 <timer_post_task_prio>
        phy_continuous_tx(&tx_cfg, 1, &cont_tx_done_callback);
 8005090:	4a21      	ldr	r2, [pc, #132]	; (8005118 <start_mode+0xd0>)
 8005092:	2101      	movs	r1, #1
 8005094:	4821      	ldr	r0, [pc, #132]	; (800511c <start_mode+0xd4>)
 8005096:	f002 fc55 	bl	8007944 <phy_continuous_tx>
 800509a:	e7e1      	b.n	8005060 <start_mode+0x18>
      phy_start_rx(&(rx_cfg.channel_id), rx_cfg.syncword_class, &packet_received_em);
 800509c:	4822      	ldr	r0, [pc, #136]	; (8005128 <start_mode+0xe0>)
 800509e:	78c1      	ldrb	r1, [r0, #3]
 80050a0:	4a22      	ldr	r2, [pc, #136]	; (800512c <start_mode+0xe4>)
 80050a2:	f002 fa69 	bl	8007578 <phy_start_rx>
      break;
 80050a6:	e7db      	b.n	8005060 <start_mode+0x18>
      per_packet_counter++;
 80050a8:	4921      	ldr	r1, [pc, #132]	; (8005130 <start_mode+0xe8>)
 80050aa:	880b      	ldrh	r3, [r1, #0]
 80050ac:	3301      	adds	r3, #1
 80050ae:	800b      	strh	r3, [r1, #0]
      per_data[0] = sizeof(per_packet_counter) + FILL_DATA_SIZE + sizeof(uint16_t); /* CRC is an uint16_t */
 80050b0:	4c20      	ldr	r4, [pc, #128]	; (8005134 <start_mode+0xec>)
 80050b2:	2309      	movs	r3, #9
 80050b4:	7023      	strb	r3, [r4, #0]
      memcpy(per_data + 1, &per_packet_counter, sizeof(per_packet_counter));
 80050b6:	1c60      	adds	r0, r4, #1
 80050b8:	2202      	movs	r2, #2
 80050ba:	f00f fe89 	bl	8014dd0 <memcpy>
      memcpy(per_data + 1 + sizeof(per_packet_counter), per_fill_data, FILL_DATA_SIZE);
 80050be:	1ce0      	adds	r0, r4, #3
 80050c0:	2205      	movs	r2, #5
 80050c2:	491d      	ldr	r1, [pc, #116]	; (8005138 <start_mode+0xf0>)
 80050c4:	f00f fe84 	bl	8014dd0 <memcpy>
      uint16_t crc = __builtin_bswap16(crc_calculate(per_data, per_data[0] + 1 - 2));
 80050c8:	7821      	ldrb	r1, [r4, #0]
 80050ca:	3901      	subs	r1, #1
 80050cc:	b2c9      	uxtb	r1, r1
 80050ce:	0020      	movs	r0, r4
 80050d0:	f009 f892 	bl	800e1f8 <crc_calculate>
 80050d4:	ba40      	rev16	r0, r0
 80050d6:	210e      	movs	r1, #14
 80050d8:	4469      	add	r1, sp
 80050da:	8008      	strh	r0, [r1, #0]
      memcpy(per_data + 1 + sizeof(per_packet_counter) + FILL_DATA_SIZE, &crc, 2);
 80050dc:	0020      	movs	r0, r4
 80050de:	3008      	adds	r0, #8
 80050e0:	2202      	movs	r2, #2
 80050e2:	f00f fe75 	bl	8014dd0 <memcpy>
      memcpy(&per_packet.hw_radio_packet.data, per_data, sizeof(per_data));
 80050e6:	4d15      	ldr	r5, [pc, #84]	; (800513c <start_mode+0xf4>)
 80050e8:	220a      	movs	r2, #10
 80050ea:	0021      	movs	r1, r4
 80050ec:	0028      	movs	r0, r5
 80050ee:	f00f fe6f 	bl	8014dd0 <memcpy>
      per_packet.hw_radio_packet.length = per_data[0] + 1;
 80050f2:	7823      	ldrb	r3, [r4, #0]
 80050f4:	3301      	adds	r3, #1
 80050f6:	0028      	movs	r0, r5
 80050f8:	380e      	subs	r0, #14
 80050fa:	8183      	strh	r3, [r0, #12]
      error_t e = phy_send_packet(&per_packet.hw_radio_packet, &tx_cfg, &packet_transmitted_callback);
 80050fc:	4a10      	ldr	r2, [pc, #64]	; (8005140 <start_mode+0xf8>)
 80050fe:	4907      	ldr	r1, [pc, #28]	; (800511c <start_mode+0xd4>)
 8005100:	f002 fa96 	bl	8007630 <phy_send_packet>
      break;
 8005104:	e7ac      	b.n	8005060 <start_mode+0x18>
      phy_switch_to_standby_mode();
 8005106:	f001 ff0b 	bl	8006f20 <phy_switch_to_standby_mode>
}
 800510a:	e7a9      	b.n	8005060 <start_mode+0x18>
 800510c:	20001bf8 	.word	0x20001bf8
 8005110:	080188b0 	.word	0x080188b0
 8005114:	20001d2f 	.word	0x20001d2f
 8005118:	08004ded 	.word	0x08004ded
 800511c:	20001d30 	.word	0x20001d30
 8005120:	20001d2e 	.word	0x20001d2e
 8005124:	08005049 	.word	0x08005049
 8005128:	20001d28 	.word	0x20001d28
 800512c:	08004e25 	.word	0x08004e25
 8005130:	20001d20 	.word	0x20001d20
 8005134:	20001bfc 	.word	0x20001bfc
 8005138:	20001c08 	.word	0x20001c08
 800513c:	20001c1e 	.word	0x20001c1e
 8005140:	08005009 	.word	0x08005009

08005144 <em_file_change_callback>:

static void em_file_change_callback(uint8_t file_id) {
 8005144:	b570      	push	{r4, r5, r6, lr}
 8005146:	b086      	sub	sp, #24
    uint8_t data[D7A_FILE_ENGINEERING_MODE_SIZE];
    uint32_t length = D7A_FILE_ENGINEERING_MODE_SIZE;
 8005148:	2309      	movs	r3, #9
 800514a:	9302      	str	r3, [sp, #8]
    d7ap_fs_read_file(D7A_FILE_ENGINEERING_MODE_FILE_ID, 0, data, &length, ROOT_AUTH);
 800514c:	ac03      	add	r4, sp, #12
 800514e:	2300      	movs	r3, #0
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	ab02      	add	r3, sp, #8
 8005154:	0022      	movs	r2, r4
 8005156:	2100      	movs	r1, #0
 8005158:	2005      	movs	r0, #5
 800515a:	f002 fda1 	bl	8007ca0 <d7ap_fs_read_file>

    d7ap_fs_engineering_mode_t* em_command = (d7ap_fs_engineering_mode_t*)data;
    em_command->channel_id.center_freq_index = __builtin_bswap16(em_command->channel_id.center_freq_index);
 800515e:	88a3      	ldrh	r3, [r4, #4]
 8005160:	ba5b      	rev16	r3, r3
 8005162:	80a3      	strh	r3, [r4, #4]

    DPRINT("em_file_change_callback");
    DPRINT_DATA(data, D7A_FILE_ENGINEERING_MODE_SIZE);

    rx_cfg.syncword_class = PHY_SYNCWORD_CLASS1;
 8005164:	2301      	movs	r3, #1
 8005166:	4a59      	ldr	r2, [pc, #356]	; (80052cc <em_file_change_callback+0x188>)
 8005168:	70d3      	strb	r3, [r2, #3]
    tx_cfg.syncword_class = PHY_SYNCWORD_CLASS1;
 800516a:	4a59      	ldr	r2, [pc, #356]	; (80052d0 <em_file_change_callback+0x18c>)
 800516c:	70d3      	strb	r3, [r2, #3]

    timeout_em = em_command->timeout;
 800516e:	78a5      	ldrb	r5, [r4, #2]
 8005170:	4b58      	ldr	r3, [pc, #352]	; (80052d4 <em_file_change_callback+0x190>)
 8005172:	701d      	strb	r5, [r3, #0]

    active_mode = em_command->mode;
 8005174:	7823      	ldrb	r3, [r4, #0]
 8005176:	4a58      	ldr	r2, [pc, #352]	; (80052d8 <em_file_change_callback+0x194>)
 8005178:	7013      	strb	r3, [r2, #0]

    switch (em_command->mode)
 800517a:	2b05      	cmp	r3, #5
 800517c:	d80e      	bhi.n	800519c <em_file_change_callback+0x58>
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4a56      	ldr	r2, [pc, #344]	; (80052dc <em_file_change_callback+0x198>)
 8005182:	58d3      	ldr	r3, [r2, r3]
 8005184:	469f      	mov	pc, r3
 8005186:	f00b f8bb 	bl	8010300 <timer_get_counter_value>
 800518a:	0001      	movs	r1, r0
 800518c:	31f5      	adds	r1, #245	; 0xf5
 800518e:	31ff      	adds	r1, #255	; 0xff
 8005190:	2300      	movs	r3, #0
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	2207      	movs	r2, #7
 8005196:	4852      	ldr	r0, [pc, #328]	; (80052e0 <em_file_change_callback+0x19c>)
 8005198:	f00b fac4 	bl	8010724 <timer_post_task_prio>
            timer_post_task_delay(&stop_mode, timeout_em * TIMER_TICKS_PER_SEC + 500);
        }
        timer_post_task_delay(&start_mode, 500);
        break;
    }
}
 800519c:	b006      	add	sp, #24
 800519e:	bd70      	pop	{r4, r5, r6, pc}
        memcpy( &(tx_cfg.channel_id), &(em_command->channel_id), sizeof(channel_id_t));
 80051a0:	4c4b      	ldr	r4, [pc, #300]	; (80052d0 <em_file_change_callback+0x18c>)
 80051a2:	2203      	movs	r2, #3
 80051a4:	210f      	movs	r1, #15
 80051a6:	4469      	add	r1, sp
 80051a8:	0020      	movs	r0, r4
 80051aa:	f00f fe11 	bl	8014dd0 <memcpy>
        tx_cfg.eirp = em_command->eirp;
 80051ae:	ab03      	add	r3, sp, #12
 80051b0:	799b      	ldrb	r3, [r3, #6]
 80051b2:	b25b      	sxtb	r3, r3
 80051b4:	7123      	strb	r3, [r4, #4]
 80051b6:	f00b f8a3 	bl	8010300 <timer_get_counter_value>
 80051ba:	0001      	movs	r1, r0
 80051bc:	31f5      	adds	r1, #245	; 0xf5
 80051be:	31ff      	adds	r1, #255	; 0xff
 80051c0:	2300      	movs	r3, #0
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	2207      	movs	r2, #7
 80051c6:	4846      	ldr	r0, [pc, #280]	; (80052e0 <em_file_change_callback+0x19c>)
 80051c8:	f00b faac 	bl	8010724 <timer_post_task_prio>
 80051cc:	e7e6      	b.n	800519c <em_file_change_callback+0x58>
        memcpy( &(tx_cfg.channel_id), &(em_command->channel_id), sizeof(channel_id_t));
 80051ce:	4c40      	ldr	r4, [pc, #256]	; (80052d0 <em_file_change_callback+0x18c>)
 80051d0:	2203      	movs	r2, #3
 80051d2:	210f      	movs	r1, #15
 80051d4:	4469      	add	r1, sp
 80051d6:	0020      	movs	r0, r4
 80051d8:	f00f fdfa 	bl	8014dd0 <memcpy>
        tx_cfg.eirp = em_command->eirp;
 80051dc:	ab03      	add	r3, sp, #12
 80051de:	799b      	ldrb	r3, [r3, #6]
 80051e0:	b25b      	sxtb	r3, r3
 80051e2:	7123      	strb	r3, [r4, #4]
        stop = false;
 80051e4:	4b3f      	ldr	r3, [pc, #252]	; (80052e4 <em_file_change_callback+0x1a0>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]
        if(timeout_em != 0) {
 80051ea:	4b3a      	ldr	r3, [pc, #232]	; (80052d4 <em_file_change_callback+0x190>)
 80051ec:	7819      	ldrb	r1, [r3, #0]
 80051ee:	2900      	cmp	r1, #0
 80051f0:	d10b      	bne.n	800520a <em_file_change_callback+0xc6>
 80051f2:	f00b f885 	bl	8010300 <timer_get_counter_value>
 80051f6:	0001      	movs	r1, r0
 80051f8:	31f5      	adds	r1, #245	; 0xf5
 80051fa:	31ff      	adds	r1, #255	; 0xff
 80051fc:	2300      	movs	r3, #0
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	2207      	movs	r2, #7
 8005202:	4837      	ldr	r0, [pc, #220]	; (80052e0 <em_file_change_callback+0x19c>)
 8005204:	f00b fa8e 	bl	8010724 <timer_post_task_prio>
 8005208:	e7c8      	b.n	800519c <em_file_change_callback+0x58>
          timer_post_task_delay(&stop_mode, timeout_em * TIMER_TICKS_PER_SEC + 500);
 800520a:	0289      	lsls	r1, r1, #10
 800520c:	31f5      	adds	r1, #245	; 0xf5
 800520e:	31ff      	adds	r1, #255	; 0xff
 8005210:	000c      	movs	r4, r1
 8005212:	f00b f875 	bl	8010300 <timer_get_counter_value>
 8005216:	1821      	adds	r1, r4, r0
 8005218:	2300      	movs	r3, #0
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	2207      	movs	r2, #7
 800521e:	4832      	ldr	r0, [pc, #200]	; (80052e8 <em_file_change_callback+0x1a4>)
 8005220:	f00b fa80 	bl	8010724 <timer_post_task_prio>
 8005224:	e7e5      	b.n	80051f2 <em_file_change_callback+0xae>
        per_packet_counter = 0;
 8005226:	2300      	movs	r3, #0
 8005228:	4a30      	ldr	r2, [pc, #192]	; (80052ec <em_file_change_callback+0x1a8>)
 800522a:	8013      	strh	r3, [r2, #0]
        per_missed_packets_counter = 0;
 800522c:	4a30      	ldr	r2, [pc, #192]	; (80052f0 <em_file_change_callback+0x1ac>)
 800522e:	8013      	strh	r3, [r2, #0]
        per_received_packets_counter = 0;
 8005230:	4a30      	ldr	r2, [pc, #192]	; (80052f4 <em_file_change_callback+0x1b0>)
 8005232:	8013      	strh	r3, [r2, #0]
        per_start_index = 65535;
 8005234:	4b30      	ldr	r3, [pc, #192]	; (80052f8 <em_file_change_callback+0x1b4>)
 8005236:	2201      	movs	r2, #1
 8005238:	4252      	negs	r2, r2
 800523a:	801a      	strh	r2, [r3, #0]
        rx_cfg.channel_id = em_command->channel_id;
 800523c:	3204      	adds	r2, #4
 800523e:	210f      	movs	r1, #15
 8005240:	4469      	add	r1, sp
 8005242:	4822      	ldr	r0, [pc, #136]	; (80052cc <em_file_change_callback+0x188>)
 8005244:	f00f fdc4 	bl	8014dd0 <memcpy>
 8005248:	2200      	movs	r2, #0
 800524a:	2107      	movs	r1, #7
 800524c:	4824      	ldr	r0, [pc, #144]	; (80052e0 <em_file_change_callback+0x19c>)
 800524e:	f00a f9a9 	bl	800f5a4 <sched_post_task_prio>
 8005252:	e7a3      	b.n	800519c <em_file_change_callback+0x58>
        per_packet_counter = 0;
 8005254:	2400      	movs	r4, #0
 8005256:	4b25      	ldr	r3, [pc, #148]	; (80052ec <em_file_change_callback+0x1a8>)
 8005258:	801c      	strh	r4, [r3, #0]
        tx_cfg.channel_id = em_command->channel_id;
 800525a:	4e1d      	ldr	r6, [pc, #116]	; (80052d0 <em_file_change_callback+0x18c>)
 800525c:	2203      	movs	r2, #3
 800525e:	210f      	movs	r1, #15
 8005260:	4469      	add	r1, sp
 8005262:	0030      	movs	r0, r6
 8005264:	f00f fdb4 	bl	8014dd0 <memcpy>
        tx_cfg.eirp = em_command->eirp;
 8005268:	ab03      	add	r3, sp, #12
 800526a:	799b      	ldrb	r3, [r3, #6]
 800526c:	b25b      	sxtb	r3, r3
 800526e:	7133      	strb	r3, [r6, #4]
        per_packet_limit = timeout_em * 100;
 8005270:	2164      	movs	r1, #100	; 0x64
 8005272:	434d      	muls	r5, r1
 8005274:	4b21      	ldr	r3, [pc, #132]	; (80052fc <em_file_change_callback+0x1b8>)
 8005276:	801d      	strh	r5, [r3, #0]
        hw_radio_set_idle();
 8005278:	f008 f858 	bl	800d32c <hw_radio_set_idle>
 800527c:	f00b f840 	bl	8010300 <timer_get_counter_value>
 8005280:	0001      	movs	r1, r0
 8005282:	31f5      	adds	r1, #245	; 0xf5
 8005284:	31ff      	adds	r1, #255	; 0xff
 8005286:	9400      	str	r4, [sp, #0]
 8005288:	2300      	movs	r3, #0
 800528a:	2207      	movs	r2, #7
 800528c:	4814      	ldr	r0, [pc, #80]	; (80052e0 <em_file_change_callback+0x19c>)
 800528e:	f00b fa49 	bl	8010724 <timer_post_task_prio>
 8005292:	e783      	b.n	800519c <em_file_change_callback+0x58>
        if(timeout_em != 0) {
 8005294:	2d00      	cmp	r5, #0
 8005296:	d10b      	bne.n	80052b0 <em_file_change_callback+0x16c>
 8005298:	f00b f832 	bl	8010300 <timer_get_counter_value>
 800529c:	0001      	movs	r1, r0
 800529e:	31f5      	adds	r1, #245	; 0xf5
 80052a0:	31ff      	adds	r1, #255	; 0xff
 80052a2:	2300      	movs	r3, #0
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	2207      	movs	r2, #7
 80052a8:	480d      	ldr	r0, [pc, #52]	; (80052e0 <em_file_change_callback+0x19c>)
 80052aa:	f00b fa3b 	bl	8010724 <timer_post_task_prio>
}
 80052ae:	e775      	b.n	800519c <em_file_change_callback+0x58>
            timer_post_task_delay(&stop_mode, timeout_em * TIMER_TICKS_PER_SEC + 500);
 80052b0:	02ad      	lsls	r5, r5, #10
 80052b2:	35f5      	adds	r5, #245	; 0xf5
 80052b4:	35ff      	adds	r5, #255	; 0xff
 80052b6:	f00b f823 	bl	8010300 <timer_get_counter_value>
 80052ba:	1829      	adds	r1, r5, r0
 80052bc:	2300      	movs	r3, #0
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	2207      	movs	r2, #7
 80052c2:	4809      	ldr	r0, [pc, #36]	; (80052e8 <em_file_change_callback+0x1a4>)
 80052c4:	f00b fa2e 	bl	8010724 <timer_post_task_prio>
 80052c8:	e7e6      	b.n	8005298 <em_file_change_callback+0x154>
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	20001d28 	.word	0x20001d28
 80052d0:	20001d30 	.word	0x20001d30
 80052d4:	20001d2f 	.word	0x20001d2f
 80052d8:	20001bf8 	.word	0x20001bf8
 80052dc:	080188c8 	.word	0x080188c8
 80052e0:	08005049 	.word	0x08005049
 80052e4:	20001d2e 	.word	0x20001d2e
 80052e8:	08004df5 	.word	0x08004df5
 80052ec:	20001d20 	.word	0x20001d20
 80052f0:	20001c0e 	.word	0x20001c0e
 80052f4:	20001d24 	.word	0x20001d24
 80052f8:	2000055a 	.word	0x2000055a
 80052fc:	20001d22 	.word	0x20001d22

08005300 <engineering_mode_init>:

error_t engineering_mode_init()
{
 8005300:	b510      	push	{r4, lr}
 8005302:	b086      	sub	sp, #24
  // always init EM file to 0 to avoid bricking the device
  uint8_t init_data[D7A_FILE_ENGINEERING_MODE_SIZE] = {0};
 8005304:	2400      	movs	r4, #0
 8005306:	9403      	str	r4, [sp, #12]
 8005308:	2205      	movs	r2, #5
 800530a:	2100      	movs	r1, #0
 800530c:	a804      	add	r0, sp, #16
 800530e:	f00f fdb3 	bl	8014e78 <memset>
  d7ap_fs_write_file(D7A_FILE_ENGINEERING_MODE_FILE_ID, 0, init_data, D7A_FILE_ENGINEERING_MODE_SIZE, ROOT_AUTH);
 8005312:	9400      	str	r4, [sp, #0]
 8005314:	2309      	movs	r3, #9
 8005316:	aa03      	add	r2, sp, #12
 8005318:	2100      	movs	r1, #0
 800531a:	2005      	movs	r0, #5
 800531c:	f002 fe20 	bl	8007f60 <d7ap_fs_write_file>

  d7ap_fs_register_file_modified_callback(D7A_FILE_ENGINEERING_MODE_FILE_ID, &em_file_change_callback);
 8005320:	4907      	ldr	r1, [pc, #28]	; (8005340 <engineering_mode_init+0x40>)
 8005322:	2005      	movs	r0, #5
 8005324:	f002 ff04 	bl	8008130 <d7ap_fs_register_file_modified_callback>
static inline error_t sched_register_task(task_t task) { return sched_register_task_allow_multiple(task, false);}
 8005328:	2100      	movs	r1, #0
 800532a:	4806      	ldr	r0, [pc, #24]	; (8005344 <engineering_mode_init+0x44>)
 800532c:	f00a f89e 	bl	800f46c <sched_register_task_allow_multiple>
 8005330:	2100      	movs	r1, #0
 8005332:	4805      	ldr	r0, [pc, #20]	; (8005348 <engineering_mode_init+0x48>)
 8005334:	f00a f89a 	bl	800f46c <sched_register_task_allow_multiple>

  sched_register_task(&start_mode);
  sched_register_task(&stop_mode);

  return SUCCESS;
}
 8005338:	2000      	movs	r0, #0
 800533a:	b006      	add	sp, #24
 800533c:	bd10      	pop	{r4, pc}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	08005145 	.word	0x08005145
 8005344:	08005049 	.word	0x08005049
 8005348:	08004df5 	.word	0x08004df5

0800534c <engineering_mode_stop>:

error_t engineering_mode_stop()
{
 800534c:	b510      	push	{r4, lr}
  d7ap_fs_unregister_file_modified_callback(D7A_FILE_ENGINEERING_MODE_FILE_ID);
 800534e:	2005      	movs	r0, #5
 8005350:	f002 fede 	bl	8008110 <d7ap_fs_unregister_file_modified_callback>

  return SUCCESS;
}
 8005354:	2000      	movs	r0, #0
 8005356:	bd10      	pop	{r4, pc}

08005358 <packet_queue_init>:
#define packet_queue NG(_packet_queue)
static packet_queue_element_status_t NGDEF(_packet_queue_element_status)[MODULE_D7AP_PACKET_QUEUE_SIZE];
#define packet_queue_element_status NG(_packet_queue_element_status)

void packet_queue_init()
{
 8005358:	b510      	push	{r4, lr}
    for(uint8_t i = 0; i < MODULE_D7AP_PACKET_QUEUE_SIZE; i++)
 800535a:	2400      	movs	r4, #0
 800535c:	e00b      	b.n	8005376 <packet_queue_init+0x1e>
    {
        packet_init(&(packet_queue[i]));
 800535e:	20ce      	movs	r0, #206	; 0xce
 8005360:	0080      	lsls	r0, r0, #2
 8005362:	4360      	muls	r0, r4
 8005364:	4b05      	ldr	r3, [pc, #20]	; (800537c <packet_queue_init+0x24>)
 8005366:	18c0      	adds	r0, r0, r3
 8005368:	f000 f8a2 	bl	80054b0 <packet_init>
        packet_queue_element_status[i] = PACKET_QUEUE_ELEMENT_STATUS_FREE;
 800536c:	4b04      	ldr	r3, [pc, #16]	; (8005380 <packet_queue_init+0x28>)
 800536e:	2200      	movs	r2, #0
 8005370:	551a      	strb	r2, [r3, r4]
    for(uint8_t i = 0; i < MODULE_D7AP_PACKET_QUEUE_SIZE; i++)
 8005372:	3401      	adds	r4, #1
 8005374:	b2e4      	uxtb	r4, r4
 8005376:	2c02      	cmp	r4, #2
 8005378:	d9f1      	bls.n	800535e <packet_queue_init+0x6>
    }
}
 800537a:	bd10      	pop	{r4, pc}
 800537c:	20001d38 	.word	0x20001d38
 8005380:	200026e0 	.word	0x200026e0

08005384 <packet_queue_alloc_packet>:

packet_t* packet_queue_alloc_packet()
{
    for(uint8_t i = 0; i < MODULE_D7AP_PACKET_QUEUE_SIZE; i++)
 8005384:	2300      	movs	r3, #0
 8005386:	e001      	b.n	800538c <packet_queue_alloc_packet+0x8>
 8005388:	3301      	adds	r3, #1
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d80d      	bhi.n	80053ac <packet_queue_alloc_packet+0x28>
    {
        if(packet_queue_element_status[i] == PACKET_QUEUE_ELEMENT_STATUS_FREE)
 8005390:	0018      	movs	r0, r3
 8005392:	4a07      	ldr	r2, [pc, #28]	; (80053b0 <packet_queue_alloc_packet+0x2c>)
 8005394:	5cd2      	ldrb	r2, [r2, r3]
 8005396:	2a00      	cmp	r2, #0
 8005398:	d1f6      	bne.n	8005388 <packet_queue_alloc_packet+0x4>
        {
            packet_queue_element_status[i] = PACKET_QUEUE_ELEMENT_STATUS_ALLOCATED;
 800539a:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <packet_queue_alloc_packet+0x2c>)
 800539c:	3201      	adds	r2, #1
 800539e:	541a      	strb	r2, [r3, r0]
            DPRINT("Packet queue alloc %p slot %i", &(packet_queue[i]), i);
            return &(packet_queue[i]);
 80053a0:	23ce      	movs	r3, #206	; 0xce
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4358      	muls	r0, r3
 80053a6:	4b03      	ldr	r3, [pc, #12]	; (80053b4 <packet_queue_alloc_packet+0x30>)
 80053a8:	18c0      	adds	r0, r0, r3
 80053aa:	e000      	b.n	80053ae <packet_queue_alloc_packet+0x2a>
        }
    }

    // should not happen, possible to small PACKET_QUEUE_SIZE or not always free()-ed correctly?
    DPRINT("Packet queue full, could not alloc new packet!");
    return NULL;
 80053ac:	2000      	movs	r0, #0
}
 80053ae:	4770      	bx	lr
 80053b0:	200026e0 	.word	0x200026e0
 80053b4:	20001d38 	.word	0x20001d38

080053b8 <packet_queue_free_packet>:

void packet_queue_free_packet(packet_t* packet)
{
 80053b8:	b510      	push	{r4, lr}
 80053ba:	0002      	movs	r2, r0
    DPRINT("Packet queue mark free %p", packet);
    for(uint8_t i = 0; i < MODULE_D7AP_PACKET_QUEUE_SIZE; i++)
 80053bc:	2300      	movs	r3, #0
 80053be:	e007      	b.n	80053d0 <packet_queue_free_packet+0x18>
    {
        if(packet == &(packet_queue[i]))
        {
            DPRINT("packet slot %i", i);
            assert(packet_queue_element_status[i] >= PACKET_QUEUE_ELEMENT_STATUS_ALLOCATED);
 80053c0:	4b10      	ldr	r3, [pc, #64]	; (8005404 <packet_queue_free_packet+0x4c>)
 80053c2:	4a11      	ldr	r2, [pc, #68]	; (8005408 <packet_queue_free_packet+0x50>)
 80053c4:	2151      	movs	r1, #81	; 0x51
 80053c6:	4811      	ldr	r0, [pc, #68]	; (800540c <packet_queue_free_packet+0x54>)
 80053c8:	f003 f91a 	bl	8008600 <__assert_func>
    for(uint8_t i = 0; i < MODULE_D7AP_PACKET_QUEUE_SIZE; i++)
 80053cc:	3301      	adds	r3, #1
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d811      	bhi.n	80053f8 <packet_queue_free_packet+0x40>
        if(packet == &(packet_queue[i]))
 80053d4:	001c      	movs	r4, r3
 80053d6:	20ce      	movs	r0, #206	; 0xce
 80053d8:	0080      	lsls	r0, r0, #2
 80053da:	4358      	muls	r0, r3
 80053dc:	490c      	ldr	r1, [pc, #48]	; (8005410 <packet_queue_free_packet+0x58>)
 80053de:	1840      	adds	r0, r0, r1
 80053e0:	4290      	cmp	r0, r2
 80053e2:	d1f3      	bne.n	80053cc <packet_queue_free_packet+0x14>
            assert(packet_queue_element_status[i] >= PACKET_QUEUE_ELEMENT_STATUS_ALLOCATED);
 80053e4:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <packet_queue_free_packet+0x5c>)
 80053e6:	5d1b      	ldrb	r3, [r3, r4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0e9      	beq.n	80053c0 <packet_queue_free_packet+0x8>
            packet_queue_element_status[i] = PACKET_QUEUE_ELEMENT_STATUS_FREE;
 80053ec:	4b09      	ldr	r3, [pc, #36]	; (8005414 <packet_queue_free_packet+0x5c>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	551a      	strb	r2, [r3, r4]
            packet_init(&(packet_queue[i]));
 80053f2:	f000 f85d 	bl	80054b0 <packet_init>
            return;
        }
    }

    assert(false); // should never happen
}
 80053f6:	bd10      	pop	{r4, pc}
    assert(false); // should never happen
 80053f8:	4b07      	ldr	r3, [pc, #28]	; (8005418 <packet_queue_free_packet+0x60>)
 80053fa:	4a03      	ldr	r2, [pc, #12]	; (8005408 <packet_queue_free_packet+0x50>)
 80053fc:	2158      	movs	r1, #88	; 0x58
 80053fe:	4803      	ldr	r0, [pc, #12]	; (800540c <packet_queue_free_packet+0x54>)
 8005400:	f003 f8fe 	bl	8008600 <__assert_func>
 8005404:	080188f4 	.word	0x080188f4
 8005408:	080189bc 	.word	0x080189bc
 800540c:	0801893c 	.word	0x0801893c
 8005410:	20001d38 	.word	0x20001d38
 8005414:	200026e0 	.word	0x200026e0
 8005418:	080169c8 	.word	0x080169c8

0800541c <packet_queue_find_packet>:

packet_t* packet_queue_find_packet(hw_radio_packet_t* hw_radio_packet)
{
 800541c:	b510      	push	{r4, lr}
    for(uint8_t i = 0; i < MODULE_D7AP_PACKET_QUEUE_SIZE; i++)
 800541e:	2200      	movs	r2, #0
 8005420:	e001      	b.n	8005426 <packet_queue_find_packet+0xa>
 8005422:	3201      	adds	r2, #1
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	2a02      	cmp	r2, #2
 8005428:	d80e      	bhi.n	8005448 <packet_queue_find_packet+0x2c>
    {
        if(&(packet_queue[i].hw_radio_packet) == hw_radio_packet)
 800542a:	0014      	movs	r4, r2
 800542c:	23ce      	movs	r3, #206	; 0xce
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4353      	muls	r3, r2
 8005432:	3329      	adds	r3, #41	; 0x29
 8005434:	33ff      	adds	r3, #255	; 0xff
 8005436:	4905      	ldr	r1, [pc, #20]	; (800544c <packet_queue_find_packet+0x30>)
 8005438:	185b      	adds	r3, r3, r1
 800543a:	4283      	cmp	r3, r0
 800543c:	d1f1      	bne.n	8005422 <packet_queue_find_packet+0x6>
            return &(packet_queue[i]);
 800543e:	20ce      	movs	r0, #206	; 0xce
 8005440:	0080      	lsls	r0, r0, #2
 8005442:	4344      	muls	r4, r0
 8005444:	1860      	adds	r0, r4, r1
 8005446:	e000      	b.n	800544a <packet_queue_find_packet+0x2e>
    }

    return NULL;
 8005448:	2000      	movs	r0, #0
}
 800544a:	bd10      	pop	{r4, pc}
 800544c:	20001d38 	.word	0x20001d38

08005450 <packet_queue_mark_processing>:

void packet_queue_mark_processing(packet_t* packet)
{
 8005450:	b510      	push	{r4, lr}
    DPRINT("Packet queue mark processing %p", packet);
    for(uint8_t i = 0; i < MODULE_D7AP_PACKET_QUEUE_SIZE; i++)
 8005452:	2300      	movs	r3, #0
 8005454:	e007      	b.n	8005466 <packet_queue_mark_processing+0x16>
    {
        if(packet == &(packet_queue[i]))
        {
            assert(packet_queue_element_status[i] != PACKET_QUEUE_ELEMENT_STATUS_FREE);
 8005456:	4b10      	ldr	r3, [pc, #64]	; (8005498 <packet_queue_mark_processing+0x48>)
 8005458:	4a10      	ldr	r2, [pc, #64]	; (800549c <packet_queue_mark_processing+0x4c>)
 800545a:	216d      	movs	r1, #109	; 0x6d
 800545c:	4810      	ldr	r0, [pc, #64]	; (80054a0 <packet_queue_mark_processing+0x50>)
 800545e:	f003 f8cf 	bl	8008600 <__assert_func>
    for(uint8_t i = 0; i < MODULE_D7AP_PACKET_QUEUE_SIZE; i++)
 8005462:	3301      	adds	r3, #1
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d80f      	bhi.n	800548a <packet_queue_mark_processing+0x3a>
        if(packet == &(packet_queue[i]))
 800546a:	001c      	movs	r4, r3
 800546c:	22ce      	movs	r2, #206	; 0xce
 800546e:	0092      	lsls	r2, r2, #2
 8005470:	435a      	muls	r2, r3
 8005472:	490c      	ldr	r1, [pc, #48]	; (80054a4 <packet_queue_mark_processing+0x54>)
 8005474:	1852      	adds	r2, r2, r1
 8005476:	4282      	cmp	r2, r0
 8005478:	d1f3      	bne.n	8005462 <packet_queue_mark_processing+0x12>
            assert(packet_queue_element_status[i] != PACKET_QUEUE_ELEMENT_STATUS_FREE);
 800547a:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <packet_queue_mark_processing+0x58>)
 800547c:	5d1b      	ldrb	r3, [r3, r4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0e9      	beq.n	8005456 <packet_queue_mark_processing+0x6>
            DPRINT("Packet slot %i", i);
            packet_queue_element_status[i] = PACKET_QUEUE_ELEMENT_STATUS_PROCESSING;
 8005482:	4b09      	ldr	r3, [pc, #36]	; (80054a8 <packet_queue_mark_processing+0x58>)
 8005484:	2204      	movs	r2, #4
 8005486:	551a      	strb	r2, [r3, r4]
            return;
        }
    }

    assert(false);
}
 8005488:	bd10      	pop	{r4, pc}
    assert(false);
 800548a:	4b08      	ldr	r3, [pc, #32]	; (80054ac <packet_queue_mark_processing+0x5c>)
 800548c:	4a03      	ldr	r2, [pc, #12]	; (800549c <packet_queue_mark_processing+0x4c>)
 800548e:	2174      	movs	r1, #116	; 0x74
 8005490:	4803      	ldr	r0, [pc, #12]	; (80054a0 <packet_queue_mark_processing+0x50>)
 8005492:	f003 f8b5 	bl	8008600 <__assert_func>
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	08018978 	.word	0x08018978
 800549c:	080189d8 	.word	0x080189d8
 80054a0:	0801893c 	.word	0x0801893c
 80054a4:	20001d38 	.word	0x20001d38
 80054a8:	200026e0 	.word	0x200026e0
 80054ac:	080169c8 	.word	0x080169c8

080054b0 <packet_init>:
#else
static bool has_hardware_crc = false;
#endif

void packet_init(packet_t* packet)
{
 80054b0:	b510      	push	{r4, lr}
    memset(packet, 0x00, sizeof(packet_t));
 80054b2:	22ce      	movs	r2, #206	; 0xce
 80054b4:	0092      	lsls	r2, r2, #2
 80054b6:	2100      	movs	r1, #0
 80054b8:	f00f fcde 	bl	8014e78 <memset>
}
 80054bc:	bd10      	pop	{r4, pc}

080054be <packet_assemble>:

void packet_assemble(packet_t* packet)
{
 80054be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054c0:	b083      	sub	sp, #12
 80054c2:	0004      	movs	r4, r0
    uint8_t* data_ptr = packet->hw_radio_packet.data + 1; // skip length field for now, we fill this later
 80054c4:	0006      	movs	r6, r0
 80054c6:	3638      	adds	r6, #56	; 0x38
 80054c8:	36ff      	adds	r6, #255	; 0xff

    data_ptr += dll_assemble_packet_header(packet, data_ptr);
 80054ca:	0031      	movs	r1, r6
 80054cc:	f001 fac0 	bl	8006a50 <dll_assemble_packet_header>
 80054d0:	1836      	adds	r6, r6, r0

    data_ptr += d7anp_assemble_packet_header(packet, data_ptr);
 80054d2:	0031      	movs	r1, r6
 80054d4:	0020      	movs	r0, r4
 80054d6:	f7ff fa7f 	bl	80049d8 <d7anp_assemble_packet_header>
 80054da:	1836      	adds	r6, r6, r0

#if defined(MODULE_D7AP_NLS_ENABLED)
    uint8_t* nwl_payload = data_ptr;
#endif

    data_ptr += d7atp_assemble_packet_header(packet, data_ptr);
 80054dc:	0031      	movs	r1, r6
 80054de:	0020      	movs	r0, r4
 80054e0:	f7fe fb6c 	bl	8003bbc <d7atp_assemble_packet_header>
 80054e4:	1835      	adds	r5, r6, r0

    // add payload
    memcpy(data_ptr, packet->payload, packet->payload_length); data_ptr += packet->payload_length;
 80054e6:	0021      	movs	r1, r4
 80054e8:	3133      	adds	r1, #51	; 0x33
 80054ea:	2732      	movs	r7, #50	; 0x32
 80054ec:	5de2      	ldrb	r2, [r4, r7]
 80054ee:	0028      	movs	r0, r5
 80054f0:	f00f fc6e 	bl	8014dd0 <memcpy>
 80054f4:	5de0      	ldrb	r0, [r4, r7]
 80054f6:	182d      	adds	r5, r5, r0

#if defined(MODULE_D7AP_NLS_ENABLED)
    /* Encrypt/authenticate nwl_payload if needed */
    if (packet->d7anp_ctrl.nls_method)
 80054f8:	79e3      	ldrb	r3, [r4, #7]
 80054fa:	071b      	lsls	r3, r3, #28
 80054fc:	d11a      	bne.n	8005534 <packet_assemble+0x76>
        data_ptr += d7anp_secure_payload(packet, nwl_payload, data_ptr - nwl_payload);
#endif

    packet->hw_radio_packet.length = data_ptr - packet->hw_radio_packet.data + 2; // exclude the CRC bytes
 80054fe:	0020      	movs	r0, r4
 8005500:	3037      	adds	r0, #55	; 0x37
 8005502:	30ff      	adds	r0, #255	; 0xff
 8005504:	1a29      	subs	r1, r5, r0
 8005506:	3102      	adds	r1, #2
 8005508:	b289      	uxth	r1, r1
 800550a:	239a      	movs	r3, #154	; 0x9a
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	52e1      	strh	r1, [r4, r3]
    packet->hw_radio_packet.data[0] = packet->hw_radio_packet.length - 1; // exclude the length byte
 8005510:	b2c9      	uxtb	r1, r1
 8005512:	1e4a      	subs	r2, r1, #1
 8005514:	3302      	adds	r3, #2
 8005516:	54e2      	strb	r2, [r4, r3]

    // add CRC - SW CRC when using FEC
    if (!has_hardware_crc ||
              packet->phy_config.tx.channel_id.channel_header.ch_coding == PHY_CODING_FEC_PN9)
    {
        uint16_t crc = __builtin_bswap16(crc_calculate(packet->hw_radio_packet.data, packet->hw_radio_packet.length - 2));
 8005518:	3902      	subs	r1, #2
 800551a:	b2c9      	uxtb	r1, r1
 800551c:	f008 fe6c 	bl	800e1f8 <crc_calculate>
 8005520:	ba40      	rev16	r0, r0
 8005522:	466b      	mov	r3, sp
 8005524:	1d99      	adds	r1, r3, #6
 8005526:	8008      	strh	r0, [r1, #0]
        memcpy(data_ptr, &crc, 2);
 8005528:	2202      	movs	r2, #2
 800552a:	0028      	movs	r0, r5
 800552c:	f00f fc50 	bl	8014dd0 <memcpy>
    }

}
 8005530:	b003      	add	sp, #12
 8005532:	bdf0      	pop	{r4, r5, r6, r7, pc}
        data_ptr += d7anp_secure_payload(packet, nwl_payload, data_ptr - nwl_payload);
 8005534:	1baa      	subs	r2, r5, r6
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	0031      	movs	r1, r6
 800553a:	0020      	movs	r0, r4
 800553c:	f7ff f8c8 	bl	80046d0 <d7anp_secure_payload>
 8005540:	182d      	adds	r5, r5, r0
 8005542:	e7dc      	b.n	80054fe <packet_assemble+0x40>

08005544 <packet_disassemble>:

void packet_disassemble(packet_t* packet)
{
 8005544:	b570      	push	{r4, r5, r6, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	0004      	movs	r4, r0

    if (packet->hw_radio_packet.rx_meta.crc_status == HW_CRC_UNAVAILABLE)
 800554a:	2398      	movs	r3, #152	; 0x98
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	5cc3      	ldrb	r3, [r0, r3]
 8005550:	2b02      	cmp	r3, #2
 8005552:	d032      	beq.n	80055ba <packet_disassemble+0x76>
            DPRINT_DLL("Packet: len %d", packet->hw_radio_packet.length);
            DPRINT_DATA_DLL(packet->hw_radio_packet.data, packet->hw_radio_packet.length);
            goto cleanup;
        }
    }
    else if (packet->hw_radio_packet.rx_meta.crc_status == HW_CRC_INVALID)
 8005554:	2b01      	cmp	r3, #1
 8005556:	d055      	beq.n	8005604 <packet_disassemble+0xc0>
        DPRINT_DLL("CRC invalid");
        goto cleanup;
    }

    uint8_t data_idx;
    if (packet->type != BACKGROUND_ADV)
 8005558:	232c      	movs	r3, #44	; 0x2c
 800555a:	5ce3      	ldrb	r3, [r4, r3]
 800555c:	2b05      	cmp	r3, #5
 800555e:	d046      	beq.n	80055ee <packet_disassemble+0xaa>
        data_idx = 1;
 8005560:	466b      	mov	r3, sp
 8005562:	2201      	movs	r2, #1
 8005564:	71da      	strb	r2, [r3, #7]
    else
        data_idx = 0;

    if(!dll_disassemble_packet_header(packet, &data_idx))
 8005566:	466b      	mov	r3, sp
 8005568:	1dd9      	adds	r1, r3, #7
 800556a:	0020      	movs	r0, r4
 800556c:	f001 fa9e 	bl	8006aac <dll_disassemble_packet_header>
 8005570:	2800      	cmp	r0, #0
 8005572:	d047      	beq.n	8005604 <packet_disassemble+0xc0>
        goto cleanup;

    if (packet->type != BACKGROUND_ADV)
 8005574:	232c      	movs	r3, #44	; 0x2c
 8005576:	5ce3      	ldrb	r3, [r4, r3]
 8005578:	2b05      	cmp	r3, #5
 800557a:	d13c      	bne.n	80055f6 <packet_disassemble+0xb2>
    }
    else
    {
        // extract ETA for background frames
        uint16_t eta;
        if(packet->hw_radio_packet.length < (data_idx + 2))
 800557c:	466b      	mov	r3, sp
 800557e:	79d9      	ldrb	r1, [r3, #7]
 8005580:	1c4a      	adds	r2, r1, #1
 8005582:	239a      	movs	r3, #154	; 0x9a
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	5ae3      	ldrh	r3, [r4, r3]
 8005588:	429a      	cmp	r2, r3
 800558a:	da3b      	bge.n	8005604 <packet_disassemble+0xc0>
        {
            goto cleanup;
        }
        packet->payload_length = packet->hw_radio_packet.length - data_idx - 2; // exclude the headers CRC bytes // TODO exclude footers
 800558c:	1a5a      	subs	r2, r3, r1
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	3a02      	subs	r2, #2
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	2332      	movs	r3, #50	; 0x32
 8005596:	54e2      	strb	r2, [r4, r3]
        assert(packet->payload_length == sizeof(uint16_t));
 8005598:	2a02      	cmp	r2, #2
 800559a:	d15b      	bne.n	8005654 <packet_disassemble+0x110>

        memcpy(&eta, packet->hw_radio_packet.data + data_idx, packet->payload_length);
 800559c:	0023      	movs	r3, r4
 800559e:	3337      	adds	r3, #55	; 0x37
 80055a0:	33ff      	adds	r3, #255	; 0xff
 80055a2:	1859      	adds	r1, r3, r1
 80055a4:	ad01      	add	r5, sp, #4
 80055a6:	0028      	movs	r0, r5
 80055a8:	f00f fc12 	bl	8014dd0 <memcpy>
        packet->ETA = __builtin_bswap16(eta);
 80055ac:	882b      	ldrh	r3, [r5, #0]
 80055ae:	ba5b      	rev16	r3, r3
 80055b0:	85e3      	strh	r3, [r4, #46]	; 0x2e
    // TODO footers


    DPRINT_FWK("Done disassembling packet");

    d7anp_process_received_packet(packet);
 80055b2:	0020      	movs	r0, r4
 80055b4:	f7ff fbd6 	bl	8004d64 <d7anp_process_received_packet>

    return;
 80055b8:	e02a      	b.n	8005610 <packet_disassemble+0xcc>
        crc = __builtin_bswap16(crc_calculate(packet->hw_radio_packet.data, packet->hw_radio_packet.length - 2));
 80055ba:	269a      	movs	r6, #154	; 0x9a
 80055bc:	0076      	lsls	r6, r6, #1
 80055be:	5b81      	ldrh	r1, [r0, r6]
 80055c0:	3902      	subs	r1, #2
 80055c2:	b2c9      	uxtb	r1, r1
 80055c4:	0005      	movs	r5, r0
 80055c6:	3537      	adds	r5, #55	; 0x37
 80055c8:	35ff      	adds	r5, #255	; 0xff
 80055ca:	0028      	movs	r0, r5
 80055cc:	f008 fe14 	bl	800e1f8 <crc_calculate>
 80055d0:	ba43      	rev16	r3, r0
 80055d2:	a801      	add	r0, sp, #4
 80055d4:	8003      	strh	r3, [r0, #0]
        if(memcmp(&crc, packet->hw_radio_packet.data + packet->hw_radio_packet.length - 2, 2) != 0)
 80055d6:	5ba1      	ldrh	r1, [r4, r6]
 80055d8:	3902      	subs	r1, #2
 80055da:	1869      	adds	r1, r5, r1
 80055dc:	2202      	movs	r2, #2
 80055de:	f00f fbcf 	bl	8014d80 <memcmp>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	d0b8      	beq.n	8005558 <packet_disassemble+0x14>
            log_print_error_string("CRC invalid");
 80055e6:	481e      	ldr	r0, [pc, #120]	; (8005660 <packet_disassemble+0x11c>)
 80055e8:	f009 fcfa 	bl	800efe0 <log_print_error_string>
            goto cleanup;
 80055ec:	e00a      	b.n	8005604 <packet_disassemble+0xc0>
        data_idx = 0;
 80055ee:	466b      	mov	r3, sp
 80055f0:	2200      	movs	r2, #0
 80055f2:	71da      	strb	r2, [r3, #7]
 80055f4:	e7b7      	b.n	8005566 <packet_disassemble+0x22>
        if(!d7anp_disassemble_packet_header(packet, &data_idx))
 80055f6:	466b      	mov	r3, sp
 80055f8:	1dd9      	adds	r1, r3, #7
 80055fa:	0020      	movs	r0, r4
 80055fc:	f7ff fa8c 	bl	8004b18 <d7anp_disassemble_packet_header>
 8005600:	2800      	cmp	r0, #0
 8005602:	d107      	bne.n	8005614 <packet_disassemble+0xd0>

    cleanup:
        log_print_error_string("Skipping packet");
 8005604:	4817      	ldr	r0, [pc, #92]	; (8005664 <packet_disassemble+0x120>)
 8005606:	f009 fceb 	bl	800efe0 <log_print_error_string>
        packet_queue_free_packet(packet);
 800560a:	0020      	movs	r0, r4
 800560c:	f7ff fed4 	bl	80053b8 <packet_queue_free_packet>
        return;
}
 8005610:	b002      	add	sp, #8
 8005612:	bd70      	pop	{r4, r5, r6, pc}
        if(!d7atp_disassemble_packet_header(packet, &data_idx))
 8005614:	466b      	mov	r3, sp
 8005616:	1dd9      	adds	r1, r3, #7
 8005618:	0020      	movs	r0, r4
 800561a:	f7fe fb0b 	bl	8003c34 <d7atp_disassemble_packet_header>
 800561e:	2800      	cmp	r0, #0
 8005620:	d0f0      	beq.n	8005604 <packet_disassemble+0xc0>
        if(packet->hw_radio_packet.length < (data_idx + 2))
 8005622:	466b      	mov	r3, sp
 8005624:	79d9      	ldrb	r1, [r3, #7]
 8005626:	1c4a      	adds	r2, r1, #1
 8005628:	239a      	movs	r3, #154	; 0x9a
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	5ae3      	ldrh	r3, [r4, r3]
 800562e:	429a      	cmp	r2, r3
 8005630:	dae8      	bge.n	8005604 <packet_disassemble+0xc0>
        packet->payload_length = packet->hw_radio_packet.length - data_idx - 2; // exclude the headers CRC bytes // TODO exclude footers
 8005632:	1a5a      	subs	r2, r3, r1
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	3a02      	subs	r2, #2
 8005638:	b2d2      	uxtb	r2, r2
 800563a:	2332      	movs	r3, #50	; 0x32
 800563c:	54e2      	strb	r2, [r4, r3]
        if(packet->payload_length > MODULE_D7AP_PAYLOAD_SIZE)
 800563e:	2aef      	cmp	r2, #239	; 0xef
 8005640:	d8e0      	bhi.n	8005604 <packet_disassemble+0xc0>
        memcpy(packet->payload, packet->hw_radio_packet.data + data_idx, packet->payload_length);
 8005642:	0023      	movs	r3, r4
 8005644:	3337      	adds	r3, #55	; 0x37
 8005646:	33ff      	adds	r3, #255	; 0xff
 8005648:	1859      	adds	r1, r3, r1
 800564a:	0020      	movs	r0, r4
 800564c:	3033      	adds	r0, #51	; 0x33
 800564e:	f00f fbbf 	bl	8014dd0 <memcpy>
 8005652:	e7ae      	b.n	80055b2 <packet_disassemble+0x6e>
        assert(packet->payload_length == sizeof(uint16_t));
 8005654:	4b04      	ldr	r3, [pc, #16]	; (8005668 <packet_disassemble+0x124>)
 8005656:	4a05      	ldr	r2, [pc, #20]	; (800566c <packet_disassemble+0x128>)
 8005658:	219a      	movs	r1, #154	; 0x9a
 800565a:	4805      	ldr	r0, [pc, #20]	; (8005670 <packet_disassemble+0x12c>)
 800565c:	f002 ffd0 	bl	8008600 <__assert_func>
 8005660:	080189f8 	.word	0x080189f8
 8005664:	08018a68 	.word	0x08018a68
 8005668:	08018a04 	.word	0x08018a04
 800566c:	08018a78 	.word	0x08018a78
 8005670:	08018a30 	.word	0x08018a30

08005674 <is_tx_busy>:
    }
}

static bool is_tx_busy()
{
    switch(dll_state)
 8005674:	4b08      	ldr	r3, [pc, #32]	; (8005698 <is_tx_busy+0x24>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b07      	cmp	r3, #7
 800567a:	d805      	bhi.n	8005688 <is_tx_busy+0x14>
 800567c:	2b03      	cmp	r3, #3
 800567e:	d201      	bcs.n	8005684 <is_tx_busy+0x10>
        case DLL_STATE_CCA_FAIL:
        case DLL_STATE_TX_FOREGROUND:
        case DLL_STATE_TX_FOREGROUND_COMPLETED:
            return true;
        default:
            return false;
 8005680:	2000      	movs	r0, #0
    }
}
 8005682:	4770      	bx	lr
    switch(dll_state)
 8005684:	2001      	movs	r0, #1
 8005686:	e7fc      	b.n	8005682 <is_tx_busy+0xe>
 8005688:	3b09      	subs	r3, #9
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b01      	cmp	r3, #1
 800568e:	d901      	bls.n	8005694 <is_tx_busy+0x20>
            return false;
 8005690:	2000      	movs	r0, #0
 8005692:	e7f6      	b.n	8005682 <is_tx_busy+0xe>
    switch(dll_state)
 8005694:	2001      	movs	r0, #1
 8005696:	e7f4      	b.n	8005682 <is_tx_busy+0xe>
 8005698:	2000273a 	.word	0x2000273a

0800569c <get_position_channel>:
        }
    }
}

/* returns the position of the current_channel_id in the channel array. If not found and no more room, returns Max value */
static uint8_t get_position_channel() {
 800569c:	b530      	push	{r4, r5, lr}
 800569e:	b083      	sub	sp, #12
    uint8_t position;
    channel_status_t local_channel = {
 80056a0:	ac01      	add	r4, sp, #4
 80056a2:	2203      	movs	r2, #3
 80056a4:	2100      	movs	r1, #0
 80056a6:	0020      	movs	r0, r4
 80056a8:	f00f fbe6 	bl	8014e78 <memset>
        .ch_freq_band = current_channel_id.channel_header.ch_freq_band,
        .bandwidth_25kHz = (current_channel_id.channel_header.ch_class == PHY_CLASS_LO_RATE),
        .channel_index_lsb = (current_channel_id.center_freq_index & 0xFF),
        .channel_index_msb = (uint8_t)((current_channel_id.center_freq_index >> 8) & 0x07),
 80056ac:	4b1c      	ldr	r3, [pc, #112]	; (8005720 <get_position_channel+0x84>)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	0210      	lsls	r0, r2, #8
 80056b2:	0c05      	lsrs	r5, r0, #16
 80056b4:	0e00      	lsrs	r0, r0, #24
        .bandwidth_25kHz = (current_channel_id.channel_header.ch_class == PHY_CLASS_LO_RATE),
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	210c      	movs	r1, #12
 80056ba:	4019      	ands	r1, r3
    channel_status_t local_channel = {
 80056bc:	424a      	negs	r2, r1
 80056be:	4151      	adcs	r1, r2
 80056c0:	0109      	lsls	r1, r1, #4
 80056c2:	2207      	movs	r2, #7
 80056c4:	4002      	ands	r2, r0
        .ch_freq_band = current_channel_id.channel_header.ch_freq_band,
 80056c6:	065b      	lsls	r3, r3, #25
 80056c8:	0f5b      	lsrs	r3, r3, #29
    channel_status_t local_channel = {
 80056ca:	015b      	lsls	r3, r3, #5
 80056cc:	430a      	orrs	r2, r1
 80056ce:	4313      	orrs	r3, r2
 80056d0:	7023      	strb	r3, [r4, #0]
 80056d2:	b2ed      	uxtb	r5, r5
        .noise_floor = - E_CCA
    };
    for(position = 0; position < PHY_STATUS_MAX_CHANNELS; position++) {
 80056d4:	2000      	movs	r0, #0
 80056d6:	e005      	b.n	80056e4 <get_position_channel+0x48>
        if(((channels[position].raw_channel_status_identifier == 0) && (channels[position].channel_index_lsb == 0)) || 
           ((channels[position].raw_channel_status_identifier == local_channel.raw_channel_status_identifier) && (channels[position].channel_index_lsb == local_channel.channel_index_lsb)))
 80056d8:	aa01      	add	r2, sp, #4
 80056da:	7812      	ldrb	r2, [r2, #0]
        if(((channels[position].raw_channel_status_identifier == 0) && (channels[position].channel_index_lsb == 0)) || 
 80056dc:	4293      	cmp	r3, r2
 80056de:	d011      	beq.n	8005704 <get_position_channel+0x68>
    for(position = 0; position < PHY_STATUS_MAX_CHANNELS; position++) {
 80056e0:	3001      	adds	r0, #1
 80056e2:	b2c0      	uxtb	r0, r0
 80056e4:	2809      	cmp	r0, #9
 80056e6:	d815      	bhi.n	8005714 <get_position_channel+0x78>
        if(((channels[position].raw_channel_status_identifier == 0) && (channels[position].channel_index_lsb == 0)) || 
 80056e8:	0001      	movs	r1, r0
 80056ea:	0043      	lsls	r3, r0, #1
 80056ec:	181b      	adds	r3, r3, r0
 80056ee:	4a0d      	ldr	r2, [pc, #52]	; (8005724 <get_position_channel+0x88>)
 80056f0:	5c9b      	ldrb	r3, [r3, r2]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <get_position_channel+0x3c>
 80056f6:	0044      	lsls	r4, r0, #1
 80056f8:	1824      	adds	r4, r4, r0
 80056fa:	1912      	adds	r2, r2, r4
 80056fc:	7852      	ldrb	r2, [r2, #1]
 80056fe:	2a00      	cmp	r2, #0
 8005700:	d1ea      	bne.n	80056d8 <get_position_channel+0x3c>
 8005702:	e00b      	b.n	800571c <get_position_channel+0x80>
           ((channels[position].raw_channel_status_identifier == local_channel.raw_channel_status_identifier) && (channels[position].channel_index_lsb == local_channel.channel_index_lsb)))
 8005704:	004b      	lsls	r3, r1, #1
 8005706:	185b      	adds	r3, r3, r1
 8005708:	4906      	ldr	r1, [pc, #24]	; (8005724 <get_position_channel+0x88>)
 800570a:	18c9      	adds	r1, r1, r3
 800570c:	784b      	ldrb	r3, [r1, #1]
 800570e:	429d      	cmp	r5, r3
 8005710:	d1e6      	bne.n	80056e0 <get_position_channel+0x44>
 8005712:	e003      	b.n	800571c <get_position_channel+0x80>
            return position;
    }
    log_print_error_string("position of channel out of bound. Increase channels size or delete previous");
 8005714:	4804      	ldr	r0, [pc, #16]	; (8005728 <get_position_channel+0x8c>)
 8005716:	f009 fc63 	bl	800efe0 <log_print_error_string>
    return UINT8_MAX;
 800571a:	20ff      	movs	r0, #255	; 0xff
}
 800571c:	b003      	add	sp, #12
 800571e:	bd30      	pop	{r4, r5, pc}
 8005720:	2000272c 	.word	0x2000272c
 8005724:	2000278c 	.word	0x2000278c
 8005728:	08018a8c 	.word	0x08018a8c

0800572c <save_noise_floor>:

static void save_noise_floor(uint8_t position) {
 800572c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800572e:	46de      	mov	lr, fp
 8005730:	4657      	mov	r7, sl
 8005732:	464e      	mov	r6, r9
 8005734:	4645      	mov	r5, r8
 8005736:	b5e0      	push	{r5, r6, r7, lr}
 8005738:	b085      	sub	sp, #20
    if(position == UINT8_MAX)
 800573a:	28ff      	cmp	r0, #255	; 0xff
 800573c:	d059      	beq.n	80057f2 <save_noise_floor+0xc6>
        return;
    if((channels[position].raw_channel_status_identifier == 0) && (channels[position].channel_index_lsb == 0)) { // new channel
 800573e:	0043      	lsls	r3, r0, #1
 8005740:	181b      	adds	r3, r3, r0
 8005742:	4a2f      	ldr	r2, [pc, #188]	; (8005800 <save_noise_floor+0xd4>)
 8005744:	5c9b      	ldrb	r3, [r3, r2]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d139      	bne.n	80057be <save_noise_floor+0x92>
 800574a:	0042      	lsls	r2, r0, #1
 800574c:	1812      	adds	r2, r2, r0
 800574e:	4b2c      	ldr	r3, [pc, #176]	; (8005800 <save_noise_floor+0xd4>)
 8005750:	189b      	adds	r3, r3, r2
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d132      	bne.n	80057be <save_noise_floor+0x92>
        channels[position] = (channel_status_t) {
            .ch_freq_band = current_channel_id.channel_header.ch_freq_band,
            .bandwidth_25kHz = (current_channel_id.channel_header.ch_class == PHY_CLASS_LO_RATE),
            .channel_index_lsb = (current_channel_id.center_freq_index & 0xFF),
            .channel_index_msb = (uint8_t)((current_channel_id.center_freq_index >> 8) & 0x07),
 8005758:	4b2a      	ldr	r3, [pc, #168]	; (8005804 <save_noise_floor+0xd8>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	0217      	lsls	r7, r2, #8
 800575e:	0c3a      	lsrs	r2, r7, #16
 8005760:	4693      	mov	fp, r2
 8005762:	0e3f      	lsrs	r7, r7, #24
 8005764:	2507      	movs	r5, #7
 8005766:	402f      	ands	r7, r5
            .bandwidth_25kHz = (current_channel_id.channel_header.ch_class == PHY_CLASS_LO_RATE),
 8005768:	781e      	ldrb	r6, [r3, #0]
 800576a:	240c      	movs	r4, #12
 800576c:	4034      	ands	r4, r6
 800576e:	4263      	negs	r3, r4
 8005770:	415c      	adcs	r4, r3
 8005772:	b2e4      	uxtb	r4, r4
            .ch_freq_band = current_channel_id.channel_header.ch_freq_band,
 8005774:	0676      	lsls	r6, r6, #25
 8005776:	0f76      	lsrs	r6, r6, #29
        channels[position] = (channel_status_t) {
 8005778:	4b23      	ldr	r3, [pc, #140]	; (8005808 <save_noise_floor+0xdc>)
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	425b      	negs	r3, r3
 800577e:	b2db      	uxtb	r3, r3
 8005780:	9303      	str	r3, [sp, #12]
 8005782:	4a1f      	ldr	r2, [pc, #124]	; (8005800 <save_noise_floor+0xd4>)
 8005784:	4692      	mov	sl, r2
 8005786:	0043      	lsls	r3, r0, #1
 8005788:	4698      	mov	r8, r3
 800578a:	4480      	add	r8, r0
 800578c:	4691      	mov	r9, r2
 800578e:	44c1      	add	r9, r8
 8005790:	2203      	movs	r2, #3
 8005792:	2100      	movs	r1, #0
 8005794:	4648      	mov	r0, r9
 8005796:	f00f fb6f 	bl	8014e78 <memset>
 800579a:	0124      	lsls	r4, r4, #4
 800579c:	403d      	ands	r5, r7
 800579e:	0176      	lsls	r6, r6, #5
 80057a0:	432c      	orrs	r4, r5
 80057a2:	4326      	orrs	r6, r4
 80057a4:	4652      	mov	r2, sl
 80057a6:	4641      	mov	r1, r8
 80057a8:	548e      	strb	r6, [r1, r2]
 80057aa:	464a      	mov	r2, r9
 80057ac:	4659      	mov	r1, fp
 80057ae:	7051      	strb	r1, [r2, #1]
 80057b0:	9b03      	ldr	r3, [sp, #12]
 80057b2:	7093      	strb	r3, [r2, #2]
            .noise_floor = - E_CCA
        };
        phy_status_channel_counter++;
 80057b4:	4a15      	ldr	r2, [pc, #84]	; (800580c <save_noise_floor+0xe0>)
 80057b6:	7813      	ldrb	r3, [r2, #0]
 80057b8:	3301      	adds	r3, #1
 80057ba:	7013      	strb	r3, [r2, #0]
    if((channels[position].raw_channel_status_identifier == 0) && (channels[position].channel_index_lsb == 0)) { // new channel
 80057bc:	e007      	b.n	80057ce <save_noise_floor+0xa2>
    } else
        channels[position].noise_floor = - E_CCA;
 80057be:	0043      	lsls	r3, r0, #1
 80057c0:	181b      	adds	r3, r3, r0
 80057c2:	480f      	ldr	r0, [pc, #60]	; (8005800 <save_noise_floor+0xd4>)
 80057c4:	18c0      	adds	r0, r0, r3
 80057c6:	4b10      	ldr	r3, [pc, #64]	; (8005808 <save_noise_floor+0xdc>)
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	425b      	negs	r3, r3
 80057cc:	7083      	strb	r3, [r0, #2]

    d7ap_fs_write_file(D7A_FILE_PHY_STATUS_FILE_ID, D7A_FILE_PHY_STATUS_MINIMUM_SIZE - 1, &phy_status_channel_counter, sizeof(uint8_t), ROOT_AUTH);
 80057ce:	4d0f      	ldr	r5, [pc, #60]	; (800580c <save_noise_floor+0xe0>)
 80057d0:	2400      	movs	r4, #0
 80057d2:	9400      	str	r4, [sp, #0]
 80057d4:	2301      	movs	r3, #1
 80057d6:	002a      	movs	r2, r5
 80057d8:	210e      	movs	r1, #14
 80057da:	2009      	movs	r0, #9
 80057dc:	f002 fbc0 	bl	8007f60 <d7ap_fs_write_file>
    d7ap_fs_write_file(D7A_FILE_PHY_STATUS_FILE_ID, D7A_FILE_PHY_STATUS_MINIMUM_SIZE, (uint8_t*) channels, phy_status_channel_counter * sizeof(channel_status_t), ROOT_AUTH);
 80057e0:	782a      	ldrb	r2, [r5, #0]
 80057e2:	0053      	lsls	r3, r2, #1
 80057e4:	189b      	adds	r3, r3, r2
 80057e6:	9400      	str	r4, [sp, #0]
 80057e8:	4a05      	ldr	r2, [pc, #20]	; (8005800 <save_noise_floor+0xd4>)
 80057ea:	210f      	movs	r1, #15
 80057ec:	2009      	movs	r0, #9
 80057ee:	f002 fbb7 	bl	8007f60 <d7ap_fs_write_file>
}
 80057f2:	b005      	add	sp, #20
 80057f4:	bc3c      	pop	{r2, r3, r4, r5}
 80057f6:	4690      	mov	r8, r2
 80057f8:	4699      	mov	r9, r3
 80057fa:	46a2      	mov	sl, r4
 80057fc:	46ab      	mov	fp, r5
 80057fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005800:	2000278c 	.word	0x2000278c
 8005804:	2000272c 	.word	0x2000272c
 8005808:	200026e4 	.word	0x200026e4
 800580c:	20002832 	.word	0x20002832

08005810 <dll_signal_packet_received>:
{
 8005810:	b510      	push	{r4, lr}
 8005812:	0004      	movs	r4, r0
    assert((dll_state == DLL_STATE_IDLE && process_received_packets_after_tx) || dll_state == DLL_STATE_FOREGROUND_SCAN || dll_state == DLL_STATE_SCAN_AUTOMATION);
 8005814:	4b27      	ldr	r3, [pc, #156]	; (80058b4 <dll_signal_packet_received+0xa4>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d013      	beq.n	8005844 <dll_signal_packet_received+0x34>
 800581c:	2b08      	cmp	r3, #8
 800581e:	d001      	beq.n	8005824 <dll_signal_packet_received+0x14>
 8005820:	2b02      	cmp	r3, #2
 8005822:	d114      	bne.n	800584e <dll_signal_packet_received+0x3e>
    assert(packet != NULL);
 8005824:	2c00      	cmp	r4, #0
 8005826:	d019      	beq.n	800585c <dll_signal_packet_received+0x4c>
    if (packet->type != BACKGROUND_ADV)
 8005828:	232c      	movs	r3, #44	; 0x2c
 800582a:	5ce3      	ldrb	r3, [r4, r3]
 800582c:	2b05      	cmp	r3, #5
 800582e:	d11c      	bne.n	800586a <dll_signal_packet_received+0x5a>
    if (is_tx_busy())
 8005830:	f7ff ff20 	bl	8005674 <is_tx_busy>
 8005834:	2800      	cmp	r0, #0
 8005836:	d036      	beq.n	80058a6 <dll_signal_packet_received+0x96>
        process_received_packets_after_tx = true;
 8005838:	4b1f      	ldr	r3, [pc, #124]	; (80058b8 <dll_signal_packet_received+0xa8>)
 800583a:	2201      	movs	r2, #1
 800583c:	701a      	strb	r2, [r3, #0]
        dll_process_received_packet_timer.arg = packet;
 800583e:	4b1f      	ldr	r3, [pc, #124]	; (80058bc <dll_signal_packet_received+0xac>)
 8005840:	60dc      	str	r4, [r3, #12]
}
 8005842:	bd10      	pop	{r4, pc}
    assert((dll_state == DLL_STATE_IDLE && process_received_packets_after_tx) || dll_state == DLL_STATE_FOREGROUND_SCAN || dll_state == DLL_STATE_SCAN_AUTOMATION);
 8005844:	4a1c      	ldr	r2, [pc, #112]	; (80058b8 <dll_signal_packet_received+0xa8>)
 8005846:	7812      	ldrb	r2, [r2, #0]
 8005848:	2a00      	cmp	r2, #0
 800584a:	d1eb      	bne.n	8005824 <dll_signal_packet_received+0x14>
 800584c:	e7e6      	b.n	800581c <dll_signal_packet_received+0xc>
 800584e:	2152      	movs	r1, #82	; 0x52
 8005850:	4b1b      	ldr	r3, [pc, #108]	; (80058c0 <dll_signal_packet_received+0xb0>)
 8005852:	4a1c      	ldr	r2, [pc, #112]	; (80058c4 <dll_signal_packet_received+0xb4>)
 8005854:	31ff      	adds	r1, #255	; 0xff
 8005856:	481c      	ldr	r0, [pc, #112]	; (80058c8 <dll_signal_packet_received+0xb8>)
 8005858:	f002 fed2 	bl	8008600 <__assert_func>
    assert(packet != NULL);
 800585c:	21a9      	movs	r1, #169	; 0xa9
 800585e:	4b1b      	ldr	r3, [pc, #108]	; (80058cc <dll_signal_packet_received+0xbc>)
 8005860:	4a18      	ldr	r2, [pc, #96]	; (80058c4 <dll_signal_packet_received+0xb4>)
 8005862:	0049      	lsls	r1, r1, #1
 8005864:	4818      	ldr	r0, [pc, #96]	; (80058c8 <dll_signal_packet_received+0xb8>)
 8005866:	f002 fecb 	bl	8008600 <__assert_func>
        uint16_t tx_duration = phy_calculate_tx_duration(current_channel_id.channel_header.ch_class,
 800586a:	4b19      	ldr	r3, [pc, #100]	; (80058d0 <dll_signal_packet_received+0xc0>)
 800586c:	7819      	ldrb	r1, [r3, #0]
 800586e:	0708      	lsls	r0, r1, #28
 8005870:	0f80      	lsrs	r0, r0, #30
                                                         current_channel_id.channel_header.ch_coding,
 8005872:	0789      	lsls	r1, r1, #30
 8005874:	0f89      	lsrs	r1, r1, #30
                                                         packet->hw_radio_packet.length + 1, false);
 8005876:	239a      	movs	r3, #154	; 0x9a
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	5ae2      	ldrh	r2, [r4, r3]
        uint16_t tx_duration = phy_calculate_tx_duration(current_channel_id.channel_header.ch_class,
 800587c:	3201      	adds	r2, #1
 800587e:	b292      	uxth	r2, r2
 8005880:	2300      	movs	r3, #0
 8005882:	f001 fce3 	bl	800724c <phy_calculate_tx_duration>
        guarded_channel_time_stop = packet->hw_radio_packet.rx_meta.timestamp + ((tx_duration >= t_g) ? t_g : t_g - tx_duration);
 8005886:	2394      	movs	r3, #148	; 0x94
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	58e3      	ldr	r3, [r4, r3]
 800588c:	2804      	cmp	r0, #4
 800588e:	d808      	bhi.n	80058a2 <dll_signal_packet_received+0x92>
 8005890:	2205      	movs	r2, #5
 8005892:	1a10      	subs	r0, r2, r0
 8005894:	1818      	adds	r0, r3, r0
 8005896:	4b0f      	ldr	r3, [pc, #60]	; (80058d4 <dll_signal_packet_received+0xc4>)
 8005898:	6018      	str	r0, [r3, #0]
        guarded_channel = true;
 800589a:	4b0f      	ldr	r3, [pc, #60]	; (80058d8 <dll_signal_packet_received+0xc8>)
 800589c:	2201      	movs	r2, #1
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	e7c6      	b.n	8005830 <dll_signal_packet_received+0x20>
        guarded_channel_time_stop = packet->hw_radio_packet.rx_meta.timestamp + ((tx_duration >= t_g) ? t_g : t_g - tx_duration);
 80058a2:	2005      	movs	r0, #5
 80058a4:	e7f6      	b.n	8005894 <dll_signal_packet_received+0x84>
    packet_queue_mark_processing(packet);
 80058a6:	0020      	movs	r0, r4
 80058a8:	f7ff fdd2 	bl	8005450 <packet_queue_mark_processing>
    packet_disassemble(packet);
 80058ac:	0020      	movs	r0, r4
 80058ae:	f7ff fe49 	bl	8005544 <packet_disassemble>
 80058b2:	e7c6      	b.n	8005842 <dll_signal_packet_received+0x32>
 80058b4:	2000273a 	.word	0x2000273a
 80058b8:	20002741 	.word	0x20002741
 80058bc:	200027e8 	.word	0x200027e8
 80058c0:	08018ad8 	.word	0x08018ad8
 80058c4:	0801924c 	.word	0x0801924c
 80058c8:	08018b70 	.word	0x08018b70
 80058cc:	08018ba4 	.word	0x08018ba4
 80058d0:	2000272c 	.word	0x2000272c
 80058d4:	20002810 	.word	0x20002810
 80058d8:	20002740 	.word	0x20002740

080058dc <packet_received>:
{
 80058dc:	b510      	push	{r4, lr}
    dll_signal_packet_received((packet_t*)arg);
 80058de:	f7ff ff97 	bl	8005810 <dll_signal_packet_received>
}
 80058e2:	bd10      	pop	{r4, pc}

080058e4 <switch_state>:
{
 80058e4:	b510      	push	{r4, lr}
    switch(next_state)
 80058e6:	280b      	cmp	r0, #11
 80058e8:	d900      	bls.n	80058ec <switch_state+0x8>
 80058ea:	e0c8      	b.n	8005a7e <switch_state+0x19a>
 80058ec:	0083      	lsls	r3, r0, #2
 80058ee:	4a69      	ldr	r2, [pc, #420]	; (8005a94 <switch_state+0x1b0>)
 80058f0:	58d3      	ldr	r3, [r2, r3]
 80058f2:	469f      	mov	pc, r3
        assert(dll_state == DLL_STATE_IDLE || dll_state == DLL_STATE_SCAN_AUTOMATION
 80058f4:	4b68      	ldr	r3, [pc, #416]	; (8005a98 <switch_state+0x1b4>)
 80058f6:	781a      	ldrb	r2, [r3, #0]
 80058f8:	1e53      	subs	r3, r2, #1
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d903      	bls.n	8005908 <switch_state+0x24>
 8005900:	2a08      	cmp	r2, #8
 8005902:	d001      	beq.n	8005908 <switch_state+0x24>
 8005904:	2a0a      	cmp	r2, #10
 8005906:	d102      	bne.n	800590e <switch_state+0x2a>
        dll_state = next_state;
 8005908:	4b63      	ldr	r3, [pc, #396]	; (8005a98 <switch_state+0x1b4>)
 800590a:	7018      	strb	r0, [r3, #0]
        break;
 800590c:	e059      	b.n	80059c2 <switch_state+0xde>
        assert(dll_state == DLL_STATE_IDLE || dll_state == DLL_STATE_SCAN_AUTOMATION
 800590e:	4b63      	ldr	r3, [pc, #396]	; (8005a9c <switch_state+0x1b8>)
 8005910:	4a63      	ldr	r2, [pc, #396]	; (8005aa0 <switch_state+0x1bc>)
 8005912:	21b1      	movs	r1, #177	; 0xb1
 8005914:	4863      	ldr	r0, [pc, #396]	; (8005aa4 <switch_state+0x1c0>)
 8005916:	f002 fe73 	bl	8008600 <__assert_func>
        assert(dll_state == DLL_STATE_CCA1 || dll_state == DLL_STATE_CCA2);
 800591a:	4b5f      	ldr	r3, [pc, #380]	; (8005a98 <switch_state+0x1b4>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	3b05      	subs	r3, #5
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b01      	cmp	r3, #1
 8005924:	d802      	bhi.n	800592c <switch_state+0x48>
        dll_state = next_state;
 8005926:	4b5c      	ldr	r3, [pc, #368]	; (8005a98 <switch_state+0x1b4>)
 8005928:	7018      	strb	r0, [r3, #0]
        break;
 800592a:	e04a      	b.n	80059c2 <switch_state+0xde>
        assert(dll_state == DLL_STATE_CCA1 || dll_state == DLL_STATE_CCA2);
 800592c:	4b5e      	ldr	r3, [pc, #376]	; (8005aa8 <switch_state+0x1c4>)
 800592e:	4a5c      	ldr	r2, [pc, #368]	; (8005aa0 <switch_state+0x1bc>)
 8005930:	21b8      	movs	r1, #184	; 0xb8
 8005932:	485c      	ldr	r0, [pc, #368]	; (8005aa4 <switch_state+0x1c0>)
 8005934:	f002 fe64 	bl	8008600 <__assert_func>
        assert(dll_state == DLL_STATE_CSMA_CA_STARTED || dll_state == DLL_STATE_CSMA_CA_RETRY);
 8005938:	4b57      	ldr	r3, [pc, #348]	; (8005a98 <switch_state+0x1b4>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	3b03      	subs	r3, #3
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b01      	cmp	r3, #1
 8005942:	d802      	bhi.n	800594a <switch_state+0x66>
        dll_state = next_state;
 8005944:	4b54      	ldr	r3, [pc, #336]	; (8005a98 <switch_state+0x1b4>)
 8005946:	7018      	strb	r0, [r3, #0]
        break;
 8005948:	e03b      	b.n	80059c2 <switch_state+0xde>
        assert(dll_state == DLL_STATE_CSMA_CA_STARTED || dll_state == DLL_STATE_CSMA_CA_RETRY);
 800594a:	4b58      	ldr	r3, [pc, #352]	; (8005aac <switch_state+0x1c8>)
 800594c:	4a54      	ldr	r2, [pc, #336]	; (8005aa0 <switch_state+0x1bc>)
 800594e:	21bd      	movs	r1, #189	; 0xbd
 8005950:	4854      	ldr	r0, [pc, #336]	; (8005aa4 <switch_state+0x1c0>)
 8005952:	f002 fe55 	bl	8008600 <__assert_func>
        assert(dll_state == DLL_STATE_CCA1);
 8005956:	4b50      	ldr	r3, [pc, #320]	; (8005a98 <switch_state+0x1b4>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b05      	cmp	r3, #5
 800595c:	d102      	bne.n	8005964 <switch_state+0x80>
        dll_state = next_state;
 800595e:	4b4e      	ldr	r3, [pc, #312]	; (8005a98 <switch_state+0x1b4>)
 8005960:	7018      	strb	r0, [r3, #0]
        break;
 8005962:	e02e      	b.n	80059c2 <switch_state+0xde>
        assert(dll_state == DLL_STATE_CCA1);
 8005964:	4b52      	ldr	r3, [pc, #328]	; (8005ab0 <switch_state+0x1cc>)
 8005966:	4a4e      	ldr	r2, [pc, #312]	; (8005aa0 <switch_state+0x1bc>)
 8005968:	21c2      	movs	r1, #194	; 0xc2
 800596a:	484e      	ldr	r0, [pc, #312]	; (8005aa4 <switch_state+0x1c0>)
 800596c:	f002 fe48 	bl	8008600 <__assert_func>
        assert(dll_state == DLL_STATE_IDLE || dll_state == DLL_STATE_SCAN_AUTOMATION
 8005970:	4b49      	ldr	r3, [pc, #292]	; (8005a98 <switch_state+0x1b4>)
 8005972:	781a      	ldrb	r2, [r3, #0]
 8005974:	1e53      	subs	r3, r2, #1
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b01      	cmp	r3, #1
 800597a:	d901      	bls.n	8005980 <switch_state+0x9c>
 800597c:	2a0a      	cmp	r2, #10
 800597e:	d102      	bne.n	8005986 <switch_state+0xa2>
        dll_state = next_state;
 8005980:	4b45      	ldr	r3, [pc, #276]	; (8005a98 <switch_state+0x1b4>)
 8005982:	7018      	strb	r0, [r3, #0]
        break;
 8005984:	e01d      	b.n	80059c2 <switch_state+0xde>
        assert(dll_state == DLL_STATE_IDLE || dll_state == DLL_STATE_SCAN_AUTOMATION
 8005986:	4b4b      	ldr	r3, [pc, #300]	; (8005ab4 <switch_state+0x1d0>)
 8005988:	4a45      	ldr	r2, [pc, #276]	; (8005aa0 <switch_state+0x1bc>)
 800598a:	21c7      	movs	r1, #199	; 0xc7
 800598c:	4845      	ldr	r0, [pc, #276]	; (8005aa4 <switch_state+0x1c0>)
 800598e:	f002 fe37 	bl	8008600 <__assert_func>
        assert(dll_state == DLL_STATE_FOREGROUND_SCAN
 8005992:	4b41      	ldr	r3, [pc, #260]	; (8005a98 <switch_state+0x1b4>)
 8005994:	781a      	ldrb	r2, [r3, #0]
 8005996:	1fd3      	subs	r3, r2, #7
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b01      	cmp	r3, #1
 800599c:	d90f      	bls.n	80059be <switch_state+0xda>
 800599e:	2a0b      	cmp	r2, #11
 80059a0:	d00d      	beq.n	80059be <switch_state+0xda>
 80059a2:	2a0a      	cmp	r2, #10
 80059a4:	d00b      	beq.n	80059be <switch_state+0xda>
 80059a6:	2a03      	cmp	r2, #3
 80059a8:	d009      	beq.n	80059be <switch_state+0xda>
 80059aa:	2a05      	cmp	r2, #5
 80059ac:	d007      	beq.n	80059be <switch_state+0xda>
 80059ae:	2a06      	cmp	r2, #6
 80059b0:	d005      	beq.n	80059be <switch_state+0xda>
 80059b2:	2a04      	cmp	r2, #4
 80059b4:	d003      	beq.n	80059be <switch_state+0xda>
 80059b6:	2a02      	cmp	r2, #2
 80059b8:	d001      	beq.n	80059be <switch_state+0xda>
 80059ba:	2a01      	cmp	r2, #1
 80059bc:	d10a      	bne.n	80059d4 <switch_state+0xf0>
        dll_state = next_state;
 80059be:	4b36      	ldr	r3, [pc, #216]	; (8005a98 <switch_state+0x1b4>)
 80059c0:	7018      	strb	r0, [r3, #0]
    switch(dll_state)
 80059c2:	4b35      	ldr	r3, [pc, #212]	; (8005a98 <switch_state+0x1b4>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	3b03      	subs	r3, #3
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d85e      	bhi.n	8005a8a <switch_state+0x1a6>
          DEBUG_PIN_SET(2);
 80059cc:	2002      	movs	r0, #2
 80059ce:	f002 fe0e 	bl	80085ee <hw_debug_set>
}
 80059d2:	bd10      	pop	{r4, pc}
        assert(dll_state == DLL_STATE_FOREGROUND_SCAN
 80059d4:	4b38      	ldr	r3, [pc, #224]	; (8005ab8 <switch_state+0x1d4>)
 80059d6:	4a32      	ldr	r2, [pc, #200]	; (8005aa0 <switch_state+0x1bc>)
 80059d8:	21cd      	movs	r1, #205	; 0xcd
 80059da:	4832      	ldr	r0, [pc, #200]	; (8005aa4 <switch_state+0x1c0>)
 80059dc:	f002 fe10 	bl	8008600 <__assert_func>
        assert(dll_state == DLL_STATE_FOREGROUND_SCAN
 80059e0:	4b2d      	ldr	r3, [pc, #180]	; (8005a98 <switch_state+0x1b4>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d005      	beq.n	80059f4 <switch_state+0x110>
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d003      	beq.n	80059f4 <switch_state+0x110>
 80059ec:	2b0a      	cmp	r3, #10
 80059ee:	d001      	beq.n	80059f4 <switch_state+0x110>
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d102      	bne.n	80059fa <switch_state+0x116>
        dll_state = next_state;
 80059f4:	4b28      	ldr	r3, [pc, #160]	; (8005a98 <switch_state+0x1b4>)
 80059f6:	7018      	strb	r0, [r3, #0]
        break;
 80059f8:	e7e3      	b.n	80059c2 <switch_state+0xde>
        assert(dll_state == DLL_STATE_FOREGROUND_SCAN
 80059fa:	4b30      	ldr	r3, [pc, #192]	; (8005abc <switch_state+0x1d8>)
 80059fc:	4a28      	ldr	r2, [pc, #160]	; (8005aa0 <switch_state+0x1bc>)
 80059fe:	21db      	movs	r1, #219	; 0xdb
 8005a00:	4828      	ldr	r0, [pc, #160]	; (8005aa4 <switch_state+0x1c0>)
 8005a02:	f002 fdfd 	bl	8008600 <__assert_func>
        assert(dll_state == DLL_STATE_CCA2 || dll_state == DLL_STATE_CSMA_CA_STARTED);
 8005a06:	4b24      	ldr	r3, [pc, #144]	; (8005a98 <switch_state+0x1b4>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b06      	cmp	r3, #6
 8005a0c:	d001      	beq.n	8005a12 <switch_state+0x12e>
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d102      	bne.n	8005a18 <switch_state+0x134>
        dll_state = next_state;
 8005a12:	4b21      	ldr	r3, [pc, #132]	; (8005a98 <switch_state+0x1b4>)
 8005a14:	7018      	strb	r0, [r3, #0]
        break;
 8005a16:	e7d4      	b.n	80059c2 <switch_state+0xde>
        assert(dll_state == DLL_STATE_CCA2 || dll_state == DLL_STATE_CSMA_CA_STARTED);
 8005a18:	4b29      	ldr	r3, [pc, #164]	; (8005ac0 <switch_state+0x1dc>)
 8005a1a:	4a21      	ldr	r2, [pc, #132]	; (8005aa0 <switch_state+0x1bc>)
 8005a1c:	21e3      	movs	r1, #227	; 0xe3
 8005a1e:	4821      	ldr	r0, [pc, #132]	; (8005aa4 <switch_state+0x1c0>)
 8005a20:	f002 fdee 	bl	8008600 <__assert_func>
        assert(dll_state == DLL_STATE_TX_FOREGROUND);
 8005a24:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <switch_state+0x1b4>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b09      	cmp	r3, #9
 8005a2a:	d102      	bne.n	8005a32 <switch_state+0x14e>
        dll_state = next_state;
 8005a2c:	4b1a      	ldr	r3, [pc, #104]	; (8005a98 <switch_state+0x1b4>)
 8005a2e:	7018      	strb	r0, [r3, #0]
        break;
 8005a30:	e7c7      	b.n	80059c2 <switch_state+0xde>
        assert(dll_state == DLL_STATE_TX_FOREGROUND);
 8005a32:	4b24      	ldr	r3, [pc, #144]	; (8005ac4 <switch_state+0x1e0>)
 8005a34:	4a1a      	ldr	r2, [pc, #104]	; (8005aa0 <switch_state+0x1bc>)
 8005a36:	21e8      	movs	r1, #232	; 0xe8
 8005a38:	481a      	ldr	r0, [pc, #104]	; (8005aa4 <switch_state+0x1c0>)
 8005a3a:	f002 fde1 	bl	8008600 <__assert_func>
        assert(dll_state == DLL_STATE_TX_FOREGROUND);
 8005a3e:	4b16      	ldr	r3, [pc, #88]	; (8005a98 <switch_state+0x1b4>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b09      	cmp	r3, #9
 8005a44:	d102      	bne.n	8005a4c <switch_state+0x168>
        dll_state = next_state;
 8005a46:	4b14      	ldr	r3, [pc, #80]	; (8005a98 <switch_state+0x1b4>)
 8005a48:	7018      	strb	r0, [r3, #0]
        break;
 8005a4a:	e7ba      	b.n	80059c2 <switch_state+0xde>
        assert(dll_state == DLL_STATE_TX_FOREGROUND);
 8005a4c:	4b1d      	ldr	r3, [pc, #116]	; (8005ac4 <switch_state+0x1e0>)
 8005a4e:	4a14      	ldr	r2, [pc, #80]	; (8005aa0 <switch_state+0x1bc>)
 8005a50:	21ed      	movs	r1, #237	; 0xed
 8005a52:	4814      	ldr	r0, [pc, #80]	; (8005aa4 <switch_state+0x1c0>)
 8005a54:	f002 fdd4 	bl	8008600 <__assert_func>
        assert(dll_state == DLL_STATE_CCA1 || dll_state == DLL_STATE_CCA2
 8005a58:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <switch_state+0x1b4>)
 8005a5a:	781a      	ldrb	r2, [r3, #0]
 8005a5c:	1f53      	subs	r3, r2, #5
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d903      	bls.n	8005a6c <switch_state+0x188>
 8005a64:	2a03      	cmp	r2, #3
 8005a66:	d001      	beq.n	8005a6c <switch_state+0x188>
 8005a68:	2a04      	cmp	r2, #4
 8005a6a:	d102      	bne.n	8005a72 <switch_state+0x18e>
        dll_state = next_state;
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <switch_state+0x1b4>)
 8005a6e:	7018      	strb	r0, [r3, #0]
        break;
 8005a70:	e7a7      	b.n	80059c2 <switch_state+0xde>
        assert(dll_state == DLL_STATE_CCA1 || dll_state == DLL_STATE_CCA2
 8005a72:	4b15      	ldr	r3, [pc, #84]	; (8005ac8 <switch_state+0x1e4>)
 8005a74:	4a0a      	ldr	r2, [pc, #40]	; (8005aa0 <switch_state+0x1bc>)
 8005a76:	21f2      	movs	r1, #242	; 0xf2
 8005a78:	480a      	ldr	r0, [pc, #40]	; (8005aa4 <switch_state+0x1c0>)
 8005a7a:	f002 fdc1 	bl	8008600 <__assert_func>
        assert(false);
 8005a7e:	4b13      	ldr	r3, [pc, #76]	; (8005acc <switch_state+0x1e8>)
 8005a80:	4a07      	ldr	r2, [pc, #28]	; (8005aa0 <switch_state+0x1bc>)
 8005a82:	21f8      	movs	r1, #248	; 0xf8
 8005a84:	4807      	ldr	r0, [pc, #28]	; (8005aa4 <switch_state+0x1c0>)
 8005a86:	f002 fdbb 	bl	8008600 <__assert_func>
          DEBUG_PIN_CLR(2);
 8005a8a:	2002      	movs	r0, #2
 8005a8c:	f002 fdb0 	bl	80085f0 <hw_debug_clr>
}
 8005a90:	e79f      	b.n	80059d2 <switch_state+0xee>
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	08019098 	.word	0x08019098
 8005a98:	2000273a 	.word	0x2000273a
 8005a9c:	08018bb4 	.word	0x08018bb4
 8005aa0:	08019208 	.word	0x08019208
 8005aa4:	08018b70 	.word	0x08018b70
 8005aa8:	08018c58 	.word	0x08018c58
 8005aac:	08018c94 	.word	0x08018c94
 8005ab0:	08018ce4 	.word	0x08018ce4
 8005ab4:	08018d00 	.word	0x08018d00
 8005ab8:	08018d78 	.word	0x08018d78
 8005abc:	08018ef4 	.word	0x08018ef4
 8005ac0:	08018f98 	.word	0x08018f98
 8005ac4:	08018fe0 	.word	0x08018fe0
 8005ac8:	08019008 	.word	0x08019008
 8005acc:	080169c8 	.word	0x080169c8

08005ad0 <start_foreground_scan>:
    }
    execute_csma_ca(NULL);
}

static void start_foreground_scan()
{
 8005ad0:	b510      	push	{r4, lr}
    //timer_cancel_event(&dll_scan_automation_timer);  //enable this code if this costly operation proves to be necessary

    if (dll_state == DLL_STATE_SCAN_AUTOMATION)
 8005ad2:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <start_foreground_scan+0x30>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d00c      	beq.n	8005af4 <start_foreground_scan+0x24>
    {
        timer_cancel_event(&dll_background_scan_timer);
        hw_radio_set_idle();
    }

    if (dll_state == DLL_STATE_FOREGROUND_SCAN)
 8005ada:	4b09      	ldr	r3, [pc, #36]	; (8005b00 <start_foreground_scan+0x30>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b08      	cmp	r3, #8
 8005ae0:	d007      	beq.n	8005af2 <start_foreground_scan+0x22>
        return;

    switch_state(DLL_STATE_FOREGROUND_SCAN);
 8005ae2:	2008      	movs	r0, #8
 8005ae4:	f7ff fefe 	bl	80058e4 <switch_state>

    // TODO, if the Requester is MISO and the Request is broadcast, the responses
    // are expected on the channel list of the Requester's Access Class and not
    // necessarily on the current channel used to send the initial request

    phy_start_rx(&current_channel_id, PHY_SYNCWORD_CLASS1, &dll_signal_packet_received);
 8005ae8:	4a06      	ldr	r2, [pc, #24]	; (8005b04 <start_foreground_scan+0x34>)
 8005aea:	2101      	movs	r1, #1
 8005aec:	4806      	ldr	r0, [pc, #24]	; (8005b08 <start_foreground_scan+0x38>)
 8005aee:	f001 fd43 	bl	8007578 <phy_start_rx>
}
 8005af2:	bd10      	pop	{r4, pc}
        timer_cancel_event(&dll_background_scan_timer);
 8005af4:	4805      	ldr	r0, [pc, #20]	; (8005b0c <start_foreground_scan+0x3c>)
 8005af6:	f00a fedd 	bl	80108b4 <timer_cancel_event>
        hw_radio_set_idle();
 8005afa:	f007 fc17 	bl	800d32c <hw_radio_set_idle>
 8005afe:	e7ec      	b.n	8005ada <start_foreground_scan+0xa>
 8005b00:	2000273a 	.word	0x2000273a
 8005b04:	08005811 	.word	0x08005811
 8005b08:	2000272c 	.word	0x2000272c
 8005b0c:	200027ac 	.word	0x200027ac

08005b10 <dll_signal_packet_transmitted>:
{
 8005b10:	b510      	push	{r4, lr}
 8005b12:	0004      	movs	r4, r0
    assert(dll_state == DLL_STATE_TX_FOREGROUND);
 8005b14:	4b20      	ldr	r3, [pc, #128]	; (8005b98 <dll_signal_packet_transmitted+0x88>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b09      	cmp	r3, #9
 8005b1a:	d11c      	bne.n	8005b56 <dll_signal_packet_transmitted+0x46>
    switch_state(DLL_STATE_TX_FOREGROUND_COMPLETED);
 8005b1c:	200a      	movs	r0, #10
 8005b1e:	f7ff fee1 	bl	80058e4 <switch_state>
    guarded_channel_time_stop = timer_get_counter_value() + ((packet->tx_duration >= t_g) ? t_g : t_g - packet->tx_duration);
 8005b22:	f00a fbed 	bl	8010300 <timer_get_counter_value>
 8005b26:	0003      	movs	r3, r0
 8005b28:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8005b2a:	2a04      	cmp	r2, #4
 8005b2c:	d81a      	bhi.n	8005b64 <dll_signal_packet_transmitted+0x54>
 8005b2e:	2005      	movs	r0, #5
 8005b30:	1a80      	subs	r0, r0, r2
 8005b32:	181b      	adds	r3, r3, r0
 8005b34:	4a19      	ldr	r2, [pc, #100]	; (8005b9c <dll_signal_packet_transmitted+0x8c>)
 8005b36:	6013      	str	r3, [r2, #0]
    switch_state(DLL_STATE_IDLE);
 8005b38:	2001      	movs	r0, #1
 8005b3a:	f7ff fed3 	bl	80058e4 <switch_state>
    d7anp_signal_packet_transmitted(packet);
 8005b3e:	0020      	movs	r0, r4
 8005b40:	f7ff f8f0 	bl	8004d24 <d7anp_signal_packet_transmitted>
    if (process_received_packets_after_tx)
 8005b44:	4b16      	ldr	r3, [pc, #88]	; (8005ba0 <dll_signal_packet_transmitted+0x90>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10d      	bne.n	8005b68 <dll_signal_packet_transmitted+0x58>
    if (resume_fg_scan)
 8005b4c:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <dll_signal_packet_transmitted+0x94>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d11b      	bne.n	8005b8c <dll_signal_packet_transmitted+0x7c>
}
 8005b54:	bd10      	pop	{r4, pc}
    assert(dll_state == DLL_STATE_TX_FOREGROUND);
 8005b56:	217a      	movs	r1, #122	; 0x7a
 8005b58:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <dll_signal_packet_transmitted+0x98>)
 8005b5a:	4a14      	ldr	r2, [pc, #80]	; (8005bac <dll_signal_packet_transmitted+0x9c>)
 8005b5c:	31ff      	adds	r1, #255	; 0xff
 8005b5e:	4814      	ldr	r0, [pc, #80]	; (8005bb0 <dll_signal_packet_transmitted+0xa0>)
 8005b60:	f002 fd4e 	bl	8008600 <__assert_func>
    guarded_channel_time_stop = timer_get_counter_value() + ((packet->tx_duration >= t_g) ? t_g : t_g - packet->tx_duration);
 8005b64:	2005      	movs	r0, #5
 8005b66:	e7e4      	b.n	8005b32 <dll_signal_packet_transmitted+0x22>
        dll_process_received_packet_timer.next_event = 0;
 8005b68:	4812      	ldr	r0, [pc, #72]	; (8005bb4 <dll_signal_packet_transmitted+0xa4>)
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	6043      	str	r3, [r0, #4]
        error_t rtc = timer_add_event(&dll_process_received_packet_timer);
 8005b6e:	f00a fe61 	bl	8010834 <timer_add_event>
        assert(rtc == SUCCESS);
 8005b72:	2800      	cmp	r0, #0
 8005b74:	d103      	bne.n	8005b7e <dll_signal_packet_transmitted+0x6e>
        process_received_packets_after_tx = false;
 8005b76:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <dll_signal_packet_transmitted+0x90>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	701a      	strb	r2, [r3, #0]
 8005b7c:	e7e6      	b.n	8005b4c <dll_signal_packet_transmitted+0x3c>
        assert(rtc == SUCCESS);
 8005b7e:	21c3      	movs	r1, #195	; 0xc3
 8005b80:	4b0d      	ldr	r3, [pc, #52]	; (8005bb8 <dll_signal_packet_transmitted+0xa8>)
 8005b82:	4a0a      	ldr	r2, [pc, #40]	; (8005bac <dll_signal_packet_transmitted+0x9c>)
 8005b84:	0049      	lsls	r1, r1, #1
 8005b86:	480a      	ldr	r0, [pc, #40]	; (8005bb0 <dll_signal_packet_transmitted+0xa0>)
 8005b88:	f002 fd3a 	bl	8008600 <__assert_func>
        start_foreground_scan();
 8005b8c:	f7ff ffa0 	bl	8005ad0 <start_foreground_scan>
        resume_fg_scan = false;
 8005b90:	4b04      	ldr	r3, [pc, #16]	; (8005ba4 <dll_signal_packet_transmitted+0x94>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	701a      	strb	r2, [r3, #0]
}
 8005b96:	e7dd      	b.n	8005b54 <dll_signal_packet_transmitted+0x44>
 8005b98:	2000273a 	.word	0x2000273a
 8005b9c:	20002810 	.word	0x20002810
 8005ba0:	20002741 	.word	0x20002741
 8005ba4:	20002785 	.word	0x20002785
 8005ba8:	08018fe0 	.word	0x08018fe0
 8005bac:	08019268 	.word	0x08019268
 8005bb0:	08018b70 	.word	0x08018b70
 8005bb4:	200027e8 	.word	0x200027e8
 8005bb8:	08017738 	.word	0x08017738

08005bbc <conf_file_changed_callback>:
{
 8005bbc:	b510      	push	{r4, lr}
    uint8_t scan_access_class = d7ap_fs_read_dll_conf_active_access_class();
 8005bbe:	f002 f94a 	bl	8007e56 <d7ap_fs_read_dll_conf_active_access_class>
 8005bc2:	0004      	movs	r4, r0
    if (active_access_class != scan_access_class)
 8005bc4:	4b0f      	ldr	r3, [pc, #60]	; (8005c04 <conf_file_changed_callback+0x48>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	4283      	cmp	r3, r0
 8005bca:	d100      	bne.n	8005bce <conf_file_changed_callback+0x12>
}
 8005bcc:	bd10      	pop	{r4, pc}
        d7ap_fs_read_access_class(ACCESS_SPECIFIER(scan_access_class), &current_access_profile);
 8005bce:	0900      	lsrs	r0, r0, #4
 8005bd0:	b2c0      	uxtb	r0, r0
 8005bd2:	490d      	ldr	r1, [pc, #52]	; (8005c08 <conf_file_changed_callback+0x4c>)
 8005bd4:	f002 f904 	bl	8007de0 <d7ap_fs_read_access_class>
        active_access_class = scan_access_class;
 8005bd8:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <conf_file_changed_callback+0x48>)
 8005bda:	701c      	strb	r4, [r3, #0]
        if (dll_state == DLL_STATE_IDLE || dll_state == DLL_STATE_SCAN_AUTOMATION)
 8005bdc:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <conf_file_changed_callback+0x50>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d8f1      	bhi.n	8005bcc <conf_file_changed_callback+0x10>
            dll_scan_automation_timer.next_event = 0;
 8005be8:	4809      	ldr	r0, [pc, #36]	; (8005c10 <conf_file_changed_callback+0x54>)
 8005bea:	2300      	movs	r3, #0
 8005bec:	6043      	str	r3, [r0, #4]
            int rtc = timer_add_event(&dll_scan_automation_timer);
 8005bee:	f00a fe21 	bl	8010834 <timer_add_event>
            assert(rtc == SUCCESS);
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d0ea      	beq.n	8005bcc <conf_file_changed_callback+0x10>
 8005bf6:	4b07      	ldr	r3, [pc, #28]	; (8005c14 <conf_file_changed_callback+0x58>)
 8005bf8:	4a07      	ldr	r2, [pc, #28]	; (8005c18 <conf_file_changed_callback+0x5c>)
 8005bfa:	4908      	ldr	r1, [pc, #32]	; (8005c1c <conf_file_changed_callback+0x60>)
 8005bfc:	4808      	ldr	r0, [pc, #32]	; (8005c20 <conf_file_changed_callback+0x64>)
 8005bfe:	f002 fcff 	bl	8008600 <__assert_func>
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	200026e6 	.word	0x200026e6
 8005c08:	200026e8 	.word	0x200026e8
 8005c0c:	2000273a 	.word	0x2000273a
 8005c10:	200027fc 	.word	0x200027fc
 8005c14:	08017738 	.word	0x08017738
 8005c18:	080192d0 	.word	0x080192d0
 8005c1c:	0000036a 	.word	0x0000036a
 8005c20:	08018b70 	.word	0x08018b70

08005c24 <execute_csma_ca>:
{
 8005c24:	b570      	push	{r4, r5, r6, lr}
    guarded_channel = (guarded_channel
 8005c26:	4bc3      	ldr	r3, [pc, #780]	; (8005f34 <execute_csma_ca+0x310>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
        && (timer_calculate_difference(timer_get_counter_value(), guarded_channel_time_stop) <= t_g));
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d119      	bne.n	8005c62 <execute_csma_ca+0x3e>
 8005c2e:	2300      	movs	r3, #0
    guarded_channel = (guarded_channel
 8005c30:	4ac0      	ldr	r2, [pc, #768]	; (8005f34 <execute_csma_ca+0x310>)
 8005c32:	7013      	strb	r3, [r2, #0]
    if ((current_packet->type == SUBSEQUENT_REQUEST || current_packet->type == RESPONSE_TO_UNICAST
 8005c34:	4ac0      	ldr	r2, [pc, #768]	; (8005f38 <execute_csma_ca+0x314>)
 8005c36:	6811      	ldr	r1, [r2, #0]
 8005c38:	222c      	movs	r2, #44	; 0x2c
 8005c3a:	5c8a      	ldrb	r2, [r1, r2]
 8005c3c:	2a01      	cmp	r2, #1
 8005c3e:	d003      	beq.n	8005c48 <execute_csma_ca+0x24>
 8005c40:	2a03      	cmp	r2, #3
 8005c42:	d001      	beq.n	8005c48 <execute_csma_ca+0x24>
            || current_packet->type == REQUEST_IN_DIALOG_EXTENSION)
 8005c44:	2a06      	cmp	r2, #6
 8005c46:	d101      	bne.n	8005c4c <execute_csma_ca+0x28>
        && guarded_channel) {
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d116      	bne.n	8005c7a <execute_csma_ca+0x56>
    switch (dll_state)
 8005c4c:	4bbb      	ldr	r3, [pc, #748]	; (8005f3c <execute_csma_ca+0x318>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d100      	bne.n	8005c56 <execute_csma_ca+0x32>
 8005c54:	e0dc      	b.n	8005e10 <execute_csma_ca+0x1ec>
 8005c56:	2b07      	cmp	r3, #7
 8005c58:	d100      	bne.n	8005c5c <execute_csma_ca+0x38>
 8005c5a:	e142      	b.n	8005ee2 <execute_csma_ca+0x2be>
 8005c5c:	2b03      	cmp	r3, #3
 8005c5e:	d021      	beq.n	8005ca4 <execute_csma_ca+0x80>
}
 8005c60:	bd70      	pop	{r4, r5, r6, pc}
        && (timer_calculate_difference(timer_get_counter_value(), guarded_channel_time_stop) <= t_g));
 8005c62:	f00a fb4d 	bl	8010300 <timer_get_counter_value>
 8005c66:	4bb6      	ldr	r3, [pc, #728]	; (8005f40 <execute_csma_ca+0x31c>)
 8005c68:	6819      	ldr	r1, [r3, #0]
 8005c6a:	f00a fb8b 	bl	8010384 <timer_calculate_difference>
 8005c6e:	2805      	cmp	r0, #5
 8005c70:	d801      	bhi.n	8005c76 <execute_csma_ca+0x52>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e7dc      	b.n	8005c30 <execute_csma_ca+0xc>
 8005c76:	2300      	movs	r3, #0
 8005c78:	e7da      	b.n	8005c30 <execute_csma_ca+0xc>
        switch_state(DLL_STATE_TX_FOREGROUND);
 8005c7a:	2009      	movs	r0, #9
 8005c7c:	f7ff fe32 	bl	80058e4 <switch_state>
        error_t rtc = phy_send_packet(&current_packet->hw_radio_packet, &current_packet->phy_config.tx, &dll_signal_packet_transmitted);
 8005c80:	4bad      	ldr	r3, [pc, #692]	; (8005f38 <execute_csma_ca+0x314>)
 8005c82:	6818      	ldr	r0, [r3, #0]
 8005c84:	0001      	movs	r1, r0
 8005c86:	3123      	adds	r1, #35	; 0x23
 8005c88:	31ff      	adds	r1, #255	; 0xff
 8005c8a:	3029      	adds	r0, #41	; 0x29
 8005c8c:	30ff      	adds	r0, #255	; 0xff
 8005c8e:	4aad      	ldr	r2, [pc, #692]	; (8005f44 <execute_csma_ca+0x320>)
 8005c90:	f001 fcce 	bl	8007630 <phy_send_packet>
        assert(rtc == SUCCESS);
 8005c94:	2800      	cmp	r0, #0
 8005c96:	d0e3      	beq.n	8005c60 <execute_csma_ca+0x3c>
 8005c98:	4bab      	ldr	r3, [pc, #684]	; (8005f48 <execute_csma_ca+0x324>)
 8005c9a:	4aac      	ldr	r2, [pc, #688]	; (8005f4c <execute_csma_ca+0x328>)
 8005c9c:	49ac      	ldr	r1, [pc, #688]	; (8005f50 <execute_csma_ca+0x32c>)
 8005c9e:	48ad      	ldr	r0, [pc, #692]	; (8005f54 <execute_csma_ca+0x330>)
 8005ca0:	f002 fcae 	bl	8008600 <__assert_func>
            if (current_packet->type == RESPONSE_TO_UNICAST || current_packet->type == RESPONSE_TO_BROADCAST)
 8005ca4:	3a03      	subs	r2, #3
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	2a01      	cmp	r2, #1
 8005caa:	d949      	bls.n	8005d40 <execute_csma_ca+0x11c>
                dll_tc = ceil((SFc + 1) * current_packet->tx_duration + t_g);
 8005cac:	8e08      	ldrh	r0, [r1, #48]	; 0x30
 8005cae:	0080      	lsls	r0, r0, #2
 8005cb0:	3005      	adds	r0, #5
 8005cb2:	f00e fd75 	bl	80147a0 <__aeabi_i2d>
 8005cb6:	f00b fcc5 	bl	8011644 <ceil>
 8005cba:	f00c f977 	bl	8011fac <__aeabi_d2uiz>
 8005cbe:	b280      	uxth	r0, r0
            dll_tca = dll_tc - current_packet->tx_duration - t_g - 1;
 8005cc0:	4c9d      	ldr	r4, [pc, #628]	; (8005f38 <execute_csma_ca+0x314>)
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005cc6:	1ac0      	subs	r0, r0, r3
 8005cc8:	b280      	uxth	r0, r0
 8005cca:	3806      	subs	r0, #6
 8005ccc:	4ba2      	ldr	r3, [pc, #648]	; (8005f58 <execute_csma_ca+0x334>)
 8005cce:	8018      	strh	r0, [r3, #0]
            dll_cca_started = timer_get_counter_value();
 8005cd0:	f00a fb16 	bl	8010300 <timer_get_counter_value>
 8005cd4:	4ba1      	ldr	r3, [pc, #644]	; (8005f5c <execute_csma_ca+0x338>)
 8005cd6:	6018      	str	r0, [r3, #0]
            if (current_packet->request_received_timestamp)
 8005cd8:	6822      	ldr	r2, [r4, #0]
 8005cda:	6813      	ldr	r3, [r2, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <execute_csma_ca+0xc6>
                dll_tca -= dll_cca_started - current_packet->request_received_timestamp;
 8005ce0:	499d      	ldr	r1, [pc, #628]	; (8005f58 <execute_csma_ca+0x334>)
 8005ce2:	1a18      	subs	r0, r3, r0
 8005ce4:	880b      	ldrh	r3, [r1, #0]
 8005ce6:	18c0      	adds	r0, r0, r3
 8005ce8:	8008      	strh	r0, [r1, #0]
            if (dll_tca <= 0)
 8005cea:	4b9b      	ldr	r3, [pc, #620]	; (8005f58 <execute_csma_ca+0x334>)
 8005cec:	2000      	movs	r0, #0
 8005cee:	5e18      	ldrsh	r0, [r3, r0]
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	dd41      	ble.n	8005d78 <execute_csma_ca+0x154>
            if (current_packet->type == RESPONSE_TO_BROADCAST)
 8005cf4:	232c      	movs	r3, #44	; 0x2c
 8005cf6:	5cd3      	ldrb	r3, [r2, r3]
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d049      	beq.n	8005d90 <execute_csma_ca+0x16c>
                csma_ca_mode = CSMA_CA_MODE_AIND;
 8005cfc:	4b98      	ldr	r3, [pc, #608]	; (8005f60 <execute_csma_ca+0x33c>)
 8005cfe:	2101      	movs	r1, #1
 8005d00:	7019      	strb	r1, [r3, #0]
            switch(csma_ca_mode)
 8005d02:	4b97      	ldr	r3, [pc, #604]	; (8005f60 <execute_csma_ca+0x33c>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d04b      	beq.n	8005da2 <execute_csma_ca+0x17e>
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d05e      	beq.n	8005dcc <execute_csma_ca+0x1a8>
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d042      	beq.n	8005d98 <execute_csma_ca+0x174>
 8005d12:	2400      	movs	r4, #0
            dll_to = dll_tca;
 8005d14:	4b90      	ldr	r3, [pc, #576]	; (8005f58 <execute_csma_ca+0x334>)
 8005d16:	881a      	ldrh	r2, [r3, #0]
 8005d18:	4b92      	ldr	r3, [pc, #584]	; (8005f64 <execute_csma_ca+0x340>)
 8005d1a:	801a      	strh	r2, [r3, #0]
            if (t_offset)
 8005d1c:	2c00      	cmp	r4, #0
 8005d1e:	d066      	beq.n	8005dee <execute_csma_ca+0x1ca>
                switch_state(DLL_STATE_CCA1);
 8005d20:	2005      	movs	r0, #5
 8005d22:	f7ff fddf 	bl	80058e4 <switch_state>
                dll_cca_timer.next_event = t_offset;
 8005d26:	4890      	ldr	r0, [pc, #576]	; (8005f68 <execute_csma_ca+0x344>)
 8005d28:	6044      	str	r4, [r0, #4]
                error_t rtc = timer_add_event(&dll_cca_timer);
 8005d2a:	f00a fd83 	bl	8010834 <timer_add_event>
                assert(rtc == SUCCESS);
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d100      	bne.n	8005d34 <execute_csma_ca+0x110>
 8005d32:	e795      	b.n	8005c60 <execute_csma_ca+0x3c>
 8005d34:	4b84      	ldr	r3, [pc, #528]	; (8005f48 <execute_csma_ca+0x324>)
 8005d36:	4a85      	ldr	r2, [pc, #532]	; (8005f4c <execute_csma_ca+0x328>)
 8005d38:	498c      	ldr	r1, [pc, #560]	; (8005f6c <execute_csma_ca+0x348>)
 8005d3a:	4886      	ldr	r0, [pc, #536]	; (8005f54 <execute_csma_ca+0x330>)
 8005d3c:	f002 fc60 	bl	8008600 <__assert_func>
                dll_tc = CT_DECOMPRESS(current_packet->d7atp_tc);
 8005d40:	2628      	movs	r6, #40	; 0x28
 8005d42:	5d88      	ldrb	r0, [r1, r6]
 8005d44:	0940      	lsrs	r0, r0, #5
 8005d46:	f00e fd2b 	bl	80147a0 <__aeabi_i2d>
 8005d4a:	0002      	movs	r2, r0
 8005d4c:	000b      	movs	r3, r1
 8005d4e:	2000      	movs	r0, #0
 8005d50:	4987      	ldr	r1, [pc, #540]	; (8005f70 <execute_csma_ca+0x34c>)
 8005d52:	f00b fe1b 	bl	801198c <pow>
 8005d56:	0004      	movs	r4, r0
 8005d58:	000d      	movs	r5, r1
 8005d5a:	4b77      	ldr	r3, [pc, #476]	; (8005f38 <execute_csma_ca+0x314>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	5d9b      	ldrb	r3, [r3, r6]
 8005d60:	201f      	movs	r0, #31
 8005d62:	4018      	ands	r0, r3
 8005d64:	f00e fd1c 	bl	80147a0 <__aeabi_i2d>
 8005d68:	0022      	movs	r2, r4
 8005d6a:	002b      	movs	r3, r5
 8005d6c:	f00d fec6 	bl	8013afc <__aeabi_dmul>
 8005d70:	f00c f91c 	bl	8011fac <__aeabi_d2uiz>
 8005d74:	b280      	uxth	r0, r0
 8005d76:	e7a3      	b.n	8005cc0 <execute_csma_ca+0x9c>
                log_print_error_string("Tca negative, CCA failed");
 8005d78:	487e      	ldr	r0, [pc, #504]	; (8005f74 <execute_csma_ca+0x350>)
 8005d7a:	f009 f931 	bl	800efe0 <log_print_error_string>
                switch_state(DLL_STATE_IDLE); // TODO in this case we should return to scan automation
 8005d7e:	2001      	movs	r0, #1
 8005d80:	f7ff fdb0 	bl	80058e4 <switch_state>
                resume_fg_scan = false;
 8005d84:	4b7c      	ldr	r3, [pc, #496]	; (8005f78 <execute_csma_ca+0x354>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	701a      	strb	r2, [r3, #0]
                d7anp_signal_transmission_failure();
 8005d8a:	f7fe ffad 	bl	8004ce8 <d7anp_signal_transmission_failure>
                break;
 8005d8e:	e767      	b.n	8005c60 <execute_csma_ca+0x3c>
                csma_ca_mode = CSMA_CA_MODE_RAIND;
 8005d90:	4b73      	ldr	r3, [pc, #460]	; (8005f60 <execute_csma_ca+0x33c>)
 8005d92:	2102      	movs	r1, #2
 8005d94:	7019      	strb	r1, [r3, #0]
 8005d96:	e7b4      	b.n	8005d02 <execute_csma_ca+0xde>
                    dll_slot_duration = current_packet->tx_duration;
 8005d98:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8005d9a:	4b78      	ldr	r3, [pc, #480]	; (8005f7c <execute_csma_ca+0x358>)
 8005d9c:	801a      	strh	r2, [r3, #0]
            uint16_t t_offset = 0;
 8005d9e:	2400      	movs	r4, #0
                    break;
 8005da0:	e7b8      	b.n	8005d14 <execute_csma_ca+0xf0>
                    dll_slot_duration = current_packet->tx_duration;
 8005da2:	8e11      	ldrh	r1, [r2, #48]	; 0x30
 8005da4:	4b75      	ldr	r3, [pc, #468]	; (8005f7c <execute_csma_ca+0x358>)
 8005da6:	8019      	strh	r1, [r3, #0]
                    uint16_t max_nr_slots = dll_tca / dll_slot_duration;
 8005da8:	f00b ff3c 	bl	8011c24 <__divsi3>
 8005dac:	0005      	movs	r5, r0
 8005dae:	b284      	uxth	r4, r0
                    if (max_nr_slots)
 8005db0:	2c00      	cmp	r4, #0
 8005db2:	d0af      	beq.n	8005d14 <execute_csma_ca+0xf0>
                        uint16_t slots_wait = get_rnd() % max_nr_slots;
 8005db4:	f009 fa42 	bl	800f23c <get_rnd>
 8005db8:	0429      	lsls	r1, r5, #16
 8005dba:	0c09      	lsrs	r1, r1, #16
 8005dbc:	f00b ff2e 	bl	8011c1c <__aeabi_uidivmod>
 8005dc0:	b28c      	uxth	r4, r1
                        t_offset = slots_wait * dll_slot_duration;
 8005dc2:	4b6e      	ldr	r3, [pc, #440]	; (8005f7c <execute_csma_ca+0x358>)
 8005dc4:	8819      	ldrh	r1, [r3, #0]
 8005dc6:	434c      	muls	r4, r1
 8005dc8:	b2a4      	uxth	r4, r4
 8005dca:	e7a3      	b.n	8005d14 <execute_csma_ca+0xf0>
                    dll_slot_duration = (uint16_t) ((double)dll_tca / 2 );
 8005dcc:	f00e fce8 	bl	80147a0 <__aeabi_i2d>
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	4b6b      	ldr	r3, [pc, #428]	; (8005f80 <execute_csma_ca+0x35c>)
 8005dd4:	f00d fe92 	bl	8013afc <__aeabi_dmul>
 8005dd8:	f00c f8e8 	bl	8011fac <__aeabi_d2uiz>
 8005ddc:	4c67      	ldr	r4, [pc, #412]	; (8005f7c <execute_csma_ca+0x358>)
 8005dde:	8020      	strh	r0, [r4, #0]
                    t_offset = get_rnd() % dll_slot_duration;
 8005de0:	f009 fa2c 	bl	800f23c <get_rnd>
 8005de4:	8821      	ldrh	r1, [r4, #0]
 8005de6:	f00b ff19 	bl	8011c1c <__aeabi_uidivmod>
 8005dea:	b28c      	uxth	r4, r1
                    break;
 8005dec:	e792      	b.n	8005d14 <execute_csma_ca+0xf0>
                switch_state(DLL_STATE_CCA1);
 8005dee:	2005      	movs	r0, #5
 8005df0:	f7ff fd78 	bl	80058e4 <switch_state>
                dll_cca_timer.next_event = 0;
 8005df4:	485c      	ldr	r0, [pc, #368]	; (8005f68 <execute_csma_ca+0x344>)
 8005df6:	2300      	movs	r3, #0
 8005df8:	6043      	str	r3, [r0, #4]
                error_t rtc = timer_add_event(&dll_cca_timer);
 8005dfa:	f00a fd1b 	bl	8010834 <timer_add_event>
                assert(rtc == SUCCESS);
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d100      	bne.n	8005e04 <execute_csma_ca+0x1e0>
 8005e02:	e72d      	b.n	8005c60 <execute_csma_ca+0x3c>
 8005e04:	4b50      	ldr	r3, [pc, #320]	; (8005f48 <execute_csma_ca+0x324>)
 8005e06:	4a51      	ldr	r2, [pc, #324]	; (8005f4c <execute_csma_ca+0x328>)
 8005e08:	495e      	ldr	r1, [pc, #376]	; (8005f84 <execute_csma_ca+0x360>)
 8005e0a:	4852      	ldr	r0, [pc, #328]	; (8005f54 <execute_csma_ca+0x330>)
 8005e0c:	f002 fbf8 	bl	8008600 <__assert_func>
            int32_t cca_duration = timer_get_counter_value() - dll_cca_started;
 8005e10:	f00a fa76 	bl	8010300 <timer_get_counter_value>
 8005e14:	4b51      	ldr	r3, [pc, #324]	; (8005f5c <execute_csma_ca+0x338>)
 8005e16:	6819      	ldr	r1, [r3, #0]
 8005e18:	1a40      	subs	r0, r0, r1
            dll_to -= cca_duration;
 8005e1a:	4b52      	ldr	r3, [pc, #328]	; (8005f64 <execute_csma_ca+0x340>)
 8005e1c:	8819      	ldrh	r1, [r3, #0]
 8005e1e:	1a09      	subs	r1, r1, r0
 8005e20:	b209      	sxth	r1, r1
 8005e22:	8019      	strh	r1, [r3, #0]
            if (dll_to <= 0)
 8005e24:	2900      	cmp	r1, #0
 8005e26:	dd18      	ble.n	8005e5a <execute_csma_ca+0x236>
            dll_tca = dll_to;
 8005e28:	4b4b      	ldr	r3, [pc, #300]	; (8005f58 <execute_csma_ca+0x334>)
 8005e2a:	8019      	strh	r1, [r3, #0]
            dll_cca_started = timer_get_counter_value();
 8005e2c:	f00a fa68 	bl	8010300 <timer_get_counter_value>
 8005e30:	4b4a      	ldr	r3, [pc, #296]	; (8005f5c <execute_csma_ca+0x338>)
 8005e32:	6018      	str	r0, [r3, #0]
            switch(csma_ca_mode)
 8005e34:	4b4a      	ldr	r3, [pc, #296]	; (8005f60 <execute_csma_ca+0x33c>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d922      	bls.n	8005e82 <execute_csma_ca+0x25e>
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d122      	bne.n	8005e86 <execute_csma_ca+0x262>
                    dll_slot_duration >>= 1;
 8005e40:	4a4e      	ldr	r2, [pc, #312]	; (8005f7c <execute_csma_ca+0x358>)
 8005e42:	8813      	ldrh	r3, [r2, #0]
 8005e44:	085b      	lsrs	r3, r3, #1
 8005e46:	8013      	strh	r3, [r2, #0]
                    if (dll_slot_duration != 0) // TODO can be 0, validate
 8005e48:	d01d      	beq.n	8005e86 <execute_csma_ca+0x262>
                        t_offset = get_rnd() % dll_slot_duration;
 8005e4a:	f009 f9f7 	bl	800f23c <get_rnd>
 8005e4e:	4b4b      	ldr	r3, [pc, #300]	; (8005f7c <execute_csma_ca+0x358>)
 8005e50:	8819      	ldrh	r1, [r3, #0]
 8005e52:	f00b fee3 	bl	8011c1c <__aeabi_uidivmod>
 8005e56:	b289      	uxth	r1, r1
 8005e58:	e03e      	b.n	8005ed8 <execute_csma_ca+0x2b4>
                log_print_error_string("CCA fail because dll_to = %i", dll_to);
 8005e5a:	484b      	ldr	r0, [pc, #300]	; (8005f88 <execute_csma_ca+0x364>)
 8005e5c:	f009 f8c0 	bl	800efe0 <log_print_error_string>
                switch_state(DLL_STATE_CCA_FAIL);
 8005e60:	2007      	movs	r0, #7
 8005e62:	f7ff fd3f 	bl	80058e4 <switch_state>
                dll_csma_timer.next_event = 0;
 8005e66:	4849      	ldr	r0, [pc, #292]	; (8005f8c <execute_csma_ca+0x368>)
 8005e68:	2300      	movs	r3, #0
 8005e6a:	6043      	str	r3, [r0, #4]
                error_t rtc = timer_add_event(&dll_csma_timer);
 8005e6c:	f00a fce2 	bl	8010834 <timer_add_event>
                assert(rtc == SUCCESS);
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d100      	bne.n	8005e76 <execute_csma_ca+0x252>
 8005e74:	e6f4      	b.n	8005c60 <execute_csma_ca+0x3c>
 8005e76:	4b34      	ldr	r3, [pc, #208]	; (8005f48 <execute_csma_ca+0x324>)
 8005e78:	4a34      	ldr	r2, [pc, #208]	; (8005f4c <execute_csma_ca+0x328>)
 8005e7a:	4945      	ldr	r1, [pc, #276]	; (8005f90 <execute_csma_ca+0x36c>)
 8005e7c:	4835      	ldr	r0, [pc, #212]	; (8005f54 <execute_csma_ca+0x330>)
 8005e7e:	f002 fbbf 	bl	8008600 <__assert_func>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d112      	bne.n	8005eac <execute_csma_ca+0x288>
                dll_cca_timer.next_event = 0;
 8005e86:	4b38      	ldr	r3, [pc, #224]	; (8005f68 <execute_csma_ca+0x344>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	605a      	str	r2, [r3, #4]
            switch_state(DLL_STATE_CCA1);
 8005e8c:	2005      	movs	r0, #5
 8005e8e:	f7ff fd29 	bl	80058e4 <switch_state>
            error_t rtc = timer_add_event(&dll_cca_timer);
 8005e92:	4835      	ldr	r0, [pc, #212]	; (8005f68 <execute_csma_ca+0x344>)
 8005e94:	f00a fcce 	bl	8010834 <timer_add_event>
            assert(rtc == SUCCESS);
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d100      	bne.n	8005e9e <execute_csma_ca+0x27a>
 8005e9c:	e6e0      	b.n	8005c60 <execute_csma_ca+0x3c>
 8005e9e:	21ac      	movs	r1, #172	; 0xac
 8005ea0:	4b29      	ldr	r3, [pc, #164]	; (8005f48 <execute_csma_ca+0x324>)
 8005ea2:	4a2a      	ldr	r2, [pc, #168]	; (8005f4c <execute_csma_ca+0x328>)
 8005ea4:	0089      	lsls	r1, r1, #2
 8005ea6:	482b      	ldr	r0, [pc, #172]	; (8005f54 <execute_csma_ca+0x330>)
 8005ea8:	f002 fbaa 	bl	8008600 <__assert_func>
                    uint16_t max_nr_slots = dll_tca / dll_slot_duration;
 8005eac:	4b2a      	ldr	r3, [pc, #168]	; (8005f58 <execute_csma_ca+0x334>)
 8005eae:	2000      	movs	r0, #0
 8005eb0:	5e18      	ldrsh	r0, [r3, r0]
 8005eb2:	4b32      	ldr	r3, [pc, #200]	; (8005f7c <execute_csma_ca+0x358>)
 8005eb4:	8819      	ldrh	r1, [r3, #0]
 8005eb6:	f00b feb5 	bl	8011c24 <__divsi3>
 8005eba:	0004      	movs	r4, r0
 8005ebc:	b283      	uxth	r3, r0
                    if (max_nr_slots)
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d0e1      	beq.n	8005e86 <execute_csma_ca+0x262>
                        uint16_t slots_wait = get_rnd() % max_nr_slots;
 8005ec2:	f009 f9bb 	bl	800f23c <get_rnd>
 8005ec6:	0421      	lsls	r1, r4, #16
 8005ec8:	0c09      	lsrs	r1, r1, #16
 8005eca:	f00b fea7 	bl	8011c1c <__aeabi_uidivmod>
 8005ece:	b289      	uxth	r1, r1
                        t_offset = slots_wait * dll_slot_duration;
 8005ed0:	4b2a      	ldr	r3, [pc, #168]	; (8005f7c <execute_csma_ca+0x358>)
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	4359      	muls	r1, r3
 8005ed6:	b289      	uxth	r1, r1
            if (t_offset)
 8005ed8:	2900      	cmp	r1, #0
 8005eda:	d0d4      	beq.n	8005e86 <execute_csma_ca+0x262>
                dll_cca_timer.next_event = t_offset;
 8005edc:	4b22      	ldr	r3, [pc, #136]	; (8005f68 <execute_csma_ca+0x344>)
 8005ede:	6059      	str	r1, [r3, #4]
 8005ee0:	e7d4      	b.n	8005e8c <execute_csma_ca+0x268>
            switch_state(DLL_STATE_IDLE);
 8005ee2:	2001      	movs	r0, #1
 8005ee4:	f7ff fcfe 	bl	80058e4 <switch_state>
            d7anp_signal_transmission_failure();
 8005ee8:	f7fe fefe 	bl	8004ce8 <d7anp_signal_transmission_failure>
            if (process_received_packets_after_tx)
 8005eec:	4b29      	ldr	r3, [pc, #164]	; (8005f94 <execute_csma_ca+0x370>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d107      	bne.n	8005f04 <execute_csma_ca+0x2e0>
            if (resume_fg_scan)
 8005ef4:	4b20      	ldr	r3, [pc, #128]	; (8005f78 <execute_csma_ca+0x354>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d115      	bne.n	8005f28 <execute_csma_ca+0x304>
            reset_noisefl_last_measurements = true;
 8005efc:	4b26      	ldr	r3, [pc, #152]	; (8005f98 <execute_csma_ca+0x374>)
 8005efe:	2201      	movs	r2, #1
 8005f00:	701a      	strb	r2, [r3, #0]
            break;
 8005f02:	e6ad      	b.n	8005c60 <execute_csma_ca+0x3c>
                dll_process_received_packet_timer.next_event = 0;
 8005f04:	4825      	ldr	r0, [pc, #148]	; (8005f9c <execute_csma_ca+0x378>)
 8005f06:	2300      	movs	r3, #0
 8005f08:	6043      	str	r3, [r0, #4]
                error_t rtc = timer_add_event(&dll_process_received_packet_timer);
 8005f0a:	f00a fc93 	bl	8010834 <timer_add_event>
                assert(rtc == SUCCESS);
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	d103      	bne.n	8005f1a <execute_csma_ca+0x2f6>
                process_received_packets_after_tx = false;
 8005f12:	4b20      	ldr	r3, [pc, #128]	; (8005f94 <execute_csma_ca+0x370>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	e7ec      	b.n	8005ef4 <execute_csma_ca+0x2d0>
                assert(rtc == SUCCESS);
 8005f1a:	21af      	movs	r1, #175	; 0xaf
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <execute_csma_ca+0x324>)
 8005f1e:	4a0b      	ldr	r2, [pc, #44]	; (8005f4c <execute_csma_ca+0x328>)
 8005f20:	0089      	lsls	r1, r1, #2
 8005f22:	480c      	ldr	r0, [pc, #48]	; (8005f54 <execute_csma_ca+0x330>)
 8005f24:	f002 fb6c 	bl	8008600 <__assert_func>
                start_foreground_scan();
 8005f28:	f7ff fdd2 	bl	8005ad0 <start_foreground_scan>
                resume_fg_scan = false;
 8005f2c:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <execute_csma_ca+0x354>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	e7e3      	b.n	8005efc <execute_csma_ca+0x2d8>
 8005f34:	20002740 	.word	0x20002740
 8005f38:	20002730 	.word	0x20002730
 8005f3c:	2000273a 	.word	0x2000273a
 8005f40:	20002810 	.word	0x20002810
 8005f44:	08005b11 	.word	0x08005b11
 8005f48:	08017738 	.word	0x08017738
 8005f4c:	080192a4 	.word	0x080192a4
 8005f50:	0000020d 	.word	0x0000020d
 8005f54:	08018b70 	.word	0x08018b70
 8005f58:	2000273c 	.word	0x2000273c
 8005f5c:	20002734 	.word	0x20002734
 8005f60:	200026e7 	.word	0x200026e7
 8005f64:	2000273e 	.word	0x2000273e
 8005f68:	200027c0 	.word	0x200027c0
 8005f6c:	00000266 	.word	0x00000266
 8005f70:	40100000 	.word	0x40100000
 8005f74:	080190c8 	.word	0x080190c8
 8005f78:	20002785 	.word	0x20002785
 8005f7c:	20002738 	.word	0x20002738
 8005f80:	3fe00000 	.word	0x3fe00000
 8005f84:	0000026d 	.word	0x0000026d
 8005f88:	080190e4 	.word	0x080190e4
 8005f8c:	200027d4 	.word	0x200027d4
 8005f90:	0000027d 	.word	0x0000027d
 8005f94:	20002741 	.word	0x20002741
 8005f98:	20002834 	.word	0x20002834
 8005f9c:	200027e8 	.word	0x200027e8

08005fa0 <execute_cca>:
{
 8005fa0:	b510      	push	{r4, lr}
    assert(dll_state == DLL_STATE_CCA1 || dll_state == DLL_STATE_CCA2);
 8005fa2:	4b09      	ldr	r3, [pc, #36]	; (8005fc8 <execute_cca+0x28>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	3b05      	subs	r3, #5
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d805      	bhi.n	8005fba <execute_cca+0x1a>
    phy_start_energy_scan(&current_channel_id, cca_rssi_valid, 160);
 8005fae:	22a0      	movs	r2, #160	; 0xa0
 8005fb0:	4906      	ldr	r1, [pc, #24]	; (8005fcc <execute_cca+0x2c>)
 8005fb2:	4807      	ldr	r0, [pc, #28]	; (8005fd0 <execute_cca+0x30>)
 8005fb4:	f001 fb0a 	bl	80075cc <phy_start_energy_scan>
}
 8005fb8:	bd10      	pop	{r4, pc}
    assert(dll_state == DLL_STATE_CCA1 || dll_state == DLL_STATE_CCA2);
 8005fba:	21f6      	movs	r1, #246	; 0xf6
 8005fbc:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <execute_cca+0x34>)
 8005fbe:	4a06      	ldr	r2, [pc, #24]	; (8005fd8 <execute_cca+0x38>)
 8005fc0:	31ff      	adds	r1, #255	; 0xff
 8005fc2:	4806      	ldr	r0, [pc, #24]	; (8005fdc <execute_cca+0x3c>)
 8005fc4:	f002 fb1c 	bl	8008600 <__assert_func>
 8005fc8:	2000273a 	.word	0x2000273a
 8005fcc:	0800693d 	.word	0x0800693d
 8005fd0:	2000272c 	.word	0x2000272c
 8005fd4:	08018c58 	.word	0x08018c58
 8005fd8:	08019298 	.word	0x08019298
 8005fdc:	08018b70 	.word	0x08018b70

08005fe0 <discard_tx>:
{
 8005fe0:	b510      	push	{r4, lr}
    start_atomic();
 8005fe2:	f004 fce1 	bl	800a9a8 <start_atomic>
    if (dll_state == DLL_STATE_TX_FOREGROUND)
 8005fe6:	4b13      	ldr	r3, [pc, #76]	; (8006034 <discard_tx+0x54>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b09      	cmp	r3, #9
 8005fec:	d011      	beq.n	8006012 <discard_tx+0x32>
    end_atomic();
 8005fee:	f004 fce9 	bl	800a9c4 <end_atomic>
    if ((dll_state == DLL_STATE_CCA1) || (dll_state == DLL_STATE_CCA2))
 8005ff2:	4b10      	ldr	r3, [pc, #64]	; (8006034 <discard_tx+0x54>)
 8005ff4:	781a      	ldrb	r2, [r3, #0]
 8005ff6:	1f53      	subs	r3, r2, #5
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d90f      	bls.n	800601e <discard_tx+0x3e>
    else if ((dll_state == DLL_STATE_CCA_FAIL) || (dll_state == DLL_STATE_CSMA_CA_RETRY))
 8005ffe:	2a07      	cmp	r2, #7
 8006000:	d011      	beq.n	8006026 <discard_tx+0x46>
 8006002:	2a04      	cmp	r2, #4
 8006004:	d00f      	beq.n	8006026 <discard_tx+0x46>
    else if (dll_state == DLL_STATE_TX_FOREGROUND_COMPLETED)
 8006006:	2a0a      	cmp	r2, #10
 8006008:	d110      	bne.n	800602c <discard_tx+0x4c>
        guarded_channel = false;
 800600a:	4b0b      	ldr	r3, [pc, #44]	; (8006038 <discard_tx+0x58>)
 800600c:	2200      	movs	r2, #0
 800600e:	701a      	strb	r2, [r3, #0]
 8006010:	e00c      	b.n	800602c <discard_tx+0x4c>
        hw_radio_set_idle();
 8006012:	f007 f98b 	bl	800d32c <hw_radio_set_idle>
        switch_state(DLL_STATE_TX_DISCARDED);
 8006016:	200b      	movs	r0, #11
 8006018:	f7ff fc64 	bl	80058e4 <switch_state>
 800601c:	e7e7      	b.n	8005fee <discard_tx+0xe>
        timer_cancel_event(&dll_cca_timer);
 800601e:	4807      	ldr	r0, [pc, #28]	; (800603c <discard_tx+0x5c>)
 8006020:	f00a fc48 	bl	80108b4 <timer_cancel_event>
 8006024:	e002      	b.n	800602c <discard_tx+0x4c>
        timer_cancel_event(&dll_csma_timer);
 8006026:	4806      	ldr	r0, [pc, #24]	; (8006040 <discard_tx+0x60>)
 8006028:	f00a fc44 	bl	80108b4 <timer_cancel_event>
    switch_state(DLL_STATE_IDLE);
 800602c:	2001      	movs	r0, #1
 800602e:	f7ff fc59 	bl	80058e4 <switch_state>
}
 8006032:	bd10      	pop	{r4, pc}
 8006034:	2000273a 	.word	0x2000273a
 8006038:	20002740 	.word	0x20002740
 800603c:	200027c0 	.word	0x200027c0
 8006040:	200027d4 	.word	0x200027d4

08006044 <median_measured_noisefloor>:
void median_measured_noisefloor(uint8_t position) {
 8006044:	b510      	push	{r4, lr}
 8006046:	0004      	movs	r4, r0
    if(position == UINT8_MAX) {
 8006048:	28ff      	cmp	r0, #255	; 0xff
 800604a:	d022      	beq.n	8006092 <median_measured_noisefloor+0x4e>
    if(reset_noisefl_last_measurements) {
 800604c:	4b22      	ldr	r3, [pc, #136]	; (80060d8 <median_measured_noisefloor+0x94>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d124      	bne.n	800609e <median_measured_noisefloor+0x5a>
    if(noisefl_last_measurements[position][0] && noisefl_last_measurements[position][1] && noisefl_last_measurements[position][2]) { //If not default 0 values
 8006054:	0063      	lsls	r3, r4, #1
 8006056:	191b      	adds	r3, r3, r4
 8006058:	4a20      	ldr	r2, [pc, #128]	; (80060dc <median_measured_noisefloor+0x98>)
 800605a:	5c9b      	ldrb	r3, [r3, r2]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d034      	beq.n	80060ca <median_measured_noisefloor+0x86>
 8006060:	0061      	lsls	r1, r4, #1
 8006062:	1909      	adds	r1, r1, r4
 8006064:	1852      	adds	r2, r2, r1
 8006066:	7852      	ldrb	r2, [r2, #1]
 8006068:	2a00      	cmp	r2, #0
 800606a:	d02e      	beq.n	80060ca <median_measured_noisefloor+0x86>
 800606c:	4c1b      	ldr	r4, [pc, #108]	; (80060dc <median_measured_noisefloor+0x98>)
 800606e:	1864      	adds	r4, r4, r1
 8006070:	78a1      	ldrb	r1, [r4, #2]
 8006072:	2900      	cmp	r1, #0
 8006074:	d029      	beq.n	80060ca <median_measured_noisefloor+0x86>
        uint8_t median = noisefl_last_measurements[position][0]>noisefl_last_measurements[position][1]?  ( noisefl_last_measurements[position][2]>noisefl_last_measurements[position][0]? noisefl_last_measurements[position][0] : (noisefl_last_measurements[position][1]>noisefl_last_measurements[position][2]? noisefl_last_measurements[position][1]:noisefl_last_measurements[position][2]) )  :  ( noisefl_last_measurements[position][2]>noisefl_last_measurements[position][1]? noisefl_last_measurements[position][1] : (noisefl_last_measurements[position][0]>noisefl_last_measurements[position][2]? noisefl_last_measurements[position][0]:noisefl_last_measurements[position][2]) );
 8006076:	4293      	cmp	r3, r2
 8006078:	d91d      	bls.n	80060b6 <median_measured_noisefloor+0x72>
 800607a:	428b      	cmp	r3, r1
 800607c:	d304      	bcc.n	8006088 <median_measured_noisefloor+0x44>
 800607e:	1c13      	adds	r3, r2, #0
 8006080:	428a      	cmp	r2, r1
 8006082:	d200      	bcs.n	8006086 <median_measured_noisefloor+0x42>
 8006084:	1c0b      	adds	r3, r1, #0
 8006086:	b2db      	uxtb	r3, r3
        E_CCA = - median + 6; //Min of last 3 with 6dB offset
 8006088:	2206      	movs	r2, #6
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	4a14      	ldr	r2, [pc, #80]	; (80060e0 <median_measured_noisefloor+0x9c>)
 800608e:	8013      	strh	r3, [r2, #0]
    if(noisefl_last_measurements[position][0] && noisefl_last_measurements[position][1] && noisefl_last_measurements[position][2]) { //If not default 0 values
 8006090:	e020      	b.n	80060d4 <median_measured_noisefloor+0x90>
        E_CCA = - current_access_profile.subbands[0].cca;
 8006092:	4b14      	ldr	r3, [pc, #80]	; (80060e4 <median_measured_noisefloor+0xa0>)
 8006094:	7b9b      	ldrb	r3, [r3, #14]
 8006096:	425b      	negs	r3, r3
 8006098:	4a11      	ldr	r2, [pc, #68]	; (80060e0 <median_measured_noisefloor+0x9c>)
 800609a:	8013      	strh	r3, [r2, #0]
        return;
 800609c:	e01a      	b.n	80060d4 <median_measured_noisefloor+0x90>
        memset(noisefl_last_measurements[position], 0, 3);
 800609e:	0043      	lsls	r3, r0, #1
 80060a0:	181b      	adds	r3, r3, r0
 80060a2:	480e      	ldr	r0, [pc, #56]	; (80060dc <median_measured_noisefloor+0x98>)
 80060a4:	18c0      	adds	r0, r0, r3
 80060a6:	2203      	movs	r2, #3
 80060a8:	2100      	movs	r1, #0
 80060aa:	f00e fee5 	bl	8014e78 <memset>
        reset_noisefl_last_measurements = false;
 80060ae:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <median_measured_noisefloor+0x94>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	e7ce      	b.n	8006054 <median_measured_noisefloor+0x10>
        uint8_t median = noisefl_last_measurements[position][0]>noisefl_last_measurements[position][1]?  ( noisefl_last_measurements[position][2]>noisefl_last_measurements[position][0]? noisefl_last_measurements[position][0] : (noisefl_last_measurements[position][1]>noisefl_last_measurements[position][2]? noisefl_last_measurements[position][1]:noisefl_last_measurements[position][2]) )  :  ( noisefl_last_measurements[position][2]>noisefl_last_measurements[position][1]? noisefl_last_measurements[position][1] : (noisefl_last_measurements[position][0]>noisefl_last_measurements[position][2]? noisefl_last_measurements[position][0]:noisefl_last_measurements[position][2]) );
 80060b6:	428a      	cmp	r2, r1
 80060b8:	d305      	bcc.n	80060c6 <median_measured_noisefloor+0x82>
 80060ba:	1c1a      	adds	r2, r3, #0
 80060bc:	428b      	cmp	r3, r1
 80060be:	d200      	bcs.n	80060c2 <median_measured_noisefloor+0x7e>
 80060c0:	1c0a      	adds	r2, r1, #0
 80060c2:	b2d3      	uxtb	r3, r2
 80060c4:	e7e0      	b.n	8006088 <median_measured_noisefloor+0x44>
 80060c6:	0013      	movs	r3, r2
 80060c8:	e7de      	b.n	8006088 <median_measured_noisefloor+0x44>
        E_CCA = - current_access_profile.subbands[0].cca;
 80060ca:	4b06      	ldr	r3, [pc, #24]	; (80060e4 <median_measured_noisefloor+0xa0>)
 80060cc:	7b9b      	ldrb	r3, [r3, #14]
 80060ce:	425b      	negs	r3, r3
 80060d0:	4a03      	ldr	r2, [pc, #12]	; (80060e0 <median_measured_noisefloor+0x9c>)
 80060d2:	8013      	strh	r3, [r2, #0]
}
 80060d4:	bd10      	pop	{r4, pc}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	20002834 	.word	0x20002834
 80060dc:	20002814 	.word	0x20002814
 80060e0:	200026e4 	.word	0x200026e4
 80060e4:	200026e8 	.word	0x200026e8

080060e8 <start_background_scan>:
{
 80060e8:	b530      	push	{r4, r5, lr}
 80060ea:	b083      	sub	sp, #12
    assert(dll_state == DLL_STATE_SCAN_AUTOMATION);
 80060ec:	4b25      	ldr	r3, [pc, #148]	; (8006184 <start_background_scan+0x9c>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d11b      	bne.n	800612c <start_background_scan+0x44>
    dll_background_scan_timer.next_event = tsched;
 80060f4:	4824      	ldr	r0, [pc, #144]	; (8006188 <start_background_scan+0xa0>)
 80060f6:	4b25      	ldr	r3, [pc, #148]	; (800618c <start_background_scan+0xa4>)
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	6043      	str	r3, [r0, #4]
    timer_add_event(&dll_background_scan_timer);
 80060fc:	f00a fb9a 	bl	8010834 <timer_add_event>
    phy_rx_config_t config = {
 8006100:	2300      	movs	r3, #0
 8006102:	466a      	mov	r2, sp
 8006104:	70d3      	strb	r3, [r2, #3]
 8006106:	4b22      	ldr	r3, [pc, #136]	; (8006190 <start_background_scan+0xa8>)
 8006108:	881a      	ldrh	r2, [r3, #0]
 800610a:	4669      	mov	r1, sp
 800610c:	800a      	strh	r2, [r1, #0]
 800610e:	789b      	ldrb	r3, [r3, #2]
 8006110:	708b      	strb	r3, [r1, #2]
 8006112:	4b20      	ldr	r3, [pc, #128]	; (8006194 <start_background_scan+0xac>)
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	808b      	strh	r3, [r1, #4]
    error_t err = phy_start_background_scan(&config, &dll_signal_packet_received);
 8006118:	491f      	ldr	r1, [pc, #124]	; (8006198 <start_background_scan+0xb0>)
 800611a:	4668      	mov	r0, sp
 800611c:	f001 fba8 	bl	8007870 <phy_start_background_scan>
    if(rx_nf_method == D7ADLL_MEDIAN_OF_THREE) { 
 8006120:	4b1e      	ldr	r3, [pc, #120]	; (800619c <start_background_scan+0xb4>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b02      	cmp	r3, #2
 8006126:	d008      	beq.n	800613a <start_background_scan+0x52>
}
 8006128:	b003      	add	sp, #12
 800612a:	bd30      	pop	{r4, r5, pc}
    assert(dll_state == DLL_STATE_SCAN_AUTOMATION);
 800612c:	2197      	movs	r1, #151	; 0x97
 800612e:	4b1c      	ldr	r3, [pc, #112]	; (80061a0 <start_background_scan+0xb8>)
 8006130:	4a1c      	ldr	r2, [pc, #112]	; (80061a4 <start_background_scan+0xbc>)
 8006132:	0049      	lsls	r1, r1, #1
 8006134:	481c      	ldr	r0, [pc, #112]	; (80061a8 <start_background_scan+0xc0>)
 8006136:	f002 fa63 	bl	8008600 <__assert_func>
        uint8_t position = get_position_channel();
 800613a:	f7ff faaf 	bl	800569c <get_position_channel>
 800613e:	0004      	movs	r4, r0
        if(position != UINT8_MAX && (config.rssi_thr <= - current_access_profile.subbands[0].cca)) {
 8006140:	28ff      	cmp	r0, #255	; 0xff
 8006142:	d007      	beq.n	8006154 <start_background_scan+0x6c>
 8006144:	466b      	mov	r3, sp
 8006146:	2204      	movs	r2, #4
 8006148:	5e9a      	ldrsh	r2, [r3, r2]
 800614a:	4b18      	ldr	r3, [pc, #96]	; (80061ac <start_background_scan+0xc4>)
 800614c:	7b9b      	ldrb	r3, [r3, #14]
 800614e:	425b      	negs	r3, r3
 8006150:	429a      	cmp	r2, r3
 8006152:	dd06      	ble.n	8006162 <start_background_scan+0x7a>
        median_measured_noisefloor(position);
 8006154:	0020      	movs	r0, r4
 8006156:	f7ff ff75 	bl	8006044 <median_measured_noisefloor>
        save_noise_floor(position);
 800615a:	0020      	movs	r0, r4
 800615c:	f7ff fae6 	bl	800572c <save_noise_floor>
}
 8006160:	e7e2      	b.n	8006128 <start_background_scan+0x40>
            memcpy(noisefl_last_measurements[position], &noisefl_last_measurements[position][1], 2);
 8006162:	4913      	ldr	r1, [pc, #76]	; (80061b0 <start_background_scan+0xc8>)
 8006164:	0043      	lsls	r3, r0, #1
 8006166:	181b      	adds	r3, r3, r0
 8006168:	18cd      	adds	r5, r1, r3
 800616a:	3301      	adds	r3, #1
 800616c:	18c9      	adds	r1, r1, r3
 800616e:	2202      	movs	r2, #2
 8006170:	0028      	movs	r0, r5
 8006172:	f00e fe2d 	bl	8014dd0 <memcpy>
            noisefl_last_measurements[position][2] = - config.rssi_thr;
 8006176:	466b      	mov	r3, sp
 8006178:	2204      	movs	r2, #4
 800617a:	5e9b      	ldrsh	r3, [r3, r2]
 800617c:	425b      	negs	r3, r3
 800617e:	70ab      	strb	r3, [r5, #2]
 8006180:	e7e8      	b.n	8006154 <start_background_scan+0x6c>
 8006182:	46c0      	nop			; (mov r8, r8)
 8006184:	2000273a 	.word	0x2000273a
 8006188:	200027ac 	.word	0x200027ac
 800618c:	20002788 	.word	0x20002788
 8006190:	2000272c 	.word	0x2000272c
 8006194:	200026e4 	.word	0x200026e4
 8006198:	08005811 	.word	0x08005811
 800619c:	20002786 	.word	0x20002786
 80061a0:	08018b48 	.word	0x08018b48
 80061a4:	08019218 	.word	0x08019218
 80061a8:	08018b70 	.word	0x08018b70
 80061ac:	200026e8 	.word	0x200026e8
 80061b0:	20002814 	.word	0x20002814

080061b4 <dll_stop_background_scan>:
{
 80061b4:	b510      	push	{r4, lr}
    assert(dll_state == DLL_STATE_SCAN_AUTOMATION);
 80061b6:	4b08      	ldr	r3, [pc, #32]	; (80061d8 <dll_stop_background_scan+0x24>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d105      	bne.n	80061ca <dll_stop_background_scan+0x16>
    timer_cancel_event(&dll_background_scan_timer);
 80061be:	4807      	ldr	r0, [pc, #28]	; (80061dc <dll_stop_background_scan+0x28>)
 80061c0:	f00a fb78 	bl	80108b4 <timer_cancel_event>
    hw_radio_set_idle();
 80061c4:	f007 f8b2 	bl	800d32c <hw_radio_set_idle>
}
 80061c8:	bd10      	pop	{r4, pc}
    assert(dll_state == DLL_STATE_SCAN_AUTOMATION);
 80061ca:	214a      	movs	r1, #74	; 0x4a
 80061cc:	4b04      	ldr	r3, [pc, #16]	; (80061e0 <dll_stop_background_scan+0x2c>)
 80061ce:	4a05      	ldr	r2, [pc, #20]	; (80061e4 <dll_stop_background_scan+0x30>)
 80061d0:	31ff      	adds	r1, #255	; 0xff
 80061d2:	4805      	ldr	r0, [pc, #20]	; (80061e8 <dll_stop_background_scan+0x34>)
 80061d4:	f002 fa14 	bl	8008600 <__assert_func>
 80061d8:	2000273a 	.word	0x2000273a
 80061dc:	200027ac 	.word	0x200027ac
 80061e0:	08018b48 	.word	0x08018b48
 80061e4:	08019230 	.word	0x08019230
 80061e8:	08018b70 	.word	0x08018b70

080061ec <dll_execute_scan_automation>:
{
 80061ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ee:	b083      	sub	sp, #12
    if (!(dll_state == DLL_STATE_IDLE || dll_state == DLL_STATE_SCAN_AUTOMATION))
 80061f0:	4b57      	ldr	r3, [pc, #348]	; (8006350 <dll_execute_scan_automation+0x164>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d901      	bls.n	8006200 <dll_execute_scan_automation+0x14>
}
 80061fc:	b003      	add	sp, #12
 80061fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timer_cancel_event(&dll_background_scan_timer);
 8006200:	4854      	ldr	r0, [pc, #336]	; (8006354 <dll_execute_scan_automation+0x168>)
 8006202:	f00a fb57 	bl	80108b4 <timer_cancel_event>
    if(current_access_profile.subprofiles[0].subband_bitmap == 0)
 8006206:	4b54      	ldr	r3, [pc, #336]	; (8006358 <dll_execute_scan_automation+0x16c>)
 8006208:	785b      	ldrb	r3, [r3, #1]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d012      	beq.n	8006234 <dll_execute_scan_automation+0x48>
    switch_state(DLL_STATE_SCAN_AUTOMATION);
 800620e:	2002      	movs	r0, #2
 8006210:	f7ff fb68 	bl	80058e4 <switch_state>
        .channel_id.channel_header_raw = current_access_profile.channel_header_raw,
 8006214:	4b50      	ldr	r3, [pc, #320]	; (8006358 <dll_execute_scan_automation+0x16c>)
 8006216:	781a      	ldrb	r2, [r3, #0]
    phy_rx_config_t rx_cfg = {
 8006218:	4669      	mov	r1, sp
 800621a:	700a      	strb	r2, [r1, #0]
        .channel_id.center_freq_index = current_access_profile.subbands[0].channel_index_start,
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	021b      	lsls	r3, r3, #8
 8006220:	0c1b      	lsrs	r3, r3, #16
    phy_rx_config_t rx_cfg = {
 8006222:	704b      	strb	r3, [r1, #1]
 8006224:	0a1b      	lsrs	r3, r3, #8
 8006226:	708b      	strb	r3, [r1, #2]
    tsched = (uint16_t)~0;
 8006228:	4b4c      	ldr	r3, [pc, #304]	; (800635c <dll_execute_scan_automation+0x170>)
 800622a:	2201      	movs	r2, #1
 800622c:	4252      	negs	r2, r2
 800622e:	801a      	strh	r2, [r3, #0]
    for(uint8_t i = 0; i < SUBPROFILES_NB; i++)
 8006230:	2400      	movs	r4, #0
 8006232:	e00d      	b.n	8006250 <dll_execute_scan_automation+0x64>
        hw_radio_set_idle();
 8006234:	f007 f87a 	bl	800d32c <hw_radio_set_idle>
        if(dll_state != DLL_STATE_IDLE)
 8006238:	4b45      	ldr	r3, [pc, #276]	; (8006350 <dll_execute_scan_automation+0x164>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d0dd      	beq.n	80061fc <dll_execute_scan_automation+0x10>
          switch_state(DLL_STATE_IDLE);
 8006240:	2001      	movs	r0, #1
 8006242:	f7ff fb4f 	bl	80058e4 <switch_state>
        return;
 8006246:	e7d9      	b.n	80061fc <dll_execute_scan_automation+0x10>
                tsched = scan_period;
 8006248:	4b44      	ldr	r3, [pc, #272]	; (800635c <dll_execute_scan_automation+0x170>)
 800624a:	8018      	strh	r0, [r3, #0]
    for(uint8_t i = 0; i < SUBPROFILES_NB; i++)
 800624c:	3401      	adds	r4, #1
 800624e:	b2e4      	uxtb	r4, r4
 8006250:	2c03      	cmp	r4, #3
 8006252:	d82e      	bhi.n	80062b2 <dll_execute_scan_automation+0xc6>
        if ((ACCESS_MASK(active_access_class) & (0x01 << i)) && current_access_profile.subprofiles[i].subband_bitmap)
 8006254:	4b42      	ldr	r3, [pc, #264]	; (8006360 <dll_execute_scan_automation+0x174>)
 8006256:	781a      	ldrb	r2, [r3, #0]
 8006258:	230f      	movs	r3, #15
 800625a:	4013      	ands	r3, r2
 800625c:	4123      	asrs	r3, r4
 800625e:	07db      	lsls	r3, r3, #31
 8006260:	d5f4      	bpl.n	800624c <dll_execute_scan_automation+0x60>
 8006262:	0062      	lsls	r2, r4, #1
 8006264:	4b3c      	ldr	r3, [pc, #240]	; (8006358 <dll_execute_scan_automation+0x16c>)
 8006266:	189b      	adds	r3, r3, r2
 8006268:	785b      	ldrb	r3, [r3, #1]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0ee      	beq.n	800624c <dll_execute_scan_automation+0x60>
            scan_period = CT_DECOMPRESS(current_access_profile.subprofiles[i].scan_automation_period);
 800626e:	4d3a      	ldr	r5, [pc, #232]	; (8006358 <dll_execute_scan_automation+0x16c>)
 8006270:	18ad      	adds	r5, r5, r2
 8006272:	78a8      	ldrb	r0, [r5, #2]
 8006274:	0940      	lsrs	r0, r0, #5
 8006276:	f00e fa93 	bl	80147a0 <__aeabi_i2d>
 800627a:	0002      	movs	r2, r0
 800627c:	000b      	movs	r3, r1
 800627e:	2000      	movs	r0, #0
 8006280:	4938      	ldr	r1, [pc, #224]	; (8006364 <dll_execute_scan_automation+0x178>)
 8006282:	f00b fb83 	bl	801198c <pow>
 8006286:	0006      	movs	r6, r0
 8006288:	000f      	movs	r7, r1
 800628a:	78ab      	ldrb	r3, [r5, #2]
 800628c:	201f      	movs	r0, #31
 800628e:	4018      	ands	r0, r3
 8006290:	f00e fa86 	bl	80147a0 <__aeabi_i2d>
 8006294:	0032      	movs	r2, r6
 8006296:	003b      	movs	r3, r7
 8006298:	f00d fc30 	bl	8013afc <__aeabi_dmul>
 800629c:	f00b fe86 	bl	8011fac <__aeabi_d2uiz>
 80062a0:	b280      	uxth	r0, r0
            if ((tsched == (uint16_t)~0) || (scan_period < tsched))
 80062a2:	4b2e      	ldr	r3, [pc, #184]	; (800635c <dll_execute_scan_automation+0x170>)
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	4a30      	ldr	r2, [pc, #192]	; (8006368 <dll_execute_scan_automation+0x17c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d0cd      	beq.n	8006248 <dll_execute_scan_automation+0x5c>
 80062ac:	4283      	cmp	r3, r0
 80062ae:	d9cd      	bls.n	800624c <dll_execute_scan_automation+0x60>
 80062b0:	e7ca      	b.n	8006248 <dll_execute_scan_automation+0x5c>
    assert(tsched != (uint16_t)~0);
 80062b2:	4b2a      	ldr	r3, [pc, #168]	; (800635c <dll_execute_scan_automation+0x170>)
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	4a2c      	ldr	r2, [pc, #176]	; (8006368 <dll_execute_scan_automation+0x17c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d01f      	beq.n	80062fc <dll_execute_scan_automation+0x110>
    if (tsched == 0)
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d023      	beq.n	8006308 <dll_execute_scan_automation+0x11c>
        current_channel_id = rx_cfg.channel_id;
 80062c0:	4b2a      	ldr	r3, [pc, #168]	; (800636c <dll_execute_scan_automation+0x180>)
 80062c2:	466a      	mov	r2, sp
 80062c4:	8812      	ldrh	r2, [r2, #0]
 80062c6:	801a      	strh	r2, [r3, #0]
 80062c8:	466a      	mov	r2, sp
 80062ca:	7892      	ldrb	r2, [r2, #2]
 80062cc:	709a      	strb	r2, [r3, #2]
        if (rx_nf_method == D7ADLL_FIXED_NOISE_FLOOR)
 80062ce:	4b28      	ldr	r3, [pc, #160]	; (8006370 <dll_execute_scan_automation+0x184>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d124      	bne.n	8006320 <dll_execute_scan_automation+0x134>
            E_CCA = - current_access_profile.subbands[0].cca; // Eccao is set to 0 dB
 80062d6:	4b20      	ldr	r3, [pc, #128]	; (8006358 <dll_execute_scan_automation+0x16c>)
 80062d8:	7b9b      	ldrb	r3, [r3, #14]
 80062da:	425b      	negs	r3, r3
 80062dc:	4a25      	ldr	r2, [pc, #148]	; (8006374 <dll_execute_scan_automation+0x188>)
 80062de:	8013      	strh	r3, [r2, #0]
        dll_background_scan_timer.next_event = tsched;
 80062e0:	481c      	ldr	r0, [pc, #112]	; (8006354 <dll_execute_scan_automation+0x168>)
 80062e2:	4b1e      	ldr	r3, [pc, #120]	; (800635c <dll_execute_scan_automation+0x170>)
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	6043      	str	r3, [r0, #4]
        error_t rtc = timer_add_event(&dll_background_scan_timer);
 80062e8:	f00a faa4 	bl	8010834 <timer_add_event>
        assert(rtc == SUCCESS);
 80062ec:	2800      	cmp	r0, #0
 80062ee:	d128      	bne.n	8006342 <dll_execute_scan_automation+0x156>
    current_eirp = current_access_profile.subbands[0].eirp;
 80062f0:	4b19      	ldr	r3, [pc, #100]	; (8006358 <dll_execute_scan_automation+0x16c>)
 80062f2:	220d      	movs	r2, #13
 80062f4:	569a      	ldrsb	r2, [r3, r2]
 80062f6:	4b20      	ldr	r3, [pc, #128]	; (8006378 <dll_execute_scan_automation+0x18c>)
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	e77f      	b.n	80061fc <dll_execute_scan_automation+0x10>
    assert(tsched != (uint16_t)~0);
 80062fc:	4b1f      	ldr	r3, [pc, #124]	; (800637c <dll_execute_scan_automation+0x190>)
 80062fe:	4a20      	ldr	r2, [pc, #128]	; (8006380 <dll_execute_scan_automation+0x194>)
 8006300:	4920      	ldr	r1, [pc, #128]	; (8006384 <dll_execute_scan_automation+0x198>)
 8006302:	4821      	ldr	r0, [pc, #132]	; (8006388 <dll_execute_scan_automation+0x19c>)
 8006304:	f002 f97c 	bl	8008600 <__assert_func>
        current_channel_id = rx_cfg.channel_id;
 8006308:	4818      	ldr	r0, [pc, #96]	; (800636c <dll_execute_scan_automation+0x180>)
 800630a:	466b      	mov	r3, sp
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	8003      	strh	r3, [r0, #0]
 8006310:	466b      	mov	r3, sp
 8006312:	789b      	ldrb	r3, [r3, #2]
 8006314:	7083      	strb	r3, [r0, #2]
        phy_start_rx(&current_channel_id, PHY_SYNCWORD_CLASS1, &dll_signal_packet_received);
 8006316:	4a1d      	ldr	r2, [pc, #116]	; (800638c <dll_execute_scan_automation+0x1a0>)
 8006318:	2101      	movs	r1, #1
 800631a:	f001 f92d 	bl	8007578 <phy_start_rx>
 800631e:	e7e7      	b.n	80062f0 <dll_execute_scan_automation+0x104>
        else if(rx_nf_method == D7ADLL_MEDIAN_OF_THREE) 
 8006320:	2b02      	cmp	r3, #2
 8006322:	d108      	bne.n	8006336 <dll_execute_scan_automation+0x14a>
            uint8_t position = get_position_channel();
 8006324:	f7ff f9ba 	bl	800569c <get_position_channel>
 8006328:	0004      	movs	r4, r0
            median_measured_noisefloor(position);
 800632a:	f7ff fe8b 	bl	8006044 <median_measured_noisefloor>
            save_noise_floor(position);
 800632e:	0020      	movs	r0, r4
 8006330:	f7ff f9fc 	bl	800572c <save_noise_floor>
 8006334:	e7d4      	b.n	80062e0 <dll_execute_scan_automation+0xf4>
          assert(false);
 8006336:	4b16      	ldr	r3, [pc, #88]	; (8006390 <dll_execute_scan_automation+0x1a4>)
 8006338:	4a11      	ldr	r2, [pc, #68]	; (8006380 <dll_execute_scan_automation+0x194>)
 800633a:	4916      	ldr	r1, [pc, #88]	; (8006394 <dll_execute_scan_automation+0x1a8>)
 800633c:	4812      	ldr	r0, [pc, #72]	; (8006388 <dll_execute_scan_automation+0x19c>)
 800633e:	f002 f95f 	bl	8008600 <__assert_func>
        assert(rtc == SUCCESS);
 8006342:	4b15      	ldr	r3, [pc, #84]	; (8006398 <dll_execute_scan_automation+0x1ac>)
 8006344:	4a0e      	ldr	r2, [pc, #56]	; (8006380 <dll_execute_scan_automation+0x194>)
 8006346:	4915      	ldr	r1, [pc, #84]	; (800639c <dll_execute_scan_automation+0x1b0>)
 8006348:	480f      	ldr	r0, [pc, #60]	; (8006388 <dll_execute_scan_automation+0x19c>)
 800634a:	f002 f959 	bl	8008600 <__assert_func>
 800634e:	46c0      	nop			; (mov r8, r8)
 8006350:	2000273a 	.word	0x2000273a
 8006354:	200027ac 	.word	0x200027ac
 8006358:	200026e8 	.word	0x200026e8
 800635c:	20002788 	.word	0x20002788
 8006360:	200026e6 	.word	0x200026e6
 8006364:	40100000 	.word	0x40100000
 8006368:	0000ffff 	.word	0x0000ffff
 800636c:	2000272c 	.word	0x2000272c
 8006370:	20002786 	.word	0x20002786
 8006374:	200026e4 	.word	0x200026e4
 8006378:	2000272f 	.word	0x2000272f
 800637c:	08019104 	.word	0x08019104
 8006380:	080192b4 	.word	0x080192b4
 8006384:	00000323 	.word	0x00000323
 8006388:	08018b70 	.word	0x08018b70
 800638c:	08005811 	.word	0x08005811
 8006390:	080169c8 	.word	0x080169c8
 8006394:	00000343 	.word	0x00000343
 8006398:	08017738 	.word	0x08017738
 800639c:	0000034b 	.word	0x0000034b

080063a0 <execute_scan_automation>:
{
 80063a0:	b510      	push	{r4, lr}
    dll_execute_scan_automation();
 80063a2:	f7ff ff23 	bl	80061ec <dll_execute_scan_automation>
}
 80063a6:	bd10      	pop	{r4, pc}

080063a8 <dll_notify_access_profile_file_changed>:
{
 80063a8:	b510      	push	{r4, lr}
    if (file_id == D7A_FILE_ACCESS_PROFILE_ID + ACCESS_SPECIFIER(active_access_class))
 80063aa:	4b0f      	ldr	r3, [pc, #60]	; (80063e8 <dll_notify_access_profile_file_changed+0x40>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	091b      	lsrs	r3, r3, #4
 80063b0:	001a      	movs	r2, r3
 80063b2:	3220      	adds	r2, #32
 80063b4:	4290      	cmp	r0, r2
 80063b6:	d000      	beq.n	80063ba <dll_notify_access_profile_file_changed+0x12>
}
 80063b8:	bd10      	pop	{r4, pc}
        d7ap_fs_read_access_class(ACCESS_SPECIFIER(active_access_class), &current_access_profile);
 80063ba:	490c      	ldr	r1, [pc, #48]	; (80063ec <dll_notify_access_profile_file_changed+0x44>)
 80063bc:	0018      	movs	r0, r3
 80063be:	f001 fd0f 	bl	8007de0 <d7ap_fs_read_access_class>
        if (dll_state == DLL_STATE_IDLE || dll_state == DLL_STATE_SCAN_AUTOMATION)
 80063c2:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <dll_notify_access_profile_file_changed+0x48>)
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d8f4      	bhi.n	80063b8 <dll_notify_access_profile_file_changed+0x10>
            dll_scan_automation_timer.next_event = 0;
 80063ce:	4809      	ldr	r0, [pc, #36]	; (80063f4 <dll_notify_access_profile_file_changed+0x4c>)
 80063d0:	2300      	movs	r3, #0
 80063d2:	6043      	str	r3, [r0, #4]
            int rtc = timer_add_event(&dll_scan_automation_timer);
 80063d4:	f00a fa2e 	bl	8010834 <timer_add_event>
            assert(rtc == SUCCESS);
 80063d8:	2800      	cmp	r0, #0
 80063da:	d0ed      	beq.n	80063b8 <dll_notify_access_profile_file_changed+0x10>
 80063dc:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <dll_notify_access_profile_file_changed+0x50>)
 80063de:	4a07      	ldr	r2, [pc, #28]	; (80063fc <dll_notify_access_profile_file_changed+0x54>)
 80063e0:	4907      	ldr	r1, [pc, #28]	; (8006400 <dll_notify_access_profile_file_changed+0x58>)
 80063e2:	4808      	ldr	r0, [pc, #32]	; (8006404 <dll_notify_access_profile_file_changed+0x5c>)
 80063e4:	f002 f90c 	bl	8008600 <__assert_func>
 80063e8:	200026e6 	.word	0x200026e6
 80063ec:	200026e8 	.word	0x200026e8
 80063f0:	2000273a 	.word	0x2000273a
 80063f4:	200027fc 	.word	0x200027fc
 80063f8:	08017738 	.word	0x08017738
 80063fc:	080192ec 	.word	0x080192ec
 8006400:	0000037e 	.word	0x0000037e
 8006404:	08018b70 	.word	0x08018b70

08006408 <dll_notify_dialog_terminated>:
{
 8006408:	b510      	push	{r4, lr}
    dll_execute_scan_automation();
 800640a:	f7ff feef 	bl	80061ec <dll_execute_scan_automation>
}
 800640e:	bd10      	pop	{r4, pc}

08006410 <dll_init>:
{
 8006410:	b530      	push	{r4, r5, lr}
 8006412:	b089      	sub	sp, #36	; 0x24
    assert(dll_state == DLL_STATE_STOPPED);
 8006414:	4b49      	ldr	r3, [pc, #292]	; (800653c <dll_init+0x12c>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d000      	beq.n	800641e <dll_init+0xe>
 800641c:	e074      	b.n	8006508 <dll_init+0xf8>
    timer_init_event(&dll_cca_timer, &execute_cca);
 800641e:	4948      	ldr	r1, [pc, #288]	; (8006540 <dll_init+0x130>)
 8006420:	4848      	ldr	r0, [pc, #288]	; (8006544 <dll_init+0x134>)
 8006422:	f009 ff61 	bl	80102e8 <timer_init_event>
    timer_init_event(&dll_csma_timer, &execute_csma_ca);
 8006426:	4948      	ldr	r1, [pc, #288]	; (8006548 <dll_init+0x138>)
 8006428:	4848      	ldr	r0, [pc, #288]	; (800654c <dll_init+0x13c>)
 800642a:	f009 ff5d 	bl	80102e8 <timer_init_event>
    timer_init_event(&dll_scan_automation_timer, &execute_scan_automation);
 800642e:	4948      	ldr	r1, [pc, #288]	; (8006550 <dll_init+0x140>)
 8006430:	4848      	ldr	r0, [pc, #288]	; (8006554 <dll_init+0x144>)
 8006432:	f009 ff59 	bl	80102e8 <timer_init_event>
    timer_init_event(&dll_background_scan_timer, &start_background_scan);
 8006436:	4948      	ldr	r1, [pc, #288]	; (8006558 <dll_init+0x148>)
 8006438:	4848      	ldr	r0, [pc, #288]	; (800655c <dll_init+0x14c>)
 800643a:	f009 ff55 	bl	80102e8 <timer_init_event>
    timer_init_event(&dll_process_received_packet_timer, &packet_received);
 800643e:	4948      	ldr	r1, [pc, #288]	; (8006560 <dll_init+0x150>)
 8006440:	4848      	ldr	r0, [pc, #288]	; (8006564 <dll_init+0x154>)
 8006442:	f009 ff51 	bl	80102e8 <timer_init_event>
    phy_init();
 8006446:	f001 f809 	bl	800745c <phy_init>
    d7ap_fs_file_header_t volatile_file_header = { 
 800644a:	ab04      	add	r3, sp, #16
 800644c:	2200      	movs	r2, #0
 800644e:	9204      	str	r2, [sp, #16]
 8006450:	3204      	adds	r2, #4
 8006452:	2120      	movs	r1, #32
 8006454:	430a      	orrs	r2, r1
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	2201      	movs	r2, #1
 800645a:	705a      	strb	r2, [r3, #1]
 800645c:	322c      	adds	r2, #44	; 0x2c
 800645e:	9205      	str	r2, [sp, #20]
 8006460:	9206      	str	r2, [sp, #24]
    if(!phy_status_file_inited)
 8006462:	4b41      	ldr	r3, [pc, #260]	; (8006568 <dll_init+0x158>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d106      	bne.n	8006478 <dll_init+0x68>
        assert(d7ap_fs_init_file(D7A_FILE_PHY_STATUS_FILE_ID, &volatile_file_header, NULL) == SUCCESS); // TODO error handling
 800646a:	2200      	movs	r2, #0
 800646c:	a904      	add	r1, sp, #16
 800646e:	2009      	movs	r0, #9
 8006470:	f001 fb3c 	bl	8007aec <d7ap_fs_init_file>
 8006474:	2800      	cmp	r0, #0
 8006476:	d14d      	bne.n	8006514 <dll_init+0x104>
    phy_status_file_inited = true;
 8006478:	2301      	movs	r3, #1
 800647a:	4a3b      	ldr	r2, [pc, #236]	; (8006568 <dll_init+0x158>)
 800647c:	7013      	strb	r3, [r2, #0]
    uint32_t length = D7A_FILE_DLL_CONF_NF_CTRL_SIZE;
 800647e:	9303      	str	r3, [sp, #12]
    if (d7ap_fs_read_file(D7A_FILE_DLL_CONF_FILE_ID, D7A_FILE_DLL_CONF_NF_CTRL_OFFSET, &nf_ctrl, &length, ROOT_AUTH) != 0)
 8006480:	2300      	movs	r3, #0
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	ab03      	add	r3, sp, #12
 8006486:	221f      	movs	r2, #31
 8006488:	446a      	add	r2, sp
 800648a:	2104      	movs	r1, #4
 800648c:	200a      	movs	r0, #10
 800648e:	f001 fc07 	bl	8007ca0 <d7ap_fs_read_file>
 8006492:	2800      	cmp	r0, #0
 8006494:	d003      	beq.n	800649e <dll_init+0x8e>
        nf_ctrl = (D7ADLL_FIXED_NOISE_FLOOR << 4) & 0x0F; // set default NF computation method if the setting is not present
 8006496:	231f      	movs	r3, #31
 8006498:	446b      	add	r3, sp
 800649a:	2200      	movs	r2, #0
 800649c:	701a      	strb	r2, [r3, #0]
    tx_nf_method = (nf_ctrl >> 4) & 0x0F;
 800649e:	231f      	movs	r3, #31
 80064a0:	446b      	add	r3, sp
 80064a2:	781a      	ldrb	r2, [r3, #0]
 80064a4:	0911      	lsrs	r1, r2, #4
 80064a6:	4b31      	ldr	r3, [pc, #196]	; (800656c <dll_init+0x15c>)
 80064a8:	7019      	strb	r1, [r3, #0]
    rx_nf_method = nf_ctrl & 0x0F;
 80064aa:	230f      	movs	r3, #15
 80064ac:	4013      	ands	r3, r2
 80064ae:	4a30      	ldr	r2, [pc, #192]	; (8006570 <dll_init+0x160>)
 80064b0:	7013      	strb	r3, [r2, #0]
    dll_state = DLL_STATE_IDLE;
 80064b2:	2501      	movs	r5, #1
 80064b4:	4b21      	ldr	r3, [pc, #132]	; (800653c <dll_init+0x12c>)
 80064b6:	701d      	strb	r5, [r3, #0]
    active_access_class = d7ap_fs_read_dll_conf_active_access_class();
 80064b8:	f001 fccd 	bl	8007e56 <d7ap_fs_read_dll_conf_active_access_class>
 80064bc:	4b2d      	ldr	r3, [pc, #180]	; (8006574 <dll_init+0x164>)
 80064be:	7018      	strb	r0, [r3, #0]
    d7ap_fs_read_access_class(ACCESS_SPECIFIER(active_access_class), &current_access_profile);
 80064c0:	0900      	lsrs	r0, r0, #4
 80064c2:	492d      	ldr	r1, [pc, #180]	; (8006578 <dll_init+0x168>)
 80064c4:	f001 fc8c 	bl	8007de0 <d7ap_fs_read_access_class>
    process_received_packets_after_tx = false;
 80064c8:	2400      	movs	r4, #0
 80064ca:	4b2c      	ldr	r3, [pc, #176]	; (800657c <dll_init+0x16c>)
 80064cc:	701c      	strb	r4, [r3, #0]
    resume_fg_scan = false;
 80064ce:	4b2c      	ldr	r3, [pc, #176]	; (8006580 <dll_init+0x170>)
 80064d0:	701c      	strb	r4, [r3, #0]
    d7ap_fs_register_file_modified_callback(D7A_FILE_DLL_CONF_FILE_ID, &conf_file_changed_callback);
 80064d2:	492c      	ldr	r1, [pc, #176]	; (8006584 <dll_init+0x174>)
 80064d4:	200a      	movs	r0, #10
 80064d6:	f001 fe2b 	bl	8008130 <d7ap_fs_register_file_modified_callback>
    engineering_mode_init();
 80064da:	f7fe ff11 	bl	8005300 <engineering_mode_init>
    length = D7A_FILE_PHY_STATUS_CHANNEL_COUNT_SIZE;
 80064de:	9503      	str	r5, [sp, #12]
    d7ap_fs_read_file(D7A_FILE_PHY_STATUS_FILE_ID, D7A_FILE_PHY_STATUS_MINIMUM_SIZE - 1, &phy_status_channel_counter, &length, ROOT_AUTH);
 80064e0:	4d29      	ldr	r5, [pc, #164]	; (8006588 <dll_init+0x178>)
 80064e2:	9400      	str	r4, [sp, #0]
 80064e4:	ab03      	add	r3, sp, #12
 80064e6:	002a      	movs	r2, r5
 80064e8:	210e      	movs	r1, #14
 80064ea:	2009      	movs	r0, #9
 80064ec:	f001 fbd8 	bl	8007ca0 <d7ap_fs_read_file>
    if(phy_status_channel_counter && (phy_status_channel_counter < PHY_STATUS_MAX_CHANNELS))
 80064f0:	782a      	ldrb	r2, [r5, #0]
 80064f2:	1e53      	subs	r3, r2, #1
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b08      	cmp	r3, #8
 80064f8:	d913      	bls.n	8006522 <dll_init+0x112>
    guarded_channel = false;
 80064fa:	4b24      	ldr	r3, [pc, #144]	; (800658c <dll_init+0x17c>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	701a      	strb	r2, [r3, #0]
    dll_execute_scan_automation();
 8006500:	f7ff fe74 	bl	80061ec <dll_execute_scan_automation>
}
 8006504:	b009      	add	sp, #36	; 0x24
 8006506:	bd30      	pop	{r4, r5, pc}
    assert(dll_state == DLL_STATE_STOPPED);
 8006508:	4b21      	ldr	r3, [pc, #132]	; (8006590 <dll_init+0x180>)
 800650a:	4a22      	ldr	r2, [pc, #136]	; (8006594 <dll_init+0x184>)
 800650c:	4922      	ldr	r1, [pc, #136]	; (8006598 <dll_init+0x188>)
 800650e:	4823      	ldr	r0, [pc, #140]	; (800659c <dll_init+0x18c>)
 8006510:	f002 f876 	bl	8008600 <__assert_func>
        assert(d7ap_fs_init_file(D7A_FILE_PHY_STATUS_FILE_ID, &volatile_file_header, NULL) == SUCCESS); // TODO error handling
 8006514:	21e8      	movs	r1, #232	; 0xe8
 8006516:	4b22      	ldr	r3, [pc, #136]	; (80065a0 <dll_init+0x190>)
 8006518:	4a1e      	ldr	r2, [pc, #120]	; (8006594 <dll_init+0x184>)
 800651a:	0089      	lsls	r1, r1, #2
 800651c:	481f      	ldr	r0, [pc, #124]	; (800659c <dll_init+0x18c>)
 800651e:	f002 f86f 	bl	8008600 <__assert_func>
        length = phy_status_channel_counter * D7A_FILE_PHY_STATUS_CHANNEL_SIZE;
 8006522:	0053      	lsls	r3, r2, #1
 8006524:	189a      	adds	r2, r3, r2
 8006526:	9203      	str	r2, [sp, #12]
        d7ap_fs_read_file(D7A_FILE_PHY_STATUS_FILE_ID, D7A_FILE_PHY_STATUS_MINIMUM_SIZE, (uint8_t*) channels, &length, ROOT_AUTH);
 8006528:	2300      	movs	r3, #0
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	ab03      	add	r3, sp, #12
 800652e:	4a1d      	ldr	r2, [pc, #116]	; (80065a4 <dll_init+0x194>)
 8006530:	210f      	movs	r1, #15
 8006532:	2009      	movs	r0, #9
 8006534:	f001 fbb4 	bl	8007ca0 <d7ap_fs_read_file>
 8006538:	e7df      	b.n	80064fa <dll_init+0xea>
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	2000273a 	.word	0x2000273a
 8006540:	08005fa1 	.word	0x08005fa1
 8006544:	200027c0 	.word	0x200027c0
 8006548:	08005c25 	.word	0x08005c25
 800654c:	200027d4 	.word	0x200027d4
 8006550:	080063a1 	.word	0x080063a1
 8006554:	200027fc 	.word	0x200027fc
 8006558:	080060e9 	.word	0x080060e9
 800655c:	200027ac 	.word	0x200027ac
 8006560:	080058dd 	.word	0x080058dd
 8006564:	200027e8 	.word	0x200027e8
 8006568:	20002833 	.word	0x20002833
 800656c:	2000278a 	.word	0x2000278a
 8006570:	20002786 	.word	0x20002786
 8006574:	200026e6 	.word	0x200026e6
 8006578:	200026e8 	.word	0x200026e8
 800657c:	20002741 	.word	0x20002741
 8006580:	20002785 	.word	0x20002785
 8006584:	08005bbd 	.word	0x08005bbd
 8006588:	20002832 	.word	0x20002832
 800658c:	20002740 	.word	0x20002740
 8006590:	0801911c 	.word	0x0801911c
 8006594:	08019314 	.word	0x08019314
 8006598:	0000038b 	.word	0x0000038b
 800659c:	08018b70 	.word	0x08018b70
 80065a0:	0801913c 	.word	0x0801913c
 80065a4:	2000278c 	.word	0x2000278c

080065a8 <dll_stop>:
{
 80065a8:	b510      	push	{r4, lr}
    dll_state = DLL_STATE_STOPPED;
 80065aa:	4b0d      	ldr	r3, [pc, #52]	; (80065e0 <dll_stop+0x38>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	701a      	strb	r2, [r3, #0]
    timer_cancel_event(&dll_cca_timer);
 80065b0:	480c      	ldr	r0, [pc, #48]	; (80065e4 <dll_stop+0x3c>)
 80065b2:	f00a f97f 	bl	80108b4 <timer_cancel_event>
    timer_cancel_event(&dll_csma_timer);
 80065b6:	480c      	ldr	r0, [pc, #48]	; (80065e8 <dll_stop+0x40>)
 80065b8:	f00a f97c 	bl	80108b4 <timer_cancel_event>
    timer_cancel_event(&dll_scan_automation_timer);
 80065bc:	480b      	ldr	r0, [pc, #44]	; (80065ec <dll_stop+0x44>)
 80065be:	f00a f979 	bl	80108b4 <timer_cancel_event>
    timer_cancel_event(&dll_background_scan_timer);
 80065c2:	480b      	ldr	r0, [pc, #44]	; (80065f0 <dll_stop+0x48>)
 80065c4:	f00a f976 	bl	80108b4 <timer_cancel_event>
    timer_cancel_event(&dll_process_received_packet_timer);
 80065c8:	480a      	ldr	r0, [pc, #40]	; (80065f4 <dll_stop+0x4c>)
 80065ca:	f00a f973 	bl	80108b4 <timer_cancel_event>
    d7ap_fs_unregister_file_modified_callback(D7A_FILE_DLL_CONF_FILE_ID);
 80065ce:	200a      	movs	r0, #10
 80065d0:	f001 fd9e 	bl	8008110 <d7ap_fs_unregister_file_modified_callback>
    engineering_mode_stop();
 80065d4:	f7fe feba 	bl	800534c <engineering_mode_stop>
    phy_stop();
 80065d8:	f000 ff8a 	bl	80074f0 <phy_stop>
}
 80065dc:	bd10      	pop	{r4, pc}
 80065de:	46c0      	nop			; (mov r8, r8)
 80065e0:	2000273a 	.word	0x2000273a
 80065e4:	200027c0 	.word	0x200027c0
 80065e8:	200027d4 	.word	0x200027d4
 80065ec:	200027fc 	.word	0x200027fc
 80065f0:	200027ac 	.word	0x200027ac
 80065f4:	200027e8 	.word	0x200027e8

080065f8 <dll_tx_frame>:
{
 80065f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065fa:	46c6      	mov	lr, r8
 80065fc:	b500      	push	{lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	0004      	movs	r4, r0
    timer_cancel_event(&dll_scan_automation_timer); //enable this code if this costly operation proves to be necessary
 8006602:	489d      	ldr	r0, [pc, #628]	; (8006878 <dll_tx_frame+0x280>)
 8006604:	f00a f956 	bl	80108b4 <timer_cancel_event>
    if (dll_state == DLL_STATE_SCAN_AUTOMATION)
 8006608:	4b9c      	ldr	r3, [pc, #624]	; (800687c <dll_tx_frame+0x284>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d033      	beq.n	8006678 <dll_tx_frame+0x80>
    if (dll_state != DLL_STATE_FOREGROUND_SCAN)
 8006610:	4b9a      	ldr	r3, [pc, #616]	; (800687c <dll_tx_frame+0x284>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b08      	cmp	r3, #8
 8006616:	d133      	bne.n	8006680 <dll_tx_frame+0x88>
        resume_fg_scan = true;
 8006618:	4b99      	ldr	r3, [pc, #612]	; (8006880 <dll_tx_frame+0x288>)
 800661a:	2201      	movs	r2, #1
 800661c:	701a      	strb	r2, [r3, #0]
    dll_header->subnet = packet->d7anp_addressee->access_class;
 800661e:	6a22      	ldr	r2, [r4, #32]
 8006620:	7853      	ldrb	r3, [r2, #1]
 8006622:	7123      	strb	r3, [r4, #4]
    packet->origin_access_class = active_access_class;  // strictly speaking this is a D7ANP field,
 8006624:	4b97      	ldr	r3, [pc, #604]	; (8006884 <dll_tx_frame+0x28c>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	7223      	strb	r3, [r4, #8]
    if (packet->d7atp_ctrl.ctrl_is_start && packet->d7anp_addressee != NULL) // when responding in a transaction we MAY skip targetID
 800662a:	231c      	movs	r3, #28
 800662c:	56e3      	ldrsb	r3, [r4, r3]
 800662e:	2b00      	cmp	r3, #0
 8006630:	db2c      	blt.n	800668c <dll_tx_frame+0x94>
        dll_header->control_target_id_type = ID_TYPE_NOID;
 8006632:	2301      	movs	r3, #1
 8006634:	71a3      	strb	r3, [r4, #6]
    if (packet->type == SUBSEQUENT_REQUEST || packet->type == REQUEST_IN_DIALOG_EXTENSION) // TODO MISO conditions not supported
 8006636:	232c      	movs	r3, #44	; 0x2c
 8006638:	5ce3      	ldrb	r3, [r4, r3]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d02d      	beq.n	800669a <dll_tx_frame+0xa2>
 800663e:	2b06      	cmp	r3, #6
 8006640:	d02b      	beq.n	800669a <dll_tx_frame+0xa2>
    else if (packet->type == RESPONSE_TO_UNICAST || packet->type == RESPONSE_TO_BROADCAST)
 8006642:	3b03      	subs	r3, #3
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b01      	cmp	r3, #1
 8006648:	d862      	bhi.n	8006710 <dll_tx_frame+0x118>
        dll_header->control_eirp_index = current_eirp + 32;
 800664a:	4b8f      	ldr	r3, [pc, #572]	; (8006888 <dll_tx_frame+0x290>)
 800664c:	2600      	movs	r6, #0
 800664e:	579e      	ldrsb	r6, [r3, r6]
 8006650:	0033      	movs	r3, r6
 8006652:	3320      	adds	r3, #32
 8006654:	7163      	strb	r3, [r4, #5]
                .channel_id = packet->phy_config.rx.channel_id,
 8006656:	2203      	movs	r2, #3
 8006658:	0025      	movs	r5, r4
 800665a:	3523      	adds	r5, #35	; 0x23
 800665c:	35ff      	adds	r5, #255	; 0xff
 800665e:	0029      	movs	r1, r5
 8006660:	a801      	add	r0, sp, #4
 8006662:	f00e fbb5 	bl	8014dd0 <memcpy>
        packet->phy_config.tx = (phy_tx_config_t){
 8006666:	2203      	movs	r2, #3
 8006668:	a901      	add	r1, sp, #4
 800666a:	0028      	movs	r0, r5
 800666c:	f00e fbb0 	bl	8014dd0 <memcpy>
 8006670:	2393      	movs	r3, #147	; 0x93
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	54e6      	strb	r6, [r4, r3]
 8006676:	e023      	b.n	80066c0 <dll_tx_frame+0xc8>
        timer_cancel_event(&dll_background_scan_timer);
 8006678:	4884      	ldr	r0, [pc, #528]	; (800688c <dll_tx_frame+0x294>)
 800667a:	f00a f91b 	bl	80108b4 <timer_cancel_event>
 800667e:	e7c7      	b.n	8006610 <dll_tx_frame+0x18>
        hw_radio_set_idle();
 8006680:	f006 fe54 	bl	800d32c <hw_radio_set_idle>
        resume_fg_scan = false;
 8006684:	4b7e      	ldr	r3, [pc, #504]	; (8006880 <dll_tx_frame+0x288>)
 8006686:	2200      	movs	r2, #0
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	e7c8      	b.n	800661e <dll_tx_frame+0x26>
    if (packet->d7atp_ctrl.ctrl_is_start && packet->d7anp_addressee != NULL) // when responding in a transaction we MAY skip targetID
 800668c:	2a00      	cmp	r2, #0
 800668e:	d0d0      	beq.n	8006632 <dll_tx_frame+0x3a>
        dll_header->control_target_id_type = packet->d7anp_addressee->ctrl.id_type;
 8006690:	7813      	ldrb	r3, [r2, #0]
 8006692:	069b      	lsls	r3, r3, #26
 8006694:	0f9b      	lsrs	r3, r3, #30
 8006696:	71a3      	strb	r3, [r4, #6]
 8006698:	e7cd      	b.n	8006636 <dll_tx_frame+0x3e>
        dll_header->control_eirp_index = current_eirp + 32;
 800669a:	4b7b      	ldr	r3, [pc, #492]	; (8006888 <dll_tx_frame+0x290>)
 800669c:	2500      	movs	r5, #0
 800669e:	575d      	ldrsb	r5, [r3, r5]
 80066a0:	002b      	movs	r3, r5
 80066a2:	3320      	adds	r3, #32
 80066a4:	7163      	strb	r3, [r4, #5]
        packet->phy_config.tx = (phy_tx_config_t){
 80066a6:	2203      	movs	r2, #3
 80066a8:	4979      	ldr	r1, [pc, #484]	; (8006890 <dll_tx_frame+0x298>)
 80066aa:	0020      	movs	r0, r4
 80066ac:	3023      	adds	r0, #35	; 0x23
 80066ae:	30ff      	adds	r0, #255	; 0xff
 80066b0:	f00e fb8e 	bl	8014dd0 <memcpy>
 80066b4:	2326      	movs	r3, #38	; 0x26
 80066b6:	33ff      	adds	r3, #255	; 0xff
 80066b8:	2201      	movs	r2, #1
 80066ba:	54e2      	strb	r2, [r4, r3]
 80066bc:	3301      	adds	r3, #1
 80066be:	54e5      	strb	r5, [r4, r3]
    packet_assemble(packet);
 80066c0:	0020      	movs	r0, r4
 80066c2:	f7fe fefc 	bl	80054be <packet_assemble>
    packet->tx_duration = phy_calculate_tx_duration(current_channel_id.channel_header.ch_class,
 80066c6:	4b72      	ldr	r3, [pc, #456]	; (8006890 <dll_tx_frame+0x298>)
 80066c8:	7819      	ldrb	r1, [r3, #0]
 80066ca:	0708      	lsls	r0, r1, #28
 80066cc:	0f80      	lsrs	r0, r0, #30
                                                    current_channel_id.channel_header.ch_coding,
 80066ce:	0789      	lsls	r1, r1, #30
 80066d0:	0f89      	lsrs	r1, r1, #30
                                                    packet->hw_radio_packet.length + 1, false);
 80066d2:	239a      	movs	r3, #154	; 0x9a
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	5ae2      	ldrh	r2, [r4, r3]
    packet->tx_duration = phy_calculate_tx_duration(current_channel_id.channel_header.ch_class,
 80066d8:	3201      	adds	r2, #1
 80066da:	b292      	uxth	r2, r2
 80066dc:	2300      	movs	r3, #0
 80066de:	f000 fdb5 	bl	800724c <phy_calculate_tx_duration>
 80066e2:	8620      	strh	r0, [r4, #48]	; 0x30
    current_packet = packet;
 80066e4:	4b6b      	ldr	r3, [pc, #428]	; (8006894 <dll_tx_frame+0x29c>)
 80066e6:	601c      	str	r4, [r3, #0]
    switch_state(DLL_STATE_CSMA_CA_STARTED);
 80066e8:	2003      	movs	r0, #3
 80066ea:	f7ff f8fb 	bl	80058e4 <switch_state>
    if ((packet->type == RESPONSE_TO_UNICAST) || (packet->type == RESPONSE_TO_BROADCAST))
 80066ee:	232c      	movs	r3, #44	; 0x2c
 80066f0:	5ce3      	ldrb	r3, [r4, r3]
 80066f2:	3b03      	subs	r3, #3
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d803      	bhi.n	8006702 <dll_tx_frame+0x10a>
        if (packet->d7atp_ctrl.ctrl_te)
 80066fa:	7f23      	ldrb	r3, [r4, #28]
 80066fc:	06db      	lsls	r3, r3, #27
 80066fe:	d500      	bpl.n	8006702 <dll_tx_frame+0x10a>
 8006700:	e08f      	b.n	8006822 <dll_tx_frame+0x22a>
    execute_csma_ca(NULL);
 8006702:	2000      	movs	r0, #0
 8006704:	f7ff fa8e 	bl	8005c24 <execute_csma_ca>
}
 8006708:	b002      	add	sp, #8
 800670a:	bc04      	pop	{r2}
 800670c:	4690      	mov	r8, r2
 800670e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        d7ap_fs_read_access_class(packet->d7anp_addressee->access_specifier, &remote_access_profile);
 8006710:	7850      	ldrb	r0, [r2, #1]
 8006712:	0900      	lsrs	r0, r0, #4
 8006714:	4e60      	ldr	r6, [pc, #384]	; (8006898 <dll_tx_frame+0x2a0>)
 8006716:	0031      	movs	r1, r6
 8006718:	f001 fb62 	bl	8007de0 <d7ap_fs_read_access_class>
        dll_header->control_eirp_index = remote_access_profile.subbands[0].eirp + 32;
 800671c:	7b73      	ldrb	r3, [r6, #13]
 800671e:	3320      	adds	r3, #32
 8006720:	7163      	strb	r3, [r4, #5]
            .channel_id.channel_header_raw = remote_access_profile.channel_header_raw,
 8006722:	7837      	ldrb	r7, [r6, #0]
            .channel_id.center_freq_index = remote_access_profile.subbands[0].channel_index_start,
 8006724:	68b3      	ldr	r3, [r6, #8]
 8006726:	021d      	lsls	r5, r3, #8
 8006728:	0c2d      	lsrs	r5, r5, #16
            .eirp = remote_access_profile.subbands[0].eirp
 800672a:	7b76      	ldrb	r6, [r6, #13]
 800672c:	b276      	sxtb	r6, r6
        packet->phy_config.tx = (phy_tx_config_t){
 800672e:	2205      	movs	r2, #5
 8006730:	2100      	movs	r1, #0
 8006732:	0020      	movs	r0, r4
 8006734:	3023      	adds	r0, #35	; 0x23
 8006736:	30ff      	adds	r0, #255	; 0xff
 8006738:	f00e fb9e 	bl	8014e78 <memset>
 800673c:	2391      	movs	r3, #145	; 0x91
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	54e7      	strb	r7, [r4, r3]
 8006742:	2324      	movs	r3, #36	; 0x24
 8006744:	33ff      	adds	r3, #255	; 0xff
 8006746:	54e5      	strb	r5, [r4, r3]
 8006748:	0a2d      	lsrs	r5, r5, #8
 800674a:	0023      	movs	r3, r4
 800674c:	3324      	adds	r3, #36	; 0x24
 800674e:	33ff      	adds	r3, #255	; 0xff
 8006750:	705d      	strb	r5, [r3, #1]
 8006752:	2393      	movs	r3, #147	; 0x93
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	54e6      	strb	r6, [r4, r3]
        tsched = 0;
 8006758:	2200      	movs	r2, #0
 800675a:	4b50      	ldr	r3, [pc, #320]	; (800689c <dll_tx_frame+0x2a4>)
 800675c:	801a      	strh	r2, [r3, #0]
        for(uint8_t i = 0; i < SUBPROFILES_NB; i++)
 800675e:	2500      	movs	r5, #0
 8006760:	e001      	b.n	8006766 <dll_tx_frame+0x16e>
 8006762:	3501      	adds	r5, #1
 8006764:	b2ed      	uxtb	r5, r5
 8006766:	2d03      	cmp	r5, #3
 8006768:	d830      	bhi.n	80067cc <dll_tx_frame+0x1d4>
            if ((packet->d7anp_addressee->access_mask & (0x01 << i)) && remote_access_profile.subprofiles[i].subband_bitmap)
 800676a:	6a23      	ldr	r3, [r4, #32]
 800676c:	785b      	ldrb	r3, [r3, #1]
 800676e:	071b      	lsls	r3, r3, #28
 8006770:	0f1b      	lsrs	r3, r3, #28
 8006772:	412b      	asrs	r3, r5
 8006774:	07db      	lsls	r3, r3, #31
 8006776:	d5f4      	bpl.n	8006762 <dll_tx_frame+0x16a>
 8006778:	006a      	lsls	r2, r5, #1
 800677a:	4b47      	ldr	r3, [pc, #284]	; (8006898 <dll_tx_frame+0x2a0>)
 800677c:	189b      	adds	r3, r3, r2
 800677e:	785b      	ldrb	r3, [r3, #1]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0ee      	beq.n	8006762 <dll_tx_frame+0x16a>
                scan_period = CT_DECOMPRESS(remote_access_profile.subprofiles[i].scan_automation_period);
 8006784:	4b44      	ldr	r3, [pc, #272]	; (8006898 <dll_tx_frame+0x2a0>)
 8006786:	4698      	mov	r8, r3
 8006788:	4490      	add	r8, r2
 800678a:	4643      	mov	r3, r8
 800678c:	7898      	ldrb	r0, [r3, #2]
 800678e:	0940      	lsrs	r0, r0, #5
 8006790:	f00e f806 	bl	80147a0 <__aeabi_i2d>
 8006794:	0002      	movs	r2, r0
 8006796:	000b      	movs	r3, r1
 8006798:	2000      	movs	r0, #0
 800679a:	4941      	ldr	r1, [pc, #260]	; (80068a0 <dll_tx_frame+0x2a8>)
 800679c:	f00b f8f6 	bl	801198c <pow>
 80067a0:	0006      	movs	r6, r0
 80067a2:	000f      	movs	r7, r1
 80067a4:	4643      	mov	r3, r8
 80067a6:	789b      	ldrb	r3, [r3, #2]
 80067a8:	201f      	movs	r0, #31
 80067aa:	4018      	ands	r0, r3
 80067ac:	f00d fff8 	bl	80147a0 <__aeabi_i2d>
 80067b0:	0032      	movs	r2, r6
 80067b2:	003b      	movs	r3, r7
 80067b4:	f00d f9a2 	bl	8013afc <__aeabi_dmul>
 80067b8:	f00b fbf8 	bl	8011fac <__aeabi_d2uiz>
 80067bc:	b280      	uxth	r0, r0
                if (scan_period > tsched)
 80067be:	4b37      	ldr	r3, [pc, #220]	; (800689c <dll_tx_frame+0x2a4>)
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	4283      	cmp	r3, r0
 80067c4:	d2cd      	bcs.n	8006762 <dll_tx_frame+0x16a>
                    tsched = scan_period;
 80067c6:	4b35      	ldr	r3, [pc, #212]	; (800689c <dll_tx_frame+0x2a4>)
 80067c8:	8018      	strh	r0, [r3, #0]
 80067ca:	e7ca      	b.n	8006762 <dll_tx_frame+0x16a>
        if (tsched)
 80067cc:	4b33      	ldr	r3, [pc, #204]	; (800689c <dll_tx_frame+0x2a4>)
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d000      	beq.n	80067d6 <dll_tx_frame+0x1de>
            packet->ETA = tsched;
 80067d4:	85e3      	strh	r3, [r4, #46]	; 0x2e
        packet->phy_config.tx.syncword_class = PHY_SYNCWORD_CLASS1;
 80067d6:	2326      	movs	r3, #38	; 0x26
 80067d8:	33ff      	adds	r3, #255	; 0xff
 80067da:	2201      	movs	r2, #1
 80067dc:	54e2      	strb	r2, [r4, r3]
        current_eirp = packet->phy_config.tx.eirp;
 80067de:	3301      	adds	r3, #1
 80067e0:	56e2      	ldrsb	r2, [r4, r3]
 80067e2:	4b29      	ldr	r3, [pc, #164]	; (8006888 <dll_tx_frame+0x290>)
 80067e4:	701a      	strb	r2, [r3, #0]
        current_channel_id = packet->phy_config.tx.channel_id;
 80067e6:	2203      	movs	r2, #3
 80067e8:	0021      	movs	r1, r4
 80067ea:	3123      	adds	r1, #35	; 0x23
 80067ec:	31ff      	adds	r1, #255	; 0xff
 80067ee:	4828      	ldr	r0, [pc, #160]	; (8006890 <dll_tx_frame+0x298>)
 80067f0:	f00e faee 	bl	8014dd0 <memcpy>
        if (tx_nf_method == D7ADLL_FIXED_NOISE_FLOOR)
 80067f4:	4b2b      	ldr	r3, [pc, #172]	; (80068a4 <dll_tx_frame+0x2ac>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d105      	bne.n	8006808 <dll_tx_frame+0x210>
            E_CCA = - remote_access_profile.subbands[0].cca; // Eccao is set to 0 dB
 80067fc:	4b26      	ldr	r3, [pc, #152]	; (8006898 <dll_tx_frame+0x2a0>)
 80067fe:	7b9b      	ldrb	r3, [r3, #14]
 8006800:	425b      	negs	r3, r3
 8006802:	4a29      	ldr	r2, [pc, #164]	; (80068a8 <dll_tx_frame+0x2b0>)
 8006804:	8013      	strh	r3, [r2, #0]
            DPRINT("fixed floor: E_CCA %i", E_CCA);
 8006806:	e75b      	b.n	80066c0 <dll_tx_frame+0xc8>
        else if(tx_nf_method == D7ADLL_MEDIAN_OF_THREE)
 8006808:	2b02      	cmp	r3, #2
 800680a:	d104      	bne.n	8006816 <dll_tx_frame+0x21e>
            uint8_t position = get_position_channel();
 800680c:	f7fe ff46 	bl	800569c <get_position_channel>
            median_measured_noisefloor(position);
 8006810:	f7ff fc18 	bl	8006044 <median_measured_noisefloor>
 8006814:	e754      	b.n	80066c0 <dll_tx_frame+0xc8>
          assert(false);
 8006816:	4b25      	ldr	r3, [pc, #148]	; (80068ac <dll_tx_frame+0x2b4>)
 8006818:	4a25      	ldr	r2, [pc, #148]	; (80068b0 <dll_tx_frame+0x2b8>)
 800681a:	4926      	ldr	r1, [pc, #152]	; (80068b4 <dll_tx_frame+0x2bc>)
 800681c:	4826      	ldr	r0, [pc, #152]	; (80068b8 <dll_tx_frame+0x2c0>)
 800681e:	f001 feef 	bl	8008600 <__assert_func>
            timer_tick_t Te = CT_DECOMPRESS(packet->d7atp_te);
 8006822:	252a      	movs	r5, #42	; 0x2a
 8006824:	5d60      	ldrb	r0, [r4, r5]
 8006826:	0940      	lsrs	r0, r0, #5
 8006828:	f00d ffba 	bl	80147a0 <__aeabi_i2d>
 800682c:	0002      	movs	r2, r0
 800682e:	000b      	movs	r3, r1
 8006830:	2000      	movs	r0, #0
 8006832:	491b      	ldr	r1, [pc, #108]	; (80068a0 <dll_tx_frame+0x2a8>)
 8006834:	f00b f8aa 	bl	801198c <pow>
 8006838:	0006      	movs	r6, r0
 800683a:	000f      	movs	r7, r1
 800683c:	5d63      	ldrb	r3, [r4, r5]
 800683e:	201f      	movs	r0, #31
 8006840:	4018      	ands	r0, r3
 8006842:	f00d ffad 	bl	80147a0 <__aeabi_i2d>
 8006846:	0032      	movs	r2, r6
 8006848:	003b      	movs	r3, r7
 800684a:	f00d f957 	bl	8013afc <__aeabi_dmul>
 800684e:	f00b fbad 	bl	8011fac <__aeabi_d2uiz>
 8006852:	0004      	movs	r4, r0
            timer_tick_t Trpd = timer_get_counter_value() - current_packet->request_received_timestamp; //response processing delay
 8006854:	f009 fd54 	bl	8010300 <timer_get_counter_value>
 8006858:	4b0e      	ldr	r3, [pc, #56]	; (8006894 <dll_tx_frame+0x29c>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	6813      	ldr	r3, [r2, #0]
 800685e:	1ac1      	subs	r1, r0, r3
            current_packet->request_received_timestamp += Te;
 8006860:	191d      	adds	r5, r3, r4
 8006862:	6015      	str	r5, [r2, #0]
            if (Te > Trpd)
 8006864:	428c      	cmp	r4, r1
 8006866:	d800      	bhi.n	800686a <dll_tx_frame+0x272>
 8006868:	e74b      	b.n	8006702 <dll_tx_frame+0x10a>
                Te -= Trpd;
 800686a:	1a18      	subs	r0, r3, r0
 800686c:	1904      	adds	r4, r0, r4
                dll_csma_timer.next_event = Te;
 800686e:	4813      	ldr	r0, [pc, #76]	; (80068bc <dll_tx_frame+0x2c4>)
 8006870:	6044      	str	r4, [r0, #4]
                timer_add_event(&dll_csma_timer);
 8006872:	f009 ffdf 	bl	8010834 <timer_add_event>
                return;
 8006876:	e747      	b.n	8006708 <dll_tx_frame+0x110>
 8006878:	200027fc 	.word	0x200027fc
 800687c:	2000273a 	.word	0x2000273a
 8006880:	20002785 	.word	0x20002785
 8006884:	200026e6 	.word	0x200026e6
 8006888:	2000272f 	.word	0x2000272f
 800688c:	200027ac 	.word	0x200027ac
 8006890:	2000272c 	.word	0x2000272c
 8006894:	20002730 	.word	0x20002730
 8006898:	20002744 	.word	0x20002744
 800689c:	20002788 	.word	0x20002788
 80068a0:	40100000 	.word	0x40100000
 80068a4:	2000278a 	.word	0x2000278a
 80068a8:	200026e4 	.word	0x200026e4
 80068ac:	080169c8 	.word	0x080169c8
 80068b0:	08019320 	.word	0x08019320
 80068b4:	0000044d 	.word	0x0000044d
 80068b8:	08018b70 	.word	0x08018b70
 80068bc:	200027d4 	.word	0x200027d4

080068c0 <dll_start_foreground_scan>:


void dll_start_foreground_scan()
{
 80068c0:	b510      	push	{r4, lr}
    if (is_tx_busy())
 80068c2:	f7fe fed7 	bl	8005674 <is_tx_busy>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d102      	bne.n	80068d0 <dll_start_foreground_scan+0x10>
        discard_tx();

    start_foreground_scan();
 80068ca:	f7ff f901 	bl	8005ad0 <start_foreground_scan>
}
 80068ce:	bd10      	pop	{r4, pc}
        discard_tx();
 80068d0:	f7ff fb86 	bl	8005fe0 <discard_tx>
 80068d4:	e7f9      	b.n	80068ca <dll_start_foreground_scan+0xa>
	...

080068d8 <dll_stop_foreground_scan>:

void dll_stop_foreground_scan()
{
 80068d8:	b510      	push	{r4, lr}
    DPRINT("Stop FG scan @ %i\n", timer_get_counter_value());
    if(dll_state == DLL_STATE_IDLE)
 80068da:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <dll_stop_foreground_scan+0x2c>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d003      	beq.n	80068ea <dll_stop_foreground_scan+0x12>
        return;

    if (is_tx_busy())
 80068e2:	f7fe fec7 	bl	8005674 <is_tx_busy>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	d000      	beq.n	80068ec <dll_stop_foreground_scan+0x14>

    if((dll_state == DLL_STATE_SCAN_AUTOMATION) || (dll_state == DLL_STATE_IDLE))
        return; // stay in scan automation

    switch_state(DLL_STATE_IDLE);
}
 80068ea:	bd10      	pop	{r4, pc}
    phy_stop_rx();
 80068ec:	f000 fe9a 	bl	8007624 <phy_stop_rx>
    if((dll_state == DLL_STATE_SCAN_AUTOMATION) || (dll_state == DLL_STATE_IDLE))
 80068f0:	4b04      	ldr	r3, [pc, #16]	; (8006904 <dll_stop_foreground_scan+0x2c>)
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d9f6      	bls.n	80068ea <dll_stop_foreground_scan+0x12>
    switch_state(DLL_STATE_IDLE);
 80068fc:	2001      	movs	r0, #1
 80068fe:	f7fe fff1 	bl	80058e4 <switch_state>
 8006902:	e7f2      	b.n	80068ea <dll_stop_foreground_scan+0x12>
 8006904:	2000273a 	.word	0x2000273a

08006908 <dll_assemble_packet_header_bg>:

uint8_t dll_assemble_packet_header_bg(packet_t* packet, uint8_t* data_ptr)
{
 8006908:	b570      	push	{r4, r5, r6, lr}
 800690a:	0004      	movs	r4, r0
 800690c:	000d      	movs	r5, r1
    *data_ptr = packet->dll_header.subnet; data_ptr += sizeof(packet->dll_header.subnet);
 800690e:	7903      	ldrb	r3, [r0, #4]
 8006910:	700b      	strb	r3, [r1, #0]

    uint16_t crc;
    uint8_t addr_len = packet->dll_header.control_target_id_type == ID_TYPE_VID? 2 : 8;
 8006912:	7983      	ldrb	r3, [r0, #6]
 8006914:	2b03      	cmp	r3, #3
 8006916:	d00e      	beq.n	8006936 <dll_assemble_packet_header_bg+0x2e>
 8006918:	2108      	movs	r1, #8
    crc = crc_calculate(packet->d7anp_addressee->id, addr_len);
 800691a:	6a23      	ldr	r3, [r4, #32]
 800691c:	1c98      	adds	r0, r3, #2
 800691e:	f007 fc6b 	bl	800e1f8 <crc_calculate>
    DPRINT("crc %04x ", crc);

    packet->dll_header.control_identifier_tag = (uint8_t)crc & 0x3F;
 8006922:	b243      	sxtb	r3, r0
 8006924:	203f      	movs	r0, #63	; 0x3f
 8006926:	4018      	ands	r0, r3
 8006928:	7160      	strb	r0, [r4, #5]
    DPRINT("dll_header.control_identifier_tag %x ", packet->dll_header.control_identifier_tag);

    *data_ptr = (packet->dll_header.control_target_id_type << 6) | (packet->dll_header.control_identifier_tag & 0x3F);
 800692a:	79a3      	ldrb	r3, [r4, #6]
 800692c:	019b      	lsls	r3, r3, #6
 800692e:	4318      	orrs	r0, r3
 8006930:	7068      	strb	r0, [r5, #1]
    DPRINT("dll_header.control %x ", *data_ptr);
    data_ptr ++;

    return 0;
}
 8006932:	2000      	movs	r0, #0
 8006934:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t addr_len = packet->dll_header.control_target_id_type == ID_TYPE_VID? 2 : 8;
 8006936:	2102      	movs	r1, #2
 8006938:	e7ef      	b.n	800691a <dll_assemble_packet_header_bg+0x12>
	...

0800693c <cca_rssi_valid>:
{
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	0004      	movs	r4, r0
    if (dll_state != DLL_STATE_CCA1 && dll_state != DLL_STATE_CCA2)
 8006942:	4a37      	ldr	r2, [pc, #220]	; (8006a20 <cca_rssi_valid+0xe4>)
 8006944:	7813      	ldrb	r3, [r2, #0]
 8006946:	3b05      	subs	r3, #5
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b01      	cmp	r3, #1
 800694c:	d812      	bhi.n	8006974 <cca_rssi_valid+0x38>
    if (cur_rssi <= E_CCA)
 800694e:	4b35      	ldr	r3, [pc, #212]	; (8006a24 <cca_rssi_valid+0xe8>)
 8006950:	2200      	movs	r2, #0
 8006952:	5e9b      	ldrsh	r3, [r3, r2]
 8006954:	4283      	cmp	r3, r0
 8006956:	db5b      	blt.n	8006a10 <cca_rssi_valid+0xd4>
        if((tx_nf_method == D7ADLL_MEDIAN_OF_THREE || rx_nf_method == D7ADLL_MEDIAN_OF_THREE))
 8006958:	4b33      	ldr	r3, [pc, #204]	; (8006a28 <cca_rssi_valid+0xec>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b02      	cmp	r3, #2
 800695e:	d00b      	beq.n	8006978 <cca_rssi_valid+0x3c>
 8006960:	4b32      	ldr	r3, [pc, #200]	; (8006a2c <cca_rssi_valid+0xf0>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2b02      	cmp	r3, #2
 8006966:	d007      	beq.n	8006978 <cca_rssi_valid+0x3c>
        if (dll_state == DLL_STATE_CCA1)
 8006968:	4b2d      	ldr	r3, [pc, #180]	; (8006a20 <cca_rssi_valid+0xe4>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b05      	cmp	r3, #5
 800696e:	d016      	beq.n	800699e <cca_rssi_valid+0x62>
        else if (dll_state == DLL_STATE_CCA2)
 8006970:	2b06      	cmp	r3, #6
 8006972:	d020      	beq.n	80069b6 <cca_rssi_valid+0x7a>
}
 8006974:	b004      	add	sp, #16
 8006976:	bd70      	pop	{r4, r5, r6, pc}
            uint8_t position = get_position_channel();
 8006978:	f7fe fe90 	bl	800569c <get_position_channel>
 800697c:	0005      	movs	r5, r0
            memcpy(noisefl_last_measurements[position], &noisefl_last_measurements[position][1], 2);
 800697e:	492c      	ldr	r1, [pc, #176]	; (8006a30 <cca_rssi_valid+0xf4>)
 8006980:	0043      	lsls	r3, r0, #1
 8006982:	181b      	adds	r3, r3, r0
 8006984:	18ce      	adds	r6, r1, r3
 8006986:	3301      	adds	r3, #1
 8006988:	18c9      	adds	r1, r1, r3
 800698a:	2202      	movs	r2, #2
 800698c:	0030      	movs	r0, r6
 800698e:	f00e fa1f 	bl	8014dd0 <memcpy>
            noisefl_last_measurements[position][2] = - cur_rssi;
 8006992:	4264      	negs	r4, r4
 8006994:	70b4      	strb	r4, [r6, #2]
            median_measured_noisefloor(position);
 8006996:	0028      	movs	r0, r5
 8006998:	f7ff fb54 	bl	8006044 <median_measured_noisefloor>
 800699c:	e7e4      	b.n	8006968 <cca_rssi_valid+0x2c>
            phy_switch_to_standby_mode();
 800699e:	f000 fabf 	bl	8006f20 <phy_switch_to_standby_mode>
            switch_state(DLL_STATE_CCA2);
 80069a2:	2006      	movs	r0, #6
 80069a4:	f7fe ff9e 	bl	80058e4 <switch_state>
            hw_busy_wait(5000);
 80069a8:	4822      	ldr	r0, [pc, #136]	; (8006a34 <cca_rssi_valid+0xf8>)
 80069aa:	f005 f923 	bl	800bbf4 <hw_busy_wait>
            execute_cca(NULL);
 80069ae:	2000      	movs	r0, #0
 80069b0:	f7ff faf6 	bl	8005fa0 <execute_cca>
            return;
 80069b4:	e7de      	b.n	8006974 <cca_rssi_valid+0x38>
            switch_state(DLL_STATE_TX_FOREGROUND);
 80069b6:	2009      	movs	r0, #9
 80069b8:	f7fe ff94 	bl	80058e4 <switch_state>
            guarded_channel = true;
 80069bc:	4b1e      	ldr	r3, [pc, #120]	; (8006a38 <cca_rssi_valid+0xfc>)
 80069be:	2201      	movs	r2, #1
 80069c0:	701a      	strb	r2, [r3, #0]
            if (current_packet->ETA)
 80069c2:	4b1e      	ldr	r3, [pc, #120]	; (8006a3c <cca_rssi_valid+0x100>)
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d018      	beq.n	80069fe <cca_rssi_valid+0xc2>
                dll_assemble_packet_header_bg(current_packet, dll_header_bg_frame);
 80069cc:	a903      	add	r1, sp, #12
 80069ce:	f7ff ff9b 	bl	8006908 <dll_assemble_packet_header_bg>
                err = phy_send_packet_with_advertising(&current_packet->hw_radio_packet,
 80069d2:	4b1a      	ldr	r3, [pc, #104]	; (8006a3c <cca_rssi_valid+0x100>)
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80069d8:	0001      	movs	r1, r0
 80069da:	3123      	adds	r1, #35	; 0x23
 80069dc:	31ff      	adds	r1, #255	; 0xff
 80069de:	3029      	adds	r0, #41	; 0x29
 80069e0:	30ff      	adds	r0, #255	; 0xff
 80069e2:	4a17      	ldr	r2, [pc, #92]	; (8006a40 <cca_rssi_valid+0x104>)
 80069e4:	9200      	str	r2, [sp, #0]
 80069e6:	aa03      	add	r2, sp, #12
 80069e8:	f000 fe72 	bl	80076d0 <phy_send_packet_with_advertising>
            assert(err == SUCCESS);
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d0c1      	beq.n	8006974 <cca_rssi_valid+0x38>
 80069f0:	21f2      	movs	r1, #242	; 0xf2
 80069f2:	4b14      	ldr	r3, [pc, #80]	; (8006a44 <cca_rssi_valid+0x108>)
 80069f4:	4a14      	ldr	r2, [pc, #80]	; (8006a48 <cca_rssi_valid+0x10c>)
 80069f6:	0049      	lsls	r1, r1, #1
 80069f8:	4814      	ldr	r0, [pc, #80]	; (8006a4c <cca_rssi_valid+0x110>)
 80069fa:	f001 fe01 	bl	8008600 <__assert_func>
                err = phy_send_packet(&current_packet->hw_radio_packet, &current_packet->phy_config.tx, &dll_signal_packet_transmitted);
 80069fe:	0001      	movs	r1, r0
 8006a00:	3123      	adds	r1, #35	; 0x23
 8006a02:	31ff      	adds	r1, #255	; 0xff
 8006a04:	3029      	adds	r0, #41	; 0x29
 8006a06:	30ff      	adds	r0, #255	; 0xff
 8006a08:	4a0d      	ldr	r2, [pc, #52]	; (8006a40 <cca_rssi_valid+0x104>)
 8006a0a:	f000 fe11 	bl	8007630 <phy_send_packet>
 8006a0e:	e7ed      	b.n	80069ec <cca_rssi_valid+0xb0>
        switch_state(DLL_STATE_CSMA_CA_RETRY);
 8006a10:	2004      	movs	r0, #4
 8006a12:	f7fe ff67 	bl	80058e4 <switch_state>
        execute_csma_ca(NULL);
 8006a16:	2000      	movs	r0, #0
 8006a18:	f7ff f904 	bl	8005c24 <execute_csma_ca>
 8006a1c:	e7aa      	b.n	8006974 <cca_rssi_valid+0x38>
 8006a1e:	46c0      	nop			; (mov r8, r8)
 8006a20:	2000273a 	.word	0x2000273a
 8006a24:	200026e4 	.word	0x200026e4
 8006a28:	2000278a 	.word	0x2000278a
 8006a2c:	20002786 	.word	0x20002786
 8006a30:	20002814 	.word	0x20002814
 8006a34:	00001388 	.word	0x00001388
 8006a38:	20002740 	.word	0x20002740
 8006a3c:	20002730 	.word	0x20002730
 8006a40:	08005b11 	.word	0x08005b11
 8006a44:	0801732c 	.word	0x0801732c
 8006a48:	08019288 	.word	0x08019288
 8006a4c:	08018b70 	.word	0x08018b70

08006a50 <dll_assemble_packet_header>:

uint8_t dll_assemble_packet_header(packet_t* packet, uint8_t* data_ptr)
{
 8006a50:	b570      	push	{r4, r5, r6, lr}
 8006a52:	0003      	movs	r3, r0
 8006a54:	000d      	movs	r5, r1
    uint8_t* dll_header_start = data_ptr;
    *data_ptr = packet->dll_header.subnet; data_ptr += sizeof(packet->dll_header.subnet);
 8006a56:	7902      	ldrb	r2, [r0, #4]
 8006a58:	700a      	strb	r2, [r1, #0]

    if (!ID_TYPE_IS_BROADCAST(packet->dll_header.control_target_id_type))
 8006a5a:	7982      	ldrb	r2, [r0, #6]
 8006a5c:	2a01      	cmp	r2, #1
 8006a5e:	d916      	bls.n	8006a8e <dll_assemble_packet_header+0x3e>
    {
        uint8_t addr_len = packet->dll_header.control_target_id_type == ID_TYPE_VID? 2 : 8;
 8006a60:	2a03      	cmp	r2, #3
 8006a62:	d012      	beq.n	8006a8a <dll_assemble_packet_header+0x3a>
 8006a64:	2608      	movs	r6, #8
        *data_ptr = (packet->dll_header.control_target_id_type << 6) | (packet->dll_header.control_eirp_index & 0x3F);
 8006a66:	0192      	lsls	r2, r2, #6
 8006a68:	2005      	movs	r0, #5
 8006a6a:	5618      	ldrsb	r0, [r3, r0]
 8006a6c:	213f      	movs	r1, #63	; 0x3f
 8006a6e:	4001      	ands	r1, r0
 8006a70:	430a      	orrs	r2, r1
 8006a72:	706a      	strb	r2, [r5, #1]
        data_ptr ++;
 8006a74:	1cac      	adds	r4, r5, #2
        memcpy(data_ptr, packet->d7anp_addressee->id, addr_len); data_ptr += addr_len;
 8006a76:	6a19      	ldr	r1, [r3, #32]
 8006a78:	3102      	adds	r1, #2
 8006a7a:	0032      	movs	r2, r6
 8006a7c:	0020      	movs	r0, r4
 8006a7e:	f00e f9a7 	bl	8014dd0 <memcpy>
 8006a82:	19a4      	adds	r4, r4, r6
            packet->dll_header.control_target_id_type = ID_TYPE_NOID;
        *data_ptr = (packet->dll_header.control_target_id_type << 6) | (packet->dll_header.control_eirp_index & 0x3F);
        data_ptr ++;
    }

    return data_ptr - dll_header_start;
 8006a84:	1b60      	subs	r0, r4, r5
 8006a86:	b2c0      	uxtb	r0, r0
}
 8006a88:	bd70      	pop	{r4, r5, r6, pc}
        uint8_t addr_len = packet->dll_header.control_target_id_type == ID_TYPE_VID? 2 : 8;
 8006a8a:	2602      	movs	r6, #2
 8006a8c:	e7eb      	b.n	8006a66 <dll_assemble_packet_header+0x16>
        if (packet->dll_header.control_target_id_type == ID_TYPE_NBID)
 8006a8e:	2a00      	cmp	r2, #0
 8006a90:	d101      	bne.n	8006a96 <dll_assemble_packet_header+0x46>
            packet->dll_header.control_target_id_type = ID_TYPE_NOID;
 8006a92:	3201      	adds	r2, #1
 8006a94:	7182      	strb	r2, [r0, #6]
        *data_ptr = (packet->dll_header.control_target_id_type << 6) | (packet->dll_header.control_eirp_index & 0x3F);
 8006a96:	799a      	ldrb	r2, [r3, #6]
 8006a98:	0192      	lsls	r2, r2, #6
 8006a9a:	2105      	movs	r1, #5
 8006a9c:	5659      	ldrsb	r1, [r3, r1]
 8006a9e:	233f      	movs	r3, #63	; 0x3f
 8006aa0:	400b      	ands	r3, r1
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	706b      	strb	r3, [r5, #1]
        data_ptr ++;
 8006aa6:	1cac      	adds	r4, r5, #2
 8006aa8:	e7ec      	b.n	8006a84 <dll_assemble_packet_header+0x34>
	...

08006aac <dll_disassemble_packet_header>:

bool dll_disassemble_packet_header(packet_t* packet, uint8_t* data_idx)
{
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	0004      	movs	r4, r0
 8006ab2:	000d      	movs	r5, r1
    if(packet->hw_radio_packet.length < (*data_idx + 2))
 8006ab4:	780a      	ldrb	r2, [r1, #0]
 8006ab6:	1c51      	adds	r1, r2, #1
 8006ab8:	239a      	movs	r3, #154	; 0x9a
 8006aba:	005b      	lsls	r3, r3, #1
 8006abc:	5ac3      	ldrh	r3, [r0, r3]
 8006abe:	4299      	cmp	r1, r3
 8006ac0:	da51      	bge.n	8006b66 <dll_disassemble_packet_header+0xba>
    {
        log_print_error_string("%s:%s Packet too small %d < %d",__FILE__, __FUNCTION__, packet->hw_radio_packet.length, *data_idx + 2);
        return false;
    }
    packet->dll_header.subnet = packet->hw_radio_packet.data[(*data_idx)]; (*data_idx)++;
 8006ac2:	1882      	adds	r2, r0, r2
 8006ac4:	3237      	adds	r2, #55	; 0x37
 8006ac6:	32ff      	adds	r2, #255	; 0xff
 8006ac8:	7813      	ldrb	r3, [r2, #0]
 8006aca:	7103      	strb	r3, [r0, #4]
 8006acc:	782b      	ldrb	r3, [r5, #0]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	702b      	strb	r3, [r5, #0]
    uint8_t FSS = ACCESS_SPECIFIER(packet->dll_header.subnet);
 8006ad4:	7901      	ldrb	r1, [r0, #4]
 8006ad6:	090a      	lsrs	r2, r1, #4
    uint8_t FSM = ACCESS_MASK(packet->dll_header.subnet);
    uint8_t address_len;
    uint8_t id[8];

    if ((FSS != 0x0F) && (FSS != ACCESS_SPECIFIER(active_access_class))) // check that the active access class is always set to the scan access class
 8006ad8:	2a0f      	cmp	r2, #15
 8006ada:	d004      	beq.n	8006ae6 <dll_disassemble_packet_header+0x3a>
 8006adc:	483f      	ldr	r0, [pc, #252]	; (8006bdc <dll_disassemble_packet_header+0x130>)
 8006ade:	7800      	ldrb	r0, [r0, #0]
 8006ae0:	0900      	lsrs	r0, r0, #4
 8006ae2:	4290      	cmp	r0, r2
 8006ae4:	d170      	bne.n	8006bc8 <dll_disassemble_packet_header+0x11c>
    {
        DPRINT("Subnet 0x%02x does not match current access class 0x%02x, skipping packet", packet->dll_header.subnet, active_access_class);
        return false;
    }

    if ((FSM & ACCESS_MASK(active_access_class)) == 0) // check that the active access class is always set to the scan access class
 8006ae6:	4a3d      	ldr	r2, [pc, #244]	; (8006bdc <dll_disassemble_packet_header+0x130>)
 8006ae8:	7810      	ldrb	r0, [r2, #0]
 8006aea:	220f      	movs	r2, #15
 8006aec:	4002      	ands	r2, r0
 8006aee:	420a      	tst	r2, r1
 8006af0:	d100      	bne.n	8006af4 <dll_disassemble_packet_header+0x48>
 8006af2:	e06c      	b.n	8006bce <dll_disassemble_packet_header+0x122>
    {
        DPRINT("Subnet does not match current access class, skipping packet");
        return false;
    }

    packet->dll_header.control_target_id_type  = packet->hw_radio_packet.data[(*data_idx)] >> 6 ;
 8006af4:	18e3      	adds	r3, r4, r3
 8006af6:	3337      	adds	r3, #55	; 0x37
 8006af8:	33ff      	adds	r3, #255	; 0xff
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	099b      	lsrs	r3, r3, #6
 8006afe:	71a3      	strb	r3, [r4, #6]

    if (packet->type == BACKGROUND_ADV)
 8006b00:	232c      	movs	r3, #44	; 0x2c
 8006b02:	5ce3      	ldrb	r3, [r4, r3]
 8006b04:	2b05      	cmp	r3, #5
 8006b06:	d037      	beq.n	8006b78 <dll_disassemble_packet_header+0xcc>
        packet->dll_header.control_identifier_tag = packet->hw_radio_packet.data[(*data_idx)] & 0x3F;
        DPRINT("control_target_id_type 0x%02x Identifier Tag 0x%02x", packet->dll_header.control_target_id_type, packet->dll_header.control_identifier_tag);
    }
    else
    {
        packet->dll_header.control_eirp_index = packet->hw_radio_packet.data[(*data_idx)] & 0x3F;
 8006b08:	782b      	ldrb	r3, [r5, #0]
 8006b0a:	18e3      	adds	r3, r4, r3
 8006b0c:	3337      	adds	r3, #55	; 0x37
 8006b0e:	33ff      	adds	r3, #255	; 0xff
 8006b10:	2200      	movs	r2, #0
 8006b12:	569a      	ldrsb	r2, [r3, r2]
 8006b14:	233f      	movs	r3, #63	; 0x3f
 8006b16:	4013      	ands	r3, r2
 8006b18:	7163      	strb	r3, [r4, #5]
        DPRINT("control_target_id_type 0x%02x EIRP index %d", packet->dll_header.control_target_id_type, packet->dll_header.control_eirp_index);
    }

    (*data_idx)++;
 8006b1a:	782b      	ldrb	r3, [r5, #0]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	702b      	strb	r3, [r5, #0]

    if (!ID_TYPE_IS_BROADCAST(packet->dll_header.control_target_id_type))
 8006b20:	79a3      	ldrb	r3, [r4, #6]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d955      	bls.n	8006bd2 <dll_disassemble_packet_header+0x126>
    {
        if (packet->dll_header.control_target_id_type == ID_TYPE_UID)
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d030      	beq.n	8006b8c <dll_disassemble_packet_header+0xe0>
            d7ap_fs_read_uid(id);
            address_len = 8;
        }
        else
        {
            d7ap_read_vid(id);
 8006b2a:	a802      	add	r0, sp, #8
 8006b2c:	f7fb fdde 	bl	80026ec <d7ap_read_vid>
            address_len = 2;
 8006b30:	2602      	movs	r6, #2
        }

        if (packet->type == BACKGROUND_ADV)
 8006b32:	232c      	movs	r3, #44	; 0x2c
 8006b34:	5ce3      	ldrb	r3, [r4, r3]
 8006b36:	2b05      	cmp	r3, #5
 8006b38:	d02d      	beq.n	8006b96 <dll_disassemble_packet_header+0xea>
                return false;
            }
        }
        else
        {
            if(packet->hw_radio_packet.length < (*data_idx + address_len))
 8006b3a:	239a      	movs	r3, #154	; 0x9a
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	5ae3      	ldrh	r3, [r4, r3]
 8006b40:	782a      	ldrb	r2, [r5, #0]
 8006b42:	18b1      	adds	r1, r6, r2
 8006b44:	428b      	cmp	r3, r1
 8006b46:	db37      	blt.n	8006bb8 <dll_disassemble_packet_header+0x10c>
            {
                log_print_error_string("%s:%s Packet too small %d < %d", __FILE__, __FUNCTION__, packet->hw_radio_packet.length, *data_idx + address_len);
                return false;
            }
            if (memcmp(packet->hw_radio_packet.data + (*data_idx), id, address_len) != 0)
 8006b48:	0020      	movs	r0, r4
 8006b4a:	3037      	adds	r0, #55	; 0x37
 8006b4c:	30ff      	adds	r0, #255	; 0xff
 8006b4e:	1880      	adds	r0, r0, r2
 8006b50:	0032      	movs	r2, r6
 8006b52:	a902      	add	r1, sp, #8
 8006b54:	f00e f914 	bl	8014d80 <memcmp>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	d13c      	bne.n	8006bd6 <dll_disassemble_packet_header+0x12a>
                DPRINT_DATA(id, address_len);
                DPRINT("TARGET DEVICE ID");
                DPRINT_DATA(packet->hw_radio_packet.data + (*data_idx), address_len);
                return false;
            }
            (*data_idx) += address_len;
 8006b5c:	782b      	ldrb	r3, [r5, #0]
 8006b5e:	18f6      	adds	r6, r6, r3
 8006b60:	702e      	strb	r6, [r5, #0]
        }
    }
    // TODO filter LQ
    // TODO pass to upper layer
    // TODO Tscan -= Trx
    return true;
 8006b62:	3001      	adds	r0, #1
 8006b64:	e031      	b.n	8006bca <dll_disassemble_packet_header+0x11e>
        log_print_error_string("%s:%s Packet too small %d < %d",__FILE__, __FUNCTION__, packet->hw_radio_packet.length, *data_idx + 2);
 8006b66:	3202      	adds	r2, #2
 8006b68:	9200      	str	r2, [sp, #0]
 8006b6a:	4a1d      	ldr	r2, [pc, #116]	; (8006be0 <dll_disassemble_packet_header+0x134>)
 8006b6c:	491d      	ldr	r1, [pc, #116]	; (8006be4 <dll_disassemble_packet_header+0x138>)
 8006b6e:	481e      	ldr	r0, [pc, #120]	; (8006be8 <dll_disassemble_packet_header+0x13c>)
 8006b70:	f008 fa36 	bl	800efe0 <log_print_error_string>
        return false;
 8006b74:	2000      	movs	r0, #0
 8006b76:	e028      	b.n	8006bca <dll_disassemble_packet_header+0x11e>
        packet->dll_header.control_identifier_tag = packet->hw_radio_packet.data[(*data_idx)] & 0x3F;
 8006b78:	782b      	ldrb	r3, [r5, #0]
 8006b7a:	18e3      	adds	r3, r4, r3
 8006b7c:	3337      	adds	r3, #55	; 0x37
 8006b7e:	33ff      	adds	r3, #255	; 0xff
 8006b80:	2200      	movs	r2, #0
 8006b82:	569a      	ldrsb	r2, [r3, r2]
 8006b84:	233f      	movs	r3, #63	; 0x3f
 8006b86:	4013      	ands	r3, r2
 8006b88:	7163      	strb	r3, [r4, #5]
        DPRINT("control_target_id_type 0x%02x Identifier Tag 0x%02x", packet->dll_header.control_target_id_type, packet->dll_header.control_identifier_tag);
 8006b8a:	e7c6      	b.n	8006b1a <dll_disassemble_packet_header+0x6e>
            d7ap_fs_read_uid(id);
 8006b8c:	a802      	add	r0, sp, #8
 8006b8e:	f001 f8d1 	bl	8007d34 <d7ap_fs_read_uid>
            address_len = 8;
 8006b92:	2608      	movs	r6, #8
 8006b94:	e7cd      	b.n	8006b32 <dll_disassemble_packet_header+0x86>
            crc = crc_calculate(id, address_len);
 8006b96:	0031      	movs	r1, r6
 8006b98:	a802      	add	r0, sp, #8
 8006b9a:	f007 fb2d 	bl	800e1f8 <crc_calculate>
            if (packet->dll_header.control_identifier_tag != ((uint8_t)crc & 0x3F))
 8006b9e:	2305      	movs	r3, #5
 8006ba0:	56e3      	ldrsb	r3, [r4, r3]
 8006ba2:	223f      	movs	r2, #63	; 0x3f
 8006ba4:	4010      	ands	r0, r2
 8006ba6:	4283      	cmp	r3, r0
 8006ba8:	d101      	bne.n	8006bae <dll_disassemble_packet_header+0x102>
    return true;
 8006baa:	2001      	movs	r0, #1
 8006bac:	e00d      	b.n	8006bca <dll_disassemble_packet_header+0x11e>
                log_print_error_string("Identifier Tag filtering failed, skipping packet");
 8006bae:	480f      	ldr	r0, [pc, #60]	; (8006bec <dll_disassemble_packet_header+0x140>)
 8006bb0:	f008 fa16 	bl	800efe0 <log_print_error_string>
                return false;
 8006bb4:	2000      	movs	r0, #0
 8006bb6:	e008      	b.n	8006bca <dll_disassemble_packet_header+0x11e>
                log_print_error_string("%s:%s Packet too small %d < %d", __FILE__, __FUNCTION__, packet->hw_radio_packet.length, *data_idx + address_len);
 8006bb8:	9100      	str	r1, [sp, #0]
 8006bba:	4a09      	ldr	r2, [pc, #36]	; (8006be0 <dll_disassemble_packet_header+0x134>)
 8006bbc:	4909      	ldr	r1, [pc, #36]	; (8006be4 <dll_disassemble_packet_header+0x138>)
 8006bbe:	480a      	ldr	r0, [pc, #40]	; (8006be8 <dll_disassemble_packet_header+0x13c>)
 8006bc0:	f008 fa0e 	bl	800efe0 <log_print_error_string>
                return false;
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	e000      	b.n	8006bca <dll_disassemble_packet_header+0x11e>
        return false;
 8006bc8:	2000      	movs	r0, #0
}
 8006bca:	b004      	add	sp, #16
 8006bcc:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 8006bce:	2000      	movs	r0, #0
 8006bd0:	e7fb      	b.n	8006bca <dll_disassemble_packet_header+0x11e>
    return true;
 8006bd2:	2001      	movs	r0, #1
 8006bd4:	e7f9      	b.n	8006bca <dll_disassemble_packet_header+0x11e>
                return false;
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	e7f7      	b.n	8006bca <dll_disassemble_packet_header+0x11e>
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	200026e6 	.word	0x200026e6
 8006be0:	080191e8 	.word	0x080191e8
 8006be4:	08018b70 	.word	0x08018b70
 8006be8:	08019194 	.word	0x08019194
 8006bec:	080191b4 	.word	0x080191b4

08006bf0 <continuous_tx_expiration>:
    // DPRINT("sync_word = %04x", sync_word);
    hw_radio_set_sync_word((uint8_t *)&current_syncword, sizeof(uint16_t));
}

void continuous_tx_expiration()
{
 8006bf0:	b510      	push	{r4, lr}
    hw_radio_enable_refill(false);
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	f006 fe70 	bl	800d8d8 <hw_radio_enable_refill>
    DPRINT("Continuous TX is now terminated");
}
 8006bf8:	bd10      	pop	{r4, pc}
	...

08006bfc <fact_settings_file_change_callback>:

void fact_settings_file_change_callback(uint8_t file_id)
{
 8006bfc:	b530      	push	{r4, r5, lr}
 8006bfe:	b093      	sub	sp, #76	; 0x4c
    uint8_t fact_settings[D7A_FILE_FACTORY_SETTINGS_SIZE];
    uint32_t length = D7A_FILE_FACTORY_SETTINGS_SIZE;
 8006c00:	2335      	movs	r3, #53	; 0x35
 8006c02:	9303      	str	r3, [sp, #12]
    d7ap_fs_read_file(D7A_FILE_FACTORY_SETTINGS_FILE_ID, 0, fact_settings, &length, ROOT_AUTH);
 8006c04:	ac04      	add	r4, sp, #16
 8006c06:	2300      	movs	r3, #0
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	ab03      	add	r3, sp, #12
 8006c0c:	0022      	movs	r2, r4
 8006c0e:	2100      	movs	r1, #0
 8006c10:	2001      	movs	r0, #1
 8006c12:	f001 f845 	bl	8007ca0 <d7ap_fs_read_file>

    gain_offset = (int8_t)fact_settings[0];
 8006c16:	7822      	ldrb	r2, [r4, #0]
 8006c18:	4b4b      	ldr	r3, [pc, #300]	; (8006d48 <fact_settings_file_change_callback+0x14c>)
 8006c1a:	701a      	strb	r2, [r3, #0]
    memcpy(&rx_bw_lo_rate, fact_settings + 1, sizeof(uint32_t));
 8006c1c:	4d4b      	ldr	r5, [pc, #300]	; (8006d4c <fact_settings_file_change_callback+0x150>)
 8006c1e:	2204      	movs	r2, #4
 8006c20:	2111      	movs	r1, #17
 8006c22:	4469      	add	r1, sp
 8006c24:	0028      	movs	r0, r5
 8006c26:	f00e f8d3 	bl	8014dd0 <memcpy>
    rx_bw_lo_rate = __builtin_bswap32(rx_bw_lo_rate);
 8006c2a:	682b      	ldr	r3, [r5, #0]
 8006c2c:	ba1b      	rev	r3, r3
 8006c2e:	602b      	str	r3, [r5, #0]
    memcpy(&rx_bw_normal_rate, fact_settings + 5, sizeof(uint32_t));
 8006c30:	4d47      	ldr	r5, [pc, #284]	; (8006d50 <fact_settings_file_change_callback+0x154>)
 8006c32:	2204      	movs	r2, #4
 8006c34:	2115      	movs	r1, #21
 8006c36:	4469      	add	r1, sp
 8006c38:	0028      	movs	r0, r5
 8006c3a:	f00e f8c9 	bl	8014dd0 <memcpy>
    rx_bw_normal_rate = __builtin_bswap32(rx_bw_normal_rate);
 8006c3e:	682b      	ldr	r3, [r5, #0]
 8006c40:	ba1b      	rev	r3, r3
 8006c42:	602b      	str	r3, [r5, #0]
    memcpy(&rx_bw_hi_rate, fact_settings + 9, sizeof(uint32_t));
 8006c44:	4d43      	ldr	r5, [pc, #268]	; (8006d54 <fact_settings_file_change_callback+0x158>)
 8006c46:	2204      	movs	r2, #4
 8006c48:	2119      	movs	r1, #25
 8006c4a:	4469      	add	r1, sp
 8006c4c:	0028      	movs	r0, r5
 8006c4e:	f00e f8bf 	bl	8014dd0 <memcpy>
    rx_bw_hi_rate = __builtin_bswap32(rx_bw_hi_rate);
 8006c52:	682b      	ldr	r3, [r5, #0]
 8006c54:	ba1b      	rev	r3, r3
 8006c56:	602b      	str	r3, [r5, #0]


    memcpy(&bitrate_lo_rate, fact_settings + 13, sizeof(uint32_t));
 8006c58:	4d3f      	ldr	r5, [pc, #252]	; (8006d58 <fact_settings_file_change_callback+0x15c>)
 8006c5a:	2204      	movs	r2, #4
 8006c5c:	211d      	movs	r1, #29
 8006c5e:	4469      	add	r1, sp
 8006c60:	0028      	movs	r0, r5
 8006c62:	f00e f8b5 	bl	8014dd0 <memcpy>
    bitrate_lo_rate = __builtin_bswap32(bitrate_lo_rate);
 8006c66:	682b      	ldr	r3, [r5, #0]
 8006c68:	ba1b      	rev	r3, r3
 8006c6a:	602b      	str	r3, [r5, #0]
    memcpy(&fdev_lo_rate, fact_settings + 17, sizeof(uint32_t));
 8006c6c:	4d3b      	ldr	r5, [pc, #236]	; (8006d5c <fact_settings_file_change_callback+0x160>)
 8006c6e:	2204      	movs	r2, #4
 8006c70:	2121      	movs	r1, #33	; 0x21
 8006c72:	4469      	add	r1, sp
 8006c74:	0028      	movs	r0, r5
 8006c76:	f00e f8ab 	bl	8014dd0 <memcpy>
    fdev_lo_rate = __builtin_bswap32(fdev_lo_rate);
 8006c7a:	682b      	ldr	r3, [r5, #0]
 8006c7c:	ba1b      	rev	r3, r3
 8006c7e:	602b      	str	r3, [r5, #0]
    memcpy(&bitrate_normal_rate, fact_settings + 21, sizeof(uint32_t));
 8006c80:	4d37      	ldr	r5, [pc, #220]	; (8006d60 <fact_settings_file_change_callback+0x164>)
 8006c82:	2204      	movs	r2, #4
 8006c84:	2125      	movs	r1, #37	; 0x25
 8006c86:	4469      	add	r1, sp
 8006c88:	0028      	movs	r0, r5
 8006c8a:	f00e f8a1 	bl	8014dd0 <memcpy>
    bitrate_normal_rate = __builtin_bswap32(bitrate_normal_rate);
 8006c8e:	682b      	ldr	r3, [r5, #0]
 8006c90:	ba1b      	rev	r3, r3
 8006c92:	602b      	str	r3, [r5, #0]
    memcpy(&fdev_normal_rate, fact_settings + 25, sizeof(uint32_t));
 8006c94:	4d33      	ldr	r5, [pc, #204]	; (8006d64 <fact_settings_file_change_callback+0x168>)
 8006c96:	2204      	movs	r2, #4
 8006c98:	2129      	movs	r1, #41	; 0x29
 8006c9a:	4469      	add	r1, sp
 8006c9c:	0028      	movs	r0, r5
 8006c9e:	f00e f897 	bl	8014dd0 <memcpy>
    fdev_normal_rate = __builtin_bswap32(fdev_normal_rate);
 8006ca2:	682b      	ldr	r3, [r5, #0]
 8006ca4:	ba1b      	rev	r3, r3
 8006ca6:	602b      	str	r3, [r5, #0]
    memcpy(&bitrate_hi_rate, fact_settings + 29, sizeof(uint32_t));
 8006ca8:	4d2f      	ldr	r5, [pc, #188]	; (8006d68 <fact_settings_file_change_callback+0x16c>)
 8006caa:	2204      	movs	r2, #4
 8006cac:	212d      	movs	r1, #45	; 0x2d
 8006cae:	4469      	add	r1, sp
 8006cb0:	0028      	movs	r0, r5
 8006cb2:	f00e f88d 	bl	8014dd0 <memcpy>
    bitrate_hi_rate = __builtin_bswap32(bitrate_hi_rate);
 8006cb6:	682b      	ldr	r3, [r5, #0]
 8006cb8:	ba1b      	rev	r3, r3
 8006cba:	602b      	str	r3, [r5, #0]
    memcpy(&fdev_hi_rate, fact_settings + 33, sizeof(uint32_t));
 8006cbc:	4d2b      	ldr	r5, [pc, #172]	; (8006d6c <fact_settings_file_change_callback+0x170>)
 8006cbe:	2204      	movs	r2, #4
 8006cc0:	2131      	movs	r1, #49	; 0x31
 8006cc2:	4469      	add	r1, sp
 8006cc4:	0028      	movs	r0, r5
 8006cc6:	f00e f883 	bl	8014dd0 <memcpy>
    fdev_hi_rate = __builtin_bswap32(fdev_hi_rate);
 8006cca:	682b      	ldr	r3, [r5, #0]
 8006ccc:	ba1b      	rev	r3, r3
 8006cce:	602b      	str	r3, [r5, #0]

    preamble_size_lo_rate = fact_settings[37];
 8006cd0:	2325      	movs	r3, #37	; 0x25
 8006cd2:	5ce2      	ldrb	r2, [r4, r3]
 8006cd4:	4b26      	ldr	r3, [pc, #152]	; (8006d70 <fact_settings_file_change_callback+0x174>)
 8006cd6:	701a      	strb	r2, [r3, #0]
    preamble_size_normal_rate = fact_settings[38];
 8006cd8:	2326      	movs	r3, #38	; 0x26
 8006cda:	5ce2      	ldrb	r2, [r4, r3]
 8006cdc:	4b25      	ldr	r3, [pc, #148]	; (8006d74 <fact_settings_file_change_callback+0x178>)
 8006cde:	701a      	strb	r2, [r3, #0]
    preamble_size_hi_rate = fact_settings[39];
 8006ce0:	2327      	movs	r3, #39	; 0x27
 8006ce2:	5ce2      	ldrb	r2, [r4, r3]
 8006ce4:	4b24      	ldr	r3, [pc, #144]	; (8006d78 <fact_settings_file_change_callback+0x17c>)
 8006ce6:	701a      	strb	r2, [r3, #0]

    preamble_detector_size_lo_rate = fact_settings[40];
 8006ce8:	2328      	movs	r3, #40	; 0x28
 8006cea:	5ce2      	ldrb	r2, [r4, r3]
 8006cec:	4b23      	ldr	r3, [pc, #140]	; (8006d7c <fact_settings_file_change_callback+0x180>)
 8006cee:	701a      	strb	r2, [r3, #0]
    preamble_detector_size_normal_rate = fact_settings[41];
 8006cf0:	2329      	movs	r3, #41	; 0x29
 8006cf2:	5ce2      	ldrb	r2, [r4, r3]
 8006cf4:	4b22      	ldr	r3, [pc, #136]	; (8006d80 <fact_settings_file_change_callback+0x184>)
 8006cf6:	701a      	strb	r2, [r3, #0]
    preamble_detector_size_hi_rate = fact_settings[42];
 8006cf8:	232a      	movs	r3, #42	; 0x2a
 8006cfa:	5ce2      	ldrb	r2, [r4, r3]
 8006cfc:	4b21      	ldr	r3, [pc, #132]	; (8006d84 <fact_settings_file_change_callback+0x188>)
 8006cfe:	701a      	strb	r2, [r3, #0]
    preamble_tol_lo_rate = fact_settings[43];
 8006d00:	232b      	movs	r3, #43	; 0x2b
 8006d02:	5ce2      	ldrb	r2, [r4, r3]
 8006d04:	4b20      	ldr	r3, [pc, #128]	; (8006d88 <fact_settings_file_change_callback+0x18c>)
 8006d06:	701a      	strb	r2, [r3, #0]
    preamble_tol_normal_rate = fact_settings[44];
 8006d08:	232c      	movs	r3, #44	; 0x2c
 8006d0a:	5ce2      	ldrb	r2, [r4, r3]
 8006d0c:	4b1f      	ldr	r3, [pc, #124]	; (8006d8c <fact_settings_file_change_callback+0x190>)
 8006d0e:	701a      	strb	r2, [r3, #0]
    preamble_tol_hi_rate = fact_settings[45];
 8006d10:	232d      	movs	r3, #45	; 0x2d
 8006d12:	5ce2      	ldrb	r2, [r4, r3]
 8006d14:	4b1e      	ldr	r3, [pc, #120]	; (8006d90 <fact_settings_file_change_callback+0x194>)
 8006d16:	701a      	strb	r2, [r3, #0]

    rssi_smoothing = fact_settings[46];
 8006d18:	232e      	movs	r3, #46	; 0x2e
 8006d1a:	5ce0      	ldrb	r0, [r4, r3]
    rssi_offset = fact_settings[47];
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	5ce1      	ldrb	r1, [r4, r3]

    hw_radio_set_rssi_config(rssi_smoothing, rssi_offset);
 8006d20:	f005 fd8e 	bl	800c840 <hw_radio_set_rssi_config>

    memcpy(&lora_bw, fact_settings + 48, sizeof(uint32_t));
 8006d24:	4d1b      	ldr	r5, [pc, #108]	; (8006d94 <fact_settings_file_change_callback+0x198>)
 8006d26:	2204      	movs	r2, #4
 8006d28:	a910      	add	r1, sp, #64	; 0x40
 8006d2a:	0028      	movs	r0, r5
 8006d2c:	f00e f850 	bl	8014dd0 <memcpy>
    lora_bw = __builtin_bswap32(lora_bw);
 8006d30:	682b      	ldr	r3, [r5, #0]
 8006d32:	ba1b      	rev	r3, r3
 8006d34:	602b      	str	r3, [r5, #0]
    lora_SF = (uint8_t)fact_settings[52];
 8006d36:	2334      	movs	r3, #52	; 0x34
 8006d38:	5ce2      	ldrb	r2, [r4, r3]
 8006d3a:	4b17      	ldr	r3, [pc, #92]	; (8006d98 <fact_settings_file_change_callback+0x19c>)
 8006d3c:	701a      	strb	r2, [r3, #0]
    DPRINT("high rate bitrate %i : fdev %i : rx_bw %i : preamble size %i : preamble detector size %i : tol %i", bitrate_hi_rate, fdev_hi_rate, rx_bw_hi_rate, preamble_size_hi_rate, preamble_detector_size_hi_rate, preamble_tol_hi_rate);
    DPRINT("rssi smoothing is set to %i with an offset of %i", 2 << rssi_smoothing, rssi_offset);
    DPRINT("gain offset set to %i\n", gain_offset);
    DPRINT("set lora bw to %i Hz with SF %i\n", lora_bw, lora_SF);

    fact_settings_changed = true;
 8006d3e:	4b17      	ldr	r3, [pc, #92]	; (8006d9c <fact_settings_file_change_callback+0x1a0>)
 8006d40:	2201      	movs	r2, #1
 8006d42:	701a      	strb	r2, [r3, #0]
}
 8006d44:	b013      	add	sp, #76	; 0x4c
 8006d46:	bd30      	pop	{r4, r5, pc}
 8006d48:	20002aa8 	.word	0x20002aa8
 8006d4c:	20002af0 	.word	0x20002af0
 8006d50:	20002af4 	.word	0x20002af4
 8006d54:	20002aec 	.word	0x20002aec
 8006d58:	20002868 	.word	0x20002868
 8006d5c:	20002890 	.word	0x20002890
 8006d60:	2000286c 	.word	0x2000286c
 8006d64:	20002894 	.word	0x20002894
 8006d68:	20002864 	.word	0x20002864
 8006d6c:	2000288c 	.word	0x2000288c
 8006d70:	20002ae0 	.word	0x20002ae0
 8006d74:	20002ae1 	.word	0x20002ae1
 8006d78:	20002adf 	.word	0x20002adf
 8006d7c:	20002add 	.word	0x20002add
 8006d80:	20002ade 	.word	0x20002ade
 8006d84:	20002adc 	.word	0x20002adc
 8006d88:	20002ae3 	.word	0x20002ae3
 8006d8c:	20002ae4 	.word	0x20002ae4
 8006d90:	20002ae2 	.word	0x20002ae2
 8006d94:	20002ad8 	.word	0x20002ad8
 8006d98:	20002ad4 	.word	0x20002ad4
 8006d9c:	2000288b 	.word	0x2000288b

08006da0 <assemble_background_payload>:

    return SUCCESS; // TODO other return codes
}

static uint8_t assemble_background_payload()
{
 8006da0:	b530      	push	{r4, r5, lr}
 8006da2:	b083      	sub	sp, #12
     * the FIFO is refilled with the next frames within the same TX.
     * For that, the preamble and the sync word are explicitly inserted before each
     * subsequent advertising frame.
     */

    memcpy(bg_adv.packet_payload, bg_adv.dll_header, BACKGROUND_DLL_HEADER_LENGTH);
 8006da4:	4c1b      	ldr	r4, [pc, #108]	; (8006e14 <assemble_background_payload+0x74>)
 8006da6:	2202      	movs	r2, #2
 8006da8:	0021      	movs	r1, r4
 8006daa:	69e0      	ldr	r0, [r4, #28]
 8006dac:	f00e f810 	bl	8014dd0 <memcpy>

    // add ETA for background frames
    //DPRINT("eta %i", bg_adv.eta);
    swap_eta = __builtin_bswap16(bg_adv.eta);
 8006db0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8006db2:	ba5b      	rev16	r3, r3
 8006db4:	a901      	add	r1, sp, #4
 8006db6:	800b      	strh	r3, [r1, #0]
    memcpy(&bg_adv.packet_payload[BACKGROUND_DLL_HEADER_LENGTH], &swap_eta, sizeof(uint16_t));
 8006db8:	69e3      	ldr	r3, [r4, #28]
 8006dba:	1c98      	adds	r0, r3, #2
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	f00e f807 	bl	8014dd0 <memcpy>

    // add CRC
    crc = __builtin_bswap16(crc_calculate(bg_adv.packet_payload, 4));
 8006dc2:	2104      	movs	r1, #4
 8006dc4:	69e0      	ldr	r0, [r4, #28]
 8006dc6:	f007 fa17 	bl	800e1f8 <crc_calculate>
 8006dca:	ba40      	rev16	r0, r0
 8006dcc:	466b      	mov	r3, sp
 8006dce:	1d99      	adds	r1, r3, #6
 8006dd0:	8008      	strh	r0, [r1, #0]
    memcpy(&bg_adv.packet_payload[BACKGROUND_DLL_HEADER_LENGTH + sizeof(uint16_t)], &crc, 2);
 8006dd2:	69e0      	ldr	r0, [r4, #28]
 8006dd4:	3004      	adds	r0, #4
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f00d fffa 	bl	8014dd0 <memcpy>

    if (current_channel_id.channel_header.ch_coding == PHY_CODING_FEC_PN9)
 8006ddc:	4b0e      	ldr	r3, [pc, #56]	; (8006e18 <assemble_background_payload+0x78>)
 8006dde:	781a      	ldrb	r2, [r3, #0]
 8006de0:	2303      	movs	r3, #3
 8006de2:	4013      	ands	r3, r2
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d008      	beq.n	8006dfa <assemble_background_payload+0x5a>
    }
    else
    {
        //DPRINT("assemble payload %d", BACKGROUND_FRAME_LENGTH);
        //DPRINT_DATA(bg_adv.packet_payload, BACKGROUND_FRAME_LENGTH);
        pn9_encode(bg_adv.packet_payload, BACKGROUND_FRAME_LENGTH);
 8006de8:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <assemble_background_payload+0x74>)
 8006dea:	69d8      	ldr	r0, [r3, #28]
 8006dec:	2106      	movs	r1, #6
 8006dee:	f008 f985 	bl	800f0fc <pn9_encode>
        payload_len = BACKGROUND_FRAME_LENGTH;
 8006df2:	2406      	movs	r4, #6
    }

    return payload_len;
}
 8006df4:	0020      	movs	r0, r4
 8006df6:	b003      	add	sp, #12
 8006df8:	bd30      	pop	{r4, r5, pc}
        payload_len = fec_encode(bg_adv.packet_payload, BACKGROUND_FRAME_LENGTH);
 8006dfa:	4d06      	ldr	r5, [pc, #24]	; (8006e14 <assemble_background_payload+0x74>)
 8006dfc:	2106      	movs	r1, #6
 8006dfe:	69e8      	ldr	r0, [r5, #28]
 8006e00:	f007 fb88 	bl	800e514 <fec_encode>
 8006e04:	b2c4      	uxtb	r4, r0
        pn9_encode(bg_adv.packet_payload, payload_len);
 8006e06:	21ff      	movs	r1, #255	; 0xff
 8006e08:	4001      	ands	r1, r0
 8006e0a:	69e8      	ldr	r0, [r5, #28]
 8006e0c:	f008 f976 	bl	800f0fc <pn9_encode>
 8006e10:	e7f0      	b.n	8006df4 <assemble_background_payload+0x54>
 8006e12:	46c0      	nop			; (mov r8, r8)
 8006e14:	20002838 	.word	0x20002838
 8006e18:	2000055c 	.word	0x2000055c

08006e1c <encode_packet>:
{
 8006e1c:	b570      	push	{r4, r5, r6, lr}
 8006e1e:	0005      	movs	r5, r0
 8006e20:	000c      	movs	r4, r1
    uint16_t encoded_len = packet->length;
 8006e22:	8986      	ldrh	r6, [r0, #12]
    memcpy(encoded_packet, packet->data, packet->length);
 8006e24:	0001      	movs	r1, r0
 8006e26:	310e      	adds	r1, #14
 8006e28:	0032      	movs	r2, r6
 8006e2a:	0020      	movs	r0, r4
 8006e2c:	f00d ffd0 	bl	8014dd0 <memcpy>
    if (current_channel_id.channel_header.ch_coding == PHY_CODING_FEC_PN9)
 8006e30:	4b08      	ldr	r3, [pc, #32]	; (8006e54 <encode_packet+0x38>)
 8006e32:	781a      	ldrb	r2, [r3, #0]
 8006e34:	2303      	movs	r3, #3
 8006e36:	4013      	ands	r3, r2
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d005      	beq.n	8006e48 <encode_packet+0x2c>
    pn9_encode(encoded_packet, encoded_len);
 8006e3c:	0031      	movs	r1, r6
 8006e3e:	0020      	movs	r0, r4
 8006e40:	f008 f95c 	bl	800f0fc <pn9_encode>
}
 8006e44:	0030      	movs	r0, r6
 8006e46:	bd70      	pop	{r4, r5, r6, pc}
        encoded_len = fec_encode(encoded_packet, packet->length);
 8006e48:	89a9      	ldrh	r1, [r5, #12]
 8006e4a:	0020      	movs	r0, r4
 8006e4c:	f007 fb62 	bl	800e514 <fec_encode>
 8006e50:	0006      	movs	r6, r0
 8006e52:	e7f3      	b.n	8006e3c <encode_packet+0x20>
 8006e54:	2000055c 	.word	0x2000055c

08006e58 <packet_header_received>:
{
 8006e58:	b570      	push	{r4, r5, r6, lr}
 8006e5a:	0005      	movs	r5, r0
    assert(len == 4);
 8006e5c:	2904      	cmp	r1, #4
 8006e5e:	d115      	bne.n	8006e8c <packet_header_received+0x34>
    pn9_encode(data, len);
 8006e60:	b28c      	uxth	r4, r1
 8006e62:	0021      	movs	r1, r4
 8006e64:	f008 f94a 	bl	800f0fc <pn9_encode>
    if (current_channel_id.channel_header.ch_coding == PHY_CODING_FEC_PN9)
 8006e68:	4b11      	ldr	r3, [pc, #68]	; (8006eb0 <packet_header_received+0x58>)
 8006e6a:	781a      	ldrb	r2, [r3, #0]
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	4013      	ands	r3, r2
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d012      	beq.n	8006e9a <packet_header_received+0x42>
        packet_len = data[0] + 1 ;
 8006e74:	7828      	ldrb	r0, [r5, #0]
 8006e76:	3001      	adds	r0, #1
    if((packet_len > MODULE_D7AP_RAW_PACKET_SIZE) || (packet_len < 4))
 8006e78:	1f03      	subs	r3, r0, #4
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	22fe      	movs	r2, #254	; 0xfe
 8006e7e:	0052      	lsls	r2, r2, #1
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d900      	bls.n	8006e86 <packet_header_received+0x2e>
        packet_len = 0;
 8006e84:	2000      	movs	r0, #0
    hw_radio_set_payload_length(packet_len);
 8006e86:	f006 f99d 	bl	800d1c4 <hw_radio_set_payload_length>
}
 8006e8a:	bd70      	pop	{r4, r5, r6, pc}
    assert(len == 4);
 8006e8c:	215e      	movs	r1, #94	; 0x5e
 8006e8e:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <packet_header_received+0x5c>)
 8006e90:	4a09      	ldr	r2, [pc, #36]	; (8006eb8 <packet_header_received+0x60>)
 8006e92:	31ff      	adds	r1, #255	; 0xff
 8006e94:	4809      	ldr	r0, [pc, #36]	; (8006ebc <packet_header_received+0x64>)
 8006e96:	f001 fbb3 	bl	8008600 <__assert_func>
        fec_decode_packet(data, len, len);
 8006e9a:	0022      	movs	r2, r4
 8006e9c:	0021      	movs	r1, r4
 8006e9e:	0028      	movs	r0, r5
 8006ea0:	f007 fbf2 	bl	800e688 <fec_decode_packet>
        packet_len = fec_calculated_decoded_length(data[0] + 1);
 8006ea4:	7828      	ldrb	r0, [r5, #0]
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	f007 fb2c 	bl	800e504 <fec_calculated_decoded_length>
 8006eac:	e7e4      	b.n	8006e78 <packet_header_received+0x20>
 8006eae:	46c0      	nop			; (mov r8, r8)
 8006eb0:	2000055c 	.word	0x2000055c
 8006eb4:	08019330 	.word	0x08019330
 8006eb8:	08019430 	.word	0x08019430
 8006ebc:	0801933c 	.word	0x0801933c

08006ec0 <release_packet>:
{
 8006ec0:	b510      	push	{r4, lr}
    packet_queue_free_packet(packet_queue_find_packet(hw_radio_packet));
 8006ec2:	f7fe faab 	bl	800541c <packet_queue_find_packet>
 8006ec6:	f7fe fa77 	bl	80053b8 <packet_queue_free_packet>
}
 8006eca:	bd10      	pop	{r4, pc}

08006ecc <alloc_new_packet>:
{
 8006ecc:	b510      	push	{r4, lr}
    packet_t* allocated_packet = packet_queue_alloc_packet();
 8006ece:	f7fe fa59 	bl	8005384 <packet_queue_alloc_packet>
    return allocated_packet == NULL ? NULL : &allocated_packet->hw_radio_packet;
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d001      	beq.n	8006eda <alloc_new_packet+0xe>
 8006ed6:	3029      	adds	r0, #41	; 0x29
 8006ed8:	30ff      	adds	r0, #255	; 0xff
}
 8006eda:	bd10      	pop	{r4, pc}

08006edc <configure_syncword>:
{
 8006edc:	b510      	push	{r4, lr}
    current_syncword_class = syncword_class;
 8006ede:	4b08      	ldr	r3, [pc, #32]	; (8006f00 <configure_syncword+0x24>)
 8006ee0:	7018      	strb	r0, [r3, #0]
    current_syncword = sync_word_value[syncword_class][channel->channel_header.ch_coding ];
 8006ee2:	780b      	ldrb	r3, [r1, #0]
 8006ee4:	079b      	lsls	r3, r3, #30
 8006ee6:	0f9b      	lsrs	r3, r3, #30
 8006ee8:	0080      	lsls	r0, r0, #2
 8006eea:	18c0      	adds	r0, r0, r3
 8006eec:	0040      	lsls	r0, r0, #1
 8006eee:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <configure_syncword+0x28>)
 8006ef0:	5ac3      	ldrh	r3, [r0, r3]
 8006ef2:	4805      	ldr	r0, [pc, #20]	; (8006f08 <configure_syncword+0x2c>)
 8006ef4:	8003      	strh	r3, [r0, #0]
    hw_radio_set_sync_word((uint8_t *)&current_syncword, sizeof(uint16_t));
 8006ef6:	2102      	movs	r1, #2
 8006ef8:	f005 fc88 	bl	800c80c <hw_radio_set_sync_word>
}
 8006efc:	bd10      	pop	{r4, pc}
 8006efe:	46c0      	nop			; (mov r8, r8)
 8006f00:	2000288a 	.word	0x2000288a
 8006f04:	08019494 	.word	0x08019494
 8006f08:	20002888 	.word	0x20002888

08006f0c <configure_eirp>:
{
 8006f0c:	b510      	push	{r4, lr}
    eirp -= gain_offset;
 8006f0e:	4b03      	ldr	r3, [pc, #12]	; (8006f1c <configure_eirp+0x10>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	1ac0      	subs	r0, r0, r3
 8006f14:	b240      	sxtb	r0, r0
    hw_radio_set_tx_power(eirp);
 8006f16:	f005 fd17 	bl	800c948 <hw_radio_set_tx_power>
}
 8006f1a:	bd10      	pop	{r4, pc}
 8006f1c:	20002aa8 	.word	0x20002aa8

08006f20 <phy_switch_to_standby_mode>:
{
 8006f20:	b510      	push	{r4, lr}
    hw_radio_set_opmode(HW_STATE_STANDBY);
 8006f22:	2006      	movs	r0, #6
 8006f24:	f006 f9bc 	bl	800d2a0 <hw_radio_set_opmode>
    state = STATE_IDLE;
 8006f28:	4b01      	ldr	r3, [pc, #4]	; (8006f30 <phy_switch_to_standby_mode+0x10>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	701a      	strb	r2, [r3, #0]
}
 8006f2e:	bd10      	pop	{r4, pc}
 8006f30:	20002af8 	.word	0x20002af8

08006f34 <packet_transmitted>:
{
 8006f34:	b570      	push	{r4, r5, r6, lr}
    assert(state == STATE_TX || state == STATE_CONT_TX);
 8006f36:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <packet_transmitted+0x34>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d001      	beq.n	8006f42 <packet_transmitted+0xe>
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	d10b      	bne.n	8006f5a <packet_transmitted+0x26>
    current_packet->tx_meta.timestamp = timestamp;
 8006f42:	4c0a      	ldr	r4, [pc, #40]	; (8006f6c <packet_transmitted+0x38>)
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	6018      	str	r0, [r3, #0]
    phy_switch_to_standby_mode();
 8006f48:	f7ff ffea 	bl	8006f20 <phy_switch_to_standby_mode>
    transmitted_callback(packet_queue_find_packet(current_packet));
 8006f4c:	4b08      	ldr	r3, [pc, #32]	; (8006f70 <packet_transmitted+0x3c>)
 8006f4e:	681d      	ldr	r5, [r3, #0]
 8006f50:	6820      	ldr	r0, [r4, #0]
 8006f52:	f7fe fa63 	bl	800541c <packet_queue_find_packet>
 8006f56:	47a8      	blx	r5
}
 8006f58:	bd70      	pop	{r4, r5, r6, pc}
    assert(state == STATE_TX || state == STATE_CONT_TX);
 8006f5a:	211e      	movs	r1, #30
 8006f5c:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <packet_transmitted+0x40>)
 8006f5e:	4a06      	ldr	r2, [pc, #24]	; (8006f78 <packet_transmitted+0x44>)
 8006f60:	31ff      	adds	r1, #255	; 0xff
 8006f62:	4806      	ldr	r0, [pc, #24]	; (8006f7c <packet_transmitted+0x48>)
 8006f64:	f001 fb4c 	bl	8008600 <__assert_func>
 8006f68:	20002af8 	.word	0x20002af8
 8006f6c:	20002884 	.word	0x20002884
 8006f70:	20002b04 	.word	0x20002b04
 8006f74:	08019370 	.word	0x08019370
 8006f78:	0801940c 	.word	0x0801940c
 8006f7c:	0801933c 	.word	0x0801933c

08006f80 <packet_received>:
{
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	0004      	movs	r4, r0
    assert(state == STATE_RX || state == STATE_BG_SCAN);
 8006f84:	4b26      	ldr	r3, [pc, #152]	; (8007020 <packet_received+0xa0>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	3b02      	subs	r3, #2
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d833      	bhi.n	8006ff8 <packet_received+0x78>
    packet_t* packet = packet_queue_find_packet(hw_radio_packet);
 8006f90:	f7fe fa44 	bl	800541c <packet_queue_find_packet>
 8006f94:	0005      	movs	r5, r0
    pn9_encode(hw_radio_packet->data, hw_radio_packet->length);
 8006f96:	0026      	movs	r6, r4
 8006f98:	360e      	adds	r6, #14
 8006f9a:	89a1      	ldrh	r1, [r4, #12]
 8006f9c:	0030      	movs	r0, r6
 8006f9e:	f008 f8ad 	bl	800f0fc <pn9_encode>
    if (current_channel_id.channel_header.ch_coding == PHY_CODING_FEC_PN9)
 8006fa2:	4b20      	ldr	r3, [pc, #128]	; (8007024 <packet_received+0xa4>)
 8006fa4:	781a      	ldrb	r2, [r3, #0]
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	4013      	ands	r3, r2
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d02b      	beq.n	8007006 <packet_received+0x86>
    if (current_syncword_class == PHY_SYNCWORD_CLASS0)
 8006fae:	4b1e      	ldr	r3, [pc, #120]	; (8007028 <packet_received+0xa8>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d12d      	bne.n	8007012 <packet_received+0x92>
        packet->type = BACKGROUND_ADV;
 8006fb6:	222c      	movs	r2, #44	; 0x2c
 8006fb8:	2105      	movs	r1, #5
 8006fba:	54a9      	strb	r1, [r5, r2]
        hw_radio_packet->length = BACKGROUND_FRAME_LENGTH;
 8006fbc:	3a26      	subs	r2, #38	; 0x26
 8006fbe:	81a2      	strh	r2, [r4, #12]
    if(packet->type != BACKGROUND_ADV)
 8006fc0:	222c      	movs	r2, #44	; 0x2c
 8006fc2:	5caa      	ldrb	r2, [r5, r2]
 8006fc4:	2a05      	cmp	r2, #5
 8006fc6:	d003      	beq.n	8006fd0 <packet_received+0x50>
        total_succeeded_fg++;
 8006fc8:	4918      	ldr	r1, [pc, #96]	; (800702c <packet_received+0xac>)
 8006fca:	880a      	ldrh	r2, [r1, #0]
 8006fcc:	3201      	adds	r2, #1
 8006fce:	800a      	strh	r2, [r1, #0]
    packet->phy_config.rx.syncword_class = current_syncword_class;
 8006fd0:	2226      	movs	r2, #38	; 0x26
 8006fd2:	32ff      	adds	r2, #255	; 0xff
 8006fd4:	54ab      	strb	r3, [r5, r2]
    memcpy(&(packet->phy_config.rx.channel_id), &current_channel_id, sizeof(channel_id_t));
 8006fd6:	3a23      	subs	r2, #35	; 0x23
 8006fd8:	3aff      	subs	r2, #255	; 0xff
 8006fda:	4912      	ldr	r1, [pc, #72]	; (8007024 <packet_received+0xa4>)
 8006fdc:	0028      	movs	r0, r5
 8006fde:	3023      	adds	r0, #35	; 0x23
 8006fe0:	30ff      	adds	r0, #255	; 0xff
 8006fe2:	f00d fef5 	bl	8014dd0 <memcpy>
    if (state == STATE_BG_SCAN)
 8006fe6:	4b0e      	ldr	r3, [pc, #56]	; (8007020 <packet_received+0xa0>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d015      	beq.n	800701a <packet_received+0x9a>
    received_callback(packet);
 8006fee:	4b10      	ldr	r3, [pc, #64]	; (8007030 <packet_received+0xb0>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	0028      	movs	r0, r5
 8006ff4:	4798      	blx	r3
}
 8006ff6:	bd70      	pop	{r4, r5, r6, pc}
    assert(state == STATE_RX || state == STATE_BG_SCAN);
 8006ff8:	212a      	movs	r1, #42	; 0x2a
 8006ffa:	4b0e      	ldr	r3, [pc, #56]	; (8007034 <packet_received+0xb4>)
 8006ffc:	4a0e      	ldr	r2, [pc, #56]	; (8007038 <packet_received+0xb8>)
 8006ffe:	31ff      	adds	r1, #255	; 0xff
 8007000:	480e      	ldr	r0, [pc, #56]	; (800703c <packet_received+0xbc>)
 8007002:	f001 fafd 	bl	8008600 <__assert_func>
        fec_decode_packet(hw_radio_packet->data, hw_radio_packet->length, hw_radio_packet->length);
 8007006:	89a1      	ldrh	r1, [r4, #12]
 8007008:	000a      	movs	r2, r1
 800700a:	0030      	movs	r0, r6
 800700c:	f007 fb3c 	bl	800e688 <fec_decode_packet>
 8007010:	e7cd      	b.n	8006fae <packet_received+0x2e>
        hw_radio_packet->length = hw_radio_packet->data[0] + 1;
 8007012:	7ba2      	ldrb	r2, [r4, #14]
 8007014:	3201      	adds	r2, #1
 8007016:	81a2      	strh	r2, [r4, #12]
 8007018:	e7d2      	b.n	8006fc0 <packet_received+0x40>
        phy_switch_to_standby_mode();
 800701a:	f7ff ff81 	bl	8006f20 <phy_switch_to_standby_mode>
 800701e:	e7e6      	b.n	8006fee <packet_received+0x6e>
 8007020:	20002af8 	.word	0x20002af8
 8007024:	2000055c 	.word	0x2000055c
 8007028:	2000288a 	.word	0x2000288a
 800702c:	20002b00 	.word	0x20002b00
 8007030:	20002ae8 	.word	0x20002ae8
 8007034:	0801939c 	.word	0x0801939c
 8007038:	08019420 	.word	0x08019420
 800703c:	0801933c 	.word	0x0801933c

08007040 <phy_switch_to_sleep_mode>:
{
 8007040:	b510      	push	{r4, lr}
    hw_radio_set_idle();
 8007042:	f006 f973 	bl	800d32c <hw_radio_set_idle>
    state = STATE_IDLE;
 8007046:	4b02      	ldr	r3, [pc, #8]	; (8007050 <phy_switch_to_sleep_mode+0x10>)
 8007048:	2200      	movs	r2, #0
 800704a:	701a      	strb	r2, [r3, #0]
}
 800704c:	bd10      	pop	{r4, pc}
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	20002af8 	.word	0x20002af8

08007054 <phy_radio_channel_ids_equal>:
    return (a->channel_header_raw == b->channel_header_raw) && (a->center_freq_index == b->center_freq_index);
 8007054:	7802      	ldrb	r2, [r0, #0]
 8007056:	780b      	ldrb	r3, [r1, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d001      	beq.n	8007060 <phy_radio_channel_ids_equal+0xc>
 800705c:	2000      	movs	r0, #0
}
 800705e:	4770      	bx	lr
    return (a->channel_header_raw == b->channel_header_raw) && (a->center_freq_index == b->center_freq_index);
 8007060:	7843      	ldrb	r3, [r0, #1]
 8007062:	7882      	ldrb	r2, [r0, #2]
 8007064:	0212      	lsls	r2, r2, #8
 8007066:	431a      	orrs	r2, r3
 8007068:	7848      	ldrb	r0, [r1, #1]
 800706a:	788b      	ldrb	r3, [r1, #2]
 800706c:	021b      	lsls	r3, r3, #8
 800706e:	4303      	orrs	r3, r0
 8007070:	429a      	cmp	r2, r3
 8007072:	d001      	beq.n	8007078 <phy_radio_channel_ids_equal+0x24>
 8007074:	2000      	movs	r0, #0
 8007076:	e7f2      	b.n	800705e <phy_radio_channel_ids_equal+0xa>
 8007078:	2001      	movs	r0, #1
 800707a:	e7f0      	b.n	800705e <phy_radio_channel_ids_equal+0xa>

0800707c <configure_channel>:
static void configure_channel(const channel_id_t* channel) {
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	0004      	movs	r4, r0
    if(phy_radio_channel_ids_equal(&current_channel_id, channel) && !fact_settings_changed) {
 8007080:	0001      	movs	r1, r0
 8007082:	4856      	ldr	r0, [pc, #344]	; (80071dc <configure_channel+0x160>)
 8007084:	f7ff ffe6 	bl	8007054 <phy_radio_channel_ids_equal>
 8007088:	2800      	cmp	r0, #0
 800708a:	d003      	beq.n	8007094 <configure_channel+0x18>
 800708c:	4b54      	ldr	r3, [pc, #336]	; (80071e0 <configure_channel+0x164>)
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d035      	beq.n	8007100 <configure_channel+0x84>
    fact_settings_changed = false;
 8007094:	4b52      	ldr	r3, [pc, #328]	; (80071e0 <configure_channel+0x164>)
 8007096:	2200      	movs	r2, #0
 8007098:	701a      	strb	r2, [r3, #0]
    hw_radio_switch_longRangeMode(channel->channel_header.ch_class == PHY_CLASS_LORA);
 800709a:	7820      	ldrb	r0, [r4, #0]
 800709c:	250c      	movs	r5, #12
 800709e:	4028      	ands	r0, r5
 80070a0:	3804      	subs	r0, #4
 80070a2:	4243      	negs	r3, r0
 80070a4:	4158      	adcs	r0, r3
 80070a6:	b2c0      	uxtb	r0, r0
 80070a8:	f006 f8ae 	bl	800d208 <hw_radio_switch_longRangeMode>
    if(channel->channel_header.ch_class == PHY_CLASS_LO_RATE)
 80070ac:	7823      	ldrb	r3, [r4, #0]
 80070ae:	002a      	movs	r2, r5
 80070b0:	401a      	ands	r2, r3
 80070b2:	421d      	tst	r5, r3
 80070b4:	d025      	beq.n	8007102 <configure_channel+0x86>
    else if(channel->channel_header.ch_class == PHY_CLASS_NORMAL_RATE)
 80070b6:	2a08      	cmp	r2, #8
 80070b8:	d043      	beq.n	8007142 <configure_channel+0xc6>
    else if(channel->channel_header.ch_class == PHY_CLASS_HI_RATE)
 80070ba:	2a0c      	cmp	r2, #12
 80070bc:	d061      	beq.n	8007182 <configure_channel+0x106>
    else if(channel->channel_header.ch_class == PHY_CLASS_LORA)
 80070be:	2a04      	cmp	r2, #4
 80070c0:	d100      	bne.n	80070c4 <configure_channel+0x48>
 80070c2:	e07e      	b.n	80071c2 <configure_channel+0x146>
    if(channel->channel_header.ch_freq_band == PHY_BAND_868)
 80070c4:	7822      	ldrb	r2, [r4, #0]
 80070c6:	2370      	movs	r3, #112	; 0x70
 80070c8:	4013      	ands	r3, r2
 80070ca:	2b30      	cmp	r3, #48	; 0x30
 80070cc:	d100      	bne.n	80070d0 <configure_channel+0x54>
 80070ce:	e07f      	b.n	80071d0 <configure_channel+0x154>
    else if(channel->channel_header.ch_freq_band == PHY_BAND_915)
 80070d0:	2b40      	cmp	r3, #64	; 0x40
 80070d2:	d100      	bne.n	80070d6 <configure_channel+0x5a>
 80070d4:	e07e      	b.n	80071d4 <configure_channel+0x158>
    uint32_t center_freq = 433.06e6;
 80070d6:	4943      	ldr	r1, [pc, #268]	; (80071e4 <configure_channel+0x168>)
    if(channel->channel_header.ch_class == PHY_CLASS_LO_RATE)
 80070d8:	230c      	movs	r3, #12
 80070da:	4213      	tst	r3, r2
 80070dc:	d100      	bne.n	80070e0 <configure_channel+0x64>
 80070de:	e07b      	b.n	80071d8 <configure_channel+0x15c>
    uint32_t channel_spacing_half = 100e3;
 80070e0:	4a41      	ldr	r2, [pc, #260]	; (80071e8 <configure_channel+0x16c>)
    center_freq += 25000 * channel->center_freq_index + channel_spacing_half;
 80070e2:	7860      	ldrb	r0, [r4, #1]
 80070e4:	78a3      	ldrb	r3, [r4, #2]
 80070e6:	021b      	lsls	r3, r3, #8
 80070e8:	4303      	orrs	r3, r0
 80070ea:	4840      	ldr	r0, [pc, #256]	; (80071ec <configure_channel+0x170>)
 80070ec:	4358      	muls	r0, r3
 80070ee:	1880      	adds	r0, r0, r2
 80070f0:	1840      	adds	r0, r0, r1
    hw_radio_set_center_freq(center_freq);
 80070f2:	f005 fbb5 	bl	800c860 <hw_radio_set_center_freq>
    current_channel_id = *channel;
 80070f6:	2203      	movs	r2, #3
 80070f8:	0021      	movs	r1, r4
 80070fa:	4838      	ldr	r0, [pc, #224]	; (80071dc <configure_channel+0x160>)
 80070fc:	f00d fe68 	bl	8014dd0 <memcpy>
}
 8007100:	bd70      	pop	{r4, r5, r6, pc}
        hw_radio_set_bitrate(bitrate_lo_rate);
 8007102:	4b3b      	ldr	r3, [pc, #236]	; (80071f0 <configure_channel+0x174>)
 8007104:	6818      	ldr	r0, [r3, #0]
 8007106:	f005 fb5f 	bl	800c7c8 <hw_radio_set_bitrate>
        if(channel->channel_header.ch_coding != PHY_CODING_CW)
 800710a:	7822      	ldrb	r2, [r4, #0]
 800710c:	2303      	movs	r3, #3
 800710e:	4013      	ands	r3, r2
 8007110:	2b03      	cmp	r3, #3
 8007112:	d012      	beq.n	800713a <configure_channel+0xbe>
            hw_radio_set_tx_fdev(fdev_lo_rate);
 8007114:	4b37      	ldr	r3, [pc, #220]	; (80071f4 <configure_channel+0x178>)
 8007116:	6818      	ldr	r0, [r3, #0]
 8007118:	f005 fb62 	bl	800c7e0 <hw_radio_set_tx_fdev>
        hw_radio_set_rx_bw_hz(rx_bw_lo_rate);
 800711c:	4b36      	ldr	r3, [pc, #216]	; (80071f8 <configure_channel+0x17c>)
 800711e:	6818      	ldr	r0, [r3, #0]
 8007120:	f005 fbbe 	bl	800c8a0 <hw_radio_set_rx_bw_hz>
        hw_radio_set_preamble_size(preamble_size_lo_rate);
 8007124:	4b35      	ldr	r3, [pc, #212]	; (80071fc <configure_channel+0x180>)
 8007126:	7818      	ldrb	r0, [r3, #0]
 8007128:	f005 fb6a 	bl	800c800 <hw_radio_set_preamble_size>
        hw_radio_set_preamble_detector(preamble_detector_size_lo_rate, preamble_tol_lo_rate);
 800712c:	4b34      	ldr	r3, [pc, #208]	; (8007200 <configure_channel+0x184>)
 800712e:	7819      	ldrb	r1, [r3, #0]
 8007130:	4b34      	ldr	r3, [pc, #208]	; (8007204 <configure_channel+0x188>)
 8007132:	7818      	ldrb	r0, [r3, #0]
 8007134:	f005 fb77 	bl	800c826 <hw_radio_set_preamble_detector>
 8007138:	e7c4      	b.n	80070c4 <configure_channel+0x48>
            hw_radio_set_tx_fdev(0);
 800713a:	2000      	movs	r0, #0
 800713c:	f005 fb50 	bl	800c7e0 <hw_radio_set_tx_fdev>
 8007140:	e7ec      	b.n	800711c <configure_channel+0xa0>
        hw_radio_set_bitrate(bitrate_normal_rate);
 8007142:	4b31      	ldr	r3, [pc, #196]	; (8007208 <configure_channel+0x18c>)
 8007144:	6818      	ldr	r0, [r3, #0]
 8007146:	f005 fb3f 	bl	800c7c8 <hw_radio_set_bitrate>
        if(channel->channel_header.ch_coding != PHY_CODING_CW)
 800714a:	7822      	ldrb	r2, [r4, #0]
 800714c:	2303      	movs	r3, #3
 800714e:	4013      	ands	r3, r2
 8007150:	2b03      	cmp	r3, #3
 8007152:	d012      	beq.n	800717a <configure_channel+0xfe>
            hw_radio_set_tx_fdev(fdev_normal_rate);
 8007154:	4b2d      	ldr	r3, [pc, #180]	; (800720c <configure_channel+0x190>)
 8007156:	6818      	ldr	r0, [r3, #0]
 8007158:	f005 fb42 	bl	800c7e0 <hw_radio_set_tx_fdev>
        hw_radio_set_rx_bw_hz(rx_bw_normal_rate);
 800715c:	4b2c      	ldr	r3, [pc, #176]	; (8007210 <configure_channel+0x194>)
 800715e:	6818      	ldr	r0, [r3, #0]
 8007160:	f005 fb9e 	bl	800c8a0 <hw_radio_set_rx_bw_hz>
        hw_radio_set_preamble_size(preamble_size_normal_rate);
 8007164:	4b2b      	ldr	r3, [pc, #172]	; (8007214 <configure_channel+0x198>)
 8007166:	7818      	ldrb	r0, [r3, #0]
 8007168:	f005 fb4a 	bl	800c800 <hw_radio_set_preamble_size>
        hw_radio_set_preamble_detector(preamble_detector_size_normal_rate, preamble_tol_normal_rate);
 800716c:	4b2a      	ldr	r3, [pc, #168]	; (8007218 <configure_channel+0x19c>)
 800716e:	7819      	ldrb	r1, [r3, #0]
 8007170:	4b2a      	ldr	r3, [pc, #168]	; (800721c <configure_channel+0x1a0>)
 8007172:	7818      	ldrb	r0, [r3, #0]
 8007174:	f005 fb57 	bl	800c826 <hw_radio_set_preamble_detector>
 8007178:	e7a4      	b.n	80070c4 <configure_channel+0x48>
            hw_radio_set_tx_fdev(0);
 800717a:	2000      	movs	r0, #0
 800717c:	f005 fb30 	bl	800c7e0 <hw_radio_set_tx_fdev>
 8007180:	e7ec      	b.n	800715c <configure_channel+0xe0>
        hw_radio_set_bitrate(bitrate_hi_rate);
 8007182:	4b27      	ldr	r3, [pc, #156]	; (8007220 <configure_channel+0x1a4>)
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	f005 fb1f 	bl	800c7c8 <hw_radio_set_bitrate>
        if(channel->channel_header.ch_coding != PHY_CODING_CW)
 800718a:	7822      	ldrb	r2, [r4, #0]
 800718c:	2303      	movs	r3, #3
 800718e:	4013      	ands	r3, r2
 8007190:	2b03      	cmp	r3, #3
 8007192:	d012      	beq.n	80071ba <configure_channel+0x13e>
            hw_radio_set_tx_fdev(fdev_hi_rate);
 8007194:	4b23      	ldr	r3, [pc, #140]	; (8007224 <configure_channel+0x1a8>)
 8007196:	6818      	ldr	r0, [r3, #0]
 8007198:	f005 fb22 	bl	800c7e0 <hw_radio_set_tx_fdev>
        hw_radio_set_rx_bw_hz(rx_bw_hi_rate);
 800719c:	4b22      	ldr	r3, [pc, #136]	; (8007228 <configure_channel+0x1ac>)
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	f005 fb7e 	bl	800c8a0 <hw_radio_set_rx_bw_hz>
        hw_radio_set_preamble_size(preamble_size_hi_rate);
 80071a4:	4b21      	ldr	r3, [pc, #132]	; (800722c <configure_channel+0x1b0>)
 80071a6:	7818      	ldrb	r0, [r3, #0]
 80071a8:	f005 fb2a 	bl	800c800 <hw_radio_set_preamble_size>
        hw_radio_set_preamble_detector(preamble_detector_size_hi_rate, preamble_tol_hi_rate);
 80071ac:	4b20      	ldr	r3, [pc, #128]	; (8007230 <configure_channel+0x1b4>)
 80071ae:	7819      	ldrb	r1, [r3, #0]
 80071b0:	4b20      	ldr	r3, [pc, #128]	; (8007234 <configure_channel+0x1b8>)
 80071b2:	7818      	ldrb	r0, [r3, #0]
 80071b4:	f005 fb37 	bl	800c826 <hw_radio_set_preamble_detector>
 80071b8:	e784      	b.n	80070c4 <configure_channel+0x48>
            hw_radio_set_tx_fdev(0);
 80071ba:	2000      	movs	r0, #0
 80071bc:	f005 fb10 	bl	800c7e0 <hw_radio_set_tx_fdev>
 80071c0:	e7ec      	b.n	800719c <configure_channel+0x120>
        hw_radio_set_lora_mode(lora_bw, lora_SF);
 80071c2:	4b1d      	ldr	r3, [pc, #116]	; (8007238 <configure_channel+0x1bc>)
 80071c4:	7819      	ldrb	r1, [r3, #0]
 80071c6:	4b1d      	ldr	r3, [pc, #116]	; (800723c <configure_channel+0x1c0>)
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	f006 fba1 	bl	800d910 <hw_radio_set_lora_mode>
 80071ce:	e779      	b.n	80070c4 <configure_channel+0x48>
        center_freq = 863e6;
 80071d0:	491b      	ldr	r1, [pc, #108]	; (8007240 <configure_channel+0x1c4>)
 80071d2:	e781      	b.n	80070d8 <configure_channel+0x5c>
        center_freq = 902e6;
 80071d4:	491b      	ldr	r1, [pc, #108]	; (8007244 <configure_channel+0x1c8>)
 80071d6:	e77f      	b.n	80070d8 <configure_channel+0x5c>
        channel_spacing_half = 12500;
 80071d8:	4a1b      	ldr	r2, [pc, #108]	; (8007248 <configure_channel+0x1cc>)
 80071da:	e782      	b.n	80070e2 <configure_channel+0x66>
 80071dc:	2000055c 	.word	0x2000055c
 80071e0:	2000288b 	.word	0x2000288b
 80071e4:	19cff8a0 	.word	0x19cff8a0
 80071e8:	000186a0 	.word	0x000186a0
 80071ec:	000061a8 	.word	0x000061a8
 80071f0:	20002868 	.word	0x20002868
 80071f4:	20002890 	.word	0x20002890
 80071f8:	20002af0 	.word	0x20002af0
 80071fc:	20002ae0 	.word	0x20002ae0
 8007200:	20002ae3 	.word	0x20002ae3
 8007204:	20002add 	.word	0x20002add
 8007208:	2000286c 	.word	0x2000286c
 800720c:	20002894 	.word	0x20002894
 8007210:	20002af4 	.word	0x20002af4
 8007214:	20002ae1 	.word	0x20002ae1
 8007218:	20002ae4 	.word	0x20002ae4
 800721c:	20002ade 	.word	0x20002ade
 8007220:	20002864 	.word	0x20002864
 8007224:	2000288c 	.word	0x2000288c
 8007228:	20002aec 	.word	0x20002aec
 800722c:	20002adf 	.word	0x20002adf
 8007230:	20002ae2 	.word	0x20002ae2
 8007234:	20002adc 	.word	0x20002adc
 8007238:	20002ad4 	.word	0x20002ad4
 800723c:	20002ad8 	.word	0x20002ad8
 8007240:	337055c0 	.word	0x337055c0
 8007244:	35c36d80 	.word	0x35c36d80
 8007248:	000030d4 	.word	0x000030d4

0800724c <phy_calculate_tx_duration>:
{
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	0004      	movs	r4, r0
 8007250:	0010      	movs	r0, r2
 8007252:	001d      	movs	r5, r3
    if (ch_coding == PHY_CODING_FEC_PN9)
 8007254:	2902      	cmp	r1, #2
 8007256:	d01d      	beq.n	8007294 <phy_calculate_tx_duration+0x48>
    if(!payload_only)
 8007258:	2d00      	cmp	r5, #0
 800725a:	d101      	bne.n	8007260 <phy_calculate_tx_duration+0x14>
      packet_length += sizeof(uint16_t); // Sync word
 800725c:	3002      	adds	r0, #2
 800725e:	b280      	uxth	r0, r0
    if(channel_class == PHY_CLASS_LORA) {
 8007260:	2c01      	cmp	r4, #1
 8007262:	d01a      	beq.n	800729a <phy_calculate_tx_duration+0x4e>
    switch (channel_class)
 8007264:	2c02      	cmp	r4, #2
 8007266:	d044      	beq.n	80072f2 <phy_calculate_tx_duration+0xa6>
 8007268:	2c03      	cmp	r4, #3
 800726a:	d04b      	beq.n	8007304 <phy_calculate_tx_duration+0xb8>
 800726c:	2c00      	cmp	r4, #0
 800726e:	d037      	beq.n	80072e0 <phy_calculate_tx_duration+0x94>
 8007270:	2400      	movs	r4, #0
 8007272:	4d2d      	ldr	r5, [pc, #180]	; (8007328 <phy_calculate_tx_duration+0xdc>)
    return ceil(packet_length / data_rate) + 1;
 8007274:	f00d fa94 	bl	80147a0 <__aeabi_i2d>
 8007278:	0022      	movs	r2, r4
 800727a:	002b      	movs	r3, r5
 800727c:	f00c f838 	bl	80132f0 <__aeabi_ddiv>
 8007280:	f00a f9e0 	bl	8011644 <ceil>
 8007284:	2200      	movs	r2, #0
 8007286:	4b29      	ldr	r3, [pc, #164]	; (800732c <phy_calculate_tx_duration+0xe0>)
 8007288:	f00b fcc8 	bl	8012c1c <__aeabi_dadd>
 800728c:	f00a fe8e 	bl	8011fac <__aeabi_d2uiz>
 8007290:	b280      	uxth	r0, r0
}
 8007292:	bd70      	pop	{r4, r5, r6, pc}
        packet_length = fec_calculated_decoded_length(packet_length);
 8007294:	f007 f936 	bl	800e504 <fec_calculated_decoded_length>
 8007298:	e7de      	b.n	8007258 <phy_calculate_tx_duration+0xc>
        uint16_t payload_symbols = 8 + ceil(2*(packet_length+1)/9)*5;
 800729a:	3001      	adds	r0, #1
 800729c:	0040      	lsls	r0, r0, #1
 800729e:	2109      	movs	r1, #9
 80072a0:	f00a fcc0 	bl	8011c24 <__divsi3>
 80072a4:	f00d fa7c 	bl	80147a0 <__aeabi_i2d>
 80072a8:	f00a f9cc 	bl	8011644 <ceil>
 80072ac:	2200      	movs	r2, #0
 80072ae:	4b20      	ldr	r3, [pc, #128]	; (8007330 <phy_calculate_tx_duration+0xe4>)
 80072b0:	f00c fc24 	bl	8013afc <__aeabi_dmul>
 80072b4:	2200      	movs	r2, #0
 80072b6:	4b1f      	ldr	r3, [pc, #124]	; (8007334 <phy_calculate_tx_duration+0xe8>)
 80072b8:	f00b fcb0 	bl	8012c1c <__aeabi_dadd>
 80072bc:	f00a fe76 	bl	8011fac <__aeabi_d2uiz>
 80072c0:	b284      	uxth	r4, r0
        uint16_t lora_duration = ((1 << lora_SF) * 1000) / lora_bw;
 80072c2:	4b1d      	ldr	r3, [pc, #116]	; (8007338 <phy_calculate_tx_duration+0xec>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	20fa      	movs	r0, #250	; 0xfa
 80072c8:	0080      	lsls	r0, r0, #2
 80072ca:	4098      	lsls	r0, r3
 80072cc:	4b1b      	ldr	r3, [pc, #108]	; (800733c <phy_calculate_tx_duration+0xf0>)
 80072ce:	6819      	ldr	r1, [r3, #0]
 80072d0:	f00a fc1e 	bl	8011b10 <__udivsi3>
 80072d4:	b283      	uxth	r3, r0
        uint16_t packet_duration = lora_duration * (LORA_T_PREAMBLE_LENGTH + payload_symbols); 
 80072d6:	0020      	movs	r0, r4
 80072d8:	3008      	adds	r0, #8
 80072da:	4358      	muls	r0, r3
 80072dc:	b280      	uxth	r0, r0
        return packet_duration;
 80072de:	e7d8      	b.n	8007292 <phy_calculate_tx_duration+0x46>
        if(!payload_only)
 80072e0:	2d00      	cmp	r5, #0
 80072e2:	d118      	bne.n	8007316 <phy_calculate_tx_duration+0xca>
          packet_length += preamble_size_lo_rate;
 80072e4:	4b16      	ldr	r3, [pc, #88]	; (8007340 <phy_calculate_tx_duration+0xf4>)
 80072e6:	781a      	ldrb	r2, [r3, #0]
 80072e8:	1880      	adds	r0, r0, r2
 80072ea:	b280      	uxth	r0, r0
        data_rate = 1.2; // Lo Rate 9.6 kbps: 1.2 bytes/tick
 80072ec:	4c15      	ldr	r4, [pc, #84]	; (8007344 <phy_calculate_tx_duration+0xf8>)
 80072ee:	4d16      	ldr	r5, [pc, #88]	; (8007348 <phy_calculate_tx_duration+0xfc>)
 80072f0:	e7c0      	b.n	8007274 <phy_calculate_tx_duration+0x28>
        if(!payload_only)
 80072f2:	2d00      	cmp	r5, #0
 80072f4:	d112      	bne.n	800731c <phy_calculate_tx_duration+0xd0>
          packet_length += preamble_size_normal_rate;
 80072f6:	4b15      	ldr	r3, [pc, #84]	; (800734c <phy_calculate_tx_duration+0x100>)
 80072f8:	781a      	ldrb	r2, [r3, #0]
 80072fa:	1880      	adds	r0, r0, r2
 80072fc:	b280      	uxth	r0, r0
        data_rate = 6.9; // Normal Rate 55.555 kbps: 6.94 bytes/tick
 80072fe:	4c14      	ldr	r4, [pc, #80]	; (8007350 <phy_calculate_tx_duration+0x104>)
 8007300:	4d14      	ldr	r5, [pc, #80]	; (8007354 <phy_calculate_tx_duration+0x108>)
 8007302:	e7b7      	b.n	8007274 <phy_calculate_tx_duration+0x28>
        if(!payload_only)
 8007304:	2d00      	cmp	r5, #0
 8007306:	d10c      	bne.n	8007322 <phy_calculate_tx_duration+0xd6>
          packet_length += preamble_tol_hi_rate;
 8007308:	4b13      	ldr	r3, [pc, #76]	; (8007358 <phy_calculate_tx_duration+0x10c>)
 800730a:	781a      	ldrb	r2, [r3, #0]
 800730c:	1880      	adds	r0, r0, r2
 800730e:	b280      	uxth	r0, r0
        data_rate = 20.8; // High rate 166.667 kbps: 20.83 byte/tick
 8007310:	4c12      	ldr	r4, [pc, #72]	; (800735c <phy_calculate_tx_duration+0x110>)
 8007312:	4d13      	ldr	r5, [pc, #76]	; (8007360 <phy_calculate_tx_duration+0x114>)
 8007314:	e7ae      	b.n	8007274 <phy_calculate_tx_duration+0x28>
        data_rate = 1.2; // Lo Rate 9.6 kbps: 1.2 bytes/tick
 8007316:	4c0b      	ldr	r4, [pc, #44]	; (8007344 <phy_calculate_tx_duration+0xf8>)
 8007318:	4d0b      	ldr	r5, [pc, #44]	; (8007348 <phy_calculate_tx_duration+0xfc>)
 800731a:	e7ab      	b.n	8007274 <phy_calculate_tx_duration+0x28>
        data_rate = 6.9; // Normal Rate 55.555 kbps: 6.94 bytes/tick
 800731c:	4c0c      	ldr	r4, [pc, #48]	; (8007350 <phy_calculate_tx_duration+0x104>)
 800731e:	4d0d      	ldr	r5, [pc, #52]	; (8007354 <phy_calculate_tx_duration+0x108>)
 8007320:	e7a8      	b.n	8007274 <phy_calculate_tx_duration+0x28>
        data_rate = 20.8; // High rate 166.667 kbps: 20.83 byte/tick
 8007322:	4c0e      	ldr	r4, [pc, #56]	; (800735c <phy_calculate_tx_duration+0x110>)
 8007324:	4d0e      	ldr	r5, [pc, #56]	; (8007360 <phy_calculate_tx_duration+0x114>)
 8007326:	e7a5      	b.n	8007274 <phy_calculate_tx_duration+0x28>
 8007328:	40180000 	.word	0x40180000
 800732c:	3ff00000 	.word	0x3ff00000
 8007330:	40140000 	.word	0x40140000
 8007334:	40200000 	.word	0x40200000
 8007338:	20002ad4 	.word	0x20002ad4
 800733c:	20002ad8 	.word	0x20002ad8
 8007340:	20002ae0 	.word	0x20002ae0
 8007344:	33333333 	.word	0x33333333
 8007348:	3ff33333 	.word	0x3ff33333
 800734c:	20002ae1 	.word	0x20002ae1
 8007350:	9999999a 	.word	0x9999999a
 8007354:	401b9999 	.word	0x401b9999
 8007358:	20002ae2 	.word	0x20002ae2
 800735c:	cccccccd 	.word	0xcccccccd
 8007360:	4034cccc 	.word	0x4034cccc

08007364 <fill_in_fifo>:
    return SUCCESS;
}


static void fill_in_fifo(uint16_t remaining_bytes_len)
{
 8007364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007366:	b087      	sub	sp, #28
 8007368:	0004      	movs	r4, r0
    // FIFO. So we will need to take this into account as well.

    // TODO adapt how we calculate ETA. There is no reason to use current time for each ETA update, we can just use the BG frame duration
    // and a frame counter to determine this.

    if (fg_frame.bg_adv)
 800736a:	4a37      	ldr	r2, [pc, #220]	; (8007448 <fill_in_fifo+0xe4>)
 800736c:	4b37      	ldr	r3, [pc, #220]	; (800744c <fill_in_fifo+0xe8>)
 800736e:	5cd3      	ldrb	r3, [r2, r3]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10a      	bne.n	800738a <fill_in_fifo+0x26>
        }
    }
    else
    {
        // Disable the refill event since this is the last chunk of data to transmit
        if (state != STATE_CONT_TX) 
 8007374:	4b36      	ldr	r3, [pc, #216]	; (8007450 <fill_in_fifo+0xec>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b04      	cmp	r3, #4
 800737a:	d161      	bne.n	8007440 <fill_in_fifo+0xdc>
            hw_radio_enable_refill(false);
        DEBUG_FG_START();
        hw_radio_send_payload(fg_frame.encoded_packet, fg_frame.encoded_length);
 800737c:	4832      	ldr	r0, [pc, #200]	; (8007448 <fill_in_fifo+0xe4>)
 800737e:	8801      	ldrh	r1, [r0, #0]
 8007380:	3002      	adds	r0, #2
 8007382:	f006 f9b7 	bl	800d6f4 <hw_radio_send_payload>
    }
}
 8007386:	b007      	add	sp, #28
 8007388:	bdf0      	pop	{r4, r5, r6, r7, pc}
        timer_tick_t current = timer_get_counter_value();
 800738a:	f008 ffb9 	bl	8010300 <timer_get_counter_value>
 800738e:	0005      	movs	r5, r0
        uint16_t flush_duration = phy_calculate_tx_duration(current_channel_id.channel_header.ch_class,
 8007390:	4b30      	ldr	r3, [pc, #192]	; (8007454 <fill_in_fifo+0xf0>)
 8007392:	7818      	ldrb	r0, [r3, #0]
 8007394:	0700      	lsls	r0, r0, #28
 8007396:	0f80      	lsrs	r0, r0, #30
 8007398:	2301      	movs	r3, #1
 800739a:	0022      	movs	r2, r4
 800739c:	2100      	movs	r1, #0
 800739e:	f7ff ff55 	bl	800724c <phy_calculate_tx_duration>
 80073a2:	0002      	movs	r2, r0
        if (bg_adv.stop_time > current + 2 * bg_adv.tx_duration + flush_duration)
 80073a4:	4b2c      	ldr	r3, [pc, #176]	; (8007458 <fill_in_fifo+0xf4>)
 80073a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80073a8:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 80073aa:	0043      	lsls	r3, r0, #1
 80073ac:	195b      	adds	r3, r3, r5
 80073ae:	189b      	adds	r3, r3, r2
 80073b0:	4299      	cmp	r1, r3
 80073b2:	d912      	bls.n	80073da <fill_in_fifo+0x76>
            bg_adv.eta = (bg_adv.stop_time - current) - 2 * bg_adv.tx_duration; // ETA is updated according the real current time
 80073b4:	1b4b      	subs	r3, r1, r5
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	0042      	lsls	r2, r0, #1
 80073ba:	1a9b      	subs	r3, r3, r2
 80073bc:	4a26      	ldr	r2, [pc, #152]	; (8007458 <fill_in_fifo+0xf4>)
 80073be:	8453      	strh	r3, [r2, #34]	; 0x22
        if(bg_adv.eta)
 80073c0:	4b25      	ldr	r3, [pc, #148]	; (8007458 <fill_in_fifo+0xf4>)
 80073c2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d014      	beq.n	80073f2 <fill_in_fifo+0x8e>
            hw_radio_send_payload(bg_adv.packet, bg_adv.packet_size);
 80073c8:	4823      	ldr	r0, [pc, #140]	; (8007458 <fill_in_fifo+0xf4>)
 80073ca:	2320      	movs	r3, #32
 80073cc:	5cc1      	ldrb	r1, [r0, r3]
 80073ce:	3002      	adds	r0, #2
 80073d0:	f006 f990 	bl	800d6f4 <hw_radio_send_payload>
            assemble_background_payload();
 80073d4:	f7ff fce4 	bl	8006da0 <assemble_background_payload>
 80073d8:	e7d5      	b.n	8007386 <fill_in_fifo+0x22>
        else if(bg_adv.stop_time > current + bg_adv.tx_duration + flush_duration)
 80073da:	1943      	adds	r3, r0, r5
 80073dc:	18d2      	adds	r2, r2, r3
 80073de:	4291      	cmp	r1, r2
 80073e0:	d903      	bls.n	80073ea <fill_in_fifo+0x86>
            bg_adv.eta = 1; // Send last background frame with ETA which we calculated and assembled previous loop.
 80073e2:	4b1d      	ldr	r3, [pc, #116]	; (8007458 <fill_in_fifo+0xf4>)
 80073e4:	2201      	movs	r2, #1
 80073e6:	845a      	strh	r2, [r3, #34]	; 0x22
 80073e8:	e7ea      	b.n	80073c0 <fill_in_fifo+0x5c>
            bg_adv.eta = 0;
 80073ea:	4b1b      	ldr	r3, [pc, #108]	; (8007458 <fill_in_fifo+0xf4>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	845a      	strh	r2, [r3, #34]	; 0x22
 80073f0:	e7e6      	b.n	80073c0 <fill_in_fifo+0x5c>
            preamble_len = (bg_adv.stop_time - current) * (bg_adv.packet_size / (float)bg_adv.tx_duration); // TODO instead of current we should use the timestamp
 80073f2:	1b4d      	subs	r5, r1, r5
 80073f4:	4e18      	ldr	r6, [pc, #96]	; (8007458 <fill_in_fifo+0xf4>)
 80073f6:	2320      	movs	r3, #32
 80073f8:	5cf7      	ldrb	r7, [r6, r3]
 80073fa:	f00b fbd3 	bl	8012ba4 <__aeabi_ui2f>
 80073fe:	1c04      	adds	r4, r0, #0
 8007400:	0038      	movs	r0, r7
 8007402:	f00b fb89 	bl	8012b18 <__aeabi_i2f>
 8007406:	1c21      	adds	r1, r4, #0
 8007408:	f00a feba 	bl	8012180 <__aeabi_fdiv>
 800740c:	1c04      	adds	r4, r0, #0
 800740e:	0028      	movs	r0, r5
 8007410:	f00b fbc8 	bl	8012ba4 <__aeabi_ui2f>
 8007414:	1c21      	adds	r1, r4, #0
 8007416:	f00b f87d 	bl	8012514 <__aeabi_fmul>
 800741a:	f00a fdaf 	bl	8011f7c <__aeabi_f2uiz>
 800741e:	b284      	uxth	r4, r0
            memset(preamble, 0xAA, preamble_len);
 8007420:	0022      	movs	r2, r4
 8007422:	21aa      	movs	r1, #170	; 0xaa
 8007424:	4668      	mov	r0, sp
 8007426:	f00d fd27 	bl	8014e78 <memset>
            hw_radio_send_payload(preamble, preamble_len);
 800742a:	0021      	movs	r1, r4
 800742c:	4668      	mov	r0, sp
 800742e:	f006 f961 	bl	800d6f4 <hw_radio_send_payload>
            bg_adv.eta = 0;
 8007432:	2300      	movs	r3, #0
 8007434:	8473      	strh	r3, [r6, #34]	; 0x22
            fg_frame.bg_adv = false;
 8007436:	2100      	movs	r1, #0
 8007438:	4a03      	ldr	r2, [pc, #12]	; (8007448 <fill_in_fifo+0xe4>)
 800743a:	4b04      	ldr	r3, [pc, #16]	; (800744c <fill_in_fifo+0xe8>)
 800743c:	54d1      	strb	r1, [r2, r3]
 800743e:	e7a2      	b.n	8007386 <fill_in_fifo+0x22>
            hw_radio_enable_refill(false);
 8007440:	2000      	movs	r0, #0
 8007442:	f006 fa49 	bl	800d8d8 <hw_radio_enable_refill>
 8007446:	e799      	b.n	800737c <fill_in_fifo+0x18>
 8007448:	20002898 	.word	0x20002898
 800744c:	0000020e 	.word	0x0000020e
 8007450:	20002af8 	.word	0x20002af8
 8007454:	2000055c 	.word	0x2000055c
 8007458:	20002838 	.word	0x20002838

0800745c <phy_init>:
error_t phy_init(void) {
 800745c:	b510      	push	{r4, lr}
    state = STATE_IDLE;
 800745e:	4b18      	ldr	r3, [pc, #96]	; (80074c0 <phy_init+0x64>)
 8007460:	2200      	movs	r2, #0
 8007462:	701a      	strb	r2, [r3, #0]
    init_args.alloc_packet_cb = alloc_new_packet;
 8007464:	4817      	ldr	r0, [pc, #92]	; (80074c4 <phy_init+0x68>)
 8007466:	4b18      	ldr	r3, [pc, #96]	; (80074c8 <phy_init+0x6c>)
 8007468:	6003      	str	r3, [r0, #0]
    init_args.release_packet_cb = release_packet;
 800746a:	4b18      	ldr	r3, [pc, #96]	; (80074cc <phy_init+0x70>)
 800746c:	6043      	str	r3, [r0, #4]
    init_args.rx_packet_cb = packet_received;
 800746e:	4b18      	ldr	r3, [pc, #96]	; (80074d0 <phy_init+0x74>)
 8007470:	6083      	str	r3, [r0, #8]
    init_args.tx_packet_cb = packet_transmitted;
 8007472:	4b18      	ldr	r3, [pc, #96]	; (80074d4 <phy_init+0x78>)
 8007474:	6103      	str	r3, [r0, #16]
    init_args.rx_packet_header_cb = packet_header_received;
 8007476:	4b18      	ldr	r3, [pc, #96]	; (80074d8 <phy_init+0x7c>)
 8007478:	60c3      	str	r3, [r0, #12]
    init_args.tx_refill_cb = fill_in_fifo;
 800747a:	4b18      	ldr	r3, [pc, #96]	; (80074dc <phy_init+0x80>)
 800747c:	6143      	str	r3, [r0, #20]
    hw_radio_init(&init_args);
 800747e:	f005 ffa3 	bl	800d3c8 <hw_radio_init>
    hw_radio_set_crc_on(false);
 8007482:	2000      	movs	r0, #0
 8007484:	f005 fe8e 	bl	800d1a4 <hw_radio_set_crc_on>
    hw_radio_set_dc_free(HW_DC_FREE_NONE);
 8007488:	2000      	movs	r0, #0
 800748a:	f005 fe7c 	bl	800d186 <hw_radio_set_dc_free>
    fact_settings_file_change_callback(D7A_FILE_FACTORY_SETTINGS_FILE_ID); // trigger read
 800748e:	2001      	movs	r0, #1
 8007490:	f7ff fbb4 	bl	8006bfc <fact_settings_file_change_callback>
    d7ap_fs_register_file_modified_callback(D7A_FILE_FACTORY_SETTINGS_FILE_ID, &fact_settings_file_change_callback);
 8007494:	4912      	ldr	r1, [pc, #72]	; (80074e0 <phy_init+0x84>)
 8007496:	2001      	movs	r0, #1
 8007498:	f000 fe4a 	bl	8008130 <d7ap_fs_register_file_modified_callback>
    configure_syncword(PHY_SYNCWORD_CLASS0, &default_channel_id);
 800749c:	4c11      	ldr	r4, [pc, #68]	; (80074e4 <phy_init+0x88>)
 800749e:	0021      	movs	r1, r4
 80074a0:	2000      	movs	r0, #0
 80074a2:	f7ff fd1b 	bl	8006edc <configure_syncword>
    configure_channel(&default_channel_id);
 80074a6:	0020      	movs	r0, r4
 80074a8:	f7ff fde8 	bl	800707c <configure_channel>
    configure_eirp(10);
 80074ac:	200a      	movs	r0, #10
 80074ae:	f7ff fd2d 	bl	8006f0c <configure_eirp>
    timer_init_event(&continuous_tx_expiration_timer, &continuous_tx_expiration);
 80074b2:	490d      	ldr	r1, [pc, #52]	; (80074e8 <phy_init+0x8c>)
 80074b4:	480d      	ldr	r0, [pc, #52]	; (80074ec <phy_init+0x90>)
 80074b6:	f008 ff17 	bl	80102e8 <timer_init_event>
}
 80074ba:	2000      	movs	r0, #0
 80074bc:	bd10      	pop	{r4, pc}
 80074be:	46c0      	nop			; (mov r8, r8)
 80074c0:	20002af8 	.word	0x20002af8
 80074c4:	20002aac 	.word	0x20002aac
 80074c8:	08006ecd 	.word	0x08006ecd
 80074cc:	08006ec1 	.word	0x08006ec1
 80074d0:	08006f81 	.word	0x08006f81
 80074d4:	08006f35 	.word	0x08006f35
 80074d8:	08006e59 	.word	0x08006e59
 80074dc:	08007365 	.word	0x08007365
 80074e0:	08006bfd 	.word	0x08006bfd
 80074e4:	08019490 	.word	0x08019490
 80074e8:	08006bf1 	.word	0x08006bf1
 80074ec:	20002870 	.word	0x20002870

080074f0 <phy_stop>:
error_t phy_stop() {
 80074f0:	b510      	push	{r4, lr}
    d7ap_fs_unregister_file_modified_callback(D7A_FILE_FACTORY_SETTINGS_FILE_ID);
 80074f2:	2001      	movs	r0, #1
 80074f4:	f000 fe0c 	bl	8008110 <d7ap_fs_unregister_file_modified_callback>
    timer_cancel_event(&continuous_tx_expiration_timer);
 80074f8:	4802      	ldr	r0, [pc, #8]	; (8007504 <phy_stop+0x14>)
 80074fa:	f009 f9db 	bl	80108b4 <timer_cancel_event>
}
 80074fe:	2000      	movs	r0, #0
 8007500:	bd10      	pop	{r4, pc}
 8007502:	46c0      	nop			; (mov r8, r8)
 8007504:	20002870 	.word	0x20002870

08007508 <status_write>:
void status_write() {
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	b084      	sub	sp, #16
    write_file_counter++;
 800750c:	4a15      	ldr	r2, [pc, #84]	; (8007564 <status_write+0x5c>)
 800750e:	7813      	ldrb	r3, [r2, #0]
 8007510:	3301      	adds	r3, #1
 8007512:	b2db      	uxtb	r3, r3
 8007514:	7013      	strb	r3, [r2, #0]
    if(write_file_counter == 100) {
 8007516:	2b64      	cmp	r3, #100	; 0x64
 8007518:	d001      	beq.n	800751e <status_write+0x16>
}
 800751a:	b004      	add	sp, #16
 800751c:	bd70      	pop	{r4, r5, r6, pc}
        write_file_counter = 0;
 800751e:	2500      	movs	r5, #0
 8007520:	7015      	strb	r5, [r2, #0]
        uint16_t bg_trigger_ratio = 1024 * total_rssi_triggers / total_bg;
 8007522:	4b11      	ldr	r3, [pc, #68]	; (8007568 <status_write+0x60>)
 8007524:	8818      	ldrh	r0, [r3, #0]
 8007526:	0280      	lsls	r0, r0, #10
 8007528:	4b10      	ldr	r3, [pc, #64]	; (800756c <status_write+0x64>)
 800752a:	8819      	ldrh	r1, [r3, #0]
 800752c:	f00a fb7a 	bl	8011c24 <__divsi3>
 8007530:	0004      	movs	r4, r0
 8007532:	b286      	uxth	r6, r0
        uint16_t scan_timeout_ratio = 1024 * (total_fg - total_succeeded_fg) / total_fg;
 8007534:	4b0e      	ldr	r3, [pc, #56]	; (8007570 <status_write+0x68>)
 8007536:	8819      	ldrh	r1, [r3, #0]
 8007538:	4b0e      	ldr	r3, [pc, #56]	; (8007574 <status_write+0x6c>)
 800753a:	8818      	ldrh	r0, [r3, #0]
 800753c:	1a08      	subs	r0, r1, r0
 800753e:	0280      	lsls	r0, r0, #10
 8007540:	f00a fb70 	bl	8011c24 <__divsi3>
 8007544:	b283      	uxth	r3, r0
        uint8_t buffer[4] = {(uint8_t)(bg_trigger_ratio >> 8), (uint8_t)(bg_trigger_ratio & 0xFF), (uint8_t)(scan_timeout_ratio >> 8), (uint8_t)(scan_timeout_ratio & 0xFF)};
 8007546:	0a36      	lsrs	r6, r6, #8
 8007548:	aa03      	add	r2, sp, #12
 800754a:	7016      	strb	r6, [r2, #0]
 800754c:	7054      	strb	r4, [r2, #1]
 800754e:	0a1b      	lsrs	r3, r3, #8
 8007550:	7093      	strb	r3, [r2, #2]
 8007552:	70d0      	strb	r0, [r2, #3]
        d7ap_fs_write_file(D7A_FILE_DLL_STATUS_FILE_ID, 8, buffer, 4, ROOT_AUTH);
 8007554:	9500      	str	r5, [sp, #0]
 8007556:	2304      	movs	r3, #4
 8007558:	2108      	movs	r1, #8
 800755a:	200b      	movs	r0, #11
 800755c:	f000 fd00 	bl	8007f60 <d7ap_fs_write_file>
}
 8007560:	e7db      	b.n	800751a <status_write+0x12>
 8007562:	46c0      	nop			; (mov r8, r8)
 8007564:	20002b08 	.word	0x20002b08
 8007568:	20002afe 	.word	0x20002afe
 800756c:	20002afa 	.word	0x20002afa
 8007570:	20002afc 	.word	0x20002afc
 8007574:	20002b00 	.word	0x20002b00

08007578 <phy_start_rx>:
error_t phy_start_rx(channel_id_t* channel, syncword_class_t syncword_class, phy_rx_packet_callback_t rx_cb) {
 8007578:	b570      	push	{r4, r5, r6, lr}
 800757a:	0004      	movs	r4, r0
 800757c:	000d      	movs	r5, r1
    received_callback = rx_cb;
 800757e:	4b10      	ldr	r3, [pc, #64]	; (80075c0 <phy_start_rx+0x48>)
 8007580:	601a      	str	r2, [r3, #0]
    if(state == STATE_TX)
 8007582:	4b10      	ldr	r3, [pc, #64]	; (80075c4 <phy_start_rx+0x4c>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d017      	beq.n	80075ba <phy_start_rx+0x42>
    configure_channel(channel);
 800758a:	f7ff fd77 	bl	800707c <configure_channel>
    configure_syncword(syncword_class, channel);
 800758e:	0021      	movs	r1, r4
 8007590:	0028      	movs	r0, r5
 8007592:	f7ff fca3 	bl	8006edc <configure_syncword>
    hw_radio_set_payload_length(0x00); // unlimited length mode
 8007596:	2000      	movs	r0, #0
 8007598:	f005 fe14 	bl	800d1c4 <hw_radio_set_payload_length>
    DEBUG_RX_START();
 800759c:	2001      	movs	r0, #1
 800759e:	f001 f826 	bl	80085ee <hw_debug_set>
    total_fg++;
 80075a2:	4a09      	ldr	r2, [pc, #36]	; (80075c8 <phy_start_rx+0x50>)
 80075a4:	8813      	ldrh	r3, [r2, #0]
 80075a6:	3301      	adds	r3, #1
 80075a8:	8013      	strh	r3, [r2, #0]
    status_write();
 80075aa:	f7ff ffad 	bl	8007508 <status_write>
    state = STATE_RX;
 80075ae:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <phy_start_rx+0x4c>)
 80075b0:	2202      	movs	r2, #2
 80075b2:	701a      	strb	r2, [r3, #0]
    hw_radio_set_opmode(HW_STATE_RX);
 80075b4:	2003      	movs	r0, #3
 80075b6:	f005 fe73 	bl	800d2a0 <hw_radio_set_opmode>
}
 80075ba:	2000      	movs	r0, #0
 80075bc:	bd70      	pop	{r4, r5, r6, pc}
 80075be:	46c0      	nop			; (mov r8, r8)
 80075c0:	20002ae8 	.word	0x20002ae8
 80075c4:	20002af8 	.word	0x20002af8
 80075c8:	20002afc 	.word	0x20002afc

080075cc <phy_start_energy_scan>:
{
 80075cc:	b570      	push	{r4, r5, r6, lr}
 80075ce:	000c      	movs	r4, r1
    assert(state != STATE_TX);
 80075d0:	4b0f      	ldr	r3, [pc, #60]	; (8007610 <phy_start_energy_scan+0x44>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d014      	beq.n	8007602 <phy_start_energy_scan+0x36>
    configure_channel(channel);
 80075d8:	f7ff fd50 	bl	800707c <configure_channel>
    hw_radio_set_payload_length(0x00); // unlimited length mode
 80075dc:	2000      	movs	r0, #0
 80075de:	f005 fdf1 	bl	800d1c4 <hw_radio_set_payload_length>
    state = STATE_RX;
 80075e2:	4b0b      	ldr	r3, [pc, #44]	; (8007610 <phy_start_energy_scan+0x44>)
 80075e4:	2202      	movs	r2, #2
 80075e6:	701a      	strb	r2, [r3, #0]
    DEBUG_RX_START();
 80075e8:	2001      	movs	r0, #1
 80075ea:	f001 f800 	bl	80085ee <hw_debug_set>
    int16_t rssi = hw_radio_get_rssi();
 80075ee:	f006 f9d9 	bl	800d9a4 <hw_radio_get_rssi>
 80075f2:	0005      	movs	r5, r0
    DEBUG_RX_END();
 80075f4:	2001      	movs	r0, #1
 80075f6:	f000 fffb 	bl	80085f0 <hw_debug_clr>
    rssi_cb(rssi);
 80075fa:	0028      	movs	r0, r5
 80075fc:	47a0      	blx	r4
}
 80075fe:	2000      	movs	r0, #0
 8007600:	bd70      	pop	{r4, r5, r6, pc}
    assert(state != STATE_TX);
 8007602:	4b04      	ldr	r3, [pc, #16]	; (8007614 <phy_start_energy_scan+0x48>)
 8007604:	4a04      	ldr	r2, [pc, #16]	; (8007618 <phy_start_energy_scan+0x4c>)
 8007606:	4905      	ldr	r1, [pc, #20]	; (800761c <phy_start_energy_scan+0x50>)
 8007608:	4805      	ldr	r0, [pc, #20]	; (8007620 <phy_start_energy_scan+0x54>)
 800760a:	f000 fff9 	bl	8008600 <__assert_func>
 800760e:	46c0      	nop			; (mov r8, r8)
 8007610:	20002af8 	.word	0x20002af8
 8007614:	080193c8 	.word	0x080193c8
 8007618:	08019448 	.word	0x08019448
 800761c:	000002b7 	.word	0x000002b7
 8007620:	0801933c 	.word	0x0801933c

08007624 <phy_stop_rx>:
error_t phy_stop_rx(){
 8007624:	b510      	push	{r4, lr}
    phy_switch_to_sleep_mode();
 8007626:	f7ff fd0b 	bl	8007040 <phy_switch_to_sleep_mode>
}
 800762a:	2000      	movs	r0, #0
 800762c:	bd10      	pop	{r4, pc}
	...

08007630 <phy_send_packet>:
{
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	0005      	movs	r5, r0
 8007634:	000c      	movs	r4, r1
    assert(packet->length <= MODULE_D7AP_RAW_PACKET_SIZE);
 8007636:	8983      	ldrh	r3, [r0, #12]
 8007638:	2180      	movs	r1, #128	; 0x80
 800763a:	0089      	lsls	r1, r1, #2
 800763c:	428b      	cmp	r3, r1
 800763e:	d82a      	bhi.n	8007696 <phy_send_packet+0x66>
    transmitted_callback = tx_callback;
 8007640:	491b      	ldr	r1, [pc, #108]	; (80076b0 <phy_send_packet+0x80>)
 8007642:	600a      	str	r2, [r1, #0]
    if(packet->length == 0)
 8007644:	2b00      	cmp	r3, #0
 8007646:	d031      	beq.n	80076ac <phy_send_packet+0x7c>
    current_packet = packet;
 8007648:	4b1a      	ldr	r3, [pc, #104]	; (80076b4 <phy_send_packet+0x84>)
 800764a:	6018      	str	r0, [r3, #0]
    if(state == STATE_RX)
 800764c:	4b1a      	ldr	r3, [pc, #104]	; (80076b8 <phy_send_packet+0x88>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	2b02      	cmp	r3, #2
 8007652:	d028      	beq.n	80076a6 <phy_send_packet+0x76>
    configure_channel(&config->channel_id);
 8007654:	0020      	movs	r0, r4
 8007656:	f7ff fd11 	bl	800707c <configure_channel>
    configure_eirp(config->eirp);
 800765a:	2004      	movs	r0, #4
 800765c:	5620      	ldrsb	r0, [r4, r0]
 800765e:	f7ff fc55 	bl	8006f0c <configure_eirp>
    configure_syncword(config->syncword_class, &config->channel_id);
 8007662:	78e0      	ldrb	r0, [r4, #3]
 8007664:	0021      	movs	r1, r4
 8007666:	f7ff fc39 	bl	8006edc <configure_syncword>
    state = STATE_TX;
 800766a:	4b13      	ldr	r3, [pc, #76]	; (80076b8 <phy_send_packet+0x88>)
 800766c:	2201      	movs	r2, #1
 800766e:	701a      	strb	r2, [r3, #0]
    fg_frame.encoded_length = encode_packet(packet, fg_frame.encoded_packet);
 8007670:	4c12      	ldr	r4, [pc, #72]	; (80076bc <phy_send_packet+0x8c>)
 8007672:	0021      	movs	r1, r4
 8007674:	0028      	movs	r0, r5
 8007676:	f7ff fbd1 	bl	8006e1c <encode_packet>
 800767a:	1ea5      	subs	r5, r4, #2
 800767c:	8028      	strh	r0, [r5, #0]
    DEBUG_RX_END();
 800767e:	2001      	movs	r0, #1
 8007680:	f000 ffb6 	bl	80085f0 <hw_debug_clr>
    DEBUG_TX_START();
 8007684:	2000      	movs	r0, #0
 8007686:	f000 ffb2 	bl	80085ee <hw_debug_set>
    hw_radio_send_payload(fg_frame.encoded_packet, fg_frame.encoded_length);
 800768a:	8829      	ldrh	r1, [r5, #0]
 800768c:	0020      	movs	r0, r4
 800768e:	f006 f831 	bl	800d6f4 <hw_radio_send_payload>
    return SUCCESS; // TODO other return codes
 8007692:	2000      	movs	r0, #0
}
 8007694:	bd70      	pop	{r4, r5, r6, pc}
    assert(packet->length <= MODULE_D7AP_RAW_PACKET_SIZE);
 8007696:	3947      	subs	r1, #71	; 0x47
 8007698:	39ff      	subs	r1, #255	; 0xff
 800769a:	4b09      	ldr	r3, [pc, #36]	; (80076c0 <phy_send_packet+0x90>)
 800769c:	4a09      	ldr	r2, [pc, #36]	; (80076c4 <phy_send_packet+0x94>)
 800769e:	0089      	lsls	r1, r1, #2
 80076a0:	4809      	ldr	r0, [pc, #36]	; (80076c8 <phy_send_packet+0x98>)
 80076a2:	f000 ffad 	bl	8008600 <__assert_func>
        phy_switch_to_standby_mode();
 80076a6:	f7ff fc3b 	bl	8006f20 <phy_switch_to_standby_mode>
 80076aa:	e7d3      	b.n	8007654 <phy_send_packet+0x24>
        return ESIZE;
 80076ac:	4807      	ldr	r0, [pc, #28]	; (80076cc <phy_send_packet+0x9c>)
 80076ae:	e7f1      	b.n	8007694 <phy_send_packet+0x64>
 80076b0:	20002b04 	.word	0x20002b04
 80076b4:	20002884 	.word	0x20002884
 80076b8:	20002af8 	.word	0x20002af8
 80076bc:	2000289a 	.word	0x2000289a
 80076c0:	080193dc 	.word	0x080193dc
 80076c4:	08019460 	.word	0x08019460
 80076c8:	0801933c 	.word	0x0801933c
 80076cc:	0000138a 	.word	0x0000138a

080076d0 <phy_send_packet_with_advertising>:
{   
 80076d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076d2:	46de      	mov	lr, fp
 80076d4:	4657      	mov	r7, sl
 80076d6:	464e      	mov	r6, r9
 80076d8:	4645      	mov	r5, r8
 80076da:	b5e0      	push	{r5, r6, r7, lr}
 80076dc:	b085      	sub	sp, #20
 80076de:	4680      	mov	r8, r0
 80076e0:	000c      	movs	r4, r1
 80076e2:	4691      	mov	r9, r2
 80076e4:	9301      	str	r3, [sp, #4]
    transmitted_callback = tx_callback;
 80076e6:	4b5a      	ldr	r3, [pc, #360]	; (8007850 <phy_send_packet_with_advertising+0x180>)
 80076e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076ea:	601a      	str	r2, [r3, #0]
    configure_syncword(PHY_SYNCWORD_CLASS0, &config->channel_id);
 80076ec:	2000      	movs	r0, #0
 80076ee:	f7ff fbf5 	bl	8006edc <configure_syncword>
    configure_channel(&config->channel_id);
 80076f2:	0020      	movs	r0, r4
 80076f4:	f7ff fcc2 	bl	800707c <configure_channel>
    configure_eirp(config->eirp);
 80076f8:	2004      	movs	r0, #4
 80076fa:	5620      	ldrsb	r0, [r4, r0]
 80076fc:	f7ff fc06 	bl	8006f0c <configure_eirp>
    current_packet = packet;
 8007700:	4b54      	ldr	r3, [pc, #336]	; (8007854 <phy_send_packet_with_advertising+0x184>)
 8007702:	4642      	mov	r2, r8
 8007704:	601a      	str	r2, [r3, #0]
    hw_radio_set_payload_length(0x00); // unlimited length mode
 8007706:	2000      	movs	r0, #0
 8007708:	f005 fd5c 	bl	800d1c4 <hw_radio_set_payload_length>
    hw_radio_enable_refill(true);
 800770c:	2001      	movs	r0, #1
 800770e:	f006 f8e3 	bl	800d8d8 <hw_radio_enable_refill>
    hw_radio_enable_preloading(true);
 8007712:	2001      	movs	r0, #1
 8007714:	f005 f806 	bl	800c724 <hw_radio_enable_preloading>
    uint8_t preamble_len = (current_channel_id.channel_header.ch_class ==  PHY_CLASS_HI_RATE ? PREAMBLE_HI_RATE_CLASS : PREAMBLE_LOW_RATE_CLASS);
 8007718:	4b4f      	ldr	r3, [pc, #316]	; (8007858 <phy_send_packet_with_advertising+0x188>)
 800771a:	781a      	ldrb	r2, [r3, #0]
 800771c:	230c      	movs	r3, #12
 800771e:	4013      	ands	r3, r2
 8007720:	2b0c      	cmp	r3, #12
 8007722:	d100      	bne.n	8007726 <phy_send_packet_with_advertising+0x56>
 8007724:	e088      	b.n	8007838 <phy_send_packet_with_advertising+0x168>
 8007726:	2604      	movs	r6, #4
    memset(bg_adv.packet, 0xAA, preamble_len); // preamble length is given in number of bytes
 8007728:	46b3      	mov	fp, r6
 800772a:	4c4c      	ldr	r4, [pc, #304]	; (800785c <phy_send_packet_with_advertising+0x18c>)
 800772c:	1ca0      	adds	r0, r4, #2
 800772e:	0032      	movs	r2, r6
 8007730:	21aa      	movs	r1, #170	; 0xaa
 8007732:	f00d fba1 	bl	8014e78 <memset>
    uint16_t sync_word = __builtin_bswap16(sync_word_value[PHY_SYNCWORD_CLASS0][current_channel_id.channel_header.ch_coding]);
 8007736:	4f48      	ldr	r7, [pc, #288]	; (8007858 <phy_send_packet_with_advertising+0x188>)
 8007738:	783b      	ldrb	r3, [r7, #0]
 800773a:	079b      	lsls	r3, r3, #30
 800773c:	0f5b      	lsrs	r3, r3, #29
 800773e:	4a48      	ldr	r2, [pc, #288]	; (8007860 <phy_send_packet_with_advertising+0x190>)
 8007740:	5a9b      	ldrh	r3, [r3, r2]
 8007742:	ba5b      	rev16	r3, r3
 8007744:	aa02      	add	r2, sp, #8
 8007746:	1d91      	adds	r1, r2, #6
 8007748:	800b      	strh	r3, [r1, #0]
    memcpy(&bg_adv.packet[preamble_len], &sync_word, 2);
 800774a:	0035      	movs	r5, r6
 800774c:	19a0      	adds	r0, r4, r6
 800774e:	3002      	adds	r0, #2
 8007750:	2202      	movs	r2, #2
 8007752:	f00d fb3d 	bl	8014dd0 <memcpy>
    if (current_channel_id.channel_header.ch_coding == PHY_CODING_FEC_PN9)
 8007756:	783a      	ldrb	r2, [r7, #0]
 8007758:	2303      	movs	r3, #3
 800775a:	4013      	ands	r3, r2
 800775c:	2b02      	cmp	r3, #2
 800775e:	d100      	bne.n	8007762 <phy_send_packet_with_advertising+0x92>
 8007760:	e06c      	b.n	800783c <phy_send_packet_with_advertising+0x16c>
        bg_adv.packet_size = preamble_len + 2 + BACKGROUND_FRAME_LENGTH;
 8007762:	0033      	movs	r3, r6
 8007764:	3308      	adds	r3, #8
 8007766:	493d      	ldr	r1, [pc, #244]	; (800785c <phy_send_packet_with_advertising+0x18c>)
 8007768:	2220      	movs	r2, #32
 800776a:	548b      	strb	r3, [r1, r2]
    bg_adv.packet_payload = bg_adv.packet + preamble_len + 2 ;
 800776c:	4c3b      	ldr	r4, [pc, #236]	; (800785c <phy_send_packet_with_advertising+0x18c>)
 800776e:	1ca3      	adds	r3, r4, #2
 8007770:	465a      	mov	r2, fp
 8007772:	3202      	adds	r2, #2
 8007774:	189b      	adds	r3, r3, r2
 8007776:	61e3      	str	r3, [r4, #28]
    memcpy(bg_adv.dll_header, dll_header_bg_frame, BACKGROUND_DLL_HEADER_LENGTH);
 8007778:	2202      	movs	r2, #2
 800777a:	4649      	mov	r1, r9
 800777c:	0020      	movs	r0, r4
 800777e:	f00d fb27 	bl	8014dd0 <memcpy>
    bg_adv.eta = eta;
 8007782:	9b01      	ldr	r3, [sp, #4]
 8007784:	8463      	strh	r3, [r4, #34]	; 0x22
    bg_adv.tx_duration = phy_calculate_tx_duration(current_channel_id.channel_header.ch_class,
 8007786:	4a34      	ldr	r2, [pc, #208]	; (8007858 <phy_send_packet_with_advertising+0x188>)
 8007788:	4692      	mov	sl, r2
 800778a:	7811      	ldrb	r1, [r2, #0]
 800778c:	0708      	lsls	r0, r1, #28
 800778e:	0f80      	lsrs	r0, r0, #30
                                                   current_channel_id.channel_header.ch_coding,
 8007790:	0789      	lsls	r1, r1, #30
 8007792:	0f89      	lsrs	r1, r1, #30
    bg_adv.tx_duration = phy_calculate_tx_duration(current_channel_id.channel_header.ch_class,
 8007794:	2300      	movs	r3, #0
 8007796:	2206      	movs	r2, #6
 8007798:	f7ff fd58 	bl	800724c <phy_calculate_tx_duration>
 800779c:	84a0      	strh	r0, [r4, #36]	; 0x24
    fg_frame.bg_adv = true;
 800779e:	4f31      	ldr	r7, [pc, #196]	; (8007864 <phy_send_packet_with_advertising+0x194>)
 80077a0:	2201      	movs	r2, #1
 80077a2:	4691      	mov	r9, r2
 80077a4:	4b30      	ldr	r3, [pc, #192]	; (8007868 <phy_send_packet_with_advertising+0x198>)
 80077a6:	54fa      	strb	r2, [r7, r3]
    memset(fg_frame.encoded_packet, 0xAA, preamble_len);
 80077a8:	1cb8      	adds	r0, r7, #2
 80077aa:	465a      	mov	r2, fp
 80077ac:	21aa      	movs	r1, #170	; 0xaa
 80077ae:	f00d fb63 	bl	8014e78 <memset>
    sync_word = __builtin_bswap16(sync_word_value[PHY_SYNCWORD_CLASS1][current_channel_id.channel_header.ch_coding]);
 80077b2:	4652      	mov	r2, sl
 80077b4:	7813      	ldrb	r3, [r2, #0]
 80077b6:	079b      	lsls	r3, r3, #30
 80077b8:	0f9b      	lsrs	r3, r3, #30
 80077ba:	3304      	adds	r3, #4
 80077bc:	005b      	lsls	r3, r3, #1
 80077be:	4a28      	ldr	r2, [pc, #160]	; (8007860 <phy_send_packet_with_advertising+0x190>)
 80077c0:	5a9b      	ldrh	r3, [r3, r2]
 80077c2:	ba5b      	rev16	r3, r3
 80077c4:	aa02      	add	r2, sp, #8
 80077c6:	1d91      	adds	r1, r2, #6
 80077c8:	800b      	strh	r3, [r1, #0]
    memcpy(&fg_frame.encoded_packet[preamble_len], &sync_word, 2);
 80077ca:	19e8      	adds	r0, r5, r7
 80077cc:	3002      	adds	r0, #2
 80077ce:	2202      	movs	r2, #2
 80077d0:	f00d fafe 	bl	8014dd0 <memcpy>
    fg_frame.encoded_length = encode_packet(packet, &fg_frame.encoded_packet[preamble_len + 2]);
 80077d4:	1ca9      	adds	r1, r5, #2
 80077d6:	19c9      	adds	r1, r1, r7
 80077d8:	3102      	adds	r1, #2
 80077da:	4640      	mov	r0, r8
 80077dc:	f7ff fb1e 	bl	8006e1c <encode_packet>
    fg_frame.encoded_length += preamble_len + 2; // add preamble + syncword
 80077e0:	1986      	adds	r6, r0, r6
 80077e2:	3602      	adds	r6, #2
 80077e4:	803e      	strh	r6, [r7, #0]
    payload_len = assemble_background_payload();
 80077e6:	f7ff fadb 	bl	8006da0 <assemble_background_payload>
    hw_radio_send_payload(bg_adv.packet_payload, payload_len); // in preloading mode
 80077ea:	b281      	uxth	r1, r0
 80077ec:	69e0      	ldr	r0, [r4, #28]
 80077ee:	f005 ff81 	bl	800d6f4 <hw_radio_send_payload>
    bg_adv.eta -= bg_adv.tx_duration; // the next ETA is the time remaining after the end transmission time of the D7AAdvP frame
 80077f2:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 80077f4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80077f6:	1a9b      	subs	r3, r3, r2
 80077f8:	8463      	strh	r3, [r4, #34]	; 0x22
    assemble_background_payload();
 80077fa:	f7ff fad1 	bl	8006da0 <assemble_background_payload>
    timer_tick_t start = timer_get_counter_value();
 80077fe:	f008 fd7f 	bl	8010300 <timer_get_counter_value>
    bg_adv.stop_time = start + eta + bg_adv.tx_duration + FG_SCAN_STARTUP_TIME + 4; // Tadv = Tsched + Ttx + Tfg_startup + Tcalc
 8007802:	9b01      	ldr	r3, [sp, #4]
 8007804:	469c      	mov	ip, r3
 8007806:	4460      	add	r0, ip
 8007808:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800780a:	18c0      	adds	r0, r0, r3
 800780c:	3007      	adds	r0, #7
 800780e:	62a0      	str	r0, [r4, #40]	; 0x28
    state = STATE_TX;
 8007810:	4b16      	ldr	r3, [pc, #88]	; (800786c <phy_send_packet_with_advertising+0x19c>)
 8007812:	464a      	mov	r2, r9
 8007814:	701a      	strb	r2, [r3, #0]
    DEBUG_RX_END();
 8007816:	2001      	movs	r0, #1
 8007818:	f000 feea 	bl	80085f0 <hw_debug_clr>
    DEBUG_TX_START();
 800781c:	2000      	movs	r0, #0
 800781e:	f000 fee6 	bl	80085ee <hw_debug_set>
    hw_radio_set_opmode(HW_STATE_TX);
 8007822:	2004      	movs	r0, #4
 8007824:	f005 fd3c 	bl	800d2a0 <hw_radio_set_opmode>
}
 8007828:	2000      	movs	r0, #0
 800782a:	b005      	add	sp, #20
 800782c:	bc3c      	pop	{r2, r3, r4, r5}
 800782e:	4690      	mov	r8, r2
 8007830:	4699      	mov	r9, r3
 8007832:	46a2      	mov	sl, r4
 8007834:	46ab      	mov	fp, r5
 8007836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t preamble_len = (current_channel_id.channel_header.ch_class ==  PHY_CLASS_HI_RATE ? PREAMBLE_HI_RATE_CLASS : PREAMBLE_LOW_RATE_CLASS);
 8007838:	2607      	movs	r6, #7
 800783a:	e775      	b.n	8007728 <phy_send_packet_with_advertising+0x58>
        bg_adv.packet_size = preamble_len + 2 + fec_calculated_decoded_length(BACKGROUND_FRAME_LENGTH);
 800783c:	2006      	movs	r0, #6
 800783e:	f006 fe61 	bl	800e504 <fec_calculated_decoded_length>
 8007842:	1830      	adds	r0, r6, r0
 8007844:	3002      	adds	r0, #2
 8007846:	4a05      	ldr	r2, [pc, #20]	; (800785c <phy_send_packet_with_advertising+0x18c>)
 8007848:	2320      	movs	r3, #32
 800784a:	54d0      	strb	r0, [r2, r3]
 800784c:	e78e      	b.n	800776c <phy_send_packet_with_advertising+0x9c>
 800784e:	46c0      	nop			; (mov r8, r8)
 8007850:	20002b04 	.word	0x20002b04
 8007854:	20002884 	.word	0x20002884
 8007858:	2000055c 	.word	0x2000055c
 800785c:	20002838 	.word	0x20002838
 8007860:	08019494 	.word	0x08019494
 8007864:	20002898 	.word	0x20002898
 8007868:	0000020e 	.word	0x0000020e
 800786c:	20002af8 	.word	0x20002af8

08007870 <phy_start_background_scan>:

error_t phy_start_background_scan(phy_rx_config_t* config, phy_rx_packet_callback_t rx_cb)
{
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	0004      	movs	r4, r0
    DEBUG_BG_START();
    received_callback = rx_cb;
 8007874:	4b28      	ldr	r3, [pc, #160]	; (8007918 <phy_start_background_scan+0xa8>)
 8007876:	6019      	str	r1, [r3, #0]
    uint8_t packet_len;

    //DPRINT("START BG scan @ %i", timer_get_counter_value());

    // We should not initiate a background scan before TX is completed
    assert(state != STATE_TX);
 8007878:	4b28      	ldr	r3, [pc, #160]	; (800791c <phy_start_background_scan+0xac>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d036      	beq.n	80078ee <phy_start_background_scan+0x7e>

    state = STATE_BG_SCAN;
 8007880:	4b26      	ldr	r3, [pc, #152]	; (800791c <phy_start_background_scan+0xac>)
 8007882:	2203      	movs	r2, #3
 8007884:	701a      	strb	r2, [r3, #0]

    configure_syncword(PHY_SYNCWORD_CLASS0, &config->channel_id);
 8007886:	0001      	movs	r1, r0
 8007888:	2000      	movs	r0, #0
 800788a:	f7ff fb27 	bl	8006edc <configure_syncword>
    configure_channel(&config->channel_id);
 800788e:	0020      	movs	r0, r4
 8007890:	f7ff fbf4 	bl	800707c <configure_channel>

    if (current_channel_id.channel_header.ch_coding == PHY_CODING_FEC_PN9)
 8007894:	4b22      	ldr	r3, [pc, #136]	; (8007920 <phy_start_background_scan+0xb0>)
 8007896:	781a      	ldrb	r2, [r3, #0]
 8007898:	2303      	movs	r3, #3
 800789a:	4013      	ands	r3, r2
 800789c:	2b02      	cmp	r3, #2
 800789e:	d02c      	beq.n	80078fa <phy_start_background_scan+0x8a>
        packet_len = fec_calculated_decoded_length(BACKGROUND_FRAME_LENGTH);
    else
        packet_len = BACKGROUND_FRAME_LENGTH;
 80078a0:	2006      	movs	r0, #6

    // set PayloadLength to the length of the expected Background frame (fixed length packet format is used)
    hw_radio_set_payload_length(packet_len);
 80078a2:	b280      	uxth	r0, r0
 80078a4:	f005 fc8e 	bl	800d1c4 <hw_radio_set_payload_length>

    total_bg++;
 80078a8:	4a1e      	ldr	r2, [pc, #120]	; (8007924 <phy_start_background_scan+0xb4>)
 80078aa:	8813      	ldrh	r3, [r2, #0]
 80078ac:	3301      	adds	r3, #1
 80078ae:	8013      	strh	r3, [r2, #0]

    DEBUG_RX_START();
 80078b0:	2001      	movs	r0, #1
 80078b2:	f000 fe9c 	bl	80085ee <hw_debug_set>

    int16_t rssi = hw_radio_get_rssi();
 80078b6:	f006 f875 	bl	800d9a4 <hw_radio_get_rssi>
 80078ba:	0005      	movs	r5, r0
    if (rssi <= config->rssi_thr)
 80078bc:	2204      	movs	r2, #4
 80078be:	5ea3      	ldrsh	r3, [r4, r2]
 80078c0:	4283      	cmp	r3, r0
 80078c2:	da1f      	bge.n	8007904 <phy_start_background_scan+0x94>
        DEBUG_BG_END();
        DEBUG_RX_END();
        config->rssi_thr = rssi; //Put new value to update E_CCA in higher layer
        return FAIL;
    }
    config->rssi_thr = rssi;
 80078c4:	80a0      	strh	r0, [r4, #4]
    DEBUG_BG_END();

    total_rssi_triggers++;
 80078c6:	4a18      	ldr	r2, [pc, #96]	; (8007928 <phy_start_background_scan+0xb8>)
 80078c8:	8813      	ldrh	r3, [r2, #0]
 80078ca:	3301      	adds	r3, #1
 80078cc:	8013      	strh	r3, [r2, #0]

    status_write();
 80078ce:	f7ff fe1b 	bl	8007508 <status_write>

    DPRINT("rssi %i, waiting for BG frame\n", rssi);

    // the device has a period of To to successfully detect the sync word
    hw_radio_set_rx_timeout(bg_timeout[current_channel_id.channel_header.ch_class] + 40); //TO DO: OPTIMISE THIS TIMEOUT
 80078d2:	4b13      	ldr	r3, [pc, #76]	; (8007920 <phy_start_background_scan+0xb0>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	071b      	lsls	r3, r3, #28
 80078d8:	0f9b      	lsrs	r3, r3, #30
 80078da:	4a14      	ldr	r2, [pc, #80]	; (800792c <phy_start_background_scan+0xbc>)
 80078dc:	5cd0      	ldrb	r0, [r2, r3]
 80078de:	3028      	adds	r0, #40	; 0x28
 80078e0:	f004 ff26 	bl	800c730 <hw_radio_set_rx_timeout>
    DEBUG_BG_START();
    hw_radio_set_opmode(HW_STATE_RX);
 80078e4:	2003      	movs	r0, #3
 80078e6:	f005 fcdb 	bl	800d2a0 <hw_radio_set_opmode>

    return SUCCESS;
 80078ea:	2000      	movs	r0, #0
}
 80078ec:	bd70      	pop	{r4, r5, r6, pc}
    assert(state != STATE_TX);
 80078ee:	4b10      	ldr	r3, [pc, #64]	; (8007930 <phy_start_background_scan+0xc0>)
 80078f0:	4a10      	ldr	r2, [pc, #64]	; (8007934 <phy_start_background_scan+0xc4>)
 80078f2:	4911      	ldr	r1, [pc, #68]	; (8007938 <phy_start_background_scan+0xc8>)
 80078f4:	4811      	ldr	r0, [pc, #68]	; (800793c <phy_start_background_scan+0xcc>)
 80078f6:	f000 fe83 	bl	8008600 <__assert_func>
        packet_len = fec_calculated_decoded_length(BACKGROUND_FRAME_LENGTH);
 80078fa:	2006      	movs	r0, #6
 80078fc:	f006 fe02 	bl	800e504 <fec_calculated_decoded_length>
 8007900:	b2c0      	uxtb	r0, r0
 8007902:	e7ce      	b.n	80078a2 <phy_start_background_scan+0x32>
        hw_radio_set_opmode(HW_STATE_SLEEP); //0.136ms + 0.066ms io_deinit = 0.207ms
 8007904:	2001      	movs	r0, #1
 8007906:	f005 fccb 	bl	800d2a0 <hw_radio_set_opmode>
        DEBUG_RX_END();
 800790a:	2001      	movs	r0, #1
 800790c:	f000 fe70 	bl	80085f0 <hw_debug_clr>
        config->rssi_thr = rssi; //Put new value to update E_CCA in higher layer
 8007910:	80a5      	strh	r5, [r4, #4]
        return FAIL;
 8007912:	480b      	ldr	r0, [pc, #44]	; (8007940 <phy_start_background_scan+0xd0>)
 8007914:	e7ea      	b.n	80078ec <phy_start_background_scan+0x7c>
 8007916:	46c0      	nop			; (mov r8, r8)
 8007918:	20002ae8 	.word	0x20002ae8
 800791c:	20002af8 	.word	0x20002af8
 8007920:	2000055c 	.word	0x2000055c
 8007924:	20002afa 	.word	0x20002afa
 8007928:	20002afe 	.word	0x20002afe
 800792c:	0801948c 	.word	0x0801948c
 8007930:	080193c8 	.word	0x080193c8
 8007934:	08019470 	.word	0x08019470
 8007938:	000003e7 	.word	0x000003e7
 800793c:	0801933c 	.word	0x0801933c
 8007940:	00001389 	.word	0x00001389

08007944 <phy_continuous_tx>:

void phy_continuous_tx(phy_tx_config_t const* tx_cfg, uint8_t time_period, phy_tx_packet_callback_t tx_cb)
{
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	0004      	movs	r4, r0
 8007948:	000d      	movs	r5, r1
    transmitted_callback = tx_cb;
 800794a:	4b38      	ldr	r3, [pc, #224]	; (8007a2c <phy_continuous_tx+0xe8>)
 800794c:	601a      	str	r2, [r3, #0]
    DPRINT("Continuous tx\n");

    if(state == STATE_RX)
 800794e:	4b38      	ldr	r3, [pc, #224]	; (8007a30 <phy_continuous_tx+0xec>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	2b02      	cmp	r3, #2
 8007954:	d022      	beq.n	800799c <phy_continuous_tx+0x58>
        pending_rx_cfg.syncword_class = current_syncword_class;
        should_rx_after_tx_completed = true;
        phy_switch_to_standby_mode();
    }

    configure_channel(&tx_cfg->channel_id);
 8007956:	0020      	movs	r0, r4
 8007958:	f7ff fb90 	bl	800707c <configure_channel>
    configure_eirp(tx_cfg->eirp);
 800795c:	2004      	movs	r0, #4
 800795e:	5620      	ldrsb	r0, [r4, r0]
 8007960:	f7ff fad4 	bl	8006f0c <configure_eirp>
    configure_syncword(tx_cfg->syncword_class, &tx_cfg->channel_id);
 8007964:	78e0      	ldrb	r0, [r4, #3]
 8007966:	0021      	movs	r1, r4
 8007968:	f7ff fab8 	bl	8006edc <configure_syncword>
    hw_radio_enable_refill(true);
 800796c:	2001      	movs	r0, #1
 800796e:	f005 ffb3 	bl	800d8d8 <hw_radio_enable_refill>

    state = STATE_CONT_TX;
 8007972:	4b2f      	ldr	r3, [pc, #188]	; (8007a30 <phy_continuous_tx+0xec>)
 8007974:	2204      	movs	r2, #4
 8007976:	701a      	strb	r2, [r3, #0]
    if(time_period) {
 8007978:	2d00      	cmp	r5, #0
 800797a:	d112      	bne.n	80079a2 <phy_continuous_tx+0x5e>
        continuous_tx_expiration_timer.next_event = time_period * 1024;
        timer_add_event(&continuous_tx_expiration_timer);
    }

    fg_frame.bg_adv = false;
 800797c:	4a2d      	ldr	r2, [pc, #180]	; (8007a34 <phy_continuous_tx+0xf0>)
 800797e:	4b2e      	ldr	r3, [pc, #184]	; (8007a38 <phy_continuous_tx+0xf4>)
 8007980:	2100      	movs	r1, #0
 8007982:	54d1      	strb	r1, [r2, r3]
    if (current_channel_id.channel_header.ch_coding == PHY_CODING_FEC_PN9)
 8007984:	4b2d      	ldr	r3, [pc, #180]	; (8007a3c <phy_continuous_tx+0xf8>)
 8007986:	781a      	ldrb	r2, [r3, #0]
 8007988:	2303      	movs	r3, #3
 800798a:	4013      	ands	r3, r2
 800798c:	2b02      	cmp	r3, #2
 800798e:	d00e      	beq.n	80079ae <phy_continuous_tx+0x6a>
            fg_frame.encoded_packet[i+1] = i;

        fg_frame.encoded_length = fec_encode(fg_frame.encoded_packet, payload_len);
        pn9_encode(fg_frame.encoded_packet, fg_frame.encoded_length);
    }
    else if (current_channel_id.channel_header.ch_coding == PHY_CODING_PN9)
 8007990:	2b00      	cmp	r3, #0
 8007992:	d13a      	bne.n	8007a0a <phy_continuous_tx+0xc6>
    {
        uint8_t payload_len = 63;
        fg_frame.encoded_packet[0] = payload_len;
 8007994:	4a27      	ldr	r2, [pc, #156]	; (8007a34 <phy_continuous_tx+0xf0>)
 8007996:	213f      	movs	r1, #63	; 0x3f
 8007998:	7091      	strb	r1, [r2, #2]
        for (uint8_t i = 0; i < payload_len; i++)
 800799a:	e02b      	b.n	80079f4 <phy_continuous_tx+0xb0>
        phy_switch_to_standby_mode();
 800799c:	f7ff fac0 	bl	8006f20 <phy_switch_to_standby_mode>
 80079a0:	e7d9      	b.n	8007956 <phy_continuous_tx+0x12>
        continuous_tx_expiration_timer.next_event = time_period * 1024;
 80079a2:	02ad      	lsls	r5, r5, #10
 80079a4:	4826      	ldr	r0, [pc, #152]	; (8007a40 <phy_continuous_tx+0xfc>)
 80079a6:	6045      	str	r5, [r0, #4]
        timer_add_event(&continuous_tx_expiration_timer);
 80079a8:	f008 ff44 	bl	8010834 <timer_add_event>
 80079ac:	e7e6      	b.n	800797c <phy_continuous_tx+0x38>
        fg_frame.encoded_packet[0] = payload_len;
 80079ae:	4b21      	ldr	r3, [pc, #132]	; (8007a34 <phy_continuous_tx+0xf0>)
 80079b0:	2220      	movs	r2, #32
 80079b2:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < payload_len; i++)
 80079b4:	2300      	movs	r3, #0
 80079b6:	e004      	b.n	80079c2 <phy_continuous_tx+0x7e>
            fg_frame.encoded_packet[i+1] = i;
 80079b8:	1c59      	adds	r1, r3, #1
 80079ba:	4a1e      	ldr	r2, [pc, #120]	; (8007a34 <phy_continuous_tx+0xf0>)
 80079bc:	1852      	adds	r2, r2, r1
 80079be:	7093      	strb	r3, [r2, #2]
        for (uint8_t i = 0; i < payload_len; i++)
 80079c0:	b2cb      	uxtb	r3, r1
 80079c2:	2b1f      	cmp	r3, #31
 80079c4:	d9f8      	bls.n	80079b8 <phy_continuous_tx+0x74>
        fg_frame.encoded_length = fec_encode(fg_frame.encoded_packet, payload_len);
 80079c6:	4c1f      	ldr	r4, [pc, #124]	; (8007a44 <phy_continuous_tx+0x100>)
 80079c8:	2120      	movs	r1, #32
 80079ca:	0020      	movs	r0, r4
 80079cc:	f006 fda2 	bl	800e514 <fec_encode>
 80079d0:	0001      	movs	r1, r0
 80079d2:	1ea3      	subs	r3, r4, #2
 80079d4:	8018      	strh	r0, [r3, #0]
        pn9_encode(fg_frame.encoded_packet, fg_frame.encoded_length);
 80079d6:	0020      	movs	r0, r4
 80079d8:	f007 fb90 	bl	800f0fc <pn9_encode>
        fg_frame.encoded_packet[0] = payload_len;
        for (uint8_t i = 1; i < payload_len; i++)
            fg_frame.encoded_packet[i+1] = i;
        fg_frame.encoded_length = payload_len;
    }
    hw_radio_send_payload(fg_frame.encoded_packet, fg_frame.encoded_length);
 80079dc:	4815      	ldr	r0, [pc, #84]	; (8007a34 <phy_continuous_tx+0xf0>)
 80079de:	8801      	ldrh	r1, [r0, #0]
 80079e0:	3002      	adds	r0, #2
 80079e2:	f005 fe87 	bl	800d6f4 <hw_radio_send_payload>
}
 80079e6:	bd70      	pop	{r4, r5, r6, pc}
            fg_frame.encoded_packet[i+1] = 0xAA;
 80079e8:	3301      	adds	r3, #1
 80079ea:	4a12      	ldr	r2, [pc, #72]	; (8007a34 <phy_continuous_tx+0xf0>)
 80079ec:	18d2      	adds	r2, r2, r3
 80079ee:	21aa      	movs	r1, #170	; 0xaa
 80079f0:	7091      	strb	r1, [r2, #2]
        for (uint8_t i = 0; i < payload_len; i++)
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b3e      	cmp	r3, #62	; 0x3e
 80079f6:	d9f7      	bls.n	80079e8 <phy_continuous_tx+0xa4>
        pn9_encode(fg_frame.encoded_packet, payload_len);
 80079f8:	4c12      	ldr	r4, [pc, #72]	; (8007a44 <phy_continuous_tx+0x100>)
 80079fa:	213f      	movs	r1, #63	; 0x3f
 80079fc:	0020      	movs	r0, r4
 80079fe:	f007 fb7d 	bl	800f0fc <pn9_encode>
        fg_frame.encoded_length = payload_len;
 8007a02:	3c02      	subs	r4, #2
 8007a04:	233f      	movs	r3, #63	; 0x3f
 8007a06:	8023      	strh	r3, [r4, #0]
 8007a08:	e7e8      	b.n	80079dc <phy_continuous_tx+0x98>
        fg_frame.encoded_packet[0] = payload_len;
 8007a0a:	4b0a      	ldr	r3, [pc, #40]	; (8007a34 <phy_continuous_tx+0xf0>)
 8007a0c:	22ff      	movs	r2, #255	; 0xff
 8007a0e:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 1; i < payload_len; i++)
 8007a10:	2301      	movs	r3, #1
 8007a12:	e004      	b.n	8007a1e <phy_continuous_tx+0xda>
            fg_frame.encoded_packet[i+1] = i;
 8007a14:	1c59      	adds	r1, r3, #1
 8007a16:	4a07      	ldr	r2, [pc, #28]	; (8007a34 <phy_continuous_tx+0xf0>)
 8007a18:	1852      	adds	r2, r2, r1
 8007a1a:	7093      	strb	r3, [r2, #2]
        for (uint8_t i = 1; i < payload_len; i++)
 8007a1c:	b2cb      	uxtb	r3, r1
 8007a1e:	2bff      	cmp	r3, #255	; 0xff
 8007a20:	d1f8      	bne.n	8007a14 <phy_continuous_tx+0xd0>
        fg_frame.encoded_length = payload_len;
 8007a22:	4b04      	ldr	r3, [pc, #16]	; (8007a34 <phy_continuous_tx+0xf0>)
 8007a24:	22ff      	movs	r2, #255	; 0xff
 8007a26:	801a      	strh	r2, [r3, #0]
 8007a28:	e7d8      	b.n	80079dc <phy_continuous_tx+0x98>
 8007a2a:	46c0      	nop			; (mov r8, r8)
 8007a2c:	20002b04 	.word	0x20002b04
 8007a30:	20002af8 	.word	0x20002af8
 8007a34:	20002898 	.word	0x20002898
 8007a38:	0000020e 	.word	0x0000020e
 8007a3c:	2000055c 	.word	0x2000055c
 8007a40:	20002870 	.word	0x20002870
 8007a44:	2000289a 	.word	0x2000289a

08007a48 <d7ap_fs_set_process_d7aactp_callback>:
  return SUCCESS;
}

void d7ap_fs_set_process_d7aactp_callback(process_d7aactp_callback_t callback)
{
  process_d7aactp_callback = callback;
 8007a48:	4b01      	ldr	r3, [pc, #4]	; (8007a50 <d7ap_fs_set_process_d7aactp_callback+0x8>)
 8007a4a:	6018      	str	r0, [r3, #0]
}
 8007a4c:	4770      	bx	lr
 8007a4e:	46c0      	nop			; (mov r8, r8)
 8007a50:	20002da8 	.word	0x20002da8

08007a54 <d7ap_fs_init_file_on_blockdevice>:
    return d7ap_fs_init_file_on_blockdevice(file_id, bd_type, file_header, initial_data);
}

int d7ap_fs_init_file_on_blockdevice(
    uint8_t file_id, uint8_t blockdevice_index, const d7ap_fs_file_header_t* file_header, const uint8_t* initial_data)
{
 8007a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a56:	46c6      	mov	lr, r8
 8007a58:	b500      	push	{lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	4680      	mov	r8, r0
 8007a5e:	000e      	movs	r6, r1
 8007a60:	0014      	movs	r4, r2
 8007a62:	001d      	movs	r5, r3
    DPRINT("FS init %i, alloc %i", file_id, file_header->allocated_length);
    
    d7ap_fs_file_header_t file_header_big_endian;
    memcpy(&file_header_big_endian, file_header, sizeof (d7ap_fs_file_header_t));
 8007a64:	220c      	movs	r2, #12
 8007a66:	0021      	movs	r1, r4
 8007a68:	a805      	add	r0, sp, #20
 8007a6a:	f00d f9b1 	bl	8014dd0 <memcpy>
    file_header_big_endian.length = __builtin_bswap32(file_header_big_endian.length);
 8007a6e:	9b06      	ldr	r3, [sp, #24]
 8007a70:	ba1b      	rev	r3, r3
 8007a72:	9306      	str	r3, [sp, #24]
    file_header_big_endian.allocated_length = __builtin_bswap32(file_header_big_endian.allocated_length);
 8007a74:	9b07      	ldr	r3, [sp, #28]
 8007a76:	9303      	str	r3, [sp, #12]
 8007a78:	ba1b      	rev	r3, r3
 8007a7a:	9307      	str	r3, [sp, #28]
    
    memcpy(file_buffer, (uint8_t *)&file_header_big_endian, sizeof (d7ap_fs_file_header_t));
 8007a7c:	220c      	movs	r2, #12
 8007a7e:	a905      	add	r1, sp, #20
 8007a80:	4819      	ldr	r0, [pc, #100]	; (8007ae8 <d7ap_fs_init_file_on_blockdevice+0x94>)
 8007a82:	f00d f9a5 	bl	8014dd0 <memcpy>
    uint32_t length = sizeof(d7ap_fs_file_header_t);
    if(initial_data != NULL) {
 8007a86:	2d00      	cmp	r5, #0
 8007a88:	d028      	beq.n	8007adc <d7ap_fs_init_file_on_blockdevice+0x88>
        length += file_header->length;
 8007a8a:	7922      	ldrb	r2, [r4, #4]
 8007a8c:	7963      	ldrb	r3, [r4, #5]
 8007a8e:	021b      	lsls	r3, r3, #8
 8007a90:	4313      	orrs	r3, r2
 8007a92:	79a2      	ldrb	r2, [r4, #6]
 8007a94:	0412      	lsls	r2, r2, #16
 8007a96:	4313      	orrs	r3, r2
 8007a98:	79e2      	ldrb	r2, [r4, #7]
 8007a9a:	0612      	lsls	r2, r2, #24
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	0017      	movs	r7, r2
 8007aa0:	370c      	adds	r7, #12
        if(length > FILE_SIZE_MAX)
 8007aa2:	2f59      	cmp	r7, #89	; 0x59
 8007aa4:	d81c      	bhi.n	8007ae0 <d7ap_fs_init_file_on_blockdevice+0x8c>
          return -EFBIG;
        memcpy(file_buffer + sizeof(d7ap_fs_file_header_t), initial_data, file_header->length);
 8007aa6:	4810      	ldr	r0, [pc, #64]	; (8007ae8 <d7ap_fs_init_file_on_blockdevice+0x94>)
 8007aa8:	0029      	movs	r1, r5
 8007aaa:	300c      	adds	r0, #12
 8007aac:	f00d f990 	bl	8014dd0 <memcpy>
    }
       
    return fs_init_file(file_id, blockdevice_index, (const uint8_t *)file_buffer, length, sizeof(d7ap_fs_file_header_t) + file_header->allocated_length);
 8007ab0:	7a23      	ldrb	r3, [r4, #8]
 8007ab2:	7a62      	ldrb	r2, [r4, #9]
 8007ab4:	0212      	lsls	r2, r2, #8
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	7aa3      	ldrb	r3, [r4, #10]
 8007aba:	041b      	lsls	r3, r3, #16
 8007abc:	431a      	orrs	r2, r3
 8007abe:	7ae3      	ldrb	r3, [r4, #11]
 8007ac0:	061b      	lsls	r3, r3, #24
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	330c      	adds	r3, #12
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	003b      	movs	r3, r7
 8007aca:	4a07      	ldr	r2, [pc, #28]	; (8007ae8 <d7ap_fs_init_file_on_blockdevice+0x94>)
 8007acc:	0031      	movs	r1, r6
 8007ace:	4640      	mov	r0, r8
 8007ad0:	f007 f994 	bl	800edfc <fs_init_file>
}
 8007ad4:	b008      	add	sp, #32
 8007ad6:	bc04      	pop	{r2}
 8007ad8:	4690      	mov	r8, r2
 8007ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t length = sizeof(d7ap_fs_file_header_t);
 8007adc:	270c      	movs	r7, #12
 8007ade:	e7e7      	b.n	8007ab0 <d7ap_fs_init_file_on_blockdevice+0x5c>
          return -EFBIG;
 8007ae0:	201b      	movs	r0, #27
 8007ae2:	4240      	negs	r0, r0
 8007ae4:	e7f6      	b.n	8007ad4 <d7ap_fs_init_file_on_blockdevice+0x80>
 8007ae6:	46c0      	nop			; (mov r8, r8)
 8007ae8:	20002b0c 	.word	0x20002b0c

08007aec <d7ap_fs_init_file>:
{
 8007aec:	b510      	push	{r4, lr}
 8007aee:	000c      	movs	r4, r1
 8007af0:	0013      	movs	r3, r2
    fs_blockdevice_types_t bd_type = (file_header->file_properties.storage_class == FS_STORAGE_VOLATILE)
 8007af2:	7849      	ldrb	r1, [r1, #1]
 8007af4:	2203      	movs	r2, #3
 8007af6:	400a      	ands	r2, r1
        : FS_BLOCKDEVICE_TYPE_PERMANENT;
 8007af8:	2a01      	cmp	r2, #1
 8007afa:	d004      	beq.n	8007b06 <d7ap_fs_init_file+0x1a>
 8007afc:	2101      	movs	r1, #1
    return d7ap_fs_init_file_on_blockdevice(file_id, bd_type, file_header, initial_data);
 8007afe:	0022      	movs	r2, r4
 8007b00:	f7ff ffa8 	bl	8007a54 <d7ap_fs_init_file_on_blockdevice>
}
 8007b04:	bd10      	pop	{r4, pc}
        : FS_BLOCKDEVICE_TYPE_PERMANENT;
 8007b06:	2102      	movs	r1, #2
 8007b08:	e7f9      	b.n	8007afe <d7ap_fs_init_file+0x12>

08007b0a <d7ap_fs_read_file_header>:

  return 0;
}

int d7ap_fs_read_file_header(uint8_t file_id, d7ap_fs_file_header_t* file_header)
{
 8007b0a:	b570      	push	{r4, r5, r6, lr}
 8007b0c:	0005      	movs	r5, r0
 8007b0e:	000c      	movs	r4, r1
  int rtc;
  if(!fs_is_file_defined(file_id)) return -ENOENT;
 8007b10:	f007 fa32 	bl	800ef78 <fs_is_file_defined>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d02c      	beq.n	8007b72 <d7ap_fs_read_file_header+0x68>

  rtc = fs_read_file(file_id, 0, (uint8_t *)file_header, sizeof(d7ap_fs_file_header_t));
 8007b18:	230c      	movs	r3, #12
 8007b1a:	0022      	movs	r2, r4
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	0028      	movs	r0, r5
 8007b20:	f007 f98c 	bl	800ee3c <fs_read_file>
  if (rtc != 0)
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d123      	bne.n	8007b70 <d7ap_fs_read_file_header+0x66>
    return rtc;

#if __BYTE_ORDER__ != __ORDER_BIG_ENDIAN__
  // convert to little endian (native)
  file_header->length = __builtin_bswap32(file_header->length);
 8007b28:	7923      	ldrb	r3, [r4, #4]
 8007b2a:	7962      	ldrb	r2, [r4, #5]
 8007b2c:	0212      	lsls	r2, r2, #8
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	79a3      	ldrb	r3, [r4, #6]
 8007b32:	041b      	lsls	r3, r3, #16
 8007b34:	431a      	orrs	r2, r3
 8007b36:	79e3      	ldrb	r3, [r4, #7]
 8007b38:	061b      	lsls	r3, r3, #24
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	ba1b      	rev	r3, r3
 8007b3e:	7123      	strb	r3, [r4, #4]
 8007b40:	0a1a      	lsrs	r2, r3, #8
 8007b42:	7162      	strb	r2, [r4, #5]
 8007b44:	0c1a      	lsrs	r2, r3, #16
 8007b46:	71a2      	strb	r2, [r4, #6]
 8007b48:	0e1b      	lsrs	r3, r3, #24
 8007b4a:	71e3      	strb	r3, [r4, #7]
  file_header->allocated_length = __builtin_bswap32(file_header->allocated_length);
 8007b4c:	7a23      	ldrb	r3, [r4, #8]
 8007b4e:	7a62      	ldrb	r2, [r4, #9]
 8007b50:	0212      	lsls	r2, r2, #8
 8007b52:	431a      	orrs	r2, r3
 8007b54:	7aa3      	ldrb	r3, [r4, #10]
 8007b56:	041b      	lsls	r3, r3, #16
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	7ae3      	ldrb	r3, [r4, #11]
 8007b5c:	061b      	lsls	r3, r3, #24
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	ba1b      	rev	r3, r3
 8007b62:	7223      	strb	r3, [r4, #8]
 8007b64:	0a1a      	lsrs	r2, r3, #8
 8007b66:	7262      	strb	r2, [r4, #9]
 8007b68:	0c1a      	lsrs	r2, r3, #16
 8007b6a:	72a2      	strb	r2, [r4, #10]
 8007b6c:	0e1b      	lsrs	r3, r3, #24
 8007b6e:	72e3      	strb	r3, [r4, #11]
#endif

  return 0;
}
 8007b70:	bd70      	pop	{r4, r5, r6, pc}
  if(!fs_is_file_defined(file_id)) return -ENOENT;
 8007b72:	2002      	movs	r0, #2
 8007b74:	4240      	negs	r0, r0
 8007b76:	e7fb      	b.n	8007b70 <d7ap_fs_read_file_header+0x66>

08007b78 <d7ap_fs_write_file_header>:

int d7ap_fs_write_file_header(uint8_t file_id, d7ap_fs_file_header_t* file_header, authentication_t auth)
{
 8007b78:	b570      	push	{r4, r5, r6, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	0005      	movs	r5, r0
 8007b7e:	000c      	movs	r4, r1
 8007b80:	0016      	movs	r6, r2
  d7ap_fs_file_header_t header;

  if(!fs_is_file_defined(file_id)) return -ENOENT;
 8007b82:	f007 f9f9 	bl	800ef78 <fs_is_file_defined>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d03e      	beq.n	8007c08 <d7ap_fs_write_file_header+0x90>

  d7ap_fs_read_file_header(file_id, &header);
 8007b8a:	a901      	add	r1, sp, #4
 8007b8c:	0028      	movs	r0, r5
 8007b8e:	f7ff ffbc 	bl	8007b0a <d7ap_fs_read_file_header>

#ifndef MODULE_D7AP_FS_DISABLE_PERMISSIONS
  if(((auth == USER_AUTH) && (!header.file_permissions.user_write)) || ((auth == GUEST_AUTH) && (!header.file_permissions.guest_write)))
 8007b92:	2e01      	cmp	r6, #1
 8007b94:	d031      	beq.n	8007bfa <d7ap_fs_write_file_header+0x82>
 8007b96:	2e02      	cmp	r6, #2
 8007b98:	d103      	bne.n	8007ba2 <d7ap_fs_write_file_header+0x2a>
 8007b9a:	ab01      	add	r3, sp, #4
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	079b      	lsls	r3, r3, #30
 8007ba0:	d535      	bpl.n	8007c0e <d7ap_fs_write_file_header+0x96>
    return -EACCES;
#endif

  // Input of data shall be in big-endian ordering
#if __BYTE_ORDER__ != __ORDER_BIG_ENDIAN__
  file_header->length = __builtin_bswap32(file_header->length);
 8007ba2:	7923      	ldrb	r3, [r4, #4]
 8007ba4:	7962      	ldrb	r2, [r4, #5]
 8007ba6:	0212      	lsls	r2, r2, #8
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	79a3      	ldrb	r3, [r4, #6]
 8007bac:	041b      	lsls	r3, r3, #16
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	79e3      	ldrb	r3, [r4, #7]
 8007bb2:	061b      	lsls	r3, r3, #24
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	ba1b      	rev	r3, r3
 8007bb8:	7123      	strb	r3, [r4, #4]
 8007bba:	0a1a      	lsrs	r2, r3, #8
 8007bbc:	7162      	strb	r2, [r4, #5]
 8007bbe:	0c1a      	lsrs	r2, r3, #16
 8007bc0:	71a2      	strb	r2, [r4, #6]
 8007bc2:	0e1b      	lsrs	r3, r3, #24
 8007bc4:	71e3      	strb	r3, [r4, #7]
  file_header->allocated_length = __builtin_bswap32(file_header->allocated_length);
 8007bc6:	7a23      	ldrb	r3, [r4, #8]
 8007bc8:	7a62      	ldrb	r2, [r4, #9]
 8007bca:	0212      	lsls	r2, r2, #8
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	7aa3      	ldrb	r3, [r4, #10]
 8007bd0:	041b      	lsls	r3, r3, #16
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	7ae3      	ldrb	r3, [r4, #11]
 8007bd6:	061b      	lsls	r3, r3, #24
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	ba1b      	rev	r3, r3
 8007bdc:	7223      	strb	r3, [r4, #8]
 8007bde:	0a1a      	lsrs	r2, r3, #8
 8007be0:	7262      	strb	r2, [r4, #9]
 8007be2:	0c1a      	lsrs	r2, r3, #16
 8007be4:	72a2      	strb	r2, [r4, #10]
 8007be6:	0e1b      	lsrs	r3, r3, #24
 8007be8:	72e3      	strb	r3, [r4, #11]
#endif

  return (fs_write_file(file_id, 0, (const uint8_t*)file_header, sizeof(d7ap_fs_file_header_t)));
 8007bea:	230c      	movs	r3, #12
 8007bec:	0022      	movs	r2, r4
 8007bee:	2100      	movs	r1, #0
 8007bf0:	0028      	movs	r0, r5
 8007bf2:	f007 f961 	bl	800eeb8 <fs_write_file>
}
 8007bf6:	b004      	add	sp, #16
 8007bf8:	bd70      	pop	{r4, r5, r6, pc}
  if(((auth == USER_AUTH) && (!header.file_permissions.user_write)) || ((auth == GUEST_AUTH) && (!header.file_permissions.guest_write)))
 8007bfa:	ab01      	add	r3, sp, #4
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	06db      	lsls	r3, r3, #27
 8007c00:	d4c9      	bmi.n	8007b96 <d7ap_fs_write_file_header+0x1e>
    return -EACCES;
 8007c02:	200d      	movs	r0, #13
 8007c04:	4240      	negs	r0, r0
 8007c06:	e7f6      	b.n	8007bf6 <d7ap_fs_write_file_header+0x7e>
  if(!fs_is_file_defined(file_id)) return -ENOENT;
 8007c08:	2002      	movs	r0, #2
 8007c0a:	4240      	negs	r0, r0
 8007c0c:	e7f3      	b.n	8007bf6 <d7ap_fs_write_file_header+0x7e>
    return -EACCES;
 8007c0e:	200d      	movs	r0, #13
 8007c10:	4240      	negs	r0, r0
 8007c12:	e7f0      	b.n	8007bf6 <d7ap_fs_write_file_header+0x7e>

08007c14 <d7ap_fs_get_file_length>:
{
  return (d7ap_fs_write_file(D7A_FILE_DLL_CONF_FILE_ID, 0, &access_class, 1, ROOT_AUTH));
}

uint32_t d7ap_fs_get_file_length(uint8_t file_id)
{
 8007c14:	b500      	push	{lr}
 8007c16:	b085      	sub	sp, #20
  d7ap_fs_file_header_t header;

  d7ap_fs_read_file_header(file_id, &header);
 8007c18:	a901      	add	r1, sp, #4
 8007c1a:	f7ff ff76 	bl	8007b0a <d7ap_fs_read_file_header>
  return header.length;
 8007c1e:	9802      	ldr	r0, [sp, #8]
}
 8007c20:	b005      	add	sp, #20
 8007c22:	bd00      	pop	{pc}

08007c24 <execute_d7a_action_protocol>:
{
 8007c24:	b570      	push	{r4, r5, r6, lr}
 8007c26:	b08e      	sub	sp, #56	; 0x38
 8007c28:	0005      	movs	r5, r0
 8007c2a:	000c      	movs	r4, r1
  if(!fs_is_file_defined(action_file_id) || !fs_is_file_defined(interface_file_id))
 8007c2c:	f007 f9a4 	bl	800ef78 <fs_is_file_defined>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d013      	beq.n	8007c5c <execute_d7a_action_protocol+0x38>
 8007c34:	0020      	movs	r0, r4
 8007c36:	f007 f99f 	bl	800ef78 <fs_is_file_defined>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d00e      	beq.n	8007c5c <execute_d7a_action_protocol+0x38>
  uint32_t length = MAX_ITF_CONFIG_SIZE;
 8007c3e:	232c      	movs	r3, #44	; 0x2c
 8007c40:	9302      	str	r3, [sp, #8]
  int rc = d7ap_fs_read_file(interface_file_id, 0, itf_cfg, &length, ROOT_AUTH);
 8007c42:	2300      	movs	r3, #0
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	ab02      	add	r3, sp, #8
 8007c48:	aa03      	add	r2, sp, #12
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	0020      	movs	r0, r4
 8007c4e:	f000 f827 	bl	8007ca0 <d7ap_fs_read_file>
 8007c52:	1e04      	subs	r4, r0, #0
  if(rc != SUCCESS)
 8007c54:	d005      	beq.n	8007c62 <execute_d7a_action_protocol+0x3e>
}
 8007c56:	0020      	movs	r0, r4
 8007c58:	b00e      	add	sp, #56	; 0x38
 8007c5a:	bd70      	pop	{r4, r5, r6, pc}
    return -ECHILD;
 8007c5c:	240a      	movs	r4, #10
 8007c5e:	4264      	negs	r4, r4
 8007c60:	e7f9      	b.n	8007c56 <execute_d7a_action_protocol+0x32>
  uint32_t action_len = d7ap_fs_get_file_length(action_file_id);
 8007c62:	0028      	movs	r0, r5
 8007c64:	f7ff ffd6 	bl	8007c14 <d7ap_fs_get_file_length>
 8007c68:	0006      	movs	r6, r0
  if(action_len > FILE_SIZE_MAX)
 8007c6a:	2859      	cmp	r0, #89	; 0x59
 8007c6c:	d810      	bhi.n	8007c90 <execute_d7a_action_protocol+0x6c>
  rc = fs_read_file(action_file_id, sizeof(d7ap_fs_file_header_t), file_buffer, action_len);
 8007c6e:	0003      	movs	r3, r0
 8007c70:	4a09      	ldr	r2, [pc, #36]	; (8007c98 <execute_d7a_action_protocol+0x74>)
 8007c72:	210c      	movs	r1, #12
 8007c74:	0028      	movs	r0, r5
 8007c76:	f007 f8e1 	bl	800ee3c <fs_read_file>
 8007c7a:	1e04      	subs	r4, r0, #0
  if(rc != SUCCESS)
 8007c7c:	d1eb      	bne.n	8007c56 <execute_d7a_action_protocol+0x32>
  if(process_d7aactp_callback != NULL)
 8007c7e:	4b07      	ldr	r3, [pc, #28]	; (8007c9c <execute_d7a_action_protocol+0x78>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d0e7      	beq.n	8007c56 <execute_d7a_action_protocol+0x32>
    process_d7aactp_callback(itf_cfg, file_buffer, action_len);
 8007c86:	0032      	movs	r2, r6
 8007c88:	4903      	ldr	r1, [pc, #12]	; (8007c98 <execute_d7a_action_protocol+0x74>)
 8007c8a:	a803      	add	r0, sp, #12
 8007c8c:	4798      	blx	r3
 8007c8e:	e7e2      	b.n	8007c56 <execute_d7a_action_protocol+0x32>
    return -EFBIG;
 8007c90:	241b      	movs	r4, #27
 8007c92:	4264      	negs	r4, r4
 8007c94:	e7df      	b.n	8007c56 <execute_d7a_action_protocol+0x32>
 8007c96:	46c0      	nop			; (mov r8, r8)
 8007c98:	20002b0c 	.word	0x20002b0c
 8007c9c:	20002da8 	.word	0x20002da8

08007ca0 <d7ap_fs_read_file>:
{
 8007ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	0006      	movs	r6, r0
 8007ca6:	000c      	movs	r4, r1
 8007ca8:	9201      	str	r2, [sp, #4]
 8007caa:	001f      	movs	r7, r3
 8007cac:	ab0c      	add	r3, sp, #48	; 0x30
 8007cae:	781d      	ldrb	r5, [r3, #0]
  if(!fs_is_file_defined(file_id)) return -ENOENT;
 8007cb0:	f007 f962 	bl	800ef78 <fs_is_file_defined>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d034      	beq.n	8007d22 <d7ap_fs_read_file+0x82>
  rtc = d7ap_fs_read_file_header(file_id, &header);
 8007cb8:	a903      	add	r1, sp, #12
 8007cba:	0030      	movs	r0, r6
 8007cbc:	f7ff ff25 	bl	8007b0a <d7ap_fs_read_file_header>
  if (rtc != 0)
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d11f      	bne.n	8007d04 <d7ap_fs_read_file+0x64>
  if(header.length < offset + *length)
 8007cc4:	9a04      	ldr	r2, [sp, #16]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	191b      	adds	r3, r3, r4
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d203      	bcs.n	8007cd6 <d7ap_fs_read_file+0x36>
    if(header.length < offset)
 8007cce:	42a2      	cmp	r2, r4
 8007cd0:	d32a      	bcc.n	8007d28 <d7ap_fs_read_file+0x88>
      *length = header.length - offset;
 8007cd2:	1b12      	subs	r2, r2, r4
 8007cd4:	603a      	str	r2, [r7, #0]
  if(((auth == USER_AUTH) && (!header.file_permissions.user_read)) || ((auth == GUEST_AUTH) && (!header.file_permissions.guest_read)))
 8007cd6:	2d01      	cmp	r5, #1
 8007cd8:	d016      	beq.n	8007d08 <d7ap_fs_read_file+0x68>
 8007cda:	2d02      	cmp	r5, #2
 8007cdc:	d103      	bne.n	8007ce6 <d7ap_fs_read_file+0x46>
 8007cde:	ab03      	add	r3, sp, #12
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	075b      	lsls	r3, r3, #29
 8007ce4:	d523      	bpl.n	8007d2e <d7ap_fs_read_file+0x8e>
  rtc = fs_read_file(file_id, sizeof(d7ap_fs_file_header_t) + offset, buffer, *length);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	0021      	movs	r1, r4
 8007cea:	310c      	adds	r1, #12
 8007cec:	9a01      	ldr	r2, [sp, #4]
 8007cee:	0030      	movs	r0, r6
 8007cf0:	f007 f8a4 	bl	800ee3c <fs_read_file>
  if (rtc != 0)
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d105      	bne.n	8007d04 <d7ap_fs_read_file+0x64>
     && header.file_properties.action_condition == D7A_ACT_COND_READ)
 8007cf8:	ab03      	add	r3, sp, #12
 8007cfa:	785b      	ldrb	r3, [r3, #1]
 8007cfc:	220f      	movs	r2, #15
 8007cfe:	4393      	bics	r3, r2
  if(header.file_properties.action_protocol_enabled == true
 8007d00:	2b90      	cmp	r3, #144	; 0x90
 8007d02:	d008      	beq.n	8007d16 <d7ap_fs_read_file+0x76>
}
 8007d04:	b007      	add	sp, #28
 8007d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((auth == USER_AUTH) && (!header.file_permissions.user_read)) || ((auth == GUEST_AUTH) && (!header.file_permissions.guest_read)))
 8007d08:	ab03      	add	r3, sp, #12
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	069b      	lsls	r3, r3, #26
 8007d0e:	d4e4      	bmi.n	8007cda <d7ap_fs_read_file+0x3a>
    return -EACCES;
 8007d10:	200d      	movs	r0, #13
 8007d12:	4240      	negs	r0, r0
 8007d14:	e7f6      	b.n	8007d04 <d7ap_fs_read_file+0x64>
    rtc = execute_d7a_action_protocol(header.action_file_id, header.interface_file_id);
 8007d16:	ab03      	add	r3, sp, #12
 8007d18:	78d9      	ldrb	r1, [r3, #3]
 8007d1a:	7898      	ldrb	r0, [r3, #2]
 8007d1c:	f7ff ff82 	bl	8007c24 <execute_d7a_action_protocol>
    if(rtc != SUCCESS)
 8007d20:	e7f0      	b.n	8007d04 <d7ap_fs_read_file+0x64>
  if(!fs_is_file_defined(file_id)) return -ENOENT;
 8007d22:	2002      	movs	r0, #2
 8007d24:	4240      	negs	r0, r0
 8007d26:	e7ed      	b.n	8007d04 <d7ap_fs_read_file+0x64>
      return -EINVAL;
 8007d28:	2016      	movs	r0, #22
 8007d2a:	4240      	negs	r0, r0
 8007d2c:	e7ea      	b.n	8007d04 <d7ap_fs_read_file+0x64>
    return -EACCES;
 8007d2e:	200d      	movs	r0, #13
 8007d30:	4240      	negs	r0, r0
 8007d32:	e7e7      	b.n	8007d04 <d7ap_fs_read_file+0x64>

08007d34 <d7ap_fs_read_uid>:
{
 8007d34:	b500      	push	{lr}
 8007d36:	b085      	sub	sp, #20
 8007d38:	0002      	movs	r2, r0
    uint32_t length = D7A_FILE_UID_SIZE;
 8007d3a:	2308      	movs	r3, #8
 8007d3c:	9303      	str	r3, [sp, #12]
    return (d7ap_fs_read_file(D7A_FILE_UID_FILE_ID, 0, buffer, &length, ROOT_AUTH));
 8007d3e:	2300      	movs	r3, #0
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	ab03      	add	r3, sp, #12
 8007d44:	2100      	movs	r1, #0
 8007d46:	2000      	movs	r0, #0
 8007d48:	f7ff ffaa 	bl	8007ca0 <d7ap_fs_read_file>
}
 8007d4c:	b005      	add	sp, #20
 8007d4e:	bd00      	pop	{pc}

08007d50 <d7ap_fs_read_nwl_security_key>:
{
 8007d50:	b500      	push	{lr}
 8007d52:	b085      	sub	sp, #20
 8007d54:	0002      	movs	r2, r0
    uint32_t length = D7A_FILE_NWL_SECURITY_KEY_SIZE;
 8007d56:	2310      	movs	r3, #16
 8007d58:	9303      	str	r3, [sp, #12]
    return d7ap_fs_read_file(D7A_FILE_NWL_SECURITY_KEY, 0, buffer, &length, ROOT_AUTH);
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	ab03      	add	r3, sp, #12
 8007d60:	2100      	movs	r1, #0
 8007d62:	200e      	movs	r0, #14
 8007d64:	f7ff ff9c 	bl	8007ca0 <d7ap_fs_read_file>
}
 8007d68:	b005      	add	sp, #20
 8007d6a:	bd00      	pop	{pc}

08007d6c <d7ap_fs_read_nwl_security>:
{
 8007d6c:	b510      	push	{r4, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	0004      	movs	r4, r0
  uint32_t length = D7A_FILE_NWL_SECURITY_SIZE;
 8007d72:	2305      	movs	r3, #5
 8007d74:	9303      	str	r3, [sp, #12]
  rtc = d7ap_fs_read_file(D7A_FILE_NWL_SECURITY, 0, (uint8_t*)nwl_security, &length, ROOT_AUTH);
 8007d76:	2300      	movs	r3, #0
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	ab03      	add	r3, sp, #12
 8007d7c:	0002      	movs	r2, r0
 8007d7e:	2100      	movs	r1, #0
 8007d80:	200d      	movs	r0, #13
 8007d82:	f7ff ff8d 	bl	8007ca0 <d7ap_fs_read_file>
  if (rtc == 0)
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d102      	bne.n	8007d90 <d7ap_fs_read_nwl_security+0x24>
    nwl_security->frame_counter = (uint32_t)__builtin_bswap32(nwl_security->frame_counter); // correct endianess
 8007d8a:	6863      	ldr	r3, [r4, #4]
 8007d8c:	ba1b      	rev	r3, r3
 8007d8e:	6063      	str	r3, [r4, #4]
}
 8007d90:	b004      	add	sp, #16
 8007d92:	bd10      	pop	{r4, pc}

08007d94 <d7ap_fs_read_nwl_security_state_register>:
{
 8007d94:	b510      	push	{r4, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	0004      	movs	r4, r0
  uint32_t length = sizeof(dae_nwl_ssr_t);
 8007d9a:	2382      	movs	r3, #130	; 0x82
 8007d9c:	005b      	lsls	r3, r3, #1
 8007d9e:	9303      	str	r3, [sp, #12]
  if(!fs_is_file_defined(D7A_FILE_NWL_SECURITY_STATE_REG)) return -ENOENT;
 8007da0:	200f      	movs	r0, #15
 8007da2:	f007 f8e9 	bl	800ef78 <fs_is_file_defined>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d017      	beq.n	8007dda <d7ap_fs_read_nwl_security_state_register+0x46>
  rtc = (d7ap_fs_read_file(D7A_FILE_NWL_SECURITY_STATE_REG, 0,
 8007daa:	2300      	movs	r3, #0
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	ab03      	add	r3, sp, #12
 8007db0:	0022      	movs	r2, r4
 8007db2:	2100      	movs	r1, #0
 8007db4:	200f      	movs	r0, #15
 8007db6:	f7ff ff73 	bl	8007ca0 <d7ap_fs_read_file>
  if (rtc != 0)
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d10b      	bne.n	8007dd6 <d7ap_fs_read_nwl_security_state_register+0x42>
  for(uint8_t i = 0; i < node_security_state->trusted_node_nb; i++)
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	e006      	b.n	8007dd0 <d7ap_fs_read_nwl_security_state_register+0x3c>
    node_security_state->trusted_node_table[i].frame_counter = (uint32_t)__builtin_bswap32(node_security_state->trusted_node_table[i].frame_counter);
 8007dc2:	011a      	lsls	r2, r3, #4
 8007dc4:	18a2      	adds	r2, r4, r2
 8007dc6:	6891      	ldr	r1, [r2, #8]
 8007dc8:	ba09      	rev	r1, r1
 8007dca:	6091      	str	r1, [r2, #8]
  for(uint8_t i = 0; i < node_security_state->trusted_node_nb; i++)
 8007dcc:	3301      	adds	r3, #1
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	7862      	ldrb	r2, [r4, #1]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d8f5      	bhi.n	8007dc2 <d7ap_fs_read_nwl_security_state_register+0x2e>
}
 8007dd6:	b004      	add	sp, #16
 8007dd8:	bd10      	pop	{r4, pc}
  if(!fs_is_file_defined(D7A_FILE_NWL_SECURITY_STATE_REG)) return -ENOENT;
 8007dda:	2002      	movs	r0, #2
 8007ddc:	4240      	negs	r0, r0
 8007dde:	e7fa      	b.n	8007dd6 <d7ap_fs_read_nwl_security_state_register+0x42>

08007de0 <d7ap_fs_read_access_class>:
{
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	000c      	movs	r4, r1
  uint32_t length = D7A_FILE_ACCESS_PROFILE_SIZE;
 8007de6:	2341      	movs	r3, #65	; 0x41
 8007de8:	9303      	str	r3, [sp, #12]
  if(access_class_index >= 15)
 8007dea:	280e      	cmp	r0, #14
 8007dec:	d82d      	bhi.n	8007e4a <d7ap_fs_read_access_class+0x6a>
  if(!fs_is_file_defined(D7A_FILE_ACCESS_PROFILE_ID + access_class_index))
 8007dee:	3020      	adds	r0, #32
 8007df0:	b2c5      	uxtb	r5, r0
 8007df2:	0028      	movs	r0, r5
 8007df4:	f007 f8c0 	bl	800ef78 <fs_is_file_defined>
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	d029      	beq.n	8007e50 <d7ap_fs_read_access_class+0x70>
  int result = d7ap_fs_read_file(D7A_FILE_ACCESS_PROFILE_ID + access_class_index, 0, (uint8_t*)access_class, &length, ROOT_AUTH);
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	ab03      	add	r3, sp, #12
 8007e02:	0022      	movs	r2, r4
 8007e04:	2100      	movs	r1, #0
 8007e06:	0028      	movs	r0, r5
 8007e08:	f7ff ff4a 	bl	8007ca0 <d7ap_fs_read_file>
  for(int i=0; i<SUBBANDS_NB; i++) {
 8007e0c:	2500      	movs	r5, #0
 8007e0e:	e018      	b.n	8007e42 <d7ap_fs_read_access_class+0x62>
    access_class->subbands[i].channel_index_start = __builtin_bswap16(access_class->subbands[i].channel_index_start);
 8007e10:	00eb      	lsls	r3, r5, #3
 8007e12:	1b5b      	subs	r3, r3, r5
 8007e14:	18e3      	adds	r3, r4, r3
 8007e16:	7a59      	ldrb	r1, [r3, #9]
 8007e18:	7a9a      	ldrb	r2, [r3, #10]
 8007e1a:	0212      	lsls	r2, r2, #8
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	ba52      	rev16	r2, r2
 8007e20:	b291      	uxth	r1, r2
 8007e22:	26ff      	movs	r6, #255	; 0xff
 8007e24:	4032      	ands	r2, r6
 8007e26:	725a      	strb	r2, [r3, #9]
 8007e28:	0a09      	lsrs	r1, r1, #8
 8007e2a:	7299      	strb	r1, [r3, #10]
    access_class->subbands[i].channel_index_end = __builtin_bswap16(access_class->subbands[i].channel_index_end);
 8007e2c:	7ada      	ldrb	r2, [r3, #11]
 8007e2e:	7b19      	ldrb	r1, [r3, #12]
 8007e30:	0209      	lsls	r1, r1, #8
 8007e32:	430a      	orrs	r2, r1
 8007e34:	ba52      	rev16	r2, r2
 8007e36:	b291      	uxth	r1, r2
 8007e38:	4032      	ands	r2, r6
 8007e3a:	72da      	strb	r2, [r3, #11]
 8007e3c:	0a09      	lsrs	r1, r1, #8
 8007e3e:	7319      	strb	r1, [r3, #12]
  for(int i=0; i<SUBBANDS_NB; i++) {
 8007e40:	3501      	adds	r5, #1
 8007e42:	2d07      	cmp	r5, #7
 8007e44:	dde4      	ble.n	8007e10 <d7ap_fs_read_access_class+0x30>
}
 8007e46:	b004      	add	sp, #16
 8007e48:	bd70      	pop	{r4, r5, r6, pc}
    return -EFAULT;
 8007e4a:	200e      	movs	r0, #14
 8007e4c:	4240      	negs	r0, r0
 8007e4e:	e7fa      	b.n	8007e46 <d7ap_fs_read_access_class+0x66>
    return -ENOENT;
 8007e50:	2002      	movs	r0, #2
 8007e52:	4240      	negs	r0, r0
 8007e54:	e7f7      	b.n	8007e46 <d7ap_fs_read_access_class+0x66>

08007e56 <d7ap_fs_read_dll_conf_active_access_class>:
{
 8007e56:	b510      	push	{r4, lr}
 8007e58:	b084      	sub	sp, #16
  uint32_t length = 1;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	9302      	str	r3, [sp, #8]
  d7ap_fs_read_file(D7A_FILE_DLL_CONF_FILE_ID, 0, &access_class, &length, ROOT_AUTH);
 8007e5e:	240f      	movs	r4, #15
 8007e60:	446c      	add	r4, sp
 8007e62:	2300      	movs	r3, #0
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	ab02      	add	r3, sp, #8
 8007e68:	0022      	movs	r2, r4
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	200a      	movs	r0, #10
 8007e6e:	f7ff ff17 	bl	8007ca0 <d7ap_fs_read_file>
  return access_class;
 8007e72:	7820      	ldrb	r0, [r4, #0]
}
 8007e74:	b004      	add	sp, #16
 8007e76:	bd10      	pop	{r4, pc}

08007e78 <d7ap_fs_write_file_with_callback>:
{
 8007e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e7a:	46d6      	mov	lr, sl
 8007e7c:	464f      	mov	r7, r9
 8007e7e:	4646      	mov	r6, r8
 8007e80:	b5c0      	push	{r6, r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	0005      	movs	r5, r0
 8007e86:	000e      	movs	r6, r1
 8007e88:	4690      	mov	r8, r2
 8007e8a:	001f      	movs	r7, r3
 8007e8c:	ab0c      	add	r3, sp, #48	; 0x30
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	469a      	mov	sl, r3
 8007e92:	ab0d      	add	r3, sp, #52	; 0x34
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	4699      	mov	r9, r3
  if(!fs_is_file_defined(file_id)) return -ENOENT;
 8007e98:	f007 f86e 	bl	800ef78 <fs_is_file_defined>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d052      	beq.n	8007f46 <d7ap_fs_write_file_with_callback+0xce>
  rtc = d7ap_fs_read_file_header(file_id, &header);
 8007ea0:	a901      	add	r1, sp, #4
 8007ea2:	0028      	movs	r0, r5
 8007ea4:	f7ff fe31 	bl	8007b0a <d7ap_fs_read_file_header>
 8007ea8:	1e04      	subs	r4, r0, #0
  if (rtc != 0)
 8007eaa:	d12e      	bne.n	8007f0a <d7ap_fs_write_file_with_callback+0x92>
  if(header.length < offset + length)
 8007eac:	19f3      	adds	r3, r6, r7
 8007eae:	9a02      	ldr	r2, [sp, #8]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d34b      	bcc.n	8007f4c <d7ap_fs_write_file_with_callback+0xd4>
  if(((auth == USER_AUTH) && (!header.file_permissions.user_write)) || ((auth == GUEST_AUTH) && (!header.file_permissions.guest_write)))
 8007eb4:	4653      	mov	r3, sl
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d02e      	beq.n	8007f18 <d7ap_fs_write_file_with_callback+0xa0>
 8007eba:	4653      	mov	r3, sl
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d032      	beq.n	8007f26 <d7ap_fs_write_file_with_callback+0xae>
  if (file_modifying_callbacks[file_id])
 8007ec0:	00ab      	lsls	r3, r5, #2
 8007ec2:	4a25      	ldr	r2, [pc, #148]	; (8007f58 <d7ap_fs_write_file_with_callback+0xe0>)
 8007ec4:	589c      	ldr	r4, [r3, r2]
 8007ec6:	2c00      	cmp	r4, #0
 8007ec8:	d006      	beq.n	8007ed8 <d7ap_fs_write_file_with_callback+0x60>
      if (!file_modifying_callbacks[file_id](file_id, offset, buffer, length))
 8007eca:	003b      	movs	r3, r7
 8007ecc:	4642      	mov	r2, r8
 8007ece:	0031      	movs	r1, r6
 8007ed0:	0028      	movs	r0, r5
 8007ed2:	47a0      	blx	r4
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	d03c      	beq.n	8007f52 <d7ap_fs_write_file_with_callback+0xda>
  rtc = fs_write_file(file_id, sizeof(d7ap_fs_file_header_t) + offset, buffer, length);
 8007ed8:	0031      	movs	r1, r6
 8007eda:	310c      	adds	r1, #12
 8007edc:	003b      	movs	r3, r7
 8007ede:	4642      	mov	r2, r8
 8007ee0:	0028      	movs	r0, r5
 8007ee2:	f006 ffe9 	bl	800eeb8 <fs_write_file>
 8007ee6:	1e04      	subs	r4, r0, #0
  if (rtc != 0)
 8007ee8:	d10f      	bne.n	8007f0a <d7ap_fs_write_file_with_callback+0x92>
    && header.file_properties.action_condition == D7A_ACT_COND_WRITE) // TODO ALP_ACT_COND_WRITEFLUSH?
 8007eea:	ab01      	add	r3, sp, #4
 8007eec:	785b      	ldrb	r3, [r3, #1]
 8007eee:	220f      	movs	r2, #15
 8007ef0:	4393      	bics	r3, r2
  if(header.file_properties.action_protocol_enabled == true
 8007ef2:	2ba0      	cmp	r3, #160	; 0xa0
 8007ef4:	d01e      	beq.n	8007f34 <d7ap_fs_write_file_with_callback+0xbc>
  if (file_modified_callbacks[file_id] && trigger_modified_cb)
 8007ef6:	00ab      	lsls	r3, r5, #2
 8007ef8:	4a18      	ldr	r2, [pc, #96]	; (8007f5c <d7ap_fs_write_file_with_callback+0xe4>)
 8007efa:	589b      	ldr	r3, [r3, r2]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d004      	beq.n	8007f0a <d7ap_fs_write_file_with_callback+0x92>
 8007f00:	464a      	mov	r2, r9
 8007f02:	2a00      	cmp	r2, #0
 8007f04:	d001      	beq.n	8007f0a <d7ap_fs_write_file_with_callback+0x92>
      file_modified_callbacks[file_id](file_id);
 8007f06:	0028      	movs	r0, r5
 8007f08:	4798      	blx	r3
}
 8007f0a:	0020      	movs	r0, r4
 8007f0c:	b004      	add	sp, #16
 8007f0e:	bc1c      	pop	{r2, r3, r4}
 8007f10:	4690      	mov	r8, r2
 8007f12:	4699      	mov	r9, r3
 8007f14:	46a2      	mov	sl, r4
 8007f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((auth == USER_AUTH) && (!header.file_permissions.user_write)) || ((auth == GUEST_AUTH) && (!header.file_permissions.guest_write)))
 8007f18:	ab01      	add	r3, sp, #4
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	06db      	lsls	r3, r3, #27
 8007f1e:	d4cc      	bmi.n	8007eba <d7ap_fs_write_file_with_callback+0x42>
    return -EACCES;
 8007f20:	240d      	movs	r4, #13
 8007f22:	4264      	negs	r4, r4
 8007f24:	e7f1      	b.n	8007f0a <d7ap_fs_write_file_with_callback+0x92>
  if(((auth == USER_AUTH) && (!header.file_permissions.user_write)) || ((auth == GUEST_AUTH) && (!header.file_permissions.guest_write)))
 8007f26:	ab01      	add	r3, sp, #4
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	079b      	lsls	r3, r3, #30
 8007f2c:	d4c8      	bmi.n	8007ec0 <d7ap_fs_write_file_with_callback+0x48>
    return -EACCES;
 8007f2e:	240d      	movs	r4, #13
 8007f30:	4264      	negs	r4, r4
 8007f32:	e7ea      	b.n	8007f0a <d7ap_fs_write_file_with_callback+0x92>
    rtc = execute_d7a_action_protocol(header.action_file_id, header.interface_file_id);
 8007f34:	ab01      	add	r3, sp, #4
 8007f36:	78d9      	ldrb	r1, [r3, #3]
 8007f38:	7898      	ldrb	r0, [r3, #2]
 8007f3a:	f7ff fe73 	bl	8007c24 <execute_d7a_action_protocol>
    if(rtc != SUCCESS)
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d0d9      	beq.n	8007ef6 <d7ap_fs_write_file_with_callback+0x7e>
      return rtc;
 8007f42:	0004      	movs	r4, r0
 8007f44:	e7e1      	b.n	8007f0a <d7ap_fs_write_file_with_callback+0x92>
  if(!fs_is_file_defined(file_id)) return -ENOENT;
 8007f46:	2402      	movs	r4, #2
 8007f48:	4264      	negs	r4, r4
 8007f4a:	e7de      	b.n	8007f0a <d7ap_fs_write_file_with_callback+0x92>
    return -EINVAL;
 8007f4c:	2416      	movs	r4, #22
 8007f4e:	4264      	negs	r4, r4
 8007f50:	e7db      	b.n	8007f0a <d7ap_fs_write_file_with_callback+0x92>
          return -EILSEQ;
 8007f52:	248a      	movs	r4, #138	; 0x8a
 8007f54:	4264      	negs	r4, r4
 8007f56:	e7d8      	b.n	8007f0a <d7ap_fs_write_file_with_callback+0x92>
 8007f58:	20002c88 	.word	0x20002c88
 8007f5c:	20002b68 	.word	0x20002b68

08007f60 <d7ap_fs_write_file>:
{
 8007f60:	b530      	push	{r4, r5, lr}
 8007f62:	b083      	sub	sp, #12
 8007f64:	ac06      	add	r4, sp, #24
 8007f66:	7824      	ldrb	r4, [r4, #0]
    return d7ap_fs_write_file_with_callback(file_id, offset, buffer, length, auth, true);
 8007f68:	2501      	movs	r5, #1
 8007f6a:	9501      	str	r5, [sp, #4]
 8007f6c:	9400      	str	r4, [sp, #0]
 8007f6e:	f7ff ff83 	bl	8007e78 <d7ap_fs_write_file_with_callback>
}
 8007f72:	b003      	add	sp, #12
 8007f74:	bd30      	pop	{r4, r5, pc}
	...

08007f78 <d7ap_fs_init>:
{
 8007f78:	b510      	push	{r4, lr}
 8007f7a:	b08c      	sub	sp, #48	; 0x30
  fs_init();
 8007f7c:	f006 ff16 	bl	800edac <fs_init>
  uint8_t uid[8] = {0};
 8007f80:	2300      	movs	r3, #0
 8007f82:	930a      	str	r3, [sp, #40]	; 0x28
 8007f84:	930b      	str	r3, [sp, #44]	; 0x2c
  uint8_t uid_not_set[8] = { 0 };
 8007f86:	9308      	str	r3, [sp, #32]
 8007f88:	9309      	str	r3, [sp, #36]	; 0x24
  d7ap_fs_read_uid(uid);
 8007f8a:	a80a      	add	r0, sp, #40	; 0x28
 8007f8c:	f7ff fed2 	bl	8007d34 <d7ap_fs_read_uid>
  if(memcmp(uid, uid_not_set, 8) == 0) {
 8007f90:	2208      	movs	r2, #8
 8007f92:	a908      	add	r1, sp, #32
 8007f94:	a80a      	add	r0, sp, #40	; 0x28
 8007f96:	f00c fef3 	bl	8014d80 <memcmp>
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d01f      	beq.n	8007fde <d7ap_fs_init+0x66>
  firmware_version[0] = D7A_PROTOCOL_VERSION_MAJOR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	466a      	mov	r2, sp
 8007fa2:	7413      	strb	r3, [r2, #16]
  firmware_version[1] = D7A_PROTOCOL_VERSION_MINOR;
 8007fa4:	7453      	strb	r3, [r2, #17]
  d7ap_fs_write_file(D7A_FILE_FIRMWARE_VERSION_FILE_ID, 0, firmware_version, 2, ROOT_AUTH);
 8007fa6:	2400      	movs	r4, #0
 8007fa8:	9400      	str	r4, [sp, #0]
 8007faa:	3301      	adds	r3, #1
 8007fac:	aa04      	add	r2, sp, #16
 8007fae:	2100      	movs	r1, #0
 8007fb0:	2002      	movs	r0, #2
 8007fb2:	f7ff ffd5 	bl	8007f60 <d7ap_fs_write_file>
  memcpy(firmware_version, _APP_NAME, D7A_FILE_FIRMWARE_VERSION_APP_NAME_SIZE);
 8007fb6:	2206      	movs	r2, #6
 8007fb8:	4910      	ldr	r1, [pc, #64]	; (8007ffc <d7ap_fs_init+0x84>)
 8007fba:	a804      	add	r0, sp, #16
 8007fbc:	f00c ff08 	bl	8014dd0 <memcpy>
  memcpy(firmware_version + D7A_FILE_FIRMWARE_VERSION_APP_NAME_SIZE, _GIT_SHA1, D7A_FILE_FIRMWARE_VERSION_GIT_SHA1_SIZE);
 8007fc0:	2207      	movs	r2, #7
 8007fc2:	490f      	ldr	r1, [pc, #60]	; (8008000 <d7ap_fs_init+0x88>)
 8007fc4:	2016      	movs	r0, #22
 8007fc6:	4468      	add	r0, sp
 8007fc8:	f00c ff02 	bl	8014dd0 <memcpy>
  d7ap_fs_write_file(D7A_FILE_FIRMWARE_VERSION_FILE_ID, 4, firmware_version, D7A_FILE_FIRMWARE_VERSION_APP_NAME_SIZE + D7A_FILE_FIRMWARE_VERSION_GIT_SHA1_SIZE, ROOT_AUTH);
 8007fcc:	9400      	str	r4, [sp, #0]
 8007fce:	230d      	movs	r3, #13
 8007fd0:	aa04      	add	r2, sp, #16
 8007fd2:	2104      	movs	r1, #4
 8007fd4:	2002      	movs	r0, #2
 8007fd6:	f7ff ffc3 	bl	8007f60 <d7ap_fs_write_file>
}
 8007fda:	b00c      	add	sp, #48	; 0x30
 8007fdc:	bd10      	pop	{r4, pc}
    uint64_t id = hw_get_unique_id();
 8007fde:	f003 fdfb 	bl	800bbd8 <hw_get_unique_id>
    uint64_t id_be = __builtin_bswap64(id);
 8007fe2:	ba00      	rev	r0, r0
 8007fe4:	ba09      	rev	r1, r1
 8007fe6:	9102      	str	r1, [sp, #8]
 8007fe8:	9003      	str	r0, [sp, #12]
    d7ap_fs_write_file(D7A_FILE_UID_FILE_ID, 0, (const uint8_t*)&id_be, D7A_FILE_UID_SIZE, ROOT_AUTH);
 8007fea:	2300      	movs	r3, #0
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	3308      	adds	r3, #8
 8007ff0:	aa02      	add	r2, sp, #8
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	f7ff ffb3 	bl	8007f60 <d7ap_fs_write_file>
 8007ffa:	e7d0      	b.n	8007f9e <d7ap_fs_init+0x26>
 8007ffc:	08016940 	.word	0x08016940
 8008000:	08016950 	.word	0x08016950

08008004 <d7ap_fs_write_nwl_security>:
{
 8008004:	b510      	push	{r4, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	0004      	movs	r4, r0
  if(!fs_is_file_defined(D7A_FILE_NWL_SECURITY)) return -ENOENT;
 800800a:	200d      	movs	r0, #13
 800800c:	f006 ffb4 	bl	800ef78 <fs_is_file_defined>
 8008010:	2800      	cmp	r0, #0
 8008012:	d011      	beq.n	8008038 <d7ap_fs_write_nwl_security+0x34>
  memcpy(&sec, nwl_security, sizeof (sec));
 8008014:	2208      	movs	r2, #8
 8008016:	0021      	movs	r1, r4
 8008018:	a802      	add	r0, sp, #8
 800801a:	f00c fed9 	bl	8014dd0 <memcpy>
  sec.frame_counter = (uint32_t)__builtin_bswap32(nwl_security->frame_counter); // correct endianess
 800801e:	6863      	ldr	r3, [r4, #4]
 8008020:	ba1b      	rev	r3, r3
 8008022:	9303      	str	r3, [sp, #12]
  return (d7ap_fs_write_file(D7A_FILE_NWL_SECURITY, 0, (uint8_t*)&sec, D7A_FILE_NWL_SECURITY_SIZE, ROOT_AUTH));
 8008024:	2300      	movs	r3, #0
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	3305      	adds	r3, #5
 800802a:	aa02      	add	r2, sp, #8
 800802c:	2100      	movs	r1, #0
 800802e:	200d      	movs	r0, #13
 8008030:	f7ff ff96 	bl	8007f60 <d7ap_fs_write_file>
}
 8008034:	b004      	add	sp, #16
 8008036:	bd10      	pop	{r4, pc}
  if(!fs_is_file_defined(D7A_FILE_NWL_SECURITY)) return -ENOENT;
 8008038:	2002      	movs	r0, #2
 800803a:	4240      	negs	r0, r0
 800803c:	e7fa      	b.n	8008034 <d7ap_fs_write_nwl_security+0x30>
	...

08008040 <write_security_state_register_entry>:
{
 8008040:	b510      	push	{r4, lr}
 8008042:	b088      	sub	sp, #32
  assert(trusted_node_nb <= FRAMEWORK_FS_TRUSTED_NODE_TABLE_SIZE);
 8008044:	2910      	cmp	r1, #16
 8008046:	d81a      	bhi.n	800807e <write_security_state_register_entry+0x3e>
  uint16_t entry_offset = (D7A_FILE_NWL_SECURITY_SIZE + D7A_FILE_UID_SIZE)*(trusted_node_nb - 1) + 2;
 8008048:	3901      	subs	r1, #1
 800804a:	004c      	lsls	r4, r1, #1
 800804c:	190c      	adds	r4, r1, r4
 800804e:	00a4      	lsls	r4, r4, #2
 8008050:	190c      	adds	r4, r1, r4
 8008052:	b2a4      	uxth	r4, r4
 8008054:	3402      	adds	r4, #2
 8008056:	b2a4      	uxth	r4, r4
  memcpy(&node, trusted_node, sizeof(dae_nwl_trusted_node_t));
 8008058:	2210      	movs	r2, #16
 800805a:	0001      	movs	r1, r0
 800805c:	a804      	add	r0, sp, #16
 800805e:	f00c feb7 	bl	8014dd0 <memcpy>
  node.frame_counter = __builtin_bswap32(node.frame_counter);
 8008062:	9b05      	ldr	r3, [sp, #20]
 8008064:	9303      	str	r3, [sp, #12]
 8008066:	ba1b      	rev	r3, r3
 8008068:	9305      	str	r3, [sp, #20]
  return (d7ap_fs_write_file(D7A_FILE_NWL_SECURITY, entry_offset, (uint8_t*)&node, sizeof(dae_nwl_trusted_node_t), ROOT_AUTH));
 800806a:	2300      	movs	r3, #0
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	3310      	adds	r3, #16
 8008070:	aa04      	add	r2, sp, #16
 8008072:	0021      	movs	r1, r4
 8008074:	200d      	movs	r0, #13
 8008076:	f7ff ff73 	bl	8007f60 <d7ap_fs_write_file>
}
 800807a:	b008      	add	sp, #32
 800807c:	bd10      	pop	{r4, pc}
  assert(trusted_node_nb <= FRAMEWORK_FS_TRUSTED_NODE_TABLE_SIZE);
 800807e:	2170      	movs	r1, #112	; 0x70
 8008080:	4b02      	ldr	r3, [pc, #8]	; (800808c <write_security_state_register_entry+0x4c>)
 8008082:	4a03      	ldr	r2, [pc, #12]	; (8008090 <write_security_state_register_entry+0x50>)
 8008084:	31ff      	adds	r1, #255	; 0xff
 8008086:	4803      	ldr	r0, [pc, #12]	; (8008094 <write_security_state_register_entry+0x54>)
 8008088:	f000 faba 	bl	8008600 <__assert_func>
 800808c:	080194a4 	.word	0x080194a4
 8008090:	08019518 	.word	0x08019518
 8008094:	080194dc 	.word	0x080194dc

08008098 <d7ap_fs_add_nwl_security_state_register_entry>:
{
 8008098:	b530      	push	{r4, r5, lr}
 800809a:	b085      	sub	sp, #20
 800809c:	0004      	movs	r4, r0
 800809e:	230f      	movs	r3, #15
 80080a0:	446b      	add	r3, sp
 80080a2:	7019      	strb	r1, [r3, #0]
  assert(trusted_node_nb <= FRAMEWORK_FS_TRUSTED_NODE_TABLE_SIZE);
 80080a4:	2910      	cmp	r1, #16
 80080a6:	d814      	bhi.n	80080d2 <d7ap_fs_add_nwl_security_state_register_entry+0x3a>
  if(!fs_is_file_defined(D7A_FILE_NWL_SECURITY_STATE_REG)) return -ENOENT;
 80080a8:	200f      	movs	r0, #15
 80080aa:	f006 ff65 	bl	800ef78 <fs_is_file_defined>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d016      	beq.n	80080e0 <d7ap_fs_add_nwl_security_state_register_entry+0x48>
  write_security_state_register_entry(trusted_node, trusted_node_nb);
 80080b2:	250f      	movs	r5, #15
 80080b4:	446d      	add	r5, sp
 80080b6:	7829      	ldrb	r1, [r5, #0]
 80080b8:	0020      	movs	r0, r4
 80080ba:	f7ff ffc1 	bl	8008040 <write_security_state_register_entry>
  return (d7ap_fs_write_file(D7A_FILE_NWL_SECURITY, 1, &trusted_node_nb, 1, ROOT_AUTH));
 80080be:	2300      	movs	r3, #0
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	3301      	adds	r3, #1
 80080c4:	002a      	movs	r2, r5
 80080c6:	2101      	movs	r1, #1
 80080c8:	200d      	movs	r0, #13
 80080ca:	f7ff ff49 	bl	8007f60 <d7ap_fs_write_file>
}
 80080ce:	b005      	add	sp, #20
 80080d0:	bd30      	pop	{r4, r5, pc}
  assert(trusted_node_nb <= FRAMEWORK_FS_TRUSTED_NODE_TABLE_SIZE);
 80080d2:	217e      	movs	r1, #126	; 0x7e
 80080d4:	4b04      	ldr	r3, [pc, #16]	; (80080e8 <d7ap_fs_add_nwl_security_state_register_entry+0x50>)
 80080d6:	4a05      	ldr	r2, [pc, #20]	; (80080ec <d7ap_fs_add_nwl_security_state_register_entry+0x54>)
 80080d8:	31ff      	adds	r1, #255	; 0xff
 80080da:	4805      	ldr	r0, [pc, #20]	; (80080f0 <d7ap_fs_add_nwl_security_state_register_entry+0x58>)
 80080dc:	f000 fa90 	bl	8008600 <__assert_func>
  if(!fs_is_file_defined(D7A_FILE_NWL_SECURITY_STATE_REG)) return -ENOENT;
 80080e0:	2002      	movs	r0, #2
 80080e2:	4240      	negs	r0, r0
 80080e4:	e7f3      	b.n	80080ce <d7ap_fs_add_nwl_security_state_register_entry+0x36>
 80080e6:	46c0      	nop			; (mov r8, r8)
 80080e8:	080194a4 	.word	0x080194a4
 80080ec:	0801953c 	.word	0x0801953c
 80080f0:	080194dc 	.word	0x080194dc

080080f4 <d7ap_fs_write_dll_conf_active_access_class>:
{
 80080f4:	b500      	push	{lr}
 80080f6:	b085      	sub	sp, #20
 80080f8:	220f      	movs	r2, #15
 80080fa:	446a      	add	r2, sp
 80080fc:	7010      	strb	r0, [r2, #0]
  return (d7ap_fs_write_file(D7A_FILE_DLL_CONF_FILE_ID, 0, &access_class, 1, ROOT_AUTH));
 80080fe:	2300      	movs	r3, #0
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	3301      	adds	r3, #1
 8008104:	2100      	movs	r1, #0
 8008106:	200a      	movs	r0, #10
 8008108:	f7ff ff2a 	bl	8007f60 <d7ap_fs_write_file>
}
 800810c:	b005      	add	sp, #20
 800810e:	bd00      	pop	{pc}

08008110 <d7ap_fs_unregister_file_modified_callback>:

  return d7ap_fs_write_file_header(file_id, &header, ROOT_AUTH);
}

bool d7ap_fs_unregister_file_modified_callback(uint8_t file_id) {
    if(file_modified_callbacks[file_id]) {
 8008110:	0082      	lsls	r2, r0, #2
 8008112:	4b06      	ldr	r3, [pc, #24]	; (800812c <d7ap_fs_unregister_file_modified_callback+0x1c>)
 8008114:	58d3      	ldr	r3, [r2, r3]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d005      	beq.n	8008126 <d7ap_fs_unregister_file_modified_callback+0x16>
        file_modified_callbacks[file_id] = NULL;
 800811a:	0010      	movs	r0, r2
 800811c:	4b03      	ldr	r3, [pc, #12]	; (800812c <d7ap_fs_unregister_file_modified_callback+0x1c>)
 800811e:	2200      	movs	r2, #0
 8008120:	50c2      	str	r2, [r0, r3]
        return true;
 8008122:	2001      	movs	r0, #1
    } else
        return false;
}
 8008124:	4770      	bx	lr
        return false;
 8008126:	2000      	movs	r0, #0
 8008128:	e7fc      	b.n	8008124 <d7ap_fs_unregister_file_modified_callback+0x14>
 800812a:	46c0      	nop			; (mov r8, r8)
 800812c:	20002b68 	.word	0x20002b68

08008130 <d7ap_fs_register_file_modified_callback>:

bool d7ap_fs_register_file_modified_callback(uint8_t file_id, d7ap_fs_modified_file_callback_t callback)
{
 8008130:	b570      	push	{r4, r5, r6, lr}
 8008132:	0004      	movs	r4, r0
 8008134:	000d      	movs	r5, r1
    if(!fs_is_file_defined(file_id))
 8008136:	f006 ff1f 	bl	800ef78 <fs_is_file_defined>
 800813a:	2800      	cmp	r0, #0
 800813c:	d005      	beq.n	800814a <d7ap_fs_register_file_modified_callback+0x1a>
        return false;

    if(file_modified_callbacks[file_id])
 800813e:	00a3      	lsls	r3, r4, #2
 8008140:	4a04      	ldr	r2, [pc, #16]	; (8008154 <d7ap_fs_register_file_modified_callback+0x24>)
 8008142:	589b      	ldr	r3, [r3, r2]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <d7ap_fs_register_file_modified_callback+0x1c>
        return false; // already registered
 8008148:	2000      	movs	r0, #0

    file_modified_callbacks[file_id] = callback;
    return true;
}
 800814a:	bd70      	pop	{r4, r5, r6, pc}
    file_modified_callbacks[file_id] = callback;
 800814c:	00a4      	lsls	r4, r4, #2
 800814e:	50a5      	str	r5, [r4, r2]
    return true;
 8008150:	e7fb      	b.n	800814a <d7ap_fs_register_file_modified_callback+0x1a>
 8008152:	46c0      	nop			; (mov r8, r8)
 8008154:	20002b68 	.word	0x20002b68

08008158 <__framework_bootstrap>:
#include "console.h"
#endif

void bootstrap(void *arg);
void __framework_bootstrap()
{
 8008158:	b510      	push	{r4, lr}
    //initialise the scheduler & timers
    timer_init();
 800815a:	f008 f889 	bl	8010270 <timer_init>
    scheduler_init();
 800815e:	f007 f9d3 	bl	800f508 <scheduler_init>
    //initialise libc RNG with the unique device id
    set_rng_seed((unsigned int)hw_get_unique_id());
 8008162:	f003 fd39 	bl	800bbd8 <hw_get_unique_id>
 8008166:	f007 f86d 	bl	800f244 <set_rng_seed>
    //reset the log counter
    log_counter_reset();
 800816a:	f006 ff19 	bl	800efa0 <log_counter_reset>

#ifdef FRAMEWORK_CONSOLE_ENABLED
    console_init();
 800816e:	f005 ffff 	bl	800e170 <console_init>
 8008172:	4c05      	ldr	r4, [pc, #20]	; (8008188 <__framework_bootstrap+0x30>)
 8008174:	2100      	movs	r1, #0
 8008176:	0020      	movs	r0, r4
 8008178:	f007 f978 	bl	800f46c <sched_register_task_allow_multiple>
static inline error_t sched_post_task(task_t task) { return sched_post_task_prio(task,DEFAULT_PRIORITY, NULL);}
 800817c:	2200      	movs	r2, #0
 800817e:	2107      	movs	r1, #7
 8008180:	0020      	movs	r0, r4
 8008182:	f007 fa0f 	bl	800f5a4 <sched_post_task_prio>
#endif

    //register the user bootstrap function();
    sched_register_task(&bootstrap);
    sched_post_task(&bootstrap);
}
 8008186:	bd10      	pop	{r4, pc}
 8008188:	080003f1 	.word	0x080003f1

0800818c <hw_radio_reset>:

#if defined(USE_SX127X) && defined(PLATFORM_SX127X_USE_RESET_PIN)
// override the weak definition
// TODO might be moved to radio driver is hw_gpio_configure_pin() is part of public HAL API instead of platform specific
void hw_radio_reset()
{
 800818c:	b510      	push	{r4, lr}
  error_t e;
  e = hw_gpio_configure_pin(SX127x_RESET_PIN, false, GPIO_MODE_OUTPUT_PP, 0); assert(e == SUCCESS);
 800818e:	2300      	movs	r3, #0
 8008190:	2201      	movs	r2, #1
 8008192:	2100      	movs	r1, #0
 8008194:	480f      	ldr	r0, [pc, #60]	; (80081d4 <hw_radio_reset+0x48>)
 8008196:	f002 ff27 	bl	800afe8 <hw_gpio_configure_pin>
 800819a:	2800      	cmp	r0, #0
 800819c:	d10e      	bne.n	80081bc <hw_radio_reset+0x30>
  hw_busy_wait(150);
 800819e:	2096      	movs	r0, #150	; 0x96
 80081a0:	f003 fd28 	bl	800bbf4 <hw_busy_wait>
  e = hw_gpio_configure_pin(SX127x_RESET_PIN, false, GPIO_MODE_INPUT, 1); assert(e == SUCCESS);
 80081a4:	2301      	movs	r3, #1
 80081a6:	2200      	movs	r2, #0
 80081a8:	2100      	movs	r1, #0
 80081aa:	480a      	ldr	r0, [pc, #40]	; (80081d4 <hw_radio_reset+0x48>)
 80081ac:	f002 ff1c 	bl	800afe8 <hw_gpio_configure_pin>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d109      	bne.n	80081c8 <hw_radio_reset+0x3c>
  hw_busy_wait(10000);
 80081b4:	4808      	ldr	r0, [pc, #32]	; (80081d8 <hw_radio_reset+0x4c>)
 80081b6:	f003 fd1d 	bl	800bbf4 <hw_busy_wait>
}
 80081ba:	bd10      	pop	{r4, pc}
  e = hw_gpio_configure_pin(SX127x_RESET_PIN, false, GPIO_MODE_OUTPUT_PP, 0); assert(e == SUCCESS);
 80081bc:	4b07      	ldr	r3, [pc, #28]	; (80081dc <hw_radio_reset+0x50>)
 80081be:	4a08      	ldr	r2, [pc, #32]	; (80081e0 <hw_radio_reset+0x54>)
 80081c0:	213e      	movs	r1, #62	; 0x3e
 80081c2:	4808      	ldr	r0, [pc, #32]	; (80081e4 <hw_radio_reset+0x58>)
 80081c4:	f000 fa1c 	bl	8008600 <__assert_func>
  e = hw_gpio_configure_pin(SX127x_RESET_PIN, false, GPIO_MODE_INPUT, 1); assert(e == SUCCESS);
 80081c8:	4b04      	ldr	r3, [pc, #16]	; (80081dc <hw_radio_reset+0x50>)
 80081ca:	4a05      	ldr	r2, [pc, #20]	; (80081e0 <hw_radio_reset+0x54>)
 80081cc:	2140      	movs	r1, #64	; 0x40
 80081ce:	4805      	ldr	r0, [pc, #20]	; (80081e4 <hw_radio_reset+0x58>)
 80081d0:	f000 fa16 	bl	8008600 <__assert_func>
 80081d4:	50000800 	.word	0x50000800
 80081d8:	00002710 	.word	0x00002710
 80081dc:	0801956c 	.word	0x0801956c
 80081e0:	080195d0 	.word	0x080195d0
 80081e4:	0801957c 	.word	0x0801957c

080081e8 <__platform_post_framework_init>:
    blockdevice_init(persistent_files_blockdevice);
    blockdevice_init(volatile_blockdevice);
}

void __platform_post_framework_init()
{
 80081e8:	b510      	push	{r4, lr}
    __ubutton_init();
 80081ea:	f000 f9ad 	bl	8008548 <__ubutton_init>
    led_init();
 80081ee:	f000 f935 	bl	800845c <led_init>
}
 80081f2:	bd10      	pop	{r4, pc}

080081f4 <hw_radio_io_init>:
    return 0;
}

#if defined(USE_SX127X) || defined(USE_NETDEV_DRIVER)
// override the weak definition
void hw_radio_io_init(bool disable_interrupts) {
 80081f4:	b510      	push	{r4, lr}
 80081f6:	0004      	movs	r4, r0
  // configure the radio GPIO pins here, since hw_gpio_configure_pin() is MCU
  // specific and not part of the common HAL API
  hw_gpio_configure_pin(SX127x_DIO0_PIN, true, GPIO_MODE_INPUT, 0);
 80081f8:	2300      	movs	r3, #0
 80081fa:	2200      	movs	r2, #0
 80081fc:	2101      	movs	r1, #1
 80081fe:	481d      	ldr	r0, [pc, #116]	; (8008274 <hw_radio_io_init+0x80>)
 8008200:	f002 fef2 	bl	800afe8 <hw_gpio_configure_pin>
  hw_gpio_configure_pin(SX127x_DIO1_PIN, true, GPIO_MODE_INPUT, 0);
 8008204:	2300      	movs	r3, #0
 8008206:	2200      	movs	r2, #0
 8008208:	2101      	movs	r1, #1
 800820a:	481b      	ldr	r0, [pc, #108]	; (8008278 <hw_radio_io_init+0x84>)
 800820c:	f002 feec 	bl	800afe8 <hw_gpio_configure_pin>

  if(disable_interrupts)
 8008210:	2c00      	cmp	r4, #0
 8008212:	d124      	bne.n	800825e <hw_radio_io_init+0x6a>
      hw_gpio_disable_interrupt(SX127x_DIO1_PIN);
      hw_gpio_disable_interrupt(SX127x_DIO0_PIN);
  }

  // Antenna switching uses 3 pins on murata ABZ module
  hw_gpio_configure_pin(ABZ_ANT_SW_RX_PIN, false, GPIO_MODE_OUTPUT_PP, 0);
 8008214:	2300      	movs	r3, #0
 8008216:	2201      	movs	r2, #1
 8008218:	2100      	movs	r1, #0
 800821a:	4818      	ldr	r0, [pc, #96]	; (800827c <hw_radio_io_init+0x88>)
 800821c:	f002 fee4 	bl	800afe8 <hw_gpio_configure_pin>
  hw_gpio_configure_pin(ABZ_ANT_SW_TX_PIN, false, GPIO_MODE_OUTPUT_PP, 0);
 8008220:	2300      	movs	r3, #0
 8008222:	2201      	movs	r2, #1
 8008224:	2100      	movs	r1, #0
 8008226:	4816      	ldr	r0, [pc, #88]	; (8008280 <hw_radio_io_init+0x8c>)
 8008228:	f002 fede 	bl	800afe8 <hw_gpio_configure_pin>
  hw_gpio_configure_pin(ABZ_ANT_SW_PA_BOOST_PIN, false, GPIO_MODE_OUTPUT_PP, 0);
 800822c:	2300      	movs	r3, #0
 800822e:	2201      	movs	r2, #1
 8008230:	2100      	movs	r1, #0
 8008232:	4814      	ldr	r0, [pc, #80]	; (8008284 <hw_radio_io_init+0x90>)
 8008234:	f002 fed8 	bl	800afe8 <hw_gpio_configure_pin>

#ifdef PLATFORM_SX127X_USE_DIO3_PIN
  hw_gpio_configure_pin(SX127x_DIO3_PIN, true, GPIO_MODE_INPUT, 0);
 8008238:	2300      	movs	r3, #0
 800823a:	2200      	movs	r2, #0
 800823c:	2101      	movs	r1, #1
 800823e:	4812      	ldr	r0, [pc, #72]	; (8008288 <hw_radio_io_init+0x94>)
 8008240:	f002 fed2 	bl	800afe8 <hw_gpio_configure_pin>
  if(disable_interrupts)
 8008244:	2c00      	cmp	r4, #0
 8008246:	d111      	bne.n	800826c <hw_radio_io_init+0x78>
    hw_gpio_disable_interrupt(SX127x_DIO3_PIN);
#endif
#ifdef PLATFORM_SX127X_USE_VCC_TXCO
  hw_gpio_configure_pin(SX127x_VCC_TXCO, false, GPIO_MODE_OUTPUT_PP, 1);
 8008248:	4c10      	ldr	r4, [pc, #64]	; (800828c <hw_radio_io_init+0x98>)
 800824a:	2301      	movs	r3, #1
 800824c:	2201      	movs	r2, #1
 800824e:	2100      	movs	r1, #0
 8008250:	0020      	movs	r0, r4
 8008252:	f002 fec9 	bl	800afe8 <hw_gpio_configure_pin>
  hw_gpio_set(SX127x_VCC_TXCO);
 8008256:	0020      	movs	r0, r4
 8008258:	f002 fc8c 	bl	800ab74 <hw_gpio_set>
#endif
}
 800825c:	bd10      	pop	{r4, pc}
      hw_gpio_disable_interrupt(SX127x_DIO1_PIN);
 800825e:	4806      	ldr	r0, [pc, #24]	; (8008278 <hw_radio_io_init+0x84>)
 8008260:	f002 fde2 	bl	800ae28 <hw_gpio_disable_interrupt>
      hw_gpio_disable_interrupt(SX127x_DIO0_PIN);
 8008264:	4803      	ldr	r0, [pc, #12]	; (8008274 <hw_radio_io_init+0x80>)
 8008266:	f002 fddf 	bl	800ae28 <hw_gpio_disable_interrupt>
 800826a:	e7d3      	b.n	8008214 <hw_radio_io_init+0x20>
    hw_gpio_disable_interrupt(SX127x_DIO3_PIN);
 800826c:	4806      	ldr	r0, [pc, #24]	; (8008288 <hw_radio_io_init+0x94>)
 800826e:	f002 fddb 	bl	800ae28 <hw_gpio_disable_interrupt>
 8008272:	e7e9      	b.n	8008248 <hw_radio_io_init+0x54>
 8008274:	50000404 	.word	0x50000404
 8008278:	50000401 	.word	0x50000401
 800827c:	50000001 	.word	0x50000001
 8008280:	50000802 	.word	0x50000802
 8008284:	50000801 	.word	0x50000801
 8008288:	5000080d 	.word	0x5000080d
 800828c:	5000000c 	.word	0x5000000c

08008290 <__platform_init>:
{
 8008290:	b570      	push	{r4, r5, r6, lr}
    __gpio_init();
 8008292:	f002 fbcd 	bl	800aa30 <__gpio_init>
    __hw_debug_init();
 8008296:	f000 f9a9 	bl	80085ec <__hw_debug_init>
    hw_radio_io_init(true);
 800829a:	2001      	movs	r0, #1
 800829c:	f7ff ffaa 	bl	80081f4 <hw_radio_io_init>
    hw_radio_reset();
 80082a0:	f7ff ff74 	bl	800818c <hw_radio_reset>
    HAL_EnableDBGSleepMode(); // TODO impact on power?
 80082a4:	f000 fa4a 	bl	800873c <HAL_DBGMCU_EnableDBGSleepMode>
    stm32_eeprom_metadata_bd->base.driver = &blockdevice_driver_stm32_eeprom;
 80082a8:	480b      	ldr	r0, [pc, #44]	; (80082d8 <__platform_init+0x48>)
 80082aa:	4d0c      	ldr	r5, [pc, #48]	; (80082dc <__platform_init+0x4c>)
 80082ac:	6005      	str	r5, [r0, #0]
    stm32_eeprom_metadata_bd->base.offset = 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	6083      	str	r3, [r0, #8]
    stm32_eeprom_metadata_bd->base.size = (uint32_t)((uint8_t*)&__d7ap_fs_metadata_end - (uint8_t*)&__d7ap_fs_metadata_start);
 80082b2:	4c0b      	ldr	r4, [pc, #44]	; (80082e0 <__platform_init+0x50>)
 80082b4:	4b0b      	ldr	r3, [pc, #44]	; (80082e4 <__platform_init+0x54>)
 80082b6:	1ae4      	subs	r4, r4, r3
 80082b8:	6044      	str	r4, [r0, #4]
    blockdevice_init(metadata_blockdevice);
 80082ba:	f008 fb0f 	bl	80108dc <blockdevice_init>
    stm32_eeprom_permanent_files_bd->base.driver = &blockdevice_driver_stm32_eeprom;
 80082be:	480a      	ldr	r0, [pc, #40]	; (80082e8 <__platform_init+0x58>)
 80082c0:	6005      	str	r5, [r0, #0]
    stm32_eeprom_permanent_files_bd->base.offset = (uint32_t)((uint8_t*)&__d7ap_fs_metadata_end - (uint8_t*)&__d7ap_fs_metadata_start); // blockdevices begins after metadata block device // TODO aligment on sector?
 80082c2:	6084      	str	r4, [r0, #8]
    stm32_eeprom_permanent_files_bd->base.size = (uint32_t)((uint8_t*)&__d7ap_fs_permanent_files_end - (uint8_t*)&__d7ap_fs_permanent_files_start);
 80082c4:	4b09      	ldr	r3, [pc, #36]	; (80082ec <__platform_init+0x5c>)
 80082c6:	4a0a      	ldr	r2, [pc, #40]	; (80082f0 <__platform_init+0x60>)
 80082c8:	1a9b      	subs	r3, r3, r2
 80082ca:	6043      	str	r3, [r0, #4]
    blockdevice_init(persistent_files_blockdevice);
 80082cc:	f008 fb06 	bl	80108dc <blockdevice_init>
    blockdevice_init(volatile_blockdevice);
 80082d0:	4808      	ldr	r0, [pc, #32]	; (80082f4 <__platform_init+0x64>)
 80082d2:	f008 fb03 	bl	80108dc <blockdevice_init>
}
 80082d6:	bd70      	pop	{r4, r5, r6, pc}
 80082d8:	20002de8 	.word	0x20002de8
 80082dc:	20000578 	.word	0x20000578
 80082e0:	08080908 	.word	0x08080908
 80082e4:	08080000 	.word	0x08080000
 80082e8:	20002df4 	.word	0x20002df4
 80082ec:	080811a0 	.word	0x080811a0
 80082f0:	08080908 	.word	0x08080908
 80082f4:	20000560 	.word	0x20000560

080082f8 <main>:
{
 80082f8:	b510      	push	{r4, lr}
    __platform_init();
 80082fa:	f7ff ffc9 	bl	8008290 <__platform_init>
    __framework_bootstrap();
 80082fe:	f7ff ff2b 	bl	8008158 <__framework_bootstrap>
    __platform_post_framework_init();
 8008302:	f7ff ff71 	bl	80081e8 <__platform_post_framework_init>
    scheduler_run();
 8008306:	f007 faa7 	bl	800f858 <scheduler_run>
}
 800830a:	2000      	movs	r0, #0
 800830c:	bd10      	pop	{r4, pc}
	...

08008310 <hw_radio_io_deinit>:

// override the weak definition
void hw_radio_io_deinit() {
 8008310:	b510      	push	{r4, lr}
 8008312:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8008314:	2214      	movs	r2, #20
 8008316:	2100      	movs	r1, #0
 8008318:	a801      	add	r0, sp, #4
 800831a:	f00c fdad 	bl	8014e78 <memset>
  initStruct.Mode = GPIO_MODE_ANALOG;
 800831e:	2303      	movs	r3, #3
 8008320:	9302      	str	r3, [sp, #8]

  hw_gpio_configure_pin_stm(SX127x_DIO0_PIN, &initStruct);
 8008322:	a901      	add	r1, sp, #4
 8008324:	4816      	ldr	r0, [pc, #88]	; (8008380 <hw_radio_io_deinit+0x70>)
 8008326:	f002 fd8b 	bl	800ae40 <hw_gpio_configure_pin_stm>
  hw_gpio_configure_pin_stm(SX127x_DIO1_PIN, &initStruct);
 800832a:	a901      	add	r1, sp, #4
 800832c:	4815      	ldr	r0, [pc, #84]	; (8008384 <hw_radio_io_deinit+0x74>)
 800832e:	f002 fd87 	bl	800ae40 <hw_gpio_configure_pin_stm>
#ifdef PLATFORM_SX127X_USE_DIO3_PIN
  hw_gpio_configure_pin_stm(SX127x_DIO3_PIN, &initStruct);
 8008332:	a901      	add	r1, sp, #4
 8008334:	4814      	ldr	r0, [pc, #80]	; (8008388 <hw_radio_io_deinit+0x78>)
 8008336:	f002 fd83 	bl	800ae40 <hw_gpio_configure_pin_stm>
#endif
  hw_gpio_configure_pin_stm(ABZ_ANT_SW_RX_PIN, &initStruct);
 800833a:	4c14      	ldr	r4, [pc, #80]	; (800838c <hw_radio_io_deinit+0x7c>)
 800833c:	a901      	add	r1, sp, #4
 800833e:	0020      	movs	r0, r4
 8008340:	f002 fd7e 	bl	800ae40 <hw_gpio_configure_pin_stm>
  hw_gpio_clr(ABZ_ANT_SW_RX_PIN);
 8008344:	0020      	movs	r0, r4
 8008346:	f002 fc22 	bl	800ab8e <hw_gpio_clr>
  hw_gpio_configure_pin_stm(ABZ_ANT_SW_TX_PIN, &initStruct);
 800834a:	4c11      	ldr	r4, [pc, #68]	; (8008390 <hw_radio_io_deinit+0x80>)
 800834c:	a901      	add	r1, sp, #4
 800834e:	0020      	movs	r0, r4
 8008350:	f002 fd76 	bl	800ae40 <hw_gpio_configure_pin_stm>
  hw_gpio_clr(ABZ_ANT_SW_TX_PIN);
 8008354:	0020      	movs	r0, r4
 8008356:	f002 fc1a 	bl	800ab8e <hw_gpio_clr>
  hw_gpio_configure_pin_stm(ABZ_ANT_SW_PA_BOOST_PIN, &initStruct);
 800835a:	4c0e      	ldr	r4, [pc, #56]	; (8008394 <hw_radio_io_deinit+0x84>)
 800835c:	a901      	add	r1, sp, #4
 800835e:	0020      	movs	r0, r4
 8008360:	f002 fd6e 	bl	800ae40 <hw_gpio_configure_pin_stm>
  hw_gpio_clr(ABZ_ANT_SW_PA_BOOST_PIN);
 8008364:	0020      	movs	r0, r4
 8008366:	f002 fc12 	bl	800ab8e <hw_gpio_clr>
#ifdef PLATFORM_SX127X_USE_RESET_PIN
  hw_gpio_configure_pin_stm(SX127x_RESET_PIN, &initStruct);
 800836a:	a901      	add	r1, sp, #4
 800836c:	480a      	ldr	r0, [pc, #40]	; (8008398 <hw_radio_io_deinit+0x88>)
 800836e:	f002 fd67 	bl	800ae40 <hw_gpio_configure_pin_stm>
#endif
#ifdef PLATFORM_SX127X_USE_VCC_TXCO
  hw_gpio_configure_pin_stm(SX127x_VCC_TXCO, &initStruct);
 8008372:	a901      	add	r1, sp, #4
 8008374:	4809      	ldr	r0, [pc, #36]	; (800839c <hw_radio_io_deinit+0x8c>)
 8008376:	f002 fd63 	bl	800ae40 <hw_gpio_configure_pin_stm>
//  __HAL_RCC_GPIOB_CLK_DISABLE();
//  __HAL_RCC_GPIOC_CLK_DISABLE();
//  __HAL_RCC_GPIOD_CLK_DISABLE();
//  __HAL_RCC_GPIOE_CLK_DISABLE();
//  __HAL_RCC_GPIOH_CLK_DISABLE();
}
 800837a:	b006      	add	sp, #24
 800837c:	bd10      	pop	{r4, pc}
 800837e:	46c0      	nop			; (mov r8, r8)
 8008380:	50000404 	.word	0x50000404
 8008384:	50000401 	.word	0x50000401
 8008388:	5000080d 	.word	0x5000080d
 800838c:	50000001 	.word	0x50000001
 8008390:	50000802 	.word	0x50000802
 8008394:	50000801 	.word	0x50000801
 8008398:	50000800 	.word	0x50000800
 800839c:	5000000c 	.word	0x5000000c

080083a0 <__led_init>:
  #error PLATFORM_NUM_LEDS does not match the expected value. Update platform.h or platform_leds.c
#endif
static pin_id_t leds[ PLATFORM_NUM_LEDS ];

void __led_init()
{
 80083a0:	b570      	push	{r4, r5, r6, lr}
  leds[0] = LED1;
 80083a2:	4b11      	ldr	r3, [pc, #68]	; (80083e8 <__led_init+0x48>)
 80083a4:	4a11      	ldr	r2, [pc, #68]	; (80083ec <__led_init+0x4c>)
 80083a6:	601a      	str	r2, [r3, #0]
  leds[1] = LED2;
 80083a8:	4a11      	ldr	r2, [pc, #68]	; (80083f0 <__led_init+0x50>)
 80083aa:	605a      	str	r2, [r3, #4]
  leds[2] = LED3;
 80083ac:	4a11      	ldr	r2, [pc, #68]	; (80083f4 <__led_init+0x54>)
 80083ae:	609a      	str	r2, [r3, #8]
  leds[3] = LED4;
 80083b0:	4a11      	ldr	r2, [pc, #68]	; (80083f8 <__led_init+0x58>)
 80083b2:	60da      	str	r2, [r3, #12]
  for(int i = 0; i < PLATFORM_NUM_LEDS; i++)
 80083b4:	2400      	movs	r4, #0
 80083b6:	2c03      	cmp	r4, #3
 80083b8:	dc14      	bgt.n	80083e4 <__led_init+0x44>
	{
		hw_gpio_clr(leds[i]);
 80083ba:	4d0b      	ldr	r5, [pc, #44]	; (80083e8 <__led_init+0x48>)
 80083bc:	00a6      	lsls	r6, r4, #2
 80083be:	5970      	ldr	r0, [r6, r5]
 80083c0:	f002 fbe5 	bl	800ab8e <hw_gpio_clr>
		error_t err = hw_gpio_configure_pin(leds[i], false, GPIO_MODE_OUTPUT_PP, 0);
 80083c4:	5970      	ldr	r0, [r6, r5]
 80083c6:	2300      	movs	r3, #0
 80083c8:	2201      	movs	r2, #1
 80083ca:	2100      	movs	r1, #0
 80083cc:	f002 fe0c 	bl	800afe8 <hw_gpio_configure_pin>
		assert(err == SUCCESS);
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d101      	bne.n	80083d8 <__led_init+0x38>
  for(int i = 0; i < PLATFORM_NUM_LEDS; i++)
 80083d4:	3401      	adds	r4, #1
 80083d6:	e7ee      	b.n	80083b6 <__led_init+0x16>
		assert(err == SUCCESS);
 80083d8:	4b08      	ldr	r3, [pc, #32]	; (80083fc <__led_init+0x5c>)
 80083da:	4a09      	ldr	r2, [pc, #36]	; (8008400 <__led_init+0x60>)
 80083dc:	2136      	movs	r1, #54	; 0x36
 80083de:	4809      	ldr	r0, [pc, #36]	; (8008404 <__led_init+0x64>)
 80083e0:	f000 f90e 	bl	8008600 <__assert_func>
	}
}
 80083e4:	bd70      	pop	{r4, r5, r6, pc}
 80083e6:	46c0      	nop			; (mov r8, r8)
 80083e8:	20002e00 	.word	0x20002e00
 80083ec:	50000405 	.word	0x50000405
 80083f0:	50000005 	.word	0x50000005
 80083f4:	50000406 	.word	0x50000406
 80083f8:	50000407 	.word	0x50000407
 80083fc:	0801732c 	.word	0x0801732c
 8008400:	08019640 	.word	0x08019640
 8008404:	080195ec 	.word	0x080195ec

08008408 <led_on>:

void led_on(uint8_t led_nr)
{
 8008408:	b510      	push	{r4, lr}
    if(led_nr < PLATFORM_NUM_LEDS)
 800840a:	2803      	cmp	r0, #3
 800840c:	d900      	bls.n	8008410 <led_on+0x8>
    	hw_gpio_set(leds[led_nr]);
}
 800840e:	bd10      	pop	{r4, pc}
    	hw_gpio_set(leds[led_nr]);
 8008410:	0080      	lsls	r0, r0, #2
 8008412:	4b02      	ldr	r3, [pc, #8]	; (800841c <led_on+0x14>)
 8008414:	58c0      	ldr	r0, [r0, r3]
 8008416:	f002 fbad 	bl	800ab74 <hw_gpio_set>
}
 800841a:	e7f8      	b.n	800840e <led_on+0x6>
 800841c:	20002e00 	.word	0x20002e00

08008420 <led_off>:

void led_off(unsigned char led_nr)
{
 8008420:	b510      	push	{r4, lr}
    if(led_nr < PLATFORM_NUM_LEDS)
 8008422:	2803      	cmp	r0, #3
 8008424:	d900      	bls.n	8008428 <led_off+0x8>
    	hw_gpio_clr(leds[led_nr]);
}
 8008426:	bd10      	pop	{r4, pc}
    	hw_gpio_clr(leds[led_nr]);
 8008428:	0080      	lsls	r0, r0, #2
 800842a:	4b02      	ldr	r3, [pc, #8]	; (8008434 <led_off+0x14>)
 800842c:	58c0      	ldr	r0, [r0, r3]
 800842e:	f002 fbae 	bl	800ab8e <hw_gpio_clr>
}
 8008432:	e7f8      	b.n	8008426 <led_off+0x6>
 8008434:	20002e00 	.word	0x20002e00

08008438 <end_flash_green>:
}


// flashing support

static void end_flash_green()  { led_off(LED_GREEN);  }
 8008438:	b510      	push	{r4, lr}
 800843a:	2000      	movs	r0, #0
 800843c:	f7ff fff0 	bl	8008420 <led_off>
 8008440:	bd10      	pop	{r4, pc}
	...

08008444 <led_toggle>:
{
 8008444:	b510      	push	{r4, lr}
    if(led_nr < PLATFORM_NUM_LEDS)
 8008446:	2803      	cmp	r0, #3
 8008448:	d900      	bls.n	800844c <led_toggle+0x8>
}
 800844a:	bd10      	pop	{r4, pc}
    	hw_gpio_toggle(leds[led_nr]);
 800844c:	0080      	lsls	r0, r0, #2
 800844e:	4b02      	ldr	r3, [pc, #8]	; (8008458 <led_toggle+0x14>)
 8008450:	58c0      	ldr	r0, [r0, r3]
 8008452:	f002 fba9 	bl	800aba8 <hw_gpio_toggle>
}
 8008456:	e7f8      	b.n	800844a <led_toggle+0x6>
 8008458:	20002e00 	.word	0x20002e00

0800845c <led_init>:
void led_flash_green() {
  led_on(LED_GREEN);
  timer_post_task_delay(&end_flash_green, FLASH_DURATION);
}

bool led_init() {
 800845c:	b510      	push	{r4, lr}
	__led_init();
 800845e:	f7ff ff9f 	bl	80083a0 <__led_init>
static inline error_t sched_register_task(task_t task) { return sched_register_task_allow_multiple(task, false);}
 8008462:	2100      	movs	r1, #0
 8008464:	4802      	ldr	r0, [pc, #8]	; (8008470 <led_init+0x14>)
 8008466:	f007 f801 	bl	800f46c <sched_register_task_allow_multiple>
	sched_register_task(&end_flash_green);
	return true;
}
 800846a:	2001      	movs	r0, #1
 800846c:	bd10      	pop	{r4, pc}
 800846e:	46c0      	nop			; (mov r8, r8)
 8008470:	08008439 	.word	0x08008439

08008474 <button_task>:
		}
	}
}

void button_task()
{
 8008474:	b570      	push	{r4, r5, r6, lr}
	button_id_t button_id = PLATFORM_NUM_BUTTONS;
	ubutton_callback_t callback = 0x0;

	start_atomic();
 8008476:	f002 fa97 	bl	800a9a8 <start_atomic>
	for(int i = 0; i < PLATFORM_NUM_BUTTONS;i++)
 800847a:	2200      	movs	r2, #0
 800847c:	2a00      	cmp	r2, #0
 800847e:	dd0f      	ble.n	80084a0 <button_task+0x2c>
	ubutton_callback_t callback = 0x0;
 8008480:	2500      	movs	r5, #0
	button_id_t button_id = PLATFORM_NUM_BUTTONS;
 8008482:	2401      	movs	r4, #1
			button_id = i;
			buttons[i].cur_callback_id++;
			break;
		}
	}
	end_atomic();
 8008484:	f002 fa9e 	bl	800a9c4 <end_atomic>

	if(button_id < PLATFORM_NUM_BUTTONS && callback != 0x0)
 8008488:	2c00      	cmp	r4, #0
 800848a:	d108      	bne.n	800849e <button_task+0x2a>
 800848c:	2d00      	cmp	r5, #0
 800848e:	d006      	beq.n	800849e <button_task+0x2a>
static inline error_t sched_post_task(task_t task) { return sched_post_task_prio(task,DEFAULT_PRIORITY, NULL);}
 8008490:	2200      	movs	r2, #0
 8008492:	2107      	movs	r1, #7
 8008494:	481a      	ldr	r0, [pc, #104]	; (8008500 <button_task+0x8c>)
 8008496:	f007 f885 	bl	800f5a4 <sched_post_task_prio>
	{
		//reschedule the task to do the next callback (if needed)
		sched_post_task(&button_task);
		callback(button_id);
 800849a:	0020      	movs	r0, r4
 800849c:	47a8      	blx	r5
	}
}
 800849e:	bd70      	pop	{r4, r5, r6, pc}
		for(;buttons[i].cur_callback_id < BUTTON_QUEUE_SIZE && buttons[i].callbacks[buttons[i].cur_callback_id] == 0x0; buttons[i].cur_callback_id++);
 80084a0:	0051      	lsls	r1, r2, #1
 80084a2:	1889      	adds	r1, r1, r2
 80084a4:	0108      	lsls	r0, r1, #4
 80084a6:	4b17      	ldr	r3, [pc, #92]	; (8008504 <button_task+0x90>)
 80084a8:	181b      	adds	r3, r3, r0
 80084aa:	332c      	adds	r3, #44	; 0x2c
 80084ac:	7819      	ldrb	r1, [r3, #0]
 80084ae:	2909      	cmp	r1, #9
 80084b0:	d812      	bhi.n	80084d8 <button_task+0x64>
 80084b2:	0050      	lsls	r0, r2, #1
 80084b4:	1880      	adds	r0, r0, r2
 80084b6:	0083      	lsls	r3, r0, #2
 80084b8:	185b      	adds	r3, r3, r1
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4811      	ldr	r0, [pc, #68]	; (8008504 <button_task+0x90>)
 80084be:	18c3      	adds	r3, r0, r3
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d108      	bne.n	80084d8 <button_task+0x64>
 80084c6:	0050      	lsls	r0, r2, #1
 80084c8:	1880      	adds	r0, r0, r2
 80084ca:	0104      	lsls	r4, r0, #4
 80084cc:	4b0d      	ldr	r3, [pc, #52]	; (8008504 <button_task+0x90>)
 80084ce:	191b      	adds	r3, r3, r4
 80084d0:	332c      	adds	r3, #44	; 0x2c
 80084d2:	3101      	adds	r1, #1
 80084d4:	7019      	strb	r1, [r3, #0]
 80084d6:	e7e3      	b.n	80084a0 <button_task+0x2c>
		if(buttons[i].cur_callback_id < BUTTON_QUEUE_SIZE)
 80084d8:	2909      	cmp	r1, #9
 80084da:	d901      	bls.n	80084e0 <button_task+0x6c>
	for(int i = 0; i < PLATFORM_NUM_BUTTONS;i++)
 80084dc:	3201      	adds	r2, #1
 80084de:	e7cd      	b.n	800847c <button_task+0x8>
			callback = buttons[i].callbacks[buttons[i].cur_callback_id];
 80084e0:	4808      	ldr	r0, [pc, #32]	; (8008504 <button_task+0x90>)
 80084e2:	0056      	lsls	r6, r2, #1
 80084e4:	18b4      	adds	r4, r6, r2
 80084e6:	00a3      	lsls	r3, r4, #2
 80084e8:	185b      	adds	r3, r3, r1
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	18c3      	adds	r3, r0, r3
 80084ee:	685d      	ldr	r5, [r3, #4]
			button_id = i;
 80084f0:	b2d4      	uxtb	r4, r2
			buttons[i].cur_callback_id++;
 80084f2:	18b2      	adds	r2, r6, r2
 80084f4:	0113      	lsls	r3, r2, #4
 80084f6:	18c0      	adds	r0, r0, r3
 80084f8:	302c      	adds	r0, #44	; 0x2c
 80084fa:	3101      	adds	r1, #1
 80084fc:	7001      	strb	r1, [r0, #0]
			break;
 80084fe:	e7c1      	b.n	8008484 <button_task+0x10>
 8008500:	08008475 	.word	0x08008475
 8008504:	20002e10 	.word	0x20002e10

08008508 <button_callback>:
{
 8008508:	b570      	push	{r4, r5, r6, lr}
  pin_id_t pin_id = *(pin_id_t*)arg;
 800850a:	6805      	ldr	r5, [r0, #0]
	for(int i = 0; i < PLATFORM_NUM_BUTTONS;i++)
 800850c:	2400      	movs	r4, #0
 800850e:	2c00      	cmp	r4, #0
 8008510:	dd00      	ble.n	8008514 <button_callback+0xc>
}
 8008512:	bd70      	pop	{r4, r5, r6, pc}
    if(buttons[i].button_id == pin_id)
 8008514:	0063      	lsls	r3, r4, #1
 8008516:	191b      	adds	r3, r3, r4
 8008518:	011b      	lsls	r3, r3, #4
 800851a:	4a09      	ldr	r2, [pc, #36]	; (8008540 <button_callback+0x38>)
 800851c:	589b      	ldr	r3, [r3, r2]
 800851e:	42ab      	cmp	r3, r5
 8008520:	d001      	beq.n	8008526 <button_callback+0x1e>
	for(int i = 0; i < PLATFORM_NUM_BUTTONS;i++)
 8008522:	3401      	adds	r4, #1
 8008524:	e7f3      	b.n	800850e <button_callback+0x6>
			buttons[i].cur_callback_id = 0;
 8008526:	0063      	lsls	r3, r4, #1
 8008528:	191b      	adds	r3, r3, r4
 800852a:	011a      	lsls	r2, r3, #4
 800852c:	4b04      	ldr	r3, [pc, #16]	; (8008540 <button_callback+0x38>)
 800852e:	189b      	adds	r3, r3, r2
 8008530:	332c      	adds	r3, #44	; 0x2c
 8008532:	2200      	movs	r2, #0
 8008534:	701a      	strb	r2, [r3, #0]
 8008536:	2107      	movs	r1, #7
 8008538:	4802      	ldr	r0, [pc, #8]	; (8008544 <button_callback+0x3c>)
 800853a:	f007 f833 	bl	800f5a4 <sched_post_task_prio>
 800853e:	e7f0      	b.n	8008522 <button_callback+0x1a>
 8008540:	20002e10 	.word	0x20002e10
 8008544:	08008475 	.word	0x08008475

08008548 <__ubutton_init>:
{
 8008548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buttons[0].button_id = BUTTON0;
 800854a:	4b20      	ldr	r3, [pc, #128]	; (80085cc <__ubutton_init+0x84>)
 800854c:	4a20      	ldr	r2, [pc, #128]	; (80085d0 <__ubutton_init+0x88>)
 800854e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < PLATFORM_NUM_BUTTONS; i++)
 8008550:	2400      	movs	r4, #0
 8008552:	2c00      	cmp	r4, #0
 8008554:	dd04      	ble.n	8008560 <__ubutton_init+0x18>
static inline error_t sched_register_task(task_t task) { return sched_register_task_allow_multiple(task, false);}
 8008556:	2100      	movs	r1, #0
 8008558:	481e      	ldr	r0, [pc, #120]	; (80085d4 <__ubutton_init+0x8c>)
 800855a:	f006 ff87 	bl	800f46c <sched_register_task_allow_multiple>
}
 800855e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memset(buttons[i].callbacks, 0, sizeof(buttons[i].callbacks));
 8008560:	4f1a      	ldr	r7, [pc, #104]	; (80085cc <__ubutton_init+0x84>)
 8008562:	0066      	lsls	r6, r4, #1
 8008564:	1935      	adds	r5, r6, r4
 8008566:	012d      	lsls	r5, r5, #4
 8008568:	197d      	adds	r5, r7, r5
 800856a:	1d28      	adds	r0, r5, #4
 800856c:	2228      	movs	r2, #40	; 0x28
 800856e:	2100      	movs	r1, #0
 8008570:	f00c fc82 	bl	8014e78 <memset>
		buttons[i].cur_callback_id = BUTTON_QUEUE_SIZE;
 8008574:	002b      	movs	r3, r5
 8008576:	332c      	adds	r3, #44	; 0x2c
 8008578:	220a      	movs	r2, #10
 800857a:	701a      	strb	r2, [r3, #0]
		buttons[i].num_registered_callbacks = 0;
 800857c:	352d      	adds	r5, #45	; 0x2d
 800857e:	2300      	movs	r3, #0
 8008580:	702b      	strb	r3, [r5, #0]
		err = hw_gpio_configure_pin(buttons[i].button_id, true, GPIO_MODE_IT_FALLING, 0); assert(err == SUCCESS); // TODO pull up or pull down to prevent floating
 8008582:	1936      	adds	r6, r6, r4
 8008584:	0136      	lsls	r6, r6, #4
 8008586:	59f0      	ldr	r0, [r6, r7]
 8008588:	4a13      	ldr	r2, [pc, #76]	; (80085d8 <__ubutton_init+0x90>)
 800858a:	2101      	movs	r1, #1
 800858c:	f002 fd2c 	bl	800afe8 <hw_gpio_configure_pin>
 8008590:	2800      	cmp	r0, #0
 8008592:	d10f      	bne.n	80085b4 <__ubutton_init+0x6c>
    err = hw_gpio_configure_interrupt(buttons[i].button_id, GPIO_FALLING_EDGE, &button_callback, &buttons[i].button_id); assert(err == SUCCESS);
 8008594:	490d      	ldr	r1, [pc, #52]	; (80085cc <__ubutton_init+0x84>)
 8008596:	0062      	lsls	r2, r4, #1
 8008598:	1913      	adds	r3, r2, r4
 800859a:	011b      	lsls	r3, r3, #4
 800859c:	18cb      	adds	r3, r1, r3
 800859e:	1912      	adds	r2, r2, r4
 80085a0:	0112      	lsls	r2, r2, #4
 80085a2:	5850      	ldr	r0, [r2, r1]
 80085a4:	4a0d      	ldr	r2, [pc, #52]	; (80085dc <__ubutton_init+0x94>)
 80085a6:	2102      	movs	r1, #2
 80085a8:	f002 fb4c 	bl	800ac44 <hw_gpio_configure_interrupt>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d107      	bne.n	80085c0 <__ubutton_init+0x78>
	for(int i = 0; i < PLATFORM_NUM_BUTTONS; i++)
 80085b0:	3401      	adds	r4, #1
 80085b2:	e7ce      	b.n	8008552 <__ubutton_init+0xa>
		err = hw_gpio_configure_pin(buttons[i].button_id, true, GPIO_MODE_IT_FALLING, 0); assert(err == SUCCESS); // TODO pull up or pull down to prevent floating
 80085b4:	4b0a      	ldr	r3, [pc, #40]	; (80085e0 <__ubutton_init+0x98>)
 80085b6:	4a0b      	ldr	r2, [pc, #44]	; (80085e4 <__ubutton_init+0x9c>)
 80085b8:	2139      	movs	r1, #57	; 0x39
 80085ba:	480b      	ldr	r0, [pc, #44]	; (80085e8 <__ubutton_init+0xa0>)
 80085bc:	f000 f820 	bl	8008600 <__assert_func>
    err = hw_gpio_configure_interrupt(buttons[i].button_id, GPIO_FALLING_EDGE, &button_callback, &buttons[i].button_id); assert(err == SUCCESS);
 80085c0:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <__ubutton_init+0x98>)
 80085c2:	4a08      	ldr	r2, [pc, #32]	; (80085e4 <__ubutton_init+0x9c>)
 80085c4:	213a      	movs	r1, #58	; 0x3a
 80085c6:	4808      	ldr	r0, [pc, #32]	; (80085e8 <__ubutton_init+0xa0>)
 80085c8:	f000 f81a 	bl	8008600 <__assert_func>
 80085cc:	20002e10 	.word	0x20002e10
 80085d0:	50000402 	.word	0x50000402
 80085d4:	08008475 	.word	0x08008475
 80085d8:	10210000 	.word	0x10210000
 80085dc:	08008509 	.word	0x08008509
 80085e0:	0801732c 	.word	0x0801732c
 80085e4:	080196a4 	.word	0x080196a4
 80085e8:	0801964c 	.word	0x0801964c

080085ec <__hw_debug_init>:
	}
}

#else

void __hw_debug_init() {}
 80085ec:	4770      	bx	lr

080085ee <hw_debug_set>:
void hw_debug_set(uint8_t pin_nr) {}
 80085ee:	4770      	bx	lr

080085f0 <hw_debug_clr>:
void hw_debug_clr(uint8_t pin_nr) {}
 80085f0:	4770      	bx	lr

080085f2 <_write>:
#endif
#include "stm32l0xx.h"

//Overwrite _write so 'printf''s get pushed over the uart
int _write(int fd, char *ptr, int len)
{
 80085f2:	b510      	push	{r4, lr}
 80085f4:	0014      	movs	r4, r2
#ifdef FRAMEWORK_LOG_OUTPUT_ON_RTT
  SEGGER_RTT_Write(0, ptr, len);
 80085f6:	2000      	movs	r0, #0
 80085f8:	f007 fa98 	bl	800fb2c <SEGGER_RTT_Write>
#else
  console_print_bytes((uint8_t*)ptr, len);
#endif

  return len;
}
 80085fc:	0020      	movs	r0, r4
 80085fe:	bd10      	pop	{r4, pc}

08008600 <__assert_func>:
}

//we override __assert_func to flash the leds (so we know something bad has happend)
//and to repeat the error message repeatedly (so we have a chance to attach the device to a serial console before the error message is gone)
void __assert_func( const char *file, int line, const char *func, const char *failedexpr)
{
 8008600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008602:	46d6      	mov	lr, sl
 8008604:	464f      	mov	r7, r9
 8008606:	4646      	mov	r6, r8
 8008608:	b5c0      	push	{r6, r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	4682      	mov	sl, r0
 800860e:	4689      	mov	r9, r1
 8008610:	0017      	movs	r7, r2
 8008612:	4698      	mov	r8, r3
	start_atomic();
 8008614:	f002 f9c8 	bl	800a9a8 <start_atomic>

  led_on(0);
 8008618:	2000      	movs	r0, #0
 800861a:	f7ff fef5 	bl	8008408 <led_on>
  led_on(2);
 800861e:	2002      	movs	r0, #2
 8008620:	f7ff fef2 	bl	8008408 <led_on>
  led_on(3);
 8008624:	2003      	movs	r0, #3
 8008626:	f7ff feef 	bl	8008408 <led_on>

	while(1)
	{
#if defined(FRAMEWORK_LOG_ENABLED)
    printf("assertion \"%s\" failed: file \"%s\", line %d%s%s\n",failedexpr, file, line, func ? ", function: " : "", func ? func : "");
 800862a:	2f00      	cmp	r7, #0
 800862c:	d00e      	beq.n	800864c <__assert_func+0x4c>
 800862e:	4b12      	ldr	r3, [pc, #72]	; (8008678 <__assert_func+0x78>)
 8008630:	2f00      	cmp	r7, #0
 8008632:	d00d      	beq.n	8008650 <__assert_func+0x50>
 8008634:	003a      	movs	r2, r7
 8008636:	9201      	str	r2, [sp, #4]
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	464b      	mov	r3, r9
 800863c:	4652      	mov	r2, sl
 800863e:	4641      	mov	r1, r8
 8008640:	480e      	ldr	r0, [pc, #56]	; (800867c <__assert_func+0x7c>)
 8008642:	f00c fd41 	bl	80150c8 <iprintf>
#endif
    __BKPT (0); // break into debugger, when attached
 8008646:	be00      	bkpt	0x0000

    for(uint32_t j = 0; j < 20; j++)
 8008648:	2600      	movs	r6, #0
 800864a:	e00d      	b.n	8008668 <__assert_func+0x68>
    printf("assertion \"%s\" failed: file \"%s\", line %d%s%s\n",failedexpr, file, line, func ? ", function: " : "", func ? func : "");
 800864c:	4b0c      	ldr	r3, [pc, #48]	; (8008680 <__assert_func+0x80>)
 800864e:	e7ef      	b.n	8008630 <__assert_func+0x30>
 8008650:	4a0b      	ldr	r2, [pc, #44]	; (8008680 <__assert_func+0x80>)
 8008652:	e7f0      	b.n	8008636 <__assert_func+0x36>
		{
			//blink at twice the frequency of the _exit call, so we can identify which of the two events has occurred
			for(uint32_t i = 0; i < 0xFFFFF; i++){}
			led_toggle(0);
 8008654:	2000      	movs	r0, #0
 8008656:	f7ff fef5 	bl	8008444 <led_toggle>
      led_toggle(2);
 800865a:	2002      	movs	r0, #2
 800865c:	f7ff fef2 	bl	8008444 <led_toggle>
      led_toggle(3);
 8008660:	2003      	movs	r0, #3
 8008662:	f7ff feef 	bl	8008444 <led_toggle>
    for(uint32_t j = 0; j < 20; j++)
 8008666:	3601      	adds	r6, #1
 8008668:	2e13      	cmp	r6, #19
 800866a:	d8de      	bhi.n	800862a <__assert_func+0x2a>
			for(uint32_t i = 0; i < 0xFFFFF; i++){}
 800866c:	2400      	movs	r4, #0
 800866e:	4d05      	ldr	r5, [pc, #20]	; (8008684 <__assert_func+0x84>)
 8008670:	42ac      	cmp	r4, r5
 8008672:	d8ef      	bhi.n	8008654 <__assert_func+0x54>
 8008674:	3401      	adds	r4, #1
 8008676:	e7fa      	b.n	800866e <__assert_func+0x6e>
 8008678:	080196b4 	.word	0x080196b4
 800867c:	080196c4 	.word	0x080196c4
 8008680:	080196c0 	.word	0x080196c0
 8008684:	000ffffe 	.word	0x000ffffe

08008688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8008688:	480d      	ldr	r0, [pc, #52]	; (80086c0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800868a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800868c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800868e:	e003      	b.n	8008698 <LoopCopyDataInit>

08008690 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008690:	4b0c      	ldr	r3, [pc, #48]	; (80086c4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8008692:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008694:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008696:	3104      	adds	r1, #4

08008698 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8008698:	480b      	ldr	r0, [pc, #44]	; (80086c8 <LoopForever+0xa>)
  ldr  r3, =_edata
 800869a:	4b0c      	ldr	r3, [pc, #48]	; (80086cc <LoopForever+0xe>)
  adds  r2, r0, r1
 800869c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800869e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80086a0:	d3f6      	bcc.n	8008690 <CopyDataInit>
  ldr  r2, =_sbss
 80086a2:	4a0b      	ldr	r2, [pc, #44]	; (80086d0 <LoopForever+0x12>)
  b  LoopFillZerobss
 80086a4:	e002      	b.n	80086ac <LoopFillZerobss>

080086a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80086a6:	2300      	movs	r3, #0
  str  r3, [r2]
 80086a8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80086aa:	3204      	adds	r2, #4

080086ac <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80086ac:	4b09      	ldr	r3, [pc, #36]	; (80086d4 <LoopForever+0x16>)
  cmp  r2, r3
 80086ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80086b0:	d3f9      	bcc.n	80086a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  stm32_common_mcu_init
 80086b2:	f002 fd6d 	bl	800b190 <stm32_common_mcu_init>
/* Call static constructors */
    bl __libc_init_array
 80086b6:	f00c fb41 	bl	8014d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80086ba:	f7ff fe1d 	bl	80082f8 <main>

080086be <LoopForever>:

LoopForever:
    b LoopForever
 80086be:	e7fe      	b.n	80086be <LoopForever>
   ldr   r0, =_estack
 80086c0:	20000500 	.word	0x20000500
  ldr  r3, =_sidata
 80086c4:	0801ae38 	.word	0x0801ae38
  ldr  r0, =_sdata
 80086c8:	20000500 	.word	0x20000500
  ldr  r3, =_edata
 80086cc:	20000648 	.word	0x20000648
  ldr  r2, =_sbss
 80086d0:	20000648 	.word	0x20000648
  ldr  r3, = _ebss
 80086d4:	200043d8 	.word	0x200043d8

080086d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80086d8:	e7fe      	b.n	80086d8 <ADC1_COMP_IRQHandler>

080086da <HAL_InitTick>:
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
   /* Return function status */
  return HAL_OK;
}
 80086da:	2000      	movs	r0, #0
 80086dc:	4770      	bx	lr
	...

080086e0 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 80086e0:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80086e2:	4c0b      	ldr	r4, [pc, #44]	; (8008710 <HAL_MspInit+0x30>)
 80086e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80086e6:	2380      	movs	r3, #128	; 0x80
 80086e8:	055b      	lsls	r3, r3, #21
 80086ea:	4313      	orrs	r3, r2
 80086ec:	63a3      	str	r3, [r4, #56]	; 0x38
  
  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD( ); 
 80086ee:	f000 f9d1 	bl	8008a94 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower( );
 80086f2:	f000 fa2f 	bl	8008b54 <HAL_PWREx_EnableUltraLowPower>
  
  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 80086f6:	4a07      	ldr	r2, [pc, #28]	; (8008714 <HAL_MspInit+0x34>)
 80086f8:	6813      	ldr	r3, [r2, #0]
 80086fa:	2108      	movs	r1, #8
 80086fc:	430b      	orrs	r3, r1
 80086fe:	6013      	str	r3, [r2, #0]
   */
  // TODO DBG( __HAL_FLASH_SLEEP_POWERDOWN_DISABLE(); );
  
#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/  
  HAL_PWREx_EnableFastWakeUp( );
 8008700:	f000 fa1e 	bl	8008b40 <HAL_PWREx_EnableFastWakeUp>
#else  
  HAL_PWREx_DisableFastWakeUp( );
#endif

  __HAL_RCC_PWR_CLK_DISABLE();
 8008704:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008706:	4a04      	ldr	r2, [pc, #16]	; (8008718 <HAL_MspInit+0x38>)
 8008708:	4013      	ands	r3, r2
 800870a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800870c:	bd10      	pop	{r4, pc}
 800870e:	46c0      	nop			; (mov r8, r8)
 8008710:	40021000 	.word	0x40021000
 8008714:	40022000 	.word	0x40022000
 8008718:	efffffff 	.word	0xefffffff

0800871c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800871c:	b510      	push	{r4, lr}
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800871e:	4a06      	ldr	r2, [pc, #24]	; (8008738 <HAL_Init+0x1c>)
 8008720:	6813      	ldr	r3, [r2, #0]
 8008722:	2102      	movs	r1, #2
 8008724:	430b      	orrs	r3, r1
 8008726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8008728:	2003      	movs	r0, #3
 800872a:	f7ff ffd6 	bl	80086da <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800872e:	f7ff ffd7 	bl	80086e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8008732:	2000      	movs	r0, #0
 8008734:	bd10      	pop	{r4, pc}
 8008736:	46c0      	nop			; (mov r8, r8)
 8008738:	40022000 	.word	0x40022000

0800873c <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800873c:	4a02      	ldr	r2, [pc, #8]	; (8008748 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800873e:	6853      	ldr	r3, [r2, #4]
 8008740:	2101      	movs	r1, #1
 8008742:	430b      	orrs	r3, r1
 8008744:	6053      	str	r3, [r2, #4]
}
 8008746:	4770      	bx	lr
 8008748:	40015800 	.word	0x40015800

0800874c <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800874c:	4a02      	ldr	r2, [pc, #8]	; (8008758 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 800874e:	6853      	ldr	r3, [r2, #4]
 8008750:	2102      	movs	r1, #2
 8008752:	430b      	orrs	r3, r1
 8008754:	6053      	str	r3, [r2, #4]
}
 8008756:	4770      	bx	lr
 8008758:	40015800 	.word	0x40015800

0800875c <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800875c:	4a02      	ldr	r2, [pc, #8]	; (8008768 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 800875e:	6853      	ldr	r3, [r2, #4]
 8008760:	2104      	movs	r1, #4
 8008762:	430b      	orrs	r3, r1
 8008764:	6053      	str	r3, [r2, #4]
}
 8008766:	4770      	bx	lr
 8008768:	40015800 	.word	0x40015800

0800876c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800876c:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800876e:	2800      	cmp	r0, #0
 8008770:	db11      	blt.n	8008796 <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008772:	0883      	lsrs	r3, r0, #2
 8008774:	4d13      	ldr	r5, [pc, #76]	; (80087c4 <HAL_NVIC_SetPriority+0x58>)
 8008776:	33c0      	adds	r3, #192	; 0xc0
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	595c      	ldr	r4, [r3, r5]
 800877c:	2203      	movs	r2, #3
 800877e:	4010      	ands	r0, r2
 8008780:	00c0      	lsls	r0, r0, #3
 8008782:	32fc      	adds	r2, #252	; 0xfc
 8008784:	0016      	movs	r6, r2
 8008786:	4086      	lsls	r6, r0
 8008788:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800878a:	0189      	lsls	r1, r1, #6
 800878c:	400a      	ands	r2, r1
 800878e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008790:	4322      	orrs	r2, r4
 8008792:	515a      	str	r2, [r3, r5]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8008794:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008796:	230f      	movs	r3, #15
 8008798:	4003      	ands	r3, r0
 800879a:	3b08      	subs	r3, #8
 800879c:	089b      	lsrs	r3, r3, #2
 800879e:	3306      	adds	r3, #6
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4a09      	ldr	r2, [pc, #36]	; (80087c8 <HAL_NVIC_SetPriority+0x5c>)
 80087a4:	4694      	mov	ip, r2
 80087a6:	4463      	add	r3, ip
 80087a8:	685d      	ldr	r5, [r3, #4]
 80087aa:	2403      	movs	r4, #3
 80087ac:	4020      	ands	r0, r4
 80087ae:	00c0      	lsls	r0, r0, #3
 80087b0:	22ff      	movs	r2, #255	; 0xff
 80087b2:	0014      	movs	r4, r2
 80087b4:	4084      	lsls	r4, r0
 80087b6:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80087b8:	0189      	lsls	r1, r1, #6
 80087ba:	400a      	ands	r2, r1
 80087bc:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80087be:	432a      	orrs	r2, r5
 80087c0:	605a      	str	r2, [r3, #4]
 80087c2:	e7e7      	b.n	8008794 <HAL_NVIC_SetPriority+0x28>
 80087c4:	e000e100 	.word	0xe000e100
 80087c8:	e000ed00 	.word	0xe000ed00

080087cc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80087cc:	231f      	movs	r3, #31
 80087ce:	4018      	ands	r0, r3
 80087d0:	3b1e      	subs	r3, #30
 80087d2:	4083      	lsls	r3, r0
 80087d4:	4a01      	ldr	r2, [pc, #4]	; (80087dc <HAL_NVIC_EnableIRQ+0x10>)
 80087d6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80087d8:	4770      	bx	lr
 80087da:	46c0      	nop			; (mov r8, r8)
 80087dc:	e000e100 	.word	0xe000e100

080087e0 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80087e0:	231f      	movs	r3, #31
 80087e2:	4018      	ands	r0, r3
 80087e4:	3b1e      	subs	r3, #30
 80087e6:	4083      	lsls	r3, r0
 80087e8:	4901      	ldr	r1, [pc, #4]	; (80087f0 <HAL_NVIC_DisableIRQ+0x10>)
 80087ea:	2280      	movs	r2, #128	; 0x80
 80087ec:	508b      	str	r3, [r1, r2]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80087ee:	4770      	bx	lr
 80087f0:	e000e100 	.word	0xe000e100

080087f4 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80087f4:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80087f8:	4b03      	ldr	r3, [pc, #12]	; (8008808 <HAL_NVIC_SystemReset+0x14>)
 80087fa:	4a04      	ldr	r2, [pc, #16]	; (800880c <HAL_NVIC_SystemReset+0x18>)
 80087fc:	60da      	str	r2, [r3, #12]
 80087fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008802:	46c0      	nop			; (mov r8, r8)
 8008804:	e7fd      	b.n	8008802 <HAL_NVIC_SystemReset+0xe>
 8008806:	46c0      	nop			; (mov r8, r8)
 8008808:	e000ed00 	.word	0xe000ed00
 800880c:	05fa0004 	.word	0x05fa0004

08008810 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8008810:	231f      	movs	r3, #31
 8008812:	4018      	ands	r0, r3
 8008814:	3b1e      	subs	r3, #30
 8008816:	4083      	lsls	r3, r0
 8008818:	4902      	ldr	r1, [pc, #8]	; (8008824 <HAL_NVIC_ClearPendingIRQ+0x14>)
 800881a:	22c0      	movs	r2, #192	; 0xc0
 800881c:	0052      	lsls	r2, r2, #1
 800881e:	508b      	str	r3, [r1, r2]
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8008820:	4770      	bx	lr
 8008822:	46c0      	nop			; (mov r8, r8)
 8008824:	e000e100 	.word	0xe000e100

08008828 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8008828:	4b06      	ldr	r3, [pc, #24]	; (8008844 <HAL_FLASHEx_DATAEEPROM_Unlock+0x1c>)
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	07db      	lsls	r3, r3, #31
 800882e:	d506      	bpl.n	800883e <HAL_FLASHEx_DATAEEPROM_Unlock+0x16>
  {  
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8008830:	4b04      	ldr	r3, [pc, #16]	; (8008844 <HAL_FLASHEx_DATAEEPROM_Unlock+0x1c>)
 8008832:	4a05      	ldr	r2, [pc, #20]	; (8008848 <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>)
 8008834:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8008836:	4a05      	ldr	r2, [pc, #20]	; (800884c <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
 8008838:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;  
 800883a:	2000      	movs	r0, #0
}
 800883c:	4770      	bx	lr
    return HAL_ERROR;
 800883e:	2001      	movs	r0, #1
 8008840:	e7fc      	b.n	800883c <HAL_FLASHEx_DATAEEPROM_Unlock+0x14>
 8008842:	46c0      	nop			; (mov r8, r8)
 8008844:	40022000 	.word	0x40022000
 8008848:	89abcdef 	.word	0x89abcdef
 800884c:	02030405 	.word	0x02030405

08008850 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8008850:	4a03      	ldr	r2, [pc, #12]	; (8008860 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
 8008852:	6853      	ldr	r3, [r2, #4]
 8008854:	2101      	movs	r1, #1
 8008856:	430b      	orrs	r3, r1
 8008858:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;
}
 800885a:	2000      	movs	r0, #0
 800885c:	4770      	bx	lr
 800885e:	46c0      	nop			; (mov r8, r8)
 8008860:	40022000 	.word	0x40022000

08008864 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008866:	46c6      	mov	lr, r8
 8008868:	b500      	push	{lr}
  uint32_t position = 0x00U;
 800886a:	2300      	movs	r3, #0
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800886c:	e038      	b.n	80088e0 <HAL_GPIO_Init+0x7c>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800886e:	2605      	movs	r6, #5
 8008870:	e000      	b.n	8008874 <HAL_GPIO_Init+0x10>
 8008872:	2600      	movs	r6, #0
 8008874:	40a6      	lsls	r6, r4
 8008876:	0034      	movs	r4, r6
 8008878:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800887a:	3202      	adds	r2, #2
 800887c:	0092      	lsls	r2, r2, #2
 800887e:	4e58      	ldr	r6, [pc, #352]	; (80089e0 <HAL_GPIO_Init+0x17c>)
 8008880:	5194      	str	r4, [r2, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008882:	4a58      	ldr	r2, [pc, #352]	; (80089e4 <HAL_GPIO_Init+0x180>)
 8008884:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8008886:	4642      	mov	r2, r8
 8008888:	43d2      	mvns	r2, r2
 800888a:	0026      	movs	r6, r4
 800888c:	4645      	mov	r5, r8
 800888e:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008890:	684d      	ldr	r5, [r1, #4]
 8008892:	03ed      	lsls	r5, r5, #15
 8008894:	d502      	bpl.n	800889c <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8008896:	4645      	mov	r5, r8
 8008898:	432c      	orrs	r4, r5
 800889a:	0026      	movs	r6, r4
        }
        EXTI->IMR = temp;
 800889c:	4c51      	ldr	r4, [pc, #324]	; (80089e4 <HAL_GPIO_Init+0x180>)
 800889e:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80088a0:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80088a2:	0026      	movs	r6, r4
 80088a4:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80088a6:	684d      	ldr	r5, [r1, #4]
 80088a8:	03ad      	lsls	r5, r5, #14
 80088aa:	d502      	bpl.n	80088b2 <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 80088ac:	4645      	mov	r5, r8
 80088ae:	432c      	orrs	r4, r5
 80088b0:	0026      	movs	r6, r4
        }
        EXTI->EMR = temp;
 80088b2:	4c4c      	ldr	r4, [pc, #304]	; (80089e4 <HAL_GPIO_Init+0x180>)
 80088b4:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80088b6:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80088b8:	0026      	movs	r6, r4
 80088ba:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80088bc:	684d      	ldr	r5, [r1, #4]
 80088be:	02ed      	lsls	r5, r5, #11
 80088c0:	d502      	bpl.n	80088c8 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 80088c2:	4645      	mov	r5, r8
 80088c4:	432c      	orrs	r4, r5
 80088c6:	0026      	movs	r6, r4
        }
        EXTI->RTSR = temp;
 80088c8:	4c46      	ldr	r4, [pc, #280]	; (80089e4 <HAL_GPIO_Init+0x180>)
 80088ca:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80088cc:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80088ce:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80088d0:	684d      	ldr	r5, [r1, #4]
 80088d2:	02ad      	lsls	r5, r5, #10
 80088d4:	d501      	bpl.n	80088da <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80088d6:	4642      	mov	r2, r8
 80088d8:	4322      	orrs	r2, r4
        }
        EXTI->FTSR = temp;
 80088da:	4c42      	ldr	r4, [pc, #264]	; (80089e4 <HAL_GPIO_Init+0x180>)
 80088dc:	60e2      	str	r2, [r4, #12]
      }
    }
    position++;
 80088de:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 80088e0:	680c      	ldr	r4, [r1, #0]
 80088e2:	0022      	movs	r2, r4
 80088e4:	40da      	lsrs	r2, r3
 80088e6:	d078      	beq.n	80089da <HAL_GPIO_Init+0x176>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80088e8:	2201      	movs	r2, #1
 80088ea:	409a      	lsls	r2, r3
 80088ec:	0025      	movs	r5, r4
 80088ee:	4015      	ands	r5, r2
 80088f0:	46a8      	mov	r8, r5
    if(iocurrent)
 80088f2:	4214      	tst	r4, r2
 80088f4:	d0f3      	beq.n	80088de <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80088f6:	684c      	ldr	r4, [r1, #4]
 80088f8:	2c02      	cmp	r4, #2
 80088fa:	d001      	beq.n	8008900 <HAL_GPIO_Init+0x9c>
 80088fc:	2c12      	cmp	r4, #18
 80088fe:	d10e      	bne.n	800891e <HAL_GPIO_Init+0xba>
        temp = GPIOx->AFR[position >> 3U];
 8008900:	08dc      	lsrs	r4, r3, #3
 8008902:	3408      	adds	r4, #8
 8008904:	00a4      	lsls	r4, r4, #2
 8008906:	5827      	ldr	r7, [r4, r0]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8008908:	2607      	movs	r6, #7
 800890a:	401e      	ands	r6, r3
 800890c:	00b6      	lsls	r6, r6, #2
 800890e:	250f      	movs	r5, #15
 8008910:	40b5      	lsls	r5, r6
 8008912:	43af      	bics	r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8008914:	690d      	ldr	r5, [r1, #16]
 8008916:	40b5      	lsls	r5, r6
 8008918:	002e      	movs	r6, r5
 800891a:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 800891c:	5026      	str	r6, [r4, r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800891e:	684c      	ldr	r4, [r1, #4]
 8008920:	1e66      	subs	r6, r4, #1
 8008922:	2e01      	cmp	r6, #1
 8008924:	d903      	bls.n	800892e <HAL_GPIO_Init+0xca>
 8008926:	2c11      	cmp	r4, #17
 8008928:	d001      	beq.n	800892e <HAL_GPIO_Init+0xca>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800892a:	2c12      	cmp	r4, #18
 800892c:	d112      	bne.n	8008954 <HAL_GPIO_Init+0xf0>
        temp = GPIOx->OSPEEDR;
 800892e:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8008930:	005f      	lsls	r7, r3, #1
 8008932:	2603      	movs	r6, #3
 8008934:	40be      	lsls	r6, r7
 8008936:	43b4      	bics	r4, r6
 8008938:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800893a:	68cc      	ldr	r4, [r1, #12]
 800893c:	40bc      	lsls	r4, r7
 800893e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8008940:	6084      	str	r4, [r0, #8]
        temp= GPIOx->OTYPER;
 8008942:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008944:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008946:	684a      	ldr	r2, [r1, #4]
 8008948:	0916      	lsrs	r6, r2, #4
 800894a:	2201      	movs	r2, #1
 800894c:	4032      	ands	r2, r6
 800894e:	409a      	lsls	r2, r3
 8008950:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8008952:	6042      	str	r2, [r0, #4]
      temp = GPIOx->MODER;
 8008954:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008956:	005e      	lsls	r6, r3, #1
 8008958:	2203      	movs	r2, #3
 800895a:	0017      	movs	r7, r2
 800895c:	40b7      	lsls	r7, r6
 800895e:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008960:	684d      	ldr	r5, [r1, #4]
 8008962:	402a      	ands	r2, r5
 8008964:	40b2      	lsls	r2, r6
 8008966:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8008968:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 800896a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800896c:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800896e:	688a      	ldr	r2, [r1, #8]
 8008970:	40b2      	lsls	r2, r6
 8008972:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 8008974:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8008976:	684a      	ldr	r2, [r1, #4]
 8008978:	00d2      	lsls	r2, r2, #3
 800897a:	d5b0      	bpl.n	80088de <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800897c:	4c1a      	ldr	r4, [pc, #104]	; (80089e8 <HAL_GPIO_Init+0x184>)
 800897e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008980:	2601      	movs	r6, #1
 8008982:	4332      	orrs	r2, r6
 8008984:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8008986:	089a      	lsrs	r2, r3, #2
 8008988:	1c94      	adds	r4, r2, #2
 800898a:	00a4      	lsls	r4, r4, #2
 800898c:	4e14      	ldr	r6, [pc, #80]	; (80089e0 <HAL_GPIO_Init+0x17c>)
 800898e:	59a7      	ldr	r7, [r4, r6]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8008990:	2603      	movs	r6, #3
 8008992:	401e      	ands	r6, r3
 8008994:	00b4      	lsls	r4, r6, #2
 8008996:	260f      	movs	r6, #15
 8008998:	40a6      	lsls	r6, r4
 800899a:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800899c:	26a0      	movs	r6, #160	; 0xa0
 800899e:	05f6      	lsls	r6, r6, #23
 80089a0:	42b0      	cmp	r0, r6
 80089a2:	d100      	bne.n	80089a6 <HAL_GPIO_Init+0x142>
 80089a4:	e765      	b.n	8008872 <HAL_GPIO_Init+0xe>
 80089a6:	4e11      	ldr	r6, [pc, #68]	; (80089ec <HAL_GPIO_Init+0x188>)
 80089a8:	42b0      	cmp	r0, r6
 80089aa:	d00e      	beq.n	80089ca <HAL_GPIO_Init+0x166>
 80089ac:	4e10      	ldr	r6, [pc, #64]	; (80089f0 <HAL_GPIO_Init+0x18c>)
 80089ae:	42b0      	cmp	r0, r6
 80089b0:	d00d      	beq.n	80089ce <HAL_GPIO_Init+0x16a>
 80089b2:	4e10      	ldr	r6, [pc, #64]	; (80089f4 <HAL_GPIO_Init+0x190>)
 80089b4:	42b0      	cmp	r0, r6
 80089b6:	d00c      	beq.n	80089d2 <HAL_GPIO_Init+0x16e>
 80089b8:	4e0f      	ldr	r6, [pc, #60]	; (80089f8 <HAL_GPIO_Init+0x194>)
 80089ba:	42b0      	cmp	r0, r6
 80089bc:	d00b      	beq.n	80089d6 <HAL_GPIO_Init+0x172>
 80089be:	4e0f      	ldr	r6, [pc, #60]	; (80089fc <HAL_GPIO_Init+0x198>)
 80089c0:	42b0      	cmp	r0, r6
 80089c2:	d100      	bne.n	80089c6 <HAL_GPIO_Init+0x162>
 80089c4:	e753      	b.n	800886e <HAL_GPIO_Init+0xa>
 80089c6:	2606      	movs	r6, #6
 80089c8:	e754      	b.n	8008874 <HAL_GPIO_Init+0x10>
 80089ca:	2601      	movs	r6, #1
 80089cc:	e752      	b.n	8008874 <HAL_GPIO_Init+0x10>
 80089ce:	2602      	movs	r6, #2
 80089d0:	e750      	b.n	8008874 <HAL_GPIO_Init+0x10>
 80089d2:	2603      	movs	r6, #3
 80089d4:	e74e      	b.n	8008874 <HAL_GPIO_Init+0x10>
 80089d6:	2604      	movs	r6, #4
 80089d8:	e74c      	b.n	8008874 <HAL_GPIO_Init+0x10>
  }
}
 80089da:	bc04      	pop	{r2}
 80089dc:	4690      	mov	r8, r2
 80089de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089e0:	40010000 	.word	0x40010000
 80089e4:	40010400 	.word	0x40010400
 80089e8:	40021000 	.word	0x40021000
 80089ec:	50000400 	.word	0x50000400
 80089f0:	50000800 	.word	0x50000800
 80089f4:	50000c00 	.word	0x50000c00
 80089f8:	50001000 	.word	0x50001000
 80089fc:	50001c00 	.word	0x50001c00

08008a00 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008a00:	6903      	ldr	r3, [r0, #16]
 8008a02:	420b      	tst	r3, r1
 8008a04:	d001      	beq.n	8008a0a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8008a06:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008a08:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	e7fc      	b.n	8008a08 <HAL_GPIO_ReadPin+0x8>

08008a0e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8008a0e:	2a00      	cmp	r2, #0
 8008a10:	d001      	beq.n	8008a16 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a12:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8008a14:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8008a16:	6281      	str	r1, [r0, #40]	; 0x28
}
 8008a18:	e7fc      	b.n	8008a14 <HAL_GPIO_WritePin+0x6>

08008a1a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8008a1a:	6943      	ldr	r3, [r0, #20]
 8008a1c:	4059      	eors	r1, r3
 8008a1e:	6141      	str	r1, [r0, #20]
}
 8008a20:	4770      	bx	lr
	...

08008a24 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8008a24:	b570      	push	{r4, r5, r6, lr}
 8008a26:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8008a28:	d024      	beq.n	8008a74 <HAL_IWDG_Init+0x50>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8008a2a:	6803      	ldr	r3, [r0, #0]
 8008a2c:	4a12      	ldr	r2, [pc, #72]	; (8008a78 <HAL_IWDG_Init+0x54>)
 8008a2e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8008a30:	6803      	ldr	r3, [r0, #0]
 8008a32:	4a12      	ldr	r2, [pc, #72]	; (8008a7c <HAL_IWDG_Init+0x58>)
 8008a34:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8008a36:	6803      	ldr	r3, [r0, #0]
 8008a38:	6842      	ldr	r2, [r0, #4]
 8008a3a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8008a3c:	6803      	ldr	r3, [r0, #0]
 8008a3e:	6882      	ldr	r2, [r0, #8]
 8008a40:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8008a42:	f002 fbc5 	bl	800b1d0 <HAL_GetTick>
 8008a46:	0005      	movs	r5, r0

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	68da      	ldr	r2, [r3, #12]
 8008a4c:	2a00      	cmp	r2, #0
 8008a4e:	d006      	beq.n	8008a5e <HAL_IWDG_Init+0x3a>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8008a50:	f002 fbbe 	bl	800b1d0 <HAL_GetTick>
 8008a54:	1b40      	subs	r0, r0, r5
 8008a56:	2830      	cmp	r0, #48	; 0x30
 8008a58:	d9f6      	bls.n	8008a48 <HAL_IWDG_Init+0x24>
    {
      return HAL_TIMEOUT;
 8008a5a:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 8008a5c:	bd70      	pop	{r4, r5, r6, pc}
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8008a5e:	6919      	ldr	r1, [r3, #16]
 8008a60:	68e2      	ldr	r2, [r4, #12]
 8008a62:	4291      	cmp	r1, r2
 8008a64:	d002      	beq.n	8008a6c <HAL_IWDG_Init+0x48>
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8008a66:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8008a68:	2000      	movs	r0, #0
 8008a6a:	e7f7      	b.n	8008a5c <HAL_IWDG_Init+0x38>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008a6c:	4a04      	ldr	r2, [pc, #16]	; (8008a80 <HAL_IWDG_Init+0x5c>)
 8008a6e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008a70:	2000      	movs	r0, #0
 8008a72:	e7f3      	b.n	8008a5c <HAL_IWDG_Init+0x38>
    return HAL_ERROR;
 8008a74:	2001      	movs	r0, #1
 8008a76:	e7f1      	b.n	8008a5c <HAL_IWDG_Init+0x38>
 8008a78:	0000cccc 	.word	0x0000cccc
 8008a7c:	00005555 	.word	0x00005555
 8008a80:	0000aaaa 	.word	0x0000aaaa

08008a84 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008a84:	6803      	ldr	r3, [r0, #0]
 8008a86:	4a02      	ldr	r2, [pc, #8]	; (8008a90 <HAL_IWDG_Refresh+0xc>)
 8008a88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	4770      	bx	lr
 8008a8e:	46c0      	nop			; (mov r8, r8)
 8008a90:	0000aaaa 	.word	0x0000aaaa

08008a94 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8008a94:	4a02      	ldr	r2, [pc, #8]	; (8008aa0 <HAL_PWR_DisablePVD+0xc>)
 8008a96:	6813      	ldr	r3, [r2, #0]
 8008a98:	2110      	movs	r1, #16
 8008a9a:	438b      	bics	r3, r1
 8008a9c:	6013      	str	r3, [r2, #0]
}
 8008a9e:	4770      	bx	lr
 8008aa0:	40007000 	.word	0x40007000

08008aa4 <HAL_PWR_DisableWakeUpPin>:
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8008aa4:	4a02      	ldr	r2, [pc, #8]	; (8008ab0 <HAL_PWR_DisableWakeUpPin+0xc>)
 8008aa6:	6853      	ldr	r3, [r2, #4]
 8008aa8:	4383      	bics	r3, r0
 8008aaa:	6053      	str	r3, [r2, #4]
}
 8008aac:	4770      	bx	lr
 8008aae:	46c0      	nop			; (mov r8, r8)
 8008ab0:	40007000 	.word	0x40007000

08008ab4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8008ab4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008ab6:	4a09      	ldr	r2, [pc, #36]	; (8008adc <HAL_PWR_EnterSLEEPMode+0x28>)
 8008ab8:	6813      	ldr	r3, [r2, #0]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8008aba:	2403      	movs	r4, #3
 8008abc:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008abe:	4303      	orrs	r3, r0

  /* Store the new value */
  PWR->CR = tmpreg;
 8008ac0:	6013      	str	r3, [r2, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008ac2:	4a07      	ldr	r2, [pc, #28]	; (8008ae0 <HAL_PWR_EnterSLEEPMode+0x2c>)
 8008ac4:	6913      	ldr	r3, [r2, #16]
 8008ac6:	2004      	movs	r0, #4
 8008ac8:	4383      	bics	r3, r0
 8008aca:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8008acc:	2901      	cmp	r1, #1
 8008ace:	d003      	beq.n	8008ad8 <HAL_PWR_EnterSLEEPMode+0x24>
  __ASM volatile ("sev");
 8008ad0:	bf40      	sev
  __ASM volatile ("wfe");
 8008ad2:	bf20      	wfe
 8008ad4:	bf20      	wfe
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8008ad6:	bd10      	pop	{r4, pc}
  __ASM volatile ("wfi");
 8008ad8:	bf30      	wfi
}
 8008ada:	e7fc      	b.n	8008ad6 <HAL_PWR_EnterSLEEPMode+0x22>
 8008adc:	40007000 	.word	0x40007000
 8008ae0:	e000ed00 	.word	0xe000ed00

08008ae4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008ae4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008ae6:	4a0c      	ldr	r2, [pc, #48]	; (8008b18 <HAL_PWR_EnterSTOPMode+0x34>)
 8008ae8:	6813      	ldr	r3, [r2, #0]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8008aea:	2403      	movs	r4, #3
 8008aec:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008aee:	4303      	orrs	r3, r0

  /* Store the new value */
  PWR->CR = tmpreg;
 8008af0:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008af2:	4a0a      	ldr	r2, [pc, #40]	; (8008b1c <HAL_PWR_EnterSTOPMode+0x38>)
 8008af4:	6913      	ldr	r3, [r2, #16]
 8008af6:	2004      	movs	r0, #4
 8008af8:	4303      	orrs	r3, r0
 8008afa:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008afc:	2901      	cmp	r1, #1
 8008afe:	d008      	beq.n	8008b12 <HAL_PWR_EnterSTOPMode+0x2e>
  __ASM volatile ("sev");
 8008b00:	bf40      	sev
  __ASM volatile ("wfe");
 8008b02:	bf20      	wfe
 8008b04:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008b06:	4a05      	ldr	r2, [pc, #20]	; (8008b1c <HAL_PWR_EnterSTOPMode+0x38>)
 8008b08:	6913      	ldr	r3, [r2, #16]
 8008b0a:	2104      	movs	r1, #4
 8008b0c:	438b      	bics	r3, r1
 8008b0e:	6113      	str	r3, [r2, #16]

}
 8008b10:	bd10      	pop	{r4, pc}
  __ASM volatile ("wfi");
 8008b12:	bf30      	wfi
}
 8008b14:	e7f7      	b.n	8008b06 <HAL_PWR_EnterSTOPMode+0x22>
 8008b16:	46c0      	nop			; (mov r8, r8)
 8008b18:	40007000 	.word	0x40007000
 8008b1c:	e000ed00 	.word	0xe000ed00

08008b20 <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8008b20:	4a05      	ldr	r2, [pc, #20]	; (8008b38 <HAL_PWR_EnterSTANDBYMode+0x18>)
 8008b22:	6813      	ldr	r3, [r2, #0]
 8008b24:	2102      	movs	r1, #2
 8008b26:	430b      	orrs	r3, r1
 8008b28:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008b2a:	4a04      	ldr	r2, [pc, #16]	; (8008b3c <HAL_PWR_EnterSTANDBYMode+0x1c>)
 8008b2c:	6913      	ldr	r3, [r2, #16]
 8008b2e:	3102      	adds	r1, #2
 8008b30:	430b      	orrs	r3, r1
 8008b32:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 8008b34:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 8008b36:	4770      	bx	lr
 8008b38:	40007000 	.word	0x40007000
 8008b3c:	e000ed00 	.word	0xe000ed00

08008b40 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8008b40:	4a03      	ldr	r2, [pc, #12]	; (8008b50 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8008b42:	6811      	ldr	r1, [r2, #0]
 8008b44:	2380      	movs	r3, #128	; 0x80
 8008b46:	00db      	lsls	r3, r3, #3
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	6013      	str	r3, [r2, #0]
}
 8008b4c:	4770      	bx	lr
 8008b4e:	46c0      	nop			; (mov r8, r8)
 8008b50:	40007000 	.word	0x40007000

08008b54 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8008b54:	4a03      	ldr	r2, [pc, #12]	; (8008b64 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8008b56:	6811      	ldr	r1, [r2, #0]
 8008b58:	2380      	movs	r3, #128	; 0x80
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	430b      	orrs	r3, r1
 8008b5e:	6013      	str	r3, [r2, #0]
}
 8008b60:	4770      	bx	lr
 8008b62:	46c0      	nop			; (mov r8, r8)
 8008b64:	40007000 	.word	0x40007000

08008b68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8008b68:	b530      	push	{r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008b6a:	4b1c      	ldr	r3, [pc, #112]	; (8008bdc <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	22f0      	movs	r2, #240	; 0xf0
 8008b70:	0014      	movs	r4, r2
 8008b72:	401c      	ands	r4, r3
 8008b74:	421a      	tst	r2, r3
 8008b76:	d122      	bne.n	8008bbe <RCC_SetFlashLatencyFromMSIRange+0x56>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008b78:	4b18      	ldr	r3, [pc, #96]	; (8008bdc <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8008b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7c:	00db      	lsls	r3, r3, #3
 8008b7e:	d50e      	bpl.n	8008b9e <RCC_SetFlashLatencyFromMSIRange+0x36>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008b80:	4b17      	ldr	r3, [pc, #92]	; (8008be0 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	22c0      	movs	r2, #192	; 0xc0
 8008b86:	0152      	lsls	r2, r2, #5
 8008b88:	4013      	ands	r3, r2
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
      __HAL_RCC_PWR_CLK_DISABLE();
    }
    
    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8008b8a:	22c0      	movs	r2, #192	; 0xc0
 8008b8c:	0152      	lsls	r2, r2, #5
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d116      	bne.n	8008bc0 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8008b92:	23c0      	movs	r3, #192	; 0xc0
 8008b94:	021b      	lsls	r3, r3, #8
 8008b96:	4298      	cmp	r0, r3
 8008b98:	d112      	bne.n	8008bc0 <RCC_SetFlashLatencyFromMSIRange+0x58>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8008b9a:	2401      	movs	r4, #1
 8008b9c:	e010      	b.n	8008bc0 <RCC_SetFlashLatencyFromMSIRange+0x58>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b9e:	4a0f      	ldr	r2, [pc, #60]	; (8008bdc <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8008ba0:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8008ba2:	2380      	movs	r3, #128	; 0x80
 8008ba4:	055b      	lsls	r3, r3, #21
 8008ba6:	430b      	orrs	r3, r1
 8008ba8:	6393      	str	r3, [r2, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008baa:	4b0d      	ldr	r3, [pc, #52]	; (8008be0 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	21c0      	movs	r1, #192	; 0xc0
 8008bb0:	0149      	lsls	r1, r1, #5
 8008bb2:	400b      	ands	r3, r1
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bb4:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8008bb6:	4d0b      	ldr	r5, [pc, #44]	; (8008be4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8008bb8:	4029      	ands	r1, r5
 8008bba:	6391      	str	r1, [r2, #56]	; 0x38
 8008bbc:	e7e5      	b.n	8008b8a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008bbe:	2400      	movs	r4, #0
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8008bc0:	4909      	ldr	r1, [pc, #36]	; (8008be8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8008bc2:	680b      	ldr	r3, [r1, #0]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	4393      	bics	r3, r2
 8008bc8:	4323      	orrs	r3, r4
 8008bca:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8008bcc:	680b      	ldr	r3, [r1, #0]
 8008bce:	401a      	ands	r2, r3
 8008bd0:	42a2      	cmp	r2, r4
 8008bd2:	d101      	bne.n	8008bd8 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
 8008bd4:	2000      	movs	r0, #0
}
 8008bd6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8008bd8:	2001      	movs	r0, #1
 8008bda:	e7fc      	b.n	8008bd6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
 8008bdc:	40021000 	.word	0x40021000
 8008be0:	40007000 	.word	0x40007000
 8008be4:	efffffff 	.word	0xefffffff
 8008be8:	40022000 	.word	0x40022000

08008bec <HAL_RCC_OscConfig>:
{
 8008bec:	b570      	push	{r4, r5, r6, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bf2:	6803      	ldr	r3, [r0, #0]
 8008bf4:	07db      	lsls	r3, r3, #31
 8008bf6:	d540      	bpl.n	8008c7a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008bf8:	4bcc      	ldr	r3, [pc, #816]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008bfa:	68da      	ldr	r2, [r3, #12]
 8008bfc:	230c      	movs	r3, #12
 8008bfe:	4013      	ands	r3, r2
 8008c00:	2b08      	cmp	r3, #8
 8008c02:	d032      	beq.n	8008c6a <HAL_RCC_OscConfig+0x7e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008c04:	4bc9      	ldr	r3, [pc, #804]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008c06:	68da      	ldr	r2, [r3, #12]
 8008c08:	230c      	movs	r3, #12
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	2b0c      	cmp	r3, #12
 8008c0e:	d028      	beq.n	8008c62 <HAL_RCC_OscConfig+0x76>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c10:	6863      	ldr	r3, [r4, #4]
 8008c12:	2280      	movs	r2, #128	; 0x80
 8008c14:	0252      	lsls	r2, r2, #9
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d057      	beq.n	8008cca <HAL_RCC_OscConfig+0xde>
 8008c1a:	22a0      	movs	r2, #160	; 0xa0
 8008c1c:	02d2      	lsls	r2, r2, #11
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d05a      	beq.n	8008cd8 <HAL_RCC_OscConfig+0xec>
 8008c22:	4bc2      	ldr	r3, [pc, #776]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	49c2      	ldr	r1, [pc, #776]	; (8008f30 <HAL_RCC_OscConfig+0x344>)
 8008c28:	400a      	ands	r2, r1
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	2180      	movs	r1, #128	; 0x80
 8008c30:	0249      	lsls	r1, r1, #9
 8008c32:	400a      	ands	r2, r1
 8008c34:	9201      	str	r2, [sp, #4]
 8008c36:	9a01      	ldr	r2, [sp, #4]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	49be      	ldr	r1, [pc, #760]	; (8008f34 <HAL_RCC_OscConfig+0x348>)
 8008c3c:	400a      	ands	r2, r1
 8008c3e:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c40:	6863      	ldr	r3, [r4, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d054      	beq.n	8008cf0 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8008c46:	f002 fac3 	bl	800b1d0 <HAL_GetTick>
 8008c4a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c4c:	4bb7      	ldr	r3, [pc, #732]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	039b      	lsls	r3, r3, #14
 8008c52:	d412      	bmi.n	8008c7a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c54:	f002 fabc 	bl	800b1d0 <HAL_GetTick>
 8008c58:	1b40      	subs	r0, r0, r5
 8008c5a:	2864      	cmp	r0, #100	; 0x64
 8008c5c:	d9f6      	bls.n	8008c4c <HAL_RCC_OscConfig+0x60>
            return HAL_TIMEOUT;
 8008c5e:	2003      	movs	r0, #3
 8008c60:	e270      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008c62:	4bb2      	ldr	r3, [pc, #712]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	03db      	lsls	r3, r3, #15
 8008c68:	d5d2      	bpl.n	8008c10 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c6a:	4bb0      	ldr	r3, [pc, #704]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	039b      	lsls	r3, r3, #14
 8008c70:	d503      	bpl.n	8008c7a <HAL_RCC_OscConfig+0x8e>
 8008c72:	6863      	ldr	r3, [r4, #4]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d100      	bne.n	8008c7a <HAL_RCC_OscConfig+0x8e>
 8008c78:	e25b      	b.n	8009132 <HAL_RCC_OscConfig+0x546>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	079b      	lsls	r3, r3, #30
 8008c7e:	d559      	bpl.n	8008d34 <HAL_RCC_OscConfig+0x148>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8008c80:	4baa      	ldr	r3, [pc, #680]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008c82:	68da      	ldr	r2, [r3, #12]
 8008c84:	230c      	movs	r3, #12
 8008c86:	4013      	ands	r3, r2
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	d043      	beq.n	8008d14 <HAL_RCC_OscConfig+0x128>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008c8c:	4ba7      	ldr	r3, [pc, #668]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008c8e:	68da      	ldr	r2, [r3, #12]
 8008c90:	230c      	movs	r3, #12
 8008c92:	4013      	ands	r3, r2
 8008c94:	2b0c      	cmp	r3, #12
 8008c96:	d039      	beq.n	8008d0c <HAL_RCC_OscConfig+0x120>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008c98:	68e3      	ldr	r3, [r4, #12]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d100      	bne.n	8008ca0 <HAL_RCC_OscConfig+0xb4>
 8008c9e:	e0ac      	b.n	8008dfa <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ca0:	49a2      	ldr	r1, [pc, #648]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008ca2:	680a      	ldr	r2, [r1, #0]
 8008ca4:	2009      	movs	r0, #9
 8008ca6:	4382      	bics	r2, r0
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8008cac:	f002 fa90 	bl	800b1d0 <HAL_GetTick>
 8008cb0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cb2:	4b9e      	ldr	r3, [pc, #632]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	075b      	lsls	r3, r3, #29
 8008cb8:	d500      	bpl.n	8008cbc <HAL_RCC_OscConfig+0xd0>
 8008cba:	e095      	b.n	8008de8 <HAL_RCC_OscConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cbc:	f002 fa88 	bl	800b1d0 <HAL_GetTick>
 8008cc0:	1b40      	subs	r0, r0, r5
 8008cc2:	2802      	cmp	r0, #2
 8008cc4:	d9f5      	bls.n	8008cb2 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8008cc6:	2003      	movs	r0, #3
 8008cc8:	e23c      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cca:	4a98      	ldr	r2, [pc, #608]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008ccc:	6811      	ldr	r1, [r2, #0]
 8008cce:	2380      	movs	r3, #128	; 0x80
 8008cd0:	025b      	lsls	r3, r3, #9
 8008cd2:	430b      	orrs	r3, r1
 8008cd4:	6013      	str	r3, [r2, #0]
 8008cd6:	e7b3      	b.n	8008c40 <HAL_RCC_OscConfig+0x54>
 8008cd8:	4b94      	ldr	r3, [pc, #592]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008cda:	6819      	ldr	r1, [r3, #0]
 8008cdc:	2280      	movs	r2, #128	; 0x80
 8008cde:	02d2      	lsls	r2, r2, #11
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	6819      	ldr	r1, [r3, #0]
 8008ce6:	2280      	movs	r2, #128	; 0x80
 8008ce8:	0252      	lsls	r2, r2, #9
 8008cea:	430a      	orrs	r2, r1
 8008cec:	601a      	str	r2, [r3, #0]
 8008cee:	e7a7      	b.n	8008c40 <HAL_RCC_OscConfig+0x54>
        tickstart = HAL_GetTick();
 8008cf0:	f002 fa6e 	bl	800b1d0 <HAL_GetTick>
 8008cf4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cf6:	4b8d      	ldr	r3, [pc, #564]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	039b      	lsls	r3, r3, #14
 8008cfc:	d5bd      	bpl.n	8008c7a <HAL_RCC_OscConfig+0x8e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cfe:	f002 fa67 	bl	800b1d0 <HAL_GetTick>
 8008d02:	1b40      	subs	r0, r0, r5
 8008d04:	2864      	cmp	r0, #100	; 0x64
 8008d06:	d9f6      	bls.n	8008cf6 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8008d08:	2003      	movs	r0, #3
 8008d0a:	e21b      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008d0c:	4b87      	ldr	r3, [pc, #540]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	03db      	lsls	r3, r3, #15
 8008d12:	d4c1      	bmi.n	8008c98 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d14:	4b85      	ldr	r3, [pc, #532]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	075b      	lsls	r3, r3, #29
 8008d1a:	d503      	bpl.n	8008d24 <HAL_RCC_OscConfig+0x138>
 8008d1c:	68e3      	ldr	r3, [r4, #12]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d000      	beq.n	8008d24 <HAL_RCC_OscConfig+0x138>
 8008d22:	e208      	b.n	8009136 <HAL_RCC_OscConfig+0x54a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d24:	4981      	ldr	r1, [pc, #516]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008d26:	684b      	ldr	r3, [r1, #4]
 8008d28:	4a83      	ldr	r2, [pc, #524]	; (8008f38 <HAL_RCC_OscConfig+0x34c>)
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	6922      	ldr	r2, [r4, #16]
 8008d2e:	0212      	lsls	r2, r2, #8
 8008d30:	4313      	orrs	r3, r2
 8008d32:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	06db      	lsls	r3, r3, #27
 8008d38:	d53b      	bpl.n	8008db2 <HAL_RCC_OscConfig+0x1c6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8008d3a:	4b7c      	ldr	r3, [pc, #496]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	220c      	movs	r2, #12
 8008d40:	421a      	tst	r2, r3
 8008d42:	d000      	beq.n	8008d46 <HAL_RCC_OscConfig+0x15a>
 8008d44:	e080      	b.n	8008e48 <HAL_RCC_OscConfig+0x25c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008d46:	4b79      	ldr	r3, [pc, #484]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	059b      	lsls	r3, r3, #22
 8008d4c:	d503      	bpl.n	8008d56 <HAL_RCC_OscConfig+0x16a>
 8008d4e:	69e3      	ldr	r3, [r4, #28]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d100      	bne.n	8008d56 <HAL_RCC_OscConfig+0x16a>
 8008d54:	e1f1      	b.n	800913a <HAL_RCC_OscConfig+0x54e>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008d56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d58:	4b74      	ldr	r3, [pc, #464]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	22e0      	movs	r2, #224	; 0xe0
 8008d5e:	0212      	lsls	r2, r2, #8
 8008d60:	4013      	ands	r3, r2
 8008d62:	4298      	cmp	r0, r3
 8008d64:	d95c      	bls.n	8008e20 <HAL_RCC_OscConfig+0x234>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008d66:	f7ff feff 	bl	8008b68 <RCC_SetFlashLatencyFromMSIRange>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	d000      	beq.n	8008d70 <HAL_RCC_OscConfig+0x184>
 8008d6e:	e1e6      	b.n	800913e <HAL_RCC_OscConfig+0x552>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008d70:	4a6e      	ldr	r2, [pc, #440]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008d72:	6853      	ldr	r3, [r2, #4]
 8008d74:	4971      	ldr	r1, [pc, #452]	; (8008f3c <HAL_RCC_OscConfig+0x350>)
 8008d76:	400b      	ands	r3, r1
 8008d78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008d7a:	430b      	orrs	r3, r1
 8008d7c:	6053      	str	r3, [r2, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008d7e:	6853      	ldr	r3, [r2, #4]
 8008d80:	021b      	lsls	r3, r3, #8
 8008d82:	0a1b      	lsrs	r3, r3, #8
 8008d84:	6a21      	ldr	r1, [r4, #32]
 8008d86:	0609      	lsls	r1, r1, #24
 8008d88:	430b      	orrs	r3, r1
 8008d8a:	6053      	str	r3, [r2, #4]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8008d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d8e:	0b5a      	lsrs	r2, r3, #13
 8008d90:	3201      	adds	r2, #1
 8008d92:	2380      	movs	r3, #128	; 0x80
 8008d94:	021b      	lsls	r3, r3, #8
 8008d96:	4093      	lsls	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8008d98:	4a64      	ldr	r2, [pc, #400]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008d9a:	68d1      	ldr	r1, [r2, #12]
 8008d9c:	0909      	lsrs	r1, r1, #4
 8008d9e:	220f      	movs	r2, #15
 8008da0:	400a      	ands	r2, r1
 8008da2:	4967      	ldr	r1, [pc, #412]	; (8008f40 <HAL_RCC_OscConfig+0x354>)
 8008da4:	5c8a      	ldrb	r2, [r1, r2]
 8008da6:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8008da8:	4a66      	ldr	r2, [pc, #408]	; (8008f44 <HAL_RCC_OscConfig+0x358>)
 8008daa:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8008dac:	2003      	movs	r0, #3
 8008dae:	f7ff fc94 	bl	80086da <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	071b      	lsls	r3, r3, #28
 8008db6:	d400      	bmi.n	8008dba <HAL_RCC_OscConfig+0x1ce>
 8008db8:	e092      	b.n	8008ee0 <HAL_RCC_OscConfig+0x2f4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008dba:	6963      	ldr	r3, [r4, #20]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d07c      	beq.n	8008eba <HAL_RCC_OscConfig+0x2ce>
      __HAL_RCC_LSI_ENABLE();
 8008dc0:	4a5a      	ldr	r2, [pc, #360]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008dc2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	430b      	orrs	r3, r1
 8008dc8:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8008dca:	f002 fa01 	bl	800b1d0 <HAL_GetTick>
 8008dce:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dd0:	4b56      	ldr	r3, [pc, #344]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dd4:	079b      	lsls	r3, r3, #30
 8008dd6:	d500      	bpl.n	8008dda <HAL_RCC_OscConfig+0x1ee>
 8008dd8:	e082      	b.n	8008ee0 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008dda:	f002 f9f9 	bl	800b1d0 <HAL_GetTick>
 8008dde:	1b40      	subs	r0, r0, r5
 8008de0:	2802      	cmp	r0, #2
 8008de2:	d9f5      	bls.n	8008dd0 <HAL_RCC_OscConfig+0x1e4>
          return HAL_TIMEOUT;
 8008de4:	2003      	movs	r0, #3
 8008de6:	e1ad      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008de8:	4950      	ldr	r1, [pc, #320]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008dea:	684b      	ldr	r3, [r1, #4]
 8008dec:	4a52      	ldr	r2, [pc, #328]	; (8008f38 <HAL_RCC_OscConfig+0x34c>)
 8008dee:	4013      	ands	r3, r2
 8008df0:	6922      	ldr	r2, [r4, #16]
 8008df2:	0212      	lsls	r2, r2, #8
 8008df4:	4313      	orrs	r3, r2
 8008df6:	604b      	str	r3, [r1, #4]
 8008df8:	e79c      	b.n	8008d34 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8008dfa:	4a4c      	ldr	r2, [pc, #304]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008dfc:	6813      	ldr	r3, [r2, #0]
 8008dfe:	2101      	movs	r1, #1
 8008e00:	438b      	bics	r3, r1
 8008e02:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008e04:	f002 f9e4 	bl	800b1d0 <HAL_GetTick>
 8008e08:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e0a:	4b48      	ldr	r3, [pc, #288]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	075b      	lsls	r3, r3, #29
 8008e10:	d590      	bpl.n	8008d34 <HAL_RCC_OscConfig+0x148>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e12:	f002 f9dd 	bl	800b1d0 <HAL_GetTick>
 8008e16:	1b40      	subs	r0, r0, r5
 8008e18:	2802      	cmp	r0, #2
 8008e1a:	d9f6      	bls.n	8008e0a <HAL_RCC_OscConfig+0x21e>
            return HAL_TIMEOUT;
 8008e1c:	2003      	movs	r0, #3
 8008e1e:	e191      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008e20:	4a42      	ldr	r2, [pc, #264]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008e22:	6853      	ldr	r3, [r2, #4]
 8008e24:	4945      	ldr	r1, [pc, #276]	; (8008f3c <HAL_RCC_OscConfig+0x350>)
 8008e26:	400b      	ands	r3, r1
 8008e28:	4318      	orrs	r0, r3
 8008e2a:	6050      	str	r0, [r2, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008e2c:	6853      	ldr	r3, [r2, #4]
 8008e2e:	021b      	lsls	r3, r3, #8
 8008e30:	0a1b      	lsrs	r3, r3, #8
 8008e32:	6a21      	ldr	r1, [r4, #32]
 8008e34:	0609      	lsls	r1, r1, #24
 8008e36:	430b      	orrs	r3, r1
 8008e38:	6053      	str	r3, [r2, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008e3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e3c:	f7ff fe94 	bl	8008b68 <RCC_SetFlashLatencyFromMSIRange>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d0a3      	beq.n	8008d8c <HAL_RCC_OscConfig+0x1a0>
            return HAL_ERROR;
 8008e44:	2001      	movs	r0, #1
 8008e46:	e17d      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008e48:	69e3      	ldr	r3, [r4, #28]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d022      	beq.n	8008e94 <HAL_RCC_OscConfig+0x2a8>
        __HAL_RCC_MSI_ENABLE();
 8008e4e:	4a37      	ldr	r2, [pc, #220]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008e50:	6811      	ldr	r1, [r2, #0]
 8008e52:	2380      	movs	r3, #128	; 0x80
 8008e54:	005b      	lsls	r3, r3, #1
 8008e56:	430b      	orrs	r3, r1
 8008e58:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008e5a:	f002 f9b9 	bl	800b1d0 <HAL_GetTick>
 8008e5e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8008e60:	4b32      	ldr	r3, [pc, #200]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	059b      	lsls	r3, r3, #22
 8008e66:	d406      	bmi.n	8008e76 <HAL_RCC_OscConfig+0x28a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008e68:	f002 f9b2 	bl	800b1d0 <HAL_GetTick>
 8008e6c:	1b40      	subs	r0, r0, r5
 8008e6e:	2802      	cmp	r0, #2
 8008e70:	d9f6      	bls.n	8008e60 <HAL_RCC_OscConfig+0x274>
            return HAL_TIMEOUT;
 8008e72:	2003      	movs	r0, #3
 8008e74:	e166      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008e76:	4a2d      	ldr	r2, [pc, #180]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008e78:	6853      	ldr	r3, [r2, #4]
 8008e7a:	4930      	ldr	r1, [pc, #192]	; (8008f3c <HAL_RCC_OscConfig+0x350>)
 8008e7c:	400b      	ands	r3, r1
 8008e7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008e80:	430b      	orrs	r3, r1
 8008e82:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008e84:	6853      	ldr	r3, [r2, #4]
 8008e86:	021b      	lsls	r3, r3, #8
 8008e88:	0a1b      	lsrs	r3, r3, #8
 8008e8a:	6a21      	ldr	r1, [r4, #32]
 8008e8c:	0609      	lsls	r1, r1, #24
 8008e8e:	430b      	orrs	r3, r1
 8008e90:	6053      	str	r3, [r2, #4]
 8008e92:	e78e      	b.n	8008db2 <HAL_RCC_OscConfig+0x1c6>
        __HAL_RCC_MSI_DISABLE();
 8008e94:	4a25      	ldr	r2, [pc, #148]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008e96:	6813      	ldr	r3, [r2, #0]
 8008e98:	492b      	ldr	r1, [pc, #172]	; (8008f48 <HAL_RCC_OscConfig+0x35c>)
 8008e9a:	400b      	ands	r3, r1
 8008e9c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008e9e:	f002 f997 	bl	800b1d0 <HAL_GetTick>
 8008ea2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8008ea4:	4b21      	ldr	r3, [pc, #132]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	059b      	lsls	r3, r3, #22
 8008eaa:	d582      	bpl.n	8008db2 <HAL_RCC_OscConfig+0x1c6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008eac:	f002 f990 	bl	800b1d0 <HAL_GetTick>
 8008eb0:	1b40      	subs	r0, r0, r5
 8008eb2:	2802      	cmp	r0, #2
 8008eb4:	d9f6      	bls.n	8008ea4 <HAL_RCC_OscConfig+0x2b8>
            return HAL_TIMEOUT;
 8008eb6:	2003      	movs	r0, #3
 8008eb8:	e144      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
      __HAL_RCC_LSI_DISABLE();
 8008eba:	4a1c      	ldr	r2, [pc, #112]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008ebc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008ebe:	2101      	movs	r1, #1
 8008ec0:	438b      	bics	r3, r1
 8008ec2:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8008ec4:	f002 f984 	bl	800b1d0 <HAL_GetTick>
 8008ec8:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008eca:	4b18      	ldr	r3, [pc, #96]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ece:	079b      	lsls	r3, r3, #30
 8008ed0:	d506      	bpl.n	8008ee0 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ed2:	f002 f97d 	bl	800b1d0 <HAL_GetTick>
 8008ed6:	1b40      	subs	r0, r0, r5
 8008ed8:	2802      	cmp	r0, #2
 8008eda:	d9f6      	bls.n	8008eca <HAL_RCC_OscConfig+0x2de>
          return HAL_TIMEOUT;
 8008edc:	2003      	movs	r0, #3
 8008ede:	e131      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	075b      	lsls	r3, r3, #29
 8008ee4:	d400      	bmi.n	8008ee8 <HAL_RCC_OscConfig+0x2fc>
 8008ee6:	e08c      	b.n	8009002 <HAL_RCC_OscConfig+0x416>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ee8:	4b10      	ldr	r3, [pc, #64]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eec:	00db      	lsls	r3, r3, #3
 8008eee:	d41b      	bmi.n	8008f28 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ef0:	4a0e      	ldr	r2, [pc, #56]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008ef2:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8008ef4:	2380      	movs	r3, #128	; 0x80
 8008ef6:	055b      	lsls	r3, r3, #21
 8008ef8:	430b      	orrs	r3, r1
 8008efa:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8008efc:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008efe:	4b13      	ldr	r3, [pc, #76]	; (8008f4c <HAL_RCC_OscConfig+0x360>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	05db      	lsls	r3, r3, #23
 8008f04:	d526      	bpl.n	8008f54 <HAL_RCC_OscConfig+0x368>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f06:	68a3      	ldr	r3, [r4, #8]
 8008f08:	2280      	movs	r2, #128	; 0x80
 8008f0a:	0052      	lsls	r2, r2, #1
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d035      	beq.n	8008f7c <HAL_RCC_OscConfig+0x390>
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d14b      	bne.n	8008fac <HAL_RCC_OscConfig+0x3c0>
 8008f14:	4b05      	ldr	r3, [pc, #20]	; (8008f2c <HAL_RCC_OscConfig+0x340>)
 8008f16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f18:	490b      	ldr	r1, [pc, #44]	; (8008f48 <HAL_RCC_OscConfig+0x35c>)
 8008f1a:	400a      	ands	r2, r1
 8008f1c:	651a      	str	r2, [r3, #80]	; 0x50
 8008f1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f20:	490b      	ldr	r1, [pc, #44]	; (8008f50 <HAL_RCC_OscConfig+0x364>)
 8008f22:	400a      	ands	r2, r1
 8008f24:	651a      	str	r2, [r3, #80]	; 0x50
 8008f26:	e02f      	b.n	8008f88 <HAL_RCC_OscConfig+0x39c>
    FlagStatus       pwrclkchanged = RESET;
 8008f28:	2500      	movs	r5, #0
 8008f2a:	e7e8      	b.n	8008efe <HAL_RCC_OscConfig+0x312>
 8008f2c:	40021000 	.word	0x40021000
 8008f30:	fffeffff 	.word	0xfffeffff
 8008f34:	fffbffff 	.word	0xfffbffff
 8008f38:	ffffe0ff 	.word	0xffffe0ff
 8008f3c:	ffff1fff 	.word	0xffff1fff
 8008f40:	080196f4 	.word	0x080196f4
 8008f44:	20000570 	.word	0x20000570
 8008f48:	fffffeff 	.word	0xfffffeff
 8008f4c:	40007000 	.word	0x40007000
 8008f50:	fffffbff 	.word	0xfffffbff
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f54:	4a7d      	ldr	r2, [pc, #500]	; (800914c <HAL_RCC_OscConfig+0x560>)
 8008f56:	6811      	ldr	r1, [r2, #0]
 8008f58:	2380      	movs	r3, #128	; 0x80
 8008f5a:	005b      	lsls	r3, r3, #1
 8008f5c:	430b      	orrs	r3, r1
 8008f5e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8008f60:	f002 f936 	bl	800b1d0 <HAL_GetTick>
 8008f64:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f66:	4b79      	ldr	r3, [pc, #484]	; (800914c <HAL_RCC_OscConfig+0x560>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	05db      	lsls	r3, r3, #23
 8008f6c:	d4cb      	bmi.n	8008f06 <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f6e:	f002 f92f 	bl	800b1d0 <HAL_GetTick>
 8008f72:	1b80      	subs	r0, r0, r6
 8008f74:	2864      	cmp	r0, #100	; 0x64
 8008f76:	d9f6      	bls.n	8008f66 <HAL_RCC_OscConfig+0x37a>
          return HAL_TIMEOUT;
 8008f78:	2003      	movs	r0, #3
 8008f7a:	e0e3      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f7c:	4a74      	ldr	r2, [pc, #464]	; (8009150 <HAL_RCC_OscConfig+0x564>)
 8008f7e:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8008f80:	2380      	movs	r3, #128	; 0x80
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	430b      	orrs	r3, r1
 8008f86:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008f88:	68a3      	ldr	r3, [r4, #8]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d028      	beq.n	8008fe0 <HAL_RCC_OscConfig+0x3f4>
      tickstart = HAL_GetTick();
 8008f8e:	f002 f91f 	bl	800b1d0 <HAL_GetTick>
 8008f92:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f94:	4b6e      	ldr	r3, [pc, #440]	; (8009150 <HAL_RCC_OscConfig+0x564>)
 8008f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f98:	059b      	lsls	r3, r3, #22
 8008f9a:	d430      	bmi.n	8008ffe <HAL_RCC_OscConfig+0x412>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f9c:	f002 f918 	bl	800b1d0 <HAL_GetTick>
 8008fa0:	1b80      	subs	r0, r0, r6
 8008fa2:	4b6c      	ldr	r3, [pc, #432]	; (8009154 <HAL_RCC_OscConfig+0x568>)
 8008fa4:	4298      	cmp	r0, r3
 8008fa6:	d9f5      	bls.n	8008f94 <HAL_RCC_OscConfig+0x3a8>
          return HAL_TIMEOUT;
 8008fa8:	2003      	movs	r0, #3
 8008faa:	e0cb      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fac:	22a0      	movs	r2, #160	; 0xa0
 8008fae:	00d2      	lsls	r2, r2, #3
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d009      	beq.n	8008fc8 <HAL_RCC_OscConfig+0x3dc>
 8008fb4:	4b66      	ldr	r3, [pc, #408]	; (8009150 <HAL_RCC_OscConfig+0x564>)
 8008fb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fb8:	4967      	ldr	r1, [pc, #412]	; (8009158 <HAL_RCC_OscConfig+0x56c>)
 8008fba:	400a      	ands	r2, r1
 8008fbc:	651a      	str	r2, [r3, #80]	; 0x50
 8008fbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fc0:	4966      	ldr	r1, [pc, #408]	; (800915c <HAL_RCC_OscConfig+0x570>)
 8008fc2:	400a      	ands	r2, r1
 8008fc4:	651a      	str	r2, [r3, #80]	; 0x50
 8008fc6:	e7df      	b.n	8008f88 <HAL_RCC_OscConfig+0x39c>
 8008fc8:	4b61      	ldr	r3, [pc, #388]	; (8009150 <HAL_RCC_OscConfig+0x564>)
 8008fca:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008fcc:	3a01      	subs	r2, #1
 8008fce:	3aff      	subs	r2, #255	; 0xff
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	651a      	str	r2, [r3, #80]	; 0x50
 8008fd4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008fd6:	2280      	movs	r2, #128	; 0x80
 8008fd8:	0052      	lsls	r2, r2, #1
 8008fda:	430a      	orrs	r2, r1
 8008fdc:	651a      	str	r2, [r3, #80]	; 0x50
 8008fde:	e7d3      	b.n	8008f88 <HAL_RCC_OscConfig+0x39c>
      tickstart = HAL_GetTick();
 8008fe0:	f002 f8f6 	bl	800b1d0 <HAL_GetTick>
 8008fe4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fe6:	4b5a      	ldr	r3, [pc, #360]	; (8009150 <HAL_RCC_OscConfig+0x564>)
 8008fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fea:	059b      	lsls	r3, r3, #22
 8008fec:	d507      	bpl.n	8008ffe <HAL_RCC_OscConfig+0x412>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fee:	f002 f8ef 	bl	800b1d0 <HAL_GetTick>
 8008ff2:	1b80      	subs	r0, r0, r6
 8008ff4:	4b57      	ldr	r3, [pc, #348]	; (8009154 <HAL_RCC_OscConfig+0x568>)
 8008ff6:	4298      	cmp	r0, r3
 8008ff8:	d9f5      	bls.n	8008fe6 <HAL_RCC_OscConfig+0x3fa>
          return HAL_TIMEOUT;
 8008ffa:	2003      	movs	r0, #3
 8008ffc:	e0a2      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
    if(pwrclkchanged == SET)
 8008ffe:	2d01      	cmp	r5, #1
 8009000:	d021      	beq.n	8009046 <HAL_RCC_OscConfig+0x45a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	069b      	lsls	r3, r3, #26
 8009006:	d53c      	bpl.n	8009082 <HAL_RCC_OscConfig+0x496>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009008:	69a3      	ldr	r3, [r4, #24]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d021      	beq.n	8009052 <HAL_RCC_OscConfig+0x466>
        __HAL_RCC_HSI48_ENABLE();
 800900e:	4b50      	ldr	r3, [pc, #320]	; (8009150 <HAL_RCC_OscConfig+0x564>)
 8009010:	6899      	ldr	r1, [r3, #8]
 8009012:	2001      	movs	r0, #1
 8009014:	4301      	orrs	r1, r0
 8009016:	6099      	str	r1, [r3, #8]
 8009018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800901a:	4302      	orrs	r2, r0
 800901c:	635a      	str	r2, [r3, #52]	; 0x34
 800901e:	4a50      	ldr	r2, [pc, #320]	; (8009160 <HAL_RCC_OscConfig+0x574>)
 8009020:	6a11      	ldr	r1, [r2, #32]
 8009022:	2380      	movs	r3, #128	; 0x80
 8009024:	019b      	lsls	r3, r3, #6
 8009026:	430b      	orrs	r3, r1
 8009028:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800902a:	f002 f8d1 	bl	800b1d0 <HAL_GetTick>
 800902e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8009030:	4b47      	ldr	r3, [pc, #284]	; (8009150 <HAL_RCC_OscConfig+0x564>)
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	079b      	lsls	r3, r3, #30
 8009036:	d424      	bmi.n	8009082 <HAL_RCC_OscConfig+0x496>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009038:	f002 f8ca 	bl	800b1d0 <HAL_GetTick>
 800903c:	1b40      	subs	r0, r0, r5
 800903e:	2802      	cmp	r0, #2
 8009040:	d9f6      	bls.n	8009030 <HAL_RCC_OscConfig+0x444>
            return HAL_TIMEOUT;
 8009042:	2003      	movs	r0, #3
 8009044:	e07e      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009046:	4a42      	ldr	r2, [pc, #264]	; (8009150 <HAL_RCC_OscConfig+0x564>)
 8009048:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800904a:	4946      	ldr	r1, [pc, #280]	; (8009164 <HAL_RCC_OscConfig+0x578>)
 800904c:	400b      	ands	r3, r1
 800904e:	6393      	str	r3, [r2, #56]	; 0x38
 8009050:	e7d7      	b.n	8009002 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI48_DISABLE();
 8009052:	4a3f      	ldr	r2, [pc, #252]	; (8009150 <HAL_RCC_OscConfig+0x564>)
 8009054:	6893      	ldr	r3, [r2, #8]
 8009056:	2101      	movs	r1, #1
 8009058:	438b      	bics	r3, r1
 800905a:	6093      	str	r3, [r2, #8]
 800905c:	4a40      	ldr	r2, [pc, #256]	; (8009160 <HAL_RCC_OscConfig+0x574>)
 800905e:	6a13      	ldr	r3, [r2, #32]
 8009060:	4941      	ldr	r1, [pc, #260]	; (8009168 <HAL_RCC_OscConfig+0x57c>)
 8009062:	400b      	ands	r3, r1
 8009064:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8009066:	f002 f8b3 	bl	800b1d0 <HAL_GetTick>
 800906a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800906c:	4b38      	ldr	r3, [pc, #224]	; (8009150 <HAL_RCC_OscConfig+0x564>)
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	079b      	lsls	r3, r3, #30
 8009072:	d506      	bpl.n	8009082 <HAL_RCC_OscConfig+0x496>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009074:	f002 f8ac 	bl	800b1d0 <HAL_GetTick>
 8009078:	1b40      	subs	r0, r0, r5
 800907a:	2802      	cmp	r0, #2
 800907c:	d9f6      	bls.n	800906c <HAL_RCC_OscConfig+0x480>
            return HAL_TIMEOUT;
 800907e:	2003      	movs	r0, #3
 8009080:	e060      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009082:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009084:	2b00      	cmp	r3, #0
 8009086:	d05c      	beq.n	8009142 <HAL_RCC_OscConfig+0x556>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009088:	4a31      	ldr	r2, [pc, #196]	; (8009150 <HAL_RCC_OscConfig+0x564>)
 800908a:	68d1      	ldr	r1, [r2, #12]
 800908c:	220c      	movs	r2, #12
 800908e:	400a      	ands	r2, r1
 8009090:	2a0c      	cmp	r2, #12
 8009092:	d059      	beq.n	8009148 <HAL_RCC_OscConfig+0x55c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009094:	2b02      	cmp	r3, #2
 8009096:	d012      	beq.n	80090be <HAL_RCC_OscConfig+0x4d2>
        __HAL_RCC_PLL_DISABLE();
 8009098:	4a2d      	ldr	r2, [pc, #180]	; (8009150 <HAL_RCC_OscConfig+0x564>)
 800909a:	6813      	ldr	r3, [r2, #0]
 800909c:	4933      	ldr	r1, [pc, #204]	; (800916c <HAL_RCC_OscConfig+0x580>)
 800909e:	400b      	ands	r3, r1
 80090a0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80090a2:	f002 f895 	bl	800b1d0 <HAL_GetTick>
 80090a6:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80090a8:	4b29      	ldr	r3, [pc, #164]	; (8009150 <HAL_RCC_OscConfig+0x564>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	019b      	lsls	r3, r3, #6
 80090ae:	d53e      	bpl.n	800912e <HAL_RCC_OscConfig+0x542>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090b0:	f002 f88e 	bl	800b1d0 <HAL_GetTick>
 80090b4:	1b00      	subs	r0, r0, r4
 80090b6:	2802      	cmp	r0, #2
 80090b8:	d9f6      	bls.n	80090a8 <HAL_RCC_OscConfig+0x4bc>
            return HAL_TIMEOUT;
 80090ba:	2003      	movs	r0, #3
 80090bc:	e042      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_PLL_DISABLE();
 80090be:	4a24      	ldr	r2, [pc, #144]	; (8009150 <HAL_RCC_OscConfig+0x564>)
 80090c0:	6813      	ldr	r3, [r2, #0]
 80090c2:	492a      	ldr	r1, [pc, #168]	; (800916c <HAL_RCC_OscConfig+0x580>)
 80090c4:	400b      	ands	r3, r1
 80090c6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80090c8:	f002 f882 	bl	800b1d0 <HAL_GetTick>
 80090cc:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80090ce:	4b20      	ldr	r3, [pc, #128]	; (8009150 <HAL_RCC_OscConfig+0x564>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	019b      	lsls	r3, r3, #6
 80090d4:	d506      	bpl.n	80090e4 <HAL_RCC_OscConfig+0x4f8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090d6:	f002 f87b 	bl	800b1d0 <HAL_GetTick>
 80090da:	1b40      	subs	r0, r0, r5
 80090dc:	2802      	cmp	r0, #2
 80090de:	d9f6      	bls.n	80090ce <HAL_RCC_OscConfig+0x4e2>
            return HAL_TIMEOUT;
 80090e0:	2003      	movs	r0, #3
 80090e2:	e02f      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80090e4:	491a      	ldr	r1, [pc, #104]	; (8009150 <HAL_RCC_OscConfig+0x564>)
 80090e6:	68cb      	ldr	r3, [r1, #12]
 80090e8:	4a21      	ldr	r2, [pc, #132]	; (8009170 <HAL_RCC_OscConfig+0x584>)
 80090ea:	4013      	ands	r3, r2
 80090ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80090ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80090f0:	4302      	orrs	r2, r0
 80090f2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80090f4:	4302      	orrs	r2, r0
 80090f6:	4313      	orrs	r3, r2
 80090f8:	60cb      	str	r3, [r1, #12]
        __HAL_RCC_PLL_ENABLE();
 80090fa:	680a      	ldr	r2, [r1, #0]
 80090fc:	2380      	movs	r3, #128	; 0x80
 80090fe:	045b      	lsls	r3, r3, #17
 8009100:	4313      	orrs	r3, r2
 8009102:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8009104:	f002 f864 	bl	800b1d0 <HAL_GetTick>
 8009108:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800910a:	4b11      	ldr	r3, [pc, #68]	; (8009150 <HAL_RCC_OscConfig+0x564>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	019b      	lsls	r3, r3, #6
 8009110:	d40b      	bmi.n	800912a <HAL_RCC_OscConfig+0x53e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009112:	f002 f85d 	bl	800b1d0 <HAL_GetTick>
 8009116:	1b00      	subs	r0, r0, r4
 8009118:	2802      	cmp	r0, #2
 800911a:	d9f6      	bls.n	800910a <HAL_RCC_OscConfig+0x51e>
            if((HAL_GetTick() - tickstart) > 10)
 800911c:	f002 f858 	bl	800b1d0 <HAL_GetTick>
 8009120:	1b00      	subs	r0, r0, r4
 8009122:	280a      	cmp	r0, #10
 8009124:	d9f1      	bls.n	800910a <HAL_RCC_OscConfig+0x51e>
              return HAL_TIMEOUT;
 8009126:	2003      	movs	r0, #3
 8009128:	e00c      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
  return HAL_OK;
 800912a:	2000      	movs	r0, #0
 800912c:	e00a      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
 800912e:	2000      	movs	r0, #0
 8009130:	e008      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
        return HAL_ERROR;
 8009132:	2001      	movs	r0, #1
 8009134:	e006      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
        return HAL_ERROR;
 8009136:	2001      	movs	r0, #1
 8009138:	e004      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
        return HAL_ERROR;
 800913a:	2001      	movs	r0, #1
 800913c:	e002      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
            return HAL_ERROR;
 800913e:	2001      	movs	r0, #1
 8009140:	e000      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
  return HAL_OK;
 8009142:	2000      	movs	r0, #0
}
 8009144:	b002      	add	sp, #8
 8009146:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8009148:	2001      	movs	r0, #1
 800914a:	e7fb      	b.n	8009144 <HAL_RCC_OscConfig+0x558>
 800914c:	40007000 	.word	0x40007000
 8009150:	40021000 	.word	0x40021000
 8009154:	00001388 	.word	0x00001388
 8009158:	fffffeff 	.word	0xfffffeff
 800915c:	fffffbff 	.word	0xfffffbff
 8009160:	40010000 	.word	0x40010000
 8009164:	efffffff 	.word	0xefffffff
 8009168:	ffffdfff 	.word	0xffffdfff
 800916c:	feffffff 	.word	0xfeffffff
 8009170:	ff02ffff 	.word	0xff02ffff

08009174 <HAL_RCC_GetSysClockFreq>:
{
 8009174:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8009176:	4b26      	ldr	r3, [pc, #152]	; (8009210 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009178:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 800917a:	230c      	movs	r3, #12
 800917c:	400b      	ands	r3, r1
 800917e:	2b08      	cmp	r3, #8
 8009180:	d042      	beq.n	8009208 <HAL_RCC_GetSysClockFreq+0x94>
 8009182:	2b0c      	cmp	r3, #12
 8009184:	d011      	beq.n	80091aa <HAL_RCC_GetSysClockFreq+0x36>
 8009186:	2b04      	cmp	r3, #4
 8009188:	d009      	beq.n	800919e <HAL_RCC_GetSysClockFreq+0x2a>
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 800918a:	4b21      	ldr	r3, [pc, #132]	; (8009210 <HAL_RCC_GetSysClockFreq+0x9c>)
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	0b52      	lsrs	r2, r2, #13
 8009190:	2307      	movs	r3, #7
 8009192:	4013      	ands	r3, r2
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8009194:	3301      	adds	r3, #1
 8009196:	2080      	movs	r0, #128	; 0x80
 8009198:	0200      	lsls	r0, r0, #8
 800919a:	4098      	lsls	r0, r3
}
 800919c:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 800919e:	4b1c      	ldr	r3, [pc, #112]	; (8009210 <HAL_RCC_GetSysClockFreq+0x9c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	06db      	lsls	r3, r3, #27
 80091a4:	d532      	bpl.n	800920c <HAL_RCC_GetSysClockFreq+0x98>
        sysclockfreq =  (HSI_VALUE >> 2);
 80091a6:	481b      	ldr	r0, [pc, #108]	; (8009214 <HAL_RCC_GetSysClockFreq+0xa0>)
 80091a8:	e7f8      	b.n	800919c <HAL_RCC_GetSysClockFreq+0x28>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80091aa:	0c8a      	lsrs	r2, r1, #18
 80091ac:	230f      	movs	r3, #15
 80091ae:	4013      	ands	r3, r2
 80091b0:	4a19      	ldr	r2, [pc, #100]	; (8009218 <HAL_RCC_GetSysClockFreq+0xa4>)
 80091b2:	5cd2      	ldrb	r2, [r2, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 80091b4:	0d89      	lsrs	r1, r1, #22
 80091b6:	2303      	movs	r3, #3
 80091b8:	4019      	ands	r1, r3
 80091ba:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80091bc:	4b14      	ldr	r3, [pc, #80]	; (8009210 <HAL_RCC_GetSysClockFreq+0x9c>)
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	03db      	lsls	r3, r3, #15
 80091c2:	d509      	bpl.n	80091d8 <HAL_RCC_GetSysClockFreq+0x64>
        pllvco = (HSE_VALUE * pllm) / plld;
 80091c4:	0150      	lsls	r0, r2, #5
 80091c6:	1a80      	subs	r0, r0, r2
 80091c8:	0183      	lsls	r3, r0, #6
 80091ca:	1a18      	subs	r0, r3, r0
 80091cc:	00c0      	lsls	r0, r0, #3
 80091ce:	1880      	adds	r0, r0, r2
 80091d0:	0240      	lsls	r0, r0, #9
 80091d2:	f008 fc9d 	bl	8011b10 <__udivsi3>
 80091d6:	e7e1      	b.n	800919c <HAL_RCC_GetSysClockFreq+0x28>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 80091d8:	4b0d      	ldr	r3, [pc, #52]	; (8009210 <HAL_RCC_GetSysClockFreq+0x9c>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	06db      	lsls	r3, r3, #27
 80091de:	d509      	bpl.n	80091f4 <HAL_RCC_GetSysClockFreq+0x80>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80091e0:	0153      	lsls	r3, r2, #5
 80091e2:	1a9b      	subs	r3, r3, r2
 80091e4:	0198      	lsls	r0, r3, #6
 80091e6:	1ac0      	subs	r0, r0, r3
 80091e8:	00c0      	lsls	r0, r0, #3
 80091ea:	1880      	adds	r0, r0, r2
 80091ec:	0200      	lsls	r0, r0, #8
 80091ee:	f008 fc8f 	bl	8011b10 <__udivsi3>
 80091f2:	e7d3      	b.n	800919c <HAL_RCC_GetSysClockFreq+0x28>
         pllvco = (HSI_VALUE * pllm) / plld;
 80091f4:	0153      	lsls	r3, r2, #5
 80091f6:	1a9b      	subs	r3, r3, r2
 80091f8:	0198      	lsls	r0, r3, #6
 80091fa:	1ac0      	subs	r0, r0, r3
 80091fc:	00c0      	lsls	r0, r0, #3
 80091fe:	1880      	adds	r0, r0, r2
 8009200:	0280      	lsls	r0, r0, #10
 8009202:	f008 fc85 	bl	8011b10 <__udivsi3>
 8009206:	e7c9      	b.n	800919c <HAL_RCC_GetSysClockFreq+0x28>
  switch (tmpreg & RCC_CFGR_SWS)
 8009208:	4804      	ldr	r0, [pc, #16]	; (800921c <HAL_RCC_GetSysClockFreq+0xa8>)
 800920a:	e7c7      	b.n	800919c <HAL_RCC_GetSysClockFreq+0x28>
        sysclockfreq =  HSI_VALUE;
 800920c:	4804      	ldr	r0, [pc, #16]	; (8009220 <HAL_RCC_GetSysClockFreq+0xac>)
  return sysclockfreq;
 800920e:	e7c5      	b.n	800919c <HAL_RCC_GetSysClockFreq+0x28>
 8009210:	40021000 	.word	0x40021000
 8009214:	003d0900 	.word	0x003d0900
 8009218:	0801970c 	.word	0x0801970c
 800921c:	007a1200 	.word	0x007a1200
 8009220:	00f42400 	.word	0x00f42400

08009224 <HAL_RCC_ClockConfig>:
{
 8009224:	b570      	push	{r4, r5, r6, lr}
 8009226:	0004      	movs	r4, r0
 8009228:	000d      	movs	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800922a:	4b5f      	ldr	r3, [pc, #380]	; (80093a8 <HAL_RCC_ClockConfig+0x184>)
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	2301      	movs	r3, #1
 8009230:	4013      	ands	r3, r2
 8009232:	428b      	cmp	r3, r1
 8009234:	d20a      	bcs.n	800924c <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009236:	495c      	ldr	r1, [pc, #368]	; (80093a8 <HAL_RCC_ClockConfig+0x184>)
 8009238:	680b      	ldr	r3, [r1, #0]
 800923a:	2201      	movs	r2, #1
 800923c:	4393      	bics	r3, r2
 800923e:	432b      	orrs	r3, r5
 8009240:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009242:	680b      	ldr	r3, [r1, #0]
 8009244:	401a      	ands	r2, r3
 8009246:	42aa      	cmp	r2, r5
 8009248:	d000      	beq.n	800924c <HAL_RCC_ClockConfig+0x28>
 800924a:	e0a7      	b.n	800939c <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	079b      	lsls	r3, r3, #30
 8009250:	d506      	bpl.n	8009260 <HAL_RCC_ClockConfig+0x3c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009252:	4a56      	ldr	r2, [pc, #344]	; (80093ac <HAL_RCC_ClockConfig+0x188>)
 8009254:	68d3      	ldr	r3, [r2, #12]
 8009256:	21f0      	movs	r1, #240	; 0xf0
 8009258:	438b      	bics	r3, r1
 800925a:	68a1      	ldr	r1, [r4, #8]
 800925c:	430b      	orrs	r3, r1
 800925e:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	07db      	lsls	r3, r3, #31
 8009264:	d564      	bpl.n	8009330 <HAL_RCC_ClockConfig+0x10c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009266:	6863      	ldr	r3, [r4, #4]
 8009268:	2b02      	cmp	r3, #2
 800926a:	d009      	beq.n	8009280 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800926c:	2b03      	cmp	r3, #3
 800926e:	d029      	beq.n	80092c4 <HAL_RCC_ClockConfig+0xa0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009270:	2b01      	cmp	r3, #1
 8009272:	d02d      	beq.n	80092d0 <HAL_RCC_ClockConfig+0xac>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8009274:	4a4d      	ldr	r2, [pc, #308]	; (80093ac <HAL_RCC_ClockConfig+0x188>)
 8009276:	6812      	ldr	r2, [r2, #0]
 8009278:	0592      	lsls	r2, r2, #22
 800927a:	d406      	bmi.n	800928a <HAL_RCC_ClockConfig+0x66>
        return HAL_ERROR;
 800927c:	2001      	movs	r0, #1
 800927e:	e08c      	b.n	800939a <HAL_RCC_ClockConfig+0x176>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009280:	4a4a      	ldr	r2, [pc, #296]	; (80093ac <HAL_RCC_ClockConfig+0x188>)
 8009282:	6812      	ldr	r2, [r2, #0]
 8009284:	0392      	lsls	r2, r2, #14
 8009286:	d400      	bmi.n	800928a <HAL_RCC_ClockConfig+0x66>
 8009288:	e08a      	b.n	80093a0 <HAL_RCC_ClockConfig+0x17c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800928a:	4948      	ldr	r1, [pc, #288]	; (80093ac <HAL_RCC_ClockConfig+0x188>)
 800928c:	68ca      	ldr	r2, [r1, #12]
 800928e:	2003      	movs	r0, #3
 8009290:	4382      	bics	r2, r0
 8009292:	4313      	orrs	r3, r2
 8009294:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 8009296:	f001 ff9b 	bl	800b1d0 <HAL_GetTick>
 800929a:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800929c:	6863      	ldr	r3, [r4, #4]
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d01c      	beq.n	80092dc <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d028      	beq.n	80092f8 <HAL_RCC_ClockConfig+0xd4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d034      	beq.n	8009314 <HAL_RCC_ClockConfig+0xf0>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80092aa:	4b40      	ldr	r3, [pc, #256]	; (80093ac <HAL_RCC_ClockConfig+0x188>)
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	220c      	movs	r2, #12
 80092b0:	421a      	tst	r2, r3
 80092b2:	d03d      	beq.n	8009330 <HAL_RCC_ClockConfig+0x10c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092b4:	f001 ff8c 	bl	800b1d0 <HAL_GetTick>
 80092b8:	1b80      	subs	r0, r0, r6
 80092ba:	4b3d      	ldr	r3, [pc, #244]	; (80093b0 <HAL_RCC_ClockConfig+0x18c>)
 80092bc:	4298      	cmp	r0, r3
 80092be:	d9f4      	bls.n	80092aa <HAL_RCC_ClockConfig+0x86>
          return HAL_TIMEOUT;
 80092c0:	2003      	movs	r0, #3
 80092c2:	e06a      	b.n	800939a <HAL_RCC_ClockConfig+0x176>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092c4:	4a39      	ldr	r2, [pc, #228]	; (80093ac <HAL_RCC_ClockConfig+0x188>)
 80092c6:	6812      	ldr	r2, [r2, #0]
 80092c8:	0192      	lsls	r2, r2, #6
 80092ca:	d4de      	bmi.n	800928a <HAL_RCC_ClockConfig+0x66>
        return HAL_ERROR;
 80092cc:	2001      	movs	r0, #1
 80092ce:	e064      	b.n	800939a <HAL_RCC_ClockConfig+0x176>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092d0:	4a36      	ldr	r2, [pc, #216]	; (80093ac <HAL_RCC_ClockConfig+0x188>)
 80092d2:	6812      	ldr	r2, [r2, #0]
 80092d4:	0752      	lsls	r2, r2, #29
 80092d6:	d4d8      	bmi.n	800928a <HAL_RCC_ClockConfig+0x66>
        return HAL_ERROR;
 80092d8:	2001      	movs	r0, #1
 80092da:	e05e      	b.n	800939a <HAL_RCC_ClockConfig+0x176>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80092dc:	4b33      	ldr	r3, [pc, #204]	; (80093ac <HAL_RCC_ClockConfig+0x188>)
 80092de:	68da      	ldr	r2, [r3, #12]
 80092e0:	230c      	movs	r3, #12
 80092e2:	4013      	ands	r3, r2
 80092e4:	2b08      	cmp	r3, #8
 80092e6:	d023      	beq.n	8009330 <HAL_RCC_ClockConfig+0x10c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092e8:	f001 ff72 	bl	800b1d0 <HAL_GetTick>
 80092ec:	1b80      	subs	r0, r0, r6
 80092ee:	4a30      	ldr	r2, [pc, #192]	; (80093b0 <HAL_RCC_ClockConfig+0x18c>)
 80092f0:	4290      	cmp	r0, r2
 80092f2:	d9f3      	bls.n	80092dc <HAL_RCC_ClockConfig+0xb8>
          return HAL_TIMEOUT;
 80092f4:	2003      	movs	r0, #3
 80092f6:	e050      	b.n	800939a <HAL_RCC_ClockConfig+0x176>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80092f8:	4b2c      	ldr	r3, [pc, #176]	; (80093ac <HAL_RCC_ClockConfig+0x188>)
 80092fa:	68da      	ldr	r2, [r3, #12]
 80092fc:	230c      	movs	r3, #12
 80092fe:	4013      	ands	r3, r2
 8009300:	2b0c      	cmp	r3, #12
 8009302:	d015      	beq.n	8009330 <HAL_RCC_ClockConfig+0x10c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009304:	f001 ff64 	bl	800b1d0 <HAL_GetTick>
 8009308:	1b80      	subs	r0, r0, r6
 800930a:	4b29      	ldr	r3, [pc, #164]	; (80093b0 <HAL_RCC_ClockConfig+0x18c>)
 800930c:	4298      	cmp	r0, r3
 800930e:	d9f3      	bls.n	80092f8 <HAL_RCC_ClockConfig+0xd4>
          return HAL_TIMEOUT;
 8009310:	2003      	movs	r0, #3
 8009312:	e042      	b.n	800939a <HAL_RCC_ClockConfig+0x176>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009314:	4b25      	ldr	r3, [pc, #148]	; (80093ac <HAL_RCC_ClockConfig+0x188>)
 8009316:	68da      	ldr	r2, [r3, #12]
 8009318:	230c      	movs	r3, #12
 800931a:	4013      	ands	r3, r2
 800931c:	2b04      	cmp	r3, #4
 800931e:	d007      	beq.n	8009330 <HAL_RCC_ClockConfig+0x10c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009320:	f001 ff56 	bl	800b1d0 <HAL_GetTick>
 8009324:	1b80      	subs	r0, r0, r6
 8009326:	4b22      	ldr	r3, [pc, #136]	; (80093b0 <HAL_RCC_ClockConfig+0x18c>)
 8009328:	4298      	cmp	r0, r3
 800932a:	d9f3      	bls.n	8009314 <HAL_RCC_ClockConfig+0xf0>
          return HAL_TIMEOUT;
 800932c:	2003      	movs	r0, #3
 800932e:	e034      	b.n	800939a <HAL_RCC_ClockConfig+0x176>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8009330:	4b1d      	ldr	r3, [pc, #116]	; (80093a8 <HAL_RCC_ClockConfig+0x184>)
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	2301      	movs	r3, #1
 8009336:	4013      	ands	r3, r2
 8009338:	42ab      	cmp	r3, r5
 800933a:	d909      	bls.n	8009350 <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800933c:	491a      	ldr	r1, [pc, #104]	; (80093a8 <HAL_RCC_ClockConfig+0x184>)
 800933e:	680b      	ldr	r3, [r1, #0]
 8009340:	2201      	movs	r2, #1
 8009342:	4393      	bics	r3, r2
 8009344:	432b      	orrs	r3, r5
 8009346:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009348:	680b      	ldr	r3, [r1, #0]
 800934a:	401a      	ands	r2, r3
 800934c:	42aa      	cmp	r2, r5
 800934e:	d129      	bne.n	80093a4 <HAL_RCC_ClockConfig+0x180>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	075b      	lsls	r3, r3, #29
 8009354:	d506      	bpl.n	8009364 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009356:	4a15      	ldr	r2, [pc, #84]	; (80093ac <HAL_RCC_ClockConfig+0x188>)
 8009358:	68d3      	ldr	r3, [r2, #12]
 800935a:	4916      	ldr	r1, [pc, #88]	; (80093b4 <HAL_RCC_ClockConfig+0x190>)
 800935c:	400b      	ands	r3, r1
 800935e:	68e1      	ldr	r1, [r4, #12]
 8009360:	430b      	orrs	r3, r1
 8009362:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	071b      	lsls	r3, r3, #28
 8009368:	d507      	bpl.n	800937a <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800936a:	4910      	ldr	r1, [pc, #64]	; (80093ac <HAL_RCC_ClockConfig+0x188>)
 800936c:	68cb      	ldr	r3, [r1, #12]
 800936e:	4a12      	ldr	r2, [pc, #72]	; (80093b8 <HAL_RCC_ClockConfig+0x194>)
 8009370:	4013      	ands	r3, r2
 8009372:	6922      	ldr	r2, [r4, #16]
 8009374:	00d2      	lsls	r2, r2, #3
 8009376:	4313      	orrs	r3, r2
 8009378:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800937a:	f7ff fefb 	bl	8009174 <HAL_RCC_GetSysClockFreq>
 800937e:	4b0b      	ldr	r3, [pc, #44]	; (80093ac <HAL_RCC_ClockConfig+0x188>)
 8009380:	68da      	ldr	r2, [r3, #12]
 8009382:	0912      	lsrs	r2, r2, #4
 8009384:	230f      	movs	r3, #15
 8009386:	4013      	ands	r3, r2
 8009388:	4a0c      	ldr	r2, [pc, #48]	; (80093bc <HAL_RCC_ClockConfig+0x198>)
 800938a:	5cd3      	ldrb	r3, [r2, r3]
 800938c:	40d8      	lsrs	r0, r3
 800938e:	4b0c      	ldr	r3, [pc, #48]	; (80093c0 <HAL_RCC_ClockConfig+0x19c>)
 8009390:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8009392:	2003      	movs	r0, #3
 8009394:	f7ff f9a1 	bl	80086da <HAL_InitTick>
  return HAL_OK;
 8009398:	2000      	movs	r0, #0
}
 800939a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800939c:	2001      	movs	r0, #1
 800939e:	e7fc      	b.n	800939a <HAL_RCC_ClockConfig+0x176>
        return HAL_ERROR;
 80093a0:	2001      	movs	r0, #1
 80093a2:	e7fa      	b.n	800939a <HAL_RCC_ClockConfig+0x176>
      return HAL_ERROR;
 80093a4:	2001      	movs	r0, #1
 80093a6:	e7f8      	b.n	800939a <HAL_RCC_ClockConfig+0x176>
 80093a8:	40022000 	.word	0x40022000
 80093ac:	40021000 	.word	0x40021000
 80093b0:	00001388 	.word	0x00001388
 80093b4:	fffff8ff 	.word	0xfffff8ff
 80093b8:	ffffc7ff 	.word	0xffffc7ff
 80093bc:	080196f4 	.word	0x080196f4
 80093c0:	20000570 	.word	0x20000570

080093c4 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 80093c4:	4b01      	ldr	r3, [pc, #4]	; (80093cc <HAL_RCC_GetHCLKFreq+0x8>)
 80093c6:	6818      	ldr	r0, [r3, #0]
}
 80093c8:	4770      	bx	lr
 80093ca:	46c0      	nop			; (mov r8, r8)
 80093cc:	20000570 	.word	0x20000570

080093d0 <HAL_RCC_GetPCLK1Freq>:
{
 80093d0:	b510      	push	{r4, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80093d2:	f7ff fff7 	bl	80093c4 <HAL_RCC_GetHCLKFreq>
 80093d6:	4b04      	ldr	r3, [pc, #16]	; (80093e8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80093d8:	68da      	ldr	r2, [r3, #12]
 80093da:	0a12      	lsrs	r2, r2, #8
 80093dc:	2307      	movs	r3, #7
 80093de:	4013      	ands	r3, r2
 80093e0:	4a02      	ldr	r2, [pc, #8]	; (80093ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80093e2:	5cd3      	ldrb	r3, [r2, r3]
 80093e4:	40d8      	lsrs	r0, r3
}    
 80093e6:	bd10      	pop	{r4, pc}
 80093e8:	40021000 	.word	0x40021000
 80093ec:	08019704 	.word	0x08019704

080093f0 <HAL_RCC_GetPCLK2Freq>:
{
 80093f0:	b510      	push	{r4, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80093f2:	f7ff ffe7 	bl	80093c4 <HAL_RCC_GetHCLKFreq>
 80093f6:	4b04      	ldr	r3, [pc, #16]	; (8009408 <HAL_RCC_GetPCLK2Freq+0x18>)
 80093f8:	68da      	ldr	r2, [r3, #12]
 80093fa:	0ad2      	lsrs	r2, r2, #11
 80093fc:	2307      	movs	r3, #7
 80093fe:	4013      	ands	r3, r2
 8009400:	4a02      	ldr	r2, [pc, #8]	; (800940c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009402:	5cd3      	ldrb	r3, [r2, r3]
 8009404:	40d8      	lsrs	r0, r3
} 
 8009406:	bd10      	pop	{r4, pc}
 8009408:	40021000 	.word	0x40021000
 800940c:	08019704 	.word	0x08019704

08009410 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009410:	b570      	push	{r4, r5, r6, lr}
 8009412:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8009414:	6803      	ldr	r3, [r0, #0]
 8009416:	069b      	lsls	r3, r3, #26
 8009418:	d54f      	bpl.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xaa>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800941a:	4b6b      	ldr	r3, [pc, #428]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800941c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941e:	00db      	lsls	r3, r3, #3
 8009420:	d500      	bpl.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8009422:	e092      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009424:	4a68      	ldr	r2, [pc, #416]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009426:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8009428:	2380      	movs	r3, #128	; 0x80
 800942a:	055b      	lsls	r3, r3, #21
 800942c:	430b      	orrs	r3, r1
 800942e:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8009430:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009432:	4b66      	ldr	r3, [pc, #408]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	05db      	lsls	r3, r3, #23
 8009438:	d400      	bmi.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x2c>
 800943a:	e088      	b.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x13e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800943c:	4b62      	ldr	r3, [pc, #392]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800943e:	6819      	ldr	r1, [r3, #0]
 8009440:	23c0      	movs	r3, #192	; 0xc0
 8009442:	039b      	lsls	r3, r3, #14
 8009444:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8009446:	6862      	ldr	r2, [r4, #4]
 8009448:	4013      	ands	r3, r2
 800944a:	428b      	cmp	r3, r1
 800944c:	d006      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x4c>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800944e:	23c0      	movs	r3, #192	; 0xc0
 8009450:	029b      	lsls	r3, r3, #10
 8009452:	0011      	movs	r1, r2
 8009454:	4019      	ands	r1, r3
 8009456:	4299      	cmp	r1, r3
 8009458:	d100      	bne.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x4c>
 800945a:	e08d      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x168>
        return HAL_ERROR; 
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800945c:	4b5a      	ldr	r3, [pc, #360]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800945e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009460:	23c0      	movs	r3, #192	; 0xc0
 8009462:	029b      	lsls	r3, r3, #10
 8009464:	0008      	movs	r0, r1
 8009466:	4018      	ands	r0, r3
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8009468:	4219      	tst	r1, r3
 800946a:	d015      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800946c:	401a      	ands	r2, r3
 800946e:	4282      	cmp	r2, r0
 8009470:	d012      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x88>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	069b      	lsls	r3, r3, #26
 8009476:	d50f      	bpl.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x88>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8009478:	4b53      	ldr	r3, [pc, #332]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800947a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800947c:	4a54      	ldr	r2, [pc, #336]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800947e:	4002      	ands	r2, r0
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009480:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8009482:	2180      	movs	r1, #128	; 0x80
 8009484:	0309      	lsls	r1, r1, #12
 8009486:	4331      	orrs	r1, r6
 8009488:	6519      	str	r1, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800948a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800948c:	4e51      	ldr	r6, [pc, #324]	; (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800948e:	4031      	ands	r1, r6
 8009490:	6519      	str	r1, [r3, #80]	; 0x50
      
      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8009492:	651a      	str	r2, [r3, #80]	; 0x50
      
       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8009494:	05c3      	lsls	r3, r0, #23
 8009496:	d476      	bmi.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x176>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009498:	6863      	ldr	r3, [r4, #4]
 800949a:	22c0      	movs	r2, #192	; 0xc0
 800949c:	0292      	lsls	r2, r2, #10
 800949e:	0019      	movs	r1, r3
 80094a0:	4011      	ands	r1, r2
 80094a2:	4291      	cmp	r1, r2
 80094a4:	d07e      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x194>
 80094a6:	4948      	ldr	r1, [pc, #288]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80094a8:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80094aa:	22c0      	movs	r2, #192	; 0xc0
 80094ac:	0292      	lsls	r2, r2, #10
 80094ae:	6860      	ldr	r0, [r4, #4]
 80094b0:	4002      	ands	r2, r0
 80094b2:	4313      	orrs	r3, r2
 80094b4:	650b      	str	r3, [r1, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80094b6:	2d01      	cmp	r5, #1
 80094b8:	d07e      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80094ba:	6823      	ldr	r3, [r4, #0]
 80094bc:	07db      	lsls	r3, r3, #31
 80094be:	d506      	bpl.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80094c0:	4a41      	ldr	r2, [pc, #260]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80094c2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80094c4:	2103      	movs	r1, #3
 80094c6:	438b      	bics	r3, r1
 80094c8:	68a1      	ldr	r1, [r4, #8]
 80094ca:	430b      	orrs	r3, r1
 80094cc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80094ce:	6823      	ldr	r3, [r4, #0]
 80094d0:	079b      	lsls	r3, r3, #30
 80094d2:	d506      	bpl.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80094d4:	4a3c      	ldr	r2, [pc, #240]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80094d6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80094d8:	210c      	movs	r1, #12
 80094da:	438b      	bics	r3, r1
 80094dc:	68e1      	ldr	r1, [r4, #12]
 80094de:	430b      	orrs	r3, r1
 80094e0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094e2:	6823      	ldr	r3, [r4, #0]
 80094e4:	075b      	lsls	r3, r3, #29
 80094e6:	d506      	bpl.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094e8:	4a37      	ldr	r2, [pc, #220]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80094ea:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80094ec:	493a      	ldr	r1, [pc, #232]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80094ee:	400b      	ands	r3, r1
 80094f0:	6921      	ldr	r1, [r4, #16]
 80094f2:	430b      	orrs	r3, r1
 80094f4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	071b      	lsls	r3, r3, #28
 80094fa:	d506      	bpl.n	800950a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80094fc:	4a32      	ldr	r2, [pc, #200]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80094fe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009500:	4936      	ldr	r1, [pc, #216]	; (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009502:	400b      	ands	r3, r1
 8009504:	6961      	ldr	r1, [r4, #20]
 8009506:	430b      	orrs	r3, r1
 8009508:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	05db      	lsls	r3, r3, #23
 800950e:	d506      	bpl.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009510:	4a2d      	ldr	r2, [pc, #180]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009512:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009514:	492e      	ldr	r1, [pc, #184]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009516:	400b      	ands	r3, r1
 8009518:	69a1      	ldr	r1, [r4, #24]
 800951a:	430b      	orrs	r3, r1
 800951c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	065b      	lsls	r3, r3, #25
 8009522:	d506      	bpl.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009524:	4a28      	ldr	r2, [pc, #160]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009526:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009528:	492d      	ldr	r1, [pc, #180]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800952a:	400b      	ands	r3, r1
 800952c:	6a21      	ldr	r1, [r4, #32]
 800952e:	430b      	orrs	r3, r1
 8009530:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */
  
  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	061b      	lsls	r3, r3, #24
 8009536:	d545      	bpl.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8009538:	4a23      	ldr	r2, [pc, #140]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800953a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800953c:	4929      	ldr	r1, [pc, #164]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800953e:	400b      	ands	r3, r1
 8009540:	69e1      	ldr	r1, [r4, #28]
 8009542:	430b      	orrs	r3, r1
 8009544:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8009546:	2000      	movs	r0, #0
 8009548:	e03d      	b.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    FlagStatus       pwrclkchanged = RESET;
 800954a:	2500      	movs	r5, #0
 800954c:	e771      	b.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800954e:	4a1f      	ldr	r2, [pc, #124]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009550:	6811      	ldr	r1, [r2, #0]
 8009552:	2380      	movs	r3, #128	; 0x80
 8009554:	005b      	lsls	r3, r3, #1
 8009556:	430b      	orrs	r3, r1
 8009558:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800955a:	f001 fe39 	bl	800b1d0 <HAL_GetTick>
 800955e:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009560:	4b1a      	ldr	r3, [pc, #104]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	05db      	lsls	r3, r3, #23
 8009566:	d500      	bpl.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009568:	e768      	b.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800956a:	f001 fe31 	bl	800b1d0 <HAL_GetTick>
 800956e:	1b80      	subs	r0, r0, r6
 8009570:	2864      	cmp	r0, #100	; 0x64
 8009572:	d9f5      	bls.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x150>
          return HAL_TIMEOUT;
 8009574:	2003      	movs	r0, #3
 8009576:	e026      	b.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009578:	4b13      	ldr	r3, [pc, #76]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	039b      	lsls	r3, r3, #14
 800957e:	d400      	bmi.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009580:	e76c      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x4c>
        return HAL_ERROR; 
 8009582:	2001      	movs	r0, #1
 8009584:	e01f      	b.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        tickstart = HAL_GetTick();
 8009586:	f001 fe23 	bl	800b1d0 <HAL_GetTick>
 800958a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800958c:	4b0e      	ldr	r3, [pc, #56]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800958e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009590:	059b      	lsls	r3, r3, #22
 8009592:	d481      	bmi.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x88>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009594:	f001 fe1c 	bl	800b1d0 <HAL_GetTick>
 8009598:	1b80      	subs	r0, r0, r6
 800959a:	4b13      	ldr	r3, [pc, #76]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800959c:	4298      	cmp	r0, r3
 800959e:	d9f5      	bls.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x17c>
            return HAL_TIMEOUT;
 80095a0:	2003      	movs	r0, #3
 80095a2:	e010      	b.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095a4:	4908      	ldr	r1, [pc, #32]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80095a6:	680a      	ldr	r2, [r1, #0]
 80095a8:	4810      	ldr	r0, [pc, #64]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80095aa:	4002      	ands	r2, r0
 80095ac:	20c0      	movs	r0, #192	; 0xc0
 80095ae:	0380      	lsls	r0, r0, #14
 80095b0:	4003      	ands	r3, r0
 80095b2:	4313      	orrs	r3, r2
 80095b4:	600b      	str	r3, [r1, #0]
 80095b6:	e776      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 80095b8:	000a      	movs	r2, r1
 80095ba:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80095bc:	490c      	ldr	r1, [pc, #48]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80095be:	400b      	ands	r3, r1
 80095c0:	6393      	str	r3, [r2, #56]	; 0x38
 80095c2:	e77a      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xaa>
  return HAL_OK;
 80095c4:	2000      	movs	r0, #0
}
 80095c6:	bd70      	pop	{r4, r5, r6, pc}
 80095c8:	40021000 	.word	0x40021000
 80095cc:	40007000 	.word	0x40007000
 80095d0:	fffcffff 	.word	0xfffcffff
 80095d4:	fff7ffff 	.word	0xfff7ffff
 80095d8:	fffff3ff 	.word	0xfffff3ff
 80095dc:	ffffcfff 	.word	0xffffcfff
 80095e0:	fbffffff 	.word	0xfbffffff
 80095e4:	fff3ffff 	.word	0xfff3ffff
 80095e8:	00001388 	.word	0x00001388
 80095ec:	ffcfffff 	.word	0xffcfffff
 80095f0:	efffffff 	.word	0xefffffff

080095f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80095f4:	b510      	push	{r4, lr}
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 80095f6:	2820      	cmp	r0, #32
 80095f8:	d809      	bhi.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	d100      	bne.n	8009600 <HAL_RCCEx_GetPeriphCLKFreq+0xc>
 80095fe:	e134      	b.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009600:	2820      	cmp	r0, #32
 8009602:	d900      	bls.n	8009606 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8009604:	e133      	b.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8009606:	0080      	lsls	r0, r0, #2
 8009608:	4ba2      	ldr	r3, [pc, #648]	; (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800960a:	581b      	ldr	r3, [r3, r0]
 800960c:	469f      	mov	pc, r3
 800960e:	2840      	cmp	r0, #64	; 0x40
 8009610:	d057      	beq.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8009612:	2380      	movs	r3, #128	; 0x80
 8009614:	005b      	lsls	r3, r3, #1
 8009616:	4298      	cmp	r0, r3
 8009618:	d114      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x50>

#if defined(RCC_CCIPR_I2C3SEL)
  case RCC_PERIPHCLK_I2C3:
    {
      /* Get the current I2C1 source */
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800961a:	4b9f      	ldr	r3, [pc, #636]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800961c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800961e:	23c0      	movs	r3, #192	; 0xc0
 8009620:	029b      	lsls	r3, r3, #10
 8009622:	0011      	movs	r1, r2
 8009624:	4019      	ands	r1, r3

      /* Check if I2C3 clock selection is PCLK1 */
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8009626:	421a      	tst	r2, r3
 8009628:	d100      	bne.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800962a:	e111      	b.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      /* Check if HSI is ready and if I2C3 clock selection is HSI */
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800962c:	2380      	movs	r3, #128	; 0x80
 800962e:	029b      	lsls	r3, r3, #10
 8009630:	4299      	cmp	r1, r3
 8009632:	d100      	bne.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009634:	e10f      	b.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
      {
        frequency = HSI_VALUE;
      }
      /* Check if I2C3 clock selection is SYSCLK */
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8009636:	2380      	movs	r3, #128	; 0x80
 8009638:	025b      	lsls	r3, r3, #9
 800963a:	4299      	cmp	r1, r3
 800963c:	d100      	bne.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 800963e:	e111      	b.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
        frequency = HAL_RCC_GetSysClockFreq();
      }
      /* Clock not enabled for I2C3*/
      else
      {
        frequency = 0U;
 8009640:	2000      	movs	r0, #0
  default: 
    {
      break;
    }
  }
  return(frequency);
 8009642:	e113      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
  switch (PeriphClk)
 8009644:	2000      	movs	r0, #0
 8009646:	e111      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      temp_reg = RCC->CSR;
 8009648:	4b93      	ldr	r3, [pc, #588]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800964a:	6d19      	ldr	r1, [r3, #80]	; 0x50
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800964c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800964e:	22c0      	movs	r2, #192	; 0xc0
 8009650:	0292      	lsls	r2, r2, #10
 8009652:	4013      	ands	r3, r2
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8009654:	2280      	movs	r2, #128	; 0x80
 8009656:	0252      	lsls	r2, r2, #9
 8009658:	4293      	cmp	r3, r2
 800965a:	d009      	beq.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 800965c:	2280      	movs	r2, #128	; 0x80
 800965e:	0292      	lsls	r2, r2, #10
 8009660:	4293      	cmp	r3, r2
 8009662:	d00a      	beq.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8009664:	22c0      	movs	r2, #192	; 0xc0
 8009666:	0292      	lsls	r2, r2, #10
 8009668:	4293      	cmp	r3, r2
 800966a:	d00a      	beq.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
        frequency = 0U;
 800966c:	2000      	movs	r0, #0
 800966e:	e0fd      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8009670:	058a      	lsls	r2, r1, #22
 8009672:	d5f3      	bpl.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
        frequency = LSE_VALUE;
 8009674:	2080      	movs	r0, #128	; 0x80
 8009676:	0200      	lsls	r0, r0, #8
 8009678:	e0f8      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 800967a:	078a      	lsls	r2, r1, #30
 800967c:	d5f2      	bpl.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
        frequency = LSI_VALUE;
 800967e:	4887      	ldr	r0, [pc, #540]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009680:	e0f4      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8009682:	4b85      	ldr	r3, [pc, #532]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	2380      	movs	r3, #128	; 0x80
 8009688:	029b      	lsls	r3, r3, #10
 800968a:	0010      	movs	r0, r2
 800968c:	4018      	ands	r0, r3
 800968e:	421a      	tst	r2, r3
 8009690:	d100      	bne.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8009692:	e0eb      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8009694:	4b80      	ldr	r3, [pc, #512]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	22c0      	movs	r2, #192	; 0xc0
 800969a:	0392      	lsls	r2, r2, #14
 800969c:	4013      	ands	r3, r2
        switch (clkprediv)
 800969e:	2280      	movs	r2, #128	; 0x80
 80096a0:	0392      	lsls	r2, r2, #14
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d100      	bne.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80096a6:	e0e4      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 80096a8:	22c0      	movs	r2, #192	; 0xc0
 80096aa:	0392      	lsls	r2, r2, #14
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d100      	bne.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 80096b0:	e0e1      	b.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80096b2:	2280      	movs	r2, #128	; 0x80
 80096b4:	0352      	lsls	r2, r2, #13
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d001      	beq.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0xca>
            frequency = HSE_VALUE / 2U;
 80096ba:	4879      	ldr	r0, [pc, #484]	; (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 80096bc:	e0d6      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HSE_VALUE / 4U;
 80096be:	4879      	ldr	r0, [pc, #484]	; (80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80096c0:	e0d4      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80096c2:	4b75      	ldr	r3, [pc, #468]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80096c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096c6:	2380      	movs	r3, #128	; 0x80
 80096c8:	04db      	lsls	r3, r3, #19
 80096ca:	0011      	movs	r1, r2
 80096cc:	4019      	ands	r1, r3
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 80096ce:	421a      	tst	r2, r3
 80096d0:	d11f      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80096d2:	4b71      	ldr	r3, [pc, #452]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	019b      	lsls	r3, r3, #6
 80096d8:	d51b      	bpl.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80096da:	4b6f      	ldr	r3, [pc, #444]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80096dc:	68d8      	ldr	r0, [r3, #12]
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80096de:	68d9      	ldr	r1, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 80096e0:	0c80      	lsrs	r0, r0, #18
 80096e2:	220f      	movs	r2, #15
 80096e4:	4002      	ands	r2, r0
 80096e6:	4870      	ldr	r0, [pc, #448]	; (80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80096e8:	5c80      	ldrb	r0, [r0, r2]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 80096ea:	0d8a      	lsrs	r2, r1, #22
 80096ec:	2103      	movs	r1, #3
 80096ee:	4011      	ands	r1, r2
 80096f0:	3101      	adds	r1, #1
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	03db      	lsls	r3, r3, #15
 80096f6:	d405      	bmi.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80096f8:	4b67      	ldr	r3, [pc, #412]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	06db      	lsls	r3, r3, #27
 80096fe:	d506      	bpl.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
                    pllvco =  (HSI_VALUE >> 2U);
 8009700:	4b67      	ldr	r3, [pc, #412]	; (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8009702:	e000      	b.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
                pllvco = HSE_VALUE;
 8009704:	4b69      	ldr	r3, [pc, #420]	; (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
            pllvco = (pllvco * pllmul);
 8009706:	4358      	muls	r0, r3
            frequency = (pllvco/ plldiv);
 8009708:	f008 fa02 	bl	8011b10 <__udivsi3>
 800970c:	e0ae      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
                    pllvco =  HSI_VALUE;
 800970e:	4b68      	ldr	r3, [pc, #416]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009710:	e7f9      	b.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 8009712:	2900      	cmp	r1, #0
 8009714:	d100      	bne.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009716:	e0b0      	b.n	800987a <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8009718:	4b5f      	ldr	r3, [pc, #380]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	079b      	lsls	r3, r3, #30
 800971e:	d500      	bpl.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8009720:	e0ad      	b.n	800987e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
            frequency = 0U;
 8009722:	2000      	movs	r0, #0
 8009724:	e0a2      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009726:	4b5c      	ldr	r3, [pc, #368]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800972a:	2203      	movs	r2, #3
 800972c:	0011      	movs	r1, r2
 800972e:	4019      	ands	r1, r3
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009730:	421a      	tst	r2, r3
 8009732:	d007      	beq.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8009734:	2902      	cmp	r1, #2
 8009736:	d008      	beq.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8009738:	2901      	cmp	r1, #1
 800973a:	d00c      	beq.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 800973c:	2903      	cmp	r1, #3
 800973e:	d00d      	beq.n	800975c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        frequency = 0U;
 8009740:	2000      	movs	r0, #0
 8009742:	e093      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        frequency = HAL_RCC_GetPCLK2Freq();
 8009744:	f7ff fe54 	bl	80093f0 <HAL_RCC_GetPCLK2Freq>
 8009748:	e090      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800974a:	4b53      	ldr	r3, [pc, #332]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	075b      	lsls	r3, r3, #29
 8009750:	d5f2      	bpl.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSI_VALUE;
 8009752:	4857      	ldr	r0, [pc, #348]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009754:	e08a      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        frequency = HAL_RCC_GetSysClockFreq();
 8009756:	f7ff fd0d 	bl	8009174 <HAL_RCC_GetSysClockFreq>
 800975a:	e087      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 800975c:	4b4e      	ldr	r3, [pc, #312]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800975e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009760:	059b      	lsls	r3, r3, #22
 8009762:	d500      	bpl.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8009764:	e08d      	b.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
        frequency = 0U;
 8009766:	2000      	movs	r0, #0
 8009768:	e080      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800976a:	4b4b      	ldr	r3, [pc, #300]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800976c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800976e:	220c      	movs	r2, #12
 8009770:	0011      	movs	r1, r2
 8009772:	4019      	ands	r1, r3
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009774:	421a      	tst	r2, r3
 8009776:	d007      	beq.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8009778:	2908      	cmp	r1, #8
 800977a:	d008      	beq.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800977c:	2904      	cmp	r1, #4
 800977e:	d00c      	beq.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8009780:	290c      	cmp	r1, #12
 8009782:	d00d      	beq.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
        frequency = 0U;
 8009784:	2000      	movs	r0, #0
 8009786:	e071      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        frequency = HAL_RCC_GetPCLK1Freq();
 8009788:	f7ff fe22 	bl	80093d0 <HAL_RCC_GetPCLK1Freq>
 800978c:	e06e      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800978e:	4b42      	ldr	r3, [pc, #264]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	075b      	lsls	r3, r3, #29
 8009794:	d5f2      	bpl.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
        frequency = HSI_VALUE;
 8009796:	4846      	ldr	r0, [pc, #280]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009798:	e068      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        frequency = HAL_RCC_GetSysClockFreq();
 800979a:	f7ff fceb 	bl	8009174 <HAL_RCC_GetSysClockFreq>
 800979e:	e065      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80097a0:	4b3d      	ldr	r3, [pc, #244]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80097a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a4:	059b      	lsls	r3, r3, #22
 80097a6:	d500      	bpl.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 80097a8:	e06e      	b.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        frequency = 0U;
 80097aa:	2000      	movs	r0, #0
 80097ac:	e05e      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80097ae:	4b3a      	ldr	r3, [pc, #232]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80097b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097b2:	23c0      	movs	r3, #192	; 0xc0
 80097b4:	011b      	lsls	r3, r3, #4
 80097b6:	0011      	movs	r1, r2
 80097b8:	4019      	ands	r1, r3
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80097ba:	421a      	tst	r2, r3
 80097bc:	d00d      	beq.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80097be:	2380      	movs	r3, #128	; 0x80
 80097c0:	011b      	lsls	r3, r3, #4
 80097c2:	4299      	cmp	r1, r3
 80097c4:	d00c      	beq.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80097c6:	2380      	movs	r3, #128	; 0x80
 80097c8:	00db      	lsls	r3, r3, #3
 80097ca:	4299      	cmp	r1, r3
 80097cc:	d00e      	beq.n	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80097ce:	23c0      	movs	r3, #192	; 0xc0
 80097d0:	011b      	lsls	r3, r3, #4
 80097d2:	4299      	cmp	r1, r3
 80097d4:	d00d      	beq.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
        frequency = 0U;
 80097d6:	2000      	movs	r0, #0
 80097d8:	e048      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        frequency = HAL_RCC_GetPCLK1Freq();
 80097da:	f7ff fdf9 	bl	80093d0 <HAL_RCC_GetPCLK1Freq>
 80097de:	e045      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80097e0:	4b2d      	ldr	r3, [pc, #180]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	075b      	lsls	r3, r3, #29
 80097e6:	d5ee      	bpl.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        frequency = HSI_VALUE;
 80097e8:	4831      	ldr	r0, [pc, #196]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80097ea:	e03f      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        frequency = HAL_RCC_GetSysClockFreq();
 80097ec:	f7ff fcc2 	bl	8009174 <HAL_RCC_GetSysClockFreq>
 80097f0:	e03c      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80097f2:	4b29      	ldr	r3, [pc, #164]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80097f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097f6:	059b      	lsls	r3, r3, #22
 80097f8:	d449      	bmi.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        frequency = 0U;
 80097fa:	2000      	movs	r0, #0
 80097fc:	e036      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80097fe:	4b26      	ldr	r3, [pc, #152]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009800:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009802:	23c0      	movs	r3, #192	; 0xc0
 8009804:	019b      	lsls	r3, r3, #6
 8009806:	0011      	movs	r1, r2
 8009808:	4019      	ands	r1, r3
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800980a:	421a      	tst	r2, r3
 800980c:	d009      	beq.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800980e:	2380      	movs	r3, #128	; 0x80
 8009810:	019b      	lsls	r3, r3, #6
 8009812:	4299      	cmp	r1, r3
 8009814:	d008      	beq.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8009816:	2380      	movs	r3, #128	; 0x80
 8009818:	015b      	lsls	r3, r3, #5
 800981a:	4299      	cmp	r1, r3
 800981c:	d00a      	beq.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
        frequency = 0U;
 800981e:	2000      	movs	r0, #0
 8009820:	e024      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        frequency = HAL_RCC_GetPCLK1Freq();
 8009822:	f7ff fdd5 	bl	80093d0 <HAL_RCC_GetPCLK1Freq>
 8009826:	e021      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8009828:	4b1b      	ldr	r3, [pc, #108]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	075b      	lsls	r3, r3, #29
 800982e:	d5f2      	bpl.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
        frequency = HSI_VALUE;
 8009830:	481f      	ldr	r0, [pc, #124]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009832:	e01b      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        frequency = HAL_RCC_GetSysClockFreq();
 8009834:	f7ff fc9e 	bl	8009174 <HAL_RCC_GetSysClockFreq>
 8009838:	e018      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 800983a:	4b17      	ldr	r3, [pc, #92]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800983c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800983e:	2380      	movs	r3, #128	; 0x80
 8009840:	03db      	lsls	r3, r3, #15
 8009842:	0010      	movs	r0, r2
 8009844:	4018      	ands	r0, r3
 8009846:	421a      	tst	r2, r3
 8009848:	d010      	beq.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        frequency = HAL_RCC_GetPCLK1Freq();
 800984a:	f7ff fdc1 	bl	80093d0 <HAL_RCC_GetPCLK1Freq>
 800984e:	e00d      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        frequency = HAL_RCC_GetPCLK1Freq();
 8009850:	f7ff fdbe 	bl	80093d0 <HAL_RCC_GetPCLK1Freq>
 8009854:	e00a      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8009856:	4b10      	ldr	r3, [pc, #64]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	075b      	lsls	r3, r3, #29
 800985c:	d400      	bmi.n	8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800985e:	e6ea      	b.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
        frequency = HSI_VALUE;
 8009860:	4813      	ldr	r0, [pc, #76]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009862:	e003      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        frequency = HAL_RCC_GetSysClockFreq();
 8009864:	f7ff fc86 	bl	8009174 <HAL_RCC_GetSysClockFreq>
 8009868:	e000      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
  switch (PeriphClk)
 800986a:	2000      	movs	r0, #0
}
 800986c:	bd10      	pop	{r4, pc}
  switch (PeriphClk)
 800986e:	2000      	movs	r0, #0
 8009870:	e7fc      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HSE_VALUE / 8U;
 8009872:	4810      	ldr	r0, [pc, #64]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009874:	e7fa      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 8009876:	4810      	ldr	r0, [pc, #64]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8009878:	e7f8      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = 0U;
 800987a:	2000      	movs	r0, #0
 800987c:	e7f6      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HSI48_VALUE;
 800987e:	480f      	ldr	r0, [pc, #60]	; (80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8009880:	e7f4      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        frequency = LSE_VALUE;
 8009882:	2080      	movs	r0, #128	; 0x80
 8009884:	0200      	lsls	r0, r0, #8
 8009886:	e7f1      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        frequency = LSE_VALUE;
 8009888:	2080      	movs	r0, #128	; 0x80
 800988a:	0200      	lsls	r0, r0, #8
 800988c:	e7ee      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        frequency = LSE_VALUE;
 800988e:	2080      	movs	r0, #128	; 0x80
 8009890:	0200      	lsls	r0, r0, #8
 8009892:	e7eb      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 8009894:	08019718 	.word	0x08019718
 8009898:	40021000 	.word	0x40021000
 800989c:	00009088 	.word	0x00009088
 80098a0:	003d0900 	.word	0x003d0900
 80098a4:	001e8480 	.word	0x001e8480
 80098a8:	0801970c 	.word	0x0801970c
 80098ac:	007a1200 	.word	0x007a1200
 80098b0:	00f42400 	.word	0x00f42400
 80098b4:	000f4240 	.word	0x000f4240
 80098b8:	0007a120 	.word	0x0007a120
 80098bc:	02dc6c00 	.word	0x02dc6c00

080098c0 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 80098c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098c2:	46c6      	mov	lr, r8
 80098c4:	b500      	push	{lr}
 80098c6:	0007      	movs	r7, r0
 80098c8:	000c      	movs	r4, r1
 80098ca:	0016      	movs	r6, r2
 80098cc:	001d      	movs	r5, r3
  uint32_t tickstart = 0U;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80098ce:	f001 fc7f 	bl	800b1d0 <HAL_GetTick>
 80098d2:	4680      	mov	r8, r0

  /* Wait until flag is set */
  if(Status == RESET)
 80098d4:	2e00      	cmp	r6, #0
 80098d6:	d031      	beq.n	800993c <SPI_WaitOnFlagUntilTimeout+0x7c>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	689a      	ldr	r2, [r3, #8]
 80098dc:	4022      	ands	r2, r4
 80098de:	42a2      	cmp	r2, r4
 80098e0:	d162      	bne.n	80099a8 <SPI_WaitOnFlagUntilTimeout+0xe8>
    {
      if(Timeout != HAL_MAX_DELAY)
 80098e2:	1c6b      	adds	r3, r5, #1
 80098e4:	d0f8      	beq.n	80098d8 <SPI_WaitOnFlagUntilTimeout+0x18>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80098e6:	2d00      	cmp	r5, #0
 80098e8:	d005      	beq.n	80098f6 <SPI_WaitOnFlagUntilTimeout+0x36>
 80098ea:	f001 fc71 	bl	800b1d0 <HAL_GetTick>
 80098ee:	4643      	mov	r3, r8
 80098f0:	1ac0      	subs	r0, r0, r3
 80098f2:	42a8      	cmp	r0, r5
 80098f4:	d9f0      	bls.n	80098d8 <SPI_WaitOnFlagUntilTimeout+0x18>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098f6:	683a      	ldr	r2, [r7, #0]
 80098f8:	6853      	ldr	r3, [r2, #4]
 80098fa:	21e0      	movs	r1, #224	; 0xe0
 80098fc:	438b      	bics	r3, r1
 80098fe:	6053      	str	r3, [r2, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	6813      	ldr	r3, [r2, #0]
 8009904:	39a0      	subs	r1, #160	; 0xa0
 8009906:	438b      	bics	r3, r1
 8009908:	6013      	str	r3, [r2, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800990a:	2380      	movs	r3, #128	; 0x80
 800990c:	019b      	lsls	r3, r3, #6
 800990e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009910:	429a      	cmp	r2, r3
 8009912:	d03d      	beq.n	8009990 <SPI_WaitOnFlagUntilTimeout+0xd0>
          {
            SPI_RESET_CRC(hspi);
          }

          hspi->State= HAL_SPI_STATE_READY;
 8009914:	2351      	movs	r3, #81	; 0x51
 8009916:	2201      	movs	r2, #1
 8009918:	54fa      	strb	r2, [r7, r3]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800991a:	3b01      	subs	r3, #1
 800991c:	2200      	movs	r2, #0
 800991e:	54fa      	strb	r2, [r7, r3]

          return HAL_TIMEOUT;
 8009920:	2003      	movs	r0, #3
 8009922:	e032      	b.n	800998a <SPI_WaitOnFlagUntilTimeout+0xca>
            SPI_RESET_CRC(hspi);
 8009924:	683a      	ldr	r2, [r7, #0]
 8009926:	6813      	ldr	r3, [r2, #0]
 8009928:	4920      	ldr	r1, [pc, #128]	; (80099ac <SPI_WaitOnFlagUntilTimeout+0xec>)
 800992a:	400b      	ands	r3, r1
 800992c:	6013      	str	r3, [r2, #0]
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	6811      	ldr	r1, [r2, #0]
 8009932:	2380      	movs	r3, #128	; 0x80
 8009934:	019b      	lsls	r3, r3, #6
 8009936:	430b      	orrs	r3, r1
 8009938:	6013      	str	r3, [r2, #0]
 800993a:	e01d      	b.n	8009978 <SPI_WaitOnFlagUntilTimeout+0xb8>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	6899      	ldr	r1, [r3, #8]
 8009940:	4021      	ands	r1, r4
 8009942:	42a1      	cmp	r1, r4
 8009944:	d020      	beq.n	8009988 <SPI_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8009946:	1c6b      	adds	r3, r5, #1
 8009948:	d0f8      	beq.n	800993c <SPI_WaitOnFlagUntilTimeout+0x7c>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800994a:	2d00      	cmp	r5, #0
 800994c:	d005      	beq.n	800995a <SPI_WaitOnFlagUntilTimeout+0x9a>
 800994e:	f001 fc3f 	bl	800b1d0 <HAL_GetTick>
 8009952:	4643      	mov	r3, r8
 8009954:	1ac0      	subs	r0, r0, r3
 8009956:	42a8      	cmp	r0, r5
 8009958:	d9f0      	bls.n	800993c <SPI_WaitOnFlagUntilTimeout+0x7c>
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800995a:	683a      	ldr	r2, [r7, #0]
 800995c:	6853      	ldr	r3, [r2, #4]
 800995e:	21e0      	movs	r1, #224	; 0xe0
 8009960:	438b      	bics	r3, r1
 8009962:	6053      	str	r3, [r2, #4]
          __HAL_SPI_DISABLE(hspi);
 8009964:	683a      	ldr	r2, [r7, #0]
 8009966:	6813      	ldr	r3, [r2, #0]
 8009968:	39a0      	subs	r1, #160	; 0xa0
 800996a:	438b      	bics	r3, r1
 800996c:	6013      	str	r3, [r2, #0]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800996e:	2380      	movs	r3, #128	; 0x80
 8009970:	019b      	lsls	r3, r3, #6
 8009972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009974:	429a      	cmp	r2, r3
 8009976:	d0d5      	beq.n	8009924 <SPI_WaitOnFlagUntilTimeout+0x64>
          hspi->State= HAL_SPI_STATE_READY;
 8009978:	2351      	movs	r3, #81	; 0x51
 800997a:	2201      	movs	r2, #1
 800997c:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(hspi);
 800997e:	3b01      	subs	r3, #1
 8009980:	2200      	movs	r2, #0
 8009982:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8009984:	2003      	movs	r0, #3
 8009986:	e000      	b.n	800998a <SPI_WaitOnFlagUntilTimeout+0xca>
        }
      }
    }
  }
  return HAL_OK;
 8009988:	0030      	movs	r0, r6
}
 800998a:	bc04      	pop	{r2}
 800998c:	4690      	mov	r8, r2
 800998e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SPI_RESET_CRC(hspi);
 8009990:	683a      	ldr	r2, [r7, #0]
 8009992:	6813      	ldr	r3, [r2, #0]
 8009994:	4905      	ldr	r1, [pc, #20]	; (80099ac <SPI_WaitOnFlagUntilTimeout+0xec>)
 8009996:	400b      	ands	r3, r1
 8009998:	6013      	str	r3, [r2, #0]
 800999a:	683a      	ldr	r2, [r7, #0]
 800999c:	6811      	ldr	r1, [r2, #0]
 800999e:	2380      	movs	r3, #128	; 0x80
 80099a0:	019b      	lsls	r3, r3, #6
 80099a2:	430b      	orrs	r3, r1
 80099a4:	6013      	str	r3, [r2, #0]
 80099a6:	e7b5      	b.n	8009914 <SPI_WaitOnFlagUntilTimeout+0x54>
  return HAL_OK;
 80099a8:	2000      	movs	r0, #0
 80099aa:	e7ee      	b.n	800998a <SPI_WaitOnFlagUntilTimeout+0xca>
 80099ac:	ffffdfff 	.word	0xffffdfff

080099b0 <HAL_SPI_MspInit>:
}
 80099b0:	4770      	bx	lr
	...

080099b4 <HAL_SPI_Init>:
{
 80099b4:	b510      	push	{r4, lr}
 80099b6:	1e04      	subs	r4, r0, #0
  if(hspi == NULL)
 80099b8:	d03c      	beq.n	8009a34 <HAL_SPI_Init+0x80>
  if(hspi->State == HAL_SPI_STATE_RESET)
 80099ba:	2351      	movs	r3, #81	; 0x51
 80099bc:	5cc3      	ldrb	r3, [r0, r3]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d032      	beq.n	8009a28 <HAL_SPI_Init+0x74>
  hspi->State = HAL_SPI_STATE_BUSY;
 80099c2:	2251      	movs	r2, #81	; 0x51
 80099c4:	2302      	movs	r3, #2
 80099c6:	54a3      	strb	r3, [r4, r2]
  __HAL_SPI_DISABLE(hspi);
 80099c8:	6821      	ldr	r1, [r4, #0]
 80099ca:	680b      	ldr	r3, [r1, #0]
 80099cc:	2040      	movs	r0, #64	; 0x40
 80099ce:	4383      	bics	r3, r0
 80099d0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80099d2:	6863      	ldr	r3, [r4, #4]
 80099d4:	68a1      	ldr	r1, [r4, #8]
 80099d6:	430b      	orrs	r3, r1
 80099d8:	68e1      	ldr	r1, [r4, #12]
 80099da:	430b      	orrs	r3, r1
 80099dc:	6921      	ldr	r1, [r4, #16]
 80099de:	430b      	orrs	r3, r1
 80099e0:	6961      	ldr	r1, [r4, #20]
 80099e2:	430b      	orrs	r3, r1
 80099e4:	2180      	movs	r1, #128	; 0x80
 80099e6:	0089      	lsls	r1, r1, #2
 80099e8:	69a0      	ldr	r0, [r4, #24]
 80099ea:	4001      	ands	r1, r0
 80099ec:	430b      	orrs	r3, r1
 80099ee:	69e1      	ldr	r1, [r4, #28]
 80099f0:	430b      	orrs	r3, r1
 80099f2:	6a21      	ldr	r1, [r4, #32]
 80099f4:	430b      	orrs	r3, r1
 80099f6:	6821      	ldr	r1, [r4, #0]
 80099f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80099fa:	4303      	orrs	r3, r0
 80099fc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80099fe:	8b61      	ldrh	r1, [r4, #26]
 8009a00:	2304      	movs	r3, #4
 8009a02:	400b      	ands	r3, r1
 8009a04:	6821      	ldr	r1, [r4, #0]
 8009a06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a08:	4303      	orrs	r3, r0
 8009a0a:	604b      	str	r3, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009a10:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a12:	6821      	ldr	r1, [r4, #0]
 8009a14:	69cb      	ldr	r3, [r1, #28]
 8009a16:	4808      	ldr	r0, [pc, #32]	; (8009a38 <HAL_SPI_Init+0x84>)
 8009a18:	4003      	ands	r3, r0
 8009a1a:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8009a20:	3301      	adds	r3, #1
 8009a22:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8009a24:	2000      	movs	r0, #0
}
 8009a26:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8009a28:	3350      	adds	r3, #80	; 0x50
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	54c2      	strb	r2, [r0, r3]
    HAL_SPI_MspInit(hspi);
 8009a2e:	f7ff ffbf 	bl	80099b0 <HAL_SPI_MspInit>
 8009a32:	e7c6      	b.n	80099c2 <HAL_SPI_Init+0xe>
    return HAL_ERROR;
 8009a34:	2001      	movs	r0, #1
 8009a36:	e7f6      	b.n	8009a26 <HAL_SPI_Init+0x72>
 8009a38:	fffff7ff 	.word	0xfffff7ff

08009a3c <HAL_SPI_MspDeInit>:
}
 8009a3c:	4770      	bx	lr

08009a3e <HAL_SPI_DeInit>:
{
 8009a3e:	b570      	push	{r4, r5, r6, lr}
 8009a40:	1e04      	subs	r4, r0, #0
  if(hspi == NULL)
 8009a42:	d010      	beq.n	8009a66 <HAL_SPI_DeInit+0x28>
  hspi->State = HAL_SPI_STATE_BUSY;
 8009a44:	2551      	movs	r5, #81	; 0x51
 8009a46:	2302      	movs	r3, #2
 8009a48:	5543      	strb	r3, [r0, r5]
  __HAL_SPI_DISABLE(hspi);
 8009a4a:	6802      	ldr	r2, [r0, #0]
 8009a4c:	6813      	ldr	r3, [r2, #0]
 8009a4e:	2140      	movs	r1, #64	; 0x40
 8009a50:	438b      	bics	r3, r1
 8009a52:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8009a54:	f7ff fff2 	bl	8009a3c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8009a5c:	5563      	strb	r3, [r4, r5]
  __HAL_UNLOCK(hspi);
 8009a5e:	2250      	movs	r2, #80	; 0x50
 8009a60:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8009a62:	2000      	movs	r0, #0
}
 8009a64:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8009a66:	2001      	movs	r0, #1
 8009a68:	e7fc      	b.n	8009a64 <HAL_SPI_DeInit+0x26>
	...

08009a6c <HAL_SPI_Transmit>:
{
 8009a6c:	b530      	push	{r4, r5, lr}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	0004      	movs	r4, r0
 8009a72:	001d      	movs	r5, r3
  if(hspi->State == HAL_SPI_STATE_READY)
 8009a74:	2351      	movs	r3, #81	; 0x51
 8009a76:	5cc3      	ldrb	r3, [r0, r3]
 8009a78:	b2d8      	uxtb	r0, r3
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d000      	beq.n	8009a80 <HAL_SPI_Transmit+0x14>
 8009a7e:	e0d9      	b.n	8009c34 <HAL_SPI_Transmit+0x1c8>
    if((pData == NULL ) || (Size == 0U)) 
 8009a80:	2900      	cmp	r1, #0
 8009a82:	d100      	bne.n	8009a86 <HAL_SPI_Transmit+0x1a>
 8009a84:	e0d7      	b.n	8009c36 <HAL_SPI_Transmit+0x1ca>
 8009a86:	2a00      	cmp	r2, #0
 8009a88:	d100      	bne.n	8009a8c <HAL_SPI_Transmit+0x20>
 8009a8a:	e0d4      	b.n	8009c36 <HAL_SPI_Transmit+0x1ca>
    __HAL_LOCK(hspi);
 8009a8c:	334f      	adds	r3, #79	; 0x4f
 8009a8e:	5ce3      	ldrb	r3, [r4, r3]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d100      	bne.n	8009a96 <HAL_SPI_Transmit+0x2a>
 8009a94:	e0d1      	b.n	8009c3a <HAL_SPI_Transmit+0x1ce>
 8009a96:	2350      	movs	r3, #80	; 0x50
 8009a98:	2001      	movs	r0, #1
 8009a9a:	54e0      	strb	r0, [r4, r3]
    hspi->State = HAL_SPI_STATE_BUSY_TX;
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	3011      	adds	r0, #17
 8009aa0:	54e0      	strb	r0, [r4, r3]
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->pTxBuffPtr  = pData;
 8009aa6:	6321      	str	r1, [r4, #48]	; 0x30
    hspi->TxXferSize  = Size;
 8009aa8:	86a2      	strh	r2, [r4, #52]	; 0x34
    hspi->TxXferCount = Size;
 8009aaa:	86e2      	strh	r2, [r4, #54]	; 0x36
    hspi->TxISR = 0U;
 8009aac:	64e3      	str	r3, [r4, #76]	; 0x4c
    hspi->RxISR = 0U;
 8009aae:	64a3      	str	r3, [r4, #72]	; 0x48
    hspi->pRxBuffPtr  = NULL;
 8009ab0:	63a3      	str	r3, [r4, #56]	; 0x38
    hspi->RxXferSize  = 0U;
 8009ab2:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->RxXferCount = 0U;
 8009ab4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ab6:	2380      	movs	r3, #128	; 0x80
 8009ab8:	019b      	lsls	r3, r3, #6
 8009aba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d038      	beq.n	8009b32 <HAL_SPI_Transmit+0xc6>
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ac0:	2380      	movs	r3, #128	; 0x80
 8009ac2:	021b      	lsls	r3, r3, #8
 8009ac4:	68a2      	ldr	r2, [r4, #8]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d03f      	beq.n	8009b4a <HAL_SPI_Transmit+0xde>
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8009aca:	6823      	ldr	r3, [r4, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	0652      	lsls	r2, r2, #25
 8009ad0:	d403      	bmi.n	8009ada <HAL_SPI_Transmit+0x6e>
      __HAL_SPI_ENABLE(hspi);
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	2140      	movs	r1, #64	; 0x40
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	601a      	str	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009ada:	68e3      	ldr	r3, [r4, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d167      	bne.n	8009bb0 <HAL_SPI_Transmit+0x144>
      if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01U))
 8009ae0:	6863      	ldr	r3, [r4, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d003      	beq.n	8009aee <HAL_SPI_Transmit+0x82>
 8009ae6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d109      	bne.n	8009b02 <HAL_SPI_Transmit+0x96>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8009aee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009af0:	1c5a      	adds	r2, r3, #1
 8009af2:	6322      	str	r2, [r4, #48]	; 0x30
 8009af4:	6822      	ldr	r2, [r4, #0]
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8009afa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009afc:	3b01      	subs	r3, #1
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	86e3      	strh	r3, [r4, #54]	; 0x36
      while(hspi->TxXferCount > 0U)
 8009b02:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d026      	beq.n	8009b58 <HAL_SPI_Transmit+0xec>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8009b0a:	002b      	movs	r3, r5
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	2102      	movs	r1, #2
 8009b10:	0020      	movs	r0, r4
 8009b12:	f7ff fed5 	bl	80098c0 <SPI_WaitOnFlagUntilTimeout>
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d000      	beq.n	8009b1c <HAL_SPI_Transmit+0xb0>
 8009b1a:	e090      	b.n	8009c3e <HAL_SPI_Transmit+0x1d2>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8009b1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	6322      	str	r2, [r4, #48]	; 0x30
 8009b22:	6822      	ldr	r2, [r4, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8009b28:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8009b2a:	3a01      	subs	r2, #1
 8009b2c:	b292      	uxth	r2, r2
 8009b2e:	86e2      	strh	r2, [r4, #54]	; 0x36
 8009b30:	e7e7      	b.n	8009b02 <HAL_SPI_Transmit+0x96>
      SPI_RESET_CRC(hspi);
 8009b32:	6822      	ldr	r2, [r4, #0]
 8009b34:	6813      	ldr	r3, [r2, #0]
 8009b36:	4944      	ldr	r1, [pc, #272]	; (8009c48 <HAL_SPI_Transmit+0x1dc>)
 8009b38:	400b      	ands	r3, r1
 8009b3a:	6013      	str	r3, [r2, #0]
 8009b3c:	6822      	ldr	r2, [r4, #0]
 8009b3e:	6811      	ldr	r1, [r2, #0]
 8009b40:	2380      	movs	r3, #128	; 0x80
 8009b42:	019b      	lsls	r3, r3, #6
 8009b44:	430b      	orrs	r3, r1
 8009b46:	6013      	str	r3, [r2, #0]
 8009b48:	e7ba      	b.n	8009ac0 <HAL_SPI_Transmit+0x54>
      SPI_1LINE_TX(hspi);
 8009b4a:	6822      	ldr	r2, [r4, #0]
 8009b4c:	6811      	ldr	r1, [r2, #0]
 8009b4e:	2380      	movs	r3, #128	; 0x80
 8009b50:	01db      	lsls	r3, r3, #7
 8009b52:	430b      	orrs	r3, r1
 8009b54:	6013      	str	r3, [r2, #0]
 8009b56:	e7b8      	b.n	8009aca <HAL_SPI_Transmit+0x5e>
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 8009b58:	2380      	movs	r3, #128	; 0x80
 8009b5a:	019b      	lsls	r3, r3, #6
 8009b5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d01f      	beq.n	8009ba2 <HAL_SPI_Transmit+0x136>
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8009b62:	002b      	movs	r3, r5
 8009b64:	2200      	movs	r2, #0
 8009b66:	2102      	movs	r1, #2
 8009b68:	0020      	movs	r0, r4
 8009b6a:	f7ff fea9 	bl	80098c0 <SPI_WaitOnFlagUntilTimeout>
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d154      	bne.n	8009c1c <HAL_SPI_Transmit+0x1b0>
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8009b72:	002b      	movs	r3, r5
 8009b74:	2201      	movs	r2, #1
 8009b76:	2180      	movs	r1, #128	; 0x80
 8009b78:	0020      	movs	r0, r4
 8009b7a:	f7ff fea1 	bl	80098c0 <SPI_WaitOnFlagUntilTimeout>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d152      	bne.n	8009c28 <HAL_SPI_Transmit+0x1bc>
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009b82:	68a3      	ldr	r3, [r4, #8]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d105      	bne.n	8009b94 <HAL_SPI_Transmit+0x128>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b88:	6823      	ldr	r3, [r4, #0]
 8009b8a:	68da      	ldr	r2, [r3, #12]
 8009b8c:	9201      	str	r2, [sp, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	9301      	str	r3, [sp, #4]
 8009b92:	9b01      	ldr	r3, [sp, #4]
    hspi->State = HAL_SPI_STATE_READY; 
 8009b94:	2351      	movs	r3, #81	; 0x51
 8009b96:	2201      	movs	r2, #1
 8009b98:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hspi);
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8009ba0:	e049      	b.n	8009c36 <HAL_SPI_Transmit+0x1ca>
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009ba2:	6822      	ldr	r2, [r4, #0]
 8009ba4:	6811      	ldr	r1, [r2, #0]
 8009ba6:	2380      	movs	r3, #128	; 0x80
 8009ba8:	015b      	lsls	r3, r3, #5
 8009baa:	430b      	orrs	r3, r1
 8009bac:	6013      	str	r3, [r2, #0]
 8009bae:	e7d8      	b.n	8009b62 <HAL_SPI_Transmit+0xf6>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8009bb0:	6863      	ldr	r3, [r4, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d003      	beq.n	8009bbe <HAL_SPI_Transmit+0x152>
 8009bb6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d10a      	bne.n	8009bd4 <HAL_SPI_Transmit+0x168>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009bc2:	8812      	ldrh	r2, [r2, #0]
 8009bc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2U;
 8009bc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009bc8:	3302      	adds	r3, #2
 8009bca:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8009bcc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	86e3      	strh	r3, [r4, #54]	; 0x36
      while(hspi->TxXferCount > 0U)
 8009bd4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d013      	beq.n	8009c04 <HAL_SPI_Transmit+0x198>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8009bdc:	002b      	movs	r3, r5
 8009bde:	2200      	movs	r2, #0
 8009be0:	2102      	movs	r1, #2
 8009be2:	0020      	movs	r0, r4
 8009be4:	f7ff fe6c 	bl	80098c0 <SPI_WaitOnFlagUntilTimeout>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d12a      	bne.n	8009c42 <HAL_SPI_Transmit+0x1d6>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8009bec:	6823      	ldr	r3, [r4, #0]
 8009bee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009bf0:	8812      	ldrh	r2, [r2, #0]
 8009bf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2U;
 8009bf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009bf6:	3302      	adds	r3, #2
 8009bf8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8009bfa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8009bfc:	3a01      	subs	r2, #1
 8009bfe:	b292      	uxth	r2, r2
 8009c00:	86e2      	strh	r2, [r4, #54]	; 0x36
 8009c02:	e7e7      	b.n	8009bd4 <HAL_SPI_Transmit+0x168>
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 8009c04:	2380      	movs	r3, #128	; 0x80
 8009c06:	019b      	lsls	r3, r3, #6
 8009c08:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d1a9      	bne.n	8009b62 <HAL_SPI_Transmit+0xf6>
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009c0e:	6822      	ldr	r2, [r4, #0]
 8009c10:	6811      	ldr	r1, [r2, #0]
 8009c12:	2380      	movs	r3, #128	; 0x80
 8009c14:	015b      	lsls	r3, r3, #5
 8009c16:	430b      	orrs	r3, r1
 8009c18:	6013      	str	r3, [r2, #0]
 8009c1a:	e7a2      	b.n	8009b62 <HAL_SPI_Transmit+0xf6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009c1e:	2220      	movs	r2, #32
 8009c20:	4313      	orrs	r3, r2
 8009c22:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8009c24:	2003      	movs	r0, #3
 8009c26:	e006      	b.n	8009c36 <HAL_SPI_Transmit+0x1ca>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009c2a:	2220      	movs	r2, #32
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8009c30:	2003      	movs	r0, #3
 8009c32:	e000      	b.n	8009c36 <HAL_SPI_Transmit+0x1ca>
    return HAL_BUSY;
 8009c34:	2002      	movs	r0, #2
}
 8009c36:	b003      	add	sp, #12
 8009c38:	bd30      	pop	{r4, r5, pc}
    __HAL_LOCK(hspi);
 8009c3a:	2002      	movs	r0, #2
 8009c3c:	e7fb      	b.n	8009c36 <HAL_SPI_Transmit+0x1ca>
          return HAL_TIMEOUT;
 8009c3e:	2003      	movs	r0, #3
 8009c40:	e7f9      	b.n	8009c36 <HAL_SPI_Transmit+0x1ca>
          return HAL_TIMEOUT;
 8009c42:	2003      	movs	r0, #3
 8009c44:	e7f7      	b.n	8009c36 <HAL_SPI_Transmit+0x1ca>
 8009c46:	46c0      	nop			; (mov r8, r8)
 8009c48:	ffffdfff 	.word	0xffffdfff

08009c4c <HAL_SPI_TransmitReceive>:
{
 8009c4c:	b570      	push	{r4, r5, r6, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	0004      	movs	r4, r0
 8009c52:	9d06      	ldr	r5, [sp, #24]
  __IO uint16_t tmpreg = 0U;
 8009c54:	4668      	mov	r0, sp
 8009c56:	2600      	movs	r6, #0
 8009c58:	80c6      	strh	r6, [r0, #6]
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 8009c5a:	2051      	movs	r0, #81	; 0x51
 8009c5c:	5c20      	ldrb	r0, [r4, r0]
 8009c5e:	2801      	cmp	r0, #1
 8009c60:	d004      	beq.n	8009c6c <HAL_SPI_TransmitReceive+0x20>
 8009c62:	2051      	movs	r0, #81	; 0x51
 8009c64:	5c20      	ldrb	r0, [r4, r0]
 8009c66:	2822      	cmp	r0, #34	; 0x22
 8009c68:	d000      	beq.n	8009c6c <HAL_SPI_TransmitReceive+0x20>
 8009c6a:	e1a8      	b.n	8009fbe <HAL_SPI_TransmitReceive+0x372>
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 8009c6c:	2900      	cmp	r1, #0
 8009c6e:	d100      	bne.n	8009c72 <HAL_SPI_TransmitReceive+0x26>
 8009c70:	e1a8      	b.n	8009fc4 <HAL_SPI_TransmitReceive+0x378>
 8009c72:	2a00      	cmp	r2, #0
 8009c74:	d100      	bne.n	8009c78 <HAL_SPI_TransmitReceive+0x2c>
 8009c76:	e1a7      	b.n	8009fc8 <HAL_SPI_TransmitReceive+0x37c>
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d100      	bne.n	8009c7e <HAL_SPI_TransmitReceive+0x32>
 8009c7c:	e1a6      	b.n	8009fcc <HAL_SPI_TransmitReceive+0x380>
    __HAL_LOCK(hspi);
 8009c7e:	2050      	movs	r0, #80	; 0x50
 8009c80:	5c20      	ldrb	r0, [r4, r0]
 8009c82:	2801      	cmp	r0, #1
 8009c84:	d100      	bne.n	8009c88 <HAL_SPI_TransmitReceive+0x3c>
 8009c86:	e1a3      	b.n	8009fd0 <HAL_SPI_TransmitReceive+0x384>
 8009c88:	2050      	movs	r0, #80	; 0x50
 8009c8a:	2601      	movs	r6, #1
 8009c8c:	5426      	strb	r6, [r4, r0]
    if(hspi->State == HAL_SPI_STATE_READY)
 8009c8e:	3001      	adds	r0, #1
 8009c90:	5c20      	ldrb	r0, [r4, r0]
 8009c92:	2801      	cmp	r0, #1
 8009c94:	d100      	bne.n	8009c98 <HAL_SPI_TransmitReceive+0x4c>
 8009c96:	e07c      	b.n	8009d92 <HAL_SPI_TransmitReceive+0x146>
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c98:	2000      	movs	r0, #0
 8009c9a:	6560      	str	r0, [r4, #84]	; 0x54
    hspi->pRxBuffPtr  = pRxData;
 8009c9c:	63a2      	str	r2, [r4, #56]	; 0x38
    hspi->RxXferSize  = Size;
 8009c9e:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->RxXferCount = Size;  
 8009ca0:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->pTxBuffPtr  = pTxData;
 8009ca2:	6321      	str	r1, [r4, #48]	; 0x30
    hspi->TxXferSize  = Size; 
 8009ca4:	86a3      	strh	r3, [r4, #52]	; 0x34
    hspi->TxXferCount = Size;
 8009ca6:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxISR = 0U;
 8009ca8:	64a0      	str	r0, [r4, #72]	; 0x48
    hspi->TxISR = 0U;
 8009caa:	64e0      	str	r0, [r4, #76]	; 0x4c
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009cac:	2380      	movs	r3, #128	; 0x80
 8009cae:	019b      	lsls	r3, r3, #6
 8009cb0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d071      	beq.n	8009d9a <HAL_SPI_TransmitReceive+0x14e>
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	0652      	lsls	r2, r2, #25
 8009cbc:	d403      	bmi.n	8009cc6 <HAL_SPI_TransmitReceive+0x7a>
      __HAL_SPI_ENABLE(hspi);
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	2140      	movs	r1, #64	; 0x40
 8009cc2:	430a      	orrs	r2, r1
 8009cc4:	601a      	str	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009cc6:	2380      	movs	r3, #128	; 0x80
 8009cc8:	011b      	lsls	r3, r3, #4
 8009cca:	68e2      	ldr	r2, [r4, #12]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d070      	beq.n	8009db2 <HAL_SPI_TransmitReceive+0x166>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 8009cd0:	6863      	ldr	r3, [r4, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d007      	beq.n	8009ce6 <HAL_SPI_TransmitReceive+0x9a>
 8009cd6:	2282      	movs	r2, #130	; 0x82
 8009cd8:	0052      	lsls	r2, r2, #1
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d10d      	bne.n	8009cfa <HAL_SPI_TransmitReceive+0xae>
 8009cde:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d109      	bne.n	8009cfa <HAL_SPI_TransmitReceive+0xae>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8009ce6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009ce8:	1c5a      	adds	r2, r3, #1
 8009cea:	6322      	str	r2, [r4, #48]	; 0x30
 8009cec:	6822      	ldr	r2, [r4, #0]
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8009cf2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	86e3      	strh	r3, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 8009cfa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d000      	beq.n	8009d04 <HAL_SPI_TransmitReceive+0xb8>
 8009d02:	e100      	b.n	8009f06 <HAL_SPI_TransmitReceive+0x2ba>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d04:	2380      	movs	r3, #128	; 0x80
 8009d06:	019b      	lsls	r3, r3, #6
 8009d08:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d100      	bne.n	8009d10 <HAL_SPI_TransmitReceive+0xc4>
 8009d0e:	e0e0      	b.n	8009ed2 <HAL_SPI_TransmitReceive+0x286>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8009d10:	002b      	movs	r3, r5
 8009d12:	2200      	movs	r2, #0
 8009d14:	2101      	movs	r1, #1
 8009d16:	0020      	movs	r0, r4
 8009d18:	f7ff fdd2 	bl	80098c0 <SPI_WaitOnFlagUntilTimeout>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d000      	beq.n	8009d22 <HAL_SPI_TransmitReceive+0xd6>
 8009d20:	e160      	b.n	8009fe4 <HAL_SPI_TransmitReceive+0x398>
        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009d28:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8009d2a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d32:	2380      	movs	r3, #128	; 0x80
 8009d34:	019b      	lsls	r3, r3, #6
 8009d36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d100      	bne.n	8009d3e <HAL_SPI_TransmitReceive+0xf2>
 8009d3c:	e120      	b.n	8009f80 <HAL_SPI_TransmitReceive+0x334>
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8009d3e:	002b      	movs	r3, r5
 8009d40:	2201      	movs	r2, #1
 8009d42:	2180      	movs	r1, #128	; 0x80
 8009d44:	0020      	movs	r0, r4
 8009d46:	f7ff fdbb 	bl	80098c0 <SPI_WaitOnFlagUntilTimeout>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d000      	beq.n	8009d50 <HAL_SPI_TransmitReceive+0x104>
 8009d4e:	e12c      	b.n	8009faa <HAL_SPI_TransmitReceive+0x35e>
    hspi->State = HAL_SPI_STATE_READY;
 8009d50:	2351      	movs	r3, #81	; 0x51
 8009d52:	2201      	movs	r2, #1
 8009d54:	54e2      	strb	r2, [r4, r3]
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8009d56:	2380      	movs	r3, #128	; 0x80
 8009d58:	019b      	lsls	r3, r3, #6
 8009d5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d000      	beq.n	8009d62 <HAL_SPI_TransmitReceive+0x116>
 8009d60:	e129      	b.n	8009fb6 <HAL_SPI_TransmitReceive+0x36a>
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	689a      	ldr	r2, [r3, #8]
 8009d66:	06d2      	lsls	r2, r2, #27
 8009d68:	d400      	bmi.n	8009d6c <HAL_SPI_TransmitReceive+0x120>
 8009d6a:	e124      	b.n	8009fb6 <HAL_SPI_TransmitReceive+0x36a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009d6c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009d6e:	2102      	movs	r1, #2
 8009d70:	430a      	orrs	r2, r1
 8009d72:	6562      	str	r2, [r4, #84]	; 0x54
      SPI_RESET_CRC(hspi);
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	499f      	ldr	r1, [pc, #636]	; (8009ff4 <HAL_SPI_TransmitReceive+0x3a8>)
 8009d78:	400a      	ands	r2, r1
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	6822      	ldr	r2, [r4, #0]
 8009d7e:	6811      	ldr	r1, [r2, #0]
 8009d80:	2380      	movs	r3, #128	; 0x80
 8009d82:	019b      	lsls	r3, r3, #6
 8009d84:	430b      	orrs	r3, r1
 8009d86:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hspi);
 8009d88:	2350      	movs	r3, #80	; 0x50
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR; 
 8009d8e:	2001      	movs	r0, #1
 8009d90:	e116      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x374>
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009d92:	3050      	adds	r0, #80	; 0x50
 8009d94:	3631      	adds	r6, #49	; 0x31
 8009d96:	5426      	strb	r6, [r4, r0]
 8009d98:	e77e      	b.n	8009c98 <HAL_SPI_TransmitReceive+0x4c>
      SPI_RESET_CRC(hspi);
 8009d9a:	6822      	ldr	r2, [r4, #0]
 8009d9c:	6813      	ldr	r3, [r2, #0]
 8009d9e:	4995      	ldr	r1, [pc, #596]	; (8009ff4 <HAL_SPI_TransmitReceive+0x3a8>)
 8009da0:	400b      	ands	r3, r1
 8009da2:	6013      	str	r3, [r2, #0]
 8009da4:	6822      	ldr	r2, [r4, #0]
 8009da6:	6811      	ldr	r1, [r2, #0]
 8009da8:	2380      	movs	r3, #128	; 0x80
 8009daa:	019b      	lsls	r3, r3, #6
 8009dac:	430b      	orrs	r3, r1
 8009dae:	6013      	str	r3, [r2, #0]
 8009db0:	e781      	b.n	8009cb6 <HAL_SPI_TransmitReceive+0x6a>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 8009db2:	6863      	ldr	r3, [r4, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d007      	beq.n	8009dc8 <HAL_SPI_TransmitReceive+0x17c>
 8009db8:	2282      	movs	r2, #130	; 0x82
 8009dba:	0052      	lsls	r2, r2, #1
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d10e      	bne.n	8009dde <HAL_SPI_TransmitReceive+0x192>
 8009dc0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d10a      	bne.n	8009dde <HAL_SPI_TransmitReceive+0x192>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009dcc:	8812      	ldrh	r2, [r2, #0]
 8009dce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2U;
 8009dd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009dd2:	3302      	adds	r3, #2
 8009dd4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8009dd6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	86e3      	strh	r3, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 8009dde:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d134      	bne.n	8009e50 <HAL_SPI_TransmitReceive+0x204>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009de6:	2380      	movs	r3, #128	; 0x80
 8009de8:	019b      	lsls	r3, r3, #6
 8009dea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d014      	beq.n	8009e1a <HAL_SPI_TransmitReceive+0x1ce>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8009df0:	002b      	movs	r3, r5
 8009df2:	2200      	movs	r2, #0
 8009df4:	2101      	movs	r1, #1
 8009df6:	0020      	movs	r0, r4
 8009df8:	f7ff fd62 	bl	80098c0 <SPI_WaitOnFlagUntilTimeout>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	d000      	beq.n	8009e02 <HAL_SPI_TransmitReceive+0x1b6>
 8009e00:	e0e8      	b.n	8009fd4 <HAL_SPI_TransmitReceive+0x388>
        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009e02:	6823      	ldr	r3, [r4, #0]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009e08:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr+=2U;
 8009e0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e0c:	3302      	adds	r3, #2
 8009e0e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8009e10:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009e12:	3b01      	subs	r3, #1
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009e18:	e78b      	b.n	8009d32 <HAL_SPI_TransmitReceive+0xe6>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009e1a:	6822      	ldr	r2, [r4, #0]
 8009e1c:	6811      	ldr	r1, [r2, #0]
 8009e1e:	2380      	movs	r3, #128	; 0x80
 8009e20:	015b      	lsls	r3, r3, #5
 8009e22:	430b      	orrs	r3, r1
 8009e24:	6013      	str	r3, [r2, #0]
 8009e26:	e7e3      	b.n	8009df0 <HAL_SPI_TransmitReceive+0x1a4>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8009e28:	002b      	movs	r3, r5
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	2101      	movs	r1, #1
 8009e2e:	0020      	movs	r0, r4
 8009e30:	f7ff fd46 	bl	80098c0 <SPI_WaitOnFlagUntilTimeout>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	d000      	beq.n	8009e3a <HAL_SPI_TransmitReceive+0x1ee>
 8009e38:	e0d0      	b.n	8009fdc <HAL_SPI_TransmitReceive+0x390>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009e40:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr+=2U;
 8009e42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e44:	3302      	adds	r3, #2
 8009e46:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 8009e48:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8009e50:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d023      	beq.n	8009ea0 <HAL_SPI_TransmitReceive+0x254>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8009e58:	002b      	movs	r3, r5
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	2102      	movs	r1, #2
 8009e5e:	0020      	movs	r0, r4
 8009e60:	f7ff fd2e 	bl	80098c0 <SPI_WaitOnFlagUntilTimeout>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	d000      	beq.n	8009e6a <HAL_SPI_TransmitReceive+0x21e>
 8009e68:	e0b6      	b.n	8009fd8 <HAL_SPI_TransmitReceive+0x38c>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009e6e:	8812      	ldrh	r2, [r2, #0]
 8009e70:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr+=2U;
 8009e72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009e74:	3302      	adds	r3, #2
 8009e76:	6323      	str	r3, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 8009e78:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009e80:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1cf      	bne.n	8009e28 <HAL_SPI_TransmitReceive+0x1dc>
 8009e88:	2380      	movs	r3, #128	; 0x80
 8009e8a:	019b      	lsls	r3, r3, #6
 8009e8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d1ca      	bne.n	8009e28 <HAL_SPI_TransmitReceive+0x1dc>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009e92:	6822      	ldr	r2, [r4, #0]
 8009e94:	6811      	ldr	r1, [r2, #0]
 8009e96:	2380      	movs	r3, #128	; 0x80
 8009e98:	015b      	lsls	r3, r3, #5
 8009e9a:	430b      	orrs	r3, r1
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	e7c3      	b.n	8009e28 <HAL_SPI_TransmitReceive+0x1dc>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8009ea0:	6863      	ldr	r3, [r4, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d000      	beq.n	8009ea8 <HAL_SPI_TransmitReceive+0x25c>
 8009ea6:	e744      	b.n	8009d32 <HAL_SPI_TransmitReceive+0xe6>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8009ea8:	002b      	movs	r3, r5
 8009eaa:	2200      	movs	r2, #0
 8009eac:	2101      	movs	r1, #1
 8009eae:	0020      	movs	r0, r4
 8009eb0:	f7ff fd06 	bl	80098c0 <SPI_WaitOnFlagUntilTimeout>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d000      	beq.n	8009eba <HAL_SPI_TransmitReceive+0x26e>
 8009eb8:	e092      	b.n	8009fe0 <HAL_SPI_TransmitReceive+0x394>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009eba:	6823      	ldr	r3, [r4, #0]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009ec0:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr+=2U;
 8009ec2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009ec4:	3302      	adds	r3, #2
 8009ec6:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 8009ec8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009ed0:	e72f      	b.n	8009d32 <HAL_SPI_TransmitReceive+0xe6>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009ed2:	6822      	ldr	r2, [r4, #0]
 8009ed4:	6811      	ldr	r1, [r2, #0]
 8009ed6:	2380      	movs	r3, #128	; 0x80
 8009ed8:	015b      	lsls	r3, r3, #5
 8009eda:	430b      	orrs	r3, r1
 8009edc:	6013      	str	r3, [r2, #0]
 8009ede:	e717      	b.n	8009d10 <HAL_SPI_TransmitReceive+0xc4>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8009ee0:	002b      	movs	r3, r5
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	2101      	movs	r1, #1
 8009ee6:	0020      	movs	r0, r4
 8009ee8:	f7ff fcea 	bl	80098c0 <SPI_WaitOnFlagUntilTimeout>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d000      	beq.n	8009ef2 <HAL_SPI_TransmitReceive+0x2a6>
 8009ef0:	e07c      	b.n	8009fec <HAL_SPI_TransmitReceive+0x3a0>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	68da      	ldr	r2, [r3, #12]
 8009ef6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009ef8:	1c59      	adds	r1, r3, #1
 8009efa:	63a1      	str	r1, [r4, #56]	; 0x38
 8009efc:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8009efe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009f00:	3b01      	subs	r3, #1
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8009f06:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d021      	beq.n	8009f52 <HAL_SPI_TransmitReceive+0x306>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8009f0e:	002b      	movs	r3, r5
 8009f10:	2200      	movs	r2, #0
 8009f12:	2102      	movs	r1, #2
 8009f14:	0020      	movs	r0, r4
 8009f16:	f7ff fcd3 	bl	80098c0 <SPI_WaitOnFlagUntilTimeout>
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d164      	bne.n	8009fe8 <HAL_SPI_TransmitReceive+0x39c>
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8009f1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009f20:	1c5a      	adds	r2, r3, #1
 8009f22:	6322      	str	r2, [r4, #48]	; 0x30
 8009f24:	6822      	ldr	r2, [r4, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount--;
 8009f2a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009f32:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1d2      	bne.n	8009ee0 <HAL_SPI_TransmitReceive+0x294>
 8009f3a:	2380      	movs	r3, #128	; 0x80
 8009f3c:	019b      	lsls	r3, r3, #6
 8009f3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d1cd      	bne.n	8009ee0 <HAL_SPI_TransmitReceive+0x294>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009f44:	6822      	ldr	r2, [r4, #0]
 8009f46:	6811      	ldr	r1, [r2, #0]
 8009f48:	2380      	movs	r3, #128	; 0x80
 8009f4a:	015b      	lsls	r3, r3, #5
 8009f4c:	430b      	orrs	r3, r1
 8009f4e:	6013      	str	r3, [r2, #0]
 8009f50:	e7c6      	b.n	8009ee0 <HAL_SPI_TransmitReceive+0x294>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8009f52:	6863      	ldr	r3, [r4, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d000      	beq.n	8009f5a <HAL_SPI_TransmitReceive+0x30e>
 8009f58:	e6eb      	b.n	8009d32 <HAL_SPI_TransmitReceive+0xe6>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8009f5a:	002b      	movs	r3, r5
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	2101      	movs	r1, #1
 8009f60:	0020      	movs	r0, r4
 8009f62:	f7ff fcad 	bl	80098c0 <SPI_WaitOnFlagUntilTimeout>
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d142      	bne.n	8009ff0 <HAL_SPI_TransmitReceive+0x3a4>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8009f6a:	6823      	ldr	r3, [r4, #0]
 8009f6c:	68da      	ldr	r2, [r3, #12]
 8009f6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f70:	1c59      	adds	r1, r3, #1
 8009f72:	63a1      	str	r1, [r4, #56]	; 0x38
 8009f74:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8009f76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009f7e:	e6d8      	b.n	8009d32 <HAL_SPI_TransmitReceive+0xe6>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8009f80:	002b      	movs	r3, r5
 8009f82:	2200      	movs	r2, #0
 8009f84:	2101      	movs	r1, #1
 8009f86:	0020      	movs	r0, r4
 8009f88:	f7ff fc9a 	bl	80098c0 <SPI_WaitOnFlagUntilTimeout>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	d106      	bne.n	8009f9e <HAL_SPI_TransmitReceive+0x352>
      tmpreg = hspi->Instance->DR;
 8009f90:	6823      	ldr	r3, [r4, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	466a      	mov	r2, sp
 8009f98:	80d3      	strh	r3, [r2, #6]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 8009f9a:	88d3      	ldrh	r3, [r2, #6]
 8009f9c:	e6cf      	b.n	8009d3e <HAL_SPI_TransmitReceive+0xf2>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009f9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009fa0:	2202      	movs	r2, #2
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8009fa6:	2003      	movs	r0, #3
 8009fa8:	e00a      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x374>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009faa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009fac:	2220      	movs	r2, #32
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8009fb2:	2003      	movs	r0, #3
 8009fb4:	e004      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x374>
    __HAL_UNLOCK(hspi);
 8009fb6:	2350      	movs	r3, #80	; 0x50
 8009fb8:	2200      	movs	r2, #0
 8009fba:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8009fbc:	e000      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x374>
    return HAL_BUSY;
 8009fbe:	2002      	movs	r0, #2
}
 8009fc0:	b002      	add	sp, #8
 8009fc2:	bd70      	pop	{r4, r5, r6, pc}
      return  HAL_ERROR;
 8009fc4:	2001      	movs	r0, #1
 8009fc6:	e7fb      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x374>
 8009fc8:	2001      	movs	r0, #1
 8009fca:	e7f9      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x374>
 8009fcc:	2001      	movs	r0, #1
 8009fce:	e7f7      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x374>
    __HAL_LOCK(hspi);
 8009fd0:	2002      	movs	r0, #2
 8009fd2:	e7f5      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x374>
          return HAL_TIMEOUT;
 8009fd4:	2003      	movs	r0, #3
 8009fd6:	e7f3      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x374>
            return HAL_TIMEOUT;
 8009fd8:	2003      	movs	r0, #3
 8009fda:	e7f1      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x374>
            return HAL_TIMEOUT;
 8009fdc:	2003      	movs	r0, #3
 8009fde:	e7ef      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x374>
            return HAL_TIMEOUT;
 8009fe0:	2003      	movs	r0, #3
 8009fe2:	e7ed      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x374>
          return HAL_TIMEOUT;
 8009fe4:	2003      	movs	r0, #3
 8009fe6:	e7eb      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x374>
            return HAL_TIMEOUT;
 8009fe8:	2003      	movs	r0, #3
 8009fea:	e7e9      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x374>
            return HAL_TIMEOUT;
 8009fec:	2003      	movs	r0, #3
 8009fee:	e7e7      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x374>
            return HAL_TIMEOUT;
 8009ff0:	2003      	movs	r0, #3
 8009ff2:	e7e5      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x374>
 8009ff4:	ffffdfff 	.word	0xffffdfff

08009ff8 <HAL_SPI_Receive>:
{
 8009ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	0004      	movs	r4, r0
 8009ffe:	001d      	movs	r5, r3
  __IO uint16_t tmpreg = 0U;
 800a000:	230e      	movs	r3, #14
 800a002:	446b      	add	r3, sp
 800a004:	2000      	movs	r0, #0
 800a006:	8018      	strh	r0, [r3, #0]
  if(hspi->State == HAL_SPI_STATE_READY)
 800a008:	2351      	movs	r3, #81	; 0x51
 800a00a:	5ce3      	ldrb	r3, [r4, r3]
 800a00c:	b2de      	uxtb	r6, r3
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d000      	beq.n	800a014 <HAL_SPI_Receive+0x1c>
 800a012:	e10e      	b.n	800a232 <HAL_SPI_Receive+0x23a>
    if((pData == NULL ) || (Size == 0U)) 
 800a014:	2900      	cmp	r1, #0
 800a016:	d100      	bne.n	800a01a <HAL_SPI_Receive+0x22>
 800a018:	e10c      	b.n	800a234 <HAL_SPI_Receive+0x23c>
 800a01a:	2a00      	cmp	r2, #0
 800a01c:	d100      	bne.n	800a020 <HAL_SPI_Receive+0x28>
 800a01e:	e109      	b.n	800a234 <HAL_SPI_Receive+0x23c>
    __HAL_LOCK(hspi);
 800a020:	334f      	adds	r3, #79	; 0x4f
 800a022:	5ce3      	ldrb	r3, [r4, r3]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d100      	bne.n	800a02a <HAL_SPI_Receive+0x32>
 800a028:	e107      	b.n	800a23a <HAL_SPI_Receive+0x242>
 800a02a:	2350      	movs	r3, #80	; 0x50
 800a02c:	3001      	adds	r0, #1
 800a02e:	54e0      	strb	r0, [r4, r3]
    hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a030:	3301      	adds	r3, #1
 800a032:	3021      	adds	r0, #33	; 0x21
 800a034:	54e0      	strb	r0, [r4, r3]
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a036:	2300      	movs	r3, #0
 800a038:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->pRxBuffPtr  = pData;
 800a03a:	63a1      	str	r1, [r4, #56]	; 0x38
    hspi->RxXferSize  = Size;
 800a03c:	87a2      	strh	r2, [r4, #60]	; 0x3c
    hspi->RxXferCount = Size;
 800a03e:	87e2      	strh	r2, [r4, #62]	; 0x3e
    hspi->RxISR = 0U;
 800a040:	64a3      	str	r3, [r4, #72]	; 0x48
    hspi->TxISR = 0U;
 800a042:	64e3      	str	r3, [r4, #76]	; 0x4c
    hspi->pTxBuffPtr  = NULL;
 800a044:	6323      	str	r3, [r4, #48]	; 0x30
    hspi->TxXferSize  = 0U;
 800a046:	86a3      	strh	r3, [r4, #52]	; 0x34
    hspi->TxXferCount = 0U;
 800a048:	86e3      	strh	r3, [r4, #54]	; 0x36
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a04a:	2380      	movs	r3, #128	; 0x80
 800a04c:	021b      	lsls	r3, r3, #8
 800a04e:	68a0      	ldr	r0, [r4, #8]
 800a050:	4298      	cmp	r0, r3
 800a052:	d02e      	beq.n	800a0b2 <HAL_SPI_Receive+0xba>
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a054:	2380      	movs	r3, #128	; 0x80
 800a056:	019b      	lsls	r3, r3, #6
 800a058:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800a05a:	4298      	cmp	r0, r3
 800a05c:	d02f      	beq.n	800a0be <HAL_SPI_Receive+0xc6>
    if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a05e:	2382      	movs	r3, #130	; 0x82
 800a060:	005b      	lsls	r3, r3, #1
 800a062:	6860      	ldr	r0, [r4, #4]
 800a064:	4298      	cmp	r0, r3
 800a066:	d036      	beq.n	800a0d6 <HAL_SPI_Receive+0xde>
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800a068:	6823      	ldr	r3, [r4, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	0652      	lsls	r2, r2, #25
 800a06e:	d403      	bmi.n	800a078 <HAL_SPI_Receive+0x80>
      __HAL_SPI_ENABLE(hspi);
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	2140      	movs	r1, #64	; 0x40
 800a074:	430a      	orrs	r2, r1
 800a076:	601a      	str	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a078:	68e3      	ldr	r3, [r4, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d039      	beq.n	800a0f2 <HAL_SPI_Receive+0xfa>
      while(hspi->RxXferCount > 1U)
 800a07e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a080:	b29b      	uxth	r3, r3
 800a082:	2b01      	cmp	r3, #1
 800a084:	d800      	bhi.n	800a088 <HAL_SPI_Receive+0x90>
 800a086:	e096      	b.n	800a1b6 <HAL_SPI_Receive+0x1be>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800a088:	002b      	movs	r3, r5
 800a08a:	2200      	movs	r2, #0
 800a08c:	2101      	movs	r1, #1
 800a08e:	0020      	movs	r0, r4
 800a090:	f7ff fc16 	bl	80098c0 <SPI_WaitOnFlagUntilTimeout>
 800a094:	2800      	cmp	r0, #0
 800a096:	d000      	beq.n	800a09a <HAL_SPI_Receive+0xa2>
 800a098:	e0d3      	b.n	800a242 <HAL_SPI_Receive+0x24a>
        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a09a:	6823      	ldr	r3, [r4, #0]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a0a0:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr+=2U;
 800a0a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a0a4:	3302      	adds	r3, #2
 800a0a6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800a0a8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a0aa:	3a01      	subs	r2, #1
 800a0ac:	b292      	uxth	r2, r2
 800a0ae:	87e2      	strh	r2, [r4, #62]	; 0x3e
 800a0b0:	e7e5      	b.n	800a07e <HAL_SPI_Receive+0x86>
      SPI_1LINE_RX(hspi);
 800a0b2:	6820      	ldr	r0, [r4, #0]
 800a0b4:	6803      	ldr	r3, [r0, #0]
 800a0b6:	4f65      	ldr	r7, [pc, #404]	; (800a24c <HAL_SPI_Receive+0x254>)
 800a0b8:	403b      	ands	r3, r7
 800a0ba:	6003      	str	r3, [r0, #0]
 800a0bc:	e7ca      	b.n	800a054 <HAL_SPI_Receive+0x5c>
      SPI_RESET_CRC(hspi);
 800a0be:	6820      	ldr	r0, [r4, #0]
 800a0c0:	6803      	ldr	r3, [r0, #0]
 800a0c2:	4f63      	ldr	r7, [pc, #396]	; (800a250 <HAL_SPI_Receive+0x258>)
 800a0c4:	403b      	ands	r3, r7
 800a0c6:	6003      	str	r3, [r0, #0]
 800a0c8:	6820      	ldr	r0, [r4, #0]
 800a0ca:	6807      	ldr	r7, [r0, #0]
 800a0cc:	2380      	movs	r3, #128	; 0x80
 800a0ce:	019b      	lsls	r3, r3, #6
 800a0d0:	433b      	orrs	r3, r7
 800a0d2:	6003      	str	r3, [r0, #0]
 800a0d4:	e7c3      	b.n	800a05e <HAL_SPI_Receive+0x66>
    if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a0d6:	68a3      	ldr	r3, [r4, #8]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1c5      	bne.n	800a068 <HAL_SPI_Receive+0x70>
      __HAL_UNLOCK(hspi);
 800a0dc:	3350      	adds	r3, #80	; 0x50
 800a0de:	2000      	movs	r0, #0
 800a0e0:	54e0      	strb	r0, [r4, r3]
      return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a0e2:	9500      	str	r5, [sp, #0]
 800a0e4:	0013      	movs	r3, r2
 800a0e6:	000a      	movs	r2, r1
 800a0e8:	0020      	movs	r0, r4
 800a0ea:	f7ff fdaf 	bl	8009c4c <HAL_SPI_TransmitReceive>
 800a0ee:	0006      	movs	r6, r0
 800a0f0:	e0a0      	b.n	800a234 <HAL_SPI_Receive+0x23c>
      while(hspi->RxXferCount > 1U)
 800a0f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d913      	bls.n	800a122 <HAL_SPI_Receive+0x12a>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800a0fa:	002b      	movs	r3, r5
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	2101      	movs	r1, #1
 800a100:	0020      	movs	r0, r4
 800a102:	f7ff fbdd 	bl	80098c0 <SPI_WaitOnFlagUntilTimeout>
 800a106:	2800      	cmp	r0, #0
 800a108:	d000      	beq.n	800a10c <HAL_SPI_Receive+0x114>
 800a10a:	e098      	b.n	800a23e <HAL_SPI_Receive+0x246>
        (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 800a10c:	6823      	ldr	r3, [r4, #0]
 800a10e:	68da      	ldr	r2, [r3, #12]
 800a110:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a112:	1c59      	adds	r1, r3, #1
 800a114:	63a1      	str	r1, [r4, #56]	; 0x38
 800a116:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 800a118:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a11a:	3a01      	subs	r2, #1
 800a11c:	b292      	uxth	r2, r2
 800a11e:	87e2      	strh	r2, [r4, #62]	; 0x3e
 800a120:	e7e7      	b.n	800a0f2 <HAL_SPI_Receive+0xfa>
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 800a122:	2380      	movs	r3, #128	; 0x80
 800a124:	019b      	lsls	r3, r3, #6
 800a126:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a128:	429a      	cmp	r2, r3
 800a12a:	d03d      	beq.n	800a1a8 <HAL_SPI_Receive+0x1b0>
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800a12c:	002b      	movs	r3, r5
 800a12e:	2200      	movs	r2, #0
 800a130:	2101      	movs	r1, #1
 800a132:	0020      	movs	r0, r4
 800a134:	f7ff fbc4 	bl	80098c0 <SPI_WaitOnFlagUntilTimeout>
 800a138:	1e07      	subs	r7, r0, #0
 800a13a:	d000      	beq.n	800a13e <HAL_SPI_Receive+0x146>
 800a13c:	e083      	b.n	800a246 <HAL_SPI_Receive+0x24e>
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a13e:	68e3      	ldr	r3, [r4, #12]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d144      	bne.n	800a1ce <HAL_SPI_Receive+0x1d6>
      (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 800a144:	6823      	ldr	r3, [r4, #0]
 800a146:	68da      	ldr	r2, [r3, #12]
 800a148:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a14a:	1c59      	adds	r1, r3, #1
 800a14c:	63a1      	str	r1, [r4, #56]	; 0x38
 800a14e:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 800a150:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a152:	3b01      	subs	r3, #1
 800a154:	b29b      	uxth	r3, r3
 800a156:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a158:	2380      	movs	r3, #128	; 0x80
 800a15a:	019b      	lsls	r3, r3, #6
 800a15c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a15e:	429a      	cmp	r2, r3
 800a160:	d03d      	beq.n	800a1de <HAL_SPI_Receive+0x1e6>
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a162:	2382      	movs	r3, #130	; 0x82
 800a164:	005b      	lsls	r3, r3, #1
 800a166:	6862      	ldr	r2, [r4, #4]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d04e      	beq.n	800a20a <HAL_SPI_Receive+0x212>
    hspi->State = HAL_SPI_STATE_READY;
 800a16c:	2351      	movs	r3, #81	; 0x51
 800a16e:	2201      	movs	r2, #1
 800a170:	54e2      	strb	r2, [r4, r3]
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 800a172:	2380      	movs	r3, #128	; 0x80
 800a174:	019b      	lsls	r3, r3, #6
 800a176:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a178:	429a      	cmp	r2, r3
 800a17a:	d155      	bne.n	800a228 <HAL_SPI_Receive+0x230>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	689a      	ldr	r2, [r3, #8]
 800a180:	06d2      	lsls	r2, r2, #27
 800a182:	d551      	bpl.n	800a228 <HAL_SPI_Receive+0x230>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a184:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a186:	2102      	movs	r1, #2
 800a188:	430a      	orrs	r2, r1
 800a18a:	6562      	str	r2, [r4, #84]	; 0x54
      SPI_RESET_CRC(hspi);
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	4930      	ldr	r1, [pc, #192]	; (800a250 <HAL_SPI_Receive+0x258>)
 800a190:	400a      	ands	r2, r1
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	6822      	ldr	r2, [r4, #0]
 800a196:	6811      	ldr	r1, [r2, #0]
 800a198:	2380      	movs	r3, #128	; 0x80
 800a19a:	019b      	lsls	r3, r3, #6
 800a19c:	430b      	orrs	r3, r1
 800a19e:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hspi);
 800a1a0:	2350      	movs	r3, #80	; 0x50
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR; 
 800a1a6:	e045      	b.n	800a234 <HAL_SPI_Receive+0x23c>
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800a1a8:	6822      	ldr	r2, [r4, #0]
 800a1aa:	6811      	ldr	r1, [r2, #0]
 800a1ac:	2380      	movs	r3, #128	; 0x80
 800a1ae:	015b      	lsls	r3, r3, #5
 800a1b0:	430b      	orrs	r3, r1
 800a1b2:	6013      	str	r3, [r2, #0]
 800a1b4:	e7ba      	b.n	800a12c <HAL_SPI_Receive+0x134>
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 800a1b6:	2380      	movs	r3, #128	; 0x80
 800a1b8:	019b      	lsls	r3, r3, #6
 800a1ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d1b5      	bne.n	800a12c <HAL_SPI_Receive+0x134>
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800a1c0:	6822      	ldr	r2, [r4, #0]
 800a1c2:	6811      	ldr	r1, [r2, #0]
 800a1c4:	2380      	movs	r3, #128	; 0x80
 800a1c6:	015b      	lsls	r3, r3, #5
 800a1c8:	430b      	orrs	r3, r1
 800a1ca:	6013      	str	r3, [r2, #0]
 800a1cc:	e7ae      	b.n	800a12c <HAL_SPI_Receive+0x134>
      *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a1d4:	8013      	strh	r3, [r2, #0]
      hspi->pRxBuffPtr+=2U;
 800a1d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a1d8:	3302      	adds	r3, #2
 800a1da:	63a3      	str	r3, [r4, #56]	; 0x38
 800a1dc:	e7b8      	b.n	800a150 <HAL_SPI_Receive+0x158>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800a1de:	002b      	movs	r3, r5
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	2101      	movs	r1, #1
 800a1e4:	0020      	movs	r0, r4
 800a1e6:	f7ff fb6b 	bl	80098c0 <SPI_WaitOnFlagUntilTimeout>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d107      	bne.n	800a1fe <HAL_SPI_Receive+0x206>
      tmpreg = hspi->Instance->DR;
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	220e      	movs	r2, #14
 800a1f6:	446a      	add	r2, sp
 800a1f8:	8013      	strh	r3, [r2, #0]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 800a1fa:	8813      	ldrh	r3, [r2, #0]
 800a1fc:	e7b1      	b.n	800a162 <HAL_SPI_Receive+0x16a>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a1fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a200:	2202      	movs	r2, #2
 800a202:	4313      	orrs	r3, r2
 800a204:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800a206:	2603      	movs	r6, #3
 800a208:	e014      	b.n	800a234 <HAL_SPI_Receive+0x23c>
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a20a:	68a3      	ldr	r3, [r4, #8]
 800a20c:	2280      	movs	r2, #128	; 0x80
 800a20e:	0212      	lsls	r2, r2, #8
 800a210:	4293      	cmp	r3, r2
 800a212:	d003      	beq.n	800a21c <HAL_SPI_Receive+0x224>
 800a214:	2280      	movs	r2, #128	; 0x80
 800a216:	00d2      	lsls	r2, r2, #3
 800a218:	4293      	cmp	r3, r2
 800a21a:	d1a7      	bne.n	800a16c <HAL_SPI_Receive+0x174>
      __HAL_SPI_DISABLE(hspi);
 800a21c:	6822      	ldr	r2, [r4, #0]
 800a21e:	6813      	ldr	r3, [r2, #0]
 800a220:	2140      	movs	r1, #64	; 0x40
 800a222:	438b      	bics	r3, r1
 800a224:	6013      	str	r3, [r2, #0]
 800a226:	e7a1      	b.n	800a16c <HAL_SPI_Receive+0x174>
    __HAL_UNLOCK(hspi);
 800a228:	2350      	movs	r3, #80	; 0x50
 800a22a:	2200      	movs	r2, #0
 800a22c:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 800a22e:	003e      	movs	r6, r7
 800a230:	e000      	b.n	800a234 <HAL_SPI_Receive+0x23c>
    return HAL_BUSY;
 800a232:	2602      	movs	r6, #2
}
 800a234:	0030      	movs	r0, r6
 800a236:	b005      	add	sp, #20
 800a238:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hspi);
 800a23a:	2602      	movs	r6, #2
 800a23c:	e7fa      	b.n	800a234 <HAL_SPI_Receive+0x23c>
          return HAL_TIMEOUT;
 800a23e:	2603      	movs	r6, #3
 800a240:	e7f8      	b.n	800a234 <HAL_SPI_Receive+0x23c>
          return HAL_TIMEOUT;
 800a242:	2603      	movs	r6, #3
 800a244:	e7f6      	b.n	800a234 <HAL_SPI_Receive+0x23c>
      return HAL_TIMEOUT;
 800a246:	2603      	movs	r6, #3
 800a248:	e7f4      	b.n	800a234 <HAL_SPI_Receive+0x23c>
 800a24a:	46c0      	nop			; (mov r8, r8)
 800a24c:	ffffbfff 	.word	0xffffbfff
 800a250:	ffffdfff 	.word	0xffffdfff

0800a254 <HAL_LPTIM_MspInit>:
  UNUSED(hlptim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LPTIM_MspInit could be implemented in the user file
   */
}
 800a254:	4770      	bx	lr
	...

0800a258 <HAL_LPTIM_Init>:
{
 800a258:	b570      	push	{r4, r5, r6, lr}
 800a25a:	1e04      	subs	r4, r0, #0
  if(hlptim == NULL)
 800a25c:	d03a      	beq.n	800a2d4 <HAL_LPTIM_Init+0x7c>
  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 800a25e:	232e      	movs	r3, #46	; 0x2e
 800a260:	5cc3      	ldrb	r3, [r0, r3]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d028      	beq.n	800a2b8 <HAL_LPTIM_Init+0x60>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800a266:	232e      	movs	r3, #46	; 0x2e
 800a268:	2202      	movs	r2, #2
 800a26a:	54e2      	strb	r2, [r4, r3]
  tmpcfgr = hlptim->Instance->CFGR;
 800a26c:	6825      	ldr	r5, [r4, #0]
 800a26e:	68eb      	ldr	r3, [r5, #12]
  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 800a270:	6860      	ldr	r0, [r4, #4]
 800a272:	2801      	cmp	r0, #1
 800a274:	d026      	beq.n	800a2c4 <HAL_LPTIM_Init+0x6c>
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 800a276:	6962      	ldr	r2, [r4, #20]
 800a278:	4917      	ldr	r1, [pc, #92]	; (800a2d8 <HAL_LPTIM_Init+0x80>)
 800a27a:	428a      	cmp	r2, r1
 800a27c:	d001      	beq.n	800a282 <HAL_LPTIM_Init+0x2a>
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800a27e:	4917      	ldr	r1, [pc, #92]	; (800a2dc <HAL_LPTIM_Init+0x84>)
 800a280:	400b      	ands	r3, r1
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800a282:	4917      	ldr	r1, [pc, #92]	; (800a2e0 <HAL_LPTIM_Init+0x88>)
 800a284:	4019      	ands	r1, r3
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800a286:	68a3      	ldr	r3, [r4, #8]
 800a288:	4303      	orrs	r3, r0
              hlptim->Init.Clock.Prescaler |
 800a28a:	6a26      	ldr	r6, [r4, #32]
 800a28c:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 800a28e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a290:	4333      	orrs	r3, r6
              hlptim->Init.UpdateMode      |
 800a292:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a294:	4333      	orrs	r3, r6
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800a296:	430b      	orrs	r3, r1
  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 800a298:	2801      	cmp	r0, #1
 800a29a:	d016      	beq.n	800a2ca <HAL_LPTIM_Init+0x72>
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 800a29c:	490e      	ldr	r1, [pc, #56]	; (800a2d8 <HAL_LPTIM_Init+0x80>)
 800a29e:	428a      	cmp	r2, r1
 800a2a0:	d004      	beq.n	800a2ac <HAL_LPTIM_Init+0x54>
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800a2a2:	69a1      	ldr	r1, [r4, #24]
 800a2a4:	430a      	orrs	r2, r1
                hlptim->Init.Trigger.ActiveEdge |
 800a2a6:	69e1      	ldr	r1, [r4, #28]
 800a2a8:	430a      	orrs	r2, r1
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800a2aa:	4313      	orrs	r3, r2
  hlptim->Instance->CFGR = tmpcfgr;
 800a2ac:	60eb      	str	r3, [r5, #12]
  hlptim->State = HAL_LPTIM_STATE_READY;
 800a2ae:	232e      	movs	r3, #46	; 0x2e
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800a2b4:	2000      	movs	r0, #0
}
 800a2b6:	bd70      	pop	{r4, r5, r6, pc}
    hlptim->Lock = HAL_UNLOCKED;
 800a2b8:	332d      	adds	r3, #45	; 0x2d
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	54c2      	strb	r2, [r0, r3]
    HAL_LPTIM_MspInit(hlptim);
 800a2be:	f7ff ffc9 	bl	800a254 <HAL_LPTIM_MspInit>
 800a2c2:	e7d0      	b.n	800a266 <HAL_LPTIM_Init+0xe>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800a2c4:	321c      	adds	r2, #28
 800a2c6:	4393      	bics	r3, r2
 800a2c8:	e7d5      	b.n	800a276 <HAL_LPTIM_Init+0x1e>
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 800a2ca:	68e1      	ldr	r1, [r4, #12]
 800a2cc:	6920      	ldr	r0, [r4, #16]
 800a2ce:	4301      	orrs	r1, r0
 800a2d0:	430b      	orrs	r3, r1
 800a2d2:	e7e3      	b.n	800a29c <HAL_LPTIM_Init+0x44>
    return HAL_ERROR;
 800a2d4:	2001      	movs	r0, #1
 800a2d6:	e7ee      	b.n	800a2b6 <HAL_LPTIM_Init+0x5e>
 800a2d8:	0000ffff 	.word	0x0000ffff
 800a2dc:	ffff1f3f 	.word	0xffff1f3f
 800a2e0:	ff19f1fe 	.word	0xff19f1fe

0800a2e4 <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a2e4:	4770      	bx	lr

0800a2e6 <HAL_UART_MspDeInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_UART_DeInit>:
{
 800a2e8:	b570      	push	{r4, r5, r6, lr}
 800a2ea:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 800a2ec:	d018      	beq.n	800a320 <HAL_UART_DeInit+0x38>
  huart->gState = HAL_UART_STATE_BUSY;
 800a2ee:	2669      	movs	r6, #105	; 0x69
 800a2f0:	2324      	movs	r3, #36	; 0x24
 800a2f2:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 800a2f4:	6802      	ldr	r2, [r0, #0]
 800a2f6:	6813      	ldr	r3, [r2, #0]
 800a2f8:	2101      	movs	r1, #1
 800a2fa:	438b      	bics	r3, r1
 800a2fc:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 800a2fe:	6803      	ldr	r3, [r0, #0]
 800a300:	2500      	movs	r5, #0
 800a302:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800a304:	6803      	ldr	r3, [r0, #0]
 800a306:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800a308:	6803      	ldr	r3, [r0, #0]
 800a30a:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 800a30c:	f7ff ffeb 	bl	800a2e6 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a310:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->gState    = HAL_UART_STATE_RESET;
 800a312:	55a5      	strb	r5, [r4, r6]
  huart->RxState   = HAL_UART_STATE_RESET;
 800a314:	236a      	movs	r3, #106	; 0x6a
 800a316:	54e5      	strb	r5, [r4, r3]
  __HAL_UNLOCK(huart);
 800a318:	3b02      	subs	r3, #2
 800a31a:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 800a31c:	2000      	movs	r0, #0
}
 800a31e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800a320:	2001      	movs	r0, #1
 800a322:	e7fc      	b.n	800a31e <HAL_UART_DeInit+0x36>

0800a324 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a326:	0004      	movs	r4, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 800a328:	6801      	ldr	r1, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a32a:	6883      	ldr	r3, [r0, #8]
 800a32c:	6902      	ldr	r2, [r0, #16]
 800a32e:	4313      	orrs	r3, r2
 800a330:	6942      	ldr	r2, [r0, #20]
 800a332:	4313      	orrs	r3, r2
 800a334:	69c2      	ldr	r2, [r0, #28]
 800a336:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800a338:	680a      	ldr	r2, [r1, #0]
 800a33a:	48b7      	ldr	r0, [pc, #732]	; (800a618 <UART_SetConfig+0x2f4>)
 800a33c:	4002      	ands	r2, r0
 800a33e:	4313      	orrs	r3, r2
 800a340:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a342:	6822      	ldr	r2, [r4, #0]
 800a344:	6853      	ldr	r3, [r2, #4]
 800a346:	49b5      	ldr	r1, [pc, #724]	; (800a61c <UART_SetConfig+0x2f8>)
 800a348:	400b      	ands	r3, r1
 800a34a:	68e1      	ldr	r1, [r4, #12]
 800a34c:	430b      	orrs	r3, r1
 800a34e:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a350:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a352:	6822      	ldr	r2, [r4, #0]
 800a354:	4bb2      	ldr	r3, [pc, #712]	; (800a620 <UART_SetConfig+0x2fc>)
 800a356:	429a      	cmp	r2, r3
 800a358:	d001      	beq.n	800a35e <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a35a:	6a23      	ldr	r3, [r4, #32]
 800a35c:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800a35e:	6893      	ldr	r3, [r2, #8]
 800a360:	48b0      	ldr	r0, [pc, #704]	; (800a624 <UART_SetConfig+0x300>)
 800a362:	4003      	ands	r3, r0
 800a364:	430b      	orrs	r3, r1
 800a366:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a368:	6823      	ldr	r3, [r4, #0]
 800a36a:	4aaf      	ldr	r2, [pc, #700]	; (800a628 <UART_SetConfig+0x304>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d00d      	beq.n	800a38c <UART_SetConfig+0x68>
 800a370:	4aae      	ldr	r2, [pc, #696]	; (800a62c <UART_SetConfig+0x308>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d02e      	beq.n	800a3d4 <UART_SetConfig+0xb0>
 800a376:	4aae      	ldr	r2, [pc, #696]	; (800a630 <UART_SetConfig+0x30c>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d064      	beq.n	800a446 <UART_SetConfig+0x122>
 800a37c:	4aad      	ldr	r2, [pc, #692]	; (800a634 <UART_SetConfig+0x310>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d063      	beq.n	800a44a <UART_SetConfig+0x126>
 800a382:	4aa7      	ldr	r2, [pc, #668]	; (800a620 <UART_SetConfig+0x2fc>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d036      	beq.n	800a3f6 <UART_SetConfig+0xd2>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a388:	2510      	movs	r5, #16
 800a38a:	e00b      	b.n	800a3a4 <UART_SetConfig+0x80>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a38c:	4baa      	ldr	r3, [pc, #680]	; (800a638 <UART_SetConfig+0x314>)
 800a38e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a390:	2303      	movs	r3, #3
 800a392:	4013      	ands	r3, r2
 800a394:	2b02      	cmp	r3, #2
 800a396:	d046      	beq.n	800a426 <UART_SetConfig+0x102>
 800a398:	d818      	bhi.n	800a3cc <UART_SetConfig+0xa8>
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d045      	beq.n	800a42a <UART_SetConfig+0x106>
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d145      	bne.n	800a42e <UART_SetConfig+0x10a>
 800a3a2:	2504      	movs	r5, #4
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 800a3a4:	2002      	movs	r0, #2
 800a3a6:	f7ff f925 	bl	80095f4 <HAL_RCCEx_GetPeriphCLKFreq>

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 800a3aa:	6826      	ldr	r6, [r4, #0]
 800a3ac:	4b9c      	ldr	r3, [pc, #624]	; (800a620 <UART_SetConfig+0x2fc>)
 800a3ae:	429e      	cmp	r6, r3
 800a3b0:	d055      	beq.n	800a45e <UART_SetConfig+0x13a>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3b2:	2380      	movs	r3, #128	; 0x80
 800a3b4:	021b      	lsls	r3, r3, #8
 800a3b6:	69e2      	ldr	r2, [r4, #28]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d100      	bne.n	800a3be <UART_SetConfig+0x9a>
 800a3bc:	e08c      	b.n	800a4d8 <UART_SetConfig+0x1b4>
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 800a3be:	2d08      	cmp	r5, #8
 800a3c0:	d900      	bls.n	800a3c4 <UART_SetConfig+0xa0>
 800a3c2:	e15e      	b.n	800a682 <UART_SetConfig+0x35e>
 800a3c4:	00ab      	lsls	r3, r5, #2
 800a3c6:	4a9d      	ldr	r2, [pc, #628]	; (800a63c <UART_SetConfig+0x318>)
 800a3c8:	58d3      	ldr	r3, [r2, r3]
 800a3ca:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3cc:	2b03      	cmp	r3, #3
 800a3ce:	d130      	bne.n	800a432 <UART_SetConfig+0x10e>
 800a3d0:	2508      	movs	r5, #8
 800a3d2:	e7e7      	b.n	800a3a4 <UART_SetConfig+0x80>
 800a3d4:	4b98      	ldr	r3, [pc, #608]	; (800a638 <UART_SetConfig+0x314>)
 800a3d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3d8:	230c      	movs	r3, #12
 800a3da:	4013      	ands	r3, r2
 800a3dc:	2b08      	cmp	r3, #8
 800a3de:	d02a      	beq.n	800a436 <UART_SetConfig+0x112>
 800a3e0:	d805      	bhi.n	800a3ee <UART_SetConfig+0xca>
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d029      	beq.n	800a43a <UART_SetConfig+0x116>
 800a3e6:	2b04      	cmp	r3, #4
 800a3e8:	d129      	bne.n	800a43e <UART_SetConfig+0x11a>
 800a3ea:	2504      	movs	r5, #4
 800a3ec:	e7da      	b.n	800a3a4 <UART_SetConfig+0x80>
 800a3ee:	2b0c      	cmp	r3, #12
 800a3f0:	d127      	bne.n	800a442 <UART_SetConfig+0x11e>
 800a3f2:	2508      	movs	r5, #8
 800a3f4:	e7d6      	b.n	800a3a4 <UART_SetConfig+0x80>
 800a3f6:	4b90      	ldr	r3, [pc, #576]	; (800a638 <UART_SetConfig+0x314>)
 800a3f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3fa:	22c0      	movs	r2, #192	; 0xc0
 800a3fc:	0112      	lsls	r2, r2, #4
 800a3fe:	4013      	ands	r3, r2
 800a400:	2280      	movs	r2, #128	; 0x80
 800a402:	0112      	lsls	r2, r2, #4
 800a404:	4293      	cmp	r3, r2
 800a406:	d022      	beq.n	800a44e <UART_SetConfig+0x12a>
 800a408:	d807      	bhi.n	800a41a <UART_SetConfig+0xf6>
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d021      	beq.n	800a452 <UART_SetConfig+0x12e>
 800a40e:	2280      	movs	r2, #128	; 0x80
 800a410:	00d2      	lsls	r2, r2, #3
 800a412:	4293      	cmp	r3, r2
 800a414:	d11f      	bne.n	800a456 <UART_SetConfig+0x132>
 800a416:	2504      	movs	r5, #4
 800a418:	e7c4      	b.n	800a3a4 <UART_SetConfig+0x80>
 800a41a:	22c0      	movs	r2, #192	; 0xc0
 800a41c:	0112      	lsls	r2, r2, #4
 800a41e:	4293      	cmp	r3, r2
 800a420:	d11b      	bne.n	800a45a <UART_SetConfig+0x136>
 800a422:	2508      	movs	r5, #8
 800a424:	e7be      	b.n	800a3a4 <UART_SetConfig+0x80>
 800a426:	2502      	movs	r5, #2
 800a428:	e7bc      	b.n	800a3a4 <UART_SetConfig+0x80>
 800a42a:	2501      	movs	r5, #1
 800a42c:	e7ba      	b.n	800a3a4 <UART_SetConfig+0x80>
 800a42e:	2510      	movs	r5, #16
 800a430:	e7b8      	b.n	800a3a4 <UART_SetConfig+0x80>
 800a432:	2510      	movs	r5, #16
 800a434:	e7b6      	b.n	800a3a4 <UART_SetConfig+0x80>
 800a436:	2502      	movs	r5, #2
 800a438:	e7b4      	b.n	800a3a4 <UART_SetConfig+0x80>
 800a43a:	2500      	movs	r5, #0
 800a43c:	e7b2      	b.n	800a3a4 <UART_SetConfig+0x80>
 800a43e:	2510      	movs	r5, #16
 800a440:	e7b0      	b.n	800a3a4 <UART_SetConfig+0x80>
 800a442:	2510      	movs	r5, #16
 800a444:	e7ae      	b.n	800a3a4 <UART_SetConfig+0x80>
 800a446:	2500      	movs	r5, #0
 800a448:	e7ac      	b.n	800a3a4 <UART_SetConfig+0x80>
 800a44a:	2500      	movs	r5, #0
 800a44c:	e7aa      	b.n	800a3a4 <UART_SetConfig+0x80>
 800a44e:	2502      	movs	r5, #2
 800a450:	e7a8      	b.n	800a3a4 <UART_SetConfig+0x80>
 800a452:	2500      	movs	r5, #0
 800a454:	e7a6      	b.n	800a3a4 <UART_SetConfig+0x80>
 800a456:	2510      	movs	r5, #16
 800a458:	e7a4      	b.n	800a3a4 <UART_SetConfig+0x80>
 800a45a:	2510      	movs	r5, #16
 800a45c:	e7a2      	b.n	800a3a4 <UART_SetConfig+0x80>
    switch (clocksource)
 800a45e:	2d04      	cmp	r5, #4
 800a460:	d035      	beq.n	800a4ce <UART_SetConfig+0x1aa>
 800a462:	d80b      	bhi.n	800a47c <UART_SetConfig+0x158>
 800a464:	2d00      	cmp	r5, #0
 800a466:	d02c      	beq.n	800a4c2 <UART_SetConfig+0x19e>
 800a468:	2d02      	cmp	r5, #2
 800a46a:	d105      	bne.n	800a478 <UART_SetConfig+0x154>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a46c:	4b72      	ldr	r3, [pc, #456]	; (800a638 <UART_SetConfig+0x314>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	06db      	lsls	r3, r3, #27
 800a472:	d42f      	bmi.n	800a4d4 <UART_SetConfig+0x1b0>
        tmpreg = (uint32_t) HSI_VALUE;
 800a474:	4872      	ldr	r0, [pc, #456]	; (800a640 <UART_SetConfig+0x31c>)
 800a476:	e005      	b.n	800a484 <UART_SetConfig+0x160>
    switch (clocksource)
 800a478:	2501      	movs	r5, #1
 800a47a:	e044      	b.n	800a506 <UART_SetConfig+0x1e2>
 800a47c:	2d08      	cmp	r5, #8
 800a47e:	d11e      	bne.n	800a4be <UART_SetConfig+0x19a>
 800a480:	2080      	movs	r0, #128	; 0x80
 800a482:	0200      	lsls	r0, r0, #8
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800a484:	6862      	ldr	r2, [r4, #4]
 800a486:	0053      	lsls	r3, r2, #1
 800a488:	189b      	adds	r3, r3, r2
 800a48a:	4283      	cmp	r3, r0
 800a48c:	d900      	bls.n	800a490 <UART_SetConfig+0x16c>
 800a48e:	e0f2      	b.n	800a676 <UART_SetConfig+0x352>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 800a490:	0313      	lsls	r3, r2, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800a492:	4283      	cmp	r3, r0
 800a494:	d200      	bcs.n	800a498 <UART_SetConfig+0x174>
 800a496:	e0f0      	b.n	800a67a <UART_SetConfig+0x356>
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 800a498:	0e07      	lsrs	r7, r0, #24
 800a49a:	0206      	lsls	r6, r0, #8
 800a49c:	0850      	lsrs	r0, r2, #1
 800a49e:	2100      	movs	r1, #0
 800a4a0:	1980      	adds	r0, r0, r6
 800a4a2:	4179      	adcs	r1, r7
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f007 fd21 	bl	8011eec <__aeabi_uldivmod>
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 800a4aa:	4b66      	ldr	r3, [pc, #408]	; (800a644 <UART_SetConfig+0x320>)
 800a4ac:	18c2      	adds	r2, r0, r3
 800a4ae:	4b66      	ldr	r3, [pc, #408]	; (800a648 <UART_SetConfig+0x324>)
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d900      	bls.n	800a4b6 <UART_SetConfig+0x192>
 800a4b4:	e0e3      	b.n	800a67e <UART_SetConfig+0x35a>
           huart->Instance->BRR = tmpreg;
 800a4b6:	6823      	ldr	r3, [r4, #0]
 800a4b8:	60d8      	str	r0, [r3, #12]
 800a4ba:	2500      	movs	r5, #0
 800a4bc:	e023      	b.n	800a506 <UART_SetConfig+0x1e2>
    switch (clocksource)
 800a4be:	2501      	movs	r5, #1
 800a4c0:	e021      	b.n	800a506 <UART_SetConfig+0x1e2>
      tmpreg = HAL_RCC_GetPCLK1Freq();
 800a4c2:	f7fe ff85 	bl	80093d0 <HAL_RCC_GetPCLK1Freq>
    if (tmpreg != 0)
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d1dc      	bne.n	800a484 <UART_SetConfig+0x160>
 800a4ca:	2500      	movs	r5, #0
 800a4cc:	e01b      	b.n	800a506 <UART_SetConfig+0x1e2>
      tmpreg = HAL_RCC_GetSysClockFreq();
 800a4ce:	f7fe fe51 	bl	8009174 <HAL_RCC_GetSysClockFreq>
      break;
 800a4d2:	e7f8      	b.n	800a4c6 <UART_SetConfig+0x1a2>
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 800a4d4:	485d      	ldr	r0, [pc, #372]	; (800a64c <UART_SetConfig+0x328>)
 800a4d6:	e7d5      	b.n	800a484 <UART_SetConfig+0x160>
    switch (clocksource)
 800a4d8:	2d08      	cmp	r5, #8
 800a4da:	d854      	bhi.n	800a586 <UART_SetConfig+0x262>
 800a4dc:	00ab      	lsls	r3, r5, #2
 800a4de:	4a5c      	ldr	r2, [pc, #368]	; (800a650 <UART_SetConfig+0x32c>)
 800a4e0:	58d3      	ldr	r3, [r2, r3]
 800a4e2:	469f      	mov	pc, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 800a4e4:	0040      	lsls	r0, r0, #1
 800a4e6:	6863      	ldr	r3, [r4, #4]
 800a4e8:	085b      	lsrs	r3, r3, #1
 800a4ea:	18c0      	adds	r0, r0, r3
 800a4ec:	6861      	ldr	r1, [r4, #4]
 800a4ee:	f007 fb0f 	bl	8011b10 <__udivsi3>
 800a4f2:	b280      	uxth	r0, r0
    brrtemp = usartdiv & 0xFFF0U;
 800a4f4:	230f      	movs	r3, #15
 800a4f6:	0002      	movs	r2, r0
 800a4f8:	439a      	bics	r2, r3
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 800a4fa:	1040      	asrs	r0, r0, #1
 800a4fc:	3b08      	subs	r3, #8
 800a4fe:	4018      	ands	r0, r3
 800a500:	4310      	orrs	r0, r2
    huart->Instance->BRR = brrtemp;
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	60d8      	str	r0, [r3, #12]
    }
  }

  return ret;

}
 800a506:	0028      	movs	r0, r5
 800a508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a50a:	f7fe ff71 	bl	80093f0 <HAL_RCC_GetPCLK2Freq>
 800a50e:	0040      	lsls	r0, r0, #1
 800a510:	6863      	ldr	r3, [r4, #4]
 800a512:	085b      	lsrs	r3, r3, #1
 800a514:	18c0      	adds	r0, r0, r3
 800a516:	6861      	ldr	r1, [r4, #4]
 800a518:	f007 fafa 	bl	8011b10 <__udivsi3>
 800a51c:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800a51e:	2500      	movs	r5, #0
      break;
 800a520:	e7e8      	b.n	800a4f4 <UART_SetConfig+0x1d0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a522:	4b45      	ldr	r3, [pc, #276]	; (800a638 <UART_SetConfig+0x314>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	06db      	lsls	r3, r3, #27
 800a528:	d50a      	bpl.n	800a540 <UART_SetConfig+0x21c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800a52a:	6863      	ldr	r3, [r4, #4]
 800a52c:	0858      	lsrs	r0, r3, #1
 800a52e:	4b49      	ldr	r3, [pc, #292]	; (800a654 <UART_SetConfig+0x330>)
 800a530:	469c      	mov	ip, r3
 800a532:	4460      	add	r0, ip
 800a534:	6861      	ldr	r1, [r4, #4]
 800a536:	f007 faeb 	bl	8011b10 <__udivsi3>
 800a53a:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800a53c:	2500      	movs	r5, #0
 800a53e:	e7d9      	b.n	800a4f4 <UART_SetConfig+0x1d0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 800a540:	6863      	ldr	r3, [r4, #4]
 800a542:	0858      	lsrs	r0, r3, #1
 800a544:	4b44      	ldr	r3, [pc, #272]	; (800a658 <UART_SetConfig+0x334>)
 800a546:	469c      	mov	ip, r3
 800a548:	4460      	add	r0, ip
 800a54a:	6861      	ldr	r1, [r4, #4]
 800a54c:	f007 fae0 	bl	8011b10 <__udivsi3>
 800a550:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800a552:	2500      	movs	r5, #0
 800a554:	e7ce      	b.n	800a4f4 <UART_SetConfig+0x1d0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a556:	f7fe fe0d 	bl	8009174 <HAL_RCC_GetSysClockFreq>
 800a55a:	0040      	lsls	r0, r0, #1
 800a55c:	6863      	ldr	r3, [r4, #4]
 800a55e:	085b      	lsrs	r3, r3, #1
 800a560:	18c0      	adds	r0, r0, r3
 800a562:	6861      	ldr	r1, [r4, #4]
 800a564:	f007 fad4 	bl	8011b10 <__udivsi3>
 800a568:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800a56a:	2500      	movs	r5, #0
      break;
 800a56c:	e7c2      	b.n	800a4f4 <UART_SetConfig+0x1d0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a56e:	6863      	ldr	r3, [r4, #4]
 800a570:	0858      	lsrs	r0, r3, #1
 800a572:	2380      	movs	r3, #128	; 0x80
 800a574:	025b      	lsls	r3, r3, #9
 800a576:	469c      	mov	ip, r3
 800a578:	4460      	add	r0, ip
 800a57a:	6861      	ldr	r1, [r4, #4]
 800a57c:	f007 fac8 	bl	8011b10 <__udivsi3>
 800a580:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800a582:	2500      	movs	r5, #0
      break;
 800a584:	e7b6      	b.n	800a4f4 <UART_SetConfig+0x1d0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a586:	2501      	movs	r5, #1
 800a588:	2000      	movs	r0, #0
 800a58a:	e7b3      	b.n	800a4f4 <UART_SetConfig+0x1d0>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a58c:	f7fe ff20 	bl	80093d0 <HAL_RCC_GetPCLK1Freq>
 800a590:	6863      	ldr	r3, [r4, #4]
 800a592:	085b      	lsrs	r3, r3, #1
 800a594:	18c0      	adds	r0, r0, r3
 800a596:	6861      	ldr	r1, [r4, #4]
 800a598:	f007 faba 	bl	8011b10 <__udivsi3>
 800a59c:	6823      	ldr	r3, [r4, #0]
 800a59e:	0400      	lsls	r0, r0, #16
 800a5a0:	0c00      	lsrs	r0, r0, #16
 800a5a2:	60d8      	str	r0, [r3, #12]
      break;
 800a5a4:	e7af      	b.n	800a506 <UART_SetConfig+0x1e2>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a5a6:	f7fe ff23 	bl	80093f0 <HAL_RCC_GetPCLK2Freq>
 800a5aa:	6863      	ldr	r3, [r4, #4]
 800a5ac:	085b      	lsrs	r3, r3, #1
 800a5ae:	18c0      	adds	r0, r0, r3
 800a5b0:	6861      	ldr	r1, [r4, #4]
 800a5b2:	f007 faad 	bl	8011b10 <__udivsi3>
 800a5b6:	6823      	ldr	r3, [r4, #0]
 800a5b8:	0400      	lsls	r0, r0, #16
 800a5ba:	0c00      	lsrs	r0, r0, #16
 800a5bc:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5be:	2500      	movs	r5, #0
      break;
 800a5c0:	e7a1      	b.n	800a506 <UART_SetConfig+0x1e2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5c2:	4b1d      	ldr	r3, [pc, #116]	; (800a638 <UART_SetConfig+0x314>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	06db      	lsls	r3, r3, #27
 800a5c8:	d50b      	bpl.n	800a5e2 <UART_SetConfig+0x2be>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800a5ca:	6861      	ldr	r1, [r4, #4]
 800a5cc:	0848      	lsrs	r0, r1, #1
 800a5ce:	4b1f      	ldr	r3, [pc, #124]	; (800a64c <UART_SetConfig+0x328>)
 800a5d0:	469c      	mov	ip, r3
 800a5d2:	4460      	add	r0, ip
 800a5d4:	f007 fa9c 	bl	8011b10 <__udivsi3>
 800a5d8:	0400      	lsls	r0, r0, #16
 800a5da:	0c00      	lsrs	r0, r0, #16
 800a5dc:	60f0      	str	r0, [r6, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5de:	2500      	movs	r5, #0
 800a5e0:	e791      	b.n	800a506 <UART_SetConfig+0x1e2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a5e2:	6861      	ldr	r1, [r4, #4]
 800a5e4:	0848      	lsrs	r0, r1, #1
 800a5e6:	4b16      	ldr	r3, [pc, #88]	; (800a640 <UART_SetConfig+0x31c>)
 800a5e8:	469c      	mov	ip, r3
 800a5ea:	4460      	add	r0, ip
 800a5ec:	f007 fa90 	bl	8011b10 <__udivsi3>
 800a5f0:	0400      	lsls	r0, r0, #16
 800a5f2:	0c00      	lsrs	r0, r0, #16
 800a5f4:	60f0      	str	r0, [r6, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5f6:	2500      	movs	r5, #0
 800a5f8:	e785      	b.n	800a506 <UART_SetConfig+0x1e2>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a5fa:	f7fe fdbb 	bl	8009174 <HAL_RCC_GetSysClockFreq>
 800a5fe:	6863      	ldr	r3, [r4, #4]
 800a600:	085b      	lsrs	r3, r3, #1
 800a602:	18c0      	adds	r0, r0, r3
 800a604:	6861      	ldr	r1, [r4, #4]
 800a606:	f007 fa83 	bl	8011b10 <__udivsi3>
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	0400      	lsls	r0, r0, #16
 800a60e:	0c00      	lsrs	r0, r0, #16
 800a610:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a612:	2500      	movs	r5, #0
      break;
 800a614:	e777      	b.n	800a506 <UART_SetConfig+0x1e2>
 800a616:	46c0      	nop			; (mov r8, r8)
 800a618:	efff69f3 	.word	0xefff69f3
 800a61c:	ffffcfff 	.word	0xffffcfff
 800a620:	40004800 	.word	0x40004800
 800a624:	fffff4ff 	.word	0xfffff4ff
 800a628:	40013800 	.word	0x40013800
 800a62c:	40004400 	.word	0x40004400
 800a630:	40004c00 	.word	0x40004c00
 800a634:	40005000 	.word	0x40005000
 800a638:	40021000 	.word	0x40021000
 800a63c:	0801979c 	.word	0x0801979c
 800a640:	00f42400 	.word	0x00f42400
 800a644:	fffffd00 	.word	0xfffffd00
 800a648:	000ffcff 	.word	0x000ffcff
 800a64c:	003d0900 	.word	0x003d0900
 800a650:	080197c0 	.word	0x080197c0
 800a654:	007a1200 	.word	0x007a1200
 800a658:	01e84800 	.word	0x01e84800
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a65c:	6861      	ldr	r1, [r4, #4]
 800a65e:	0848      	lsrs	r0, r1, #1
 800a660:	2380      	movs	r3, #128	; 0x80
 800a662:	021b      	lsls	r3, r3, #8
 800a664:	469c      	mov	ip, r3
 800a666:	4460      	add	r0, ip
 800a668:	f007 fa52 	bl	8011b10 <__udivsi3>
 800a66c:	0400      	lsls	r0, r0, #16
 800a66e:	0c00      	lsrs	r0, r0, #16
 800a670:	60f0      	str	r0, [r6, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a672:	2500      	movs	r5, #0
      break;
 800a674:	e747      	b.n	800a506 <UART_SetConfig+0x1e2>
        ret = HAL_ERROR;
 800a676:	2501      	movs	r5, #1
 800a678:	e745      	b.n	800a506 <UART_SetConfig+0x1e2>
 800a67a:	2501      	movs	r5, #1
 800a67c:	e743      	b.n	800a506 <UART_SetConfig+0x1e2>
          ret = HAL_ERROR;
 800a67e:	2501      	movs	r5, #1
 800a680:	e741      	b.n	800a506 <UART_SetConfig+0x1e2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a682:	2501      	movs	r5, #1
 800a684:	e73f      	b.n	800a506 <UART_SetConfig+0x1e2>
 800a686:	46c0      	nop			; (mov r8, r8)

0800a688 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a688:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a68a:	07db      	lsls	r3, r3, #31
 800a68c:	d506      	bpl.n	800a69c <UART_AdvFeatureConfig+0x14>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a68e:	6802      	ldr	r2, [r0, #0]
 800a690:	6853      	ldr	r3, [r2, #4]
 800a692:	492c      	ldr	r1, [pc, #176]	; (800a744 <UART_AdvFeatureConfig+0xbc>)
 800a694:	400b      	ands	r3, r1
 800a696:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a698:	430b      	orrs	r3, r1
 800a69a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a69c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a69e:	079b      	lsls	r3, r3, #30
 800a6a0:	d506      	bpl.n	800a6b0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6a2:	6802      	ldr	r2, [r0, #0]
 800a6a4:	6853      	ldr	r3, [r2, #4]
 800a6a6:	4928      	ldr	r1, [pc, #160]	; (800a748 <UART_AdvFeatureConfig+0xc0>)
 800a6a8:	400b      	ands	r3, r1
 800a6aa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a6ac:	430b      	orrs	r3, r1
 800a6ae:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a6b2:	075b      	lsls	r3, r3, #29
 800a6b4:	d506      	bpl.n	800a6c4 <UART_AdvFeatureConfig+0x3c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6b6:	6802      	ldr	r2, [r0, #0]
 800a6b8:	6853      	ldr	r3, [r2, #4]
 800a6ba:	4924      	ldr	r1, [pc, #144]	; (800a74c <UART_AdvFeatureConfig+0xc4>)
 800a6bc:	400b      	ands	r3, r1
 800a6be:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800a6c0:	430b      	orrs	r3, r1
 800a6c2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a6c6:	071b      	lsls	r3, r3, #28
 800a6c8:	d506      	bpl.n	800a6d8 <UART_AdvFeatureConfig+0x50>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6ca:	6802      	ldr	r2, [r0, #0]
 800a6cc:	6853      	ldr	r3, [r2, #4]
 800a6ce:	4920      	ldr	r1, [pc, #128]	; (800a750 <UART_AdvFeatureConfig+0xc8>)
 800a6d0:	400b      	ands	r3, r1
 800a6d2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a6d4:	430b      	orrs	r3, r1
 800a6d6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a6da:	06db      	lsls	r3, r3, #27
 800a6dc:	d506      	bpl.n	800a6ec <UART_AdvFeatureConfig+0x64>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6de:	6802      	ldr	r2, [r0, #0]
 800a6e0:	6893      	ldr	r3, [r2, #8]
 800a6e2:	491c      	ldr	r1, [pc, #112]	; (800a754 <UART_AdvFeatureConfig+0xcc>)
 800a6e4:	400b      	ands	r3, r1
 800a6e6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a6e8:	430b      	orrs	r3, r1
 800a6ea:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a6ee:	069b      	lsls	r3, r3, #26
 800a6f0:	d506      	bpl.n	800a700 <UART_AdvFeatureConfig+0x78>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a6f2:	6802      	ldr	r2, [r0, #0]
 800a6f4:	6893      	ldr	r3, [r2, #8]
 800a6f6:	4918      	ldr	r1, [pc, #96]	; (800a758 <UART_AdvFeatureConfig+0xd0>)
 800a6f8:	400b      	ands	r3, r1
 800a6fa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800a6fc:	430b      	orrs	r3, r1
 800a6fe:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a700:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a702:	065b      	lsls	r3, r3, #25
 800a704:	d50b      	bpl.n	800a71e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a706:	6802      	ldr	r2, [r0, #0]
 800a708:	6853      	ldr	r3, [r2, #4]
 800a70a:	4914      	ldr	r1, [pc, #80]	; (800a75c <UART_AdvFeatureConfig+0xd4>)
 800a70c:	400b      	ands	r3, r1
 800a70e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a710:	430b      	orrs	r3, r1
 800a712:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a714:	2380      	movs	r3, #128	; 0x80
 800a716:	035b      	lsls	r3, r3, #13
 800a718:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d00a      	beq.n	800a734 <UART_AdvFeatureConfig+0xac>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a71e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a720:	061b      	lsls	r3, r3, #24
 800a722:	d506      	bpl.n	800a732 <UART_AdvFeatureConfig+0xaa>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a724:	6802      	ldr	r2, [r0, #0]
 800a726:	6853      	ldr	r3, [r2, #4]
 800a728:	490d      	ldr	r1, [pc, #52]	; (800a760 <UART_AdvFeatureConfig+0xd8>)
 800a72a:	400b      	ands	r3, r1
 800a72c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800a72e:	430b      	orrs	r3, r1
 800a730:	6053      	str	r3, [r2, #4]
  }
}
 800a732:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a734:	6802      	ldr	r2, [r0, #0]
 800a736:	6853      	ldr	r3, [r2, #4]
 800a738:	490a      	ldr	r1, [pc, #40]	; (800a764 <UART_AdvFeatureConfig+0xdc>)
 800a73a:	400b      	ands	r3, r1
 800a73c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800a73e:	430b      	orrs	r3, r1
 800a740:	6053      	str	r3, [r2, #4]
 800a742:	e7ec      	b.n	800a71e <UART_AdvFeatureConfig+0x96>
 800a744:	fffdffff 	.word	0xfffdffff
 800a748:	fffeffff 	.word	0xfffeffff
 800a74c:	fffbffff 	.word	0xfffbffff
 800a750:	ffff7fff 	.word	0xffff7fff
 800a754:	ffffefff 	.word	0xffffefff
 800a758:	ffffdfff 	.word	0xffffdfff
 800a75c:	ffefffff 	.word	0xffefffff
 800a760:	fff7ffff 	.word	0xfff7ffff
 800a764:	ff9fffff 	.word	0xff9fffff

0800a768 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76a:	46ce      	mov	lr, r9
 800a76c:	4647      	mov	r7, r8
 800a76e:	b580      	push	{r7, lr}
 800a770:	0006      	movs	r6, r0
 800a772:	000d      	movs	r5, r1
 800a774:	0017      	movs	r7, r2
 800a776:	4699      	mov	r9, r3
 800a778:	9b08      	ldr	r3, [sp, #32]
 800a77a:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a77c:	6833      	ldr	r3, [r6, #0]
 800a77e:	69dc      	ldr	r4, [r3, #28]
 800a780:	402c      	ands	r4, r5
 800a782:	1b64      	subs	r4, r4, r5
 800a784:	4263      	negs	r3, r4
 800a786:	415c      	adcs	r4, r3
 800a788:	42bc      	cmp	r4, r7
 800a78a:	d120      	bne.n	800a7ce <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800a78c:	4643      	mov	r3, r8
 800a78e:	3301      	adds	r3, #1
 800a790:	d0f4      	beq.n	800a77c <UART_WaitOnFlagUntilTimeout+0x14>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 800a792:	4643      	mov	r3, r8
 800a794:	2b00      	cmp	r3, #0
 800a796:	d005      	beq.n	800a7a4 <UART_WaitOnFlagUntilTimeout+0x3c>
 800a798:	f000 fd1a 	bl	800b1d0 <HAL_GetTick>
 800a79c:	464b      	mov	r3, r9
 800a79e:	1ac0      	subs	r0, r0, r3
 800a7a0:	4540      	cmp	r0, r8
 800a7a2:	d9eb      	bls.n	800a77c <UART_WaitOnFlagUntilTimeout+0x14>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a7a4:	6832      	ldr	r2, [r6, #0]
 800a7a6:	6813      	ldr	r3, [r2, #0]
 800a7a8:	490b      	ldr	r1, [pc, #44]	; (800a7d8 <UART_WaitOnFlagUntilTimeout+0x70>)
 800a7aa:	400b      	ands	r3, r1
 800a7ac:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ae:	6832      	ldr	r2, [r6, #0]
 800a7b0:	6893      	ldr	r3, [r2, #8]
 800a7b2:	31a3      	adds	r1, #163	; 0xa3
 800a7b4:	31ff      	adds	r1, #255	; 0xff
 800a7b6:	438b      	bics	r3, r1
 800a7b8:	6093      	str	r3, [r2, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800a7ba:	2320      	movs	r3, #32
 800a7bc:	2269      	movs	r2, #105	; 0x69
 800a7be:	54b3      	strb	r3, [r6, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800a7c0:	3201      	adds	r2, #1
 800a7c2:	54b3      	strb	r3, [r6, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a7c4:	3348      	adds	r3, #72	; 0x48
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800a7ca:	2003      	movs	r0, #3
 800a7cc:	e000      	b.n	800a7d0 <UART_WaitOnFlagUntilTimeout+0x68>
      }
    }
  }
  return HAL_OK;
 800a7ce:	2000      	movs	r0, #0
}
 800a7d0:	bc0c      	pop	{r2, r3}
 800a7d2:	4690      	mov	r8, r2
 800a7d4:	4699      	mov	r9, r3
 800a7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7d8:	fffffe5f 	.word	0xfffffe5f

0800a7dc <HAL_UART_Transmit>:
{
 800a7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7de:	46c6      	mov	lr, r8
 800a7e0:	b500      	push	{lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	0004      	movs	r4, r0
 800a7e6:	000d      	movs	r5, r1
 800a7e8:	4690      	mov	r8, r2
 800a7ea:	001e      	movs	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800a7ec:	2369      	movs	r3, #105	; 0x69
 800a7ee:	5cc3      	ldrb	r3, [r0, r3]
 800a7f0:	2b20      	cmp	r3, #32
 800a7f2:	d159      	bne.n	800a8a8 <HAL_UART_Transmit+0xcc>
    if((pData == NULL ) || (Size == 0U))
 800a7f4:	2900      	cmp	r1, #0
 800a7f6:	d05c      	beq.n	800a8b2 <HAL_UART_Transmit+0xd6>
 800a7f8:	2a00      	cmp	r2, #0
 800a7fa:	d05c      	beq.n	800a8b6 <HAL_UART_Transmit+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7fc:	2380      	movs	r3, #128	; 0x80
 800a7fe:	015b      	lsls	r3, r3, #5
 800a800:	6882      	ldr	r2, [r0, #8]
 800a802:	429a      	cmp	r2, r3
 800a804:	d014      	beq.n	800a830 <HAL_UART_Transmit+0x54>
    __HAL_LOCK(huart);
 800a806:	2368      	movs	r3, #104	; 0x68
 800a808:	5ce3      	ldrb	r3, [r4, r3]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d055      	beq.n	800a8ba <HAL_UART_Transmit+0xde>
 800a80e:	2368      	movs	r3, #104	; 0x68
 800a810:	2201      	movs	r2, #1
 800a812:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a814:	2300      	movs	r3, #0
 800a816:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a818:	3369      	adds	r3, #105	; 0x69
 800a81a:	3220      	adds	r2, #32
 800a81c:	54e2      	strb	r2, [r4, r3]
    tickstart = HAL_GetTick();
 800a81e:	f000 fcd7 	bl	800b1d0 <HAL_GetTick>
 800a822:	0007      	movs	r7, r0
    huart->TxXferSize = Size;
 800a824:	2350      	movs	r3, #80	; 0x50
 800a826:	4642      	mov	r2, r8
 800a828:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 800a82a:	3302      	adds	r3, #2
 800a82c:	52e2      	strh	r2, [r4, r3]
    while(huart->TxXferCount > 0U)
 800a82e:	e00a      	b.n	800a846 <HAL_UART_Transmit+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a830:	6903      	ldr	r3, [r0, #16]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1e7      	bne.n	800a806 <HAL_UART_Transmit+0x2a>
      if((((uint32_t)pData)&1) != 0)
 800a836:	07cb      	lsls	r3, r1, #31
 800a838:	d5e5      	bpl.n	800a806 <HAL_UART_Transmit+0x2a>
        return  HAL_ERROR;
 800a83a:	2001      	movs	r0, #1
 800a83c:	e035      	b.n	800a8aa <HAL_UART_Transmit+0xce>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800a83e:	782a      	ldrb	r2, [r5, #0]
 800a840:	6823      	ldr	r3, [r4, #0]
 800a842:	629a      	str	r2, [r3, #40]	; 0x28
 800a844:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 800a846:	2352      	movs	r3, #82	; 0x52
 800a848:	5ae2      	ldrh	r2, [r4, r3]
 800a84a:	b292      	uxth	r2, r2
 800a84c:	2a00      	cmp	r2, #0
 800a84e:	d01c      	beq.n	800a88a <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 800a850:	2352      	movs	r3, #82	; 0x52
 800a852:	5ae2      	ldrh	r2, [r4, r3]
 800a854:	3a01      	subs	r2, #1
 800a856:	b292      	uxth	r2, r2
 800a858:	52e2      	strh	r2, [r4, r3]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a85a:	9600      	str	r6, [sp, #0]
 800a85c:	003b      	movs	r3, r7
 800a85e:	2200      	movs	r2, #0
 800a860:	2180      	movs	r1, #128	; 0x80
 800a862:	0020      	movs	r0, r4
 800a864:	f7ff ff80 	bl	800a768 <UART_WaitOnFlagUntilTimeout>
 800a868:	2800      	cmp	r0, #0
 800a86a:	d128      	bne.n	800a8be <HAL_UART_Transmit+0xe2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a86c:	2380      	movs	r3, #128	; 0x80
 800a86e:	015b      	lsls	r3, r3, #5
 800a870:	68a2      	ldr	r2, [r4, #8]
 800a872:	429a      	cmp	r2, r3
 800a874:	d1e3      	bne.n	800a83e <HAL_UART_Transmit+0x62>
 800a876:	6923      	ldr	r3, [r4, #16]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d1e0      	bne.n	800a83e <HAL_UART_Transmit+0x62>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800a87c:	882b      	ldrh	r3, [r5, #0]
 800a87e:	6822      	ldr	r2, [r4, #0]
 800a880:	05db      	lsls	r3, r3, #23
 800a882:	0ddb      	lsrs	r3, r3, #23
 800a884:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2U;
 800a886:	3502      	adds	r5, #2
 800a888:	e7dd      	b.n	800a846 <HAL_UART_Transmit+0x6a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a88a:	9600      	str	r6, [sp, #0]
 800a88c:	003b      	movs	r3, r7
 800a88e:	2140      	movs	r1, #64	; 0x40
 800a890:	0020      	movs	r0, r4
 800a892:	f7ff ff69 	bl	800a768 <UART_WaitOnFlagUntilTimeout>
 800a896:	2800      	cmp	r0, #0
 800a898:	d113      	bne.n	800a8c2 <HAL_UART_Transmit+0xe6>
    huart->gState = HAL_UART_STATE_READY;
 800a89a:	2369      	movs	r3, #105	; 0x69
 800a89c:	2220      	movs	r2, #32
 800a89e:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 800a8a6:	e000      	b.n	800a8aa <HAL_UART_Transmit+0xce>
    return HAL_BUSY;
 800a8a8:	2002      	movs	r0, #2
}
 800a8aa:	b002      	add	sp, #8
 800a8ac:	bc04      	pop	{r2}
 800a8ae:	4690      	mov	r8, r2
 800a8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800a8b2:	2001      	movs	r0, #1
 800a8b4:	e7f9      	b.n	800a8aa <HAL_UART_Transmit+0xce>
 800a8b6:	2001      	movs	r0, #1
 800a8b8:	e7f7      	b.n	800a8aa <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 800a8ba:	2002      	movs	r0, #2
 800a8bc:	e7f5      	b.n	800a8aa <HAL_UART_Transmit+0xce>
        return HAL_TIMEOUT;
 800a8be:	2003      	movs	r0, #3
 800a8c0:	e7f3      	b.n	800a8aa <HAL_UART_Transmit+0xce>
      return HAL_TIMEOUT;
 800a8c2:	2003      	movs	r0, #3
 800a8c4:	e7f1      	b.n	800a8aa <HAL_UART_Transmit+0xce>
	...

0800a8c8 <UART_CheckIdleState>:
{
 800a8c8:	b530      	push	{r4, r5, lr}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800a8d2:	f000 fc7d 	bl	800b1d0 <HAL_GetTick>
 800a8d6:	0005      	movs	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	071b      	lsls	r3, r3, #28
 800a8de:	d40e      	bmi.n	800a8fe <UART_CheckIdleState+0x36>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8e0:	6823      	ldr	r3, [r4, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	075b      	lsls	r3, r3, #29
 800a8e6:	d417      	bmi.n	800a918 <UART_CheckIdleState+0x50>
  huart->gState  = HAL_UART_STATE_READY;
 800a8e8:	2320      	movs	r3, #32
 800a8ea:	2269      	movs	r2, #105	; 0x69
 800a8ec:	54a3      	strb	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a8ee:	3201      	adds	r2, #1
 800a8f0:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(huart);
 800a8f2:	3348      	adds	r3, #72	; 0x48
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800a8f8:	2000      	movs	r0, #0
}
 800a8fa:	b003      	add	sp, #12
 800a8fc:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8fe:	2180      	movs	r1, #128	; 0x80
 800a900:	4b0c      	ldr	r3, [pc, #48]	; (800a934 <UART_CheckIdleState+0x6c>)
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	0003      	movs	r3, r0
 800a906:	2200      	movs	r2, #0
 800a908:	0389      	lsls	r1, r1, #14
 800a90a:	0020      	movs	r0, r4
 800a90c:	f7ff ff2c 	bl	800a768 <UART_WaitOnFlagUntilTimeout>
 800a910:	2800      	cmp	r0, #0
 800a912:	d0e5      	beq.n	800a8e0 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800a914:	2003      	movs	r0, #3
 800a916:	e7f0      	b.n	800a8fa <UART_CheckIdleState+0x32>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a918:	2180      	movs	r1, #128	; 0x80
 800a91a:	4b06      	ldr	r3, [pc, #24]	; (800a934 <UART_CheckIdleState+0x6c>)
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	002b      	movs	r3, r5
 800a920:	2200      	movs	r2, #0
 800a922:	03c9      	lsls	r1, r1, #15
 800a924:	0020      	movs	r0, r4
 800a926:	f7ff ff1f 	bl	800a768 <UART_WaitOnFlagUntilTimeout>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	d0dc      	beq.n	800a8e8 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 800a92e:	2003      	movs	r0, #3
 800a930:	e7e3      	b.n	800a8fa <UART_CheckIdleState+0x32>
 800a932:	46c0      	nop			; (mov r8, r8)
 800a934:	01ffffff 	.word	0x01ffffff

0800a938 <HAL_UART_Init>:
{
 800a938:	b510      	push	{r4, lr}
 800a93a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 800a93c:	d030      	beq.n	800a9a0 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 800a93e:	2369      	movs	r3, #105	; 0x69
 800a940:	5cc3      	ldrb	r3, [r0, r3]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d022      	beq.n	800a98c <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 800a946:	2369      	movs	r3, #105	; 0x69
 800a948:	2224      	movs	r2, #36	; 0x24
 800a94a:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 800a94c:	6822      	ldr	r2, [r4, #0]
 800a94e:	6813      	ldr	r3, [r2, #0]
 800a950:	2101      	movs	r1, #1
 800a952:	438b      	bics	r3, r1
 800a954:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d11d      	bne.n	800a998 <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a95c:	0020      	movs	r0, r4
 800a95e:	f7ff fce1 	bl	800a324 <UART_SetConfig>
 800a962:	2801      	cmp	r0, #1
 800a964:	d011      	beq.n	800a98a <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a966:	6822      	ldr	r2, [r4, #0]
 800a968:	6853      	ldr	r3, [r2, #4]
 800a96a:	490e      	ldr	r1, [pc, #56]	; (800a9a4 <HAL_UART_Init+0x6c>)
 800a96c:	400b      	ands	r3, r1
 800a96e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a970:	6822      	ldr	r2, [r4, #0]
 800a972:	6893      	ldr	r3, [r2, #8]
 800a974:	212a      	movs	r1, #42	; 0x2a
 800a976:	438b      	bics	r3, r1
 800a978:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800a97a:	6822      	ldr	r2, [r4, #0]
 800a97c:	6813      	ldr	r3, [r2, #0]
 800a97e:	3929      	subs	r1, #41	; 0x29
 800a980:	430b      	orrs	r3, r1
 800a982:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800a984:	0020      	movs	r0, r4
 800a986:	f7ff ff9f 	bl	800a8c8 <UART_CheckIdleState>
}
 800a98a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800a98c:	3368      	adds	r3, #104	; 0x68
 800a98e:	2200      	movs	r2, #0
 800a990:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 800a992:	f7ff fca7 	bl	800a2e4 <HAL_UART_MspInit>
 800a996:	e7d6      	b.n	800a946 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 800a998:	0020      	movs	r0, r4
 800a99a:	f7ff fe75 	bl	800a688 <UART_AdvFeatureConfig>
 800a99e:	e7dd      	b.n	800a95c <HAL_UART_Init+0x24>
    return HAL_ERROR;
 800a9a0:	2001      	movs	r0, #1
 800a9a2:	e7f2      	b.n	800a98a <HAL_UART_Init+0x52>
 800a9a4:	ffffb7ff 	.word	0xffffb7ff

0800a9a8 <start_atomic>:

static volatile uint8_t nests = 0;

void start_atomic()
{  
  if(nests == 0)
 800a9a8:	4b05      	ldr	r3, [pc, #20]	; (800a9c0 <start_atomic+0x18>)
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d100      	bne.n	800a9b2 <start_atomic+0xa>
  __ASM volatile ("cpsid i" : : : "memory");
 800a9b0:	b672      	cpsid	i
    __disable_irq();
  ++nests;
 800a9b2:	4a03      	ldr	r2, [pc, #12]	; (800a9c0 <start_atomic+0x18>)
 800a9b4:	7813      	ldrb	r3, [r2, #0]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	7013      	strb	r3, [r2, #0]
}
 800a9bc:	4770      	bx	lr
 800a9be:	46c0      	nop			; (mov r8, r8)
 800a9c0:	20002e40 	.word	0x20002e40

0800a9c4 <end_atomic>:

void end_atomic()
{
  if(nests == 0)
 800a9c4:	4b06      	ldr	r3, [pc, #24]	; (800a9e0 <end_atomic+0x1c>)
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d008      	beq.n	800a9de <end_atomic+0x1a>
    return;
  --nests;
 800a9cc:	4a04      	ldr	r2, [pc, #16]	; (800a9e0 <end_atomic+0x1c>)
 800a9ce:	7813      	ldrb	r3, [r2, #0]
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	7013      	strb	r3, [r2, #0]
  if(nests == 0)
 800a9d6:	7813      	ldrb	r3, [r2, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d100      	bne.n	800a9de <end_atomic+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 800a9dc:	b662      	cpsie	i
    __enable_irq();
}
 800a9de:	4770      	bx	lr
 800a9e0:	20002e40 	.word	0x20002e40

0800a9e4 <in_atomic>:

_Bool in_atomic()
{
  return (nests > 0);
 800a9e4:	4b02      	ldr	r3, [pc, #8]	; (800a9f0 <in_atomic+0xc>)
 800a9e6:	7818      	ldrb	r0, [r3, #0]
 800a9e8:	1e43      	subs	r3, r0, #1
 800a9ea:	4198      	sbcs	r0, r3
 800a9ec:	b2c0      	uxtb	r0, r0
}
 800a9ee:	4770      	bx	lr
 800a9f0:	20002e40 	.word	0x20002e40

0800a9f4 <gpio_int_callback>:
{
  return (HAL_GPIO_ReadPin(PORT_BASE(pin_id), 1 << GPIO_PIN(pin_id)) == GPIO_PIN_SET);
}

static void gpio_int_callback(uint8_t pin)
{
 800a9f4:	b510      	push	{r4, lr}
  assert(interrupts[pin].isr_ctx.cb != NULL);
 800a9f6:	0043      	lsls	r3, r0, #1
 800a9f8:	181b      	adds	r3, r3, r0
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	4a08      	ldr	r2, [pc, #32]	; (800aa20 <gpio_int_callback+0x2c>)
 800a9fe:	589a      	ldr	r2, [r3, r2]
 800aa00:	2a00      	cmp	r2, #0
 800aa02:	d007      	beq.n	800aa14 <gpio_int_callback+0x20>
  // We could enable the clocks to read in the current GPIO level but most drivers and apps do not need to know this or can determine this based on state.
  // If the upper layer needs to know it can read the GPIO level, but not in the interrupt context (the callback). Scheduling a task in the callback and reading the pin
  // in this taks in thread context ensures that the clocks are active and the actual current state (instead of the last latched) is read.
  // For this reason we pass 0 to the event_mask param of the callback.
  // TODO when only one interrupt edge is configured we _can_ reliably determine the edge so this can be improved
  interrupts[pin].isr_ctx.cb(interrupts[pin].isr_ctx.arg);
 800aa04:	0043      	lsls	r3, r0, #1
 800aa06:	1818      	adds	r0, r3, r0
 800aa08:	0080      	lsls	r0, r0, #2
 800aa0a:	4b05      	ldr	r3, [pc, #20]	; (800aa20 <gpio_int_callback+0x2c>)
 800aa0c:	1818      	adds	r0, r3, r0
 800aa0e:	6840      	ldr	r0, [r0, #4]
 800aa10:	4790      	blx	r2
}
 800aa12:	bd10      	pop	{r4, pc}
  assert(interrupts[pin].isr_ctx.cb != NULL);
 800aa14:	4b03      	ldr	r3, [pc, #12]	; (800aa24 <gpio_int_callback+0x30>)
 800aa16:	4a04      	ldr	r2, [pc, #16]	; (800aa28 <gpio_int_callback+0x34>)
 800aa18:	21d7      	movs	r1, #215	; 0xd7
 800aa1a:	4804      	ldr	r0, [pc, #16]	; (800aa2c <gpio_int_callback+0x38>)
 800aa1c:	f7fd fdf0 	bl	8008600 <__assert_func>
 800aa20:	20002e44 	.word	0x20002e44
 800aa24:	080197e4 	.word	0x080197e4
 800aa28:	080198dc 	.word	0x080198dc
 800aa2c:	08019808 	.word	0x08019808

0800aa30 <__gpio_init>:
{
 800aa30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa32:	46d6      	mov	lr, sl
 800aa34:	464f      	mov	r7, r9
 800aa36:	4646      	mov	r6, r8
 800aa38:	b5c0      	push	{r6, r7, lr}
 800aa3a:	b08c      	sub	sp, #48	; 0x30
  for(int i = 0; i < 16; i++)
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	2b0f      	cmp	r3, #15
 800aa40:	dc0b      	bgt.n	800aa5a <__gpio_init+0x2a>
    interrupts[i].isr_ctx.cb = 0x0;
 800aa42:	4a43      	ldr	r2, [pc, #268]	; (800ab50 <__gpio_init+0x120>)
 800aa44:	0059      	lsls	r1, r3, #1
 800aa46:	18c8      	adds	r0, r1, r3
 800aa48:	0084      	lsls	r4, r0, #2
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	50a0      	str	r0, [r4, r2]
    interrupts[i].isr_ctx.arg = NULL;
 800aa4e:	1912      	adds	r2, r2, r4
 800aa50:	6050      	str	r0, [r2, #4]
    interrupts[i].interrupt_port = 0xFF; //signal that a port has not yet been chosen
 800aa52:	21ff      	movs	r1, #255	; 0xff
 800aa54:	6091      	str	r1, [r2, #8]
  for(int i = 0; i < 16; i++)
 800aa56:	3301      	adds	r3, #1
 800aa58:	e7f1      	b.n	800aa3e <__gpio_init+0xe>
  for(int i = 0; i < 6; i++)
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	2b05      	cmp	r3, #5
 800aa5e:	dc01      	bgt.n	800aa64 <__gpio_init+0x34>
 800aa60:	3301      	adds	r3, #1
 800aa62:	e7fb      	b.n	800aa5c <__gpio_init+0x2c>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa64:	4c3b      	ldr	r4, [pc, #236]	; (800ab54 <__gpio_init+0x124>)
 800aa66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aa68:	2201      	movs	r2, #1
 800aa6a:	4692      	mov	sl, r2
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aa72:	4013      	ands	r3, r2
 800aa74:	9301      	str	r3, [sp, #4]
 800aa76:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aa7a:	3201      	adds	r2, #1
 800aa7c:	4691      	mov	r9, r2
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aa84:	4013      	ands	r3, r2
 800aa86:	9302      	str	r3, [sp, #8]
 800aa88:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aa8c:	3202      	adds	r2, #2
 800aa8e:	4690      	mov	r8, r2
 800aa90:	4313      	orrs	r3, r2
 800aa92:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aa96:	4013      	ands	r3, r2
 800aa98:	9303      	str	r3, [sp, #12]
 800aa9a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800aa9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aa9e:	2708      	movs	r7, #8
 800aaa0:	433b      	orrs	r3, r7
 800aaa2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aaa4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aaa6:	403b      	ands	r3, r7
 800aaa8:	9304      	str	r3, [sp, #16]
 800aaaa:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800aaac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aaae:	2610      	movs	r6, #16
 800aab0:	4333      	orrs	r3, r6
 800aab2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aab4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aab6:	4033      	ands	r3, r6
 800aab8:	9305      	str	r3, [sp, #20]
 800aaba:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800aabc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aabe:	2580      	movs	r5, #128	; 0x80
 800aac0:	432b      	orrs	r3, r5
 800aac2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aac4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aac6:	402b      	ands	r3, r5
 800aac8:	9306      	str	r3, [sp, #24]
 800aaca:	9b06      	ldr	r3, [sp, #24]
  GPIO_InitTypeDef GPIO_InitStruct= { 0 };
 800aacc:	3204      	adds	r2, #4
 800aace:	2100      	movs	r1, #0
 800aad0:	a80a      	add	r0, sp, #40	; 0x28
 800aad2:	f00a f9d1 	bl	8014e78 <memset>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800aad6:	2303      	movs	r3, #3
 800aad8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aada:	2300      	movs	r3, #0
 800aadc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = porta_pins;
 800aade:	4b1e      	ldr	r3, [pc, #120]	; (800ab58 <__gpio_init+0x128>)
 800aae0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aae2:	20a0      	movs	r0, #160	; 0xa0
 800aae4:	a907      	add	r1, sp, #28
 800aae6:	05c0      	lsls	r0, r0, #23
 800aae8:	f7fd febc 	bl	8008864 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800aaec:	4b1b      	ldr	r3, [pc, #108]	; (800ab5c <__gpio_init+0x12c>)
 800aaee:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aaf0:	a907      	add	r1, sp, #28
 800aaf2:	481b      	ldr	r0, [pc, #108]	; (800ab60 <__gpio_init+0x130>)
 800aaf4:	f7fd feb6 	bl	8008864 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aaf8:	a907      	add	r1, sp, #28
 800aafa:	481a      	ldr	r0, [pc, #104]	; (800ab64 <__gpio_init+0x134>)
 800aafc:	f7fd feb2 	bl	8008864 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ab00:	a907      	add	r1, sp, #28
 800ab02:	4819      	ldr	r0, [pc, #100]	; (800ab68 <__gpio_init+0x138>)
 800ab04:	f7fd feae 	bl	8008864 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ab08:	a907      	add	r1, sp, #28
 800ab0a:	4818      	ldr	r0, [pc, #96]	; (800ab6c <__gpio_init+0x13c>)
 800ab0c:	f7fd feaa 	bl	8008864 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ab10:	a907      	add	r1, sp, #28
 800ab12:	4817      	ldr	r0, [pc, #92]	; (800ab70 <__gpio_init+0x140>)
 800ab14:	f7fd fea6 	bl	8008864 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE();
 800ab18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ab1a:	4652      	mov	r2, sl
 800ab1c:	4393      	bics	r3, r2
 800ab1e:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800ab20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ab22:	464a      	mov	r2, r9
 800ab24:	4393      	bics	r3, r2
 800ab26:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 800ab28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ab2a:	4642      	mov	r2, r8
 800ab2c:	4393      	bics	r3, r2
 800ab2e:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOD_CLK_DISABLE();
 800ab30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ab32:	43bb      	bics	r3, r7
 800ab34:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOE_CLK_DISABLE();
 800ab36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ab38:	43b3      	bics	r3, r6
 800ab3a:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800ab3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ab3e:	43ab      	bics	r3, r5
 800ab40:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800ab42:	b00c      	add	sp, #48	; 0x30
 800ab44:	bc1c      	pop	{r2, r3, r4}
 800ab46:	4690      	mov	r8, r2
 800ab48:	4699      	mov	r9, r3
 800ab4a:	46a2      	mov	sl, r4
 800ab4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab4e:	46c0      	nop			; (mov r8, r8)
 800ab50:	20002e44 	.word	0x20002e44
 800ab54:	40021000 	.word	0x40021000
 800ab58:	00009fff 	.word	0x00009fff
 800ab5c:	0000ffff 	.word	0x0000ffff
 800ab60:	50000400 	.word	0x50000400
 800ab64:	50000800 	.word	0x50000800
 800ab68:	50000c00 	.word	0x50000c00
 800ab6c:	50001000 	.word	0x50001000
 800ab70:	50001c00 	.word	0x50001c00

0800ab74 <hw_gpio_set>:
{
 800ab74:	b510      	push	{r4, lr}
 800ab76:	0002      	movs	r2, r0
  HAL_GPIO_WritePin(PORT_BASE(pin_id), 1 << GPIO_PIN(pin_id), GPIO_PIN_SET);
 800ab78:	230f      	movs	r3, #15
 800ab7a:	4398      	bics	r0, r3
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	2101      	movs	r1, #1
 800ab80:	4099      	lsls	r1, r3
 800ab82:	b289      	uxth	r1, r1
 800ab84:	2201      	movs	r2, #1
 800ab86:	f7fd ff42 	bl	8008a0e <HAL_GPIO_WritePin>
}
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	bd10      	pop	{r4, pc}

0800ab8e <hw_gpio_clr>:
{
 800ab8e:	b510      	push	{r4, lr}
 800ab90:	0002      	movs	r2, r0
  HAL_GPIO_WritePin(PORT_BASE(pin_id), 1 << GPIO_PIN(pin_id), GPIO_PIN_RESET);
 800ab92:	230f      	movs	r3, #15
 800ab94:	4398      	bics	r0, r3
 800ab96:	4013      	ands	r3, r2
 800ab98:	2101      	movs	r1, #1
 800ab9a:	4099      	lsls	r1, r3
 800ab9c:	b289      	uxth	r1, r1
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f7fd ff35 	bl	8008a0e <HAL_GPIO_WritePin>
}
 800aba4:	2000      	movs	r0, #0
 800aba6:	bd10      	pop	{r4, pc}

0800aba8 <hw_gpio_toggle>:
{
 800aba8:	b510      	push	{r4, lr}
 800abaa:	0002      	movs	r2, r0
  HAL_GPIO_TogglePin(PORT_BASE(pin_id), 1 << GPIO_PIN(pin_id));
 800abac:	230f      	movs	r3, #15
 800abae:	4398      	bics	r0, r3
 800abb0:	4013      	ands	r3, r2
 800abb2:	2101      	movs	r1, #1
 800abb4:	4099      	lsls	r1, r3
 800abb6:	b289      	uxth	r1, r1
 800abb8:	f7fd ff2f 	bl	8008a1a <HAL_GPIO_TogglePin>
}
 800abbc:	2000      	movs	r0, #0
 800abbe:	bd10      	pop	{r4, pc}

0800abc0 <hw_gpio_get_in>:
{
 800abc0:	b510      	push	{r4, lr}
 800abc2:	0002      	movs	r2, r0
  return (HAL_GPIO_ReadPin(PORT_BASE(pin_id), 1 << GPIO_PIN(pin_id)) == GPIO_PIN_SET);
 800abc4:	230f      	movs	r3, #15
 800abc6:	4398      	bics	r0, r3
 800abc8:	4013      	ands	r3, r2
 800abca:	2101      	movs	r1, #1
 800abcc:	4099      	lsls	r1, r3
 800abce:	b289      	uxth	r1, r1
 800abd0:	f7fd ff16 	bl	8008a00 <HAL_GPIO_ReadPin>
 800abd4:	3801      	subs	r0, #1
 800abd6:	4243      	negs	r3, r0
 800abd8:	4158      	adcs	r0, r3
 800abda:	b2c0      	uxtb	r0, r0
}
 800abdc:	bd10      	pop	{r4, pc}
	...

0800abe0 <hw_gpio_set_edge_interrupt>:

__LINK_C error_t hw_gpio_set_edge_interrupt(pin_id_t pin_id, uint8_t edge)
{
 800abe0:	b510      	push	{r4, lr}
  uint32_t exti_line = 1 << GPIO_PIN(pin_id);
 800abe2:	230f      	movs	r3, #15
 800abe4:	4018      	ands	r0, r3
 800abe6:	3b0e      	subs	r3, #14
 800abe8:	4083      	lsls	r3, r0
  switch(edge)
 800abea:	2902      	cmp	r1, #2
 800abec:	d012      	beq.n	800ac14 <hw_gpio_set_edge_interrupt+0x34>
 800abee:	2903      	cmp	r1, #3
 800abf0:	d018      	beq.n	800ac24 <hw_gpio_set_edge_interrupt+0x44>
 800abf2:	2901      	cmp	r1, #1
 800abf4:	d005      	beq.n	800ac02 <hw_gpio_set_edge_interrupt+0x22>
    case (GPIO_RISING_EDGE | GPIO_FALLING_EDGE):
      LL_EXTI_EnableRisingTrig_0_31(exti_line);
      LL_EXTI_EnableFallingTrig_0_31(exti_line);
      break;
    default:
      assert(false);
 800abf6:	4b0f      	ldr	r3, [pc, #60]	; (800ac34 <hw_gpio_set_edge_interrupt+0x54>)
 800abf8:	4a0f      	ldr	r2, [pc, #60]	; (800ac38 <hw_gpio_set_edge_interrupt+0x58>)
 800abfa:	21f3      	movs	r1, #243	; 0xf3
 800abfc:	480f      	ldr	r0, [pc, #60]	; (800ac3c <hw_gpio_set_edge_interrupt+0x5c>)
 800abfe:	f7fd fcff 	bl	8008600 <__assert_func>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800ac02:	4a0f      	ldr	r2, [pc, #60]	; (800ac40 <hw_gpio_set_edge_interrupt+0x60>)
 800ac04:	68d1      	ldr	r1, [r2, #12]
 800ac06:	4399      	bics	r1, r3
 800ac08:	60d1      	str	r1, [r2, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800ac0a:	6891      	ldr	r1, [r2, #8]
 800ac0c:	430b      	orrs	r3, r1
 800ac0e:	6093      	str	r3, [r2, #8]
      break;
  }

  return SUCCESS;
}
 800ac10:	2000      	movs	r0, #0
 800ac12:	bd10      	pop	{r4, pc}
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800ac14:	4a0a      	ldr	r2, [pc, #40]	; (800ac40 <hw_gpio_set_edge_interrupt+0x60>)
 800ac16:	6891      	ldr	r1, [r2, #8]
 800ac18:	4399      	bics	r1, r3
 800ac1a:	6091      	str	r1, [r2, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800ac1c:	68d1      	ldr	r1, [r2, #12]
 800ac1e:	430b      	orrs	r3, r1
 800ac20:	60d3      	str	r3, [r2, #12]
}
 800ac22:	e7f5      	b.n	800ac10 <hw_gpio_set_edge_interrupt+0x30>
  SET_BIT(EXTI->RTSR, ExtiLine);
 800ac24:	4a06      	ldr	r2, [pc, #24]	; (800ac40 <hw_gpio_set_edge_interrupt+0x60>)
 800ac26:	6891      	ldr	r1, [r2, #8]
 800ac28:	4319      	orrs	r1, r3
 800ac2a:	6091      	str	r1, [r2, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800ac2c:	68d1      	ldr	r1, [r2, #12]
 800ac2e:	430b      	orrs	r3, r1
 800ac30:	60d3      	str	r3, [r2, #12]
}
 800ac32:	e7ed      	b.n	800ac10 <hw_gpio_set_edge_interrupt+0x30>
 800ac34:	080169c8 	.word	0x080169c8
 800ac38:	080198f0 	.word	0x080198f0
 800ac3c:	08019808 	.word	0x08019808
 800ac40:	40010400 	.word	0x40010400

0800ac44 <hw_gpio_configure_interrupt>:

__LINK_C error_t hw_gpio_configure_interrupt(pin_id_t pin_id, uint8_t event_mask, gpio_cb_t callback, void *arg)
{
 800ac44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac46:	b083      	sub	sp, #12
 800ac48:	0004      	movs	r4, r0
 800ac4a:	000f      	movs	r7, r1
 800ac4c:	0015      	movs	r5, r2
 800ac4e:	9301      	str	r3, [sp, #4]
  if (interrupts[GPIO_PIN(pin_id)].interrupt_port != 0xFF)
 800ac50:	260f      	movs	r6, #15
 800ac52:	4006      	ands	r6, r0
 800ac54:	0070      	lsls	r0, r6, #1
 800ac56:	1980      	adds	r0, r0, r6
 800ac58:	0080      	lsls	r0, r0, #2
 800ac5a:	4b4b      	ldr	r3, [pc, #300]	; (800ad88 <hw_gpio_configure_interrupt+0x144>)
 800ac5c:	1818      	adds	r0, r3, r0
 800ac5e:	6883      	ldr	r3, [r0, #8]
 800ac60:	2bff      	cmp	r3, #255	; 0xff
 800ac62:	d060      	beq.n	800ad26 <hw_gpio_configure_interrupt+0xe2>
  {
    if (interrupts[GPIO_PIN(pin_id)].interrupt_port != GPIO_PORT(pin_id))
 800ac64:	0aa1      	lsrs	r1, r4, #10
 800ac66:	220f      	movs	r2, #15
 800ac68:	400a      	ands	r2, r1
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d000      	beq.n	800ac70 <hw_gpio_configure_interrupt+0x2c>
 800ac6e:	e084      	b.n	800ad7a <hw_gpio_configure_interrupt+0x136>
      return EOFF;
  } else {
    interrupts[GPIO_PIN(pin_id)].interrupt_port = GPIO_PORT(pin_id);
  }

  if(callback == 0x0 || event_mask > (GPIO_RISING_EDGE | GPIO_FALLING_EDGE))
 800ac70:	2d00      	cmp	r5, #0
 800ac72:	d100      	bne.n	800ac76 <hw_gpio_configure_interrupt+0x32>
 800ac74:	e083      	b.n	800ad7e <hw_gpio_configure_interrupt+0x13a>
 800ac76:	2f03      	cmp	r7, #3
 800ac78:	d900      	bls.n	800ac7c <hw_gpio_configure_interrupt+0x38>
 800ac7a:	e082      	b.n	800ad82 <hw_gpio_configure_interrupt+0x13e>
    return EINVAL;

  error_t err;
  start_atomic();
 800ac7c:	f7ff fe94 	bl	800a9a8 <start_atomic>
  //so the check belongs in the critical section as well
  /*if(interrupts[GPIO_PIN(pin_id)].callback != 0x0 && interrupts[GPIO_PIN(pin_id)].callback != callback)
    err = EBUSY;
  else
  {*/
    interrupts[GPIO_PIN(pin_id)].isr_ctx.cb = callback;
 800ac80:	4a41      	ldr	r2, [pc, #260]	; (800ad88 <hw_gpio_configure_interrupt+0x144>)
 800ac82:	0073      	lsls	r3, r6, #1
 800ac84:	1999      	adds	r1, r3, r6
 800ac86:	0089      	lsls	r1, r1, #2
 800ac88:	508d      	str	r5, [r1, r2]
    interrupts[GPIO_PIN(pin_id)].isr_ctx.arg = arg;
 800ac8a:	1853      	adds	r3, r2, r1
 800ac8c:	9a01      	ldr	r2, [sp, #4]
 800ac8e:	605a      	str	r2, [r3, #4]

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac90:	4a3e      	ldr	r2, [pc, #248]	; (800ad8c <hw_gpio_configure_interrupt+0x148>)
 800ac92:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800ac94:	2101      	movs	r1, #1
 800ac96:	430b      	orrs	r3, r1
 800ac98:	6353      	str	r3, [r2, #52]	; 0x34

    // set external interrupt configuration
    uint32_t temp = SYSCFG->EXTICR[GPIO_PIN(pin_id) >> 2U];
 800ac9a:	08a3      	lsrs	r3, r4, #2
 800ac9c:	2203      	movs	r2, #3
 800ac9e:	4013      	ands	r3, r2
 800aca0:	1c99      	adds	r1, r3, #2
 800aca2:	0089      	lsls	r1, r1, #2
 800aca4:	483a      	ldr	r0, [pc, #232]	; (800ad90 <hw_gpio_configure_interrupt+0x14c>)
 800aca6:	5809      	ldr	r1, [r1, r0]
    CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (GPIO_PIN(pin_id) & 0x03U)));
 800aca8:	4022      	ands	r2, r4
 800acaa:	0092      	lsls	r2, r2, #2
 800acac:	250f      	movs	r5, #15
 800acae:	0028      	movs	r0, r5
 800acb0:	4090      	lsls	r0, r2
 800acb2:	4381      	bics	r1, r0
 800acb4:	0008      	movs	r0, r1
    SET_BIT(temp, (GPIO_PORT_MASK(pin_id)) << (4 * (GPIO_PIN(pin_id) & 0x03U)));
 800acb6:	0aa4      	lsrs	r4, r4, #10
 800acb8:	0029      	movs	r1, r5
 800acba:	4021      	ands	r1, r4
 800acbc:	4225      	tst	r5, r4
 800acbe:	d00a      	beq.n	800acd6 <hw_gpio_configure_interrupt+0x92>
 800acc0:	2901      	cmp	r1, #1
 800acc2:	d008      	beq.n	800acd6 <hw_gpio_configure_interrupt+0x92>
 800acc4:	2902      	cmp	r1, #2
 800acc6:	d006      	beq.n	800acd6 <hw_gpio_configure_interrupt+0x92>
 800acc8:	2903      	cmp	r1, #3
 800acca:	d004      	beq.n	800acd6 <hw_gpio_configure_interrupt+0x92>
 800accc:	2904      	cmp	r1, #4
 800acce:	d002      	beq.n	800acd6 <hw_gpio_configure_interrupt+0x92>
 800acd0:	2907      	cmp	r1, #7
 800acd2:	d032      	beq.n	800ad3a <hw_gpio_configure_interrupt+0xf6>
 800acd4:	2106      	movs	r1, #6
 800acd6:	4091      	lsls	r1, r2
 800acd8:	4301      	orrs	r1, r0
    SYSCFG->EXTICR[GPIO_PIN(pin_id) >> 2U] = temp;
 800acda:	3302      	adds	r3, #2
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4a2c      	ldr	r2, [pc, #176]	; (800ad90 <hw_gpio_configure_interrupt+0x14c>)
 800ace0:	5099      	str	r1, [r3, r2]


    uint32_t exti_line = 1 << GPIO_PIN(pin_id);
 800ace2:	2301      	movs	r3, #1
 800ace4:	40b3      	lsls	r3, r6
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800ace6:	4a2b      	ldr	r2, [pc, #172]	; (800ad94 <hw_gpio_configure_interrupt+0x150>)
 800ace8:	6851      	ldr	r1, [r2, #4]
 800acea:	43d8      	mvns	r0, r3
 800acec:	4399      	bics	r1, r3
 800acee:	6051      	str	r1, [r2, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800acf0:	6811      	ldr	r1, [r2, #0]
 800acf2:	4319      	orrs	r1, r3
 800acf4:	6011      	str	r1, [r2, #0]
    /* First Disable Event on provided Lines */
    LL_EXTI_DisableEvent_0_31(exti_line);
    /* Then Enable IT on provided Lines */
    LL_EXTI_EnableIT_0_31(exti_line);

    switch(event_mask)
 800acf6:	2f02      	cmp	r7, #2
 800acf8:	d02b      	beq.n	800ad52 <hw_gpio_configure_interrupt+0x10e>
 800acfa:	d820      	bhi.n	800ad3e <hw_gpio_configure_interrupt+0xfa>
 800acfc:	2f00      	cmp	r7, #0
 800acfe:	d030      	beq.n	800ad62 <hw_gpio_configure_interrupt+0x11e>
 800ad00:	2f01      	cmp	r7, #1
 800ad02:	d133      	bne.n	800ad6c <hw_gpio_configure_interrupt+0x128>
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800ad04:	4a23      	ldr	r2, [pc, #140]	; (800ad94 <hw_gpio_configure_interrupt+0x150>)
 800ad06:	68d1      	ldr	r1, [r2, #12]
 800ad08:	4008      	ands	r0, r1
 800ad0a:	60d0      	str	r0, [r2, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800ad0c:	6891      	ldr	r1, [r2, #8]
 800ad0e:	430b      	orrs	r3, r1
 800ad10:	6093      	str	r3, [r2, #8]
        break;
    }
    err = SUCCESS;
  //}

  __HAL_RCC_SYSCFG_CLK_DISABLE();
 800ad12:	4a1e      	ldr	r2, [pc, #120]	; (800ad8c <hw_gpio_configure_interrupt+0x148>)
 800ad14:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800ad16:	2101      	movs	r1, #1
 800ad18:	438b      	bics	r3, r1
 800ad1a:	6353      	str	r3, [r2, #52]	; 0x34

  end_atomic();
 800ad1c:	f7ff fe52 	bl	800a9c4 <end_atomic>
  return err;
 800ad20:	2000      	movs	r0, #0
}
 800ad22:	b003      	add	sp, #12
 800ad24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    interrupts[GPIO_PIN(pin_id)].interrupt_port = GPIO_PORT(pin_id);
 800ad26:	0aa3      	lsrs	r3, r4, #10
 800ad28:	210f      	movs	r1, #15
 800ad2a:	4019      	ands	r1, r3
 800ad2c:	0073      	lsls	r3, r6, #1
 800ad2e:	199b      	adds	r3, r3, r6
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4a15      	ldr	r2, [pc, #84]	; (800ad88 <hw_gpio_configure_interrupt+0x144>)
 800ad34:	18d3      	adds	r3, r2, r3
 800ad36:	6099      	str	r1, [r3, #8]
 800ad38:	e79a      	b.n	800ac70 <hw_gpio_configure_interrupt+0x2c>
    SET_BIT(temp, (GPIO_PORT_MASK(pin_id)) << (4 * (GPIO_PIN(pin_id) & 0x03U)));
 800ad3a:	3902      	subs	r1, #2
 800ad3c:	e7cb      	b.n	800acd6 <hw_gpio_configure_interrupt+0x92>
    switch(event_mask)
 800ad3e:	2f03      	cmp	r7, #3
 800ad40:	d114      	bne.n	800ad6c <hw_gpio_configure_interrupt+0x128>
 800ad42:	4a14      	ldr	r2, [pc, #80]	; (800ad94 <hw_gpio_configure_interrupt+0x150>)
 800ad44:	6891      	ldr	r1, [r2, #8]
 800ad46:	4319      	orrs	r1, r3
 800ad48:	6091      	str	r1, [r2, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800ad4a:	68d1      	ldr	r1, [r2, #12]
 800ad4c:	430b      	orrs	r3, r1
 800ad4e:	60d3      	str	r3, [r2, #12]
}
 800ad50:	e7df      	b.n	800ad12 <hw_gpio_configure_interrupt+0xce>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800ad52:	4a10      	ldr	r2, [pc, #64]	; (800ad94 <hw_gpio_configure_interrupt+0x150>)
 800ad54:	6891      	ldr	r1, [r2, #8]
 800ad56:	4008      	ands	r0, r1
 800ad58:	6090      	str	r0, [r2, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800ad5a:	68d1      	ldr	r1, [r2, #12]
 800ad5c:	430b      	orrs	r3, r1
 800ad5e:	60d3      	str	r3, [r2, #12]
}
 800ad60:	e7d7      	b.n	800ad12 <hw_gpio_configure_interrupt+0xce>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800ad62:	4a0c      	ldr	r2, [pc, #48]	; (800ad94 <hw_gpio_configure_interrupt+0x150>)
 800ad64:	6813      	ldr	r3, [r2, #0]
 800ad66:	4018      	ands	r0, r3
 800ad68:	6010      	str	r0, [r2, #0]
}
 800ad6a:	e7d2      	b.n	800ad12 <hw_gpio_configure_interrupt+0xce>
        assert(false);
 800ad6c:	2134      	movs	r1, #52	; 0x34
 800ad6e:	4b0a      	ldr	r3, [pc, #40]	; (800ad98 <hw_gpio_configure_interrupt+0x154>)
 800ad70:	4a0a      	ldr	r2, [pc, #40]	; (800ad9c <hw_gpio_configure_interrupt+0x158>)
 800ad72:	31ff      	adds	r1, #255	; 0xff
 800ad74:	480a      	ldr	r0, [pc, #40]	; (800ada0 <hw_gpio_configure_interrupt+0x15c>)
 800ad76:	f7fd fc43 	bl	8008600 <__assert_func>
      return EOFF;
 800ad7a:	480a      	ldr	r0, [pc, #40]	; (800ada4 <hw_gpio_configure_interrupt+0x160>)
 800ad7c:	e7d1      	b.n	800ad22 <hw_gpio_configure_interrupt+0xde>
    return EINVAL;
 800ad7e:	2016      	movs	r0, #22
 800ad80:	e7cf      	b.n	800ad22 <hw_gpio_configure_interrupt+0xde>
 800ad82:	2016      	movs	r0, #22
 800ad84:	e7cd      	b.n	800ad22 <hw_gpio_configure_interrupt+0xde>
 800ad86:	46c0      	nop			; (mov r8, r8)
 800ad88:	20002e44 	.word	0x20002e44
 800ad8c:	40021000 	.word	0x40021000
 800ad90:	40010000 	.word	0x40010000
 800ad94:	40010400 	.word	0x40010400
 800ad98:	080169c8 	.word	0x080169c8
 800ad9c:	0801990c 	.word	0x0801990c
 800ada0:	08019808 	.word	0x08019808
 800ada4:	0000138c 	.word	0x0000138c

0800ada8 <hw_gpio_enable_interrupt>:


__LINK_C error_t hw_gpio_enable_interrupt(pin_id_t pin_id)
{
 800ada8:	b510      	push	{r4, lr}
  __HAL_GPIO_EXTI_CLEAR_IT(1 << GPIO_PIN(pin_id));
 800adaa:	220f      	movs	r2, #15
 800adac:	4002      	ands	r2, r0
 800adae:	2301      	movs	r3, #1
 800adb0:	4093      	lsls	r3, r2
 800adb2:	4a19      	ldr	r2, [pc, #100]	; (800ae18 <hw_gpio_enable_interrupt+0x70>)
 800adb4:	6153      	str	r3, [r2, #20]
  SET_BIT(EXTI->IMR, ExtiLine);
 800adb6:	6811      	ldr	r1, [r2, #0]
 800adb8:	430b      	orrs	r3, r1
 800adba:	6013      	str	r3, [r2, #0]

  uint32_t exti_line = 1 << GPIO_PIN(pin_id);
  LL_EXTI_EnableIT_0_31(exti_line);

#if defined(STM32L0)
  if(GPIO_PIN(pin_id) <= 1) {
 800adbc:	230e      	movs	r3, #14
 800adbe:	4203      	tst	r3, r0
 800adc0:	d010      	beq.n	800ade4 <hw_gpio_enable_interrupt+0x3c>
    HAL_NVIC_SetPriority(EXTI0_1_IRQn, 2, 0); // TODO on boot
    HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
    return SUCCESS;
  } else if (GPIO_PIN(pin_id) > 1 && GPIO_PIN(pin_id) <= 3) {
 800adc2:	230c      	movs	r3, #12
 800adc4:	001a      	movs	r2, r3
 800adc6:	4002      	ands	r2, r0
 800adc8:	4203      	tst	r3, r0
 800adca:	d014      	beq.n	800adf6 <hw_gpio_enable_interrupt+0x4e>
    HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0); // TODO on boot
    HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
    return SUCCESS;
  } else if (GPIO_PIN(pin_id) > 3 && GPIO_PIN(pin_id) <= 15) {
 800adcc:	2a00      	cmp	r2, #0
 800adce:	d01b      	beq.n	800ae08 <hw_gpio_enable_interrupt+0x60>
    HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0); // TODO on boot
 800add0:	2200      	movs	r2, #0
 800add2:	2102      	movs	r1, #2
 800add4:	2007      	movs	r0, #7
 800add6:	f7fd fcc9 	bl	800876c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800adda:	2007      	movs	r0, #7
 800addc:	f7fd fcf6 	bl	80087cc <HAL_NVIC_EnableIRQ>
    return SUCCESS;
  } else {
    assert(false);
    return FAIL;
  }
}
 800ade0:	2000      	movs	r0, #0
 800ade2:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(EXTI0_1_IRQn, 2, 0); // TODO on boot
 800ade4:	2200      	movs	r2, #0
 800ade6:	2102      	movs	r1, #2
 800ade8:	2005      	movs	r0, #5
 800adea:	f7fd fcbf 	bl	800876c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800adee:	2005      	movs	r0, #5
 800adf0:	f7fd fcec 	bl	80087cc <HAL_NVIC_EnableIRQ>
    return SUCCESS;
 800adf4:	e7f4      	b.n	800ade0 <hw_gpio_enable_interrupt+0x38>
    HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0); // TODO on boot
 800adf6:	2200      	movs	r2, #0
 800adf8:	2102      	movs	r1, #2
 800adfa:	2006      	movs	r0, #6
 800adfc:	f7fd fcb6 	bl	800876c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800ae00:	2006      	movs	r0, #6
 800ae02:	f7fd fce3 	bl	80087cc <HAL_NVIC_EnableIRQ>
    return SUCCESS;
 800ae06:	e7eb      	b.n	800ade0 <hw_gpio_enable_interrupt+0x38>
    assert(false);
 800ae08:	2156      	movs	r1, #86	; 0x56
 800ae0a:	4b04      	ldr	r3, [pc, #16]	; (800ae1c <hw_gpio_enable_interrupt+0x74>)
 800ae0c:	4a04      	ldr	r2, [pc, #16]	; (800ae20 <hw_gpio_enable_interrupt+0x78>)
 800ae0e:	31ff      	adds	r1, #255	; 0xff
 800ae10:	4804      	ldr	r0, [pc, #16]	; (800ae24 <hw_gpio_enable_interrupt+0x7c>)
 800ae12:	f7fd fbf5 	bl	8008600 <__assert_func>
 800ae16:	46c0      	nop			; (mov r8, r8)
 800ae18:	40010400 	.word	0x40010400
 800ae1c:	080169c8 	.word	0x080169c8
 800ae20:	08019928 	.word	0x08019928
 800ae24:	08019808 	.word	0x08019808

0800ae28 <hw_gpio_disable_interrupt>:
    HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
    return SUCCESS;
  }
  */

	uint32_t exti_line = 1 << GPIO_PIN(pin_id);
 800ae28:	230f      	movs	r3, #15
 800ae2a:	4003      	ands	r3, r0
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	409a      	lsls	r2, r3
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800ae30:	4902      	ldr	r1, [pc, #8]	; (800ae3c <hw_gpio_disable_interrupt+0x14>)
 800ae32:	680b      	ldr	r3, [r1, #0]
 800ae34:	4393      	bics	r3, r2
 800ae36:	600b      	str	r3, [r1, #0]
	LL_EXTI_DisableIT_0_31(exti_line);

	return SUCCESS;
}
 800ae38:	2000      	movs	r0, #0
 800ae3a:	4770      	bx	lr
 800ae3c:	40010400 	.word	0x40010400

0800ae40 <hw_gpio_configure_pin_stm>:
{
 800ae40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae42:	46c6      	mov	lr, r8
 800ae44:	b500      	push	{lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	0006      	movs	r6, r0
 800ae4a:	000d      	movs	r5, r1
  RCC_GPIO_CLK_ENABLE((uint32_t)PORT_BASE(pin_id));
 800ae4c:	230f      	movs	r3, #15
 800ae4e:	0004      	movs	r4, r0
 800ae50:	439c      	bics	r4, r3
 800ae52:	4b56      	ldr	r3, [pc, #344]	; (800afac <hw_gpio_configure_pin_stm+0x16c>)
 800ae54:	429c      	cmp	r4, r3
 800ae56:	d078      	beq.n	800af4a <hw_gpio_configure_pin_stm+0x10a>
 800ae58:	d85d      	bhi.n	800af16 <hw_gpio_configure_pin_stm+0xd6>
 800ae5a:	4b55      	ldr	r3, [pc, #340]	; (800afb0 <hw_gpio_configure_pin_stm+0x170>)
 800ae5c:	429c      	cmp	r4, r3
 800ae5e:	d06a      	beq.n	800af36 <hw_gpio_configure_pin_stm+0xf6>
 800ae60:	4b54      	ldr	r3, [pc, #336]	; (800afb4 <hw_gpio_configure_pin_stm+0x174>)
 800ae62:	429c      	cmp	r4, r3
 800ae64:	d109      	bne.n	800ae7a <hw_gpio_configure_pin_stm+0x3a>
 800ae66:	4a54      	ldr	r2, [pc, #336]	; (800afb8 <hw_gpio_configure_pin_stm+0x178>)
 800ae68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ae6a:	2304      	movs	r3, #4
 800ae6c:	4319      	orrs	r1, r3
 800ae6e:	62d1      	str	r1, [r2, #44]	; 0x2c
 800ae70:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ae72:	4013      	ands	r3, r2
 800ae74:	9302      	str	r3, [sp, #8]
 800ae76:	9b02      	ldr	r3, [sp, #8]
 800ae78:	e00c      	b.n	800ae94 <hw_gpio_configure_pin_stm+0x54>
 800ae7a:	23a0      	movs	r3, #160	; 0xa0
 800ae7c:	05db      	lsls	r3, r3, #23
 800ae7e:	429c      	cmp	r4, r3
 800ae80:	d108      	bne.n	800ae94 <hw_gpio_configure_pin_stm+0x54>
 800ae82:	4a4d      	ldr	r2, [pc, #308]	; (800afb8 <hw_gpio_configure_pin_stm+0x178>)
 800ae84:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ae86:	2301      	movs	r3, #1
 800ae88:	4319      	orrs	r1, r3
 800ae8a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800ae8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ae8e:	4013      	ands	r3, r2
 800ae90:	9300      	str	r3, [sp, #0]
 800ae92:	9b00      	ldr	r3, [sp, #0]
  init_options->Pin = 1 << GPIO_PIN(pin_id);
 800ae94:	200f      	movs	r0, #15
 800ae96:	0007      	movs	r7, r0
 800ae98:	4037      	ands	r7, r6
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	40ba      	lsls	r2, r7
 800ae9e:	602a      	str	r2, [r5, #0]
  if(interrupts[GPIO_PIN(pin_id)].interrupt_port != GPIO_PORT(pin_id) && (init_options->Mode == GPIO_MODE_IT_RISING || init_options->Mode == GPIO_MODE_IT_FALLING || init_options->Mode == GPIO_MODE_IT_RISING_FALLING))
 800aea0:	007b      	lsls	r3, r7, #1
 800aea2:	19db      	adds	r3, r3, r7
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	4945      	ldr	r1, [pc, #276]	; (800afbc <hw_gpio_configure_pin_stm+0x17c>)
 800aea8:	18cb      	adds	r3, r1, r3
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	0ab1      	lsrs	r1, r6, #10
 800aeae:	4008      	ands	r0, r1
 800aeb0:	4680      	mov	r8, r0
 800aeb2:	4283      	cmp	r3, r0
 800aeb4:	d010      	beq.n	800aed8 <hw_gpio_configure_pin_stm+0x98>
 800aeb6:	6869      	ldr	r1, [r5, #4]
 800aeb8:	4841      	ldr	r0, [pc, #260]	; (800afc0 <hw_gpio_configure_pin_stm+0x180>)
 800aeba:	4281      	cmp	r1, r0
 800aebc:	d005      	beq.n	800aeca <hw_gpio_configure_pin_stm+0x8a>
 800aebe:	4841      	ldr	r0, [pc, #260]	; (800afc4 <hw_gpio_configure_pin_stm+0x184>)
 800aec0:	4281      	cmp	r1, r0
 800aec2:	d002      	beq.n	800aeca <hw_gpio_configure_pin_stm+0x8a>
 800aec4:	4840      	ldr	r0, [pc, #256]	; (800afc8 <hw_gpio_configure_pin_stm+0x188>)
 800aec6:	4281      	cmp	r1, r0
 800aec8:	d106      	bne.n	800aed8 <hw_gpio_configure_pin_stm+0x98>
  return (READ_BIT(EXTI->IMR, ExtiLine) == (ExtiLine));
 800aeca:	4940      	ldr	r1, [pc, #256]	; (800afcc <hw_gpio_configure_pin_stm+0x18c>)
 800aecc:	6809      	ldr	r1, [r1, #0]
 800aece:	4011      	ands	r1, r2
    assert(!LL_EXTI_IsEnabledIT_0_31(init_options->Pin));
 800aed0:	428a      	cmp	r2, r1
 800aed2:	d04e      	beq.n	800af72 <hw_gpio_configure_pin_stm+0x132>
    assert(interrupts[GPIO_PIN(pin_id)].interrupt_port == 0xFF);
 800aed4:	2bff      	cmp	r3, #255	; 0xff
 800aed6:	d152      	bne.n	800af7e <hw_gpio_configure_pin_stm+0x13e>
  start_atomic();
 800aed8:	f7ff fd66 	bl	800a9a8 <start_atomic>
  HAL_GPIO_Init(PORT_BASE(pin_id), init_options);
 800aedc:	0029      	movs	r1, r5
 800aede:	0020      	movs	r0, r4
 800aee0:	f7fd fcc0 	bl	8008864 <HAL_GPIO_Init>
  if  (init_options->Mode == GPIO_MODE_IT_RISING || init_options->Mode == GPIO_MODE_IT_FALLING || init_options->Mode == GPIO_MODE_IT_RISING_FALLING)
 800aee4:	686b      	ldr	r3, [r5, #4]
 800aee6:	4a36      	ldr	r2, [pc, #216]	; (800afc0 <hw_gpio_configure_pin_stm+0x180>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d04e      	beq.n	800af8a <hw_gpio_configure_pin_stm+0x14a>
 800aeec:	4a35      	ldr	r2, [pc, #212]	; (800afc4 <hw_gpio_configure_pin_stm+0x184>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d04b      	beq.n	800af8a <hw_gpio_configure_pin_stm+0x14a>
 800aef2:	4a35      	ldr	r2, [pc, #212]	; (800afc8 <hw_gpio_configure_pin_stm+0x188>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d048      	beq.n	800af8a <hw_gpio_configure_pin_stm+0x14a>
  else if(interrupts[GPIO_PIN(pin_id)].interrupt_port == GPIO_PORT(pin_id))
 800aef8:	007b      	lsls	r3, r7, #1
 800aefa:	19db      	adds	r3, r3, r7
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	4a2f      	ldr	r2, [pc, #188]	; (800afbc <hw_gpio_configure_pin_stm+0x17c>)
 800af00:	18d3      	adds	r3, r2, r3
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	4598      	cmp	r8, r3
 800af06:	d14a      	bne.n	800af9e <hw_gpio_configure_pin_stm+0x15e>
    interrupts[GPIO_PIN(pin_id)].interrupt_port = 0xFF;
 800af08:	007b      	lsls	r3, r7, #1
 800af0a:	19df      	adds	r7, r3, r7
 800af0c:	00bf      	lsls	r7, r7, #2
 800af0e:	19d7      	adds	r7, r2, r7
 800af10:	23ff      	movs	r3, #255	; 0xff
 800af12:	60bb      	str	r3, [r7, #8]
 800af14:	e043      	b.n	800af9e <hw_gpio_configure_pin_stm+0x15e>
  RCC_GPIO_CLK_ENABLE((uint32_t)PORT_BASE(pin_id));
 800af16:	4b2e      	ldr	r3, [pc, #184]	; (800afd0 <hw_gpio_configure_pin_stm+0x190>)
 800af18:	429c      	cmp	r4, r3
 800af1a:	d020      	beq.n	800af5e <hw_gpio_configure_pin_stm+0x11e>
 800af1c:	4b2d      	ldr	r3, [pc, #180]	; (800afd4 <hw_gpio_configure_pin_stm+0x194>)
 800af1e:	429c      	cmp	r4, r3
 800af20:	d1b8      	bne.n	800ae94 <hw_gpio_configure_pin_stm+0x54>
 800af22:	4a25      	ldr	r2, [pc, #148]	; (800afb8 <hw_gpio_configure_pin_stm+0x178>)
 800af24:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800af26:	2380      	movs	r3, #128	; 0x80
 800af28:	4319      	orrs	r1, r3
 800af2a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800af2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800af2e:	4013      	ands	r3, r2
 800af30:	9305      	str	r3, [sp, #20]
 800af32:	9b05      	ldr	r3, [sp, #20]
 800af34:	e7ae      	b.n	800ae94 <hw_gpio_configure_pin_stm+0x54>
 800af36:	4a20      	ldr	r2, [pc, #128]	; (800afb8 <hw_gpio_configure_pin_stm+0x178>)
 800af38:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800af3a:	2302      	movs	r3, #2
 800af3c:	4319      	orrs	r1, r3
 800af3e:	62d1      	str	r1, [r2, #44]	; 0x2c
 800af40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800af42:	4013      	ands	r3, r2
 800af44:	9301      	str	r3, [sp, #4]
 800af46:	9b01      	ldr	r3, [sp, #4]
 800af48:	e7a4      	b.n	800ae94 <hw_gpio_configure_pin_stm+0x54>
 800af4a:	4a1b      	ldr	r2, [pc, #108]	; (800afb8 <hw_gpio_configure_pin_stm+0x178>)
 800af4c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800af4e:	2308      	movs	r3, #8
 800af50:	4319      	orrs	r1, r3
 800af52:	62d1      	str	r1, [r2, #44]	; 0x2c
 800af54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800af56:	4013      	ands	r3, r2
 800af58:	9303      	str	r3, [sp, #12]
 800af5a:	9b03      	ldr	r3, [sp, #12]
 800af5c:	e79a      	b.n	800ae94 <hw_gpio_configure_pin_stm+0x54>
 800af5e:	4a16      	ldr	r2, [pc, #88]	; (800afb8 <hw_gpio_configure_pin_stm+0x178>)
 800af60:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800af62:	2310      	movs	r3, #16
 800af64:	4319      	orrs	r1, r3
 800af66:	62d1      	str	r1, [r2, #44]	; 0x2c
 800af68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800af6a:	4013      	ands	r3, r2
 800af6c:	9304      	str	r3, [sp, #16]
 800af6e:	9b04      	ldr	r3, [sp, #16]
 800af70:	e790      	b.n	800ae94 <hw_gpio_configure_pin_stm+0x54>
    assert(!LL_EXTI_IsEnabledIT_0_31(init_options->Pin));
 800af72:	4b19      	ldr	r3, [pc, #100]	; (800afd8 <hw_gpio_configure_pin_stm+0x198>)
 800af74:	4a19      	ldr	r2, [pc, #100]	; (800afdc <hw_gpio_configure_pin_stm+0x19c>)
 800af76:	217d      	movs	r1, #125	; 0x7d
 800af78:	4819      	ldr	r0, [pc, #100]	; (800afe0 <hw_gpio_configure_pin_stm+0x1a0>)
 800af7a:	f7fd fb41 	bl	8008600 <__assert_func>
    assert(interrupts[GPIO_PIN(pin_id)].interrupt_port == 0xFF);
 800af7e:	4b19      	ldr	r3, [pc, #100]	; (800afe4 <hw_gpio_configure_pin_stm+0x1a4>)
 800af80:	4a16      	ldr	r2, [pc, #88]	; (800afdc <hw_gpio_configure_pin_stm+0x19c>)
 800af82:	217e      	movs	r1, #126	; 0x7e
 800af84:	4816      	ldr	r0, [pc, #88]	; (800afe0 <hw_gpio_configure_pin_stm+0x1a0>)
 800af86:	f7fd fb3b 	bl	8008600 <__assert_func>
    interrupts[GPIO_PIN(pin_id)].interrupt_port = GPIO_PORT(pin_id);
 800af8a:	007b      	lsls	r3, r7, #1
 800af8c:	19df      	adds	r7, r3, r7
 800af8e:	00bf      	lsls	r7, r7, #2
 800af90:	4b0a      	ldr	r3, [pc, #40]	; (800afbc <hw_gpio_configure_pin_stm+0x17c>)
 800af92:	19df      	adds	r7, r3, r7
 800af94:	4643      	mov	r3, r8
 800af96:	60bb      	str	r3, [r7, #8]
    hw_gpio_disable_interrupt(pin_id);
 800af98:	0030      	movs	r0, r6
 800af9a:	f7ff ff45 	bl	800ae28 <hw_gpio_disable_interrupt>
  end_atomic();
 800af9e:	f7ff fd11 	bl	800a9c4 <end_atomic>
}
 800afa2:	2000      	movs	r0, #0
 800afa4:	b006      	add	sp, #24
 800afa6:	bc04      	pop	{r2}
 800afa8:	4690      	mov	r8, r2
 800afaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afac:	50000c00 	.word	0x50000c00
 800afb0:	50000400 	.word	0x50000400
 800afb4:	50000800 	.word	0x50000800
 800afb8:	40021000 	.word	0x40021000
 800afbc:	20002e44 	.word	0x20002e44
 800afc0:	10110000 	.word	0x10110000
 800afc4:	10210000 	.word	0x10210000
 800afc8:	10310000 	.word	0x10310000
 800afcc:	40010400 	.word	0x40010400
 800afd0:	50001000 	.word	0x50001000
 800afd4:	50001c00 	.word	0x50001c00
 800afd8:	0801985c 	.word	0x0801985c
 800afdc:	080198c0 	.word	0x080198c0
 800afe0:	08019808 	.word	0x08019808
 800afe4:	0801988c 	.word	0x0801988c

0800afe8 <hw_gpio_configure_pin>:
{
 800afe8:	b510      	push	{r4, lr}
 800afea:	b086      	sub	sp, #24
  GPIO_InitStruct.Mode = mode;
 800afec:	9202      	str	r2, [sp, #8]
  if(GPIO_InitStruct.Mode == GPIO_MODE_IT_RISING
 800afee:	4910      	ldr	r1, [pc, #64]	; (800b030 <hw_gpio_configure_pin+0x48>)
 800aff0:	428a      	cmp	r2, r1
 800aff2:	d013      	beq.n	800b01c <hw_gpio_configure_pin+0x34>
     || GPIO_InitStruct.Mode == GPIO_MODE_IT_FALLING
 800aff4:	490f      	ldr	r1, [pc, #60]	; (800b034 <hw_gpio_configure_pin+0x4c>)
 800aff6:	428a      	cmp	r2, r1
 800aff8:	d010      	beq.n	800b01c <hw_gpio_configure_pin+0x34>
     || GPIO_InitStruct.Mode == GPIO_MODE_IT_RISING_FALLING)
 800affa:	490f      	ldr	r1, [pc, #60]	; (800b038 <hw_gpio_configure_pin+0x50>)
 800affc:	428a      	cmp	r2, r1
 800affe:	d00d      	beq.n	800b01c <hw_gpio_configure_pin+0x34>
    if(out) {
 800b000:	2b00      	cmp	r3, #0
 800b002:	d012      	beq.n	800b02a <hw_gpio_configure_pin+0x42>
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b004:	2301      	movs	r3, #1
 800b006:	9303      	str	r3, [sp, #12]
      PORT_BASE(pin_id)->BSRR = 1 << GPIO_PIN(pin_id); // make sure pin level is high when configured (HAL_GPIO_Init() does not take this into account)
 800b008:	220f      	movs	r2, #15
 800b00a:	0011      	movs	r1, r2
 800b00c:	4001      	ands	r1, r0
 800b00e:	0004      	movs	r4, r0
 800b010:	4394      	bics	r4, r2
 800b012:	408b      	lsls	r3, r1
 800b014:	61a3      	str	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b016:	2300      	movs	r3, #0
 800b018:	9304      	str	r3, [sp, #16]
 800b01a:	e001      	b.n	800b020 <hw_gpio_configure_pin+0x38>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b01c:	2300      	movs	r3, #0
 800b01e:	9303      	str	r3, [sp, #12]
  return hw_gpio_configure_pin_stm(pin_id, &GPIO_InitStruct);
 800b020:	a901      	add	r1, sp, #4
 800b022:	f7ff ff0d 	bl	800ae40 <hw_gpio_configure_pin_stm>
}
 800b026:	b006      	add	sp, #24
 800b028:	bd10      	pop	{r4, pc}
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b02a:	2302      	movs	r3, #2
 800b02c:	9303      	str	r3, [sp, #12]
 800b02e:	e7f2      	b.n	800b016 <hw_gpio_configure_pin+0x2e>
 800b030:	10110000 	.word	0x10110000
 800b034:	10210000 	.word	0x10210000
 800b038:	10310000 	.word	0x10310000

0800b03c <EXTI_IRQHandler>:

void EXTI_IRQHandler()
{
 800b03c:	b510      	push	{r4, lr}
  uint32_t exti_interrrupts = EXTI->PR & EXTI->IMR;
 800b03e:	4b0c      	ldr	r3, [pc, #48]	; (800b070 <EXTI_IRQHandler+0x34>)
 800b040:	6959      	ldr	r1, [r3, #20]
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	400a      	ands	r2, r1
  for (uint8_t pin_nr = 0; pin_nr < EXTI_LINES_COUNT; pin_nr++)
 800b046:	2000      	movs	r0, #0
 800b048:	e001      	b.n	800b04e <EXTI_IRQHandler+0x12>
 800b04a:	3001      	adds	r0, #1
 800b04c:	b2c0      	uxtb	r0, r0
 800b04e:	280f      	cmp	r0, #15
 800b050:	d80d      	bhi.n	800b06e <EXTI_IRQHandler+0x32>
  {
    uint16_t pin = 1 << pin_nr;
 800b052:	2301      	movs	r3, #1
 800b054:	4083      	lsls	r3, r0
    if(pin & exti_interrrupts)
 800b056:	041b      	lsls	r3, r3, #16
 800b058:	0c1b      	lsrs	r3, r3, #16
 800b05a:	421a      	tst	r2, r3
 800b05c:	d0f5      	beq.n	800b04a <EXTI_IRQHandler+0xe>
    {
      if(__HAL_GPIO_EXTI_GET_IT(pin) != RESET)
 800b05e:	4904      	ldr	r1, [pc, #16]	; (800b070 <EXTI_IRQHandler+0x34>)
 800b060:	6949      	ldr	r1, [r1, #20]
 800b062:	4219      	tst	r1, r3
 800b064:	d0f1      	beq.n	800b04a <EXTI_IRQHandler+0xe>
      {
        __HAL_GPIO_EXTI_CLEAR_IT(pin);
 800b066:	4a02      	ldr	r2, [pc, #8]	; (800b070 <EXTI_IRQHandler+0x34>)
 800b068:	6153      	str	r3, [r2, #20]
        gpio_int_callback(pin_nr);
 800b06a:	f7ff fcc3 	bl	800a9f4 <gpio_int_callback>
        return;
      }
    }
  }
}
 800b06e:	bd10      	pop	{r4, pc}
 800b070:	40010400 	.word	0x40010400

0800b074 <init_clock>:
#include "platform_defs.h"

#define MAX_INIT_CLOCK_RETRY_TIMES 2

static HAL_StatusTypeDef init_clock(void)
{
 800b074:	b510      	push	{r4, lr}
 800b076:	b094      	sub	sp, #80	; 0x50
  HAL_StatusTypeDef ret = HAL_OK;
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b078:	2214      	movs	r2, #20
 800b07a:	2100      	movs	r1, #0
 800b07c:	a80f      	add	r0, sp, #60	; 0x3c
 800b07e:	f009 fefb 	bl	8014e78 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b082:	2238      	movs	r2, #56	; 0x38
 800b084:	2100      	movs	r1, #0
 800b086:	a801      	add	r0, sp, #4
 800b088:	f009 fef6 	bl	8014e78 <memset>

  // using 32MHz clock based on HSI+PLL, use 32k LSE for timer
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b08c:	493b      	ldr	r1, [pc, #236]	; (800b17c <init_clock+0x108>)
 800b08e:	680b      	ldr	r3, [r1, #0]
 800b090:	4a3b      	ldr	r2, [pc, #236]	; (800b180 <init_clock+0x10c>)
 800b092:	401a      	ands	r2, r3
 800b094:	2380      	movs	r3, #128	; 0x80
 800b096:	011b      	lsls	r3, r3, #4
 800b098:	4313      	orrs	r3, r2
 800b09a:	600b      	str	r3, [r1, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 800b09c:	4b37      	ldr	r3, [pc, #220]	; (800b17c <init_clock+0x108>)
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	06db      	lsls	r3, r3, #27
 800b0a2:	d4fb      	bmi.n	800b09c <init_clock+0x28>

#if defined(STM32L0)
  // TODO not defined on STM32L1
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800b0a4:	4b37      	ldr	r3, [pc, #220]	; (800b184 <init_clock+0x110>)
 800b0a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0a8:	4935      	ldr	r1, [pc, #212]	; (800b180 <init_clock+0x10c>)
 800b0aa:	4011      	ands	r1, r2
 800b0ac:	2280      	movs	r2, #128	; 0x80
 800b0ae:	0152      	lsls	r2, r2, #5
 800b0b0:	430a      	orrs	r2, r1
 800b0b2:	651a      	str	r2, [r3, #80]	; 0x50
#endif
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 800b0b4:	4a34      	ldr	r2, [pc, #208]	; (800b188 <init_clock+0x114>)
 800b0b6:	6811      	ldr	r1, [r2, #0]
 800b0b8:	2001      	movs	r0, #1
 800b0ba:	4301      	orrs	r1, r0
 800b0bc:	6011      	str	r1, [r2, #0]

  // first switch to HSI as sysclk. Switching to HSI+PLL immediately fails sometimes when calling HAL_RCC_OscConfig()
  __HAL_RCC_HSI_ENABLE();
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	4302      	orrs	r2, r0
 800b0c2:	601a      	str	r2, [r3, #0]
  while( __HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0 ) {}
 800b0c4:	4b2f      	ldr	r3, [pc, #188]	; (800b184 <init_clock+0x110>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	075b      	lsls	r3, r3, #29
 800b0ca:	d5fb      	bpl.n	800b0c4 <init_clock+0x50>
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_HSI); //
 800b0cc:	4a2d      	ldr	r2, [pc, #180]	; (800b184 <init_clock+0x110>)
 800b0ce:	68d3      	ldr	r3, [r2, #12]
 800b0d0:	2103      	movs	r1, #3
 800b0d2:	438b      	bics	r3, r1
 800b0d4:	3902      	subs	r1, #2
 800b0d6:	430b      	orrs	r3, r1
 800b0d8:	60d3      	str	r3, [r2, #12]
  while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI) {}
 800b0da:	4b2a      	ldr	r3, [pc, #168]	; (800b184 <init_clock+0x110>)
 800b0dc:	68da      	ldr	r2, [r3, #12]
 800b0de:	230c      	movs	r3, #12
 800b0e0:	4013      	ands	r3, r2
 800b0e2:	2b04      	cmp	r3, #4
 800b0e4:	d1f9      	bne.n	800b0da <init_clock+0x66>

  // now that we are running on HSI we can disable MSI
  __HAL_RCC_MSI_DISABLE();
 800b0e6:	4a27      	ldr	r2, [pc, #156]	; (800b184 <init_clock+0x110>)
 800b0e8:	6813      	ldr	r3, [r2, #0]
 800b0ea:	4928      	ldr	r1, [pc, #160]	; (800b18c <init_clock+0x118>)
 800b0ec:	400b      	ands	r3, r1
 800b0ee:	6013      	str	r3, [r2, #0]

  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800b0f0:	2202      	movs	r2, #2
 800b0f2:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.LSEState            = RCC_LSE_ON;
 800b0f8:	2180      	movs	r1, #128	; 0x80
 800b0fa:	0049      	lsls	r1, r1, #1
 800b0fc:	9103      	str	r1, [sp, #12]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800b0fe:	39ff      	subs	r1, #255	; 0xff
 800b100:	9104      	str	r1, [sp, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b102:	310f      	adds	r1, #15
 800b104:	9105      	str	r1, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800b106:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 800b108:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLL_MUL6;
 800b10a:	2380      	movs	r3, #128	; 0x80
 800b10c:	031b      	lsls	r3, r3, #12
 800b10e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLL_DIV3;
 800b110:	2380      	movs	r3, #128	; 0x80
 800b112:	041b      	lsls	r3, r3, #16
 800b114:	930e      	str	r3, [sp, #56]	; 0x38
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b116:	a801      	add	r0, sp, #4
 800b118:	f7fd fd68 	bl	8008bec <HAL_RCC_OscConfig>
 800b11c:	1e04      	subs	r4, r0, #0
  if(ret != HAL_OK)
 800b11e:	d10f      	bne.n	800b140 <init_clock+0xcc>
    return ret;

  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 800b120:	4b16      	ldr	r3, [pc, #88]	; (800b17c <init_clock+0x108>)
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	06db      	lsls	r3, r3, #27
 800b126:	d4fb      	bmi.n	800b120 <init_clock+0xac>

  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 800b128:	2304      	movs	r3, #4
 800b12a:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800b12c:	2300      	movs	r3, #0
 800b12e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800b130:	3301      	adds	r3, #1
 800b132:	33ff      	adds	r3, #255	; 0xff
 800b134:	9303      	str	r3, [sp, #12]
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b136:	a801      	add	r0, sp, #4
 800b138:	f7fd fd58 	bl	8008bec <HAL_RCC_OscConfig>
 800b13c:	1e04      	subs	r4, r0, #0
  if(ret != HAL_OK)
 800b13e:	d002      	beq.n	800b146 <init_clock+0xd2>
    HAL_DBGMCU_DisableDBGStopMode( );
    HAL_DBGMCU_DisableDBGStandbyMode( );
    __HAL_RCC_DBGMCU_CLK_DISABLE( );
#endif
    return ret;
}
 800b140:	0020      	movs	r0, r4
 800b142:	b014      	add	sp, #80	; 0x50
 800b144:	bd10      	pop	{r4, pc}
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800b146:	230f      	movs	r3, #15
 800b148:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b14a:	3b0c      	subs	r3, #12
 800b14c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b14e:	2300      	movs	r3, #0
 800b150:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b152:	9312      	str	r3, [sp, #72]	; 0x48
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b154:	2101      	movs	r1, #1
 800b156:	a80f      	add	r0, sp, #60	; 0x3c
 800b158:	f7fe f864 	bl	8009224 <HAL_RCC_ClockConfig>
 800b15c:	1e04      	subs	r4, r0, #0
  if(ret != HAL_OK)
 800b15e:	d1ef      	bne.n	800b140 <init_clock+0xcc>
    __HAL_RCC_DBGMCU_CLK_ENABLE( );
 800b160:	4a08      	ldr	r2, [pc, #32]	; (800b184 <init_clock+0x110>)
 800b162:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800b164:	2380      	movs	r3, #128	; 0x80
 800b166:	03db      	lsls	r3, r3, #15
 800b168:	430b      	orrs	r3, r1
 800b16a:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_DBGMCU_EnableDBGSleepMode( );
 800b16c:	f7fd fae6 	bl	800873c <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode( );
 800b170:	f7fd faec 	bl	800874c <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode( );
 800b174:	f7fd faf2 	bl	800875c <HAL_DBGMCU_EnableDBGStandbyMode>
    return ret;
 800b178:	e7e2      	b.n	800b140 <init_clock+0xcc>
 800b17a:	46c0      	nop			; (mov r8, r8)
 800b17c:	40007000 	.word	0x40007000
 800b180:	ffffe7ff 	.word	0xffffe7ff
 800b184:	40021000 	.word	0x40021000
 800b188:	40022000 	.word	0x40022000
 800b18c:	fffffeff 	.word	0xfffffeff

0800b190 <stm32_common_mcu_init>:

void stm32_common_mcu_init()
{
 800b190:	b510      	push	{r4, lr}
  HAL_StatusTypeDef ret = HAL_ERROR;
  uint8_t counter = 0;
  HAL_Init();
 800b192:	f7fd fac3 	bl	800871c <HAL_Init>
  uint8_t counter = 0;
 800b196:	2200      	movs	r2, #0
  HAL_StatusTypeDef ret = HAL_ERROR;
 800b198:	2001      	movs	r0, #1

  while((ret != HAL_OK) && (counter++ < MAX_INIT_CLOCK_RETRY_TIMES))   // HAL_RCC_OscConfig fails sometimes
 800b19a:	e002      	b.n	800b1a2 <stm32_common_mcu_init+0x12>
  {
    ret = init_clock();
 800b19c:	f7ff ff6a 	bl	800b074 <init_clock>
  while((ret != HAL_OK) && (counter++ < MAX_INIT_CLOCK_RETRY_TIMES))   // HAL_RCC_OscConfig fails sometimes
 800b1a0:	0022      	movs	r2, r4
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	d003      	beq.n	800b1ae <stm32_common_mcu_init+0x1e>
 800b1a6:	1c54      	adds	r4, r2, #1
 800b1a8:	b2e4      	uxtb	r4, r4
 800b1aa:	2a01      	cmp	r2, #1
 800b1ac:	d9f6      	bls.n	800b19c <stm32_common_mcu_init+0xc>
  }
  assert(ret == HAL_OK);
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	d102      	bne.n	800b1b8 <stm32_common_mcu_init+0x28>

  hw_system_save_reboot_reason();
 800b1b2:	f000 fc43 	bl	800ba3c <hw_system_save_reboot_reason>
}
 800b1b6:	bd10      	pop	{r4, pc}
  assert(ret == HAL_OK);
 800b1b8:	4b02      	ldr	r3, [pc, #8]	; (800b1c4 <stm32_common_mcu_init+0x34>)
 800b1ba:	4a03      	ldr	r2, [pc, #12]	; (800b1c8 <stm32_common_mcu_init+0x38>)
 800b1bc:	2178      	movs	r1, #120	; 0x78
 800b1be:	4803      	ldr	r0, [pc, #12]	; (800b1cc <stm32_common_mcu_init+0x3c>)
 800b1c0:	f7fd fa1e 	bl	8008600 <__assert_func>
 800b1c4:	08019944 	.word	0x08019944
 800b1c8:	080199a8 	.word	0x080199a8
 800b1cc:	08019954 	.word	0x08019954

0800b1d0 <HAL_GetTick>:

uint32_t HAL_GetTick(void)
{
 800b1d0:	b510      	push	{r4, lr}
	return timer_get_counter_value();
 800b1d2:	f005 f895 	bl	8010300 <timer_get_counter_value>
}
 800b1d6:	bd10      	pop	{r4, pc}

0800b1d8 <init_pins>:
      hw_gpio_clr(spi->slave[s]->cs);
    }
  }
}

static void init_pins(spi_handle_t* spi) {
 800b1d8:	b570      	push	{r4, r5, r6, lr}
 800b1da:	b088      	sub	sp, #32
 800b1dc:	0005      	movs	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1de:	2302      	movs	r3, #2
 800b1e0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b1e2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = spi_ports[spi->spi_port_number].sck_alternate;
 800b1e8:	3370      	adds	r3, #112	; 0x70
 800b1ea:	5cc1      	ldrb	r1, [r0, r3]
 800b1ec:	00ca      	lsls	r2, r1, #3
 800b1ee:	1a52      	subs	r2, r2, r1
 800b1f0:	0092      	lsls	r2, r2, #2
 800b1f2:	4b1b      	ldr	r3, [pc, #108]	; (800b260 <init_pins+0x88>)
 800b1f4:	189a      	adds	r2, r3, r2
 800b1f6:	68d3      	ldr	r3, [r2, #12]
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	9307      	str	r3, [sp, #28]
  if(spi->hspi.Init.CLKPolarity == SPI_POLARITY_HIGH)
 800b1fc:	6903      	ldr	r3, [r0, #16]
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d02a      	beq.n	800b258 <init_pins+0x80>
  {
    GPIO_InitStruct.Pull = GPIO_PULLUP;
  }
  hw_gpio_configure_pin_stm(spi_ports[spi->spi_port_number].sck_pin, &GPIO_InitStruct);
 800b202:	4c17      	ldr	r4, [pc, #92]	; (800b260 <init_pins+0x88>)
 800b204:	00cb      	lsls	r3, r1, #3
 800b206:	1a5b      	subs	r3, r3, r1
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	5918      	ldr	r0, [r3, r4]
 800b20c:	a903      	add	r1, sp, #12
 800b20e:	f7ff fe17 	bl	800ae40 <hw_gpio_configure_pin_stm>

  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b212:	2302      	movs	r3, #2
 800b214:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = spi_ports[spi->spi_port_number].miso_alternate;
 800b216:	2673      	movs	r6, #115	; 0x73
 800b218:	5da9      	ldrb	r1, [r5, r6]
 800b21a:	00cb      	lsls	r3, r1, #3
 800b21c:	1a5a      	subs	r2, r3, r1
 800b21e:	0092      	lsls	r2, r2, #2
 800b220:	18a2      	adds	r2, r4, r2
 800b222:	6912      	ldr	r2, [r2, #16]
 800b224:	9201      	str	r2, [sp, #4]
 800b226:	9207      	str	r2, [sp, #28]
  hw_gpio_configure_pin_stm(spi_ports[spi->spi_port_number].miso_pin, &GPIO_InitStruct);
 800b228:	1a5b      	subs	r3, r3, r1
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	18e3      	adds	r3, r4, r3
 800b22e:	6858      	ldr	r0, [r3, #4]
 800b230:	a903      	add	r1, sp, #12
 800b232:	f7ff fe05 	bl	800ae40 <hw_gpio_configure_pin_stm>
  GPIO_InitStruct.Alternate = spi_ports[spi->spi_port_number].mosi_alternate;
 800b236:	5da9      	ldrb	r1, [r5, r6]
 800b238:	00cb      	lsls	r3, r1, #3
 800b23a:	1a5a      	subs	r2, r3, r1
 800b23c:	0092      	lsls	r2, r2, #2
 800b23e:	18a2      	adds	r2, r4, r2
 800b240:	6952      	ldr	r2, [r2, #20]
 800b242:	9201      	str	r2, [sp, #4]
 800b244:	9207      	str	r2, [sp, #28]
  hw_gpio_configure_pin_stm(spi_ports[spi->spi_port_number].mosi_pin, &GPIO_InitStruct);
 800b246:	1a5b      	subs	r3, r3, r1
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	18e4      	adds	r4, r4, r3
 800b24c:	68a0      	ldr	r0, [r4, #8]
 800b24e:	a903      	add	r1, sp, #12
 800b250:	f7ff fdf6 	bl	800ae40 <hw_gpio_configure_pin_stm>
}
 800b254:	b008      	add	sp, #32
 800b256:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b258:	3b01      	subs	r3, #1
 800b25a:	9305      	str	r3, [sp, #20]
 800b25c:	e7d1      	b.n	800b202 <init_pins+0x2a>
 800b25e:	46c0      	nop			; (mov r8, r8)
 800b260:	08019b38 	.word	0x08019b38

0800b264 <configure_cs>:
{
 800b264:	b500      	push	{lr}
 800b266:	b087      	sub	sp, #28
  if (on)
 800b268:	2900      	cmp	r1, #0
 800b26a:	d00e      	beq.n	800b28a <configure_cs+0x26>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b26c:	2301      	movs	r3, #1
 800b26e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP; // TODO depending on cs_is_active_low?
 800b270:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b272:	3302      	adds	r3, #2
 800b274:	9304      	str	r3, [sp, #16]
  error_t err = hw_gpio_configure_pin_stm(spi_slave->cs, &GPIO_InitStruct);
 800b276:	6840      	ldr	r0, [r0, #4]
 800b278:	a901      	add	r1, sp, #4
 800b27a:	f7ff fde1 	bl	800ae40 <hw_gpio_configure_pin_stm>
  assert(err == SUCCESS || err == EALREADY);
 800b27e:	2800      	cmp	r0, #0
 800b280:	d001      	beq.n	800b286 <configure_cs+0x22>
 800b282:	2878      	cmp	r0, #120	; 0x78
 800b284:	d104      	bne.n	800b290 <configure_cs+0x2c>
}
 800b286:	b007      	add	sp, #28
 800b288:	bd00      	pop	{pc}
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b28a:	2303      	movs	r3, #3
 800b28c:	9302      	str	r3, [sp, #8]
 800b28e:	e7f2      	b.n	800b276 <configure_cs+0x12>
  assert(err == SUCCESS || err == EALREADY);
 800b290:	4b02      	ldr	r3, [pc, #8]	; (800b29c <configure_cs+0x38>)
 800b292:	4a03      	ldr	r2, [pc, #12]	; (800b2a0 <configure_cs+0x3c>)
 800b294:	2158      	movs	r1, #88	; 0x58
 800b296:	4803      	ldr	r0, [pc, #12]	; (800b2a4 <configure_cs+0x40>)
 800b298:	f7fd f9b2 	bl	8008600 <__assert_func>
 800b29c:	080199c0 	.word	0x080199c0
 800b2a0:	08019ac8 	.word	0x08019ac8
 800b2a4:	080199e4 	.word	0x080199e4

0800b2a8 <ensure_slaves_deselected>:
static void ensure_slaves_deselected(spi_handle_t* spi) {
 800b2a8:	b570      	push	{r4, r5, r6, lr}
 800b2aa:	0005      	movs	r5, r0
  for(uint8_t s=0; s<spi->slaves; s++) {
 800b2ac:	2400      	movs	r4, #0
 800b2ae:	e008      	b.n	800b2c2 <ensure_slaves_deselected+0x1a>
      configure_cs(spi->slave[s], false);
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	f7ff ffd7 	bl	800b264 <configure_cs>
 800b2b6:	e002      	b.n	800b2be <ensure_slaves_deselected+0x16>
      hw_gpio_clr(spi->slave[s]->cs);
 800b2b8:	6840      	ldr	r0, [r0, #4]
 800b2ba:	f7ff fc68 	bl	800ab8e <hw_gpio_clr>
  for(uint8_t s=0; s<spi->slaves; s++) {
 800b2be:	3401      	adds	r4, #1
 800b2c0:	b2e4      	uxtb	r4, r4
 800b2c2:	2370      	movs	r3, #112	; 0x70
 800b2c4:	5ceb      	ldrb	r3, [r5, r3]
 800b2c6:	42a3      	cmp	r3, r4
 800b2c8:	d90d      	bls.n	800b2e6 <ensure_slaves_deselected+0x3e>
    if(spi->slave[s]->cs_to_input_if_not_used)
 800b2ca:	0023      	movs	r3, r4
 800b2cc:	3316      	adds	r3, #22
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	5958      	ldr	r0, [r3, r5]
 800b2d2:	7a43      	ldrb	r3, [r0, #9]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1eb      	bne.n	800b2b0 <ensure_slaves_deselected+0x8>
    else if(spi->slave[s]->cs_is_active_low) {
 800b2d8:	7a03      	ldrb	r3, [r0, #8]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d0ec      	beq.n	800b2b8 <ensure_slaves_deselected+0x10>
      hw_gpio_set(spi->slave[s]->cs);
 800b2de:	6840      	ldr	r0, [r0, #4]
 800b2e0:	f7ff fc48 	bl	800ab74 <hw_gpio_set>
 800b2e4:	e7eb      	b.n	800b2be <ensure_slaves_deselected+0x16>
}
 800b2e6:	bd70      	pop	{r4, r5, r6, pc}

0800b2e8 <spi_read_3wire_bytes>:

void spi_send_byte_with_control(spi_slave_handle_t* slave, uint16_t data) {
  HAL_SPI_Transmit(&slave->spi->hspi, (uint8_t *)&data, 2, HAL_MAX_DELAY);
}

static void spi_read_3wire_bytes(spi_slave_handle_t* slave, uint8_t* address, uint8_t* rxData, size_t length) {
 800b2e8:	b570      	push	{r4, r5, r6, lr}
 800b2ea:	0004      	movs	r4, r0
 800b2ec:	0016      	movs	r6, r2
 800b2ee:	001d      	movs	r5, r3
  HAL_SPI_Transmit(&slave->spi->hspi, address, 1, HAL_MAX_DELAY);
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	425b      	negs	r3, r3
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	6800      	ldr	r0, [r0, #0]
 800b2f8:	f7fe fbb8 	bl	8009a6c <HAL_SPI_Transmit>

  start_atomic();
 800b2fc:	f7ff fb54 	bl	800a9a8 <start_atomic>
  // in 3 wire mode RX the SPI pheriperal seems unable to stock clocking after receiving the expected number of bytes
  // disabling the SPI by polling until RXNE is set will result in too many clocks being generated, causing the slave to clokc out more bytes then needed.
  // This can be problematic for some SPI slaves for example when reading a FIFO, where the slave will return bytes from the FIFO but these will be missed by the master.
  // The workaround used by STM in the LMS303 sample of the STM32L4 discovery board is to disable the clock manually after a few cycles, instead of polling RXNE.
  // We use a similar implementation for now
  __SPI_DIRECTION_1LINE_RX(&slave->spi->hspi);
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	6813      	ldr	r3, [r2, #0]
 800b306:	4924      	ldr	r1, [pc, #144]	; (800b398 <spi_read_3wire_bytes+0xb0>)
 800b308:	400b      	ands	r3, r1
 800b30a:	6013      	str	r3, [r2, #0]
 800b30c:	6823      	ldr	r3, [r4, #0]
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	6811      	ldr	r1, [r2, #0]
 800b312:	2380      	movs	r3, #128	; 0x80
 800b314:	021b      	lsls	r3, r3, #8
 800b316:	430b      	orrs	r3, r1
 800b318:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < length; i++) {
 800b31a:	2200      	movs	r2, #0
 800b31c:	e02b      	b.n	800b376 <spi_read_3wire_bytes+0x8e>
    __HAL_SPI_ENABLE(&slave->spi->hspi);
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	6819      	ldr	r1, [r3, #0]
 800b322:	680b      	ldr	r3, [r1, #0]
 800b324:	2040      	movs	r0, #64	; 0x40
 800b326:	4303      	orrs	r3, r0
 800b328:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	f3bf 8f4f 	dsb	sy
 800b336:	f3bf 8f4f 	dsb	sy
 800b33a:	f3bf 8f4f 	dsb	sy
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	f3bf 8f4f 	dsb	sy
 800b346:	f3bf 8f4f 	dsb	sy
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	f3bf 8f4f 	dsb	sy
    __DSB();
    __DSB();
    __DSB();
    __DSB();
    __DSB();
    __HAL_SPI_DISABLE(&slave->spi->hspi);
 800b352:	6823      	ldr	r3, [r4, #0]
 800b354:	6819      	ldr	r1, [r3, #0]
 800b356:	680b      	ldr	r3, [r1, #0]
 800b358:	4383      	bics	r3, r0
 800b35a:	600b      	str	r3, [r1, #0]
    while(!(slave->spi->hspi.Instance->SR & SPI_FLAG_RXNE));
 800b35c:	6823      	ldr	r3, [r4, #0]
 800b35e:	6819      	ldr	r1, [r3, #0]
 800b360:	6888      	ldr	r0, [r1, #8]
 800b362:	07c3      	lsls	r3, r0, #31
 800b364:	d5fa      	bpl.n	800b35c <spi_read_3wire_bytes+0x74>
    rxData[i] = *((__IO uint8_t *)&slave->spi->hspi.Instance->DR);
 800b366:	7b0b      	ldrb	r3, [r1, #12]
 800b368:	54b3      	strb	r3, [r6, r2]
    while((slave->spi->hspi.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 800b36a:	6821      	ldr	r1, [r4, #0]
 800b36c:	6809      	ldr	r1, [r1, #0]
 800b36e:	6889      	ldr	r1, [r1, #8]
 800b370:	060b      	lsls	r3, r1, #24
 800b372:	d4fa      	bmi.n	800b36a <spi_read_3wire_bytes+0x82>
  for (size_t i = 0; i < length; i++) {
 800b374:	3201      	adds	r2, #1
 800b376:	42aa      	cmp	r2, r5
 800b378:	d3d1      	bcc.n	800b31e <spi_read_3wire_bytes+0x36>
  }
  end_atomic();
 800b37a:	f7ff fb23 	bl	800a9c4 <end_atomic>

  assert(!__HAL_SPI_GET_FLAG(&slave->spi->hspi, SPI_FLAG_OVR));
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	065b      	lsls	r3, r3, #25
 800b386:	d400      	bmi.n	800b38a <spi_read_3wire_bytes+0xa2>
}
 800b388:	bd70      	pop	{r4, r5, r6, pc}
  assert(!__HAL_SPI_GET_FLAG(&slave->spi->hspi, SPI_FLAG_OVR));
 800b38a:	21be      	movs	r1, #190	; 0xbe
 800b38c:	4b03      	ldr	r3, [pc, #12]	; (800b39c <spi_read_3wire_bytes+0xb4>)
 800b38e:	4a04      	ldr	r2, [pc, #16]	; (800b3a0 <spi_read_3wire_bytes+0xb8>)
 800b390:	0049      	lsls	r1, r1, #1
 800b392:	4804      	ldr	r0, [pc, #16]	; (800b3a4 <spi_read_3wire_bytes+0xbc>)
 800b394:	f7fd f934 	bl	8008600 <__assert_func>
 800b398:	ffff3bff 	.word	0xffff3bff
 800b39c:	08019a38 	.word	0x08019a38
 800b3a0:	08019b0c 	.word	0x08019b0c
 800b3a4:	080199e4 	.word	0x080199e4

0800b3a8 <spi_enable>:
void spi_enable(spi_handle_t* spi) {
 800b3a8:	b510      	push	{r4, lr}
 800b3aa:	0004      	movs	r4, r0
  if(spi->active) { return; }
 800b3ac:	2372      	movs	r3, #114	; 0x72
 800b3ae:	5cc3      	ldrb	r3, [r0, r3]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d121      	bne.n	800b3f8 <spi_enable+0x50>
  if(spi->uhandle)
 800b3b4:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d003      	beq.n	800b3c2 <spi_enable+0x1a>
    spi->uhandle->driver->uncoupler_set(spi->uhandle, true);
 800b3ba:	6803      	ldr	r3, [r0, #0]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2101      	movs	r1, #1
 800b3c0:	4798      	blx	r3
  init_pins(spi);
 800b3c2:	0020      	movs	r0, r4
 800b3c4:	f7ff ff08 	bl	800b1d8 <init_pins>
  ensure_slaves_deselected(spi);
 800b3c8:	0020      	movs	r0, r4
 800b3ca:	f7ff ff6d 	bl	800b2a8 <ensure_slaves_deselected>
  switch ((uint32_t)(spi->hspi.Instance))
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	4a13      	ldr	r2, [pc, #76]	; (800b420 <spi_enable+0x78>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d011      	beq.n	800b3fa <spi_enable+0x52>
 800b3d6:	4a13      	ldr	r2, [pc, #76]	; (800b424 <spi_enable+0x7c>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d115      	bne.n	800b408 <spi_enable+0x60>
      __HAL_RCC_SPI1_CLK_ENABLE();
 800b3dc:	4a12      	ldr	r2, [pc, #72]	; (800b428 <spi_enable+0x80>)
 800b3de:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800b3e0:	2380      	movs	r3, #128	; 0x80
 800b3e2:	015b      	lsls	r3, r3, #5
 800b3e4:	430b      	orrs	r3, r1
 800b3e6:	6353      	str	r3, [r2, #52]	; 0x34
  if (HAL_SPI_Init(&(spi->hspi)) != HAL_OK)
 800b3e8:	0020      	movs	r0, r4
 800b3ea:	f7fe fae3 	bl	80099b4 <HAL_SPI_Init>
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	d110      	bne.n	800b414 <spi_enable+0x6c>
  spi->active = true;
 800b3f2:	2372      	movs	r3, #114	; 0x72
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	54e2      	strb	r2, [r4, r3]
}
 800b3f8:	bd10      	pop	{r4, pc}
      __HAL_RCC_SPI2_CLK_ENABLE();
 800b3fa:	4a0b      	ldr	r2, [pc, #44]	; (800b428 <spi_enable+0x80>)
 800b3fc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800b3fe:	2380      	movs	r3, #128	; 0x80
 800b400:	01db      	lsls	r3, r3, #7
 800b402:	430b      	orrs	r3, r1
 800b404:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 800b406:	e7ef      	b.n	800b3e8 <spi_enable+0x40>
      assert(false);
 800b408:	4b08      	ldr	r3, [pc, #32]	; (800b42c <spi_enable+0x84>)
 800b40a:	4a09      	ldr	r2, [pc, #36]	; (800b430 <spi_enable+0x88>)
 800b40c:	2195      	movs	r1, #149	; 0x95
 800b40e:	4809      	ldr	r0, [pc, #36]	; (800b434 <spi_enable+0x8c>)
 800b410:	f7fd f8f6 	bl	8008600 <__assert_func>
    assert(false);
 800b414:	4b05      	ldr	r3, [pc, #20]	; (800b42c <spi_enable+0x84>)
 800b416:	4a06      	ldr	r2, [pc, #24]	; (800b430 <spi_enable+0x88>)
 800b418:	219a      	movs	r1, #154	; 0x9a
 800b41a:	4806      	ldr	r0, [pc, #24]	; (800b434 <spi_enable+0x8c>)
 800b41c:	f7fd f8f0 	bl	8008600 <__assert_func>
 800b420:	40003800 	.word	0x40003800
 800b424:	40013000 	.word	0x40013000
 800b428:	40021000 	.word	0x40021000
 800b42c:	080169c8 	.word	0x080169c8
 800b430:	08019ad8 	.word	0x08019ad8
 800b434:	080199e4 	.word	0x080199e4

0800b438 <spi_disable>:
void spi_disable(spi_handle_t* spi) {
 800b438:	b510      	push	{r4, lr}
 800b43a:	0004      	movs	r4, r0
  if( ! spi->active ) { return; }
 800b43c:	2372      	movs	r3, #114	; 0x72
 800b43e:	5cc3      	ldrb	r3, [r0, r3]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d100      	bne.n	800b446 <spi_disable+0xe>
}
 800b444:	bd10      	pop	{r4, pc}
  HAL_SPI_DeInit(&spi->hspi);
 800b446:	f7fe fafa 	bl	8009a3e <HAL_SPI_DeInit>
  switch ((uint32_t)(spi->hspi.Instance))
 800b44a:	6823      	ldr	r3, [r4, #0]
 800b44c:	4a12      	ldr	r2, [pc, #72]	; (800b498 <spi_disable+0x60>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d015      	beq.n	800b47e <spi_disable+0x46>
 800b452:	4a12      	ldr	r2, [pc, #72]	; (800b49c <spi_disable+0x64>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d118      	bne.n	800b48a <spi_disable+0x52>
      __HAL_RCC_SPI1_CLK_DISABLE();
 800b458:	4a11      	ldr	r2, [pc, #68]	; (800b4a0 <spi_disable+0x68>)
 800b45a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800b45c:	4911      	ldr	r1, [pc, #68]	; (800b4a4 <spi_disable+0x6c>)
 800b45e:	400b      	ands	r3, r1
 800b460:	6353      	str	r3, [r2, #52]	; 0x34
  ensure_slaves_deselected(spi);
 800b462:	0020      	movs	r0, r4
 800b464:	f7ff ff20 	bl	800b2a8 <ensure_slaves_deselected>
  if(spi->uhandle)
 800b468:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d003      	beq.n	800b476 <spi_disable+0x3e>
    spi->uhandle->driver->uncoupler_set(spi->uhandle, false);
 800b46e:	6803      	ldr	r3, [r0, #0]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	2100      	movs	r1, #0
 800b474:	4798      	blx	r3
  spi->active = false;
 800b476:	2372      	movs	r3, #114	; 0x72
 800b478:	2200      	movs	r2, #0
 800b47a:	54e2      	strb	r2, [r4, r3]
 800b47c:	e7e2      	b.n	800b444 <spi_disable+0xc>
      __HAL_RCC_SPI2_CLK_DISABLE();
 800b47e:	4a08      	ldr	r2, [pc, #32]	; (800b4a0 <spi_disable+0x68>)
 800b480:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800b482:	4909      	ldr	r1, [pc, #36]	; (800b4a8 <spi_disable+0x70>)
 800b484:	400b      	ands	r3, r1
 800b486:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 800b488:	e7eb      	b.n	800b462 <spi_disable+0x2a>
      assert(false);
 800b48a:	4b08      	ldr	r3, [pc, #32]	; (800b4ac <spi_disable+0x74>)
 800b48c:	4a08      	ldr	r2, [pc, #32]	; (800b4b0 <spi_disable+0x78>)
 800b48e:	21b1      	movs	r1, #177	; 0xb1
 800b490:	4808      	ldr	r0, [pc, #32]	; (800b4b4 <spi_disable+0x7c>)
 800b492:	f7fd f8b5 	bl	8008600 <__assert_func>
 800b496:	46c0      	nop			; (mov r8, r8)
 800b498:	40003800 	.word	0x40003800
 800b49c:	40013000 	.word	0x40013000
 800b4a0:	40021000 	.word	0x40021000
 800b4a4:	ffffefff 	.word	0xffffefff
 800b4a8:	ffffbfff 	.word	0xffffbfff
 800b4ac:	080169c8 	.word	0x080169c8
 800b4b0:	08019ae4 	.word	0x08019ae4
 800b4b4:	080199e4 	.word	0x080199e4

0800b4b8 <spi_init>:
spi_handle_t* spi_init(uint8_t spi_number, uint32_t baudrate, uint8_t databits, bool msbf, bool half_duplex, bool cpol, bool cpha, uncoupler_handle_t* uhandle) {
 800b4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4ba:	46de      	mov	lr, fp
 800b4bc:	4657      	mov	r7, sl
 800b4be:	464e      	mov	r6, r9
 800b4c0:	4645      	mov	r5, r8
 800b4c2:	b5e0      	push	{r5, r6, r7, lr}
 800b4c4:	b085      	sub	sp, #20
 800b4c6:	0004      	movs	r4, r0
 800b4c8:	000d      	movs	r5, r1
 800b4ca:	9301      	str	r3, [sp, #4]
 800b4cc:	ab0e      	add	r3, sp, #56	; 0x38
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	469b      	mov	fp, r3
 800b4d2:	ab0f      	add	r3, sp, #60	; 0x3c
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	469a      	mov	sl, r3
 800b4d8:	ab10      	add	r3, sp, #64	; 0x40
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	4699      	mov	r9, r3
  assert(databits == 8);
 800b4de:	2a08      	cmp	r2, #8
 800b4e0:	d116      	bne.n	800b510 <spi_init+0x58>
  assert(spi_number < SPI_COUNT);
 800b4e2:	2801      	cmp	r0, #1
 800b4e4:	d81a      	bhi.n	800b51c <spi_init+0x64>
  handle[spi_number].slaves=0;
 800b4e6:	4979      	ldr	r1, [pc, #484]	; (800b6cc <spi_init+0x214>)
 800b4e8:	2374      	movs	r3, #116	; 0x74
 800b4ea:	4343      	muls	r3, r0
 800b4ec:	18ca      	adds	r2, r1, r3
 800b4ee:	3270      	adds	r2, #112	; 0x70
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	7010      	strb	r0, [r2, #0]
  if (handle[spi_number].hspi.Instance != NULL)
 800b4f4:	585b      	ldr	r3, [r3, r1]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d016      	beq.n	800b528 <spi_init+0x70>
    return &handle[spi_number];
 800b4fa:	2674      	movs	r6, #116	; 0x74
 800b4fc:	4374      	muls	r4, r6
 800b4fe:	1866      	adds	r6, r4, r1
}
 800b500:	0030      	movs	r0, r6
 800b502:	b005      	add	sp, #20
 800b504:	bc3c      	pop	{r2, r3, r4, r5}
 800b506:	4690      	mov	r8, r2
 800b508:	4699      	mov	r9, r3
 800b50a:	46a2      	mov	sl, r4
 800b50c:	46ab      	mov	fp, r5
 800b50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert(databits == 8);
 800b510:	4b6f      	ldr	r3, [pc, #444]	; (800b6d0 <spi_init+0x218>)
 800b512:	4a70      	ldr	r2, [pc, #448]	; (800b6d4 <spi_init+0x21c>)
 800b514:	21c2      	movs	r1, #194	; 0xc2
 800b516:	4870      	ldr	r0, [pc, #448]	; (800b6d8 <spi_init+0x220>)
 800b518:	f7fd f872 	bl	8008600 <__assert_func>
  assert(spi_number < SPI_COUNT);
 800b51c:	4b6f      	ldr	r3, [pc, #444]	; (800b6dc <spi_init+0x224>)
 800b51e:	4a6d      	ldr	r2, [pc, #436]	; (800b6d4 <spi_init+0x21c>)
 800b520:	21c3      	movs	r1, #195	; 0xc3
 800b522:	486d      	ldr	r0, [pc, #436]	; (800b6d8 <spi_init+0x220>)
 800b524:	f7fd f86c 	bl	8008600 <__assert_func>
  handle[spi_number].spi_port_number = spi_number;
 800b528:	4b68      	ldr	r3, [pc, #416]	; (800b6cc <spi_init+0x214>)
 800b52a:	4698      	mov	r8, r3
 800b52c:	2374      	movs	r3, #116	; 0x74
 800b52e:	4363      	muls	r3, r4
 800b530:	9303      	str	r3, [sp, #12]
 800b532:	001f      	movs	r7, r3
 800b534:	4447      	add	r7, r8
 800b536:	0039      	movs	r1, r7
 800b538:	3173      	adds	r1, #115	; 0x73
 800b53a:	700c      	strb	r4, [r1, #0]
  init_pins(&handle[spi_number]);
 800b53c:	003e      	movs	r6, r7
 800b53e:	0038      	movs	r0, r7
 800b540:	f7ff fe4a 	bl	800b1d8 <init_pins>
  handle[spi_number].hspi.Instance = spi_ports[spi_number].spi;
 800b544:	00e3      	lsls	r3, r4, #3
 800b546:	1b1b      	subs	r3, r3, r4
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	4a65      	ldr	r2, [pc, #404]	; (800b6e0 <spi_init+0x228>)
 800b54c:	18d3      	adds	r3, r2, r3
 800b54e:	6999      	ldr	r1, [r3, #24]
 800b550:	9102      	str	r1, [sp, #8]
 800b552:	4641      	mov	r1, r8
 800b554:	9b03      	ldr	r3, [sp, #12]
 800b556:	9a02      	ldr	r2, [sp, #8]
 800b558:	505a      	str	r2, [r3, r1]
  handle[spi_number].hspi.Init.Mode = SPI_MODE_MASTER;
 800b55a:	2382      	movs	r3, #130	; 0x82
 800b55c:	005b      	lsls	r3, r3, #1
 800b55e:	607b      	str	r3, [r7, #4]
  if(half_duplex)
 800b560:	465b      	mov	r3, fp
 800b562:	2b00      	cmp	r3, #0
 800b564:	d03b      	beq.n	800b5de <spi_init+0x126>
    handle[spi_number].hspi.Init.Direction = SPI_DIRECTION_1LINE;
 800b566:	2274      	movs	r2, #116	; 0x74
 800b568:	4362      	muls	r2, r4
 800b56a:	4b58      	ldr	r3, [pc, #352]	; (800b6cc <spi_init+0x214>)
 800b56c:	189b      	adds	r3, r3, r2
 800b56e:	2280      	movs	r2, #128	; 0x80
 800b570:	0212      	lsls	r2, r2, #8
 800b572:	609a      	str	r2, [r3, #8]
  handle[spi_number].hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 800b574:	2274      	movs	r2, #116	; 0x74
 800b576:	4362      	muls	r2, r4
 800b578:	4b54      	ldr	r3, [pc, #336]	; (800b6cc <spi_init+0x214>)
 800b57a:	189b      	adds	r3, r3, r2
 800b57c:	2200      	movs	r2, #0
 800b57e:	60da      	str	r2, [r3, #12]
  handle[spi_number].hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b580:	615a      	str	r2, [r3, #20]
  if(cpol)
 800b582:	4653      	mov	r3, sl
 800b584:	2b00      	cmp	r3, #0
 800b586:	d031      	beq.n	800b5ec <spi_init+0x134>
    handle[spi_number].hspi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800b588:	3274      	adds	r2, #116	; 0x74
 800b58a:	4362      	muls	r2, r4
 800b58c:	4b4f      	ldr	r3, [pc, #316]	; (800b6cc <spi_init+0x214>)
 800b58e:	189b      	adds	r3, r3, r2
 800b590:	2202      	movs	r2, #2
 800b592:	611a      	str	r2, [r3, #16]
  if(cpha)
 800b594:	464b      	mov	r3, r9
 800b596:	2b00      	cmp	r3, #0
 800b598:	d02f      	beq.n	800b5fa <spi_init+0x142>
    handle[spi_number].hspi.Init.CLKPhase = SPI_PHASE_2EDGE;
 800b59a:	2274      	movs	r2, #116	; 0x74
 800b59c:	4362      	muls	r2, r4
 800b59e:	4b4b      	ldr	r3, [pc, #300]	; (800b6cc <spi_init+0x214>)
 800b5a0:	189b      	adds	r3, r3, r2
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	615a      	str	r2, [r3, #20]
  handle[spi_number].hspi.Init.NSS = SPI_NSS_SOFT;
 800b5a6:	2274      	movs	r2, #116	; 0x74
 800b5a8:	4362      	muls	r2, r4
 800b5aa:	4b48      	ldr	r3, [pc, #288]	; (800b6cc <spi_init+0x214>)
 800b5ac:	189b      	adds	r3, r3, r2
 800b5ae:	2280      	movs	r2, #128	; 0x80
 800b5b0:	0092      	lsls	r2, r2, #2
 800b5b2:	619a      	str	r2, [r3, #24]
  switch (baudrate)
 800b5b4:	4b4b      	ldr	r3, [pc, #300]	; (800b6e4 <spi_init+0x22c>)
 800b5b6:	429d      	cmp	r5, r3
 800b5b8:	d065      	beq.n	800b686 <spi_init+0x1ce>
 800b5ba:	d82f      	bhi.n	800b61c <spi_init+0x164>
 800b5bc:	4b4a      	ldr	r3, [pc, #296]	; (800b6e8 <spi_init+0x230>)
 800b5be:	429d      	cmp	r5, r3
 800b5c0:	d068      	beq.n	800b694 <spi_init+0x1dc>
 800b5c2:	d821      	bhi.n	800b608 <spi_init+0x150>
 800b5c4:	4b49      	ldr	r3, [pc, #292]	; (800b6ec <spi_init+0x234>)
 800b5c6:	429d      	cmp	r5, r3
 800b5c8:	d06b      	beq.n	800b6a2 <spi_init+0x1ea>
 800b5ca:	4b49      	ldr	r3, [pc, #292]	; (800b6f0 <spi_init+0x238>)
 800b5cc:	429d      	cmp	r5, r3
 800b5ce:	d16f      	bne.n	800b6b0 <spi_init+0x1f8>
      handle[spi_number].hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800b5d0:	2274      	movs	r2, #116	; 0x74
 800b5d2:	4362      	muls	r2, r4
 800b5d4:	4b3d      	ldr	r3, [pc, #244]	; (800b6cc <spi_init+0x214>)
 800b5d6:	189b      	adds	r3, r3, r2
 800b5d8:	2230      	movs	r2, #48	; 0x30
 800b5da:	61da      	str	r2, [r3, #28]
      break;
 800b5dc:	e02a      	b.n	800b634 <spi_init+0x17c>
    handle[spi_number].hspi.Init.Direction = SPI_DIRECTION_2LINES;
 800b5de:	2274      	movs	r2, #116	; 0x74
 800b5e0:	4362      	muls	r2, r4
 800b5e2:	4b3a      	ldr	r3, [pc, #232]	; (800b6cc <spi_init+0x214>)
 800b5e4:	189b      	adds	r3, r3, r2
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	609a      	str	r2, [r3, #8]
 800b5ea:	e7c3      	b.n	800b574 <spi_init+0xbc>
    handle[spi_number].hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b5ec:	2274      	movs	r2, #116	; 0x74
 800b5ee:	4362      	muls	r2, r4
 800b5f0:	4b36      	ldr	r3, [pc, #216]	; (800b6cc <spi_init+0x214>)
 800b5f2:	189b      	adds	r3, r3, r2
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	611a      	str	r2, [r3, #16]
 800b5f8:	e7cc      	b.n	800b594 <spi_init+0xdc>
    handle[spi_number].hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b5fa:	2274      	movs	r2, #116	; 0x74
 800b5fc:	4362      	muls	r2, r4
 800b5fe:	4b33      	ldr	r3, [pc, #204]	; (800b6cc <spi_init+0x214>)
 800b600:	189b      	adds	r3, r3, r2
 800b602:	2200      	movs	r2, #0
 800b604:	615a      	str	r2, [r3, #20]
 800b606:	e7ce      	b.n	800b5a6 <spi_init+0xee>
  switch (baudrate)
 800b608:	4b3a      	ldr	r3, [pc, #232]	; (800b6f4 <spi_init+0x23c>)
 800b60a:	429d      	cmp	r5, r3
 800b60c:	d150      	bne.n	800b6b0 <spi_init+0x1f8>
      handle[spi_number].hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800b60e:	2274      	movs	r2, #116	; 0x74
 800b610:	4362      	muls	r2, r4
 800b612:	4b2e      	ldr	r3, [pc, #184]	; (800b6cc <spi_init+0x214>)
 800b614:	189b      	adds	r3, r3, r2
 800b616:	2220      	movs	r2, #32
 800b618:	61da      	str	r2, [r3, #28]
      break;
 800b61a:	e00b      	b.n	800b634 <spi_init+0x17c>
  switch (baudrate)
 800b61c:	4b36      	ldr	r3, [pc, #216]	; (800b6f8 <spi_init+0x240>)
 800b61e:	429d      	cmp	r5, r3
 800b620:	d02a      	beq.n	800b678 <spi_init+0x1c0>
 800b622:	4b36      	ldr	r3, [pc, #216]	; (800b6fc <spi_init+0x244>)
 800b624:	429d      	cmp	r5, r3
 800b626:	d11d      	bne.n	800b664 <spi_init+0x1ac>
      handle[spi_number].hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b628:	2274      	movs	r2, #116	; 0x74
 800b62a:	4362      	muls	r2, r4
 800b62c:	4b27      	ldr	r3, [pc, #156]	; (800b6cc <spi_init+0x214>)
 800b62e:	189b      	adds	r3, r3, r2
 800b630:	2200      	movs	r2, #0
 800b632:	61da      	str	r2, [r3, #28]
  if (msbf)
 800b634:	9b01      	ldr	r3, [sp, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d041      	beq.n	800b6be <spi_init+0x206>
    handle[spi_number].hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b63a:	2274      	movs	r2, #116	; 0x74
 800b63c:	4362      	muls	r2, r4
 800b63e:	4b23      	ldr	r3, [pc, #140]	; (800b6cc <spi_init+0x214>)
 800b640:	189b      	adds	r3, r3, r2
 800b642:	2200      	movs	r2, #0
 800b644:	621a      	str	r2, [r3, #32]
  handle[spi_number].hspi.Init.TIMode = SPI_TIMODE_DISABLE;
 800b646:	2074      	movs	r0, #116	; 0x74
 800b648:	4360      	muls	r0, r4
 800b64a:	4c20      	ldr	r4, [pc, #128]	; (800b6cc <spi_init+0x214>)
 800b64c:	1824      	adds	r4, r4, r0
 800b64e:	2300      	movs	r3, #0
 800b650:	6263      	str	r3, [r4, #36]	; 0x24
  handle[spi_number].hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b652:	62a3      	str	r3, [r4, #40]	; 0x28
  handle[spi_number].hspi.Init.CRCPolynomial = 10;
 800b654:	330a      	adds	r3, #10
 800b656:	62e3      	str	r3, [r4, #44]	; 0x2c
  handle[spi_number].uhandle = uhandle;
 800b658:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b65a:	66e3      	str	r3, [r4, #108]	; 0x6c
  spi_enable(&handle[spi_number]);
 800b65c:	0038      	movs	r0, r7
 800b65e:	f7ff fea3 	bl	800b3a8 <spi_enable>
  return &handle[spi_number];
 800b662:	e74d      	b.n	800b500 <spi_init+0x48>
  switch (baudrate)
 800b664:	4b26      	ldr	r3, [pc, #152]	; (800b700 <spi_init+0x248>)
 800b666:	429d      	cmp	r5, r3
 800b668:	d122      	bne.n	800b6b0 <spi_init+0x1f8>
      handle[spi_number].hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800b66a:	2274      	movs	r2, #116	; 0x74
 800b66c:	4362      	muls	r2, r4
 800b66e:	4b17      	ldr	r3, [pc, #92]	; (800b6cc <spi_init+0x214>)
 800b670:	189b      	adds	r3, r3, r2
 800b672:	2210      	movs	r2, #16
 800b674:	61da      	str	r2, [r3, #28]
      break;
 800b676:	e7dd      	b.n	800b634 <spi_init+0x17c>
      handle[spi_number].hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800b678:	2274      	movs	r2, #116	; 0x74
 800b67a:	4362      	muls	r2, r4
 800b67c:	4b13      	ldr	r3, [pc, #76]	; (800b6cc <spi_init+0x214>)
 800b67e:	189b      	adds	r3, r3, r2
 800b680:	2208      	movs	r2, #8
 800b682:	61da      	str	r2, [r3, #28]
      break;
 800b684:	e7d6      	b.n	800b634 <spi_init+0x17c>
      handle[spi_number].hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800b686:	2274      	movs	r2, #116	; 0x74
 800b688:	4362      	muls	r2, r4
 800b68a:	4b10      	ldr	r3, [pc, #64]	; (800b6cc <spi_init+0x214>)
 800b68c:	189b      	adds	r3, r3, r2
 800b68e:	2218      	movs	r2, #24
 800b690:	61da      	str	r2, [r3, #28]
      break;
 800b692:	e7cf      	b.n	800b634 <spi_init+0x17c>
      handle[spi_number].hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800b694:	2274      	movs	r2, #116	; 0x74
 800b696:	4362      	muls	r2, r4
 800b698:	4b0c      	ldr	r3, [pc, #48]	; (800b6cc <spi_init+0x214>)
 800b69a:	189b      	adds	r3, r3, r2
 800b69c:	2228      	movs	r2, #40	; 0x28
 800b69e:	61da      	str	r2, [r3, #28]
      break;
 800b6a0:	e7c8      	b.n	800b634 <spi_init+0x17c>
      handle[spi_number].hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800b6a2:	2274      	movs	r2, #116	; 0x74
 800b6a4:	4362      	muls	r2, r4
 800b6a6:	4b09      	ldr	r3, [pc, #36]	; (800b6cc <spi_init+0x214>)
 800b6a8:	189b      	adds	r3, r3, r2
 800b6aa:	2238      	movs	r2, #56	; 0x38
 800b6ac:	61da      	str	r2, [r3, #28]
      break;
 800b6ae:	e7c1      	b.n	800b634 <spi_init+0x17c>
      assert(false);
 800b6b0:	2104      	movs	r1, #4
 800b6b2:	4b14      	ldr	r3, [pc, #80]	; (800b704 <spi_init+0x24c>)
 800b6b4:	4a07      	ldr	r2, [pc, #28]	; (800b6d4 <spi_init+0x21c>)
 800b6b6:	31ff      	adds	r1, #255	; 0xff
 800b6b8:	4807      	ldr	r0, [pc, #28]	; (800b6d8 <spi_init+0x220>)
 800b6ba:	f7fc ffa1 	bl	8008600 <__assert_func>
    handle[spi_number].hspi.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800b6be:	2274      	movs	r2, #116	; 0x74
 800b6c0:	4362      	muls	r2, r4
 800b6c2:	4b02      	ldr	r3, [pc, #8]	; (800b6cc <spi_init+0x214>)
 800b6c4:	189b      	adds	r3, r3, r2
 800b6c6:	2280      	movs	r2, #128	; 0x80
 800b6c8:	621a      	str	r2, [r3, #32]
 800b6ca:	e7bc      	b.n	800b646 <spi_init+0x18e>
 800b6cc:	20002f04 	.word	0x20002f04
 800b6d0:	08019a70 	.word	0x08019a70
 800b6d4:	08019af0 	.word	0x08019af0
 800b6d8:	080199e4 	.word	0x080199e4
 800b6dc:	08019a80 	.word	0x08019a80
 800b6e0:	08019b38 	.word	0x08019b38
 800b6e4:	001e8480 	.word	0x001e8480
 800b6e8:	0007a120 	.word	0x0007a120
 800b6ec:	0001e848 	.word	0x0001e848
 800b6f0:	0003d090 	.word	0x0003d090
 800b6f4:	000f4240 	.word	0x000f4240
 800b6f8:	007a1200 	.word	0x007a1200
 800b6fc:	00f42400 	.word	0x00f42400
 800b700:	003d0900 	.word	0x003d0900
 800b704:	080169c8 	.word	0x080169c8

0800b708 <spi_init_slave>:
spi_slave_handle_t*  spi_init_slave(spi_handle_t* spi, pin_id_t cs_pin, bool cs_is_active_low, bool cs_to_input_if_not_used) {
 800b708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b70a:	46c6      	mov	lr, r8
 800b70c:	b500      	push	{lr}
 800b70e:	4688      	mov	r8, r1
 800b710:	0016      	movs	r6, r2
  assert(next_spi_slave_handle < MAX_SPI_SLAVE_HANDLES);
 800b712:	4a24      	ldr	r2, [pc, #144]	; (800b7a4 <spi_init_slave+0x9c>)
 800b714:	7814      	ldrb	r4, [r2, #0]
 800b716:	2c04      	cmp	r4, #4
 800b718:	d829      	bhi.n	800b76e <spi_init_slave+0x66>
  slave_handle[next_spi_slave_handle] = (spi_slave_handle_t){
 800b71a:	4923      	ldr	r1, [pc, #140]	; (800b7a8 <spi_init_slave+0xa0>)
 800b71c:	0062      	lsls	r2, r4, #1
 800b71e:	1915      	adds	r5, r2, r4
 800b720:	00ad      	lsls	r5, r5, #2
 800b722:	5068      	str	r0, [r5, r1]
 800b724:	1915      	adds	r5, r2, r4
 800b726:	00ad      	lsls	r5, r5, #2
 800b728:	194d      	adds	r5, r1, r5
 800b72a:	4647      	mov	r7, r8
 800b72c:	606f      	str	r7, [r5, #4]
 800b72e:	722e      	strb	r6, [r5, #8]
 800b730:	726b      	strb	r3, [r5, #9]
 800b732:	2700      	movs	r7, #0
 800b734:	72af      	strb	r7, [r5, #10]
  spi->slave[spi->slaves] = &slave_handle[next_spi_slave_handle];
 800b736:	3770      	adds	r7, #112	; 0x70
 800b738:	5dc5      	ldrb	r5, [r0, r7]
 800b73a:	1912      	adds	r2, r2, r4
 800b73c:	0092      	lsls	r2, r2, #2
 800b73e:	188a      	adds	r2, r1, r2
 800b740:	0029      	movs	r1, r5
 800b742:	3116      	adds	r1, #22
 800b744:	0089      	lsls	r1, r1, #2
 800b746:	500a      	str	r2, [r1, r0]
  spi->slaves++;
 800b748:	3501      	adds	r5, #1
 800b74a:	55c5      	strb	r5, [r0, r7]
  next_spi_slave_handle++;
 800b74c:	3401      	adds	r4, #1
 800b74e:	b2e4      	uxtb	r4, r4
 800b750:	4a14      	ldr	r2, [pc, #80]	; (800b7a4 <spi_init_slave+0x9c>)
 800b752:	7014      	strb	r4, [r2, #0]
  if(!cs_to_input_if_not_used)
 800b754:	2b00      	cmp	r3, #0
 800b756:	d011      	beq.n	800b77c <spi_init_slave+0x74>
  return &slave_handle[next_spi_slave_handle-1];
 800b758:	4b12      	ldr	r3, [pc, #72]	; (800b7a4 <spi_init_slave+0x9c>)
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	3b01      	subs	r3, #1
 800b75e:	0058      	lsls	r0, r3, #1
 800b760:	18c0      	adds	r0, r0, r3
 800b762:	0080      	lsls	r0, r0, #2
 800b764:	4b10      	ldr	r3, [pc, #64]	; (800b7a8 <spi_init_slave+0xa0>)
 800b766:	1818      	adds	r0, r3, r0
}
 800b768:	bc04      	pop	{r2}
 800b76a:	4690      	mov	r8, r2
 800b76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert(next_spi_slave_handle < MAX_SPI_SLAVE_HANDLES);
 800b76e:	218b      	movs	r1, #139	; 0x8b
 800b770:	4b0e      	ldr	r3, [pc, #56]	; (800b7ac <spi_init_slave+0xa4>)
 800b772:	4a0f      	ldr	r2, [pc, #60]	; (800b7b0 <spi_init_slave+0xa8>)
 800b774:	0049      	lsls	r1, r1, #1
 800b776:	480f      	ldr	r0, [pc, #60]	; (800b7b4 <spi_init_slave+0xac>)
 800b778:	f7fc ff42 	bl	8008600 <__assert_func>
    configure_cs(&slave_handle[next_spi_slave_handle-1], true);
 800b77c:	3c01      	subs	r4, #1
 800b77e:	0060      	lsls	r0, r4, #1
 800b780:	1904      	adds	r4, r0, r4
 800b782:	00a4      	lsls	r4, r4, #2
 800b784:	4808      	ldr	r0, [pc, #32]	; (800b7a8 <spi_init_slave+0xa0>)
 800b786:	1900      	adds	r0, r0, r4
 800b788:	2101      	movs	r1, #1
 800b78a:	f7ff fd6b 	bl	800b264 <configure_cs>
    if(cs_is_active_low) {
 800b78e:	2e00      	cmp	r6, #0
 800b790:	d003      	beq.n	800b79a <spi_init_slave+0x92>
      hw_gpio_set(cs_pin);
 800b792:	4640      	mov	r0, r8
 800b794:	f7ff f9ee 	bl	800ab74 <hw_gpio_set>
 800b798:	e7de      	b.n	800b758 <spi_init_slave+0x50>
      hw_gpio_clr(cs_pin);
 800b79a:	4640      	mov	r0, r8
 800b79c:	f7ff f9f7 	bl	800ab8e <hw_gpio_clr>
 800b7a0:	e7da      	b.n	800b758 <spi_init_slave+0x50>
 800b7a2:	46c0      	nop			; (mov r8, r8)
 800b7a4:	20002fec 	.word	0x20002fec
 800b7a8:	20002ff0 	.word	0x20002ff0
 800b7ac:	08019a98 	.word	0x08019a98
 800b7b0:	08019afc 	.word	0x08019afc
 800b7b4:	080199e4 	.word	0x080199e4

0800b7b8 <spi_select>:
void spi_select(spi_slave_handle_t* slave) {
 800b7b8:	b510      	push	{r4, lr}
 800b7ba:	0004      	movs	r4, r0
  if( slave->selected ) { return; } // already selected
 800b7bc:	7a83      	ldrb	r3, [r0, #10]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d10a      	bne.n	800b7d8 <spi_select+0x20>
  if(slave->cs_to_input_if_not_used)
 800b7c2:	7a43      	ldrb	r3, [r0, #9]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d108      	bne.n	800b7da <spi_select+0x22>
  if(slave->cs_is_active_low) {     // select slave
 800b7c8:	7a23      	ldrb	r3, [r4, #8]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d009      	beq.n	800b7e2 <spi_select+0x2a>
    hw_gpio_clr(slave->cs);
 800b7ce:	6860      	ldr	r0, [r4, #4]
 800b7d0:	f7ff f9dd 	bl	800ab8e <hw_gpio_clr>
  slave->selected = true;           // mark it
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	72a3      	strb	r3, [r4, #10]
}
 800b7d8:	bd10      	pop	{r4, pc}
    configure_cs(slave, true);
 800b7da:	2101      	movs	r1, #1
 800b7dc:	f7ff fd42 	bl	800b264 <configure_cs>
 800b7e0:	e7f2      	b.n	800b7c8 <spi_select+0x10>
    hw_gpio_set(slave->cs);
 800b7e2:	6860      	ldr	r0, [r4, #4]
 800b7e4:	f7ff f9c6 	bl	800ab74 <hw_gpio_set>
 800b7e8:	e7f4      	b.n	800b7d4 <spi_select+0x1c>

0800b7ea <spi_deselect>:
void spi_deselect(spi_slave_handle_t* slave) {
 800b7ea:	b510      	push	{r4, lr}
 800b7ec:	0004      	movs	r4, r0
  if( ! slave->selected ) { return; } // already deselected
 800b7ee:	7a83      	ldrb	r3, [r0, #10]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d00a      	beq.n	800b80a <spi_deselect+0x20>
  if(slave->cs_is_active_low) {       // deselect slave
 800b7f4:	7a03      	ldrb	r3, [r0, #8]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d008      	beq.n	800b80c <spi_deselect+0x22>
    hw_gpio_set(slave->cs);
 800b7fa:	6840      	ldr	r0, [r0, #4]
 800b7fc:	f7ff f9ba 	bl	800ab74 <hw_gpio_set>
  if(slave->cs_to_input_if_not_used)
 800b800:	7a63      	ldrb	r3, [r4, #9]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d106      	bne.n	800b814 <spi_deselect+0x2a>
  slave->selected = false;            // unmark it
 800b806:	2300      	movs	r3, #0
 800b808:	72a3      	strb	r3, [r4, #10]
}
 800b80a:	bd10      	pop	{r4, pc}
    hw_gpio_clr(slave->cs);
 800b80c:	6840      	ldr	r0, [r0, #4]
 800b80e:	f7ff f9be 	bl	800ab8e <hw_gpio_clr>
 800b812:	e7f5      	b.n	800b800 <spi_deselect+0x16>
    configure_cs(slave, false);
 800b814:	2100      	movs	r1, #0
 800b816:	0020      	movs	r0, r4
 800b818:	f7ff fd24 	bl	800b264 <configure_cs>
 800b81c:	e7f3      	b.n	800b806 <spi_deselect+0x1c>

0800b81e <spi_exchange_byte>:
unsigned char spi_exchange_byte(spi_slave_handle_t* slave, unsigned char data) {
 800b81e:	b510      	push	{r4, lr}
 800b820:	b086      	sub	sp, #24
 800b822:	000b      	movs	r3, r1
 800b824:	210f      	movs	r1, #15
 800b826:	4469      	add	r1, sp
 800b828:	700b      	strb	r3, [r1, #0]
  HAL_SPI_TransmitReceive(&slave->spi->hspi, &data, &returnData, 1, HAL_MAX_DELAY);
 800b82a:	6800      	ldr	r0, [r0, #0]
 800b82c:	2417      	movs	r4, #23
 800b82e:	446c      	add	r4, sp
 800b830:	2301      	movs	r3, #1
 800b832:	425b      	negs	r3, r3
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	3302      	adds	r3, #2
 800b838:	0022      	movs	r2, r4
 800b83a:	f7fe fa07 	bl	8009c4c <HAL_SPI_TransmitReceive>
  return returnData;
 800b83e:	7820      	ldrb	r0, [r4, #0]
}
 800b840:	b006      	add	sp, #24
 800b842:	bd10      	pop	{r4, pc}

0800b844 <spi_exchange_bytes>:

void spi_exchange_bytes(spi_slave_handle_t* slave, uint8_t* TxData, uint8_t* RxData, size_t length) {
 800b844:	b570      	push	{r4, r5, r6, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	1e14      	subs	r4, r2, #0
  // TODO replace HAL calls with direct registry access for performance / code size ?
  if( RxData != NULL && TxData != NULL ) {
 800b84a:	d015      	beq.n	800b878 <spi_exchange_bytes+0x34>
 800b84c:	2900      	cmp	r1, #0
 800b84e:	d013      	beq.n	800b878 <spi_exchange_bytes+0x34>
    if(slave->spi->hspi.Init.Direction == SPI_DIRECTION_1LINE) //1line read bytes
 800b850:	6805      	ldr	r5, [r0, #0]
 800b852:	2280      	movs	r2, #128	; 0x80
 800b854:	0212      	lsls	r2, r2, #8
 800b856:	68ae      	ldr	r6, [r5, #8]
 800b858:	4296      	cmp	r6, r2
 800b85a:	d009      	beq.n	800b870 <spi_exchange_bytes+0x2c>
      spi_read_3wire_bytes(slave, TxData, RxData, length);
    else // two way transmission
      HAL_SPI_TransmitReceive(&slave->spi->hspi, TxData, RxData, length, HAL_MAX_DELAY);
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	2201      	movs	r2, #1
 800b860:	4252      	negs	r2, r2
 800b862:	9200      	str	r2, [sp, #0]
 800b864:	0022      	movs	r2, r4
 800b866:	0028      	movs	r0, r5
 800b868:	f7fe f9f0 	bl	8009c4c <HAL_SPI_TransmitReceive>
      HAL_SPI_Receive(&slave->spi->hspi, RxData, length, HAL_MAX_DELAY);
    } else {
      assert(false); //1line direction should exchange address as txData and the buffer as rxdata
    }
  }
}
 800b86c:	b002      	add	sp, #8
 800b86e:	bd70      	pop	{r4, r5, r6, pc}
      spi_read_3wire_bytes(slave, TxData, RxData, length);
 800b870:	0022      	movs	r2, r4
 800b872:	f7ff fd39 	bl	800b2e8 <spi_read_3wire_bytes>
 800b876:	e7f9      	b.n	800b86c <spi_exchange_bytes+0x28>
  } else if( RxData == NULL && TxData != NULL ) {    // send only
 800b878:	2c00      	cmp	r4, #0
 800b87a:	d00e      	beq.n	800b89a <spi_exchange_bytes+0x56>
  } else if( RxData != NULL && TxData == NULL ) {   // receive only
 800b87c:	2c00      	cmp	r4, #0
 800b87e:	d0f5      	beq.n	800b86c <spi_exchange_bytes+0x28>
 800b880:	2900      	cmp	r1, #0
 800b882:	d1f3      	bne.n	800b86c <spi_exchange_bytes+0x28>
    if(slave->spi->hspi.Init.Direction == SPI_DIRECTION_2LINES) {
 800b884:	6800      	ldr	r0, [r0, #0]
 800b886:	6882      	ldr	r2, [r0, #8]
 800b888:	2a00      	cmp	r2, #0
 800b88a:	d10f      	bne.n	800b8ac <spi_exchange_bytes+0x68>
      HAL_SPI_Receive(&slave->spi->hspi, RxData, length, HAL_MAX_DELAY);
 800b88c:	3101      	adds	r1, #1
 800b88e:	b29a      	uxth	r2, r3
 800b890:	424b      	negs	r3, r1
 800b892:	0021      	movs	r1, r4
 800b894:	f7fe fbb0 	bl	8009ff8 <HAL_SPI_Receive>
 800b898:	e7e8      	b.n	800b86c <spi_exchange_bytes+0x28>
  } else if( RxData == NULL && TxData != NULL ) {    // send only
 800b89a:	2900      	cmp	r1, #0
 800b89c:	d0ee      	beq.n	800b87c <spi_exchange_bytes+0x38>
    HAL_SPI_Transmit(&slave->spi->hspi, TxData, length, HAL_MAX_DELAY);
 800b89e:	6800      	ldr	r0, [r0, #0]
 800b8a0:	3401      	adds	r4, #1
 800b8a2:	b29a      	uxth	r2, r3
 800b8a4:	4263      	negs	r3, r4
 800b8a6:	f7fe f8e1 	bl	8009a6c <HAL_SPI_Transmit>
 800b8aa:	e7df      	b.n	800b86c <spi_exchange_bytes+0x28>
      assert(false); //1line direction should exchange address as txData and the buffer as rxdata
 800b8ac:	21c6      	movs	r1, #198	; 0xc6
 800b8ae:	4b03      	ldr	r3, [pc, #12]	; (800b8bc <spi_exchange_bytes+0x78>)
 800b8b0:	4a03      	ldr	r2, [pc, #12]	; (800b8c0 <spi_exchange_bytes+0x7c>)
 800b8b2:	0049      	lsls	r1, r1, #1
 800b8b4:	4803      	ldr	r0, [pc, #12]	; (800b8c4 <spi_exchange_bytes+0x80>)
 800b8b6:	f7fc fea3 	bl	8008600 <__assert_func>
 800b8ba:	46c0      	nop			; (mov r8, r8)
 800b8bc:	080169c8 	.word	0x080169c8
 800b8c0:	08019b24 	.word	0x08019b24
 800b8c4:	080199e4 	.word	0x080199e4

0800b8c8 <gpio_config_save>:
static uint32_t gpioe_moder;
static uint32_t gpioh_moder;
static uint32_t iopenr; // GPIO clock enable register

static void gpio_config_save() {
  gpioa_moder = GPIOA->MODER;
 800b8c8:	23a0      	movs	r3, #160	; 0xa0
 800b8ca:	05db      	lsls	r3, r3, #23
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	4b0d      	ldr	r3, [pc, #52]	; (800b904 <gpio_config_save+0x3c>)
 800b8d0:	601a      	str	r2, [r3, #0]
  gpiob_moder = GPIOB->MODER;
 800b8d2:	4b0d      	ldr	r3, [pc, #52]	; (800b908 <gpio_config_save+0x40>)
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	4b0d      	ldr	r3, [pc, #52]	; (800b90c <gpio_config_save+0x44>)
 800b8d8:	601a      	str	r2, [r3, #0]
  gpioc_moder = GPIOC->MODER;
 800b8da:	4b0d      	ldr	r3, [pc, #52]	; (800b910 <gpio_config_save+0x48>)
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	4b0d      	ldr	r3, [pc, #52]	; (800b914 <gpio_config_save+0x4c>)
 800b8e0:	601a      	str	r2, [r3, #0]
  gpiod_moder = GPIOD->MODER;
 800b8e2:	4b0d      	ldr	r3, [pc, #52]	; (800b918 <gpio_config_save+0x50>)
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	4b0d      	ldr	r3, [pc, #52]	; (800b91c <gpio_config_save+0x54>)
 800b8e8:	601a      	str	r2, [r3, #0]
  gpioe_moder = GPIOE->MODER;
 800b8ea:	4b0d      	ldr	r3, [pc, #52]	; (800b920 <gpio_config_save+0x58>)
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	4b0d      	ldr	r3, [pc, #52]	; (800b924 <gpio_config_save+0x5c>)
 800b8f0:	601a      	str	r2, [r3, #0]
  gpioh_moder = GPIOH->MODER;
 800b8f2:	4b0d      	ldr	r3, [pc, #52]	; (800b928 <gpio_config_save+0x60>)
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	4b0d      	ldr	r3, [pc, #52]	; (800b92c <gpio_config_save+0x64>)
 800b8f8:	601a      	str	r2, [r3, #0]

  iopenr = RCC->IOPENR;
 800b8fa:	4b0d      	ldr	r3, [pc, #52]	; (800b930 <gpio_config_save+0x68>)
 800b8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8fe:	4b0d      	ldr	r3, [pc, #52]	; (800b934 <gpio_config_save+0x6c>)
 800b900:	601a      	str	r2, [r3, #0]
}
 800b902:	4770      	bx	lr
 800b904:	2000302c 	.word	0x2000302c
 800b908:	50000400 	.word	0x50000400
 800b90c:	20003030 	.word	0x20003030
 800b910:	50000800 	.word	0x50000800
 800b914:	20003034 	.word	0x20003034
 800b918:	50000c00 	.word	0x50000c00
 800b91c:	20003038 	.word	0x20003038
 800b920:	50001000 	.word	0x50001000
 800b924:	2000303c 	.word	0x2000303c
 800b928:	50001c00 	.word	0x50001c00
 800b92c:	20003040 	.word	0x20003040
 800b930:	40021000 	.word	0x40021000
 800b934:	20003044 	.word	0x20003044

0800b938 <gpio_config_restore>:

static void gpio_config_restore() {
 800b938:	b086      	sub	sp, #24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b93a:	4b30      	ldr	r3, [pc, #192]	; (800b9fc <gpio_config_restore+0xc4>)
 800b93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b93e:	2101      	movs	r1, #1
 800b940:	430a      	orrs	r2, r1
 800b942:	62da      	str	r2, [r3, #44]	; 0x2c
 800b944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b946:	400a      	ands	r2, r1
 800b948:	9200      	str	r2, [sp, #0]
 800b94a:	9a00      	ldr	r2, [sp, #0]
  GPIOA->MODER = gpioa_moder;
 800b94c:	4a2c      	ldr	r2, [pc, #176]	; (800ba00 <gpio_config_restore+0xc8>)
 800b94e:	6810      	ldr	r0, [r2, #0]
 800b950:	22a0      	movs	r2, #160	; 0xa0
 800b952:	05d2      	lsls	r2, r2, #23
 800b954:	6010      	str	r0, [r2, #0]
  __HAL_RCC_GPIOA_CLK_DISABLE();
 800b956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b958:	438a      	bics	r2, r1
 800b95a:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b95e:	3101      	adds	r1, #1
 800b960:	430a      	orrs	r2, r1
 800b962:	62da      	str	r2, [r3, #44]	; 0x2c
 800b964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b966:	400a      	ands	r2, r1
 800b968:	9201      	str	r2, [sp, #4]
 800b96a:	9a01      	ldr	r2, [sp, #4]
  GPIOB->MODER = gpiob_moder;
 800b96c:	4a25      	ldr	r2, [pc, #148]	; (800ba04 <gpio_config_restore+0xcc>)
 800b96e:	6810      	ldr	r0, [r2, #0]
 800b970:	4a25      	ldr	r2, [pc, #148]	; (800ba08 <gpio_config_restore+0xd0>)
 800b972:	6010      	str	r0, [r2, #0]
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800b974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b976:	438a      	bics	r2, r1
 800b978:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97c:	3102      	adds	r1, #2
 800b97e:	430a      	orrs	r2, r1
 800b980:	62da      	str	r2, [r3, #44]	; 0x2c
 800b982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b984:	400a      	ands	r2, r1
 800b986:	9202      	str	r2, [sp, #8]
 800b988:	9a02      	ldr	r2, [sp, #8]
  GPIOC->MODER = gpioc_moder;
 800b98a:	4a20      	ldr	r2, [pc, #128]	; (800ba0c <gpio_config_restore+0xd4>)
 800b98c:	6810      	ldr	r0, [r2, #0]
 800b98e:	4a20      	ldr	r2, [pc, #128]	; (800ba10 <gpio_config_restore+0xd8>)
 800b990:	6010      	str	r0, [r2, #0]
  __HAL_RCC_GPIOC_CLK_DISABLE();
 800b992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b994:	438a      	bics	r2, r1
 800b996:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b99a:	3104      	adds	r1, #4
 800b99c:	430a      	orrs	r2, r1
 800b99e:	62da      	str	r2, [r3, #44]	; 0x2c
 800b9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a2:	400a      	ands	r2, r1
 800b9a4:	9203      	str	r2, [sp, #12]
 800b9a6:	9a03      	ldr	r2, [sp, #12]
  GPIOD->MODER = gpiod_moder;
 800b9a8:	4a1a      	ldr	r2, [pc, #104]	; (800ba14 <gpio_config_restore+0xdc>)
 800b9aa:	6810      	ldr	r0, [r2, #0]
 800b9ac:	4a1a      	ldr	r2, [pc, #104]	; (800ba18 <gpio_config_restore+0xe0>)
 800b9ae:	6010      	str	r0, [r2, #0]
  __HAL_RCC_GPIOD_CLK_DISABLE();
 800b9b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b2:	438a      	bics	r2, r1
 800b9b4:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b9b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b8:	3108      	adds	r1, #8
 800b9ba:	430a      	orrs	r2, r1
 800b9bc:	62da      	str	r2, [r3, #44]	; 0x2c
 800b9be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c0:	400a      	ands	r2, r1
 800b9c2:	9204      	str	r2, [sp, #16]
 800b9c4:	9a04      	ldr	r2, [sp, #16]
  GPIOE->MODER = gpioe_moder;
 800b9c6:	4a15      	ldr	r2, [pc, #84]	; (800ba1c <gpio_config_restore+0xe4>)
 800b9c8:	6810      	ldr	r0, [r2, #0]
 800b9ca:	4a15      	ldr	r2, [pc, #84]	; (800ba20 <gpio_config_restore+0xe8>)
 800b9cc:	6010      	str	r0, [r2, #0]
  __HAL_RCC_GPIOE_CLK_DISABLE();
 800b9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d0:	438a      	bics	r2, r1
 800b9d2:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d6:	3170      	adds	r1, #112	; 0x70
 800b9d8:	430a      	orrs	r2, r1
 800b9da:	62da      	str	r2, [r3, #44]	; 0x2c
 800b9dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9de:	400a      	ands	r2, r1
 800b9e0:	9205      	str	r2, [sp, #20]
 800b9e2:	9a05      	ldr	r2, [sp, #20]
  GPIOH->MODER = gpioh_moder;
 800b9e4:	4a0f      	ldr	r2, [pc, #60]	; (800ba24 <gpio_config_restore+0xec>)
 800b9e6:	6810      	ldr	r0, [r2, #0]
 800b9e8:	4a0f      	ldr	r2, [pc, #60]	; (800ba28 <gpio_config_restore+0xf0>)
 800b9ea:	6010      	str	r0, [r2, #0]
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800b9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ee:	438a      	bics	r2, r1
 800b9f0:	62da      	str	r2, [r3, #44]	; 0x2c

  RCC->IOPENR = iopenr;
 800b9f2:	4a0e      	ldr	r2, [pc, #56]	; (800ba2c <gpio_config_restore+0xf4>)
 800b9f4:	6812      	ldr	r2, [r2, #0]
 800b9f6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b9f8:	b006      	add	sp, #24
 800b9fa:	4770      	bx	lr
 800b9fc:	40021000 	.word	0x40021000
 800ba00:	2000302c 	.word	0x2000302c
 800ba04:	20003030 	.word	0x20003030
 800ba08:	50000400 	.word	0x50000400
 800ba0c:	20003034 	.word	0x20003034
 800ba10:	50000800 	.word	0x50000800
 800ba14:	20003038 	.word	0x20003038
 800ba18:	50000c00 	.word	0x50000c00
 800ba1c:	2000303c 	.word	0x2000303c
 800ba20:	50001000 	.word	0x50001000
 800ba24:	20003040 	.word	0x20003040
 800ba28:	50001c00 	.word	0x50001c00
 800ba2c:	20003044 	.word	0x20003044

0800ba30 <hw_system_reboot_reason>:

system_reboot_reason_t hw_system_reboot_reason()
{
  return reboot_reason;
 800ba30:	4b01      	ldr	r3, [pc, #4]	; (800ba38 <hw_system_reboot_reason+0x8>)
 800ba32:	7818      	ldrb	r0, [r3, #0]
}
 800ba34:	4770      	bx	lr
 800ba36:	46c0      	nop			; (mov r8, r8)
 800ba38:	20000574 	.word	0x20000574

0800ba3c <hw_system_save_reboot_reason>:

void hw_system_save_reboot_reason()
{
 800ba3c:	b510      	push	{r4, lr}
  reboot_reason = REBOOT_REASON_OTHER;
 800ba3e:	4b1b      	ldr	r3, [pc, #108]	; (800baac <hw_system_save_reboot_reason+0x70>)
 800ba40:	22fe      	movs	r2, #254	; 0xfe
 800ba42:	701a      	strb	r2, [r3, #0]

  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800ba44:	4b1a      	ldr	r3, [pc, #104]	; (800bab0 <hw_system_save_reboot_reason+0x74>)
 800ba46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	db11      	blt.n	800ba70 <hw_system_save_reboot_reason+0x34>
  {
      assert(false); // not expected
  }
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) || __HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800ba4c:	4b18      	ldr	r3, [pc, #96]	; (800bab0 <hw_system_save_reboot_reason+0x74>)
 800ba4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba50:	005b      	lsls	r3, r3, #1
 800ba52:	d403      	bmi.n	800ba5c <hw_system_save_reboot_reason+0x20>
 800ba54:	4b16      	ldr	r3, [pc, #88]	; (800bab0 <hw_system_save_reboot_reason+0x74>)
 800ba56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	d50f      	bpl.n	800ba7c <hw_system_save_reboot_reason+0x40>
  {
      reboot_reason = REBOOT_REASON_WDT;
 800ba5c:	4b13      	ldr	r3, [pc, #76]	; (800baac <hw_system_save_reboot_reason+0x70>)
 800ba5e:	2201      	movs	r2, #1
 800ba60:	701a      	strb	r2, [r3, #0]
  else
  {
      reboot_reason = REBOOT_REASON_OTHER; // TODO
  }

  __HAL_RCC_CLEAR_RESET_FLAGS();
 800ba62:	4a13      	ldr	r2, [pc, #76]	; (800bab0 <hw_system_save_reboot_reason+0x74>)
 800ba64:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800ba66:	2380      	movs	r3, #128	; 0x80
 800ba68:	041b      	lsls	r3, r3, #16
 800ba6a:	430b      	orrs	r3, r1
 800ba6c:	6513      	str	r3, [r2, #80]	; 0x50
}
 800ba6e:	bd10      	pop	{r4, pc}
      assert(false); // not expected
 800ba70:	4b10      	ldr	r3, [pc, #64]	; (800bab4 <hw_system_save_reboot_reason+0x78>)
 800ba72:	4a11      	ldr	r2, [pc, #68]	; (800bab8 <hw_system_save_reboot_reason+0x7c>)
 800ba74:	2160      	movs	r1, #96	; 0x60
 800ba76:	4811      	ldr	r0, [pc, #68]	; (800babc <hw_system_save_reboot_reason+0x80>)
 800ba78:	f7fc fdc2 	bl	8008600 <__assert_func>
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800ba7c:	4b0c      	ldr	r3, [pc, #48]	; (800bab0 <hw_system_save_reboot_reason+0x74>)
 800ba7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba80:	00db      	lsls	r3, r3, #3
 800ba82:	d503      	bpl.n	800ba8c <hw_system_save_reboot_reason+0x50>
      reboot_reason = REBOOT_REASON_SOFTWARE_REBOOT;
 800ba84:	4b09      	ldr	r3, [pc, #36]	; (800baac <hw_system_save_reboot_reason+0x70>)
 800ba86:	2202      	movs	r2, #2
 800ba88:	701a      	strb	r2, [r3, #0]
 800ba8a:	e7ea      	b.n	800ba62 <hw_system_save_reboot_reason+0x26>
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 800ba8c:	4b08      	ldr	r3, [pc, #32]	; (800bab0 <hw_system_save_reboot_reason+0x74>)
 800ba8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba90:	011b      	lsls	r3, r3, #4
 800ba92:	d503      	bpl.n	800ba9c <hw_system_save_reboot_reason+0x60>
      reboot_reason = REBOOT_REASON_POR;
 800ba94:	4b05      	ldr	r3, [pc, #20]	; (800baac <hw_system_save_reboot_reason+0x70>)
 800ba96:	2200      	movs	r2, #0
 800ba98:	701a      	strb	r2, [r3, #0]
 800ba9a:	e7e2      	b.n	800ba62 <hw_system_save_reboot_reason+0x26>
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 800ba9c:	4b04      	ldr	r3, [pc, #16]	; (800bab0 <hw_system_save_reboot_reason+0x74>)
 800ba9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baa0:	015b      	lsls	r3, r3, #5
 800baa2:	d5de      	bpl.n	800ba62 <hw_system_save_reboot_reason+0x26>
      reboot_reason = REBOOT_REASON_RESET_PIN;
 800baa4:	4b01      	ldr	r3, [pc, #4]	; (800baac <hw_system_save_reboot_reason+0x70>)
 800baa6:	2203      	movs	r2, #3
 800baa8:	701a      	strb	r2, [r3, #0]
 800baaa:	e7da      	b.n	800ba62 <hw_system_save_reboot_reason+0x26>
 800baac:	20000574 	.word	0x20000574
 800bab0:	40021000 	.word	0x40021000
 800bab4:	080169c8 	.word	0x080169c8
 800bab8:	08019c00 	.word	0x08019c00
 800babc:	08019b70 	.word	0x08019b70

0800bac0 <hw_enter_lowpower_mode>:

void hw_enter_lowpower_mode(uint8_t mode)
{
 800bac0:	b530      	push	{r4, r5, lr}
 800bac2:	b083      	sub	sp, #12
 800bac4:	0004      	movs	r4, r0

  DPRINT("sleep (mode %i) @ %i", mode, hw_timer_getvalue(0));
  start_atomic();
 800bac6:	f7fe ff6f 	bl	800a9a8 <start_atomic>

  gpio_config_save();
 800baca:	f7ff fefd 	bl	800b8c8 <gpio_config_save>
  hw_deinit_pheriperals();
 800bace:	e000      	b.n	800bad2 <hw_enter_lowpower_mode+0x12>
 800bad0:	bf00      	nop
 800bad2:	f3bf 8f4f 	dsb	sy

  __DSB();
  switch (mode)
 800bad6:	2c02      	cmp	r4, #2
 800bad8:	d035      	beq.n	800bb46 <hw_enter_lowpower_mode+0x86>
 800bada:	d81a      	bhi.n	800bb12 <hw_enter_lowpower_mode+0x52>
 800badc:	2c00      	cmp	r4, #0
 800bade:	d022      	beq.n	800bb26 <hw_enter_lowpower_mode+0x66>
 800bae0:	2c01      	cmp	r4, #1
 800bae2:	d160      	bne.n	800bba6 <hw_enter_lowpower_mode+0xe6>
#ifndef FRAMEWORK_DEBUG_ENABLE_SWD
      __HAL_FLASH_SLEEP_POWERDOWN_ENABLE(); // TODO test
      // we can't do this in debug mode since DBGMCU the core is always clocked and will not wait for flash to be ready
#endif

      __HAL_RCC_PWR_CLK_ENABLE(); // to be able to change PWR registers
 800bae4:	4a33      	ldr	r2, [pc, #204]	; (800bbb4 <hw_enter_lowpower_mode+0xf4>)
 800bae6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800bae8:	2380      	movs	r3, #128	; 0x80
 800baea:	055b      	lsls	r3, r3, #21
 800baec:	430b      	orrs	r3, r1
 800baee:	6393      	str	r3, [r2, #56]	; 0x38

      PWR->CR |= (PWR_CR_ULP & PWR_CR_FWU & PWR_CR_PVDE); // we don't need Vrefint and PVD
 800baf0:	4b31      	ldr	r3, [pc, #196]	; (800bbb8 <hw_enter_lowpower_mode+0xf8>)
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	601a      	str	r2, [r3, #0]
      //RCC->CFGR |= RCC_CFGR_STOPWUCK; // use HSI16 after wake up
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	2104      	movs	r1, #4
 800bafa:	430a      	orrs	r2, r1
 800bafc:	601a      	str	r2, [r3, #0]

      DPRINT("EXTI->PR %x", EXTI->PR);
      //assert(EXTI->PR == 0);
      assert((PWR->CSR & PWR_CSR_WUF) == 0);
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	07db      	lsls	r3, r3, #31
 800bb02:	d41a      	bmi.n	800bb3a <hw_enter_lowpower_mode+0x7a>

      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800bb04:	2101      	movs	r1, #1
 800bb06:	2001      	movs	r0, #1
 800bb08:	f7fc ffec 	bl	8008ae4 <HAL_PWR_EnterSTOPMode>

      // after resuming from STOP mode we should reinit the clock config
      stm32_common_mcu_init();
 800bb0c:	f7ff fb40 	bl	800b190 <stm32_common_mcu_init>
      break;
 800bb10:	e001      	b.n	800bb16 <hw_enter_lowpower_mode+0x56>
  switch (mode)
 800bb12:	2cff      	cmp	r4, #255	; 0xff
 800bb14:	d147      	bne.n	800bba6 <hw_enter_lowpower_mode+0xe6>
      break;
    default:
      assert(false);
  }

  gpio_config_restore();
 800bb16:	f7ff ff0f 	bl	800b938 <gpio_config_restore>
  hw_reinit_pheriperals();
 800bb1a:	e000      	b.n	800bb1e <hw_enter_lowpower_mode+0x5e>
 800bb1c:	bf00      	nop
  end_atomic();
 800bb1e:	f7fe ff51 	bl	800a9c4 <end_atomic>
  DPRINT("wake up @ %i", hw_timer_getvalue(0) );
}
 800bb22:	b003      	add	sp, #12
 800bb24:	bd30      	pop	{r4, r5, pc}
      __HAL_FLASH_SLEEP_POWERDOWN_DISABLE(); //TODO Not optimised, without this Sleepmode 
 800bb26:	4a25      	ldr	r2, [pc, #148]	; (800bbbc <hw_enter_lowpower_mode+0xfc>)
 800bb28:	6813      	ldr	r3, [r2, #0]
 800bb2a:	2108      	movs	r1, #8
 800bb2c:	438b      	bics	r3, r1
 800bb2e:	6013      	str	r3, [r2, #0]
      HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800bb30:	3907      	subs	r1, #7
 800bb32:	2000      	movs	r0, #0
 800bb34:	f7fc ffbe 	bl	8008ab4 <HAL_PWR_EnterSLEEPMode>
      break;
 800bb38:	e7ed      	b.n	800bb16 <hw_enter_lowpower_mode+0x56>
      assert((PWR->CSR & PWR_CSR_WUF) == 0);
 800bb3a:	4b21      	ldr	r3, [pc, #132]	; (800bbc0 <hw_enter_lowpower_mode+0x100>)
 800bb3c:	4a21      	ldr	r2, [pc, #132]	; (800bbc4 <hw_enter_lowpower_mode+0x104>)
 800bb3e:	3194      	adds	r1, #148	; 0x94
 800bb40:	4821      	ldr	r0, [pc, #132]	; (800bbc8 <hw_enter_lowpower_mode+0x108>)
 800bb42:	f7fc fd5d 	bl	8008600 <__assert_func>
       __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb46:	4c1b      	ldr	r4, [pc, #108]	; (800bbb4 <hw_enter_lowpower_mode+0xf4>)
 800bb48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb52:	4013      	ands	r3, r2
 800bb54:	9301      	str	r3, [sp, #4]
 800bb56:	9b01      	ldr	r3, [sp, #4]
         GPIOA->MODER = 0xFFFFFFFF;
 800bb58:	23a0      	movs	r3, #160	; 0xa0
 800bb5a:	05db      	lsls	r3, r3, #23
 800bb5c:	2101      	movs	r1, #1
 800bb5e:	4249      	negs	r1, r1
 800bb60:	6019      	str	r1, [r3, #0]
       __HAL_RCC_GPIOA_CLK_DISABLE();
 800bb62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb64:	4393      	bics	r3, r2
 800bb66:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PWR_CLK_ENABLE();
 800bb68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bb6a:	2380      	movs	r3, #128	; 0x80
 800bb6c:	055b      	lsls	r3, r3, #21
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	63a3      	str	r3, [r4, #56]	; 0x38
      PWR->CR |= (PWR_CR_ULP & PWR_CR_FWU & PWR_CR_PVDE);
 800bb72:	4d11      	ldr	r5, [pc, #68]	; (800bbb8 <hw_enter_lowpower_mode+0xf8>)
 800bb74:	682b      	ldr	r3, [r5, #0]
 800bb76:	602b      	str	r3, [r5, #0]
      HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 800bb78:	2080      	movs	r0, #128	; 0x80
 800bb7a:	0040      	lsls	r0, r0, #1
 800bb7c:	f7fc ff92 	bl	8008aa4 <HAL_PWR_DisableWakeUpPin>
      HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2);
 800bb80:	2080      	movs	r0, #128	; 0x80
 800bb82:	0080      	lsls	r0, r0, #2
 800bb84:	f7fc ff8e 	bl	8008aa4 <HAL_PWR_DisableWakeUpPin>
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800bb88:	682b      	ldr	r3, [r5, #0]
 800bb8a:	2204      	movs	r2, #4
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	602b      	str	r3, [r5, #0]
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 800bb90:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bb92:	4a0e      	ldr	r2, [pc, #56]	; (800bbcc <hw_enter_lowpower_mode+0x10c>)
 800bb94:	4013      	ands	r3, r2
 800bb96:	6523      	str	r3, [r4, #80]	; 0x50
 800bb98:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bb9a:	4a0d      	ldr	r2, [pc, #52]	; (800bbd0 <hw_enter_lowpower_mode+0x110>)
 800bb9c:	4013      	ands	r3, r2
 800bb9e:	6523      	str	r3, [r4, #80]	; 0x50
      HAL_PWR_EnterSTANDBYMode();
 800bba0:	f7fc ffbe 	bl	8008b20 <HAL_PWR_EnterSTANDBYMode>
 800bba4:	e7b7      	b.n	800bb16 <hw_enter_lowpower_mode+0x56>
      assert(false);
 800bba6:	4b0b      	ldr	r3, [pc, #44]	; (800bbd4 <hw_enter_lowpower_mode+0x114>)
 800bba8:	4a06      	ldr	r2, [pc, #24]	; (800bbc4 <hw_enter_lowpower_mode+0x104>)
 800bbaa:	21ca      	movs	r1, #202	; 0xca
 800bbac:	4806      	ldr	r0, [pc, #24]	; (800bbc8 <hw_enter_lowpower_mode+0x108>)
 800bbae:	f7fc fd27 	bl	8008600 <__assert_func>
 800bbb2:	46c0      	nop			; (mov r8, r8)
 800bbb4:	40021000 	.word	0x40021000
 800bbb8:	40007000 	.word	0x40007000
 800bbbc:	40022000 	.word	0x40022000
 800bbc0:	08019bc8 	.word	0x08019bc8
 800bbc4:	08019c20 	.word	0x08019c20
 800bbc8:	08019b70 	.word	0x08019b70
 800bbcc:	fffffeff 	.word	0xfffffeff
 800bbd0:	fffffbff 	.word	0xfffffbff
 800bbd4:	080169c8 	.word	0x080169c8

0800bbd8 <hw_get_unique_id>:

uint64_t hw_get_unique_id()
{
 800bbd8:	b510      	push	{r4, lr}
    // note we are ignoring WAF_NUM and LOT_NUM[55:32] to reduce the 96 bits UID to 64 bits
    uint64_t uid = *((uint32_t*)(UID_BASE + 0x04U)); // LOT_NUM[31:0]
    uid = uid << 32;
 800bbda:	2200      	movs	r2, #0
 800bbdc:	4903      	ldr	r1, [pc, #12]	; (800bbec <hw_get_unique_id+0x14>)
 800bbde:	680b      	ldr	r3, [r1, #0]
    uid += *((uint32_t*)(UID_BASE + 0x14U)); // unique ID
 800bbe0:	4c03      	ldr	r4, [pc, #12]	; (800bbf0 <hw_get_unique_id+0x18>)
 800bbe2:	6820      	ldr	r0, [r4, #0]
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	1880      	adds	r0, r0, r2
 800bbe8:	4159      	adcs	r1, r3
    return uid;
}
 800bbea:	bd10      	pop	{r4, pc}
 800bbec:	1ff80054 	.word	0x1ff80054
 800bbf0:	1ff80064 	.word	0x1ff80064

0800bbf4 <hw_busy_wait>:

void hw_busy_wait(int16_t us)
{
 800bbf4:	b510      	push	{r4, lr}
 800bbf6:	0004      	movs	r4, r0
  // note: measure this, may switch to timer later if more accuracy is needed.
  uint32_t counter = us * (HAL_RCC_GetSysClockFreq() / 1000000);
 800bbf8:	f7fd fabc 	bl	8009174 <HAL_RCC_GetSysClockFreq>
 800bbfc:	4905      	ldr	r1, [pc, #20]	; (800bc14 <hw_busy_wait+0x20>)
 800bbfe:	f005 ff87 	bl	8011b10 <__udivsi3>
 800bc02:	4360      	muls	r0, r4
  uint32_t n = counter/4;
 800bc04:	0880      	lsrs	r0, r0, #2
  __asm volatile (
 800bc06:	f3bf 8f5f 	dmb	sy
 800bc0a:	3801      	subs	r0, #1
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d1fc      	bne.n	800bc0a <hw_busy_wait+0x16>
    " 1:\n"
    " sub %[n], %[n], #1\n"
    " cmp %[n], #0\n"
    " bne 1b"
  : [n] "+r" (n) :: "cc");
}
 800bc10:	bd10      	pop	{r4, pc}
 800bc12:	46c0      	nop			; (mov r8, r8)
 800bc14:	000f4240 	.word	0x000f4240

0800bc18 <hw_reset>:

void hw_reset()
{
 800bc18:	b510      	push	{r4, lr}
  HAL_NVIC_SystemReset();
 800bc1a:	f7fc fdeb 	bl	80087f4 <HAL_NVIC_SystemReset>
}
 800bc1e:	bd10      	pop	{r4, pc}

0800bc20 <__hardfault_handler>:

void __hardfault_handler(char* reason) {
 800bc20:	b510      	push	{r4, lr}
 800bc22:	0001      	movs	r1, r0
  log_print_string("HardFault occured: %s\n", reason);
 800bc24:	4804      	ldr	r0, [pc, #16]	; (800bc38 <__hardfault_handler+0x18>)
 800bc26:	f003 f9c1 	bl	800efac <log_print_string>
  assert(false);
 800bc2a:	4b04      	ldr	r3, [pc, #16]	; (800bc3c <__hardfault_handler+0x1c>)
 800bc2c:	4a04      	ldr	r2, [pc, #16]	; (800bc40 <__hardfault_handler+0x20>)
 800bc2e:	21f1      	movs	r1, #241	; 0xf1
 800bc30:	4804      	ldr	r0, [pc, #16]	; (800bc44 <__hardfault_handler+0x24>)
 800bc32:	f7fc fce5 	bl	8008600 <__assert_func>
 800bc36:	46c0      	nop			; (mov r8, r8)
 800bc38:	08019be8 	.word	0x08019be8
 800bc3c:	080169c8 	.word	0x080169c8
 800bc40:	08019c38 	.word	0x08019c38
 800bc44:	08019b70 	.word	0x08019b70

0800bc48 <HardFault_Handler>:
void HardFault_Handler()
{
  // implemented in asm and as a naked function, to make sure we are not using the stack
  // in case this is originating from a stack overflow.
  // Checks if the stack has overflown, and if yes, reset the stack pointer and call assert()
  __asm volatile (
 800bc48:	4668      	mov	r0, sp
 800bc4a:	490b      	ldr	r1, [pc, #44]	; (800bc78 <str_hardfault+0xa>)
 800bc4c:	4288      	cmp	r0, r1
 800bc4e:	d204      	bcs.n	800bc5a <stack_ok>
 800bc50:	480a      	ldr	r0, [pc, #40]	; (800bc7c <str_hardfault+0xe>)
 800bc52:	4685      	mov	sp, r0
 800bc54:	480a      	ldr	r0, [pc, #40]	; (800bc80 <str_hardfault+0x12>)
 800bc56:	2101      	movs	r1, #1
 800bc58:	e7e2      	b.n	800bc20 <__hardfault_handler>

0800bc5a <stack_ok>:
 800bc5a:	480a      	ldr	r0, [pc, #40]	; (800bc84 <str_hardfault+0x16>)
 800bc5c:	2102      	movs	r1, #2
 800bc5e:	e7df      	b.n	800bc20 <__hardfault_handler>

0800bc60 <str_overflow>:
 800bc60:	63617453 	.word	0x63617453
 800bc64:	65764f6b 	.word	0x65764f6b
 800bc68:	6f6c6672 	.word	0x6f6c6672
 800bc6c:	0077      	.short	0x0077

0800bc6e <str_hardfault>:
 800bc6e:	6148      	.short	0x6148
 800bc70:	61466472 	.word	0x61466472
 800bc74:	00746c75 	.word	0x00746c75
      "    mov r1,#2\n\t"
      "    b __hardfault_handler\n\t"
      "str_overflow:  .asciz \"StackOverflow\"\n\t"
      "str_hardfault: .asciz \"HardFault\"\n\t"
  );
}
 800bc78:	20000000 	.word	0x20000000
 800bc7c:	20000500 	.word	0x20000500
 800bc80:	0800bc60 	.word	0x0800bc60
 800bc84:	0800bc6e 	.word	0x0800bc6e

0800bc88 <hw_timer_init>:

// Sets up a timer to count at 1024 Hz, driven by the 32.768 kHz LSE
// The timer is running continuously. On STM32L0 the LPTIM1 is used,
// on STM32L1 we use TIM10 a general purpose
error_t hw_timer_init(hwtimer_id_t timer_id, uint8_t frequency, timer_callback_t compare_callback, timer_callback_t overflow_callback)
{
 800bc88:	b530      	push	{r4, r5, lr}
 800bc8a:	b08b      	sub	sp, #44	; 0x2c
 800bc8c:	0015      	movs	r5, r2
 800bc8e:	001c      	movs	r4, r3
  // TODO using only one timer for now
	if(timer_id >= HWTIMER_NUM)
 800bc90:	2800      	cmp	r0, #0
 800bc92:	d165      	bne.n	800bd60 <hw_timer_init+0xd8>
		return ESIZE;
	if(timer_inited)
 800bc94:	4b35      	ldr	r3, [pc, #212]	; (800bd6c <hw_timer_init+0xe4>)
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d163      	bne.n	800bd64 <hw_timer_init+0xdc>
		return EALREADY;
	if(frequency != HWTIMER_FREQ_1MS && frequency != HWTIMER_FREQ_32K)
 800bc9c:	2901      	cmp	r1, #1
 800bc9e:	d863      	bhi.n	800bd68 <hw_timer_init+0xe0>
		return EINVAL;

  start_atomic();
 800bca0:	f7fe fe82 	bl	800a9a8 <start_atomic>
	compare_f = compare_callback;
 800bca4:	4b32      	ldr	r3, [pc, #200]	; (800bd70 <hw_timer_init+0xe8>)
 800bca6:	601d      	str	r5, [r3, #0]
	overflow_f = overflow_callback;
 800bca8:	4b32      	ldr	r3, [pc, #200]	; (800bd74 <hw_timer_init+0xec>)
 800bcaa:	601c      	str	r4, [r3, #0]
	timer_inited = true;
 800bcac:	4b2f      	ldr	r3, [pc, #188]	; (800bd6c <hw_timer_init+0xe4>)
 800bcae:	2201      	movs	r2, #1
 800bcb0:	701a      	strb	r2, [r3, #0]

  #if defined(STM32L0)
  // set LPTIM1 clock source to LSE
  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit;
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800bcb2:	2380      	movs	r3, #128	; 0x80
 800bcb4:	9301      	str	r3, [sp, #4]
  RCC_PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800bcb6:	23c0      	movs	r3, #192	; 0xc0
 800bcb8:	031b      	lsls	r3, r3, #12
 800bcba:	9308      	str	r3, [sp, #32]
  assert(HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) == HAL_OK);
 800bcbc:	a801      	add	r0, sp, #4
 800bcbe:	f7fd fba7 	bl	8009410 <HAL_RCCEx_PeriphCLKConfig>
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	d140      	bne.n	800bd48 <hw_timer_init+0xc0>
  #endif

#if defined(STM32L0)
  __HAL_RCC_LPTIM1_CLK_ENABLE();
 800bcc6:	4b2c      	ldr	r3, [pc, #176]	; (800bd78 <hw_timer_init+0xf0>)
 800bcc8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800bcca:	2280      	movs	r2, #128	; 0x80
 800bccc:	0612      	lsls	r2, r2, #24
 800bcce:	4311      	orrs	r1, r2
 800bcd0:	6399      	str	r1, [r3, #56]	; 0x38
  __HAL_RCC_LPTIM1_FORCE_RESET();
 800bcd2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800bcd4:	430a      	orrs	r2, r1
 800bcd6:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_LPTIM1_RELEASE_RESET();
 800bcd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bcda:	0052      	lsls	r2, r2, #1
 800bcdc:	0852      	lsrs	r2, r2, #1
 800bcde:	629a      	str	r2, [r3, #40]	; 0x28

  timer.Instance = TIMER_INSTANCE;
 800bce0:	4826      	ldr	r0, [pc, #152]	; (800bd7c <hw_timer_init+0xf4>)
 800bce2:	4b27      	ldr	r3, [pc, #156]	; (800bd80 <hw_timer_init+0xf8>)
 800bce4:	6003      	str	r3, [r0, #0]
  timer.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800bce6:	2300      	movs	r3, #0
 800bce8:	6043      	str	r3, [r0, #4]
  timer.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32; // TODO
 800bcea:	22a0      	movs	r2, #160	; 0xa0
 800bcec:	0112      	lsls	r2, r2, #4
 800bcee:	6082      	str	r2, [r0, #8]
  timer.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800bcf0:	4a24      	ldr	r2, [pc, #144]	; (800bd84 <hw_timer_init+0xfc>)
 800bcf2:	6142      	str	r2, [r0, #20]
  timer.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800bcf4:	6283      	str	r3, [r0, #40]	; 0x28
  timer.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800bcf6:	6243      	str	r3, [r0, #36]	; 0x24
  assert(HAL_LPTIM_Init(&timer) == HAL_OK);
 800bcf8:	f7fe faae 	bl	800a258 <HAL_LPTIM_Init>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d129      	bne.n	800bd54 <hw_timer_init+0xcc>

  __HAL_LPTIM_ENABLE(&timer);
 800bd00:	4b1e      	ldr	r3, [pc, #120]	; (800bd7c <hw_timer_init+0xf4>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	691a      	ldr	r2, [r3, #16]
 800bd06:	2101      	movs	r1, #1
 800bd08:	430a      	orrs	r2, r1
 800bd0a:	611a      	str	r2, [r3, #16]
  __HAL_LPTIM_AUTORELOAD_SET(&timer, 0xFFFF);
 800bd0c:	4a1d      	ldr	r2, [pc, #116]	; (800bd84 <hw_timer_init+0xfc>)
 800bd0e:	619a      	str	r2, [r3, #24]
  __HAL_LPTIM_START_CONTINUOUS(&timer);
 800bd10:	691a      	ldr	r2, [r3, #16]
 800bd12:	3103      	adds	r1, #3
 800bd14:	430a      	orrs	r2, r1
 800bd16:	611a      	str	r2, [r3, #16]

  __HAL_LPTIM_ENABLE_IT(&timer, LPTIM_IT_ARRM);
 800bd18:	689a      	ldr	r2, [r3, #8]
 800bd1a:	3902      	subs	r1, #2
 800bd1c:	430a      	orrs	r2, r1
 800bd1e:	609a      	str	r2, [r3, #8]
  __HAL_LPTIM_ENABLE_IT(&timer, LPTIM_IT_CMPOK);
 800bd20:	689a      	ldr	r2, [r3, #8]
 800bd22:	3106      	adds	r1, #6
 800bd24:	430a      	orrs	r2, r1
 800bd26:	609a      	str	r2, [r3, #8]

  // make sure we only get an update interrupt on overflow, and not on for instance reset of CC
  __HAL_TIM_URS_ENABLE(&timer);
  __HAL_TIM_CLEAR_FLAG(&timer, TIM_SR_UIF);
#endif
  HAL_NVIC_SetPriority(TIMER_IRQ, 0, 0);
 800bd28:	2200      	movs	r2, #0
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	200d      	movs	r0, #13
 800bd2e:	f7fc fd1d 	bl	800876c <HAL_NVIC_SetPriority>
  HAL_NVIC_ClearPendingIRQ(TIMER_IRQ);
 800bd32:	200d      	movs	r0, #13
 800bd34:	f7fc fd6c 	bl	8008810 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(TIMER_IRQ);
 800bd38:	200d      	movs	r0, #13
 800bd3a:	f7fc fd47 	bl	80087cc <HAL_NVIC_EnableIRQ>
  end_atomic();
 800bd3e:	f7fe fe41 	bl	800a9c4 <end_atomic>
  return SUCCESS;
 800bd42:	2000      	movs	r0, #0
}
 800bd44:	b00b      	add	sp, #44	; 0x2c
 800bd46:	bd30      	pop	{r4, r5, pc}
  assert(HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) == HAL_OK);
 800bd48:	4b0f      	ldr	r3, [pc, #60]	; (800bd88 <hw_timer_init+0x100>)
 800bd4a:	4a10      	ldr	r2, [pc, #64]	; (800bd8c <hw_timer_init+0x104>)
 800bd4c:	2158      	movs	r1, #88	; 0x58
 800bd4e:	4810      	ldr	r0, [pc, #64]	; (800bd90 <hw_timer_init+0x108>)
 800bd50:	f7fc fc56 	bl	8008600 <__assert_func>
  assert(HAL_LPTIM_Init(&timer) == HAL_OK);
 800bd54:	4b0f      	ldr	r3, [pc, #60]	; (800bd94 <hw_timer_init+0x10c>)
 800bd56:	4a0d      	ldr	r2, [pc, #52]	; (800bd8c <hw_timer_init+0x104>)
 800bd58:	2166      	movs	r1, #102	; 0x66
 800bd5a:	480d      	ldr	r0, [pc, #52]	; (800bd90 <hw_timer_init+0x108>)
 800bd5c:	f7fc fc50 	bl	8008600 <__assert_func>
		return ESIZE;
 800bd60:	480d      	ldr	r0, [pc, #52]	; (800bd98 <hw_timer_init+0x110>)
 800bd62:	e7ef      	b.n	800bd44 <hw_timer_init+0xbc>
		return EALREADY;
 800bd64:	2078      	movs	r0, #120	; 0x78
 800bd66:	e7ed      	b.n	800bd44 <hw_timer_init+0xbc>
		return EINVAL;
 800bd68:	2016      	movs	r0, #22
 800bd6a:	e7eb      	b.n	800bd44 <hw_timer_init+0xbc>
 800bd6c:	20003088 	.word	0x20003088
 800bd70:	2000304c 	.word	0x2000304c
 800bd74:	20003050 	.word	0x20003050
 800bd78:	40021000 	.word	0x40021000
 800bd7c:	20003058 	.word	0x20003058
 800bd80:	40007c00 	.word	0x40007c00
 800bd84:	0000ffff 	.word	0x0000ffff
 800bd88:	08019c4c 	.word	0x08019c4c
 800bd8c:	08019d70 	.word	0x08019d70
 800bd90:	08019c84 	.word	0x08019c84
 800bd94:	08019cdc 	.word	0x08019cdc
 800bd98:	0000138a 	.word	0x0000138a

0800bd9c <hw_timer_get_info>:

const hwtimer_info_t* hw_timer_get_info(hwtimer_id_t timer_id)
{
    if(timer_id >= HWTIMER_NUM)
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d101      	bne.n	800bda4 <hw_timer_get_info+0x8>
#elif defined(STM32L1)
      .min_delay_ticks = 0,
#endif
    };

    return &timer_info;
 800bda0:	4801      	ldr	r0, [pc, #4]	; (800bda8 <hw_timer_get_info+0xc>)
}
 800bda2:	4770      	bx	lr
      return NULL;
 800bda4:	2000      	movs	r0, #0
 800bda6:	e7fc      	b.n	800bda2 <hw_timer_get_info+0x6>
 800bda8:	08019d94 	.word	0x08019d94

0800bdac <hw_timer_getvalue>:

hwtimer_tick_t hw_timer_getvalue(hwtimer_id_t timer_id)
{
 	if(timer_id >= HWTIMER_NUM || (!timer_inited))
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d10e      	bne.n	800bdce <hw_timer_getvalue+0x22>
 800bdb0:	4b09      	ldr	r3, [pc, #36]	; (800bdd8 <hw_timer_getvalue+0x2c>)
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00c      	beq.n	800bdd2 <hw_timer_getvalue+0x26>
 		return 0;
 	else
 	{
#if defined(STM32L0)
    // only valid value until 2 consecutive reads return the same value, see reference manuel
    uint32_t value = LPTIM1->CNT;
 800bdb8:	4b08      	ldr	r3, [pc, #32]	; (800bddc <hw_timer_getvalue+0x30>)
 800bdba:	69d8      	ldr	r0, [r3, #28]
    while(value != LPTIM1->CNT) {
 800bdbc:	4b07      	ldr	r3, [pc, #28]	; (800bddc <hw_timer_getvalue+0x30>)
 800bdbe:	69db      	ldr	r3, [r3, #28]
 800bdc0:	4283      	cmp	r3, r0
 800bdc2:	d002      	beq.n	800bdca <hw_timer_getvalue+0x1e>
      value = LPTIM1->CNT;
 800bdc4:	4b05      	ldr	r3, [pc, #20]	; (800bddc <hw_timer_getvalue+0x30>)
 800bdc6:	69d8      	ldr	r0, [r3, #28]
 800bdc8:	e7f8      	b.n	800bdbc <hw_timer_getvalue+0x10>
    }
#elif defined(STM32L1)
    uint32_t value =__HAL_TIM_GET_COUNTER(&timer);
#endif
 		return value;
 800bdca:	b280      	uxth	r0, r0
 800bdcc:	e000      	b.n	800bdd0 <hw_timer_getvalue+0x24>
 		return 0;
 800bdce:	2000      	movs	r0, #0
 	}
}
 800bdd0:	4770      	bx	lr
 		return 0;
 800bdd2:	2000      	movs	r0, #0
 800bdd4:	e7fc      	b.n	800bdd0 <hw_timer_getvalue+0x24>
 800bdd6:	46c0      	nop			; (mov r8, r8)
 800bdd8:	20003088 	.word	0x20003088
 800bddc:	40007c00 	.word	0x40007c00

0800bde0 <hw_timer_schedule>:

error_t hw_timer_schedule(hwtimer_id_t timer_id, hwtimer_tick_t tick )
{
 800bde0:	b570      	push	{r4, r5, r6, lr}
 800bde2:	000c      	movs	r4, r1
 	if(timer_id >= HWTIMER_NUM)
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d131      	bne.n	800be4c <hw_timer_schedule+0x6c>
 		return ESIZE;
 	if(!timer_inited)
 800bde8:	4b1a      	ldr	r3, [pc, #104]	; (800be54 <hw_timer_schedule+0x74>)
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d02f      	beq.n	800be50 <hw_timer_schedule+0x70>
 		return EOFF;
  //don't enable the interrupt while waiting to write a new compare value
  ready_for_trigger = false;
 800bdf0:	4b19      	ldr	r3, [pc, #100]	; (800be58 <hw_timer_schedule+0x78>)
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	701a      	strb	r2, [r3, #0]
  if(in_atomic())
 800bdf6:	f7fe fdf5 	bl	800a9e4 <in_atomic>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	d119      	bne.n	800be32 <hw_timer_schedule+0x52>
  {
    log_print_error_string("ILLEGAL TIMER USAGE: hw_timer_schedule should not be used in atomic context!");
    assert(cmp_reg_write_pending == false); // if we currently are in atomic context and cmp_reg_write_is_pending is true we have an infinite loop on the instruction below.
  }
  while(cmp_reg_write_pending); // prev write operation is pending, writing again before may give unpredicatable results (see datasheet), so block here
 800bdfe:	4b17      	ldr	r3, [pc, #92]	; (800be5c <hw_timer_schedule+0x7c>)
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1fb      	bne.n	800bdfe <hw_timer_schedule+0x1e>
  ready_for_trigger = true;
 800be06:	2501      	movs	r5, #1
 800be08:	4b13      	ldr	r3, [pc, #76]	; (800be58 <hw_timer_schedule+0x78>)
 800be0a:	701d      	strb	r5, [r3, #0]
  start_atomic();
 800be0c:	f7fe fdcc 	bl	800a9a8 <start_atomic>
#if defined(STM32L0)
      cmp_reg_write_pending = true; // cleared in ISR
 800be10:	4b12      	ldr	r3, [pc, #72]	; (800be5c <hw_timer_schedule+0x7c>)
 800be12:	701d      	strb	r5, [r3, #0]
    __HAL_LPTIM_DISABLE_IT(&timer, LPTIM_IT_CMPM);
 800be14:	4b12      	ldr	r3, [pc, #72]	; (800be60 <hw_timer_schedule+0x80>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	689a      	ldr	r2, [r3, #8]
 800be1a:	43aa      	bics	r2, r5
 800be1c:	609a      	str	r2, [r3, #8]
    __HAL_LPTIM_CLEAR_FLAG(&timer, LPTIM_FLAG_CMPM);
 800be1e:	605d      	str	r5, [r3, #4]
    __HAL_LPTIM_COMPARE_SET(&timer, tick - 1);
 800be20:	3c01      	subs	r4, #1
 800be22:	615c      	str	r4, [r3, #20]
    __HAL_TIM_DISABLE_IT(&timer, TIM_IT_CC1);
    __HAL_TIM_SET_COMPARE(&timer, TIM_CHANNEL_1, tick);
    __HAL_TIM_ENABLE_IT(&timer, TIM_IT_UPDATE);
    __HAL_TIM_ENABLE_IT(&timer, TIM_IT_CC1);
#endif
    HAL_NVIC_ClearPendingIRQ(TIMER_IRQ);
 800be24:	200d      	movs	r0, #13
 800be26:	f7fc fcf3 	bl	8008810 <HAL_NVIC_ClearPendingIRQ>
  end_atomic();
 800be2a:	f7fe fdcb 	bl	800a9c4 <end_atomic>
  
  return SUCCESS;
 800be2e:	2000      	movs	r0, #0
}
 800be30:	bd70      	pop	{r4, r5, r6, pc}
    log_print_error_string("ILLEGAL TIMER USAGE: hw_timer_schedule should not be used in atomic context!");
 800be32:	480c      	ldr	r0, [pc, #48]	; (800be64 <hw_timer_schedule+0x84>)
 800be34:	f003 f8d4 	bl	800efe0 <log_print_error_string>
    assert(cmp_reg_write_pending == false); // if we currently are in atomic context and cmp_reg_write_is_pending is true we have an infinite loop on the instruction below.
 800be38:	4b08      	ldr	r3, [pc, #32]	; (800be5c <hw_timer_schedule+0x7c>)
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d0de      	beq.n	800bdfe <hw_timer_schedule+0x1e>
 800be40:	4b09      	ldr	r3, [pc, #36]	; (800be68 <hw_timer_schedule+0x88>)
 800be42:	4a0a      	ldr	r2, [pc, #40]	; (800be6c <hw_timer_schedule+0x8c>)
 800be44:	21bf      	movs	r1, #191	; 0xbf
 800be46:	480a      	ldr	r0, [pc, #40]	; (800be70 <hw_timer_schedule+0x90>)
 800be48:	f7fc fbda 	bl	8008600 <__assert_func>
 		return ESIZE;
 800be4c:	4809      	ldr	r0, [pc, #36]	; (800be74 <hw_timer_schedule+0x94>)
 800be4e:	e7ef      	b.n	800be30 <hw_timer_schedule+0x50>
 		return EOFF;
 800be50:	4809      	ldr	r0, [pc, #36]	; (800be78 <hw_timer_schedule+0x98>)
 800be52:	e7ed      	b.n	800be30 <hw_timer_schedule+0x50>
 800be54:	20003088 	.word	0x20003088
 800be58:	20003054 	.word	0x20003054
 800be5c:	20003048 	.word	0x20003048
 800be60:	20003058 	.word	0x20003058
 800be64:	08019d00 	.word	0x08019d00
 800be68:	08019d50 	.word	0x08019d50
 800be6c:	08019d80 	.word	0x08019d80
 800be70:	08019c84 	.word	0x08019c84
 800be74:	0000138a 	.word	0x0000138a
 800be78:	0000138c 	.word	0x0000138c

0800be7c <hw_timer_cancel>:

error_t hw_timer_cancel(hwtimer_id_t timer_id)
{
 800be7c:	b510      	push	{r4, lr}
 	if(timer_id >= HWTIMER_NUM)
 800be7e:	2800      	cmp	r0, #0
 800be80:	d116      	bne.n	800beb0 <hw_timer_cancel+0x34>
 		return ESIZE;
 	if(!timer_inited)
 800be82:	4b0d      	ldr	r3, [pc, #52]	; (800beb8 <hw_timer_cancel+0x3c>)
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d014      	beq.n	800beb4 <hw_timer_cancel+0x38>
 		return EOFF;

 	start_atomic();
 800be8a:	f7fe fd8d 	bl	800a9a8 <start_atomic>
#if defined(STM32L0)
    __HAL_LPTIM_DISABLE_IT(&timer, LPTIM_IT_CMPM);
 800be8e:	4b0b      	ldr	r3, [pc, #44]	; (800bebc <hw_timer_cancel+0x40>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	689a      	ldr	r2, [r3, #8]
 800be94:	2101      	movs	r1, #1
 800be96:	438a      	bics	r2, r1
 800be98:	609a      	str	r2, [r3, #8]
    __HAL_LPTIM_CLEAR_FLAG(&timer, LPTIM_IT_CMPM);
 800be9a:	6059      	str	r1, [r3, #4]
    ready_for_trigger = false;
 800be9c:	4b08      	ldr	r3, [pc, #32]	; (800bec0 <hw_timer_cancel+0x44>)
 800be9e:	2200      	movs	r2, #0
 800bea0:	701a      	strb	r2, [r3, #0]
#elif defined(STM32L1)
    __HAL_TIM_DISABLE_IT(&timer, TIM_IT_CC1);
    __HAL_TIM_CLEAR_FLAG(&timer, TIM_IT_CC1);
#endif
    HAL_NVIC_ClearPendingIRQ(TIMER_IRQ);
 800bea2:	200d      	movs	r0, #13
 800bea4:	f7fc fcb4 	bl	8008810 <HAL_NVIC_ClearPendingIRQ>
 	end_atomic();
 800bea8:	f7fe fd8c 	bl	800a9c4 <end_atomic>

  return SUCCESS;
 800beac:	2000      	movs	r0, #0
}
 800beae:	bd10      	pop	{r4, pc}
 		return ESIZE;
 800beb0:	4804      	ldr	r0, [pc, #16]	; (800bec4 <hw_timer_cancel+0x48>)
 800beb2:	e7fc      	b.n	800beae <hw_timer_cancel+0x32>
 		return EOFF;
 800beb4:	4804      	ldr	r0, [pc, #16]	; (800bec8 <hw_timer_cancel+0x4c>)
 800beb6:	e7fa      	b.n	800beae <hw_timer_cancel+0x32>
 800beb8:	20003088 	.word	0x20003088
 800bebc:	20003058 	.word	0x20003058
 800bec0:	20003054 	.word	0x20003054
 800bec4:	0000138a 	.word	0x0000138a
 800bec8:	0000138c 	.word	0x0000138c

0800becc <hw_timer_is_overflow_pending>:

  return SUCCESS;
}

bool hw_timer_is_overflow_pending(hwtimer_id_t timer_id)
{
 800becc:	b510      	push	{r4, lr}
  if(timer_id >= HWTIMER_NUM)
 800bece:	2800      	cmp	r0, #0
 800bed0:	d002      	beq.n	800bed8 <hw_timer_is_overflow_pending+0xc>
    return false;
 800bed2:	2400      	movs	r4, #0
    bool is_pending = __HAL_TIM_GET_FLAG(&timer, TIM_FLAG_UPDATE);
#endif
  end_atomic();

  return is_pending;
}
 800bed4:	0020      	movs	r0, r4
 800bed6:	bd10      	pop	{r4, pc}
  start_atomic();
 800bed8:	f7fe fd66 	bl	800a9a8 <start_atomic>
  bool is_pending = __HAL_LPTIM_GET_FLAG(&timer, LPTIM_FLAG_ARRM);
 800bedc:	4b05      	ldr	r3, [pc, #20]	; (800bef4 <hw_timer_is_overflow_pending+0x28>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	2402      	movs	r4, #2
 800bee4:	401c      	ands	r4, r3
 800bee6:	1e63      	subs	r3, r4, #1
 800bee8:	419c      	sbcs	r4, r3
 800beea:	b2e4      	uxtb	r4, r4
  end_atomic();
 800beec:	f7fe fd6a 	bl	800a9c4 <end_atomic>
  return is_pending;
 800bef0:	e7f0      	b.n	800bed4 <hw_timer_is_overflow_pending+0x8>
 800bef2:	46c0      	nop			; (mov r8, r8)
 800bef4:	20003058 	.word	0x20003058

0800bef8 <LPTIM1_IRQHandler>:
void TIMER_ISR_real(volatile uintptr_t sp)
{
  callstack_stack_pointer = sp;
#else
void TIMER_ISR(void)
{
 800bef8:	b510      	push	{r4, lr}
#endif
  // We are not using HAL_TIM_IRQHandler() here to reduce interrupt latency
#if defined(STM32L0)
  if(__HAL_LPTIM_GET_FLAG(&timer, LPTIM_FLAG_CMPOK) != RESET)
 800befa:	4b20      	ldr	r3, [pc, #128]	; (800bf7c <LPTIM1_IRQHandler+0x84>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	0712      	lsls	r2, r2, #28
 800bf02:	d50e      	bpl.n	800bf22 <LPTIM1_IRQHandler+0x2a>
  {
     // compare register write done, new writes are allowed now
     __HAL_LPTIM_CLEAR_FLAG(&timer, LPTIM_FLAG_CMPOK);
 800bf04:	2208      	movs	r2, #8
 800bf06:	605a      	str	r2, [r3, #4]
     __HAL_LPTIM_CLEAR_FLAG(&timer, LPTIM_IT_CMPM);
 800bf08:	3a07      	subs	r2, #7
 800bf0a:	605a      	str	r2, [r3, #4]
     // When timer event is canceled or when another event is already waiting to be written, don't enable the trigger
     if(ready_for_trigger) {
 800bf0c:	4a1c      	ldr	r2, [pc, #112]	; (800bf80 <LPTIM1_IRQHandler+0x88>)
 800bf0e:	7812      	ldrb	r2, [r2, #0]
 800bf10:	2a00      	cmp	r2, #0
 800bf12:	d003      	beq.n	800bf1c <LPTIM1_IRQHandler+0x24>
      __HAL_LPTIM_ENABLE_IT(&timer, LPTIM_IT_CMPM);
 800bf14:	689a      	ldr	r2, [r3, #8]
 800bf16:	2101      	movs	r1, #1
 800bf18:	430a      	orrs	r2, r1
 800bf1a:	609a      	str	r2, [r3, #8]
     }
     cmp_reg_write_pending = false;
 800bf1c:	4a19      	ldr	r2, [pc, #100]	; (800bf84 <LPTIM1_IRQHandler+0x8c>)
 800bf1e:	2100      	movs	r1, #0
 800bf20:	7011      	strb	r1, [r2, #0]
  }

  // first check for overflow ...
  if(__HAL_LPTIM_GET_FLAG(&timer, LPTIM_FLAG_ARRM) != RESET)
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	0792      	lsls	r2, r2, #30
 800bf26:	d509      	bpl.n	800bf3c <LPTIM1_IRQHandler+0x44>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(&timer, LPTIM_FLAG_ARRM) !=RESET)
 800bf28:	689a      	ldr	r2, [r3, #8]
 800bf2a:	0792      	lsls	r2, r2, #30
 800bf2c:	d506      	bpl.n	800bf3c <LPTIM1_IRQHandler+0x44>
    {
      __HAL_LPTIM_CLEAR_FLAG(&timer, LPTIM_IT_ARRM);
 800bf2e:	2202      	movs	r2, #2
 800bf30:	605a      	str	r2, [r3, #4]
      if(overflow_f != 0x0)
 800bf32:	4b15      	ldr	r3, [pc, #84]	; (800bf88 <LPTIM1_IRQHandler+0x90>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d000      	beq.n	800bf3c <LPTIM1_IRQHandler+0x44>
        overflow_f();
 800bf3a:	4798      	blx	r3
    }
  }

  // ... and then for compare value
  if(__HAL_LPTIM_GET_FLAG(&timer, LPTIM_IT_CMPM) != RESET)
 800bf3c:	4b0f      	ldr	r3, [pc, #60]	; (800bf7c <LPTIM1_IRQHandler+0x84>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	07d2      	lsls	r2, r2, #31
 800bf44:	d511      	bpl.n	800bf6a <LPTIM1_IRQHandler+0x72>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(&timer, LPTIM_IT_CMPM) !=RESET)
 800bf46:	689a      	ldr	r2, [r3, #8]
 800bf48:	07d2      	lsls	r2, r2, #31
 800bf4a:	d50e      	bpl.n	800bf6a <LPTIM1_IRQHandler+0x72>
    {
      //__HAL_LPTIM_DISABLE_IT(&timer, LPTIM_IT_CMPM);
      __HAL_LPTIM_CLEAR_FLAG(&timer, LPTIM_IT_CMPM);
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	605a      	str	r2, [r3, #4]
      // do not trigger higher layer when compare register isn't fully written yet, another write is in queue or when the timer is canceled
      if((compare_f != 0x0) && !cmp_reg_write_pending && ready_for_trigger) {
 800bf50:	4b0e      	ldr	r3, [pc, #56]	; (800bf8c <LPTIM1_IRQHandler+0x94>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d008      	beq.n	800bf6a <LPTIM1_IRQHandler+0x72>
 800bf58:	4a0a      	ldr	r2, [pc, #40]	; (800bf84 <LPTIM1_IRQHandler+0x8c>)
 800bf5a:	7812      	ldrb	r2, [r2, #0]
 800bf5c:	2a00      	cmp	r2, #0
 800bf5e:	d104      	bne.n	800bf6a <LPTIM1_IRQHandler+0x72>
 800bf60:	4a07      	ldr	r2, [pc, #28]	; (800bf80 <LPTIM1_IRQHandler+0x88>)
 800bf62:	7812      	ldrb	r2, [r2, #0]
 800bf64:	2a00      	cmp	r2, #0
 800bf66:	d000      	beq.n	800bf6a <LPTIM1_IRQHandler+0x72>
          compare_f();
 800bf68:	4798      	blx	r3
      }
    }
  }

  // clear autoreload register update OK if set
  if(__HAL_LPTIM_GET_FLAG(&timer, LPTIM_FLAG_ARROK) != RESET)
 800bf6a:	4b04      	ldr	r3, [pc, #16]	; (800bf7c <LPTIM1_IRQHandler+0x84>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	06d2      	lsls	r2, r2, #27
 800bf72:	d501      	bpl.n	800bf78 <LPTIM1_IRQHandler+0x80>
  {
    __HAL_LPTIM_CLEAR_FLAG(&timer, LPTIM_IT_ARROK);
 800bf74:	2210      	movs	r2, #16
 800bf76:	605a      	str	r2, [r3, #4]
      if(compare_f != 0x0)
          compare_f();
    }
  }
#endif
}
 800bf78:	bd10      	pop	{r4, pc}
 800bf7a:	46c0      	nop			; (mov r8, r8)
 800bf7c:	20003058 	.word	0x20003058
 800bf80:	20003054 	.word	0x20003054
 800bf84:	20003048 	.word	0x20003048
 800bf88:	20003050 	.word	0x20003050
 800bf8c:	2000304c 	.word	0x2000304c

0800bf90 <uart_irq_handler>:
  HAL_NVIC_DisableIRQ(uart->uart_port->irq);
  LL_USART_DisableIT_ERROR(uart->handle.Instance);
}

static void uart_irq_handler(USART_TypeDef* uart)
{
 800bf90:	b570      	push	{r4, r5, r6, lr}
 800bf92:	0004      	movs	r4, r0
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 800bf94:	6883      	ldr	r3, [r0, #8]
    if (LL_USART_IsEnabledIT_ERROR(uart)) {
 800bf96:	07db      	lsls	r3, r3, #31
 800bf98:	d530      	bpl.n	800bffc <uart_irq_handler+0x6c>
  return (READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE));
 800bf9a:	69c3      	ldr	r3, [r0, #28]
        uart_error_t err = UART_NO_ERROR;
        if (LL_USART_IsActiveFlag_NE(uart)) {
 800bf9c:	075b      	lsls	r3, r3, #29
 800bf9e:	d503      	bpl.n	800bfa8 <uart_irq_handler+0x18>
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 800bfa0:	2304      	movs	r3, #4
 800bfa2:	6203      	str	r3, [r0, #32]
            LL_USART_ClearFlag_NE(uart);
            err = UART_NOISE_ERROR;
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	e000      	b.n	800bfaa <uart_irq_handler+0x1a>
        uart_error_t err = UART_NO_ERROR;
 800bfa8:	2100      	movs	r1, #0
  return (READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE));
 800bfaa:	69e3      	ldr	r3, [r4, #28]
        }

        if (LL_USART_IsActiveFlag_FE(uart)) {
 800bfac:	079b      	lsls	r3, r3, #30
 800bfae:	d502      	bpl.n	800bfb6 <uart_irq_handler+0x26>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	6223      	str	r3, [r4, #32]
            LL_USART_ClearFlag_FE(uart);
            err = UART_FRAMING_ERROR;
 800bfb4:	2102      	movs	r1, #2
  return (READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE));
 800bfb6:	69e3      	ldr	r3, [r4, #28]
        }

        if (LL_USART_IsActiveFlag_ORE(uart)) {
 800bfb8:	071b      	lsls	r3, r3, #28
 800bfba:	d505      	bpl.n	800bfc8 <uart_irq_handler+0x38>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800bfbc:	2208      	movs	r2, #8
 800bfbe:	6222      	str	r2, [r4, #32]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_RequestRxDataFlush(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->RQR, USART_RQR_RXFRQ);
 800bfc0:	69a3      	ldr	r3, [r4, #24]
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	61a3      	str	r3, [r4, #24]
            LL_USART_ClearFlag_ORE(uart);
            LL_USART_RequestRxDataFlush(uart);
            err = UART_OVERRUN_ERROR;
 800bfc6:	2103      	movs	r1, #3
  return (READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE));
 800bfc8:	69e3      	ldr	r3, [r4, #28]
        }

        if (LL_USART_IsActiveFlag_PE(uart)) {
 800bfca:	07db      	lsls	r3, r3, #31
 800bfcc:	d536      	bpl.n	800c03c <uart_irq_handler+0xac>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 800bfce:	2301      	movs	r3, #1
 800bfd0:	6223      	str	r3, [r4, #32]
            LL_USART_ClearFlag_PE(uart);
            err = UART_PARITY_ERROR;
 800bfd2:	2104      	movs	r1, #4
 800bfd4:	2300      	movs	r3, #0
        }

        if(err != UART_NO_ERROR) {
            uint8_t idx = 0;
            do {
              if(handle[idx].error_cb != NULL && handle[idx].handle.Instance == uart) {
 800bfd6:	015a      	lsls	r2, r3, #5
 800bfd8:	18d2      	adds	r2, r2, r3
 800bfda:	0090      	lsls	r0, r2, #2
 800bfdc:	4a3a      	ldr	r2, [pc, #232]	; (800c0c8 <uart_irq_handler+0x138>)
 800bfde:	1812      	adds	r2, r2, r0
 800bfe0:	3280      	adds	r2, #128	; 0x80
 800bfe2:	6816      	ldr	r6, [r2, #0]
 800bfe4:	2e00      	cmp	r6, #0
 800bfe6:	d005      	beq.n	800bff4 <uart_irq_handler+0x64>
 800bfe8:	0002      	movs	r2, r0
 800bfea:	4837      	ldr	r0, [pc, #220]	; (800c0c8 <uart_irq_handler+0x138>)
 800bfec:	1882      	adds	r2, r0, r2
 800bfee:	6852      	ldr	r2, [r2, #4]
 800bff0:	42a2      	cmp	r2, r4
 800bff2:	d026      	beq.n	800c042 <uart_irq_handler+0xb2>
                  handle[idx].error_cb(&handle[idx], err);
                  break;
              }
              idx++;
 800bff4:	3301      	adds	r3, #1
 800bff6:	b2db      	uxtb	r3, r3
            } while (idx < UART_COUNT);
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d9ec      	bls.n	800bfd6 <uart_irq_handler+0x46>
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 800bffc:	69e3      	ldr	r3, [r4, #28]
        }

        // TODO other flags?
    }

    if (LL_USART_IsActiveFlag_RXNE(uart) && LL_USART_IsEnabledIT_RXNE(uart)) {
 800bffe:	069b      	lsls	r3, r3, #26
 800c000:	d533      	bpl.n	800c06a <uart_irq_handler+0xda>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 800c002:	6823      	ldr	r3, [r4, #0]
 800c004:	069b      	lsls	r3, r3, #26
 800c006:	d530      	bpl.n	800c06a <uart_irq_handler+0xda>
        uint8_t idx = 0;
 800c008:	2300      	movs	r3, #0
        do {
            if (handle[idx].uart_port != NULL && handle[idx].handle.Instance == uart) {
 800c00a:	015a      	lsls	r2, r3, #5
 800c00c:	18d2      	adds	r2, r2, r3
 800c00e:	0092      	lsls	r2, r2, #2
 800c010:	492d      	ldr	r1, [pc, #180]	; (800c0c8 <uart_irq_handler+0x138>)
 800c012:	5852      	ldr	r2, [r2, r1]
 800c014:	2a00      	cmp	r2, #0
 800c016:	d006      	beq.n	800c026 <uart_irq_handler+0x96>
 800c018:	015a      	lsls	r2, r3, #5
 800c01a:	18d2      	adds	r2, r2, r3
 800c01c:	0092      	lsls	r2, r2, #2
 800c01e:	188a      	adds	r2, r1, r2
 800c020:	6852      	ldr	r2, [r2, #4]
 800c022:	42a2      	cmp	r2, r4
 800c024:	d014      	beq.n	800c050 <uart_irq_handler+0xc0>
                handle[idx].rx_cb(&handle[idx], LL_USART_ReceiveData8(uart)); // RXNE flag will be cleared by reading of DR register
                return;
            }

            idx++;
 800c026:	3301      	adds	r3, #1
 800c028:	b2db      	uxtb	r3, r3
        } while (idx < UART_COUNT);
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d9ed      	bls.n	800c00a <uart_irq_handler+0x7a>

        assert(false); // we should not reach this point
 800c02e:	2156      	movs	r1, #86	; 0x56
 800c030:	4b26      	ldr	r3, [pc, #152]	; (800c0cc <uart_irq_handler+0x13c>)
 800c032:	4a27      	ldr	r2, [pc, #156]	; (800c0d0 <uart_irq_handler+0x140>)
 800c034:	31ff      	adds	r1, #255	; 0xff
 800c036:	4827      	ldr	r0, [pc, #156]	; (800c0d4 <uart_irq_handler+0x144>)
 800c038:	f7fc fae2 	bl	8008600 <__assert_func>
        if(err != UART_NO_ERROR) {
 800c03c:	2900      	cmp	r1, #0
 800c03e:	d0dd      	beq.n	800bffc <uart_irq_handler+0x6c>
 800c040:	e7c8      	b.n	800bfd4 <uart_irq_handler+0x44>
                  handle[idx].error_cb(&handle[idx], err);
 800c042:	0158      	lsls	r0, r3, #5
 800c044:	18c0      	adds	r0, r0, r3
 800c046:	0080      	lsls	r0, r0, #2
 800c048:	4d1f      	ldr	r5, [pc, #124]	; (800c0c8 <uart_irq_handler+0x138>)
 800c04a:	1940      	adds	r0, r0, r5
 800c04c:	47b0      	blx	r6
                  break;
 800c04e:	e7d5      	b.n	800bffc <uart_irq_handler+0x6c>
                handle[idx].rx_cb(&handle[idx], LL_USART_ReceiveData8(uart)); // RXNE flag will be cleared by reading of DR register
 800c050:	000e      	movs	r6, r1
 800c052:	0158      	lsls	r0, r3, #5
 800c054:	18c2      	adds	r2, r0, r3
 800c056:	0092      	lsls	r2, r2, #2
 800c058:	188a      	adds	r2, r1, r2
 800c05a:	6f92      	ldr	r2, [r2, #120]	; 0x78
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 800c05c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c05e:	b2c9      	uxtb	r1, r1
 800c060:	18c0      	adds	r0, r0, r3
 800c062:	0080      	lsls	r0, r0, #2
 800c064:	1980      	adds	r0, r0, r6
 800c066:	4790      	blx	r2
                return;
 800c068:	e019      	b.n	800c09e <uart_irq_handler+0x10e>
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 800c06a:	69e3      	ldr	r3, [r4, #28]
    }
    if(LL_USART_IsActiveFlag_TC(uart) && LL_USART_IsEnabledIT_TC(uart))
 800c06c:	065b      	lsls	r3, r3, #25
 800c06e:	d516      	bpl.n	800c09e <uart_irq_handler+0x10e>
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 800c070:	6823      	ldr	r3, [r4, #0]
 800c072:	065b      	lsls	r3, r3, #25
 800c074:	d513      	bpl.n	800c09e <uart_irq_handler+0x10e>
    {
      uint8_t idx = 0;
 800c076:	2300      	movs	r3, #0
      do {
        if (handle[idx].uart_port != NULL && handle[idx].handle.Instance == uart)
 800c078:	0019      	movs	r1, r3
 800c07a:	015a      	lsls	r2, r3, #5
 800c07c:	18d2      	adds	r2, r2, r3
 800c07e:	0092      	lsls	r2, r2, #2
 800c080:	4811      	ldr	r0, [pc, #68]	; (800c0c8 <uart_irq_handler+0x138>)
 800c082:	5812      	ldr	r2, [r2, r0]
 800c084:	2a00      	cmp	r2, #0
 800c086:	d006      	beq.n	800c096 <uart_irq_handler+0x106>
 800c088:	015a      	lsls	r2, r3, #5
 800c08a:	18d2      	adds	r2, r2, r3
 800c08c:	0092      	lsls	r2, r2, #2
 800c08e:	1882      	adds	r2, r0, r2
 800c090:	6852      	ldr	r2, [r2, #4]
 800c092:	42a2      	cmp	r2, r4
 800c094:	d004      	beq.n	800c0a0 <uart_irq_handler+0x110>
          LL_USART_DisableIT_TC(uart);
          handle[idx].handle.gState = HAL_UART_STATE_READY;
          handle[idx].tx_cb(&handle[idx]);
          return;
        }
        idx++;
 800c096:	3301      	adds	r3, #1
 800c098:	b2db      	uxtb	r3, r3
      }while (idx < UART_COUNT);
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d9ec      	bls.n	800c078 <uart_irq_handler+0xe8>
    }
}
 800c09e:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800c0a0:	6823      	ldr	r3, [r4, #0]
 800c0a2:	2240      	movs	r2, #64	; 0x40
 800c0a4:	4393      	bics	r3, r2
 800c0a6:	6023      	str	r3, [r4, #0]
          handle[idx].handle.gState = HAL_UART_STATE_READY;
 800c0a8:	0004      	movs	r4, r0
 800c0aa:	014b      	lsls	r3, r1, #5
 800c0ac:	185a      	adds	r2, r3, r1
 800c0ae:	0092      	lsls	r2, r2, #2
 800c0b0:	1882      	adds	r2, r0, r2
 800c0b2:	0010      	movs	r0, r2
 800c0b4:	306d      	adds	r0, #109	; 0x6d
 800c0b6:	2520      	movs	r5, #32
 800c0b8:	7005      	strb	r5, [r0, #0]
          handle[idx].tx_cb(&handle[idx]);
 800c0ba:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c0bc:	1858      	adds	r0, r3, r1
 800c0be:	0080      	lsls	r0, r0, #2
 800c0c0:	1900      	adds	r0, r0, r4
 800c0c2:	4790      	blx	r2
          return;
 800c0c4:	e7eb      	b.n	800c09e <uart_irq_handler+0x10e>
 800c0c6:	46c0      	nop			; (mov r8, r8)
 800c0c8:	2000308c 	.word	0x2000308c
 800c0cc:	080169c8 	.word	0x080169c8
 800c0d0:	08019e9c 	.word	0x08019e9c
 800c0d4:	08019d98 	.word	0x08019d98

0800c0d8 <uart_init>:
uart_handle_t* uart_init(uint8_t port_idx, uint32_t baudrate, uint8_t pins) {
 800c0d8:	b570      	push	{r4, r5, r6, lr}
  assert(port_idx < UART_COUNT);
 800c0da:	2801      	cmp	r0, #1
 800c0dc:	d811      	bhi.n	800c102 <uart_init+0x2a>
  handle[port_idx].uart_port = &uart_ports[port_idx];
 800c0de:	0083      	lsls	r3, r0, #2
 800c0e0:	181b      	adds	r3, r3, r0
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	4d0a      	ldr	r5, [pc, #40]	; (800c110 <uart_init+0x38>)
 800c0e6:	18ed      	adds	r5, r5, r3
 800c0e8:	4c0a      	ldr	r4, [pc, #40]	; (800c114 <uart_init+0x3c>)
 800c0ea:	0143      	lsls	r3, r0, #5
 800c0ec:	181a      	adds	r2, r3, r0
 800c0ee:	0092      	lsls	r2, r2, #2
 800c0f0:	5115      	str	r5, [r2, r4]
  handle[port_idx].rx_cb = NULL;
 800c0f2:	181a      	adds	r2, r3, r0
 800c0f4:	0092      	lsls	r2, r2, #2
 800c0f6:	18a2      	adds	r2, r4, r2
 800c0f8:	2500      	movs	r5, #0
 800c0fa:	6795      	str	r5, [r2, #120]	; 0x78
  handle[port_idx].baudrate = baudrate;
 800c0fc:	6751      	str	r1, [r2, #116]	; 0x74
  return &handle[port_idx];
 800c0fe:	0010      	movs	r0, r2
}
 800c100:	bd70      	pop	{r4, r5, r6, pc}
  assert(port_idx < UART_COUNT);
 800c102:	4b05      	ldr	r3, [pc, #20]	; (800c118 <uart_init+0x40>)
 800c104:	4a05      	ldr	r2, [pc, #20]	; (800c11c <uart_init+0x44>)
 800c106:	2132      	movs	r1, #50	; 0x32
 800c108:	4805      	ldr	r0, [pc, #20]	; (800c120 <uart_init+0x48>)
 800c10a:	f7fc fa79 	bl	8008600 <__assert_func>
 800c10e:	46c0      	nop			; (mov r8, r8)
 800c110:	08019eec 	.word	0x08019eec
 800c114:	2000308c 	.word	0x2000308c
 800c118:	08019dec 	.word	0x08019dec
 800c11c:	08019eb0 	.word	0x08019eb0
 800c120:	08019d98 	.word	0x08019d98

0800c124 <uart_enable>:
bool uart_enable(uart_handle_t* uart) {
 800c124:	b510      	push	{r4, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	0004      	movs	r4, r0
  GPIO_InitStruct.Pin = 1 << GPIO_PIN(uart->uart_port->tx);
 800c12a:	6803      	ldr	r3, [r0, #0]
 800c12c:	210f      	movs	r1, #15
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	4011      	ands	r1, r2
 800c132:	2201      	movs	r2, #1
 800c134:	408a      	lsls	r2, r1
 800c136:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c138:	2202      	movs	r2, #2
 800c13a:	9202      	str	r2, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c13c:	3201      	adds	r2, #1
 800c13e:	9204      	str	r2, [sp, #16]
  GPIO_InitStruct.Alternate = uart->uart_port->alternate;
 800c140:	689a      	ldr	r2, [r3, #8]
 800c142:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c144:	2200      	movs	r2, #0
 800c146:	9203      	str	r2, [sp, #12]
  assert(hw_gpio_configure_pin_stm(uart->uart_port->tx, &GPIO_InitStruct) == SUCCESS);
 800c148:	6818      	ldr	r0, [r3, #0]
 800c14a:	a901      	add	r1, sp, #4
 800c14c:	f7fe fe78 	bl	800ae40 <hw_gpio_configure_pin_stm>
 800c150:	2800      	cmp	r0, #0
 800c152:	d13d      	bne.n	800c1d0 <uart_enable+0xac>
  GPIO_InitStruct.Pin = 1 << GPIO_PIN(uart->uart_port->rx);
 800c154:	6822      	ldr	r2, [r4, #0]
 800c156:	230f      	movs	r3, #15
 800c158:	6851      	ldr	r1, [r2, #4]
 800c15a:	400b      	ands	r3, r1
 800c15c:	2101      	movs	r1, #1
 800c15e:	0008      	movs	r0, r1
 800c160:	4098      	lsls	r0, r3
 800c162:	9001      	str	r0, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP; // TODO this is only required on some boards (eg nucleo when using usb connection). Make sure there is no drawback (for example energy consumption)
 800c164:	9103      	str	r1, [sp, #12]
  assert(hw_gpio_configure_pin_stm(uart->uart_port->rx, &GPIO_InitStruct) == SUCCESS);
 800c166:	6850      	ldr	r0, [r2, #4]
 800c168:	a901      	add	r1, sp, #4
 800c16a:	f7fe fe69 	bl	800ae40 <hw_gpio_configure_pin_stm>
 800c16e:	2800      	cmp	r0, #0
 800c170:	d134      	bne.n	800c1dc <uart_enable+0xb8>
  switch ((intptr_t)*(&uart->uart_port->uart))
 800c172:	6823      	ldr	r3, [r4, #0]
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	4a30      	ldr	r2, [pc, #192]	; (800c238 <uart_enable+0x114>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d046      	beq.n	800c20a <uart_enable+0xe6>
 800c17c:	dc34      	bgt.n	800c1e8 <uart_enable+0xc4>
 800c17e:	4a2f      	ldr	r2, [pc, #188]	; (800c23c <uart_enable+0x118>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d03b      	beq.n	800c1fc <uart_enable+0xd8>
 800c184:	4a2e      	ldr	r2, [pc, #184]	; (800c240 <uart_enable+0x11c>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d146      	bne.n	800c218 <uart_enable+0xf4>
      __HAL_RCC_LPUART1_CLK_ENABLE();
 800c18a:	4a2e      	ldr	r2, [pc, #184]	; (800c244 <uart_enable+0x120>)
 800c18c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800c18e:	2380      	movs	r3, #128	; 0x80
 800c190:	02db      	lsls	r3, r3, #11
 800c192:	430b      	orrs	r3, r1
 800c194:	6393      	str	r3, [r2, #56]	; 0x38
  uart->handle.Init.BaudRate = uart->baudrate;
 800c196:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c198:	60a3      	str	r3, [r4, #8]
  uart->handle.Init.WordLength = UART_WORDLENGTH_8B;
 800c19a:	2300      	movs	r3, #0
 800c19c:	60e3      	str	r3, [r4, #12]
  uart->handle.Init.StopBits = UART_STOPBITS_1;
 800c19e:	6123      	str	r3, [r4, #16]
  uart->handle.Init.Parity = UART_PARITY_NONE;
 800c1a0:	6163      	str	r3, [r4, #20]
  uart->handle.Init.Mode = UART_MODE_TX_RX;
 800c1a2:	220c      	movs	r2, #12
 800c1a4:	61a2      	str	r2, [r4, #24]
  uart->handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c1a6:	61e3      	str	r3, [r4, #28]
  uart->handle.Init.OverSampling = UART_OVERSAMPLING_16;
 800c1a8:	6223      	str	r3, [r4, #32]
  uart->handle.Instance = uart->uart_port->uart;
 800c1aa:	6823      	ldr	r3, [r4, #0]
 800c1ac:	68da      	ldr	r2, [r3, #12]
 800c1ae:	6062      	str	r2, [r4, #4]
  if(uart->uart_port->swap_tx_rx)
 800c1b0:	7c5b      	ldrb	r3, [r3, #17]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d004      	beq.n	800c1c0 <uart_enable+0x9c>
    uart->handle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800c1b6:	2308      	movs	r3, #8
 800c1b8:	62a3      	str	r3, [r4, #40]	; 0x28
    uart->handle.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800c1ba:	2380      	movs	r3, #128	; 0x80
 800c1bc:	021b      	lsls	r3, r3, #8
 800c1be:	63a3      	str	r3, [r4, #56]	; 0x38
  if (HAL_UART_Init(&(uart->handle)) != HAL_OK)
 800c1c0:	1d20      	adds	r0, r4, #4
 800c1c2:	f7fe fbb9 	bl	800a938 <HAL_UART_Init>
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	d02c      	beq.n	800c224 <uart_enable+0x100>
    return false;
 800c1ca:	2000      	movs	r0, #0
}
 800c1cc:	b006      	add	sp, #24
 800c1ce:	bd10      	pop	{r4, pc}
  assert(hw_gpio_configure_pin_stm(uart->uart_port->tx, &GPIO_InitStruct) == SUCCESS);
 800c1d0:	4b1d      	ldr	r3, [pc, #116]	; (800c248 <uart_enable+0x124>)
 800c1d2:	4a1e      	ldr	r2, [pc, #120]	; (800c24c <uart_enable+0x128>)
 800c1d4:	2147      	movs	r1, #71	; 0x47
 800c1d6:	481e      	ldr	r0, [pc, #120]	; (800c250 <uart_enable+0x12c>)
 800c1d8:	f7fc fa12 	bl	8008600 <__assert_func>
  assert(hw_gpio_configure_pin_stm(uart->uart_port->rx, &GPIO_InitStruct) == SUCCESS);
 800c1dc:	4b1d      	ldr	r3, [pc, #116]	; (800c254 <uart_enable+0x130>)
 800c1de:	4a1b      	ldr	r2, [pc, #108]	; (800c24c <uart_enable+0x128>)
 800c1e0:	214a      	movs	r1, #74	; 0x4a
 800c1e2:	481b      	ldr	r0, [pc, #108]	; (800c250 <uart_enable+0x12c>)
 800c1e4:	f7fc fa0c 	bl	8008600 <__assert_func>
  switch ((intptr_t)*(&uart->uart_port->uart))
 800c1e8:	4a1b      	ldr	r2, [pc, #108]	; (800c258 <uart_enable+0x134>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d114      	bne.n	800c218 <uart_enable+0xf4>
      __HAL_RCC_USART1_CLK_ENABLE();
 800c1ee:	4a15      	ldr	r2, [pc, #84]	; (800c244 <uart_enable+0x120>)
 800c1f0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800c1f2:	2380      	movs	r3, #128	; 0x80
 800c1f4:	01db      	lsls	r3, r3, #7
 800c1f6:	430b      	orrs	r3, r1
 800c1f8:	6353      	str	r3, [r2, #52]	; 0x34
      break;
 800c1fa:	e7cc      	b.n	800c196 <uart_enable+0x72>
      __HAL_RCC_USART2_CLK_ENABLE();
 800c1fc:	4a11      	ldr	r2, [pc, #68]	; (800c244 <uart_enable+0x120>)
 800c1fe:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800c200:	2380      	movs	r3, #128	; 0x80
 800c202:	029b      	lsls	r3, r3, #10
 800c204:	430b      	orrs	r3, r1
 800c206:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 800c208:	e7c5      	b.n	800c196 <uart_enable+0x72>
      __HAL_RCC_USART4_CLK_ENABLE();
 800c20a:	4a0e      	ldr	r2, [pc, #56]	; (800c244 <uart_enable+0x120>)
 800c20c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800c20e:	2380      	movs	r3, #128	; 0x80
 800c210:	031b      	lsls	r3, r3, #12
 800c212:	430b      	orrs	r3, r1
 800c214:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 800c216:	e7be      	b.n	800c196 <uart_enable+0x72>
      assert(false);
 800c218:	4b10      	ldr	r3, [pc, #64]	; (800c25c <uart_enable+0x138>)
 800c21a:	4a0c      	ldr	r2, [pc, #48]	; (800c24c <uart_enable+0x128>)
 800c21c:	215d      	movs	r1, #93	; 0x5d
 800c21e:	480c      	ldr	r0, [pc, #48]	; (800c250 <uart_enable+0x12c>)
 800c220:	f7fc f9ee 	bl	8008600 <__assert_func>
  HAL_NVIC_SetPriority(uart->uart_port->irq, 0, 3);
 800c224:	6823      	ldr	r3, [r4, #0]
 800c226:	2010      	movs	r0, #16
 800c228:	5618      	ldrsb	r0, [r3, r0]
 800c22a:	2203      	movs	r2, #3
 800c22c:	2100      	movs	r1, #0
 800c22e:	f7fc fa9d 	bl	800876c <HAL_NVIC_SetPriority>
  return true;
 800c232:	2001      	movs	r0, #1
 800c234:	e7ca      	b.n	800c1cc <uart_enable+0xa8>
 800c236:	46c0      	nop			; (mov r8, r8)
 800c238:	40004c00 	.word	0x40004c00
 800c23c:	40004400 	.word	0x40004400
 800c240:	40004800 	.word	0x40004800
 800c244:	40021000 	.word	0x40021000
 800c248:	08019e04 	.word	0x08019e04
 800c24c:	08019ebc 	.word	0x08019ebc
 800c250:	08019d98 	.word	0x08019d98
 800c254:	08019e50 	.word	0x08019e50
 800c258:	40013800 	.word	0x40013800
 800c25c:	080169c8 	.word	0x080169c8

0800c260 <uart_pull_down_rx>:
{
 800c260:	b510      	push	{r4, lr}
 800c262:	b086      	sub	sp, #24
 800c264:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct= { 0 };
 800c266:	2214      	movs	r2, #20
 800c268:	2100      	movs	r1, #0
 800c26a:	a801      	add	r0, sp, #4
 800c26c:	f008 fe04 	bl	8014e78 <memset>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c270:	2302      	movs	r3, #2
 800c272:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin = 1 << GPIO_PIN(uart->uart_port->rx);
 800c274:	6823      	ldr	r3, [r4, #0]
 800c276:	6858      	ldr	r0, [r3, #4]
 800c278:	220f      	movs	r2, #15
 800c27a:	4002      	ands	r2, r0
 800c27c:	2301      	movs	r3, #1
 800c27e:	4093      	lsls	r3, r2
 800c280:	9301      	str	r3, [sp, #4]
  assert(hw_gpio_configure_pin_stm(uart->uart_port->rx, &GPIO_InitStruct) == SUCCESS);
 800c282:	a901      	add	r1, sp, #4
 800c284:	f7fe fddc 	bl	800ae40 <hw_gpio_configure_pin_stm>
 800c288:	2800      	cmp	r0, #0
 800c28a:	d101      	bne.n	800c290 <uart_pull_down_rx+0x30>
}
 800c28c:	b006      	add	sp, #24
 800c28e:	bd10      	pop	{r4, pc}
  assert(hw_gpio_configure_pin_stm(uart->uart_port->rx, &GPIO_InitStruct) == SUCCESS);
 800c290:	4b02      	ldr	r3, [pc, #8]	; (800c29c <uart_pull_down_rx+0x3c>)
 800c292:	4a03      	ldr	r2, [pc, #12]	; (800c2a0 <uart_pull_down_rx+0x40>)
 800c294:	2194      	movs	r1, #148	; 0x94
 800c296:	4803      	ldr	r0, [pc, #12]	; (800c2a4 <uart_pull_down_rx+0x44>)
 800c298:	f7fc f9b2 	bl	8008600 <__assert_func>
 800c29c:	08019e50 	.word	0x08019e50
 800c2a0:	08019ec8 	.word	0x08019ec8
 800c2a4:	08019d98 	.word	0x08019d98

0800c2a8 <uart_disable>:
bool uart_disable(uart_handle_t* uart) {
 800c2a8:	b510      	push	{r4, lr}
 800c2aa:	b086      	sub	sp, #24
 800c2ac:	0004      	movs	r4, r0
  HAL_UART_DeInit(&(uart->handle));
 800c2ae:	3004      	adds	r0, #4
 800c2b0:	f7fe f81a 	bl	800a2e8 <HAL_UART_DeInit>
  switch ((intptr_t)*(&uart->uart_port->uart))
 800c2b4:	6823      	ldr	r3, [r4, #0]
 800c2b6:	68db      	ldr	r3, [r3, #12]
 800c2b8:	4a2c      	ldr	r2, [pc, #176]	; (800c36c <uart_disable+0xc4>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d03d      	beq.n	800c33a <uart_disable+0x92>
 800c2be:	dc2d      	bgt.n	800c31c <uart_disable+0x74>
 800c2c0:	4a2b      	ldr	r2, [pc, #172]	; (800c370 <uart_disable+0xc8>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d033      	beq.n	800c32e <uart_disable+0x86>
 800c2c6:	4a2b      	ldr	r2, [pc, #172]	; (800c374 <uart_disable+0xcc>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d13c      	bne.n	800c346 <uart_disable+0x9e>
      __HAL_RCC_LPUART1_CLK_DISABLE();
 800c2cc:	4a2a      	ldr	r2, [pc, #168]	; (800c378 <uart_disable+0xd0>)
 800c2ce:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c2d0:	492a      	ldr	r1, [pc, #168]	; (800c37c <uart_disable+0xd4>)
 800c2d2:	400b      	ands	r3, r1
 800c2d4:	6393      	str	r3, [r2, #56]	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct= { 0 };
 800c2d6:	2214      	movs	r2, #20
 800c2d8:	2100      	movs	r1, #0
 800c2da:	a801      	add	r0, sp, #4
 800c2dc:	f008 fdcc 	bl	8014e78 <memset>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c2e0:	2303      	movs	r3, #3
 800c2e2:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin = 1 << GPIO_PIN(uart->uart_port->tx);
 800c2e4:	6821      	ldr	r1, [r4, #0]
 800c2e6:	220f      	movs	r2, #15
 800c2e8:	680b      	ldr	r3, [r1, #0]
 800c2ea:	401a      	ands	r2, r3
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	4093      	lsls	r3, r2
 800c2f0:	9301      	str	r3, [sp, #4]
  assert(hw_gpio_configure_pin_stm(uart->uart_port->tx, &GPIO_InitStruct) == SUCCESS);
 800c2f2:	6808      	ldr	r0, [r1, #0]
 800c2f4:	a901      	add	r1, sp, #4
 800c2f6:	f7fe fda3 	bl	800ae40 <hw_gpio_configure_pin_stm>
 800c2fa:	2800      	cmp	r0, #0
 800c2fc:	d129      	bne.n	800c352 <uart_disable+0xaa>
  GPIO_InitStruct.Pin = 1 << GPIO_PIN(uart->uart_port->rx);
 800c2fe:	6823      	ldr	r3, [r4, #0]
 800c300:	6858      	ldr	r0, [r3, #4]
 800c302:	220f      	movs	r2, #15
 800c304:	4002      	ands	r2, r0
 800c306:	2301      	movs	r3, #1
 800c308:	4093      	lsls	r3, r2
 800c30a:	9301      	str	r3, [sp, #4]
  assert(hw_gpio_configure_pin_stm(uart->uart_port->rx, &GPIO_InitStruct) == SUCCESS);
 800c30c:	a901      	add	r1, sp, #4
 800c30e:	f7fe fd97 	bl	800ae40 <hw_gpio_configure_pin_stm>
 800c312:	2800      	cmp	r0, #0
 800c314:	d123      	bne.n	800c35e <uart_disable+0xb6>
}
 800c316:	2001      	movs	r0, #1
 800c318:	b006      	add	sp, #24
 800c31a:	bd10      	pop	{r4, pc}
  switch ((intptr_t)*(&uart->uart_port->uart))
 800c31c:	4a18      	ldr	r2, [pc, #96]	; (800c380 <uart_disable+0xd8>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d111      	bne.n	800c346 <uart_disable+0x9e>
      __HAL_RCC_USART1_CLK_DISABLE();
 800c322:	4a15      	ldr	r2, [pc, #84]	; (800c378 <uart_disable+0xd0>)
 800c324:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800c326:	4917      	ldr	r1, [pc, #92]	; (800c384 <uart_disable+0xdc>)
 800c328:	400b      	ands	r3, r1
 800c32a:	6353      	str	r3, [r2, #52]	; 0x34
      break;
 800c32c:	e7d3      	b.n	800c2d6 <uart_disable+0x2e>
      __HAL_RCC_USART2_CLK_DISABLE();
 800c32e:	4a12      	ldr	r2, [pc, #72]	; (800c378 <uart_disable+0xd0>)
 800c330:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c332:	4915      	ldr	r1, [pc, #84]	; (800c388 <uart_disable+0xe0>)
 800c334:	400b      	ands	r3, r1
 800c336:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 800c338:	e7cd      	b.n	800c2d6 <uart_disable+0x2e>
      __HAL_RCC_USART4_CLK_DISABLE();
 800c33a:	4a0f      	ldr	r2, [pc, #60]	; (800c378 <uart_disable+0xd0>)
 800c33c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c33e:	4913      	ldr	r1, [pc, #76]	; (800c38c <uart_disable+0xe4>)
 800c340:	400b      	ands	r3, r1
 800c342:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 800c344:	e7c7      	b.n	800c2d6 <uart_disable+0x2e>
      assert(false);
 800c346:	4b12      	ldr	r3, [pc, #72]	; (800c390 <uart_disable+0xe8>)
 800c348:	4a12      	ldr	r2, [pc, #72]	; (800c394 <uart_disable+0xec>)
 800c34a:	21a8      	movs	r1, #168	; 0xa8
 800c34c:	4812      	ldr	r0, [pc, #72]	; (800c398 <uart_disable+0xf0>)
 800c34e:	f7fc f957 	bl	8008600 <__assert_func>
  assert(hw_gpio_configure_pin_stm(uart->uart_port->tx, &GPIO_InitStruct) == SUCCESS);
 800c352:	4b12      	ldr	r3, [pc, #72]	; (800c39c <uart_disable+0xf4>)
 800c354:	4a0f      	ldr	r2, [pc, #60]	; (800c394 <uart_disable+0xec>)
 800c356:	21af      	movs	r1, #175	; 0xaf
 800c358:	480f      	ldr	r0, [pc, #60]	; (800c398 <uart_disable+0xf0>)
 800c35a:	f7fc f951 	bl	8008600 <__assert_func>
  assert(hw_gpio_configure_pin_stm(uart->uart_port->rx, &GPIO_InitStruct) == SUCCESS);
 800c35e:	4b10      	ldr	r3, [pc, #64]	; (800c3a0 <uart_disable+0xf8>)
 800c360:	4a0c      	ldr	r2, [pc, #48]	; (800c394 <uart_disable+0xec>)
 800c362:	21b1      	movs	r1, #177	; 0xb1
 800c364:	480c      	ldr	r0, [pc, #48]	; (800c398 <uart_disable+0xf0>)
 800c366:	f7fc f94b 	bl	8008600 <__assert_func>
 800c36a:	46c0      	nop			; (mov r8, r8)
 800c36c:	40004c00 	.word	0x40004c00
 800c370:	40004400 	.word	0x40004400
 800c374:	40004800 	.word	0x40004800
 800c378:	40021000 	.word	0x40021000
 800c37c:	fffbffff 	.word	0xfffbffff
 800c380:	40013800 	.word	0x40013800
 800c384:	ffffbfff 	.word	0xffffbfff
 800c388:	fffdffff 	.word	0xfffdffff
 800c38c:	fff7ffff 	.word	0xfff7ffff
 800c390:	080169c8 	.word	0x080169c8
 800c394:	08019edc 	.word	0x08019edc
 800c398:	08019d98 	.word	0x08019d98
 800c39c:	08019e04 	.word	0x08019e04
 800c3a0:	08019e50 	.word	0x08019e50

0800c3a4 <uart_set_rx_interrupt_callback>:
  uart->rx_cb = rx_handler;
 800c3a4:	6781      	str	r1, [r0, #120]	; 0x78
}
 800c3a6:	4770      	bx	lr

0800c3a8 <uart_set_error_callback>:
    uart->error_cb = error_handler;
 800c3a8:	2380      	movs	r3, #128	; 0x80
 800c3aa:	50c1      	str	r1, [r0, r3]
}
 800c3ac:	4770      	bx	lr

0800c3ae <uart_send_bytes>:
void uart_send_bytes(uart_handle_t* uart, void const *data, size_t length) {
 800c3ae:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&uart->handle, (uint8_t*) data, length, HAL_MAX_DELAY);
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	b292      	uxth	r2, r2
 800c3b4:	3004      	adds	r0, #4
 800c3b6:	425b      	negs	r3, r3
 800c3b8:	f7fe fa10 	bl	800a7dc <HAL_UART_Transmit>
}
 800c3bc:	bd10      	pop	{r4, pc}
	...

0800c3c0 <uart_rx_interrupt_enable>:
error_t uart_rx_interrupt_enable(uart_handle_t* uart) {
 800c3c0:	b510      	push	{r4, lr}
 800c3c2:	0004      	movs	r4, r0
  if(uart->rx_cb == NULL) { return EOFF; }
 800c3c4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d015      	beq.n	800c3f6 <uart_rx_interrupt_enable+0x36>
  HAL_NVIC_ClearPendingIRQ(uart->uart_port->irq);
 800c3ca:	6803      	ldr	r3, [r0, #0]
 800c3cc:	2010      	movs	r0, #16
 800c3ce:	5618      	ldrsb	r0, [r3, r0]
 800c3d0:	f7fc fa1e 	bl	8008810 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(uart->uart_port->irq);
 800c3d4:	6823      	ldr	r3, [r4, #0]
 800c3d6:	2010      	movs	r0, #16
 800c3d8:	5618      	ldrsb	r0, [r3, r0]
 800c3da:	f7fc f9f7 	bl	80087cc <HAL_NVIC_EnableIRQ>
  LL_USART_EnableIT_RXNE(uart->handle.Instance);
 800c3de:	6862      	ldr	r2, [r4, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800c3e0:	6813      	ldr	r3, [r2, #0]
 800c3e2:	2120      	movs	r1, #32
 800c3e4:	430b      	orrs	r3, r1
 800c3e6:	6013      	str	r3, [r2, #0]
  LL_USART_EnableIT_ERROR(uart->handle.Instance);
 800c3e8:	6862      	ldr	r2, [r4, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800c3ea:	6893      	ldr	r3, [r2, #8]
 800c3ec:	391f      	subs	r1, #31
 800c3ee:	430b      	orrs	r3, r1
 800c3f0:	6093      	str	r3, [r2, #8]
  return SUCCESS;
 800c3f2:	2000      	movs	r0, #0
}
 800c3f4:	bd10      	pop	{r4, pc}
  if(uart->rx_cb == NULL) { return EOFF; }
 800c3f6:	4801      	ldr	r0, [pc, #4]	; (800c3fc <uart_rx_interrupt_enable+0x3c>)
 800c3f8:	e7fc      	b.n	800c3f4 <uart_rx_interrupt_enable+0x34>
 800c3fa:	46c0      	nop			; (mov r8, r8)
 800c3fc:	0000138c 	.word	0x0000138c

0800c400 <uart_rx_interrupt_disable>:
void uart_rx_interrupt_disable(uart_handle_t* uart) {
 800c400:	b510      	push	{r4, lr}
 800c402:	0004      	movs	r4, r0
  HAL_NVIC_ClearPendingIRQ(uart->uart_port->irq);
 800c404:	6803      	ldr	r3, [r0, #0]
 800c406:	2010      	movs	r0, #16
 800c408:	5618      	ldrsb	r0, [r3, r0]
 800c40a:	f7fc fa01 	bl	8008810 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_DisableIRQ(uart->uart_port->irq);
 800c40e:	6823      	ldr	r3, [r4, #0]
 800c410:	2010      	movs	r0, #16
 800c412:	5618      	ldrsb	r0, [r3, r0]
 800c414:	f7fc f9e4 	bl	80087e0 <HAL_NVIC_DisableIRQ>
  LL_USART_DisableIT_RXNE(uart->handle.Instance);
 800c418:	6862      	ldr	r2, [r4, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800c41a:	6813      	ldr	r3, [r2, #0]
 800c41c:	2120      	movs	r1, #32
 800c41e:	438b      	bics	r3, r1
 800c420:	6013      	str	r3, [r2, #0]
  LL_USART_DisableIT_ERROR(uart->handle.Instance);
 800c422:	6862      	ldr	r2, [r4, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 800c424:	6893      	ldr	r3, [r2, #8]
 800c426:	391f      	subs	r1, #31
 800c428:	438b      	bics	r3, r1
 800c42a:	6093      	str	r3, [r2, #8]
}
 800c42c:	bd10      	pop	{r4, pc}
	...

0800c430 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 800c430:	b510      	push	{r4, lr}
  uart_irq_handler(USART2);
 800c432:	4802      	ldr	r0, [pc, #8]	; (800c43c <USART2_IRQHandler+0xc>)
 800c434:	f7ff fdac 	bl	800bf90 <uart_irq_handler>
}
 800c438:	bd10      	pop	{r4, pc}
 800c43a:	46c0      	nop			; (mov r8, r8)
 800c43c:	40004400 	.word	0x40004400

0800c440 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 800c440:	b510      	push	{r4, lr}
  uart_irq_handler(USART1);
 800c442:	4802      	ldr	r0, [pc, #8]	; (800c44c <USART1_IRQHandler+0xc>)
 800c444:	f7ff fda4 	bl	800bf90 <uart_irq_handler>
}
 800c448:	bd10      	pop	{r4, pc}
 800c44a:	46c0      	nop			; (mov r8, r8)
 800c44c:	40013800 	.word	0x40013800

0800c450 <RNG_LPUART1_IRQHandler>:

void LPUART1_IRQHandler(void) {
 800c450:	b510      	push	{r4, lr}
  uart_irq_handler(LPUART1);
 800c452:	4802      	ldr	r0, [pc, #8]	; (800c45c <RNG_LPUART1_IRQHandler+0xc>)
 800c454:	f7ff fd9c 	bl	800bf90 <uart_irq_handler>
}
 800c458:	bd10      	pop	{r4, pc}
 800c45a:	46c0      	nop			; (mov r8, r8)
 800c45c:	40004800 	.word	0x40004800

0800c460 <USART4_5_IRQHandler>:

void USART4_5_IRQHandler(void) {
 800c460:	b510      	push	{r4, lr}
  uart_irq_handler(USART4);
 800c462:	4802      	ldr	r0, [pc, #8]	; (800c46c <USART4_5_IRQHandler+0xc>)
 800c464:	f7ff fd94 	bl	800bf90 <uart_irq_handler>
}
 800c468:	bd10      	pop	{r4, pc}
 800c46a:	46c0      	nop			; (mov r8, r8)
 800c46c:	40004c00 	.word	0x40004c00

0800c470 <__watchdog_init>:

#define WATCHDOG_TIMEOUT_SECONDS 18 

static IWDG_HandleTypeDef iwdg_hal_hadle = {.Instance = NULL};
void __watchdog_init()
{
 800c470:	b530      	push	{r4, r5, lr}
 800c472:	b085      	sub	sp, #20
    IWDG_InitTypeDef iwdg_init_options;
    /*
     * Settings below disable window comparison (window exuals the reload value)
     * the Watchdog will reset the MCU after: 256*4096/37000 ~ 28s
     */
    iwdg_init_options.Prescaler = IWDG_PRESCALER_256;
 800c474:	ab01      	add	r3, sp, #4
 800c476:	2206      	movs	r2, #6
 800c478:	9201      	str	r2, [sp, #4]
    iwdg_init_options.Reload = 0xFFF;
 800c47a:	4a06      	ldr	r2, [pc, #24]	; (800c494 <__watchdog_init+0x24>)
 800c47c:	9202      	str	r2, [sp, #8]
#ifdef STM32L0
    iwdg_init_options.Window = 0xFFF;
 800c47e:	9203      	str	r2, [sp, #12]
#endif
    iwdg_hal_hadle.Init = iwdg_init_options;
 800c480:	4805      	ldr	r0, [pc, #20]	; (800c498 <__watchdog_init+0x28>)
 800c482:	1d02      	adds	r2, r0, #4
 800c484:	cb32      	ldmia	r3!, {r1, r4, r5}
 800c486:	c232      	stmia	r2!, {r1, r4, r5}
    iwdg_hal_hadle.Instance = IWDG;
 800c488:	4b04      	ldr	r3, [pc, #16]	; (800c49c <__watchdog_init+0x2c>)
 800c48a:	6003      	str	r3, [r0, #0]
    HAL_IWDG_Init(&iwdg_hal_hadle);
 800c48c:	f7fc faca 	bl	8008a24 <HAL_IWDG_Init>
}
 800c490:	b005      	add	sp, #20
 800c492:	bd30      	pop	{r4, r5, pc}
 800c494:	00000fff 	.word	0x00000fff
 800c498:	20003194 	.word	0x20003194
 800c49c:	40003000 	.word	0x40003000

0800c4a0 <hw_watchdog_feed>:

void hw_watchdog_feed()
{
 800c4a0:	b510      	push	{r4, lr}
    HAL_IWDG_Refresh(&iwdg_hal_hadle);
 800c4a2:	4802      	ldr	r0, [pc, #8]	; (800c4ac <hw_watchdog_feed+0xc>)
 800c4a4:	f7fc faee 	bl	8008a84 <HAL_IWDG_Refresh>
}
 800c4a8:	bd10      	pop	{r4, pc}
 800c4aa:	46c0      	nop			; (mov r8, r8)
 800c4ac:	20003194 	.word	0x20003194

0800c4b0 <hw_watchdog_get_timeout>:

uint8_t hw_watchdog_get_timeout(void)
{
    return WATCHDOG_TIMEOUT_SECONDS;
 800c4b0:	2012      	movs	r0, #18
 800c4b2:	4770      	bx	lr

0800c4b4 <init>:


static error_t init(blockdevice_t* bd) { // TODO SPI as param
  (void)bd; // suppress unused warning
  return SUCCESS;
}
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	4770      	bx	lr

0800c4b8 <program>:
  memcpy(data, (const void*)(intptr_t)(addr), size);

  return SUCCESS;
}

static error_t program(blockdevice_t* bd, const uint8_t* data, uint32_t addr, uint32_t size) {
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	000e      	movs	r6, r1
 800c4bc:	1e1c      	subs	r4, r3, #0
  blockdevice_stm32_eeprom_t* bd_eeprom = (blockdevice_stm32_eeprom_t*)bd;

  if(size == 0) return SUCCESS;
 800c4be:	d020      	beq.n	800c502 <program+0x4a>
  if(size > bd_eeprom->base.size) return -ESIZE;
 800c4c0:	6843      	ldr	r3, [r0, #4]
 800c4c2:	42a3      	cmp	r3, r4
 800c4c4:	d31f      	bcc.n	800c506 <program+0x4e>

  addr += DATA_EEPROM_BASE + bd_eeprom->base.offset;
 800c4c6:	6885      	ldr	r5, [r0, #8]
 800c4c8:	18ad      	adds	r5, r5, r2
 800c4ca:	4b11      	ldr	r3, [pc, #68]	; (800c510 <program+0x58>)
 800c4cc:	469c      	mov	ip, r3
 800c4ce:	4465      	add	r5, ip
  if(addr + size > DATA_EEPROM_BANK2_END) return -ESIZE;
 800c4d0:	1962      	adds	r2, r4, r5
 800c4d2:	4b10      	ldr	r3, [pc, #64]	; (800c514 <program+0x5c>)
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d818      	bhi.n	800c50a <program+0x52>

  // TODO optimize by writing per word when possible
  HAL_FLASHEx_DATAEEPROM_Unlock();
 800c4d8:	f7fc f9a6 	bl	8008828 <HAL_FLASHEx_DATAEEPROM_Unlock>
  for (size_t i = 0; i < size; i++) {
 800c4dc:	2000      	movs	r0, #0
 800c4de:	e00a      	b.n	800c4f6 <program+0x3e>
    while (FLASH->SR & FLASH_SR_BSY); // TODO timeout
 800c4e0:	4a0d      	ldr	r2, [pc, #52]	; (800c518 <program+0x60>)
 800c4e2:	6992      	ldr	r2, [r2, #24]
 800c4e4:	07d3      	lsls	r3, r2, #31
 800c4e6:	d4fb      	bmi.n	800c4e0 <program+0x28>
    *(uint8_t*)(addr + i) = data[i];
 800c4e8:	5c33      	ldrb	r3, [r6, r0]
 800c4ea:	5543      	strb	r3, [r0, r5]
    while (FLASH->SR & FLASH_SR_BSY); // TODO timeout
 800c4ec:	4a0a      	ldr	r2, [pc, #40]	; (800c518 <program+0x60>)
 800c4ee:	6992      	ldr	r2, [r2, #24]
 800c4f0:	07d3      	lsls	r3, r2, #31
 800c4f2:	d4fb      	bmi.n	800c4ec <program+0x34>
  for (size_t i = 0; i < size; i++) {
 800c4f4:	3001      	adds	r0, #1
 800c4f6:	42a0      	cmp	r0, r4
 800c4f8:	d3f2      	bcc.n	800c4e0 <program+0x28>
  }

  HAL_FLASHEx_DATAEEPROM_Lock();
 800c4fa:	f7fc f9a9 	bl	8008850 <HAL_FLASHEx_DATAEEPROM_Lock>

  return SUCCESS;
 800c4fe:	2000      	movs	r0, #0
}
 800c500:	bd70      	pop	{r4, r5, r6, pc}
  if(size == 0) return SUCCESS;
 800c502:	2000      	movs	r0, #0
 800c504:	e7fc      	b.n	800c500 <program+0x48>
  if(size > bd_eeprom->base.size) return -ESIZE;
 800c506:	4805      	ldr	r0, [pc, #20]	; (800c51c <program+0x64>)
 800c508:	e7fa      	b.n	800c500 <program+0x48>
  if(addr + size > DATA_EEPROM_BANK2_END) return -ESIZE;
 800c50a:	4804      	ldr	r0, [pc, #16]	; (800c51c <program+0x64>)
 800c50c:	e7f8      	b.n	800c500 <program+0x48>
 800c50e:	46c0      	nop			; (mov r8, r8)
 800c510:	08080000 	.word	0x08080000
 800c514:	080817ff 	.word	0x080817ff
 800c518:	40022000 	.word	0x40022000
 800c51c:	ffffec76 	.word	0xffffec76

0800c520 <read>:
static error_t read(blockdevice_t* bd, uint8_t* data, uint32_t addr, uint32_t size) {
 800c520:	b570      	push	{r4, r5, r6, lr}
 800c522:	0004      	movs	r4, r0
 800c524:	0008      	movs	r0, r1
 800c526:	0015      	movs	r5, r2
 800c528:	1e1a      	subs	r2, r3, #0
  if(size == 0) return SUCCESS;
 800c52a:	d00f      	beq.n	800c54c <read+0x2c>
  if(size > bd_eeprom->base.size) return -ESIZE;
 800c52c:	6863      	ldr	r3, [r4, #4]
 800c52e:	4293      	cmp	r3, r2
 800c530:	d30e      	bcc.n	800c550 <read+0x30>
  addr += DATA_EEPROM_BASE + bd_eeprom->base.offset;
 800c532:	68a1      	ldr	r1, [r4, #8]
 800c534:	1949      	adds	r1, r1, r5
 800c536:	4b08      	ldr	r3, [pc, #32]	; (800c558 <read+0x38>)
 800c538:	469c      	mov	ip, r3
 800c53a:	4461      	add	r1, ip
  if(addr + size > DATA_EEPROM_BANK2_END) return -ESIZE;
 800c53c:	1854      	adds	r4, r2, r1
 800c53e:	4b07      	ldr	r3, [pc, #28]	; (800c55c <read+0x3c>)
 800c540:	429c      	cmp	r4, r3
 800c542:	d807      	bhi.n	800c554 <read+0x34>
  memcpy(data, (const void*)(intptr_t)(addr), size);
 800c544:	f008 fc44 	bl	8014dd0 <memcpy>
  return SUCCESS;
 800c548:	2000      	movs	r0, #0
}
 800c54a:	bd70      	pop	{r4, r5, r6, pc}
  if(size == 0) return SUCCESS;
 800c54c:	2000      	movs	r0, #0
 800c54e:	e7fc      	b.n	800c54a <read+0x2a>
  if(size > bd_eeprom->base.size) return -ESIZE;
 800c550:	4803      	ldr	r0, [pc, #12]	; (800c560 <read+0x40>)
 800c552:	e7fa      	b.n	800c54a <read+0x2a>
  if(addr + size > DATA_EEPROM_BANK2_END) return -ESIZE;
 800c554:	4802      	ldr	r0, [pc, #8]	; (800c560 <read+0x40>)
 800c556:	e7f8      	b.n	800c54a <read+0x2a>
 800c558:	08080000 	.word	0x08080000
 800c55c:	080817ff 	.word	0x080817ff
 800c560:	ffffec76 	.word	0xffffec76

0800c564 <packet_transmitted_isr>:

static inline int16_t get_rssi() {
  return (- read_reg(REG_RSSIVALUE) >> 1);
}

static void packet_transmitted_isr() {
 800c564:	b510      	push	{r4, lr}

  DEBUG_TX_END();
 800c566:	2000      	movs	r0, #0
 800c568:	f7fc f842 	bl	80085f0 <hw_debug_clr>
  DEBUG_FG_END();

   
  if(tx_lora_packet_callback) {
 800c56c:	4b0a      	ldr	r3, [pc, #40]	; (800c598 <packet_transmitted_isr+0x34>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d005      	beq.n	800c580 <packet_transmitted_isr+0x1c>
    if(lora_mode) {
 800c574:	4a09      	ldr	r2, [pc, #36]	; (800c59c <packet_transmitted_isr+0x38>)
 800c576:	7812      	ldrb	r2, [r2, #0]
 800c578:	2a00      	cmp	r2, #0
 800c57a:	d000      	beq.n	800c57e <packet_transmitted_isr+0x1a>
      tx_lora_packet_callback();
 800c57c:	4798      	blx	r3
  } else {
    hw_busy_wait(110);
    if(tx_packet_callback)
      tx_packet_callback(timer_get_counter_value());
  }
}
 800c57e:	bd10      	pop	{r4, pc}
    hw_busy_wait(110);
 800c580:	206e      	movs	r0, #110	; 0x6e
 800c582:	f7ff fb37 	bl	800bbf4 <hw_busy_wait>
    if(tx_packet_callback)
 800c586:	4b06      	ldr	r3, [pc, #24]	; (800c5a0 <packet_transmitted_isr+0x3c>)
 800c588:	681c      	ldr	r4, [r3, #0]
 800c58a:	2c00      	cmp	r4, #0
 800c58c:	d0f7      	beq.n	800c57e <packet_transmitted_isr+0x1a>
      tx_packet_callback(timer_get_counter_value());
 800c58e:	f003 feb7 	bl	8010300 <timer_get_counter_value>
 800c592:	47a0      	blx	r4
}
 800c594:	e7f3      	b.n	800c57e <packet_transmitted_isr+0x1a>
 800c596:	46c0      	nop			; (mov r8, r8)
 800c598:	200031f8 	.word	0x200031f8
 800c59c:	200031bf 	.word	0x200031bf
 800c5a0:	200031fc 	.word	0x200031fc

0800c5a4 <update_active_times>:
    update_active_times(HW_STATE_RX);
  }
}

static void update_active_times(hw_radio_state_t opmode)
{    
 800c5a4:	b570      	push	{r4, r5, r6, lr}
 800c5a6:	0004      	movs	r4, r0
#ifdef FRAMEWORK_POWER_TRACKING_RF
    timer_tick_t current_time = timer_get_counter_value();
 800c5a8:	f003 feaa 	bl	8010300 <timer_get_counter_value>
 800c5ac:	0005      	movs	r5, r0

    uint8_t curr_mode = lora_mode ? POWER_TRACKING_LORA : POWER_TRACKING_D7;
 800c5ae:	4b2c      	ldr	r3, [pc, #176]	; (800c660 <update_active_times+0xbc>)
 800c5b0:	7818      	ldrb	r0, [r3, #0]
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	4058      	eors	r0, r3
 800c5b6:	b2c6      	uxtb	r6, r0

    // Check all 3 tracked modes to stop and start timers
    if(opmode != HW_STATE_STANDBY)
 800c5b8:	2c06      	cmp	r4, #6
 800c5ba:	d025      	beq.n	800c608 <update_active_times+0x64>
    {
        if(standby_start_time) {
 800c5bc:	4b29      	ldr	r3, [pc, #164]	; (800c664 <update_active_times+0xc0>)
 800c5be:	6818      	ldr	r0, [r3, #0]
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d117      	bne.n	800c5f4 <update_active_times+0x50>
            DPRINT("registering standby, going into: %u", opmode);
            power_tracking_register_radio_action(curr_mode, POWER_TRACKING_RADIO_STANDBY, timer_calculate_difference(standby_start_time, current_time), NULL);
        }
            
        standby_start_time = 0;
 800c5c4:	4b27      	ldr	r3, [pc, #156]	; (800c664 <update_active_times+0xc0>)
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	601a      	str	r2, [r3, #0]
    }
    else
        standby_start_time = standby_start_time ? standby_start_time : current_time;

    if(opmode != HW_STATE_TX)
 800c5ca:	2c04      	cmp	r4, #4
 800c5cc:	d02e      	beq.n	800c62c <update_active_times+0x88>
    {
        if(tx_start_time) {
 800c5ce:	4b26      	ldr	r3, [pc, #152]	; (800c668 <update_active_times+0xc4>)
 800c5d0:	6818      	ldr	r0, [r3, #0]
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d120      	bne.n	800c618 <update_active_times+0x74>
            DPRINT("registering tx, going into: %u", opmode);
            power_tracking_register_radio_action(curr_mode, POWER_TRACKING_RADIO_TX, timer_calculate_difference(tx_start_time, current_time), (void*)&current_tx_power);
        }
            
        tx_start_time = 0;
 800c5d6:	4b24      	ldr	r3, [pc, #144]	; (800c668 <update_active_times+0xc4>)
 800c5d8:	2200      	movs	r2, #0
 800c5da:	601a      	str	r2, [r3, #0]
    }
    else
        tx_start_time = tx_start_time ? tx_start_time : current_time;

    if((opmode != HW_STATE_RX) && (opmode != HW_STATE_IDLE))
 800c5dc:	3c02      	subs	r4, #2
 800c5de:	b2e4      	uxtb	r4, r4
 800c5e0:	2c01      	cmp	r4, #1
 800c5e2:	d935      	bls.n	800c650 <update_active_times+0xac>
    {
        if(rx_start_time) {
 800c5e4:	4b21      	ldr	r3, [pc, #132]	; (800c66c <update_active_times+0xc8>)
 800c5e6:	6818      	ldr	r0, [r3, #0]
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	d127      	bne.n	800c63c <update_active_times+0x98>
            DPRINT("registering rx, going into: %u", opmode);
            power_tracking_register_radio_action(curr_mode, POWER_TRACKING_RADIO_RX, timer_calculate_difference(rx_start_time, current_time), NULL);
        }
            
        rx_start_time = 0;
 800c5ec:	4b1f      	ldr	r3, [pc, #124]	; (800c66c <update_active_times+0xc8>)
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	601a      	str	r2, [r3, #0]
    }
    else
        rx_start_time = rx_start_time ? rx_start_time : current_time;
#endif //FRAMEWORK_POWER_TRACKING_RF
}
 800c5f2:	bd70      	pop	{r4, r5, r6, pc}
            power_tracking_register_radio_action(curr_mode, POWER_TRACKING_RADIO_STANDBY, timer_calculate_difference(standby_start_time, current_time), NULL);
 800c5f4:	0029      	movs	r1, r5
 800c5f6:	f003 fec5 	bl	8010384 <timer_calculate_difference>
 800c5fa:	0002      	movs	r2, r0
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	2102      	movs	r1, #2
 800c600:	0030      	movs	r0, r6
 800c602:	f002 fdbd 	bl	800f180 <power_tracking_register_radio_action>
 800c606:	e7dd      	b.n	800c5c4 <update_active_times+0x20>
        standby_start_time = standby_start_time ? standby_start_time : current_time;
 800c608:	4b16      	ldr	r3, [pc, #88]	; (800c664 <update_active_times+0xc0>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d100      	bne.n	800c612 <update_active_times+0x6e>
 800c610:	002b      	movs	r3, r5
 800c612:	4a14      	ldr	r2, [pc, #80]	; (800c664 <update_active_times+0xc0>)
 800c614:	6013      	str	r3, [r2, #0]
 800c616:	e7d8      	b.n	800c5ca <update_active_times+0x26>
            power_tracking_register_radio_action(curr_mode, POWER_TRACKING_RADIO_TX, timer_calculate_difference(tx_start_time, current_time), (void*)&current_tx_power);
 800c618:	0029      	movs	r1, r5
 800c61a:	f003 feb3 	bl	8010384 <timer_calculate_difference>
 800c61e:	0002      	movs	r2, r0
 800c620:	4b13      	ldr	r3, [pc, #76]	; (800c670 <update_active_times+0xcc>)
 800c622:	2100      	movs	r1, #0
 800c624:	0030      	movs	r0, r6
 800c626:	f002 fdab 	bl	800f180 <power_tracking_register_radio_action>
 800c62a:	e7d4      	b.n	800c5d6 <update_active_times+0x32>
        tx_start_time = tx_start_time ? tx_start_time : current_time;
 800c62c:	4b0e      	ldr	r3, [pc, #56]	; (800c668 <update_active_times+0xc4>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d100      	bne.n	800c636 <update_active_times+0x92>
 800c634:	002b      	movs	r3, r5
 800c636:	4a0c      	ldr	r2, [pc, #48]	; (800c668 <update_active_times+0xc4>)
 800c638:	6013      	str	r3, [r2, #0]
 800c63a:	e7cf      	b.n	800c5dc <update_active_times+0x38>
            power_tracking_register_radio_action(curr_mode, POWER_TRACKING_RADIO_RX, timer_calculate_difference(rx_start_time, current_time), NULL);
 800c63c:	0029      	movs	r1, r5
 800c63e:	f003 fea1 	bl	8010384 <timer_calculate_difference>
 800c642:	0002      	movs	r2, r0
 800c644:	2300      	movs	r3, #0
 800c646:	2101      	movs	r1, #1
 800c648:	0030      	movs	r0, r6
 800c64a:	f002 fd99 	bl	800f180 <power_tracking_register_radio_action>
 800c64e:	e7cd      	b.n	800c5ec <update_active_times+0x48>
        rx_start_time = rx_start_time ? rx_start_time : current_time;
 800c650:	4b06      	ldr	r3, [pc, #24]	; (800c66c <update_active_times+0xc8>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d100      	bne.n	800c65a <update_active_times+0xb6>
 800c658:	002b      	movs	r3, r5
 800c65a:	4a04      	ldr	r2, [pc, #16]	; (800c66c <update_active_times+0xc8>)
 800c65c:	6013      	str	r3, [r2, #0]
}
 800c65e:	e7c8      	b.n	800c5f2 <update_active_times+0x4e>
 800c660:	200031bf 	.word	0x200031bf
 800c664:	200031f0 	.word	0x200031f0
 800c668:	20003204 	.word	0x20003204
 800c66c:	200031e8 	.word	0x200031e8
 800c670:	200031b8 	.word	0x200031b8

0800c674 <dio1_isr>:
static void dio1_isr(void *arg) {
 800c674:	b510      	push	{r4, lr}
  hw_gpio_disable_interrupt(SX127x_DIO1_PIN);
 800c676:	480f      	ldr	r0, [pc, #60]	; (800c6b4 <dio1_isr+0x40>)
 800c678:	f7fe fbd6 	bl	800ae28 <hw_gpio_disable_interrupt>
  if(state == STATE_RX) {
 800c67c:	4b0e      	ldr	r3, [pc, #56]	; (800c6b8 <dio1_isr+0x44>)
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	2b02      	cmp	r3, #2
 800c682:	d003      	beq.n	800c68c <dio1_isr+0x18>
      fifo_level_irq_triggered = true;
 800c684:	4b0d      	ldr	r3, [pc, #52]	; (800c6bc <dio1_isr+0x48>)
 800c686:	2201      	movs	r2, #1
 800c688:	701a      	strb	r2, [r3, #0]
}
 800c68a:	bd10      	pop	{r4, pc}
    if(lora_mode && rx_lora_timeout_callback) {
 800c68c:	4b0c      	ldr	r3, [pc, #48]	; (800c6c0 <dio1_isr+0x4c>)
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d009      	beq.n	800c6a8 <dio1_isr+0x34>
 800c694:	4b0b      	ldr	r3, [pc, #44]	; (800c6c4 <dio1_isr+0x50>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d005      	beq.n	800c6a8 <dio1_isr+0x34>
static inline error_t sched_post_task(task_t task) { return sched_post_task_prio(task,DEFAULT_PRIORITY, NULL);}
 800c69c:	2200      	movs	r2, #0
 800c69e:	2107      	movs	r1, #7
 800c6a0:	4809      	ldr	r0, [pc, #36]	; (800c6c8 <dio1_isr+0x54>)
 800c6a2:	f002 ff7f 	bl	800f5a4 <sched_post_task_prio>
 800c6a6:	e7f0      	b.n	800c68a <dio1_isr+0x16>
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	2107      	movs	r1, #7
 800c6ac:	4807      	ldr	r0, [pc, #28]	; (800c6cc <dio1_isr+0x58>)
 800c6ae:	f002 ff79 	bl	800f5a4 <sched_post_task_prio>
 800c6b2:	e7ea      	b.n	800c68a <dio1_isr+0x16>
 800c6b4:	50000401 	.word	0x50000401
 800c6b8:	2000059a 	.word	0x2000059a
 800c6bc:	200031bb 	.word	0x200031bb
 800c6c0:	200031bf 	.word	0x200031bf
 800c6c4:	200031dc 	.word	0x200031dc
 800c6c8:	0800ce75 	.word	0x0800ce75
 800c6cc:	0800cc71 	.word	0x0800cc71

0800c6d0 <dio0_isr>:
static void dio0_isr(void *arg) {
 800c6d0:	b510      	push	{r4, lr}
  hw_gpio_disable_interrupt(SX127x_DIO0_PIN);  
 800c6d2:	480e      	ldr	r0, [pc, #56]	; (800c70c <dio0_isr+0x3c>)
 800c6d4:	f7fe fba8 	bl	800ae28 <hw_gpio_disable_interrupt>
  if(state == STATE_RX) {
 800c6d8:	4b0d      	ldr	r3, [pc, #52]	; (800c710 <dio0_isr+0x40>)
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	2b02      	cmp	r3, #2
 800c6de:	d10f      	bne.n	800c700 <dio0_isr+0x30>
    if(lora_mode)
 800c6e0:	4b0c      	ldr	r3, [pc, #48]	; (800c714 <dio0_isr+0x44>)
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d005      	beq.n	800c6f4 <dio0_isr+0x24>
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	2107      	movs	r1, #7
 800c6ec:	480a      	ldr	r0, [pc, #40]	; (800c718 <dio0_isr+0x48>)
 800c6ee:	f002 ff59 	bl	800f5a4 <sched_post_task_prio>
 800c6f2:	e00a      	b.n	800c70a <dio0_isr+0x3a>
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	2107      	movs	r1, #7
 800c6f8:	4808      	ldr	r0, [pc, #32]	; (800c71c <dio0_isr+0x4c>)
 800c6fa:	f002 ff53 	bl	800f5a4 <sched_post_task_prio>
 800c6fe:	e004      	b.n	800c70a <dio0_isr+0x3a>
 800c700:	2200      	movs	r2, #0
 800c702:	2107      	movs	r1, #7
 800c704:	4806      	ldr	r0, [pc, #24]	; (800c720 <dio0_isr+0x50>)
 800c706:	f002 ff4d 	bl	800f5a4 <sched_post_task_prio>
}
 800c70a:	bd10      	pop	{r4, pc}
 800c70c:	50000404 	.word	0x50000404
 800c710:	2000059a 	.word	0x2000059a
 800c714:	200031bf 	.word	0x200031bf
 800c718:	0800cecd 	.word	0x0800cecd
 800c71c:	0800cb6d 	.word	0x0800cb6d
 800c720:	0800c565 	.word	0x0800c565

0800c724 <hw_radio_enable_preloading>:
  } else
    enable_refill = enable;
}

void hw_radio_enable_preloading(bool enable) {
  enable_preloading = enable;
 800c724:	4b01      	ldr	r3, [pc, #4]	; (800c72c <hw_radio_enable_preloading+0x8>)
 800c726:	7018      	strb	r0, [r3, #0]
}
 800c728:	4770      	bx	lr
 800c72a:	46c0      	nop			; (mov r8, r8)
 800c72c:	200031b9 	.word	0x200031b9

0800c730 <hw_radio_set_rx_timeout>:

void hw_radio_set_lora_cont_tx(bool activate) {
  write_reg(REG_LR_MODEMCONFIG2, read_reg(REG_LR_MODEMCONFIG2) | (activate * RFLR_MODEMCONFIG2_TXCONTINUOUSMODE_ON));
}

void hw_radio_set_rx_timeout(uint32_t timeout) {
 800c730:	b510      	push	{r4, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	0004      	movs	r4, r0
 800c736:	f003 fde3 	bl	8010300 <timer_get_counter_value>
 800c73a:	1821      	adds	r1, r4, r0
 800c73c:	2300      	movs	r3, #0
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	2207      	movs	r2, #7
 800c742:	4802      	ldr	r0, [pc, #8]	; (800c74c <hw_radio_set_rx_timeout+0x1c>)
 800c744:	f003 ffee 	bl	8010724 <timer_post_task_prio>
  timer_post_task_delay(&rx_timeout, timeout);
}
 800c748:	b002      	add	sp, #8
 800c74a:	bd10      	pop	{r4, pc}
 800c74c:	0800d5a5 	.word	0x0800d5a5

0800c750 <enable_spi_io>:
static void enable_spi_io() {
 800c750:	b510      	push	{r4, lr}
  if(!io_inited){
 800c752:	4b08      	ldr	r3, [pc, #32]	; (800c774 <enable_spi_io+0x24>)
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d004      	beq.n	800c764 <enable_spi_io+0x14>
  spi_enable(spi_handle);
 800c75a:	4b07      	ldr	r3, [pc, #28]	; (800c778 <enable_spi_io+0x28>)
 800c75c:	6818      	ldr	r0, [r3, #0]
 800c75e:	f7fe fe23 	bl	800b3a8 <spi_enable>
}
 800c762:	bd10      	pop	{r4, pc}
    hw_radio_io_init(true);
 800c764:	2001      	movs	r0, #1
 800c766:	f7fb fd45 	bl	80081f4 <hw_radio_io_init>
    io_inited = true;
 800c76a:	4b02      	ldr	r3, [pc, #8]	; (800c774 <enable_spi_io+0x24>)
 800c76c:	2201      	movs	r2, #1
 800c76e:	701a      	strb	r2, [r3, #0]
 800c770:	e7f3      	b.n	800c75a <enable_spi_io+0xa>
 800c772:	46c0      	nop			; (mov r8, r8)
 800c774:	200031bc 	.word	0x200031bc
 800c778:	200031ec 	.word	0x200031ec

0800c77c <write_reg>:
static void write_reg(uint8_t addr, uint8_t value) {
 800c77c:	b570      	push	{r4, r5, r6, lr}
 800c77e:	0006      	movs	r6, r0
 800c780:	000d      	movs	r5, r1
  enable_spi_io();
 800c782:	f7ff ffe5 	bl	800c750 <enable_spi_io>
  spi_select(sx127x_spi);
 800c786:	4c09      	ldr	r4, [pc, #36]	; (800c7ac <write_reg+0x30>)
 800c788:	6820      	ldr	r0, [r4, #0]
 800c78a:	f7ff f815 	bl	800b7b8 <spi_select>
  spi_exchange_byte(sx127x_spi, addr | 0x80); // send address with bit 8 high to signal a write operation
 800c78e:	2180      	movs	r1, #128	; 0x80
 800c790:	4249      	negs	r1, r1
 800c792:	4331      	orrs	r1, r6
 800c794:	b2c9      	uxtb	r1, r1
 800c796:	6820      	ldr	r0, [r4, #0]
 800c798:	f7ff f841 	bl	800b81e <spi_exchange_byte>
  spi_exchange_byte(sx127x_spi, value);
 800c79c:	0029      	movs	r1, r5
 800c79e:	6820      	ldr	r0, [r4, #0]
 800c7a0:	f7ff f83d 	bl	800b81e <spi_exchange_byte>
  spi_deselect(sx127x_spi);
 800c7a4:	6820      	ldr	r0, [r4, #0]
 800c7a6:	f7ff f820 	bl	800b7ea <spi_deselect>
}
 800c7aa:	bd70      	pop	{r4, r5, r6, pc}
 800c7ac:	200031f4 	.word	0x200031f4

0800c7b0 <write_reg_16>:
void write_reg_16(uint8_t start_reg, uint16_t value) {
 800c7b0:	b570      	push	{r4, r5, r6, lr}
 800c7b2:	0004      	movs	r4, r0
 800c7b4:	000d      	movs	r5, r1
  write_reg(start_reg, (uint8_t)((value >> 8) & 0xFF));
 800c7b6:	0a09      	lsrs	r1, r1, #8
 800c7b8:	f7ff ffe0 	bl	800c77c <write_reg>
  write_reg(start_reg + 1, (uint8_t)(value & 0xFF));
 800c7bc:	b2e9      	uxtb	r1, r5
 800c7be:	3401      	adds	r4, #1
 800c7c0:	b2e0      	uxtb	r0, r4
 800c7c2:	f7ff ffdb 	bl	800c77c <write_reg>
}
 800c7c6:	bd70      	pop	{r4, r5, r6, pc}

0800c7c8 <hw_radio_set_bitrate>:
void hw_radio_set_bitrate(uint32_t bps) {
 800c7c8:	b510      	push	{r4, lr}
 800c7ca:	0001      	movs	r1, r0
  uint16_t bps_downscaled = (uint16_t)(SX127X_FXOSC / bps); 
 800c7cc:	4803      	ldr	r0, [pc, #12]	; (800c7dc <hw_radio_set_bitrate+0x14>)
 800c7ce:	f005 f99f 	bl	8011b10 <__udivsi3>
 800c7d2:	b281      	uxth	r1, r0
  write_reg_16(REG_BITRATEMSB, bps_downscaled);
 800c7d4:	2002      	movs	r0, #2
 800c7d6:	f7ff ffeb 	bl	800c7b0 <write_reg_16>
}
 800c7da:	bd10      	pop	{r4, pc}
 800c7dc:	01e84800 	.word	0x01e84800

0800c7e0 <hw_radio_set_tx_fdev>:
void hw_radio_set_tx_fdev(uint32_t fdev) {
 800c7e0:	b510      	push	{r4, lr}
  uint16_t fdev_downscaled = fdev / FREQ_STEP;
 800c7e2:	f008 f80d 	bl	8014800 <__aeabi_ui2d>
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	4b04      	ldr	r3, [pc, #16]	; (800c7fc <hw_radio_set_tx_fdev+0x1c>)
 800c7ea:	f006 fd81 	bl	80132f0 <__aeabi_ddiv>
 800c7ee:	f005 fbdd 	bl	8011fac <__aeabi_d2uiz>
 800c7f2:	b281      	uxth	r1, r0
  write_reg_16(REG_FDEVMSB, fdev_downscaled);
 800c7f4:	2004      	movs	r0, #4
 800c7f6:	f7ff ffdb 	bl	800c7b0 <write_reg_16>
}
 800c7fa:	bd10      	pop	{r4, pc}
 800c7fc:	404e8480 	.word	0x404e8480

0800c800 <hw_radio_set_preamble_size>:
void hw_radio_set_preamble_size(uint16_t size) {
 800c800:	b510      	push	{r4, lr}
 800c802:	0001      	movs	r1, r0
  write_reg_16(REG_PREAMBLEMSB, size);
 800c804:	2025      	movs	r0, #37	; 0x25
 800c806:	f7ff ffd3 	bl	800c7b0 <write_reg_16>
}
 800c80a:	bd10      	pop	{r4, pc}

0800c80c <hw_radio_set_sync_word>:
void hw_radio_set_sync_word(uint8_t *sync_word, uint8_t sync_size) {
 800c80c:	b510      	push	{r4, lr}
  uint16_t full_sync_word = sync_word[0];
 800c80e:	7803      	ldrb	r3, [r0, #0]
  if(sync_size > 1)
 800c810:	2901      	cmp	r1, #1
 800c812:	d903      	bls.n	800c81c <hw_radio_set_sync_word+0x10>
    full_sync_word += ((uint16_t)sync_word[1]) << 8;
 800c814:	7841      	ldrb	r1, [r0, #1]
 800c816:	0209      	lsls	r1, r1, #8
 800c818:	18cb      	adds	r3, r1, r3
 800c81a:	b29b      	uxth	r3, r3
  write_reg_16(REG_SYNCVALUE1, full_sync_word);
 800c81c:	0019      	movs	r1, r3
 800c81e:	2028      	movs	r0, #40	; 0x28
 800c820:	f7ff ffc6 	bl	800c7b0 <write_reg_16>
}
 800c824:	bd10      	pop	{r4, pc}

0800c826 <hw_radio_set_preamble_detector>:
void hw_radio_set_preamble_detector(uint8_t preamble_detector_size, uint8_t preamble_tol) {
 800c826:	b510      	push	{r4, lr}
  write_reg(REG_PREAMBLEDETECT, RF_PREAMBLEDETECT_DETECTOR_ON | (preamble_detector_size-1) << 5 | preamble_tol);
 800c828:	3801      	subs	r0, #1
 800c82a:	0140      	lsls	r0, r0, #5
 800c82c:	4308      	orrs	r0, r1
 800c82e:	b2c0      	uxtb	r0, r0
 800c830:	2180      	movs	r1, #128	; 0x80
 800c832:	4249      	negs	r1, r1
 800c834:	4301      	orrs	r1, r0
 800c836:	b2c9      	uxtb	r1, r1
 800c838:	201f      	movs	r0, #31
 800c83a:	f7ff ff9f 	bl	800c77c <write_reg>
}
 800c83e:	bd10      	pop	{r4, pc}

0800c840 <hw_radio_set_rssi_config>:
void hw_radio_set_rssi_config(uint8_t rssi_smoothing, uint8_t rssi_offset) {
 800c840:	b510      	push	{r4, lr}
 800c842:	0004      	movs	r4, r0
  write_reg(REG_RSSICONFIG, rssi_offset << 3 | rssi_smoothing);
 800c844:	00c9      	lsls	r1, r1, #3
 800c846:	4301      	orrs	r1, r0
 800c848:	b2c9      	uxtb	r1, r1
 800c84a:	200e      	movs	r0, #14
 800c84c:	f7ff ff96 	bl	800c77c <write_reg>
  rssi_smoothing_full = 2 << rssi_smoothing;
 800c850:	2302      	movs	r3, #2
 800c852:	40a3      	lsls	r3, r4
 800c854:	4a01      	ldr	r2, [pc, #4]	; (800c85c <hw_radio_set_rssi_config+0x1c>)
 800c856:	7013      	strb	r3, [r2, #0]
}
 800c858:	bd10      	pop	{r4, pc}
 800c85a:	46c0      	nop			; (mov r8, r8)
 800c85c:	200031ca 	.word	0x200031ca

0800c860 <hw_radio_set_center_freq>:
void hw_radio_set_center_freq(uint32_t center_freq) {
 800c860:	b510      	push	{r4, lr}
  current_center_freq = center_freq; 
 800c862:	4b0d      	ldr	r3, [pc, #52]	; (800c898 <hw_radio_set_center_freq+0x38>)
 800c864:	6018      	str	r0, [r3, #0]
  center_freq = (uint32_t)(center_freq / FREQ_STEP);
 800c866:	f007 ffcb 	bl	8014800 <__aeabi_ui2d>
 800c86a:	2200      	movs	r2, #0
 800c86c:	4b0b      	ldr	r3, [pc, #44]	; (800c89c <hw_radio_set_center_freq+0x3c>)
 800c86e:	f006 fd3f 	bl	80132f0 <__aeabi_ddiv>
 800c872:	f005 fb9b 	bl	8011fac <__aeabi_d2uiz>
 800c876:	0004      	movs	r4, r0
  write_reg(REG_FRFMSB, (uint8_t)((center_freq >> 16) & 0xFF));
 800c878:	0c01      	lsrs	r1, r0, #16
 800c87a:	b2c9      	uxtb	r1, r1
 800c87c:	2006      	movs	r0, #6
 800c87e:	f7ff ff7d 	bl	800c77c <write_reg>
  write_reg(REG_FRFMID, (uint8_t)((center_freq >> 8) & 0xFF));
 800c882:	0a21      	lsrs	r1, r4, #8
 800c884:	b2c9      	uxtb	r1, r1
 800c886:	2007      	movs	r0, #7
 800c888:	f7ff ff78 	bl	800c77c <write_reg>
  write_reg(REG_FRFLSB, (uint8_t)(center_freq & 0xFF));
 800c88c:	b2e1      	uxtb	r1, r4
 800c88e:	2008      	movs	r0, #8
 800c890:	f7ff ff74 	bl	800c77c <write_reg>
}
 800c894:	bd10      	pop	{r4, pc}
 800c896:	46c0      	nop			; (mov r8, r8)
 800c898:	200031b0 	.word	0x200031b0
 800c89c:	404e8480 	.word	0x404e8480

0800c8a0 <hw_radio_set_rx_bw_hz>:
void hw_radio_set_rx_bw_hz(uint32_t bw_hz) {
 800c8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8a2:	46d6      	mov	lr, sl
 800c8a4:	464f      	mov	r7, r9
 800c8a6:	4646      	mov	r6, r8
 800c8a8:	b5c0      	push	{r6, r7, lr}
 800c8aa:	4680      	mov	r8, r0
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	4699      	mov	r9, r3
  uint32_t min_bw_dif = 10e6;
 800c8b0:	4f21      	ldr	r7, [pc, #132]	; (800c938 <hw_radio_set_rx_bw_hz+0x98>)
  for(bw_exp_count = 1; bw_exp_count < 8; bw_exp_count++) {
 800c8b2:	2601      	movs	r6, #1
 800c8b4:	e032      	b.n	800c91c <hw_radio_set_rx_bw_hz+0x7c>
        min_bw_dif = (uint32_t) abs(computed_bw - bw_hz);
 800c8b6:	4650      	mov	r0, sl
 800c8b8:	f007 fff2 	bl	80148a0 <abs>
 800c8bc:	0007      	movs	r7, r0
        reg_bw = ((((bw_mant_count - 16) / 4) << 3) | bw_exp_count);
 800c8be:	0023      	movs	r3, r4
 800c8c0:	3b10      	subs	r3, #16
 800c8c2:	17da      	asrs	r2, r3, #31
 800c8c4:	2103      	movs	r1, #3
 800c8c6:	4011      	ands	r1, r2
 800c8c8:	18c9      	adds	r1, r1, r3
 800c8ca:	1089      	asrs	r1, r1, #2
 800c8cc:	00c9      	lsls	r1, r1, #3
 800c8ce:	4331      	orrs	r1, r6
 800c8d0:	b2ca      	uxtb	r2, r1
 800c8d2:	4691      	mov	r9, r2
        rx_bw_number = (bw_exp_count - 1) * 3 + ((bw_mant_count - 16) >> 2);
 800c8d4:	109a      	asrs	r2, r3, #2
 800c8d6:	0073      	lsls	r3, r6, #1
 800c8d8:	18f3      	adds	r3, r6, r3
 800c8da:	189b      	adds	r3, r3, r2
 800c8dc:	3b03      	subs	r3, #3
 800c8de:	4a17      	ldr	r2, [pc, #92]	; (800c93c <hw_radio_set_rx_bw_hz+0x9c>)
 800c8e0:	7013      	strb	r3, [r2, #0]
        rx_bw_khz = (uint8_t) (computed_bw / 1000);
 800c8e2:	21fa      	movs	r1, #250	; 0xfa
 800c8e4:	0089      	lsls	r1, r1, #2
 800c8e6:	0028      	movs	r0, r5
 800c8e8:	f005 f912 	bl	8011b10 <__udivsi3>
 800c8ec:	4b14      	ldr	r3, [pc, #80]	; (800c940 <hw_radio_set_rx_bw_hz+0xa0>)
 800c8ee:	7018      	strb	r0, [r3, #0]
    for(bw_mant_count = 16; bw_mant_count <= 24; bw_mant_count += 4) {
 800c8f0:	3404      	adds	r4, #4
 800c8f2:	b2e4      	uxtb	r4, r4
 800c8f4:	2c18      	cmp	r4, #24
 800c8f6:	d80f      	bhi.n	800c918 <hw_radio_set_rx_bw_hz+0x78>
      computed_bw = SX127X_FXOSC / (bw_mant_count * (1 << (bw_exp_count + 2)));
 800c8f8:	1cb3      	adds	r3, r6, #2
 800c8fa:	0021      	movs	r1, r4
 800c8fc:	4099      	lsls	r1, r3
 800c8fe:	4811      	ldr	r0, [pc, #68]	; (800c944 <hw_radio_set_rx_bw_hz+0xa4>)
 800c900:	f005 f906 	bl	8011b10 <__udivsi3>
 800c904:	0005      	movs	r5, r0
      if((uint32_t) abs(computed_bw - bw_hz) < min_bw_dif) {
 800c906:	4643      	mov	r3, r8
 800c908:	1ac3      	subs	r3, r0, r3
 800c90a:	469a      	mov	sl, r3
 800c90c:	0018      	movs	r0, r3
 800c90e:	f007 ffc7 	bl	80148a0 <abs>
 800c912:	42b8      	cmp	r0, r7
 800c914:	d2ec      	bcs.n	800c8f0 <hw_radio_set_rx_bw_hz+0x50>
 800c916:	e7ce      	b.n	800c8b6 <hw_radio_set_rx_bw_hz+0x16>
  for(bw_exp_count = 1; bw_exp_count < 8; bw_exp_count++) {
 800c918:	3601      	adds	r6, #1
 800c91a:	b2f6      	uxtb	r6, r6
 800c91c:	2e07      	cmp	r6, #7
 800c91e:	d801      	bhi.n	800c924 <hw_radio_set_rx_bw_hz+0x84>
    for(bw_mant_count = 16; bw_mant_count <= 24; bw_mant_count += 4) {
 800c920:	2410      	movs	r4, #16
 800c922:	e7e7      	b.n	800c8f4 <hw_radio_set_rx_bw_hz+0x54>
  write_reg(REG_RXBW, reg_bw);
 800c924:	4649      	mov	r1, r9
 800c926:	2012      	movs	r0, #18
 800c928:	f7ff ff28 	bl	800c77c <write_reg>
}
 800c92c:	bc1c      	pop	{r2, r3, r4}
 800c92e:	4690      	mov	r8, r2
 800c930:	4699      	mov	r9, r3
 800c932:	46a2      	mov	sl, r4
 800c934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c936:	46c0      	nop			; (mov r8, r8)
 800c938:	00989680 	.word	0x00989680
 800c93c:	20000598 	.word	0x20000598
 800c940:	200031d0 	.word	0x200031d0
 800c944:	01e84800 	.word	0x01e84800

0800c948 <hw_radio_set_tx_power>:
void hw_radio_set_tx_power(int8_t eirp) {
 800c948:	b510      	push	{r4, lr}
 800c94a:	0004      	movs	r4, r0
  if(eirp < -5) {
 800c94c:	1d43      	adds	r3, r0, #5
 800c94e:	db06      	blt.n	800c95e <hw_radio_set_tx_power+0x16>
  if(eirp > 15) {
 800c950:	280f      	cmp	r0, #15
 800c952:	dd06      	ble.n	800c962 <hw_radio_set_tx_power+0x1a>
  current_tx_power = eirp;
 800c954:	4b17      	ldr	r3, [pc, #92]	; (800c9b4 <hw_radio_set_tx_power+0x6c>)
 800c956:	220f      	movs	r2, #15
 800c958:	701a      	strb	r2, [r3, #0]
    eirp = 15;
 800c95a:	240f      	movs	r4, #15
 800c95c:	e005      	b.n	800c96a <hw_radio_set_tx_power+0x22>
    eirp = -5;
 800c95e:	2405      	movs	r4, #5
 800c960:	4264      	negs	r4, r4
  current_tx_power = eirp;
 800c962:	4b14      	ldr	r3, [pc, #80]	; (800c9b4 <hw_radio_set_tx_power+0x6c>)
 800c964:	701c      	strb	r4, [r3, #0]
  if(eirp <= 5)
 800c966:	2c05      	cmp	r4, #5
 800c968:	dd0d      	ble.n	800c986 <hw_radio_set_tx_power+0x3e>
    write_reg(REG_PACONFIG, 0x70 | (uint8_t)(eirp));
 800c96a:	b2e3      	uxtb	r3, r4
 800c96c:	2170      	movs	r1, #112	; 0x70
 800c96e:	4319      	orrs	r1, r3
 800c970:	b2c9      	uxtb	r1, r1
 800c972:	2009      	movs	r0, #9
 800c974:	f7ff ff02 	bl	800c77c <write_reg>
  if(eirp > 15) 
 800c978:	2c0f      	cmp	r4, #15
 800c97a:	dd16      	ble.n	800c9aa <hw_radio_set_tx_power+0x62>
    write_reg(REG_OCP, OCP_TRIM_PA_BOOST_ON); 
 800c97c:	212a      	movs	r1, #42	; 0x2a
 800c97e:	200b      	movs	r0, #11
 800c980:	f7ff fefc 	bl	800c77c <write_reg>
}
 800c984:	bd10      	pop	{r4, pc}
    write_reg(REG_PACONFIG, (uint8_t)(eirp - 10.8 + 15));
 800c986:	0020      	movs	r0, r4
 800c988:	f007 ff0a 	bl	80147a0 <__aeabi_i2d>
 800c98c:	4a0a      	ldr	r2, [pc, #40]	; (800c9b8 <hw_radio_set_tx_power+0x70>)
 800c98e:	4b0b      	ldr	r3, [pc, #44]	; (800c9bc <hw_radio_set_tx_power+0x74>)
 800c990:	f007 fb20 	bl	8013fd4 <__aeabi_dsub>
 800c994:	2200      	movs	r2, #0
 800c996:	4b0a      	ldr	r3, [pc, #40]	; (800c9c0 <hw_radio_set_tx_power+0x78>)
 800c998:	f006 f940 	bl	8012c1c <__aeabi_dadd>
 800c99c:	f005 fb06 	bl	8011fac <__aeabi_d2uiz>
 800c9a0:	b2c1      	uxtb	r1, r0
 800c9a2:	2009      	movs	r0, #9
 800c9a4:	f7ff feea 	bl	800c77c <write_reg>
 800c9a8:	e7e6      	b.n	800c978 <hw_radio_set_tx_power+0x30>
    write_reg(REG_OCP, OCP_TRIM_PA_BOOST_OFF);
 800c9aa:	2120      	movs	r1, #32
 800c9ac:	200b      	movs	r0, #11
 800c9ae:	f7ff fee5 	bl	800c77c <write_reg>
}
 800c9b2:	e7e7      	b.n	800c984 <hw_radio_set_tx_power+0x3c>
 800c9b4:	200031b8 	.word	0x200031b8
 800c9b8:	9999999a 	.word	0x9999999a
 800c9bc:	40259999 	.word	0x40259999
 800c9c0:	402e0000 	.word	0x402e0000

0800c9c4 <init_regs>:
static void init_regs() {
 800c9c4:	b510      	push	{r4, lr}
  if(is_sx1272) {
 800c9c6:	4b30      	ldr	r3, [pc, #192]	; (800ca88 <init_regs+0xc4>)
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d051      	beq.n	800ca72 <init_regs+0xae>
    write_reg(REG_OPMODE, RF_OPMODE_SLEEP | gaussian_shape_filter << 3); // FSK; modulation shaping, sleep
 800c9ce:	2110      	movs	r1, #16
 800c9d0:	2001      	movs	r0, #1
 800c9d2:	f7ff fed3 	bl	800c77c <write_reg>
  hw_radio_set_tx_power(10);
 800c9d6:	200a      	movs	r0, #10
 800c9d8:	f7ff ffb6 	bl	800c948 <hw_radio_set_tx_power>
  if(is_sx1272) {
 800c9dc:	4b2a      	ldr	r3, [pc, #168]	; (800ca88 <init_regs+0xc4>)
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d04b      	beq.n	800ca7c <init_regs+0xb8>
    write_reg(REG_PARAMP, RF_PARAMP_0040_US | RF_PARAMP_LOWPNTXPLL_OFF); // PaRamp=40us // TODO, use LowPnRxPll?
 800c9e4:	2119      	movs	r1, #25
 800c9e6:	200a      	movs	r0, #10
 800c9e8:	f7ff fec8 	bl	800c77c <write_reg>
  write_reg(REG_LNA, RF_LNA_GAIN_G1 | RF_LNA_BOOST_ON); // highest gain for now, for 868 // TODO LnaBoostHf consumes 150% current compared to default LNA
 800c9ec:	2123      	movs	r1, #35	; 0x23
 800c9ee:	200c      	movs	r0, #12
 800c9f0:	f7ff fec4 	bl	800c77c <write_reg>
  write_reg(REG_RXCONFIG, RF_RXCONFIG_RESTARTRXONCOLLISION_OFF | RF_RXCONFIG_AFCAUTO_OFF | 
 800c9f4:	210e      	movs	r1, #14
 800c9f6:	200d      	movs	r0, #13
 800c9f8:	f7ff fec0 	bl	800c77c <write_reg>
  write_reg(REG_RSSICONFIG, RF_RSSICONFIG_OFFSET_P_00_DB | RF_RSSICONFIG_SMOOTHING_8); // TODO no RSSI offset for now + using 8 samples for smoothing
 800c9fc:	2102      	movs	r1, #2
 800c9fe:	200e      	movs	r0, #14
 800ca00:	f7ff febc 	bl	800c77c <write_reg>
  rssi_smoothing_full = 8;
 800ca04:	4b21      	ldr	r3, [pc, #132]	; (800ca8c <init_regs+0xc8>)
 800ca06:	2208      	movs	r2, #8
 800ca08:	701a      	strb	r2, [r3, #0]
  write_reg(REG_RSSITHRESH, RF_RSSITHRESH_THRESHOLD); // TODO using -128 dBm for now
 800ca0a:	21ff      	movs	r1, #255	; 0xff
 800ca0c:	2010      	movs	r0, #16
 800ca0e:	f7ff feb5 	bl	800c77c <write_reg>
  write_reg(REG_PREAMBLEDETECT, RF_PREAMBLEDETECT_DETECTOR_ON | RF_PREAMBLEDETECT_DETECTORSIZE_3 | RF_PREAMBLEDETECT_DETECTORTOL_15);  
 800ca12:	21cf      	movs	r1, #207	; 0xcf
 800ca14:	201f      	movs	r0, #31
 800ca16:	f7ff feb1 	bl	800c77c <write_reg>
  write_reg(REG_SYNCCONFIG, RF_SYNCCONFIG_AUTORESTARTRXMODE_OFF | RF_SYNCCONFIG_PREAMBLEPOLARITY_AA | 
 800ca1a:	2111      	movs	r1, #17
 800ca1c:	2027      	movs	r0, #39	; 0x27
 800ca1e:	f7ff fead 	bl	800c77c <write_reg>
  write_reg(REG_SYNCVALUE1, 0xE6); // by default, the syncword is set for CS0(PN9) class 0
 800ca22:	21e6      	movs	r1, #230	; 0xe6
 800ca24:	2028      	movs	r0, #40	; 0x28
 800ca26:	f7ff fea9 	bl	800c77c <write_reg>
  write_reg(REG_SYNCVALUE2, 0xD0);
 800ca2a:	21d0      	movs	r1, #208	; 0xd0
 800ca2c:	2029      	movs	r0, #41	; 0x29
 800ca2e:	f7ff fea5 	bl	800c77c <write_reg>
  write_reg(REG_PACKETCONFIG1, RF_PACKETCONFIG1_PACKETFORMAT_FIXED | RF_PACKETCONFIG1_DCFREE_OFF |
 800ca32:	2108      	movs	r1, #8
 800ca34:	2030      	movs	r0, #48	; 0x30
 800ca36:	f7ff fea1 	bl	800c77c <write_reg>
  write_reg(REG_PACKETCONFIG2, RF_PACKETCONFIG2_WMBUS_CRC_DISABLE | RF_PACKETCONFIG2_DATAMODE_PACKET |
 800ca3a:	2140      	movs	r1, #64	; 0x40
 800ca3c:	2031      	movs	r0, #49	; 0x31
 800ca3e:	f7ff fe9d 	bl	800c77c <write_reg>
  write_reg(REG_PAYLOADLENGTH, 0x00); // unlimited length mode (in combination with PacketFormat = 0), so we can encode/decode length byte in software
 800ca42:	2100      	movs	r1, #0
 800ca44:	2032      	movs	r0, #50	; 0x32
 800ca46:	f7ff fe99 	bl	800c77c <write_reg>
  previous_payload_length = 0;
 800ca4a:	4b11      	ldr	r3, [pc, #68]	; (800ca90 <init_regs+0xcc>)
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	801a      	strh	r2, [r3, #0]
  write_reg(REG_FIFOTHRESH, RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY | 0x03); // tx start condition true when there is at least one byte in FIFO (we are in standby/sleep when filling FIFO anyway)
 800ca50:	2183      	movs	r1, #131	; 0x83
 800ca52:	2035      	movs	r0, #53	; 0x35
 800ca54:	f7ff fe92 	bl	800c77c <write_reg>
  write_reg(REG_SEQCONFIG1, RF_SEQCONFIG1_SEQUENCER_STOP | RF_SEQCONFIG1_IDLEMODE_STANDBY |
 800ca58:	2140      	movs	r1, #64	; 0x40
 800ca5a:	2036      	movs	r0, #54	; 0x36
 800ca5c:	f7ff fe8e 	bl	800c77c <write_reg>
  write_reg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00 | RF_DIOMAPPING1_DIO1_00 |
 800ca60:	210c      	movs	r1, #12
 800ca62:	2040      	movs	r0, #64	; 0x40
 800ca64:	f7ff fe8a 	bl	800c77c <write_reg>
  write_reg(REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_00 | RF_DIOMAPPING2_DIO5_11 |
 800ca68:	2130      	movs	r1, #48	; 0x30
 800ca6a:	2041      	movs	r0, #65	; 0x41
 800ca6c:	f7ff fe86 	bl	800c77c <write_reg>
}
 800ca70:	bd10      	pop	{r4, pc}
    write_reg(REG_OPMODE, RF_OPMODE_SLEEP | RF_OPMODE_MODULATIONTYPE_FSK); // FSK, hi freq, sleep
 800ca72:	2100      	movs	r1, #0
 800ca74:	2001      	movs	r0, #1
 800ca76:	f7ff fe81 	bl	800c77c <write_reg>
 800ca7a:	e7ac      	b.n	800c9d6 <init_regs+0x12>
    write_reg(REG_PARAMP, RF_PARAMP_0040_US | (gaussian_shape_filter << 5)); // modulation shaping and PaRamp=40us
 800ca7c:	2149      	movs	r1, #73	; 0x49
 800ca7e:	200a      	movs	r0, #10
 800ca80:	f7ff fe7c 	bl	800c77c <write_reg>
 800ca84:	e7b2      	b.n	800c9ec <init_regs+0x28>
 800ca86:	46c0      	nop			; (mov r8, r8)
 800ca88:	200031bd 	.word	0x200031bd
 800ca8c:	200031ca 	.word	0x200031ca
 800ca90:	200031c0 	.word	0x200031c0

0800ca94 <read_fifo>:
static void read_fifo(uint8_t* buffer, uint8_t size) {
 800ca94:	b570      	push	{r4, r5, r6, lr}
 800ca96:	0005      	movs	r5, r0
 800ca98:	000e      	movs	r6, r1
  enable_spi_io();
 800ca9a:	f7ff fe59 	bl	800c750 <enable_spi_io>
  spi_select(sx127x_spi);
 800ca9e:	4c09      	ldr	r4, [pc, #36]	; (800cac4 <read_fifo+0x30>)
 800caa0:	6820      	ldr	r0, [r4, #0]
 800caa2:	f7fe fe89 	bl	800b7b8 <spi_select>
  spi_exchange_byte(sx127x_spi, REG_FIFO);
 800caa6:	2100      	movs	r1, #0
 800caa8:	6820      	ldr	r0, [r4, #0]
 800caaa:	f7fe feb8 	bl	800b81e <spi_exchange_byte>
  spi_exchange_bytes(sx127x_spi, NULL, buffer, size);
 800caae:	0033      	movs	r3, r6
 800cab0:	002a      	movs	r2, r5
 800cab2:	2100      	movs	r1, #0
 800cab4:	6820      	ldr	r0, [r4, #0]
 800cab6:	f7fe fec5 	bl	800b844 <spi_exchange_bytes>
  spi_deselect(sx127x_spi);
 800caba:	6820      	ldr	r0, [r4, #0]
 800cabc:	f7fe fe95 	bl	800b7ea <spi_deselect>
}
 800cac0:	bd70      	pop	{r4, r5, r6, pc}
 800cac2:	46c0      	nop			; (mov r8, r8)
 800cac4:	200031f4 	.word	0x200031f4

0800cac8 <read_reg>:
static uint8_t read_reg(uint8_t addr) {
 800cac8:	b570      	push	{r4, r5, r6, lr}
 800caca:	0005      	movs	r5, r0
  enable_spi_io();
 800cacc:	f7ff fe40 	bl	800c750 <enable_spi_io>
  spi_select(sx127x_spi);
 800cad0:	4c09      	ldr	r4, [pc, #36]	; (800caf8 <read_reg+0x30>)
 800cad2:	6820      	ldr	r0, [r4, #0]
 800cad4:	f7fe fe70 	bl	800b7b8 <spi_select>
  spi_exchange_byte(sx127x_spi, addr & 0x7F); // send address with bit 7 low to signal a read operation
 800cad8:	217f      	movs	r1, #127	; 0x7f
 800cada:	4029      	ands	r1, r5
 800cadc:	6820      	ldr	r0, [r4, #0]
 800cade:	f7fe fe9e 	bl	800b81e <spi_exchange_byte>
  uint8_t value = spi_exchange_byte(sx127x_spi, 0x00); // get the response
 800cae2:	2100      	movs	r1, #0
 800cae4:	6820      	ldr	r0, [r4, #0]
 800cae6:	f7fe fe9a 	bl	800b81e <spi_exchange_byte>
 800caea:	0005      	movs	r5, r0
  spi_deselect(sx127x_spi);
 800caec:	6820      	ldr	r0, [r4, #0]
 800caee:	f7fe fe7c 	bl	800b7ea <spi_deselect>
}
 800caf2:	0028      	movs	r0, r5
 800caf4:	bd70      	pop	{r4, r5, r6, pc}
 800caf6:	46c0      	nop			; (mov r8, r8)
 800caf8:	200031f4 	.word	0x200031f4

0800cafc <fifo_level_isr>:
{
 800cafc:	b510      	push	{r4, lr}
    hw_gpio_disable_interrupt(SX127x_DIO1_PIN);
 800cafe:	480a      	ldr	r0, [pc, #40]	; (800cb28 <fifo_level_isr+0x2c>)
 800cb00:	f7fe f992 	bl	800ae28 <hw_gpio_disable_interrupt>
    flags = read_reg(REG_IRQFLAGS2);
 800cb04:	203f      	movs	r0, #63	; 0x3f
 800cb06:	f7ff ffdf 	bl	800cac8 <read_reg>
    if (flags & 0x08)
 800cb0a:	0703      	lsls	r3, r0, #28
 800cb0c:	d405      	bmi.n	800cb1a <fifo_level_isr+0x1e>
    tx_refill_callback(remaining_bytes_len);
 800cb0e:	4b07      	ldr	r3, [pc, #28]	; (800cb2c <fifo_level_isr+0x30>)
 800cb10:	8818      	ldrh	r0, [r3, #0]
 800cb12:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <fifo_level_isr+0x34>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4798      	blx	r3
}
 800cb18:	bd10      	pop	{r4, pc}
        assert(false);
 800cb1a:	4b06      	ldr	r3, [pc, #24]	; (800cb34 <fifo_level_isr+0x38>)
 800cb1c:	4a06      	ldr	r2, [pc, #24]	; (800cb38 <fifo_level_isr+0x3c>)
 800cb1e:	4907      	ldr	r1, [pc, #28]	; (800cb3c <fifo_level_isr+0x40>)
 800cb20:	4807      	ldr	r0, [pc, #28]	; (800cb40 <fifo_level_isr+0x44>)
 800cb22:	f7fb fd6d 	bl	8008600 <__assert_func>
 800cb26:	46c0      	nop			; (mov r8, r8)
 800cb28:	50000401 	.word	0x50000401
 800cb2c:	200031c8 	.word	0x200031c8
 800cb30:	20003200 	.word	0x20003200
 800cb34:	080169c8 	.word	0x080169c8
 800cb38:	0801a164 	.word	0x0801a164
 800cb3c:	00000256 	.word	0x00000256
 800cb40:	08019f14 	.word	0x08019f14

0800cb44 <wait_for_fifo_level_isr>:
static void wait_for_fifo_level_isr() { 
 800cb44:	b510      	push	{r4, lr}
  fifo_level_irq_triggered = false;
 800cb46:	4b07      	ldr	r3, [pc, #28]	; (800cb64 <wait_for_fifo_level_isr+0x20>)
 800cb48:	2200      	movs	r2, #0
 800cb4a:	701a      	strb	r2, [r3, #0]
  while(!fifo_level_irq_triggered) 
 800cb4c:	4b05      	ldr	r3, [pc, #20]	; (800cb64 <wait_for_fifo_level_isr+0x20>)
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d104      	bne.n	800cb5e <wait_for_fifo_level_isr+0x1a>
      if(state == STATE_IDLE)
 800cb54:	4b04      	ldr	r3, [pc, #16]	; (800cb68 <wait_for_fifo_level_isr+0x24>)
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1f7      	bne.n	800cb4c <wait_for_fifo_level_isr+0x8>
 800cb5c:	e001      	b.n	800cb62 <wait_for_fifo_level_isr+0x1e>
  fifo_level_isr();
 800cb5e:	f7ff ffcd 	bl	800cafc <fifo_level_isr>
}
 800cb62:	bd10      	pop	{r4, pc}
 800cb64:	200031bb 	.word	0x200031bb
 800cb68:	2000059a 	.word	0x2000059a

0800cb6c <bg_scan_rx_done>:
{
 800cb6c:	b570      	push	{r4, r5, r6, lr}
   timer_tick_t rx_timestamp = timer_get_counter_value();
 800cb6e:	f003 fbc7 	bl	8010300 <timer_get_counter_value>
 800cb72:	0004      	movs	r4, r0
   current_packet = alloc_packet_callback(FskPacketHandler_sx127x.Size);
 800cb74:	4b18      	ldr	r3, [pc, #96]	; (800cbd8 <bg_scan_rx_done+0x6c>)
 800cb76:	8818      	ldrh	r0, [r3, #0]
 800cb78:	4b18      	ldr	r3, [pc, #96]	; (800cbdc <bg_scan_rx_done+0x70>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4798      	blx	r3
 800cb7e:	4b18      	ldr	r3, [pc, #96]	; (800cbe0 <bg_scan_rx_done+0x74>)
 800cb80:	6018      	str	r0, [r3, #0]
   assert(current_packet); // TODO handle
 800cb82:	2800      	cmp	r0, #0
 800cb84:	d020      	beq.n	800cbc8 <bg_scan_rx_done+0x5c>
   current_packet->length = FskPacketHandler_sx127x.Size;
 800cb86:	4b14      	ldr	r3, [pc, #80]	; (800cbd8 <bg_scan_rx_done+0x6c>)
 800cb88:	8819      	ldrh	r1, [r3, #0]
 800cb8a:	8181      	strh	r1, [r0, #12]
   read_fifo(current_packet->data, FskPacketHandler_sx127x.Size); //current_packet->data + 1
 800cb8c:	300e      	adds	r0, #14
 800cb8e:	b2c9      	uxtb	r1, r1
 800cb90:	f7ff ff80 	bl	800ca94 <read_fifo>
   current_packet->rx_meta.timestamp = rx_timestamp;
 800cb94:	4e12      	ldr	r6, [pc, #72]	; (800cbe0 <bg_scan_rx_done+0x74>)
 800cb96:	6835      	ldr	r5, [r6, #0]
 800cb98:	602c      	str	r4, [r5, #0]
   current_packet->rx_meta.crc_status = HW_CRC_UNAVAILABLE;
 800cb9a:	2302      	movs	r3, #2
 800cb9c:	722b      	strb	r3, [r5, #8]
  return (- read_reg(REG_RSSIVALUE) >> 1);
 800cb9e:	2011      	movs	r0, #17
 800cba0:	f7ff ff92 	bl	800cac8 <read_reg>
 800cba4:	4240      	negs	r0, r0
 800cba6:	1040      	asrs	r0, r0, #1
   current_packet->rx_meta.rssi = get_rssi();
 800cba8:	80e8      	strh	r0, [r5, #6]
   current_packet->rx_meta.lqi = 0; // TODO
 800cbaa:	6830      	ldr	r0, [r6, #0]
 800cbac:	2300      	movs	r3, #0
 800cbae:	7103      	strb	r3, [r0, #4]
   rx_packet_callback(current_packet);
 800cbb0:	4b0c      	ldr	r3, [pc, #48]	; (800cbe4 <bg_scan_rx_done+0x78>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4798      	blx	r3
 *
 * \return error_t	SUCCESS if the task was cancelled successfully
 * 			EINVAL if the task was not registered with the scheduler
 *			EALREADY if the task was not scheduled or has already been executed			
 */
static inline error_t sched_cancel_task(task_t task) { return sched_cancel_task_with_arg(task, NULL);}
 800cbb6:	2100      	movs	r1, #0
 800cbb8:	480b      	ldr	r0, [pc, #44]	; (800cbe8 <bg_scan_rx_done+0x7c>)
 800cbba:	f002 fd85 	bl	800f6c8 <sched_cancel_task_with_arg>
  write_reg(REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN);
 800cbbe:	2110      	movs	r1, #16
 800cbc0:	203f      	movs	r0, #63	; 0x3f
 800cbc2:	f7ff fddb 	bl	800c77c <write_reg>
}
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}
   assert(current_packet); // TODO handle
 800cbc8:	21ee      	movs	r1, #238	; 0xee
 800cbca:	4b08      	ldr	r3, [pc, #32]	; (800cbec <bg_scan_rx_done+0x80>)
 800cbcc:	4a08      	ldr	r2, [pc, #32]	; (800cbf0 <bg_scan_rx_done+0x84>)
 800cbce:	0049      	lsls	r1, r1, #1
 800cbd0:	4808      	ldr	r0, [pc, #32]	; (800cbf4 <bg_scan_rx_done+0x88>)
 800cbd2:	f7fb fd15 	bl	8008600 <__assert_func>
 800cbd6:	46c0      	nop			; (mov r8, r8)
 800cbd8:	200031a4 	.word	0x200031a4
 800cbdc:	200031ac 	.word	0x200031ac
 800cbe0:	200031b4 	.word	0x200031b4
 800cbe4:	200031e0 	.word	0x200031e0
 800cbe8:	0800cc71 	.word	0x0800cc71
 800cbec:	08019f58 	.word	0x08019f58
 800cbf0:	0801a130 	.word	0x0801a130
 800cbf4:	08019f14 	.word	0x08019f14

0800cbf8 <reinit_rx>:
static void reinit_rx() {
 800cbf8:	b510      	push	{r4, lr}
 FskPacketHandler_sx127x.NbBytes = 0;
 800cbfa:	4b19      	ldr	r3, [pc, #100]	; (800cc60 <reinit_rx+0x68>)
 800cbfc:	2400      	movs	r4, #0
 800cbfe:	805c      	strh	r4, [r3, #2]
 FskPacketHandler_sx127x.Size = 0;
 800cc00:	801c      	strh	r4, [r3, #0]
 FskPacketHandler_sx127x.FifoThresh = 4;
 800cc02:	2204      	movs	r2, #4
 800cc04:	809a      	strh	r2, [r3, #4]
 write_reg(REG_FIFOTHRESH, RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY | (FskPacketHandler_sx127x.FifoThresh - 1));
 800cc06:	2183      	movs	r1, #131	; 0x83
 800cc08:	2035      	movs	r0, #53	; 0x35
 800cc0a:	f7ff fdb7 	bl	800c77c <write_reg>
 write_reg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO2_11);
 800cc0e:	210c      	movs	r1, #12
 800cc10:	2040      	movs	r0, #64	; 0x40
 800cc12:	f7ff fdb3 	bl	800c77c <write_reg>
 previous_payload_length = 0;
 800cc16:	4b13      	ldr	r3, [pc, #76]	; (800cc64 <reinit_rx+0x6c>)
 800cc18:	801c      	strh	r4, [r3, #0]
 write_reg(REG_PACKETCONFIG2, (read_reg(REG_PACKETCONFIG2) & RF_PACKETCONFIG2_PAYLOADLENGTH_MSB_MASK));
 800cc1a:	2031      	movs	r0, #49	; 0x31
 800cc1c:	f7ff ff54 	bl	800cac8 <read_reg>
 800cc20:	2307      	movs	r3, #7
 800cc22:	4398      	bics	r0, r3
 800cc24:	b2c1      	uxtb	r1, r0
 800cc26:	2031      	movs	r0, #49	; 0x31
 800cc28:	f7ff fda8 	bl	800c77c <write_reg>
 write_reg(REG_PAYLOADLENGTH, 0);
 800cc2c:	2100      	movs	r1, #0
 800cc2e:	2032      	movs	r0, #50	; 0x32
 800cc30:	f7ff fda4 	bl	800c77c <write_reg>
 write_reg(REG_RXCONFIG, RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK | RF_RXCONFIG_AFCAUTO_OFF| 
 800cc34:	214e      	movs	r1, #78	; 0x4e
 800cc36:	200d      	movs	r0, #13
 800cc38:	f7ff fda0 	bl	800c77c <write_reg>
 800cc3c:	2100      	movs	r1, #0
 800cc3e:	480a      	ldr	r0, [pc, #40]	; (800cc68 <reinit_rx+0x70>)
 800cc40:	f002 fd42 	bl	800f6c8 <sched_cancel_task_with_arg>
  write_reg(REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN);
 800cc44:	2110      	movs	r1, #16
 800cc46:	203f      	movs	r0, #63	; 0x3f
 800cc48:	f7ff fd98 	bl	800c77c <write_reg>
 hw_gpio_set_edge_interrupt(SX127x_DIO1_PIN, GPIO_RISING_EDGE);
 800cc4c:	4c07      	ldr	r4, [pc, #28]	; (800cc6c <reinit_rx+0x74>)
 800cc4e:	2101      	movs	r1, #1
 800cc50:	0020      	movs	r0, r4
 800cc52:	f7fd ffc5 	bl	800abe0 <hw_gpio_set_edge_interrupt>
 hw_gpio_enable_interrupt(SX127x_DIO1_PIN);
 800cc56:	0020      	movs	r0, r4
 800cc58:	f7fe f8a6 	bl	800ada8 <hw_gpio_enable_interrupt>
}
 800cc5c:	bd10      	pop	{r4, pc}
 800cc5e:	46c0      	nop			; (mov r8, r8)
 800cc60:	200031a4 	.word	0x200031a4
 800cc64:	200031c0 	.word	0x200031c0
 800cc68:	0800cc71 	.word	0x0800cc71
 800cc6c:	50000401 	.word	0x50000401

0800cc70 <fifo_threshold_isr>:
static void fifo_threshold_isr() {
 800cc70:	b570      	push	{r4, r5, r6, lr}
 800cc72:	b082      	sub	sp, #8
   hw_gpio_disable_interrupt(SX127x_DIO1_PIN);
 800cc74:	4870      	ldr	r0, [pc, #448]	; (800ce38 <fifo_threshold_isr+0x1c8>)
 800cc76:	f7fe f8d7 	bl	800ae28 <hw_gpio_disable_interrupt>
   assert(state == STATE_RX);
 800cc7a:	4b70      	ldr	r3, [pc, #448]	; (800ce3c <fifo_threshold_isr+0x1cc>)
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	2b02      	cmp	r3, #2
 800cc80:	d10f      	bne.n	800cca2 <fifo_threshold_isr+0x32>
   if (FskPacketHandler_sx127x.Size == 0 && FskPacketHandler_sx127x.NbBytes == 0)
 800cc82:	4b6f      	ldr	r3, [pc, #444]	; (800ce40 <fifo_threshold_isr+0x1d0>)
 800cc84:	881b      	ldrh	r3, [r3, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d15a      	bne.n	800cd40 <fifo_threshold_isr+0xd0>
 800cc8a:	4b6d      	ldr	r3, [pc, #436]	; (800ce40 <fifo_threshold_isr+0x1d0>)
 800cc8c:	885b      	ldrh	r3, [r3, #2]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d156      	bne.n	800cd40 <fifo_threshold_isr+0xd0>
  return (- read_reg(REG_RSSIVALUE) >> 1);
 800cc92:	2011      	movs	r0, #17
 800cc94:	f7ff ff18 	bl	800cac8 <read_reg>
 800cc98:	4240      	negs	r0, r0
 800cc9a:	1040      	asrs	r0, r0, #1
 800cc9c:	b206      	sxth	r6, r0
       uint8_t rx_bytes = 0;
 800cc9e:	2400      	movs	r4, #0
       while(!(CHECK_FIFO_EMPTY()) && rx_bytes < 4)
 800cca0:	e00d      	b.n	800ccbe <fifo_threshold_isr+0x4e>
   assert(state == STATE_RX);
 800cca2:	4b68      	ldr	r3, [pc, #416]	; (800ce44 <fifo_threshold_isr+0x1d4>)
 800cca4:	4a68      	ldr	r2, [pc, #416]	; (800ce48 <fifo_threshold_isr+0x1d8>)
 800cca6:	4969      	ldr	r1, [pc, #420]	; (800ce4c <fifo_threshold_isr+0x1dc>)
 800cca8:	4869      	ldr	r0, [pc, #420]	; (800ce50 <fifo_threshold_isr+0x1e0>)
 800ccaa:	f7fb fca9 	bl	8008600 <__assert_func>
           buffer[rx_bytes++] = read_reg(REG_FIFO);
 800ccae:	1c65      	adds	r5, r4, #1
 800ccb0:	b2ed      	uxtb	r5, r5
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	f7ff ff08 	bl	800cac8 <read_reg>
 800ccb8:	466b      	mov	r3, sp
 800ccba:	5518      	strb	r0, [r3, r4]
 800ccbc:	002c      	movs	r4, r5
       while(!(CHECK_FIFO_EMPTY()) && rx_bytes < 4)
 800ccbe:	4865      	ldr	r0, [pc, #404]	; (800ce54 <fifo_threshold_isr+0x1e4>)
 800ccc0:	f7fd ff7e 	bl	800abc0 <hw_gpio_get_in>
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	d101      	bne.n	800cccc <fifo_threshold_isr+0x5c>
 800ccc8:	2c03      	cmp	r4, #3
 800ccca:	d9f0      	bls.n	800ccae <fifo_threshold_isr+0x3e>
       assert(rx_bytes == 4);
 800cccc:	2c04      	cmp	r4, #4
 800ccce:	d122      	bne.n	800cd16 <fifo_threshold_isr+0xa6>
      memcpy(backup_buffer, buffer, rx_bytes);
 800ccd0:	0022      	movs	r2, r4
 800ccd2:	4669      	mov	r1, sp
 800ccd4:	a801      	add	r0, sp, #4
 800ccd6:	f008 f87b 	bl	8014dd0 <memcpy>
       rx_packet_header_callback(buffer, rx_bytes);
 800ccda:	4b5f      	ldr	r3, [pc, #380]	; (800ce58 <fifo_threshold_isr+0x1e8>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	0021      	movs	r1, r4
 800cce0:	4668      	mov	r0, sp
 800cce2:	4798      	blx	r3
       if(FskPacketHandler_sx127x.Size == 0) {
 800cce4:	4b56      	ldr	r3, [pc, #344]	; (800ce40 <fifo_threshold_isr+0x1d0>)
 800cce6:	8818      	ldrh	r0, [r3, #0]
 800cce8:	2800      	cmp	r0, #0
 800ccea:	d01b      	beq.n	800cd24 <fifo_threshold_isr+0xb4>
       current_packet = alloc_packet_callback(FskPacketHandler_sx127x.Size);
 800ccec:	4b5b      	ldr	r3, [pc, #364]	; (800ce5c <fifo_threshold_isr+0x1ec>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4798      	blx	r3
 800ccf2:	4b5b      	ldr	r3, [pc, #364]	; (800ce60 <fifo_threshold_isr+0x1f0>)
 800ccf4:	6018      	str	r0, [r3, #0]
       if(current_packet == NULL) {
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	d01a      	beq.n	800cd30 <fifo_threshold_isr+0xc0>
       current_packet->rx_meta.rssi = rssi;
 800ccfa:	80c6      	strh	r6, [r0, #6]
       memcpy(current_packet->data, backup_buffer, 4);
 800ccfc:	300e      	adds	r0, #14
 800ccfe:	2204      	movs	r2, #4
 800cd00:	a901      	add	r1, sp, #4
 800cd02:	f008 f865 	bl	8014dd0 <memcpy>
       current_packet->length = FskPacketHandler_sx127x.Size;
 800cd06:	4b56      	ldr	r3, [pc, #344]	; (800ce60 <fifo_threshold_isr+0x1f0>)
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	4b4d      	ldr	r3, [pc, #308]	; (800ce40 <fifo_threshold_isr+0x1d0>)
 800cd0c:	8819      	ldrh	r1, [r3, #0]
 800cd0e:	8191      	strh	r1, [r2, #12]
       FskPacketHandler_sx127x.NbBytes = 4;
 800cd10:	2204      	movs	r2, #4
 800cd12:	805a      	strh	r2, [r3, #2]
 800cd14:	e014      	b.n	800cd40 <fifo_threshold_isr+0xd0>
       assert(rx_bytes == 4);
 800cd16:	21a5      	movs	r1, #165	; 0xa5
 800cd18:	4b52      	ldr	r3, [pc, #328]	; (800ce64 <fifo_threshold_isr+0x1f4>)
 800cd1a:	4a4b      	ldr	r2, [pc, #300]	; (800ce48 <fifo_threshold_isr+0x1d8>)
 800cd1c:	0089      	lsls	r1, r1, #2
 800cd1e:	484c      	ldr	r0, [pc, #304]	; (800ce50 <fifo_threshold_isr+0x1e0>)
 800cd20:	f7fb fc6e 	bl	8008600 <__assert_func>
         log_print_error_string("Length was too large, discarding packet");
 800cd24:	4850      	ldr	r0, [pc, #320]	; (800ce68 <fifo_threshold_isr+0x1f8>)
 800cd26:	f002 f95b 	bl	800efe0 <log_print_error_string>
         reinit_rx();
 800cd2a:	f7ff ff65 	bl	800cbf8 <reinit_rx>
         return;
 800cd2e:	e06b      	b.n	800ce08 <fifo_threshold_isr+0x198>
         log_print_error_string("Could not allocate package, discarding.");
 800cd30:	484e      	ldr	r0, [pc, #312]	; (800ce6c <fifo_threshold_isr+0x1fc>)
 800cd32:	f002 f955 	bl	800efe0 <log_print_error_string>
         reinit_rx();
 800cd36:	f7ff ff5f 	bl	800cbf8 <reinit_rx>
         return;
 800cd3a:	e065      	b.n	800ce08 <fifo_threshold_isr+0x198>
     } else if(!(flags & RF_IRQFLAGS2_FIFOEMPTY)) {
 800cd3c:	0643      	lsls	r3, r0, #25
 800cd3e:	d523      	bpl.n	800cd88 <fifo_threshold_isr+0x118>
   while(!(CHECK_FIFO_EMPTY()) && (FskPacketHandler_sx127x.NbBytes < FskPacketHandler_sx127x.Size)) {
 800cd40:	4844      	ldr	r0, [pc, #272]	; (800ce54 <fifo_threshold_isr+0x1e4>)
 800cd42:	f7fd ff3d 	bl	800abc0 <hw_gpio_get_in>
 800cd46:	2800      	cmp	r0, #0
 800cd48:	d12a      	bne.n	800cda0 <fifo_threshold_isr+0x130>
 800cd4a:	4b3d      	ldr	r3, [pc, #244]	; (800ce40 <fifo_threshold_isr+0x1d0>)
 800cd4c:	885a      	ldrh	r2, [r3, #2]
 800cd4e:	881b      	ldrh	r3, [r3, #0]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d225      	bcs.n	800cda0 <fifo_threshold_isr+0x130>
     uint8_t flags = read_reg(REG_IRQFLAGS2);
 800cd54:	203f      	movs	r0, #63	; 0x3f
 800cd56:	f7ff feb7 	bl	800cac8 <read_reg>
     if((flags & RF_IRQFLAGS2_FIFOLEVEL) && ((FskPacketHandler_sx127x.NbBytes + FskPacketHandler_sx127x.FifoThresh) < FskPacketHandler_sx127x.Size)) {
 800cd5a:	0683      	lsls	r3, r0, #26
 800cd5c:	d5ee      	bpl.n	800cd3c <fifo_threshold_isr+0xcc>
 800cd5e:	4b38      	ldr	r3, [pc, #224]	; (800ce40 <fifo_threshold_isr+0x1d0>)
 800cd60:	885a      	ldrh	r2, [r3, #2]
 800cd62:	8899      	ldrh	r1, [r3, #4]
 800cd64:	1854      	adds	r4, r2, r1
 800cd66:	881b      	ldrh	r3, [r3, #0]
 800cd68:	429c      	cmp	r4, r3
 800cd6a:	dae7      	bge.n	800cd3c <fifo_threshold_isr+0xcc>
       read_fifo(&current_packet->data[FskPacketHandler_sx127x.NbBytes], FskPacketHandler_sx127x.FifoThresh);
 800cd6c:	4b3c      	ldr	r3, [pc, #240]	; (800ce60 <fifo_threshold_isr+0x1f0>)
 800cd6e:	6818      	ldr	r0, [r3, #0]
 800cd70:	b2c9      	uxtb	r1, r1
 800cd72:	3208      	adds	r2, #8
 800cd74:	1880      	adds	r0, r0, r2
 800cd76:	3006      	adds	r0, #6
 800cd78:	f7ff fe8c 	bl	800ca94 <read_fifo>
       FskPacketHandler_sx127x.NbBytes += FskPacketHandler_sx127x.FifoThresh;
 800cd7c:	4b30      	ldr	r3, [pc, #192]	; (800ce40 <fifo_threshold_isr+0x1d0>)
 800cd7e:	889a      	ldrh	r2, [r3, #4]
 800cd80:	8859      	ldrh	r1, [r3, #2]
 800cd82:	1852      	adds	r2, r2, r1
 800cd84:	805a      	strh	r2, [r3, #2]
 800cd86:	e7db      	b.n	800cd40 <fifo_threshold_isr+0xd0>
       current_packet->data[FskPacketHandler_sx127x.NbBytes++] = read_reg(REG_FIFO); 
 800cd88:	4b35      	ldr	r3, [pc, #212]	; (800ce60 <fifo_threshold_isr+0x1f0>)
 800cd8a:	681c      	ldr	r4, [r3, #0]
 800cd8c:	4b2c      	ldr	r3, [pc, #176]	; (800ce40 <fifo_threshold_isr+0x1d0>)
 800cd8e:	885d      	ldrh	r5, [r3, #2]
 800cd90:	1c6a      	adds	r2, r5, #1
 800cd92:	805a      	strh	r2, [r3, #2]
 800cd94:	2000      	movs	r0, #0
 800cd96:	f7ff fe97 	bl	800cac8 <read_reg>
 800cd9a:	1964      	adds	r4, r4, r5
 800cd9c:	73a0      	strb	r0, [r4, #14]
 800cd9e:	e7cf      	b.n	800cd40 <fifo_threshold_isr+0xd0>
   uint16_t remaining_bytes = FskPacketHandler_sx127x.Size - FskPacketHandler_sx127x.NbBytes;
 800cda0:	4b27      	ldr	r3, [pc, #156]	; (800ce40 <fifo_threshold_isr+0x1d0>)
 800cda2:	881d      	ldrh	r5, [r3, #0]
 800cda4:	885b      	ldrh	r3, [r3, #2]
 800cda6:	1aed      	subs	r5, r5, r3
 800cda8:	b2ad      	uxth	r5, r5
   while((remaining_bytes < 3) && (remaining_bytes != 0)) {
 800cdaa:	1e6c      	subs	r4, r5, #1
 800cdac:	b2a4      	uxth	r4, r4
 800cdae:	2c01      	cmp	r4, #1
 800cdb0:	d810      	bhi.n	800cdd4 <fifo_threshold_isr+0x164>
      if(!CHECK_FIFO_EMPTY()) {
 800cdb2:	4828      	ldr	r0, [pc, #160]	; (800ce54 <fifo_threshold_isr+0x1e4>)
 800cdb4:	f7fd ff04 	bl	800abc0 <hw_gpio_get_in>
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	d1f6      	bne.n	800cdaa <fifo_threshold_isr+0x13a>
        current_packet->data[FskPacketHandler_sx127x.NbBytes++] = read_reg(REG_FIFO);
 800cdbc:	4b28      	ldr	r3, [pc, #160]	; (800ce60 <fifo_threshold_isr+0x1f0>)
 800cdbe:	681d      	ldr	r5, [r3, #0]
 800cdc0:	4b1f      	ldr	r3, [pc, #124]	; (800ce40 <fifo_threshold_isr+0x1d0>)
 800cdc2:	885e      	ldrh	r6, [r3, #2]
 800cdc4:	1c72      	adds	r2, r6, #1
 800cdc6:	805a      	strh	r2, [r3, #2]
 800cdc8:	f7ff fe7e 	bl	800cac8 <read_reg>
 800cdcc:	19ad      	adds	r5, r5, r6
 800cdce:	73a8      	strb	r0, [r5, #14]
        remaining_bytes--;
 800cdd0:	0025      	movs	r5, r4
 800cdd2:	e7ea      	b.n	800cdaa <fifo_threshold_isr+0x13a>
   if(remaining_bytes == 0) {
 800cdd4:	2d00      	cmp	r5, #0
 800cdd6:	d019      	beq.n	800ce0c <fifo_threshold_isr+0x19c>
   if ( remaining_bytes > FIFO_SIZE)
 800cdd8:	2d40      	cmp	r5, #64	; 0x40
 800cdda:	d928      	bls.n	800ce2e <fifo_threshold_isr+0x1be>
      FskPacketHandler_sx127x.FifoThresh = BYTES_IN_RX_FIFO;
 800cddc:	4b18      	ldr	r3, [pc, #96]	; (800ce40 <fifo_threshold_isr+0x1d0>)
 800cdde:	2220      	movs	r2, #32
 800cde0:	809a      	strh	r2, [r3, #4]
    write_reg(REG_FIFOTHRESH, RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY | (FskPacketHandler_sx127x.FifoThresh - 1));
 800cde2:	4b17      	ldr	r3, [pc, #92]	; (800ce40 <fifo_threshold_isr+0x1d0>)
 800cde4:	8899      	ldrh	r1, [r3, #4]
 800cde6:	3901      	subs	r1, #1
 800cde8:	b24b      	sxtb	r3, r1
 800cdea:	2180      	movs	r1, #128	; 0x80
 800cdec:	4249      	negs	r1, r1
 800cdee:	4319      	orrs	r1, r3
 800cdf0:	b2c9      	uxtb	r1, r1
 800cdf2:	2035      	movs	r0, #53	; 0x35
 800cdf4:	f7ff fcc2 	bl	800c77c <write_reg>
   hw_gpio_set_edge_interrupt(SX127x_DIO1_PIN, GPIO_RISING_EDGE);
 800cdf8:	4c0f      	ldr	r4, [pc, #60]	; (800ce38 <fifo_threshold_isr+0x1c8>)
 800cdfa:	2101      	movs	r1, #1
 800cdfc:	0020      	movs	r0, r4
 800cdfe:	f7fd feef 	bl	800abe0 <hw_gpio_set_edge_interrupt>
   hw_gpio_enable_interrupt(SX127x_DIO1_PIN);
 800ce02:	0020      	movs	r0, r4
 800ce04:	f7fd ffd0 	bl	800ada8 <hw_gpio_enable_interrupt>
}
 800ce08:	b002      	add	sp, #8
 800ce0a:	bd70      	pop	{r4, r5, r6, pc}
    current_packet->rx_meta.timestamp = timer_get_counter_value();
 800ce0c:	4c14      	ldr	r4, [pc, #80]	; (800ce60 <fifo_threshold_isr+0x1f0>)
 800ce0e:	6825      	ldr	r5, [r4, #0]
 800ce10:	f003 fa76 	bl	8010300 <timer_get_counter_value>
 800ce14:	6028      	str	r0, [r5, #0]
    current_packet->rx_meta.crc_status = HW_CRC_UNAVAILABLE;
 800ce16:	6823      	ldr	r3, [r4, #0]
 800ce18:	2202      	movs	r2, #2
 800ce1a:	721a      	strb	r2, [r3, #8]
    current_packet->rx_meta.lqi = 0; // TODO
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	711a      	strb	r2, [r3, #4]
    reinit_rx(); // restart already before doing decoding so we don't miss packets on low clock speeds
 800ce20:	f7ff feea 	bl	800cbf8 <reinit_rx>
    rx_packet_callback(current_packet);
 800ce24:	6820      	ldr	r0, [r4, #0]
 800ce26:	4b12      	ldr	r3, [pc, #72]	; (800ce70 <fifo_threshold_isr+0x200>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4798      	blx	r3
    return;
 800ce2c:	e7ec      	b.n	800ce08 <fifo_threshold_isr+0x198>
      FskPacketHandler_sx127x.FifoThresh = remaining_bytes - 2;
 800ce2e:	3d02      	subs	r5, #2
 800ce30:	4b03      	ldr	r3, [pc, #12]	; (800ce40 <fifo_threshold_isr+0x1d0>)
 800ce32:	809d      	strh	r5, [r3, #4]
 800ce34:	e7d5      	b.n	800cde2 <fifo_threshold_isr+0x172>
 800ce36:	46c0      	nop			; (mov r8, r8)
 800ce38:	50000401 	.word	0x50000401
 800ce3c:	2000059a 	.word	0x2000059a
 800ce40:	200031a4 	.word	0x200031a4
 800ce44:	08019f68 	.word	0x08019f68
 800ce48:	0801a174 	.word	0x0801a174
 800ce4c:	00000286 	.word	0x00000286
 800ce50:	08019f14 	.word	0x08019f14
 800ce54:	5000080d 	.word	0x5000080d
 800ce58:	200031e4 	.word	0x200031e4
 800ce5c:	200031ac 	.word	0x200031ac
 800ce60:	200031b4 	.word	0x200031b4
 800ce64:	08019f7c 	.word	0x08019f7c
 800ce68:	08019f8c 	.word	0x08019f8c
 800ce6c:	08019fb4 	.word	0x08019fb4
 800ce70:	200031e0 	.word	0x200031e0

0800ce74 <lora_rxtimeout_isr>:
static void lora_rxtimeout_isr() {
 800ce74:	b510      	push	{r4, lr}
  uint8_t irqflags = read_reg(REG_LR_IRQFLAGS);
 800ce76:	2012      	movs	r0, #18
 800ce78:	f7ff fe26 	bl	800cac8 <read_reg>
  if((irqflags & RFLR_IRQFLAGS_RXTIMEOUT_MASK) == RFLR_IRQFLAGS_RXTIMEOUT) {
 800ce7c:	0603      	lsls	r3, r0, #24
 800ce7e:	d50c      	bpl.n	800ce9a <lora_rxtimeout_isr+0x26>
      hw_gpio_enable_interrupt(SX127x_DIO1_PIN);
 800ce80:	480a      	ldr	r0, [pc, #40]	; (800ceac <lora_rxtimeout_isr+0x38>)
 800ce82:	f7fd ff91 	bl	800ada8 <hw_gpio_enable_interrupt>
      update_active_times(HW_STATE_STANDBY); //RXTIMEOUT interrupt automatically sets SX1276 back to standby mode
 800ce86:	2006      	movs	r0, #6
 800ce88:	f7ff fb8c 	bl	800c5a4 <update_active_times>
      timer_cancel_task(&rx_timeout); //cancel the timer which would otherwise call the same callback
 800ce8c:	4808      	ldr	r0, [pc, #32]	; (800ceb0 <lora_rxtimeout_isr+0x3c>)
 800ce8e:	f003 fce3 	bl	8010858 <timer_cancel_task>
      rx_lora_timeout_callback();
 800ce92:	4b08      	ldr	r3, [pc, #32]	; (800ceb4 <lora_rxtimeout_isr+0x40>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4798      	blx	r3
}
 800ce98:	bd10      	pop	{r4, pc}
      log_print_error_string("DIO1 ISR should only be handling RxTimeout but a different interrupt was handled, unexpected behaviour.");
 800ce9a:	4807      	ldr	r0, [pc, #28]	; (800ceb8 <lora_rxtimeout_isr+0x44>)
 800ce9c:	f002 f8a0 	bl	800efe0 <log_print_error_string>
      assert(false);
 800cea0:	4b06      	ldr	r3, [pc, #24]	; (800cebc <lora_rxtimeout_isr+0x48>)
 800cea2:	4a07      	ldr	r2, [pc, #28]	; (800cec0 <lora_rxtimeout_isr+0x4c>)
 800cea4:	4907      	ldr	r1, [pc, #28]	; (800cec4 <lora_rxtimeout_isr+0x50>)
 800cea6:	4808      	ldr	r0, [pc, #32]	; (800cec8 <lora_rxtimeout_isr+0x54>)
 800cea8:	f7fb fbaa 	bl	8008600 <__assert_func>
 800ceac:	50000401 	.word	0x50000401
 800ceb0:	0800d5a5 	.word	0x0800d5a5
 800ceb4:	200031dc 	.word	0x200031dc
 800ceb8:	08019fdc 	.word	0x08019fdc
 800cebc:	080169c8 	.word	0x080169c8
 800cec0:	0801a150 	.word	0x0801a150
 800cec4:	0000022a 	.word	0x0000022a
 800cec8:	08019f14 	.word	0x08019f14

0800cecc <lora_rxdone_isr>:
static void lora_rxdone_isr() {
 800cecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert(state == STATE_RX && lora_mode);
 800cece:	4b43      	ldr	r3, [pc, #268]	; (800cfdc <lora_rxdone_isr+0x110>)
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	2b02      	cmp	r3, #2
 800ced4:	d11b      	bne.n	800cf0e <lora_rxdone_isr+0x42>
 800ced6:	4b42      	ldr	r3, [pc, #264]	; (800cfe0 <lora_rxdone_isr+0x114>)
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d017      	beq.n	800cf0e <lora_rxdone_isr+0x42>
  uint8_t raw_rssi = read_reg(REG_LR_PKTRSSIVALUE);
 800cede:	201a      	movs	r0, #26
 800cee0:	f7ff fdf2 	bl	800cac8 <read_reg>
 800cee4:	0006      	movs	r6, r0
  int8_t raw_snr = read_reg(REG_LR_PKTSNRVALUE);
 800cee6:	2019      	movs	r0, #25
 800cee8:	f7ff fdee 	bl	800cac8 <read_reg>
 800ceec:	b247      	sxtb	r7, r0
  uint8_t irqflags = read_reg(REG_LR_IRQFLAGS);
 800ceee:	2012      	movs	r0, #18
 800cef0:	f7ff fdea 	bl	800cac8 <read_reg>
  assert(irqflags & RFLR_IRQFLAGS_RXDONE_MASK);
 800cef4:	0643      	lsls	r3, r0, #25
 800cef6:	d511      	bpl.n	800cf1c <lora_rxdone_isr+0x50>
  if((irqflags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK) == RFLR_IRQFLAGS_PAYLOADCRCERROR) { 
 800cef8:	0683      	lsls	r3, r0, #26
 800cefa:	d516      	bpl.n	800cf2a <lora_rxdone_isr+0x5e>
    if(rx_lora_error_callback) {
 800cefc:	4b39      	ldr	r3, [pc, #228]	; (800cfe4 <lora_rxdone_isr+0x118>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d012      	beq.n	800cf2a <lora_rxdone_isr+0x5e>
      rx_lora_error_callback();
 800cf04:	4798      	blx	r3
      hw_gpio_enable_interrupt(SX127x_DIO0_PIN);
 800cf06:	4838      	ldr	r0, [pc, #224]	; (800cfe8 <lora_rxdone_isr+0x11c>)
 800cf08:	f7fd ff4e 	bl	800ada8 <hw_gpio_enable_interrupt>
      return;
 800cf0c:	e037      	b.n	800cf7e <lora_rxdone_isr+0xb2>
  assert(state == STATE_RX && lora_mode);
 800cf0e:	21f6      	movs	r1, #246	; 0xf6
 800cf10:	4b36      	ldr	r3, [pc, #216]	; (800cfec <lora_rxdone_isr+0x120>)
 800cf12:	4a37      	ldr	r2, [pc, #220]	; (800cff0 <lora_rxdone_isr+0x124>)
 800cf14:	0049      	lsls	r1, r1, #1
 800cf16:	4837      	ldr	r0, [pc, #220]	; (800cff4 <lora_rxdone_isr+0x128>)
 800cf18:	f7fb fb72 	bl	8008600 <__assert_func>
  assert(irqflags & RFLR_IRQFLAGS_RXDONE_MASK);
 800cf1c:	21f8      	movs	r1, #248	; 0xf8
 800cf1e:	4b36      	ldr	r3, [pc, #216]	; (800cff8 <lora_rxdone_isr+0x12c>)
 800cf20:	4a33      	ldr	r2, [pc, #204]	; (800cff0 <lora_rxdone_isr+0x124>)
 800cf22:	0049      	lsls	r1, r1, #1
 800cf24:	4833      	ldr	r0, [pc, #204]	; (800cff4 <lora_rxdone_isr+0x128>)
 800cf26:	f7fb fb6b 	bl	8008600 <__assert_func>
  uint8_t len = read_reg(REG_LR_RXNBBYTES);
 800cf2a:	2013      	movs	r0, #19
 800cf2c:	f7ff fdcc 	bl	800cac8 <read_reg>
 800cf30:	0005      	movs	r5, r0
  write_reg(REG_LR_FIFOADDRPTR, read_reg(REG_LR_FIFORXCURRENTADDR));
 800cf32:	2010      	movs	r0, #16
 800cf34:	f7ff fdc8 	bl	800cac8 <read_reg>
 800cf38:	0001      	movs	r1, r0
 800cf3a:	200d      	movs	r0, #13
 800cf3c:	f7ff fc1e 	bl	800c77c <write_reg>
  if(raw_snr > 0) { 
 800cf40:	2f00      	cmp	r7, #0
 800cf42:	dd1d      	ble.n	800cf80 <lora_rxdone_isr+0xb4>
      rssi = -157 + 16*raw_rssi/15; // TODO only valid for HF port;
 800cf44:	0130      	lsls	r0, r6, #4
 800cf46:	210f      	movs	r1, #15
 800cf48:	f004 fe6c 	bl	8011c24 <__divsi3>
 800cf4c:	389d      	subs	r0, #157	; 0x9d
 800cf4e:	b204      	sxth	r4, r0
  if(rx_lora_packet_callback) {
 800cf50:	4b2a      	ldr	r3, [pc, #168]	; (800cffc <lora_rxdone_isr+0x130>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d01c      	beq.n	800cf92 <lora_rxdone_isr+0xc6>
    read_fifo(rx_buffer, len);
 800cf58:	4e29      	ldr	r6, [pc, #164]	; (800d000 <lora_rxdone_isr+0x134>)
 800cf5a:	0029      	movs	r1, r5
 800cf5c:	6830      	ldr	r0, [r6, #0]
 800cf5e:	f7ff fd99 	bl	800ca94 <read_fifo>
    write_reg(REG_LR_IRQFLAGS, 0xFF);
 800cf62:	21ff      	movs	r1, #255	; 0xff
 800cf64:	2012      	movs	r0, #18
 800cf66:	f7ff fc09 	bl	800c77c <write_reg>
    rx_lora_packet_callback(rx_buffer, len, rssi, raw_snr);
 800cf6a:	b2a9      	uxth	r1, r5
 800cf6c:	6830      	ldr	r0, [r6, #0]
 800cf6e:	4b23      	ldr	r3, [pc, #140]	; (800cffc <lora_rxdone_isr+0x130>)
 800cf70:	681e      	ldr	r6, [r3, #0]
 800cf72:	003b      	movs	r3, r7
 800cf74:	0022      	movs	r2, r4
 800cf76:	47b0      	blx	r6
  hw_gpio_enable_interrupt(SX127x_DIO0_PIN);
 800cf78:	481b      	ldr	r0, [pc, #108]	; (800cfe8 <lora_rxdone_isr+0x11c>)
 800cf7a:	f7fd ff15 	bl	800ada8 <hw_gpio_enable_interrupt>
}
 800cf7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      rssi = -157 + raw_rssi + raw_snr / 4;
 800cf80:	17f8      	asrs	r0, r7, #31
 800cf82:	2403      	movs	r4, #3
 800cf84:	4004      	ands	r4, r0
 800cf86:	19e4      	adds	r4, r4, r7
 800cf88:	10a4      	asrs	r4, r4, #2
 800cf8a:	19a4      	adds	r4, r4, r6
 800cf8c:	3c9d      	subs	r4, #157	; 0x9d
 800cf8e:	b224      	sxth	r4, r4
 800cf90:	e7de      	b.n	800cf50 <lora_rxdone_isr+0x84>
    current_packet = alloc_packet_callback(len);
 800cf92:	b2ae      	uxth	r6, r5
 800cf94:	4b1b      	ldr	r3, [pc, #108]	; (800d004 <lora_rxdone_isr+0x138>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	0030      	movs	r0, r6
 800cf9a:	4798      	blx	r3
 800cf9c:	4b1a      	ldr	r3, [pc, #104]	; (800d008 <lora_rxdone_isr+0x13c>)
 800cf9e:	6018      	str	r0, [r3, #0]
    if(current_packet == NULL) {
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	d017      	beq.n	800cfd4 <lora_rxdone_isr+0x108>
    current_packet->length = len;
 800cfa4:	8186      	strh	r6, [r0, #12]
    read_fifo(current_packet->data, len);
 800cfa6:	300e      	adds	r0, #14
 800cfa8:	0029      	movs	r1, r5
 800cfaa:	f7ff fd73 	bl	800ca94 <read_fifo>
    write_reg(REG_LR_IRQFLAGS, 0xFF);
 800cfae:	21ff      	movs	r1, #255	; 0xff
 800cfb0:	2012      	movs	r0, #18
 800cfb2:	f7ff fbe3 	bl	800c77c <write_reg>
    current_packet->rx_meta.timestamp = timer_get_counter_value();
 800cfb6:	4d14      	ldr	r5, [pc, #80]	; (800d008 <lora_rxdone_isr+0x13c>)
 800cfb8:	682e      	ldr	r6, [r5, #0]
 800cfba:	f003 f9a1 	bl	8010300 <timer_get_counter_value>
 800cfbe:	6030      	str	r0, [r6, #0]
    current_packet->rx_meta.crc_status = HW_CRC_UNAVAILABLE;
 800cfc0:	6828      	ldr	r0, [r5, #0]
 800cfc2:	2302      	movs	r3, #2
 800cfc4:	7203      	strb	r3, [r0, #8]
    current_packet->rx_meta.rssi = rssi;
 800cfc6:	80c4      	strh	r4, [r0, #6]
    current_packet->rx_meta.lqi = 0; // TODO
 800cfc8:	2300      	movs	r3, #0
 800cfca:	7103      	strb	r3, [r0, #4]
    rx_packet_callback(current_packet);
 800cfcc:	4b0f      	ldr	r3, [pc, #60]	; (800d00c <lora_rxdone_isr+0x140>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4798      	blx	r3
 800cfd2:	e7d1      	b.n	800cf78 <lora_rxdone_isr+0xac>
      log_print_error_string("could not allocate package, discarding.");
 800cfd4:	480e      	ldr	r0, [pc, #56]	; (800d010 <lora_rxdone_isr+0x144>)
 800cfd6:	f002 f803 	bl	800efe0 <log_print_error_string>
      return;
 800cfda:	e7d0      	b.n	800cf7e <lora_rxdone_isr+0xb2>
 800cfdc:	2000059a 	.word	0x2000059a
 800cfe0:	200031bf 	.word	0x200031bf
 800cfe4:	200031d4 	.word	0x200031d4
 800cfe8:	50000404 	.word	0x50000404
 800cfec:	0801a044 	.word	0x0801a044
 800cff0:	0801a140 	.word	0x0801a140
 800cff4:	08019f14 	.word	0x08019f14
 800cff8:	0801a064 	.word	0x0801a064
 800cffc:	200031d8 	.word	0x200031d8
 800d000:	200031cc 	.word	0x200031cc
 800d004:	200031ac 	.word	0x200031ac
 800d008:	200031b4 	.word	0x200031b4
 800d00c:	200031e0 	.word	0x200031e0
 800d010:	0801a08c 	.word	0x0801a08c

0800d014 <get_opmode>:
static opmode_t get_opmode() {
 800d014:	b510      	push	{r4, lr}
  return (read_reg(REG_OPMODE) & ~RF_OPMODE_MASK);
 800d016:	2001      	movs	r0, #1
 800d018:	f7ff fd56 	bl	800cac8 <read_reg>
 800d01c:	2307      	movs	r3, #7
 800d01e:	4018      	ands	r0, r3
}
 800d020:	bd10      	pop	{r4, pc}
	...

0800d024 <calibrate_rx_chain>:
static void calibrate_rx_chain() {
 800d024:	b510      	push	{r4, lr}
  assert(get_opmode() == OPMODE_STANDBY);
 800d026:	f7ff fff5 	bl	800d014 <get_opmode>
 800d02a:	2801      	cmp	r0, #1
 800d02c:	d118      	bne.n	800d060 <calibrate_rx_chain+0x3c>
  uint8_t reg_pa_config_initial_value = read_reg(REG_PACONFIG);
 800d02e:	2009      	movs	r0, #9
 800d030:	f7ff fd4a 	bl	800cac8 <read_reg>
 800d034:	0004      	movs	r4, r0
  write_reg(REG_PACONFIG, 0x00);
 800d036:	2100      	movs	r1, #0
 800d038:	2009      	movs	r0, #9
 800d03a:	f7ff fb9f 	bl	800c77c <write_reg>
  hw_radio_set_center_freq(863150000);   // Sets a Frequency in HF band
 800d03e:	480b      	ldr	r0, [pc, #44]	; (800d06c <calibrate_rx_chain+0x48>)
 800d040:	f7ff fc0e 	bl	800c860 <hw_radio_set_center_freq>
  write_reg(REG_IMAGECAL, RF_IMAGECAL_TEMPMONITOR_OFF | RF_IMAGECAL_IMAGECAL_START); // TODO temperature monitoring disabled for now
 800d044:	2141      	movs	r1, #65	; 0x41
 800d046:	203b      	movs	r0, #59	; 0x3b
 800d048:	f7ff fb98 	bl	800c77c <write_reg>
  while((read_reg(REG_IMAGECAL) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { }
 800d04c:	203b      	movs	r0, #59	; 0x3b
 800d04e:	f7ff fd3b 	bl	800cac8 <read_reg>
 800d052:	0683      	lsls	r3, r0, #26
 800d054:	d4fa      	bmi.n	800d04c <calibrate_rx_chain+0x28>
  write_reg(REG_PACONFIG, reg_pa_config_initial_value);
 800d056:	0021      	movs	r1, r4
 800d058:	2009      	movs	r0, #9
 800d05a:	f7ff fb8f 	bl	800c77c <write_reg>
}
 800d05e:	bd10      	pop	{r4, pc}
  assert(get_opmode() == OPMODE_STANDBY);
 800d060:	4b03      	ldr	r3, [pc, #12]	; (800d070 <calibrate_rx_chain+0x4c>)
 800d062:	4a04      	ldr	r2, [pc, #16]	; (800d074 <calibrate_rx_chain+0x50>)
 800d064:	4904      	ldr	r1, [pc, #16]	; (800d078 <calibrate_rx_chain+0x54>)
 800d066:	4805      	ldr	r0, [pc, #20]	; (800d07c <calibrate_rx_chain+0x58>)
 800d068:	f7fb faca 	bl	8008600 <__assert_func>
 800d06c:	33729fb0 	.word	0x33729fb0
 800d070:	0801a0b4 	.word	0x0801a0b4
 800d074:	0801a188 	.word	0x0801a188
 800d078:	000002fd 	.word	0x000002fd
 800d07c:	08019f14 	.word	0x08019f14

0800d080 <set_antenna_switch>:
static void set_antenna_switch(opmode_t opmode) {
 800d080:	b510      	push	{r4, lr}
  if(opmode == OPMODE_TX) {
 800d082:	2803      	cmp	r0, #3
 800d084:	d009      	beq.n	800d09a <set_antenna_switch+0x1a>
    hw_gpio_set(ABZ_ANT_SW_RX_PIN);
 800d086:	4810      	ldr	r0, [pc, #64]	; (800d0c8 <set_antenna_switch+0x48>)
 800d088:	f7fd fd74 	bl	800ab74 <hw_gpio_set>
    hw_gpio_clr(ABZ_ANT_SW_TX_PIN);
 800d08c:	480f      	ldr	r0, [pc, #60]	; (800d0cc <set_antenna_switch+0x4c>)
 800d08e:	f7fd fd7e 	bl	800ab8e <hw_gpio_clr>
    hw_gpio_clr(ABZ_ANT_SW_PA_BOOST_PIN);
 800d092:	480f      	ldr	r0, [pc, #60]	; (800d0d0 <set_antenna_switch+0x50>)
 800d094:	f7fd fd7b 	bl	800ab8e <hw_gpio_clr>
}
 800d098:	bd10      	pop	{r4, pc}
    hw_gpio_clr(ABZ_ANT_SW_RX_PIN);
 800d09a:	480b      	ldr	r0, [pc, #44]	; (800d0c8 <set_antenna_switch+0x48>)
 800d09c:	f7fd fd77 	bl	800ab8e <hw_gpio_clr>
    if((read_reg(REG_PACONFIG) & RF_PACONFIG_PASELECT_PABOOST) == RF_PACONFIG_PASELECT_PABOOST) {
 800d0a0:	2009      	movs	r0, #9
 800d0a2:	f7ff fd11 	bl	800cac8 <read_reg>
 800d0a6:	0603      	lsls	r3, r0, #24
 800d0a8:	d406      	bmi.n	800d0b8 <set_antenna_switch+0x38>
      hw_gpio_set(ABZ_ANT_SW_TX_PIN);
 800d0aa:	4808      	ldr	r0, [pc, #32]	; (800d0cc <set_antenna_switch+0x4c>)
 800d0ac:	f7fd fd62 	bl	800ab74 <hw_gpio_set>
      hw_gpio_clr(ABZ_ANT_SW_PA_BOOST_PIN);
 800d0b0:	4807      	ldr	r0, [pc, #28]	; (800d0d0 <set_antenna_switch+0x50>)
 800d0b2:	f7fd fd6c 	bl	800ab8e <hw_gpio_clr>
 800d0b6:	e7ef      	b.n	800d098 <set_antenna_switch+0x18>
      hw_gpio_clr(ABZ_ANT_SW_TX_PIN);
 800d0b8:	4804      	ldr	r0, [pc, #16]	; (800d0cc <set_antenna_switch+0x4c>)
 800d0ba:	f7fd fd68 	bl	800ab8e <hw_gpio_clr>
      hw_gpio_set(ABZ_ANT_SW_PA_BOOST_PIN);
 800d0be:	4804      	ldr	r0, [pc, #16]	; (800d0d0 <set_antenna_switch+0x50>)
 800d0c0:	f7fd fd58 	bl	800ab74 <hw_gpio_set>
 800d0c4:	e7e8      	b.n	800d098 <set_antenna_switch+0x18>
 800d0c6:	46c0      	nop			; (mov r8, r8)
 800d0c8:	50000001 	.word	0x50000001
 800d0cc:	50000802 	.word	0x50000802
 800d0d0:	50000801 	.word	0x50000801

0800d0d4 <set_opmode>:
void set_opmode(uint8_t opmode) {
 800d0d4:	b510      	push	{r4, lr}
 800d0d6:	0004      	movs	r4, r0
  switch(opmode) {
 800d0d8:	2806      	cmp	r0, #6
 800d0da:	d806      	bhi.n	800d0ea <set_opmode+0x16>
 800d0dc:	0083      	lsls	r3, r0, #2
 800d0de:	4a19      	ldr	r2, [pc, #100]	; (800d144 <set_opmode+0x70>)
 800d0e0:	58d3      	ldr	r3, [r2, r3]
 800d0e2:	469f      	mov	pc, r3
      state = STATE_IDLE;
 800d0e4:	4b18      	ldr	r3, [pc, #96]	; (800d148 <set_opmode+0x74>)
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	701a      	strb	r2, [r3, #0]
  set_antenna_switch(opmode);
 800d0ea:	0020      	movs	r0, r4
 800d0ec:	f7ff ffc8 	bl	800d080 <set_antenna_switch>
  write_reg(REG_OPMODE, (read_reg(REG_OPMODE) & RF_OPMODE_MASK) | opmode);
 800d0f0:	2001      	movs	r0, #1
 800d0f2:	f7ff fce9 	bl	800cac8 <read_reg>
 800d0f6:	b241      	sxtb	r1, r0
 800d0f8:	2307      	movs	r3, #7
 800d0fa:	4399      	bics	r1, r3
 800d0fc:	4321      	orrs	r1, r4
 800d0fe:	b2c9      	uxtb	r1, r1
 800d100:	2001      	movs	r0, #1
 800d102:	f7ff fb3b 	bl	800c77c <write_reg>
  if(opmode == OPMODE_SLEEP)
 800d106:	2c00      	cmp	r4, #0
 800d108:	d118      	bne.n	800d13c <set_opmode+0x68>
    while((read_reg(REG_OPMODE) & (0xFF - RF_OPMODE_MASK)) != OPMODE_SLEEP){} //ensure setting sleep mode is processed
 800d10a:	2001      	movs	r0, #1
 800d10c:	f7ff fcdc 	bl	800cac8 <read_reg>
 800d110:	0743      	lsls	r3, r0, #29
 800d112:	d1fa      	bne.n	800d10a <set_opmode+0x36>
    hw_gpio_clr(SX127x_VCC_TXCO);
 800d114:	480d      	ldr	r0, [pc, #52]	; (800d14c <set_opmode+0x78>)
 800d116:	f7fd fd3a 	bl	800ab8e <hw_gpio_clr>
}
 800d11a:	bd10      	pop	{r4, pc}
      state = STATE_RX;
 800d11c:	4b0a      	ldr	r3, [pc, #40]	; (800d148 <set_opmode+0x74>)
 800d11e:	2202      	movs	r2, #2
 800d120:	701a      	strb	r2, [r3, #0]
      break;
 800d122:	e7e2      	b.n	800d0ea <set_opmode+0x16>
      state = STATE_RX;
 800d124:	4b08      	ldr	r3, [pc, #32]	; (800d148 <set_opmode+0x74>)
 800d126:	2202      	movs	r2, #2
 800d128:	701a      	strb	r2, [r3, #0]
      break;
 800d12a:	e7de      	b.n	800d0ea <set_opmode+0x16>
      state = STATE_TX;
 800d12c:	4b06      	ldr	r3, [pc, #24]	; (800d148 <set_opmode+0x74>)
 800d12e:	2201      	movs	r2, #1
 800d130:	701a      	strb	r2, [r3, #0]
      break;
 800d132:	e7da      	b.n	800d0ea <set_opmode+0x16>
      state = STATE_STANDBY;
 800d134:	4b04      	ldr	r3, [pc, #16]	; (800d148 <set_opmode+0x74>)
 800d136:	2203      	movs	r2, #3
 800d138:	701a      	strb	r2, [r3, #0]
      break;
 800d13a:	e7d6      	b.n	800d0ea <set_opmode+0x16>
    hw_gpio_set(SX127x_VCC_TXCO);
 800d13c:	4803      	ldr	r0, [pc, #12]	; (800d14c <set_opmode+0x78>)
 800d13e:	f7fd fd19 	bl	800ab74 <hw_gpio_set>
}
 800d142:	e7ea      	b.n	800d11a <set_opmode+0x46>
 800d144:	0801a0d4 	.word	0x0801a0d4
 800d148:	2000059a 	.word	0x2000059a
 800d14c:	5000000c 	.word	0x5000000c

0800d150 <set_packet_handler_enabled>:
static void set_packet_handler_enabled(bool enable) {
 800d150:	b510      	push	{r4, lr}
 800d152:	0004      	movs	r4, r0
  write_reg(REG_PREAMBLEDETECT, (read_reg(REG_PREAMBLEDETECT) & RF_PREAMBLEDETECT_DETECTOR_MASK) | (enable << 7));
 800d154:	201f      	movs	r0, #31
 800d156:	f7ff fcb7 	bl	800cac8 <read_reg>
 800d15a:	b240      	sxtb	r0, r0
 800d15c:	217f      	movs	r1, #127	; 0x7f
 800d15e:	4001      	ands	r1, r0
 800d160:	01e0      	lsls	r0, r4, #7
 800d162:	4301      	orrs	r1, r0
 800d164:	b2c9      	uxtb	r1, r1
 800d166:	201f      	movs	r0, #31
 800d168:	f7ff fb08 	bl	800c77c <write_reg>
  write_reg(REG_SYNCCONFIG, (read_reg(REG_SYNCCONFIG) & RF_SYNCCONFIG_SYNC_MASK) | (enable << 4));
 800d16c:	2027      	movs	r0, #39	; 0x27
 800d16e:	f7ff fcab 	bl	800cac8 <read_reg>
 800d172:	b241      	sxtb	r1, r0
 800d174:	2310      	movs	r3, #16
 800d176:	4399      	bics	r1, r3
 800d178:	0124      	lsls	r4, r4, #4
 800d17a:	4321      	orrs	r1, r4
 800d17c:	b2c9      	uxtb	r1, r1
 800d17e:	2027      	movs	r0, #39	; 0x27
 800d180:	f7ff fafc 	bl	800c77c <write_reg>
}
 800d184:	bd10      	pop	{r4, pc}

0800d186 <hw_radio_set_dc_free>:
void hw_radio_set_dc_free(uint8_t scheme) {
 800d186:	b510      	push	{r4, lr}
 800d188:	0004      	movs	r4, r0
  write_reg(REG_PACKETCONFIG1, (read_reg(REG_PACKETCONFIG1) & RF_PACKETCONFIG1_DCFREE_MASK) | (scheme << 5));
 800d18a:	2030      	movs	r0, #48	; 0x30
 800d18c:	f7ff fc9c 	bl	800cac8 <read_reg>
 800d190:	b241      	sxtb	r1, r0
 800d192:	2360      	movs	r3, #96	; 0x60
 800d194:	4399      	bics	r1, r3
 800d196:	0164      	lsls	r4, r4, #5
 800d198:	4321      	orrs	r1, r4
 800d19a:	b2c9      	uxtb	r1, r1
 800d19c:	2030      	movs	r0, #48	; 0x30
 800d19e:	f7ff faed 	bl	800c77c <write_reg>
}
 800d1a2:	bd10      	pop	{r4, pc}

0800d1a4 <hw_radio_set_crc_on>:
void hw_radio_set_crc_on(uint8_t enable) {
 800d1a4:	b510      	push	{r4, lr}
 800d1a6:	0004      	movs	r4, r0
  write_reg(REG_PACKETCONFIG1, (read_reg(REG_PACKETCONFIG1) & RF_PACKETCONFIG1_CRC_MASK) | (enable << 4));
 800d1a8:	2030      	movs	r0, #48	; 0x30
 800d1aa:	f7ff fc8d 	bl	800cac8 <read_reg>
 800d1ae:	b241      	sxtb	r1, r0
 800d1b0:	2310      	movs	r3, #16
 800d1b2:	4399      	bics	r1, r3
 800d1b4:	0124      	lsls	r4, r4, #4
 800d1b6:	4321      	orrs	r1, r4
 800d1b8:	b2c9      	uxtb	r1, r1
 800d1ba:	2030      	movs	r0, #48	; 0x30
 800d1bc:	f7ff fade 	bl	800c77c <write_reg>
}
 800d1c0:	bd10      	pop	{r4, pc}
	...

0800d1c4 <hw_radio_set_payload_length>:
void hw_radio_set_payload_length(uint16_t length) {
 800d1c4:	b510      	push	{r4, lr}
 800d1c6:	0004      	movs	r4, r0
  if(previous_payload_length != length) {
 800d1c8:	4b0d      	ldr	r3, [pc, #52]	; (800d200 <hw_radio_set_payload_length+0x3c>)
 800d1ca:	881b      	ldrh	r3, [r3, #0]
 800d1cc:	4283      	cmp	r3, r0
 800d1ce:	d102      	bne.n	800d1d6 <hw_radio_set_payload_length+0x12>
  FskPacketHandler_sx127x.Size = length;
 800d1d0:	4b0c      	ldr	r3, [pc, #48]	; (800d204 <hw_radio_set_payload_length+0x40>)
 800d1d2:	801c      	strh	r4, [r3, #0]
}
 800d1d4:	bd10      	pop	{r4, pc}
    write_reg(REG_PACKETCONFIG2, (read_reg(REG_PACKETCONFIG2) & RF_PACKETCONFIG2_PAYLOADLENGTH_MSB_MASK) | ((length >> 8) & 0x07));
 800d1d6:	2031      	movs	r0, #49	; 0x31
 800d1d8:	f7ff fc76 	bl	800cac8 <read_reg>
 800d1dc:	b241      	sxtb	r1, r0
 800d1de:	2307      	movs	r3, #7
 800d1e0:	4399      	bics	r1, r3
 800d1e2:	0a23      	lsrs	r3, r4, #8
 800d1e4:	2007      	movs	r0, #7
 800d1e6:	4018      	ands	r0, r3
 800d1e8:	4301      	orrs	r1, r0
 800d1ea:	b2c9      	uxtb	r1, r1
 800d1ec:	2031      	movs	r0, #49	; 0x31
 800d1ee:	f7ff fac5 	bl	800c77c <write_reg>
    write_reg(REG_PAYLOADLENGTH, length & 0xFF);
 800d1f2:	b2e1      	uxtb	r1, r4
 800d1f4:	2032      	movs	r0, #50	; 0x32
 800d1f6:	f7ff fac1 	bl	800c77c <write_reg>
    previous_payload_length = length;
 800d1fa:	4b01      	ldr	r3, [pc, #4]	; (800d200 <hw_radio_set_payload_length+0x3c>)
 800d1fc:	801c      	strh	r4, [r3, #0]
 800d1fe:	e7e7      	b.n	800d1d0 <hw_radio_set_payload_length+0xc>
 800d200:	200031c0 	.word	0x200031c0
 800d204:	200031a4 	.word	0x200031a4

0800d208 <hw_radio_switch_longRangeMode>:
void hw_radio_switch_longRangeMode(bool use_lora) {
 800d208:	b510      	push	{r4, lr}
 800d20a:	0004      	movs	r4, r0
  if(use_lora != lora_mode) {
 800d20c:	4b12      	ldr	r3, [pc, #72]	; (800d258 <hw_radio_switch_longRangeMode+0x50>)
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	4283      	cmp	r3, r0
 800d212:	d100      	bne.n	800d216 <hw_radio_switch_longRangeMode+0xe>
}
 800d214:	bd10      	pop	{r4, pc}
      set_opmode(OPMODE_SLEEP);
 800d216:	2000      	movs	r0, #0
 800d218:	f7ff ff5c 	bl	800d0d4 <set_opmode>
      update_active_times(HW_STATE_SLEEP);
 800d21c:	2001      	movs	r0, #1
 800d21e:	f7ff f9c1 	bl	800c5a4 <update_active_times>
      write_reg(REG_OPMODE, (read_reg(REG_OPMODE) & RFLR_OPMODE_LONGRANGEMODE_MASK) | (use_lora << 7));
 800d222:	2001      	movs	r0, #1
 800d224:	f7ff fc50 	bl	800cac8 <read_reg>
 800d228:	b240      	sxtb	r0, r0
 800d22a:	217f      	movs	r1, #127	; 0x7f
 800d22c:	4001      	ands	r1, r0
 800d22e:	01e0      	lsls	r0, r4, #7
 800d230:	4301      	orrs	r1, r0
 800d232:	b2c9      	uxtb	r1, r1
 800d234:	2001      	movs	r0, #1
 800d236:	f7ff faa1 	bl	800c77c <write_reg>
      lora_mode = use_lora;
 800d23a:	4b07      	ldr	r3, [pc, #28]	; (800d258 <hw_radio_switch_longRangeMode+0x50>)
 800d23c:	701c      	strb	r4, [r3, #0]
      if(!use_lora) {
 800d23e:	2c00      	cmp	r4, #0
 800d240:	d1e8      	bne.n	800d214 <hw_radio_switch_longRangeMode+0xc>
        tx_lora_packet_callback  = NULL;
 800d242:	2300      	movs	r3, #0
 800d244:	4a05      	ldr	r2, [pc, #20]	; (800d25c <hw_radio_switch_longRangeMode+0x54>)
 800d246:	6013      	str	r3, [r2, #0]
        rx_lora_packet_callback  = NULL;
 800d248:	4a05      	ldr	r2, [pc, #20]	; (800d260 <hw_radio_switch_longRangeMode+0x58>)
 800d24a:	6013      	str	r3, [r2, #0]
        rx_lora_error_callback   = NULL;
 800d24c:	4a05      	ldr	r2, [pc, #20]	; (800d264 <hw_radio_switch_longRangeMode+0x5c>)
 800d24e:	6013      	str	r3, [r2, #0]
        rx_lora_timeout_callback = NULL;
 800d250:	4a05      	ldr	r2, [pc, #20]	; (800d268 <hw_radio_switch_longRangeMode+0x60>)
 800d252:	6013      	str	r3, [r2, #0]
}
 800d254:	e7de      	b.n	800d214 <hw_radio_switch_longRangeMode+0xc>
 800d256:	46c0      	nop			; (mov r8, r8)
 800d258:	200031bf 	.word	0x200031bf
 800d25c:	200031f8 	.word	0x200031f8
 800d260:	200031d8 	.word	0x200031d8
 800d264:	200031d4 	.word	0x200031d4
 800d268:	200031dc 	.word	0x200031dc

0800d26c <write_fifo>:
static void write_fifo(uint8_t* buffer, uint8_t size) {
 800d26c:	b570      	push	{r4, r5, r6, lr}
 800d26e:	0005      	movs	r5, r0
 800d270:	000e      	movs	r6, r1
  enable_spi_io();
 800d272:	f7ff fa6d 	bl	800c750 <enable_spi_io>
  spi_select(sx127x_spi);
 800d276:	4c09      	ldr	r4, [pc, #36]	; (800d29c <write_fifo+0x30>)
 800d278:	6820      	ldr	r0, [r4, #0]
 800d27a:	f7fe fa9d 	bl	800b7b8 <spi_select>
  spi_exchange_byte(sx127x_spi, 0x80); // send address with bit 8 high to signal a write operation
 800d27e:	2180      	movs	r1, #128	; 0x80
 800d280:	6820      	ldr	r0, [r4, #0]
 800d282:	f7fe facc 	bl	800b81e <spi_exchange_byte>
  spi_exchange_bytes(sx127x_spi, buffer, NULL, size);
 800d286:	0033      	movs	r3, r6
 800d288:	2200      	movs	r2, #0
 800d28a:	0029      	movs	r1, r5
 800d28c:	6820      	ldr	r0, [r4, #0]
 800d28e:	f7fe fad9 	bl	800b844 <spi_exchange_bytes>
  spi_deselect(sx127x_spi);
 800d292:	6820      	ldr	r0, [r4, #0]
 800d294:	f7fe faa9 	bl	800b7ea <spi_deselect>
}
 800d298:	bd70      	pop	{r4, r5, r6, pc}
 800d29a:	46c0      	nop			; (mov r8, r8)
 800d29c:	200031f4 	.word	0x200031f4

0800d2a0 <hw_radio_set_opmode>:
void hw_radio_set_opmode(hw_radio_state_t opmode) {
 800d2a0:	b510      	push	{r4, lr}
 800d2a2:	0004      	movs	r4, r0
  switch(opmode) {
 800d2a4:	2806      	cmp	r0, #6
 800d2a6:	d81b      	bhi.n	800d2e0 <hw_radio_set_opmode+0x40>
 800d2a8:	0083      	lsls	r3, r0, #2
 800d2aa:	4a1b      	ldr	r2, [pc, #108]	; (800d318 <hw_radio_set_opmode+0x78>)
 800d2ac:	58d3      	ldr	r3, [r2, r3]
 800d2ae:	469f      	mov	pc, r3
      DEBUG_TX_END();
 800d2b0:	2000      	movs	r0, #0
 800d2b2:	f7fb f99d 	bl	80085f0 <hw_debug_clr>
      DEBUG_RX_END();
 800d2b6:	2001      	movs	r0, #1
 800d2b8:	f7fb f99a 	bl	80085f0 <hw_debug_clr>
      hw_gpio_disable_interrupt(SX127x_DIO0_PIN);
 800d2bc:	4817      	ldr	r0, [pc, #92]	; (800d31c <hw_radio_set_opmode+0x7c>)
 800d2be:	f7fd fdb3 	bl	800ae28 <hw_gpio_disable_interrupt>
      hw_gpio_disable_interrupt(SX127x_DIO1_PIN);
 800d2c2:	4817      	ldr	r0, [pc, #92]	; (800d320 <hw_radio_set_opmode+0x80>)
 800d2c4:	f7fd fdb0 	bl	800ae28 <hw_gpio_disable_interrupt>
      set_opmode(OPMODE_SLEEP);
 800d2c8:	2000      	movs	r0, #0
 800d2ca:	f7ff ff03 	bl	800d0d4 <set_opmode>
      spi_disable(spi_handle);
 800d2ce:	4b15      	ldr	r3, [pc, #84]	; (800d324 <hw_radio_set_opmode+0x84>)
 800d2d0:	6818      	ldr	r0, [r3, #0]
 800d2d2:	f7fe f8b1 	bl	800b438 <spi_disable>
      hw_radio_io_deinit();
 800d2d6:	f7fb f81b 	bl	8008310 <hw_radio_io_deinit>
      io_inited = false;
 800d2da:	4b13      	ldr	r3, [pc, #76]	; (800d328 <hw_radio_set_opmode+0x88>)
 800d2dc:	2200      	movs	r2, #0
 800d2de:	701a      	strb	r2, [r3, #0]
  update_active_times(opmode);
 800d2e0:	0020      	movs	r0, r4
 800d2e2:	f7ff f95f 	bl	800c5a4 <update_active_times>
}
 800d2e6:	bd10      	pop	{r4, pc}
      set_opmode(OPMODE_STANDBY);
 800d2e8:	2001      	movs	r0, #1
 800d2ea:	f7ff fef3 	bl	800d0d4 <set_opmode>
      break;
 800d2ee:	e7f7      	b.n	800d2e0 <hw_radio_set_opmode+0x40>
      DEBUG_RX_END();
 800d2f0:	2001      	movs	r0, #1
 800d2f2:	f7fb f97d 	bl	80085f0 <hw_debug_clr>
      DEBUG_TX_START();
 800d2f6:	2000      	movs	r0, #0
 800d2f8:	f7fb f979 	bl	80085ee <hw_debug_set>
      set_opmode(OPMODE_TX);
 800d2fc:	2003      	movs	r0, #3
 800d2fe:	f7ff fee9 	bl	800d0d4 <set_opmode>
      break;
 800d302:	e7ed      	b.n	800d2e0 <hw_radio_set_opmode+0x40>
      DEBUG_RX_START();
 800d304:	2001      	movs	r0, #1
 800d306:	f7fb f972 	bl	80085ee <hw_debug_set>
      set_state_rx();
 800d30a:	f000 f961 	bl	800d5d0 <set_state_rx>
      break;
 800d30e:	e7e7      	b.n	800d2e0 <hw_radio_set_opmode+0x40>
      hw_reset();
 800d310:	f7fe fc82 	bl	800bc18 <hw_reset>
      break;
 800d314:	e7e4      	b.n	800d2e0 <hw_radio_set_opmode+0x40>
 800d316:	46c0      	nop			; (mov r8, r8)
 800d318:	0801a0f0 	.word	0x0801a0f0
 800d31c:	50000404 	.word	0x50000404
 800d320:	50000401 	.word	0x50000401
 800d324:	200031ec 	.word	0x200031ec
 800d328:	200031bc 	.word	0x200031bc

0800d32c <hw_radio_set_idle>:
error_t hw_radio_set_idle() {
 800d32c:	b510      	push	{r4, lr}
    if(state == STATE_IDLE && !io_inited)
 800d32e:	4b1c      	ldr	r3, [pc, #112]	; (800d3a0 <hw_radio_set_idle+0x74>)
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d103      	bne.n	800d33e <hw_radio_set_idle+0x12>
 800d336:	4b1b      	ldr	r3, [pc, #108]	; (800d3a4 <hw_radio_set_idle+0x78>)
 800d338:	781b      	ldrb	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d02d      	beq.n	800d39a <hw_radio_set_idle+0x6e>
    hw_radio_set_opmode(HW_STATE_SLEEP);
 800d33e:	2001      	movs	r0, #1
 800d340:	f7ff ffae 	bl	800d2a0 <hw_radio_set_opmode>
    if(FskPacketHandler_sx127x.Size - FskPacketHandler_sx127x.NbBytes != 0 && FskPacketHandler_sx127x.NbBytes != 0) {
 800d344:	4b18      	ldr	r3, [pc, #96]	; (800d3a8 <hw_radio_set_idle+0x7c>)
 800d346:	881a      	ldrh	r2, [r3, #0]
 800d348:	885b      	ldrh	r3, [r3, #2]
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d00a      	beq.n	800d364 <hw_radio_set_idle+0x38>
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d008      	beq.n	800d364 <hw_radio_set_idle+0x38>
      FskPacketHandler_sx127x.Size = 0;
 800d352:	4b15      	ldr	r3, [pc, #84]	; (800d3a8 <hw_radio_set_idle+0x7c>)
 800d354:	2200      	movs	r2, #0
 800d356:	801a      	strh	r2, [r3, #0]
      FskPacketHandler_sx127x.NbBytes = 0;
 800d358:	805a      	strh	r2, [r3, #2]
      release_packet_callback(current_packet);
 800d35a:	4b14      	ldr	r3, [pc, #80]	; (800d3ac <hw_radio_set_idle+0x80>)
 800d35c:	6818      	ldr	r0, [r3, #0]
 800d35e:	4b14      	ldr	r3, [pc, #80]	; (800d3b0 <hw_radio_set_idle+0x84>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	4798      	blx	r3
 800d364:	2100      	movs	r1, #0
 800d366:	4813      	ldr	r0, [pc, #76]	; (800d3b4 <hw_radio_set_idle+0x88>)
 800d368:	f002 f9ae 	bl	800f6c8 <sched_cancel_task_with_arg>
 800d36c:	2100      	movs	r1, #0
 800d36e:	4812      	ldr	r0, [pc, #72]	; (800d3b8 <hw_radio_set_idle+0x8c>)
 800d370:	f002 f9aa 	bl	800f6c8 <sched_cancel_task_with_arg>
 800d374:	2100      	movs	r1, #0
 800d376:	4811      	ldr	r0, [pc, #68]	; (800d3bc <hw_radio_set_idle+0x90>)
 800d378:	f002 f9a6 	bl	800f6c8 <sched_cancel_task_with_arg>
 800d37c:	2100      	movs	r1, #0
 800d37e:	4810      	ldr	r0, [pc, #64]	; (800d3c0 <hw_radio_set_idle+0x94>)
 800d380:	f002 f9a2 	bl	800f6c8 <sched_cancel_task_with_arg>
    timer_cancel_task(&rx_timeout);
 800d384:	480f      	ldr	r0, [pc, #60]	; (800d3c4 <hw_radio_set_idle+0x98>)
 800d386:	f003 fa67 	bl	8010858 <timer_cancel_task>
    DEBUG_RX_END();
 800d38a:	2001      	movs	r0, #1
 800d38c:	f7fb f930 	bl	80085f0 <hw_debug_clr>
    DEBUG_TX_END();
 800d390:	2000      	movs	r0, #0
 800d392:	f7fb f92d 	bl	80085f0 <hw_debug_clr>
    return SUCCESS;
 800d396:	2000      	movs	r0, #0
}
 800d398:	bd10      	pop	{r4, pc}
        return EALREADY;
 800d39a:	2078      	movs	r0, #120	; 0x78
 800d39c:	e7fc      	b.n	800d398 <hw_radio_set_idle+0x6c>
 800d39e:	46c0      	nop			; (mov r8, r8)
 800d3a0:	2000059a 	.word	0x2000059a
 800d3a4:	200031bc 	.word	0x200031bc
 800d3a8:	200031a4 	.word	0x200031a4
 800d3ac:	200031b4 	.word	0x200031b4
 800d3b0:	200031c4 	.word	0x200031c4
 800d3b4:	0800cc71 	.word	0x0800cc71
 800d3b8:	0800cb45 	.word	0x0800cb45
 800d3bc:	0800cb6d 	.word	0x0800cb6d
 800d3c0:	0800c565 	.word	0x0800c565
 800d3c4:	0800d5a5 	.word	0x0800d5a5

0800d3c8 <hw_radio_init>:
error_t hw_radio_init(hwradio_init_args_t* init_args) {
 800d3c8:	b500      	push	{lr}
 800d3ca:	b085      	sub	sp, #20
  alloc_packet_callback = init_args->alloc_packet_cb;
 800d3cc:	4b54      	ldr	r3, [pc, #336]	; (800d520 <hw_radio_init+0x158>)
 800d3ce:	6802      	ldr	r2, [r0, #0]
 800d3d0:	601a      	str	r2, [r3, #0]
  release_packet_callback = init_args->release_packet_cb;
 800d3d2:	4b54      	ldr	r3, [pc, #336]	; (800d524 <hw_radio_init+0x15c>)
 800d3d4:	6842      	ldr	r2, [r0, #4]
 800d3d6:	601a      	str	r2, [r3, #0]
  rx_packet_callback = init_args->rx_packet_cb;
 800d3d8:	4b53      	ldr	r3, [pc, #332]	; (800d528 <hw_radio_init+0x160>)
 800d3da:	6882      	ldr	r2, [r0, #8]
 800d3dc:	601a      	str	r2, [r3, #0]
  rx_packet_header_callback = init_args->rx_packet_header_cb;
 800d3de:	4b53      	ldr	r3, [pc, #332]	; (800d52c <hw_radio_init+0x164>)
 800d3e0:	68c2      	ldr	r2, [r0, #12]
 800d3e2:	601a      	str	r2, [r3, #0]
  tx_packet_callback = init_args->tx_packet_cb;
 800d3e4:	4b52      	ldr	r3, [pc, #328]	; (800d530 <hw_radio_init+0x168>)
 800d3e6:	6902      	ldr	r2, [r0, #16]
 800d3e8:	601a      	str	r2, [r3, #0]
  tx_refill_callback = init_args->tx_refill_cb;
 800d3ea:	4b52      	ldr	r3, [pc, #328]	; (800d534 <hw_radio_init+0x16c>)
 800d3ec:	6942      	ldr	r2, [r0, #20]
 800d3ee:	601a      	str	r2, [r3, #0]
  tx_lora_packet_callback = init_args->tx_lora_packet_cb;
 800d3f0:	4b51      	ldr	r3, [pc, #324]	; (800d538 <hw_radio_init+0x170>)
 800d3f2:	6982      	ldr	r2, [r0, #24]
 800d3f4:	601a      	str	r2, [r3, #0]
  rx_lora_packet_callback = init_args->rx_lora_packet_cb;
 800d3f6:	4b51      	ldr	r3, [pc, #324]	; (800d53c <hw_radio_init+0x174>)
 800d3f8:	69c2      	ldr	r2, [r0, #28]
 800d3fa:	601a      	str	r2, [r3, #0]
  rx_lora_error_callback = init_args->rx_lora_error_cb;
 800d3fc:	4b50      	ldr	r3, [pc, #320]	; (800d540 <hw_radio_init+0x178>)
 800d3fe:	6a02      	ldr	r2, [r0, #32]
 800d400:	601a      	str	r2, [r3, #0]
  rx_lora_timeout_callback = init_args->rx_lora_timeout_cb;
 800d402:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d404:	4b4f      	ldr	r3, [pc, #316]	; (800d544 <hw_radio_init+0x17c>)
 800d406:	601a      	str	r2, [r3, #0]
  if(sx127x_spi == NULL) {
 800d408:	4b4f      	ldr	r3, [pc, #316]	; (800d548 <hw_radio_init+0x180>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d05b      	beq.n	800d4c8 <hw_radio_init+0x100>
  spi_enable(spi_handle);
 800d410:	4b4e      	ldr	r3, [pc, #312]	; (800d54c <hw_radio_init+0x184>)
 800d412:	6818      	ldr	r0, [r3, #0]
 800d414:	f7fd ffc8 	bl	800b3a8 <spi_enable>
  hw_radio_io_init(true);
 800d418:	2001      	movs	r0, #1
 800d41a:	f7fa feeb 	bl	80081f4 <hw_radio_io_init>
  io_inited = true;
 800d41e:	4b4c      	ldr	r3, [pc, #304]	; (800d550 <hw_radio_init+0x188>)
 800d420:	2201      	movs	r2, #1
 800d422:	701a      	strb	r2, [r3, #0]
  hw_radio_reset();
 800d424:	f7fa feb2 	bl	800818c <hw_radio_reset>
  write_reg(REG_OPMODE, ((read_reg(REG_OPMODE) & RF_OPMODE_MASK) & RF_OPMODE_LONGRANGEMODE_MASK) | OPMODE_STANDBY);
 800d428:	2001      	movs	r0, #1
 800d42a:	f7ff fb4d 	bl	800cac8 <read_reg>
 800d42e:	b240      	sxtb	r0, r0
 800d430:	2178      	movs	r1, #120	; 0x78
 800d432:	4001      	ands	r1, r0
 800d434:	2001      	movs	r0, #1
 800d436:	4301      	orrs	r1, r0
 800d438:	b249      	sxtb	r1, r1
 800d43a:	b2c9      	uxtb	r1, r1
 800d43c:	2001      	movs	r0, #1
 800d43e:	f7ff f99d 	bl	800c77c <write_reg>
  while(get_opmode() != OPMODE_STANDBY) {}
 800d442:	f7ff fde7 	bl	800d014 <get_opmode>
 800d446:	2801      	cmp	r0, #1
 800d448:	d1fb      	bne.n	800d442 <hw_radio_init+0x7a>
  uint8_t chip_version = read_reg(REG_VERSION);
 800d44a:	3041      	adds	r0, #65	; 0x41
 800d44c:	f7ff fb3c 	bl	800cac8 <read_reg>
  if(chip_version == 0x12) {
 800d450:	2812      	cmp	r0, #18
 800d452:	d04d      	beq.n	800d4f0 <hw_radio_init+0x128>
  } else if(chip_version == 0x22) {
 800d454:	2822      	cmp	r0, #34	; 0x22
 800d456:	d14f      	bne.n	800d4f8 <hw_radio_init+0x130>
    is_sx1272 = true;
 800d458:	4b3e      	ldr	r3, [pc, #248]	; (800d554 <hw_radio_init+0x18c>)
 800d45a:	2201      	movs	r2, #1
 800d45c:	701a      	strb	r2, [r3, #0]
  calibrate_rx_chain();
 800d45e:	f7ff fde1 	bl	800d024 <calibrate_rx_chain>
  init_regs();
 800d462:	f7ff faaf 	bl	800c9c4 <init_regs>
  hw_radio_set_idle();
 800d466:	f7ff ff61 	bl	800d32c <hw_radio_set_idle>
  e = hw_gpio_configure_interrupt(SX127x_DIO0_PIN, GPIO_RISING_EDGE, &dio0_isr, NULL); assert(e == SUCCESS);
 800d46a:	2300      	movs	r3, #0
 800d46c:	4a3a      	ldr	r2, [pc, #232]	; (800d558 <hw_radio_init+0x190>)
 800d46e:	2101      	movs	r1, #1
 800d470:	483a      	ldr	r0, [pc, #232]	; (800d55c <hw_radio_init+0x194>)
 800d472:	f7fd fbe7 	bl	800ac44 <hw_gpio_configure_interrupt>
 800d476:	2800      	cmp	r0, #0
 800d478:	d144      	bne.n	800d504 <hw_radio_init+0x13c>
  e = hw_gpio_configure_interrupt(SX127x_DIO1_PIN, GPIO_RISING_EDGE, &dio1_isr, NULL); assert(e == SUCCESS);
 800d47a:	2300      	movs	r3, #0
 800d47c:	4a38      	ldr	r2, [pc, #224]	; (800d560 <hw_radio_init+0x198>)
 800d47e:	2101      	movs	r1, #1
 800d480:	4838      	ldr	r0, [pc, #224]	; (800d564 <hw_radio_init+0x19c>)
 800d482:	f7fd fbdf 	bl	800ac44 <hw_gpio_configure_interrupt>
 800d486:	2800      	cmp	r0, #0
 800d488:	d143      	bne.n	800d512 <hw_radio_init+0x14a>
static inline error_t sched_register_task(task_t task) { return sched_register_task_allow_multiple(task, false);}
 800d48a:	2100      	movs	r1, #0
 800d48c:	4836      	ldr	r0, [pc, #216]	; (800d568 <hw_radio_init+0x1a0>)
 800d48e:	f001 ffed 	bl	800f46c <sched_register_task_allow_multiple>
 800d492:	2100      	movs	r1, #0
 800d494:	4835      	ldr	r0, [pc, #212]	; (800d56c <hw_radio_init+0x1a4>)
 800d496:	f001 ffe9 	bl	800f46c <sched_register_task_allow_multiple>
 800d49a:	2100      	movs	r1, #0
 800d49c:	4834      	ldr	r0, [pc, #208]	; (800d570 <hw_radio_init+0x1a8>)
 800d49e:	f001 ffe5 	bl	800f46c <sched_register_task_allow_multiple>
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	4833      	ldr	r0, [pc, #204]	; (800d574 <hw_radio_init+0x1ac>)
 800d4a6:	f001 ffe1 	bl	800f46c <sched_register_task_allow_multiple>
 800d4aa:	2100      	movs	r1, #0
 800d4ac:	4832      	ldr	r0, [pc, #200]	; (800d578 <hw_radio_init+0x1b0>)
 800d4ae:	f001 ffdd 	bl	800f46c <sched_register_task_allow_multiple>
 800d4b2:	2100      	movs	r1, #0
 800d4b4:	4831      	ldr	r0, [pc, #196]	; (800d57c <hw_radio_init+0x1b4>)
 800d4b6:	f001 ffd9 	bl	800f46c <sched_register_task_allow_multiple>
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	4830      	ldr	r0, [pc, #192]	; (800d580 <hw_radio_init+0x1b8>)
 800d4be:	f001 ffd5 	bl	800f46c <sched_register_task_allow_multiple>
}
 800d4c2:	2000      	movs	r0, #0
 800d4c4:	b005      	add	sp, #20
 800d4c6:	bd00      	pop	{pc}
    spi_handle = spi_init(SX127x_SPI_INDEX, SX127x_SPI_BAUDRATE, 8, true, false, false, false, NULL);
 800d4c8:	9303      	str	r3, [sp, #12]
 800d4ca:	9302      	str	r3, [sp, #8]
 800d4cc:	9301      	str	r3, [sp, #4]
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	2208      	movs	r2, #8
 800d4d4:	492b      	ldr	r1, [pc, #172]	; (800d584 <hw_radio_init+0x1bc>)
 800d4d6:	2000      	movs	r0, #0
 800d4d8:	f7fd ffee 	bl	800b4b8 <spi_init>
 800d4dc:	4b1b      	ldr	r3, [pc, #108]	; (800d54c <hw_radio_init+0x184>)
 800d4de:	6018      	str	r0, [r3, #0]
    sx127x_spi = spi_init_slave(spi_handle, SX127x_SPI_PIN_CS, true, false);
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	4928      	ldr	r1, [pc, #160]	; (800d588 <hw_radio_init+0x1c0>)
 800d4e6:	f7fe f90f 	bl	800b708 <spi_init_slave>
 800d4ea:	4b17      	ldr	r3, [pc, #92]	; (800d548 <hw_radio_init+0x180>)
 800d4ec:	6018      	str	r0, [r3, #0]
 800d4ee:	e78f      	b.n	800d410 <hw_radio_init+0x48>
    is_sx1272 = false;
 800d4f0:	4b18      	ldr	r3, [pc, #96]	; (800d554 <hw_radio_init+0x18c>)
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	701a      	strb	r2, [r3, #0]
 800d4f6:	e7b2      	b.n	800d45e <hw_radio_init+0x96>
    assert(false);
 800d4f8:	4b24      	ldr	r3, [pc, #144]	; (800d58c <hw_radio_init+0x1c4>)
 800d4fa:	4a25      	ldr	r2, [pc, #148]	; (800d590 <hw_radio_init+0x1c8>)
 800d4fc:	4925      	ldr	r1, [pc, #148]	; (800d594 <hw_radio_init+0x1cc>)
 800d4fe:	4826      	ldr	r0, [pc, #152]	; (800d598 <hw_radio_init+0x1d0>)
 800d500:	f7fb f87e 	bl	8008600 <__assert_func>
  e = hw_gpio_configure_interrupt(SX127x_DIO0_PIN, GPIO_RISING_EDGE, &dio0_isr, NULL); assert(e == SUCCESS);
 800d504:	21cf      	movs	r1, #207	; 0xcf
 800d506:	4b25      	ldr	r3, [pc, #148]	; (800d59c <hw_radio_init+0x1d4>)
 800d508:	4a21      	ldr	r2, [pc, #132]	; (800d590 <hw_radio_init+0x1c8>)
 800d50a:	0089      	lsls	r1, r1, #2
 800d50c:	4822      	ldr	r0, [pc, #136]	; (800d598 <hw_radio_init+0x1d0>)
 800d50e:	f7fb f877 	bl	8008600 <__assert_func>
  e = hw_gpio_configure_interrupt(SX127x_DIO1_PIN, GPIO_RISING_EDGE, &dio1_isr, NULL); assert(e == SUCCESS);
 800d512:	4b22      	ldr	r3, [pc, #136]	; (800d59c <hw_radio_init+0x1d4>)
 800d514:	4a1e      	ldr	r2, [pc, #120]	; (800d590 <hw_radio_init+0x1c8>)
 800d516:	4922      	ldr	r1, [pc, #136]	; (800d5a0 <hw_radio_init+0x1d8>)
 800d518:	481f      	ldr	r0, [pc, #124]	; (800d598 <hw_radio_init+0x1d0>)
 800d51a:	f7fb f871 	bl	8008600 <__assert_func>
 800d51e:	46c0      	nop			; (mov r8, r8)
 800d520:	200031ac 	.word	0x200031ac
 800d524:	200031c4 	.word	0x200031c4
 800d528:	200031e0 	.word	0x200031e0
 800d52c:	200031e4 	.word	0x200031e4
 800d530:	200031fc 	.word	0x200031fc
 800d534:	20003200 	.word	0x20003200
 800d538:	200031f8 	.word	0x200031f8
 800d53c:	200031d8 	.word	0x200031d8
 800d540:	200031d4 	.word	0x200031d4
 800d544:	200031dc 	.word	0x200031dc
 800d548:	200031f4 	.word	0x200031f4
 800d54c:	200031ec 	.word	0x200031ec
 800d550:	200031bc 	.word	0x200031bc
 800d554:	200031bd 	.word	0x200031bd
 800d558:	0800c6d1 	.word	0x0800c6d1
 800d55c:	50000404 	.word	0x50000404
 800d560:	0800c675 	.word	0x0800c675
 800d564:	50000401 	.word	0x50000401
 800d568:	0800d5a5 	.word	0x0800d5a5
 800d56c:	0800cb6d 	.word	0x0800cb6d
 800d570:	0800cecd 	.word	0x0800cecd
 800d574:	0800ce75 	.word	0x0800ce75
 800d578:	0800c565 	.word	0x0800c565
 800d57c:	0800cc71 	.word	0x0800cc71
 800d580:	0800cb45 	.word	0x0800cb45
 800d584:	007a1200 	.word	0x007a1200
 800d588:	5000000f 	.word	0x5000000f
 800d58c:	080169c8 	.word	0x080169c8
 800d590:	0801a19c 	.word	0x0801a19c
 800d594:	0000032e 	.word	0x0000032e
 800d598:	08019f14 	.word	0x08019f14
 800d59c:	0801956c 	.word	0x0801956c
 800d5a0:	0000033d 	.word	0x0000033d

0800d5a4 <rx_timeout>:
static void rx_timeout(void *arg) {
 800d5a4:	b510      	push	{r4, lr}
  if(lora_mode) {
 800d5a6:	4b06      	ldr	r3, [pc, #24]	; (800d5c0 <rx_timeout+0x1c>)
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d004      	beq.n	800d5b8 <rx_timeout+0x14>
    if(rx_lora_timeout_callback) {
 800d5ae:	4b05      	ldr	r3, [pc, #20]	; (800d5c4 <rx_timeout+0x20>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d000      	beq.n	800d5b8 <rx_timeout+0x14>
      rx_lora_timeout_callback();
 800d5b6:	4798      	blx	r3
  hw_radio_set_idle();
 800d5b8:	f7ff feb8 	bl	800d32c <hw_radio_set_idle>
}
 800d5bc:	bd10      	pop	{r4, pc}
 800d5be:	46c0      	nop			; (mov r8, r8)
 800d5c0:	200031bf 	.word	0x200031bf
 800d5c4:	200031dc 	.word	0x200031dc

0800d5c8 <hw_radio_stop>:
void hw_radio_stop() {
 800d5c8:	b510      	push	{r4, lr}
  hw_radio_set_idle();
 800d5ca:	f7ff feaf 	bl	800d32c <hw_radio_set_idle>
}
 800d5ce:	bd10      	pop	{r4, pc}

0800d5d0 <set_state_rx>:
void set_state_rx() {
 800d5d0:	b510      	push	{r4, lr}
  if(lora_mode) {
 800d5d2:	4b41      	ldr	r3, [pc, #260]	; (800d6d8 <set_state_rx+0x108>)
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d03a      	beq.n	800d650 <set_state_rx+0x80>
    hw_radio_set_opmode(HW_STATE_STANDBY);
 800d5da:	2006      	movs	r0, #6
 800d5dc:	f7ff fe60 	bl	800d2a0 <hw_radio_set_opmode>
    write_reg( REG_LR_TEST30, 0x00 ); 
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	2030      	movs	r0, #48	; 0x30
 800d5e4:	f7ff f8ca 	bl	800c77c <write_reg>
    write_reg(REG_LR_TEST2F, 0x40 ); 
 800d5e8:	2140      	movs	r1, #64	; 0x40
 800d5ea:	202f      	movs	r0, #47	; 0x2f
 800d5ec:	f7ff f8c6 	bl	800c77c <write_reg>
    write_reg(REG_LR_FIFORXBASEADDR, 0);
 800d5f0:	2100      	movs	r1, #0
 800d5f2:	200f      	movs	r0, #15
 800d5f4:	f7ff f8c2 	bl	800c77c <write_reg>
    write_reg(REG_LR_FIFOADDRPTR, 0);
 800d5f8:	2100      	movs	r1, #0
 800d5fa:	200d      	movs	r0, #13
 800d5fc:	f7ff f8be 	bl	800c77c <write_reg>
    write_reg(REG_LR_IRQFLAGS, 0xFF);
 800d600:	21ff      	movs	r1, #255	; 0xff
 800d602:	2012      	movs	r0, #18
 800d604:	f7ff f8ba 	bl	800c77c <write_reg>
    write_reg(REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800d608:	211f      	movs	r1, #31
 800d60a:	2011      	movs	r0, #17
 800d60c:	f7ff f8b6 	bl	800c77c <write_reg>
    write_reg(REG_DIOMAPPING1, RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO1_00); // DIO0 mapped to RXDone, DIO1 mapped to RXTimeout
 800d610:	2100      	movs	r1, #0
 800d612:	2040      	movs	r0, #64	; 0x40
 800d614:	f7ff f8b2 	bl	800c77c <write_reg>
    hw_gpio_enable_interrupt(SX127x_DIO0_PIN);
 800d618:	4830      	ldr	r0, [pc, #192]	; (800d6dc <set_state_rx+0x10c>)
 800d61a:	f7fd fbc5 	bl	800ada8 <hw_gpio_enable_interrupt>
    hw_gpio_enable_interrupt(SX127x_DIO1_PIN);
 800d61e:	4830      	ldr	r0, [pc, #192]	; (800d6e0 <set_state_rx+0x110>)
 800d620:	f7fd fbc2 	bl	800ada8 <hw_gpio_enable_interrupt>
    memset( rx_buffer, 0, ( size_t ) RX_BUFFER_SIZE );
 800d624:	2280      	movs	r2, #128	; 0x80
 800d626:	4b2f      	ldr	r3, [pc, #188]	; (800d6e4 <set_state_rx+0x114>)
 800d628:	6818      	ldr	r0, [r3, #0]
 800d62a:	0052      	lsls	r2, r2, #1
 800d62c:	2100      	movs	r1, #0
 800d62e:	f007 fc23 	bl	8014e78 <memset>
    if(rx_type_continuous) {
 800d632:	4b2d      	ldr	r3, [pc, #180]	; (800d6e8 <set_state_rx+0x118>)
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d006      	beq.n	800d648 <set_state_rx+0x78>
      set_opmode(OPMODE_RX); //put into RXCONT mode
 800d63a:	2005      	movs	r0, #5
 800d63c:	f7ff fd4a 	bl	800d0d4 <set_opmode>
    update_active_times(HW_STATE_RX);
 800d640:	2003      	movs	r0, #3
 800d642:	f7fe ffaf 	bl	800c5a4 <update_active_times>
 800d646:	e03c      	b.n	800d6c2 <set_state_rx+0xf2>
      set_opmode(OPMODE_RXSINGLE); //put into RXSINGLE mode  
 800d648:	2006      	movs	r0, #6
 800d64a:	f7ff fd43 	bl	800d0d4 <set_opmode>
 800d64e:	e7f7      	b.n	800d640 <set_state_rx+0x70>
    if(get_opmode() >= OPMODE_FSRX || get_opmode() == OPMODE_SLEEP) {
 800d650:	f7ff fce0 	bl	800d014 <get_opmode>
 800d654:	2803      	cmp	r0, #3
 800d656:	d803      	bhi.n	800d660 <set_state_rx+0x90>
 800d658:	f7ff fcdc 	bl	800d014 <get_opmode>
 800d65c:	2800      	cmp	r0, #0
 800d65e:	d107      	bne.n	800d670 <set_state_rx+0xa0>
      hw_radio_set_opmode(HW_STATE_STANDBY); //Restart when changing freq/datarate
 800d660:	2006      	movs	r0, #6
 800d662:	f7ff fe1d 	bl	800d2a0 <hw_radio_set_opmode>
      while(!(read_reg(REG_IRQFLAGS1) & 0x80));
 800d666:	203e      	movs	r0, #62	; 0x3e
 800d668:	f7ff fa2e 	bl	800cac8 <read_reg>
 800d66c:	0603      	lsls	r3, r0, #24
 800d66e:	d5fa      	bpl.n	800d666 <set_state_rx+0x96>
static inline error_t sched_cancel_task(task_t task) { return sched_cancel_task_with_arg(task, NULL);}
 800d670:	2100      	movs	r1, #0
 800d672:	481e      	ldr	r0, [pc, #120]	; (800d6ec <set_state_rx+0x11c>)
 800d674:	f002 f828 	bl	800f6c8 <sched_cancel_task_with_arg>
  write_reg(REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN);
 800d678:	2110      	movs	r1, #16
 800d67a:	203f      	movs	r0, #63	; 0x3f
 800d67c:	f7ff f87e 	bl	800c77c <write_reg>
    FskPacketHandler_sx127x.FifoThresh = 4;
 800d680:	4c1b      	ldr	r4, [pc, #108]	; (800d6f0 <set_state_rx+0x120>)
 800d682:	2304      	movs	r3, #4
 800d684:	80a3      	strh	r3, [r4, #4]
    write_reg(REG_FIFOTHRESH, RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY | (FskPacketHandler_sx127x.FifoThresh - 1));
 800d686:	2183      	movs	r1, #131	; 0x83
 800d688:	2035      	movs	r0, #53	; 0x35
 800d68a:	f7ff f877 	bl	800c77c <write_reg>
    write_reg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO2_11);
 800d68e:	210c      	movs	r1, #12
 800d690:	2040      	movs	r0, #64	; 0x40
 800d692:	f7ff f873 	bl	800c77c <write_reg>
    FskPacketHandler_sx127x.NbBytes = 0;
 800d696:	2300      	movs	r3, #0
 800d698:	8063      	strh	r3, [r4, #2]
    set_packet_handler_enabled(true);
 800d69a:	2001      	movs	r0, #1
 800d69c:	f7ff fd58 	bl	800d150 <set_packet_handler_enabled>
    if(FskPacketHandler_sx127x.Size == 0) {
 800d6a0:	8823      	ldrh	r3, [r4, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d10e      	bne.n	800d6c4 <set_state_rx+0xf4>
      hw_gpio_set_edge_interrupt(SX127x_DIO1_PIN, GPIO_RISING_EDGE);
 800d6a6:	4c0e      	ldr	r4, [pc, #56]	; (800d6e0 <set_state_rx+0x110>)
 800d6a8:	2101      	movs	r1, #1
 800d6aa:	0020      	movs	r0, r4
 800d6ac:	f7fd fa98 	bl	800abe0 <hw_gpio_set_edge_interrupt>
      hw_gpio_enable_interrupt(SX127x_DIO1_PIN);
 800d6b0:	0020      	movs	r0, r4
 800d6b2:	f7fd fb79 	bl	800ada8 <hw_gpio_enable_interrupt>
    set_opmode(OPMODE_RX);
 800d6b6:	2005      	movs	r0, #5
 800d6b8:	f7ff fd0c 	bl	800d0d4 <set_opmode>
    update_active_times(HW_STATE_RX);
 800d6bc:	2003      	movs	r0, #3
 800d6be:	f7fe ff71 	bl	800c5a4 <update_active_times>
}
 800d6c2:	bd10      	pop	{r4, pc}
      hw_gpio_set_edge_interrupt(SX127x_DIO0_PIN, GPIO_RISING_EDGE);
 800d6c4:	4c05      	ldr	r4, [pc, #20]	; (800d6dc <set_state_rx+0x10c>)
 800d6c6:	2101      	movs	r1, #1
 800d6c8:	0020      	movs	r0, r4
 800d6ca:	f7fd fa89 	bl	800abe0 <hw_gpio_set_edge_interrupt>
      hw_gpio_enable_interrupt(SX127x_DIO0_PIN);
 800d6ce:	0020      	movs	r0, r4
 800d6d0:	f7fd fb6a 	bl	800ada8 <hw_gpio_enable_interrupt>
 800d6d4:	e7ef      	b.n	800d6b6 <set_state_rx+0xe6>
 800d6d6:	46c0      	nop			; (mov r8, r8)
 800d6d8:	200031bf 	.word	0x200031bf
 800d6dc:	50000404 	.word	0x50000404
 800d6e0:	50000401 	.word	0x50000401
 800d6e4:	200031cc 	.word	0x200031cc
 800d6e8:	20000599 	.word	0x20000599
 800d6ec:	0800cc71 	.word	0x0800cc71
 800d6f0:	200031a4 	.word	0x200031a4

0800d6f4 <hw_radio_send_payload>:
error_t hw_radio_send_payload(uint8_t * data, uint16_t len) {
 800d6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6f6:	0007      	movs	r7, r0
 800d6f8:	000c      	movs	r4, r1
  if(rx_lora_packet_callback) { //if in LoRaMAC node i.e. callbacks have been defined. Otherwise a buffer in the d7 layer will be used for rx.
 800d6fa:	4b6b      	ldr	r3, [pc, #428]	; (800d8a8 <hw_radio_send_payload+0x1b4>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d005      	beq.n	800d70e <hw_radio_send_payload+0x1a>
    if(rx_buffer != data) 
 800d702:	4b6a      	ldr	r3, [pc, #424]	; (800d8ac <hw_radio_send_payload+0x1b8>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4283      	cmp	r3, r0
 800d708:	d001      	beq.n	800d70e <hw_radio_send_payload+0x1a>
      rx_buffer = data; //save this so we can use the same buffer in the rx
 800d70a:	4b68      	ldr	r3, [pc, #416]	; (800d8ac <hw_radio_send_payload+0x1b8>)
 800d70c:	6018      	str	r0, [r3, #0]
  if(len == 0)
 800d70e:	2c00      	cmp	r4, #0
 800d710:	d100      	bne.n	800d714 <hw_radio_send_payload+0x20>
 800d712:	e0c6      	b.n	800d8a2 <hw_radio_send_payload+0x1ae>
  if(state == STATE_RX) {
 800d714:	4b66      	ldr	r3, [pc, #408]	; (800d8b0 <hw_radio_send_payload+0x1bc>)
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	2b02      	cmp	r3, #2
 800d71a:	d03d      	beq.n	800d798 <hw_radio_send_payload+0xa4>
  if(state == STATE_IDLE) { //Sleeping
 800d71c:	4b64      	ldr	r3, [pc, #400]	; (800d8b0 <hw_radio_send_payload+0x1bc>)
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d04c      	beq.n	800d7be <hw_radio_send_payload+0xca>
  if(!lora_mode) {
 800d724:	4b63      	ldr	r3, [pc, #396]	; (800d8b4 <hw_radio_send_payload+0x1c0>)
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d000      	beq.n	800d72e <hw_radio_send_payload+0x3a>
 800d72c:	e090      	b.n	800d850 <hw_radio_send_payload+0x15c>
    uint8_t available_size = FIFO_SIZE - previous_threshold;
 800d72e:	4b62      	ldr	r3, [pc, #392]	; (800d8b8 <hw_radio_send_payload+0x1c4>)
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	2640      	movs	r6, #64	; 0x40
 800d734:	1af6      	subs	r6, r6, r3
 800d736:	b2f6      	uxtb	r6, r6
    if(remaining_bytes_len == 0)
 800d738:	4b60      	ldr	r3, [pc, #384]	; (800d8bc <hw_radio_send_payload+0x1c8>)
 800d73a:	881d      	ldrh	r5, [r3, #0]
 800d73c:	2d00      	cmp	r5, #0
 800d73e:	d14b      	bne.n	800d7d8 <hw_radio_send_payload+0xe4>
      remaining_bytes_len = len;
 800d740:	801c      	strh	r4, [r3, #0]
    write_reg(REG_DIOMAPPING1, 0x00); //FIFO LEVEL ISR or Packet Sent ISR
 800d742:	2100      	movs	r1, #0
 800d744:	2040      	movs	r0, #64	; 0x40
 800d746:	f7ff f819 	bl	800c77c <write_reg>
    if(remaining_bytes_len > available_size) {
 800d74a:	b2b4      	uxth	r4, r6
 800d74c:	4b5b      	ldr	r3, [pc, #364]	; (800d8bc <hw_radio_send_payload+0x1c8>)
 800d74e:	8819      	ldrh	r1, [r3, #0]
 800d750:	428c      	cmp	r4, r1
 800d752:	d344      	bcc.n	800d7de <hw_radio_send_payload+0xea>
      if(!enable_refill) {
 800d754:	4b5a      	ldr	r3, [pc, #360]	; (800d8c0 <hw_radio_send_payload+0x1cc>)
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d15d      	bne.n	800d818 <hw_radio_send_payload+0x124>
        previous_threshold = 0;
 800d75c:	2600      	movs	r6, #0
 800d75e:	4b56      	ldr	r3, [pc, #344]	; (800d8b8 <hw_radio_send_payload+0x1c4>)
 800d760:	701e      	strb	r6, [r3, #0]
        write_fifo(data + start, remaining_bytes_len);
 800d762:	b2c9      	uxtb	r1, r1
 800d764:	1978      	adds	r0, r7, r5
 800d766:	f7ff fd81 	bl	800d26c <write_fifo>
        remaining_bytes_len = 0;
 800d76a:	4b54      	ldr	r3, [pc, #336]	; (800d8bc <hw_radio_send_payload+0x1c8>)
 800d76c:	801e      	strh	r6, [r3, #0]
        hw_gpio_set_edge_interrupt(SX127x_DIO0_PIN, GPIO_RISING_EDGE);
 800d76e:	4c55      	ldr	r4, [pc, #340]	; (800d8c4 <hw_radio_send_payload+0x1d0>)
 800d770:	2101      	movs	r1, #1
 800d772:	0020      	movs	r0, r4
 800d774:	f7fd fa34 	bl	800abe0 <hw_gpio_set_edge_interrupt>
        hw_gpio_enable_interrupt(SX127x_DIO0_PIN); 
 800d778:	0020      	movs	r0, r4
 800d77a:	f7fd fb15 	bl	800ada8 <hw_gpio_enable_interrupt>
    set_packet_handler_enabled(true);
 800d77e:	2001      	movs	r0, #1
 800d780:	f7ff fce6 	bl	800d150 <set_packet_handler_enabled>
  if(!enable_preloading)
 800d784:	4b50      	ldr	r3, [pc, #320]	; (800d8c8 <hw_radio_send_payload+0x1d4>)
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d100      	bne.n	800d78e <hw_radio_send_payload+0x9a>
 800d78c:	e084      	b.n	800d898 <hw_radio_send_payload+0x1a4>
    enable_preloading = false;
 800d78e:	4b4e      	ldr	r3, [pc, #312]	; (800d8c8 <hw_radio_send_payload+0x1d4>)
 800d790:	2200      	movs	r2, #0
 800d792:	701a      	strb	r2, [r3, #0]
  return SUCCESS;
 800d794:	2000      	movs	r0, #0
}
 800d796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hw_gpio_disable_interrupt(SX127x_DIO0_PIN);
 800d798:	484a      	ldr	r0, [pc, #296]	; (800d8c4 <hw_radio_send_payload+0x1d0>)
 800d79a:	f7fd fb45 	bl	800ae28 <hw_gpio_disable_interrupt>
    hw_gpio_disable_interrupt(SX127x_DIO1_PIN);
 800d79e:	484b      	ldr	r0, [pc, #300]	; (800d8cc <hw_radio_send_payload+0x1d8>)
 800d7a0:	f7fd fb42 	bl	800ae28 <hw_gpio_disable_interrupt>
    hw_radio_set_opmode(HW_STATE_STANDBY);
 800d7a4:	2006      	movs	r0, #6
 800d7a6:	f7ff fd7b 	bl	800d2a0 <hw_radio_set_opmode>
    if(!lora_mode)
 800d7aa:	4b42      	ldr	r3, [pc, #264]	; (800d8b4 <hw_radio_send_payload+0x1c0>)
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1b4      	bne.n	800d71c <hw_radio_send_payload+0x28>
      while(!(read_reg(REG_IRQFLAGS1) & 0x80));
 800d7b2:	203e      	movs	r0, #62	; 0x3e
 800d7b4:	f7ff f988 	bl	800cac8 <read_reg>
 800d7b8:	0603      	lsls	r3, r0, #24
 800d7ba:	d5fa      	bpl.n	800d7b2 <hw_radio_send_payload+0xbe>
 800d7bc:	e7ae      	b.n	800d71c <hw_radio_send_payload+0x28>
    hw_radio_set_opmode(HW_STATE_STANDBY);
 800d7be:	2006      	movs	r0, #6
 800d7c0:	f7ff fd6e 	bl	800d2a0 <hw_radio_set_opmode>
    if(!lora_mode)
 800d7c4:	4b3b      	ldr	r3, [pc, #236]	; (800d8b4 <hw_radio_send_payload+0x1c0>)
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1ab      	bne.n	800d724 <hw_radio_send_payload+0x30>
      while(!(read_reg(REG_IRQFLAGS1) & 0x80));
 800d7cc:	203e      	movs	r0, #62	; 0x3e
 800d7ce:	f7ff f97b 	bl	800cac8 <read_reg>
 800d7d2:	0603      	lsls	r3, r0, #24
 800d7d4:	d5fa      	bpl.n	800d7cc <hw_radio_send_payload+0xd8>
 800d7d6:	e7a5      	b.n	800d724 <hw_radio_send_payload+0x30>
      start = len - remaining_bytes_len;
 800d7d8:	1b65      	subs	r5, r4, r5
 800d7da:	b2ad      	uxth	r5, r5
 800d7dc:	e7b1      	b.n	800d742 <hw_radio_send_payload+0x4e>
      previous_threshold = FG_THRESHOLD;
 800d7de:	4b36      	ldr	r3, [pc, #216]	; (800d8b8 <hw_radio_send_payload+0x1c4>)
 800d7e0:	2220      	movs	r2, #32
 800d7e2:	701a      	strb	r2, [r3, #0]
      write_reg(REG_FIFOTHRESH, RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY | FG_THRESHOLD);
 800d7e4:	21a0      	movs	r1, #160	; 0xa0
 800d7e6:	2035      	movs	r0, #53	; 0x35
 800d7e8:	f7fe ffc8 	bl	800c77c <write_reg>
      write_fifo(data + start, available_size);
 800d7ec:	1978      	adds	r0, r7, r5
 800d7ee:	0031      	movs	r1, r6
 800d7f0:	f7ff fd3c 	bl	800d26c <write_fifo>
      remaining_bytes_len = remaining_bytes_len - available_size;
 800d7f4:	4a31      	ldr	r2, [pc, #196]	; (800d8bc <hw_radio_send_payload+0x1c8>)
 800d7f6:	8813      	ldrh	r3, [r2, #0]
 800d7f8:	1b1c      	subs	r4, r3, r4
 800d7fa:	8014      	strh	r4, [r2, #0]
      hw_gpio_set_edge_interrupt(SX127x_DIO1_PIN, GPIO_FALLING_EDGE);
 800d7fc:	4c33      	ldr	r4, [pc, #204]	; (800d8cc <hw_radio_send_payload+0x1d8>)
 800d7fe:	2102      	movs	r1, #2
 800d800:	0020      	movs	r0, r4
 800d802:	f7fd f9ed 	bl	800abe0 <hw_gpio_set_edge_interrupt>
      hw_gpio_enable_interrupt(SX127x_DIO1_PIN); 
 800d806:	0020      	movs	r0, r4
 800d808:	f7fd face 	bl	800ada8 <hw_gpio_enable_interrupt>
static inline error_t sched_post_task(task_t task) { return sched_post_task_prio(task,DEFAULT_PRIORITY, NULL);}
 800d80c:	2200      	movs	r2, #0
 800d80e:	2107      	movs	r1, #7
 800d810:	482f      	ldr	r0, [pc, #188]	; (800d8d0 <hw_radio_send_payload+0x1dc>)
 800d812:	f001 fec7 	bl	800f5a4 <sched_post_task_prio>
 800d816:	e7b2      	b.n	800d77e <hw_radio_send_payload+0x8a>
        previous_threshold = 2;
 800d818:	4b27      	ldr	r3, [pc, #156]	; (800d8b8 <hw_radio_send_payload+0x1c4>)
 800d81a:	2202      	movs	r2, #2
 800d81c:	701a      	strb	r2, [r3, #0]
        write_reg(REG_FIFOTHRESH, RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY | 2);
 800d81e:	2182      	movs	r1, #130	; 0x82
 800d820:	2035      	movs	r0, #53	; 0x35
 800d822:	f7fe ffab 	bl	800c77c <write_reg>
        write_fifo(data + start, remaining_bytes_len);
 800d826:	4c25      	ldr	r4, [pc, #148]	; (800d8bc <hw_radio_send_payload+0x1c8>)
 800d828:	7821      	ldrb	r1, [r4, #0]
 800d82a:	1978      	adds	r0, r7, r5
 800d82c:	f7ff fd1e 	bl	800d26c <write_fifo>
        remaining_bytes_len = 0;
 800d830:	2300      	movs	r3, #0
 800d832:	8023      	strh	r3, [r4, #0]
        hw_gpio_set_edge_interrupt(SX127x_DIO1_PIN, GPIO_FALLING_EDGE);
 800d834:	4c25      	ldr	r4, [pc, #148]	; (800d8cc <hw_radio_send_payload+0x1d8>)
 800d836:	2102      	movs	r1, #2
 800d838:	0020      	movs	r0, r4
 800d83a:	f7fd f9d1 	bl	800abe0 <hw_gpio_set_edge_interrupt>
        hw_gpio_enable_interrupt(SX127x_DIO1_PIN);
 800d83e:	0020      	movs	r0, r4
 800d840:	f7fd fab2 	bl	800ada8 <hw_gpio_enable_interrupt>
 800d844:	2200      	movs	r2, #0
 800d846:	2107      	movs	r1, #7
 800d848:	4821      	ldr	r0, [pc, #132]	; (800d8d0 <hw_radio_send_payload+0x1dc>)
 800d84a:	f001 feab 	bl	800f5a4 <sched_post_task_prio>
 800d84e:	e796      	b.n	800d77e <hw_radio_send_payload+0x8a>
    hw_radio_set_opmode(HW_STATE_STANDBY);
 800d850:	2006      	movs	r0, #6
 800d852:	f7ff fd25 	bl	800d2a0 <hw_radio_set_opmode>
    write_reg(REG_LR_PAYLOADLENGTH, len);
 800d856:	b2e4      	uxtb	r4, r4
 800d858:	0021      	movs	r1, r4
 800d85a:	2022      	movs	r0, #34	; 0x22
 800d85c:	f7fe ff8e 	bl	800c77c <write_reg>
    write_reg(REG_LR_FIFOTXBASEADDR, 0);
 800d860:	2100      	movs	r1, #0
 800d862:	200e      	movs	r0, #14
 800d864:	f7fe ff8a 	bl	800c77c <write_reg>
    write_reg(REG_LR_FIFOADDRPTR, 0);
 800d868:	2100      	movs	r1, #0
 800d86a:	200d      	movs	r0, #13
 800d86c:	f7fe ff86 	bl	800c77c <write_reg>
    write_fifo(data, len);
 800d870:	0021      	movs	r1, r4
 800d872:	0038      	movs	r0, r7
 800d874:	f7ff fcfa 	bl	800d26c <write_fifo>
    write_reg(REG_LR_IRQFLAGS, 0xFF);
 800d878:	21ff      	movs	r1, #255	; 0xff
 800d87a:	2012      	movs	r0, #18
 800d87c:	f7fe ff7e 	bl	800c77c <write_reg>
    write_reg(REG_LR_IRQFLAGSMASK,  RFLR_IRQFLAGS_RXTIMEOUT |
 800d880:	21f7      	movs	r1, #247	; 0xf7
 800d882:	2011      	movs	r0, #17
 800d884:	f7fe ff7a 	bl	800c77c <write_reg>
    write_reg(REG_DIOMAPPING1, RFLR_DIOMAPPING1_DIO0_01 ); // DIO0 mapped to TxDone
 800d888:	2140      	movs	r1, #64	; 0x40
 800d88a:	2040      	movs	r0, #64	; 0x40
 800d88c:	f7fe ff76 	bl	800c77c <write_reg>
    hw_gpio_enable_interrupt(SX127x_DIO0_PIN); 
 800d890:	480c      	ldr	r0, [pc, #48]	; (800d8c4 <hw_radio_send_payload+0x1d0>)
 800d892:	f7fd fa89 	bl	800ada8 <hw_gpio_enable_interrupt>
 800d896:	e775      	b.n	800d784 <hw_radio_send_payload+0x90>
    hw_radio_set_opmode(HW_STATE_TX);
 800d898:	2004      	movs	r0, #4
 800d89a:	f7ff fd01 	bl	800d2a0 <hw_radio_set_opmode>
  return SUCCESS;
 800d89e:	2000      	movs	r0, #0
 800d8a0:	e779      	b.n	800d796 <hw_radio_send_payload+0xa2>
    return ESIZE;
 800d8a2:	480c      	ldr	r0, [pc, #48]	; (800d8d4 <hw_radio_send_payload+0x1e0>)
 800d8a4:	e777      	b.n	800d796 <hw_radio_send_payload+0xa2>
 800d8a6:	46c0      	nop			; (mov r8, r8)
 800d8a8:	200031d8 	.word	0x200031d8
 800d8ac:	200031cc 	.word	0x200031cc
 800d8b0:	2000059a 	.word	0x2000059a
 800d8b4:	200031bf 	.word	0x200031bf
 800d8b8:	200031c2 	.word	0x200031c2
 800d8bc:	200031c8 	.word	0x200031c8
 800d8c0:	200031ba 	.word	0x200031ba
 800d8c4:	50000404 	.word	0x50000404
 800d8c8:	200031b9 	.word	0x200031b9
 800d8cc:	50000401 	.word	0x50000401
 800d8d0:	0800cb45 	.word	0x0800cb45
 800d8d4:	0000138a 	.word	0x0000138a

0800d8d8 <hw_radio_enable_refill>:
void hw_radio_enable_refill(bool enable) {
 800d8d8:	b510      	push	{r4, lr}
 800d8da:	0004      	movs	r4, r0
  if(lora_mode) {
 800d8dc:	4b0a      	ldr	r3, [pc, #40]	; (800d908 <hw_radio_enable_refill+0x30>)
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d102      	bne.n	800d8ea <hw_radio_enable_refill+0x12>
    enable_refill = enable;
 800d8e4:	4b09      	ldr	r3, [pc, #36]	; (800d90c <hw_radio_enable_refill+0x34>)
 800d8e6:	7018      	strb	r0, [r3, #0]
}
 800d8e8:	bd10      	pop	{r4, pc}
    write_reg(REG_LR_MODEMCONFIG2, read_reg(REG_LR_MODEMCONFIG2) | (enable * RFLR_MODEMCONFIG2_TXCONTINUOUSMODE_ON));
 800d8ea:	201e      	movs	r0, #30
 800d8ec:	f7ff f8ec 	bl	800cac8 <read_reg>
 800d8f0:	b241      	sxtb	r1, r0
 800d8f2:	00e4      	lsls	r4, r4, #3
 800d8f4:	4321      	orrs	r1, r4
 800d8f6:	b2c9      	uxtb	r1, r1
 800d8f8:	201e      	movs	r0, #30
 800d8fa:	f7fe ff3f 	bl	800c77c <write_reg>
    hw_radio_set_opmode(HW_STATE_STANDBY);
 800d8fe:	2006      	movs	r0, #6
 800d900:	f7ff fcce 	bl	800d2a0 <hw_radio_set_opmode>
 800d904:	e7f0      	b.n	800d8e8 <hw_radio_enable_refill+0x10>
 800d906:	46c0      	nop			; (mov r8, r8)
 800d908:	200031bf 	.word	0x200031bf
 800d90c:	200031ba 	.word	0x200031ba

0800d910 <hw_radio_set_lora_mode>:
void hw_radio_set_lora_mode(uint32_t lora_bw, uint8_t lora_SF) {
 800d910:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d912:	46c6      	mov	lr, r8
 800d914:	b500      	push	{lr}
 800d916:	0007      	movs	r7, r0
 800d918:	4688      	mov	r8, r1
  hw_radio_set_opmode(HW_STATE_STANDBY); //device has to be in sleep or standby when configuring
 800d91a:	2006      	movs	r0, #6
 800d91c:	f7ff fcc0 	bl	800d2a0 <hw_radio_set_opmode>
  for(uint8_t bw_cnt = 0; bw_cnt < 10; bw_cnt++) {
 800d920:	2400      	movs	r4, #0
  uint32_t min_diff = UINT32_MAX;
 800d922:	2601      	movs	r6, #1
 800d924:	4276      	negs	r6, r6
  for(uint8_t bw_cnt = 0; bw_cnt < 10; bw_cnt++) {
 800d926:	e007      	b.n	800d938 <hw_radio_set_lora_mode+0x28>
      lora_closest_bw_index = bw_cnt;
 800d928:	4b18      	ldr	r3, [pc, #96]	; (800d98c <hw_radio_set_lora_mode+0x7c>)
 800d92a:	701c      	strb	r4, [r3, #0]
      min_diff = (uint32_t) abs(lora_bw - lora_available_bw[bw_cnt]);
 800d92c:	0028      	movs	r0, r5
 800d92e:	f006 ffb7 	bl	80148a0 <abs>
 800d932:	0006      	movs	r6, r0
  for(uint8_t bw_cnt = 0; bw_cnt < 10; bw_cnt++) {
 800d934:	3401      	adds	r4, #1
 800d936:	b2e4      	uxtb	r4, r4
 800d938:	2c09      	cmp	r4, #9
 800d93a:	d809      	bhi.n	800d950 <hw_radio_set_lora_mode+0x40>
    if((uint32_t) abs(lora_bw - lora_available_bw[bw_cnt]) < min_diff) {
 800d93c:	00a3      	lsls	r3, r4, #2
 800d93e:	4a14      	ldr	r2, [pc, #80]	; (800d990 <hw_radio_set_lora_mode+0x80>)
 800d940:	589d      	ldr	r5, [r3, r2]
 800d942:	1b7d      	subs	r5, r7, r5
 800d944:	0028      	movs	r0, r5
 800d946:	f006 ffab 	bl	80148a0 <abs>
 800d94a:	42b0      	cmp	r0, r6
 800d94c:	d2f2      	bcs.n	800d934 <hw_radio_set_lora_mode+0x24>
 800d94e:	e7eb      	b.n	800d928 <hw_radio_set_lora_mode+0x18>
  write_reg(REG_LR_MODEMCONFIG1, RFLR_MODEMCONFIG1_CODINGRATE_4_5 | RFLR_MODEMCONFIG1_IMPLICITHEADER_OFF | (lora_closest_bw_index << 4));
 800d950:	4b0e      	ldr	r3, [pc, #56]	; (800d98c <hw_radio_set_lora_mode+0x7c>)
 800d952:	7819      	ldrb	r1, [r3, #0]
 800d954:	0109      	lsls	r1, r1, #4
 800d956:	2302      	movs	r3, #2
 800d958:	4319      	orrs	r1, r3
 800d95a:	b249      	sxtb	r1, r1
 800d95c:	b2c9      	uxtb	r1, r1
 800d95e:	201d      	movs	r0, #29
 800d960:	f7fe ff0c 	bl	800c77c <write_reg>
  assert((lora_SF >= 7) && (lora_SF <= 12));
 800d964:	4643      	mov	r3, r8
 800d966:	3b07      	subs	r3, #7
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	2b05      	cmp	r3, #5
 800d96c:	d808      	bhi.n	800d980 <hw_radio_set_lora_mode+0x70>
  write_reg(REG_LR_MODEMCONFIG2, RFLR_MODEMCONFIG2_RXPAYLOADCRC_OFF | RFLR_MODEMCONFIG2_TXCONTINUOUSMODE_OFF | (lora_SF << 4));
 800d96e:	4643      	mov	r3, r8
 800d970:	0119      	lsls	r1, r3, #4
 800d972:	b2c9      	uxtb	r1, r1
 800d974:	201e      	movs	r0, #30
 800d976:	f7fe ff01 	bl	800c77c <write_reg>
}
 800d97a:	bc04      	pop	{r2}
 800d97c:	4690      	mov	r8, r2
 800d97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert((lora_SF >= 7) && (lora_SF <= 12));
 800d980:	4b04      	ldr	r3, [pc, #16]	; (800d994 <hw_radio_set_lora_mode+0x84>)
 800d982:	4a05      	ldr	r2, [pc, #20]	; (800d998 <hw_radio_set_lora_mode+0x88>)
 800d984:	4905      	ldr	r1, [pc, #20]	; (800d99c <hw_radio_set_lora_mode+0x8c>)
 800d986:	4806      	ldr	r0, [pc, #24]	; (800d9a0 <hw_radio_set_lora_mode+0x90>)
 800d988:	f7fa fe3a 	bl	8008600 <__assert_func>
 800d98c:	200031be 	.word	0x200031be
 800d990:	0801a1c4 	.word	0x0801a1c4
 800d994:	0801a10c 	.word	0x0801a10c
 800d998:	0801a1ac 	.word	0x0801a1ac
 800d99c:	00000543 	.word	0x00000543
 800d9a0:	08019f14 	.word	0x08019f14

0800d9a4 <hw_radio_get_rssi>:
}

/* startup time = TS_RE + TS_RSSI */
/* with TS_RE = rx_bw_startup_time */
/* with TS_RSSI = 2^(rssi_smoothing + 1) / (4 * RXBW[kHz]) [ms] */
int16_t hw_radio_get_rssi() {
 800d9a4:	b570      	push	{r4, r5, r6, lr}
    set_opmode(OPMODE_RX); //0.103 ms
 800d9a6:	2005      	movs	r0, #5
 800d9a8:	f7ff fb94 	bl	800d0d4 <set_opmode>
    update_active_times(HW_STATE_RX);
 800d9ac:	2003      	movs	r0, #3
 800d9ae:	f7fe fdf9 	bl	800c5a4 <update_active_times>
    hw_gpio_disable_interrupt(SX127x_DIO0_PIN); //3.7µs
 800d9b2:	4825      	ldr	r0, [pc, #148]	; (800da48 <hw_radio_get_rssi+0xa4>)
 800d9b4:	f7fd fa38 	bl	800ae28 <hw_gpio_disable_interrupt>
    hw_gpio_disable_interrupt(SX127x_DIO1_PIN);
 800d9b8:	4824      	ldr	r0, [pc, #144]	; (800da4c <hw_radio_get_rssi+0xa8>)
 800d9ba:	f7fd fa35 	bl	800ae28 <hw_gpio_disable_interrupt>
    if(!lora_mode) {
 800d9be:	4b24      	ldr	r3, [pc, #144]	; (800da50 <hw_radio_get_rssi+0xac>)
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d11b      	bne.n	800d9fe <hw_radio_get_rssi+0x5a>
      hw_busy_wait(rx_bw_startup_time[rx_bw_number] + (rssi_smoothing_full * 1000)/(4 * rx_bw_khz));
 800d9c6:	4b23      	ldr	r3, [pc, #140]	; (800da54 <hw_radio_get_rssi+0xb0>)
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	005b      	lsls	r3, r3, #1
 800d9cc:	4a22      	ldr	r2, [pc, #136]	; (800da58 <hw_radio_get_rssi+0xb4>)
 800d9ce:	5a9c      	ldrh	r4, [r3, r2]
 800d9d0:	4b22      	ldr	r3, [pc, #136]	; (800da5c <hw_radio_get_rssi+0xb8>)
 800d9d2:	781a      	ldrb	r2, [r3, #0]
 800d9d4:	0150      	lsls	r0, r2, #5
 800d9d6:	1a80      	subs	r0, r0, r2
 800d9d8:	0080      	lsls	r0, r0, #2
 800d9da:	1880      	adds	r0, r0, r2
 800d9dc:	00c0      	lsls	r0, r0, #3
 800d9de:	4b20      	ldr	r3, [pc, #128]	; (800da60 <hw_radio_get_rssi+0xbc>)
 800d9e0:	7819      	ldrb	r1, [r3, #0]
 800d9e2:	0089      	lsls	r1, r1, #2
 800d9e4:	f004 f91e 	bl	8011c24 <__divsi3>
 800d9e8:	1820      	adds	r0, r4, r0
 800d9ea:	b200      	sxth	r0, r0
 800d9ec:	f7fe f902 	bl	800bbf4 <hw_busy_wait>
      return (- read_reg(REG_RSSIVALUE) >> 1);
 800d9f0:	2011      	movs	r0, #17
 800d9f2:	f7ff f869 	bl	800cac8 <read_reg>
 800d9f6:	4240      	negs	r0, r0
 800d9f8:	1040      	asrs	r0, r0, #1
 800d9fa:	b200      	sxth	r0, r0
    } else {
      hw_busy_wait(rx_bw_startup_time[lora_bw_indexes[lora_closest_bw_index]] + ((rssi_smoothing_full * 1000)/(4 * lora_available_bw[lora_closest_bw_index] / 1000)));
      return ( - 157 + read_reg(REG_LR_RSSIVALUE));
    }
}
 800d9fc:	bd70      	pop	{r4, r5, r6, pc}
      hw_busy_wait(rx_bw_startup_time[lora_bw_indexes[lora_closest_bw_index]] + ((rssi_smoothing_full * 1000)/(4 * lora_available_bw[lora_closest_bw_index] / 1000)));
 800d9fe:	4b19      	ldr	r3, [pc, #100]	; (800da64 <hw_radio_get_rssi+0xc0>)
 800da00:	781a      	ldrb	r2, [r3, #0]
 800da02:	4b19      	ldr	r3, [pc, #100]	; (800da68 <hw_radio_get_rssi+0xc4>)
 800da04:	5c9b      	ldrb	r3, [r3, r2]
 800da06:	005b      	lsls	r3, r3, #1
 800da08:	4913      	ldr	r1, [pc, #76]	; (800da58 <hw_radio_get_rssi+0xb4>)
 800da0a:	5a5d      	ldrh	r5, [r3, r1]
 800da0c:	4b13      	ldr	r3, [pc, #76]	; (800da5c <hw_radio_get_rssi+0xb8>)
 800da0e:	7819      	ldrb	r1, [r3, #0]
 800da10:	014c      	lsls	r4, r1, #5
 800da12:	1a64      	subs	r4, r4, r1
 800da14:	00a4      	lsls	r4, r4, #2
 800da16:	1864      	adds	r4, r4, r1
 800da18:	00e4      	lsls	r4, r4, #3
 800da1a:	0092      	lsls	r2, r2, #2
 800da1c:	4b13      	ldr	r3, [pc, #76]	; (800da6c <hw_radio_get_rssi+0xc8>)
 800da1e:	58d0      	ldr	r0, [r2, r3]
 800da20:	0080      	lsls	r0, r0, #2
 800da22:	21fa      	movs	r1, #250	; 0xfa
 800da24:	0089      	lsls	r1, r1, #2
 800da26:	f004 f873 	bl	8011b10 <__udivsi3>
 800da2a:	0001      	movs	r1, r0
 800da2c:	0020      	movs	r0, r4
 800da2e:	f004 f86f 	bl	8011b10 <__udivsi3>
 800da32:	1828      	adds	r0, r5, r0
 800da34:	b200      	sxth	r0, r0
 800da36:	f7fe f8dd 	bl	800bbf4 <hw_busy_wait>
      return ( - 157 + read_reg(REG_LR_RSSIVALUE));
 800da3a:	201b      	movs	r0, #27
 800da3c:	f7ff f844 	bl	800cac8 <read_reg>
 800da40:	b280      	uxth	r0, r0
 800da42:	389d      	subs	r0, #157	; 0x9d
 800da44:	b200      	sxth	r0, r0
 800da46:	e7d9      	b.n	800d9fc <hw_radio_get_rssi+0x58>
 800da48:	50000404 	.word	0x50000404
 800da4c:	50000401 	.word	0x50000401
 800da50:	200031bf 	.word	0x200031bf
 800da54:	20000598 	.word	0x20000598
 800da58:	0801a1f8 	.word	0x0801a1f8
 800da5c:	200031ca 	.word	0x200031ca
 800da60:	200031d0 	.word	0x200031d0
 800da64:	200031be 	.word	0x200031be
 800da68:	0801a1ec 	.word	0x0801a1ec
 800da6c:	0801a1c4 	.word	0x0801a1c4

0800da70 <getSBoxValue>:
/*****************************************************************************/
/* Private functions:                                                        */
/*****************************************************************************/
static uint8_t getSBoxValue(uint8_t num)
{
    return sbox[num];
 800da70:	4b01      	ldr	r3, [pc, #4]	; (800da78 <getSBoxValue+0x8>)
 800da72:	5c18      	ldrb	r0, [r3, r0]
}
 800da74:	4770      	bx	lr
 800da76:	46c0      	nop			; (mov r8, r8)
 800da78:	0801a324 	.word	0x0801a324

0800da7c <KeyExpansion>:
    return rsbox[num];
}

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(void)
{
 800da7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da7e:	46ce      	mov	lr, r9
 800da80:	4647      	mov	r7, r8
 800da82:	b580      	push	{r7, lr}
 800da84:	b083      	sub	sp, #12
    uint32_t i, j, k;
    uint8_t tempa[4]; // Used for the column/row operations

    // The first round key is the key itself.
    for (i = 0; i < Nk; ++i)
 800da86:	2400      	movs	r4, #0
 800da88:	e00f      	b.n	800daaa <KeyExpansion+0x2e>
    {
        RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 800da8a:	4b2f      	ldr	r3, [pc, #188]	; (800db48 <KeyExpansion+0xcc>)
 800da8c:	6819      	ldr	r1, [r3, #0]
 800da8e:	00a3      	lsls	r3, r4, #2
 800da90:	5cc8      	ldrb	r0, [r1, r3]
 800da92:	4a2e      	ldr	r2, [pc, #184]	; (800db4c <KeyExpansion+0xd0>)
 800da94:	54d0      	strb	r0, [r2, r3]
        RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 800da96:	1c58      	adds	r0, r3, #1
 800da98:	5c0d      	ldrb	r5, [r1, r0]
 800da9a:	5415      	strb	r5, [r2, r0]
        RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 800da9c:	1c98      	adds	r0, r3, #2
 800da9e:	5c0d      	ldrb	r5, [r1, r0]
 800daa0:	5415      	strb	r5, [r2, r0]
        RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 800daa2:	3303      	adds	r3, #3
 800daa4:	5cc9      	ldrb	r1, [r1, r3]
 800daa6:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < Nk; ++i)
 800daa8:	3401      	adds	r4, #1
 800daaa:	2c03      	cmp	r4, #3
 800daac:	d9ed      	bls.n	800da8a <KeyExpansion+0xe>
 800daae:	e042      	b.n	800db36 <KeyExpansion+0xba>
    // All other round keys are found from the previous round keys.
    for (; (i < (Nb * (Nr + 1))); ++i)
    {
        for (j = 0; j < 4; ++j)
        {
            tempa[j] = RoundKey[(i-1) * 4 + j];
 800dab0:	1e63      	subs	r3, r4, #1
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	189b      	adds	r3, r3, r2
 800dab6:	4925      	ldr	r1, [pc, #148]	; (800db4c <KeyExpansion+0xd0>)
 800dab8:	5cc9      	ldrb	r1, [r1, r3]
 800daba:	ab01      	add	r3, sp, #4
 800dabc:	5499      	strb	r1, [r3, r2]
        for (j = 0; j < 4; ++j)
 800dabe:	3201      	adds	r2, #1
 800dac0:	2a03      	cmp	r2, #3
 800dac2:	d9f5      	bls.n	800dab0 <KeyExpansion+0x34>
        }
        if (i % Nk == 0)
 800dac4:	07a3      	lsls	r3, r4, #30
 800dac6:	d11a      	bne.n	800dafe <KeyExpansion+0x82>
            // This function rotates the 4 bytes in a word to the left once.
            // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

            // Function RotWord()
            {
                k = tempa[0];
 800dac8:	ad01      	add	r5, sp, #4
 800daca:	782f      	ldrb	r7, [r5, #0]
                tempa[0] = tempa[1];
 800dacc:	7868      	ldrb	r0, [r5, #1]
                tempa[1] = tempa[2];
 800dace:	78ab      	ldrb	r3, [r5, #2]
 800dad0:	4699      	mov	r9, r3
                tempa[2] = tempa[3];
 800dad2:	78eb      	ldrb	r3, [r5, #3]
 800dad4:	4698      	mov	r8, r3
            // SubWord() is a function that takes a four-byte input word and
            // applies the S-box to each of the four bytes to produce an output word.

            // Function Subword()
            {
                tempa[0] = getSBoxValue(tempa[0]);
 800dad6:	f7ff ffcb 	bl	800da70 <getSBoxValue>
 800dada:	0006      	movs	r6, r0
                tempa[1] = getSBoxValue(tempa[1]);
 800dadc:	4648      	mov	r0, r9
 800dade:	f7ff ffc7 	bl	800da70 <getSBoxValue>
 800dae2:	7068      	strb	r0, [r5, #1]
                tempa[2] = getSBoxValue(tempa[2]);
 800dae4:	4640      	mov	r0, r8
 800dae6:	f7ff ffc3 	bl	800da70 <getSBoxValue>
 800daea:	70a8      	strb	r0, [r5, #2]
                tempa[3] = getSBoxValue(tempa[3]);
 800daec:	0038      	movs	r0, r7
 800daee:	f7ff ffbf 	bl	800da70 <getSBoxValue>
 800daf2:	70e8      	strb	r0, [r5, #3]
            }

            tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 800daf4:	08a3      	lsrs	r3, r4, #2
 800daf6:	4a16      	ldr	r2, [pc, #88]	; (800db50 <KeyExpansion+0xd4>)
 800daf8:	5cd0      	ldrb	r0, [r2, r3]
 800dafa:	4046      	eors	r6, r0
 800dafc:	702e      	strb	r6, [r5, #0]
                tempa[1] = getSBoxValue(tempa[1]);
                tempa[2] = getSBoxValue(tempa[2]);
                tempa[3] = getSBoxValue(tempa[3]);
            }
        }
        RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 800dafe:	1f22      	subs	r2, r4, #4
 800db00:	0092      	lsls	r2, r2, #2
 800db02:	4b12      	ldr	r3, [pc, #72]	; (800db4c <KeyExpansion+0xd0>)
 800db04:	5c9d      	ldrb	r5, [r3, r2]
 800db06:	a801      	add	r0, sp, #4
 800db08:	7806      	ldrb	r6, [r0, #0]
 800db0a:	00a1      	lsls	r1, r4, #2
 800db0c:	4075      	eors	r5, r6
 800db0e:	545d      	strb	r5, [r3, r1]
        RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 800db10:	1c55      	adds	r5, r2, #1
 800db12:	5d5d      	ldrb	r5, [r3, r5]
 800db14:	7847      	ldrb	r7, [r0, #1]
 800db16:	1c4e      	adds	r6, r1, #1
 800db18:	407d      	eors	r5, r7
 800db1a:	559d      	strb	r5, [r3, r6]
        RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 800db1c:	1c95      	adds	r5, r2, #2
 800db1e:	5d5d      	ldrb	r5, [r3, r5]
 800db20:	7887      	ldrb	r7, [r0, #2]
 800db22:	1c8e      	adds	r6, r1, #2
 800db24:	407d      	eors	r5, r7
 800db26:	559d      	strb	r5, [r3, r6]
        RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 800db28:	3203      	adds	r2, #3
 800db2a:	5c9d      	ldrb	r5, [r3, r2]
 800db2c:	78c0      	ldrb	r0, [r0, #3]
 800db2e:	1cca      	adds	r2, r1, #3
 800db30:	4068      	eors	r0, r5
 800db32:	5498      	strb	r0, [r3, r2]
    for (; (i < (Nb * (Nr + 1))); ++i)
 800db34:	3401      	adds	r4, #1
 800db36:	2c2b      	cmp	r4, #43	; 0x2b
 800db38:	d801      	bhi.n	800db3e <KeyExpansion+0xc2>
        for (j = 0; j < 4; ++j)
 800db3a:	2200      	movs	r2, #0
 800db3c:	e7c0      	b.n	800dac0 <KeyExpansion+0x44>
    }
}
 800db3e:	b003      	add	sp, #12
 800db40:	bc0c      	pop	{r2, r3}
 800db42:	4690      	mov	r8, r2
 800db44:	4699      	mov	r9, r3
 800db46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db48:	20003218 	.word	0x20003218
 800db4c:	2000321c 	.word	0x2000321c
 800db50:	0801a224 	.word	0x0801a224

0800db54 <AddRoundKey>:

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round)
{
 800db54:	b530      	push	{r4, r5, lr}
    uint8_t i, j;

    for (i = 0; i < 4; ++i)
 800db56:	2500      	movs	r5, #0
 800db58:	e012      	b.n	800db80 <AddRoundKey+0x2c>
    {
        for (j = 0; j < 4; ++j)
        {
            (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 800db5a:	4a0c      	ldr	r2, [pc, #48]	; (800db8c <AddRoundKey+0x38>)
 800db5c:	6811      	ldr	r1, [r2, #0]
 800db5e:	0082      	lsls	r2, r0, #2
 800db60:	1952      	adds	r2, r2, r5
 800db62:	0092      	lsls	r2, r2, #2
 800db64:	189a      	adds	r2, r3, r2
 800db66:	4c0a      	ldr	r4, [pc, #40]	; (800db90 <AddRoundKey+0x3c>)
 800db68:	5ca4      	ldrb	r4, [r4, r2]
 800db6a:	00aa      	lsls	r2, r5, #2
 800db6c:	188a      	adds	r2, r1, r2
 800db6e:	5cd1      	ldrb	r1, [r2, r3]
 800db70:	4061      	eors	r1, r4
 800db72:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < 4; ++j)
 800db74:	3301      	adds	r3, #1
 800db76:	b2db      	uxtb	r3, r3
 800db78:	2b03      	cmp	r3, #3
 800db7a:	d9ee      	bls.n	800db5a <AddRoundKey+0x6>
    for (i = 0; i < 4; ++i)
 800db7c:	3501      	adds	r5, #1
 800db7e:	b2ed      	uxtb	r5, r5
 800db80:	2d03      	cmp	r5, #3
 800db82:	d801      	bhi.n	800db88 <AddRoundKey+0x34>
        for (j = 0; j < 4; ++j)
 800db84:	2300      	movs	r3, #0
 800db86:	e7f7      	b.n	800db78 <AddRoundKey+0x24>
        }
    }
}
 800db88:	bd30      	pop	{r4, r5, pc}
 800db8a:	46c0      	nop			; (mov r8, r8)
 800db8c:	200032cc 	.word	0x200032cc
 800db90:	2000321c 	.word	0x2000321c

0800db94 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(void)
{
 800db94:	b570      	push	{r4, r5, r6, lr}
    uint8_t i, j;

    for (i = 0; i < 4; ++i)
 800db96:	2600      	movs	r6, #0
 800db98:	e00d      	b.n	800dbb6 <SubBytes+0x22>
    {
        for (j = 0; j < 4; ++j)
        {
            (*state)[j][i] = getSBoxValue((*state)[j][i]);
 800db9a:	4b09      	ldr	r3, [pc, #36]	; (800dbc0 <SubBytes+0x2c>)
 800db9c:	681d      	ldr	r5, [r3, #0]
 800db9e:	00a3      	lsls	r3, r4, #2
 800dba0:	18ed      	adds	r5, r5, r3
 800dba2:	5da8      	ldrb	r0, [r5, r6]
 800dba4:	f7ff ff64 	bl	800da70 <getSBoxValue>
 800dba8:	55a8      	strb	r0, [r5, r6]
        for (j = 0; j < 4; ++j)
 800dbaa:	3401      	adds	r4, #1
 800dbac:	b2e4      	uxtb	r4, r4
 800dbae:	2c03      	cmp	r4, #3
 800dbb0:	d9f3      	bls.n	800db9a <SubBytes+0x6>
    for (i = 0; i < 4; ++i)
 800dbb2:	3601      	adds	r6, #1
 800dbb4:	b2f6      	uxtb	r6, r6
 800dbb6:	2e03      	cmp	r6, #3
 800dbb8:	d801      	bhi.n	800dbbe <SubBytes+0x2a>
        for (j = 0; j < 4; ++j)
 800dbba:	2400      	movs	r4, #0
 800dbbc:	e7f7      	b.n	800dbae <SubBytes+0x1a>
        }
    }
}
 800dbbe:	bd70      	pop	{r4, r5, r6, pc}
 800dbc0:	200032cc 	.word	0x200032cc

0800dbc4 <ShiftRows>:
static void ShiftRows(void)
{
    uint8_t temp;

    // Rotate first row 1 columns to left
    temp           = (*state)[0][1];
 800dbc4:	4b0d      	ldr	r3, [pc, #52]	; (800dbfc <ShiftRows+0x38>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	785a      	ldrb	r2, [r3, #1]
    (*state)[0][1] = (*state)[1][1];
 800dbca:	7959      	ldrb	r1, [r3, #5]
 800dbcc:	7059      	strb	r1, [r3, #1]
    (*state)[1][1] = (*state)[2][1];
 800dbce:	7a59      	ldrb	r1, [r3, #9]
 800dbd0:	7159      	strb	r1, [r3, #5]
    (*state)[2][1] = (*state)[3][1];
 800dbd2:	7b59      	ldrb	r1, [r3, #13]
 800dbd4:	7259      	strb	r1, [r3, #9]
    (*state)[3][1] = temp;
 800dbd6:	735a      	strb	r2, [r3, #13]

    // Rotate second row 2 columns to left
    temp           = (*state)[0][2];
 800dbd8:	789a      	ldrb	r2, [r3, #2]
    (*state)[0][2] = (*state)[2][2];
 800dbda:	7a99      	ldrb	r1, [r3, #10]
 800dbdc:	7099      	strb	r1, [r3, #2]
    (*state)[2][2] = temp;
 800dbde:	729a      	strb	r2, [r3, #10]

    temp       = (*state)[1][2];
 800dbe0:	799a      	ldrb	r2, [r3, #6]
    (*state)[1][2] = (*state)[3][2];
 800dbe2:	7b99      	ldrb	r1, [r3, #14]
 800dbe4:	7199      	strb	r1, [r3, #6]
    (*state)[3][2] = temp;
 800dbe6:	739a      	strb	r2, [r3, #14]

    // Rotate third row 3 columns to left
    temp       = (*state)[0][3];
 800dbe8:	78da      	ldrb	r2, [r3, #3]
    (*state)[0][3] = (*state)[3][3];
 800dbea:	7bd9      	ldrb	r1, [r3, #15]
 800dbec:	70d9      	strb	r1, [r3, #3]
    (*state)[3][3] = (*state)[2][3];
 800dbee:	7ad9      	ldrb	r1, [r3, #11]
 800dbf0:	73d9      	strb	r1, [r3, #15]
    (*state)[2][3] = (*state)[1][3];
 800dbf2:	79d9      	ldrb	r1, [r3, #7]
 800dbf4:	72d9      	strb	r1, [r3, #11]
    (*state)[1][3] = temp;
 800dbf6:	71da      	strb	r2, [r3, #7]
}
 800dbf8:	4770      	bx	lr
 800dbfa:	46c0      	nop			; (mov r8, r8)
 800dbfc:	200032cc 	.word	0x200032cc

0800dc00 <xtime>:

static uint8_t xtime(uint8_t x)
{
    return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800dc00:	0043      	lsls	r3, r0, #1
 800dc02:	09c0      	lsrs	r0, r0, #7
 800dc04:	0042      	lsls	r2, r0, #1
 800dc06:	1880      	adds	r0, r0, r2
 800dc08:	00c2      	lsls	r2, r0, #3
 800dc0a:	1880      	adds	r0, r0, r2
 800dc0c:	4058      	eors	r0, r3
 800dc0e:	b2c0      	uxtb	r0, r0
}
 800dc10:	4770      	bx	lr
	...

0800dc14 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(void)
{
 800dc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc16:	46ce      	mov	lr, r9
 800dc18:	4647      	mov	r7, r8
 800dc1a:	b580      	push	{r7, lr}
    uint8_t i;
    uint8_t Tmp, Tm, t;

    for (i = 0; i < 4; ++i)
 800dc1c:	2600      	movs	r6, #0
 800dc1e:	e036      	b.n	800dc8e <MixColumns+0x7a>
    {
        t   = (*state)[i][0];
 800dc20:	4b1e      	ldr	r3, [pc, #120]	; (800dc9c <MixColumns+0x88>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4698      	mov	r8, r3
 800dc26:	00b3      	lsls	r3, r6, #2
 800dc28:	4699      	mov	r9, r3
 800dc2a:	4643      	mov	r3, r8
 800dc2c:	464a      	mov	r2, r9
 800dc2e:	5cd7      	ldrb	r7, [r2, r3]
        Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 800dc30:	4644      	mov	r4, r8
 800dc32:	444c      	add	r4, r9
 800dc34:	7860      	ldrb	r0, [r4, #1]
 800dc36:	4078      	eors	r0, r7
 800dc38:	78a5      	ldrb	r5, [r4, #2]
 800dc3a:	78e3      	ldrb	r3, [r4, #3]
 800dc3c:	4045      	eors	r5, r0
 800dc3e:	405d      	eors	r5, r3
        Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 800dc40:	f7ff ffde 	bl	800dc00 <xtime>
 800dc44:	4068      	eors	r0, r5
 800dc46:	4078      	eors	r0, r7
 800dc48:	4643      	mov	r3, r8
 800dc4a:	464a      	mov	r2, r9
 800dc4c:	54d0      	strb	r0, [r2, r3]
        Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 800dc4e:	7863      	ldrb	r3, [r4, #1]
 800dc50:	4698      	mov	r8, r3
 800dc52:	78a0      	ldrb	r0, [r4, #2]
 800dc54:	4058      	eors	r0, r3
 800dc56:	f7ff ffd3 	bl	800dc00 <xtime>
 800dc5a:	4068      	eors	r0, r5
 800dc5c:	4643      	mov	r3, r8
 800dc5e:	4058      	eors	r0, r3
 800dc60:	7060      	strb	r0, [r4, #1]
        Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 800dc62:	78a3      	ldrb	r3, [r4, #2]
 800dc64:	4698      	mov	r8, r3
 800dc66:	78e0      	ldrb	r0, [r4, #3]
 800dc68:	4058      	eors	r0, r3
 800dc6a:	f7ff ffc9 	bl	800dc00 <xtime>
 800dc6e:	4068      	eors	r0, r5
 800dc70:	4643      	mov	r3, r8
 800dc72:	4058      	eors	r0, r3
 800dc74:	70a0      	strb	r0, [r4, #2]
        Tm  = (*state)[i][3] ^ t ;        Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 800dc76:	78e3      	ldrb	r3, [r4, #3]
 800dc78:	4698      	mov	r8, r3
 800dc7a:	0018      	movs	r0, r3
 800dc7c:	4078      	eors	r0, r7
 800dc7e:	f7ff ffbf 	bl	800dc00 <xtime>
 800dc82:	4045      	eors	r5, r0
 800dc84:	4643      	mov	r3, r8
 800dc86:	405d      	eors	r5, r3
 800dc88:	70e5      	strb	r5, [r4, #3]
    for (i = 0; i < 4; ++i)
 800dc8a:	3601      	adds	r6, #1
 800dc8c:	b2f6      	uxtb	r6, r6
 800dc8e:	2e03      	cmp	r6, #3
 800dc90:	d9c6      	bls.n	800dc20 <MixColumns+0xc>
    }
}
 800dc92:	bc0c      	pop	{r2, r3}
 800dc94:	4690      	mov	r8, r2
 800dc96:	4699      	mov	r9, r3
 800dc98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc9a:	46c0      	nop			; (mov r8, r8)
 800dc9c:	200032cc 	.word	0x200032cc

0800dca0 <Cipher>:
}


// Cipher is the main function that encrypts the PlainText.
static void Cipher(void)
{
 800dca0:	b510      	push	{r4, lr}
    uint8_t round = 0;

    // Add the First round key to the state before starting the rounds.
    AddRoundKey(0);
 800dca2:	2000      	movs	r0, #0
 800dca4:	f7ff ff56 	bl	800db54 <AddRoundKey>

    // There will be Nr rounds.
    // The first Nr-1 rounds are identical.
    // These Nr-1 rounds are executed in the loop below.
    for (round = 1; round < Nr; ++round)
 800dca8:	2401      	movs	r4, #1
 800dcaa:	e00a      	b.n	800dcc2 <Cipher+0x22>
    {
      SubBytes();
 800dcac:	f7ff ff72 	bl	800db94 <SubBytes>
      ShiftRows();
 800dcb0:	f7ff ff88 	bl	800dbc4 <ShiftRows>
      MixColumns();
 800dcb4:	f7ff ffae 	bl	800dc14 <MixColumns>
      AddRoundKey(round);
 800dcb8:	0020      	movs	r0, r4
 800dcba:	f7ff ff4b 	bl	800db54 <AddRoundKey>
    for (round = 1; round < Nr; ++round)
 800dcbe:	3401      	adds	r4, #1
 800dcc0:	b2e4      	uxtb	r4, r4
 800dcc2:	2c09      	cmp	r4, #9
 800dcc4:	d9f2      	bls.n	800dcac <Cipher+0xc>
    }

    // The last round is given below.
    // The MixColumns function is not here in the last round.
    SubBytes();
 800dcc6:	f7ff ff65 	bl	800db94 <SubBytes>
    ShiftRows();
 800dcca:	f7ff ff7b 	bl	800dbc4 <ShiftRows>
    AddRoundKey(Nr);
 800dcce:	200a      	movs	r0, #10
 800dcd0:	f7ff ff40 	bl	800db54 <AddRoundKey>
}
 800dcd4:	bd10      	pop	{r4, pc}

0800dcd6 <BlockCopy>:

static void BlockCopy(uint8_t *output, uint8_t *input)
{
    uint8_t i;

    for (i = 0; i < KEYLEN; ++i)
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	2b0f      	cmp	r3, #15
 800dcda:	d804      	bhi.n	800dce6 <BlockCopy+0x10>
    {
      output[i] = input[i];
 800dcdc:	5cca      	ldrb	r2, [r1, r3]
 800dcde:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < KEYLEN; ++i)
 800dce0:	3301      	adds	r3, #1
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	e7f8      	b.n	800dcd8 <BlockCopy+0x2>
    }
}
 800dce6:	4770      	bx	lr

0800dce8 <AES128_init>:
/*****************************************************************************/
/* Public functions:                                                         */
/*****************************************************************************/

void AES128_init(const uint8_t *key)
{
 800dce8:	b510      	push	{r4, lr}
 800dcea:	0001      	movs	r1, r0
    memcpy(AES128_key, key, KEYLEN);
 800dcec:	4c04      	ldr	r4, [pc, #16]	; (800dd00 <AES128_init+0x18>)
 800dcee:	2210      	movs	r2, #16
 800dcf0:	0020      	movs	r0, r4
 800dcf2:	f007 f86d 	bl	8014dd0 <memcpy>
    Key = AES128_key;
 800dcf6:	4b03      	ldr	r3, [pc, #12]	; (800dd04 <AES128_init+0x1c>)
 800dcf8:	601c      	str	r4, [r3, #0]
    KeyExpansion();
 800dcfa:	f7ff febf 	bl	800da7c <KeyExpansion>
}
 800dcfe:	bd10      	pop	{r4, pc}
 800dd00:	20003208 	.word	0x20003208
 800dd04:	20003218 	.word	0x20003218

0800dd08 <AES128_ECB_encrypt>:

#if defined(ECB) && ECB


void AES128_ECB_encrypt(uint8_t *input, uint8_t *output)
{
 800dd08:	b510      	push	{r4, lr}
 800dd0a:	000c      	movs	r4, r1
     * The functions AES128_ECB_encrypt() expects inputs of 128 bit length = 16 bytes.
     */
    hw_aes_ecb128(output, input, 16, Key, true);
#else
    // Copy input to output, and work in-memory on output
    BlockCopy(output, input);
 800dd0c:	0001      	movs	r1, r0
 800dd0e:	0020      	movs	r0, r4
 800dd10:	f7ff ffe1 	bl	800dcd6 <BlockCopy>
    state = (state_t *)output;
 800dd14:	4b02      	ldr	r3, [pc, #8]	; (800dd20 <AES128_ECB_encrypt+0x18>)
 800dd16:	601c      	str	r4, [r3, #0]

    // The next function call encrypts the PlainText with the Key using AES algorithm.
    Cipher();
 800dd18:	f7ff ffc2 	bl	800dca0 <Cipher>
#endif // HAL_SUPPORT_HW_AES
}
 800dd1c:	bd10      	pop	{r4, pc}
 800dd1e:	46c0      	nop			; (mov r8, r8)
 800dd20:	200032cc 	.word	0x200032cc

0800dd24 <AES128_CTR_encrypt>:
 * operation to the same length as the final plaintext block, returning
 * the most significant bits.
 */

void AES128_CTR_encrypt(uint8_t *output, uint8_t *input, uint32_t length, uint8_t *ctr_blk)
{
 800dd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd26:	46de      	mov	lr, fp
 800dd28:	4657      	mov	r7, sl
 800dd2a:	464e      	mov	r6, r9
 800dd2c:	4645      	mov	r5, r8
 800dd2e:	b5e0      	push	{r5, r6, r7, lr}
 800dd30:	b085      	sub	sp, #20
 800dd32:	0006      	movs	r6, r0
 800dd34:	4688      	mov	r8, r1
 800dd36:	4692      	mov	sl, r2
 800dd38:	001f      	movs	r7, r3
#ifdef HAL_SUPPORT_HW_AES
    // Hardware AES support for CTR through the low level peripheral library EMLIB
    hw_aes_ctr128(output, input, length, Key, ctr_blk);
#else
    uintptr_t i, j;
    uint8_t remainders = length % KEYLEN; /* Remaining bytes in the last non-full block */
 800dd3a:	230f      	movs	r3, #15
 800dd3c:	401a      	ands	r2, r3
 800dd3e:	4693      	mov	fp, r2
    uint8_t ctr[KEYLEN];

    BlockCopy(ctr, ctr_blk);
 800dd40:	0039      	movs	r1, r7
 800dd42:	4668      	mov	r0, sp
 800dd44:	f7ff ffc7 	bl	800dcd6 <BlockCopy>
    state = (state_t *)ctr;
 800dd48:	4b22      	ldr	r3, [pc, #136]	; (800ddd4 <AES128_CTR_encrypt+0xb0>)
 800dd4a:	466a      	mov	r2, sp
 800dd4c:	601a      	str	r2, [r3, #0]

    for(i = KEYLEN; i <= length; i += KEYLEN)
 800dd4e:	2310      	movs	r3, #16
 800dd50:	4699      	mov	r9, r3
 800dd52:	e015      	b.n	800dd80 <AES128_CTR_encrypt+0x5c>
        BlockCopy(output, input);
        for (j = 0; j < KEYLEN; j++)
            output[j] ^= ctr[j];

        /* Increment block counter */
        for (j = 0; j < KEYLEN; j++)
 800dd54:	2200      	movs	r2, #0
 800dd56:	2a0f      	cmp	r2, #15
 800dd58:	d807      	bhi.n	800dd6a <AES128_CTR_encrypt+0x46>
        {
            ctr_blk[j]++;
 800dd5a:	5cbb      	ldrb	r3, [r7, r2]
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	54bb      	strb	r3, [r7, r2]
            if (ctr_blk[j])
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d101      	bne.n	800dd6a <AES128_CTR_encrypt+0x46>
        for (j = 0; j < KEYLEN; j++)
 800dd66:	3201      	adds	r2, #1
 800dd68:	e7f5      	b.n	800dd56 <AES128_CTR_encrypt+0x32>
                break;
        }

        input += KEYLEN;
 800dd6a:	2310      	movs	r3, #16
 800dd6c:	469c      	mov	ip, r3
 800dd6e:	44e0      	add	r8, ip
        output += KEYLEN;
 800dd70:	3610      	adds	r6, #16
        BlockCopy(ctr, ctr_blk);
 800dd72:	0039      	movs	r1, r7
 800dd74:	4668      	mov	r0, sp
 800dd76:	f7ff ffae 	bl	800dcd6 <BlockCopy>
    for(i = KEYLEN; i <= length; i += KEYLEN)
 800dd7a:	2310      	movs	r3, #16
 800dd7c:	469c      	mov	ip, r3
 800dd7e:	44e1      	add	r9, ip
 800dd80:	45d1      	cmp	r9, sl
 800dd82:	d80f      	bhi.n	800dda4 <AES128_CTR_encrypt+0x80>
        Cipher();
 800dd84:	f7ff ff8c 	bl	800dca0 <Cipher>
        BlockCopy(output, input);
 800dd88:	4641      	mov	r1, r8
 800dd8a:	0030      	movs	r0, r6
 800dd8c:	f7ff ffa3 	bl	800dcd6 <BlockCopy>
        for (j = 0; j < KEYLEN; j++)
 800dd90:	2400      	movs	r4, #0
 800dd92:	2c0f      	cmp	r4, #15
 800dd94:	d8de      	bhi.n	800dd54 <AES128_CTR_encrypt+0x30>
            output[j] ^= ctr[j];
 800dd96:	466b      	mov	r3, sp
 800dd98:	5d1d      	ldrb	r5, [r3, r4]
 800dd9a:	5d33      	ldrb	r3, [r6, r4]
 800dd9c:	405d      	eors	r5, r3
 800dd9e:	5535      	strb	r5, [r6, r4]
        for (j = 0; j < KEYLEN; j++)
 800dda0:	3401      	adds	r4, #1
 800dda2:	e7f6      	b.n	800dd92 <AES128_CTR_encrypt+0x6e>
    }

    if(remainders)
 800dda4:	465b      	mov	r3, fp
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d106      	bne.n	800ddb8 <AES128_CTR_encrypt+0x94>
        Cipher();
        for (i=0; i < remainders; ++i)
            output[i] = input[i] ^ ctr[i];
    }
#endif
}
 800ddaa:	b005      	add	sp, #20
 800ddac:	bc3c      	pop	{r2, r3, r4, r5}
 800ddae:	4690      	mov	r8, r2
 800ddb0:	4699      	mov	r9, r3
 800ddb2:	46a2      	mov	sl, r4
 800ddb4:	46ab      	mov	fp, r5
 800ddb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Cipher();
 800ddb8:	f7ff ff72 	bl	800dca0 <Cipher>
        for (i=0; i < remainders; ++i)
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	e006      	b.n	800ddce <AES128_CTR_encrypt+0xaa>
            output[i] = input[i] ^ ctr[i];
 800ddc0:	4642      	mov	r2, r8
 800ddc2:	5cd2      	ldrb	r2, [r2, r3]
 800ddc4:	4669      	mov	r1, sp
 800ddc6:	5cc9      	ldrb	r1, [r1, r3]
 800ddc8:	404a      	eors	r2, r1
 800ddca:	54f2      	strb	r2, [r6, r3]
        for (i=0; i < remainders; ++i)
 800ddcc:	3301      	adds	r3, #1
 800ddce:	459b      	cmp	fp, r3
 800ddd0:	d8f6      	bhi.n	800ddc0 <AES128_CTR_encrypt+0x9c>
 800ddd2:	e7ea      	b.n	800ddaa <AES128_CTR_encrypt+0x86>
 800ddd4:	200032cc 	.word	0x200032cc

0800ddd8 <xor_aes_block>:
 * Counter with CBC-MAC (CCM) is a generic authenticated encryption
 * block cipher mode
 */

static void xor_aes_block(uint8_t *dst, const uint8_t *src)
{
 800ddd8:	b510      	push	{r4, lr}
    uint8_t i;

    for (i = 0; i < AES_BLOCK_SIZE; ++i)
 800ddda:	2300      	movs	r3, #0
 800dddc:	2b0f      	cmp	r3, #15
 800ddde:	d806      	bhi.n	800ddee <xor_aes_block+0x16>
    {
        dst[i] ^= src[i];
 800dde0:	5cca      	ldrb	r2, [r1, r3]
 800dde2:	5cc4      	ldrb	r4, [r0, r3]
 800dde4:	4062      	eors	r2, r4
 800dde6:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < AES_BLOCK_SIZE; ++i)
 800dde8:	3301      	adds	r3, #1
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	e7f6      	b.n	800dddc <xor_aes_block+0x4>
    }
}
 800ddee:	bd10      	pop	{r4, pc}

0800ddf0 <AES128_CBC_MAC>:
 * 
 */

error_t AES128_CBC_MAC( uint8_t *auth, uint8_t *payload, uint8_t length, const uint8_t *iv,
                        const uint8_t *add, uint8_t add_len, uint8_t auth_len )
{
 800ddf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddf2:	46de      	mov	lr, fp
 800ddf4:	4657      	mov	r7, sl
 800ddf6:	464e      	mov	r6, r9
 800ddf8:	4645      	mov	r5, r8
 800ddfa:	b5e0      	push	{r5, r6, r7, lr}
 800ddfc:	b08b      	sub	sp, #44	; 0x2c
 800ddfe:	9001      	str	r0, [sp, #4]
 800de00:	000c      	movs	r4, r1
 800de02:	0015      	movs	r5, r2
 800de04:	0018      	movs	r0, r3
 800de06:	aa14      	add	r2, sp, #80	; 0x50
 800de08:	ca08      	ldmia	r2!, {r3}
 800de0a:	4699      	mov	r9, r3
 800de0c:	7817      	ldrb	r7, [r2, #0]
 800de0e:	ab16      	add	r3, sp, #88	; 0x58
 800de10:	781e      	ldrb	r6, [r3, #0]
    uint8_t i;
    uint8_t remainders;
    uint8_t tag[AES_BLOCK_SIZE];

    /* sanity checks */
    if (auth_len != 4 && auth_len != 8 && auth_len != 16)
 800de12:	2e04      	cmp	r6, #4
 800de14:	d004      	beq.n	800de20 <AES128_CBC_MAC+0x30>
 800de16:	2e08      	cmp	r6, #8
 800de18:	d002      	beq.n	800de20 <AES128_CBC_MAC+0x30>
 800de1a:	2e10      	cmp	r6, #16
 800de1c:	d000      	beq.n	800de20 <AES128_CBC_MAC+0x30>
 800de1e:	e07a      	b.n	800df16 <AES128_CBC_MAC+0x126>
        return EINVAL;

    if (add_len > (2 * AES_BLOCK_SIZE - 1))
 800de20:	2f1f      	cmp	r7, #31
 800de22:	d900      	bls.n	800de26 <AES128_CBC_MAC+0x36>
 800de24:	e079      	b.n	800df1a <AES128_CBC_MAC+0x12a>
        return EINVAL;

    /* For DASH7, the payload length shall be less than 250 - authentication tag len */
    if (length > (250 - auth_len))
 800de26:	23fa      	movs	r3, #250	; 0xfa
 800de28:	1b9b      	subs	r3, r3, r6
 800de2a:	429d      	cmp	r5, r3
 800de2c:	dd00      	ble.n	800de30 <AES128_CBC_MAC+0x40>
 800de2e:	e076      	b.n	800df1e <AES128_CBC_MAC+0x12e>
     */

    /* X_1 = E(K, B_0) */
    DPRINT("Blk0");
    DPRINT_DATA((uint8_t *)iv, AES_BLOCK_SIZE);
    AES128_ECB_encrypt((uint8_t *)iv, tag);
 800de30:	a902      	add	r1, sp, #8
 800de32:	f7ff ff69 	bl	800dd08 <AES128_ECB_encrypt>
    DPRINT("X_1 = AES(B_0)");
    DPRINT_DATA(tag, AES_BLOCK_SIZE);

    // if add_len > 0, add more blocks of authentication data
    if (add_len > 0)
 800de36:	2f00      	cmp	r7, #0
 800de38:	d104      	bne.n	800de44 <AES128_CBC_MAC+0x54>
            DPRINT("X_3 = AES(X_1 XOR B_1)");
            DPRINT_DATA(tag, AES_BLOCK_SIZE);
        }
    }

    remainders = length % AES_BLOCK_SIZE; /* Remaining bytes in the last non-full block */
 800de3a:	230f      	movs	r3, #15
 800de3c:	402b      	ands	r3, r5
 800de3e:	4698      	mov	r8, r3
    DPRINT("Remainders %d length %d", remainders, length);

    for (i = 0; i < length / AES_BLOCK_SIZE; i++)
 800de40:	2700      	movs	r7, #0
 800de42:	e043      	b.n	800decc <AES128_CBC_MAC+0xdc>
        uint8_t use_len = add_len < AES_BLOCK_SIZE - 1 ? add_len : AES_BLOCK_SIZE - 1;
 800de44:	1c39      	adds	r1, r7, #0
 800de46:	2f0f      	cmp	r7, #15
 800de48:	d900      	bls.n	800de4c <AES128_CBC_MAC+0x5c>
 800de4a:	210f      	movs	r1, #15
 800de4c:	b2cb      	uxtb	r3, r1
 800de4e:	469a      	mov	sl, r3
        remainders = add_len - use_len;
 800de50:	1afb      	subs	r3, r7, r3
 800de52:	b2db      	uxtb	r3, r3
 800de54:	4698      	mov	r8, r3
        memset(blk, 0, AES_BLOCK_SIZE);
 800de56:	ab06      	add	r3, sp, #24
 800de58:	469b      	mov	fp, r3
 800de5a:	2210      	movs	r2, #16
 800de5c:	2100      	movs	r1, #0
 800de5e:	0018      	movs	r0, r3
 800de60:	f007 f80a 	bl	8014e78 <memset>
        blk[0] = add_len;
 800de64:	465b      	mov	r3, fp
 800de66:	701f      	strb	r7, [r3, #0]
        memcpy( blk + 1, add, use_len );
 800de68:	4652      	mov	r2, sl
 800de6a:	4649      	mov	r1, r9
 800de6c:	2011      	movs	r0, #17
 800de6e:	ab02      	add	r3, sp, #8
 800de70:	469c      	mov	ip, r3
 800de72:	4460      	add	r0, ip
 800de74:	f006 ffac 	bl	8014dd0 <memcpy>
        xor_aes_block(blk, tag);
 800de78:	a902      	add	r1, sp, #8
 800de7a:	4658      	mov	r0, fp
 800de7c:	f7ff ffac 	bl	800ddd8 <xor_aes_block>
        AES128_ECB_encrypt(blk, tag);
 800de80:	a902      	add	r1, sp, #8
 800de82:	4658      	mov	r0, fp
 800de84:	f7ff ff40 	bl	800dd08 <AES128_ECB_encrypt>
        if (remainders)
 800de88:	4643      	mov	r3, r8
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d0d5      	beq.n	800de3a <AES128_CBC_MAC+0x4a>
            memset(blk, 0, AES_BLOCK_SIZE);
 800de8e:	2210      	movs	r2, #16
 800de90:	2100      	movs	r1, #0
 800de92:	a806      	add	r0, sp, #24
 800de94:	f006 fff0 	bl	8014e78 <memset>
            memcpy(blk, add + use_len, remainders);
 800de98:	4649      	mov	r1, r9
 800de9a:	4451      	add	r1, sl
 800de9c:	4642      	mov	r2, r8
 800de9e:	a806      	add	r0, sp, #24
 800dea0:	f006 ff96 	bl	8014dd0 <memcpy>
            xor_aes_block(blk, tag);
 800dea4:	a902      	add	r1, sp, #8
 800dea6:	a806      	add	r0, sp, #24
 800dea8:	f7ff ff96 	bl	800ddd8 <xor_aes_block>
            AES128_ECB_encrypt(blk, tag);
 800deac:	a902      	add	r1, sp, #8
 800deae:	a806      	add	r0, sp, #24
 800deb0:	f7ff ff2a 	bl	800dd08 <AES128_ECB_encrypt>
 800deb4:	e7c1      	b.n	800de3a <AES128_CBC_MAC+0x4a>

        DPRINT("B_i");
        DPRINT_DATA(payload, AES_BLOCK_SIZE);

        /* X_i+1 = E(K, X_i XOR B_i) */
        xor_aes_block(tag, payload);
 800deb6:	0021      	movs	r1, r4
 800deb8:	a802      	add	r0, sp, #8
 800deba:	f7ff ff8d 	bl	800ddd8 <xor_aes_block>
        DPRINT("X_i XOR B_i");
        DPRINT_DATA(tag, AES_BLOCK_SIZE);

        payload += AES_BLOCK_SIZE;
 800debe:	3410      	adds	r4, #16

        AES128_ECB_encrypt(tag, tag);
 800dec0:	a902      	add	r1, sp, #8
 800dec2:	0008      	movs	r0, r1
 800dec4:	f7ff ff20 	bl	800dd08 <AES128_ECB_encrypt>
    for (i = 0; i < length / AES_BLOCK_SIZE; i++)
 800dec8:	3701      	adds	r7, #1
 800deca:	b2ff      	uxtb	r7, r7
 800decc:	092b      	lsrs	r3, r5, #4
 800dece:	42bb      	cmp	r3, r7
 800ded0:	d8f1      	bhi.n	800deb6 <AES128_CBC_MAC+0xc6>
        DPRINT("X_i+1 = E(K, X_i XOR B_i)");
        DPRINT_DATA(tag, AES_BLOCK_SIZE);
    }

    if (remainders)
 800ded2:	4643      	mov	r3, r8
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d10c      	bne.n	800def2 <AES128_CBC_MAC+0x102>
        AES128_ECB_encrypt(tag, tag);
        DPRINT("X_i+1 = E(K, X_i XOR B_i)");
        DPRINT_DATA(tag, AES_BLOCK_SIZE);
    }

    memcpy(auth, tag, auth_len);
 800ded8:	0032      	movs	r2, r6
 800deda:	a902      	add	r1, sp, #8
 800dedc:	9801      	ldr	r0, [sp, #4]
 800dede:	f006 ff77 	bl	8014dd0 <memcpy>

    return SUCCESS;
 800dee2:	2000      	movs	r0, #0
}
 800dee4:	b00b      	add	sp, #44	; 0x2c
 800dee6:	bc3c      	pop	{r2, r3, r4, r5}
 800dee8:	4690      	mov	r8, r2
 800deea:	4699      	mov	r9, r3
 800deec:	46a2      	mov	sl, r4
 800deee:	46ab      	mov	fp, r5
 800def0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for (i = 0; i < remainders; i++)
 800def2:	2300      	movs	r3, #0
 800def4:	4543      	cmp	r3, r8
 800def6:	d209      	bcs.n	800df0c <AES128_CBC_MAC+0x11c>
            tag[i] ^= *payload++;
 800def8:	7822      	ldrb	r2, [r4, #0]
 800defa:	a902      	add	r1, sp, #8
 800defc:	5cc9      	ldrb	r1, [r1, r3]
 800defe:	404a      	eors	r2, r1
 800df00:	a902      	add	r1, sp, #8
 800df02:	54ca      	strb	r2, [r1, r3]
        for (i = 0; i < remainders; i++)
 800df04:	3301      	adds	r3, #1
 800df06:	b2db      	uxtb	r3, r3
            tag[i] ^= *payload++;
 800df08:	3401      	adds	r4, #1
 800df0a:	e7f3      	b.n	800def4 <AES128_CBC_MAC+0x104>
        AES128_ECB_encrypt(tag, tag);
 800df0c:	a902      	add	r1, sp, #8
 800df0e:	0008      	movs	r0, r1
 800df10:	f7ff fefa 	bl	800dd08 <AES128_ECB_encrypt>
 800df14:	e7e0      	b.n	800ded8 <AES128_CBC_MAC+0xe8>
        return EINVAL;
 800df16:	2016      	movs	r0, #22
 800df18:	e7e4      	b.n	800dee4 <AES128_CBC_MAC+0xf4>
        return EINVAL;
 800df1a:	2016      	movs	r0, #22
 800df1c:	e7e2      	b.n	800dee4 <AES128_CBC_MAC+0xf4>
        return EINVAL;
 800df1e:	2016      	movs	r0, #22
 800df20:	e7e0      	b.n	800dee4 <AES128_CBC_MAC+0xf4>

0800df22 <AES128_CCM_encrypt>:
 * + the encrypted authentication Tag.
 */
error_t AES128_CCM_encrypt( uint8_t *payload, uint8_t length, const uint8_t *iv,
                            const uint8_t *add, uint8_t add_len, uint8_t *ctr_blk,
                            uint8_t auth_len )
{
 800df22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df24:	46c6      	mov	lr, r8
 800df26:	b500      	push	{lr}
 800df28:	b08c      	sub	sp, #48	; 0x30
 800df2a:	0006      	movs	r6, r0
 800df2c:	000d      	movs	r5, r1
 800df2e:	a912      	add	r1, sp, #72	; 0x48
 800df30:	7808      	ldrb	r0, [r1, #0]
 800df32:	a914      	add	r1, sp, #80	; 0x50
 800df34:	780c      	ldrb	r4, [r1, #0]
    uint8_t auth[AES_BLOCK_SIZE];
    uint8_t auth_crypted[AES_BLOCK_SIZE];
    error_t ret;

    /* sanity checks */
    if (auth_len != 4 && auth_len != 8 && auth_len != 16)
 800df36:	2c04      	cmp	r4, #4
 800df38:	d003      	beq.n	800df42 <AES128_CCM_encrypt+0x20>
 800df3a:	2c08      	cmp	r4, #8
 800df3c:	d001      	beq.n	800df42 <AES128_CCM_encrypt+0x20>
 800df3e:	2c10      	cmp	r4, #16
 800df40:	d130      	bne.n	800dfa4 <AES128_CCM_encrypt+0x82>
        return EINVAL;

     /* For DASH7, the payload length shall be less than 250 - Security header len - authentication tag len */
    if (length > (250 - 5 - auth_len))
 800df42:	21f5      	movs	r1, #245	; 0xf5
 800df44:	1b09      	subs	r1, r1, r4
 800df46:	428d      	cmp	r5, r1
 800df48:	dc2e      	bgt.n	800dfa8 <AES128_CCM_encrypt+0x86>
        return EINVAL;

    if (add_len > (2 * AES_BLOCK_SIZE - 1))
 800df4a:	281f      	cmp	r0, #31
 800df4c:	d82e      	bhi.n	800dfac <AES128_CCM_encrypt+0x8a>
        return EINVAL;

    /* Authentication */
    ret = AES128_CBC_MAC(auth, payload, length, iv, add, add_len, auth_len);
 800df4e:	9402      	str	r4, [sp, #8]
 800df50:	9001      	str	r0, [sp, #4]
 800df52:	9300      	str	r3, [sp, #0]
 800df54:	0013      	movs	r3, r2
 800df56:	002a      	movs	r2, r5
 800df58:	0031      	movs	r1, r6
 800df5a:	a808      	add	r0, sp, #32
 800df5c:	f7ff ff48 	bl	800ddf0 <AES128_CBC_MAC>
 800df60:	1e07      	subs	r7, r0, #0
    if (ret != SUCCESS)
 800df62:	d124      	bne.n	800dfae <AES128_CCM_encrypt+0x8c>
    DPRINT_DATA(auth, auth_len);

    /* Encryption with Counter (CTR) mode*/

    /* Encryption of the message payload, counter set to 1 */
    ctr_blk[0] = (ctr_blk[0] & 0xF0) + 1;
 800df64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	220f      	movs	r2, #15
 800df6a:	4690      	mov	r8, r2
 800df6c:	4393      	bics	r3, r2
 800df6e:	3301      	adds	r3, #1
 800df70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800df72:	7013      	strb	r3, [r2, #0]
    DPRINT("ctr0");
    DPRINT_DATA(ctr_blk, AES_BLOCK_SIZE);

    AES128_CTR_encrypt(payload, payload, length, ctr_blk);
 800df74:	0013      	movs	r3, r2
 800df76:	002a      	movs	r2, r5
 800df78:	0031      	movs	r1, r6
 800df7a:	0030      	movs	r0, r6
 800df7c:	f7ff fed2 	bl	800dd24 <AES128_CTR_encrypt>
    DPRINT("CTR output:");
    DPRINT_DATA(payload, length);

    /* Encryption of the authentication tag , reset counter to 0*/
    ctr_blk[0] = (ctr_blk[0] & 0xF0);
 800df80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	4642      	mov	r2, r8
 800df86:	4393      	bics	r3, r2
 800df88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800df8a:	7013      	strb	r3, [r2, #0]
    AES128_CTR_encrypt(auth_crypted, auth, auth_len, ctr_blk);
 800df8c:	0013      	movs	r3, r2
 800df8e:	0022      	movs	r2, r4
 800df90:	a908      	add	r1, sp, #32
 800df92:	a804      	add	r0, sp, #16
 800df94:	f7ff fec6 	bl	800dd24 <AES128_CTR_encrypt>
    DPRINT("Encrypted authentication tag:");
    DPRINT_DATA(auth_crypted, auth_len);
    // the 4, 8 or 16 MSB of the MAC are then appended to the payload
    memcpy(payload + length, auth_crypted, auth_len);
 800df98:	1970      	adds	r0, r6, r5
 800df9a:	0022      	movs	r2, r4
 800df9c:	a904      	add	r1, sp, #16
 800df9e:	f006 ff17 	bl	8014dd0 <memcpy>

    return SUCCESS;
 800dfa2:	e004      	b.n	800dfae <AES128_CCM_encrypt+0x8c>
        return EINVAL;
 800dfa4:	2716      	movs	r7, #22
 800dfa6:	e002      	b.n	800dfae <AES128_CCM_encrypt+0x8c>
        return EINVAL;
 800dfa8:	2716      	movs	r7, #22
 800dfaa:	e000      	b.n	800dfae <AES128_CCM_encrypt+0x8c>
        return EINVAL;
 800dfac:	2716      	movs	r7, #22
}
 800dfae:	0038      	movs	r0, r7
 800dfb0:	b00c      	add	sp, #48	; 0x30
 800dfb2:	bc04      	pop	{r2}
 800dfb4:	4690      	mov	r8, r2
 800dfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dfb8 <AES128_CCM_decrypt>:
 * Authenticated decryption
 */
error_t AES128_CCM_decrypt( uint8_t *payload, uint8_t length, const uint8_t *iv,
                            const uint8_t *add, uint8_t add_len, uint8_t *ctr_blk,
                            const uint8_t *auth, uint8_t auth_len )
{
 800dfb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfba:	46de      	mov	lr, fp
 800dfbc:	b500      	push	{lr}
 800dfbe:	b08e      	sub	sp, #56	; 0x38
 800dfc0:	0005      	movs	r5, r0
 800dfc2:	000e      	movs	r6, r1
 800dfc4:	9204      	str	r2, [sp, #16]
 800dfc6:	9305      	str	r3, [sp, #20]
 800dfc8:	ab14      	add	r3, sp, #80	; 0x50
 800dfca:	781f      	ldrb	r7, [r3, #0]
 800dfcc:	ab17      	add	r3, sp, #92	; 0x5c
 800dfce:	781c      	ldrb	r4, [r3, #0]
    uint8_t T[AES_BLOCK_SIZE];
    uint8_t auth_decrypted[AES_BLOCK_SIZE];

    /* sanity checks */
    if (auth_len != 4 && auth_len != 8 && auth_len != 16)
 800dfd0:	2c04      	cmp	r4, #4
 800dfd2:	d003      	beq.n	800dfdc <AES128_CCM_decrypt+0x24>
 800dfd4:	2c08      	cmp	r4, #8
 800dfd6:	d001      	beq.n	800dfdc <AES128_CCM_decrypt+0x24>
 800dfd8:	2c10      	cmp	r4, #16
 800dfda:	d134      	bne.n	800e046 <AES128_CCM_decrypt+0x8e>
        return EINVAL;

    /* For DASH7, the payload length shall be less than 250 - Security header len - authentication tag len */
    if (length > (250 - 5 - auth_len))
 800dfdc:	23f5      	movs	r3, #245	; 0xf5
 800dfde:	1b1b      	subs	r3, r3, r4
 800dfe0:	429e      	cmp	r6, r3
 800dfe2:	dc32      	bgt.n	800e04a <AES128_CCM_decrypt+0x92>
        return EINVAL;

    if (add_len > (2 * AES_BLOCK_SIZE - 1))
 800dfe4:	2f1f      	cmp	r7, #31
 800dfe6:	d832      	bhi.n	800e04e <AES128_CCM_decrypt+0x96>
        return EINVAL;

    /* Decryption of the encrypted authentication Tag */
    ctr_blk[0] = (ctr_blk[0] & 0xF0);
 800dfe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	220f      	movs	r2, #15
 800dfee:	4693      	mov	fp, r2
 800dff0:	4393      	bics	r3, r2
 800dff2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dff4:	7013      	strb	r3, [r2, #0]
    AES128_CTR_encrypt(auth_decrypted, (uint8_t *)auth, auth_len, ctr_blk);
 800dff6:	0013      	movs	r3, r2
 800dff8:	0022      	movs	r2, r4
 800dffa:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dffc:	a806      	add	r0, sp, #24
 800dffe:	f7ff fe91 	bl	800dd24 <AES128_CTR_encrypt>
    DPRINT("Decrypted authentication tag:");
    DPRINT_DATA(auth_decrypted, auth_len);

    /* Decryption of the message payload, counter set to 1 */
    ctr_blk[0] = (ctr_blk[0] & 0xF0) + 1;
 800e002:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	465a      	mov	r2, fp
 800e008:	4393      	bics	r3, r2
 800e00a:	3301      	adds	r3, #1
 800e00c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e00e:	7013      	strb	r3, [r2, #0]
    AES128_CTR_encrypt(payload, payload, length, ctr_blk);
 800e010:	0013      	movs	r3, r2
 800e012:	0032      	movs	r2, r6
 800e014:	0029      	movs	r1, r5
 800e016:	0028      	movs	r0, r5
 800e018:	f7ff fe84 	bl	800dd24 <AES128_CTR_encrypt>

    /* Recompute the CBC-MAC and check the authentication Tag */
    AES128_CBC_MAC(T, payload, length, iv, add, add_len, auth_len);
 800e01c:	9402      	str	r4, [sp, #8]
 800e01e:	9701      	str	r7, [sp, #4]
 800e020:	9b05      	ldr	r3, [sp, #20]
 800e022:	9300      	str	r3, [sp, #0]
 800e024:	9b04      	ldr	r3, [sp, #16]
 800e026:	0032      	movs	r2, r6
 800e028:	0029      	movs	r1, r5
 800e02a:	a80a      	add	r0, sp, #40	; 0x28
 800e02c:	f7ff fee0 	bl	800ddf0 <AES128_CBC_MAC>
    DPRINT("Computed authentication tag:");
    DPRINT_DATA(T, auth_len);

    if (memcmp(T, auth_decrypted, auth_len) != 0)
 800e030:	0022      	movs	r2, r4
 800e032:	a906      	add	r1, sp, #24
 800e034:	a80a      	add	r0, sp, #40	; 0x28
 800e036:	f006 fea3 	bl	8014d80 <memcmp>
 800e03a:	2800      	cmp	r0, #0
 800e03c:	d109      	bne.n	800e052 <AES128_CCM_decrypt+0x9a>
        DPRINT("CCM: Auth mismatch");
        return -1;
    }

    return SUCCESS;
}
 800e03e:	b00e      	add	sp, #56	; 0x38
 800e040:	bc04      	pop	{r2}
 800e042:	4693      	mov	fp, r2
 800e044:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return EINVAL;
 800e046:	2016      	movs	r0, #22
 800e048:	e7f9      	b.n	800e03e <AES128_CCM_decrypt+0x86>
        return EINVAL;
 800e04a:	2016      	movs	r0, #22
 800e04c:	e7f7      	b.n	800e03e <AES128_CCM_decrypt+0x86>
        return EINVAL;
 800e04e:	2016      	movs	r0, #22
 800e050:	e7f5      	b.n	800e03e <AES128_CCM_decrypt+0x86>
        return -1;
 800e052:	2001      	movs	r0, #1
 800e054:	4240      	negs	r0, r0
 800e056:	e7f2      	b.n	800e03e <AES128_CCM_decrypt+0x86>

0800e058 <compress_data>:
#include <stdint.h>
#include "debug.h"
#include "compress.h"

uint8_t compress_data(uint16_t value, bool ceil)
{
 800e058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e05a:	46ce      	mov	lr, r9
 800e05c:	4647      	mov	r7, r8
 800e05e:	b580      	push	{r7, lr}
 800e060:	b083      	sub	sp, #12
 800e062:	4681      	mov	r9, r0
 800e064:	9101      	str	r1, [sp, #4]
    uint8_t mantissa;
    uint16_t remainder;

    for ( int i = 0; i < 8; i++)
 800e066:	2300      	movs	r3, #0
 800e068:	4698      	mov	r8, r3
 800e06a:	e002      	b.n	800e072 <compress_data+0x1a>
 800e06c:	2301      	movs	r3, #1
 800e06e:	469c      	mov	ip, r3
 800e070:	44e0      	add	r8, ip
 800e072:	4643      	mov	r3, r8
 800e074:	2b07      	cmp	r3, #7
 800e076:	dc43      	bgt.n	800e100 <compress_data+0xa8>
    {
        if (value <= (pow(4, i) * 31))
 800e078:	4648      	mov	r0, r9
 800e07a:	f006 fb91 	bl	80147a0 <__aeabi_i2d>
 800e07e:	0006      	movs	r6, r0
 800e080:	000f      	movs	r7, r1
 800e082:	4640      	mov	r0, r8
 800e084:	f006 fb8c 	bl	80147a0 <__aeabi_i2d>
 800e088:	0004      	movs	r4, r0
 800e08a:	000d      	movs	r5, r1
 800e08c:	0002      	movs	r2, r0
 800e08e:	000b      	movs	r3, r1
 800e090:	2000      	movs	r0, #0
 800e092:	491e      	ldr	r1, [pc, #120]	; (800e10c <compress_data+0xb4>)
 800e094:	f003 fc7a 	bl	801198c <pow>
 800e098:	2200      	movs	r2, #0
 800e09a:	4b1d      	ldr	r3, [pc, #116]	; (800e110 <compress_data+0xb8>)
 800e09c:	f005 fd2e 	bl	8013afc <__aeabi_dmul>
 800e0a0:	0002      	movs	r2, r0
 800e0a2:	000b      	movs	r3, r1
 800e0a4:	0030      	movs	r0, r6
 800e0a6:	0039      	movs	r1, r7
 800e0a8:	f003 fec8 	bl	8011e3c <__aeabi_dcmple>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	d0dd      	beq.n	800e06c <compress_data+0x14>
        {
            mantissa = value / pow(4, i);
 800e0b0:	0022      	movs	r2, r4
 800e0b2:	002b      	movs	r3, r5
 800e0b4:	2000      	movs	r0, #0
 800e0b6:	4915      	ldr	r1, [pc, #84]	; (800e10c <compress_data+0xb4>)
 800e0b8:	f003 fc68 	bl	801198c <pow>
 800e0bc:	0002      	movs	r2, r0
 800e0be:	000b      	movs	r3, r1
 800e0c0:	0030      	movs	r0, r6
 800e0c2:	0039      	movs	r1, r7
 800e0c4:	f005 f914 	bl	80132f0 <__aeabi_ddiv>
 800e0c8:	f003 ff70 	bl	8011fac <__aeabi_d2uiz>
 800e0cc:	b2c6      	uxtb	r6, r0
            remainder = value % (uint16_t)(pow(4, i));
 800e0ce:	0022      	movs	r2, r4
 800e0d0:	002b      	movs	r3, r5
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	490d      	ldr	r1, [pc, #52]	; (800e10c <compress_data+0xb4>)
 800e0d6:	f003 fc59 	bl	801198c <pow>
 800e0da:	f003 ff67 	bl	8011fac <__aeabi_d2uiz>
 800e0de:	b281      	uxth	r1, r0
 800e0e0:	4648      	mov	r0, r9
 800e0e2:	f003 fd9b 	bl	8011c1c <__aeabi_uidivmod>
 800e0e6:	b289      	uxth	r1, r1

            if (ceil && remainder)
 800e0e8:	9b01      	ldr	r3, [sp, #4]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d003      	beq.n	800e0f6 <compress_data+0x9e>
 800e0ee:	2900      	cmp	r1, #0
 800e0f0:	d001      	beq.n	800e0f6 <compress_data+0x9e>
                mantissa++;
 800e0f2:	3601      	adds	r6, #1
 800e0f4:	b2f6      	uxtb	r6, r6

            return (uint8_t)( i<<5 | mantissa);
 800e0f6:	4643      	mov	r3, r8
 800e0f8:	0158      	lsls	r0, r3, #5
 800e0fa:	4330      	orrs	r0, r6
 800e0fc:	b2c0      	uxtb	r0, r0
 800e0fe:	e000      	b.n	800e102 <compress_data+0xaa>
        }
    }
    return 0;
 800e100:	2000      	movs	r0, #0
}
 800e102:	b003      	add	sp, #12
 800e104:	bc0c      	pop	{r2, r3}
 800e106:	4690      	mov	r8, r2
 800e108:	4699      	mov	r9, r3
 800e10a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e10c:	40100000 	.word	0x40100000
 800e110:	403f0000 	.word	0x403f0000

0800e114 <flush_console_tx_fifo>:
#define CONSOLE_TX_FIFO_SIZE 255
static uint8_t console_tx_buffer[CONSOLE_TX_FIFO_SIZE];
static fifo_t console_tx_fifo;
static bool flush_in_progress = false;

static void flush_console_tx_fifo(void *arg) {
 800e114:	b510      	push	{r4, lr}
 800e116:	b084      	sub	sp, #16
  uint8_t len = fifo_get_size(&console_tx_fifo);
 800e118:	4812      	ldr	r0, [pc, #72]	; (800e164 <flush_console_tx_fifo+0x50>)
 800e11a:	f000 fb90 	bl	800e83e <fifo_get_size>
 800e11e:	b2c4      	uxtb	r4, r0
  // only send small chunks over uart each invocation, to make sure
  // we don't interfer with critical stack timings.
  // When there is still data left in the fifo this will be rescheduled
  // with lowest prio
  uint8_t chunk[TX_FIFO_FLUSH_CHUNK_SIZE];
  if(len < 10) {
 800e120:	2c09      	cmp	r4, #9
 800e122:	d80d      	bhi.n	800e140 <flush_console_tx_fifo+0x2c>
    fifo_pop(&console_tx_fifo, chunk, len);
 800e124:	22ff      	movs	r2, #255	; 0xff
 800e126:	4002      	ands	r2, r0
 800e128:	a901      	add	r1, sp, #4
 800e12a:	480e      	ldr	r0, [pc, #56]	; (800e164 <flush_console_tx_fifo+0x50>)
 800e12c:	f000 fc25 	bl	800e97a <fifo_pop>
    uart_send_bytes(uart, chunk, len);
 800e130:	4b0d      	ldr	r3, [pc, #52]	; (800e168 <flush_console_tx_fifo+0x54>)
 800e132:	6818      	ldr	r0, [r3, #0]
 800e134:	0022      	movs	r2, r4
 800e136:	a901      	add	r1, sp, #4
 800e138:	f7fe f939 	bl	800c3ae <uart_send_bytes>
    fifo_pop(&console_tx_fifo, chunk, TX_FIFO_FLUSH_CHUNK_SIZE);
    uart_send_bytes(uart, chunk, TX_FIFO_FLUSH_CHUNK_SIZE);
    sched_post_task_prio(&flush_console_tx_fifo, MIN_PRIORITY, NULL);
  }
#endif
}
 800e13c:	b004      	add	sp, #16
 800e13e:	bd10      	pop	{r4, pc}
    fifo_pop(&console_tx_fifo, chunk, TX_FIFO_FLUSH_CHUNK_SIZE);
 800e140:	220a      	movs	r2, #10
 800e142:	a901      	add	r1, sp, #4
 800e144:	4807      	ldr	r0, [pc, #28]	; (800e164 <flush_console_tx_fifo+0x50>)
 800e146:	f000 fc18 	bl	800e97a <fifo_pop>
    uart_send_bytes(uart, chunk, TX_FIFO_FLUSH_CHUNK_SIZE);
 800e14a:	4b07      	ldr	r3, [pc, #28]	; (800e168 <flush_console_tx_fifo+0x54>)
 800e14c:	6818      	ldr	r0, [r3, #0]
 800e14e:	220a      	movs	r2, #10
 800e150:	a901      	add	r1, sp, #4
 800e152:	f7fe f92c 	bl	800c3ae <uart_send_bytes>
    sched_post_task_prio(&flush_console_tx_fifo, MIN_PRIORITY, NULL);
 800e156:	2200      	movs	r2, #0
 800e158:	2107      	movs	r1, #7
 800e15a:	4804      	ldr	r0, [pc, #16]	; (800e16c <flush_console_tx_fifo+0x58>)
 800e15c:	f001 fa22 	bl	800f5a4 <sched_post_task_prio>
}
 800e160:	e7ec      	b.n	800e13c <flush_console_tx_fifo+0x28>
 800e162:	46c0      	nop			; (mov r8, r8)
 800e164:	200033d0 	.word	0x200033d0
 800e168:	200033e0 	.word	0x200033e0
 800e16c:	0800e115 	.word	0x0800e115

0800e170 <console_init>:

void console_init(void) {
 800e170:	b510      	push	{r4, lr}
  fifo_init(&console_tx_fifo, console_tx_buffer, CONSOLE_TX_FIFO_SIZE);
 800e172:	22ff      	movs	r2, #255	; 0xff
 800e174:	490d      	ldr	r1, [pc, #52]	; (800e1ac <console_init+0x3c>)
 800e176:	480e      	ldr	r0, [pc, #56]	; (800e1b0 <console_init+0x40>)
 800e178:	f000 faf7 	bl	800e76a <fifo_init>
static inline error_t sched_register_task(task_t task) { return sched_register_task_allow_multiple(task, false);}
 800e17c:	2100      	movs	r1, #0
 800e17e:	480d      	ldr	r0, [pc, #52]	; (800e1b4 <console_init+0x44>)
 800e180:	f001 f974 	bl	800f46c <sched_register_task_allow_multiple>
  sched_register_task(&flush_console_tx_fifo);

  uart = uart_init(PLATFORM_CONSOLE_UART, PLATFORM_CONSOLE_BAUDRATE, PLATFORM_CONSOLE_LOCATION);
 800e184:	21e1      	movs	r1, #225	; 0xe1
 800e186:	2200      	movs	r2, #0
 800e188:	0249      	lsls	r1, r1, #9
 800e18a:	2000      	movs	r0, #0
 800e18c:	f7fd ffa4 	bl	800c0d8 <uart_init>
 800e190:	4b09      	ldr	r3, [pc, #36]	; (800e1b8 <console_init+0x48>)
 800e192:	6018      	str	r0, [r3, #0]
  assert(uart_enable(uart));
 800e194:	f7fd ffc6 	bl	800c124 <uart_enable>
 800e198:	2800      	cmp	r0, #0
 800e19a:	d000      	beq.n	800e19e <console_init+0x2e>
}
 800e19c:	bd10      	pop	{r4, pc}
  assert(uart_enable(uart));
 800e19e:	4b07      	ldr	r3, [pc, #28]	; (800e1bc <console_init+0x4c>)
 800e1a0:	4a07      	ldr	r2, [pc, #28]	; (800e1c0 <console_init+0x50>)
 800e1a2:	2157      	movs	r1, #87	; 0x57
 800e1a4:	4807      	ldr	r0, [pc, #28]	; (800e1c4 <console_init+0x54>)
 800e1a6:	f7fa fa2b 	bl	8008600 <__assert_func>
 800e1aa:	46c0      	nop			; (mov r8, r8)
 800e1ac:	200032d0 	.word	0x200032d0
 800e1b0:	200033d0 	.word	0x200033d0
 800e1b4:	0800e115 	.word	0x0800e115
 800e1b8:	200033e0 	.word	0x200033e0
 800e1bc:	0801a424 	.word	0x0801a424
 800e1c0:	0801a480 	.word	0x0801a480
 800e1c4:	0801a438 	.word	0x0801a438

0800e1c8 <update_crc>:
static uint16_t NGDEF(_crc);
#define crc NG(_crc)

static void update_crc(uint8_t x)
{
     uint16_t crc_new = (uint8_t)(crc >> 8) | (crc << 8);
 800e1c8:	490a      	ldr	r1, [pc, #40]	; (800e1f4 <update_crc+0x2c>)
 800e1ca:	880a      	ldrh	r2, [r1, #0]
 800e1cc:	0a13      	lsrs	r3, r2, #8
 800e1ce:	0212      	lsls	r2, r2, #8
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	b29b      	uxth	r3, r3
     crc_new ^= x;
 800e1d4:	4058      	eors	r0, r3
     crc_new ^= (uint8_t)(crc_new & 0xff) >> 4;
 800e1d6:	b2c3      	uxtb	r3, r0
 800e1d8:	091b      	lsrs	r3, r3, #4
 800e1da:	4058      	eors	r0, r3
     crc_new ^= crc_new << 12;
 800e1dc:	0303      	lsls	r3, r0, #12
 800e1de:	4058      	eors	r0, r3
 800e1e0:	b203      	sxth	r3, r0
 800e1e2:	b280      	uxth	r0, r0
     crc_new ^= (crc_new & 0xff) << 5;
 800e1e4:	0140      	lsls	r0, r0, #5
 800e1e6:	22ff      	movs	r2, #255	; 0xff
 800e1e8:	0152      	lsls	r2, r2, #5
 800e1ea:	4010      	ands	r0, r2
 800e1ec:	4058      	eors	r0, r3
     crc = crc_new;
 800e1ee:	8008      	strh	r0, [r1, #0]
}
 800e1f0:	4770      	bx	lr
 800e1f2:	46c0      	nop			; (mov r8, r8)
 800e1f4:	200033e4 	.word	0x200033e4

0800e1f8 <crc_calculate>:

uint16_t crc_calculate(uint8_t* data, uint8_t length)
{
 800e1f8:	b570      	push	{r4, r5, r6, lr}
 800e1fa:	0006      	movs	r6, r0
 800e1fc:	000d      	movs	r5, r1
    crc = 0xffff;
 800e1fe:	4b08      	ldr	r3, [pc, #32]	; (800e220 <crc_calculate+0x28>)
 800e200:	2201      	movs	r2, #1
 800e202:	4252      	negs	r2, r2
 800e204:	801a      	strh	r2, [r3, #0]
    uint8_t i = 0;
 800e206:	2400      	movs	r4, #0

    for(; i<length; i++)
 800e208:	42ac      	cmp	r4, r5
 800e20a:	d205      	bcs.n	800e218 <crc_calculate+0x20>
    {
        update_crc(data[i]);
 800e20c:	5d30      	ldrb	r0, [r6, r4]
 800e20e:	f7ff ffdb 	bl	800e1c8 <update_crc>
    for(; i<length; i++)
 800e212:	3401      	adds	r4, #1
 800e214:	b2e4      	uxtb	r4, r4
 800e216:	e7f7      	b.n	800e208 <crc_calculate+0x10>
    }
    return crc;
 800e218:	4b01      	ldr	r3, [pc, #4]	; (800e220 <crc_calculate+0x28>)
 800e21a:	8818      	ldrh	r0, [r3, #0]
}
 800e21c:	bd70      	pop	{r4, r5, r6, pc}
 800e21e:	46c0      	nop			; (mov r8, r8)
 800e220:	200033e4 	.word	0x200033e4

0800e224 <fec_decode>:

	return decoded_length;
}

static bool fec_decode(uint8_t* input)
{
 800e224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e226:	46de      	mov	lr, fp
 800e228:	4657      	mov	r7, sl
 800e22a:	464e      	mov	r6, r9
 800e22c:	4645      	mov	r5, r8
 800e22e:	b5e0      	push	{r5, r6, r7, lr}
 800e230:	b085      	sub	sp, #20
	uint8_t symbol;
	uint16_t tmppn9;
	uint8_t fecbuffer[4];
	VITERBIPATH* vstate_tmp;

	if(fecprocessedbytes >= packetlength)
 800e232:	4bad      	ldr	r3, [pc, #692]	; (800e4e8 <fec_decode+0x2c4>)
 800e234:	881c      	ldrh	r4, [r3, #0]
 800e236:	4bad      	ldr	r3, [pc, #692]	; (800e4ec <fec_decode+0x2c8>)
 800e238:	881b      	ldrh	r3, [r3, #0]
 800e23a:	9301      	str	r3, [sp, #4]
 800e23c:	429c      	cmp	r4, r3
 800e23e:	d300      	bcc.n	800e242 <fec_decode+0x1e>
 800e240:	e150      	b.n	800e4e4 <fec_decode+0x2c0>

	//Deinterleaving (symbols are stored in reverse as this is easier for Viterbi decoding)

#ifdef INTERLEAVING
	//printf("Int: "); print_array(input, 4); printf("\n");
	fecbuffer[0] = ((input[0] & 0x03)) |\
 800e242:	7807      	ldrb	r7, [r0, #0]
 800e244:	2100      	movs	r1, #0
 800e246:	5641      	ldrsb	r1, [r0, r1]
 800e248:	2303      	movs	r3, #3
 800e24a:	469b      	mov	fp, r3
 800e24c:	4019      	ands	r1, r3
					((input[1] & 0x03) << 2) |\
 800e24e:	7843      	ldrb	r3, [r0, #1]
 800e250:	469c      	mov	ip, r3
 800e252:	009d      	lsls	r5, r3, #2
 800e254:	230c      	movs	r3, #12
 800e256:	469a      	mov	sl, r3
 800e258:	401d      	ands	r5, r3
	fecbuffer[0] = ((input[0] & 0x03)) |\
 800e25a:	4329      	orrs	r1, r5
					((input[2] & 0x03) << 4) |\
 800e25c:	7885      	ldrb	r5, [r0, #2]
 800e25e:	012b      	lsls	r3, r5, #4
 800e260:	2630      	movs	r6, #48	; 0x30
 800e262:	4033      	ands	r3, r6
					((input[1] & 0x03) << 2) |\
 800e264:	4319      	orrs	r1, r3
					((input[3] & 0x03) << 6);
 800e266:	78c0      	ldrb	r0, [r0, #3]
 800e268:	0183      	lsls	r3, r0, #6
					((input[2] & 0x03) << 4) |\
 800e26a:	430b      	orrs	r3, r1
	fecbuffer[0] = ((input[0] & 0x03)) |\
 800e26c:	a903      	add	r1, sp, #12
 800e26e:	700b      	strb	r3, [r1, #0]
	fecbuffer[1] = (((input[0] >> 2) & 0x03)) |\
 800e270:	08bb      	lsrs	r3, r7, #2
 800e272:	465a      	mov	r2, fp
 800e274:	4013      	ands	r3, r2
 800e276:	4699      	mov	r9, r3
					(((input[1] >> 2) & 0x03) << 2) |\
 800e278:	4663      	mov	r3, ip
 800e27a:	089b      	lsrs	r3, r3, #2
 800e27c:	009b      	lsls	r3, r3, #2
 800e27e:	4652      	mov	r2, sl
 800e280:	4013      	ands	r3, r2
 800e282:	4698      	mov	r8, r3
	fecbuffer[1] = (((input[0] >> 2) & 0x03)) |\
 800e284:	464b      	mov	r3, r9
 800e286:	4642      	mov	r2, r8
 800e288:	4313      	orrs	r3, r2
 800e28a:	4698      	mov	r8, r3
					(((input[2] >> 2) & 0x03) << 4) |\
 800e28c:	08ab      	lsrs	r3, r5, #2
 800e28e:	011b      	lsls	r3, r3, #4
 800e290:	4033      	ands	r3, r6
 800e292:	4699      	mov	r9, r3
					(((input[1] >> 2) & 0x03) << 2) |\
 800e294:	4643      	mov	r3, r8
 800e296:	464a      	mov	r2, r9
 800e298:	4313      	orrs	r3, r2
 800e29a:	4698      	mov	r8, r3
					(((input[3] >> 2) & 0x03) << 6);
 800e29c:	0883      	lsrs	r3, r0, #2
 800e29e:	019b      	lsls	r3, r3, #6
 800e2a0:	4699      	mov	r9, r3
					(((input[2] >> 2) & 0x03) << 4) |\
 800e2a2:	4643      	mov	r3, r8
 800e2a4:	464a      	mov	r2, r9
 800e2a6:	4313      	orrs	r3, r2
	fecbuffer[1] = (((input[0] >> 2) & 0x03)) |\
 800e2a8:	704b      	strb	r3, [r1, #1]
	fecbuffer[2] = (((input[0] >> 4) & 0x03)) |\
 800e2aa:	093b      	lsrs	r3, r7, #4
 800e2ac:	465a      	mov	r2, fp
 800e2ae:	401a      	ands	r2, r3
 800e2b0:	4691      	mov	r9, r2
					(((input[1] >> 4) & 0x03) << 2) |\
 800e2b2:	4663      	mov	r3, ip
 800e2b4:	091b      	lsrs	r3, r3, #4
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	4652      	mov	r2, sl
 800e2ba:	4013      	ands	r3, r2
	fecbuffer[2] = (((input[0] >> 4) & 0x03)) |\
 800e2bc:	464a      	mov	r2, r9
 800e2be:	431a      	orrs	r2, r3
					(((input[2] >> 4) & 0x03) << 4) |\
 800e2c0:	092b      	lsrs	r3, r5, #4
 800e2c2:	011b      	lsls	r3, r3, #4
 800e2c4:	4033      	ands	r3, r6
					(((input[1] >> 4) & 0x03) << 2) |\
 800e2c6:	431a      	orrs	r2, r3
					(((input[3] >> 4) & 0x03) << 6);
 800e2c8:	0903      	lsrs	r3, r0, #4
 800e2ca:	019b      	lsls	r3, r3, #6
					(((input[2] >> 4) & 0x03) << 4) |\
 800e2cc:	431a      	orrs	r2, r3
	fecbuffer[2] = (((input[0] >> 4) & 0x03)) |\
 800e2ce:	708a      	strb	r2, [r1, #2]
	fecbuffer[3] = (((input[0] >> 6) & 0x03)) |\
					(((input[1] >> 6) & 0x03) << 2) |\
 800e2d0:	4663      	mov	r3, ip
 800e2d2:	099a      	lsrs	r2, r3, #6
 800e2d4:	0092      	lsls	r2, r2, #2
 800e2d6:	4653      	mov	r3, sl
 800e2d8:	4013      	ands	r3, r2
	fecbuffer[3] = (((input[0] >> 6) & 0x03)) |\
 800e2da:	09bf      	lsrs	r7, r7, #6
 800e2dc:	433b      	orrs	r3, r7
					(((input[2] >> 6) & 0x03) << 4) |\
 800e2de:	09ad      	lsrs	r5, r5, #6
 800e2e0:	012d      	lsls	r5, r5, #4
 800e2e2:	4035      	ands	r5, r6
					(((input[1] >> 6) & 0x03) << 2) |\
 800e2e4:	432b      	orrs	r3, r5
					(((input[3] >> 6) & 0x03) << 6);
 800e2e6:	0980      	lsrs	r0, r0, #6
 800e2e8:	0180      	lsls	r0, r0, #6
					(((input[2] >> 6) & 0x03) << 4) |\
 800e2ea:	4303      	orrs	r3, r0
	fecbuffer[3] = (((input[0] >> 6) & 0x03)) |\
 800e2ec:	70cb      	strb	r3, [r1, #3]
	fecbuffer[1] = input[1];
	fecbuffer[2] = input[2];
	fecbuffer[3] = input[3];
#endif
	//printf(" input = %04X%04X\n", fecbuffer[0],fecbuffer[1]);
	fecprocessedbytes +=4;
 800e2ee:	3404      	adds	r4, #4
 800e2f0:	4b7d      	ldr	r3, [pc, #500]	; (800e4e8 <fec_decode+0x2c4>)
 800e2f2:	801c      	strh	r4, [r3, #0]

	for (i = 0; i < 3; i=i+2) {
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	469a      	mov	sl, r3
 800e2f8:	e0a3      	b.n	800e442 <fec_decode+0x21e>
		// todo: fix for loop
		for (j = 7; j >= 0; j--) {
			if (j>3)
				symbol = (fecbuffer[i] >> (j-4)*2) & 0x03;
			else
				symbol = (fecbuffer[i+1] >> j*2) & 0x03;
 800e2fa:	4653      	mov	r3, sl
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	aa03      	add	r2, sp, #12
 800e300:	5cd5      	ldrb	r5, [r2, r3]
 800e302:	4663      	mov	r3, ip
 800e304:	005b      	lsls	r3, r3, #1
 800e306:	411d      	asrs	r5, r3
 800e308:	2303      	movs	r3, #3
 800e30a:	401d      	ands	r5, r3
 800e30c:	e08a      	b.n	800e424 <fec_decode+0x200>

				if(hamming0 <= hamming1) {
					vstate.new[k].cost = hamming0;
					vstate.new[k].path = vstate.old[state0].path << 1;
				} else {
					vstate.new[k].cost = hamming1;
 800e30e:	0086      	lsls	r6, r0, #2
 800e310:	46b3      	mov	fp, r6
 800e312:	4c77      	ldr	r4, [pc, #476]	; (800e4f0 <fec_decode+0x2cc>)
 800e314:	68a6      	ldr	r6, [r4, #8]
 800e316:	465c      	mov	r4, fp
 800e318:	5533      	strb	r3, [r6, r4]
					vstate.new[k].path = vstate.old[state1].path << 1;
 800e31a:	4b75      	ldr	r3, [pc, #468]	; (800e4f0 <fec_decode+0x2cc>)
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	4463      	add	r3, ip
 800e320:	885b      	ldrh	r3, [r3, #2]
 800e322:	4c73      	ldr	r4, [pc, #460]	; (800e4f0 <fec_decode+0x2cc>)
 800e324:	68a4      	ldr	r4, [r4, #8]
 800e326:	445c      	add	r4, fp
 800e328:	005b      	lsls	r3, r3, #1
 800e32a:	8063      	strh	r3, [r4, #2]
 800e32c:	e03d      	b.n	800e3aa <fec_decode+0x186>

				if(hamming0 <= hamming1) {
					vstate.new[k].cost = hamming0;
					vstate.new[k].path = vstate.old[state0].path << 1 | 0x01;
				} else {
					vstate.new[k].cost = hamming1;
 800e32e:	4a70      	ldr	r2, [pc, #448]	; (800e4f0 <fec_decode+0x2cc>)
 800e330:	00a4      	lsls	r4, r4, #2
 800e332:	6891      	ldr	r1, [r2, #8]
 800e334:	550b      	strb	r3, [r1, r4]
					vstate.new[k].path = vstate.old[state1].path << 1 | 0x01;
 800e336:	6853      	ldr	r3, [r2, #4]
 800e338:	4698      	mov	r8, r3
 800e33a:	4663      	mov	r3, ip
 800e33c:	4443      	add	r3, r8
 800e33e:	885b      	ldrh	r3, [r3, #2]
 800e340:	005b      	lsls	r3, r3, #1
 800e342:	6892      	ldr	r2, [r2, #8]
 800e344:	1914      	adds	r4, r2, r4
 800e346:	2201      	movs	r2, #1
 800e348:	4313      	orrs	r3, r2
 800e34a:	8063      	strh	r3, [r4, #2]
			for(k = 0; k < 8; k++) {
 800e34c:	3002      	adds	r0, #2
 800e34e:	b2c0      	uxtb	r0, r0
 800e350:	2807      	cmp	r0, #7
 800e352:	d84c      	bhi.n	800e3ee <fec_decode+0x1ca>
				state0 = k >> 1;
 800e354:	0841      	lsrs	r1, r0, #1
				state1 = state0 + 4;
 800e356:	1d0a      	adds	r2, r1, #4
				cost0  = vstate.old[state0].cost;
 800e358:	4b65      	ldr	r3, [pc, #404]	; (800e4f0 <fec_decode+0x2cc>)
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	008f      	lsls	r7, r1, #2
 800e35e:	5ddc      	ldrb	r4, [r3, r7]
 800e360:	46a1      	mov	r9, r4
				cost1  = vstate.old[state1].cost;
 800e362:	0094      	lsls	r4, r2, #2
 800e364:	46a4      	mov	ip, r4
 800e366:	5d1b      	ldrb	r3, [r3, r4]
 800e368:	4698      	mov	r8, r3
				hamming0 = cost0 + (((trellis0_lut[state0] ^ symbol) + 1) >> 1);
 800e36a:	4b62      	ldr	r3, [pc, #392]	; (800e4f4 <fec_decode+0x2d0>)
 800e36c:	5c5c      	ldrb	r4, [r3, r1]
 800e36e:	406c      	eors	r4, r5
 800e370:	3401      	adds	r4, #1
 800e372:	1064      	asrs	r4, r4, #1
 800e374:	b2e4      	uxtb	r4, r4
 800e376:	444c      	add	r4, r9
 800e378:	b2e4      	uxtb	r4, r4
				hamming1 = cost1 + (((trellis0_lut[state1] ^ symbol) + 1) >> 1);
 800e37a:	5c9b      	ldrb	r3, [r3, r2]
 800e37c:	406b      	eors	r3, r5
 800e37e:	3301      	adds	r3, #1
 800e380:	105b      	asrs	r3, r3, #1
 800e382:	b2db      	uxtb	r3, r3
 800e384:	4443      	add	r3, r8
 800e386:	b2db      	uxtb	r3, r3
				if(hamming0 <= hamming1) {
 800e388:	429c      	cmp	r4, r3
 800e38a:	d8c0      	bhi.n	800e30e <fec_decode+0xea>
					vstate.new[k].cost = hamming0;
 800e38c:	0086      	lsls	r6, r0, #2
 800e38e:	46b3      	mov	fp, r6
 800e390:	4b57      	ldr	r3, [pc, #348]	; (800e4f0 <fec_decode+0x2cc>)
 800e392:	689e      	ldr	r6, [r3, #8]
 800e394:	465b      	mov	r3, fp
 800e396:	54f4      	strb	r4, [r6, r3]
					vstate.new[k].path = vstate.old[state0].path << 1;
 800e398:	4b55      	ldr	r3, [pc, #340]	; (800e4f0 <fec_decode+0x2cc>)
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	19dc      	adds	r4, r3, r7
 800e39e:	8864      	ldrh	r4, [r4, #2]
 800e3a0:	4b53      	ldr	r3, [pc, #332]	; (800e4f0 <fec_decode+0x2cc>)
 800e3a2:	689b      	ldr	r3, [r3, #8]
 800e3a4:	445b      	add	r3, fp
 800e3a6:	0064      	lsls	r4, r4, #1
 800e3a8:	805c      	strh	r4, [r3, #2]
				k++;
 800e3aa:	1c44      	adds	r4, r0, #1
 800e3ac:	b2e4      	uxtb	r4, r4
				hamming0 = cost0 + (((trellis1_lut[state0] ^ symbol) + 1) >> 1);
 800e3ae:	4b52      	ldr	r3, [pc, #328]	; (800e4f8 <fec_decode+0x2d4>)
 800e3b0:	5c59      	ldrb	r1, [r3, r1]
 800e3b2:	4069      	eors	r1, r5
 800e3b4:	3101      	adds	r1, #1
 800e3b6:	1049      	asrs	r1, r1, #1
 800e3b8:	b2c9      	uxtb	r1, r1
 800e3ba:	4449      	add	r1, r9
 800e3bc:	b2c9      	uxtb	r1, r1
				hamming1 = cost1 + (((trellis1_lut[state1] ^ symbol) + 1) >> 1);
 800e3be:	5c9a      	ldrb	r2, [r3, r2]
 800e3c0:	406a      	eors	r2, r5
 800e3c2:	1c53      	adds	r3, r2, #1
 800e3c4:	105b      	asrs	r3, r3, #1
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	4443      	add	r3, r8
 800e3ca:	b2db      	uxtb	r3, r3
				if(hamming0 <= hamming1) {
 800e3cc:	4299      	cmp	r1, r3
 800e3ce:	d8ae      	bhi.n	800e32e <fec_decode+0x10a>
					vstate.new[k].cost = hamming0;
 800e3d0:	4a47      	ldr	r2, [pc, #284]	; (800e4f0 <fec_decode+0x2cc>)
 800e3d2:	00a4      	lsls	r4, r4, #2
 800e3d4:	6893      	ldr	r3, [r2, #8]
 800e3d6:	5519      	strb	r1, [r3, r4]
					vstate.new[k].path = vstate.old[state0].path << 1 | 0x01;
 800e3d8:	6853      	ldr	r3, [r2, #4]
 800e3da:	4698      	mov	r8, r3
 800e3dc:	4447      	add	r7, r8
 800e3de:	887b      	ldrh	r3, [r7, #2]
 800e3e0:	005b      	lsls	r3, r3, #1
 800e3e2:	6892      	ldr	r2, [r2, #8]
 800e3e4:	1914      	adds	r4, r2, r4
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	8063      	strh	r3, [r4, #2]
 800e3ec:	e7ae      	b.n	800e34c <fec_decode+0x128>
 800e3ee:	9b00      	ldr	r3, [sp, #0]
 800e3f0:	469c      	mov	ip, r3
				//printf("k %d part 2\n");
				//print_vstate();
			}

			//Swap Viterbi paths
			vstate_tmp = vstate.new;
 800e3f2:	4b3f      	ldr	r3, [pc, #252]	; (800e4f0 <fec_decode+0x2cc>)
 800e3f4:	689a      	ldr	r2, [r3, #8]
			vstate.new = vstate.old;
 800e3f6:	6859      	ldr	r1, [r3, #4]
 800e3f8:	6099      	str	r1, [r3, #8]
			vstate.old = vstate_tmp;
 800e3fa:	605a      	str	r2, [r3, #4]
		for (j = 7; j >= 0; j--) {
 800e3fc:	4663      	mov	r3, ip
 800e3fe:	3b01      	subs	r3, #1
 800e400:	b25b      	sxtb	r3, r3
 800e402:	469c      	mov	ip, r3
 800e404:	4663      	mov	r3, ip
 800e406:	2b00      	cmp	r3, #0
 800e408:	db10      	blt.n	800e42c <fec_decode+0x208>
			if (j>3)
 800e40a:	4663      	mov	r3, ip
 800e40c:	2b03      	cmp	r3, #3
 800e40e:	dc00      	bgt.n	800e412 <fec_decode+0x1ee>
 800e410:	e773      	b.n	800e2fa <fec_decode+0xd6>
				symbol = (fecbuffer[i] >> (j-4)*2) & 0x03;
 800e412:	ab03      	add	r3, sp, #12
 800e414:	4652      	mov	r2, sl
 800e416:	5c9d      	ldrb	r5, [r3, r2]
 800e418:	4663      	mov	r3, ip
 800e41a:	3b04      	subs	r3, #4
 800e41c:	005b      	lsls	r3, r3, #1
 800e41e:	411d      	asrs	r5, r3
 800e420:	2303      	movs	r3, #3
 800e422:	401d      	ands	r5, r3
			for(k = 0; k < 8; k++) {
 800e424:	2000      	movs	r0, #0
 800e426:	4663      	mov	r3, ip
 800e428:	9300      	str	r3, [sp, #0]
 800e42a:	e791      	b.n	800e350 <fec_decode+0x12c>

			//print_vstate();
		}

		vstate.path_size++;
 800e42c:	4a30      	ldr	r2, [pc, #192]	; (800e4f0 <fec_decode+0x2cc>)
 800e42e:	7813      	ldrb	r3, [r2, #0]
 800e430:	3301      	adds	r3, #1
 800e432:	b2db      	uxtb	r3, r3
 800e434:	7013      	strb	r3, [r2, #0]

		//Flush out byte if path is full
		if ((vstate.path_size == 2) && (processedbytes < packetlength)) {
 800e436:	2b02      	cmp	r3, #2
 800e438:	d009      	beq.n	800e44e <fec_decode+0x22a>
	for (i = 0; i < 3; i=i+2) {
 800e43a:	4653      	mov	r3, sl
 800e43c:	3302      	adds	r3, #2
 800e43e:	b2db      	uxtb	r3, r3
 800e440:	469a      	mov	sl, r3
 800e442:	4653      	mov	r3, sl
 800e444:	2b02      	cmp	r3, #2
 800e446:	d845      	bhi.n	800e4d4 <fec_decode+0x2b0>
		for (j = 7; j >= 0; j--) {
 800e448:	2307      	movs	r3, #7
 800e44a:	469c      	mov	ip, r3
 800e44c:	e7da      	b.n	800e404 <fec_decode+0x1e0>
		if ((vstate.path_size == 2) && (processedbytes < packetlength)) {
 800e44e:	4b2b      	ldr	r3, [pc, #172]	; (800e4fc <fec_decode+0x2d8>)
 800e450:	781d      	ldrb	r5, [r3, #0]
 800e452:	9a01      	ldr	r2, [sp, #4]
 800e454:	42aa      	cmp	r2, r5
 800e456:	d9f0      	bls.n	800e43a <fec_decode+0x216>
			//Calculate path with lowest cost
			min_state = 0;
 800e458:	2400      	movs	r4, #0
			for (j = 7; j != 0; j--) {
 800e45a:	2307      	movs	r3, #7
 800e45c:	e001      	b.n	800e462 <fec_decode+0x23e>
 800e45e:	3b01      	subs	r3, #1
 800e460:	b25b      	sxtb	r3, r3
 800e462:	2b00      	cmp	r3, #0
 800e464:	d009      	beq.n	800e47a <fec_decode+0x256>
				if(vstate.old[j].cost < vstate.old[min_state].cost)
 800e466:	4a22      	ldr	r2, [pc, #136]	; (800e4f0 <fec_decode+0x2cc>)
 800e468:	6852      	ldr	r2, [r2, #4]
 800e46a:	0099      	lsls	r1, r3, #2
 800e46c:	5c51      	ldrb	r1, [r2, r1]
 800e46e:	00a0      	lsls	r0, r4, #2
 800e470:	5c12      	ldrb	r2, [r2, r0]
 800e472:	4291      	cmp	r1, r2
 800e474:	d2f3      	bcs.n	800e45e <fec_decode+0x23a>
					min_state = j;
 800e476:	b2dc      	uxtb	r4, r3
 800e478:	e7f1      	b.n	800e45e <fec_decode+0x23a>
			}

	        //Normalize costs
			if (vstate.old[min_state].cost > 0)
 800e47a:	4a1d      	ldr	r2, [pc, #116]	; (800e4f0 <fec_decode+0x2cc>)
 800e47c:	6852      	ldr	r2, [r2, #4]
 800e47e:	00a4      	lsls	r4, r4, #2
 800e480:	5d12      	ldrb	r2, [r2, r4]
 800e482:	2a00      	cmp	r2, #0
 800e484:	d123      	bne.n	800e4ce <fec_decode+0x2aa>
				for (j = 0; j < 8; j++) vstate.old[j].cost -= vstate.old[min_state].cost;

			*output_buffer++ = vstate.old[min_state].path >> 8;
 800e486:	4b1a      	ldr	r3, [pc, #104]	; (800e4f0 <fec_decode+0x2cc>)
 800e488:	685a      	ldr	r2, [r3, #4]
 800e48a:	1912      	adds	r2, r2, r4
 800e48c:	8852      	ldrh	r2, [r2, #2]
 800e48e:	481c      	ldr	r0, [pc, #112]	; (800e500 <fec_decode+0x2dc>)
 800e490:	6801      	ldr	r1, [r0, #0]
 800e492:	1c4e      	adds	r6, r1, #1
 800e494:	6006      	str	r6, [r0, #0]
 800e496:	0a12      	lsrs	r2, r2, #8
 800e498:	700a      	strb	r2, [r1, #0]
			vstate.path_size--;
 800e49a:	781a      	ldrb	r2, [r3, #0]
 800e49c:	3a01      	subs	r2, #1
 800e49e:	701a      	strb	r2, [r3, #0]

			processedbytes++;
 800e4a0:	3501      	adds	r5, #1
 800e4a2:	b2ed      	uxtb	r5, r5
 800e4a4:	4b15      	ldr	r3, [pc, #84]	; (800e4fc <fec_decode+0x2d8>)
 800e4a6:	701d      	strb	r5, [r3, #0]

			if (processedbytes+ 2 == packetlength)
 800e4a8:	3502      	adds	r5, #2
 800e4aa:	9b01      	ldr	r3, [sp, #4]
 800e4ac:	429d      	cmp	r5, r3
 800e4ae:	d1c4      	bne.n	800e43a <fec_decode+0x216>
				*output_buffer = (uint8_t) (vstate.old[min_state].path);
 800e4b0:	4b0f      	ldr	r3, [pc, #60]	; (800e4f0 <fec_decode+0x2cc>)
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	191c      	adds	r4, r3, r4
 800e4b6:	78a3      	ldrb	r3, [r4, #2]
 800e4b8:	704b      	strb	r3, [r1, #1]
 800e4ba:	e7be      	b.n	800e43a <fec_decode+0x216>
				for (j = 0; j < 8; j++) vstate.old[j].cost -= vstate.old[min_state].cost;
 800e4bc:	4a0c      	ldr	r2, [pc, #48]	; (800e4f0 <fec_decode+0x2cc>)
 800e4be:	6852      	ldr	r2, [r2, #4]
 800e4c0:	0098      	lsls	r0, r3, #2
 800e4c2:	5d16      	ldrb	r6, [r2, r4]
 800e4c4:	5c11      	ldrb	r1, [r2, r0]
 800e4c6:	1b89      	subs	r1, r1, r6
 800e4c8:	5411      	strb	r1, [r2, r0]
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	b25b      	sxtb	r3, r3
 800e4ce:	2b07      	cmp	r3, #7
 800e4d0:	ddf4      	ble.n	800e4bc <fec_decode+0x298>
 800e4d2:	e7d8      	b.n	800e486 <fec_decode+0x262>

	//print_vstate();



	return true;
 800e4d4:	2001      	movs	r0, #1
}
 800e4d6:	b005      	add	sp, #20
 800e4d8:	bc3c      	pop	{r2, r3, r4, r5}
 800e4da:	4690      	mov	r8, r2
 800e4dc:	4699      	mov	r9, r3
 800e4de:	46a2      	mov	sl, r4
 800e4e0:	46ab      	mov	fp, r5
 800e4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
 800e4e4:	2000      	movs	r0, #0
 800e4e6:	e7f6      	b.n	800e4d6 <fec_decode+0x2b2>
 800e4e8:	200034e8 	.word	0x200034e8
 800e4ec:	200034f0 	.word	0x200034f0
 800e4f0:	200034f4 	.word	0x200034f4
 800e4f4:	0801a4a0 	.word	0x0801a4a0
 800e4f8:	0801a4a8 	.word	0x0801a4a8
 800e4fc:	200034f2 	.word	0x200034f2
 800e500:	200034ec 	.word	0x200034ec

0800e504 <fec_calculated_decoded_length>:
	return 2* (packet_length + 2 - (packet_length % 2));
 800e504:	1c83      	adds	r3, r0, #2
 800e506:	2201      	movs	r2, #1
 800e508:	4010      	ands	r0, r2
 800e50a:	1a18      	subs	r0, r3, r0
 800e50c:	0040      	lsls	r0, r0, #1
 800e50e:	b280      	uxth	r0, r0
}
 800e510:	4770      	bx	lr
	...

0800e514 <fec_encode>:
{
 800e514:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e516:	46de      	mov	lr, fp
 800e518:	4657      	mov	r7, sl
 800e51a:	464e      	mov	r6, r9
 800e51c:	4645      	mov	r5, r8
 800e51e:	b5e0      	push	{r5, r6, r7, lr}
 800e520:	b087      	sub	sp, #28
 800e522:	4681      	mov	r9, r0
 800e524:	000c      	movs	r4, r1
	if(nbytes > FEC_BUFFER_SIZE)
 800e526:	2380      	movs	r3, #128	; 0x80
 800e528:	005b      	lsls	r3, r3, #1
 800e52a:	4299      	cmp	r1, r3
 800e52c:	d909      	bls.n	800e542 <fec_encode+0x2e>
		return 0;
 800e52e:	2300      	movs	r3, #0
 800e530:	9302      	str	r3, [sp, #8]
}
 800e532:	9802      	ldr	r0, [sp, #8]
 800e534:	b007      	add	sp, #28
 800e536:	bc3c      	pop	{r2, r3, r4, r5}
 800e538:	4690      	mov	r8, r2
 800e53a:	4699      	mov	r9, r3
 800e53c:	46a2      	mov	sl, r4
 800e53e:	46ab      	mov	fp, r5
 800e540:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(data_buffer, data, nbytes);
 800e542:	4d4f      	ldr	r5, [pc, #316]	; (800e680 <fec_encode+0x16c>)
 800e544:	000a      	movs	r2, r1
 800e546:	0001      	movs	r1, r0
 800e548:	0028      	movs	r0, r5
 800e54a:	f006 fc41 	bl	8014dd0 <memcpy>
	int termintor_bytes = 2 + nbytes%2;
 800e54e:	2301      	movs	r3, #1
 800e550:	4023      	ands	r3, r4
 800e552:	3302      	adds	r3, #2
 800e554:	9303      	str	r3, [sp, #12]
	nbytes+=termintor_bytes;
 800e556:	469c      	mov	ip, r3
 800e558:	4464      	add	r4, ip
 800e55a:	b2a4      	uxth	r4, r4
	uint8_t fecbuffer[4] = {0,0,0,0};
 800e55c:	2300      	movs	r3, #0
 800e55e:	9305      	str	r3, [sp, #20]
	int8_t buffer_pointer = 0;
 800e560:	2200      	movs	r2, #0
	uint16_t length = 0;
 800e562:	9302      	str	r3, [sp, #8]
	uint8_t *input = data_buffer;
 800e564:	0028      	movs	r0, r5
 800e566:	0011      	movs	r1, r2
	while(nbytes-- > 0){
 800e568:	e01b      	b.n	800e5a2 <fec_encode+0x8e>
					buffer_pointer++;
 800e56a:	3101      	adds	r1, #1
 800e56c:	b249      	sxtb	r1, r1
					j = 6;
 800e56e:	2406      	movs	r4, #6
		for(i=7;i>=0;i--){
 800e570:	3e01      	subs	r6, #1
 800e572:	2e00      	cmp	r6, #0
 800e574:	db11      	blt.n	800e59a <fec_encode+0x86>
				encstate = (encstate << 1) | ((*input >> i) & 1);
 800e576:	005b      	lsls	r3, r3, #1
 800e578:	7805      	ldrb	r5, [r0, #0]
 800e57a:	4135      	asrs	r5, r6
 800e57c:	2201      	movs	r2, #1
 800e57e:	402a      	ands	r2, r5
 800e580:	4313      	orrs	r3, r2
				fecbuffer[buffer_pointer] |= fec_lut[encstate & 0x0F] << j;
 800e582:	220f      	movs	r2, #15
 800e584:	401a      	ands	r2, r3
 800e586:	4d3f      	ldr	r5, [pc, #252]	; (800e684 <fec_encode+0x170>)
 800e588:	5cad      	ldrb	r5, [r5, r2]
 800e58a:	40a5      	lsls	r5, r4
 800e58c:	af05      	add	r7, sp, #20
 800e58e:	5c7a      	ldrb	r2, [r7, r1]
 800e590:	432a      	orrs	r2, r5
 800e592:	547a      	strb	r2, [r7, r1]
				if (j < 0)
 800e594:	3c02      	subs	r4, #2
 800e596:	d5eb      	bpl.n	800e570 <fec_encode+0x5c>
 800e598:	e7e7      	b.n	800e56a <fec_encode+0x56>
		if (buffer_pointer == 4)
 800e59a:	2904      	cmp	r1, #4
 800e59c:	d00f      	beq.n	800e5be <fec_encode+0xaa>
		input++;
 800e59e:	3001      	adds	r0, #1
	while(nbytes-- > 0){
 800e5a0:	9c01      	ldr	r4, [sp, #4]
 800e5a2:	1e62      	subs	r2, r4, #1
 800e5a4:	b292      	uxth	r2, r2
 800e5a6:	9201      	str	r2, [sp, #4]
 800e5a8:	2c00      	cmp	r4, #0
 800e5aa:	d0c2      	beq.n	800e532 <fec_encode+0x1e>
		if (nbytes < termintor_bytes) *input = TRELLIS_TERMINATOR;
 800e5ac:	9a01      	ldr	r2, [sp, #4]
 800e5ae:	9c03      	ldr	r4, [sp, #12]
 800e5b0:	42a2      	cmp	r2, r4
 800e5b2:	da01      	bge.n	800e5b8 <fec_encode+0xa4>
 800e5b4:	220b      	movs	r2, #11
 800e5b6:	7002      	strb	r2, [r0, #0]
					j = 6;
 800e5b8:	2406      	movs	r4, #6
 800e5ba:	2607      	movs	r6, #7
 800e5bc:	e7d9      	b.n	800e572 <fec_encode+0x5e>
			*data++ = ((fecbuffer[0] & 0x03)) |\
 800e5be:	ac05      	add	r4, sp, #20
 800e5c0:	7822      	ldrb	r2, [r4, #0]
 800e5c2:	4690      	mov	r8, r2
 800e5c4:	2600      	movs	r6, #0
 800e5c6:	57a6      	ldrsb	r6, [r4, r6]
 800e5c8:	2203      	movs	r2, #3
 800e5ca:	4692      	mov	sl, r2
 800e5cc:	4016      	ands	r6, r2
						((fecbuffer[1] & 0x03) << 2) |\
 800e5ce:	7862      	ldrb	r2, [r4, #1]
 800e5d0:	4694      	mov	ip, r2
 800e5d2:	0095      	lsls	r5, r2, #2
 800e5d4:	220c      	movs	r2, #12
 800e5d6:	4015      	ands	r5, r2
			*data++ = ((fecbuffer[0] & 0x03)) |\
 800e5d8:	4335      	orrs	r5, r6
						((fecbuffer[2] & 0x03) << 4) |\
 800e5da:	78a7      	ldrb	r7, [r4, #2]
 800e5dc:	013e      	lsls	r6, r7, #4
 800e5de:	312c      	adds	r1, #44	; 0x2c
 800e5e0:	400e      	ands	r6, r1
						((fecbuffer[1] & 0x03) << 2) |\
 800e5e2:	4335      	orrs	r5, r6
						((fecbuffer[3] & 0x03) << 6);
 800e5e4:	78e6      	ldrb	r6, [r4, #3]
 800e5e6:	01b2      	lsls	r2, r6, #6
						((fecbuffer[2] & 0x03) << 4) |\
 800e5e8:	4315      	orrs	r5, r2
			*data++ = ((fecbuffer[0] & 0x03)) |\
 800e5ea:	464a      	mov	r2, r9
 800e5ec:	7015      	strb	r5, [r2, #0]
			*data++ = (((fecbuffer[0] >> 2) & 0x03)) |\
 800e5ee:	4642      	mov	r2, r8
 800e5f0:	0895      	lsrs	r5, r2, #2
 800e5f2:	4652      	mov	r2, sl
 800e5f4:	402a      	ands	r2, r5
 800e5f6:	4693      	mov	fp, r2
							(((fecbuffer[1] >> 2) & 0x03) << 2) |\
 800e5f8:	4662      	mov	r2, ip
 800e5fa:	0895      	lsrs	r5, r2, #2
 800e5fc:	00ad      	lsls	r5, r5, #2
 800e5fe:	220c      	movs	r2, #12
 800e600:	4015      	ands	r5, r2
			*data++ = (((fecbuffer[0] >> 2) & 0x03)) |\
 800e602:	465a      	mov	r2, fp
 800e604:	432a      	orrs	r2, r5
							(((fecbuffer[2] >> 2) & 0x03) << 4) |\
 800e606:	08bd      	lsrs	r5, r7, #2
 800e608:	012d      	lsls	r5, r5, #4
 800e60a:	400d      	ands	r5, r1
							(((fecbuffer[1] >> 2) & 0x03) << 2) |\
 800e60c:	4315      	orrs	r5, r2
							(((fecbuffer[3] >> 2) & 0x03) << 6);
 800e60e:	08b2      	lsrs	r2, r6, #2
 800e610:	0192      	lsls	r2, r2, #6
							(((fecbuffer[2] >> 2) & 0x03) << 4) |\
 800e612:	4315      	orrs	r5, r2
			*data++ = (((fecbuffer[0] >> 2) & 0x03)) |\
 800e614:	464a      	mov	r2, r9
 800e616:	7055      	strb	r5, [r2, #1]
			*data++ = (((fecbuffer[0] >> 4) & 0x03)) |\
 800e618:	4642      	mov	r2, r8
 800e61a:	0915      	lsrs	r5, r2, #4
 800e61c:	4652      	mov	r2, sl
 800e61e:	402a      	ands	r2, r5
 800e620:	4692      	mov	sl, r2
							(((fecbuffer[1] >> 4) & 0x03) << 2) |\
 800e622:	4662      	mov	r2, ip
 800e624:	0915      	lsrs	r5, r2, #4
 800e626:	00ad      	lsls	r5, r5, #2
 800e628:	220c      	movs	r2, #12
 800e62a:	4015      	ands	r5, r2
			*data++ = (((fecbuffer[0] >> 4) & 0x03)) |\
 800e62c:	4652      	mov	r2, sl
 800e62e:	432a      	orrs	r2, r5
							(((fecbuffer[2] >> 4) & 0x03) << 4) |\
 800e630:	093d      	lsrs	r5, r7, #4
 800e632:	012d      	lsls	r5, r5, #4
 800e634:	400d      	ands	r5, r1
							(((fecbuffer[1] >> 4) & 0x03) << 2) |\
 800e636:	4315      	orrs	r5, r2
							(((fecbuffer[3] >> 4) & 0x03) << 6);
 800e638:	0932      	lsrs	r2, r6, #4
 800e63a:	0192      	lsls	r2, r2, #6
							(((fecbuffer[2] >> 4) & 0x03) << 4) |\
 800e63c:	4315      	orrs	r5, r2
			*data++ = (((fecbuffer[0] >> 4) & 0x03)) |\
 800e63e:	464a      	mov	r2, r9
 800e640:	7095      	strb	r5, [r2, #2]
							(((fecbuffer[1] >> 6) & 0x03) << 2) |\
 800e642:	4662      	mov	r2, ip
 800e644:	0995      	lsrs	r5, r2, #6
 800e646:	00ad      	lsls	r5, r5, #2
 800e648:	220c      	movs	r2, #12
 800e64a:	402a      	ands	r2, r5
			*data++ = (((fecbuffer[0] >> 6) & 0x03)) |\
 800e64c:	4645      	mov	r5, r8
 800e64e:	09ad      	lsrs	r5, r5, #6
 800e650:	432a      	orrs	r2, r5
							(((fecbuffer[2] >> 6) & 0x03) << 4) |\
 800e652:	09bf      	lsrs	r7, r7, #6
 800e654:	013f      	lsls	r7, r7, #4
 800e656:	400f      	ands	r7, r1
							(((fecbuffer[1] >> 6) & 0x03) << 2) |\
 800e658:	4317      	orrs	r7, r2
							(((fecbuffer[3] >> 6) & 0x03) << 6);
 800e65a:	09b6      	lsrs	r6, r6, #6
 800e65c:	01b6      	lsls	r6, r6, #6
							(((fecbuffer[2] >> 6) & 0x03) << 4) |\
 800e65e:	433e      	orrs	r6, r7
			*data++ = (((fecbuffer[0] >> 6) & 0x03)) |\
 800e660:	464a      	mov	r2, r9
 800e662:	70d6      	strb	r6, [r2, #3]
			fecbuffer[0] = 0;
 800e664:	2200      	movs	r2, #0
 800e666:	7022      	strb	r2, [r4, #0]
			fecbuffer[1] = 0;
 800e668:	7062      	strb	r2, [r4, #1]
			fecbuffer[2] = 0;
 800e66a:	70a2      	strb	r2, [r4, #2]
			fecbuffer[3] = 0;
 800e66c:	70e2      	strb	r2, [r4, #3]
			length+=4;
 800e66e:	9a02      	ldr	r2, [sp, #8]
 800e670:	3204      	adds	r2, #4
 800e672:	b292      	uxth	r2, r2
 800e674:	9202      	str	r2, [sp, #8]
			*data++ = (((fecbuffer[0] >> 6) & 0x03)) |\
 800e676:	2204      	movs	r2, #4
 800e678:	4694      	mov	ip, r2
 800e67a:	44e1      	add	r9, ip
			buffer_pointer=0;
 800e67c:	2100      	movs	r1, #0
 800e67e:	e78e      	b.n	800e59e <fec_encode+0x8a>
 800e680:	200033e8 	.word	0x200033e8
 800e684:	0801a490 	.word	0x0801a490

0800e688 <fec_decode_packet>:
{
 800e688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e68a:	0007      	movs	r7, r0
 800e68c:	000e      	movs	r6, r1
	if(output_length < packet_length)
 800e68e:	428a      	cmp	r2, r1
 800e690:	d337      	bcc.n	800e702 <fec_decode_packet+0x7a>
	if(packet_length % 4 != 0)
 800e692:	2303      	movs	r3, #3
 800e694:	001d      	movs	r5, r3
 800e696:	400d      	ands	r5, r1
 800e698:	420b      	tst	r3, r1
 800e69a:	d134      	bne.n	800e706 <fec_decode_packet+0x7e>
	output_buffer = output;
 800e69c:	4b1b      	ldr	r3, [pc, #108]	; (800e70c <fec_decode_packet+0x84>)
 800e69e:	4a1c      	ldr	r2, [pc, #112]	; (800e710 <fec_decode_packet+0x88>)
 800e6a0:	601a      	str	r2, [r3, #0]
	packetlength = packet_length;
 800e6a2:	4b1c      	ldr	r3, [pc, #112]	; (800e714 <fec_decode_packet+0x8c>)
 800e6a4:	8019      	strh	r1, [r3, #0]
	processedbytes = 0;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	4a1b      	ldr	r2, [pc, #108]	; (800e718 <fec_decode_packet+0x90>)
 800e6aa:	7013      	strb	r3, [r2, #0]
	fecprocessedbytes = 0;
 800e6ac:	4a1b      	ldr	r2, [pc, #108]	; (800e71c <fec_decode_packet+0x94>)
 800e6ae:	8013      	strh	r3, [r2, #0]
	vstate.path_size = 0;
 800e6b0:	4b1b      	ldr	r3, [pc, #108]	; (800e720 <fec_decode_packet+0x98>)
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	701a      	strb	r2, [r3, #0]
	vstate.states1[0].cost = 0;
 800e6b6:	731a      	strb	r2, [r3, #12]
	for (i=1;i<8;i++)
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	2b07      	cmp	r3, #7
 800e6bc:	dc08      	bgt.n	800e6d0 <fec_decode_packet+0x48>
			vstate.states1[i].cost = 100;
 800e6be:	1c99      	adds	r1, r3, #2
 800e6c0:	0089      	lsls	r1, r1, #2
 800e6c2:	4a17      	ldr	r2, [pc, #92]	; (800e720 <fec_decode_packet+0x98>)
 800e6c4:	1852      	adds	r2, r2, r1
 800e6c6:	2164      	movs	r1, #100	; 0x64
 800e6c8:	7111      	strb	r1, [r2, #4]
	for (i=1;i<8;i++)
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	b21b      	sxth	r3, r3
 800e6ce:	e7f4      	b.n	800e6ba <fec_decode_packet+0x32>
	vstate.old = vstate.states1;
 800e6d0:	4b13      	ldr	r3, [pc, #76]	; (800e720 <fec_decode_packet+0x98>)
 800e6d2:	001a      	movs	r2, r3
 800e6d4:	320c      	adds	r2, #12
 800e6d6:	605a      	str	r2, [r3, #4]
	vstate.new = vstate.states2;
 800e6d8:	001a      	movs	r2, r3
 800e6da:	322c      	adds	r2, #44	; 0x2c
 800e6dc:	609a      	str	r2, [r3, #8]
	for(i = 0; i < packet_length; i = i + 4)
 800e6de:	2400      	movs	r4, #0
 800e6e0:	e006      	b.n	800e6f0 <fec_decode_packet+0x68>
		bool err = fec_decode(&data[i]);
 800e6e2:	1938      	adds	r0, r7, r4
 800e6e4:	f7ff fd9e 	bl	800e224 <fec_decode>
		decoded_length+=2;
 800e6e8:	3502      	adds	r5, #2
 800e6ea:	b2ad      	uxth	r5, r5
	for(i = 0; i < packet_length; i = i + 4)
 800e6ec:	3404      	adds	r4, #4
 800e6ee:	b224      	sxth	r4, r4
 800e6f0:	42b4      	cmp	r4, r6
 800e6f2:	dbf6      	blt.n	800e6e2 <fec_decode_packet+0x5a>
	memcpy(data, data_buffer, decoded_length);
 800e6f4:	002a      	movs	r2, r5
 800e6f6:	4906      	ldr	r1, [pc, #24]	; (800e710 <fec_decode_packet+0x88>)
 800e6f8:	0038      	movs	r0, r7
 800e6fa:	f006 fb69 	bl	8014dd0 <memcpy>
}
 800e6fe:	0028      	movs	r0, r5
 800e700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 800e702:	2500      	movs	r5, #0
 800e704:	e7fb      	b.n	800e6fe <fec_decode_packet+0x76>
		return 0;
 800e706:	2500      	movs	r5, #0
 800e708:	e7f9      	b.n	800e6fe <fec_decode_packet+0x76>
 800e70a:	46c0      	nop			; (mov r8, r8)
 800e70c:	200034ec 	.word	0x200034ec
 800e710:	200033e8 	.word	0x200033e8
 800e714:	200034f0 	.word	0x200034f0
 800e718:	200034f2 	.word	0x200034f2
 800e71c:	200034e8 	.word	0x200034e8
 800e720:	200034f4 	.word	0x200034f4

0800e724 <skip>:
  if(len > fifo_get_size(fifo)) { return ESIZE; }

  return SUCCESS;
}

static void skip(fifo_t* fifo, uint16_t len) {
 800e724:	b570      	push	{r4, r5, r6, lr}
 800e726:	0004      	movs	r4, r0
 800e728:	000d      	movs	r5, r1
  // progress head to implement popping behaviour
  fifo->head_idx = (fifo->head_idx + len);
 800e72a:	8800      	ldrh	r0, [r0, #0]
 800e72c:	1840      	adds	r0, r0, r1
 800e72e:	b280      	uxth	r0, r0
 800e730:	8020      	strh	r0, [r4, #0]
  if(fifo->head_idx >= fifo->max_size)
 800e732:	88a1      	ldrh	r1, [r4, #4]
 800e734:	4288      	cmp	r0, r1
 800e736:	d302      	bcc.n	800e73e <skip+0x1a>
  {
    fifo->head_idx = fifo->head_idx % fifo->max_size;
 800e738:	f003 fa70 	bl	8011c1c <__aeabi_uidivmod>
 800e73c:	8021      	strh	r1, [r4, #0]
  }

  if(len > 0)
 800e73e:	2d00      	cmp	r5, #0
 800e740:	d001      	beq.n	800e746 <skip+0x22>
    fifo->is_full = 0;
 800e742:	2300      	movs	r3, #0
 800e744:	7323      	strb	r3, [r4, #12]
}
 800e746:	bd70      	pop	{r4, r5, r6, pc}

0800e748 <fifo_init_filled>:
    fifo->buffer = buffer;
 800e748:	6081      	str	r1, [r0, #8]
    fifo->head_idx = 0;
 800e74a:	2100      	movs	r1, #0
 800e74c:	8001      	strh	r1, [r0, #0]
    fifo->max_size = max_size;
 800e74e:	8083      	strh	r3, [r0, #4]
    fifo->tail_idx = filled_size == max_size ? 0 : filled_size;
 800e750:	4293      	cmp	r3, r2
 800e752:	d008      	beq.n	800e766 <fifo_init_filled+0x1e>
 800e754:	0011      	movs	r1, r2
 800e756:	8041      	strh	r1, [r0, #2]
    fifo->is_full = (filled_size == max_size);
 800e758:	1a9b      	subs	r3, r3, r2
 800e75a:	425a      	negs	r2, r3
 800e75c:	4153      	adcs	r3, r2
 800e75e:	7303      	strb	r3, [r0, #12]
    fifo->is_subview = false;    
 800e760:	2300      	movs	r3, #0
 800e762:	7343      	strb	r3, [r0, #13]
}
 800e764:	4770      	bx	lr
    fifo->tail_idx = filled_size == max_size ? 0 : filled_size;
 800e766:	2100      	movs	r1, #0
 800e768:	e7f5      	b.n	800e756 <fifo_init_filled+0xe>

0800e76a <fifo_init>:
{
 800e76a:	b510      	push	{r4, lr}
 800e76c:	0013      	movs	r3, r2
    fifo_init_filled(fifo, buffer, 0, max_size);
 800e76e:	2200      	movs	r2, #0
 800e770:	f7ff ffea 	bl	800e748 <fifo_init_filled>
}
 800e774:	bd10      	pop	{r4, pc}
	...

0800e778 <fifo_put>:
{
 800e778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e77a:	0004      	movs	r4, r0
 800e77c:	000e      	movs	r6, r1
 800e77e:	0015      	movs	r5, r2
    if(fifo->is_subview)
 800e780:	7b43      	ldrb	r3, [r0, #13]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d149      	bne.n	800e81a <fifo_put+0xa2>
    if(fifo->is_full)
 800e786:	7b03      	ldrb	r3, [r0, #12]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d148      	bne.n	800e81e <fifo_put+0xa6>
    if(fifo->tail_idx < fifo->head_idx)
 800e78c:	8840      	ldrh	r0, [r0, #2]
 800e78e:	8823      	ldrh	r3, [r4, #0]
 800e790:	4298      	cmp	r0, r3
 800e792:	d215      	bcs.n	800e7c0 <fifo_put+0x48>
        if(fifo->tail_idx + len > fifo->head_idx)
 800e794:	1812      	adds	r2, r2, r0
 800e796:	429a      	cmp	r2, r3
 800e798:	dd01      	ble.n	800e79e <fifo_put+0x26>
            return ESIZE;
 800e79a:	4822      	ldr	r0, [pc, #136]	; (800e824 <fifo_put+0xac>)
 800e79c:	e03e      	b.n	800e81c <fifo_put+0xa4>
        memcpy(fifo->buffer + fifo->tail_idx, data, len);
 800e79e:	68a3      	ldr	r3, [r4, #8]
 800e7a0:	469c      	mov	ip, r3
 800e7a2:	4460      	add	r0, ip
 800e7a4:	002a      	movs	r2, r5
 800e7a6:	f006 fb13 	bl	8014dd0 <memcpy>
        fifo->tail_idx += len;
 800e7aa:	8862      	ldrh	r2, [r4, #2]
 800e7ac:	18ad      	adds	r5, r5, r2
 800e7ae:	b2ad      	uxth	r5, r5
 800e7b0:	8065      	strh	r5, [r4, #2]
        fifo->is_full = (fifo->tail_idx == fifo->head_idx);
 800e7b2:	8823      	ldrh	r3, [r4, #0]
 800e7b4:	1aed      	subs	r5, r5, r3
 800e7b6:	426b      	negs	r3, r5
 800e7b8:	415d      	adcs	r5, r3
 800e7ba:	7325      	strb	r5, [r4, #12]
        return SUCCESS;
 800e7bc:	2000      	movs	r0, #0
 800e7be:	e02d      	b.n	800e81c <fifo_put+0xa4>
    if(fifo->tail_idx + len < fifo->max_size)
 800e7c0:	1811      	adds	r1, r2, r0
 800e7c2:	88a2      	ldrh	r2, [r4, #4]
 800e7c4:	4291      	cmp	r1, r2
 800e7c6:	db08      	blt.n	800e7da <fifo_put+0x62>
    uint16_t space_left_before_max_size = fifo->max_size - fifo->tail_idx;
 800e7c8:	1a17      	subs	r7, r2, r0
 800e7ca:	b2bf      	uxth	r7, r7
    uint16_t space_needed_after_wrap = len - space_left_before_max_size;
 800e7cc:	1a82      	subs	r2, r0, r2
 800e7ce:	18ad      	adds	r5, r5, r2
 800e7d0:	b2ad      	uxth	r5, r5
    if(fifo->head_idx >= space_needed_after_wrap)
 800e7d2:	42ab      	cmp	r3, r5
 800e7d4:	d20d      	bcs.n	800e7f2 <fifo_put+0x7a>
        return ESIZE;
 800e7d6:	4813      	ldr	r0, [pc, #76]	; (800e824 <fifo_put+0xac>)
 800e7d8:	e020      	b.n	800e81c <fifo_put+0xa4>
        memcpy(fifo->buffer + fifo->tail_idx, data, len);
 800e7da:	68a3      	ldr	r3, [r4, #8]
 800e7dc:	469c      	mov	ip, r3
 800e7de:	4460      	add	r0, ip
 800e7e0:	002a      	movs	r2, r5
 800e7e2:	0031      	movs	r1, r6
 800e7e4:	f006 faf4 	bl	8014dd0 <memcpy>
        fifo->tail_idx += len;
 800e7e8:	8862      	ldrh	r2, [r4, #2]
 800e7ea:	18ad      	adds	r5, r5, r2
 800e7ec:	8065      	strh	r5, [r4, #2]
        return SUCCESS;
 800e7ee:	2000      	movs	r0, #0
 800e7f0:	e014      	b.n	800e81c <fifo_put+0xa4>
        memcpy(fifo->buffer + fifo->tail_idx, data, space_left_before_max_size);
 800e7f2:	68a3      	ldr	r3, [r4, #8]
 800e7f4:	469c      	mov	ip, r3
 800e7f6:	4460      	add	r0, ip
 800e7f8:	003a      	movs	r2, r7
 800e7fa:	0031      	movs	r1, r6
 800e7fc:	f006 fae8 	bl	8014dd0 <memcpy>
        memcpy(fifo->buffer, data + space_left_before_max_size, space_needed_after_wrap);
 800e800:	19f1      	adds	r1, r6, r7
 800e802:	002a      	movs	r2, r5
 800e804:	68a0      	ldr	r0, [r4, #8]
 800e806:	f006 fae3 	bl	8014dd0 <memcpy>
        fifo->tail_idx = space_needed_after_wrap;
 800e80a:	8065      	strh	r5, [r4, #2]
        fifo->is_full = (fifo->tail_idx == fifo->head_idx);
 800e80c:	8823      	ldrh	r3, [r4, #0]
 800e80e:	1b5d      	subs	r5, r3, r5
 800e810:	426b      	negs	r3, r5
 800e812:	415d      	adcs	r5, r3
 800e814:	7325      	strb	r5, [r4, #12]
        return SUCCESS;
 800e816:	2000      	movs	r0, #0
 800e818:	e000      	b.n	800e81c <fifo_put+0xa4>
        return EINVAL;
 800e81a:	2016      	movs	r0, #22
}
 800e81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return ESIZE;
 800e81e:	4801      	ldr	r0, [pc, #4]	; (800e824 <fifo_put+0xac>)
 800e820:	e7fc      	b.n	800e81c <fifo_put+0xa4>
 800e822:	46c0      	nop			; (mov r8, r8)
 800e824:	0000138a 	.word	0x0000138a

0800e828 <fifo_put_byte>:
{
 800e828:	b500      	push	{lr}
 800e82a:	b083      	sub	sp, #12
 800e82c:	466b      	mov	r3, sp
 800e82e:	71d9      	strb	r1, [r3, #7]
 800e830:	3307      	adds	r3, #7
    return fifo_put(fifo, &byte, 1);
 800e832:	2201      	movs	r2, #1
 800e834:	0019      	movs	r1, r3
 800e836:	f7ff ff9f 	bl	800e778 <fifo_put>
}
 800e83a:	b003      	add	sp, #12
 800e83c:	bd00      	pop	{pc}

0800e83e <fifo_get_size>:
  return SUCCESS;
}

uint16_t fifo_get_size(fifo_t* fifo)
{
    if(fifo->head_idx == fifo->tail_idx)
 800e83e:	8802      	ldrh	r2, [r0, #0]
 800e840:	8843      	ldrh	r3, [r0, #2]
 800e842:	429a      	cmp	r2, r3
 800e844:	d003      	beq.n	800e84e <fifo_get_size+0x10>
        return fifo->is_full ? fifo->max_size : 0;
    else if(fifo->head_idx < fifo->tail_idx)
 800e846:	d209      	bcs.n	800e85c <fifo_get_size+0x1e>
        return fifo->tail_idx - fifo->head_idx;
 800e848:	1a9b      	subs	r3, r3, r2
 800e84a:	b298      	uxth	r0, r3
    else
        return fifo->tail_idx + (fifo->max_size - fifo->head_idx);
}
 800e84c:	4770      	bx	lr
        return fifo->is_full ? fifo->max_size : 0;
 800e84e:	7b03      	ldrb	r3, [r0, #12]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d001      	beq.n	800e858 <fifo_get_size+0x1a>
 800e854:	8880      	ldrh	r0, [r0, #4]
 800e856:	e7f9      	b.n	800e84c <fifo_get_size+0xe>
 800e858:	2000      	movs	r0, #0
 800e85a:	e7f7      	b.n	800e84c <fifo_get_size+0xe>
        return fifo->tail_idx + (fifo->max_size - fifo->head_idx);
 800e85c:	8880      	ldrh	r0, [r0, #4]
 800e85e:	1a80      	subs	r0, r0, r2
 800e860:	b280      	uxth	r0, r0
 800e862:	1818      	adds	r0, r3, r0
 800e864:	b280      	uxth	r0, r0
 800e866:	e7f1      	b.n	800e84c <fifo_get_size+0xe>

0800e868 <fifo_init_subview>:
error_t fifo_init_subview(fifo_t *subset_fifo, fifo_t* original_fifo, uint16_t offset, uint16_t subset_size) {
 800e868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e86a:	46c6      	mov	lr, r8
 800e86c:	b500      	push	{lr}
 800e86e:	0006      	movs	r6, r0
 800e870:	000c      	movs	r4, r1
 800e872:	0015      	movs	r5, r2
 800e874:	001f      	movs	r7, r3
    if(offset + subset_size > fifo_get_size(original_fifo))
 800e876:	18d3      	adds	r3, r2, r3
 800e878:	4698      	mov	r8, r3
 800e87a:	0008      	movs	r0, r1
 800e87c:	f7ff ffdf 	bl	800e83e <fifo_get_size>
 800e880:	4580      	cmp	r8, r0
 800e882:	dc1a      	bgt.n	800e8ba <fifo_init_subview+0x52>
    subset_fifo->buffer = original_fifo->buffer;
 800e884:	68a3      	ldr	r3, [r4, #8]
 800e886:	60b3      	str	r3, [r6, #8]
    subset_fifo->head_idx = (original_fifo->head_idx + offset) % original_fifo->max_size;
 800e888:	8820      	ldrh	r0, [r4, #0]
 800e88a:	1828      	adds	r0, r5, r0
 800e88c:	88a1      	ldrh	r1, [r4, #4]
 800e88e:	f003 faaf 	bl	8011df0 <__aeabi_idivmod>
 800e892:	8031      	strh	r1, [r6, #0]
    subset_fifo->tail_idx = (original_fifo->head_idx + offset + subset_size) % original_fifo->max_size;
 800e894:	8820      	ldrh	r0, [r4, #0]
 800e896:	1828      	adds	r0, r5, r0
 800e898:	1838      	adds	r0, r7, r0
 800e89a:	88a1      	ldrh	r1, [r4, #4]
 800e89c:	f003 faa8 	bl	8011df0 <__aeabi_idivmod>
 800e8a0:	8071      	strh	r1, [r6, #2]
    subset_fifo->max_size = original_fifo->max_size;
 800e8a2:	88a3      	ldrh	r3, [r4, #4]
 800e8a4:	80b3      	strh	r3, [r6, #4]
    subset_fifo->is_full = (subset_size == subset_fifo->max_size);
 800e8a6:	1bdb      	subs	r3, r3, r7
 800e8a8:	425f      	negs	r7, r3
 800e8aa:	417b      	adcs	r3, r7
 800e8ac:	7333      	strb	r3, [r6, #12]
    subset_fifo->is_subview = true;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	7373      	strb	r3, [r6, #13]
    return SUCCESS;
 800e8b2:	2000      	movs	r0, #0
}
 800e8b4:	bc04      	pop	{r2}
 800e8b6:	4690      	mov	r8, r2
 800e8b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ESIZE;
 800e8ba:	4801      	ldr	r0, [pc, #4]	; (800e8c0 <fifo_init_subview+0x58>)
 800e8bc:	e7fa      	b.n	800e8b4 <fifo_init_subview+0x4c>
 800e8be:	46c0      	nop			; (mov r8, r8)
 800e8c0:	0000138a 	.word	0x0000138a

0800e8c4 <check_len>:
static error_t check_len(fifo_t* fifo, uint16_t len) {
 800e8c4:	b510      	push	{r4, lr}
 800e8c6:	1e0c      	subs	r4, r1, #0
  if(len == 0) { return SUCCESS; }
 800e8c8:	d005      	beq.n	800e8d6 <check_len+0x12>
  if(len > fifo_get_size(fifo)) { return ESIZE; }
 800e8ca:	f7ff ffb8 	bl	800e83e <fifo_get_size>
 800e8ce:	42a0      	cmp	r0, r4
 800e8d0:	d303      	bcc.n	800e8da <check_len+0x16>
  return SUCCESS;
 800e8d2:	2000      	movs	r0, #0
}
 800e8d4:	bd10      	pop	{r4, pc}
  if(len == 0) { return SUCCESS; }
 800e8d6:	2000      	movs	r0, #0
 800e8d8:	e7fc      	b.n	800e8d4 <check_len+0x10>
  if(len > fifo_get_size(fifo)) { return ESIZE; }
 800e8da:	4801      	ldr	r0, [pc, #4]	; (800e8e0 <check_len+0x1c>)
 800e8dc:	e7fa      	b.n	800e8d4 <check_len+0x10>
 800e8de:	46c0      	nop			; (mov r8, r8)
 800e8e0:	0000138a 	.word	0x0000138a

0800e8e4 <fifo_skip>:
error_t fifo_skip(fifo_t* fifo, uint16_t len) {
 800e8e4:	b570      	push	{r4, r5, r6, lr}
 800e8e6:	0005      	movs	r5, r0
 800e8e8:	000e      	movs	r6, r1
  error_t err = check_len(fifo, len);
 800e8ea:	f7ff ffeb 	bl	800e8c4 <check_len>
 800e8ee:	1e04      	subs	r4, r0, #0
  if(err != SUCCESS)
 800e8f0:	d001      	beq.n	800e8f6 <fifo_skip+0x12>
}
 800e8f2:	0020      	movs	r0, r4
 800e8f4:	bd70      	pop	{r4, r5, r6, pc}
  skip(fifo, len);
 800e8f6:	0031      	movs	r1, r6
 800e8f8:	0028      	movs	r0, r5
 800e8fa:	f7ff ff13 	bl	800e724 <skip>
  return SUCCESS;
 800e8fe:	e7f8      	b.n	800e8f2 <fifo_skip+0xe>

0800e900 <fifo_peek>:
error_t fifo_peek(fifo_t* fifo, uint8_t* buffer, uint16_t offset, uint16_t len) {
 800e900:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e902:	46d6      	mov	lr, sl
 800e904:	464f      	mov	r7, r9
 800e906:	4646      	mov	r6, r8
 800e908:	b5c0      	push	{r6, r7, lr}
 800e90a:	0006      	movs	r6, r0
 800e90c:	4689      	mov	r9, r1
 800e90e:	0014      	movs	r4, r2
 800e910:	001f      	movs	r7, r3
  error_t err = check_len(fifo, offset + len);
 800e912:	18d1      	adds	r1, r2, r3
 800e914:	b289      	uxth	r1, r1
 800e916:	f7ff ffd5 	bl	800e8c4 <check_len>
 800e91a:	4680      	mov	r8, r0
  if(err != SUCCESS)
 800e91c:	2800      	cmp	r0, #0
 800e91e:	d11f      	bne.n	800e960 <fifo_peek+0x60>
  uint16_t start_idx = (fifo->head_idx + offset) % fifo->max_size;
 800e920:	8830      	ldrh	r0, [r6, #0]
 800e922:	1820      	adds	r0, r4, r0
 800e924:	88b4      	ldrh	r4, [r6, #4]
 800e926:	0021      	movs	r1, r4
 800e928:	f003 fa62 	bl	8011df0 <__aeabi_idivmod>
 800e92c:	b28b      	uxth	r3, r1
 800e92e:	469a      	mov	sl, r3
  uint16_t end_idx   = (start_idx      + len   ) % fifo->max_size;
 800e930:	0409      	lsls	r1, r1, #16
 800e932:	0c0d      	lsrs	r5, r1, #16
 800e934:	1978      	adds	r0, r7, r5
 800e936:	0021      	movs	r1, r4
 800e938:	f003 fa5a 	bl	8011df0 <__aeabi_idivmod>
 800e93c:	b289      	uxth	r1, r1
  if(end_idx >= start_idx) {
 800e93e:	458a      	cmp	sl, r1
 800e940:	d914      	bls.n	800e96c <fifo_peek+0x6c>
  uint16_t part1 = fifo->max_size - start_idx;
 800e942:	4653      	mov	r3, sl
 800e944:	1ae4      	subs	r4, r4, r3
 800e946:	b2a4      	uxth	r4, r4
  memcpy(buffer,         fifo->buffer + start_idx, part1);
 800e948:	68b3      	ldr	r3, [r6, #8]
 800e94a:	1959      	adds	r1, r3, r5
 800e94c:	0022      	movs	r2, r4
 800e94e:	4648      	mov	r0, r9
 800e950:	f006 fa3e 	bl	8014dd0 <memcpy>
  memcpy(buffer + part1, fifo->buffer,             len - part1);
 800e954:	464b      	mov	r3, r9
 800e956:	1918      	adds	r0, r3, r4
 800e958:	68b1      	ldr	r1, [r6, #8]
 800e95a:	1b3a      	subs	r2, r7, r4
 800e95c:	f006 fa38 	bl	8014dd0 <memcpy>
}
 800e960:	4640      	mov	r0, r8
 800e962:	bc1c      	pop	{r2, r3, r4}
 800e964:	4690      	mov	r8, r2
 800e966:	4699      	mov	r9, r3
 800e968:	46a2      	mov	sl, r4
 800e96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy(buffer, fifo->buffer + start_idx, len);
 800e96c:	68b1      	ldr	r1, [r6, #8]
 800e96e:	1949      	adds	r1, r1, r5
 800e970:	003a      	movs	r2, r7
 800e972:	4648      	mov	r0, r9
 800e974:	f006 fa2c 	bl	8014dd0 <memcpy>
    return SUCCESS;
 800e978:	e7f2      	b.n	800e960 <fifo_peek+0x60>

0800e97a <fifo_pop>:
error_t fifo_pop(fifo_t* fifo, uint8_t* buffer, uint16_t len) {
 800e97a:	b570      	push	{r4, r5, r6, lr}
 800e97c:	0005      	movs	r5, r0
 800e97e:	0016      	movs	r6, r2
  error_t err = fifo_peek(fifo, buffer, 0, len);
 800e980:	0013      	movs	r3, r2
 800e982:	2200      	movs	r2, #0
 800e984:	f7ff ffbc 	bl	800e900 <fifo_peek>
 800e988:	1e04      	subs	r4, r0, #0
  if( err != SUCCESS ) { return err; }
 800e98a:	d001      	beq.n	800e990 <fifo_pop+0x16>
}
 800e98c:	0020      	movs	r0, r4
 800e98e:	bd70      	pop	{r4, r5, r6, pc}
  skip(fifo, len);
 800e990:	0031      	movs	r1, r6
 800e992:	0028      	movs	r0, r5
 800e994:	f7ff fec6 	bl	800e724 <skip>
  return SUCCESS;
 800e998:	e7f8      	b.n	800e98c <fifo_pop+0x12>

0800e99a <fifo_clear>:
    }
}

void fifo_clear(fifo_t* fifo)
{
    fifo->head_idx = 0;
 800e99a:	2300      	movs	r3, #0
 800e99c:	8003      	strh	r3, [r0, #0]
    fifo->tail_idx = 0;
 800e99e:	8043      	strh	r3, [r0, #2]
    fifo->is_full = false;
 800e9a0:	7303      	strb	r3, [r0, #12]
}
 800e9a2:	4770      	bx	lr

0800e9a4 <_fs_verify_magic>:
}


/* The magic number allows to check filesystem integrity.*/
static int _fs_verify_magic(uint8_t* expected_magic_number)
{
 800e9a4:	b510      	push	{r4, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	0004      	movs	r4, r0
    is_fs_init_completed = false;
 800e9aa:	4b0d      	ldr	r3, [pc, #52]	; (800e9e0 <_fs_verify_magic+0x3c>)
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	701a      	strb	r2, [r3, #0]

    uint8_t magic_number[FS_MAGIC_NUMBER_SIZE];
    memset(magic_number,0,FS_MAGIC_NUMBER_SIZE);
 800e9b0:	3204      	adds	r2, #4
 800e9b2:	2100      	movs	r1, #0
 800e9b4:	a801      	add	r0, sp, #4
 800e9b6:	f006 fa5f 	bl	8014e78 <memset>
    blockdevice_read(bd[FS_BLOCKDEVICE_TYPE_METADATA], magic_number, 0, FS_MAGIC_NUMBER_SIZE);
 800e9ba:	4b0a      	ldr	r3, [pc, #40]	; (800e9e4 <_fs_verify_magic+0x40>)
 800e9bc:	6818      	ldr	r0, [r3, #0]
 800e9be:	2304      	movs	r3, #4
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	a901      	add	r1, sp, #4
 800e9c4:	f001 ffa2 	bl	801090c <blockdevice_read>
    if(memcmp(expected_magic_number, magic_number, FS_MAGIC_NUMBER_SIZE) != 0) // if not the FS on EEPROM is not compatible with the current code
 800e9c8:	2204      	movs	r2, #4
 800e9ca:	a901      	add	r1, sp, #4
 800e9cc:	0020      	movs	r0, r4
 800e9ce:	f006 f9d7 	bl	8014d80 <memcmp>
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	d101      	bne.n	800e9da <_fs_verify_magic+0x36>
        return -EINVAL;

    return 0;
}
 800e9d6:	b002      	add	sp, #8
 800e9d8:	bd10      	pop	{r4, pc}
        return -EINVAL;
 800e9da:	2016      	movs	r0, #22
 800e9dc:	4240      	negs	r0, r0
 800e9de:	e7fa      	b.n	800e9d6 <_fs_verify_magic+0x32>
 800e9e0:	200037e0 	.word	0x200037e0
 800e9e4:	20003540 	.word	0x20003540

0800e9e8 <_fs_create_magic>:
{
 800e9e8:	b500      	push	{lr}
 800e9ea:	b083      	sub	sp, #12
    assert(!is_fs_init_completed);
 800e9ec:	4b08      	ldr	r3, [pc, #32]	; (800ea10 <_fs_create_magic+0x28>)
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d106      	bne.n	800ea02 <_fs_create_magic+0x1a>
    uint8_t magic[] = FS_MAGIC_NUMBER;
 800e9f4:	4b07      	ldr	r3, [pc, #28]	; (800ea14 <_fs_create_magic+0x2c>)
 800e9f6:	9301      	str	r3, [sp, #4]
    return _fs_verify_magic(magic);
 800e9f8:	a801      	add	r0, sp, #4
 800e9fa:	f7ff ffd3 	bl	800e9a4 <_fs_verify_magic>
}
 800e9fe:	b003      	add	sp, #12
 800ea00:	bd00      	pop	{pc}
    assert(!is_fs_init_completed);
 800ea02:	4b05      	ldr	r3, [pc, #20]	; (800ea18 <_fs_create_magic+0x30>)
 800ea04:	4a05      	ldr	r2, [pc, #20]	; (800ea1c <_fs_create_magic+0x34>)
 800ea06:	219c      	movs	r1, #156	; 0x9c
 800ea08:	4805      	ldr	r0, [pc, #20]	; (800ea20 <_fs_create_magic+0x38>)
 800ea0a:	f7f9 fdf9 	bl	8008600 <__assert_func>
 800ea0e:	46c0      	nop			; (mov r8, r8)
 800ea10:	200037e0 	.word	0x200037e0
 800ea14:	0000c234 	.word	0x0000c234
 800ea18:	0801a4b0 	.word	0x0801a4b0
 800ea1c:	0801a554 	.word	0x0801a554
 800ea20:	0801a4c8 	.word	0x0801a4c8

0800ea24 <_fs_init>:
{
 800ea24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea26:	b083      	sub	sp, #12
    uint8_t expected_magic_number[FS_MAGIC_NUMBER_SIZE] = FS_MAGIC_NUMBER;
 800ea28:	4b3c      	ldr	r3, [pc, #240]	; (800eb1c <_fs_init+0xf8>)
 800ea2a:	9301      	str	r3, [sp, #4]
    if (_fs_verify_magic(expected_magic_number) < 0)
 800ea2c:	a801      	add	r0, sp, #4
 800ea2e:	f7ff ffb9 	bl	800e9a4 <_fs_verify_magic>
 800ea32:	2800      	cmp	r0, #0
 800ea34:	db0d      	blt.n	800ea52 <_fs_init+0x2e>
    blockdevice_read(bd[FS_BLOCKDEVICE_TYPE_METADATA], (uint8_t*)&number_of_files, FS_NUMBER_OF_FILES_ADDRESS, FS_NUMBER_OF_FILES_SIZE);
 800ea36:	4b3a      	ldr	r3, [pc, #232]	; (800eb20 <_fs_init+0xfc>)
 800ea38:	6818      	ldr	r0, [r3, #0]
 800ea3a:	2304      	movs	r3, #4
 800ea3c:	2204      	movs	r2, #4
 800ea3e:	4669      	mov	r1, sp
 800ea40:	f001 ff64 	bl	801090c <blockdevice_read>
    number_of_files = __builtin_bswap32(number_of_files);
 800ea44:	9b00      	ldr	r3, [sp, #0]
 800ea46:	ba1b      	rev	r3, r3
 800ea48:	9300      	str	r3, [sp, #0]
    assert(number_of_files < FRAMEWORK_FS_FILE_COUNT);
 800ea4a:	2b47      	cmp	r3, #71	; 0x47
 800ea4c:	d80f      	bhi.n	800ea6e <_fs_init+0x4a>
    for(int file_id = 0; file_id < FRAMEWORK_FS_FILE_COUNT; file_id++)
 800ea4e:	2600      	movs	r6, #0
 800ea50:	e01a      	b.n	800ea88 <_fs_init+0x64>
        _fs_create_magic();
 800ea52:	f7ff ffc9 	bl	800e9e8 <_fs_create_magic>
        number_of_files = 0;
 800ea56:	2300      	movs	r3, #0
 800ea58:	9300      	str	r3, [sp, #0]
        blockdevice_program(bd[FS_BLOCKDEVICE_TYPE_METADATA], (uint8_t*)&number_of_files, FS_NUMBER_OF_FILES_ADDRESS, FS_NUMBER_OF_FILES_SIZE);
 800ea5a:	4b31      	ldr	r3, [pc, #196]	; (800eb20 <_fs_init+0xfc>)
 800ea5c:	6818      	ldr	r0, [r3, #0]
 800ea5e:	2304      	movs	r3, #4
 800ea60:	2204      	movs	r2, #4
 800ea62:	4669      	mov	r1, sp
 800ea64:	f001 ff6a 	bl	801093c <blockdevice_program>
}
 800ea68:	2000      	movs	r0, #0
 800ea6a:	b003      	add	sp, #12
 800ea6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(number_of_files < FRAMEWORK_FS_FILE_COUNT);
 800ea6e:	4b2d      	ldr	r3, [pc, #180]	; (800eb24 <_fs_init+0x100>)
 800ea70:	4a2d      	ldr	r2, [pc, #180]	; (800eb28 <_fs_init+0x104>)
 800ea72:	2180      	movs	r1, #128	; 0x80
 800ea74:	482d      	ldr	r0, [pc, #180]	; (800eb2c <_fs_init+0x108>)
 800ea76:	f7f9 fdc3 	bl	8008600 <__assert_func>
                bd_data_offset[files[file_id].blockdevice_index] += files[file_id].length;
 800ea7a:	492d      	ldr	r1, [pc, #180]	; (800eb30 <_fs_init+0x10c>)
 800ea7c:	0092      	lsls	r2, r2, #2
 800ea7e:	5850      	ldr	r0, [r2, r1]
 800ea80:	4684      	mov	ip, r0
 800ea82:	4463      	add	r3, ip
 800ea84:	5053      	str	r3, [r2, r1]
    for(int file_id = 0; file_id < FRAMEWORK_FS_FILE_COUNT; file_id++)
 800ea86:	3601      	adds	r6, #1
 800ea88:	2e47      	cmp	r6, #71	; 0x47
 800ea8a:	dced      	bgt.n	800ea68 <_fs_init+0x44>
        blockdevice_read(bd[FS_BLOCKDEVICE_TYPE_METADATA], (uint8_t*)&files[file_id],
 800ea8c:	00f4      	lsls	r4, r6, #3
 800ea8e:	19a4      	adds	r4, r4, r6
 800ea90:	4d28      	ldr	r5, [pc, #160]	; (800eb34 <_fs_init+0x110>)
 800ea92:	1964      	adds	r4, r4, r5
    return FS_FILE_HEADERS_ADDRESS + (file_id * FS_FILE_HEADER_SIZE);
 800ea94:	27ff      	movs	r7, #255	; 0xff
 800ea96:	4037      	ands	r7, r6
 800ea98:	00fb      	lsls	r3, r7, #3
 800ea9a:	19df      	adds	r7, r3, r7
 800ea9c:	003a      	movs	r2, r7
 800ea9e:	3208      	adds	r2, #8
        blockdevice_read(bd[FS_BLOCKDEVICE_TYPE_METADATA], (uint8_t*)&files[file_id],
 800eaa0:	4b1f      	ldr	r3, [pc, #124]	; (800eb20 <_fs_init+0xfc>)
 800eaa2:	6818      	ldr	r0, [r3, #0]
 800eaa4:	2309      	movs	r3, #9
 800eaa6:	0021      	movs	r1, r4
 800eaa8:	f001 ff30 	bl	801090c <blockdevice_read>
        files[file_id].addr = __builtin_bswap32(files[file_id].addr);
 800eaac:	7963      	ldrb	r3, [r4, #5]
 800eaae:	79a2      	ldrb	r2, [r4, #6]
 800eab0:	0212      	lsls	r2, r2, #8
 800eab2:	431a      	orrs	r2, r3
 800eab4:	79e3      	ldrb	r3, [r4, #7]
 800eab6:	041b      	lsls	r3, r3, #16
 800eab8:	431a      	orrs	r2, r3
 800eaba:	7a23      	ldrb	r3, [r4, #8]
 800eabc:	061b      	lsls	r3, r3, #24
 800eabe:	4313      	orrs	r3, r2
 800eac0:	ba1b      	rev	r3, r3
 800eac2:	7163      	strb	r3, [r4, #5]
 800eac4:	0a19      	lsrs	r1, r3, #8
 800eac6:	71a1      	strb	r1, [r4, #6]
 800eac8:	0c19      	lsrs	r1, r3, #16
 800eaca:	71e1      	strb	r1, [r4, #7]
 800eacc:	0e1b      	lsrs	r3, r3, #24
 800eace:	7223      	strb	r3, [r4, #8]
        files[file_id].length = __builtin_bswap32(files[file_id].length);
 800ead0:	7863      	ldrb	r3, [r4, #1]
 800ead2:	78a2      	ldrb	r2, [r4, #2]
 800ead4:	0212      	lsls	r2, r2, #8
 800ead6:	431a      	orrs	r2, r3
 800ead8:	78e3      	ldrb	r3, [r4, #3]
 800eada:	041b      	lsls	r3, r3, #16
 800eadc:	431a      	orrs	r2, r3
 800eade:	7923      	ldrb	r3, [r4, #4]
 800eae0:	061b      	lsls	r3, r3, #24
 800eae2:	4313      	orrs	r3, r2
 800eae4:	ba1b      	rev	r3, r3
 800eae6:	7063      	strb	r3, [r4, #1]
 800eae8:	0a19      	lsrs	r1, r3, #8
 800eaea:	70a1      	strb	r1, [r4, #2]
 800eaec:	0c19      	lsrs	r1, r3, #16
 800eaee:	70e1      	strb	r1, [r4, #3]
 800eaf0:	0e19      	lsrs	r1, r3, #24
 800eaf2:	7121      	strb	r1, [r4, #4]
    return files[file_id].length != 0;
 800eaf4:	19ed      	adds	r5, r5, r7
 800eaf6:	786a      	ldrb	r2, [r5, #1]
 800eaf8:	78a9      	ldrb	r1, [r5, #2]
 800eafa:	0209      	lsls	r1, r1, #8
 800eafc:	4311      	orrs	r1, r2
 800eafe:	78ea      	ldrb	r2, [r5, #3]
 800eb00:	0412      	lsls	r2, r2, #16
 800eb02:	4311      	orrs	r1, r2
 800eb04:	792a      	ldrb	r2, [r5, #4]
 800eb06:	0612      	lsls	r2, r2, #24
 800eb08:	430a      	orrs	r2, r1
        if(_is_file_defined(file_id))
 800eb0a:	d0bc      	beq.n	800ea86 <_fs_init+0x62>
            if (files[file_id].blockdevice_index == FS_BLOCKDEVICE_TYPE_VOLATILE)
 800eb0c:	00f2      	lsls	r2, r6, #3
 800eb0e:	1992      	adds	r2, r2, r6
 800eb10:	4908      	ldr	r1, [pc, #32]	; (800eb34 <_fs_init+0x110>)
 800eb12:	5c52      	ldrb	r2, [r2, r1]
 800eb14:	2a02      	cmp	r2, #2
 800eb16:	d1b0      	bne.n	800ea7a <_fs_init+0x56>
 800eb18:	e7b5      	b.n	800ea86 <_fs_init+0x62>
 800eb1a:	46c0      	nop			; (mov r8, r8)
 800eb1c:	0000c234 	.word	0x0000c234
 800eb20:	20003540 	.word	0x20003540
 800eb24:	0801a504 	.word	0x0801a504
 800eb28:	0801a548 	.word	0x0801a548
 800eb2c:	0801a4c8 	.word	0x0801a4c8
 800eb30:	2000354c 	.word	0x2000354c
 800eb34:	20003558 	.word	0x20003558

0800eb38 <_fs_create_file>:


int _fs_create_file(uint8_t file_id, fs_blockdevice_types_t bd_type, const uint8_t* initial_data, uint32_t initial_data_length, uint32_t length)
{
 800eb38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb3a:	46de      	mov	lr, fp
 800eb3c:	4657      	mov	r7, sl
 800eb3e:	464e      	mov	r6, r9
 800eb40:	4645      	mov	r5, r8
 800eb42:	b5e0      	push	{r5, r6, r7, lr}
 800eb44:	b093      	sub	sp, #76	; 0x4c
 800eb46:	0004      	movs	r4, r0
 800eb48:	468b      	mov	fp, r1
 800eb4a:	0016      	movs	r6, r2
 800eb4c:	469a      	mov	sl, r3
 800eb4e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    if(file_id >= FRAMEWORK_FS_FILE_COUNT)
 800eb50:	2847      	cmp	r0, #71	; 0x47
 800eb52:	d900      	bls.n	800eb56 <_fs_create_file+0x1e>
 800eb54:	e11a      	b.n	800ed8c <_fs_create_file+0x254>
    return files[file_id].length != 0;
 800eb56:	9000      	str	r0, [sp, #0]
 800eb58:	00c3      	lsls	r3, r0, #3
 800eb5a:	181b      	adds	r3, r3, r0
 800eb5c:	4a90      	ldr	r2, [pc, #576]	; (800eda0 <_fs_create_file+0x268>)
 800eb5e:	18d3      	adds	r3, r2, r3
 800eb60:	7859      	ldrb	r1, [r3, #1]
 800eb62:	789a      	ldrb	r2, [r3, #2]
 800eb64:	0212      	lsls	r2, r2, #8
 800eb66:	4311      	orrs	r1, r2
 800eb68:	78da      	ldrb	r2, [r3, #3]
 800eb6a:	0412      	lsls	r2, r2, #16
 800eb6c:	430a      	orrs	r2, r1
 800eb6e:	791b      	ldrb	r3, [r3, #4]
 800eb70:	061b      	lsls	r3, r3, #24
 800eb72:	4313      	orrs	r3, r2
 800eb74:	4699      	mov	r9, r3
        return -EBADF;

    if (_is_file_defined(file_id))
 800eb76:	d000      	beq.n	800eb7a <_fs_create_file+0x42>
 800eb78:	e10b      	b.n	800ed92 <_fs_create_file+0x25a>
        return -EEXIST;

    if((bd_data_offset[bd_type] + length) > bd[bd_type]->size)
 800eb7a:	46d8      	mov	r8, fp
 800eb7c:	465b      	mov	r3, fp
 800eb7e:	009a      	lsls	r2, r3, #2
 800eb80:	4b88      	ldr	r3, [pc, #544]	; (800eda4 <_fs_create_file+0x26c>)
 800eb82:	58d3      	ldr	r3, [r2, r3]
 800eb84:	1959      	adds	r1, r3, r5
 800eb86:	4888      	ldr	r0, [pc, #544]	; (800eda8 <_fs_create_file+0x270>)
 800eb88:	5812      	ldr	r2, [r2, r0]
 800eb8a:	6852      	ldr	r2, [r2, #4]
 800eb8c:	4291      	cmp	r1, r2
 800eb8e:	d900      	bls.n	800eb92 <_fs_create_file+0x5a>
 800eb90:	e102      	b.n	800ed98 <_fs_create_file+0x260>
    {
        return -ENOMEM;
    }

    // update file caching for stat lookup
    files[file_id].blockdevice_index = (uint8_t)bd_type;
 800eb92:	4a83      	ldr	r2, [pc, #524]	; (800eda0 <_fs_create_file+0x268>)
 800eb94:	00e0      	lsls	r0, r4, #3
 800eb96:	1900      	adds	r0, r0, r4
 800eb98:	465f      	mov	r7, fp
 800eb9a:	5487      	strb	r7, [r0, r2]
    files[file_id].length = length;
 800eb9c:	1812      	adds	r2, r2, r0
 800eb9e:	1c50      	adds	r0, r2, #1
 800eba0:	7055      	strb	r5, [r2, #1]
 800eba2:	0a2a      	lsrs	r2, r5, #8
 800eba4:	7042      	strb	r2, [r0, #1]
 800eba6:	0c2a      	lsrs	r2, r5, #16
 800eba8:	7082      	strb	r2, [r0, #2]
 800ebaa:	0e2a      	lsrs	r2, r5, #24
 800ebac:	70c2      	strb	r2, [r0, #3]

    if (bd_type == FS_BLOCKDEVICE_TYPE_VOLATILE)
 800ebae:	2f02      	cmp	r7, #2
 800ebb0:	d121      	bne.n	800ebf6 <_fs_create_file+0xbe>
    {
        files[file_id].addr = bd_data_offset[bd_type];
 800ebb2:	00e0      	lsls	r0, r4, #3
 800ebb4:	1900      	adds	r0, r0, r4
 800ebb6:	4a7a      	ldr	r2, [pc, #488]	; (800eda0 <_fs_create_file+0x268>)
 800ebb8:	1812      	adds	r2, r2, r0
 800ebba:	1d50      	adds	r0, r2, #5
 800ebbc:	7153      	strb	r3, [r2, #5]
 800ebbe:	0a1a      	lsrs	r2, r3, #8
 800ebc0:	7042      	strb	r2, [r0, #1]
 800ebc2:	0c1a      	lsrs	r2, r3, #16
 800ebc4:	7082      	strb	r2, [r0, #2]
 800ebc6:	0e1b      	lsrs	r3, r3, #24
 800ebc8:	70c3      	strb	r3, [r0, #3]
        bd_data_offset[bd_type] += length;        
 800ebca:	00bb      	lsls	r3, r7, #2
 800ebcc:	4a75      	ldr	r2, [pc, #468]	; (800eda4 <_fs_create_file+0x26c>)
 800ebce:	5099      	str	r1, [r3, r2]
#endif

        bd_data_offset[bd_type] += length;
    }

    if(initial_data != NULL) {
 800ebd0:	2e00      	cmp	r6, #0
 800ebd2:	d100      	bne.n	800ebd6 <_fs_create_file+0x9e>
 800ebd4:	e09b      	b.n	800ed0e <_fs_create_file+0x1d6>
        uint32_t current_address = files[file_id].addr;
 800ebd6:	00e0      	lsls	r0, r4, #3
 800ebd8:	1900      	adds	r0, r0, r4
 800ebda:	4c71      	ldr	r4, [pc, #452]	; (800eda0 <_fs_create_file+0x268>)
 800ebdc:	1824      	adds	r4, r4, r0
 800ebde:	7965      	ldrb	r5, [r4, #5]
 800ebe0:	79a3      	ldrb	r3, [r4, #6]
 800ebe2:	021b      	lsls	r3, r3, #8
 800ebe4:	432b      	orrs	r3, r5
 800ebe6:	79e5      	ldrb	r5, [r4, #7]
 800ebe8:	042d      	lsls	r5, r5, #16
 800ebea:	432b      	orrs	r3, r5
 800ebec:	7a25      	ldrb	r5, [r4, #8]
 800ebee:	062d      	lsls	r5, r5, #24
 800ebf0:	431d      	orrs	r5, r3
        uint32_t remaining_length = initial_data_length;
 800ebf2:	4654      	mov	r4, sl
 800ebf4:	e05f      	b.n	800ecb6 <_fs_create_file+0x17e>
        files[file_id].addr = bd_data_offset[bd_type];
 800ebf6:	00e1      	lsls	r1, r4, #3
 800ebf8:	1909      	adds	r1, r1, r4
 800ebfa:	4a69      	ldr	r2, [pc, #420]	; (800eda0 <_fs_create_file+0x268>)
 800ebfc:	1851      	adds	r1, r2, r1
 800ebfe:	714b      	strb	r3, [r1, #5]
 800ec00:	0a18      	lsrs	r0, r3, #8
 800ec02:	7188      	strb	r0, [r1, #6]
 800ec04:	0c18      	lsrs	r0, r3, #16
 800ec06:	71c8      	strb	r0, [r1, #7]
 800ec08:	0e1b      	lsrs	r3, r3, #24
 800ec0a:	720b      	strb	r3, [r1, #8]
        memcpy(&file_header_big_endian, (void*)&files[file_id], sizeof (fs_file_t));
 800ec0c:	2209      	movs	r2, #9
 800ec0e:	a802      	add	r0, sp, #8
 800ec10:	f006 f8de 	bl	8014dd0 <memcpy>
        file_header_big_endian.length = __builtin_bswap32(file_header_big_endian.length);
 800ec14:	9b02      	ldr	r3, [sp, #8]
 800ec16:	0a1a      	lsrs	r2, r3, #8
 800ec18:	ab02      	add	r3, sp, #8
 800ec1a:	791b      	ldrb	r3, [r3, #4]
 800ec1c:	061b      	lsls	r3, r3, #24
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	ba1b      	rev	r3, r3
 800ec22:	aa02      	add	r2, sp, #8
 800ec24:	7053      	strb	r3, [r2, #1]
 800ec26:	0a19      	lsrs	r1, r3, #8
 800ec28:	7091      	strb	r1, [r2, #2]
 800ec2a:	0c19      	lsrs	r1, r3, #16
 800ec2c:	70d1      	strb	r1, [r2, #3]
 800ec2e:	0e1b      	lsrs	r3, r3, #24
 800ec30:	7113      	strb	r3, [r2, #4]
        file_header_big_endian.addr = __builtin_bswap32(file_header_big_endian.addr);
 800ec32:	9b03      	ldr	r3, [sp, #12]
 800ec34:	9301      	str	r3, [sp, #4]
 800ec36:	0a1a      	lsrs	r2, r3, #8
 800ec38:	ab02      	add	r3, sp, #8
 800ec3a:	7a1b      	ldrb	r3, [r3, #8]
 800ec3c:	061b      	lsls	r3, r3, #24
 800ec3e:	4313      	orrs	r3, r2
 800ec40:	ba1b      	rev	r3, r3
 800ec42:	aa02      	add	r2, sp, #8
 800ec44:	7153      	strb	r3, [r2, #5]
 800ec46:	0a19      	lsrs	r1, r3, #8
 800ec48:	7191      	strb	r1, [r2, #6]
 800ec4a:	0c19      	lsrs	r1, r3, #16
 800ec4c:	71d1      	strb	r1, [r2, #7]
 800ec4e:	0e1b      	lsrs	r3, r3, #24
 800ec50:	7213      	strb	r3, [r2, #8]
    return FS_FILE_HEADERS_ADDRESS + (file_id * FS_FILE_HEADER_SIZE);
 800ec52:	00e2      	lsls	r2, r4, #3
 800ec54:	1912      	adds	r2, r2, r4
 800ec56:	3208      	adds	r2, #8
        blockdevice_program(bd[FS_BLOCKDEVICE_TYPE_METADATA], (uint8_t*)&file_header_big_endian, _get_file_header_address(file_id), FS_FILE_HEADER_SIZE);
 800ec58:	4b53      	ldr	r3, [pc, #332]	; (800eda8 <_fs_create_file+0x270>)
 800ec5a:	6818      	ldr	r0, [r3, #0]
 800ec5c:	2309      	movs	r3, #9
 800ec5e:	a902      	add	r1, sp, #8
 800ec60:	f001 fe6c 	bl	801093c <blockdevice_program>
        bd_data_offset[bd_type] += length;
 800ec64:	4a4f      	ldr	r2, [pc, #316]	; (800eda4 <_fs_create_file+0x26c>)
 800ec66:	00b9      	lsls	r1, r7, #2
 800ec68:	588b      	ldr	r3, [r1, r2]
 800ec6a:	195b      	adds	r3, r3, r5
 800ec6c:	508b      	str	r3, [r1, r2]
 800ec6e:	e7af      	b.n	800ebd0 <_fs_create_file+0x98>
                DPRINT("program remaining length of %i", remaining_length);

                blockdevice_program(bd[bd_type], current_data, current_address, remaining_length);
                remaining_length = 0;
            /* else if this is the starting block, only write untill the end of the first write_block */
            } else if(current_address == files[file_id].addr) {
 800ec70:	9a00      	ldr	r2, [sp, #0]
 800ec72:	00d1      	lsls	r1, r2, #3
 800ec74:	4694      	mov	ip, r2
 800ec76:	4461      	add	r1, ip
 800ec78:	4a49      	ldr	r2, [pc, #292]	; (800eda0 <_fs_create_file+0x268>)
 800ec7a:	1851      	adds	r1, r2, r1
 800ec7c:	794a      	ldrb	r2, [r1, #5]
 800ec7e:	4694      	mov	ip, r2
 800ec80:	798a      	ldrb	r2, [r1, #6]
 800ec82:	0212      	lsls	r2, r2, #8
 800ec84:	4667      	mov	r7, ip
 800ec86:	4317      	orrs	r7, r2
 800ec88:	79ca      	ldrb	r2, [r1, #7]
 800ec8a:	0412      	lsls	r2, r2, #16
 800ec8c:	4317      	orrs	r7, r2
 800ec8e:	7a0a      	ldrb	r2, [r1, #8]
 800ec90:	0612      	lsls	r2, r2, #24
 800ec92:	433a      	orrs	r2, r7
 800ec94:	42aa      	cmp	r2, r5
 800ec96:	d024      	beq.n	800ece2 <_fs_create_file+0x1aa>
                current_address += initial_data_length - remaining_length;
            /* else this is a block in between, just program the maximum amount of block size */
            } else {
                DPRINT("program write block size of %lu while remaining_length is %i at address %i", (uint32_t)bd[bd_type]->driver->write_block_size, remaining_length, current_address);

                remaining_length -= bd[bd_type]->driver->write_block_size;
 800ec98:	1ae4      	subs	r4, r4, r3
                blockdevice_program(bd[bd_type], current_data, current_address, bd[bd_type]->driver->write_block_size);
 800ec9a:	002a      	movs	r2, r5
 800ec9c:	0031      	movs	r1, r6
 800ec9e:	f001 fe4d 	bl	801093c <blockdevice_program>
                current_data += bd[bd_type]->driver->write_block_size;
 800eca2:	4643      	mov	r3, r8
 800eca4:	009b      	lsls	r3, r3, #2
 800eca6:	4a40      	ldr	r2, [pc, #256]	; (800eda8 <_fs_create_file+0x270>)
 800eca8:	589b      	ldr	r3, [r3, r2]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	69db      	ldr	r3, [r3, #28]
 800ecae:	18f6      	adds	r6, r6, r3
                current_address += bd[bd_type]->driver->write_block_size;
 800ecb0:	18ed      	adds	r5, r5, r3
            }
        } while (remaining_length > 0);
 800ecb2:	2c00      	cmp	r4, #0
 800ecb4:	d023      	beq.n	800ecfe <_fs_create_file+0x1c6>
            if((remaining_length <= bd[bd_type]->driver->write_block_size) && ((bd[bd_type]->driver->write_block_size == UINT32_MAX) || ((current_address & (0xFFFFFFFF - (bd[bd_type]->driver->write_block_size - 1))) == ((current_address + remaining_length) & (0xFFFFFFFF - (bd[bd_type]->driver->write_block_size - 1)))))) {
 800ecb6:	4643      	mov	r3, r8
 800ecb8:	009b      	lsls	r3, r3, #2
 800ecba:	4a3b      	ldr	r2, [pc, #236]	; (800eda8 <_fs_create_file+0x270>)
 800ecbc:	5898      	ldr	r0, [r3, r2]
 800ecbe:	6803      	ldr	r3, [r0, #0]
 800ecc0:	69db      	ldr	r3, [r3, #28]
 800ecc2:	42a3      	cmp	r3, r4
 800ecc4:	d3d4      	bcc.n	800ec70 <_fs_create_file+0x138>
 800ecc6:	1c5a      	adds	r2, r3, #1
 800ecc8:	d004      	beq.n	800ecd4 <_fs_create_file+0x19c>
 800ecca:	192a      	adds	r2, r5, r4
 800eccc:	4259      	negs	r1, r3
 800ecce:	406a      	eors	r2, r5
 800ecd0:	4211      	tst	r1, r2
 800ecd2:	d1cd      	bne.n	800ec70 <_fs_create_file+0x138>
                blockdevice_program(bd[bd_type], current_data, current_address, remaining_length);
 800ecd4:	0023      	movs	r3, r4
 800ecd6:	002a      	movs	r2, r5
 800ecd8:	0031      	movs	r1, r6
 800ecda:	f001 fe2f 	bl	801093c <blockdevice_program>
                remaining_length = 0;
 800ecde:	464c      	mov	r4, r9
 800ece0:	e7e7      	b.n	800ecb2 <_fs_create_file+0x17a>
                remaining_length -= bd[bd_type]->driver->write_block_size - (current_address & (bd[bd_type]->driver->write_block_size - 1));
 800ece2:	1e5a      	subs	r2, r3, #1
 800ece4:	402a      	ands	r2, r5
 800ece6:	1ad3      	subs	r3, r2, r3
 800ece8:	18e4      	adds	r4, r4, r3
                blockdevice_program(bd[bd_type], current_data, current_address, initial_data_length - remaining_length);
 800ecea:	4653      	mov	r3, sl
 800ecec:	1b1b      	subs	r3, r3, r4
 800ecee:	469b      	mov	fp, r3
 800ecf0:	002a      	movs	r2, r5
 800ecf2:	0031      	movs	r1, r6
 800ecf4:	f001 fe22 	bl	801093c <blockdevice_program>
                current_data += initial_data_length - remaining_length;
 800ecf8:	445e      	add	r6, fp
                current_address += initial_data_length - remaining_length;
 800ecfa:	445d      	add	r5, fp
 800ecfc:	e7d9      	b.n	800ecb2 <_fs_create_file+0x17a>

        blockdevice_program(bd[bd_type], default_data, files[file_id].addr  + (i * 64), remaining_length);
    }

    DPRINT("fs init file(file_id %d, bd_type %d, addr %i, length %d)\n",file_id, bd_type, files[file_id].addr, length);
    return 0;
 800ecfe:	2000      	movs	r0, #0
}
 800ed00:	b013      	add	sp, #76	; 0x4c
 800ed02:	bc3c      	pop	{r2, r3, r4, r5}
 800ed04:	4690      	mov	r8, r2
 800ed06:	4699      	mov	r9, r3
 800ed08:	46a2      	mov	sl, r4
 800ed0a:	46ab      	mov	fp, r5
 800ed0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memset(default_data, 0xff, 64);
 800ed0e:	2240      	movs	r2, #64	; 0x40
 800ed10:	21ff      	movs	r1, #255	; 0xff
 800ed12:	a802      	add	r0, sp, #8
 800ed14:	f006 f8b0 	bl	8014e78 <memset>
        int i = 0;
 800ed18:	2600      	movs	r6, #0
        while(remaining_length > 64) {
 800ed1a:	e01b      	b.n	800ed54 <_fs_create_file+0x21c>
          blockdevice_program(bd[bd_type], default_data, files[file_id].addr + (i * 64), 64);
 800ed1c:	9a00      	ldr	r2, [sp, #0]
 800ed1e:	00d3      	lsls	r3, r2, #3
 800ed20:	4694      	mov	ip, r2
 800ed22:	4463      	add	r3, ip
 800ed24:	4a1e      	ldr	r2, [pc, #120]	; (800eda0 <_fs_create_file+0x268>)
 800ed26:	18d3      	adds	r3, r2, r3
 800ed28:	795a      	ldrb	r2, [r3, #5]
 800ed2a:	7999      	ldrb	r1, [r3, #6]
 800ed2c:	0209      	lsls	r1, r1, #8
 800ed2e:	4311      	orrs	r1, r2
 800ed30:	79da      	ldrb	r2, [r3, #7]
 800ed32:	0412      	lsls	r2, r2, #16
 800ed34:	4311      	orrs	r1, r2
 800ed36:	7a1a      	ldrb	r2, [r3, #8]
 800ed38:	0612      	lsls	r2, r2, #24
 800ed3a:	430a      	orrs	r2, r1
 800ed3c:	01b3      	lsls	r3, r6, #6
 800ed3e:	18d2      	adds	r2, r2, r3
 800ed40:	4643      	mov	r3, r8
 800ed42:	009b      	lsls	r3, r3, #2
 800ed44:	4918      	ldr	r1, [pc, #96]	; (800eda8 <_fs_create_file+0x270>)
 800ed46:	5858      	ldr	r0, [r3, r1]
 800ed48:	2340      	movs	r3, #64	; 0x40
 800ed4a:	a902      	add	r1, sp, #8
 800ed4c:	f001 fdf6 	bl	801093c <blockdevice_program>
          remaining_length -= 64;
 800ed50:	3d40      	subs	r5, #64	; 0x40
          i++;
 800ed52:	3601      	adds	r6, #1
        while(remaining_length > 64) {
 800ed54:	2d40      	cmp	r5, #64	; 0x40
 800ed56:	d8e1      	bhi.n	800ed1c <_fs_create_file+0x1e4>
        blockdevice_program(bd[bd_type], default_data, files[file_id].addr  + (i * 64), remaining_length);
 800ed58:	00e0      	lsls	r0, r4, #3
 800ed5a:	1900      	adds	r0, r0, r4
 800ed5c:	4c10      	ldr	r4, [pc, #64]	; (800eda0 <_fs_create_file+0x268>)
 800ed5e:	1824      	adds	r4, r4, r0
 800ed60:	7962      	ldrb	r2, [r4, #5]
 800ed62:	79a3      	ldrb	r3, [r4, #6]
 800ed64:	021b      	lsls	r3, r3, #8
 800ed66:	4313      	orrs	r3, r2
 800ed68:	79e2      	ldrb	r2, [r4, #7]
 800ed6a:	0412      	lsls	r2, r2, #16
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	7a22      	ldrb	r2, [r4, #8]
 800ed70:	0612      	lsls	r2, r2, #24
 800ed72:	431a      	orrs	r2, r3
 800ed74:	01b6      	lsls	r6, r6, #6
 800ed76:	1992      	adds	r2, r2, r6
 800ed78:	465b      	mov	r3, fp
 800ed7a:	0099      	lsls	r1, r3, #2
 800ed7c:	4b0a      	ldr	r3, [pc, #40]	; (800eda8 <_fs_create_file+0x270>)
 800ed7e:	58c8      	ldr	r0, [r1, r3]
 800ed80:	002b      	movs	r3, r5
 800ed82:	a902      	add	r1, sp, #8
 800ed84:	f001 fdda 	bl	801093c <blockdevice_program>
    return 0;
 800ed88:	2000      	movs	r0, #0
 800ed8a:	e7b9      	b.n	800ed00 <_fs_create_file+0x1c8>
        return -EBADF;
 800ed8c:	2009      	movs	r0, #9
 800ed8e:	4240      	negs	r0, r0
 800ed90:	e7b6      	b.n	800ed00 <_fs_create_file+0x1c8>
        return -EEXIST;
 800ed92:	2011      	movs	r0, #17
 800ed94:	4240      	negs	r0, r0
 800ed96:	e7b3      	b.n	800ed00 <_fs_create_file+0x1c8>
        return -ENOMEM;
 800ed98:	200c      	movs	r0, #12
 800ed9a:	4240      	negs	r0, r0
 800ed9c:	e7b0      	b.n	800ed00 <_fs_create_file+0x1c8>
 800ed9e:	46c0      	nop			; (mov r8, r8)
 800eda0:	20003558 	.word	0x20003558
 800eda4:	2000354c 	.word	0x2000354c
 800eda8:	20003540 	.word	0x20003540

0800edac <fs_init>:
{
 800edac:	b510      	push	{r4, lr}
    if (is_fs_init_completed)
 800edae:	4b0d      	ldr	r3, [pc, #52]	; (800ede4 <fs_init+0x38>)
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d000      	beq.n	800edb8 <fs_init+0xc>
}
 800edb6:	bd10      	pop	{r4, pc}
    memset(files,0,sizeof(files));
 800edb8:	22a2      	movs	r2, #162	; 0xa2
 800edba:	0092      	lsls	r2, r2, #2
 800edbc:	2100      	movs	r1, #0
 800edbe:	480a      	ldr	r0, [pc, #40]	; (800ede8 <fs_init+0x3c>)
 800edc0:	f006 f85a 	bl	8014e78 <memset>
    bd[FS_BLOCKDEVICE_TYPE_METADATA] = PLATFORM_METADATA_BLOCKDEVICE;
 800edc4:	4b09      	ldr	r3, [pc, #36]	; (800edec <fs_init+0x40>)
 800edc6:	4a0a      	ldr	r2, [pc, #40]	; (800edf0 <fs_init+0x44>)
 800edc8:	6812      	ldr	r2, [r2, #0]
 800edca:	601a      	str	r2, [r3, #0]
    bd[FS_BLOCKDEVICE_TYPE_PERMANENT] = PLATFORM_PERMANENT_BLOCKDEVICE;
 800edcc:	4a09      	ldr	r2, [pc, #36]	; (800edf4 <fs_init+0x48>)
 800edce:	6812      	ldr	r2, [r2, #0]
 800edd0:	605a      	str	r2, [r3, #4]
    bd[FS_BLOCKDEVICE_TYPE_VOLATILE] = PLATFORM_VOLATILE_BLOCKDEVICE;
 800edd2:	4a09      	ldr	r2, [pc, #36]	; (800edf8 <fs_init+0x4c>)
 800edd4:	6812      	ldr	r2, [r2, #0]
 800edd6:	609a      	str	r2, [r3, #8]
    _fs_init();
 800edd8:	f7ff fe24 	bl	800ea24 <_fs_init>
    is_fs_init_completed = true;
 800eddc:	4b01      	ldr	r3, [pc, #4]	; (800ede4 <fs_init+0x38>)
 800edde:	2201      	movs	r2, #1
 800ede0:	701a      	strb	r2, [r3, #0]
    DPRINT("fs_init OK");
 800ede2:	e7e8      	b.n	800edb6 <fs_init+0xa>
 800ede4:	200037e0 	.word	0x200037e0
 800ede8:	20003558 	.word	0x20003558
 800edec:	20003540 	.word	0x20003540
 800edf0:	080195e0 	.word	0x080195e0
 800edf4:	080195e4 	.word	0x080195e4
 800edf8:	080195e8 	.word	0x080195e8

0800edfc <fs_init_file>:

int fs_init_file(uint8_t file_id, fs_blockdevice_types_t bd_type, const uint8_t* initial_data, uint32_t initial_data_length, uint32_t length)
{
 800edfc:	b510      	push	{r4, lr}
 800edfe:	b082      	sub	sp, #8
    assert(is_fs_init_completed);
 800ee00:	4c0a      	ldr	r4, [pc, #40]	; (800ee2c <fs_init_file+0x30>)
 800ee02:	7824      	ldrb	r4, [r4, #0]
 800ee04:	2c00      	cmp	r4, #0
 800ee06:	d007      	beq.n	800ee18 <fs_init_file+0x1c>
    if(file_id >= FRAMEWORK_FS_FILE_COUNT)
 800ee08:	2847      	cmp	r0, #71	; 0x47
 800ee0a:	d80c      	bhi.n	800ee26 <fs_init_file+0x2a>
        return -EBADF;
   
    return (_fs_create_file(file_id, bd_type, initial_data, initial_data_length, length));
 800ee0c:	9c04      	ldr	r4, [sp, #16]
 800ee0e:	9400      	str	r4, [sp, #0]
 800ee10:	f7ff fe92 	bl	800eb38 <_fs_create_file>
}
 800ee14:	b002      	add	sp, #8
 800ee16:	bd10      	pop	{r4, pc}
    assert(is_fs_init_completed);
 800ee18:	210e      	movs	r1, #14
 800ee1a:	4b05      	ldr	r3, [pc, #20]	; (800ee30 <fs_init_file+0x34>)
 800ee1c:	4a05      	ldr	r2, [pc, #20]	; (800ee34 <fs_init_file+0x38>)
 800ee1e:	31ff      	adds	r1, #255	; 0xff
 800ee20:	4805      	ldr	r0, [pc, #20]	; (800ee38 <fs_init_file+0x3c>)
 800ee22:	f7f9 fbed 	bl	8008600 <__assert_func>
        return -EBADF;
 800ee26:	2009      	movs	r0, #9
 800ee28:	4240      	negs	r0, r0
 800ee2a:	e7f3      	b.n	800ee14 <fs_init_file+0x18>
 800ee2c:	200037e0 	.word	0x200037e0
 800ee30:	0801a530 	.word	0x0801a530
 800ee34:	0801a568 	.word	0x0801a568
 800ee38:	0801a4c8 	.word	0x0801a4c8

0800ee3c <fs_read_file>:

int fs_read_file(uint8_t file_id, uint32_t offset, uint8_t* buffer, uint32_t length)
{
 800ee3c:	b570      	push	{r4, r5, r6, lr}
 800ee3e:	0004      	movs	r4, r0
 800ee40:	000e      	movs	r6, r1
 800ee42:	0011      	movs	r1, r2
    return files[file_id].length != 0;
 800ee44:	00c2      	lsls	r2, r0, #3
 800ee46:	1812      	adds	r2, r2, r0
 800ee48:	4819      	ldr	r0, [pc, #100]	; (800eeb0 <fs_read_file+0x74>)
 800ee4a:	1880      	adds	r0, r0, r2
 800ee4c:	7845      	ldrb	r5, [r0, #1]
 800ee4e:	7882      	ldrb	r2, [r0, #2]
 800ee50:	0212      	lsls	r2, r2, #8
 800ee52:	432a      	orrs	r2, r5
 800ee54:	78c5      	ldrb	r5, [r0, #3]
 800ee56:	042d      	lsls	r5, r5, #16
 800ee58:	432a      	orrs	r2, r5
 800ee5a:	7905      	ldrb	r5, [r0, #4]
 800ee5c:	062d      	lsls	r5, r5, #24
 800ee5e:	4315      	orrs	r5, r2
    if(!_is_file_defined(file_id)) return -ENOENT;
 800ee60:	d01d      	beq.n	800ee9e <fs_read_file+0x62>
    if(bd[files[file_id].blockdevice_index] == NULL) return -EFAULT;
 800ee62:	00e2      	lsls	r2, r4, #3
 800ee64:	1912      	adds	r2, r2, r4
 800ee66:	4812      	ldr	r0, [pc, #72]	; (800eeb0 <fs_read_file+0x74>)
 800ee68:	5c12      	ldrb	r2, [r2, r0]
 800ee6a:	0092      	lsls	r2, r2, #2
 800ee6c:	4811      	ldr	r0, [pc, #68]	; (800eeb4 <fs_read_file+0x78>)
 800ee6e:	5810      	ldr	r0, [r2, r0]
 800ee70:	2800      	cmp	r0, #0
 800ee72:	d017      	beq.n	800eea4 <fs_read_file+0x68>

    if(files[file_id].length < offset + length) return -EINVAL;
 800ee74:	18f2      	adds	r2, r6, r3
 800ee76:	42aa      	cmp	r2, r5
 800ee78:	d817      	bhi.n	800eeaa <fs_read_file+0x6e>
    
    DPRINT("fs read_file(file_id %d, offset %d, addr %p, bd %i, length %d)\n",file_id, offset, files[file_id].addr, files[file_id].blockdevice_index, length);
    return blockdevice_read(bd[files[file_id].blockdevice_index], buffer, files[file_id].addr + offset, length);
 800ee7a:	00e2      	lsls	r2, r4, #3
 800ee7c:	1912      	adds	r2, r2, r4
 800ee7e:	4c0c      	ldr	r4, [pc, #48]	; (800eeb0 <fs_read_file+0x74>)
 800ee80:	18a4      	adds	r4, r4, r2
 800ee82:	7962      	ldrb	r2, [r4, #5]
 800ee84:	79a5      	ldrb	r5, [r4, #6]
 800ee86:	022d      	lsls	r5, r5, #8
 800ee88:	4315      	orrs	r5, r2
 800ee8a:	79e2      	ldrb	r2, [r4, #7]
 800ee8c:	0412      	lsls	r2, r2, #16
 800ee8e:	4315      	orrs	r5, r2
 800ee90:	7a22      	ldrb	r2, [r4, #8]
 800ee92:	0612      	lsls	r2, r2, #24
 800ee94:	432a      	orrs	r2, r5
 800ee96:	1992      	adds	r2, r2, r6
 800ee98:	f001 fd38 	bl	801090c <blockdevice_read>
}
 800ee9c:	bd70      	pop	{r4, r5, r6, pc}
    if(!_is_file_defined(file_id)) return -ENOENT;
 800ee9e:	2002      	movs	r0, #2
 800eea0:	4240      	negs	r0, r0
 800eea2:	e7fb      	b.n	800ee9c <fs_read_file+0x60>
    if(bd[files[file_id].blockdevice_index] == NULL) return -EFAULT;
 800eea4:	200e      	movs	r0, #14
 800eea6:	4240      	negs	r0, r0
 800eea8:	e7f8      	b.n	800ee9c <fs_read_file+0x60>
    if(files[file_id].length < offset + length) return -EINVAL;
 800eeaa:	2016      	movs	r0, #22
 800eeac:	4240      	negs	r0, r0
 800eeae:	e7f5      	b.n	800ee9c <fs_read_file+0x60>
 800eeb0:	20003558 	.word	0x20003558
 800eeb4:	20003540 	.word	0x20003540

0800eeb8 <fs_write_file>:

int fs_write_file(uint8_t file_id, uint32_t offset, const uint8_t* buffer, uint32_t length)
{
 800eeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeba:	46ce      	mov	lr, r9
 800eebc:	4647      	mov	r7, r8
 800eebe:	b580      	push	{r7, lr}
 800eec0:	4690      	mov	r8, r2
 800eec2:	001d      	movs	r5, r3
    return files[file_id].length != 0;
 800eec4:	00c2      	lsls	r2, r0, #3
 800eec6:	1812      	adds	r2, r2, r0
 800eec8:	4b29      	ldr	r3, [pc, #164]	; (800ef70 <fs_write_file+0xb8>)
 800eeca:	189b      	adds	r3, r3, r2
 800eecc:	785c      	ldrb	r4, [r3, #1]
 800eece:	789a      	ldrb	r2, [r3, #2]
 800eed0:	0212      	lsls	r2, r2, #8
 800eed2:	4314      	orrs	r4, r2
 800eed4:	78da      	ldrb	r2, [r3, #3]
 800eed6:	0412      	lsls	r2, r2, #16
 800eed8:	4322      	orrs	r2, r4
 800eeda:	791b      	ldrb	r3, [r3, #4]
 800eedc:	061b      	lsls	r3, r3, #24
 800eede:	4313      	orrs	r3, r2
    if(!_is_file_defined(file_id)) return -ENOENT;
 800eee0:	d03d      	beq.n	800ef5e <fs_write_file+0xa6>
    if(bd[files[file_id].blockdevice_index] == NULL) return -EFAULT;
 800eee2:	00c2      	lsls	r2, r0, #3
 800eee4:	1812      	adds	r2, r2, r0
 800eee6:	4c22      	ldr	r4, [pc, #136]	; (800ef70 <fs_write_file+0xb8>)
 800eee8:	5d12      	ldrb	r2, [r2, r4]
 800eeea:	4691      	mov	r9, r2
 800eeec:	0094      	lsls	r4, r2, #2
 800eeee:	4a21      	ldr	r2, [pc, #132]	; (800ef74 <fs_write_file+0xbc>)
 800eef0:	58a2      	ldr	r2, [r4, r2]
 800eef2:	2a00      	cmp	r2, #0
 800eef4:	d036      	beq.n	800ef64 <fs_write_file+0xac>

    if(files[file_id].length < offset + length) return -ENOBUFS;
 800eef6:	194a      	adds	r2, r1, r5
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d836      	bhi.n	800ef6a <fs_write_file+0xb2>

    uint32_t current_address = files[file_id].addr + offset;
 800eefc:	00c3      	lsls	r3, r0, #3
 800eefe:	181b      	adds	r3, r3, r0
 800ef00:	481b      	ldr	r0, [pc, #108]	; (800ef70 <fs_write_file+0xb8>)
 800ef02:	18c0      	adds	r0, r0, r3
 800ef04:	7946      	ldrb	r6, [r0, #5]
 800ef06:	7983      	ldrb	r3, [r0, #6]
 800ef08:	021b      	lsls	r3, r3, #8
 800ef0a:	4333      	orrs	r3, r6
 800ef0c:	79c6      	ldrb	r6, [r0, #7]
 800ef0e:	0436      	lsls	r6, r6, #16
 800ef10:	4333      	orrs	r3, r6
 800ef12:	7a06      	ldrb	r6, [r0, #8]
 800ef14:	0636      	lsls	r6, r6, #24
 800ef16:	431e      	orrs	r6, r3
 800ef18:	1876      	adds	r6, r6, r1
    uint32_t remaining_length = length;
    uint8_t* current_data = (uint8_t*)buffer;
    fs_blockdevice_types_t bd_type = files[file_id].blockdevice_index;
 800ef1a:	e00a      	b.n	800ef32 <fs_write_file+0x7a>
    do {
        // calculate the number of bytes that can be written till the end of the block/page
        uint32_t bytes_until_end_of_block = bd[bd_type]->driver->write_block_size - ((current_address + bd[bd_type]->offset) % bd[bd_type]->driver->write_block_size);
        uint32_t bytes_to_program = remaining_length > bytes_until_end_of_block ? bytes_until_end_of_block : remaining_length;
        DPRINT("Programming %i bytes", bytes_to_program);
        blockdevice_program(bd[bd_type], current_data, current_address, bytes_to_program);
 800ef1c:	0023      	movs	r3, r4
 800ef1e:	0032      	movs	r2, r6
 800ef20:	4641      	mov	r1, r8
 800ef22:	0038      	movs	r0, r7
 800ef24:	f001 fd0a 	bl	801093c <blockdevice_program>
        remaining_length -= bytes_to_program;
 800ef28:	1b2d      	subs	r5, r5, r4
        current_data += bytes_to_program;
 800ef2a:	44a0      	add	r8, r4
        current_address += bytes_to_program;
 800ef2c:	1936      	adds	r6, r6, r4

    } while (remaining_length > 0);
 800ef2e:	2d00      	cmp	r5, #0
 800ef30:	d010      	beq.n	800ef54 <fs_write_file+0x9c>
        uint32_t bytes_until_end_of_block = bd[bd_type]->driver->write_block_size - ((current_address + bd[bd_type]->offset) % bd[bd_type]->driver->write_block_size);
 800ef32:	464b      	mov	r3, r9
 800ef34:	009b      	lsls	r3, r3, #2
 800ef36:	4a0f      	ldr	r2, [pc, #60]	; (800ef74 <fs_write_file+0xbc>)
 800ef38:	589f      	ldr	r7, [r3, r2]
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	69dc      	ldr	r4, [r3, #28]
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	1998      	adds	r0, r3, r6
 800ef42:	0021      	movs	r1, r4
 800ef44:	f002 fe6a 	bl	8011c1c <__aeabi_uidivmod>
 800ef48:	1a61      	subs	r1, r4, r1
        uint32_t bytes_to_program = remaining_length > bytes_until_end_of_block ? bytes_until_end_of_block : remaining_length;
 800ef4a:	002c      	movs	r4, r5
 800ef4c:	428d      	cmp	r5, r1
 800ef4e:	d9e5      	bls.n	800ef1c <fs_write_file+0x64>
 800ef50:	000c      	movs	r4, r1
 800ef52:	e7e3      	b.n	800ef1c <fs_write_file+0x64>

    DPRINT("fs write_file (file_id %d, offset %d, addr %lu, length %d)\n",
           file_id, offset, files[file_id].addr, length);

    return 0;
 800ef54:	2000      	movs	r0, #0
}
 800ef56:	bc0c      	pop	{r2, r3}
 800ef58:	4690      	mov	r8, r2
 800ef5a:	4699      	mov	r9, r3
 800ef5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(!_is_file_defined(file_id)) return -ENOENT;
 800ef5e:	2002      	movs	r0, #2
 800ef60:	4240      	negs	r0, r0
 800ef62:	e7f8      	b.n	800ef56 <fs_write_file+0x9e>
    if(bd[files[file_id].blockdevice_index] == NULL) return -EFAULT;
 800ef64:	200e      	movs	r0, #14
 800ef66:	4240      	negs	r0, r0
 800ef68:	e7f5      	b.n	800ef56 <fs_write_file+0x9e>
    if(files[file_id].length < offset + length) return -ENOBUFS;
 800ef6a:	2069      	movs	r0, #105	; 0x69
 800ef6c:	4240      	negs	r0, r0
 800ef6e:	e7f2      	b.n	800ef56 <fs_write_file+0x9e>
 800ef70:	20003558 	.word	0x20003558
 800ef74:	20003540 	.word	0x20003540

0800ef78 <fs_is_file_defined>:
    return files[file_id].length != 0;
 800ef78:	00c3      	lsls	r3, r0, #3
 800ef7a:	1818      	adds	r0, r3, r0
 800ef7c:	4b07      	ldr	r3, [pc, #28]	; (800ef9c <fs_is_file_defined+0x24>)
 800ef7e:	181b      	adds	r3, r3, r0
 800ef80:	7858      	ldrb	r0, [r3, #1]
 800ef82:	789a      	ldrb	r2, [r3, #2]
 800ef84:	0212      	lsls	r2, r2, #8
 800ef86:	4302      	orrs	r2, r0
 800ef88:	78d8      	ldrb	r0, [r3, #3]
 800ef8a:	0400      	lsls	r0, r0, #16
 800ef8c:	4302      	orrs	r2, r0
 800ef8e:	7918      	ldrb	r0, [r3, #4]
 800ef90:	0600      	lsls	r0, r0, #24
 800ef92:	4310      	orrs	r0, r2
 800ef94:	1e43      	subs	r3, r0, #1
 800ef96:	4198      	sbcs	r0, r3
 800ef98:	b2c0      	uxtb	r0, r0

bool fs_is_file_defined(uint8_t file_id)
{
    return _is_file_defined(file_id);
}
 800ef9a:	4770      	bx	lr
 800ef9c:	20003558 	.word	0x20003558

0800efa0 <log_counter_reset>:
static uint32_t NGDEF(counter);


__LINK_C void log_counter_reset()
{
	NG(counter) = 0;
 800efa0:	4b01      	ldr	r3, [pc, #4]	; (800efa8 <log_counter_reset+0x8>)
 800efa2:	2200      	movs	r2, #0
 800efa4:	601a      	str	r2, [r3, #0]
}
 800efa6:	4770      	bx	lr
 800efa8:	200037e4 	.word	0x200037e4

0800efac <log_print_string>:

__LINK_C void log_print_string(const char* format, ...)
{
 800efac:	b40f      	push	{r0, r1, r2, r3}
 800efae:	b510      	push	{r4, lr}
 800efb0:	b082      	sub	sp, #8
 800efb2:	ab04      	add	r3, sp, #16
 800efb4:	cb10      	ldmia	r3!, {r4}
    va_list args;
    va_start(args, format);
 800efb6:	9301      	str	r3, [sp, #4]
    printf("\n\r[%03ld] ", NG(counter)++);
 800efb8:	4b07      	ldr	r3, [pc, #28]	; (800efd8 <log_print_string+0x2c>)
 800efba:	6819      	ldr	r1, [r3, #0]
 800efbc:	1c4a      	adds	r2, r1, #1
 800efbe:	601a      	str	r2, [r3, #0]
 800efc0:	4806      	ldr	r0, [pc, #24]	; (800efdc <log_print_string+0x30>)
 800efc2:	f006 f881 	bl	80150c8 <iprintf>
    vprintf(format, args);
 800efc6:	9901      	ldr	r1, [sp, #4]
 800efc8:	0020      	movs	r0, r4
 800efca:	f006 f9cb 	bl	8015364 <viprintf>
    va_end(args);
}
 800efce:	b002      	add	sp, #8
 800efd0:	bc10      	pop	{r4}
 800efd2:	bc08      	pop	{r3}
 800efd4:	b004      	add	sp, #16
 800efd6:	4718      	bx	r3
 800efd8:	200037e4 	.word	0x200037e4
 800efdc:	0801a578 	.word	0x0801a578

0800efe0 <log_print_error_string>:
            printf("\n\r");
    }
}

void log_print_error_string(const char* format,...)
{
 800efe0:	b40f      	push	{r0, r1, r2, r3}
 800efe2:	b510      	push	{r4, lr}
 800efe4:	b082      	sub	sp, #8
 800efe6:	ab04      	add	r3, sp, #16
 800efe8:	cb10      	ldmia	r3!, {r4}
    va_list args;
    va_start(args, format);
 800efea:	9301      	str	r3, [sp, #4]
    printf("\n\r%s[%03ld]%s ", RTT_CTRL_BG_BRIGHT_RED, NG(counter)++, RTT_CTRL_RESET);
 800efec:	4b08      	ldr	r3, [pc, #32]	; (800f010 <log_print_error_string+0x30>)
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	1c51      	adds	r1, r2, #1
 800eff2:	6019      	str	r1, [r3, #0]
 800eff4:	4b07      	ldr	r3, [pc, #28]	; (800f014 <log_print_error_string+0x34>)
 800eff6:	4908      	ldr	r1, [pc, #32]	; (800f018 <log_print_error_string+0x38>)
 800eff8:	4808      	ldr	r0, [pc, #32]	; (800f01c <log_print_error_string+0x3c>)
 800effa:	f006 f865 	bl	80150c8 <iprintf>
    vprintf(format, args);
 800effe:	9901      	ldr	r1, [sp, #4]
 800f000:	0020      	movs	r0, r4
 800f002:	f006 f9af 	bl	8015364 <viprintf>
    va_end(args);
}
 800f006:	b002      	add	sp, #8
 800f008:	bc10      	pop	{r4}
 800f00a:	bc08      	pop	{r3}
 800f00c:	b004      	add	sp, #16
 800f00e:	4718      	bx	r3
 800f010:	200037e4 	.word	0x200037e4
 800f014:	0801a584 	.word	0x0801a584
 800f018:	0801a58c 	.word	0x0801a58c
 800f01c:	0801a594 	.word	0x0801a594

0800f020 <ping_response_handler>:
{
#ifdef MODULE_ALP
    // free all alp commands
    alp_layer_free_commands();
#endif
}
 800f020:	4770      	bx	lr
	...

0800f024 <modem_interface_cmd_handler>:
{
    return sp_handle.driver->serial_protocol_transfer(&sp_handle, string);
}

static void modem_interface_cmd_handler(serial_protocol_handle_t* handle, serial_message_type_t type, fifo_t* cmd_fifo)
{
 800f024:	b510      	push	{r4, lr}
 800f026:	0010      	movs	r0, r2
    if(cmd_handlers[type] != NULL)
 800f028:	0089      	lsls	r1, r1, #2
 800f02a:	4b03      	ldr	r3, [pc, #12]	; (800f038 <modem_interface_cmd_handler+0x14>)
 800f02c:	58cb      	ldr	r3, [r1, r3]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d000      	beq.n	800f034 <modem_interface_cmd_handler+0x10>
    {
        cmd_handlers[type](cmd_fifo);
 800f032:	4798      	blx	r3
    }
}
 800f034:	bd10      	pop	{r4, pc}
 800f036:	46c0      	nop			; (mov r8, r8)
 800f038:	200037e8 	.word	0x200037e8

0800f03c <modem_interface_init>:
{
 800f03c:	b510      	push	{r4, lr}
 800f03e:	b086      	sub	sp, #24
    serial_protocol_init(&sp_handle, PLATFORM_MODEM_INTERFACE_UART, PLATFORM_MODEM_INTERFACE_BAUDRATE, false, (pin_id_t) 0, (pin_id_t) 0, false, 0, 0);
 800f040:	22e1      	movs	r2, #225	; 0xe1
 800f042:	4c0a      	ldr	r4, [pc, #40]	; (800f06c <modem_interface_init+0x30>)
 800f044:	2300      	movs	r3, #0
 800f046:	9304      	str	r3, [sp, #16]
 800f048:	9303      	str	r3, [sp, #12]
 800f04a:	9302      	str	r3, [sp, #8]
 800f04c:	9301      	str	r3, [sp, #4]
 800f04e:	9300      	str	r3, [sp, #0]
 800f050:	0252      	lsls	r2, r2, #9
 800f052:	2100      	movs	r1, #0
 800f054:	0020      	movs	r0, r4
 800f056:	f001 f885 	bl	8010164 <serial_protocol_init>
    sp_handle.driver->serial_protocol_register_handler(&sp_handle, &ping_response_handler, SERIAL_MESSAGE_TYPE_PING_REQUEST);
 800f05a:	6823      	ldr	r3, [r4, #0]
 800f05c:	689b      	ldr	r3, [r3, #8]
 800f05e:	2202      	movs	r2, #2
 800f060:	4903      	ldr	r1, [pc, #12]	; (800f070 <modem_interface_init+0x34>)
 800f062:	0020      	movs	r0, r4
 800f064:	4798      	blx	r3
}
 800f066:	b006      	add	sp, #24
 800f068:	bd10      	pop	{r4, pc}
 800f06a:	46c0      	nop			; (mov r8, r8)
 800f06c:	20003800 	.word	0x20003800
 800f070:	0800f021 	.word	0x0800f021

0800f074 <modem_interface_transfer_bytes>:
{
 800f074:	b570      	push	{r4, r5, r6, lr}
 800f076:	0004      	movs	r4, r0
 800f078:	0013      	movs	r3, r2
    return sp_handle.driver->serial_protocol_transfer_bytes(&sp_handle, bytes, length, type);
 800f07a:	4803      	ldr	r0, [pc, #12]	; (800f088 <modem_interface_transfer_bytes+0x14>)
 800f07c:	6802      	ldr	r2, [r0, #0]
 800f07e:	6815      	ldr	r5, [r2, #0]
 800f080:	000a      	movs	r2, r1
 800f082:	0021      	movs	r1, r4
 800f084:	47a8      	blx	r5
}
 800f086:	bd70      	pop	{r4, r5, r6, pc}
 800f088:	20003800 	.word	0x20003800

0800f08c <modem_interface_register_handler>:

error_t modem_interface_register_handler(modem_interface_cmd_handler_t cmd_handler, serial_message_type_t type)
{
 800f08c:	b510      	push	{r4, lr}
 800f08e:	000a      	movs	r2, r1
    if(cmd_handlers[type] != NULL)
 800f090:	0089      	lsls	r1, r1, #2
 800f092:	4b08      	ldr	r3, [pc, #32]	; (800f0b4 <modem_interface_register_handler+0x28>)
 800f094:	58cb      	ldr	r3, [r1, r3]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d108      	bne.n	800f0ac <modem_interface_register_handler+0x20>
    {
        return -EEXIST;
    }
    cmd_handlers[type] = cmd_handler;
 800f09a:	4b06      	ldr	r3, [pc, #24]	; (800f0b4 <modem_interface_register_handler+0x28>)
 800f09c:	50c8      	str	r0, [r1, r3]
    sp_handle.driver->serial_protocol_register_handler(&sp_handle, &modem_interface_cmd_handler, type);
 800f09e:	4806      	ldr	r0, [pc, #24]	; (800f0b8 <modem_interface_register_handler+0x2c>)
 800f0a0:	6803      	ldr	r3, [r0, #0]
 800f0a2:	689b      	ldr	r3, [r3, #8]
 800f0a4:	4905      	ldr	r1, [pc, #20]	; (800f0bc <modem_interface_register_handler+0x30>)
 800f0a6:	4798      	blx	r3
    return SUCCESS;
 800f0a8:	2000      	movs	r0, #0
}
 800f0aa:	bd10      	pop	{r4, pc}
        return -EEXIST;
 800f0ac:	2011      	movs	r0, #17
 800f0ae:	4240      	negs	r0, r0
 800f0b0:	e7fb      	b.n	800f0aa <modem_interface_register_handler+0x1e>
 800f0b2:	46c0      	nop			; (mov r8, r8)
 800f0b4:	200037e8 	.word	0x200037e8
 800f0b8:	20003800 	.word	0x20003800
 800f0bc:	0800f025 	.word	0x0800f025

0800f0c0 <pn9_next>:
#include "pn9.h"

void pn9_next(uint16_t *last)
{
    uint16_t pn9_new;
    pn9_new =  (((*last & 0x20) >> 5) ^ *last) << 8;
 800f0c0:	8802      	ldrh	r2, [r0, #0]
 800f0c2:	1151      	asrs	r1, r2, #5
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	400b      	ands	r3, r1
 800f0c8:	b211      	sxth	r1, r2
 800f0ca:	404b      	eors	r3, r1
 800f0cc:	b29b      	uxth	r3, r3
 800f0ce:	021b      	lsls	r3, r3, #8
 800f0d0:	b29b      	uxth	r3, r3
    pn9_new |= (*last >> 1) & 0xff;
 800f0d2:	0851      	lsrs	r1, r2, #1
 800f0d4:	22ff      	movs	r2, #255	; 0xff
 800f0d6:	400a      	ands	r2, r1
 800f0d8:	4313      	orrs	r3, r2
    *last = pn9_new & 0x1ff;
 800f0da:	05db      	lsls	r3, r3, #23
 800f0dc:	0ddb      	lsrs	r3, r3, #23
 800f0de:	8003      	strh	r3, [r0, #0]
}
 800f0e0:	4770      	bx	lr

0800f0e2 <pn9_generator>:

uint16_t pn9_generator(uint16_t *pn9)
{
 800f0e2:	b570      	push	{r4, r5, r6, lr}
 800f0e4:	0005      	movs	r5, r0
    int i;

    for (i=0; i<8; i++) {
 800f0e6:	2400      	movs	r4, #0
 800f0e8:	e003      	b.n	800f0f2 <pn9_generator+0x10>
        pn9_next(pn9);
 800f0ea:	0028      	movs	r0, r5
 800f0ec:	f7ff ffe8 	bl	800f0c0 <pn9_next>
    for (i=0; i<8; i++) {
 800f0f0:	3401      	adds	r4, #1
 800f0f2:	2c07      	cmp	r4, #7
 800f0f4:	ddf9      	ble.n	800f0ea <pn9_generator+0x8>
    }
    return *pn9;
 800f0f6:	8828      	ldrh	r0, [r5, #0]
}
 800f0f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f0fc <pn9_encode>:

void pn9_encode(uint8_t *data, uint16_t length)
{
 800f0fc:	b570      	push	{r4, r5, r6, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	0005      	movs	r5, r0
 800f102:	000e      	movs	r6, r1
    uint16_t pn9 = PN9_INITIALIZER; //// LFSR initialised to the specified polynomial
 800f104:	466b      	mov	r3, sp
 800f106:	4a09      	ldr	r2, [pc, #36]	; (800f12c <pn9_encode+0x30>)
 800f108:	80da      	strh	r2, [r3, #6]
    uint8_t *p = data;
 800f10a:	0004      	movs	r4, r0

    for (; p < data + length; p++) {
 800f10c:	19ab      	adds	r3, r5, r6
 800f10e:	42a3      	cmp	r3, r4
 800f110:	d909      	bls.n	800f126 <pn9_encode+0x2a>
        *p ^= pn9;
 800f112:	466b      	mov	r3, sp
 800f114:	1d98      	adds	r0, r3, #6
 800f116:	8803      	ldrh	r3, [r0, #0]
 800f118:	7822      	ldrb	r2, [r4, #0]
 800f11a:	4053      	eors	r3, r2
 800f11c:	7023      	strb	r3, [r4, #0]
        pn9_generator(&pn9);
 800f11e:	f7ff ffe0 	bl	800f0e2 <pn9_generator>
    for (; p < data + length; p++) {
 800f122:	3401      	adds	r4, #1
 800f124:	e7f2      	b.n	800f10c <pn9_encode+0x10>
    }
}
 800f126:	b002      	add	sp, #8
 800f128:	bd70      	pop	{r4, r5, r6, pc}
 800f12a:	46c0      	nop			; (mov r8, r8)
 800f12c:	000001ff 	.word	0x000001ff

0800f130 <power_tracking_file_write>:
    memcpy(power_tracking_file->bytes, current_power_tracking_file.bytes, POWER_TRACKING_FILE_SIZE);
    return SUCCESS;
}

error_t power_tracking_file_write(power_tracking_file_t* power_tracking_file)
{
 800f130:	b500      	push	{lr}
 800f132:	b083      	sub	sp, #12
 800f134:	0002      	movs	r2, r0
    return d7ap_fs_write_file(POWER_TRACKING_FILE_ID, 0, power_tracking_file->bytes, POWER_TRACKING_FILE_SIZE, ROOT_AUTH);
 800f136:	2300      	movs	r3, #0
 800f138:	9300      	str	r3, [sp, #0]
 800f13a:	3311      	adds	r3, #17
 800f13c:	2100      	movs	r1, #0
 800f13e:	2032      	movs	r0, #50	; 0x32
 800f140:	f7f8 ff0e 	bl	8007f60 <d7ap_fs_write_file>
}
 800f144:	b003      	add	sp, #12
 800f146:	bd00      	pop	{pc}

0800f148 <power_tracking_persist_file>:

void power_tracking_file_toggle_persisting(bool persist) { persist_file = persist; }

error_t power_tracking_persist_file()
{
 800f148:	b510      	push	{r4, lr}
    // don't persist the file if the application doesn't want any file writes at the moment
    if(!persist_file)
 800f14a:	4b09      	ldr	r3, [pc, #36]	; (800f170 <power_tracking_persist_file+0x28>)
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d00b      	beq.n	800f16a <power_tracking_persist_file+0x22>
#else
    DPRINT("persisting power tracking file with %i active, %i boots",
        current_power_tracking_file.cpu_active_time, current_power_tracking_file.boot_counter);
#endif // FRAMEWORK_POWER_TRACKING_RF
    DPRINT_DATA(current_power_tracking_file.bytes, POWER_TRACKING_FILE_SIZE);
    cpu_active_time_prev_store_value = current_power_tracking_file.cpu_active_time;
 800f152:	4c08      	ldr	r4, [pc, #32]	; (800f174 <power_tracking_persist_file+0x2c>)
 800f154:	4b08      	ldr	r3, [pc, #32]	; (800f178 <power_tracking_persist_file+0x30>)
 800f156:	6822      	ldr	r2, [r4, #0]
 800f158:	601a      	str	r2, [r3, #0]
    last_store_time = timer_get_counter_value();
 800f15a:	f001 f8d1 	bl	8010300 <timer_get_counter_value>
 800f15e:	4b07      	ldr	r3, [pc, #28]	; (800f17c <power_tracking_persist_file+0x34>)
 800f160:	6018      	str	r0, [r3, #0]
    return power_tracking_file_write(&current_power_tracking_file);
 800f162:	0020      	movs	r0, r4
 800f164:	f7ff ffe4 	bl	800f130 <power_tracking_file_write>
}
 800f168:	bd10      	pop	{r4, pc}
        return -EINTR;
 800f16a:	2004      	movs	r0, #4
 800f16c:	4240      	negs	r0, r0
 800f16e:	e7fb      	b.n	800f168 <power_tracking_persist_file+0x20>
 800f170:	2000059b 	.word	0x2000059b
 800f174:	20003a54 	.word	0x20003a54
 800f178:	20003a50 	.word	0x20003a50
 800f17c:	20003a68 	.word	0x20003a68

0800f180 <power_tracking_register_radio_action>:

#ifdef FRAMEWORK_POWER_TRACKING_RF
error_t power_tracking_register_radio_action(power_tracking_transmit_mode_t power_tracking_transmit_mode,
    power_tracking_radio_type_t type, timer_tick_t time, void* argument)
{
    switch (type) {
 800f180:	2901      	cmp	r1, #1
 800f182:	d015      	beq.n	800f1b0 <power_tracking_register_radio_action+0x30>
 800f184:	2902      	cmp	r1, #2
 800f186:	d023      	beq.n	800f1d0 <power_tracking_register_radio_action+0x50>
 800f188:	2900      	cmp	r1, #0
 800f18a:	d001      	beq.n	800f190 <power_tracking_register_radio_action+0x10>
    case POWER_TRACKING_RADIO_STANDBY:
        current_power_tracking_file.temp_standby_time += time;
        break;
    }
    return SUCCESS;
}
 800f18c:	2000      	movs	r0, #0
 800f18e:	4770      	bx	lr
        current_power_tracking_file.temp_tx_time += time;
 800f190:	4917      	ldr	r1, [pc, #92]	; (800f1f0 <power_tracking_register_radio_action+0x70>)
 800f192:	684b      	ldr	r3, [r1, #4]
 800f194:	0a18      	lsrs	r0, r3, #8
 800f196:	7a0b      	ldrb	r3, [r1, #8]
 800f198:	061b      	lsls	r3, r3, #24
 800f19a:	4303      	orrs	r3, r0
 800f19c:	189a      	adds	r2, r3, r2
 800f19e:	1d4b      	adds	r3, r1, #5
 800f1a0:	714a      	strb	r2, [r1, #5]
 800f1a2:	0a11      	lsrs	r1, r2, #8
 800f1a4:	7059      	strb	r1, [r3, #1]
 800f1a6:	0c11      	lsrs	r1, r2, #16
 800f1a8:	7099      	strb	r1, [r3, #2]
 800f1aa:	0e12      	lsrs	r2, r2, #24
 800f1ac:	70da      	strb	r2, [r3, #3]
        break;
 800f1ae:	e7ed      	b.n	800f18c <power_tracking_register_radio_action+0xc>
        current_power_tracking_file.temp_rx_time += time;
 800f1b0:	490f      	ldr	r1, [pc, #60]	; (800f1f0 <power_tracking_register_radio_action+0x70>)
 800f1b2:	688b      	ldr	r3, [r1, #8]
 800f1b4:	0a18      	lsrs	r0, r3, #8
 800f1b6:	7b0b      	ldrb	r3, [r1, #12]
 800f1b8:	061b      	lsls	r3, r3, #24
 800f1ba:	4303      	orrs	r3, r0
 800f1bc:	189a      	adds	r2, r3, r2
 800f1be:	000b      	movs	r3, r1
 800f1c0:	724a      	strb	r2, [r1, #9]
 800f1c2:	0a11      	lsrs	r1, r2, #8
 800f1c4:	7299      	strb	r1, [r3, #10]
 800f1c6:	0c11      	lsrs	r1, r2, #16
 800f1c8:	72d9      	strb	r1, [r3, #11]
 800f1ca:	0e12      	lsrs	r2, r2, #24
 800f1cc:	731a      	strb	r2, [r3, #12]
        break;
 800f1ce:	e7dd      	b.n	800f18c <power_tracking_register_radio_action+0xc>
        current_power_tracking_file.temp_standby_time += time;
 800f1d0:	4907      	ldr	r1, [pc, #28]	; (800f1f0 <power_tracking_register_radio_action+0x70>)
 800f1d2:	68cb      	ldr	r3, [r1, #12]
 800f1d4:	0a18      	lsrs	r0, r3, #8
 800f1d6:	7c0b      	ldrb	r3, [r1, #16]
 800f1d8:	061b      	lsls	r3, r3, #24
 800f1da:	4303      	orrs	r3, r0
 800f1dc:	189a      	adds	r2, r3, r2
 800f1de:	000b      	movs	r3, r1
 800f1e0:	734a      	strb	r2, [r1, #13]
 800f1e2:	0a11      	lsrs	r1, r2, #8
 800f1e4:	7399      	strb	r1, [r3, #14]
 800f1e6:	0c11      	lsrs	r1, r2, #16
 800f1e8:	73d9      	strb	r1, [r3, #15]
 800f1ea:	0e12      	lsrs	r2, r2, #24
 800f1ec:	741a      	strb	r2, [r3, #16]
        break;
 800f1ee:	e7cd      	b.n	800f18c <power_tracking_register_radio_action+0xc>
 800f1f0:	20003a54 	.word	0x20003a54

0800f1f4 <power_tracking_register_run_time>:
#endif // FRAMEWORK_POWER_TRACKING_RF

error_t power_tracking_register_run_time(timer_tick_t time)
{
 800f1f4:	b510      	push	{r4, lr}
    current_power_tracking_file.cpu_active_time += time;
 800f1f6:	4b0d      	ldr	r3, [pc, #52]	; (800f22c <power_tracking_register_run_time+0x38>)
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	1881      	adds	r1, r0, r2
 800f1fc:	6019      	str	r1, [r3, #0]
    if(timer_calculate_difference(cpu_active_time_prev_store_value, current_power_tracking_file.cpu_active_time) > STORE_VALUE_DELTA
 800f1fe:	4b0c      	ldr	r3, [pc, #48]	; (800f230 <power_tracking_register_run_time+0x3c>)
 800f200:	6818      	ldr	r0, [r3, #0]
 800f202:	f001 f8bf 	bl	8010384 <timer_calculate_difference>
 800f206:	2396      	movs	r3, #150	; 0x96
 800f208:	02db      	lsls	r3, r3, #11
 800f20a:	4298      	cmp	r0, r3
 800f20c:	d80a      	bhi.n	800f224 <power_tracking_register_run_time+0x30>
    || timer_calculate_difference(last_store_time, timer_get_counter_value()) > STORE_TIME_DELTA)
 800f20e:	4b09      	ldr	r3, [pc, #36]	; (800f234 <power_tracking_register_run_time+0x40>)
 800f210:	681c      	ldr	r4, [r3, #0]
 800f212:	f001 f875 	bl	8010300 <timer_get_counter_value>
 800f216:	0001      	movs	r1, r0
 800f218:	0020      	movs	r0, r4
 800f21a:	f001 f8b3 	bl	8010384 <timer_calculate_difference>
 800f21e:	4b06      	ldr	r3, [pc, #24]	; (800f238 <power_tracking_register_run_time+0x44>)
 800f220:	4298      	cmp	r0, r3
 800f222:	d901      	bls.n	800f228 <power_tracking_register_run_time+0x34>
    {
        //This function is always called just before the scheduler goes to sleep so scheduling this function will trigger a wake-up so call this function directly
        power_tracking_persist_file();
 800f224:	f7ff ff90 	bl	800f148 <power_tracking_persist_file>
    }
    return SUCCESS;
}
 800f228:	2000      	movs	r0, #0
 800f22a:	bd10      	pop	{r4, pc}
 800f22c:	20003a54 	.word	0x20003a54
 800f230:	20003a50 	.word	0x20003a50
 800f234:	20003a68 	.word	0x20003a68
 800f238:	05460000 	.word	0x05460000

0800f23c <get_rnd>:
#include "random.h"
#include "types.h"
#include <stdlib.h>

__LINK_C uint32_t get_rnd()
{
 800f23c:	b510      	push	{r4, lr}
    return (uint32_t) rand();
 800f23e:	f005 ff8f 	bl	8015160 <rand>
}
 800f242:	bd10      	pop	{r4, pc}

0800f244 <set_rng_seed>:

__LINK_C void set_rng_seed(unsigned int seed)
{
 800f244:	b510      	push	{r4, lr}
    srand(seed);
 800f246:	f005 ff5b 	bl	8015100 <srand>
}
 800f24a:	bd10      	pop	{r4, pc}

0800f24c <__feed_watchdog_task>:
#else
static inline void check_structs_are_valid(){}
#endif

#if defined FRAMEWORK_USE_WATCHDOG
static void __feed_watchdog_task(void *arg) { watchdog_wakeup = true; }
 800f24c:	4b01      	ldr	r3, [pc, #4]	; (800f254 <__feed_watchdog_task+0x8>)
 800f24e:	2201      	movs	r2, #1
 800f250:	701a      	strb	r2, [r3, #0]
 800f252:	4770      	bx	lr
 800f254:	20003dbf 	.word	0x20003dbf

0800f258 <is_scheduled_with_arg>:
	check_structs_are_valid();
	return NG(m_info)[NG(m_index)[id].index].priority != NOT_SCHEDULED;
}

static bool is_scheduled_with_arg(uint8_t id, void *arg)
{
 800f258:	b570      	push	{r4, r5, r6, lr}
 800f25a:	0003      	movs	r3, r0
	assert(id < NUM_TASKS);
 800f25c:	2828      	cmp	r0, #40	; 0x28
 800f25e:	d915      	bls.n	800f28c <is_scheduled_with_arg+0x34>
 800f260:	2110      	movs	r1, #16
 800f262:	4b18      	ldr	r3, [pc, #96]	; (800f2c4 <is_scheduled_with_arg+0x6c>)
 800f264:	4a18      	ldr	r2, [pc, #96]	; (800f2c8 <is_scheduled_with_arg+0x70>)
 800f266:	31ff      	adds	r1, #255	; 0xff
 800f268:	4818      	ldr	r0, [pc, #96]	; (800f2cc <is_scheduled_with_arg+0x74>)
 800f26a:	f7f9 f9c9 	bl	8008600 <__assert_func>
	while(true)
	{
		uint8_t index = NG(m_index)[id].index;
		if(arg == NG(m_info)[index].arg)
		{
			return NG(m_info)[index].priority != NOT_SCHEDULED;
 800f26e:	006b      	lsls	r3, r5, #1
 800f270:	195d      	adds	r5, r3, r5
 800f272:	00ad      	lsls	r5, r5, #2
 800f274:	1945      	adds	r5, r0, r5
 800f276:	7aa8      	ldrb	r0, [r5, #10]
 800f278:	3808      	subs	r0, #8
 800f27a:	1e43      	subs	r3, r0, #1
 800f27c:	4198      	sbcs	r0, r3
 800f27e:	b2c0      	uxtb	r0, r0
		{
			break;
		}
	}
	return false;
}
 800f280:	bd70      	pop	{r4, r5, r6, pc}
	return ((id + 1) < NG(num_registered_tasks)) && (NG(m_index)[id].task == NG(m_index)[id + 1].task);
 800f282:	2000      	movs	r0, #0
		if(is_next_task_the_same(id))
 800f284:	2800      	cmp	r0, #0
 800f286:	d0fb      	beq.n	800f280 <is_scheduled_with_arg+0x28>
			id += 1;
 800f288:	3301      	adds	r3, #1
 800f28a:	b2db      	uxtb	r3, r3
		uint8_t index = NG(m_index)[id].index;
 800f28c:	00d8      	lsls	r0, r3, #3
 800f28e:	4a10      	ldr	r2, [pc, #64]	; (800f2d0 <is_scheduled_with_arg+0x78>)
 800f290:	1812      	adds	r2, r2, r0
 800f292:	7915      	ldrb	r5, [r2, #4]
		if(arg == NG(m_info)[index].arg)
 800f294:	006a      	lsls	r2, r5, #1
 800f296:	1952      	adds	r2, r2, r5
 800f298:	0092      	lsls	r2, r2, #2
 800f29a:	480e      	ldr	r0, [pc, #56]	; (800f2d4 <is_scheduled_with_arg+0x7c>)
 800f29c:	1882      	adds	r2, r0, r2
 800f29e:	6852      	ldr	r2, [r2, #4]
 800f2a0:	428a      	cmp	r2, r1
 800f2a2:	d0e4      	beq.n	800f26e <is_scheduled_with_arg+0x16>
	return ((id + 1) < NG(num_registered_tasks)) && (NG(m_index)[id].task == NG(m_index)[id + 1].task);
 800f2a4:	1c5a      	adds	r2, r3, #1
 800f2a6:	480c      	ldr	r0, [pc, #48]	; (800f2d8 <is_scheduled_with_arg+0x80>)
 800f2a8:	7800      	ldrb	r0, [r0, #0]
 800f2aa:	4282      	cmp	r2, r0
 800f2ac:	dae9      	bge.n	800f282 <is_scheduled_with_arg+0x2a>
 800f2ae:	4808      	ldr	r0, [pc, #32]	; (800f2d0 <is_scheduled_with_arg+0x78>)
 800f2b0:	00dc      	lsls	r4, r3, #3
 800f2b2:	5824      	ldr	r4, [r4, r0]
 800f2b4:	00d2      	lsls	r2, r2, #3
 800f2b6:	5812      	ldr	r2, [r2, r0]
 800f2b8:	4294      	cmp	r4, r2
 800f2ba:	d001      	beq.n	800f2c0 <is_scheduled_with_arg+0x68>
 800f2bc:	2000      	movs	r0, #0
 800f2be:	e7e1      	b.n	800f284 <is_scheduled_with_arg+0x2c>
 800f2c0:	2001      	movs	r0, #1
 800f2c2:	e7df      	b.n	800f284 <is_scheduled_with_arg+0x2c>
 800f2c4:	0801a5a4 	.word	0x0801a5a4
 800f2c8:	0801a6c4 	.word	0x0801a6c4
 800f2cc:	0801a5b4 	.word	0x0801a5b4
 800f2d0:	20003a78 	.word	0x20003a78
 800f2d4:	20003bc0 	.word	0x20003bc0
 800f2d8:	20003db4 	.word	0x20003db4

0800f2dc <do_initial_task_checks>:
	end_atomic();
	return retVal;
}

static error_t do_initial_task_checks(uint8_t task_id, void *arg, bool cancel)
{
 800f2dc:	b570      	push	{r4, r5, r6, lr}
	if(task_id == NO_TASK)
 800f2de:	2829      	cmp	r0, #41	; 0x29
 800f2e0:	d039      	beq.n	800f356 <do_initial_task_checks+0x7a>
	return ((id + 1) < NG(num_registered_tasks)) && (NG(m_index)[id].task == NG(m_index)[id + 1].task);
 800f2e2:	1c43      	adds	r3, r0, #1
 800f2e4:	4c20      	ldr	r4, [pc, #128]	; (800f368 <do_initial_task_checks+0x8c>)
 800f2e6:	7824      	ldrb	r4, [r4, #0]
 800f2e8:	42a3      	cmp	r3, r4
 800f2ea:	da08      	bge.n	800f2fe <do_initial_task_checks+0x22>
 800f2ec:	4c1f      	ldr	r4, [pc, #124]	; (800f36c <do_initial_task_checks+0x90>)
 800f2ee:	00c5      	lsls	r5, r0, #3
 800f2f0:	592d      	ldr	r5, [r5, r4]
 800f2f2:	00db      	lsls	r3, r3, #3
 800f2f4:	591b      	ldr	r3, [r3, r4]
 800f2f6:	429d      	cmp	r5, r3
 800f2f8:	d01b      	beq.n	800f332 <do_initial_task_checks+0x56>
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	e000      	b.n	800f300 <do_initial_task_checks+0x24>
 800f2fe:	2300      	movs	r3, #0
	{
		return -EINVAL;
	}
	if(is_next_task_the_same(task_id))
 800f300:	2b00      	cmp	r3, #0
 800f302:	d118      	bne.n	800f336 <do_initial_task_checks+0x5a>
			return -EALREADY;
		}
	}
	else 
	{
		if ((!cancel) == is_scheduled(task_id))
 800f304:	2301      	movs	r3, #1
 800f306:	405a      	eors	r2, r3
 800f308:	b2d2      	uxtb	r2, r2
	assert(id < NUM_TASKS);
 800f30a:	2828      	cmp	r0, #40	; 0x28
 800f30c:	d81c      	bhi.n	800f348 <do_initial_task_checks+0x6c>
	return NG(m_info)[NG(m_index)[id].index].priority != NOT_SCHEDULED;
 800f30e:	00c0      	lsls	r0, r0, #3
 800f310:	4b16      	ldr	r3, [pc, #88]	; (800f36c <do_initial_task_checks+0x90>)
 800f312:	1818      	adds	r0, r3, r0
 800f314:	7901      	ldrb	r1, [r0, #4]
 800f316:	004b      	lsls	r3, r1, #1
 800f318:	185b      	adds	r3, r3, r1
 800f31a:	009b      	lsls	r3, r3, #2
 800f31c:	4914      	ldr	r1, [pc, #80]	; (800f370 <do_initial_task_checks+0x94>)
 800f31e:	18cb      	adds	r3, r1, r3
 800f320:	7a9b      	ldrb	r3, [r3, #10]
 800f322:	3b08      	subs	r3, #8
 800f324:	1e59      	subs	r1, r3, #1
 800f326:	418b      	sbcs	r3, r1
 800f328:	b2db      	uxtb	r3, r3
		if ((!cancel) == is_scheduled(task_id))
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d019      	beq.n	800f362 <do_initial_task_checks+0x86>
		{
			return -EALREADY;
		}
	}
	return SUCCESS;
 800f32e:	2000      	movs	r0, #0
}
 800f330:	bd70      	pop	{r4, r5, r6, pc}
	return ((id + 1) < NG(num_registered_tasks)) && (NG(m_index)[id].task == NG(m_index)[id + 1].task);
 800f332:	2301      	movs	r3, #1
 800f334:	e7e4      	b.n	800f300 <do_initial_task_checks+0x24>
		if(!cancel == is_scheduled_with_arg(task_id, arg))
 800f336:	2401      	movs	r4, #1
 800f338:	4054      	eors	r4, r2
 800f33a:	b2e4      	uxtb	r4, r4
 800f33c:	f7ff ff8c 	bl	800f258 <is_scheduled_with_arg>
 800f340:	4284      	cmp	r4, r0
 800f342:	d00b      	beq.n	800f35c <do_initial_task_checks+0x80>
	return SUCCESS;
 800f344:	2000      	movs	r0, #0
 800f346:	e7f3      	b.n	800f330 <do_initial_task_checks+0x54>
	assert(id < NUM_TASKS);
 800f348:	2184      	movs	r1, #132	; 0x84
 800f34a:	4b0a      	ldr	r3, [pc, #40]	; (800f374 <do_initial_task_checks+0x98>)
 800f34c:	4a0a      	ldr	r2, [pc, #40]	; (800f378 <do_initial_task_checks+0x9c>)
 800f34e:	0049      	lsls	r1, r1, #1
 800f350:	480a      	ldr	r0, [pc, #40]	; (800f37c <do_initial_task_checks+0xa0>)
 800f352:	f7f9 f955 	bl	8008600 <__assert_func>
		return -EINVAL;
 800f356:	2016      	movs	r0, #22
 800f358:	4240      	negs	r0, r0
 800f35a:	e7e9      	b.n	800f330 <do_initial_task_checks+0x54>
			return -EALREADY;
 800f35c:	2078      	movs	r0, #120	; 0x78
 800f35e:	4240      	negs	r0, r0
 800f360:	e7e6      	b.n	800f330 <do_initial_task_checks+0x54>
			return -EALREADY;
 800f362:	2078      	movs	r0, #120	; 0x78
 800f364:	4240      	negs	r0, r0
 800f366:	e7e3      	b.n	800f330 <do_initial_task_checks+0x54>
 800f368:	20003db4 	.word	0x20003db4
 800f36c:	20003a78 	.word	0x20003a78
 800f370:	20003bc0 	.word	0x20003bc0
 800f374:	0801a5a4 	.word	0x0801a5a4
 800f378:	0801a6b4 	.word	0x0801a6b4
 800f37c:	0801a5b4 	.word	0x0801a5b4

0800f380 <pop_task>:
	end_atomic();
	return retVal;
}

static uint8_t pop_task(int priority)
{
 800f380:	b570      	push	{r4, r5, r6, lr}
 800f382:	0005      	movs	r5, r0
	uint8_t id = NO_TASK;
	check_structs_are_valid();
	start_atomic();
 800f384:	f7fb fb10 	bl	800a9a8 <start_atomic>
	if (NG(m_head)[priority] != NO_TASK)
 800f388:	4b13      	ldr	r3, [pc, #76]	; (800f3d8 <pop_task+0x58>)
 800f38a:	5d5c      	ldrb	r4, [r3, r5]
 800f38c:	2c29      	cmp	r4, #41	; 0x29
 800f38e:	d01b      	beq.n	800f3c8 <pop_task+0x48>
	{
		id = NG(m_head)[priority];
		NG(m_head)[priority] = NG(m_info)[NG(m_head)[priority]].next;
 800f390:	0063      	lsls	r3, r4, #1
 800f392:	191b      	adds	r3, r3, r4
 800f394:	009b      	lsls	r3, r3, #2
 800f396:	4a11      	ldr	r2, [pc, #68]	; (800f3dc <pop_task+0x5c>)
 800f398:	18d3      	adds	r3, r2, r3
 800f39a:	7a1b      	ldrb	r3, [r3, #8]
 800f39c:	4a0e      	ldr	r2, [pc, #56]	; (800f3d8 <pop_task+0x58>)
 800f39e:	5553      	strb	r3, [r2, r5]
		if(NG(m_head)[priority] == NO_TASK)
 800f3a0:	2b29      	cmp	r3, #41	; 0x29
 800f3a2:	d015      	beq.n	800f3d0 <pop_task+0x50>
			NG(m_tail)[priority] = NO_TASK;
		else
			NG(m_info)[NG(m_head)[priority]].prev = NO_TASK;
 800f3a4:	005a      	lsls	r2, r3, #1
 800f3a6:	18d3      	adds	r3, r2, r3
 800f3a8:	009b      	lsls	r3, r3, #2
 800f3aa:	4a0c      	ldr	r2, [pc, #48]	; (800f3dc <pop_task+0x5c>)
 800f3ac:	18d3      	adds	r3, r2, r3
 800f3ae:	2229      	movs	r2, #41	; 0x29
 800f3b0:	725a      	strb	r2, [r3, #9]

		NG(m_info)[id].next = NO_TASK;
 800f3b2:	490a      	ldr	r1, [pc, #40]	; (800f3dc <pop_task+0x5c>)
 800f3b4:	0063      	lsls	r3, r4, #1
 800f3b6:	191a      	adds	r2, r3, r4
 800f3b8:	0092      	lsls	r2, r2, #2
 800f3ba:	188a      	adds	r2, r1, r2
 800f3bc:	2029      	movs	r0, #41	; 0x29
 800f3be:	7210      	strb	r0, [r2, #8]
		NG(m_info)[id].prev = NO_TASK;
 800f3c0:	7250      	strb	r0, [r2, #9]
		NG(m_info)[id].priority = NOT_SCHEDULED;
 800f3c2:	0013      	movs	r3, r2
 800f3c4:	2208      	movs	r2, #8
 800f3c6:	729a      	strb	r2, [r3, #10]
	}
	end_atomic();
 800f3c8:	f7fb fafc 	bl	800a9c4 <end_atomic>
	check_structs_are_valid();
	return id;
}
 800f3cc:	0020      	movs	r0, r4
 800f3ce:	bd70      	pop	{r4, r5, r6, pc}
			NG(m_tail)[priority] = NO_TASK;
 800f3d0:	4b03      	ldr	r3, [pc, #12]	; (800f3e0 <pop_task+0x60>)
 800f3d2:	2229      	movs	r2, #41	; 0x29
 800f3d4:	555a      	strb	r2, [r3, r5]
 800f3d6:	e7ec      	b.n	800f3b2 <pop_task+0x32>
 800f3d8:	20003a70 	.word	0x20003a70
 800f3dc:	20003bc0 	.word	0x20003bc0
 800f3e0:	20003dac 	.word	0x20003dac

0800f3e4 <get_task_id>:
{
 800f3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3e6:	0007      	movs	r7, r0
	assert(NG(num_registered_tasks) <= NUM_TASKS);
 800f3e8:	4b1a      	ldr	r3, [pc, #104]	; (800f454 <get_task_id+0x70>)
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	469c      	mov	ip, r3
 800f3ee:	2b29      	cmp	r3, #41	; 0x29
 800f3f0:	d803      	bhi.n	800f3fa <get_task_id+0x16>
	int end = NG(num_registered_tasks)-1;
 800f3f2:	1e5c      	subs	r4, r3, #1
	uint32_t i = 0;
 800f3f4:	2100      	movs	r1, #0
	int begin = 0;
 800f3f6:	2200      	movs	r2, #0
	while (begin <= end)
 800f3f8:	e00b      	b.n	800f412 <get_task_id+0x2e>
	assert(NG(num_registered_tasks) <= NUM_TASKS);
 800f3fa:	4b17      	ldr	r3, [pc, #92]	; (800f458 <get_task_id+0x74>)
 800f3fc:	4a17      	ldr	r2, [pc, #92]	; (800f45c <get_task_id+0x78>)
 800f3fe:	21c4      	movs	r1, #196	; 0xc4
 800f400:	4817      	ldr	r0, [pc, #92]	; (800f460 <get_task_id+0x7c>)
 800f402:	f7f9 f8fd 	bl	8008600 <__assert_func>
		else if (((void*)task) < ((void*)NG(m_index)[pivot].task))
 800f406:	42bd      	cmp	r5, r7
 800f408:	d912      	bls.n	800f430 <get_task_id+0x4c>
			end = pivot-1;
 800f40a:	1e5c      	subs	r4, r3, #1
		i++;
 800f40c:	3101      	adds	r1, #1
		assert(i <= NG(num_registered_tasks));
 800f40e:	458c      	cmp	ip, r1
 800f410:	d318      	bcc.n	800f444 <get_task_id+0x60>
	while (begin <= end)
 800f412:	42a2      	cmp	r2, r4
 800f414:	dc1c      	bgt.n	800f450 <get_task_id+0x6c>
		int pivot = begin + ((end - begin) / 2);
 800f416:	1aa0      	subs	r0, r4, r2
 800f418:	0fc3      	lsrs	r3, r0, #31
 800f41a:	181b      	adds	r3, r3, r0
 800f41c:	105b      	asrs	r3, r3, #1
 800f41e:	189b      	adds	r3, r3, r2
		if (((void*)NG(m_index)[pivot].task) < ((void*)task))
 800f420:	00de      	lsls	r6, r3, #3
 800f422:	4d10      	ldr	r5, [pc, #64]	; (800f464 <get_task_id+0x80>)
 800f424:	5975      	ldr	r5, [r6, r5]
 800f426:	42bd      	cmp	r5, r7
 800f428:	d2ed      	bcs.n	800f406 <get_task_id+0x22>
			begin= pivot+1;
 800f42a:	1c5a      	adds	r2, r3, #1
 800f42c:	e7ee      	b.n	800f40c <get_task_id+0x28>
				pivot--;
 800f42e:	0013      	movs	r3, r2
			while((pivot > 1) && (NG(m_index)[pivot-1].task == task))
 800f430:	2b01      	cmp	r3, #1
 800f432:	dd05      	ble.n	800f440 <get_task_id+0x5c>
 800f434:	1e5a      	subs	r2, r3, #1
 800f436:	00d0      	lsls	r0, r2, #3
 800f438:	490a      	ldr	r1, [pc, #40]	; (800f464 <get_task_id+0x80>)
 800f43a:	5841      	ldr	r1, [r0, r1]
 800f43c:	42b9      	cmp	r1, r7
 800f43e:	d0f6      	beq.n	800f42e <get_task_id+0x4a>
			return pivot;
 800f440:	b2d8      	uxtb	r0, r3
 800f442:	e006      	b.n	800f452 <get_task_id+0x6e>
		assert(i <= NG(num_registered_tasks));
 800f444:	4b08      	ldr	r3, [pc, #32]	; (800f468 <get_task_id+0x84>)
 800f446:	4a05      	ldr	r2, [pc, #20]	; (800f45c <get_task_id+0x78>)
 800f448:	21d9      	movs	r1, #217	; 0xd9
 800f44a:	4805      	ldr	r0, [pc, #20]	; (800f460 <get_task_id+0x7c>)
 800f44c:	f7f9 f8d8 	bl	8008600 <__assert_func>
	return NO_TASK;
 800f450:	2029      	movs	r0, #41	; 0x29
}
 800f452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f454:	20003db4 	.word	0x20003db4
 800f458:	0801a600 	.word	0x0801a600
 800f45c:	0801a684 	.word	0x0801a684
 800f460:	0801a5b4 	.word	0x0801a5b4
 800f464:	20003a78 	.word	0x20003a78
 800f468:	0801a628 	.word	0x0801a628

0800f46c <sched_register_task_allow_multiple>:
{
 800f46c:	b570      	push	{r4, r5, r6, lr}
 800f46e:	0004      	movs	r4, r0
  assert(NG(num_registered_tasks) < NUM_TASKS);
 800f470:	4b1f      	ldr	r3, [pc, #124]	; (800f4f0 <sched_register_task_allow_multiple+0x84>)
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	2b28      	cmp	r3, #40	; 0x28
 800f476:	d80b      	bhi.n	800f490 <sched_register_task_allow_multiple+0x24>
  if(!allow && (get_task_id(task) != NO_TASK))
 800f478:	2900      	cmp	r1, #0
 800f47a:	d103      	bne.n	800f484 <sched_register_task_allow_multiple+0x18>
 800f47c:	f7ff ffb2 	bl	800f3e4 <get_task_id>
 800f480:	2829      	cmp	r0, #41	; 0x29
 800f482:	d131      	bne.n	800f4e8 <sched_register_task_allow_multiple+0x7c>
	start_atomic();
 800f484:	f7fb fa90 	bl	800a9a8 <start_atomic>
    for(int i = NG(num_registered_tasks); i >= 0; i--)
 800f488:	4b19      	ldr	r3, [pc, #100]	; (800f4f0 <sched_register_task_allow_multiple+0x84>)
 800f48a:	781d      	ldrb	r5, [r3, #0]
 800f48c:	002b      	movs	r3, r5
 800f48e:	e00d      	b.n	800f4ac <sched_register_task_allow_multiple+0x40>
  assert(NG(num_registered_tasks) < NUM_TASKS);
 800f490:	4b18      	ldr	r3, [pc, #96]	; (800f4f4 <sched_register_task_allow_multiple+0x88>)
 800f492:	4a19      	ldr	r2, [pc, #100]	; (800f4f8 <sched_register_task_allow_multiple+0x8c>)
 800f494:	21e0      	movs	r1, #224	; 0xe0
 800f496:	4819      	ldr	r0, [pc, #100]	; (800f4fc <sched_register_task_allow_multiple+0x90>)
 800f498:	f7f9 f8b2 	bl	8008600 <__assert_func>
            NG(m_index)[i] = NG(m_index)[i-1];
 800f49c:	4a18      	ldr	r2, [pc, #96]	; (800f500 <sched_register_task_allow_multiple+0x94>)
 800f49e:	00db      	lsls	r3, r3, #3
 800f4a0:	00c8      	lsls	r0, r1, #3
 800f4a2:	18d3      	adds	r3, r2, r3
 800f4a4:	1812      	adds	r2, r2, r0
 800f4a6:	ca41      	ldmia	r2!, {r0, r6}
 800f4a8:	c341      	stmia	r3!, {r0, r6}
    for(int i = NG(num_registered_tasks); i >= 0; i--)
 800f4aa:	000b      	movs	r3, r1
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	db14      	blt.n	800f4da <sched_register_task_allow_multiple+0x6e>
        if (i == 0 || ((void*)NG(m_index)[i-1].task) < ((void*)task))
 800f4b0:	d005      	beq.n	800f4be <sched_register_task_allow_multiple+0x52>
 800f4b2:	1e59      	subs	r1, r3, #1
 800f4b4:	00c8      	lsls	r0, r1, #3
 800f4b6:	4a12      	ldr	r2, [pc, #72]	; (800f500 <sched_register_task_allow_multiple+0x94>)
 800f4b8:	5882      	ldr	r2, [r0, r2]
 800f4ba:	42a2      	cmp	r2, r4
 800f4bc:	d2ee      	bcs.n	800f49c <sched_register_task_allow_multiple+0x30>
            NG(m_index)[i].task = task;
 800f4be:	4a10      	ldr	r2, [pc, #64]	; (800f500 <sched_register_task_allow_multiple+0x94>)
 800f4c0:	00db      	lsls	r3, r3, #3
 800f4c2:	509c      	str	r4, [r3, r2]
            NG(m_index)[i].index = NG(num_registered_tasks);
 800f4c4:	18d3      	adds	r3, r2, r3
 800f4c6:	711d      	strb	r5, [r3, #4]
            NG(m_info)[NG(m_index)[i].index].task = task;
 800f4c8:	4a0e      	ldr	r2, [pc, #56]	; (800f504 <sched_register_task_allow_multiple+0x98>)
 800f4ca:	006b      	lsls	r3, r5, #1
 800f4cc:	1959      	adds	r1, r3, r5
 800f4ce:	0089      	lsls	r1, r1, #2
 800f4d0:	508c      	str	r4, [r1, r2]
            NG(m_info)[NG(m_index)[i].index].arg = (void*)UINTPTR_MAX;
 800f4d2:	1853      	adds	r3, r2, r1
 800f4d4:	2201      	movs	r2, #1
 800f4d6:	4252      	negs	r2, r2
 800f4d8:	605a      	str	r2, [r3, #4]
    NG(num_registered_tasks)++;
 800f4da:	3501      	adds	r5, #1
 800f4dc:	4b04      	ldr	r3, [pc, #16]	; (800f4f0 <sched_register_task_allow_multiple+0x84>)
 800f4de:	701d      	strb	r5, [r3, #0]
	end_atomic();
 800f4e0:	f7fb fa70 	bl	800a9c4 <end_atomic>
	return retVal;
 800f4e4:	2000      	movs	r0, #0
}
 800f4e6:	bd70      	pop	{r4, r5, r6, pc}
    return -EALREADY;
 800f4e8:	2078      	movs	r0, #120	; 0x78
 800f4ea:	4240      	negs	r0, r0
 800f4ec:	e7fb      	b.n	800f4e6 <sched_register_task_allow_multiple+0x7a>
 800f4ee:	46c0      	nop			; (mov r8, r8)
 800f4f0:	20003db4 	.word	0x20003db4
 800f4f4:	0801a648 	.word	0x0801a648
 800f4f8:	0801a690 	.word	0x0801a690
 800f4fc:	0801a5b4 	.word	0x0801a5b4
 800f500:	20003a78 	.word	0x20003a78
 800f504:	20003bc0 	.word	0x20003bc0

0800f508 <scheduler_init>:
{
 800f508:	b570      	push	{r4, r5, r6, lr}
 800f50a:	b082      	sub	sp, #8
	for(unsigned int i = 0; i < NUM_TASKS; i++)
 800f50c:	2200      	movs	r2, #0
 800f50e:	e013      	b.n	800f538 <scheduler_init+0x30>
		NG(m_info)[i].next = NO_TASK;
 800f510:	4d1d      	ldr	r5, [pc, #116]	; (800f588 <scheduler_init+0x80>)
 800f512:	0051      	lsls	r1, r2, #1
 800f514:	188b      	adds	r3, r1, r2
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	18eb      	adds	r3, r5, r3
 800f51a:	2029      	movs	r0, #41	; 0x29
 800f51c:	7218      	strb	r0, [r3, #8]
		NG(m_info)[i].prev = NO_TASK;
 800f51e:	7258      	strb	r0, [r3, #9]
		NG(m_info)[i].task = 0x0;
 800f520:	1889      	adds	r1, r1, r2
 800f522:	0089      	lsls	r1, r1, #2
 800f524:	2400      	movs	r4, #0
 800f526:	514c      	str	r4, [r1, r5]
		NG(m_info)[i].priority = NOT_SCHEDULED;
 800f528:	2108      	movs	r1, #8
 800f52a:	7299      	strb	r1, [r3, #10]
		NG(m_index)[i].index = NO_TASK;
 800f52c:	4b17      	ldr	r3, [pc, #92]	; (800f58c <scheduler_init+0x84>)
 800f52e:	00d1      	lsls	r1, r2, #3
 800f530:	185d      	adds	r5, r3, r1
 800f532:	7128      	strb	r0, [r5, #4]
		NG(m_index)[i].task = 0x0;
 800f534:	50cc      	str	r4, [r1, r3]
	for(unsigned int i = 0; i < NUM_TASKS; i++)
 800f536:	3201      	adds	r2, #1
 800f538:	2a28      	cmp	r2, #40	; 0x28
 800f53a:	d9e9      	bls.n	800f510 <scheduler_init+0x8>
	memset(NG(m_head), NO_TASK, sizeof(NG(m_head)));
 800f53c:	2208      	movs	r2, #8
 800f53e:	2129      	movs	r1, #41	; 0x29
 800f540:	4813      	ldr	r0, [pc, #76]	; (800f590 <scheduler_init+0x88>)
 800f542:	f005 fc99 	bl	8014e78 <memset>
	memset(NG(m_tail), NO_TASK, sizeof(NG(m_tail)));
 800f546:	2208      	movs	r2, #8
 800f548:	2129      	movs	r1, #41	; 0x29
 800f54a:	4812      	ldr	r0, [pc, #72]	; (800f594 <scheduler_init+0x8c>)
 800f54c:	f005 fc94 	bl	8014e78 <memset>
	NG(current_priority) = NUM_PRIORITIES;
 800f550:	4b11      	ldr	r3, [pc, #68]	; (800f598 <scheduler_init+0x90>)
 800f552:	2208      	movs	r2, #8
 800f554:	701a      	strb	r2, [r3, #0]
	NG(num_registered_tasks) = 0;
 800f556:	2600      	movs	r6, #0
 800f558:	4b10      	ldr	r3, [pc, #64]	; (800f59c <scheduler_init+0x94>)
 800f55a:	701e      	strb	r6, [r3, #0]
	__watchdog_init();
 800f55c:	f7fc ff88 	bl	800c470 <__watchdog_init>
 800f560:	4d0f      	ldr	r5, [pc, #60]	; (800f5a0 <scheduler_init+0x98>)
 800f562:	2100      	movs	r1, #0
 800f564:	0028      	movs	r0, r5
 800f566:	f7ff ff81 	bl	800f46c <sched_register_task_allow_multiple>
	timer_post_task_prio_delay(&__feed_watchdog_task, hw_watchdog_get_timeout() * TIMER_TICKS_PER_SEC, MAX_PRIORITY);
 800f56a:	f7fc ffa1 	bl	800c4b0 <hw_watchdog_get_timeout>
 800f56e:	0284      	lsls	r4, r0, #10
 800f570:	f000 fec6 	bl	8010300 <timer_get_counter_value>
 800f574:	1821      	adds	r1, r4, r0
 800f576:	9600      	str	r6, [sp, #0]
 800f578:	2300      	movs	r3, #0
 800f57a:	2200      	movs	r2, #0
 800f57c:	0028      	movs	r0, r5
 800f57e:	f001 f8d1 	bl	8010724 <timer_post_task_prio>
}
 800f582:	b002      	add	sp, #8
 800f584:	bd70      	pop	{r4, r5, r6, pc}
 800f586:	46c0      	nop			; (mov r8, r8)
 800f588:	20003bc0 	.word	0x20003bc0
 800f58c:	20003a78 	.word	0x20003a78
 800f590:	20003a70 	.word	0x20003a70
 800f594:	20003dac 	.word	0x20003dac
 800f598:	20003a6c 	.word	0x20003a6c
 800f59c:	20003db4 	.word	0x20003db4
 800f5a0:	0800f24d 	.word	0x0800f24d

0800f5a4 <sched_post_task_prio>:
{
 800f5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5a6:	46c6      	mov	lr, r8
 800f5a8:	b500      	push	{lr}
 800f5aa:	0004      	movs	r4, r0
 800f5ac:	000e      	movs	r6, r1
 800f5ae:	4690      	mov	r8, r2
	start_atomic();
 800f5b0:	f7fb f9fa 	bl	800a9a8 <start_atomic>
	uint8_t task_id = get_task_id(task);
 800f5b4:	0020      	movs	r0, r4
 800f5b6:	f7ff ff15 	bl	800f3e4 <get_task_id>
 800f5ba:	0007      	movs	r7, r0
 800f5bc:	0004      	movs	r4, r0
	retVal = do_initial_task_checks(task_id, arg, false);
 800f5be:	2200      	movs	r2, #0
 800f5c0:	4641      	mov	r1, r8
 800f5c2:	f7ff fe8b 	bl	800f2dc <do_initial_task_checks>
 800f5c6:	0005      	movs	r5, r0
	if(priority > MIN_PRIORITY)
 800f5c8:	2e07      	cmp	r6, #7
 800f5ca:	d86b      	bhi.n	800f6a4 <sched_post_task_prio+0x100>
	else if(retVal == SUCCESS)
 800f5cc:	2800      	cmp	r0, #0
 800f5ce:	d137      	bne.n	800f640 <sched_post_task_prio+0x9c>
	return ((id + 1) < NG(num_registered_tasks)) && (NG(m_index)[id].task == NG(m_index)[id + 1].task);
 800f5d0:	1c7a      	adds	r2, r7, #1
 800f5d2:	4b35      	ldr	r3, [pc, #212]	; (800f6a8 <sched_post_task_prio+0x104>)
 800f5d4:	7818      	ldrb	r0, [r3, #0]
 800f5d6:	4290      	cmp	r0, r2
 800f5d8:	dd08      	ble.n	800f5ec <sched_post_task_prio+0x48>
 800f5da:	4934      	ldr	r1, [pc, #208]	; (800f6ac <sched_post_task_prio+0x108>)
 800f5dc:	00fb      	lsls	r3, r7, #3
 800f5de:	585b      	ldr	r3, [r3, r1]
 800f5e0:	00d2      	lsls	r2, r2, #3
 800f5e2:	5852      	ldr	r2, [r2, r1]
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d034      	beq.n	800f652 <sched_post_task_prio+0xae>
 800f5e8:	002b      	movs	r3, r5
 800f5ea:	e000      	b.n	800f5ee <sched_post_task_prio+0x4a>
 800f5ec:	002b      	movs	r3, r5
		if(is_next_task_the_same(task_id))
 800f5ee:	07db      	lsls	r3, r3, #31
 800f5f0:	d436      	bmi.n	800f660 <sched_post_task_prio+0xbc>
		uint8_t index = NG(m_index)[task_id].index;
 800f5f2:	00e4      	lsls	r4, r4, #3
 800f5f4:	4b2d      	ldr	r3, [pc, #180]	; (800f6ac <sched_post_task_prio+0x108>)
 800f5f6:	191c      	adds	r4, r3, r4
 800f5f8:	7923      	ldrb	r3, [r4, #4]
		if(retVal == SUCCESS)
 800f5fa:	2d00      	cmp	r5, #0
 800f5fc:	d120      	bne.n	800f640 <sched_post_task_prio+0x9c>
			if(NG(m_head)[priority] == NO_TASK)
 800f5fe:	4a2c      	ldr	r2, [pc, #176]	; (800f6b0 <sched_post_task_prio+0x10c>)
 800f600:	5d92      	ldrb	r2, [r2, r6]
 800f602:	2a29      	cmp	r2, #41	; 0x29
 800f604:	d049      	beq.n	800f69a <sched_post_task_prio+0xf6>
				NG(m_info)[NG(m_tail)[priority]].next = index;
 800f606:	4c2b      	ldr	r4, [pc, #172]	; (800f6b4 <sched_post_task_prio+0x110>)
 800f608:	5da0      	ldrb	r0, [r4, r6]
 800f60a:	492b      	ldr	r1, [pc, #172]	; (800f6b8 <sched_post_task_prio+0x114>)
 800f60c:	0042      	lsls	r2, r0, #1
 800f60e:	1812      	adds	r2, r2, r0
 800f610:	0092      	lsls	r2, r2, #2
 800f612:	188a      	adds	r2, r1, r2
 800f614:	7213      	strb	r3, [r2, #8]
				NG(m_info)[index].prev = NG(m_tail)[priority];
 800f616:	005a      	lsls	r2, r3, #1
 800f618:	18d2      	adds	r2, r2, r3
 800f61a:	0092      	lsls	r2, r2, #2
 800f61c:	188a      	adds	r2, r1, r2
 800f61e:	7250      	strb	r0, [r2, #9]
				NG(m_tail)[priority] = index;
 800f620:	55a3      	strb	r3, [r4, r6]
			NG(m_info)[index].priority = priority;
 800f622:	4825      	ldr	r0, [pc, #148]	; (800f6b8 <sched_post_task_prio+0x114>)
 800f624:	005a      	lsls	r2, r3, #1
 800f626:	18d1      	adds	r1, r2, r3
 800f628:	0089      	lsls	r1, r1, #2
 800f62a:	1841      	adds	r1, r0, r1
 800f62c:	728e      	strb	r6, [r1, #10]
			NG(m_info)[index].arg = arg;
 800f62e:	4643      	mov	r3, r8
 800f630:	604b      	str	r3, [r1, #4]
			if((priority < NG(current_priority)))
 800f632:	4b22      	ldr	r3, [pc, #136]	; (800f6bc <sched_post_task_prio+0x118>)
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	b2db      	uxtb	r3, r3
 800f638:	42b3      	cmp	r3, r6
 800f63a:	d901      	bls.n	800f640 <sched_post_task_prio+0x9c>
				NG(current_priority) = priority;
 800f63c:	4b1f      	ldr	r3, [pc, #124]	; (800f6bc <sched_post_task_prio+0x118>)
 800f63e:	701e      	strb	r6, [r3, #0]
	end_atomic();
 800f640:	f7fb f9c0 	bl	800a9c4 <end_atomic>
	task_scheduled_after_sched_loop = true;
 800f644:	4b1e      	ldr	r3, [pc, #120]	; (800f6c0 <sched_post_task_prio+0x11c>)
 800f646:	2201      	movs	r2, #1
 800f648:	701a      	strb	r2, [r3, #0]
}
 800f64a:	0028      	movs	r0, r5
 800f64c:	bc04      	pop	{r2}
 800f64e:	4690      	mov	r8, r2
 800f650:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((id + 1) < NG(num_registered_tasks)) && (NG(m_index)[id].task == NG(m_index)[id + 1].task);
 800f652:	2301      	movs	r3, #1
 800f654:	e7cb      	b.n	800f5ee <sched_post_task_prio+0x4a>
 800f656:	002b      	movs	r3, r5
				if(is_next_task_the_same(task_id))
 800f658:	07db      	lsls	r3, r3, #31
 800f65a:	d51b      	bpl.n	800f694 <sched_post_task_prio+0xf0>
					task_id += 1;
 800f65c:	3401      	adds	r4, #1
 800f65e:	b2e4      	uxtb	r4, r4
				if(NG(m_info)[NG(m_index)[task_id].index].priority == NOT_SCHEDULED)
 800f660:	00e1      	lsls	r1, r4, #3
 800f662:	4b12      	ldr	r3, [pc, #72]	; (800f6ac <sched_post_task_prio+0x108>)
 800f664:	185b      	adds	r3, r3, r1
 800f666:	7919      	ldrb	r1, [r3, #4]
 800f668:	004b      	lsls	r3, r1, #1
 800f66a:	185b      	adds	r3, r3, r1
 800f66c:	009b      	lsls	r3, r3, #2
 800f66e:	4912      	ldr	r1, [pc, #72]	; (800f6b8 <sched_post_task_prio+0x114>)
 800f670:	18cb      	adds	r3, r1, r3
 800f672:	7a9b      	ldrb	r3, [r3, #10]
 800f674:	2b08      	cmp	r3, #8
 800f676:	d0bc      	beq.n	800f5f2 <sched_post_task_prio+0x4e>
	return ((id + 1) < NG(num_registered_tasks)) && (NG(m_index)[id].task == NG(m_index)[id + 1].task);
 800f678:	1c63      	adds	r3, r4, #1
 800f67a:	4298      	cmp	r0, r3
 800f67c:	ddeb      	ble.n	800f656 <sched_post_task_prio+0xb2>
 800f67e:	490b      	ldr	r1, [pc, #44]	; (800f6ac <sched_post_task_prio+0x108>)
 800f680:	00e2      	lsls	r2, r4, #3
 800f682:	5852      	ldr	r2, [r2, r1]
 800f684:	00db      	lsls	r3, r3, #3
 800f686:	585b      	ldr	r3, [r3, r1]
 800f688:	429a      	cmp	r2, r3
 800f68a:	d001      	beq.n	800f690 <sched_post_task_prio+0xec>
 800f68c:	002b      	movs	r3, r5
 800f68e:	e7e3      	b.n	800f658 <sched_post_task_prio+0xb4>
 800f690:	2301      	movs	r3, #1
 800f692:	e7e1      	b.n	800f658 <sched_post_task_prio+0xb4>
					retVal = -ENOMEM;
 800f694:	250c      	movs	r5, #12
 800f696:	426d      	negs	r5, r5
 800f698:	e7ab      	b.n	800f5f2 <sched_post_task_prio+0x4e>
				NG(m_head)[priority] = index;
 800f69a:	4a05      	ldr	r2, [pc, #20]	; (800f6b0 <sched_post_task_prio+0x10c>)
 800f69c:	5593      	strb	r3, [r2, r6]
				NG(m_tail)[priority] = index;
 800f69e:	4a05      	ldr	r2, [pc, #20]	; (800f6b4 <sched_post_task_prio+0x110>)
 800f6a0:	5593      	strb	r3, [r2, r6]
 800f6a2:	e7be      	b.n	800f622 <sched_post_task_prio+0x7e>
		retVal = -ESIZE;
 800f6a4:	4d07      	ldr	r5, [pc, #28]	; (800f6c4 <sched_post_task_prio+0x120>)
 800f6a6:	e7cb      	b.n	800f640 <sched_post_task_prio+0x9c>
 800f6a8:	20003db4 	.word	0x20003db4
 800f6ac:	20003a78 	.word	0x20003a78
 800f6b0:	20003a70 	.word	0x20003a70
 800f6b4:	20003dac 	.word	0x20003dac
 800f6b8:	20003bc0 	.word	0x20003bc0
 800f6bc:	20003a6c 	.word	0x20003a6c
 800f6c0:	20003dbe 	.word	0x20003dbe
 800f6c4:	ffffec76 	.word	0xffffec76

0800f6c8 <sched_cancel_task_with_arg>:
{
 800f6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6ca:	46c6      	mov	lr, r8
 800f6cc:	b500      	push	{lr}
 800f6ce:	0004      	movs	r4, r0
 800f6d0:	000e      	movs	r6, r1
	start_atomic();
 800f6d2:	f7fb f969 	bl	800a9a8 <start_atomic>
	uint8_t id = get_task_id(task);
 800f6d6:	0020      	movs	r0, r4
 800f6d8:	f7ff fe84 	bl	800f3e4 <get_task_id>
 800f6dc:	4680      	mov	r8, r0
 800f6de:	0004      	movs	r4, r0
	retVal = do_initial_task_checks(id, arg, true);
 800f6e0:	2201      	movs	r2, #1
 800f6e2:	0031      	movs	r1, r6
 800f6e4:	f7ff fdfa 	bl	800f2dc <do_initial_task_checks>
 800f6e8:	1e05      	subs	r5, r0, #0
	if(retVal == SUCCESS)
 800f6ea:	d147      	bne.n	800f77c <sched_cancel_task_with_arg+0xb4>
	return ((id + 1) < NG(num_registered_tasks)) && (NG(m_index)[id].task == NG(m_index)[id + 1].task);
 800f6ec:	4643      	mov	r3, r8
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	4a41      	ldr	r2, [pc, #260]	; (800f7f8 <sched_cancel_task_with_arg+0x130>)
 800f6f2:	7817      	ldrb	r7, [r2, #0]
 800f6f4:	429f      	cmp	r7, r3
 800f6f6:	dd08      	ble.n	800f70a <sched_cancel_task_with_arg+0x42>
 800f6f8:	4a40      	ldr	r2, [pc, #256]	; (800f7fc <sched_cancel_task_with_arg+0x134>)
 800f6fa:	00e0      	lsls	r0, r4, #3
 800f6fc:	5881      	ldr	r1, [r0, r2]
 800f6fe:	00db      	lsls	r3, r3, #3
 800f700:	589b      	ldr	r3, [r3, r2]
 800f702:	428b      	cmp	r3, r1
 800f704:	d040      	beq.n	800f788 <sched_cancel_task_with_arg+0xc0>
 800f706:	002b      	movs	r3, r5
 800f708:	e000      	b.n	800f70c <sched_cancel_task_with_arg+0x44>
 800f70a:	0003      	movs	r3, r0
		if(is_next_task_the_same(id))
 800f70c:	07db      	lsls	r3, r3, #31
 800f70e:	d442      	bmi.n	800f796 <sched_cancel_task_with_arg+0xce>
		if(retVal == SUCCESS)
 800f710:	2d00      	cmp	r5, #0
 800f712:	d133      	bne.n	800f77c <sched_cancel_task_with_arg+0xb4>
			uint8_t index = NG(m_index)[id].index;
 800f714:	00e4      	lsls	r4, r4, #3
 800f716:	4b39      	ldr	r3, [pc, #228]	; (800f7fc <sched_cancel_task_with_arg+0x134>)
 800f718:	191c      	adds	r4, r3, r4
 800f71a:	7923      	ldrb	r3, [r4, #4]
			if (NG(m_info)[index].prev == NO_TASK)
 800f71c:	005a      	lsls	r2, r3, #1
 800f71e:	18d2      	adds	r2, r2, r3
 800f720:	0092      	lsls	r2, r2, #2
 800f722:	4937      	ldr	r1, [pc, #220]	; (800f800 <sched_cancel_task_with_arg+0x138>)
 800f724:	188a      	adds	r2, r1, r2
 800f726:	7a51      	ldrb	r1, [r2, #9]
 800f728:	2929      	cmp	r1, #41	; 0x29
 800f72a:	d051      	beq.n	800f7d0 <sched_cancel_task_with_arg+0x108>
				NG(m_info)[NG(m_info)[index].prev].next = NG(m_info)[index].next;
 800f72c:	4834      	ldr	r0, [pc, #208]	; (800f800 <sched_cancel_task_with_arg+0x138>)
 800f72e:	005a      	lsls	r2, r3, #1
 800f730:	18d2      	adds	r2, r2, r3
 800f732:	0092      	lsls	r2, r2, #2
 800f734:	1882      	adds	r2, r0, r2
 800f736:	7a14      	ldrb	r4, [r2, #8]
 800f738:	004a      	lsls	r2, r1, #1
 800f73a:	1852      	adds	r2, r2, r1
 800f73c:	0092      	lsls	r2, r2, #2
 800f73e:	1882      	adds	r2, r0, r2
 800f740:	7214      	strb	r4, [r2, #8]
			if (NG(m_info)[index].next == NO_TASK)
 800f742:	005a      	lsls	r2, r3, #1
 800f744:	18d2      	adds	r2, r2, r3
 800f746:	0092      	lsls	r2, r2, #2
 800f748:	492d      	ldr	r1, [pc, #180]	; (800f800 <sched_cancel_task_with_arg+0x138>)
 800f74a:	188a      	adds	r2, r1, r2
 800f74c:	7a11      	ldrb	r1, [r2, #8]
 800f74e:	2929      	cmp	r1, #41	; 0x29
 800f750:	d048      	beq.n	800f7e4 <sched_cancel_task_with_arg+0x11c>
				NG(m_info)[NG(m_info)[index].next].prev = NG(m_info)[index].prev;
 800f752:	482b      	ldr	r0, [pc, #172]	; (800f800 <sched_cancel_task_with_arg+0x138>)
 800f754:	005a      	lsls	r2, r3, #1
 800f756:	18d2      	adds	r2, r2, r3
 800f758:	0092      	lsls	r2, r2, #2
 800f75a:	1882      	adds	r2, r0, r2
 800f75c:	7a54      	ldrb	r4, [r2, #9]
 800f75e:	004a      	lsls	r2, r1, #1
 800f760:	1852      	adds	r2, r2, r1
 800f762:	0092      	lsls	r2, r2, #2
 800f764:	1882      	adds	r2, r0, r2
 800f766:	7254      	strb	r4, [r2, #9]
			NG(m_info)[index].prev = NO_TASK;
 800f768:	4825      	ldr	r0, [pc, #148]	; (800f800 <sched_cancel_task_with_arg+0x138>)
 800f76a:	005a      	lsls	r2, r3, #1
 800f76c:	18d1      	adds	r1, r2, r3
 800f76e:	0089      	lsls	r1, r1, #2
 800f770:	1841      	adds	r1, r0, r1
 800f772:	2429      	movs	r4, #41	; 0x29
 800f774:	724c      	strb	r4, [r1, #9]
			NG(m_info)[index].next = NO_TASK;
 800f776:	720c      	strb	r4, [r1, #8]
			NG(m_info)[index].priority = NOT_SCHEDULED;
 800f778:	2308      	movs	r3, #8
 800f77a:	728b      	strb	r3, [r1, #10]
	end_atomic();
 800f77c:	f7fb f922 	bl	800a9c4 <end_atomic>
}
 800f780:	0028      	movs	r0, r5
 800f782:	bc04      	pop	{r2}
 800f784:	4690      	mov	r8, r2
 800f786:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((id + 1) < NG(num_registered_tasks)) && (NG(m_index)[id].task == NG(m_index)[id + 1].task);
 800f788:	2301      	movs	r3, #1
 800f78a:	e7bf      	b.n	800f70c <sched_cancel_task_with_arg+0x44>
 800f78c:	002b      	movs	r3, r5
				if(is_next_task_the_same(id))
 800f78e:	07db      	lsls	r3, r3, #31
 800f790:	d51b      	bpl.n	800f7ca <sched_cancel_task_with_arg+0x102>
					id += 1;
 800f792:	3401      	adds	r4, #1
 800f794:	b2e4      	uxtb	r4, r4
				if(NG(m_info)[NG(m_index)[id].index].arg == arg)
 800f796:	00e1      	lsls	r1, r4, #3
 800f798:	4b18      	ldr	r3, [pc, #96]	; (800f7fc <sched_cancel_task_with_arg+0x134>)
 800f79a:	185b      	adds	r3, r3, r1
 800f79c:	7919      	ldrb	r1, [r3, #4]
 800f79e:	004b      	lsls	r3, r1, #1
 800f7a0:	185b      	adds	r3, r3, r1
 800f7a2:	009b      	lsls	r3, r3, #2
 800f7a4:	4916      	ldr	r1, [pc, #88]	; (800f800 <sched_cancel_task_with_arg+0x138>)
 800f7a6:	18cb      	adds	r3, r1, r3
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	42b3      	cmp	r3, r6
 800f7ac:	d0b0      	beq.n	800f710 <sched_cancel_task_with_arg+0x48>
	return ((id + 1) < NG(num_registered_tasks)) && (NG(m_index)[id].task == NG(m_index)[id + 1].task);
 800f7ae:	1c63      	adds	r3, r4, #1
 800f7b0:	429f      	cmp	r7, r3
 800f7b2:	ddeb      	ble.n	800f78c <sched_cancel_task_with_arg+0xc4>
 800f7b4:	4911      	ldr	r1, [pc, #68]	; (800f7fc <sched_cancel_task_with_arg+0x134>)
 800f7b6:	00e2      	lsls	r2, r4, #3
 800f7b8:	5852      	ldr	r2, [r2, r1]
 800f7ba:	00db      	lsls	r3, r3, #3
 800f7bc:	585b      	ldr	r3, [r3, r1]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d001      	beq.n	800f7c6 <sched_cancel_task_with_arg+0xfe>
 800f7c2:	002b      	movs	r3, r5
 800f7c4:	e7e3      	b.n	800f78e <sched_cancel_task_with_arg+0xc6>
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	e7e1      	b.n	800f78e <sched_cancel_task_with_arg+0xc6>
					retVal = -EALREADY;
 800f7ca:	2578      	movs	r5, #120	; 0x78
 800f7cc:	426d      	negs	r5, r5
 800f7ce:	e79f      	b.n	800f710 <sched_cancel_task_with_arg+0x48>
				NG(m_head)[NG(m_info)[index].priority] = NG(m_info)[index].next;
 800f7d0:	005a      	lsls	r2, r3, #1
 800f7d2:	18d2      	adds	r2, r2, r3
 800f7d4:	0092      	lsls	r2, r2, #2
 800f7d6:	490a      	ldr	r1, [pc, #40]	; (800f800 <sched_cancel_task_with_arg+0x138>)
 800f7d8:	188a      	adds	r2, r1, r2
 800f7da:	7a91      	ldrb	r1, [r2, #10]
 800f7dc:	7a10      	ldrb	r0, [r2, #8]
 800f7de:	4a09      	ldr	r2, [pc, #36]	; (800f804 <sched_cancel_task_with_arg+0x13c>)
 800f7e0:	5450      	strb	r0, [r2, r1]
 800f7e2:	e7ae      	b.n	800f742 <sched_cancel_task_with_arg+0x7a>
				NG(m_tail)[NG(m_info)[index].priority] = NG(m_info)[index].prev;
 800f7e4:	005a      	lsls	r2, r3, #1
 800f7e6:	18d2      	adds	r2, r2, r3
 800f7e8:	0092      	lsls	r2, r2, #2
 800f7ea:	4905      	ldr	r1, [pc, #20]	; (800f800 <sched_cancel_task_with_arg+0x138>)
 800f7ec:	188a      	adds	r2, r1, r2
 800f7ee:	7a91      	ldrb	r1, [r2, #10]
 800f7f0:	7a50      	ldrb	r0, [r2, #9]
 800f7f2:	4a05      	ldr	r2, [pc, #20]	; (800f808 <sched_cancel_task_with_arg+0x140>)
 800f7f4:	5450      	strb	r0, [r2, r1]
 800f7f6:	e7b7      	b.n	800f768 <sched_cancel_task_with_arg+0xa0>
 800f7f8:	20003db4 	.word	0x20003db4
 800f7fc:	20003a78 	.word	0x20003a78
 800f800:	20003bc0 	.word	0x20003bc0
 800f804:	20003a70 	.word	0x20003a70
 800f808:	20003dac 	.word	0x20003dac

0800f80c <sched_check_software_watchdog>:
void sched_set_low_power_mode(uint8_t mode) {
  low_power_mode = mode;
}

// This is in interrupt context
__LINK_C timer_tick_t sched_check_software_watchdog(task_t task, timer_tick_t current_time) {
 800f80c:	b510      	push	{r4, lr}
#ifdef FRAMEWORK_USE_WATCHDOG
	if(task == &__feed_watchdog_task) {
 800f80e:	4b0f      	ldr	r3, [pc, #60]	; (800f84c <sched_check_software_watchdog+0x40>)
 800f810:	4283      	cmp	r3, r0
 800f812:	d001      	beq.n	800f818 <sched_check_software_watchdog+0xc>
		} else {
			return hw_watchdog_get_timeout() * TIMER_TICKS_PER_SEC;
		}
	}
#endif
	return 0;
 800f814:	2000      	movs	r0, #0
}
 800f816:	bd10      	pop	{r4, pc}
		if(scheduler_active) {
 800f818:	4b0d      	ldr	r3, [pc, #52]	; (800f850 <sched_check_software_watchdog+0x44>)
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d011      	beq.n	800f844 <sched_check_software_watchdog+0x38>
			timer_tick_t difference = timer_calculate_difference(last_task_start_time, current_time);
 800f820:	4b0c      	ldr	r3, [pc, #48]	; (800f854 <sched_check_software_watchdog+0x48>)
 800f822:	6818      	ldr	r0, [r3, #0]
 800f824:	f000 fdae 	bl	8010384 <timer_calculate_difference>
 800f828:	0004      	movs	r4, r0
			if(difference > WATCHDOG_WARNING_TIMEOUT) {
 800f82a:	2388      	movs	r3, #136	; 0x88
 800f82c:	01db      	lsls	r3, r3, #7
 800f82e:	4298      	cmp	r0, r3
 800f830:	d903      	bls.n	800f83a <sched_check_software_watchdog+0x2e>
				return hw_watchdog_get_timeout() * TIMER_TICKS_PER_SEC;
 800f832:	f7fc fe3d 	bl	800c4b0 <hw_watchdog_get_timeout>
 800f836:	0280      	lsls	r0, r0, #10
 800f838:	e7ed      	b.n	800f816 <sched_check_software_watchdog+0xa>
			return (hw_watchdog_get_timeout() * TIMER_TICKS_PER_SEC - difference);
 800f83a:	f7fc fe39 	bl	800c4b0 <hw_watchdog_get_timeout>
 800f83e:	0280      	lsls	r0, r0, #10
 800f840:	1b00      	subs	r0, r0, r4
 800f842:	e7e8      	b.n	800f816 <sched_check_software_watchdog+0xa>
			return hw_watchdog_get_timeout() * TIMER_TICKS_PER_SEC;
 800f844:	f7fc fe34 	bl	800c4b0 <hw_watchdog_get_timeout>
 800f848:	0280      	lsls	r0, r0, #10
 800f84a:	e7e4      	b.n	800f816 <sched_check_software_watchdog+0xa>
 800f84c:	0800f24d 	.word	0x0800f24d
 800f850:	20003dbd 	.word	0x20003dbd
 800f854:	20003db8 	.word	0x20003db8

0800f858 <scheduler_run>:
		return 0;
	}
}

__LINK_C void scheduler_run()
{
 800f858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while(1)
	{
#if defined FRAMEWORK_USE_WATCHDOG
		bool task_list_empty = true;
		uint8_t executed_tasks = 0;
		watchdog_wakeup = false;
 800f85a:	4b3d      	ldr	r3, [pc, #244]	; (800f950 <scheduler_run+0xf8>)
 800f85c:	2200      	movs	r2, #0
 800f85e:	701a      	strb	r2, [r3, #0]
#endif
#if (defined FRAMEWORK_USE_POWER_TRACKING || FRAMEWORK_SCHEDULER_MAX_ACTIVE_TIME > 0)
		timer_tick_t wakeup_time = timer_get_counter_value();
 800f860:	f000 fd4e 	bl	8010300 <timer_get_counter_value>
 800f864:	0005      	movs	r5, r0
		uint8_t executed_tasks = 0;
 800f866:	2600      	movs	r6, #0
		bool task_list_empty = true;
 800f868:	2701      	movs	r7, #1
#endif
		while(NG(current_priority) < NUM_PRIORITIES)
 800f86a:	4b3a      	ldr	r3, [pc, #232]	; (800f954 <scheduler_run+0xfc>)
 800f86c:	781b      	ldrb	r3, [r3, #0]
 800f86e:	b2db      	uxtb	r3, r3
 800f870:	2b07      	cmp	r3, #7
 800f872:	d84d      	bhi.n	800f910 <scheduler_run+0xb8>
		{
			check_structs_are_valid();
			for(uint8_t id = pop_task((NG(current_priority))); id != NO_TASK; id = pop_task(NG(current_priority)))
 800f874:	4b37      	ldr	r3, [pc, #220]	; (800f954 <scheduler_run+0xfc>)
 800f876:	7818      	ldrb	r0, [r3, #0]
 800f878:	b2c0      	uxtb	r0, r0
 800f87a:	f7ff fd81 	bl	800f380 <pop_task>
 800f87e:	0004      	movs	r4, r0
 800f880:	2c29      	cmp	r4, #41	; 0x29
 800f882:	d01e      	beq.n	800f8c2 <scheduler_run+0x6a>
			{
				scheduler_active = true;
 800f884:	4b34      	ldr	r3, [pc, #208]	; (800f958 <scheduler_run+0x100>)
 800f886:	2201      	movs	r2, #1
 800f888:	701a      	strb	r2, [r3, #0]
#if defined FRAMEWORK_USE_WATCHDOG
				executed_tasks++;
 800f88a:	3601      	adds	r6, #1
 800f88c:	b2f6      	uxtb	r6, r6
				task_list_empty = false;
				hw_watchdog_feed();
 800f88e:	f7fc fe07 	bl	800c4a0 <hw_watchdog_feed>
				last_task_start_time = timer_get_counter_value();
 800f892:	f000 fd35 	bl	8010300 <timer_get_counter_value>
 800f896:	4b31      	ldr	r3, [pc, #196]	; (800f95c <scheduler_run+0x104>)
 800f898:	6018      	str	r0, [r3, #0]
				check_structs_are_valid();
#if defined(FRAMEWORK_LOG_ENABLED) && defined(FRAMEWORK_SCHED_LOG_ENABLED)
				timer_tick_t start = timer_get_counter_value();
				log_print_string("SCHED start %p at %i", NG(m_info)[id].task, start);
#endif
				current_task_id = id;
 800f89a:	4b31      	ldr	r3, [pc, #196]	; (800f960 <scheduler_run+0x108>)
 800f89c:	701c      	strb	r4, [r3, #0]
				NG(m_info)[id].task(NG(m_info)[id].arg);
 800f89e:	4b31      	ldr	r3, [pc, #196]	; (800f964 <scheduler_run+0x10c>)
 800f8a0:	0060      	lsls	r0, r4, #1
 800f8a2:	1902      	adds	r2, r0, r4
 800f8a4:	0092      	lsls	r2, r2, #2
 800f8a6:	58d2      	ldr	r2, [r2, r3]
 800f8a8:	1900      	adds	r0, r0, r4
 800f8aa:	0080      	lsls	r0, r0, #2
 800f8ac:	1818      	adds	r0, r3, r0
 800f8ae:	6840      	ldr	r0, [r0, #4]
 800f8b0:	4790      	blx	r2
			for(uint8_t id = pop_task((NG(current_priority))); id != NO_TASK; id = pop_task(NG(current_priority)))
 800f8b2:	4b28      	ldr	r3, [pc, #160]	; (800f954 <scheduler_run+0xfc>)
 800f8b4:	7818      	ldrb	r0, [r3, #0]
 800f8b6:	b2c0      	uxtb	r0, r0
 800f8b8:	f7ff fd62 	bl	800f380 <pop_task>
 800f8bc:	0004      	movs	r4, r0
				task_list_empty = false;
 800f8be:	2700      	movs	r7, #0
 800f8c0:	e7de      	b.n	800f880 <scheduler_run+0x28>
				log_print_string("SCHED stop %p at %i took %i", NG(m_info)[id].task, stop, duration);
#endif
			}
			//this needs to be done atomically since otherwise we risk decrementing the current priority
			//while a higher priority task is waiting in the queue
			start_atomic();
 800f8c2:	f7fb f871 	bl	800a9a8 <start_atomic>
			if (!tasks_waiting(NG(current_priority)))
 800f8c6:	4b23      	ldr	r3, [pc, #140]	; (800f954 <scheduler_run+0xfc>)
 800f8c8:	781b      	ldrb	r3, [r3, #0]
 800f8ca:	b2db      	uxtb	r3, r3
	return NG(m_head)[priority] != NO_TASK;
 800f8cc:	4a26      	ldr	r2, [pc, #152]	; (800f968 <scheduler_run+0x110>)
 800f8ce:	5cd3      	ldrb	r3, [r2, r3]
			if (!tasks_waiting(NG(current_priority)))
 800f8d0:	2b29      	cmp	r3, #41	; 0x29
 800f8d2:	d00b      	beq.n	800f8ec <scheduler_run+0x94>
				task_list_empty = false;
 800f8d4:	2200      	movs	r2, #0
				NG(current_priority)++;
#ifndef NDEBUG
			for(int i = 0; i < NG(current_priority); i++)
 800f8d6:	4b1f      	ldr	r3, [pc, #124]	; (800f954 <scheduler_run+0xfc>)
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	b2db      	uxtb	r3, r3
 800f8dc:	4293      	cmp	r3, r2
 800f8de:	dd11      	ble.n	800f904 <scheduler_run+0xac>
	return NG(m_head)[priority] != NO_TASK;
 800f8e0:	4b21      	ldr	r3, [pc, #132]	; (800f968 <scheduler_run+0x110>)
 800f8e2:	5c9b      	ldrb	r3, [r3, r2]
				assert(!tasks_waiting(i));
 800f8e4:	2b29      	cmp	r3, #41	; 0x29
 800f8e6:	d107      	bne.n	800f8f8 <scheduler_run+0xa0>
			for(int i = 0; i < NG(current_priority); i++)
 800f8e8:	3201      	adds	r2, #1
 800f8ea:	e7f4      	b.n	800f8d6 <scheduler_run+0x7e>
				NG(current_priority)++;
 800f8ec:	4a19      	ldr	r2, [pc, #100]	; (800f954 <scheduler_run+0xfc>)
 800f8ee:	7813      	ldrb	r3, [r2, #0]
 800f8f0:	3301      	adds	r3, #1
 800f8f2:	b2db      	uxtb	r3, r3
 800f8f4:	7013      	strb	r3, [r2, #0]
 800f8f6:	e7ed      	b.n	800f8d4 <scheduler_run+0x7c>
				assert(!tasks_waiting(i));
 800f8f8:	4b1c      	ldr	r3, [pc, #112]	; (800f96c <scheduler_run+0x114>)
 800f8fa:	4a1d      	ldr	r2, [pc, #116]	; (800f970 <scheduler_run+0x118>)
 800f8fc:	491d      	ldr	r1, [pc, #116]	; (800f974 <scheduler_run+0x11c>)
 800f8fe:	481e      	ldr	r0, [pc, #120]	; (800f978 <scheduler_run+0x120>)
 800f900:	f7f8 fe7e 	bl	8008600 <__assert_func>
#endif
			task_scheduled_after_sched_loop = false;
 800f904:	4b1d      	ldr	r3, [pc, #116]	; (800f97c <scheduler_run+0x124>)
 800f906:	2200      	movs	r2, #0
 800f908:	701a      	strb	r2, [r3, #0]
			end_atomic();	
 800f90a:	f7fb f85b 	bl	800a9c4 <end_atomic>
 800f90e:	e7ac      	b.n	800f86a <scheduler_run+0x12>
		}		
		scheduler_active = false;
 800f910:	4b11      	ldr	r3, [pc, #68]	; (800f958 <scheduler_run+0x100>)
 800f912:	2200      	movs	r2, #0
 800f914:	701a      	strb	r2, [r3, #0]
#if defined FRAMEWORK_USE_WATCHDOG
		hw_watchdog_feed();
 800f916:	f7fc fdc3 	bl	800c4a0 <hw_watchdog_feed>
#if defined FRAMEWORK_USE_POWER_TRACKING
		//we don't want to register wake-ups that only trigger the watchdog
		//we also need to check that the watchdog task was the only task that was executed as there is a small chance that
		//the watchdog task is triggered when also other tasks are executing. In that case we want to track the time as active.
		if(!(task_list_empty || (watchdog_wakeup && executed_tasks == 1)))
 800f91a:	2f00      	cmp	r7, #0
 800f91c:	d10a      	bne.n	800f934 <scheduler_run+0xdc>
 800f91e:	4b0c      	ldr	r3, [pc, #48]	; (800f950 <scheduler_run+0xf8>)
 800f920:	781b      	ldrb	r3, [r3, #0]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d001      	beq.n	800f92a <scheduler_run+0xd2>
 800f926:	2e01      	cmp	r6, #1
 800f928:	d004      	beq.n	800f934 <scheduler_run+0xdc>
		{
#endif
#endif
#if defined FRAMEWORK_USE_POWER_TRACKING
			power_tracking_register_run_time(timer_get_current_time_difference(wakeup_time));
 800f92a:	0028      	movs	r0, r5
 800f92c:	f000 ffcc 	bl	80108c8 <timer_get_current_time_difference>
 800f930:	f7ff fc60 	bl	800f1f4 <power_tracking_register_run_time>
#endif

		//during some oss7-testsuite cases we can see a scheduling of the flushing of the fifos for the UART in between the end of the scheduler 
		//priority loop, and the call to enter low power mode. This caused the test to fail as the response was received by the testsuite only 
		//after the watchdog woke up the device. So, task_scheduled_after_sched_loop is used to ensure the tasklist is really empty.
		start_atomic();
 800f934:	f7fb f838 	bl	800a9a8 <start_atomic>
		if(!task_scheduled_after_sched_loop) {
 800f938:	4b10      	ldr	r3, [pc, #64]	; (800f97c <scheduler_run+0x124>)
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d002      	beq.n	800f946 <scheduler_run+0xee>
			hw_enter_lowpower_mode(low_power_mode);
		}
		end_atomic();
 800f940:	f7fb f840 	bl	800a9c4 <end_atomic>
	{
 800f944:	e789      	b.n	800f85a <scheduler_run+0x2>
			hw_enter_lowpower_mode(low_power_mode);
 800f946:	4b0e      	ldr	r3, [pc, #56]	; (800f980 <scheduler_run+0x128>)
 800f948:	7818      	ldrb	r0, [r3, #0]
 800f94a:	f7fc f8b9 	bl	800bac0 <hw_enter_lowpower_mode>
 800f94e:	e7f7      	b.n	800f940 <scheduler_run+0xe8>
 800f950:	20003dbf 	.word	0x20003dbf
 800f954:	20003a6c 	.word	0x20003a6c
 800f958:	20003dbd 	.word	0x20003dbd
 800f95c:	20003db8 	.word	0x20003db8
 800f960:	20003db5 	.word	0x20003db5
 800f964:	20003bc0 	.word	0x20003bc0
 800f968:	20003a70 	.word	0x20003a70
 800f96c:	0801a670 	.word	0x0801a670
 800f970:	0801a6dc 	.word	0x0801a6dc
 800f974:	00000239 	.word	0x00000239
 800f978:	0801a5b4 	.word	0x0801a5b4
 800f97c:	20003dbe 	.word	0x20003dbe
 800f980:	20003dbc 	.word	0x20003dbc

0800f984 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800f984:	6902      	ldr	r2, [r0, #16]
  WrOff = pRing->WrOff;
 800f986:	68c3      	ldr	r3, [r0, #12]
  if (RdOff <= WrOff) {
 800f988:	429a      	cmp	r2, r3
 800f98a:	d804      	bhi.n	800f996 <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800f98c:	6880      	ldr	r0, [r0, #8]
 800f98e:	1ac0      	subs	r0, r0, r3
 800f990:	1880      	adds	r0, r0, r2
 800f992:	3801      	subs	r0, #1
  } else {
    r = RdOff - WrOff - 1u;
  }
  return r;
}
 800f994:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
 800f996:	1ad0      	subs	r0, r2, r3
 800f998:	3801      	subs	r0, #1
  return r;
 800f99a:	e7fb      	b.n	800f994 <_GetAvailWriteSpace+0x10>

0800f99c <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800f99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f99e:	46ce      	mov	lr, r9
 800f9a0:	4647      	mov	r7, r8
 800f9a2:	b580      	push	{r7, lr}
 800f9a4:	0004      	movs	r4, r0
 800f9a6:	000e      	movs	r6, r1
 800f9a8:	0017      	movs	r7, r2
  WrOff = pRing->WrOff;
 800f9aa:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
 800f9ac:	6883      	ldr	r3, [r0, #8]
 800f9ae:	4699      	mov	r9, r3
 800f9b0:	1b5b      	subs	r3, r3, r5
 800f9b2:	4698      	mov	r8, r3
  if (Rem > NumBytes) {
 800f9b4:	4293      	cmp	r3, r2
 800f9b6:	d909      	bls.n	800f9cc <_WriteNoCheck+0x30>
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 800f9b8:	6843      	ldr	r3, [r0, #4]
 800f9ba:	1958      	adds	r0, r3, r5
 800f9bc:	f005 fa08 	bl	8014dd0 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 800f9c0:	19ed      	adds	r5, r5, r7
 800f9c2:	60e5      	str	r5, [r4, #12]
}
 800f9c4:	bc0c      	pop	{r2, r3}
 800f9c6:	4690      	mov	r8, r2
 800f9c8:	4699      	mov	r9, r3
 800f9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 800f9cc:	6843      	ldr	r3, [r0, #4]
 800f9ce:	1958      	adds	r0, r3, r5
 800f9d0:	4642      	mov	r2, r8
 800f9d2:	f005 f9fd 	bl	8014dd0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800f9d6:	464b      	mov	r3, r9
 800f9d8:	1aed      	subs	r5, r5, r3
 800f9da:	19ed      	adds	r5, r5, r7
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 800f9dc:	0031      	movs	r1, r6
 800f9de:	4441      	add	r1, r8
 800f9e0:	002a      	movs	r2, r5
 800f9e2:	6860      	ldr	r0, [r4, #4]
 800f9e4:	f005 f9f4 	bl	8014dd0 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800f9e8:	60e5      	str	r5, [r4, #12]
}
 800f9ea:	e7eb      	b.n	800f9c4 <_WriteNoCheck+0x28>

0800f9ec <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800f9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ee:	46ce      	mov	lr, r9
 800f9f0:	4647      	mov	r7, r8
 800f9f2:	b580      	push	{r7, lr}
 800f9f4:	0006      	movs	r6, r0
 800f9f6:	4688      	mov	r8, r1
 800f9f8:	0017      	movs	r7, r2
  WrOff = pRing->WrOff;
 800f9fa:	68c4      	ldr	r4, [r0, #12]
  NumBytesWritten = 0u;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	4699      	mov	r9, r3
 800fa00:	e015      	b.n	800fa2e <_WriteBlocking+0x42>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800fa02:	1b00      	subs	r0, r0, r4
 800fa04:	68b3      	ldr	r3, [r6, #8]
 800fa06:	469c      	mov	ip, r3
 800fa08:	4460      	add	r0, ip
 800fa0a:	3801      	subs	r0, #1
 800fa0c:	e014      	b.n	800fa38 <_WriteBlocking+0x4c>
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 800fa0e:	6873      	ldr	r3, [r6, #4]
 800fa10:	1918      	adds	r0, r3, r4
 800fa12:	002a      	movs	r2, r5
 800fa14:	4641      	mov	r1, r8
 800fa16:	f005 f9db 	bl	8014dd0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800fa1a:	44a9      	add	r9, r5
    pBuffer         += NumBytesToWrite;
 800fa1c:	44a8      	add	r8, r5
    NumBytes        -= NumBytesToWrite;
 800fa1e:	1b7f      	subs	r7, r7, r5
    WrOff           += NumBytesToWrite;
 800fa20:	1964      	adds	r4, r4, r5
    if (WrOff == pRing->SizeOfBuffer) {
 800fa22:	68b3      	ldr	r3, [r6, #8]
 800fa24:	42a3      	cmp	r3, r4
 800fa26:	d011      	beq.n	800fa4c <_WriteBlocking+0x60>
    pRing->WrOff = WrOff;
 800fa28:	60f4      	str	r4, [r6, #12]
  } while (NumBytes);
 800fa2a:	2f00      	cmp	r7, #0
 800fa2c:	d010      	beq.n	800fa50 <_WriteBlocking+0x64>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800fa2e:	6930      	ldr	r0, [r6, #16]
    if (RdOff > WrOff) {
 800fa30:	4284      	cmp	r4, r0
 800fa32:	d2e6      	bcs.n	800fa02 <_WriteBlocking+0x16>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800fa34:	1b00      	subs	r0, r0, r4
 800fa36:	3801      	subs	r0, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800fa38:	68b3      	ldr	r3, [r6, #8]
 800fa3a:	1b1b      	subs	r3, r3, r4
 800fa3c:	4283      	cmp	r3, r0
 800fa3e:	d900      	bls.n	800fa42 <_WriteBlocking+0x56>
 800fa40:	0003      	movs	r3, r0
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800fa42:	003d      	movs	r5, r7
 800fa44:	429f      	cmp	r7, r3
 800fa46:	d9e2      	bls.n	800fa0e <_WriteBlocking+0x22>
 800fa48:	001d      	movs	r5, r3
 800fa4a:	e7e0      	b.n	800fa0e <_WriteBlocking+0x22>
      WrOff = 0u;
 800fa4c:	2400      	movs	r4, #0
 800fa4e:	e7eb      	b.n	800fa28 <_WriteBlocking+0x3c>
}
 800fa50:	4648      	mov	r0, r9
 800fa52:	bc0c      	pop	{r2, r3}
 800fa54:	4690      	mov	r8, r2
 800fa56:	4699      	mov	r9, r3
 800fa58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa5c <_DoInit>:
static void _DoInit(void) {
 800fa5c:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800fa5e:	4c10      	ldr	r4, [pc, #64]	; (800faa0 <_DoInit+0x44>)
 800fa60:	2201      	movs	r2, #1
 800fa62:	6122      	str	r2, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800fa64:	2300      	movs	r3, #0
 800fa66:	6163      	str	r3, [r4, #20]
  p->aUp[0].sName         = "Terminal";
 800fa68:	490e      	ldr	r1, [pc, #56]	; (800faa4 <_DoInit+0x48>)
 800fa6a:	61a1      	str	r1, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800fa6c:	480e      	ldr	r0, [pc, #56]	; (800faa8 <_DoInit+0x4c>)
 800fa6e:	61e0      	str	r0, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800fa70:	2080      	movs	r0, #128	; 0x80
 800fa72:	00c0      	lsls	r0, r0, #3
 800fa74:	6220      	str	r0, [r4, #32]
  p->aUp[0].RdOff         = 0u;
 800fa76:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800fa78:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800fa7a:	62e2      	str	r2, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
 800fa7c:	6321      	str	r1, [r4, #48]	; 0x30
  p->aDown[0].pBuffer       = _acDownBuffer;
 800fa7e:	490b      	ldr	r1, [pc, #44]	; (800faac <_DoInit+0x50>)
 800fa80:	6361      	str	r1, [r4, #52]	; 0x34
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800fa82:	63a3      	str	r3, [r4, #56]	; 0x38
  p->aDown[0].RdOff         = 0u;
 800fa84:	6423      	str	r3, [r4, #64]	; 0x40
  p->aDown[0].WrOff         = 0u;
 800fa86:	63e3      	str	r3, [r4, #60]	; 0x3c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800fa88:	6462      	str	r2, [r4, #68]	; 0x44
  strcpy(&p->acID[7], "RTT");
 800fa8a:	1de0      	adds	r0, r4, #7
 800fa8c:	4908      	ldr	r1, [pc, #32]	; (800fab0 <_DoInit+0x54>)
 800fa8e:	f005 fc4b 	bl	8015328 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
 800fa92:	4908      	ldr	r1, [pc, #32]	; (800fab4 <_DoInit+0x58>)
 800fa94:	0020      	movs	r0, r4
 800fa96:	f005 fc47 	bl	8015328 <strcpy>
  p->acID[6] = ' ';
 800fa9a:	2320      	movs	r3, #32
 800fa9c:	71a3      	strb	r3, [r4, #6]
}
 800fa9e:	bd10      	pop	{r4, pc}
 800faa0:	20003dc0 	.word	0x20003dc0
 800faa4:	0801a6ec 	.word	0x0801a6ec
 800faa8:	20003df0 	.word	0x20003df0
 800faac:	20003df0 	.word	0x20003df0
 800fab0:	0801a6f8 	.word	0x0801a6f8
 800fab4:	0801a6fc 	.word	0x0801a6fc

0800fab8 <SEGGER_RTT_WriteNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800fab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faba:	0003      	movs	r3, r0
 800fabc:	000f      	movs	r7, r1
 800fabe:	0016      	movs	r6, r2

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800fac0:	4a19      	ldr	r2, [pc, #100]	; (800fb28 <SEGGER_RTT_WriteNoLock+0x70>)
 800fac2:	1c41      	adds	r1, r0, #1
 800fac4:	004c      	lsls	r4, r1, #1
 800fac6:	1864      	adds	r4, r4, r1
 800fac8:	00e4      	lsls	r4, r4, #3
 800faca:	1914      	adds	r4, r2, r4
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800facc:	0040      	lsls	r0, r0, #1
 800face:	18c0      	adds	r0, r0, r3
 800fad0:	00c0      	lsls	r0, r0, #3
 800fad2:	1810      	adds	r0, r2, r0
 800fad4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 800fad6:	2d01      	cmp	r5, #1
 800fad8:	d012      	beq.n	800fb00 <SEGGER_RTT_WriteNoLock+0x48>
 800fada:	2d02      	cmp	r5, #2
 800fadc:	d01d      	beq.n	800fb1a <SEGGER_RTT_WriteNoLock+0x62>
 800fade:	2d00      	cmp	r5, #0
 800fae0:	d002      	beq.n	800fae8 <SEGGER_RTT_WriteNoLock+0x30>
 800fae2:	2500      	movs	r5, #0
  }
  //
  // Finish up.
  //
  return Status;
}
 800fae4:	0028      	movs	r0, r5
 800fae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
 800fae8:	0020      	movs	r0, r4
 800faea:	f7ff ff4b 	bl	800f984 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
 800faee:	4286      	cmp	r6, r0
 800faf0:	d8f8      	bhi.n	800fae4 <SEGGER_RTT_WriteNoLock+0x2c>
      _WriteNoCheck(pRing, pData, NumBytes);
 800faf2:	0032      	movs	r2, r6
 800faf4:	0039      	movs	r1, r7
 800faf6:	0020      	movs	r0, r4
 800faf8:	f7ff ff50 	bl	800f99c <_WriteNoCheck>
      Status = NumBytes;
 800fafc:	0035      	movs	r5, r6
 800fafe:	e7f1      	b.n	800fae4 <SEGGER_RTT_WriteNoLock+0x2c>
    Avail = _GetAvailWriteSpace(pRing);
 800fb00:	0020      	movs	r0, r4
 800fb02:	f7ff ff3f 	bl	800f984 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
 800fb06:	0035      	movs	r5, r6
 800fb08:	4286      	cmp	r6, r0
 800fb0a:	d900      	bls.n	800fb0e <SEGGER_RTT_WriteNoLock+0x56>
 800fb0c:	0005      	movs	r5, r0
    _WriteNoCheck(pRing, pData, Status);
 800fb0e:	002a      	movs	r2, r5
 800fb10:	0039      	movs	r1, r7
 800fb12:	0020      	movs	r0, r4
 800fb14:	f7ff ff42 	bl	800f99c <_WriteNoCheck>
    break;
 800fb18:	e7e4      	b.n	800fae4 <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800fb1a:	0032      	movs	r2, r6
 800fb1c:	0039      	movs	r1, r7
 800fb1e:	0020      	movs	r0, r4
 800fb20:	f7ff ff64 	bl	800f9ec <_WriteBlocking>
 800fb24:	0005      	movs	r5, r0
    break;
 800fb26:	e7dd      	b.n	800fae4 <SEGGER_RTT_WriteNoLock+0x2c>
 800fb28:	20003dc0 	.word	0x20003dc0

0800fb2c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800fb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb2e:	0004      	movs	r4, r0
 800fb30:	000d      	movs	r5, r1
 800fb32:	0016      	movs	r6, r2
  unsigned Status;
  //
  INIT();
 800fb34:	4b09      	ldr	r3, [pc, #36]	; (800fb5c <SEGGER_RTT_Write+0x30>)
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d00c      	beq.n	800fb56 <SEGGER_RTT_Write+0x2a>
  SEGGER_RTT_LOCK();
 800fb3c:	f3ef 8710 	mrs	r7, PRIMASK
 800fb40:	2101      	movs	r1, #1
 800fb42:	f381 8810 	msr	PRIMASK, r1
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 800fb46:	0032      	movs	r2, r6
 800fb48:	0029      	movs	r1, r5
 800fb4a:	0020      	movs	r0, r4
 800fb4c:	f7ff ffb4 	bl	800fab8 <SEGGER_RTT_WriteNoLock>
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 800fb50:	f387 8810 	msr	PRIMASK, r7
  //
  return Status;
}
 800fb54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  INIT();
 800fb56:	f7ff ff81 	bl	800fa5c <_DoInit>
 800fb5a:	e7ef      	b.n	800fb3c <SEGGER_RTT_Write+0x10>
 800fb5c:	20003dc0 	.word	0x20003dc0

0800fb60 <add_serial_protocol>:
}

static void add_serial_protocol(priv_serial_protocol_handle_t* new_phandle)
{
  priv_serial_protocol_handle_t* phandle;
  if(first_serial_protocol == NULL)
 800fb60:	4b07      	ldr	r3, [pc, #28]	; (800fb80 <add_serial_protocol+0x20>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d007      	beq.n	800fb78 <add_serial_protocol+0x18>
  {
    first_serial_protocol = new_phandle;
    return;
  }
  phandle = first_serial_protocol;
  while(phandle->next_serial_protocol != NULL)
 800fb68:	0019      	movs	r1, r3
 800fb6a:	228b      	movs	r2, #139	; 0x8b
 800fb6c:	0092      	lsls	r2, r2, #2
 800fb6e:	589b      	ldr	r3, [r3, r2]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d1f9      	bne.n	800fb68 <add_serial_protocol+0x8>
  {
    phandle = phandle->next_serial_protocol;
  }
  phandle->next_serial_protocol = new_phandle;
 800fb74:	5088      	str	r0, [r1, r2]
}
 800fb76:	4770      	bx	lr
    first_serial_protocol = new_phandle;
 800fb78:	4b01      	ldr	r3, [pc, #4]	; (800fb80 <add_serial_protocol+0x20>)
 800fb7a:	6018      	str	r0, [r3, #0]
    return;
 800fb7c:	e7fb      	b.n	800fb76 <add_serial_protocol+0x16>
 800fb7e:	46c0      	nop			; (mov r8, r8)
 800fb80:	200041f0 	.word	0x200041f0

0800fb84 <get_serial_protocol>:

static priv_serial_protocol_handle_t* get_serial_protocol(uart_handle_t* uart)
{
 800fb84:	0002      	movs	r2, r0
  priv_serial_protocol_handle_t* phandle = first_serial_protocol;
 800fb86:	4b07      	ldr	r3, [pc, #28]	; (800fba4 <get_serial_protocol+0x20>)
 800fb88:	6818      	ldr	r0, [r3, #0]
  while(phandle != NULL)
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d008      	beq.n	800fba0 <get_serial_protocol+0x1c>
  {
    if(phandle->uart == uart)
 800fb8e:	238a      	movs	r3, #138	; 0x8a
 800fb90:	009b      	lsls	r3, r3, #2
 800fb92:	58c3      	ldr	r3, [r0, r3]
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d003      	beq.n	800fba0 <get_serial_protocol+0x1c>
    {
      return phandle;
    }
    phandle = phandle->next_serial_protocol;
 800fb98:	238b      	movs	r3, #139	; 0x8b
 800fb9a:	009b      	lsls	r3, r3, #2
 800fb9c:	58c0      	ldr	r0, [r0, r3]
 800fb9e:	e7f4      	b.n	800fb8a <get_serial_protocol+0x6>
  }
  return NULL;
}
 800fba0:	4770      	bx	lr
 800fba2:	46c0      	nop			; (mov r8, r8)
 800fba4:	200041f0 	.word	0x200041f0

0800fba8 <serial_protocol_register_handler>:
}

static void serial_protocol_register_handler(serial_protocol_handle_t* handle, cmd_handler_t cmd_handler, serial_message_type_t type)
{
  priv_serial_protocol_handle_t* phandle = (priv_serial_protocol_handle_t*)handle->priv_data;
  switch(type) {
 800fba8:	2a03      	cmp	r2, #3
 800fbaa:	d012      	beq.n	800fbd2 <serial_protocol_register_handler+0x2a>
 800fbac:	d807      	bhi.n	800fbbe <serial_protocol_register_handler+0x16>
 800fbae:	2a01      	cmp	r2, #1
 800fbb0:	d00b      	beq.n	800fbca <serial_protocol_register_handler+0x22>
 800fbb2:	2a02      	cmp	r2, #2
 800fbb4:	d10c      	bne.n	800fbd0 <serial_protocol_register_handler+0x28>
    case SERIAL_MESSAGE_TYPE_ALP_DATA:
      phandle->alp_handler = cmd_handler;
      break;
    case SERIAL_MESSAGE_TYPE_PING_REQUEST:
      phandle->ping_request_handler = cmd_handler;
 800fbb6:	238e      	movs	r3, #142	; 0x8e
 800fbb8:	009b      	lsls	r3, r3, #2
 800fbba:	50c1      	str	r1, [r0, r3]
      break;
 800fbbc:	e008      	b.n	800fbd0 <serial_protocol_register_handler+0x28>
  switch(type) {
 800fbbe:	2a04      	cmp	r2, #4
 800fbc0:	d106      	bne.n	800fbd0 <serial_protocol_register_handler+0x28>
    case SERIAL_MESSAGE_TYPE_PING_RESPONSE:
      phandle->ping_response_handler = cmd_handler;
      break;
    case SERIAL_MESSAGE_TYPE_LOGGING:
      phandle->logging_handler = cmd_handler;
 800fbc2:	2390      	movs	r3, #144	; 0x90
 800fbc4:	009b      	lsls	r3, r3, #2
 800fbc6:	50c1      	str	r1, [r0, r3]
      break;
    default:
      DPRINT("Serial protocol callback not implemented for type %d", type);
  }
}
 800fbc8:	e002      	b.n	800fbd0 <serial_protocol_register_handler+0x28>
      phandle->alp_handler = cmd_handler;
 800fbca:	238d      	movs	r3, #141	; 0x8d
 800fbcc:	009b      	lsls	r3, r3, #2
 800fbce:	50c1      	str	r1, [r0, r3]
}
 800fbd0:	4770      	bx	lr
      phandle->ping_response_handler = cmd_handler;
 800fbd2:	238f      	movs	r3, #143	; 0x8f
 800fbd4:	009b      	lsls	r3, r3, #2
 800fbd6:	50c1      	str	r1, [r0, r3]
      break;
 800fbd8:	e7fa      	b.n	800fbd0 <serial_protocol_register_handler+0x28>

0800fbda <serial_protocol_unregister_handler>:

static void serial_protocol_unregister_handler(serial_protocol_handle_t* handle, serial_message_type_t type)
{
 800fbda:	b510      	push	{r4, lr}
 800fbdc:	000a      	movs	r2, r1
  serial_protocol_register_handler(handle, NULL, type);
 800fbde:	2100      	movs	r1, #0
 800fbe0:	f7ff ffe2 	bl	800fba8 <serial_protocol_register_handler>
}
 800fbe4:	bd10      	pop	{r4, pc}

0800fbe6 <serial_protocol_set_target_rebooted_callback>:

static void serial_protocol_set_target_rebooted_callback(serial_protocol_handle_t* handle, target_rebooted_callback_t cb)
{
  priv_serial_protocol_handle_t* phandle = (priv_serial_protocol_handle_t*)handle->priv_data;
  phandle->target_rebooted_cb = cb;
 800fbe6:	2391      	movs	r3, #145	; 0x91
 800fbe8:	009b      	lsls	r3, r3, #2
 800fbea:	50c1      	str	r1, [r0, r3]
}
 800fbec:	4770      	bx	lr
	...

0800fbf0 <uart_error_callback>:
static void uart_error_callback(uart_handle_t* uart, uart_error_t error) {
 800fbf0:	b570      	push	{r4, r5, r6, lr}
 800fbf2:	000c      	movs	r4, r1
    priv_serial_protocol_handle_t* phandle = get_serial_protocol(uart);
 800fbf4:	f7ff ffc6 	bl	800fb84 <get_serial_protocol>
 800fbf8:	0005      	movs	r5, r0
    log_print_string("UART ERROR %i", error);
 800fbfa:	0021      	movs	r1, r4
 800fbfc:	4809      	ldr	r0, [pc, #36]	; (800fc24 <uart_error_callback+0x34>)
 800fbfe:	f7ff f9d5 	bl	800efac <log_print_string>
    if(error == UART_OVERRUN_ERROR) {
 800fc02:	2c03      	cmp	r4, #3
 800fc04:	d000      	beq.n	800fc08 <uart_error_callback+0x18>
}
 800fc06:	bd70      	pop	{r4, r5, r6, pc}
      phandle->parsed_header = false;
 800fc08:	2292      	movs	r2, #146	; 0x92
 800fc0a:	0092      	lsls	r2, r2, #2
 800fc0c:	5cab      	ldrb	r3, [r5, r2]
 800fc0e:	2104      	movs	r1, #4
 800fc10:	438b      	bics	r3, r1
 800fc12:	54ab      	strb	r3, [r5, r2]
      phandle->payload_len = 0;
 800fc14:	4b04      	ldr	r3, [pc, #16]	; (800fc28 <uart_error_callback+0x38>)
 800fc16:	2200      	movs	r2, #0
 800fc18:	54ea      	strb	r2, [r5, r3]
      fifo_clear(&phandle->rx_fifo);
 800fc1a:	3b3e      	subs	r3, #62	; 0x3e
 800fc1c:	18e8      	adds	r0, r5, r3
 800fc1e:	f7fe febc 	bl	800e99a <fifo_clear>
}
 800fc22:	e7f0      	b.n	800fc06 <uart_error_callback+0x16>
 800fc24:	0801a704 	.word	0x0801a704
 800fc28:	00000246 	.word	0x00000246

0800fc2c <uart_rx_callback>:
{
 800fc2c:	b510      	push	{r4, lr}
 800fc2e:	b082      	sub	sp, #8
 800fc30:	466b      	mov	r3, sp
 800fc32:	71d9      	strb	r1, [r3, #7]
  priv_serial_protocol_handle_t* phandle = get_serial_protocol(uart);
 800fc34:	f7ff ffa6 	bl	800fb84 <get_serial_protocol>
 800fc38:	1e04      	subs	r4, r0, #0
  if(phandle != NULL)
 800fc3a:	d00c      	beq.n	800fc56 <uart_rx_callback+0x2a>
    if(fifo_put(&phandle->rx_fifo, &data, 1) != SUCCESS)
 800fc3c:	2382      	movs	r3, #130	; 0x82
 800fc3e:	009b      	lsls	r3, r3, #2
 800fc40:	18c0      	adds	r0, r0, r3
 800fc42:	2201      	movs	r2, #1
 800fc44:	466b      	mov	r3, sp
 800fc46:	1dd9      	adds	r1, r3, #7
 800fc48:	f7fe fd96 	bl	800e778 <fifo_put>
      sched_post_task_prio(&process_rx_fifo, DEFAULT_PRIORITY, phandle);
 800fc4c:	0022      	movs	r2, r4
 800fc4e:	2107      	movs	r1, #7
 800fc50:	4802      	ldr	r0, [pc, #8]	; (800fc5c <uart_rx_callback+0x30>)
 800fc52:	f7ff fca7 	bl	800f5a4 <sched_post_task_prio>
}
 800fc56:	b002      	add	sp, #8
 800fc58:	bd10      	pop	{r4, pc}
 800fc5a:	46c0      	nop			; (mov r8, r8)
 800fc5c:	0800fd5d 	.word	0x0800fd5d

0800fc60 <serial_protocol_disable>:
{
 800fc60:	b570      	push	{r4, r5, r6, lr}
 800fc62:	0004      	movs	r4, r0
  phandle->listen_uart_inited = false;
 800fc64:	2292      	movs	r2, #146	; 0x92
 800fc66:	0092      	lsls	r2, r2, #2
 800fc68:	5c83      	ldrb	r3, [r0, r2]
 800fc6a:	2102      	movs	r1, #2
 800fc6c:	438b      	bics	r3, r1
 800fc6e:	5483      	strb	r3, [r0, r2]
  assert(uart_disable(phandle->uart));
 800fc70:	238a      	movs	r3, #138	; 0x8a
 800fc72:	009b      	lsls	r3, r3, #2
 800fc74:	58c0      	ldr	r0, [r0, r3]
 800fc76:	f7fc fb17 	bl	800c2a8 <uart_disable>
 800fc7a:	2800      	cmp	r0, #0
 800fc7c:	d008      	beq.n	800fc90 <serial_protocol_disable+0x30>
  uart_pull_down_rx(phandle->uart);
 800fc7e:	258a      	movs	r5, #138	; 0x8a
 800fc80:	00ad      	lsls	r5, r5, #2
 800fc82:	5960      	ldr	r0, [r4, r5]
 800fc84:	f7fc faec 	bl	800c260 <uart_pull_down_rx>
    uart_rx_interrupt_disable(phandle->uart);
 800fc88:	5960      	ldr	r0, [r4, r5]
 800fc8a:	f7fc fbb9 	bl	800c400 <uart_rx_interrupt_disable>
}
 800fc8e:	bd70      	pop	{r4, r5, r6, pc}
  assert(uart_disable(phandle->uart));
 800fc90:	2108      	movs	r1, #8
 800fc92:	4b03      	ldr	r3, [pc, #12]	; (800fca0 <serial_protocol_disable+0x40>)
 800fc94:	4a03      	ldr	r2, [pc, #12]	; (800fca4 <serial_protocol_disable+0x44>)
 800fc96:	31ff      	adds	r1, #255	; 0xff
 800fc98:	4803      	ldr	r0, [pc, #12]	; (800fca8 <serial_protocol_disable+0x48>)
 800fc9a:	f7f8 fcb1 	bl	8008600 <__assert_func>
 800fc9e:	46c0      	nop			; (mov r8, r8)
 800fca0:	0801a714 	.word	0x0801a714
 800fca4:	0801a8dc 	.word	0x0801a8dc
 800fca8:	0801a730 	.word	0x0801a730

0800fcac <serial_protocol_clear_handler>:
static void serial_protocol_clear_handler(serial_protocol_handle_t* handle) {
 800fcac:	b570      	push	{r4, r5, r6, lr}
 800fcae:	0004      	movs	r4, r0
    priv_serial_protocol_handle_t* phandle = (priv_serial_protocol_handle_t*)handle->priv_data;
 800fcb0:	3004      	adds	r0, #4
    serial_protocol_disable(phandle);
 800fcb2:	f7ff ffd5 	bl	800fc60 <serial_protocol_disable>
    phandle->parsed_header = false;
 800fcb6:	2593      	movs	r5, #147	; 0x93
 800fcb8:	00ad      	lsls	r5, r5, #2
 800fcba:	5d63      	ldrb	r3, [r4, r5]
 800fcbc:	2204      	movs	r2, #4
 800fcbe:	4393      	bics	r3, r2
 800fcc0:	5563      	strb	r3, [r4, r5]
    phandle->payload_len = 0;
 800fcc2:	2600      	movs	r6, #0
 800fcc4:	4b09      	ldr	r3, [pc, #36]	; (800fcec <serial_protocol_clear_handler+0x40>)
 800fcc6:	54e6      	strb	r6, [r4, r3]
    fifo_clear(&phandle->rx_fifo);
 800fcc8:	3b3e      	subs	r3, #62	; 0x3e
 800fcca:	18e0      	adds	r0, r4, r3
 800fccc:	f7fe fe65 	bl	800e99a <fifo_clear>
    phandle->target_uart_state_isr_count = 0;
 800fcd0:	2392      	movs	r3, #146	; 0x92
 800fcd2:	009b      	lsls	r3, r3, #2
 800fcd4:	54e6      	strb	r6, [r4, r3]
    phandle->tx_request_pending = false;
 800fcd6:	5d63      	ldrb	r3, [r4, r5]
 800fcd8:	2201      	movs	r2, #1
 800fcda:	4393      	bics	r3, r2
 800fcdc:	5563      	strb	r3, [r4, r5]
    fifo_clear(&phandle->tx_fifo);
 800fcde:	2387      	movs	r3, #135	; 0x87
 800fce0:	009b      	lsls	r3, r3, #2
 800fce2:	18e0      	adds	r0, r4, r3
 800fce4:	f7fe fe59 	bl	800e99a <fifo_clear>
}
 800fce8:	bd70      	pop	{r4, r5, r6, pc}
 800fcea:	46c0      	nop			; (mov r8, r8)
 800fcec:	0000024a 	.word	0x0000024a

0800fcf0 <verify_payload>:
{
 800fcf0:	b570      	push	{r4, r5, r6, lr}
 800fcf2:	0005      	movs	r5, r0
 800fcf4:	0008      	movs	r0, r1
 800fcf6:	0014      	movs	r4, r2
  fifo_peek(bytes, payload, 0, frame_header[SERIAL_FRAME_SIZE]);
 800fcf8:	7913      	ldrb	r3, [r2, #4]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	4913      	ldr	r1, [pc, #76]	; (800fd4c <verify_payload+0x5c>)
 800fcfe:	f7fe fdff 	bl	800e900 <fifo_peek>
  phandle->packet_down_counter++;
 800fd02:	4b13      	ldr	r3, [pc, #76]	; (800fd50 <verify_payload+0x60>)
 800fd04:	5ce9      	ldrb	r1, [r5, r3]
 800fd06:	3101      	adds	r1, #1
 800fd08:	b2c9      	uxtb	r1, r1
 800fd0a:	54e9      	strb	r1, [r5, r3]
  if(frame_header[SERIAL_FRAME_COUNTER]!=phandle->packet_down_counter)
 800fd0c:	78a3      	ldrb	r3, [r4, #2]
 800fd0e:	4299      	cmp	r1, r3
 800fd10:	d112      	bne.n	800fd38 <verify_payload+0x48>
  uint16_t calculated_crc = crc_calculate(payload, frame_header[SERIAL_FRAME_SIZE]);
 800fd12:	7921      	ldrb	r1, [r4, #4]
 800fd14:	480d      	ldr	r0, [pc, #52]	; (800fd4c <verify_payload+0x5c>)
 800fd16:	f7fe fa6f 	bl	800e1f8 <crc_calculate>
  if(frame_header[SERIAL_FRAME_CRC1]!=((calculated_crc >> 8) & 0x00FF) || frame_header[SERIAL_FRAME_CRC2]!=(calculated_crc & 0x00FF))
 800fd1a:	7962      	ldrb	r2, [r4, #5]
 800fd1c:	0a03      	lsrs	r3, r0, #8
 800fd1e:	b29b      	uxth	r3, r3
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d104      	bne.n	800fd2e <verify_payload+0x3e>
 800fd24:	79a2      	ldrb	r2, [r4, #6]
 800fd26:	23ff      	movs	r3, #255	; 0xff
 800fd28:	4018      	ands	r0, r3
 800fd2a:	4282      	cmp	r2, r0
 800fd2c:	d00c      	beq.n	800fd48 <verify_payload+0x58>
    log_print_string("CRC incorrect!");
 800fd2e:	4809      	ldr	r0, [pc, #36]	; (800fd54 <verify_payload+0x64>)
 800fd30:	f7ff f93c 	bl	800efac <log_print_string>
    return false;
 800fd34:	2000      	movs	r0, #0
}
 800fd36:	bd70      	pop	{r4, r5, r6, pc}
    log_print_string("!!! missed packages: %i",(frame_header[SERIAL_FRAME_COUNTER]-phandle->packet_down_counter));
 800fd38:	1a59      	subs	r1, r3, r1
 800fd3a:	4807      	ldr	r0, [pc, #28]	; (800fd58 <verify_payload+0x68>)
 800fd3c:	f7ff f936 	bl	800efac <log_print_string>
    phandle->packet_down_counter=frame_header[SERIAL_FRAME_COUNTER]; //reset package counter
 800fd40:	78a2      	ldrb	r2, [r4, #2]
 800fd42:	4b03      	ldr	r3, [pc, #12]	; (800fd50 <verify_payload+0x60>)
 800fd44:	54ea      	strb	r2, [r5, r3]
 800fd46:	e7e4      	b.n	800fd12 <verify_payload+0x22>
    return true;
 800fd48:	2001      	movs	r0, #1
 800fd4a:	e7f4      	b.n	800fd36 <verify_payload+0x46>
 800fd4c:	200041f4 	.word	0x200041f4
 800fd50:	00000247 	.word	0x00000247
 800fd54:	0801a7a0 	.word	0x0801a7a0
 800fd58:	0801a788 	.word	0x0801a788

0800fd5c <process_rx_fifo>:
{
 800fd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd5e:	46c6      	mov	lr, r8
 800fd60:	b500      	push	{lr}
 800fd62:	b086      	sub	sp, #24
 800fd64:	1e04      	subs	r4, r0, #0
  assert(arg!=NULL);
 800fd66:	d010      	beq.n	800fd8a <process_rx_fifo+0x2e>
  if(!phandle->parsed_header) 
 800fd68:	2392      	movs	r3, #146	; 0x92
 800fd6a:	009b      	lsls	r3, r3, #2
 800fd6c:	5cc3      	ldrb	r3, [r0, r3]
 800fd6e:	075b      	lsls	r3, r3, #29
 800fd70:	d44d      	bmi.n	800fe0e <process_rx_fifo+0xb2>
    if(fifo_get_size(&phandle->rx_fifo) > SERIAL_FRAME_HEADER_SIZE) 
 800fd72:	2382      	movs	r3, #130	; 0x82
 800fd74:	009b      	lsls	r3, r3, #2
 800fd76:	18c5      	adds	r5, r0, r3
 800fd78:	0028      	movs	r0, r5
 800fd7a:	f7fe fd60 	bl	800e83e <fifo_get_size>
 800fd7e:	2807      	cmp	r0, #7
 800fd80:	d809      	bhi.n	800fd96 <process_rx_fifo+0x3a>
}
 800fd82:	b006      	add	sp, #24
 800fd84:	bc04      	pop	{r2}
 800fd86:	4690      	mov	r8, r2
 800fd88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert(arg!=NULL);
 800fd8a:	4b69      	ldr	r3, [pc, #420]	; (800ff30 <process_rx_fifo+0x1d4>)
 800fd8c:	4a69      	ldr	r2, [pc, #420]	; (800ff34 <process_rx_fifo+0x1d8>)
 800fd8e:	496a      	ldr	r1, [pc, #424]	; (800ff38 <process_rx_fifo+0x1dc>)
 800fd90:	486a      	ldr	r0, [pc, #424]	; (800ff3c <process_rx_fifo+0x1e0>)
 800fd92:	f7f8 fc35 	bl	8008600 <__assert_func>
        fifo_peek(&phandle->rx_fifo, phandle->header, 0, SERIAL_FRAME_HEADER_SIZE);
 800fd96:	2307      	movs	r3, #7
 800fd98:	2200      	movs	r2, #0
 800fd9a:	4969      	ldr	r1, [pc, #420]	; (800ff40 <process_rx_fifo+0x1e4>)
 800fd9c:	1861      	adds	r1, r4, r1
 800fd9e:	0028      	movs	r0, r5
 800fda0:	f7fe fdae 	bl	800e900 <fifo_peek>
        if(phandle->header[0] != SERIAL_FRAME_SYNC_BYTE || phandle->header[1] != SERIAL_FRAME_VERSION) 
 800fda4:	4b66      	ldr	r3, [pc, #408]	; (800ff40 <process_rx_fifo+0x1e4>)
 800fda6:	5ce3      	ldrb	r3, [r4, r3]
 800fda8:	2bc0      	cmp	r3, #192	; 0xc0
 800fdaa:	d104      	bne.n	800fdb6 <process_rx_fifo+0x5a>
 800fdac:	3341      	adds	r3, #65	; 0x41
 800fdae:	33ff      	adds	r3, #255	; 0xff
 800fdb0:	5ce3      	ldrb	r3, [r4, r3]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d017      	beq.n	800fde6 <process_rx_fifo+0x8a>
          fifo_skip(&phandle->rx_fifo, 1);
 800fdb6:	2101      	movs	r1, #1
 800fdb8:	0028      	movs	r0, r5
 800fdba:	f7fe fd93 	bl	800e8e4 <fifo_skip>
          phandle->parsed_header = false;
 800fdbe:	2292      	movs	r2, #146	; 0x92
 800fdc0:	0092      	lsls	r2, r2, #2
 800fdc2:	5ca3      	ldrb	r3, [r4, r2]
 800fdc4:	2104      	movs	r1, #4
 800fdc6:	438b      	bics	r3, r1
 800fdc8:	54a3      	strb	r3, [r4, r2]
          phandle->payload_len = 0;
 800fdca:	4b5e      	ldr	r3, [pc, #376]	; (800ff44 <process_rx_fifo+0x1e8>)
 800fdcc:	2200      	movs	r2, #0
 800fdce:	54e2      	strb	r2, [r4, r3]
          if(fifo_get_size(&phandle->rx_fifo) > SERIAL_FRAME_HEADER_SIZE)
 800fdd0:	0028      	movs	r0, r5
 800fdd2:	f7fe fd34 	bl	800e83e <fifo_get_size>
 800fdd6:	2807      	cmp	r0, #7
 800fdd8:	d9d3      	bls.n	800fd82 <process_rx_fifo+0x26>
            sched_post_task_prio(&process_rx_fifo, DEFAULT_PRIORITY, arg);
 800fdda:	0022      	movs	r2, r4
 800fddc:	2107      	movs	r1, #7
 800fdde:	485a      	ldr	r0, [pc, #360]	; (800ff48 <process_rx_fifo+0x1ec>)
 800fde0:	f7ff fbe0 	bl	800f5a4 <sched_post_task_prio>
          return;
 800fde4:	e7cd      	b.n	800fd82 <process_rx_fifo+0x26>
        phandle->parsed_header = true;
 800fde6:	2292      	movs	r2, #146	; 0x92
 800fde8:	0092      	lsls	r2, r2, #2
 800fdea:	5ca3      	ldrb	r3, [r4, r2]
 800fdec:	2104      	movs	r1, #4
 800fdee:	430b      	orrs	r3, r1
 800fdf0:	54a3      	strb	r3, [r4, r2]
        fifo_skip(&phandle->rx_fifo, SERIAL_FRAME_HEADER_SIZE);
 800fdf2:	2107      	movs	r1, #7
 800fdf4:	0028      	movs	r0, r5
 800fdf6:	f7fe fd75 	bl	800e8e4 <fifo_skip>
        phandle->payload_len = phandle->header[SERIAL_FRAME_SIZE];
 800fdfa:	4b54      	ldr	r3, [pc, #336]	; (800ff4c <process_rx_fifo+0x1f0>)
 800fdfc:	5ce2      	ldrb	r2, [r4, r3]
 800fdfe:	4b51      	ldr	r3, [pc, #324]	; (800ff44 <process_rx_fifo+0x1e8>)
 800fe00:	54e2      	strb	r2, [r4, r3]
        sched_post_task_prio(&process_rx_fifo, DEFAULT_PRIORITY, arg);
 800fe02:	0022      	movs	r2, r4
 800fe04:	2107      	movs	r1, #7
 800fe06:	4850      	ldr	r0, [pc, #320]	; (800ff48 <process_rx_fifo+0x1ec>)
 800fe08:	f7ff fbcc 	bl	800f5a4 <sched_post_task_prio>
 800fe0c:	e7b9      	b.n	800fd82 <process_rx_fifo+0x26>
    if(fifo_get_size(&phandle->rx_fifo) < phandle->payload_len) {
 800fe0e:	2382      	movs	r3, #130	; 0x82
 800fe10:	009b      	lsls	r3, r3, #2
 800fe12:	18c5      	adds	r5, r0, r3
 800fe14:	0028      	movs	r0, r5
 800fe16:	f7fe fd12 	bl	800e83e <fifo_get_size>
 800fe1a:	4b4a      	ldr	r3, [pc, #296]	; (800ff44 <process_rx_fifo+0x1e8>)
 800fe1c:	5ce3      	ldrb	r3, [r4, r3]
 800fe1e:	4298      	cmp	r0, r3
 800fe20:	d3af      	bcc.n	800fd82 <process_rx_fifo+0x26>
    fifo_init_subview(&payload_fifo, &phandle->rx_fifo, 0, phandle->payload_len);
 800fe22:	2200      	movs	r2, #0
 800fe24:	0029      	movs	r1, r5
 800fe26:	a802      	add	r0, sp, #8
 800fe28:	f7fe fd1e 	bl	800e868 <fifo_init_subview>
    if(verify_payload(phandle, &payload_fifo,phandle->header))
 800fe2c:	4b44      	ldr	r3, [pc, #272]	; (800ff40 <process_rx_fifo+0x1e4>)
 800fe2e:	18e2      	adds	r2, r4, r3
 800fe30:	a902      	add	r1, sp, #8
 800fe32:	0020      	movs	r0, r4
 800fe34:	f7ff ff5c 	bl	800fcf0 <verify_payload>
 800fe38:	2800      	cmp	r0, #0
 800fe3a:	d025      	beq.n	800fe88 <process_rx_fifo+0x12c>
      serial_protocol_handle_t* sp_handle = container_of((uint32_t(*)[])(void*)phandle, serial_protocol_handle_t, priv_data);
 800fe3c:	1f26      	subs	r6, r4, #4
      if(phandle->header[SERIAL_FRAME_TYPE]==SERIAL_MESSAGE_TYPE_ALP_DATA && phandle->alp_handler != NULL)
 800fe3e:	4b44      	ldr	r3, [pc, #272]	; (800ff50 <process_rx_fifo+0x1f4>)
 800fe40:	5ce3      	ldrb	r3, [r4, r3]
 800fe42:	2b01      	cmp	r3, #1
 800fe44:	d00d      	beq.n	800fe62 <process_rx_fifo+0x106>
      else if (phandle->header[SERIAL_FRAME_TYPE]==SERIAL_MESSAGE_TYPE_PING_RESPONSE  && phandle->ping_response_handler != NULL)
 800fe46:	2b03      	cmp	r3, #3
 800fe48:	d033      	beq.n	800feb2 <process_rx_fifo+0x156>
      else if (phandle->header[SERIAL_FRAME_TYPE]==SERIAL_MESSAGE_TYPE_LOGGING && phandle->logging_handler != NULL)
 800fe4a:	2b04      	cmp	r3, #4
 800fe4c:	d03b      	beq.n	800fec6 <process_rx_fifo+0x16a>
      else if (phandle->header[SERIAL_FRAME_TYPE]==SERIAL_MESSAGE_TYPE_PING_REQUEST)
 800fe4e:	2b02      	cmp	r3, #2
 800fe50:	d043      	beq.n	800feda <process_rx_fifo+0x17e>
      else if(phandle->header[SERIAL_FRAME_TYPE]==SERIAL_MESSAGE_TYPE_REBOOTED)
 800fe52:	2b05      	cmp	r3, #5
 800fe54:	d05c      	beq.n	800ff10 <process_rx_fifo+0x1b4>
        fifo_skip(&payload_fifo, phandle->payload_len);
 800fe56:	4b3b      	ldr	r3, [pc, #236]	; (800ff44 <process_rx_fifo+0x1e8>)
 800fe58:	5ce1      	ldrb	r1, [r4, r3]
 800fe5a:	a802      	add	r0, sp, #8
 800fe5c:	f7fe fd42 	bl	800e8e4 <fifo_skip>
 800fe60:	e008      	b.n	800fe74 <process_rx_fifo+0x118>
      if(phandle->header[SERIAL_FRAME_TYPE]==SERIAL_MESSAGE_TYPE_ALP_DATA && phandle->alp_handler != NULL)
 800fe62:	228c      	movs	r2, #140	; 0x8c
 800fe64:	0092      	lsls	r2, r2, #2
 800fe66:	58a7      	ldr	r7, [r4, r2]
 800fe68:	2f00      	cmp	r7, #0
 800fe6a:	d0ec      	beq.n	800fe46 <process_rx_fifo+0xea>
        phandle->alp_handler(sp_handle,SERIAL_MESSAGE_TYPE_ALP_DATA, &payload_fifo);
 800fe6c:	aa02      	add	r2, sp, #8
 800fe6e:	2101      	movs	r1, #1
 800fe70:	0030      	movs	r0, r6
 800fe72:	47b8      	blx	r7
      fifo_skip(&phandle->rx_fifo, phandle->payload_len - fifo_get_size(&payload_fifo)); // pop parsed bytes from original fifo
 800fe74:	4b33      	ldr	r3, [pc, #204]	; (800ff44 <process_rx_fifo+0x1e8>)
 800fe76:	5ce6      	ldrb	r6, [r4, r3]
 800fe78:	a802      	add	r0, sp, #8
 800fe7a:	f7fe fce0 	bl	800e83e <fifo_get_size>
 800fe7e:	1a31      	subs	r1, r6, r0
 800fe80:	b289      	uxth	r1, r1
 800fe82:	0028      	movs	r0, r5
 800fe84:	f7fe fd2e 	bl	800e8e4 <fifo_skip>
    phandle->payload_len = 0;
 800fe88:	4b2e      	ldr	r3, [pc, #184]	; (800ff44 <process_rx_fifo+0x1e8>)
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	54e2      	strb	r2, [r4, r3]
    phandle->parsed_header = false;
 800fe8e:	2292      	movs	r2, #146	; 0x92
 800fe90:	0092      	lsls	r2, r2, #2
 800fe92:	5ca3      	ldrb	r3, [r4, r2]
 800fe94:	2104      	movs	r1, #4
 800fe96:	438b      	bics	r3, r1
 800fe98:	54a3      	strb	r3, [r4, r2]
    if(fifo_get_size(&phandle->rx_fifo) > SERIAL_FRAME_HEADER_SIZE)
 800fe9a:	0028      	movs	r0, r5
 800fe9c:	f7fe fccf 	bl	800e83e <fifo_get_size>
 800fea0:	2807      	cmp	r0, #7
 800fea2:	d800      	bhi.n	800fea6 <process_rx_fifo+0x14a>
 800fea4:	e76d      	b.n	800fd82 <process_rx_fifo+0x26>
      sched_post_task_prio(&process_rx_fifo, DEFAULT_PRIORITY, arg);
 800fea6:	0022      	movs	r2, r4
 800fea8:	2107      	movs	r1, #7
 800feaa:	4827      	ldr	r0, [pc, #156]	; (800ff48 <process_rx_fifo+0x1ec>)
 800feac:	f7ff fb7a 	bl	800f5a4 <sched_post_task_prio>
 800feb0:	e767      	b.n	800fd82 <process_rx_fifo+0x26>
      else if (phandle->header[SERIAL_FRAME_TYPE]==SERIAL_MESSAGE_TYPE_PING_RESPONSE  && phandle->ping_response_handler != NULL)
 800feb2:	228e      	movs	r2, #142	; 0x8e
 800feb4:	0092      	lsls	r2, r2, #2
 800feb6:	58a7      	ldr	r7, [r4, r2]
 800feb8:	2f00      	cmp	r7, #0
 800feba:	d0c6      	beq.n	800fe4a <process_rx_fifo+0xee>
        phandle->ping_response_handler(sp_handle, SERIAL_MESSAGE_TYPE_PING_RESPONSE, &payload_fifo);
 800febc:	aa02      	add	r2, sp, #8
 800febe:	2103      	movs	r1, #3
 800fec0:	0030      	movs	r0, r6
 800fec2:	47b8      	blx	r7
 800fec4:	e7d6      	b.n	800fe74 <process_rx_fifo+0x118>
      else if (phandle->header[SERIAL_FRAME_TYPE]==SERIAL_MESSAGE_TYPE_LOGGING && phandle->logging_handler != NULL)
 800fec6:	228f      	movs	r2, #143	; 0x8f
 800fec8:	0092      	lsls	r2, r2, #2
 800feca:	58a7      	ldr	r7, [r4, r2]
 800fecc:	2f00      	cmp	r7, #0
 800fece:	d0be      	beq.n	800fe4e <process_rx_fifo+0xf2>
        phandle->logging_handler(sp_handle, SERIAL_MESSAGE_TYPE_LOGGING, &payload_fifo);
 800fed0:	aa02      	add	r2, sp, #8
 800fed2:	2104      	movs	r1, #4
 800fed4:	0030      	movs	r0, r6
 800fed6:	47b8      	blx	r7
 800fed8:	e7cc      	b.n	800fe74 <process_rx_fifo+0x118>
        if(phandle->ping_request_handler != NULL)
 800feda:	238d      	movs	r3, #141	; 0x8d
 800fedc:	009b      	lsls	r3, r3, #2
 800fede:	58e3      	ldr	r3, [r4, r3]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d003      	beq.n	800feec <process_rx_fifo+0x190>
          phandle->ping_request_handler(sp_handle, SERIAL_MESSAGE_TYPE_PING_REQUEST, &payload_fifo);
 800fee4:	aa02      	add	r2, sp, #8
 800fee6:	2102      	movs	r1, #2
 800fee8:	0030      	movs	r0, r6
 800feea:	4798      	blx	r3
        uint8_t ping_reply[1]={0x02};
 800feec:	af01      	add	r7, sp, #4
 800feee:	4b19      	ldr	r3, [pc, #100]	; (800ff54 <process_rx_fifo+0x1f8>)
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	703b      	strb	r3, [r7, #0]
        fifo_skip(&payload_fifo,1);
 800fef4:	2101      	movs	r1, #1
 800fef6:	a802      	add	r0, sp, #8
 800fef8:	f7fe fcf4 	bl	800e8e4 <fifo_skip>
        handle->driver->serial_protocol_transfer_bytes(handle, ping_reply,1,SERIAL_MESSAGE_TYPE_PING_RESPONSE);
 800fefc:	1f23      	subs	r3, r4, #4
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	4698      	mov	r8, r3
 800ff04:	2303      	movs	r3, #3
 800ff06:	2201      	movs	r2, #1
 800ff08:	0039      	movs	r1, r7
 800ff0a:	0030      	movs	r0, r6
 800ff0c:	47c0      	blx	r8
 800ff0e:	e7b1      	b.n	800fe74 <process_rx_fifo+0x118>
        fifo_pop(&payload_fifo, &reboot_reason, 1);
 800ff10:	2201      	movs	r2, #1
 800ff12:	a901      	add	r1, sp, #4
 800ff14:	a802      	add	r0, sp, #8
 800ff16:	f7fe fd30 	bl	800e97a <fifo_pop>
        if(phandle->target_rebooted_cb)
 800ff1a:	2390      	movs	r3, #144	; 0x90
 800ff1c:	009b      	lsls	r3, r3, #2
 800ff1e:	58e3      	ldr	r3, [r4, r3]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d0a7      	beq.n	800fe74 <process_rx_fifo+0x118>
          phandle->target_rebooted_cb(sp_handle, reboot_reason);
 800ff24:	aa01      	add	r2, sp, #4
 800ff26:	7811      	ldrb	r1, [r2, #0]
 800ff28:	0030      	movs	r0, r6
 800ff2a:	4798      	blx	r3
 800ff2c:	e7a2      	b.n	800fe74 <process_rx_fifo+0x118>
 800ff2e:	46c0      	nop			; (mov r8, r8)
 800ff30:	0801a7b0 	.word	0x0801a7b0
 800ff34:	0801a914 	.word	0x0801a914
 800ff38:	0000029d 	.word	0x0000029d
 800ff3c:	0801a730 	.word	0x0801a730
 800ff40:	000001ff 	.word	0x000001ff
 800ff44:	00000246 	.word	0x00000246
 800ff48:	0800fd5d 	.word	0x0800fd5d
 800ff4c:	00000203 	.word	0x00000203
 800ff50:	00000202 	.word	0x00000202
 800ff54:	0801a7bc 	.word	0x0801a7bc

0800ff58 <flush_serial_protocol_tx_fifo>:
{
 800ff58:	b570      	push	{r4, r5, r6, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	1e04      	subs	r4, r0, #0
  assert(arg!=NULL);
 800ff5e:	d01d      	beq.n	800ff9c <flush_serial_protocol_tx_fifo+0x44>
  uint8_t len = fifo_get_size(&phandle->tx_fifo);
 800ff60:	2386      	movs	r3, #134	; 0x86
 800ff62:	009b      	lsls	r3, r3, #2
 800ff64:	18c5      	adds	r5, r0, r3
 800ff66:	0028      	movs	r0, r5
 800ff68:	f7fe fc69 	bl	800e83e <fifo_get_size>
 800ff6c:	b2c6      	uxtb	r6, r0
    if(len <= TX_FIFO_FLUSH_CHUNK_SIZE)
 800ff6e:	2e0a      	cmp	r6, #10
 800ff70:	d81b      	bhi.n	800ffaa <flush_serial_protocol_tx_fifo+0x52>
      fifo_pop(&phandle->tx_fifo, chunk, len);
 800ff72:	22ff      	movs	r2, #255	; 0xff
 800ff74:	4002      	ands	r2, r0
 800ff76:	a901      	add	r1, sp, #4
 800ff78:	0028      	movs	r0, r5
 800ff7a:	f7fe fcfe 	bl	800e97a <fifo_pop>
      uart_send_bytes(phandle->uart, chunk, len);
 800ff7e:	238a      	movs	r3, #138	; 0x8a
 800ff80:	009b      	lsls	r3, r3, #2
 800ff82:	58e0      	ldr	r0, [r4, r3]
 800ff84:	0032      	movs	r2, r6
 800ff86:	a901      	add	r1, sp, #4
 800ff88:	f7fc fa11 	bl	800c3ae <uart_send_bytes>
      phandle->tx_request_pending = false;
 800ff8c:	2292      	movs	r2, #146	; 0x92
 800ff8e:	0092      	lsls	r2, r2, #2
 800ff90:	5ca3      	ldrb	r3, [r4, r2]
 800ff92:	2101      	movs	r1, #1
 800ff94:	438b      	bics	r3, r1
 800ff96:	54a3      	strb	r3, [r4, r2]
}
 800ff98:	b004      	add	sp, #16
 800ff9a:	bd70      	pop	{r4, r5, r6, pc}
  assert(arg!=NULL);
 800ff9c:	212e      	movs	r1, #46	; 0x2e
 800ff9e:	4b0c      	ldr	r3, [pc, #48]	; (800ffd0 <flush_serial_protocol_tx_fifo+0x78>)
 800ffa0:	4a0c      	ldr	r2, [pc, #48]	; (800ffd4 <flush_serial_protocol_tx_fifo+0x7c>)
 800ffa2:	31ff      	adds	r1, #255	; 0xff
 800ffa4:	480c      	ldr	r0, [pc, #48]	; (800ffd8 <flush_serial_protocol_tx_fifo+0x80>)
 800ffa6:	f7f8 fb2b 	bl	8008600 <__assert_func>
      fifo_pop(&phandle->tx_fifo, chunk, TX_FIFO_FLUSH_CHUNK_SIZE);
 800ffaa:	220a      	movs	r2, #10
 800ffac:	a901      	add	r1, sp, #4
 800ffae:	0028      	movs	r0, r5
 800ffb0:	f7fe fce3 	bl	800e97a <fifo_pop>
      uart_send_bytes(phandle->uart, chunk, TX_FIFO_FLUSH_CHUNK_SIZE);
 800ffb4:	238a      	movs	r3, #138	; 0x8a
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	58e0      	ldr	r0, [r4, r3]
 800ffba:	220a      	movs	r2, #10
 800ffbc:	a901      	add	r1, sp, #4
 800ffbe:	f7fc f9f6 	bl	800c3ae <uart_send_bytes>
      sched_post_task_prio(&flush_serial_protocol_tx_fifo, MIN_PRIORITY, phandle);
 800ffc2:	0022      	movs	r2, r4
 800ffc4:	2107      	movs	r1, #7
 800ffc6:	4805      	ldr	r0, [pc, #20]	; (800ffdc <flush_serial_protocol_tx_fifo+0x84>)
 800ffc8:	f7ff faec 	bl	800f5a4 <sched_post_task_prio>
}
 800ffcc:	e7e4      	b.n	800ff98 <flush_serial_protocol_tx_fifo+0x40>
 800ffce:	46c0      	nop			; (mov r8, r8)
 800ffd0:	0801a7b0 	.word	0x0801a7b0
 800ffd4:	0801a8f4 	.word	0x0801a8f4
 800ffd8:	0801a730 	.word	0x0801a730
 800ffdc:	0800ff59 	.word	0x0800ff59

0800ffe0 <init_priv_handle>:
{
 800ffe0:	b510      	push	{r4, lr}
 800ffe2:	0004      	movs	r4, r0
  fifo_init(&phandle->rx_fifo, phandle->rx_buffer, sizeof(phandle->rx_buffer));
 800ffe4:	0001      	movs	r1, r0
 800ffe6:	31ff      	adds	r1, #255	; 0xff
 800ffe8:	2280      	movs	r2, #128	; 0x80
 800ffea:	2382      	movs	r3, #130	; 0x82
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	18c0      	adds	r0, r0, r3
 800fff0:	0052      	lsls	r2, r2, #1
 800fff2:	f7fe fbba 	bl	800e76a <fifo_init>
  fifo_init(&phandle->tx_fifo, phandle->tx_buffer, SERIAL_PROTOCOL_TX_FIFO_SIZE);
 800fff6:	2386      	movs	r3, #134	; 0x86
 800fff8:	009b      	lsls	r3, r3, #2
 800fffa:	18e0      	adds	r0, r4, r3
 800fffc:	22ff      	movs	r2, #255	; 0xff
 800fffe:	0021      	movs	r1, r4
 8010000:	f7fe fbb3 	bl	800e76a <fifo_init>
  phandle->tx_request_pending = false;
 8010004:	2192      	movs	r1, #146	; 0x92
 8010006:	0089      	lsls	r1, r1, #2
 8010008:	5c62      	ldrb	r2, [r4, r1]
  phandle->next_serial_protocol = NULL;
 801000a:	2300      	movs	r3, #0
 801000c:	208b      	movs	r0, #139	; 0x8b
 801000e:	0080      	lsls	r0, r0, #2
 8010010:	5023      	str	r3, [r4, r0]
  phandle->alp_handler = NULL;
 8010012:	3004      	adds	r0, #4
 8010014:	5023      	str	r3, [r4, r0]
  phandle->ping_response_handler = NULL;
 8010016:	3008      	adds	r0, #8
 8010018:	5023      	str	r3, [r4, r0]
  phandle->logging_handler = NULL;
 801001a:	3004      	adds	r0, #4
 801001c:	5023      	str	r3, [r4, r0]
  phandle->target_rebooted_cb = NULL;
 801001e:	3004      	adds	r0, #4
 8010020:	5023      	str	r3, [r4, r0]
  phandle->target_uart_state_isr_count = 0;
 8010022:	3004      	adds	r0, #4
 8010024:	5423      	strb	r3, [r4, r0]
  phandle->packet_up_counter = 0;
 8010026:	4807      	ldr	r0, [pc, #28]	; (8010044 <init_priv_handle+0x64>)
 8010028:	5423      	strb	r3, [r4, r0]
  phandle->payload_len = 0;
 801002a:	4807      	ldr	r0, [pc, #28]	; (8010048 <init_priv_handle+0x68>)
 801002c:	5423      	strb	r3, [r4, r0]
  phandle->packet_down_counter = 0;
 801002e:	4807      	ldr	r0, [pc, #28]	; (801004c <init_priv_handle+0x6c>)
 8010030:	5423      	strb	r3, [r4, r0]
  phandle->listen_uart_inited = false;
 8010032:	3301      	adds	r3, #1
 8010034:	439a      	bics	r2, r3
 8010036:	0013      	movs	r3, r2
  phandle->parsed_header= false;
 8010038:	2202      	movs	r2, #2
 801003a:	4393      	bics	r3, r2
 801003c:	3202      	adds	r2, #2
 801003e:	4393      	bics	r3, r2
 8010040:	5463      	strb	r3, [r4, r1]
}
 8010042:	bd10      	pop	{r4, pc}
 8010044:	00000245 	.word	0x00000245
 8010048:	00000246 	.word	0x00000246
 801004c:	00000247 	.word	0x00000247

08010050 <serial_protocol_set_rx_interrupt_callback>:
static void serial_protocol_set_rx_interrupt_callback(uart_handle_t* uart, uart_rx_inthandler_t uart_rx_cb) {
 8010050:	b510      	push	{r4, lr}
  uart_set_rx_interrupt_callback(uart, uart_rx_cb);
 8010052:	f7fc f9a7 	bl	800c3a4 <uart_set_rx_interrupt_callback>
}
 8010056:	bd10      	pop	{r4, pc}

08010058 <serial_protocol_set_error_callback>:
static void serial_protocol_set_error_callback(uart_handle_t* uart, uart_error_handler_t uart_error_cb) {
 8010058:	b510      	push	{r4, lr}
    uart_set_error_callback(uart, uart_error_cb);
 801005a:	f7fc f9a5 	bl	800c3a8 <uart_set_error_callback>
}
 801005e:	bd10      	pop	{r4, pc}

08010060 <serial_protocol_enable>:
{
 8010060:	b510      	push	{r4, lr}
 8010062:	0004      	movs	r4, r0
  assert(uart_enable(phandle->uart));
 8010064:	238a      	movs	r3, #138	; 0x8a
 8010066:	009b      	lsls	r3, r3, #2
 8010068:	58c0      	ldr	r0, [r0, r3]
 801006a:	f7fc f85b 	bl	800c124 <uart_enable>
 801006e:	2800      	cmp	r0, #0
 8010070:	d00b      	beq.n	801008a <serial_protocol_enable+0x2a>
    uart_rx_interrupt_enable(phandle->uart);
 8010072:	238a      	movs	r3, #138	; 0x8a
 8010074:	009b      	lsls	r3, r3, #2
 8010076:	58e0      	ldr	r0, [r4, r3]
 8010078:	f7fc f9a2 	bl	800c3c0 <uart_rx_interrupt_enable>
  phandle->listen_uart_inited = true;
 801007c:	2292      	movs	r2, #146	; 0x92
 801007e:	0092      	lsls	r2, r2, #2
 8010080:	5ca3      	ldrb	r3, [r4, r2]
 8010082:	2102      	movs	r1, #2
 8010084:	430b      	orrs	r3, r1
 8010086:	54a3      	strb	r3, [r4, r2]
}
 8010088:	bd10      	pop	{r4, pc}
  assert(uart_enable(phandle->uart));
 801008a:	4b03      	ldr	r3, [pc, #12]	; (8010098 <serial_protocol_enable+0x38>)
 801008c:	4a03      	ldr	r2, [pc, #12]	; (801009c <serial_protocol_enable+0x3c>)
 801008e:	21f1      	movs	r1, #241	; 0xf1
 8010090:	4803      	ldr	r0, [pc, #12]	; (80100a0 <serial_protocol_enable+0x40>)
 8010092:	f7f8 fab5 	bl	8008600 <__assert_func>
 8010096:	46c0      	nop			; (mov r8, r8)
 8010098:	0801a7c0 	.word	0x0801a7c0
 801009c:	0801a8c4 	.word	0x0801a8c4
 80100a0:	0801a730 	.word	0x0801a730

080100a4 <serial_protocol_transfer_bytes>:
{
 80100a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100a6:	46c6      	mov	lr, r8
 80100a8:	b500      	push	{lr}
 80100aa:	b082      	sub	sp, #8
 80100ac:	0004      	movs	r4, r0
 80100ae:	000e      	movs	r6, r1
 80100b0:	0015      	movs	r5, r2
 80100b2:	4698      	mov	r8, r3
  priv_serial_protocol_handle_t* phandle = (priv_serial_protocol_handle_t*)handle->priv_data;
 80100b4:	1d07      	adds	r7, r0, #4
  uint16_t crc=crc_calculate(bytes,length);
 80100b6:	0011      	movs	r1, r2
 80100b8:	0030      	movs	r0, r6
 80100ba:	f7fe f89d 	bl	800e1f8 <crc_calculate>
  phandle->packet_up_counter++;
 80100be:	4b20      	ldr	r3, [pc, #128]	; (8010140 <serial_protocol_transfer_bytes+0x9c>)
 80100c0:	5ce2      	ldrb	r2, [r4, r3]
 80100c2:	3201      	adds	r2, #1
 80100c4:	b2d2      	uxtb	r2, r2
 80100c6:	54e2      	strb	r2, [r4, r3]
  frame_header[0] = SERIAL_FRAME_SYNC_BYTE;
 80100c8:	3b8a      	subs	r3, #138	; 0x8a
 80100ca:	3bff      	subs	r3, #255	; 0xff
 80100cc:	4669      	mov	r1, sp
 80100ce:	700b      	strb	r3, [r1, #0]
  frame_header[1] = SERIAL_FRAME_VERSION;
 80100d0:	2300      	movs	r3, #0
 80100d2:	704b      	strb	r3, [r1, #1]
  frame_header[SERIAL_FRAME_COUNTER] = phandle->packet_up_counter;
 80100d4:	708a      	strb	r2, [r1, #2]
  frame_header[SERIAL_FRAME_TYPE] = type;
 80100d6:	4642      	mov	r2, r8
 80100d8:	70ca      	strb	r2, [r1, #3]
  frame_header[SERIAL_FRAME_SIZE] = length;
 80100da:	710d      	strb	r5, [r1, #4]
  frame_header[SERIAL_FRAME_CRC1] = (crc >> 8) & 0x00FF;
 80100dc:	0a03      	lsrs	r3, r0, #8
 80100de:	714b      	strb	r3, [r1, #5]
  frame_header[SERIAL_FRAME_CRC2] = crc & 0x00FF;
 80100e0:	7188      	strb	r0, [r1, #6]
  start_atomic();
 80100e2:	f7fa fc61 	bl	800a9a8 <start_atomic>
  if((sizeof(phandle->tx_buffer) - fifo_get_size(&phandle->tx_fifo)) >= (uint8_t) (SERIAL_FRAME_HEADER_SIZE + length))
 80100e6:	2387      	movs	r3, #135	; 0x87
 80100e8:	009b      	lsls	r3, r3, #2
 80100ea:	4698      	mov	r8, r3
 80100ec:	44a0      	add	r8, r4
 80100ee:	4640      	mov	r0, r8
 80100f0:	f7fe fba5 	bl	800e83e <fifo_get_size>
 80100f4:	23ff      	movs	r3, #255	; 0xff
 80100f6:	1a18      	subs	r0, r3, r0
 80100f8:	1deb      	adds	r3, r5, #7
 80100fa:	b2db      	uxtb	r3, r3
 80100fc:	4298      	cmp	r0, r3
 80100fe:	d31c      	bcc.n	801013a <serial_protocol_transfer_bytes+0x96>
    phandle->tx_request_pending = true;
 8010100:	2293      	movs	r2, #147	; 0x93
 8010102:	0092      	lsls	r2, r2, #2
 8010104:	5ca3      	ldrb	r3, [r4, r2]
 8010106:	2101      	movs	r1, #1
 8010108:	430b      	orrs	r3, r1
 801010a:	54a3      	strb	r3, [r4, r2]
    fifo_put(&phandle->tx_fifo, (uint8_t*) &frame_header, SERIAL_FRAME_HEADER_SIZE);
 801010c:	2207      	movs	r2, #7
 801010e:	4669      	mov	r1, sp
 8010110:	4640      	mov	r0, r8
 8010112:	f7fe fb31 	bl	800e778 <fifo_put>
    fifo_put(&phandle->tx_fifo, bytes, length);
 8010116:	b2aa      	uxth	r2, r5
 8010118:	0031      	movs	r1, r6
 801011a:	4640      	mov	r0, r8
 801011c:	f7fe fb2c 	bl	800e778 <fifo_put>
      sched_post_task_prio(&flush_serial_protocol_tx_fifo, MIN_PRIORITY, phandle); // state machine is not used when not using interrupt lines
 8010120:	003a      	movs	r2, r7
 8010122:	2107      	movs	r1, #7
 8010124:	4807      	ldr	r0, [pc, #28]	; (8010144 <serial_protocol_transfer_bytes+0xa0>)
 8010126:	f7ff fa3d 	bl	800f5a4 <sched_post_task_prio>
    result = SUCCESS;
 801012a:	2400      	movs	r4, #0
  end_atomic();
 801012c:	f7fa fc4a 	bl	800a9c4 <end_atomic>
}
 8010130:	0020      	movs	r0, r4
 8010132:	b002      	add	sp, #8
 8010134:	bc04      	pop	{r2}
 8010136:	4690      	mov	r8, r2
 8010138:	bdf0      	pop	{r4, r5, r6, r7, pc}
    result = -ENOMEM;
 801013a:	240c      	movs	r4, #12
 801013c:	4264      	negs	r4, r4
 801013e:	e7f5      	b.n	801012c <serial_protocol_transfer_bytes+0x88>
 8010140:	00000249 	.word	0x00000249
 8010144:	0800ff59 	.word	0x0800ff59

08010148 <serial_protocol_transfer>:
{
 8010148:	b570      	push	{r4, r5, r6, lr}
 801014a:	0005      	movs	r5, r0
 801014c:	000c      	movs	r4, r1
  return serial_protocol_transfer_bytes(handle, (uint8_t*) string, strnlen(string, 100), SERIAL_MESSAGE_TYPE_LOGGING); 
 801014e:	2164      	movs	r1, #100	; 0x64
 8010150:	0020      	movs	r0, r4
 8010152:	f005 f8f1 	bl	8015338 <strnlen>
 8010156:	b2c2      	uxtb	r2, r0
 8010158:	2304      	movs	r3, #4
 801015a:	0021      	movs	r1, r4
 801015c:	0028      	movs	r0, r5
 801015e:	f7ff ffa1 	bl	80100a4 <serial_protocol_transfer_bytes>
}
 8010162:	bd70      	pop	{r4, r5, r6, pc}

08010164 <serial_protocol_init>:
{
 8010164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010166:	b083      	sub	sp, #12
 8010168:	0004      	movs	r4, r0
 801016a:	000f      	movs	r7, r1
 801016c:	0016      	movs	r6, r2
 801016e:	a80a      	add	r0, sp, #40	; 0x28
 8010170:	7802      	ldrb	r2, [r0, #0]
  assert(handle != NULL);
 8010172:	2c00      	cmp	r4, #0
 8010174:	d03b      	beq.n	80101ee <serial_protocol_init+0x8a>
  assert(!use_interrupt_lines);
 8010176:	2b00      	cmp	r3, #0
 8010178:	d13f      	bne.n	80101fa <serial_protocol_init+0x96>
  assert(!use_dma);
 801017a:	2a00      	cmp	r2, #0
 801017c:	d143      	bne.n	8010206 <serial_protocol_init+0xa2>
  assert(sched_register_task_allow_multiple(&flush_serial_protocol_tx_fifo, true) == SUCCESS);
 801017e:	2101      	movs	r1, #1
 8010180:	482b      	ldr	r0, [pc, #172]	; (8010230 <serial_protocol_init+0xcc>)
 8010182:	f7ff f973 	bl	800f46c <sched_register_task_allow_multiple>
 8010186:	2800      	cmp	r0, #0
 8010188:	d144      	bne.n	8010214 <serial_protocol_init+0xb0>
  assert(sched_register_task_allow_multiple(&process_rx_fifo, true) == SUCCESS);
 801018a:	2101      	movs	r1, #1
 801018c:	4829      	ldr	r0, [pc, #164]	; (8010234 <serial_protocol_init+0xd0>)
 801018e:	f7ff f96d 	bl	800f46c <sched_register_task_allow_multiple>
 8010192:	2800      	cmp	r0, #0
 8010194:	d145      	bne.n	8010222 <serial_protocol_init+0xbe>
  handle->driver = &serial_protocol_driver;
 8010196:	0025      	movs	r5, r4
 8010198:	4b27      	ldr	r3, [pc, #156]	; (8010238 <serial_protocol_init+0xd4>)
 801019a:	c508      	stmia	r5!, {r3}
  init_priv_handle(phandle);
 801019c:	0028      	movs	r0, r5
 801019e:	f7ff ff1f 	bl	800ffe0 <init_priv_handle>
  add_serial_protocol(phandle);
 80101a2:	0028      	movs	r0, r5
 80101a4:	f7ff fcdc 	bl	800fb60 <add_serial_protocol>
  phandle->uart = uart_init(idx, baudrate,0);
 80101a8:	2200      	movs	r2, #0
 80101aa:	0031      	movs	r1, r6
 80101ac:	0038      	movs	r0, r7
 80101ae:	f7fb ff93 	bl	800c0d8 <uart_init>
 80101b2:	268b      	movs	r6, #139	; 0x8b
 80101b4:	00b6      	lsls	r6, r6, #2
 80101b6:	51a0      	str	r0, [r4, r6]
    serial_protocol_set_rx_interrupt_callback(phandle->uart, &uart_rx_callback);
 80101b8:	4920      	ldr	r1, [pc, #128]	; (801023c <serial_protocol_init+0xd8>)
 80101ba:	f7ff ff49 	bl	8010050 <serial_protocol_set_rx_interrupt_callback>
  serial_protocol_set_error_callback(phandle->uart, uart_error_callback);
 80101be:	59a0      	ldr	r0, [r4, r6]
 80101c0:	491f      	ldr	r1, [pc, #124]	; (8010240 <serial_protocol_init+0xdc>)
 80101c2:	f7ff ff49 	bl	8010058 <serial_protocol_set_error_callback>
    serial_protocol_enable(phandle);
 80101c6:	0028      	movs	r0, r5
 80101c8:	f7ff ff4a 	bl	8010060 <serial_protocol_enable>
  uint8_t reboot_reason = (uint8_t)hw_system_reboot_reason();
 80101cc:	f7fb fc30 	bl	800ba30 <hw_system_reboot_reason>
 80101d0:	0001      	movs	r1, r0
 80101d2:	466b      	mov	r3, sp
 80101d4:	1ddd      	adds	r5, r3, #7
 80101d6:	71d8      	strb	r0, [r3, #7]
  log_print_error_string("rebooted with reason %i", reboot_reason);
 80101d8:	481a      	ldr	r0, [pc, #104]	; (8010244 <serial_protocol_init+0xe0>)
 80101da:	f7fe ff01 	bl	800efe0 <log_print_error_string>
  serial_protocol_transfer_bytes(handle, &reboot_reason, 1, SERIAL_MESSAGE_TYPE_REBOOTED);
 80101de:	2305      	movs	r3, #5
 80101e0:	2201      	movs	r2, #1
 80101e2:	0029      	movs	r1, r5
 80101e4:	0020      	movs	r0, r4
 80101e6:	f7ff ff5d 	bl	80100a4 <serial_protocol_transfer_bytes>
}
 80101ea:	b003      	add	sp, #12
 80101ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert(handle != NULL);
 80101ee:	4b16      	ldr	r3, [pc, #88]	; (8010248 <serial_protocol_init+0xe4>)
 80101f0:	4a16      	ldr	r2, [pc, #88]	; (801024c <serial_protocol_init+0xe8>)
 80101f2:	4917      	ldr	r1, [pc, #92]	; (8010250 <serial_protocol_init+0xec>)
 80101f4:	4817      	ldr	r0, [pc, #92]	; (8010254 <serial_protocol_init+0xf0>)
 80101f6:	f7f8 fa03 	bl	8008600 <__assert_func>
  assert(!use_interrupt_lines);
 80101fa:	4b17      	ldr	r3, [pc, #92]	; (8010258 <serial_protocol_init+0xf4>)
 80101fc:	4a13      	ldr	r2, [pc, #76]	; (801024c <serial_protocol_init+0xe8>)
 80101fe:	4917      	ldr	r1, [pc, #92]	; (801025c <serial_protocol_init+0xf8>)
 8010200:	4814      	ldr	r0, [pc, #80]	; (8010254 <serial_protocol_init+0xf0>)
 8010202:	f7f8 f9fd 	bl	8008600 <__assert_func>
  assert(!use_dma);
 8010206:	21cf      	movs	r1, #207	; 0xcf
 8010208:	4b15      	ldr	r3, [pc, #84]	; (8010260 <serial_protocol_init+0xfc>)
 801020a:	4a10      	ldr	r2, [pc, #64]	; (801024c <serial_protocol_init+0xe8>)
 801020c:	0089      	lsls	r1, r1, #2
 801020e:	4811      	ldr	r0, [pc, #68]	; (8010254 <serial_protocol_init+0xf0>)
 8010210:	f7f8 f9f6 	bl	8008600 <__assert_func>
  assert(sched_register_task_allow_multiple(&flush_serial_protocol_tx_fifo, true) == SUCCESS);
 8010214:	21d0      	movs	r1, #208	; 0xd0
 8010216:	4b13      	ldr	r3, [pc, #76]	; (8010264 <serial_protocol_init+0x100>)
 8010218:	4a0c      	ldr	r2, [pc, #48]	; (801024c <serial_protocol_init+0xe8>)
 801021a:	0089      	lsls	r1, r1, #2
 801021c:	480d      	ldr	r0, [pc, #52]	; (8010254 <serial_protocol_init+0xf0>)
 801021e:	f7f8 f9ef 	bl	8008600 <__assert_func>
  assert(sched_register_task_allow_multiple(&process_rx_fifo, true) == SUCCESS);
 8010222:	4b11      	ldr	r3, [pc, #68]	; (8010268 <serial_protocol_init+0x104>)
 8010224:	4a09      	ldr	r2, [pc, #36]	; (801024c <serial_protocol_init+0xe8>)
 8010226:	4911      	ldr	r1, [pc, #68]	; (801026c <serial_protocol_init+0x108>)
 8010228:	480a      	ldr	r0, [pc, #40]	; (8010254 <serial_protocol_init+0xf0>)
 801022a:	f7f8 f9e9 	bl	8008600 <__assert_func>
 801022e:	46c0      	nop			; (mov r8, r8)
 8010230:	0800ff59 	.word	0x0800ff59
 8010234:	0800fd5d 	.word	0x0800fd5d
 8010238:	2000059c 	.word	0x2000059c
 801023c:	0800fc2d 	.word	0x0800fc2d
 8010240:	0800fbf1 	.word	0x0800fbf1
 8010244:	0801a8ac 	.word	0x0801a8ac
 8010248:	0801a7dc 	.word	0x0801a7dc
 801024c:	0801a924 	.word	0x0801a924
 8010250:	00000337 	.word	0x00000337
 8010254:	0801a730 	.word	0x0801a730
 8010258:	0801a7ec 	.word	0x0801a7ec
 801025c:	00000339 	.word	0x00000339
 8010260:	0801a804 	.word	0x0801a804
 8010264:	0801a810 	.word	0x0801a810
 8010268:	0801a864 	.word	0x0801a864
 801026c:	00000341 	.word	0x00000341

08010270 <timer_init>:

static void timer_overflow();
static void timer_fired();

__LINK_C void timer_init()
{
 8010270:	b510      	push	{r4, lr}
    for(uint32_t i = 0; i < FRAMEWORK_TIMER_STACK_SIZE; i++)
 8010272:	2200      	movs	r2, #0
 8010274:	2a09      	cmp	r2, #9
 8010276:	d807      	bhi.n	8010288 <timer_init+0x18>
	NG(timers)[i].f = 0x0;
 8010278:	0093      	lsls	r3, r2, #2
 801027a:	189b      	adds	r3, r3, r2
 801027c:	009b      	lsls	r3, r3, #2
 801027e:	4910      	ldr	r1, [pc, #64]	; (80102c0 <timer_init+0x50>)
 8010280:	2000      	movs	r0, #0
 8010282:	5058      	str	r0, [r3, r1]
    for(uint32_t i = 0; i < FRAMEWORK_TIMER_STACK_SIZE; i++)
 8010284:	3201      	adds	r2, #1
 8010286:	e7f5      	b.n	8010274 <timer_init+0x4>

    NG(next_event) = NO_EVENT;
 8010288:	4b0e      	ldr	r3, [pc, #56]	; (80102c4 <timer_init+0x54>)
 801028a:	220a      	movs	r2, #10
 801028c:	601a      	str	r2, [r3, #0]
    NG(timer_offset) = 0;
 801028e:	2300      	movs	r3, #0
 8010290:	4a0d      	ldr	r2, [pc, #52]	; (80102c8 <timer_init+0x58>)
 8010292:	6013      	str	r3, [r2, #0]
    NG(hw_event_scheduled) = false;
 8010294:	4a0d      	ldr	r2, [pc, #52]	; (80102cc <timer_init+0x5c>)
 8010296:	7013      	strb	r3, [r2, #0]

    error_t err = hw_timer_init(HW_TIMER_ID, TIMER_RESOLUTION, &timer_fired, &timer_overflow);
 8010298:	4b0d      	ldr	r3, [pc, #52]	; (80102d0 <timer_init+0x60>)
 801029a:	4a0e      	ldr	r2, [pc, #56]	; (80102d4 <timer_init+0x64>)
 801029c:	2100      	movs	r1, #0
 801029e:	2000      	movs	r0, #0
 80102a0:	f7fb fcf2 	bl	800bc88 <hw_timer_init>
    assert(err == SUCCESS);
 80102a4:	2800      	cmp	r0, #0
 80102a6:	d105      	bne.n	80102b4 <timer_init+0x44>

    timer_info = hw_timer_get_info(HW_TIMER_ID);
 80102a8:	2000      	movs	r0, #0
 80102aa:	f7fb fd77 	bl	800bd9c <hw_timer_get_info>
 80102ae:	4b0a      	ldr	r3, [pc, #40]	; (80102d8 <timer_init+0x68>)
 80102b0:	6018      	str	r0, [r3, #0]
}
 80102b2:	bd10      	pop	{r4, pc}
    assert(err == SUCCESS);
 80102b4:	4b09      	ldr	r3, [pc, #36]	; (80102dc <timer_init+0x6c>)
 80102b6:	4a0a      	ldr	r2, [pc, #40]	; (80102e0 <timer_init+0x70>)
 80102b8:	214c      	movs	r1, #76	; 0x4c
 80102ba:	480a      	ldr	r0, [pc, #40]	; (80102e4 <timer_init+0x74>)
 80102bc:	f7f8 f9a0 	bl	8008600 <__assert_func>
 80102c0:	200042f8 	.word	0x200042f8
 80102c4:	200042f0 	.word	0x200042f0
 80102c8:	200042f4 	.word	0x200042f4
 80102cc:	200042ed 	.word	0x200042ed
 80102d0:	08010655 	.word	0x08010655
 80102d4:	080104ad 	.word	0x080104ad
 80102d8:	200043c4 	.word	0x200043c4
 80102dc:	0801732c 	.word	0x0801732c
 80102e0:	0801aab8 	.word	0x0801aab8
 80102e4:	0801a93c 	.word	0x0801a93c

080102e8 <timer_init_event>:

error_t timer_init_event(timer_event* event, task_t callback)
{
 80102e8:	b510      	push	{r4, lr}
 80102ea:	0003      	movs	r3, r0
 80102ec:	0008      	movs	r0, r1
    event->f = callback;
 80102ee:	6019      	str	r1, [r3, #0]
    event->arg = NULL;
 80102f0:	2200      	movs	r2, #0
 80102f2:	60da      	str	r2, [r3, #12]
    event->priority = MAX_PRIORITY;
 80102f4:	721a      	strb	r2, [r3, #8]
    event->period = 0;
 80102f6:	611a      	str	r2, [r3, #16]
 80102f8:	2100      	movs	r1, #0
 80102fa:	f7ff f8b7 	bl	800f46c <sched_register_task_allow_multiple>
    return (sched_register_task(callback)); // register the function callback to be called at the end of the timeout
}
 80102fe:	bd10      	pop	{r4, pc}

08010300 <timer_get_counter_value>:

     return present;
}

__LINK_C timer_tick_t timer_get_counter_value()
{
 8010300:	b570      	push	{r4, r5, r6, lr}
	timer_tick_t counter;
    start_atomic();
 8010302:	f7fa fb51 	bl	800a9a8 <start_atomic>
    timer_tick_t hw_timer_value = hw_timer_getvalue(HW_TIMER_ID);
 8010306:	2000      	movs	r0, #0
 8010308:	f7fb fd50 	bl	800bdac <hw_timer_getvalue>
 801030c:	0005      	movs	r5, r0
	counter = NG(timer_offset) + hw_timer_value;
 801030e:	4b09      	ldr	r3, [pc, #36]	; (8010334 <timer_get_counter_value+0x34>)
 8010310:	681c      	ldr	r4, [r3, #0]
 8010312:	1824      	adds	r4, r4, r0
    //the overflow can occur between reading out the timer here above
    //and checking the overflow pending bit. If this occurs, hw_timer_value
    //contains the max value before overflow and we will add COUNTER_OVERFLOW_INCREASE
    //bellow as well which mean that the returned time is off by COUNTER_OVERFLOW_INCREASE.
    //So only add COUNTER_OVERFLOW_INCREASE if hw_timer_value is not to large.
	if(hw_timer_is_overflow_pending(HW_TIMER_ID) && (hw_timer_value < (COUNTER_OVERFLOW_INCREASE - 10)))
 8010314:	2000      	movs	r0, #0
 8010316:	f7fb fdd9 	bl	800becc <hw_timer_is_overflow_pending>
 801031a:	2800      	cmp	r0, #0
 801031c:	d005      	beq.n	801032a <timer_get_counter_value+0x2a>
 801031e:	4b06      	ldr	r3, [pc, #24]	; (8010338 <timer_get_counter_value+0x38>)
 8010320:	429d      	cmp	r5, r3
 8010322:	d802      	bhi.n	801032a <timer_get_counter_value+0x2a>
	    counter += COUNTER_OVERFLOW_INCREASE;
 8010324:	330b      	adds	r3, #11
 8010326:	469c      	mov	ip, r3
 8010328:	4464      	add	r4, ip
    end_atomic();
 801032a:	f7fa fb4b 	bl	800a9c4 <end_atomic>
    return counter;
}
 801032e:	0020      	movs	r0, r4
 8010330:	bd70      	pop	{r4, r5, r6, pc}
 8010332:	46c0      	nop			; (mov r8, r8)
 8010334:	200042f4 	.word	0x200042f4
 8010338:	0000fff5 	.word	0x0000fff5

0801033c <get_next_event>:

static uint32_t get_next_event()
{
 801033c:	b570      	push	{r4, r5, r6, lr}
    //this function should only be called from an atomic context
    int32_t min_delay;
    uint32_t next_fire_event = NO_EVENT;
    uint32_t counter = timer_get_counter_value();
 801033e:	f7ff ffdf 	bl	8010300 <timer_get_counter_value>
 8010342:	0001      	movs	r1, r0

    for(uint32_t i = 0; i < FRAMEWORK_TIMER_STACK_SIZE; i++)
 8010344:	2300      	movs	r3, #0
    uint32_t next_fire_event = NO_EVENT;
 8010346:	200a      	movs	r0, #10
    for(uint32_t i = 0; i < FRAMEWORK_TIMER_STACK_SIZE; i++)
 8010348:	e002      	b.n	8010350 <get_next_event+0x14>
    	// --> events are sorted from past -> future regardless of any (pending) overflows
    	int32_t delay_ticks = ((int32_t)NG(timers)[i].next_event) - ((int32_t)counter);
    	if(next_fire_event == NO_EVENT || delay_ticks < min_delay)
		{
    		min_delay = delay_ticks;
			next_fire_event = i;
 801034a:	0018      	movs	r0, r3
    		min_delay = delay_ticks;
 801034c:	0014      	movs	r4, r2
    for(uint32_t i = 0; i < FRAMEWORK_TIMER_STACK_SIZE; i++)
 801034e:	3301      	adds	r3, #1
 8010350:	2b09      	cmp	r3, #9
 8010352:	d813      	bhi.n	801037c <get_next_event+0x40>
    	if(NG(timers)[i].f == 0x0)
 8010354:	009a      	lsls	r2, r3, #2
 8010356:	18d2      	adds	r2, r2, r3
 8010358:	0092      	lsls	r2, r2, #2
 801035a:	4d09      	ldr	r5, [pc, #36]	; (8010380 <get_next_event+0x44>)
 801035c:	5952      	ldr	r2, [r2, r5]
 801035e:	2a00      	cmp	r2, #0
 8010360:	d0f5      	beq.n	801034e <get_next_event+0x12>
    	int32_t delay_ticks = ((int32_t)NG(timers)[i].next_event) - ((int32_t)counter);
 8010362:	009a      	lsls	r2, r3, #2
 8010364:	18d2      	adds	r2, r2, r3
 8010366:	0092      	lsls	r2, r2, #2
 8010368:	18aa      	adds	r2, r5, r2
 801036a:	6852      	ldr	r2, [r2, #4]
 801036c:	1a52      	subs	r2, r2, r1
    	if(next_fire_event == NO_EVENT || delay_ticks < min_delay)
 801036e:	280a      	cmp	r0, #10
 8010370:	d0eb      	beq.n	801034a <get_next_event+0xe>
 8010372:	4294      	cmp	r4, r2
 8010374:	ddeb      	ble.n	801034e <get_next_event+0x12>
			next_fire_event = i;
 8010376:	0018      	movs	r0, r3
    		min_delay = delay_ticks;
 8010378:	0014      	movs	r4, r2
 801037a:	e7e8      	b.n	801034e <get_next_event+0x12>
		}
    }
    return next_fire_event;
}
 801037c:	bd70      	pop	{r4, r5, r6, pc}
 801037e:	46c0      	nop			; (mov r8, r8)
 8010380:	200042f8 	.word	0x200042f8

08010384 <timer_calculate_difference>:
    return timer_calculate_difference(start_time, timer_get_counter_value());
}

timer_tick_t timer_calculate_difference(timer_tick_t start_time, timer_tick_t stop_time)
{
    if(start_time <= stop_time)
 8010384:	4288      	cmp	r0, r1
 8010386:	d801      	bhi.n	801038c <timer_calculate_difference+0x8>
        return stop_time - start_time;
 8010388:	1a08      	subs	r0, r1, r0
    // if a rollover happened, add both parts together
    else
        return (UINT32_MAX - start_time) + 1 + stop_time; 
}
 801038a:	4770      	bx	lr
        return (UINT32_MAX - start_time) + 1 + stop_time; 
 801038c:	1a08      	subs	r0, r1, r0
 801038e:	e7fc      	b.n	801038a <timer_calculate_difference+0x6>

08010390 <configure_next_event>:
{
 8010390:	b570      	push	{r4, r5, r6, lr}
    timer_tick_t current_time = timer_get_counter_value();
 8010392:	f7ff ffb5 	bl	8010300 <timer_get_counter_value>
 8010396:	0004      	movs	r4, r0
    timer_busy_programming = true;
 8010398:	4b3b      	ldr	r3, [pc, #236]	; (8010488 <configure_next_event+0xf8>)
 801039a:	2201      	movs	r2, #1
 801039c:	701a      	strb	r2, [r3, #0]
 801039e:	e00f      	b.n	80103c0 <configure_next_event+0x30>
                    fired_by_interrupt = false;
 80103a0:	4b3a      	ldr	r3, [pc, #232]	; (801048c <configure_next_event+0xfc>)
 80103a2:	2200      	movs	r2, #0
 80103a4:	701a      	strb	r2, [r3, #0]
                    timer_fired();
 80103a6:	f000 f881 	bl	80104ac <timer_fired>
    while(NG(next_event) != NO_EVENT && ( (((int32_t)next_fire_time) - ((int32_t)current_time)  - timer_info->min_delay_ticks) <= 0  ) );
 80103aa:	4b39      	ldr	r3, [pc, #228]	; (8010490 <configure_next_event+0x100>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	2b0a      	cmp	r3, #10
 80103b0:	d02a      	beq.n	8010408 <configure_next_event+0x78>
 80103b2:	1b2b      	subs	r3, r5, r4
 80103b4:	4a37      	ldr	r2, [pc, #220]	; (8010494 <configure_next_event+0x104>)
 80103b6:	6812      	ldr	r2, [r2, #0]
 80103b8:	7812      	ldrb	r2, [r2, #0]
 80103ba:	1a9b      	subs	r3, r3, r2
 80103bc:	2b00      	cmp	r3, #0
 80103be:	dc23      	bgt.n	8010408 <configure_next_event+0x78>
		NG(next_event) = get_next_event();
 80103c0:	f7ff ffbc 	bl	801033c <get_next_event>
 80103c4:	4b32      	ldr	r3, [pc, #200]	; (8010490 <configure_next_event+0x100>)
 80103c6:	6018      	str	r0, [r3, #0]
		if(NG(next_event) != NO_EVENT)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	2b0a      	cmp	r3, #10
 80103cc:	d0ed      	beq.n	80103aa <configure_next_event+0x1a>
			next_fire_time = NG(timers)[NG(next_event)].next_event;
 80103ce:	4b30      	ldr	r3, [pc, #192]	; (8010490 <configure_next_event+0x100>)
 80103d0:	681a      	ldr	r2, [r3, #0]
 80103d2:	0093      	lsls	r3, r2, #2
 80103d4:	189b      	adds	r3, r3, r2
 80103d6:	009b      	lsls	r3, r3, #2
 80103d8:	4a2f      	ldr	r2, [pc, #188]	; (8010498 <configure_next_event+0x108>)
 80103da:	18d3      	adds	r3, r2, r3
 80103dc:	685d      	ldr	r5, [r3, #4]
            if(timer_calculate_difference(next_fire_time, current_time + timer_info->min_delay_ticks) < COUNTER_EVENTTIME_LIMIT)
 80103de:	4b2d      	ldr	r3, [pc, #180]	; (8010494 <configure_next_event+0x104>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	7819      	ldrb	r1, [r3, #0]
 80103e4:	1909      	adds	r1, r1, r4
 80103e6:	0028      	movs	r0, r5
 80103e8:	f7ff ffcc 	bl	8010384 <timer_calculate_difference>
 80103ec:	23a0      	movs	r3, #160	; 0xa0
 80103ee:	01db      	lsls	r3, r3, #7
 80103f0:	4298      	cmp	r0, r3
 80103f2:	d2da      	bcs.n	80103aa <configure_next_event+0x1a>
                if(NG(timers)[NG(next_event)].f == 0)
 80103f4:	4b26      	ldr	r3, [pc, #152]	; (8010490 <configure_next_event+0x100>)
 80103f6:	681a      	ldr	r2, [r3, #0]
 80103f8:	0093      	lsls	r3, r2, #2
 80103fa:	189b      	adds	r3, r3, r2
 80103fc:	009b      	lsls	r3, r3, #2
 80103fe:	4a26      	ldr	r2, [pc, #152]	; (8010498 <configure_next_event+0x108>)
 8010400:	589b      	ldr	r3, [r3, r2]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d1cc      	bne.n	80103a0 <configure_next_event+0x10>
 8010406:	e7d0      	b.n	80103aa <configure_next_event+0x1a>
    if(!fired_by_interrupt)
 8010408:	4b20      	ldr	r3, [pc, #128]	; (801048c <configure_next_event+0xfc>)
 801040a:	781e      	ldrb	r6, [r3, #0]
 801040c:	2e00      	cmp	r6, #0
 801040e:	d031      	beq.n	8010474 <configure_next_event+0xe4>
    if(NG(next_event) == NO_EVENT)
 8010410:	4b1f      	ldr	r3, [pc, #124]	; (8010490 <configure_next_event+0x100>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	2b0a      	cmp	r3, #10
 8010416:	d023      	beq.n	8010460 <configure_next_event+0xd0>
      timer_tick_t fire_delay = (next_fire_time - current_time);
 8010418:	1b2c      	subs	r4, r5, r4
		if((fire_delay + hw_timer_getvalue(HW_TIMER_ID)) < COUNTER_OVERFLOW_INCREASE)
 801041a:	2000      	movs	r0, #0
 801041c:	f7fb fcc6 	bl	800bdac <hw_timer_getvalue>
 8010420:	1900      	adds	r0, r0, r4
 8010422:	2380      	movs	r3, #128	; 0x80
 8010424:	025b      	lsls	r3, r3, #9
 8010426:	4298      	cmp	r0, r3
 8010428:	d226      	bcs.n	8010478 <configure_next_event+0xe8>
			NG(hw_event_scheduled) = true;
 801042a:	4b1c      	ldr	r3, [pc, #112]	; (801049c <configure_next_event+0x10c>)
 801042c:	2201      	movs	r2, #1
 801042e:	701a      	strb	r2, [r3, #0]
            end_atomic(); //stop atomic when scheduling a new timer because this needs to wait for a interrupt before writing
 8010430:	f7fa fac8 	bl	800a9c4 <end_atomic>
			hw_timer_schedule_delay(HW_TIMER_ID, (hwtimer_tick_t)fire_delay);
 8010434:	b2a5      	uxth	r5, r4
 * 						EOFF if the timer was not yet configured
 *
 */
static inline error_t hw_timer_schedule_delay(hwtimer_id_t timer_id, hwtimer_tick_t delay)
{
    return hw_timer_schedule(timer_id, hw_timer_getvalue(timer_id) + delay);
 8010436:	2000      	movs	r0, #0
 8010438:	f7fb fcb8 	bl	800bdac <hw_timer_getvalue>
 801043c:	182d      	adds	r5, r5, r0
 801043e:	b2a9      	uxth	r1, r5
 8010440:	2000      	movs	r0, #0
 8010442:	f7fb fccd 	bl	800bde0 <hw_timer_schedule>
      fire_delay = (next_fire_time - current_time - timer_info->min_delay_ticks);
 8010446:	4b13      	ldr	r3, [pc, #76]	; (8010494 <configure_next_event+0x104>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	781d      	ldrb	r5, [r3, #0]
 801044c:	1b64      	subs	r4, r4, r5
			assert(((int32_t)fire_delay) > 0);
 801044e:	2c00      	cmp	r4, #0
 8010450:	dc0d      	bgt.n	801046e <configure_next_event+0xde>
 8010452:	2164      	movs	r1, #100	; 0x64
 8010454:	4b12      	ldr	r3, [pc, #72]	; (80104a0 <configure_next_event+0x110>)
 8010456:	4a13      	ldr	r2, [pc, #76]	; (80104a4 <configure_next_event+0x114>)
 8010458:	31ff      	adds	r1, #255	; 0xff
 801045a:	4813      	ldr	r0, [pc, #76]	; (80104a8 <configure_next_event+0x118>)
 801045c:	f7f8 f8d0 	bl	8008600 <__assert_func>
		NG(hw_event_scheduled) = false;
 8010460:	4b0e      	ldr	r3, [pc, #56]	; (801049c <configure_next_event+0x10c>)
 8010462:	2200      	movs	r2, #0
 8010464:	701a      	strb	r2, [r3, #0]
		hw_timer_cancel(HW_TIMER_ID);
 8010466:	2000      	movs	r0, #0
 8010468:	f7fb fd08 	bl	800be7c <hw_timer_cancel>
    bool called_atomic = false;
 801046c:	2600      	movs	r6, #0
    timer_busy_programming = false;
 801046e:	4b06      	ldr	r3, [pc, #24]	; (8010488 <configure_next_event+0xf8>)
 8010470:	2200      	movs	r2, #0
 8010472:	701a      	strb	r2, [r3, #0]
}
 8010474:	0030      	movs	r0, r6
 8010476:	bd70      	pop	{r4, r5, r6, pc}
			NG(hw_event_scheduled) = false;
 8010478:	4b08      	ldr	r3, [pc, #32]	; (801049c <configure_next_event+0x10c>)
 801047a:	2200      	movs	r2, #0
 801047c:	701a      	strb	r2, [r3, #0]
		    hw_timer_cancel(HW_TIMER_ID);
 801047e:	2000      	movs	r0, #0
 8010480:	f7fb fcfc 	bl	800be7c <hw_timer_cancel>
    bool called_atomic = false;
 8010484:	2600      	movs	r6, #0
 8010486:	e7f2      	b.n	801046e <configure_next_event+0xde>
 8010488:	200043c0 	.word	0x200043c0
 801048c:	200005b4 	.word	0x200005b4
 8010490:	200042f0 	.word	0x200042f0
 8010494:	200043c4 	.word	0x200043c4
 8010498:	200042f8 	.word	0x200042f8
 801049c:	200042ed 	.word	0x200042ed
 80104a0:	0801a980 	.word	0x0801a980
 80104a4:	0801aac4 	.word	0x0801aac4
 80104a8:	0801a93c 	.word	0x0801a93c

080104ac <timer_fired>:
		}
    }
}

static void timer_fired()
{
 80104ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104ae:	b083      	sub	sp, #12
    if(timer_busy_programming && fired_by_interrupt)
 80104b0:	4b5d      	ldr	r3, [pc, #372]	; (8010628 <timer_fired+0x17c>)
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d003      	beq.n	80104c0 <timer_fired+0x14>
 80104b8:	4b5c      	ldr	r3, [pc, #368]	; (801062c <timer_fired+0x180>)
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d158      	bne.n	8010572 <timer_fired+0xc6>
        return;
    assert(NG(next_event) != NO_EVENT);
 80104c0:	4b5b      	ldr	r3, [pc, #364]	; (8010630 <timer_fired+0x184>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	2b0a      	cmp	r3, #10
 80104c6:	d056      	beq.n	8010576 <timer_fired+0xca>
    assert(NG(timers)[NG(next_event)].f != 0x0);
 80104c8:	4b59      	ldr	r3, [pc, #356]	; (8010630 <timer_fired+0x184>)
 80104ca:	681a      	ldr	r2, [r3, #0]
 80104cc:	0093      	lsls	r3, r2, #2
 80104ce:	189b      	adds	r3, r3, r2
 80104d0:	009b      	lsls	r3, r3, #2
 80104d2:	4a58      	ldr	r2, [pc, #352]	; (8010634 <timer_fired+0x188>)
 80104d4:	589b      	ldr	r3, [r3, r2]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d054      	beq.n	8010584 <timer_fired+0xd8>
    timer_tick_t current_time = timer_get_counter_value();
 80104da:	f7ff ff11 	bl	8010300 <timer_get_counter_value>
 80104de:	0004      	movs	r4, r0
#ifdef FRAMEWORK_LOG_ENABLED
    // if event got fired to early, show error logging
    if((current_time + timer_info->min_delay_ticks) < NG(timers)[NG(next_event)].next_event)
 80104e0:	4b55      	ldr	r3, [pc, #340]	; (8010638 <timer_fired+0x18c>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	781a      	ldrb	r2, [r3, #0]
 80104e6:	1810      	adds	r0, r2, r0
 80104e8:	4b51      	ldr	r3, [pc, #324]	; (8010630 <timer_fired+0x184>)
 80104ea:	6819      	ldr	r1, [r3, #0]
 80104ec:	008b      	lsls	r3, r1, #2
 80104ee:	185b      	adds	r3, r3, r1
 80104f0:	009b      	lsls	r3, r3, #2
 80104f2:	4950      	ldr	r1, [pc, #320]	; (8010634 <timer_fired+0x188>)
 80104f4:	18cb      	adds	r3, r1, r3
 80104f6:	685b      	ldr	r3, [r3, #4]
 80104f8:	4298      	cmp	r0, r3
 80104fa:	d34a      	bcc.n	8010592 <timer_fired+0xe6>
        log_print_error_string("timer fired too early with current time %i + min delay ticks %i < next event %i: function 0x%X",
            current_time, timer_info->min_delay_ticks, NG(timers)[NG(next_event)].next_event, NG(timers)[NG(next_event)].f);
    else if(current_time > (NG(timers)[NG(next_event)].next_event + 5))
 80104fc:	4b4c      	ldr	r3, [pc, #304]	; (8010630 <timer_fired+0x184>)
 80104fe:	6819      	ldr	r1, [r3, #0]
 8010500:	008b      	lsls	r3, r1, #2
 8010502:	185b      	adds	r3, r3, r1
 8010504:	009b      	lsls	r3, r3, #2
 8010506:	494b      	ldr	r1, [pc, #300]	; (8010634 <timer_fired+0x188>)
 8010508:	18cb      	adds	r3, r1, r3
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	3305      	adds	r3, #5
 801050e:	42a3      	cmp	r3, r4
 8010510:	d352      	bcc.n	80105b8 <timer_fired+0x10c>
        log_print_error_string("timer fired too late with current time %i > next event %i + 5: function 0x%X",
            current_time, timer_info->min_delay_ticks, NG(timers)[NG(next_event)].next_event, NG(timers)[NG(next_event)].f);
#endif
    // check if the current task is the watchdog bump task and if we're not nearly reaching the reset
    timer_tick_t repost_time_diff = sched_check_software_watchdog(NG(timers)[NG(next_event)].f, current_time);
 8010512:	4f47      	ldr	r7, [pc, #284]	; (8010630 <timer_fired+0x184>)
 8010514:	683a      	ldr	r2, [r7, #0]
 8010516:	4e47      	ldr	r6, [pc, #284]	; (8010634 <timer_fired+0x188>)
 8010518:	0093      	lsls	r3, r2, #2
 801051a:	189b      	adds	r3, r3, r2
 801051c:	009b      	lsls	r3, r3, #2
 801051e:	5998      	ldr	r0, [r3, r6]
 8010520:	0021      	movs	r1, r4
 8010522:	f7ff f973 	bl	800f80c <sched_check_software_watchdog>
 8010526:	0005      	movs	r5, r0

    sched_post_task_prio(
 8010528:	6838      	ldr	r0, [r7, #0]
 801052a:	6839      	ldr	r1, [r7, #0]
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	009a      	lsls	r2, r3, #2
 8010530:	18d2      	adds	r2, r2, r3
 8010532:	0092      	lsls	r2, r2, #2
 8010534:	18b2      	adds	r2, r6, r2
 8010536:	68d2      	ldr	r2, [r2, #12]
 8010538:	008b      	lsls	r3, r1, #2
 801053a:	185b      	adds	r3, r3, r1
 801053c:	009b      	lsls	r3, r3, #2
 801053e:	18f3      	adds	r3, r6, r3
 8010540:	7a19      	ldrb	r1, [r3, #8]
 8010542:	0083      	lsls	r3, r0, #2
 8010544:	181b      	adds	r3, r3, r0
 8010546:	009b      	lsls	r3, r3, #2
 8010548:	5998      	ldr	r0, [r3, r6]
 801054a:	f7ff f82b 	bl	800f5a4 <sched_post_task_prio>
        NG(timers)[NG(next_event)].f, NG(timers)[NG(next_event)].priority, NG(timers)[NG(next_event)].arg);

    if(repost_time_diff)
 801054e:	2d00      	cmp	r5, #0
 8010550:	d045      	beq.n	80105de <timer_fired+0x132>
        NG(timers)[NG(next_event)].next_event = current_time + repost_time_diff;
 8010552:	4b37      	ldr	r3, [pc, #220]	; (8010630 <timer_fired+0x184>)
 8010554:	681a      	ldr	r2, [r3, #0]
 8010556:	1964      	adds	r4, r4, r5
 8010558:	0093      	lsls	r3, r2, #2
 801055a:	189b      	adds	r3, r3, r2
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	4a35      	ldr	r2, [pc, #212]	; (8010634 <timer_fired+0x188>)
 8010560:	18d3      	adds	r3, r2, r3
 8010562:	605c      	str	r4, [r3, #4]
    else if(NG(timers)[NG(next_event)].period > 0)
        NG(timers)[NG(next_event)].next_event = current_time + NG(timers)[NG(next_event)].period;
    else
        NG(timers)[NG(next_event)].f = 0x0;

    if(fired_by_interrupt)
 8010564:	4b31      	ldr	r3, [pc, #196]	; (801062c <timer_fired+0x180>)
 8010566:	781b      	ldrb	r3, [r3, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d15a      	bne.n	8010622 <timer_fired+0x176>
        configure_next_event();
    else
        fired_by_interrupt = true;
 801056c:	4b2f      	ldr	r3, [pc, #188]	; (801062c <timer_fired+0x180>)
 801056e:	2201      	movs	r2, #1
 8010570:	701a      	strb	r2, [r3, #0]
 8010572:	b003      	add	sp, #12
 8010574:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(NG(next_event) != NO_EVENT);
 8010576:	21a0      	movs	r1, #160	; 0xa0
 8010578:	4b30      	ldr	r3, [pc, #192]	; (801063c <timer_fired+0x190>)
 801057a:	4a31      	ldr	r2, [pc, #196]	; (8010640 <timer_fired+0x194>)
 801057c:	31ff      	adds	r1, #255	; 0xff
 801057e:	4831      	ldr	r0, [pc, #196]	; (8010644 <timer_fired+0x198>)
 8010580:	f7f8 f83e 	bl	8008600 <__assert_func>
    assert(NG(timers)[NG(next_event)].f != 0x0);
 8010584:	21d0      	movs	r1, #208	; 0xd0
 8010586:	4b30      	ldr	r3, [pc, #192]	; (8010648 <timer_fired+0x19c>)
 8010588:	4a2d      	ldr	r2, [pc, #180]	; (8010640 <timer_fired+0x194>)
 801058a:	0049      	lsls	r1, r1, #1
 801058c:	482d      	ldr	r0, [pc, #180]	; (8010644 <timer_fired+0x198>)
 801058e:	f7f8 f837 	bl	8008600 <__assert_func>
        log_print_error_string("timer fired too early with current time %i + min delay ticks %i < next event %i: function 0x%X",
 8010592:	4b27      	ldr	r3, [pc, #156]	; (8010630 <timer_fired+0x184>)
 8010594:	6819      	ldr	r1, [r3, #0]
 8010596:	681d      	ldr	r5, [r3, #0]
 8010598:	4826      	ldr	r0, [pc, #152]	; (8010634 <timer_fired+0x188>)
 801059a:	008b      	lsls	r3, r1, #2
 801059c:	185b      	adds	r3, r3, r1
 801059e:	009b      	lsls	r3, r3, #2
 80105a0:	18c3      	adds	r3, r0, r3
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	00a9      	lsls	r1, r5, #2
 80105a6:	1949      	adds	r1, r1, r5
 80105a8:	0089      	lsls	r1, r1, #2
 80105aa:	5809      	ldr	r1, [r1, r0]
 80105ac:	9100      	str	r1, [sp, #0]
 80105ae:	0021      	movs	r1, r4
 80105b0:	4826      	ldr	r0, [pc, #152]	; (801064c <timer_fired+0x1a0>)
 80105b2:	f7fe fd15 	bl	800efe0 <log_print_error_string>
 80105b6:	e7ac      	b.n	8010512 <timer_fired+0x66>
        log_print_error_string("timer fired too late with current time %i > next event %i + 5: function 0x%X",
 80105b8:	4b1d      	ldr	r3, [pc, #116]	; (8010630 <timer_fired+0x184>)
 80105ba:	6819      	ldr	r1, [r3, #0]
 80105bc:	681d      	ldr	r5, [r3, #0]
 80105be:	481d      	ldr	r0, [pc, #116]	; (8010634 <timer_fired+0x188>)
 80105c0:	008b      	lsls	r3, r1, #2
 80105c2:	185b      	adds	r3, r3, r1
 80105c4:	009b      	lsls	r3, r3, #2
 80105c6:	18c3      	adds	r3, r0, r3
 80105c8:	685b      	ldr	r3, [r3, #4]
 80105ca:	00a9      	lsls	r1, r5, #2
 80105cc:	1949      	adds	r1, r1, r5
 80105ce:	0089      	lsls	r1, r1, #2
 80105d0:	5809      	ldr	r1, [r1, r0]
 80105d2:	9100      	str	r1, [sp, #0]
 80105d4:	0021      	movs	r1, r4
 80105d6:	481e      	ldr	r0, [pc, #120]	; (8010650 <timer_fired+0x1a4>)
 80105d8:	f7fe fd02 	bl	800efe0 <log_print_error_string>
 80105dc:	e799      	b.n	8010512 <timer_fired+0x66>
    else if(NG(timers)[NG(next_event)].period > 0)
 80105de:	4b14      	ldr	r3, [pc, #80]	; (8010630 <timer_fired+0x184>)
 80105e0:	681a      	ldr	r2, [r3, #0]
 80105e2:	0093      	lsls	r3, r2, #2
 80105e4:	189b      	adds	r3, r3, r2
 80105e6:	009b      	lsls	r3, r3, #2
 80105e8:	4a12      	ldr	r2, [pc, #72]	; (8010634 <timer_fired+0x188>)
 80105ea:	18d3      	adds	r3, r2, r3
 80105ec:	691b      	ldr	r3, [r3, #16]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d00e      	beq.n	8010610 <timer_fired+0x164>
        NG(timers)[NG(next_event)].next_event = current_time + NG(timers)[NG(next_event)].period;
 80105f2:	490f      	ldr	r1, [pc, #60]	; (8010630 <timer_fired+0x184>)
 80105f4:	6808      	ldr	r0, [r1, #0]
 80105f6:	0083      	lsls	r3, r0, #2
 80105f8:	181b      	adds	r3, r3, r0
 80105fa:	009b      	lsls	r3, r3, #2
 80105fc:	18d3      	adds	r3, r2, r3
 80105fe:	6918      	ldr	r0, [r3, #16]
 8010600:	6809      	ldr	r1, [r1, #0]
 8010602:	1904      	adds	r4, r0, r4
 8010604:	008b      	lsls	r3, r1, #2
 8010606:	185b      	adds	r3, r3, r1
 8010608:	009b      	lsls	r3, r3, #2
 801060a:	18d3      	adds	r3, r2, r3
 801060c:	605c      	str	r4, [r3, #4]
 801060e:	e7a9      	b.n	8010564 <timer_fired+0xb8>
        NG(timers)[NG(next_event)].f = 0x0;
 8010610:	4b07      	ldr	r3, [pc, #28]	; (8010630 <timer_fired+0x184>)
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	0093      	lsls	r3, r2, #2
 8010616:	189b      	adds	r3, r3, r2
 8010618:	009b      	lsls	r3, r3, #2
 801061a:	4a06      	ldr	r2, [pc, #24]	; (8010634 <timer_fired+0x188>)
 801061c:	2100      	movs	r1, #0
 801061e:	5099      	str	r1, [r3, r2]
 8010620:	e7a0      	b.n	8010564 <timer_fired+0xb8>
        configure_next_event();
 8010622:	f7ff feb5 	bl	8010390 <configure_next_event>
 8010626:	e7a4      	b.n	8010572 <timer_fired+0xc6>
 8010628:	200043c0 	.word	0x200043c0
 801062c:	200005b4 	.word	0x200005b4
 8010630:	200042f0 	.word	0x200042f0
 8010634:	200042f8 	.word	0x200042f8
 8010638:	200043c4 	.word	0x200043c4
 801063c:	0801a99c 	.word	0x0801a99c
 8010640:	0801aaec 	.word	0x0801aaec
 8010644:	0801a93c 	.word	0x0801a93c
 8010648:	0801a9b8 	.word	0x0801a9b8
 801064c:	0801a9dc 	.word	0x0801a9dc
 8010650:	0801aa3c 	.word	0x0801aa3c

08010654 <timer_overflow>:
{
 8010654:	b510      	push	{r4, lr}
    NG(timer_offset) += COUNTER_OVERFLOW_INCREASE;
 8010656:	4a2a      	ldr	r2, [pc, #168]	; (8010700 <timer_overflow+0xac>)
 8010658:	6813      	ldr	r3, [r2, #0]
 801065a:	2180      	movs	r1, #128	; 0x80
 801065c:	0249      	lsls	r1, r1, #9
 801065e:	468c      	mov	ip, r1
 8010660:	4463      	add	r3, ip
 8010662:	6013      	str	r3, [r2, #0]
    if(NG(next_event) != NO_EVENT && 		//there is an event scheduled at THIS timer level
 8010664:	4b27      	ldr	r3, [pc, #156]	; (8010704 <timer_overflow+0xb0>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	2b0a      	cmp	r3, #10
 801066a:	d01e      	beq.n	80106aa <timer_overflow+0x56>
	(!NG(hw_event_scheduled)) &&		//but NOT at the hw timer level
 801066c:	4b26      	ldr	r3, [pc, #152]	; (8010708 <timer_overflow+0xb4>)
 801066e:	781b      	ldrb	r3, [r3, #0]
    if(NG(next_event) != NO_EVENT && 		//there is an event scheduled at THIS timer level
 8010670:	2b00      	cmp	r3, #0
 8010672:	d11a      	bne.n	80106aa <timer_overflow+0x56>
		( (NG(timers)[NG(next_event)].next_event >= NG(timer_offset))
 8010674:	4b23      	ldr	r3, [pc, #140]	; (8010704 <timer_overflow+0xb0>)
 8010676:	681a      	ldr	r2, [r3, #0]
 8010678:	0093      	lsls	r3, r2, #2
 801067a:	189b      	adds	r3, r3, r2
 801067c:	009b      	lsls	r3, r3, #2
 801067e:	4a23      	ldr	r2, [pc, #140]	; (801070c <timer_overflow+0xb8>)
 8010680:	18d3      	adds	r3, r2, r3
 8010682:	685a      	ldr	r2, [r3, #4]
 8010684:	4b1e      	ldr	r3, [pc, #120]	; (8010700 <timer_overflow+0xac>)
 8010686:	681b      	ldr	r3, [r3, #0]
	(!NG(hw_event_scheduled)) &&		//but NOT at the hw timer level
 8010688:	429a      	cmp	r2, r3
 801068a:	d30e      	bcc.n	80106aa <timer_overflow+0x56>
	    && (NG(timers)[NG(next_event)].next_event <= (NG(timer_offset) + COUNTER_OVERFLOW_INCREASE - 1) ) ) //and the next trigger will happen before the next overflow
 801068c:	4b1d      	ldr	r3, [pc, #116]	; (8010704 <timer_overflow+0xb0>)
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	0093      	lsls	r3, r2, #2
 8010692:	189b      	adds	r3, r3, r2
 8010694:	009b      	lsls	r3, r3, #2
 8010696:	4a1d      	ldr	r2, [pc, #116]	; (801070c <timer_overflow+0xb8>)
 8010698:	18d3      	adds	r3, r2, r3
 801069a:	685a      	ldr	r2, [r3, #4]
 801069c:	4b18      	ldr	r3, [pc, #96]	; (8010700 <timer_overflow+0xac>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	491b      	ldr	r1, [pc, #108]	; (8010710 <timer_overflow+0xbc>)
 80106a2:	468c      	mov	ip, r1
 80106a4:	4463      	add	r3, ip
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d900      	bls.n	80106ac <timer_overflow+0x58>
}
 80106aa:	bd10      	pop	{r4, pc}
		timer_tick_t fire_time = (NG(timers)[NG(next_event)].next_event - NG(timer_offset));
 80106ac:	4b15      	ldr	r3, [pc, #84]	; (8010704 <timer_overflow+0xb0>)
 80106ae:	681a      	ldr	r2, [r3, #0]
 80106b0:	0093      	lsls	r3, r2, #2
 80106b2:	189b      	adds	r3, r3, r2
 80106b4:	009b      	lsls	r3, r3, #2
 80106b6:	4a15      	ldr	r2, [pc, #84]	; (801070c <timer_overflow+0xb8>)
 80106b8:	18d3      	adds	r3, r2, r3
 80106ba:	685c      	ldr	r4, [r3, #4]
 80106bc:	4b10      	ldr	r3, [pc, #64]	; (8010700 <timer_overflow+0xac>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	1ae4      	subs	r4, r4, r3
		if(fire_time <= (hw_timer_getvalue(HW_TIMER_ID) + timer_info->min_delay_ticks))
 80106c2:	2000      	movs	r0, #0
 80106c4:	f7fb fb72 	bl	800bdac <hw_timer_getvalue>
 80106c8:	4b12      	ldr	r3, [pc, #72]	; (8010714 <timer_overflow+0xc0>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	18c0      	adds	r0, r0, r3
 80106d0:	42a0      	cmp	r0, r4
 80106d2:	d302      	bcc.n	80106da <timer_overflow+0x86>
			timer_fired();
 80106d4:	f7ff feea 	bl	80104ac <timer_fired>
 80106d8:	e7e7      	b.n	80106aa <timer_overflow+0x56>
			NG(hw_event_scheduled) = true;
 80106da:	4b0b      	ldr	r3, [pc, #44]	; (8010708 <timer_overflow+0xb4>)
 80106dc:	2201      	movs	r2, #1
 80106de:	701a      	strb	r2, [r3, #0]
			hw_timer_schedule(HW_TIMER_ID, fire_time);
 80106e0:	b2a1      	uxth	r1, r4
 80106e2:	2000      	movs	r0, #0
 80106e4:	f7fb fb7c 	bl	800bde0 <hw_timer_schedule>
			assert(fire_time >= hw_timer_getvalue(HW_TIMER_ID));
 80106e8:	2000      	movs	r0, #0
 80106ea:	f7fb fb5f 	bl	800bdac <hw_timer_getvalue>
 80106ee:	42a0      	cmp	r0, r4
 80106f0:	d9db      	bls.n	80106aa <timer_overflow+0x56>
 80106f2:	21cb      	movs	r1, #203	; 0xcb
 80106f4:	4b08      	ldr	r3, [pc, #32]	; (8010718 <timer_overflow+0xc4>)
 80106f6:	4a09      	ldr	r2, [pc, #36]	; (801071c <timer_overflow+0xc8>)
 80106f8:	0049      	lsls	r1, r1, #1
 80106fa:	4809      	ldr	r0, [pc, #36]	; (8010720 <timer_overflow+0xcc>)
 80106fc:	f7f7 ff80 	bl	8008600 <__assert_func>
 8010700:	200042f4 	.word	0x200042f4
 8010704:	200042f0 	.word	0x200042f0
 8010708:	200042ed 	.word	0x200042ed
 801070c:	200042f8 	.word	0x200042f8
 8010710:	0000ffff 	.word	0x0000ffff
 8010714:	200043c4 	.word	0x200043c4
 8010718:	0801aa8c 	.word	0x0801aa8c
 801071c:	0801aadc 	.word	0x0801aadc
 8010720:	0801a93c 	.word	0x0801a93c

08010724 <timer_post_task_prio>:
{
 8010724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010726:	46c6      	mov	lr, r8
 8010728:	b500      	push	{lr}
 801072a:	b082      	sub	sp, #8
 801072c:	0006      	movs	r6, r0
 801072e:	4688      	mov	r8, r1
 8010730:	0017      	movs	r7, r2
 8010732:	9301      	str	r3, [sp, #4]
    if (priority > MIN_PRIORITY)
 8010734:	2a07      	cmp	r2, #7
 8010736:	d900      	bls.n	801073a <timer_post_task_prio+0x16>
 8010738:	e076      	b.n	8010828 <timer_post_task_prio+0x104>
    if (fire_time == 0)
 801073a:	2900      	cmp	r1, #0
 801073c:	d004      	beq.n	8010748 <timer_post_task_prio+0x24>
    start_atomic();
 801073e:	f7fa f933 	bl	800a9a8 <start_atomic>
    for (uint32_t i = 0; i < FRAMEWORK_TIMER_STACK_SIZE; i++)
 8010742:	2300      	movs	r3, #0
    uint32_t empty_index = FRAMEWORK_TIMER_STACK_SIZE;
 8010744:	250a      	movs	r5, #10
    for (uint32_t i = 0; i < FRAMEWORK_TIMER_STACK_SIZE; i++)
 8010746:	e008      	b.n	801075a <timer_post_task_prio+0x36>
        return (sched_post_task_prio(task, priority, arg));
 8010748:	9a08      	ldr	r2, [sp, #32]
 801074a:	0039      	movs	r1, r7
 801074c:	f7fe ff2a 	bl	800f5a4 <sched_post_task_prio>
 8010750:	0004      	movs	r4, r0
 8010752:	e041      	b.n	80107d8 <timer_post_task_prio+0xb4>
        else if (NG(timers)[i].f == task)
 8010754:	42b2      	cmp	r2, r6
 8010756:	d00d      	beq.n	8010774 <timer_post_task_prio+0x50>
    for (uint32_t i = 0; i < FRAMEWORK_TIMER_STACK_SIZE; i++)
 8010758:	3301      	adds	r3, #1
 801075a:	2b09      	cmp	r3, #9
 801075c:	d81f      	bhi.n	801079e <timer_post_task_prio+0x7a>
        if (NG(timers)[i].f == 0x0 && empty_index == FRAMEWORK_TIMER_STACK_SIZE)
 801075e:	009c      	lsls	r4, r3, #2
 8010760:	18e4      	adds	r4, r4, r3
 8010762:	00a4      	lsls	r4, r4, #2
 8010764:	4a31      	ldr	r2, [pc, #196]	; (801082c <timer_post_task_prio+0x108>)
 8010766:	58a2      	ldr	r2, [r4, r2]
 8010768:	2a00      	cmp	r2, #0
 801076a:	d1f3      	bne.n	8010754 <timer_post_task_prio+0x30>
 801076c:	2d0a      	cmp	r5, #10
 801076e:	d1f1      	bne.n	8010754 <timer_post_task_prio+0x30>
            empty_index = i;
 8010770:	001d      	movs	r5, r3
 8010772:	e7f1      	b.n	8010758 <timer_post_task_prio+0x34>
            if (NG(timers)[i].priority == priority)
 8010774:	009a      	lsls	r2, r3, #2
 8010776:	18d2      	adds	r2, r2, r3
 8010778:	0092      	lsls	r2, r2, #2
 801077a:	492c      	ldr	r1, [pc, #176]	; (801082c <timer_post_task_prio+0x108>)
 801077c:	188a      	adds	r2, r1, r2
 801077e:	7a12      	ldrb	r2, [r2, #8]
 8010780:	42ba      	cmp	r2, r7
 8010782:	d002      	beq.n	801078a <timer_post_task_prio+0x66>
                status = EALREADY;
 8010784:	2478      	movs	r4, #120	; 0x78
    bool conf_atomic_ended = false;
 8010786:	2300      	movs	r3, #0
        goto end;
 8010788:	e024      	b.n	80107d4 <timer_post_task_prio+0xb0>
                NG(timers)[i].period = period;
 801078a:	009a      	lsls	r2, r3, #2
 801078c:	18d2      	adds	r2, r2, r3
 801078e:	0092      	lsls	r2, r2, #2
 8010790:	188a      	adds	r2, r1, r2
 8010792:	9901      	ldr	r1, [sp, #4]
 8010794:	6111      	str	r1, [r2, #16]
                NG(timers)[i].next_event = fire_time;
 8010796:	4641      	mov	r1, r8
 8010798:	6051      	str	r1, [r2, #4]
                empty_index = i;
 801079a:	001d      	movs	r5, r3
                goto config;
 801079c:	e00e      	b.n	80107bc <timer_post_task_prio+0x98>
    if (status != EALREADY && empty_index != FRAMEWORK_TIMER_STACK_SIZE)
 801079e:	2d0a      	cmp	r5, #10
 80107a0:	d01f      	beq.n	80107e2 <timer_post_task_prio+0xbe>
        NG(timers)[empty_index].f = task;
 80107a2:	4b22      	ldr	r3, [pc, #136]	; (801082c <timer_post_task_prio+0x108>)
 80107a4:	00aa      	lsls	r2, r5, #2
 80107a6:	1951      	adds	r1, r2, r5
 80107a8:	0089      	lsls	r1, r1, #2
 80107aa:	50ce      	str	r6, [r1, r3]
        NG(timers)[empty_index].next_event = fire_time;
 80107ac:	185b      	adds	r3, r3, r1
 80107ae:	4642      	mov	r2, r8
 80107b0:	605a      	str	r2, [r3, #4]
        NG(timers)[empty_index].priority = priority;
 80107b2:	721f      	strb	r7, [r3, #8]
        NG(timers)[empty_index].arg = arg;
 80107b4:	9a08      	ldr	r2, [sp, #32]
 80107b6:	60da      	str	r2, [r3, #12]
        NG(timers)[empty_index].period = period;
 80107b8:	9a01      	ldr	r2, [sp, #4]
 80107ba:	611a      	str	r2, [r3, #16]
        bool do_config = NG(next_event) == NO_EVENT;
 80107bc:	4b1c      	ldr	r3, [pc, #112]	; (8010830 <timer_post_task_prio+0x10c>)
 80107be:	681a      	ldr	r2, [r3, #0]
 80107c0:	0013      	movs	r3, r2
 80107c2:	3b0a      	subs	r3, #10
 80107c4:	4259      	negs	r1, r3
 80107c6:	414b      	adcs	r3, r1
 80107c8:	b2db      	uxtb	r3, r3
        if (!do_config)
 80107ca:	2a0a      	cmp	r2, #10
 80107cc:	d10b      	bne.n	80107e6 <timer_post_task_prio+0xc2>
        if (do_config) {
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d122      	bne.n	8010818 <timer_post_task_prio+0xf4>
        status = SUCCESS;
 80107d2:	2400      	movs	r4, #0
    if(!conf_atomic_ended) { //if configure_next_event gets run, then atomic is ended in there. Otherwise we should end it here.
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d024      	beq.n	8010822 <timer_post_task_prio+0xfe>
}
 80107d8:	0020      	movs	r0, r4
 80107da:	b002      	add	sp, #8
 80107dc:	bc04      	pop	{r2}
 80107de:	4690      	mov	r8, r2
 80107e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    error_t status = ENOMEM;
 80107e2:	240c      	movs	r4, #12
 80107e4:	e7cf      	b.n	8010786 <timer_post_task_prio+0x62>
            uint32_t counter = timer_get_counter_value();
 80107e6:	f7ff fd8b 	bl	8010300 <timer_get_counter_value>
            int32_t next_fire_delay = ((int32_t)fire_time) - ((int32_t)counter);
 80107ea:	4643      	mov	r3, r8
 80107ec:	1a19      	subs	r1, r3, r0
            int32_t old_fire_delay = ((int32_t)NG(timers)[NG(next_event)].next_event) - ((int32_t)counter);
 80107ee:	4b10      	ldr	r3, [pc, #64]	; (8010830 <timer_post_task_prio+0x10c>)
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	0093      	lsls	r3, r2, #2
 80107f4:	189b      	adds	r3, r3, r2
 80107f6:	009b      	lsls	r3, r3, #2
 80107f8:	4a0c      	ldr	r2, [pc, #48]	; (801082c <timer_post_task_prio+0x108>)
 80107fa:	18d3      	adds	r3, r2, r3
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	1a18      	subs	r0, r3, r0
            do_config = (next_fire_delay <= old_fire_delay) || NG(next_event) == empty_index; //when same index is overwritten, also update
 8010800:	4281      	cmp	r1, r0
 8010802:	dd07      	ble.n	8010814 <timer_post_task_prio+0xf0>
 8010804:	4b0a      	ldr	r3, [pc, #40]	; (8010830 <timer_post_task_prio+0x10c>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	42ab      	cmp	r3, r5
 801080a:	d001      	beq.n	8010810 <timer_post_task_prio+0xec>
 801080c:	2300      	movs	r3, #0
 801080e:	e7de      	b.n	80107ce <timer_post_task_prio+0xaa>
 8010810:	2301      	movs	r3, #1
 8010812:	e7dc      	b.n	80107ce <timer_post_task_prio+0xaa>
 8010814:	2301      	movs	r3, #1
 8010816:	e7da      	b.n	80107ce <timer_post_task_prio+0xaa>
            conf_atomic_ended = configure_next_event();
 8010818:	f7ff fdba 	bl	8010390 <configure_next_event>
 801081c:	0003      	movs	r3, r0
        status = SUCCESS;
 801081e:	2400      	movs	r4, #0
 8010820:	e7d8      	b.n	80107d4 <timer_post_task_prio+0xb0>
        end_atomic();
 8010822:	f7fa f8cf 	bl	800a9c4 <end_atomic>
 8010826:	e7d7      	b.n	80107d8 <timer_post_task_prio+0xb4>
        return EINVAL;
 8010828:	2416      	movs	r4, #22
 801082a:	e7d5      	b.n	80107d8 <timer_post_task_prio+0xb4>
 801082c:	200042f8 	.word	0x200042f8
 8010830:	200042f0 	.word	0x200042f0

08010834 <timer_add_event>:
{
 8010834:	b530      	push	{r4, r5, lr}
 8010836:	b083      	sub	sp, #12
 8010838:	0004      	movs	r4, r0
    return timer_post_task_prio(event->f, timer_get_counter_value() + event->next_event, event->priority, event->period, event->arg);
 801083a:	6805      	ldr	r5, [r0, #0]
 801083c:	f7ff fd60 	bl	8010300 <timer_get_counter_value>
 8010840:	6923      	ldr	r3, [r4, #16]
 8010842:	7a22      	ldrb	r2, [r4, #8]
 8010844:	6861      	ldr	r1, [r4, #4]
 8010846:	1841      	adds	r1, r0, r1
 8010848:	68e0      	ldr	r0, [r4, #12]
 801084a:	9000      	str	r0, [sp, #0]
 801084c:	0028      	movs	r0, r5
 801084e:	f7ff ff69 	bl	8010724 <timer_post_task_prio>
}
 8010852:	b003      	add	sp, #12
 8010854:	bd30      	pop	{r4, r5, pc}
	...

08010858 <timer_cancel_task>:
{
 8010858:	b510      	push	{r4, lr}
 801085a:	0004      	movs	r4, r0
    start_atomic();
 801085c:	f7fa f8a4 	bl	800a9a8 <start_atomic>
    for(uint32_t i = 0; i < FRAMEWORK_TIMER_STACK_SIZE; i++)
 8010860:	2200      	movs	r2, #0
 8010862:	2a09      	cmp	r2, #9
 8010864:	d818      	bhi.n	8010898 <timer_cancel_task+0x40>
      if(NG(timers)[i].f == task)
 8010866:	0093      	lsls	r3, r2, #2
 8010868:	189b      	adds	r3, r3, r2
 801086a:	009b      	lsls	r3, r3, #2
 801086c:	490f      	ldr	r1, [pc, #60]	; (80108ac <timer_cancel_task+0x54>)
 801086e:	585b      	ldr	r3, [r3, r1]
 8010870:	42a3      	cmp	r3, r4
 8010872:	d001      	beq.n	8010878 <timer_cancel_task+0x20>
    for(uint32_t i = 0; i < FRAMEWORK_TIMER_STACK_SIZE; i++)
 8010874:	3201      	adds	r2, #1
 8010876:	e7f4      	b.n	8010862 <timer_cancel_task+0xa>
        NG(timers)[i].f = 0x0;
 8010878:	0093      	lsls	r3, r2, #2
 801087a:	189b      	adds	r3, r3, r2
 801087c:	009b      	lsls	r3, r3, #2
 801087e:	2000      	movs	r0, #0
 8010880:	5058      	str	r0, [r3, r1]
        if(NG(next_event) == i) {
 8010882:	4b0b      	ldr	r3, [pc, #44]	; (80108b0 <timer_cancel_task+0x58>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	4293      	cmp	r3, r2
 8010888:	d002      	beq.n	8010890 <timer_cancel_task+0x38>
    bool conf_atomic_ended = false;
 801088a:	2000      	movs	r0, #0
        status = SUCCESS;
 801088c:	2400      	movs	r4, #0
 801088e:	e005      	b.n	801089c <timer_cancel_task+0x44>
            conf_atomic_ended = configure_next_event();
 8010890:	f7ff fd7e 	bl	8010390 <configure_next_event>
        status = SUCCESS;
 8010894:	2400      	movs	r4, #0
 8010896:	e001      	b.n	801089c <timer_cancel_task+0x44>
    bool conf_atomic_ended = false;
 8010898:	2000      	movs	r0, #0
    error_t status = EALREADY;
 801089a:	2478      	movs	r4, #120	; 0x78
    if(!conf_atomic_ended) { //if configure_next_event gets run, then atomic is ended in there. Otherwise we should end it here.
 801089c:	2800      	cmp	r0, #0
 801089e:	d001      	beq.n	80108a4 <timer_cancel_task+0x4c>
}
 80108a0:	0020      	movs	r0, r4
 80108a2:	bd10      	pop	{r4, pc}
        end_atomic(); 
 80108a4:	f7fa f88e 	bl	800a9c4 <end_atomic>
    return status;
 80108a8:	e7fa      	b.n	80108a0 <timer_cancel_task+0x48>
 80108aa:	46c0      	nop			; (mov r8, r8)
 80108ac:	200042f8 	.word	0x200042f8
 80108b0:	200042f0 	.word	0x200042f0

080108b4 <timer_cancel_event>:
{
 80108b4:	b510      	push	{r4, lr}
 80108b6:	0004      	movs	r4, r0
    timer_cancel_task(event->f);
 80108b8:	6800      	ldr	r0, [r0, #0]
 80108ba:	f7ff ffcd 	bl	8010858 <timer_cancel_task>
    sched_cancel_task(event->f);
 80108be:	6820      	ldr	r0, [r4, #0]
static inline error_t sched_cancel_task(task_t task) { return sched_cancel_task_with_arg(task, NULL);}
 80108c0:	2100      	movs	r1, #0
 80108c2:	f7fe ff01 	bl	800f6c8 <sched_cancel_task_with_arg>
}
 80108c6:	bd10      	pop	{r4, pc}

080108c8 <timer_get_current_time_difference>:
timer_tick_t timer_get_current_time_difference(timer_tick_t start_time) {
 80108c8:	b510      	push	{r4, lr}
 80108ca:	0004      	movs	r4, r0
    return timer_calculate_difference(start_time, timer_get_counter_value());
 80108cc:	f7ff fd18 	bl	8010300 <timer_get_counter_value>
 80108d0:	0001      	movs	r1, r0
 80108d2:	0020      	movs	r0, r4
 80108d4:	f7ff fd56 	bl	8010384 <timer_calculate_difference>
}
 80108d8:	bd10      	pop	{r4, pc}
	...

080108dc <blockdevice_init>:
 */

#include "hwblockdevice.h"
#include "debug.h"

error_t blockdevice_init(blockdevice_t* bd) {
 80108dc:	b510      	push	{r4, lr}
  assert(bd && bd->driver && bd->driver->init);
 80108de:	2800      	cmp	r0, #0
 80108e0:	d007      	beq.n	80108f2 <blockdevice_init+0x16>
 80108e2:	6803      	ldr	r3, [r0, #0]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d004      	beq.n	80108f2 <blockdevice_init+0x16>
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d001      	beq.n	80108f2 <blockdevice_init+0x16>
  return bd->driver->init(bd);
 80108ee:	4798      	blx	r3
}
 80108f0:	bd10      	pop	{r4, pc}
  assert(bd && bd->driver && bd->driver->init);
 80108f2:	4b03      	ldr	r3, [pc, #12]	; (8010900 <blockdevice_init+0x24>)
 80108f4:	4a03      	ldr	r2, [pc, #12]	; (8010904 <blockdevice_init+0x28>)
 80108f6:	2118      	movs	r1, #24
 80108f8:	4803      	ldr	r0, [pc, #12]	; (8010908 <blockdevice_init+0x2c>)
 80108fa:	f7f7 fe81 	bl	8008600 <__assert_func>
 80108fe:	46c0      	nop			; (mov r8, r8)
 8010900:	0801aaf8 	.word	0x0801aaf8
 8010904:	0801abb4 	.word	0x0801abb4
 8010908:	0801ab20 	.word	0x0801ab20

0801090c <blockdevice_read>:

error_t blockdevice_read(blockdevice_t* bd, uint8_t *data, uint32_t addr, uint32_t size) {
 801090c:	b510      	push	{r4, lr}
  assert(bd && bd->driver && bd->driver->read);
 801090e:	2800      	cmp	r0, #0
 8010910:	d007      	beq.n	8010922 <blockdevice_read+0x16>
 8010912:	6804      	ldr	r4, [r0, #0]
 8010914:	2c00      	cmp	r4, #0
 8010916:	d004      	beq.n	8010922 <blockdevice_read+0x16>
 8010918:	6864      	ldr	r4, [r4, #4]
 801091a:	2c00      	cmp	r4, #0
 801091c:	d001      	beq.n	8010922 <blockdevice_read+0x16>
  return bd->driver->read(bd, data, addr, size);
 801091e:	47a0      	blx	r4
}
 8010920:	bd10      	pop	{r4, pc}
  assert(bd && bd->driver && bd->driver->read);
 8010922:	4b03      	ldr	r3, [pc, #12]	; (8010930 <blockdevice_read+0x24>)
 8010924:	4a03      	ldr	r2, [pc, #12]	; (8010934 <blockdevice_read+0x28>)
 8010926:	211d      	movs	r1, #29
 8010928:	4803      	ldr	r0, [pc, #12]	; (8010938 <blockdevice_read+0x2c>)
 801092a:	f7f7 fe69 	bl	8008600 <__assert_func>
 801092e:	46c0      	nop			; (mov r8, r8)
 8010930:	0801ab64 	.word	0x0801ab64
 8010934:	0801abc8 	.word	0x0801abc8
 8010938:	0801ab20 	.word	0x0801ab20

0801093c <blockdevice_program>:

error_t blockdevice_program(blockdevice_t* bd, const uint8_t* data, uint32_t addr, uint32_t size) {
 801093c:	b510      	push	{r4, lr}
  assert(bd && bd->driver && bd->driver->program);
 801093e:	2800      	cmp	r0, #0
 8010940:	d007      	beq.n	8010952 <blockdevice_program+0x16>
 8010942:	6804      	ldr	r4, [r0, #0]
 8010944:	2c00      	cmp	r4, #0
 8010946:	d004      	beq.n	8010952 <blockdevice_program+0x16>
 8010948:	68a4      	ldr	r4, [r4, #8]
 801094a:	2c00      	cmp	r4, #0
 801094c:	d001      	beq.n	8010952 <blockdevice_program+0x16>
  return bd->driver->program(bd, data, addr, size);
 801094e:	47a0      	blx	r4
}
 8010950:	bd10      	pop	{r4, pc}
  assert(bd && bd->driver && bd->driver->program);
 8010952:	4b03      	ldr	r3, [pc, #12]	; (8010960 <blockdevice_program+0x24>)
 8010954:	4a03      	ldr	r2, [pc, #12]	; (8010964 <blockdevice_program+0x28>)
 8010956:	2122      	movs	r1, #34	; 0x22
 8010958:	4803      	ldr	r0, [pc, #12]	; (8010968 <blockdevice_program+0x2c>)
 801095a:	f7f7 fe51 	bl	8008600 <__assert_func>
 801095e:	46c0      	nop			; (mov r8, r8)
 8010960:	0801ab8c 	.word	0x0801ab8c
 8010964:	0801abdc 	.word	0x0801abdc
 8010968:	0801ab20 	.word	0x0801ab20

0801096c <init>:

static error_t init(blockdevice_t* bd) {
  blockdevice_ram_t* bd_ram = (blockdevice_ram_t*)bd;
  DPRINT("init RAM block device of size %i\n", bd_ram->size);
  return SUCCESS;
}
 801096c:	2000      	movs	r0, #0
 801096e:	4770      	bx	lr

08010970 <program>:
  memcpy((void*)data, bd_ram->buffer + addr, size);

  return SUCCESS;
}

static error_t program(blockdevice_t* bd, const uint8_t* data, uint32_t addr, uint32_t size) {
 8010970:	b570      	push	{r4, r5, r6, lr}
 8010972:	0014      	movs	r4, r2
 8010974:	1e1a      	subs	r2, r3, #0
  blockdevice_ram_t* bd_ram = (blockdevice_ram_t*)bd;
  DPRINT("BD WRITE %i @ %x\n", size, addr);

  if(size == 0) return SUCCESS;
 8010976:	d009      	beq.n	801098c <program+0x1c>
  if(addr + size > bd_ram->base.size) return -ESIZE;
 8010978:	191b      	adds	r3, r3, r4
 801097a:	6845      	ldr	r5, [r0, #4]
 801097c:	42ab      	cmp	r3, r5
 801097e:	d807      	bhi.n	8010990 <program+0x20>

  memcpy(bd_ram->buffer + addr, data, size);
 8010980:	68c0      	ldr	r0, [r0, #12]
 8010982:	1900      	adds	r0, r0, r4
 8010984:	f004 fa24 	bl	8014dd0 <memcpy>

  DPRINT_DATA(data, size);

  return SUCCESS;
 8010988:	2000      	movs	r0, #0
}
 801098a:	bd70      	pop	{r4, r5, r6, pc}
  if(size == 0) return SUCCESS;
 801098c:	2000      	movs	r0, #0
 801098e:	e7fc      	b.n	801098a <program+0x1a>
  if(addr + size > bd_ram->base.size) return -ESIZE;
 8010990:	4800      	ldr	r0, [pc, #0]	; (8010994 <program+0x24>)
 8010992:	e7fa      	b.n	801098a <program+0x1a>
 8010994:	ffffec76 	.word	0xffffec76

08010998 <read>:
static error_t read(blockdevice_t* bd, uint8_t* data, uint32_t addr, uint32_t size) {
 8010998:	b570      	push	{r4, r5, r6, lr}
 801099a:	0005      	movs	r5, r0
 801099c:	0008      	movs	r0, r1
 801099e:	0014      	movs	r4, r2
 80109a0:	1e1a      	subs	r2, r3, #0
  if(size == 0) return SUCCESS;
 80109a2:	d009      	beq.n	80109b8 <read+0x20>
  if(addr + size > bd_ram->base.size) return -ESIZE;
 80109a4:	191b      	adds	r3, r3, r4
 80109a6:	6869      	ldr	r1, [r5, #4]
 80109a8:	428b      	cmp	r3, r1
 80109aa:	d807      	bhi.n	80109bc <read+0x24>
  memcpy((void*)data, bd_ram->buffer + addr, size);
 80109ac:	68e9      	ldr	r1, [r5, #12]
 80109ae:	1909      	adds	r1, r1, r4
 80109b0:	f004 fa0e 	bl	8014dd0 <memcpy>
  return SUCCESS;
 80109b4:	2000      	movs	r0, #0
}
 80109b6:	bd70      	pop	{r4, r5, r6, pc}
  if(size == 0) return SUCCESS;
 80109b8:	2000      	movs	r0, #0
 80109ba:	e7fc      	b.n	80109b6 <read+0x1e>
  if(addr + size > bd_ram->base.size) return -ESIZE;
 80109bc:	4800      	ldr	r0, [pc, #0]	; (80109c0 <read+0x28>)
 80109be:	e7fa      	b.n	80109b6 <read+0x1e>
 80109c0:	ffffec76 	.word	0xffffec76

080109c4 <__ieee754_pow>:
 80109c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109c6:	4657      	mov	r7, sl
 80109c8:	4645      	mov	r5, r8
 80109ca:	46de      	mov	lr, fp
 80109cc:	464e      	mov	r6, r9
 80109ce:	b5e0      	push	{r5, r6, r7, lr}
 80109d0:	005d      	lsls	r5, r3, #1
 80109d2:	086d      	lsrs	r5, r5, #1
 80109d4:	001f      	movs	r7, r3
 80109d6:	4698      	mov	r8, r3
 80109d8:	002b      	movs	r3, r5
 80109da:	b093      	sub	sp, #76	; 0x4c
 80109dc:	4683      	mov	fp, r0
 80109de:	468a      	mov	sl, r1
 80109e0:	0016      	movs	r6, r2
 80109e2:	4313      	orrs	r3, r2
 80109e4:	d036      	beq.n	8010a54 <__ieee754_pow+0x90>
 80109e6:	4b7c      	ldr	r3, [pc, #496]	; (8010bd8 <__ieee754_pow+0x214>)
 80109e8:	004c      	lsls	r4, r1, #1
 80109ea:	9102      	str	r1, [sp, #8]
 80109ec:	4681      	mov	r9, r0
 80109ee:	0864      	lsrs	r4, r4, #1
 80109f0:	429c      	cmp	r4, r3
 80109f2:	dc29      	bgt.n	8010a48 <__ieee754_pow+0x84>
 80109f4:	d03b      	beq.n	8010a6e <__ieee754_pow+0xaa>
 80109f6:	429d      	cmp	r5, r3
 80109f8:	dc26      	bgt.n	8010a48 <__ieee754_pow+0x84>
 80109fa:	4b77      	ldr	r3, [pc, #476]	; (8010bd8 <__ieee754_pow+0x214>)
 80109fc:	429d      	cmp	r5, r3
 80109fe:	d021      	beq.n	8010a44 <__ieee754_pow+0x80>
 8010a00:	2300      	movs	r3, #0
 8010a02:	9304      	str	r3, [sp, #16]
 8010a04:	4653      	mov	r3, sl
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	db3b      	blt.n	8010a82 <__ieee754_pow+0xbe>
 8010a0a:	2a00      	cmp	r2, #0
 8010a0c:	d157      	bne.n	8010abe <__ieee754_pow+0xfa>
 8010a0e:	4b72      	ldr	r3, [pc, #456]	; (8010bd8 <__ieee754_pow+0x214>)
 8010a10:	429d      	cmp	r5, r3
 8010a12:	d100      	bne.n	8010a16 <__ieee754_pow+0x52>
 8010a14:	e0a7      	b.n	8010b66 <__ieee754_pow+0x1a2>
 8010a16:	4b71      	ldr	r3, [pc, #452]	; (8010bdc <__ieee754_pow+0x218>)
 8010a18:	429d      	cmp	r5, r3
 8010a1a:	d100      	bne.n	8010a1e <__ieee754_pow+0x5a>
 8010a1c:	e0b8      	b.n	8010b90 <__ieee754_pow+0x1cc>
 8010a1e:	2380      	movs	r3, #128	; 0x80
 8010a20:	05db      	lsls	r3, r3, #23
 8010a22:	4598      	cmp	r8, r3
 8010a24:	d101      	bne.n	8010a2a <__ieee754_pow+0x66>
 8010a26:	f000 fc84 	bl	8011332 <__ieee754_pow+0x96e>
 8010a2a:	4b6d      	ldr	r3, [pc, #436]	; (8010be0 <__ieee754_pow+0x21c>)
 8010a2c:	4598      	cmp	r8, r3
 8010a2e:	d146      	bne.n	8010abe <__ieee754_pow+0xfa>
 8010a30:	4653      	mov	r3, sl
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	db43      	blt.n	8010abe <__ieee754_pow+0xfa>
 8010a36:	4658      	mov	r0, fp
 8010a38:	4651      	mov	r1, sl
 8010a3a:	f000 fd29 	bl	8011490 <__ieee754_sqrt>
 8010a3e:	9000      	str	r0, [sp, #0]
 8010a40:	9101      	str	r1, [sp, #4]
 8010a42:	e00b      	b.n	8010a5c <__ieee754_pow+0x98>
 8010a44:	2a00      	cmp	r2, #0
 8010a46:	d0db      	beq.n	8010a00 <__ieee754_pow+0x3c>
 8010a48:	4b66      	ldr	r3, [pc, #408]	; (8010be4 <__ieee754_pow+0x220>)
 8010a4a:	469c      	mov	ip, r3
 8010a4c:	465b      	mov	r3, fp
 8010a4e:	4464      	add	r4, ip
 8010a50:	431c      	orrs	r4, r3
 8010a52:	d110      	bne.n	8010a76 <__ieee754_pow+0xb2>
 8010a54:	2300      	movs	r3, #0
 8010a56:	4c61      	ldr	r4, [pc, #388]	; (8010bdc <__ieee754_pow+0x218>)
 8010a58:	9300      	str	r3, [sp, #0]
 8010a5a:	9401      	str	r4, [sp, #4]
 8010a5c:	9800      	ldr	r0, [sp, #0]
 8010a5e:	9901      	ldr	r1, [sp, #4]
 8010a60:	b013      	add	sp, #76	; 0x4c
 8010a62:	bc3c      	pop	{r2, r3, r4, r5}
 8010a64:	4690      	mov	r8, r2
 8010a66:	4699      	mov	r9, r3
 8010a68:	46a2      	mov	sl, r4
 8010a6a:	46ab      	mov	fp, r5
 8010a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a6e:	2800      	cmp	r0, #0
 8010a70:	d101      	bne.n	8010a76 <__ieee754_pow+0xb2>
 8010a72:	42a5      	cmp	r5, r4
 8010a74:	ddc1      	ble.n	80109fa <__ieee754_pow+0x36>
 8010a76:	485c      	ldr	r0, [pc, #368]	; (8010be8 <__ieee754_pow+0x224>)
 8010a78:	f000 fe7e 	bl	8011778 <nan>
 8010a7c:	9000      	str	r0, [sp, #0]
 8010a7e:	9101      	str	r1, [sp, #4]
 8010a80:	e7ec      	b.n	8010a5c <__ieee754_pow+0x98>
 8010a82:	4b5a      	ldr	r3, [pc, #360]	; (8010bec <__ieee754_pow+0x228>)
 8010a84:	429d      	cmp	r5, r3
 8010a86:	dd00      	ble.n	8010a8a <__ieee754_pow+0xc6>
 8010a88:	e094      	b.n	8010bb4 <__ieee754_pow+0x1f0>
 8010a8a:	4b59      	ldr	r3, [pc, #356]	; (8010bf0 <__ieee754_pow+0x22c>)
 8010a8c:	429d      	cmp	r5, r3
 8010a8e:	dd14      	ble.n	8010aba <__ieee754_pow+0xf6>
 8010a90:	4958      	ldr	r1, [pc, #352]	; (8010bf4 <__ieee754_pow+0x230>)
 8010a92:	152b      	asrs	r3, r5, #20
 8010a94:	468c      	mov	ip, r1
 8010a96:	4463      	add	r3, ip
 8010a98:	2b14      	cmp	r3, #20
 8010a9a:	dc01      	bgt.n	8010aa0 <__ieee754_pow+0xdc>
 8010a9c:	f000 fc5a 	bl	8011354 <__ieee754_pow+0x990>
 8010aa0:	2134      	movs	r1, #52	; 0x34
 8010aa2:	1acb      	subs	r3, r1, r3
 8010aa4:	0031      	movs	r1, r6
 8010aa6:	40d9      	lsrs	r1, r3
 8010aa8:	0008      	movs	r0, r1
 8010aaa:	4098      	lsls	r0, r3
 8010aac:	4290      	cmp	r0, r2
 8010aae:	d104      	bne.n	8010aba <__ieee754_pow+0xf6>
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	4019      	ands	r1, r3
 8010ab4:	3301      	adds	r3, #1
 8010ab6:	1a5b      	subs	r3, r3, r1
 8010ab8:	9304      	str	r3, [sp, #16]
 8010aba:	2a00      	cmp	r2, #0
 8010abc:	d0ab      	beq.n	8010a16 <__ieee754_pow+0x52>
 8010abe:	4658      	mov	r0, fp
 8010ac0:	4651      	mov	r1, sl
 8010ac2:	f000 fe4b 	bl	801175c <fabs>
 8010ac6:	464b      	mov	r3, r9
 8010ac8:	9000      	str	r0, [sp, #0]
 8010aca:	9101      	str	r1, [sp, #4]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d12a      	bne.n	8010b26 <__ieee754_pow+0x162>
 8010ad0:	2c00      	cmp	r4, #0
 8010ad2:	d005      	beq.n	8010ae0 <__ieee754_pow+0x11c>
 8010ad4:	4653      	mov	r3, sl
 8010ad6:	4a41      	ldr	r2, [pc, #260]	; (8010bdc <__ieee754_pow+0x218>)
 8010ad8:	009b      	lsls	r3, r3, #2
 8010ada:	089b      	lsrs	r3, r3, #2
 8010adc:	4293      	cmp	r3, r2
 8010ade:	d122      	bne.n	8010b26 <__ieee754_pow+0x162>
 8010ae0:	4643      	mov	r3, r8
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	da07      	bge.n	8010af6 <__ieee754_pow+0x132>
 8010ae6:	9a00      	ldr	r2, [sp, #0]
 8010ae8:	9b01      	ldr	r3, [sp, #4]
 8010aea:	2000      	movs	r0, #0
 8010aec:	493b      	ldr	r1, [pc, #236]	; (8010bdc <__ieee754_pow+0x218>)
 8010aee:	f002 fbff 	bl	80132f0 <__aeabi_ddiv>
 8010af2:	9000      	str	r0, [sp, #0]
 8010af4:	9101      	str	r1, [sp, #4]
 8010af6:	9b02      	ldr	r3, [sp, #8]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	daaf      	bge.n	8010a5c <__ieee754_pow+0x98>
 8010afc:	4b39      	ldr	r3, [pc, #228]	; (8010be4 <__ieee754_pow+0x220>)
 8010afe:	469c      	mov	ip, r3
 8010b00:	9b04      	ldr	r3, [sp, #16]
 8010b02:	4464      	add	r4, ip
 8010b04:	431c      	orrs	r4, r3
 8010b06:	d001      	beq.n	8010b0c <__ieee754_pow+0x148>
 8010b08:	f000 fc96 	bl	8011438 <__ieee754_pow+0xa74>
 8010b0c:	9800      	ldr	r0, [sp, #0]
 8010b0e:	9901      	ldr	r1, [sp, #4]
 8010b10:	0002      	movs	r2, r0
 8010b12:	000b      	movs	r3, r1
 8010b14:	f003 fa5e 	bl	8013fd4 <__aeabi_dsub>
 8010b18:	0002      	movs	r2, r0
 8010b1a:	000b      	movs	r3, r1
 8010b1c:	f002 fbe8 	bl	80132f0 <__aeabi_ddiv>
 8010b20:	9000      	str	r0, [sp, #0]
 8010b22:	9101      	str	r1, [sp, #4]
 8010b24:	e79a      	b.n	8010a5c <__ieee754_pow+0x98>
 8010b26:	4653      	mov	r3, sl
 8010b28:	0fdb      	lsrs	r3, r3, #31
 8010b2a:	3b01      	subs	r3, #1
 8010b2c:	4699      	mov	r9, r3
 8010b2e:	464a      	mov	r2, r9
 8010b30:	9b04      	ldr	r3, [sp, #16]
 8010b32:	4313      	orrs	r3, r2
 8010b34:	d04b      	beq.n	8010bce <__ieee754_pow+0x20a>
 8010b36:	4b30      	ldr	r3, [pc, #192]	; (8010bf8 <__ieee754_pow+0x234>)
 8010b38:	429d      	cmp	r5, r3
 8010b3a:	dd65      	ble.n	8010c08 <__ieee754_pow+0x244>
 8010b3c:	4b2f      	ldr	r3, [pc, #188]	; (8010bfc <__ieee754_pow+0x238>)
 8010b3e:	429d      	cmp	r5, r3
 8010b40:	dc00      	bgt.n	8010b44 <__ieee754_pow+0x180>
 8010b42:	e392      	b.n	801126a <__ieee754_pow+0x8a6>
 8010b44:	4b2a      	ldr	r3, [pc, #168]	; (8010bf0 <__ieee754_pow+0x22c>)
 8010b46:	429c      	cmp	r4, r3
 8010b48:	dc01      	bgt.n	8010b4e <__ieee754_pow+0x18a>
 8010b4a:	f000 fbfc 	bl	8011346 <__ieee754_pow+0x982>
 8010b4e:	4643      	mov	r3, r8
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	dd18      	ble.n	8010b86 <__ieee754_pow+0x1c2>
 8010b54:	4a2a      	ldr	r2, [pc, #168]	; (8010c00 <__ieee754_pow+0x23c>)
 8010b56:	4b2b      	ldr	r3, [pc, #172]	; (8010c04 <__ieee754_pow+0x240>)
 8010b58:	0010      	movs	r0, r2
 8010b5a:	0019      	movs	r1, r3
 8010b5c:	f002 ffce 	bl	8013afc <__aeabi_dmul>
 8010b60:	9000      	str	r0, [sp, #0]
 8010b62:	9101      	str	r1, [sp, #4]
 8010b64:	e77a      	b.n	8010a5c <__ieee754_pow+0x98>
 8010b66:	465a      	mov	r2, fp
 8010b68:	4b1e      	ldr	r3, [pc, #120]	; (8010be4 <__ieee754_pow+0x220>)
 8010b6a:	18e3      	adds	r3, r4, r3
 8010b6c:	4313      	orrs	r3, r2
 8010b6e:	d100      	bne.n	8010b72 <__ieee754_pow+0x1ae>
 8010b70:	e770      	b.n	8010a54 <__ieee754_pow+0x90>
 8010b72:	4b1f      	ldr	r3, [pc, #124]	; (8010bf0 <__ieee754_pow+0x22c>)
 8010b74:	429c      	cmp	r4, r3
 8010b76:	dc00      	bgt.n	8010b7a <__ieee754_pow+0x1b6>
 8010b78:	e36c      	b.n	8011254 <__ieee754_pow+0x890>
 8010b7a:	4643      	mov	r3, r8
 8010b7c:	9600      	str	r6, [sp, #0]
 8010b7e:	9701      	str	r7, [sp, #4]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	db00      	blt.n	8010b86 <__ieee754_pow+0x1c2>
 8010b84:	e76a      	b.n	8010a5c <__ieee754_pow+0x98>
 8010b86:	2300      	movs	r3, #0
 8010b88:	2400      	movs	r4, #0
 8010b8a:	9300      	str	r3, [sp, #0]
 8010b8c:	9401      	str	r4, [sp, #4]
 8010b8e:	e765      	b.n	8010a5c <__ieee754_pow+0x98>
 8010b90:	4652      	mov	r2, sl
 8010b92:	4659      	mov	r1, fp
 8010b94:	4643      	mov	r3, r8
 8010b96:	4658      	mov	r0, fp
 8010b98:	9100      	str	r1, [sp, #0]
 8010b9a:	9201      	str	r2, [sp, #4]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	db00      	blt.n	8010ba2 <__ieee754_pow+0x1de>
 8010ba0:	e75c      	b.n	8010a5c <__ieee754_pow+0x98>
 8010ba2:	0002      	movs	r2, r0
 8010ba4:	4653      	mov	r3, sl
 8010ba6:	2000      	movs	r0, #0
 8010ba8:	490c      	ldr	r1, [pc, #48]	; (8010bdc <__ieee754_pow+0x218>)
 8010baa:	f002 fba1 	bl	80132f0 <__aeabi_ddiv>
 8010bae:	9000      	str	r0, [sp, #0]
 8010bb0:	9101      	str	r1, [sp, #4]
 8010bb2:	e753      	b.n	8010a5c <__ieee754_pow+0x98>
 8010bb4:	2302      	movs	r3, #2
 8010bb6:	9304      	str	r3, [sp, #16]
 8010bb8:	e727      	b.n	8010a0a <__ieee754_pow+0x46>
 8010bba:	4658      	mov	r0, fp
 8010bbc:	4651      	mov	r1, sl
 8010bbe:	f000 fdcd 	bl	801175c <fabs>
 8010bc2:	464b      	mov	r3, r9
 8010bc4:	9000      	str	r0, [sp, #0]
 8010bc6:	9101      	str	r1, [sp, #4]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d100      	bne.n	8010bce <__ieee754_pow+0x20a>
 8010bcc:	e780      	b.n	8010ad0 <__ieee754_pow+0x10c>
 8010bce:	465a      	mov	r2, fp
 8010bd0:	4653      	mov	r3, sl
 8010bd2:	4658      	mov	r0, fp
 8010bd4:	4651      	mov	r1, sl
 8010bd6:	e79d      	b.n	8010b14 <__ieee754_pow+0x150>
 8010bd8:	7ff00000 	.word	0x7ff00000
 8010bdc:	3ff00000 	.word	0x3ff00000
 8010be0:	3fe00000 	.word	0x3fe00000
 8010be4:	c0100000 	.word	0xc0100000
 8010be8:	080196c0 	.word	0x080196c0
 8010bec:	433fffff 	.word	0x433fffff
 8010bf0:	3fefffff 	.word	0x3fefffff
 8010bf4:	fffffc01 	.word	0xfffffc01
 8010bf8:	41e00000 	.word	0x41e00000
 8010bfc:	43f00000 	.word	0x43f00000
 8010c00:	8800759c 	.word	0x8800759c
 8010c04:	7e37e43c 	.word	0x7e37e43c
 8010c08:	4651      	mov	r1, sl
 8010c0a:	4be3      	ldr	r3, [pc, #908]	; (8010f98 <__ieee754_pow+0x5d4>)
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	420b      	tst	r3, r1
 8010c10:	d10a      	bne.n	8010c28 <__ieee754_pow+0x264>
 8010c12:	9800      	ldr	r0, [sp, #0]
 8010c14:	9901      	ldr	r1, [sp, #4]
 8010c16:	2200      	movs	r2, #0
 8010c18:	4be0      	ldr	r3, [pc, #896]	; (8010f9c <__ieee754_pow+0x5d8>)
 8010c1a:	f002 ff6f 	bl	8013afc <__aeabi_dmul>
 8010c1e:	2235      	movs	r2, #53	; 0x35
 8010c20:	000c      	movs	r4, r1
 8010c22:	9000      	str	r0, [sp, #0]
 8010c24:	9101      	str	r1, [sp, #4]
 8010c26:	4252      	negs	r2, r2
 8010c28:	49dd      	ldr	r1, [pc, #884]	; (8010fa0 <__ieee754_pow+0x5dc>)
 8010c2a:	1523      	asrs	r3, r4, #20
 8010c2c:	468c      	mov	ip, r1
 8010c2e:	4463      	add	r3, ip
 8010c30:	4698      	mov	r8, r3
 8010c32:	0324      	lsls	r4, r4, #12
 8010c34:	4ddb      	ldr	r5, [pc, #876]	; (8010fa4 <__ieee754_pow+0x5e0>)
 8010c36:	4bdc      	ldr	r3, [pc, #880]	; (8010fa8 <__ieee754_pow+0x5e4>)
 8010c38:	0b24      	lsrs	r4, r4, #12
 8010c3a:	4490      	add	r8, r2
 8010c3c:	4325      	orrs	r5, r4
 8010c3e:	429c      	cmp	r4, r3
 8010c40:	dd0a      	ble.n	8010c58 <__ieee754_pow+0x294>
 8010c42:	4bda      	ldr	r3, [pc, #872]	; (8010fac <__ieee754_pow+0x5e8>)
 8010c44:	429c      	cmp	r4, r3
 8010c46:	dc01      	bgt.n	8010c4c <__ieee754_pow+0x288>
 8010c48:	f000 fc05 	bl	8011456 <__ieee754_pow+0xa92>
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	469c      	mov	ip, r3
 8010c50:	4bd7      	ldr	r3, [pc, #860]	; (8010fb0 <__ieee754_pow+0x5ec>)
 8010c52:	44e0      	add	r8, ip
 8010c54:	469c      	mov	ip, r3
 8010c56:	4465      	add	r5, ip
 8010c58:	2300      	movs	r3, #0
 8010c5a:	2400      	movs	r4, #0
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	930e      	str	r3, [sp, #56]	; 0x38
 8010c60:	940f      	str	r4, [sp, #60]	; 0x3c
 8010c62:	9310      	str	r3, [sp, #64]	; 0x40
 8010c64:	9411      	str	r4, [sp, #68]	; 0x44
 8010c66:	2400      	movs	r4, #0
 8010c68:	4bce      	ldr	r3, [pc, #824]	; (8010fa4 <__ieee754_pow+0x5e0>)
 8010c6a:	9206      	str	r2, [sp, #24]
 8010c6c:	9307      	str	r3, [sp, #28]
 8010c6e:	9800      	ldr	r0, [sp, #0]
 8010c70:	9901      	ldr	r1, [sp, #4]
 8010c72:	9a06      	ldr	r2, [sp, #24]
 8010c74:	9b07      	ldr	r3, [sp, #28]
 8010c76:	0029      	movs	r1, r5
 8010c78:	9008      	str	r0, [sp, #32]
 8010c7a:	9109      	str	r1, [sp, #36]	; 0x24
 8010c7c:	f003 f9aa 	bl	8013fd4 <__aeabi_dsub>
 8010c80:	9a06      	ldr	r2, [sp, #24]
 8010c82:	9b07      	ldr	r3, [sp, #28]
 8010c84:	900a      	str	r0, [sp, #40]	; 0x28
 8010c86:	910b      	str	r1, [sp, #44]	; 0x2c
 8010c88:	9808      	ldr	r0, [sp, #32]
 8010c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c8c:	f001 ffc6 	bl	8012c1c <__aeabi_dadd>
 8010c90:	0002      	movs	r2, r0
 8010c92:	000b      	movs	r3, r1
 8010c94:	2000      	movs	r0, #0
 8010c96:	49c3      	ldr	r1, [pc, #780]	; (8010fa4 <__ieee754_pow+0x5e0>)
 8010c98:	f002 fb2a 	bl	80132f0 <__aeabi_ddiv>
 8010c9c:	000a      	movs	r2, r1
 8010c9e:	0001      	movs	r1, r0
 8010ca0:	0013      	movs	r3, r2
 8010ca2:	910c      	str	r1, [sp, #48]	; 0x30
 8010ca4:	920d      	str	r2, [sp, #52]	; 0x34
 8010ca6:	0002      	movs	r2, r0
 8010ca8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010caa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010cac:	f002 ff26 	bl	8013afc <__aeabi_dmul>
 8010cb0:	000a      	movs	r2, r1
 8010cb2:	0001      	movs	r1, r0
 8010cb4:	9102      	str	r1, [sp, #8]
 8010cb6:	9203      	str	r2, [sp, #12]
 8010cb8:	1069      	asrs	r1, r5, #1
 8010cba:	2580      	movs	r5, #128	; 0x80
 8010cbc:	05ad      	lsls	r5, r5, #22
 8010cbe:	430d      	orrs	r5, r1
 8010cc0:	2180      	movs	r1, #128	; 0x80
 8010cc2:	0013      	movs	r3, r2
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	0309      	lsls	r1, r1, #12
 8010cc8:	468c      	mov	ip, r1
 8010cca:	9200      	str	r2, [sp, #0]
 8010ccc:	9301      	str	r3, [sp, #4]
 8010cce:	9800      	ldr	r0, [sp, #0]
 8010cd0:	9901      	ldr	r1, [sp, #4]
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	4465      	add	r5, ip
 8010cd6:	192b      	adds	r3, r5, r4
 8010cd8:	001d      	movs	r5, r3
 8010cda:	0014      	movs	r4, r2
 8010cdc:	f002 ff0e 	bl	8013afc <__aeabi_dmul>
 8010ce0:	0002      	movs	r2, r0
 8010ce2:	000b      	movs	r3, r1
 8010ce4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010ce6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010ce8:	f003 f974 	bl	8013fd4 <__aeabi_dsub>
 8010cec:	9a06      	ldr	r2, [sp, #24]
 8010cee:	9b07      	ldr	r3, [sp, #28]
 8010cf0:	900a      	str	r0, [sp, #40]	; 0x28
 8010cf2:	910b      	str	r1, [sp, #44]	; 0x2c
 8010cf4:	0020      	movs	r0, r4
 8010cf6:	0029      	movs	r1, r5
 8010cf8:	f003 f96c 	bl	8013fd4 <__aeabi_dsub>
 8010cfc:	0002      	movs	r2, r0
 8010cfe:	000b      	movs	r3, r1
 8010d00:	9808      	ldr	r0, [sp, #32]
 8010d02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d04:	f003 f966 	bl	8013fd4 <__aeabi_dsub>
 8010d08:	9a00      	ldr	r2, [sp, #0]
 8010d0a:	9b01      	ldr	r3, [sp, #4]
 8010d0c:	f002 fef6 	bl	8013afc <__aeabi_dmul>
 8010d10:	0002      	movs	r2, r0
 8010d12:	000b      	movs	r3, r1
 8010d14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010d16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010d18:	f003 f95c 	bl	8013fd4 <__aeabi_dsub>
 8010d1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d20:	f002 feec 	bl	8013afc <__aeabi_dmul>
 8010d24:	9c02      	ldr	r4, [sp, #8]
 8010d26:	9d03      	ldr	r5, [sp, #12]
 8010d28:	9008      	str	r0, [sp, #32]
 8010d2a:	9109      	str	r1, [sp, #36]	; 0x24
 8010d2c:	0022      	movs	r2, r4
 8010d2e:	002b      	movs	r3, r5
 8010d30:	0020      	movs	r0, r4
 8010d32:	0029      	movs	r1, r5
 8010d34:	f002 fee2 	bl	8013afc <__aeabi_dmul>
 8010d38:	0004      	movs	r4, r0
 8010d3a:	000d      	movs	r5, r1
 8010d3c:	4a9d      	ldr	r2, [pc, #628]	; (8010fb4 <__ieee754_pow+0x5f0>)
 8010d3e:	4b9e      	ldr	r3, [pc, #632]	; (8010fb8 <__ieee754_pow+0x5f4>)
 8010d40:	f002 fedc 	bl	8013afc <__aeabi_dmul>
 8010d44:	4a9d      	ldr	r2, [pc, #628]	; (8010fbc <__ieee754_pow+0x5f8>)
 8010d46:	4b9e      	ldr	r3, [pc, #632]	; (8010fc0 <__ieee754_pow+0x5fc>)
 8010d48:	f001 ff68 	bl	8012c1c <__aeabi_dadd>
 8010d4c:	0022      	movs	r2, r4
 8010d4e:	002b      	movs	r3, r5
 8010d50:	f002 fed4 	bl	8013afc <__aeabi_dmul>
 8010d54:	4a9b      	ldr	r2, [pc, #620]	; (8010fc4 <__ieee754_pow+0x600>)
 8010d56:	4b9c      	ldr	r3, [pc, #624]	; (8010fc8 <__ieee754_pow+0x604>)
 8010d58:	f001 ff60 	bl	8012c1c <__aeabi_dadd>
 8010d5c:	0022      	movs	r2, r4
 8010d5e:	002b      	movs	r3, r5
 8010d60:	f002 fecc 	bl	8013afc <__aeabi_dmul>
 8010d64:	4a99      	ldr	r2, [pc, #612]	; (8010fcc <__ieee754_pow+0x608>)
 8010d66:	4b9a      	ldr	r3, [pc, #616]	; (8010fd0 <__ieee754_pow+0x60c>)
 8010d68:	f001 ff58 	bl	8012c1c <__aeabi_dadd>
 8010d6c:	0022      	movs	r2, r4
 8010d6e:	002b      	movs	r3, r5
 8010d70:	f002 fec4 	bl	8013afc <__aeabi_dmul>
 8010d74:	4a97      	ldr	r2, [pc, #604]	; (8010fd4 <__ieee754_pow+0x610>)
 8010d76:	4b98      	ldr	r3, [pc, #608]	; (8010fd8 <__ieee754_pow+0x614>)
 8010d78:	f001 ff50 	bl	8012c1c <__aeabi_dadd>
 8010d7c:	0022      	movs	r2, r4
 8010d7e:	002b      	movs	r3, r5
 8010d80:	f002 febc 	bl	8013afc <__aeabi_dmul>
 8010d84:	4a95      	ldr	r2, [pc, #596]	; (8010fdc <__ieee754_pow+0x618>)
 8010d86:	4b96      	ldr	r3, [pc, #600]	; (8010fe0 <__ieee754_pow+0x61c>)
 8010d88:	f001 ff48 	bl	8012c1c <__aeabi_dadd>
 8010d8c:	0022      	movs	r2, r4
 8010d8e:	9006      	str	r0, [sp, #24]
 8010d90:	9107      	str	r1, [sp, #28]
 8010d92:	002b      	movs	r3, r5
 8010d94:	0020      	movs	r0, r4
 8010d96:	0029      	movs	r1, r5
 8010d98:	f002 feb0 	bl	8013afc <__aeabi_dmul>
 8010d9c:	0002      	movs	r2, r0
 8010d9e:	000b      	movs	r3, r1
 8010da0:	9806      	ldr	r0, [sp, #24]
 8010da2:	9907      	ldr	r1, [sp, #28]
 8010da4:	f002 feaa 	bl	8013afc <__aeabi_dmul>
 8010da8:	9a00      	ldr	r2, [sp, #0]
 8010daa:	9b01      	ldr	r3, [sp, #4]
 8010dac:	0004      	movs	r4, r0
 8010dae:	000d      	movs	r5, r1
 8010db0:	9802      	ldr	r0, [sp, #8]
 8010db2:	9903      	ldr	r1, [sp, #12]
 8010db4:	f001 ff32 	bl	8012c1c <__aeabi_dadd>
 8010db8:	9a08      	ldr	r2, [sp, #32]
 8010dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dbc:	f002 fe9e 	bl	8013afc <__aeabi_dmul>
 8010dc0:	0022      	movs	r2, r4
 8010dc2:	002b      	movs	r3, r5
 8010dc4:	f001 ff2a 	bl	8012c1c <__aeabi_dadd>
 8010dc8:	9c00      	ldr	r4, [sp, #0]
 8010dca:	9d01      	ldr	r5, [sp, #4]
 8010dcc:	900a      	str	r0, [sp, #40]	; 0x28
 8010dce:	910b      	str	r1, [sp, #44]	; 0x2c
 8010dd0:	0022      	movs	r2, r4
 8010dd2:	002b      	movs	r3, r5
 8010dd4:	0020      	movs	r0, r4
 8010dd6:	0029      	movs	r1, r5
 8010dd8:	f002 fe90 	bl	8013afc <__aeabi_dmul>
 8010ddc:	2200      	movs	r2, #0
 8010dde:	4b81      	ldr	r3, [pc, #516]	; (8010fe4 <__ieee754_pow+0x620>)
 8010de0:	0004      	movs	r4, r0
 8010de2:	000d      	movs	r5, r1
 8010de4:	f001 ff1a 	bl	8012c1c <__aeabi_dadd>
 8010de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010dec:	f001 ff16 	bl	8012c1c <__aeabi_dadd>
 8010df0:	2200      	movs	r2, #0
 8010df2:	000b      	movs	r3, r1
 8010df4:	0011      	movs	r1, r2
 8010df6:	001a      	movs	r2, r3
 8010df8:	9106      	str	r1, [sp, #24]
 8010dfa:	9207      	str	r2, [sp, #28]
 8010dfc:	000a      	movs	r2, r1
 8010dfe:	9800      	ldr	r0, [sp, #0]
 8010e00:	9901      	ldr	r1, [sp, #4]
 8010e02:	f002 fe7b 	bl	8013afc <__aeabi_dmul>
 8010e06:	2200      	movs	r2, #0
 8010e08:	900c      	str	r0, [sp, #48]	; 0x30
 8010e0a:	910d      	str	r1, [sp, #52]	; 0x34
 8010e0c:	9806      	ldr	r0, [sp, #24]
 8010e0e:	9907      	ldr	r1, [sp, #28]
 8010e10:	4b74      	ldr	r3, [pc, #464]	; (8010fe4 <__ieee754_pow+0x620>)
 8010e12:	f003 f8df 	bl	8013fd4 <__aeabi_dsub>
 8010e16:	0022      	movs	r2, r4
 8010e18:	002b      	movs	r3, r5
 8010e1a:	f003 f8db 	bl	8013fd4 <__aeabi_dsub>
 8010e1e:	0002      	movs	r2, r0
 8010e20:	000b      	movs	r3, r1
 8010e22:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010e24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010e26:	f003 f8d5 	bl	8013fd4 <__aeabi_dsub>
 8010e2a:	9a02      	ldr	r2, [sp, #8]
 8010e2c:	9b03      	ldr	r3, [sp, #12]
 8010e2e:	f002 fe65 	bl	8013afc <__aeabi_dmul>
 8010e32:	9a06      	ldr	r2, [sp, #24]
 8010e34:	9b07      	ldr	r3, [sp, #28]
 8010e36:	0004      	movs	r4, r0
 8010e38:	000d      	movs	r5, r1
 8010e3a:	9808      	ldr	r0, [sp, #32]
 8010e3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010e3e:	f002 fe5d 	bl	8013afc <__aeabi_dmul>
 8010e42:	0002      	movs	r2, r0
 8010e44:	000b      	movs	r3, r1
 8010e46:	0020      	movs	r0, r4
 8010e48:	0029      	movs	r1, r5
 8010e4a:	f001 fee7 	bl	8012c1c <__aeabi_dadd>
 8010e4e:	0004      	movs	r4, r0
 8010e50:	000d      	movs	r5, r1
 8010e52:	0002      	movs	r2, r0
 8010e54:	000b      	movs	r3, r1
 8010e56:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010e58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010e5a:	f001 fedf 	bl	8012c1c <__aeabi_dadd>
 8010e5e:	2200      	movs	r2, #0
 8010e60:	0010      	movs	r0, r2
 8010e62:	22e0      	movs	r2, #224	; 0xe0
 8010e64:	4b60      	ldr	r3, [pc, #384]	; (8010fe8 <__ieee754_pow+0x624>)
 8010e66:	0612      	lsls	r2, r2, #24
 8010e68:	9000      	str	r0, [sp, #0]
 8010e6a:	9101      	str	r1, [sp, #4]
 8010e6c:	f002 fe46 	bl	8013afc <__aeabi_dmul>
 8010e70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e74:	9002      	str	r0, [sp, #8]
 8010e76:	9103      	str	r1, [sp, #12]
 8010e78:	9800      	ldr	r0, [sp, #0]
 8010e7a:	9901      	ldr	r1, [sp, #4]
 8010e7c:	f003 f8aa 	bl	8013fd4 <__aeabi_dsub>
 8010e80:	0002      	movs	r2, r0
 8010e82:	000b      	movs	r3, r1
 8010e84:	0020      	movs	r0, r4
 8010e86:	0029      	movs	r1, r5
 8010e88:	f003 f8a4 	bl	8013fd4 <__aeabi_dsub>
 8010e8c:	4a57      	ldr	r2, [pc, #348]	; (8010fec <__ieee754_pow+0x628>)
 8010e8e:	4b56      	ldr	r3, [pc, #344]	; (8010fe8 <__ieee754_pow+0x624>)
 8010e90:	f002 fe34 	bl	8013afc <__aeabi_dmul>
 8010e94:	4a56      	ldr	r2, [pc, #344]	; (8010ff0 <__ieee754_pow+0x62c>)
 8010e96:	0004      	movs	r4, r0
 8010e98:	000d      	movs	r5, r1
 8010e9a:	9800      	ldr	r0, [sp, #0]
 8010e9c:	9901      	ldr	r1, [sp, #4]
 8010e9e:	4b55      	ldr	r3, [pc, #340]	; (8010ff4 <__ieee754_pow+0x630>)
 8010ea0:	f002 fe2c 	bl	8013afc <__aeabi_dmul>
 8010ea4:	0002      	movs	r2, r0
 8010ea6:	000b      	movs	r3, r1
 8010ea8:	0020      	movs	r0, r4
 8010eaa:	0029      	movs	r1, r5
 8010eac:	f001 feb6 	bl	8012c1c <__aeabi_dadd>
 8010eb0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010eb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010eb4:	f001 feb2 	bl	8012c1c <__aeabi_dadd>
 8010eb8:	9006      	str	r0, [sp, #24]
 8010eba:	9107      	str	r1, [sp, #28]
 8010ebc:	4640      	mov	r0, r8
 8010ebe:	f003 fc6f 	bl	80147a0 <__aeabi_i2d>
 8010ec2:	9a06      	ldr	r2, [sp, #24]
 8010ec4:	9b07      	ldr	r3, [sp, #28]
 8010ec6:	0004      	movs	r4, r0
 8010ec8:	000d      	movs	r5, r1
 8010eca:	9802      	ldr	r0, [sp, #8]
 8010ecc:	9903      	ldr	r1, [sp, #12]
 8010ece:	f001 fea5 	bl	8012c1c <__aeabi_dadd>
 8010ed2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010ed6:	f001 fea1 	bl	8012c1c <__aeabi_dadd>
 8010eda:	0022      	movs	r2, r4
 8010edc:	002b      	movs	r3, r5
 8010ede:	f001 fe9d 	bl	8012c1c <__aeabi_dadd>
 8010ee2:	2000      	movs	r0, #0
 8010ee4:	0022      	movs	r2, r4
 8010ee6:	002b      	movs	r3, r5
 8010ee8:	9000      	str	r0, [sp, #0]
 8010eea:	9101      	str	r1, [sp, #4]
 8010eec:	f003 f872 	bl	8013fd4 <__aeabi_dsub>
 8010ef0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010ef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010ef4:	f003 f86e 	bl	8013fd4 <__aeabi_dsub>
 8010ef8:	9a02      	ldr	r2, [sp, #8]
 8010efa:	9b03      	ldr	r3, [sp, #12]
 8010efc:	f003 f86a 	bl	8013fd4 <__aeabi_dsub>
 8010f00:	0002      	movs	r2, r0
 8010f02:	000b      	movs	r3, r1
 8010f04:	9806      	ldr	r0, [sp, #24]
 8010f06:	9907      	ldr	r1, [sp, #28]
 8010f08:	f003 f864 	bl	8013fd4 <__aeabi_dsub>
 8010f0c:	9002      	str	r0, [sp, #8]
 8010f0e:	9103      	str	r1, [sp, #12]
 8010f10:	464a      	mov	r2, r9
 8010f12:	9b04      	ldr	r3, [sp, #16]
 8010f14:	3b01      	subs	r3, #1
 8010f16:	4313      	orrs	r3, r2
 8010f18:	d000      	beq.n	8010f1c <__ieee754_pow+0x558>
 8010f1a:	e196      	b.n	801124a <__ieee754_pow+0x886>
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	4c36      	ldr	r4, [pc, #216]	; (8010ff8 <__ieee754_pow+0x634>)
 8010f20:	9306      	str	r3, [sp, #24]
 8010f22:	9407      	str	r4, [sp, #28]
 8010f24:	2200      	movs	r2, #0
 8010f26:	003b      	movs	r3, r7
 8010f28:	0030      	movs	r0, r6
 8010f2a:	0039      	movs	r1, r7
 8010f2c:	0014      	movs	r4, r2
 8010f2e:	f003 f851 	bl	8013fd4 <__aeabi_dsub>
 8010f32:	9a00      	ldr	r2, [sp, #0]
 8010f34:	9b01      	ldr	r3, [sp, #4]
 8010f36:	f002 fde1 	bl	8013afc <__aeabi_dmul>
 8010f3a:	0032      	movs	r2, r6
 8010f3c:	003b      	movs	r3, r7
 8010f3e:	9004      	str	r0, [sp, #16]
 8010f40:	9105      	str	r1, [sp, #20]
 8010f42:	9802      	ldr	r0, [sp, #8]
 8010f44:	9903      	ldr	r1, [sp, #12]
 8010f46:	f002 fdd9 	bl	8013afc <__aeabi_dmul>
 8010f4a:	0002      	movs	r2, r0
 8010f4c:	000b      	movs	r3, r1
 8010f4e:	9804      	ldr	r0, [sp, #16]
 8010f50:	9905      	ldr	r1, [sp, #20]
 8010f52:	f001 fe63 	bl	8012c1c <__aeabi_dadd>
 8010f56:	003d      	movs	r5, r7
 8010f58:	0006      	movs	r6, r0
 8010f5a:	000f      	movs	r7, r1
 8010f5c:	9800      	ldr	r0, [sp, #0]
 8010f5e:	9901      	ldr	r1, [sp, #4]
 8010f60:	0022      	movs	r2, r4
 8010f62:	002b      	movs	r3, r5
 8010f64:	9602      	str	r6, [sp, #8]
 8010f66:	9703      	str	r7, [sp, #12]
 8010f68:	f002 fdc8 	bl	8013afc <__aeabi_dmul>
 8010f6c:	0002      	movs	r2, r0
 8010f6e:	000b      	movs	r3, r1
 8010f70:	0030      	movs	r0, r6
 8010f72:	0039      	movs	r1, r7
 8010f74:	9200      	str	r2, [sp, #0]
 8010f76:	9301      	str	r3, [sp, #4]
 8010f78:	f001 fe50 	bl	8012c1c <__aeabi_dadd>
 8010f7c:	4b1f      	ldr	r3, [pc, #124]	; (8010ffc <__ieee754_pow+0x638>)
 8010f7e:	0004      	movs	r4, r0
 8010f80:	000d      	movs	r5, r1
 8010f82:	468a      	mov	sl, r1
 8010f84:	0002      	movs	r2, r0
 8010f86:	4299      	cmp	r1, r3
 8010f88:	dc00      	bgt.n	8010f8c <__ieee754_pow+0x5c8>
 8010f8a:	e139      	b.n	8011200 <__ieee754_pow+0x83c>
 8010f8c:	4b1c      	ldr	r3, [pc, #112]	; (8011000 <__ieee754_pow+0x63c>)
 8010f8e:	18cb      	adds	r3, r1, r3
 8010f90:	4303      	orrs	r3, r0
 8010f92:	d000      	beq.n	8010f96 <__ieee754_pow+0x5d2>
 8010f94:	e1fc      	b.n	8011390 <__ieee754_pow+0x9cc>
 8010f96:	e035      	b.n	8011004 <__ieee754_pow+0x640>
 8010f98:	7ff00000 	.word	0x7ff00000
 8010f9c:	43400000 	.word	0x43400000
 8010fa0:	fffffc01 	.word	0xfffffc01
 8010fa4:	3ff00000 	.word	0x3ff00000
 8010fa8:	0003988e 	.word	0x0003988e
 8010fac:	000bb679 	.word	0x000bb679
 8010fb0:	fff00000 	.word	0xfff00000
 8010fb4:	4a454eef 	.word	0x4a454eef
 8010fb8:	3fca7e28 	.word	0x3fca7e28
 8010fbc:	93c9db65 	.word	0x93c9db65
 8010fc0:	3fcd864a 	.word	0x3fcd864a
 8010fc4:	a91d4101 	.word	0xa91d4101
 8010fc8:	3fd17460 	.word	0x3fd17460
 8010fcc:	518f264d 	.word	0x518f264d
 8010fd0:	3fd55555 	.word	0x3fd55555
 8010fd4:	db6fabff 	.word	0xdb6fabff
 8010fd8:	3fdb6db6 	.word	0x3fdb6db6
 8010fdc:	33333303 	.word	0x33333303
 8010fe0:	3fe33333 	.word	0x3fe33333
 8010fe4:	40080000 	.word	0x40080000
 8010fe8:	3feec709 	.word	0x3feec709
 8010fec:	dc3a03fd 	.word	0xdc3a03fd
 8010ff0:	145b01f5 	.word	0x145b01f5
 8010ff4:	be3e2fe0 	.word	0xbe3e2fe0
 8010ff8:	bff00000 	.word	0xbff00000
 8010ffc:	408fffff 	.word	0x408fffff
 8011000:	bf700000 	.word	0xbf700000
 8011004:	9802      	ldr	r0, [sp, #8]
 8011006:	9903      	ldr	r1, [sp, #12]
 8011008:	4ae8      	ldr	r2, [pc, #928]	; (80113ac <__ieee754_pow+0x9e8>)
 801100a:	4be9      	ldr	r3, [pc, #932]	; (80113b0 <__ieee754_pow+0x9ec>)
 801100c:	f001 fe06 	bl	8012c1c <__aeabi_dadd>
 8011010:	9a00      	ldr	r2, [sp, #0]
 8011012:	9b01      	ldr	r3, [sp, #4]
 8011014:	0006      	movs	r6, r0
 8011016:	000f      	movs	r7, r1
 8011018:	0020      	movs	r0, r4
 801101a:	0029      	movs	r1, r5
 801101c:	f002 ffda 	bl	8013fd4 <__aeabi_dsub>
 8011020:	0002      	movs	r2, r0
 8011022:	000b      	movs	r3, r1
 8011024:	0030      	movs	r0, r6
 8011026:	0039      	movs	r1, r7
 8011028:	f000 ff12 	bl	8011e50 <__aeabi_dcmpgt>
 801102c:	2800      	cmp	r0, #0
 801102e:	d000      	beq.n	8011032 <__ieee754_pow+0x66e>
 8011030:	e1ae      	b.n	8011390 <__ieee754_pow+0x9cc>
 8011032:	4653      	mov	r3, sl
 8011034:	005b      	lsls	r3, r3, #1
 8011036:	0d5b      	lsrs	r3, r3, #21
 8011038:	4ade      	ldr	r2, [pc, #888]	; (80113b4 <__ieee754_pow+0x9f0>)
 801103a:	4ddf      	ldr	r5, [pc, #892]	; (80113b8 <__ieee754_pow+0x9f4>)
 801103c:	4694      	mov	ip, r2
 801103e:	2280      	movs	r2, #128	; 0x80
 8011040:	0352      	lsls	r2, r2, #13
 8011042:	0011      	movs	r1, r2
 8011044:	4463      	add	r3, ip
 8011046:	4119      	asrs	r1, r3
 8011048:	000b      	movs	r3, r1
 801104a:	49dc      	ldr	r1, [pc, #880]	; (80113bc <__ieee754_pow+0x9f8>)
 801104c:	4453      	add	r3, sl
 801104e:	005c      	lsls	r4, r3, #1
 8011050:	001e      	movs	r6, r3
 8011052:	031b      	lsls	r3, r3, #12
 8011054:	468c      	mov	ip, r1
 8011056:	0b1b      	lsrs	r3, r3, #12
 8011058:	4313      	orrs	r3, r2
 801105a:	2214      	movs	r2, #20
 801105c:	0d64      	lsrs	r4, r4, #21
 801105e:	4464      	add	r4, ip
 8011060:	4125      	asrs	r5, r4
 8011062:	1b14      	subs	r4, r2, r4
 8011064:	4123      	asrs	r3, r4
 8011066:	4699      	mov	r9, r3
 8011068:	4653      	mov	r3, sl
 801106a:	43ae      	bics	r6, r5
 801106c:	2000      	movs	r0, #0
 801106e:	0031      	movs	r1, r6
 8011070:	2b00      	cmp	r3, #0
 8011072:	da02      	bge.n	801107a <__ieee754_pow+0x6b6>
 8011074:	464b      	mov	r3, r9
 8011076:	425b      	negs	r3, r3
 8011078:	4699      	mov	r9, r3
 801107a:	0002      	movs	r2, r0
 801107c:	000b      	movs	r3, r1
 801107e:	9800      	ldr	r0, [sp, #0]
 8011080:	9901      	ldr	r1, [sp, #4]
 8011082:	f002 ffa7 	bl	8013fd4 <__aeabi_dsub>
 8011086:	464b      	mov	r3, r9
 8011088:	051b      	lsls	r3, r3, #20
 801108a:	9000      	str	r0, [sp, #0]
 801108c:	9101      	str	r1, [sp, #4]
 801108e:	0002      	movs	r2, r0
 8011090:	4698      	mov	r8, r3
 8011092:	000b      	movs	r3, r1
 8011094:	9802      	ldr	r0, [sp, #8]
 8011096:	9903      	ldr	r1, [sp, #12]
 8011098:	f001 fdc0 	bl	8012c1c <__aeabi_dadd>
 801109c:	000d      	movs	r5, r1
 801109e:	2400      	movs	r4, #0
 80110a0:	2200      	movs	r2, #0
 80110a2:	4bc7      	ldr	r3, [pc, #796]	; (80113c0 <__ieee754_pow+0x9fc>)
 80110a4:	0020      	movs	r0, r4
 80110a6:	0029      	movs	r1, r5
 80110a8:	f002 fd28 	bl	8013afc <__aeabi_dmul>
 80110ac:	9a00      	ldr	r2, [sp, #0]
 80110ae:	9b01      	ldr	r3, [sp, #4]
 80110b0:	9004      	str	r0, [sp, #16]
 80110b2:	9105      	str	r1, [sp, #20]
 80110b4:	0020      	movs	r0, r4
 80110b6:	0029      	movs	r1, r5
 80110b8:	f002 ff8c 	bl	8013fd4 <__aeabi_dsub>
 80110bc:	0002      	movs	r2, r0
 80110be:	000b      	movs	r3, r1
 80110c0:	9802      	ldr	r0, [sp, #8]
 80110c2:	9903      	ldr	r1, [sp, #12]
 80110c4:	f002 ff86 	bl	8013fd4 <__aeabi_dsub>
 80110c8:	4abe      	ldr	r2, [pc, #760]	; (80113c4 <__ieee754_pow+0xa00>)
 80110ca:	4bbf      	ldr	r3, [pc, #764]	; (80113c8 <__ieee754_pow+0xa04>)
 80110cc:	f002 fd16 	bl	8013afc <__aeabi_dmul>
 80110d0:	4abe      	ldr	r2, [pc, #760]	; (80113cc <__ieee754_pow+0xa08>)
 80110d2:	0006      	movs	r6, r0
 80110d4:	000f      	movs	r7, r1
 80110d6:	4bbe      	ldr	r3, [pc, #760]	; (80113d0 <__ieee754_pow+0xa0c>)
 80110d8:	0020      	movs	r0, r4
 80110da:	0029      	movs	r1, r5
 80110dc:	f002 fd0e 	bl	8013afc <__aeabi_dmul>
 80110e0:	0002      	movs	r2, r0
 80110e2:	000b      	movs	r3, r1
 80110e4:	0030      	movs	r0, r6
 80110e6:	0039      	movs	r1, r7
 80110e8:	f001 fd98 	bl	8012c1c <__aeabi_dadd>
 80110ec:	0004      	movs	r4, r0
 80110ee:	000d      	movs	r5, r1
 80110f0:	0002      	movs	r2, r0
 80110f2:	000b      	movs	r3, r1
 80110f4:	9804      	ldr	r0, [sp, #16]
 80110f6:	9905      	ldr	r1, [sp, #20]
 80110f8:	f001 fd90 	bl	8012c1c <__aeabi_dadd>
 80110fc:	9a04      	ldr	r2, [sp, #16]
 80110fe:	9b05      	ldr	r3, [sp, #20]
 8011100:	0006      	movs	r6, r0
 8011102:	000f      	movs	r7, r1
 8011104:	f002 ff66 	bl	8013fd4 <__aeabi_dsub>
 8011108:	0002      	movs	r2, r0
 801110a:	000b      	movs	r3, r1
 801110c:	0020      	movs	r0, r4
 801110e:	0029      	movs	r1, r5
 8011110:	f002 ff60 	bl	8013fd4 <__aeabi_dsub>
 8011114:	0032      	movs	r2, r6
 8011116:	9000      	str	r0, [sp, #0]
 8011118:	9101      	str	r1, [sp, #4]
 801111a:	003b      	movs	r3, r7
 801111c:	0030      	movs	r0, r6
 801111e:	0039      	movs	r1, r7
 8011120:	f002 fcec 	bl	8013afc <__aeabi_dmul>
 8011124:	0004      	movs	r4, r0
 8011126:	000d      	movs	r5, r1
 8011128:	4aaa      	ldr	r2, [pc, #680]	; (80113d4 <__ieee754_pow+0xa10>)
 801112a:	4bab      	ldr	r3, [pc, #684]	; (80113d8 <__ieee754_pow+0xa14>)
 801112c:	f002 fce6 	bl	8013afc <__aeabi_dmul>
 8011130:	4aaa      	ldr	r2, [pc, #680]	; (80113dc <__ieee754_pow+0xa18>)
 8011132:	4bab      	ldr	r3, [pc, #684]	; (80113e0 <__ieee754_pow+0xa1c>)
 8011134:	f002 ff4e 	bl	8013fd4 <__aeabi_dsub>
 8011138:	0022      	movs	r2, r4
 801113a:	002b      	movs	r3, r5
 801113c:	f002 fcde 	bl	8013afc <__aeabi_dmul>
 8011140:	4aa8      	ldr	r2, [pc, #672]	; (80113e4 <__ieee754_pow+0xa20>)
 8011142:	4ba9      	ldr	r3, [pc, #676]	; (80113e8 <__ieee754_pow+0xa24>)
 8011144:	f001 fd6a 	bl	8012c1c <__aeabi_dadd>
 8011148:	0022      	movs	r2, r4
 801114a:	002b      	movs	r3, r5
 801114c:	f002 fcd6 	bl	8013afc <__aeabi_dmul>
 8011150:	4aa6      	ldr	r2, [pc, #664]	; (80113ec <__ieee754_pow+0xa28>)
 8011152:	4ba7      	ldr	r3, [pc, #668]	; (80113f0 <__ieee754_pow+0xa2c>)
 8011154:	f002 ff3e 	bl	8013fd4 <__aeabi_dsub>
 8011158:	0022      	movs	r2, r4
 801115a:	002b      	movs	r3, r5
 801115c:	f002 fcce 	bl	8013afc <__aeabi_dmul>
 8011160:	4aa4      	ldr	r2, [pc, #656]	; (80113f4 <__ieee754_pow+0xa30>)
 8011162:	4ba5      	ldr	r3, [pc, #660]	; (80113f8 <__ieee754_pow+0xa34>)
 8011164:	f001 fd5a 	bl	8012c1c <__aeabi_dadd>
 8011168:	0022      	movs	r2, r4
 801116a:	002b      	movs	r3, r5
 801116c:	f002 fcc6 	bl	8013afc <__aeabi_dmul>
 8011170:	0002      	movs	r2, r0
 8011172:	000b      	movs	r3, r1
 8011174:	0030      	movs	r0, r6
 8011176:	0039      	movs	r1, r7
 8011178:	f002 ff2c 	bl	8013fd4 <__aeabi_dsub>
 801117c:	0004      	movs	r4, r0
 801117e:	000d      	movs	r5, r1
 8011180:	0002      	movs	r2, r0
 8011182:	000b      	movs	r3, r1
 8011184:	0030      	movs	r0, r6
 8011186:	0039      	movs	r1, r7
 8011188:	f002 fcb8 	bl	8013afc <__aeabi_dmul>
 801118c:	2380      	movs	r3, #128	; 0x80
 801118e:	9002      	str	r0, [sp, #8]
 8011190:	9103      	str	r1, [sp, #12]
 8011192:	2200      	movs	r2, #0
 8011194:	05db      	lsls	r3, r3, #23
 8011196:	0020      	movs	r0, r4
 8011198:	0029      	movs	r1, r5
 801119a:	f002 ff1b 	bl	8013fd4 <__aeabi_dsub>
 801119e:	0002      	movs	r2, r0
 80111a0:	000b      	movs	r3, r1
 80111a2:	9802      	ldr	r0, [sp, #8]
 80111a4:	9903      	ldr	r1, [sp, #12]
 80111a6:	f002 f8a3 	bl	80132f0 <__aeabi_ddiv>
 80111aa:	9a00      	ldr	r2, [sp, #0]
 80111ac:	9b01      	ldr	r3, [sp, #4]
 80111ae:	0004      	movs	r4, r0
 80111b0:	000d      	movs	r5, r1
 80111b2:	0030      	movs	r0, r6
 80111b4:	0039      	movs	r1, r7
 80111b6:	f002 fca1 	bl	8013afc <__aeabi_dmul>
 80111ba:	9a00      	ldr	r2, [sp, #0]
 80111bc:	9b01      	ldr	r3, [sp, #4]
 80111be:	f001 fd2d 	bl	8012c1c <__aeabi_dadd>
 80111c2:	0002      	movs	r2, r0
 80111c4:	000b      	movs	r3, r1
 80111c6:	0020      	movs	r0, r4
 80111c8:	0029      	movs	r1, r5
 80111ca:	f002 ff03 	bl	8013fd4 <__aeabi_dsub>
 80111ce:	0032      	movs	r2, r6
 80111d0:	003b      	movs	r3, r7
 80111d2:	f002 feff 	bl	8013fd4 <__aeabi_dsub>
 80111d6:	0002      	movs	r2, r0
 80111d8:	000b      	movs	r3, r1
 80111da:	2000      	movs	r0, #0
 80111dc:	4987      	ldr	r1, [pc, #540]	; (80113fc <__ieee754_pow+0xa38>)
 80111de:	f002 fef9 	bl	8013fd4 <__aeabi_dsub>
 80111e2:	4643      	mov	r3, r8
 80111e4:	185b      	adds	r3, r3, r1
 80111e6:	151a      	asrs	r2, r3, #20
 80111e8:	2a00      	cmp	r2, #0
 80111ea:	dc00      	bgt.n	80111ee <__ieee754_pow+0x82a>
 80111ec:	e144      	b.n	8011478 <__ieee754_pow+0xab4>
 80111ee:	0019      	movs	r1, r3
 80111f0:	9a06      	ldr	r2, [sp, #24]
 80111f2:	9b07      	ldr	r3, [sp, #28]
 80111f4:	f002 fc82 	bl	8013afc <__aeabi_dmul>
 80111f8:	9000      	str	r0, [sp, #0]
 80111fa:	9101      	str	r1, [sp, #4]
 80111fc:	f7ff fc2e 	bl	8010a5c <__ieee754_pow+0x98>
 8011200:	004b      	lsls	r3, r1, #1
 8011202:	497f      	ldr	r1, [pc, #508]	; (8011400 <__ieee754_pow+0xa3c>)
 8011204:	085b      	lsrs	r3, r3, #1
 8011206:	428b      	cmp	r3, r1
 8011208:	dc00      	bgt.n	801120c <__ieee754_pow+0x848>
 801120a:	e0b8      	b.n	801137e <__ieee754_pow+0x9ba>
 801120c:	4b7d      	ldr	r3, [pc, #500]	; (8011404 <__ieee754_pow+0xa40>)
 801120e:	4453      	add	r3, sl
 8011210:	431a      	orrs	r2, r3
 8011212:	d10c      	bne.n	801122e <__ieee754_pow+0x86a>
 8011214:	9a00      	ldr	r2, [sp, #0]
 8011216:	9b01      	ldr	r3, [sp, #4]
 8011218:	0020      	movs	r0, r4
 801121a:	0029      	movs	r1, r5
 801121c:	f002 feda 	bl	8013fd4 <__aeabi_dsub>
 8011220:	9a02      	ldr	r2, [sp, #8]
 8011222:	9b03      	ldr	r3, [sp, #12]
 8011224:	f000 fe1e 	bl	8011e64 <__aeabi_dcmpge>
 8011228:	2800      	cmp	r0, #0
 801122a:	d100      	bne.n	801122e <__ieee754_pow+0x86a>
 801122c:	e701      	b.n	8011032 <__ieee754_pow+0x66e>
 801122e:	9806      	ldr	r0, [sp, #24]
 8011230:	9907      	ldr	r1, [sp, #28]
 8011232:	4a75      	ldr	r2, [pc, #468]	; (8011408 <__ieee754_pow+0xa44>)
 8011234:	4b75      	ldr	r3, [pc, #468]	; (801140c <__ieee754_pow+0xa48>)
 8011236:	f002 fc61 	bl	8013afc <__aeabi_dmul>
 801123a:	4a73      	ldr	r2, [pc, #460]	; (8011408 <__ieee754_pow+0xa44>)
 801123c:	4b73      	ldr	r3, [pc, #460]	; (801140c <__ieee754_pow+0xa48>)
 801123e:	f002 fc5d 	bl	8013afc <__aeabi_dmul>
 8011242:	9000      	str	r0, [sp, #0]
 8011244:	9101      	str	r1, [sp, #4]
 8011246:	f7ff fc09 	bl	8010a5c <__ieee754_pow+0x98>
 801124a:	2300      	movs	r3, #0
 801124c:	4c6b      	ldr	r4, [pc, #428]	; (80113fc <__ieee754_pow+0xa38>)
 801124e:	9306      	str	r3, [sp, #24]
 8011250:	9407      	str	r4, [sp, #28]
 8011252:	e667      	b.n	8010f24 <__ieee754_pow+0x560>
 8011254:	4643      	mov	r3, r8
 8011256:	2b00      	cmp	r3, #0
 8011258:	db00      	blt.n	801125c <__ieee754_pow+0x898>
 801125a:	e494      	b.n	8010b86 <__ieee754_pow+0x1c2>
 801125c:	2380      	movs	r3, #128	; 0x80
 801125e:	061b      	lsls	r3, r3, #24
 8011260:	18fb      	adds	r3, r7, r3
 8011262:	9600      	str	r6, [sp, #0]
 8011264:	9301      	str	r3, [sp, #4]
 8011266:	f7ff fbf9 	bl	8010a5c <__ieee754_pow+0x98>
 801126a:	4b69      	ldr	r3, [pc, #420]	; (8011410 <__ieee754_pow+0xa4c>)
 801126c:	429c      	cmp	r4, r3
 801126e:	dd6a      	ble.n	8011346 <__ieee754_pow+0x982>
 8011270:	4b62      	ldr	r3, [pc, #392]	; (80113fc <__ieee754_pow+0xa38>)
 8011272:	429c      	cmp	r4, r3
 8011274:	dd00      	ble.n	8011278 <__ieee754_pow+0x8b4>
 8011276:	e46a      	b.n	8010b4e <__ieee754_pow+0x18a>
 8011278:	9800      	ldr	r0, [sp, #0]
 801127a:	9901      	ldr	r1, [sp, #4]
 801127c:	2200      	movs	r2, #0
 801127e:	4b5f      	ldr	r3, [pc, #380]	; (80113fc <__ieee754_pow+0xa38>)
 8011280:	f002 fea8 	bl	8013fd4 <__aeabi_dsub>
 8011284:	22c0      	movs	r2, #192	; 0xc0
 8011286:	4b63      	ldr	r3, [pc, #396]	; (8011414 <__ieee754_pow+0xa50>)
 8011288:	05d2      	lsls	r2, r2, #23
 801128a:	0004      	movs	r4, r0
 801128c:	000d      	movs	r5, r1
 801128e:	f002 fc35 	bl	8013afc <__aeabi_dmul>
 8011292:	4a61      	ldr	r2, [pc, #388]	; (8011418 <__ieee754_pow+0xa54>)
 8011294:	9002      	str	r0, [sp, #8]
 8011296:	9103      	str	r1, [sp, #12]
 8011298:	4b60      	ldr	r3, [pc, #384]	; (801141c <__ieee754_pow+0xa58>)
 801129a:	0020      	movs	r0, r4
 801129c:	0029      	movs	r1, r5
 801129e:	f002 fc2d 	bl	8013afc <__aeabi_dmul>
 80112a2:	2200      	movs	r2, #0
 80112a4:	9000      	str	r0, [sp, #0]
 80112a6:	9101      	str	r1, [sp, #4]
 80112a8:	4b5d      	ldr	r3, [pc, #372]	; (8011420 <__ieee754_pow+0xa5c>)
 80112aa:	0020      	movs	r0, r4
 80112ac:	0029      	movs	r1, r5
 80112ae:	f002 fc25 	bl	8013afc <__aeabi_dmul>
 80112b2:	0002      	movs	r2, r0
 80112b4:	000b      	movs	r3, r1
 80112b6:	485b      	ldr	r0, [pc, #364]	; (8011424 <__ieee754_pow+0xa60>)
 80112b8:	495b      	ldr	r1, [pc, #364]	; (8011428 <__ieee754_pow+0xa64>)
 80112ba:	f002 fe8b 	bl	8013fd4 <__aeabi_dsub>
 80112be:	0022      	movs	r2, r4
 80112c0:	002b      	movs	r3, r5
 80112c2:	f002 fc1b 	bl	8013afc <__aeabi_dmul>
 80112c6:	0002      	movs	r2, r0
 80112c8:	000b      	movs	r3, r1
 80112ca:	2000      	movs	r0, #0
 80112cc:	4957      	ldr	r1, [pc, #348]	; (801142c <__ieee754_pow+0xa68>)
 80112ce:	f002 fe81 	bl	8013fd4 <__aeabi_dsub>
 80112d2:	0022      	movs	r2, r4
 80112d4:	9006      	str	r0, [sp, #24]
 80112d6:	9107      	str	r1, [sp, #28]
 80112d8:	002b      	movs	r3, r5
 80112da:	0020      	movs	r0, r4
 80112dc:	0029      	movs	r1, r5
 80112de:	f002 fc0d 	bl	8013afc <__aeabi_dmul>
 80112e2:	0002      	movs	r2, r0
 80112e4:	000b      	movs	r3, r1
 80112e6:	9806      	ldr	r0, [sp, #24]
 80112e8:	9907      	ldr	r1, [sp, #28]
 80112ea:	f002 fc07 	bl	8013afc <__aeabi_dmul>
 80112ee:	4a2f      	ldr	r2, [pc, #188]	; (80113ac <__ieee754_pow+0x9e8>)
 80112f0:	4b48      	ldr	r3, [pc, #288]	; (8011414 <__ieee754_pow+0xa50>)
 80112f2:	f002 fc03 	bl	8013afc <__aeabi_dmul>
 80112f6:	0002      	movs	r2, r0
 80112f8:	000b      	movs	r3, r1
 80112fa:	9800      	ldr	r0, [sp, #0]
 80112fc:	9901      	ldr	r1, [sp, #4]
 80112fe:	f002 fe69 	bl	8013fd4 <__aeabi_dsub>
 8011302:	0002      	movs	r2, r0
 8011304:	000b      	movs	r3, r1
 8011306:	0004      	movs	r4, r0
 8011308:	000d      	movs	r5, r1
 801130a:	9802      	ldr	r0, [sp, #8]
 801130c:	9903      	ldr	r1, [sp, #12]
 801130e:	f001 fc85 	bl	8012c1c <__aeabi_dadd>
 8011312:	9a02      	ldr	r2, [sp, #8]
 8011314:	9b03      	ldr	r3, [sp, #12]
 8011316:	2000      	movs	r0, #0
 8011318:	9000      	str	r0, [sp, #0]
 801131a:	9101      	str	r1, [sp, #4]
 801131c:	f002 fe5a 	bl	8013fd4 <__aeabi_dsub>
 8011320:	0002      	movs	r2, r0
 8011322:	000b      	movs	r3, r1
 8011324:	0020      	movs	r0, r4
 8011326:	0029      	movs	r1, r5
 8011328:	f002 fe54 	bl	8013fd4 <__aeabi_dsub>
 801132c:	9002      	str	r0, [sp, #8]
 801132e:	9103      	str	r1, [sp, #12]
 8011330:	e5ee      	b.n	8010f10 <__ieee754_pow+0x54c>
 8011332:	465a      	mov	r2, fp
 8011334:	4653      	mov	r3, sl
 8011336:	4658      	mov	r0, fp
 8011338:	4651      	mov	r1, sl
 801133a:	f002 fbdf 	bl	8013afc <__aeabi_dmul>
 801133e:	9000      	str	r0, [sp, #0]
 8011340:	9101      	str	r1, [sp, #4]
 8011342:	f7ff fb8b 	bl	8010a5c <__ieee754_pow+0x98>
 8011346:	4643      	mov	r3, r8
 8011348:	2b00      	cmp	r3, #0
 801134a:	db01      	blt.n	8011350 <__ieee754_pow+0x98c>
 801134c:	f7ff fc1b 	bl	8010b86 <__ieee754_pow+0x1c2>
 8011350:	f7ff fc00 	bl	8010b54 <__ieee754_pow+0x190>
 8011354:	2a00      	cmp	r2, #0
 8011356:	d001      	beq.n	801135c <__ieee754_pow+0x998>
 8011358:	f7ff fc2f 	bl	8010bba <__ieee754_pow+0x1f6>
 801135c:	3214      	adds	r2, #20
 801135e:	1ad3      	subs	r3, r2, r3
 8011360:	002a      	movs	r2, r5
 8011362:	411a      	asrs	r2, r3
 8011364:	0011      	movs	r1, r2
 8011366:	4099      	lsls	r1, r3
 8011368:	42a9      	cmp	r1, r5
 801136a:	d001      	beq.n	8011370 <__ieee754_pow+0x9ac>
 801136c:	f7ff fb53 	bl	8010a16 <__ieee754_pow+0x52>
 8011370:	2301      	movs	r3, #1
 8011372:	401a      	ands	r2, r3
 8011374:	18db      	adds	r3, r3, r3
 8011376:	1a9b      	subs	r3, r3, r2
 8011378:	9304      	str	r3, [sp, #16]
 801137a:	f7ff fb4c 	bl	8010a16 <__ieee754_pow+0x52>
 801137e:	2100      	movs	r1, #0
 8011380:	4a2a      	ldr	r2, [pc, #168]	; (801142c <__ieee754_pow+0xa68>)
 8011382:	4688      	mov	r8, r1
 8011384:	4689      	mov	r9, r1
 8011386:	4293      	cmp	r3, r2
 8011388:	dc00      	bgt.n	801138c <__ieee754_pow+0x9c8>
 801138a:	e688      	b.n	801109e <__ieee754_pow+0x6da>
 801138c:	151b      	asrs	r3, r3, #20
 801138e:	e653      	b.n	8011038 <__ieee754_pow+0x674>
 8011390:	4a27      	ldr	r2, [pc, #156]	; (8011430 <__ieee754_pow+0xa6c>)
 8011392:	4b28      	ldr	r3, [pc, #160]	; (8011434 <__ieee754_pow+0xa70>)
 8011394:	9806      	ldr	r0, [sp, #24]
 8011396:	9907      	ldr	r1, [sp, #28]
 8011398:	f002 fbb0 	bl	8013afc <__aeabi_dmul>
 801139c:	4a24      	ldr	r2, [pc, #144]	; (8011430 <__ieee754_pow+0xa6c>)
 801139e:	4b25      	ldr	r3, [pc, #148]	; (8011434 <__ieee754_pow+0xa70>)
 80113a0:	f002 fbac 	bl	8013afc <__aeabi_dmul>
 80113a4:	9000      	str	r0, [sp, #0]
 80113a6:	9101      	str	r1, [sp, #4]
 80113a8:	f7ff fb58 	bl	8010a5c <__ieee754_pow+0x98>
 80113ac:	652b82fe 	.word	0x652b82fe
 80113b0:	3c971547 	.word	0x3c971547
 80113b4:	fffffc02 	.word	0xfffffc02
 80113b8:	000fffff 	.word	0x000fffff
 80113bc:	fffffc01 	.word	0xfffffc01
 80113c0:	3fe62e43 	.word	0x3fe62e43
 80113c4:	fefa39ef 	.word	0xfefa39ef
 80113c8:	3fe62e42 	.word	0x3fe62e42
 80113cc:	0ca86c39 	.word	0x0ca86c39
 80113d0:	be205c61 	.word	0xbe205c61
 80113d4:	72bea4d0 	.word	0x72bea4d0
 80113d8:	3e663769 	.word	0x3e663769
 80113dc:	c5d26bf1 	.word	0xc5d26bf1
 80113e0:	3ebbbd41 	.word	0x3ebbbd41
 80113e4:	af25de2c 	.word	0xaf25de2c
 80113e8:	3f11566a 	.word	0x3f11566a
 80113ec:	16bebd93 	.word	0x16bebd93
 80113f0:	3f66c16c 	.word	0x3f66c16c
 80113f4:	5555553e 	.word	0x5555553e
 80113f8:	3fc55555 	.word	0x3fc55555
 80113fc:	3ff00000 	.word	0x3ff00000
 8011400:	4090cbff 	.word	0x4090cbff
 8011404:	3f6f3400 	.word	0x3f6f3400
 8011408:	c2f8f359 	.word	0xc2f8f359
 801140c:	01a56e1f 	.word	0x01a56e1f
 8011410:	3feffffe 	.word	0x3feffffe
 8011414:	3ff71547 	.word	0x3ff71547
 8011418:	f85ddf44 	.word	0xf85ddf44
 801141c:	3e54ae0b 	.word	0x3e54ae0b
 8011420:	3fd00000 	.word	0x3fd00000
 8011424:	55555555 	.word	0x55555555
 8011428:	3fd55555 	.word	0x3fd55555
 801142c:	3fe00000 	.word	0x3fe00000
 8011430:	8800759c 	.word	0x8800759c
 8011434:	7e37e43c 	.word	0x7e37e43c
 8011438:	9b04      	ldr	r3, [sp, #16]
 801143a:	2b01      	cmp	r3, #1
 801143c:	d001      	beq.n	8011442 <__ieee754_pow+0xa7e>
 801143e:	f7ff fb0d 	bl	8010a5c <__ieee754_pow+0x98>
 8011442:	9c00      	ldr	r4, [sp, #0]
 8011444:	9d01      	ldr	r5, [sp, #4]
 8011446:	2180      	movs	r1, #128	; 0x80
 8011448:	0022      	movs	r2, r4
 801144a:	0609      	lsls	r1, r1, #24
 801144c:	186b      	adds	r3, r5, r1
 801144e:	9200      	str	r2, [sp, #0]
 8011450:	9301      	str	r3, [sp, #4]
 8011452:	f7ff fb03 	bl	8010a5c <__ieee754_pow+0x98>
 8011456:	2380      	movs	r3, #128	; 0x80
 8011458:	4c09      	ldr	r4, [pc, #36]	; (8011480 <__ieee754_pow+0xabc>)
 801145a:	05db      	lsls	r3, r3, #23
 801145c:	930e      	str	r3, [sp, #56]	; 0x38
 801145e:	940f      	str	r4, [sp, #60]	; 0x3c
 8011460:	4b08      	ldr	r3, [pc, #32]	; (8011484 <__ieee754_pow+0xac0>)
 8011462:	4c09      	ldr	r4, [pc, #36]	; (8011488 <__ieee754_pow+0xac4>)
 8011464:	2200      	movs	r2, #0
 8011466:	9310      	str	r3, [sp, #64]	; 0x40
 8011468:	9411      	str	r4, [sp, #68]	; 0x44
 801146a:	2480      	movs	r4, #128	; 0x80
 801146c:	4b07      	ldr	r3, [pc, #28]	; (801148c <__ieee754_pow+0xac8>)
 801146e:	02e4      	lsls	r4, r4, #11
 8011470:	9206      	str	r2, [sp, #24]
 8011472:	9307      	str	r3, [sp, #28]
 8011474:	f7ff fbfb 	bl	8010c6e <__ieee754_pow+0x2aa>
 8011478:	464a      	mov	r2, r9
 801147a:	f000 fa0b 	bl	8011894 <scalbn>
 801147e:	e6b7      	b.n	80111f0 <__ieee754_pow+0x82c>
 8011480:	3fe2b803 	.word	0x3fe2b803
 8011484:	43cfd006 	.word	0x43cfd006
 8011488:	3e4cfdeb 	.word	0x3e4cfdeb
 801148c:	3ff80000 	.word	0x3ff80000

08011490 <__ieee754_sqrt>:
 8011490:	4a69      	ldr	r2, [pc, #420]	; (8011638 <__ieee754_sqrt+0x1a8>)
 8011492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011494:	000c      	movs	r4, r1
 8011496:	46ce      	mov	lr, r9
 8011498:	4647      	mov	r7, r8
 801149a:	000b      	movs	r3, r1
 801149c:	0011      	movs	r1, r2
 801149e:	b580      	push	{r7, lr}
 80114a0:	0006      	movs	r6, r0
 80114a2:	0005      	movs	r5, r0
 80114a4:	4021      	ands	r1, r4
 80114a6:	4291      	cmp	r1, r2
 80114a8:	d100      	bne.n	80114ac <__ieee754_sqrt+0x1c>
 80114aa:	e0a0      	b.n	80115ee <__ieee754_sqrt+0x15e>
 80114ac:	2c00      	cmp	r4, #0
 80114ae:	dd68      	ble.n	8011582 <__ieee754_sqrt+0xf2>
 80114b0:	1521      	asrs	r1, r4, #20
 80114b2:	d100      	bne.n	80114b6 <__ieee754_sqrt+0x26>
 80114b4:	e0b1      	b.n	801161a <__ieee754_sqrt+0x18a>
 80114b6:	4a61      	ldr	r2, [pc, #388]	; (801163c <__ieee754_sqrt+0x1ac>)
 80114b8:	031b      	lsls	r3, r3, #12
 80114ba:	4694      	mov	ip, r2
 80114bc:	2280      	movs	r2, #128	; 0x80
 80114be:	0b1b      	lsrs	r3, r3, #12
 80114c0:	0352      	lsls	r2, r2, #13
 80114c2:	4313      	orrs	r3, r2
 80114c4:	005b      	lsls	r3, r3, #1
 80114c6:	0fea      	lsrs	r2, r5, #31
 80114c8:	4461      	add	r1, ip
 80114ca:	189b      	adds	r3, r3, r2
 80114cc:	006a      	lsls	r2, r5, #1
 80114ce:	07c8      	lsls	r0, r1, #31
 80114d0:	d503      	bpl.n	80114da <__ieee754_sqrt+0x4a>
 80114d2:	0fd2      	lsrs	r2, r2, #31
 80114d4:	005b      	lsls	r3, r3, #1
 80114d6:	189b      	adds	r3, r3, r2
 80114d8:	00aa      	lsls	r2, r5, #2
 80114da:	1049      	asrs	r1, r1, #1
 80114dc:	468c      	mov	ip, r1
 80114de:	2100      	movs	r1, #0
 80114e0:	2080      	movs	r0, #128	; 0x80
 80114e2:	2416      	movs	r4, #22
 80114e4:	4688      	mov	r8, r1
 80114e6:	0380      	lsls	r0, r0, #14
 80114e8:	180d      	adds	r5, r1, r0
 80114ea:	429d      	cmp	r5, r3
 80114ec:	dc02      	bgt.n	80114f4 <__ieee754_sqrt+0x64>
 80114ee:	1829      	adds	r1, r5, r0
 80114f0:	1b5b      	subs	r3, r3, r5
 80114f2:	4480      	add	r8, r0
 80114f4:	0fd5      	lsrs	r5, r2, #31
 80114f6:	005b      	lsls	r3, r3, #1
 80114f8:	3c01      	subs	r4, #1
 80114fa:	18eb      	adds	r3, r5, r3
 80114fc:	0052      	lsls	r2, r2, #1
 80114fe:	0840      	lsrs	r0, r0, #1
 8011500:	2c00      	cmp	r4, #0
 8011502:	d1f1      	bne.n	80114e8 <__ieee754_sqrt+0x58>
 8011504:	2000      	movs	r0, #0
 8011506:	4681      	mov	r9, r0
 8011508:	2080      	movs	r0, #128	; 0x80
 801150a:	2620      	movs	r6, #32
 801150c:	0600      	lsls	r0, r0, #24
 801150e:	e009      	b.n	8011524 <__ieee754_sqrt+0x94>
 8011510:	428b      	cmp	r3, r1
 8011512:	d05d      	beq.n	80115d0 <__ieee754_sqrt+0x140>
 8011514:	0fd5      	lsrs	r5, r2, #31
 8011516:	005b      	lsls	r3, r3, #1
 8011518:	3e01      	subs	r6, #1
 801151a:	195b      	adds	r3, r3, r5
 801151c:	0052      	lsls	r2, r2, #1
 801151e:	0840      	lsrs	r0, r0, #1
 8011520:	2e00      	cmp	r6, #0
 8011522:	d016      	beq.n	8011552 <__ieee754_sqrt+0xc2>
 8011524:	1905      	adds	r5, r0, r4
 8011526:	428b      	cmp	r3, r1
 8011528:	ddf2      	ble.n	8011510 <__ieee754_sqrt+0x80>
 801152a:	182c      	adds	r4, r5, r0
 801152c:	000f      	movs	r7, r1
 801152e:	2d00      	cmp	r5, #0
 8011530:	db4a      	blt.n	80115c8 <__ieee754_sqrt+0x138>
 8011532:	1a5b      	subs	r3, r3, r1
 8011534:	42aa      	cmp	r2, r5
 8011536:	4189      	sbcs	r1, r1
 8011538:	4249      	negs	r1, r1
 801153a:	1a5b      	subs	r3, r3, r1
 801153c:	1b52      	subs	r2, r2, r5
 801153e:	0fd5      	lsrs	r5, r2, #31
 8011540:	005b      	lsls	r3, r3, #1
 8011542:	3e01      	subs	r6, #1
 8011544:	4481      	add	r9, r0
 8011546:	0039      	movs	r1, r7
 8011548:	195b      	adds	r3, r3, r5
 801154a:	0052      	lsls	r2, r2, #1
 801154c:	0840      	lsrs	r0, r0, #1
 801154e:	2e00      	cmp	r6, #0
 8011550:	d1e8      	bne.n	8011524 <__ieee754_sqrt+0x94>
 8011552:	4313      	orrs	r3, r2
 8011554:	d144      	bne.n	80115e0 <__ieee754_sqrt+0x150>
 8011556:	464b      	mov	r3, r9
 8011558:	085e      	lsrs	r6, r3, #1
 801155a:	4643      	mov	r3, r8
 801155c:	1059      	asrs	r1, r3, #1
 801155e:	4b38      	ldr	r3, [pc, #224]	; (8011640 <__ieee754_sqrt+0x1b0>)
 8011560:	4699      	mov	r9, r3
 8011562:	4643      	mov	r3, r8
 8011564:	4449      	add	r1, r9
 8011566:	07db      	lsls	r3, r3, #31
 8011568:	d502      	bpl.n	8011570 <__ieee754_sqrt+0xe0>
 801156a:	2380      	movs	r3, #128	; 0x80
 801156c:	061b      	lsls	r3, r3, #24
 801156e:	431e      	orrs	r6, r3
 8011570:	4663      	mov	r3, ip
 8011572:	0518      	lsls	r0, r3, #20
 8011574:	1843      	adds	r3, r0, r1
 8011576:	0019      	movs	r1, r3
 8011578:	0030      	movs	r0, r6
 801157a:	bc0c      	pop	{r2, r3}
 801157c:	4690      	mov	r8, r2
 801157e:	4699      	mov	r9, r3
 8011580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011582:	0062      	lsls	r2, r4, #1
 8011584:	0852      	lsrs	r2, r2, #1
 8011586:	4302      	orrs	r2, r0
 8011588:	d04a      	beq.n	8011620 <__ieee754_sqrt+0x190>
 801158a:	2c00      	cmp	r4, #0
 801158c:	d13a      	bne.n	8011604 <__ieee754_sqrt+0x174>
 801158e:	0ae8      	lsrs	r0, r5, #11
 8011590:	3b15      	subs	r3, #21
 8011592:	0002      	movs	r2, r0
 8011594:	056d      	lsls	r5, r5, #21
 8011596:	2800      	cmp	r0, #0
 8011598:	d0f9      	beq.n	801158e <__ieee754_sqrt+0xfe>
 801159a:	2180      	movs	r1, #128	; 0x80
 801159c:	0349      	lsls	r1, r1, #13
 801159e:	4208      	tst	r0, r1
 80115a0:	d144      	bne.n	801162c <__ieee754_sqrt+0x19c>
 80115a2:	2080      	movs	r0, #128	; 0x80
 80115a4:	2100      	movs	r1, #0
 80115a6:	0340      	lsls	r0, r0, #13
 80115a8:	e000      	b.n	80115ac <__ieee754_sqrt+0x11c>
 80115aa:	0021      	movs	r1, r4
 80115ac:	0052      	lsls	r2, r2, #1
 80115ae:	1c4c      	adds	r4, r1, #1
 80115b0:	4202      	tst	r2, r0
 80115b2:	d0fa      	beq.n	80115aa <__ieee754_sqrt+0x11a>
 80115b4:	2620      	movs	r6, #32
 80115b6:	0010      	movs	r0, r2
 80115b8:	002a      	movs	r2, r5
 80115ba:	40a5      	lsls	r5, r4
 80115bc:	1b36      	subs	r6, r6, r4
 80115be:	1a59      	subs	r1, r3, r1
 80115c0:	0013      	movs	r3, r2
 80115c2:	40f3      	lsrs	r3, r6
 80115c4:	4303      	orrs	r3, r0
 80115c6:	e776      	b.n	80114b6 <__ieee754_sqrt+0x26>
 80115c8:	43e7      	mvns	r7, r4
 80115ca:	0fff      	lsrs	r7, r7, #31
 80115cc:	19cf      	adds	r7, r1, r7
 80115ce:	e7b0      	b.n	8011532 <__ieee754_sqrt+0xa2>
 80115d0:	4295      	cmp	r5, r2
 80115d2:	d89f      	bhi.n	8011514 <__ieee754_sqrt+0x84>
 80115d4:	182c      	adds	r4, r5, r0
 80115d6:	2d00      	cmp	r5, #0
 80115d8:	dbf6      	blt.n	80115c8 <__ieee754_sqrt+0x138>
 80115da:	001f      	movs	r7, r3
 80115dc:	2300      	movs	r3, #0
 80115de:	e7ad      	b.n	801153c <__ieee754_sqrt+0xac>
 80115e0:	464b      	mov	r3, r9
 80115e2:	3301      	adds	r3, #1
 80115e4:	d01e      	beq.n	8011624 <__ieee754_sqrt+0x194>
 80115e6:	464e      	mov	r6, r9
 80115e8:	3601      	adds	r6, #1
 80115ea:	0876      	lsrs	r6, r6, #1
 80115ec:	e7b5      	b.n	801155a <__ieee754_sqrt+0xca>
 80115ee:	0002      	movs	r2, r0
 80115f0:	0023      	movs	r3, r4
 80115f2:	0030      	movs	r0, r6
 80115f4:	0021      	movs	r1, r4
 80115f6:	f002 fa81 	bl	8013afc <__aeabi_dmul>
 80115fa:	0032      	movs	r2, r6
 80115fc:	0023      	movs	r3, r4
 80115fe:	f001 fb0d 	bl	8012c1c <__aeabi_dadd>
 8011602:	e7ba      	b.n	801157a <__ieee754_sqrt+0xea>
 8011604:	0002      	movs	r2, r0
 8011606:	0023      	movs	r3, r4
 8011608:	0030      	movs	r0, r6
 801160a:	0021      	movs	r1, r4
 801160c:	f002 fce2 	bl	8013fd4 <__aeabi_dsub>
 8011610:	0002      	movs	r2, r0
 8011612:	000b      	movs	r3, r1
 8011614:	f001 fe6c 	bl	80132f0 <__aeabi_ddiv>
 8011618:	e7af      	b.n	801157a <__ieee754_sqrt+0xea>
 801161a:	0022      	movs	r2, r4
 801161c:	2300      	movs	r3, #0
 801161e:	e7c0      	b.n	80115a2 <__ieee754_sqrt+0x112>
 8011620:	0021      	movs	r1, r4
 8011622:	e7aa      	b.n	801157a <__ieee754_sqrt+0xea>
 8011624:	2301      	movs	r3, #1
 8011626:	4699      	mov	r9, r3
 8011628:	44c8      	add	r8, r9
 801162a:	e796      	b.n	801155a <__ieee754_sqrt+0xca>
 801162c:	2101      	movs	r1, #1
 801162e:	002a      	movs	r2, r5
 8011630:	2620      	movs	r6, #32
 8011632:	4249      	negs	r1, r1
 8011634:	e7c3      	b.n	80115be <__ieee754_sqrt+0x12e>
 8011636:	46c0      	nop			; (mov r8, r8)
 8011638:	7ff00000 	.word	0x7ff00000
 801163c:	fffffc01 	.word	0xfffffc01
 8011640:	3fe00000 	.word	0x3fe00000

08011644 <ceil>:
 8011644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011646:	4647      	mov	r7, r8
 8011648:	46ce      	mov	lr, r9
 801164a:	004b      	lsls	r3, r1, #1
 801164c:	4a3d      	ldr	r2, [pc, #244]	; (8011744 <ceil+0x100>)
 801164e:	0d5b      	lsrs	r3, r3, #21
 8011650:	189e      	adds	r6, r3, r2
 8011652:	b580      	push	{r7, lr}
 8011654:	0005      	movs	r5, r0
 8011656:	000c      	movs	r4, r1
 8011658:	000f      	movs	r7, r1
 801165a:	4680      	mov	r8, r0
 801165c:	2e13      	cmp	r6, #19
 801165e:	dc35      	bgt.n	80116cc <ceil+0x88>
 8011660:	2e00      	cmp	r6, #0
 8011662:	db1f      	blt.n	80116a4 <ceil+0x60>
 8011664:	4b38      	ldr	r3, [pc, #224]	; (8011748 <ceil+0x104>)
 8011666:	4133      	asrs	r3, r6
 8011668:	4699      	mov	r9, r3
 801166a:	400b      	ands	r3, r1
 801166c:	4303      	orrs	r3, r0
 801166e:	d05d      	beq.n	801172c <ceil+0xe8>
 8011670:	4a36      	ldr	r2, [pc, #216]	; (801174c <ceil+0x108>)
 8011672:	4b37      	ldr	r3, [pc, #220]	; (8011750 <ceil+0x10c>)
 8011674:	f001 fad2 	bl	8012c1c <__aeabi_dadd>
 8011678:	2200      	movs	r2, #0
 801167a:	2300      	movs	r3, #0
 801167c:	f000 fbe8 	bl	8011e50 <__aeabi_dcmpgt>
 8011680:	2800      	cmp	r0, #0
 8011682:	d009      	beq.n	8011698 <ceil+0x54>
 8011684:	2c00      	cmp	r4, #0
 8011686:	dd03      	ble.n	8011690 <ceil+0x4c>
 8011688:	2780      	movs	r7, #128	; 0x80
 801168a:	037f      	lsls	r7, r7, #13
 801168c:	4137      	asrs	r7, r6
 801168e:	193f      	adds	r7, r7, r4
 8011690:	464b      	mov	r3, r9
 8011692:	439f      	bics	r7, r3
 8011694:	2300      	movs	r3, #0
 8011696:	4698      	mov	r8, r3
 8011698:	4640      	mov	r0, r8
 801169a:	0039      	movs	r1, r7
 801169c:	bc0c      	pop	{r2, r3}
 801169e:	4690      	mov	r8, r2
 80116a0:	4699      	mov	r9, r3
 80116a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116a4:	4a29      	ldr	r2, [pc, #164]	; (801174c <ceil+0x108>)
 80116a6:	4b2a      	ldr	r3, [pc, #168]	; (8011750 <ceil+0x10c>)
 80116a8:	f001 fab8 	bl	8012c1c <__aeabi_dadd>
 80116ac:	2200      	movs	r2, #0
 80116ae:	2300      	movs	r3, #0
 80116b0:	f000 fbce 	bl	8011e50 <__aeabi_dcmpgt>
 80116b4:	2800      	cmp	r0, #0
 80116b6:	d0ef      	beq.n	8011698 <ceil+0x54>
 80116b8:	2c00      	cmp	r4, #0
 80116ba:	db3c      	blt.n	8011736 <ceil+0xf2>
 80116bc:	2300      	movs	r3, #0
 80116be:	432c      	orrs	r4, r5
 80116c0:	4698      	mov	r8, r3
 80116c2:	2700      	movs	r7, #0
 80116c4:	2c00      	cmp	r4, #0
 80116c6:	d0e7      	beq.n	8011698 <ceil+0x54>
 80116c8:	4f22      	ldr	r7, [pc, #136]	; (8011754 <ceil+0x110>)
 80116ca:	e7e5      	b.n	8011698 <ceil+0x54>
 80116cc:	2e33      	cmp	r6, #51	; 0x33
 80116ce:	dd08      	ble.n	80116e2 <ceil+0x9e>
 80116d0:	2380      	movs	r3, #128	; 0x80
 80116d2:	00db      	lsls	r3, r3, #3
 80116d4:	429e      	cmp	r6, r3
 80116d6:	d1e1      	bne.n	801169c <ceil+0x58>
 80116d8:	0002      	movs	r2, r0
 80116da:	000b      	movs	r3, r1
 80116dc:	f001 fa9e 	bl	8012c1c <__aeabi_dadd>
 80116e0:	e7dc      	b.n	801169c <ceil+0x58>
 80116e2:	4a1d      	ldr	r2, [pc, #116]	; (8011758 <ceil+0x114>)
 80116e4:	4694      	mov	ip, r2
 80116e6:	2201      	movs	r2, #1
 80116e8:	4463      	add	r3, ip
 80116ea:	4252      	negs	r2, r2
 80116ec:	40da      	lsrs	r2, r3
 80116ee:	4691      	mov	r9, r2
 80116f0:	4202      	tst	r2, r0
 80116f2:	d01b      	beq.n	801172c <ceil+0xe8>
 80116f4:	4a15      	ldr	r2, [pc, #84]	; (801174c <ceil+0x108>)
 80116f6:	4b16      	ldr	r3, [pc, #88]	; (8011750 <ceil+0x10c>)
 80116f8:	f001 fa90 	bl	8012c1c <__aeabi_dadd>
 80116fc:	2200      	movs	r2, #0
 80116fe:	2300      	movs	r3, #0
 8011700:	f000 fba6 	bl	8011e50 <__aeabi_dcmpgt>
 8011704:	2800      	cmp	r0, #0
 8011706:	d0c7      	beq.n	8011698 <ceil+0x54>
 8011708:	2c00      	cmp	r4, #0
 801170a:	dd0a      	ble.n	8011722 <ceil+0xde>
 801170c:	2e14      	cmp	r6, #20
 801170e:	d010      	beq.n	8011732 <ceil+0xee>
 8011710:	2334      	movs	r3, #52	; 0x34
 8011712:	2001      	movs	r0, #1
 8011714:	1b9e      	subs	r6, r3, r6
 8011716:	40b0      	lsls	r0, r6
 8011718:	1945      	adds	r5, r0, r5
 801171a:	45a8      	cmp	r8, r5
 801171c:	d910      	bls.n	8011740 <ceil+0xfc>
 801171e:	46a8      	mov	r8, r5
 8011720:	1c67      	adds	r7, r4, #1
 8011722:	4643      	mov	r3, r8
 8011724:	464a      	mov	r2, r9
 8011726:	4393      	bics	r3, r2
 8011728:	4698      	mov	r8, r3
 801172a:	e7b5      	b.n	8011698 <ceil+0x54>
 801172c:	0028      	movs	r0, r5
 801172e:	0021      	movs	r1, r4
 8011730:	e7b4      	b.n	801169c <ceil+0x58>
 8011732:	1c67      	adds	r7, r4, #1
 8011734:	e7f5      	b.n	8011722 <ceil+0xde>
 8011736:	2300      	movs	r3, #0
 8011738:	2780      	movs	r7, #128	; 0x80
 801173a:	4698      	mov	r8, r3
 801173c:	063f      	lsls	r7, r7, #24
 801173e:	e7ab      	b.n	8011698 <ceil+0x54>
 8011740:	46a8      	mov	r8, r5
 8011742:	e7ee      	b.n	8011722 <ceil+0xde>
 8011744:	fffffc01 	.word	0xfffffc01
 8011748:	000fffff 	.word	0x000fffff
 801174c:	8800759c 	.word	0x8800759c
 8011750:	7e37e43c 	.word	0x7e37e43c
 8011754:	3ff00000 	.word	0x3ff00000
 8011758:	fffffbed 	.word	0xfffffbed

0801175c <fabs>:
 801175c:	0049      	lsls	r1, r1, #1
 801175e:	084b      	lsrs	r3, r1, #1
 8011760:	0019      	movs	r1, r3
 8011762:	4770      	bx	lr

08011764 <finite>:
 8011764:	4b03      	ldr	r3, [pc, #12]	; (8011774 <finite+0x10>)
 8011766:	0048      	lsls	r0, r1, #1
 8011768:	469c      	mov	ip, r3
 801176a:	0840      	lsrs	r0, r0, #1
 801176c:	4460      	add	r0, ip
 801176e:	0fc0      	lsrs	r0, r0, #31
 8011770:	4770      	bx	lr
 8011772:	46c0      	nop			; (mov r8, r8)
 8011774:	80100000 	.word	0x80100000

08011778 <nan>:
 8011778:	2000      	movs	r0, #0
 801177a:	4901      	ldr	r1, [pc, #4]	; (8011780 <nan+0x8>)
 801177c:	4770      	bx	lr
 801177e:	46c0      	nop			; (mov r8, r8)
 8011780:	7ff80000 	.word	0x7ff80000

08011784 <rint>:
 8011784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011786:	004b      	lsls	r3, r1, #1
 8011788:	4a3d      	ldr	r2, [pc, #244]	; (8011880 <rint+0xfc>)
 801178a:	0d5b      	lsrs	r3, r3, #21
 801178c:	189a      	adds	r2, r3, r2
 801178e:	b083      	sub	sp, #12
 8011790:	000f      	movs	r7, r1
 8011792:	0004      	movs	r4, r0
 8011794:	0fce      	lsrs	r6, r1, #31
 8011796:	2a13      	cmp	r2, #19
 8011798:	dc55      	bgt.n	8011846 <rint+0xc2>
 801179a:	2a00      	cmp	r2, #0
 801179c:	db2a      	blt.n	80117f4 <rint+0x70>
 801179e:	4c39      	ldr	r4, [pc, #228]	; (8011884 <rint+0x100>)
 80117a0:	4114      	asrs	r4, r2
 80117a2:	0025      	movs	r5, r4
 80117a4:	400d      	ands	r5, r1
 80117a6:	4305      	orrs	r5, r0
 80117a8:	d022      	beq.n	80117f0 <rint+0x6c>
 80117aa:	0865      	lsrs	r5, r4, #1
 80117ac:	002c      	movs	r4, r5
 80117ae:	400c      	ands	r4, r1
 80117b0:	4304      	orrs	r4, r0
 80117b2:	d00a      	beq.n	80117ca <rint+0x46>
 80117b4:	4834      	ldr	r0, [pc, #208]	; (8011888 <rint+0x104>)
 80117b6:	2780      	movs	r7, #128	; 0x80
 80117b8:	4684      	mov	ip, r0
 80117ba:	02ff      	lsls	r7, r7, #11
 80117bc:	4463      	add	r3, ip
 80117be:	425c      	negs	r4, r3
 80117c0:	415c      	adcs	r4, r3
 80117c2:	4117      	asrs	r7, r2
 80117c4:	43a9      	bics	r1, r5
 80117c6:	07e4      	lsls	r4, r4, #31
 80117c8:	430f      	orrs	r7, r1
 80117ca:	4930      	ldr	r1, [pc, #192]	; (801188c <rint+0x108>)
 80117cc:	00f6      	lsls	r6, r6, #3
 80117ce:	198e      	adds	r6, r1, r6
 80117d0:	0022      	movs	r2, r4
 80117d2:	6834      	ldr	r4, [r6, #0]
 80117d4:	6875      	ldr	r5, [r6, #4]
 80117d6:	003b      	movs	r3, r7
 80117d8:	0020      	movs	r0, r4
 80117da:	0029      	movs	r1, r5
 80117dc:	f001 fa1e 	bl	8012c1c <__aeabi_dadd>
 80117e0:	9000      	str	r0, [sp, #0]
 80117e2:	9101      	str	r1, [sp, #4]
 80117e4:	9800      	ldr	r0, [sp, #0]
 80117e6:	9901      	ldr	r1, [sp, #4]
 80117e8:	0022      	movs	r2, r4
 80117ea:	002b      	movs	r3, r5
 80117ec:	f002 fbf2 	bl	8013fd4 <__aeabi_dsub>
 80117f0:	b003      	add	sp, #12
 80117f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117f4:	004c      	lsls	r4, r1, #1
 80117f6:	0864      	lsrs	r4, r4, #1
 80117f8:	4304      	orrs	r4, r0
 80117fa:	d0f9      	beq.n	80117f0 <rint+0x6c>
 80117fc:	030b      	lsls	r3, r1, #12
 80117fe:	0b1b      	lsrs	r3, r3, #12
 8011800:	4303      	orrs	r3, r0
 8011802:	001a      	movs	r2, r3
 8011804:	425b      	negs	r3, r3
 8011806:	4313      	orrs	r3, r2
 8011808:	2280      	movs	r2, #128	; 0x80
 801180a:	0b1b      	lsrs	r3, r3, #12
 801180c:	0312      	lsls	r2, r2, #12
 801180e:	4013      	ands	r3, r2
 8011810:	0c4a      	lsrs	r2, r1, #17
 8011812:	0452      	lsls	r2, r2, #17
 8011814:	491d      	ldr	r1, [pc, #116]	; (801188c <rint+0x108>)
 8011816:	4313      	orrs	r3, r2
 8011818:	0002      	movs	r2, r0
 801181a:	00f0      	lsls	r0, r6, #3
 801181c:	1809      	adds	r1, r1, r0
 801181e:	680c      	ldr	r4, [r1, #0]
 8011820:	684d      	ldr	r5, [r1, #4]
 8011822:	0020      	movs	r0, r4
 8011824:	0029      	movs	r1, r5
 8011826:	f001 f9f9 	bl	8012c1c <__aeabi_dadd>
 801182a:	9000      	str	r0, [sp, #0]
 801182c:	9101      	str	r1, [sp, #4]
 801182e:	9800      	ldr	r0, [sp, #0]
 8011830:	9901      	ldr	r1, [sp, #4]
 8011832:	002b      	movs	r3, r5
 8011834:	0022      	movs	r2, r4
 8011836:	f002 fbcd 	bl	8013fd4 <__aeabi_dsub>
 801183a:	004b      	lsls	r3, r1, #1
 801183c:	085b      	lsrs	r3, r3, #1
 801183e:	07f6      	lsls	r6, r6, #31
 8011840:	4333      	orrs	r3, r6
 8011842:	0019      	movs	r1, r3
 8011844:	e7d4      	b.n	80117f0 <rint+0x6c>
 8011846:	2a33      	cmp	r2, #51	; 0x33
 8011848:	dd08      	ble.n	801185c <rint+0xd8>
 801184a:	2380      	movs	r3, #128	; 0x80
 801184c:	00db      	lsls	r3, r3, #3
 801184e:	429a      	cmp	r2, r3
 8011850:	d1ce      	bne.n	80117f0 <rint+0x6c>
 8011852:	0002      	movs	r2, r0
 8011854:	000b      	movs	r3, r1
 8011856:	f001 f9e1 	bl	8012c1c <__aeabi_dadd>
 801185a:	e7c9      	b.n	80117f0 <rint+0x6c>
 801185c:	4a0c      	ldr	r2, [pc, #48]	; (8011890 <rint+0x10c>)
 801185e:	4694      	mov	ip, r2
 8011860:	2201      	movs	r2, #1
 8011862:	4463      	add	r3, ip
 8011864:	4252      	negs	r2, r2
 8011866:	40da      	lsrs	r2, r3
 8011868:	4202      	tst	r2, r0
 801186a:	d0c1      	beq.n	80117f0 <rint+0x6c>
 801186c:	0852      	lsrs	r2, r2, #1
 801186e:	4202      	tst	r2, r0
 8011870:	d0ab      	beq.n	80117ca <rint+0x46>
 8011872:	2480      	movs	r4, #128	; 0x80
 8011874:	05e4      	lsls	r4, r4, #23
 8011876:	411c      	asrs	r4, r3
 8011878:	4390      	bics	r0, r2
 801187a:	4304      	orrs	r4, r0
 801187c:	e7a5      	b.n	80117ca <rint+0x46>
 801187e:	46c0      	nop			; (mov r8, r8)
 8011880:	fffffc01 	.word	0xfffffc01
 8011884:	000fffff 	.word	0x000fffff
 8011888:	fffffbee 	.word	0xfffffbee
 801188c:	0801abf0 	.word	0x0801abf0
 8011890:	fffffbed 	.word	0xfffffbed

08011894 <scalbn>:
 8011894:	004b      	lsls	r3, r1, #1
 8011896:	b570      	push	{r4, r5, r6, lr}
 8011898:	0d5b      	lsrs	r3, r3, #21
 801189a:	0014      	movs	r4, r2
 801189c:	000a      	movs	r2, r1
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d125      	bne.n	80118ee <scalbn+0x5a>
 80118a2:	004b      	lsls	r3, r1, #1
 80118a4:	085b      	lsrs	r3, r3, #1
 80118a6:	4303      	orrs	r3, r0
 80118a8:	d020      	beq.n	80118ec <scalbn+0x58>
 80118aa:	4b2b      	ldr	r3, [pc, #172]	; (8011958 <scalbn+0xc4>)
 80118ac:	2200      	movs	r2, #0
 80118ae:	f002 f925 	bl	8013afc <__aeabi_dmul>
 80118b2:	4b2a      	ldr	r3, [pc, #168]	; (801195c <scalbn+0xc8>)
 80118b4:	429c      	cmp	r4, r3
 80118b6:	db47      	blt.n	8011948 <scalbn+0xb4>
 80118b8:	000a      	movs	r2, r1
 80118ba:	004b      	lsls	r3, r1, #1
 80118bc:	0d5b      	lsrs	r3, r3, #21
 80118be:	3b36      	subs	r3, #54	; 0x36
 80118c0:	4d27      	ldr	r5, [pc, #156]	; (8011960 <scalbn+0xcc>)
 80118c2:	18e3      	adds	r3, r4, r3
 80118c4:	42ab      	cmp	r3, r5
 80118c6:	dc1a      	bgt.n	80118fe <scalbn+0x6a>
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	dc37      	bgt.n	801193c <scalbn+0xa8>
 80118cc:	001d      	movs	r5, r3
 80118ce:	3535      	adds	r5, #53	; 0x35
 80118d0:	da29      	bge.n	8011926 <scalbn+0x92>
 80118d2:	4b24      	ldr	r3, [pc, #144]	; (8011964 <scalbn+0xd0>)
 80118d4:	429c      	cmp	r4, r3
 80118d6:	dc12      	bgt.n	80118fe <scalbn+0x6a>
 80118d8:	4c23      	ldr	r4, [pc, #140]	; (8011968 <scalbn+0xd4>)
 80118da:	4d24      	ldr	r5, [pc, #144]	; (801196c <scalbn+0xd8>)
 80118dc:	2900      	cmp	r1, #0
 80118de:	db38      	blt.n	8011952 <scalbn+0xbe>
 80118e0:	4a21      	ldr	r2, [pc, #132]	; (8011968 <scalbn+0xd4>)
 80118e2:	4b22      	ldr	r3, [pc, #136]	; (801196c <scalbn+0xd8>)
 80118e4:	0020      	movs	r0, r4
 80118e6:	0029      	movs	r1, r5
 80118e8:	f002 f908 	bl	8013afc <__aeabi_dmul>
 80118ec:	bd70      	pop	{r4, r5, r6, pc}
 80118ee:	4d20      	ldr	r5, [pc, #128]	; (8011970 <scalbn+0xdc>)
 80118f0:	42ab      	cmp	r3, r5
 80118f2:	d1e5      	bne.n	80118c0 <scalbn+0x2c>
 80118f4:	0002      	movs	r2, r0
 80118f6:	000b      	movs	r3, r1
 80118f8:	f001 f990 	bl	8012c1c <__aeabi_dadd>
 80118fc:	e7f6      	b.n	80118ec <scalbn+0x58>
 80118fe:	4c1d      	ldr	r4, [pc, #116]	; (8011974 <scalbn+0xe0>)
 8011900:	4d1d      	ldr	r5, [pc, #116]	; (8011978 <scalbn+0xe4>)
 8011902:	2900      	cmp	r1, #0
 8011904:	db06      	blt.n	8011914 <scalbn+0x80>
 8011906:	4a1b      	ldr	r2, [pc, #108]	; (8011974 <scalbn+0xe0>)
 8011908:	4b1b      	ldr	r3, [pc, #108]	; (8011978 <scalbn+0xe4>)
 801190a:	0020      	movs	r0, r4
 801190c:	0029      	movs	r1, r5
 801190e:	f002 f8f5 	bl	8013afc <__aeabi_dmul>
 8011912:	e7eb      	b.n	80118ec <scalbn+0x58>
 8011914:	4c17      	ldr	r4, [pc, #92]	; (8011974 <scalbn+0xe0>)
 8011916:	4d19      	ldr	r5, [pc, #100]	; (801197c <scalbn+0xe8>)
 8011918:	4a16      	ldr	r2, [pc, #88]	; (8011974 <scalbn+0xe0>)
 801191a:	4b17      	ldr	r3, [pc, #92]	; (8011978 <scalbn+0xe4>)
 801191c:	0020      	movs	r0, r4
 801191e:	0029      	movs	r1, r5
 8011920:	f002 f8ec 	bl	8013afc <__aeabi_dmul>
 8011924:	e7e2      	b.n	80118ec <scalbn+0x58>
 8011926:	4c16      	ldr	r4, [pc, #88]	; (8011980 <scalbn+0xec>)
 8011928:	3336      	adds	r3, #54	; 0x36
 801192a:	4022      	ands	r2, r4
 801192c:	051b      	lsls	r3, r3, #20
 801192e:	4313      	orrs	r3, r2
 8011930:	0019      	movs	r1, r3
 8011932:	2200      	movs	r2, #0
 8011934:	4b13      	ldr	r3, [pc, #76]	; (8011984 <scalbn+0xf0>)
 8011936:	f002 f8e1 	bl	8013afc <__aeabi_dmul>
 801193a:	e7d7      	b.n	80118ec <scalbn+0x58>
 801193c:	4c10      	ldr	r4, [pc, #64]	; (8011980 <scalbn+0xec>)
 801193e:	051b      	lsls	r3, r3, #20
 8011940:	4022      	ands	r2, r4
 8011942:	431a      	orrs	r2, r3
 8011944:	0011      	movs	r1, r2
 8011946:	e7d1      	b.n	80118ec <scalbn+0x58>
 8011948:	4a07      	ldr	r2, [pc, #28]	; (8011968 <scalbn+0xd4>)
 801194a:	4b08      	ldr	r3, [pc, #32]	; (801196c <scalbn+0xd8>)
 801194c:	f002 f8d6 	bl	8013afc <__aeabi_dmul>
 8011950:	e7cc      	b.n	80118ec <scalbn+0x58>
 8011952:	4c05      	ldr	r4, [pc, #20]	; (8011968 <scalbn+0xd4>)
 8011954:	4d0c      	ldr	r5, [pc, #48]	; (8011988 <scalbn+0xf4>)
 8011956:	e7c3      	b.n	80118e0 <scalbn+0x4c>
 8011958:	43500000 	.word	0x43500000
 801195c:	ffff3cb0 	.word	0xffff3cb0
 8011960:	000007fe 	.word	0x000007fe
 8011964:	0000c350 	.word	0x0000c350
 8011968:	c2f8f359 	.word	0xc2f8f359
 801196c:	01a56e1f 	.word	0x01a56e1f
 8011970:	000007ff 	.word	0x000007ff
 8011974:	8800759c 	.word	0x8800759c
 8011978:	7e37e43c 	.word	0x7e37e43c
 801197c:	fe37e43c 	.word	0xfe37e43c
 8011980:	800fffff 	.word	0x800fffff
 8011984:	3c900000 	.word	0x3c900000
 8011988:	81a56e1f 	.word	0x81a56e1f

0801198c <pow>:
 801198c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801198e:	b083      	sub	sp, #12
 8011990:	001d      	movs	r5, r3
 8011992:	0006      	movs	r6, r0
 8011994:	000f      	movs	r7, r1
 8011996:	0014      	movs	r4, r2
 8011998:	f7ff f814 	bl	80109c4 <__ieee754_pow>
 801199c:	4b58      	ldr	r3, [pc, #352]	; (8011b00 <pow+0x174>)
 801199e:	9000      	str	r0, [sp, #0]
 80119a0:	9101      	str	r1, [sp, #4]
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	b25b      	sxtb	r3, r3
 80119a6:	3301      	adds	r3, #1
 80119a8:	d02d      	beq.n	8011a06 <pow+0x7a>
 80119aa:	0022      	movs	r2, r4
 80119ac:	002b      	movs	r3, r5
 80119ae:	0020      	movs	r0, r4
 80119b0:	0029      	movs	r1, r5
 80119b2:	f002 fea1 	bl	80146f8 <__aeabi_dcmpun>
 80119b6:	2800      	cmp	r0, #0
 80119b8:	d125      	bne.n	8011a06 <pow+0x7a>
 80119ba:	0032      	movs	r2, r6
 80119bc:	003b      	movs	r3, r7
 80119be:	0030      	movs	r0, r6
 80119c0:	0039      	movs	r1, r7
 80119c2:	f002 fe99 	bl	80146f8 <__aeabi_dcmpun>
 80119c6:	2200      	movs	r2, #0
 80119c8:	2300      	movs	r3, #0
 80119ca:	2800      	cmp	r0, #0
 80119cc:	d142      	bne.n	8011a54 <pow+0xc8>
 80119ce:	0030      	movs	r0, r6
 80119d0:	0039      	movs	r1, r7
 80119d2:	f000 fa23 	bl	8011e1c <__aeabi_dcmpeq>
 80119d6:	2800      	cmp	r0, #0
 80119d8:	d019      	beq.n	8011a0e <pow+0x82>
 80119da:	2200      	movs	r2, #0
 80119dc:	2300      	movs	r3, #0
 80119de:	0020      	movs	r0, r4
 80119e0:	0029      	movs	r1, r5
 80119e2:	f000 fa1b 	bl	8011e1c <__aeabi_dcmpeq>
 80119e6:	2800      	cmp	r0, #0
 80119e8:	d13a      	bne.n	8011a60 <pow+0xd4>
 80119ea:	0020      	movs	r0, r4
 80119ec:	0029      	movs	r1, r5
 80119ee:	f7ff feb9 	bl	8011764 <finite>
 80119f2:	2800      	cmp	r0, #0
 80119f4:	d007      	beq.n	8011a06 <pow+0x7a>
 80119f6:	2200      	movs	r2, #0
 80119f8:	2300      	movs	r3, #0
 80119fa:	0020      	movs	r0, r4
 80119fc:	0029      	movs	r1, r5
 80119fe:	f000 fa13 	bl	8011e28 <__aeabi_dcmplt>
 8011a02:	2800      	cmp	r0, #0
 8011a04:	d156      	bne.n	8011ab4 <pow+0x128>
 8011a06:	9800      	ldr	r0, [sp, #0]
 8011a08:	9901      	ldr	r1, [sp, #4]
 8011a0a:	b003      	add	sp, #12
 8011a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a0e:	9800      	ldr	r0, [sp, #0]
 8011a10:	9901      	ldr	r1, [sp, #4]
 8011a12:	f7ff fea7 	bl	8011764 <finite>
 8011a16:	2800      	cmp	r0, #0
 8011a18:	d027      	beq.n	8011a6a <pow+0xde>
 8011a1a:	9800      	ldr	r0, [sp, #0]
 8011a1c:	9901      	ldr	r1, [sp, #4]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	2300      	movs	r3, #0
 8011a22:	f000 f9fb 	bl	8011e1c <__aeabi_dcmpeq>
 8011a26:	2800      	cmp	r0, #0
 8011a28:	d0ed      	beq.n	8011a06 <pow+0x7a>
 8011a2a:	0030      	movs	r0, r6
 8011a2c:	0039      	movs	r1, r7
 8011a2e:	f7ff fe99 	bl	8011764 <finite>
 8011a32:	2800      	cmp	r0, #0
 8011a34:	d0e7      	beq.n	8011a06 <pow+0x7a>
 8011a36:	0020      	movs	r0, r4
 8011a38:	0029      	movs	r1, r5
 8011a3a:	f7ff fe93 	bl	8011764 <finite>
 8011a3e:	2800      	cmp	r0, #0
 8011a40:	d0e1      	beq.n	8011a06 <pow+0x7a>
 8011a42:	f002 ff31 	bl	80148a8 <__errno>
 8011a46:	2322      	movs	r3, #34	; 0x22
 8011a48:	2400      	movs	r4, #0
 8011a4a:	6003      	str	r3, [r0, #0]
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	9300      	str	r3, [sp, #0]
 8011a50:	9401      	str	r4, [sp, #4]
 8011a52:	e7d8      	b.n	8011a06 <pow+0x7a>
 8011a54:	0020      	movs	r0, r4
 8011a56:	0029      	movs	r1, r5
 8011a58:	f000 f9e0 	bl	8011e1c <__aeabi_dcmpeq>
 8011a5c:	2800      	cmp	r0, #0
 8011a5e:	d0d2      	beq.n	8011a06 <pow+0x7a>
 8011a60:	2300      	movs	r3, #0
 8011a62:	4c28      	ldr	r4, [pc, #160]	; (8011b04 <pow+0x178>)
 8011a64:	9300      	str	r3, [sp, #0]
 8011a66:	9401      	str	r4, [sp, #4]
 8011a68:	e7cd      	b.n	8011a06 <pow+0x7a>
 8011a6a:	0030      	movs	r0, r6
 8011a6c:	0039      	movs	r1, r7
 8011a6e:	f7ff fe79 	bl	8011764 <finite>
 8011a72:	2800      	cmp	r0, #0
 8011a74:	d0d1      	beq.n	8011a1a <pow+0x8e>
 8011a76:	0020      	movs	r0, r4
 8011a78:	0029      	movs	r1, r5
 8011a7a:	f7ff fe73 	bl	8011764 <finite>
 8011a7e:	2800      	cmp	r0, #0
 8011a80:	d0cb      	beq.n	8011a1a <pow+0x8e>
 8011a82:	9800      	ldr	r0, [sp, #0]
 8011a84:	9901      	ldr	r1, [sp, #4]
 8011a86:	0002      	movs	r2, r0
 8011a88:	000b      	movs	r3, r1
 8011a8a:	f002 fe35 	bl	80146f8 <__aeabi_dcmpun>
 8011a8e:	2800      	cmp	r0, #0
 8011a90:	d128      	bne.n	8011ae4 <pow+0x158>
 8011a92:	f002 ff09 	bl	80148a8 <__errno>
 8011a96:	2322      	movs	r3, #34	; 0x22
 8011a98:	2200      	movs	r2, #0
 8011a9a:	6003      	str	r3, [r0, #0]
 8011a9c:	0039      	movs	r1, r7
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	0030      	movs	r0, r6
 8011aa2:	f000 f9c1 	bl	8011e28 <__aeabi_dcmplt>
 8011aa6:	2800      	cmp	r0, #0
 8011aa8:	d10d      	bne.n	8011ac6 <pow+0x13a>
 8011aaa:	2300      	movs	r3, #0
 8011aac:	4c16      	ldr	r4, [pc, #88]	; (8011b08 <pow+0x17c>)
 8011aae:	9300      	str	r3, [sp, #0]
 8011ab0:	9401      	str	r4, [sp, #4]
 8011ab2:	e7a8      	b.n	8011a06 <pow+0x7a>
 8011ab4:	f002 fef8 	bl	80148a8 <__errno>
 8011ab8:	2321      	movs	r3, #33	; 0x21
 8011aba:	6003      	str	r3, [r0, #0]
 8011abc:	2300      	movs	r3, #0
 8011abe:	4c13      	ldr	r4, [pc, #76]	; (8011b0c <pow+0x180>)
 8011ac0:	9300      	str	r3, [sp, #0]
 8011ac2:	9401      	str	r4, [sp, #4]
 8011ac4:	e79f      	b.n	8011a06 <pow+0x7a>
 8011ac6:	0020      	movs	r0, r4
 8011ac8:	0029      	movs	r1, r5
 8011aca:	f7ff fe5b 	bl	8011784 <rint>
 8011ace:	0022      	movs	r2, r4
 8011ad0:	002b      	movs	r3, r5
 8011ad2:	f000 f9a3 	bl	8011e1c <__aeabi_dcmpeq>
 8011ad6:	2800      	cmp	r0, #0
 8011ad8:	d1e7      	bne.n	8011aaa <pow+0x11e>
 8011ada:	2300      	movs	r3, #0
 8011adc:	4c0b      	ldr	r4, [pc, #44]	; (8011b0c <pow+0x180>)
 8011ade:	9300      	str	r3, [sp, #0]
 8011ae0:	9401      	str	r4, [sp, #4]
 8011ae2:	e790      	b.n	8011a06 <pow+0x7a>
 8011ae4:	f002 fee0 	bl	80148a8 <__errno>
 8011ae8:	2321      	movs	r3, #33	; 0x21
 8011aea:	2200      	movs	r2, #0
 8011aec:	6003      	str	r3, [r0, #0]
 8011aee:	2300      	movs	r3, #0
 8011af0:	0010      	movs	r0, r2
 8011af2:	0019      	movs	r1, r3
 8011af4:	f001 fbfc 	bl	80132f0 <__aeabi_ddiv>
 8011af8:	9000      	str	r0, [sp, #0]
 8011afa:	9101      	str	r1, [sp, #4]
 8011afc:	e783      	b.n	8011a06 <pow+0x7a>
 8011afe:	46c0      	nop			; (mov r8, r8)
 8011b00:	200005d8 	.word	0x200005d8
 8011b04:	3ff00000 	.word	0x3ff00000
 8011b08:	7ff00000 	.word	0x7ff00000
 8011b0c:	fff00000 	.word	0xfff00000

08011b10 <__udivsi3>:
 8011b10:	2200      	movs	r2, #0
 8011b12:	0843      	lsrs	r3, r0, #1
 8011b14:	428b      	cmp	r3, r1
 8011b16:	d374      	bcc.n	8011c02 <__udivsi3+0xf2>
 8011b18:	0903      	lsrs	r3, r0, #4
 8011b1a:	428b      	cmp	r3, r1
 8011b1c:	d35f      	bcc.n	8011bde <__udivsi3+0xce>
 8011b1e:	0a03      	lsrs	r3, r0, #8
 8011b20:	428b      	cmp	r3, r1
 8011b22:	d344      	bcc.n	8011bae <__udivsi3+0x9e>
 8011b24:	0b03      	lsrs	r3, r0, #12
 8011b26:	428b      	cmp	r3, r1
 8011b28:	d328      	bcc.n	8011b7c <__udivsi3+0x6c>
 8011b2a:	0c03      	lsrs	r3, r0, #16
 8011b2c:	428b      	cmp	r3, r1
 8011b2e:	d30d      	bcc.n	8011b4c <__udivsi3+0x3c>
 8011b30:	22ff      	movs	r2, #255	; 0xff
 8011b32:	0209      	lsls	r1, r1, #8
 8011b34:	ba12      	rev	r2, r2
 8011b36:	0c03      	lsrs	r3, r0, #16
 8011b38:	428b      	cmp	r3, r1
 8011b3a:	d302      	bcc.n	8011b42 <__udivsi3+0x32>
 8011b3c:	1212      	asrs	r2, r2, #8
 8011b3e:	0209      	lsls	r1, r1, #8
 8011b40:	d065      	beq.n	8011c0e <__udivsi3+0xfe>
 8011b42:	0b03      	lsrs	r3, r0, #12
 8011b44:	428b      	cmp	r3, r1
 8011b46:	d319      	bcc.n	8011b7c <__udivsi3+0x6c>
 8011b48:	e000      	b.n	8011b4c <__udivsi3+0x3c>
 8011b4a:	0a09      	lsrs	r1, r1, #8
 8011b4c:	0bc3      	lsrs	r3, r0, #15
 8011b4e:	428b      	cmp	r3, r1
 8011b50:	d301      	bcc.n	8011b56 <__udivsi3+0x46>
 8011b52:	03cb      	lsls	r3, r1, #15
 8011b54:	1ac0      	subs	r0, r0, r3
 8011b56:	4152      	adcs	r2, r2
 8011b58:	0b83      	lsrs	r3, r0, #14
 8011b5a:	428b      	cmp	r3, r1
 8011b5c:	d301      	bcc.n	8011b62 <__udivsi3+0x52>
 8011b5e:	038b      	lsls	r3, r1, #14
 8011b60:	1ac0      	subs	r0, r0, r3
 8011b62:	4152      	adcs	r2, r2
 8011b64:	0b43      	lsrs	r3, r0, #13
 8011b66:	428b      	cmp	r3, r1
 8011b68:	d301      	bcc.n	8011b6e <__udivsi3+0x5e>
 8011b6a:	034b      	lsls	r3, r1, #13
 8011b6c:	1ac0      	subs	r0, r0, r3
 8011b6e:	4152      	adcs	r2, r2
 8011b70:	0b03      	lsrs	r3, r0, #12
 8011b72:	428b      	cmp	r3, r1
 8011b74:	d301      	bcc.n	8011b7a <__udivsi3+0x6a>
 8011b76:	030b      	lsls	r3, r1, #12
 8011b78:	1ac0      	subs	r0, r0, r3
 8011b7a:	4152      	adcs	r2, r2
 8011b7c:	0ac3      	lsrs	r3, r0, #11
 8011b7e:	428b      	cmp	r3, r1
 8011b80:	d301      	bcc.n	8011b86 <__udivsi3+0x76>
 8011b82:	02cb      	lsls	r3, r1, #11
 8011b84:	1ac0      	subs	r0, r0, r3
 8011b86:	4152      	adcs	r2, r2
 8011b88:	0a83      	lsrs	r3, r0, #10
 8011b8a:	428b      	cmp	r3, r1
 8011b8c:	d301      	bcc.n	8011b92 <__udivsi3+0x82>
 8011b8e:	028b      	lsls	r3, r1, #10
 8011b90:	1ac0      	subs	r0, r0, r3
 8011b92:	4152      	adcs	r2, r2
 8011b94:	0a43      	lsrs	r3, r0, #9
 8011b96:	428b      	cmp	r3, r1
 8011b98:	d301      	bcc.n	8011b9e <__udivsi3+0x8e>
 8011b9a:	024b      	lsls	r3, r1, #9
 8011b9c:	1ac0      	subs	r0, r0, r3
 8011b9e:	4152      	adcs	r2, r2
 8011ba0:	0a03      	lsrs	r3, r0, #8
 8011ba2:	428b      	cmp	r3, r1
 8011ba4:	d301      	bcc.n	8011baa <__udivsi3+0x9a>
 8011ba6:	020b      	lsls	r3, r1, #8
 8011ba8:	1ac0      	subs	r0, r0, r3
 8011baa:	4152      	adcs	r2, r2
 8011bac:	d2cd      	bcs.n	8011b4a <__udivsi3+0x3a>
 8011bae:	09c3      	lsrs	r3, r0, #7
 8011bb0:	428b      	cmp	r3, r1
 8011bb2:	d301      	bcc.n	8011bb8 <__udivsi3+0xa8>
 8011bb4:	01cb      	lsls	r3, r1, #7
 8011bb6:	1ac0      	subs	r0, r0, r3
 8011bb8:	4152      	adcs	r2, r2
 8011bba:	0983      	lsrs	r3, r0, #6
 8011bbc:	428b      	cmp	r3, r1
 8011bbe:	d301      	bcc.n	8011bc4 <__udivsi3+0xb4>
 8011bc0:	018b      	lsls	r3, r1, #6
 8011bc2:	1ac0      	subs	r0, r0, r3
 8011bc4:	4152      	adcs	r2, r2
 8011bc6:	0943      	lsrs	r3, r0, #5
 8011bc8:	428b      	cmp	r3, r1
 8011bca:	d301      	bcc.n	8011bd0 <__udivsi3+0xc0>
 8011bcc:	014b      	lsls	r3, r1, #5
 8011bce:	1ac0      	subs	r0, r0, r3
 8011bd0:	4152      	adcs	r2, r2
 8011bd2:	0903      	lsrs	r3, r0, #4
 8011bd4:	428b      	cmp	r3, r1
 8011bd6:	d301      	bcc.n	8011bdc <__udivsi3+0xcc>
 8011bd8:	010b      	lsls	r3, r1, #4
 8011bda:	1ac0      	subs	r0, r0, r3
 8011bdc:	4152      	adcs	r2, r2
 8011bde:	08c3      	lsrs	r3, r0, #3
 8011be0:	428b      	cmp	r3, r1
 8011be2:	d301      	bcc.n	8011be8 <__udivsi3+0xd8>
 8011be4:	00cb      	lsls	r3, r1, #3
 8011be6:	1ac0      	subs	r0, r0, r3
 8011be8:	4152      	adcs	r2, r2
 8011bea:	0883      	lsrs	r3, r0, #2
 8011bec:	428b      	cmp	r3, r1
 8011bee:	d301      	bcc.n	8011bf4 <__udivsi3+0xe4>
 8011bf0:	008b      	lsls	r3, r1, #2
 8011bf2:	1ac0      	subs	r0, r0, r3
 8011bf4:	4152      	adcs	r2, r2
 8011bf6:	0843      	lsrs	r3, r0, #1
 8011bf8:	428b      	cmp	r3, r1
 8011bfa:	d301      	bcc.n	8011c00 <__udivsi3+0xf0>
 8011bfc:	004b      	lsls	r3, r1, #1
 8011bfe:	1ac0      	subs	r0, r0, r3
 8011c00:	4152      	adcs	r2, r2
 8011c02:	1a41      	subs	r1, r0, r1
 8011c04:	d200      	bcs.n	8011c08 <__udivsi3+0xf8>
 8011c06:	4601      	mov	r1, r0
 8011c08:	4152      	adcs	r2, r2
 8011c0a:	4610      	mov	r0, r2
 8011c0c:	4770      	bx	lr
 8011c0e:	e7ff      	b.n	8011c10 <__udivsi3+0x100>
 8011c10:	b501      	push	{r0, lr}
 8011c12:	2000      	movs	r0, #0
 8011c14:	f000 f8f0 	bl	8011df8 <__aeabi_idiv0>
 8011c18:	bd02      	pop	{r1, pc}
 8011c1a:	46c0      	nop			; (mov r8, r8)

08011c1c <__aeabi_uidivmod>:
 8011c1c:	2900      	cmp	r1, #0
 8011c1e:	d0f7      	beq.n	8011c10 <__udivsi3+0x100>
 8011c20:	e776      	b.n	8011b10 <__udivsi3>
 8011c22:	4770      	bx	lr

08011c24 <__divsi3>:
 8011c24:	4603      	mov	r3, r0
 8011c26:	430b      	orrs	r3, r1
 8011c28:	d47f      	bmi.n	8011d2a <__divsi3+0x106>
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	0843      	lsrs	r3, r0, #1
 8011c2e:	428b      	cmp	r3, r1
 8011c30:	d374      	bcc.n	8011d1c <__divsi3+0xf8>
 8011c32:	0903      	lsrs	r3, r0, #4
 8011c34:	428b      	cmp	r3, r1
 8011c36:	d35f      	bcc.n	8011cf8 <__divsi3+0xd4>
 8011c38:	0a03      	lsrs	r3, r0, #8
 8011c3a:	428b      	cmp	r3, r1
 8011c3c:	d344      	bcc.n	8011cc8 <__divsi3+0xa4>
 8011c3e:	0b03      	lsrs	r3, r0, #12
 8011c40:	428b      	cmp	r3, r1
 8011c42:	d328      	bcc.n	8011c96 <__divsi3+0x72>
 8011c44:	0c03      	lsrs	r3, r0, #16
 8011c46:	428b      	cmp	r3, r1
 8011c48:	d30d      	bcc.n	8011c66 <__divsi3+0x42>
 8011c4a:	22ff      	movs	r2, #255	; 0xff
 8011c4c:	0209      	lsls	r1, r1, #8
 8011c4e:	ba12      	rev	r2, r2
 8011c50:	0c03      	lsrs	r3, r0, #16
 8011c52:	428b      	cmp	r3, r1
 8011c54:	d302      	bcc.n	8011c5c <__divsi3+0x38>
 8011c56:	1212      	asrs	r2, r2, #8
 8011c58:	0209      	lsls	r1, r1, #8
 8011c5a:	d065      	beq.n	8011d28 <__divsi3+0x104>
 8011c5c:	0b03      	lsrs	r3, r0, #12
 8011c5e:	428b      	cmp	r3, r1
 8011c60:	d319      	bcc.n	8011c96 <__divsi3+0x72>
 8011c62:	e000      	b.n	8011c66 <__divsi3+0x42>
 8011c64:	0a09      	lsrs	r1, r1, #8
 8011c66:	0bc3      	lsrs	r3, r0, #15
 8011c68:	428b      	cmp	r3, r1
 8011c6a:	d301      	bcc.n	8011c70 <__divsi3+0x4c>
 8011c6c:	03cb      	lsls	r3, r1, #15
 8011c6e:	1ac0      	subs	r0, r0, r3
 8011c70:	4152      	adcs	r2, r2
 8011c72:	0b83      	lsrs	r3, r0, #14
 8011c74:	428b      	cmp	r3, r1
 8011c76:	d301      	bcc.n	8011c7c <__divsi3+0x58>
 8011c78:	038b      	lsls	r3, r1, #14
 8011c7a:	1ac0      	subs	r0, r0, r3
 8011c7c:	4152      	adcs	r2, r2
 8011c7e:	0b43      	lsrs	r3, r0, #13
 8011c80:	428b      	cmp	r3, r1
 8011c82:	d301      	bcc.n	8011c88 <__divsi3+0x64>
 8011c84:	034b      	lsls	r3, r1, #13
 8011c86:	1ac0      	subs	r0, r0, r3
 8011c88:	4152      	adcs	r2, r2
 8011c8a:	0b03      	lsrs	r3, r0, #12
 8011c8c:	428b      	cmp	r3, r1
 8011c8e:	d301      	bcc.n	8011c94 <__divsi3+0x70>
 8011c90:	030b      	lsls	r3, r1, #12
 8011c92:	1ac0      	subs	r0, r0, r3
 8011c94:	4152      	adcs	r2, r2
 8011c96:	0ac3      	lsrs	r3, r0, #11
 8011c98:	428b      	cmp	r3, r1
 8011c9a:	d301      	bcc.n	8011ca0 <__divsi3+0x7c>
 8011c9c:	02cb      	lsls	r3, r1, #11
 8011c9e:	1ac0      	subs	r0, r0, r3
 8011ca0:	4152      	adcs	r2, r2
 8011ca2:	0a83      	lsrs	r3, r0, #10
 8011ca4:	428b      	cmp	r3, r1
 8011ca6:	d301      	bcc.n	8011cac <__divsi3+0x88>
 8011ca8:	028b      	lsls	r3, r1, #10
 8011caa:	1ac0      	subs	r0, r0, r3
 8011cac:	4152      	adcs	r2, r2
 8011cae:	0a43      	lsrs	r3, r0, #9
 8011cb0:	428b      	cmp	r3, r1
 8011cb2:	d301      	bcc.n	8011cb8 <__divsi3+0x94>
 8011cb4:	024b      	lsls	r3, r1, #9
 8011cb6:	1ac0      	subs	r0, r0, r3
 8011cb8:	4152      	adcs	r2, r2
 8011cba:	0a03      	lsrs	r3, r0, #8
 8011cbc:	428b      	cmp	r3, r1
 8011cbe:	d301      	bcc.n	8011cc4 <__divsi3+0xa0>
 8011cc0:	020b      	lsls	r3, r1, #8
 8011cc2:	1ac0      	subs	r0, r0, r3
 8011cc4:	4152      	adcs	r2, r2
 8011cc6:	d2cd      	bcs.n	8011c64 <__divsi3+0x40>
 8011cc8:	09c3      	lsrs	r3, r0, #7
 8011cca:	428b      	cmp	r3, r1
 8011ccc:	d301      	bcc.n	8011cd2 <__divsi3+0xae>
 8011cce:	01cb      	lsls	r3, r1, #7
 8011cd0:	1ac0      	subs	r0, r0, r3
 8011cd2:	4152      	adcs	r2, r2
 8011cd4:	0983      	lsrs	r3, r0, #6
 8011cd6:	428b      	cmp	r3, r1
 8011cd8:	d301      	bcc.n	8011cde <__divsi3+0xba>
 8011cda:	018b      	lsls	r3, r1, #6
 8011cdc:	1ac0      	subs	r0, r0, r3
 8011cde:	4152      	adcs	r2, r2
 8011ce0:	0943      	lsrs	r3, r0, #5
 8011ce2:	428b      	cmp	r3, r1
 8011ce4:	d301      	bcc.n	8011cea <__divsi3+0xc6>
 8011ce6:	014b      	lsls	r3, r1, #5
 8011ce8:	1ac0      	subs	r0, r0, r3
 8011cea:	4152      	adcs	r2, r2
 8011cec:	0903      	lsrs	r3, r0, #4
 8011cee:	428b      	cmp	r3, r1
 8011cf0:	d301      	bcc.n	8011cf6 <__divsi3+0xd2>
 8011cf2:	010b      	lsls	r3, r1, #4
 8011cf4:	1ac0      	subs	r0, r0, r3
 8011cf6:	4152      	adcs	r2, r2
 8011cf8:	08c3      	lsrs	r3, r0, #3
 8011cfa:	428b      	cmp	r3, r1
 8011cfc:	d301      	bcc.n	8011d02 <__divsi3+0xde>
 8011cfe:	00cb      	lsls	r3, r1, #3
 8011d00:	1ac0      	subs	r0, r0, r3
 8011d02:	4152      	adcs	r2, r2
 8011d04:	0883      	lsrs	r3, r0, #2
 8011d06:	428b      	cmp	r3, r1
 8011d08:	d301      	bcc.n	8011d0e <__divsi3+0xea>
 8011d0a:	008b      	lsls	r3, r1, #2
 8011d0c:	1ac0      	subs	r0, r0, r3
 8011d0e:	4152      	adcs	r2, r2
 8011d10:	0843      	lsrs	r3, r0, #1
 8011d12:	428b      	cmp	r3, r1
 8011d14:	d301      	bcc.n	8011d1a <__divsi3+0xf6>
 8011d16:	004b      	lsls	r3, r1, #1
 8011d18:	1ac0      	subs	r0, r0, r3
 8011d1a:	4152      	adcs	r2, r2
 8011d1c:	1a41      	subs	r1, r0, r1
 8011d1e:	d200      	bcs.n	8011d22 <__divsi3+0xfe>
 8011d20:	4601      	mov	r1, r0
 8011d22:	4152      	adcs	r2, r2
 8011d24:	4610      	mov	r0, r2
 8011d26:	4770      	bx	lr
 8011d28:	e05d      	b.n	8011de6 <__divsi3+0x1c2>
 8011d2a:	0fca      	lsrs	r2, r1, #31
 8011d2c:	d000      	beq.n	8011d30 <__divsi3+0x10c>
 8011d2e:	4249      	negs	r1, r1
 8011d30:	1003      	asrs	r3, r0, #32
 8011d32:	d300      	bcc.n	8011d36 <__divsi3+0x112>
 8011d34:	4240      	negs	r0, r0
 8011d36:	4053      	eors	r3, r2
 8011d38:	2200      	movs	r2, #0
 8011d3a:	469c      	mov	ip, r3
 8011d3c:	0903      	lsrs	r3, r0, #4
 8011d3e:	428b      	cmp	r3, r1
 8011d40:	d32d      	bcc.n	8011d9e <__divsi3+0x17a>
 8011d42:	0a03      	lsrs	r3, r0, #8
 8011d44:	428b      	cmp	r3, r1
 8011d46:	d312      	bcc.n	8011d6e <__divsi3+0x14a>
 8011d48:	22fc      	movs	r2, #252	; 0xfc
 8011d4a:	0189      	lsls	r1, r1, #6
 8011d4c:	ba12      	rev	r2, r2
 8011d4e:	0a03      	lsrs	r3, r0, #8
 8011d50:	428b      	cmp	r3, r1
 8011d52:	d30c      	bcc.n	8011d6e <__divsi3+0x14a>
 8011d54:	0189      	lsls	r1, r1, #6
 8011d56:	1192      	asrs	r2, r2, #6
 8011d58:	428b      	cmp	r3, r1
 8011d5a:	d308      	bcc.n	8011d6e <__divsi3+0x14a>
 8011d5c:	0189      	lsls	r1, r1, #6
 8011d5e:	1192      	asrs	r2, r2, #6
 8011d60:	428b      	cmp	r3, r1
 8011d62:	d304      	bcc.n	8011d6e <__divsi3+0x14a>
 8011d64:	0189      	lsls	r1, r1, #6
 8011d66:	d03a      	beq.n	8011dde <__divsi3+0x1ba>
 8011d68:	1192      	asrs	r2, r2, #6
 8011d6a:	e000      	b.n	8011d6e <__divsi3+0x14a>
 8011d6c:	0989      	lsrs	r1, r1, #6
 8011d6e:	09c3      	lsrs	r3, r0, #7
 8011d70:	428b      	cmp	r3, r1
 8011d72:	d301      	bcc.n	8011d78 <__divsi3+0x154>
 8011d74:	01cb      	lsls	r3, r1, #7
 8011d76:	1ac0      	subs	r0, r0, r3
 8011d78:	4152      	adcs	r2, r2
 8011d7a:	0983      	lsrs	r3, r0, #6
 8011d7c:	428b      	cmp	r3, r1
 8011d7e:	d301      	bcc.n	8011d84 <__divsi3+0x160>
 8011d80:	018b      	lsls	r3, r1, #6
 8011d82:	1ac0      	subs	r0, r0, r3
 8011d84:	4152      	adcs	r2, r2
 8011d86:	0943      	lsrs	r3, r0, #5
 8011d88:	428b      	cmp	r3, r1
 8011d8a:	d301      	bcc.n	8011d90 <__divsi3+0x16c>
 8011d8c:	014b      	lsls	r3, r1, #5
 8011d8e:	1ac0      	subs	r0, r0, r3
 8011d90:	4152      	adcs	r2, r2
 8011d92:	0903      	lsrs	r3, r0, #4
 8011d94:	428b      	cmp	r3, r1
 8011d96:	d301      	bcc.n	8011d9c <__divsi3+0x178>
 8011d98:	010b      	lsls	r3, r1, #4
 8011d9a:	1ac0      	subs	r0, r0, r3
 8011d9c:	4152      	adcs	r2, r2
 8011d9e:	08c3      	lsrs	r3, r0, #3
 8011da0:	428b      	cmp	r3, r1
 8011da2:	d301      	bcc.n	8011da8 <__divsi3+0x184>
 8011da4:	00cb      	lsls	r3, r1, #3
 8011da6:	1ac0      	subs	r0, r0, r3
 8011da8:	4152      	adcs	r2, r2
 8011daa:	0883      	lsrs	r3, r0, #2
 8011dac:	428b      	cmp	r3, r1
 8011dae:	d301      	bcc.n	8011db4 <__divsi3+0x190>
 8011db0:	008b      	lsls	r3, r1, #2
 8011db2:	1ac0      	subs	r0, r0, r3
 8011db4:	4152      	adcs	r2, r2
 8011db6:	d2d9      	bcs.n	8011d6c <__divsi3+0x148>
 8011db8:	0843      	lsrs	r3, r0, #1
 8011dba:	428b      	cmp	r3, r1
 8011dbc:	d301      	bcc.n	8011dc2 <__divsi3+0x19e>
 8011dbe:	004b      	lsls	r3, r1, #1
 8011dc0:	1ac0      	subs	r0, r0, r3
 8011dc2:	4152      	adcs	r2, r2
 8011dc4:	1a41      	subs	r1, r0, r1
 8011dc6:	d200      	bcs.n	8011dca <__divsi3+0x1a6>
 8011dc8:	4601      	mov	r1, r0
 8011dca:	4663      	mov	r3, ip
 8011dcc:	4152      	adcs	r2, r2
 8011dce:	105b      	asrs	r3, r3, #1
 8011dd0:	4610      	mov	r0, r2
 8011dd2:	d301      	bcc.n	8011dd8 <__divsi3+0x1b4>
 8011dd4:	4240      	negs	r0, r0
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d500      	bpl.n	8011ddc <__divsi3+0x1b8>
 8011dda:	4249      	negs	r1, r1
 8011ddc:	4770      	bx	lr
 8011dde:	4663      	mov	r3, ip
 8011de0:	105b      	asrs	r3, r3, #1
 8011de2:	d300      	bcc.n	8011de6 <__divsi3+0x1c2>
 8011de4:	4240      	negs	r0, r0
 8011de6:	b501      	push	{r0, lr}
 8011de8:	2000      	movs	r0, #0
 8011dea:	f000 f805 	bl	8011df8 <__aeabi_idiv0>
 8011dee:	bd02      	pop	{r1, pc}

08011df0 <__aeabi_idivmod>:
 8011df0:	2900      	cmp	r1, #0
 8011df2:	d0f8      	beq.n	8011de6 <__divsi3+0x1c2>
 8011df4:	e716      	b.n	8011c24 <__divsi3>
 8011df6:	4770      	bx	lr

08011df8 <__aeabi_idiv0>:
 8011df8:	4770      	bx	lr
 8011dfa:	46c0      	nop			; (mov r8, r8)

08011dfc <__aeabi_cdrcmple>:
 8011dfc:	4684      	mov	ip, r0
 8011dfe:	1c10      	adds	r0, r2, #0
 8011e00:	4662      	mov	r2, ip
 8011e02:	468c      	mov	ip, r1
 8011e04:	1c19      	adds	r1, r3, #0
 8011e06:	4663      	mov	r3, ip
 8011e08:	e000      	b.n	8011e0c <__aeabi_cdcmpeq>
 8011e0a:	46c0      	nop			; (mov r8, r8)

08011e0c <__aeabi_cdcmpeq>:
 8011e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e0e:	f001 fe05 	bl	8013a1c <__ledf2>
 8011e12:	2800      	cmp	r0, #0
 8011e14:	d401      	bmi.n	8011e1a <__aeabi_cdcmpeq+0xe>
 8011e16:	2100      	movs	r1, #0
 8011e18:	42c8      	cmn	r0, r1
 8011e1a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08011e1c <__aeabi_dcmpeq>:
 8011e1c:	b510      	push	{r4, lr}
 8011e1e:	f001 fd4f 	bl	80138c0 <__eqdf2>
 8011e22:	4240      	negs	r0, r0
 8011e24:	3001      	adds	r0, #1
 8011e26:	bd10      	pop	{r4, pc}

08011e28 <__aeabi_dcmplt>:
 8011e28:	b510      	push	{r4, lr}
 8011e2a:	f001 fdf7 	bl	8013a1c <__ledf2>
 8011e2e:	2800      	cmp	r0, #0
 8011e30:	db01      	blt.n	8011e36 <__aeabi_dcmplt+0xe>
 8011e32:	2000      	movs	r0, #0
 8011e34:	bd10      	pop	{r4, pc}
 8011e36:	2001      	movs	r0, #1
 8011e38:	bd10      	pop	{r4, pc}
 8011e3a:	46c0      	nop			; (mov r8, r8)

08011e3c <__aeabi_dcmple>:
 8011e3c:	b510      	push	{r4, lr}
 8011e3e:	f001 fded 	bl	8013a1c <__ledf2>
 8011e42:	2800      	cmp	r0, #0
 8011e44:	dd01      	ble.n	8011e4a <__aeabi_dcmple+0xe>
 8011e46:	2000      	movs	r0, #0
 8011e48:	bd10      	pop	{r4, pc}
 8011e4a:	2001      	movs	r0, #1
 8011e4c:	bd10      	pop	{r4, pc}
 8011e4e:	46c0      	nop			; (mov r8, r8)

08011e50 <__aeabi_dcmpgt>:
 8011e50:	b510      	push	{r4, lr}
 8011e52:	f001 fd71 	bl	8013938 <__gedf2>
 8011e56:	2800      	cmp	r0, #0
 8011e58:	dc01      	bgt.n	8011e5e <__aeabi_dcmpgt+0xe>
 8011e5a:	2000      	movs	r0, #0
 8011e5c:	bd10      	pop	{r4, pc}
 8011e5e:	2001      	movs	r0, #1
 8011e60:	bd10      	pop	{r4, pc}
 8011e62:	46c0      	nop			; (mov r8, r8)

08011e64 <__aeabi_dcmpge>:
 8011e64:	b510      	push	{r4, lr}
 8011e66:	f001 fd67 	bl	8013938 <__gedf2>
 8011e6a:	2800      	cmp	r0, #0
 8011e6c:	da01      	bge.n	8011e72 <__aeabi_dcmpge+0xe>
 8011e6e:	2000      	movs	r0, #0
 8011e70:	bd10      	pop	{r4, pc}
 8011e72:	2001      	movs	r0, #1
 8011e74:	bd10      	pop	{r4, pc}
 8011e76:	46c0      	nop			; (mov r8, r8)

08011e78 <__aeabi_cfrcmple>:
 8011e78:	4684      	mov	ip, r0
 8011e7a:	1c08      	adds	r0, r1, #0
 8011e7c:	4661      	mov	r1, ip
 8011e7e:	e7ff      	b.n	8011e80 <__aeabi_cfcmpeq>

08011e80 <__aeabi_cfcmpeq>:
 8011e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e82:	f000 fafd 	bl	8012480 <__lesf2>
 8011e86:	2800      	cmp	r0, #0
 8011e88:	d401      	bmi.n	8011e8e <__aeabi_cfcmpeq+0xe>
 8011e8a:	2100      	movs	r1, #0
 8011e8c:	42c8      	cmn	r0, r1
 8011e8e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08011e90 <__aeabi_fcmpeq>:
 8011e90:	b510      	push	{r4, lr}
 8011e92:	f000 fa81 	bl	8012398 <__eqsf2>
 8011e96:	4240      	negs	r0, r0
 8011e98:	3001      	adds	r0, #1
 8011e9a:	bd10      	pop	{r4, pc}

08011e9c <__aeabi_fcmplt>:
 8011e9c:	b510      	push	{r4, lr}
 8011e9e:	f000 faef 	bl	8012480 <__lesf2>
 8011ea2:	2800      	cmp	r0, #0
 8011ea4:	db01      	blt.n	8011eaa <__aeabi_fcmplt+0xe>
 8011ea6:	2000      	movs	r0, #0
 8011ea8:	bd10      	pop	{r4, pc}
 8011eaa:	2001      	movs	r0, #1
 8011eac:	bd10      	pop	{r4, pc}
 8011eae:	46c0      	nop			; (mov r8, r8)

08011eb0 <__aeabi_fcmple>:
 8011eb0:	b510      	push	{r4, lr}
 8011eb2:	f000 fae5 	bl	8012480 <__lesf2>
 8011eb6:	2800      	cmp	r0, #0
 8011eb8:	dd01      	ble.n	8011ebe <__aeabi_fcmple+0xe>
 8011eba:	2000      	movs	r0, #0
 8011ebc:	bd10      	pop	{r4, pc}
 8011ebe:	2001      	movs	r0, #1
 8011ec0:	bd10      	pop	{r4, pc}
 8011ec2:	46c0      	nop			; (mov r8, r8)

08011ec4 <__aeabi_fcmpgt>:
 8011ec4:	b510      	push	{r4, lr}
 8011ec6:	f000 fa8f 	bl	80123e8 <__gesf2>
 8011eca:	2800      	cmp	r0, #0
 8011ecc:	dc01      	bgt.n	8011ed2 <__aeabi_fcmpgt+0xe>
 8011ece:	2000      	movs	r0, #0
 8011ed0:	bd10      	pop	{r4, pc}
 8011ed2:	2001      	movs	r0, #1
 8011ed4:	bd10      	pop	{r4, pc}
 8011ed6:	46c0      	nop			; (mov r8, r8)

08011ed8 <__aeabi_fcmpge>:
 8011ed8:	b510      	push	{r4, lr}
 8011eda:	f000 fa85 	bl	80123e8 <__gesf2>
 8011ede:	2800      	cmp	r0, #0
 8011ee0:	da01      	bge.n	8011ee6 <__aeabi_fcmpge+0xe>
 8011ee2:	2000      	movs	r0, #0
 8011ee4:	bd10      	pop	{r4, pc}
 8011ee6:	2001      	movs	r0, #1
 8011ee8:	bd10      	pop	{r4, pc}
 8011eea:	46c0      	nop			; (mov r8, r8)

08011eec <__aeabi_uldivmod>:
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d111      	bne.n	8011f14 <__aeabi_uldivmod+0x28>
 8011ef0:	2a00      	cmp	r2, #0
 8011ef2:	d10f      	bne.n	8011f14 <__aeabi_uldivmod+0x28>
 8011ef4:	2900      	cmp	r1, #0
 8011ef6:	d100      	bne.n	8011efa <__aeabi_uldivmod+0xe>
 8011ef8:	2800      	cmp	r0, #0
 8011efa:	d002      	beq.n	8011f02 <__aeabi_uldivmod+0x16>
 8011efc:	2100      	movs	r1, #0
 8011efe:	43c9      	mvns	r1, r1
 8011f00:	1c08      	adds	r0, r1, #0
 8011f02:	b407      	push	{r0, r1, r2}
 8011f04:	4802      	ldr	r0, [pc, #8]	; (8011f10 <__aeabi_uldivmod+0x24>)
 8011f06:	a102      	add	r1, pc, #8	; (adr r1, 8011f10 <__aeabi_uldivmod+0x24>)
 8011f08:	1840      	adds	r0, r0, r1
 8011f0a:	9002      	str	r0, [sp, #8]
 8011f0c:	bd03      	pop	{r0, r1, pc}
 8011f0e:	46c0      	nop			; (mov r8, r8)
 8011f10:	fffffee9 	.word	0xfffffee9
 8011f14:	b403      	push	{r0, r1}
 8011f16:	4668      	mov	r0, sp
 8011f18:	b501      	push	{r0, lr}
 8011f1a:	9802      	ldr	r0, [sp, #8]
 8011f1c:	f000 f864 	bl	8011fe8 <__udivmoddi4>
 8011f20:	9b01      	ldr	r3, [sp, #4]
 8011f22:	469e      	mov	lr, r3
 8011f24:	b002      	add	sp, #8
 8011f26:	bc0c      	pop	{r2, r3}
 8011f28:	4770      	bx	lr
 8011f2a:	46c0      	nop			; (mov r8, r8)

08011f2c <__aeabi_lmul>:
 8011f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f2e:	0415      	lsls	r5, r2, #16
 8011f30:	0c2d      	lsrs	r5, r5, #16
 8011f32:	000f      	movs	r7, r1
 8011f34:	0001      	movs	r1, r0
 8011f36:	002e      	movs	r6, r5
 8011f38:	46c6      	mov	lr, r8
 8011f3a:	4684      	mov	ip, r0
 8011f3c:	0400      	lsls	r0, r0, #16
 8011f3e:	0c14      	lsrs	r4, r2, #16
 8011f40:	0c00      	lsrs	r0, r0, #16
 8011f42:	0c09      	lsrs	r1, r1, #16
 8011f44:	4346      	muls	r6, r0
 8011f46:	434d      	muls	r5, r1
 8011f48:	4360      	muls	r0, r4
 8011f4a:	4361      	muls	r1, r4
 8011f4c:	1940      	adds	r0, r0, r5
 8011f4e:	0c34      	lsrs	r4, r6, #16
 8011f50:	1824      	adds	r4, r4, r0
 8011f52:	b500      	push	{lr}
 8011f54:	42a5      	cmp	r5, r4
 8011f56:	d903      	bls.n	8011f60 <__aeabi_lmul+0x34>
 8011f58:	2080      	movs	r0, #128	; 0x80
 8011f5a:	0240      	lsls	r0, r0, #9
 8011f5c:	4680      	mov	r8, r0
 8011f5e:	4441      	add	r1, r8
 8011f60:	0c25      	lsrs	r5, r4, #16
 8011f62:	186d      	adds	r5, r5, r1
 8011f64:	4661      	mov	r1, ip
 8011f66:	4359      	muls	r1, r3
 8011f68:	437a      	muls	r2, r7
 8011f6a:	0430      	lsls	r0, r6, #16
 8011f6c:	1949      	adds	r1, r1, r5
 8011f6e:	0424      	lsls	r4, r4, #16
 8011f70:	0c00      	lsrs	r0, r0, #16
 8011f72:	1820      	adds	r0, r4, r0
 8011f74:	1889      	adds	r1, r1, r2
 8011f76:	bc04      	pop	{r2}
 8011f78:	4690      	mov	r8, r2
 8011f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011f7c <__aeabi_f2uiz>:
 8011f7c:	219e      	movs	r1, #158	; 0x9e
 8011f7e:	b510      	push	{r4, lr}
 8011f80:	05c9      	lsls	r1, r1, #23
 8011f82:	1c04      	adds	r4, r0, #0
 8011f84:	f7ff ffa8 	bl	8011ed8 <__aeabi_fcmpge>
 8011f88:	2800      	cmp	r0, #0
 8011f8a:	d103      	bne.n	8011f94 <__aeabi_f2uiz+0x18>
 8011f8c:	1c20      	adds	r0, r4, #0
 8011f8e:	f000 fda3 	bl	8012ad8 <__aeabi_f2iz>
 8011f92:	bd10      	pop	{r4, pc}
 8011f94:	219e      	movs	r1, #158	; 0x9e
 8011f96:	1c20      	adds	r0, r4, #0
 8011f98:	05c9      	lsls	r1, r1, #23
 8011f9a:	f000 fbd5 	bl	8012748 <__aeabi_fsub>
 8011f9e:	f000 fd9b 	bl	8012ad8 <__aeabi_f2iz>
 8011fa2:	2380      	movs	r3, #128	; 0x80
 8011fa4:	061b      	lsls	r3, r3, #24
 8011fa6:	469c      	mov	ip, r3
 8011fa8:	4460      	add	r0, ip
 8011faa:	e7f2      	b.n	8011f92 <__aeabi_f2uiz+0x16>

08011fac <__aeabi_d2uiz>:
 8011fac:	b570      	push	{r4, r5, r6, lr}
 8011fae:	2200      	movs	r2, #0
 8011fb0:	4b0c      	ldr	r3, [pc, #48]	; (8011fe4 <__aeabi_d2uiz+0x38>)
 8011fb2:	0004      	movs	r4, r0
 8011fb4:	000d      	movs	r5, r1
 8011fb6:	f7ff ff55 	bl	8011e64 <__aeabi_dcmpge>
 8011fba:	2800      	cmp	r0, #0
 8011fbc:	d104      	bne.n	8011fc8 <__aeabi_d2uiz+0x1c>
 8011fbe:	0020      	movs	r0, r4
 8011fc0:	0029      	movs	r1, r5
 8011fc2:	f002 fbb7 	bl	8014734 <__aeabi_d2iz>
 8011fc6:	bd70      	pop	{r4, r5, r6, pc}
 8011fc8:	4b06      	ldr	r3, [pc, #24]	; (8011fe4 <__aeabi_d2uiz+0x38>)
 8011fca:	2200      	movs	r2, #0
 8011fcc:	0020      	movs	r0, r4
 8011fce:	0029      	movs	r1, r5
 8011fd0:	f002 f800 	bl	8013fd4 <__aeabi_dsub>
 8011fd4:	f002 fbae 	bl	8014734 <__aeabi_d2iz>
 8011fd8:	2380      	movs	r3, #128	; 0x80
 8011fda:	061b      	lsls	r3, r3, #24
 8011fdc:	469c      	mov	ip, r3
 8011fde:	4460      	add	r0, ip
 8011fe0:	e7f1      	b.n	8011fc6 <__aeabi_d2uiz+0x1a>
 8011fe2:	46c0      	nop			; (mov r8, r8)
 8011fe4:	41e00000 	.word	0x41e00000

08011fe8 <__udivmoddi4>:
 8011fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fea:	4657      	mov	r7, sl
 8011fec:	464e      	mov	r6, r9
 8011fee:	4645      	mov	r5, r8
 8011ff0:	46de      	mov	lr, fp
 8011ff2:	b5e0      	push	{r5, r6, r7, lr}
 8011ff4:	0004      	movs	r4, r0
 8011ff6:	000d      	movs	r5, r1
 8011ff8:	4692      	mov	sl, r2
 8011ffa:	4699      	mov	r9, r3
 8011ffc:	b083      	sub	sp, #12
 8011ffe:	428b      	cmp	r3, r1
 8012000:	d830      	bhi.n	8012064 <__udivmoddi4+0x7c>
 8012002:	d02d      	beq.n	8012060 <__udivmoddi4+0x78>
 8012004:	4649      	mov	r1, r9
 8012006:	4650      	mov	r0, sl
 8012008:	f002 fc3e 	bl	8014888 <__clzdi2>
 801200c:	0029      	movs	r1, r5
 801200e:	0006      	movs	r6, r0
 8012010:	0020      	movs	r0, r4
 8012012:	f002 fc39 	bl	8014888 <__clzdi2>
 8012016:	1a33      	subs	r3, r6, r0
 8012018:	4698      	mov	r8, r3
 801201a:	3b20      	subs	r3, #32
 801201c:	469b      	mov	fp, r3
 801201e:	d433      	bmi.n	8012088 <__udivmoddi4+0xa0>
 8012020:	465a      	mov	r2, fp
 8012022:	4653      	mov	r3, sl
 8012024:	4093      	lsls	r3, r2
 8012026:	4642      	mov	r2, r8
 8012028:	001f      	movs	r7, r3
 801202a:	4653      	mov	r3, sl
 801202c:	4093      	lsls	r3, r2
 801202e:	001e      	movs	r6, r3
 8012030:	42af      	cmp	r7, r5
 8012032:	d83a      	bhi.n	80120aa <__udivmoddi4+0xc2>
 8012034:	42af      	cmp	r7, r5
 8012036:	d100      	bne.n	801203a <__udivmoddi4+0x52>
 8012038:	e078      	b.n	801212c <__udivmoddi4+0x144>
 801203a:	465b      	mov	r3, fp
 801203c:	1ba4      	subs	r4, r4, r6
 801203e:	41bd      	sbcs	r5, r7
 8012040:	2b00      	cmp	r3, #0
 8012042:	da00      	bge.n	8012046 <__udivmoddi4+0x5e>
 8012044:	e075      	b.n	8012132 <__udivmoddi4+0x14a>
 8012046:	2200      	movs	r2, #0
 8012048:	2300      	movs	r3, #0
 801204a:	9200      	str	r2, [sp, #0]
 801204c:	9301      	str	r3, [sp, #4]
 801204e:	2301      	movs	r3, #1
 8012050:	465a      	mov	r2, fp
 8012052:	4093      	lsls	r3, r2
 8012054:	9301      	str	r3, [sp, #4]
 8012056:	2301      	movs	r3, #1
 8012058:	4642      	mov	r2, r8
 801205a:	4093      	lsls	r3, r2
 801205c:	9300      	str	r3, [sp, #0]
 801205e:	e028      	b.n	80120b2 <__udivmoddi4+0xca>
 8012060:	4282      	cmp	r2, r0
 8012062:	d9cf      	bls.n	8012004 <__udivmoddi4+0x1c>
 8012064:	2200      	movs	r2, #0
 8012066:	2300      	movs	r3, #0
 8012068:	9200      	str	r2, [sp, #0]
 801206a:	9301      	str	r3, [sp, #4]
 801206c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801206e:	2b00      	cmp	r3, #0
 8012070:	d001      	beq.n	8012076 <__udivmoddi4+0x8e>
 8012072:	601c      	str	r4, [r3, #0]
 8012074:	605d      	str	r5, [r3, #4]
 8012076:	9800      	ldr	r0, [sp, #0]
 8012078:	9901      	ldr	r1, [sp, #4]
 801207a:	b003      	add	sp, #12
 801207c:	bc3c      	pop	{r2, r3, r4, r5}
 801207e:	4690      	mov	r8, r2
 8012080:	4699      	mov	r9, r3
 8012082:	46a2      	mov	sl, r4
 8012084:	46ab      	mov	fp, r5
 8012086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012088:	4642      	mov	r2, r8
 801208a:	2320      	movs	r3, #32
 801208c:	1a9b      	subs	r3, r3, r2
 801208e:	4652      	mov	r2, sl
 8012090:	40da      	lsrs	r2, r3
 8012092:	4641      	mov	r1, r8
 8012094:	0013      	movs	r3, r2
 8012096:	464a      	mov	r2, r9
 8012098:	408a      	lsls	r2, r1
 801209a:	0017      	movs	r7, r2
 801209c:	4642      	mov	r2, r8
 801209e:	431f      	orrs	r7, r3
 80120a0:	4653      	mov	r3, sl
 80120a2:	4093      	lsls	r3, r2
 80120a4:	001e      	movs	r6, r3
 80120a6:	42af      	cmp	r7, r5
 80120a8:	d9c4      	bls.n	8012034 <__udivmoddi4+0x4c>
 80120aa:	2200      	movs	r2, #0
 80120ac:	2300      	movs	r3, #0
 80120ae:	9200      	str	r2, [sp, #0]
 80120b0:	9301      	str	r3, [sp, #4]
 80120b2:	4643      	mov	r3, r8
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d0d9      	beq.n	801206c <__udivmoddi4+0x84>
 80120b8:	07fb      	lsls	r3, r7, #31
 80120ba:	0872      	lsrs	r2, r6, #1
 80120bc:	431a      	orrs	r2, r3
 80120be:	4646      	mov	r6, r8
 80120c0:	087b      	lsrs	r3, r7, #1
 80120c2:	e00e      	b.n	80120e2 <__udivmoddi4+0xfa>
 80120c4:	42ab      	cmp	r3, r5
 80120c6:	d101      	bne.n	80120cc <__udivmoddi4+0xe4>
 80120c8:	42a2      	cmp	r2, r4
 80120ca:	d80c      	bhi.n	80120e6 <__udivmoddi4+0xfe>
 80120cc:	1aa4      	subs	r4, r4, r2
 80120ce:	419d      	sbcs	r5, r3
 80120d0:	2001      	movs	r0, #1
 80120d2:	1924      	adds	r4, r4, r4
 80120d4:	416d      	adcs	r5, r5
 80120d6:	2100      	movs	r1, #0
 80120d8:	3e01      	subs	r6, #1
 80120da:	1824      	adds	r4, r4, r0
 80120dc:	414d      	adcs	r5, r1
 80120de:	2e00      	cmp	r6, #0
 80120e0:	d006      	beq.n	80120f0 <__udivmoddi4+0x108>
 80120e2:	42ab      	cmp	r3, r5
 80120e4:	d9ee      	bls.n	80120c4 <__udivmoddi4+0xdc>
 80120e6:	3e01      	subs	r6, #1
 80120e8:	1924      	adds	r4, r4, r4
 80120ea:	416d      	adcs	r5, r5
 80120ec:	2e00      	cmp	r6, #0
 80120ee:	d1f8      	bne.n	80120e2 <__udivmoddi4+0xfa>
 80120f0:	9800      	ldr	r0, [sp, #0]
 80120f2:	9901      	ldr	r1, [sp, #4]
 80120f4:	465b      	mov	r3, fp
 80120f6:	1900      	adds	r0, r0, r4
 80120f8:	4169      	adcs	r1, r5
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	db24      	blt.n	8012148 <__udivmoddi4+0x160>
 80120fe:	002b      	movs	r3, r5
 8012100:	465a      	mov	r2, fp
 8012102:	4644      	mov	r4, r8
 8012104:	40d3      	lsrs	r3, r2
 8012106:	002a      	movs	r2, r5
 8012108:	40e2      	lsrs	r2, r4
 801210a:	001c      	movs	r4, r3
 801210c:	465b      	mov	r3, fp
 801210e:	0015      	movs	r5, r2
 8012110:	2b00      	cmp	r3, #0
 8012112:	db2a      	blt.n	801216a <__udivmoddi4+0x182>
 8012114:	0026      	movs	r6, r4
 8012116:	409e      	lsls	r6, r3
 8012118:	0033      	movs	r3, r6
 801211a:	0026      	movs	r6, r4
 801211c:	4647      	mov	r7, r8
 801211e:	40be      	lsls	r6, r7
 8012120:	0032      	movs	r2, r6
 8012122:	1a80      	subs	r0, r0, r2
 8012124:	4199      	sbcs	r1, r3
 8012126:	9000      	str	r0, [sp, #0]
 8012128:	9101      	str	r1, [sp, #4]
 801212a:	e79f      	b.n	801206c <__udivmoddi4+0x84>
 801212c:	42a3      	cmp	r3, r4
 801212e:	d8bc      	bhi.n	80120aa <__udivmoddi4+0xc2>
 8012130:	e783      	b.n	801203a <__udivmoddi4+0x52>
 8012132:	4642      	mov	r2, r8
 8012134:	2320      	movs	r3, #32
 8012136:	2100      	movs	r1, #0
 8012138:	1a9b      	subs	r3, r3, r2
 801213a:	2200      	movs	r2, #0
 801213c:	9100      	str	r1, [sp, #0]
 801213e:	9201      	str	r2, [sp, #4]
 8012140:	2201      	movs	r2, #1
 8012142:	40da      	lsrs	r2, r3
 8012144:	9201      	str	r2, [sp, #4]
 8012146:	e786      	b.n	8012056 <__udivmoddi4+0x6e>
 8012148:	4642      	mov	r2, r8
 801214a:	2320      	movs	r3, #32
 801214c:	1a9b      	subs	r3, r3, r2
 801214e:	002a      	movs	r2, r5
 8012150:	4646      	mov	r6, r8
 8012152:	409a      	lsls	r2, r3
 8012154:	0023      	movs	r3, r4
 8012156:	40f3      	lsrs	r3, r6
 8012158:	4644      	mov	r4, r8
 801215a:	4313      	orrs	r3, r2
 801215c:	002a      	movs	r2, r5
 801215e:	40e2      	lsrs	r2, r4
 8012160:	001c      	movs	r4, r3
 8012162:	465b      	mov	r3, fp
 8012164:	0015      	movs	r5, r2
 8012166:	2b00      	cmp	r3, #0
 8012168:	dad4      	bge.n	8012114 <__udivmoddi4+0x12c>
 801216a:	4642      	mov	r2, r8
 801216c:	002f      	movs	r7, r5
 801216e:	2320      	movs	r3, #32
 8012170:	0026      	movs	r6, r4
 8012172:	4097      	lsls	r7, r2
 8012174:	1a9b      	subs	r3, r3, r2
 8012176:	40de      	lsrs	r6, r3
 8012178:	003b      	movs	r3, r7
 801217a:	4333      	orrs	r3, r6
 801217c:	e7cd      	b.n	801211a <__udivmoddi4+0x132>
 801217e:	46c0      	nop			; (mov r8, r8)

08012180 <__aeabi_fdiv>:
 8012180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012182:	464f      	mov	r7, r9
 8012184:	4646      	mov	r6, r8
 8012186:	46d6      	mov	lr, sl
 8012188:	0245      	lsls	r5, r0, #9
 801218a:	b5c0      	push	{r6, r7, lr}
 801218c:	0047      	lsls	r7, r0, #1
 801218e:	1c0c      	adds	r4, r1, #0
 8012190:	0a6d      	lsrs	r5, r5, #9
 8012192:	0e3f      	lsrs	r7, r7, #24
 8012194:	0fc6      	lsrs	r6, r0, #31
 8012196:	2f00      	cmp	r7, #0
 8012198:	d066      	beq.n	8012268 <__aeabi_fdiv+0xe8>
 801219a:	2fff      	cmp	r7, #255	; 0xff
 801219c:	d06c      	beq.n	8012278 <__aeabi_fdiv+0xf8>
 801219e:	2300      	movs	r3, #0
 80121a0:	00ea      	lsls	r2, r5, #3
 80121a2:	2580      	movs	r5, #128	; 0x80
 80121a4:	4699      	mov	r9, r3
 80121a6:	469a      	mov	sl, r3
 80121a8:	04ed      	lsls	r5, r5, #19
 80121aa:	4315      	orrs	r5, r2
 80121ac:	3f7f      	subs	r7, #127	; 0x7f
 80121ae:	0260      	lsls	r0, r4, #9
 80121b0:	0061      	lsls	r1, r4, #1
 80121b2:	0a43      	lsrs	r3, r0, #9
 80121b4:	4698      	mov	r8, r3
 80121b6:	0e09      	lsrs	r1, r1, #24
 80121b8:	0fe4      	lsrs	r4, r4, #31
 80121ba:	2900      	cmp	r1, #0
 80121bc:	d048      	beq.n	8012250 <__aeabi_fdiv+0xd0>
 80121be:	29ff      	cmp	r1, #255	; 0xff
 80121c0:	d010      	beq.n	80121e4 <__aeabi_fdiv+0x64>
 80121c2:	2280      	movs	r2, #128	; 0x80
 80121c4:	00d8      	lsls	r0, r3, #3
 80121c6:	04d2      	lsls	r2, r2, #19
 80121c8:	4302      	orrs	r2, r0
 80121ca:	4690      	mov	r8, r2
 80121cc:	2000      	movs	r0, #0
 80121ce:	397f      	subs	r1, #127	; 0x7f
 80121d0:	464a      	mov	r2, r9
 80121d2:	0033      	movs	r3, r6
 80121d4:	1a7f      	subs	r7, r7, r1
 80121d6:	4302      	orrs	r2, r0
 80121d8:	496c      	ldr	r1, [pc, #432]	; (801238c <__aeabi_fdiv+0x20c>)
 80121da:	0092      	lsls	r2, r2, #2
 80121dc:	588a      	ldr	r2, [r1, r2]
 80121de:	4063      	eors	r3, r4
 80121e0:	b2db      	uxtb	r3, r3
 80121e2:	4697      	mov	pc, r2
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d16d      	bne.n	80122c4 <__aeabi_fdiv+0x144>
 80121e8:	2002      	movs	r0, #2
 80121ea:	3fff      	subs	r7, #255	; 0xff
 80121ec:	e033      	b.n	8012256 <__aeabi_fdiv+0xd6>
 80121ee:	2300      	movs	r3, #0
 80121f0:	4698      	mov	r8, r3
 80121f2:	0026      	movs	r6, r4
 80121f4:	4645      	mov	r5, r8
 80121f6:	4682      	mov	sl, r0
 80121f8:	4653      	mov	r3, sl
 80121fa:	2b02      	cmp	r3, #2
 80121fc:	d100      	bne.n	8012200 <__aeabi_fdiv+0x80>
 80121fe:	e07f      	b.n	8012300 <__aeabi_fdiv+0x180>
 8012200:	2b03      	cmp	r3, #3
 8012202:	d100      	bne.n	8012206 <__aeabi_fdiv+0x86>
 8012204:	e094      	b.n	8012330 <__aeabi_fdiv+0x1b0>
 8012206:	2b01      	cmp	r3, #1
 8012208:	d017      	beq.n	801223a <__aeabi_fdiv+0xba>
 801220a:	0038      	movs	r0, r7
 801220c:	307f      	adds	r0, #127	; 0x7f
 801220e:	2800      	cmp	r0, #0
 8012210:	dd5f      	ble.n	80122d2 <__aeabi_fdiv+0x152>
 8012212:	076b      	lsls	r3, r5, #29
 8012214:	d004      	beq.n	8012220 <__aeabi_fdiv+0xa0>
 8012216:	230f      	movs	r3, #15
 8012218:	402b      	ands	r3, r5
 801221a:	2b04      	cmp	r3, #4
 801221c:	d000      	beq.n	8012220 <__aeabi_fdiv+0xa0>
 801221e:	3504      	adds	r5, #4
 8012220:	012b      	lsls	r3, r5, #4
 8012222:	d503      	bpl.n	801222c <__aeabi_fdiv+0xac>
 8012224:	0038      	movs	r0, r7
 8012226:	4b5a      	ldr	r3, [pc, #360]	; (8012390 <__aeabi_fdiv+0x210>)
 8012228:	3080      	adds	r0, #128	; 0x80
 801222a:	401d      	ands	r5, r3
 801222c:	28fe      	cmp	r0, #254	; 0xfe
 801222e:	dc67      	bgt.n	8012300 <__aeabi_fdiv+0x180>
 8012230:	01ad      	lsls	r5, r5, #6
 8012232:	0a6d      	lsrs	r5, r5, #9
 8012234:	b2c0      	uxtb	r0, r0
 8012236:	e002      	b.n	801223e <__aeabi_fdiv+0xbe>
 8012238:	001e      	movs	r6, r3
 801223a:	2000      	movs	r0, #0
 801223c:	2500      	movs	r5, #0
 801223e:	05c0      	lsls	r0, r0, #23
 8012240:	4328      	orrs	r0, r5
 8012242:	07f6      	lsls	r6, r6, #31
 8012244:	4330      	orrs	r0, r6
 8012246:	bc1c      	pop	{r2, r3, r4}
 8012248:	4690      	mov	r8, r2
 801224a:	4699      	mov	r9, r3
 801224c:	46a2      	mov	sl, r4
 801224e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012250:	2b00      	cmp	r3, #0
 8012252:	d12b      	bne.n	80122ac <__aeabi_fdiv+0x12c>
 8012254:	2001      	movs	r0, #1
 8012256:	464a      	mov	r2, r9
 8012258:	0033      	movs	r3, r6
 801225a:	494e      	ldr	r1, [pc, #312]	; (8012394 <__aeabi_fdiv+0x214>)
 801225c:	4302      	orrs	r2, r0
 801225e:	0092      	lsls	r2, r2, #2
 8012260:	588a      	ldr	r2, [r1, r2]
 8012262:	4063      	eors	r3, r4
 8012264:	b2db      	uxtb	r3, r3
 8012266:	4697      	mov	pc, r2
 8012268:	2d00      	cmp	r5, #0
 801226a:	d113      	bne.n	8012294 <__aeabi_fdiv+0x114>
 801226c:	2304      	movs	r3, #4
 801226e:	4699      	mov	r9, r3
 8012270:	3b03      	subs	r3, #3
 8012272:	2700      	movs	r7, #0
 8012274:	469a      	mov	sl, r3
 8012276:	e79a      	b.n	80121ae <__aeabi_fdiv+0x2e>
 8012278:	2d00      	cmp	r5, #0
 801227a:	d105      	bne.n	8012288 <__aeabi_fdiv+0x108>
 801227c:	2308      	movs	r3, #8
 801227e:	4699      	mov	r9, r3
 8012280:	3b06      	subs	r3, #6
 8012282:	27ff      	movs	r7, #255	; 0xff
 8012284:	469a      	mov	sl, r3
 8012286:	e792      	b.n	80121ae <__aeabi_fdiv+0x2e>
 8012288:	230c      	movs	r3, #12
 801228a:	4699      	mov	r9, r3
 801228c:	3b09      	subs	r3, #9
 801228e:	27ff      	movs	r7, #255	; 0xff
 8012290:	469a      	mov	sl, r3
 8012292:	e78c      	b.n	80121ae <__aeabi_fdiv+0x2e>
 8012294:	0028      	movs	r0, r5
 8012296:	f002 fad9 	bl	801484c <__clzsi2>
 801229a:	2776      	movs	r7, #118	; 0x76
 801229c:	1f43      	subs	r3, r0, #5
 801229e:	409d      	lsls	r5, r3
 80122a0:	2300      	movs	r3, #0
 80122a2:	427f      	negs	r7, r7
 80122a4:	4699      	mov	r9, r3
 80122a6:	469a      	mov	sl, r3
 80122a8:	1a3f      	subs	r7, r7, r0
 80122aa:	e780      	b.n	80121ae <__aeabi_fdiv+0x2e>
 80122ac:	0018      	movs	r0, r3
 80122ae:	f002 facd 	bl	801484c <__clzsi2>
 80122b2:	4642      	mov	r2, r8
 80122b4:	1f43      	subs	r3, r0, #5
 80122b6:	2176      	movs	r1, #118	; 0x76
 80122b8:	409a      	lsls	r2, r3
 80122ba:	4249      	negs	r1, r1
 80122bc:	1a09      	subs	r1, r1, r0
 80122be:	4690      	mov	r8, r2
 80122c0:	2000      	movs	r0, #0
 80122c2:	e785      	b.n	80121d0 <__aeabi_fdiv+0x50>
 80122c4:	21ff      	movs	r1, #255	; 0xff
 80122c6:	2003      	movs	r0, #3
 80122c8:	e782      	b.n	80121d0 <__aeabi_fdiv+0x50>
 80122ca:	001e      	movs	r6, r3
 80122cc:	20ff      	movs	r0, #255	; 0xff
 80122ce:	2500      	movs	r5, #0
 80122d0:	e7b5      	b.n	801223e <__aeabi_fdiv+0xbe>
 80122d2:	2301      	movs	r3, #1
 80122d4:	1a1b      	subs	r3, r3, r0
 80122d6:	2b1b      	cmp	r3, #27
 80122d8:	dcaf      	bgt.n	801223a <__aeabi_fdiv+0xba>
 80122da:	379e      	adds	r7, #158	; 0x9e
 80122dc:	0029      	movs	r1, r5
 80122de:	40bd      	lsls	r5, r7
 80122e0:	40d9      	lsrs	r1, r3
 80122e2:	1e6a      	subs	r2, r5, #1
 80122e4:	4195      	sbcs	r5, r2
 80122e6:	430d      	orrs	r5, r1
 80122e8:	076b      	lsls	r3, r5, #29
 80122ea:	d004      	beq.n	80122f6 <__aeabi_fdiv+0x176>
 80122ec:	230f      	movs	r3, #15
 80122ee:	402b      	ands	r3, r5
 80122f0:	2b04      	cmp	r3, #4
 80122f2:	d000      	beq.n	80122f6 <__aeabi_fdiv+0x176>
 80122f4:	3504      	adds	r5, #4
 80122f6:	016b      	lsls	r3, r5, #5
 80122f8:	d544      	bpl.n	8012384 <__aeabi_fdiv+0x204>
 80122fa:	2001      	movs	r0, #1
 80122fc:	2500      	movs	r5, #0
 80122fe:	e79e      	b.n	801223e <__aeabi_fdiv+0xbe>
 8012300:	20ff      	movs	r0, #255	; 0xff
 8012302:	2500      	movs	r5, #0
 8012304:	e79b      	b.n	801223e <__aeabi_fdiv+0xbe>
 8012306:	2580      	movs	r5, #128	; 0x80
 8012308:	2600      	movs	r6, #0
 801230a:	20ff      	movs	r0, #255	; 0xff
 801230c:	03ed      	lsls	r5, r5, #15
 801230e:	e796      	b.n	801223e <__aeabi_fdiv+0xbe>
 8012310:	2300      	movs	r3, #0
 8012312:	4698      	mov	r8, r3
 8012314:	2080      	movs	r0, #128	; 0x80
 8012316:	03c0      	lsls	r0, r0, #15
 8012318:	4205      	tst	r5, r0
 801231a:	d009      	beq.n	8012330 <__aeabi_fdiv+0x1b0>
 801231c:	4643      	mov	r3, r8
 801231e:	4203      	tst	r3, r0
 8012320:	d106      	bne.n	8012330 <__aeabi_fdiv+0x1b0>
 8012322:	4645      	mov	r5, r8
 8012324:	4305      	orrs	r5, r0
 8012326:	026d      	lsls	r5, r5, #9
 8012328:	0026      	movs	r6, r4
 801232a:	20ff      	movs	r0, #255	; 0xff
 801232c:	0a6d      	lsrs	r5, r5, #9
 801232e:	e786      	b.n	801223e <__aeabi_fdiv+0xbe>
 8012330:	2080      	movs	r0, #128	; 0x80
 8012332:	03c0      	lsls	r0, r0, #15
 8012334:	4305      	orrs	r5, r0
 8012336:	026d      	lsls	r5, r5, #9
 8012338:	20ff      	movs	r0, #255	; 0xff
 801233a:	0a6d      	lsrs	r5, r5, #9
 801233c:	e77f      	b.n	801223e <__aeabi_fdiv+0xbe>
 801233e:	4641      	mov	r1, r8
 8012340:	016a      	lsls	r2, r5, #5
 8012342:	0148      	lsls	r0, r1, #5
 8012344:	4282      	cmp	r2, r0
 8012346:	d219      	bcs.n	801237c <__aeabi_fdiv+0x1fc>
 8012348:	211b      	movs	r1, #27
 801234a:	2500      	movs	r5, #0
 801234c:	3f01      	subs	r7, #1
 801234e:	2601      	movs	r6, #1
 8012350:	0014      	movs	r4, r2
 8012352:	006d      	lsls	r5, r5, #1
 8012354:	0052      	lsls	r2, r2, #1
 8012356:	2c00      	cmp	r4, #0
 8012358:	db01      	blt.n	801235e <__aeabi_fdiv+0x1de>
 801235a:	4290      	cmp	r0, r2
 801235c:	d801      	bhi.n	8012362 <__aeabi_fdiv+0x1e2>
 801235e:	1a12      	subs	r2, r2, r0
 8012360:	4335      	orrs	r5, r6
 8012362:	3901      	subs	r1, #1
 8012364:	2900      	cmp	r1, #0
 8012366:	d1f3      	bne.n	8012350 <__aeabi_fdiv+0x1d0>
 8012368:	1e50      	subs	r0, r2, #1
 801236a:	4182      	sbcs	r2, r0
 801236c:	0038      	movs	r0, r7
 801236e:	307f      	adds	r0, #127	; 0x7f
 8012370:	001e      	movs	r6, r3
 8012372:	4315      	orrs	r5, r2
 8012374:	2800      	cmp	r0, #0
 8012376:	dd00      	ble.n	801237a <__aeabi_fdiv+0x1fa>
 8012378:	e74b      	b.n	8012212 <__aeabi_fdiv+0x92>
 801237a:	e7aa      	b.n	80122d2 <__aeabi_fdiv+0x152>
 801237c:	211a      	movs	r1, #26
 801237e:	2501      	movs	r5, #1
 8012380:	1a12      	subs	r2, r2, r0
 8012382:	e7e4      	b.n	801234e <__aeabi_fdiv+0x1ce>
 8012384:	01ad      	lsls	r5, r5, #6
 8012386:	2000      	movs	r0, #0
 8012388:	0a6d      	lsrs	r5, r5, #9
 801238a:	e758      	b.n	801223e <__aeabi_fdiv+0xbe>
 801238c:	0801ac00 	.word	0x0801ac00
 8012390:	f7ffffff 	.word	0xf7ffffff
 8012394:	0801ac40 	.word	0x0801ac40

08012398 <__eqsf2>:
 8012398:	b570      	push	{r4, r5, r6, lr}
 801239a:	0042      	lsls	r2, r0, #1
 801239c:	024e      	lsls	r6, r1, #9
 801239e:	004c      	lsls	r4, r1, #1
 80123a0:	0245      	lsls	r5, r0, #9
 80123a2:	0a6d      	lsrs	r5, r5, #9
 80123a4:	0e12      	lsrs	r2, r2, #24
 80123a6:	0fc3      	lsrs	r3, r0, #31
 80123a8:	0a76      	lsrs	r6, r6, #9
 80123aa:	0e24      	lsrs	r4, r4, #24
 80123ac:	0fc9      	lsrs	r1, r1, #31
 80123ae:	2aff      	cmp	r2, #255	; 0xff
 80123b0:	d00f      	beq.n	80123d2 <__eqsf2+0x3a>
 80123b2:	2cff      	cmp	r4, #255	; 0xff
 80123b4:	d011      	beq.n	80123da <__eqsf2+0x42>
 80123b6:	2001      	movs	r0, #1
 80123b8:	42a2      	cmp	r2, r4
 80123ba:	d000      	beq.n	80123be <__eqsf2+0x26>
 80123bc:	bd70      	pop	{r4, r5, r6, pc}
 80123be:	42b5      	cmp	r5, r6
 80123c0:	d1fc      	bne.n	80123bc <__eqsf2+0x24>
 80123c2:	428b      	cmp	r3, r1
 80123c4:	d00d      	beq.n	80123e2 <__eqsf2+0x4a>
 80123c6:	2a00      	cmp	r2, #0
 80123c8:	d1f8      	bne.n	80123bc <__eqsf2+0x24>
 80123ca:	0028      	movs	r0, r5
 80123cc:	1e45      	subs	r5, r0, #1
 80123ce:	41a8      	sbcs	r0, r5
 80123d0:	e7f4      	b.n	80123bc <__eqsf2+0x24>
 80123d2:	2001      	movs	r0, #1
 80123d4:	2d00      	cmp	r5, #0
 80123d6:	d1f1      	bne.n	80123bc <__eqsf2+0x24>
 80123d8:	e7eb      	b.n	80123b2 <__eqsf2+0x1a>
 80123da:	2001      	movs	r0, #1
 80123dc:	2e00      	cmp	r6, #0
 80123de:	d1ed      	bne.n	80123bc <__eqsf2+0x24>
 80123e0:	e7e9      	b.n	80123b6 <__eqsf2+0x1e>
 80123e2:	2000      	movs	r0, #0
 80123e4:	e7ea      	b.n	80123bc <__eqsf2+0x24>
 80123e6:	46c0      	nop			; (mov r8, r8)

080123e8 <__gesf2>:
 80123e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123ea:	0042      	lsls	r2, r0, #1
 80123ec:	0246      	lsls	r6, r0, #9
 80123ee:	024d      	lsls	r5, r1, #9
 80123f0:	004c      	lsls	r4, r1, #1
 80123f2:	0fc3      	lsrs	r3, r0, #31
 80123f4:	0a76      	lsrs	r6, r6, #9
 80123f6:	0e12      	lsrs	r2, r2, #24
 80123f8:	0a6d      	lsrs	r5, r5, #9
 80123fa:	0e24      	lsrs	r4, r4, #24
 80123fc:	0fc8      	lsrs	r0, r1, #31
 80123fe:	2aff      	cmp	r2, #255	; 0xff
 8012400:	d01f      	beq.n	8012442 <__gesf2+0x5a>
 8012402:	2cff      	cmp	r4, #255	; 0xff
 8012404:	d010      	beq.n	8012428 <__gesf2+0x40>
 8012406:	2a00      	cmp	r2, #0
 8012408:	d11f      	bne.n	801244a <__gesf2+0x62>
 801240a:	4271      	negs	r1, r6
 801240c:	4171      	adcs	r1, r6
 801240e:	2c00      	cmp	r4, #0
 8012410:	d101      	bne.n	8012416 <__gesf2+0x2e>
 8012412:	2d00      	cmp	r5, #0
 8012414:	d01e      	beq.n	8012454 <__gesf2+0x6c>
 8012416:	2900      	cmp	r1, #0
 8012418:	d10e      	bne.n	8012438 <__gesf2+0x50>
 801241a:	4283      	cmp	r3, r0
 801241c:	d01e      	beq.n	801245c <__gesf2+0x74>
 801241e:	2102      	movs	r1, #2
 8012420:	1e58      	subs	r0, r3, #1
 8012422:	4008      	ands	r0, r1
 8012424:	3801      	subs	r0, #1
 8012426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012428:	2d00      	cmp	r5, #0
 801242a:	d126      	bne.n	801247a <__gesf2+0x92>
 801242c:	2a00      	cmp	r2, #0
 801242e:	d1f4      	bne.n	801241a <__gesf2+0x32>
 8012430:	4271      	negs	r1, r6
 8012432:	4171      	adcs	r1, r6
 8012434:	2900      	cmp	r1, #0
 8012436:	d0f0      	beq.n	801241a <__gesf2+0x32>
 8012438:	2800      	cmp	r0, #0
 801243a:	d1f4      	bne.n	8012426 <__gesf2+0x3e>
 801243c:	2001      	movs	r0, #1
 801243e:	4240      	negs	r0, r0
 8012440:	e7f1      	b.n	8012426 <__gesf2+0x3e>
 8012442:	2e00      	cmp	r6, #0
 8012444:	d119      	bne.n	801247a <__gesf2+0x92>
 8012446:	2cff      	cmp	r4, #255	; 0xff
 8012448:	d0ee      	beq.n	8012428 <__gesf2+0x40>
 801244a:	2c00      	cmp	r4, #0
 801244c:	d1e5      	bne.n	801241a <__gesf2+0x32>
 801244e:	2d00      	cmp	r5, #0
 8012450:	d1e3      	bne.n	801241a <__gesf2+0x32>
 8012452:	e7e4      	b.n	801241e <__gesf2+0x36>
 8012454:	2000      	movs	r0, #0
 8012456:	2e00      	cmp	r6, #0
 8012458:	d0e5      	beq.n	8012426 <__gesf2+0x3e>
 801245a:	e7e0      	b.n	801241e <__gesf2+0x36>
 801245c:	42a2      	cmp	r2, r4
 801245e:	dc05      	bgt.n	801246c <__gesf2+0x84>
 8012460:	dbea      	blt.n	8012438 <__gesf2+0x50>
 8012462:	42ae      	cmp	r6, r5
 8012464:	d802      	bhi.n	801246c <__gesf2+0x84>
 8012466:	d3e7      	bcc.n	8012438 <__gesf2+0x50>
 8012468:	2000      	movs	r0, #0
 801246a:	e7dc      	b.n	8012426 <__gesf2+0x3e>
 801246c:	4241      	negs	r1, r0
 801246e:	4141      	adcs	r1, r0
 8012470:	4248      	negs	r0, r1
 8012472:	2102      	movs	r1, #2
 8012474:	4008      	ands	r0, r1
 8012476:	3801      	subs	r0, #1
 8012478:	e7d5      	b.n	8012426 <__gesf2+0x3e>
 801247a:	2002      	movs	r0, #2
 801247c:	4240      	negs	r0, r0
 801247e:	e7d2      	b.n	8012426 <__gesf2+0x3e>

08012480 <__lesf2>:
 8012480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012482:	0042      	lsls	r2, r0, #1
 8012484:	0246      	lsls	r6, r0, #9
 8012486:	024d      	lsls	r5, r1, #9
 8012488:	004c      	lsls	r4, r1, #1
 801248a:	0fc3      	lsrs	r3, r0, #31
 801248c:	0a76      	lsrs	r6, r6, #9
 801248e:	0e12      	lsrs	r2, r2, #24
 8012490:	0a6d      	lsrs	r5, r5, #9
 8012492:	0e24      	lsrs	r4, r4, #24
 8012494:	0fc8      	lsrs	r0, r1, #31
 8012496:	2aff      	cmp	r2, #255	; 0xff
 8012498:	d00d      	beq.n	80124b6 <__lesf2+0x36>
 801249a:	2cff      	cmp	r4, #255	; 0xff
 801249c:	d00f      	beq.n	80124be <__lesf2+0x3e>
 801249e:	2a00      	cmp	r2, #0
 80124a0:	d123      	bne.n	80124ea <__lesf2+0x6a>
 80124a2:	4271      	negs	r1, r6
 80124a4:	4171      	adcs	r1, r6
 80124a6:	2c00      	cmp	r4, #0
 80124a8:	d10f      	bne.n	80124ca <__lesf2+0x4a>
 80124aa:	2d00      	cmp	r5, #0
 80124ac:	d10d      	bne.n	80124ca <__lesf2+0x4a>
 80124ae:	2000      	movs	r0, #0
 80124b0:	2e00      	cmp	r6, #0
 80124b2:	d014      	beq.n	80124de <__lesf2+0x5e>
 80124b4:	e00d      	b.n	80124d2 <__lesf2+0x52>
 80124b6:	2e00      	cmp	r6, #0
 80124b8:	d110      	bne.n	80124dc <__lesf2+0x5c>
 80124ba:	2cff      	cmp	r4, #255	; 0xff
 80124bc:	d115      	bne.n	80124ea <__lesf2+0x6a>
 80124be:	2d00      	cmp	r5, #0
 80124c0:	d10c      	bne.n	80124dc <__lesf2+0x5c>
 80124c2:	2a00      	cmp	r2, #0
 80124c4:	d103      	bne.n	80124ce <__lesf2+0x4e>
 80124c6:	4271      	negs	r1, r6
 80124c8:	4171      	adcs	r1, r6
 80124ca:	2900      	cmp	r1, #0
 80124cc:	d108      	bne.n	80124e0 <__lesf2+0x60>
 80124ce:	4283      	cmp	r3, r0
 80124d0:	d010      	beq.n	80124f4 <__lesf2+0x74>
 80124d2:	2102      	movs	r1, #2
 80124d4:	1e58      	subs	r0, r3, #1
 80124d6:	4008      	ands	r0, r1
 80124d8:	3801      	subs	r0, #1
 80124da:	e000      	b.n	80124de <__lesf2+0x5e>
 80124dc:	2002      	movs	r0, #2
 80124de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124e0:	2800      	cmp	r0, #0
 80124e2:	d1fc      	bne.n	80124de <__lesf2+0x5e>
 80124e4:	2001      	movs	r0, #1
 80124e6:	4240      	negs	r0, r0
 80124e8:	e7f9      	b.n	80124de <__lesf2+0x5e>
 80124ea:	2c00      	cmp	r4, #0
 80124ec:	d1ef      	bne.n	80124ce <__lesf2+0x4e>
 80124ee:	2d00      	cmp	r5, #0
 80124f0:	d1ed      	bne.n	80124ce <__lesf2+0x4e>
 80124f2:	e7ee      	b.n	80124d2 <__lesf2+0x52>
 80124f4:	42a2      	cmp	r2, r4
 80124f6:	dc05      	bgt.n	8012504 <__lesf2+0x84>
 80124f8:	dbf2      	blt.n	80124e0 <__lesf2+0x60>
 80124fa:	42ae      	cmp	r6, r5
 80124fc:	d802      	bhi.n	8012504 <__lesf2+0x84>
 80124fe:	d3ef      	bcc.n	80124e0 <__lesf2+0x60>
 8012500:	2000      	movs	r0, #0
 8012502:	e7ec      	b.n	80124de <__lesf2+0x5e>
 8012504:	4241      	negs	r1, r0
 8012506:	4141      	adcs	r1, r0
 8012508:	4248      	negs	r0, r1
 801250a:	2102      	movs	r1, #2
 801250c:	4008      	ands	r0, r1
 801250e:	3801      	subs	r0, #1
 8012510:	e7e5      	b.n	80124de <__lesf2+0x5e>
 8012512:	46c0      	nop			; (mov r8, r8)

08012514 <__aeabi_fmul>:
 8012514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012516:	4657      	mov	r7, sl
 8012518:	464e      	mov	r6, r9
 801251a:	4645      	mov	r5, r8
 801251c:	46de      	mov	lr, fp
 801251e:	0244      	lsls	r4, r0, #9
 8012520:	b5e0      	push	{r5, r6, r7, lr}
 8012522:	0045      	lsls	r5, r0, #1
 8012524:	1c0f      	adds	r7, r1, #0
 8012526:	0a64      	lsrs	r4, r4, #9
 8012528:	0e2d      	lsrs	r5, r5, #24
 801252a:	0fc6      	lsrs	r6, r0, #31
 801252c:	2d00      	cmp	r5, #0
 801252e:	d047      	beq.n	80125c0 <__aeabi_fmul+0xac>
 8012530:	2dff      	cmp	r5, #255	; 0xff
 8012532:	d04d      	beq.n	80125d0 <__aeabi_fmul+0xbc>
 8012534:	2300      	movs	r3, #0
 8012536:	2080      	movs	r0, #128	; 0x80
 8012538:	469a      	mov	sl, r3
 801253a:	469b      	mov	fp, r3
 801253c:	00e4      	lsls	r4, r4, #3
 801253e:	04c0      	lsls	r0, r0, #19
 8012540:	4304      	orrs	r4, r0
 8012542:	3d7f      	subs	r5, #127	; 0x7f
 8012544:	0278      	lsls	r0, r7, #9
 8012546:	0a43      	lsrs	r3, r0, #9
 8012548:	4699      	mov	r9, r3
 801254a:	007a      	lsls	r2, r7, #1
 801254c:	0ffb      	lsrs	r3, r7, #31
 801254e:	4698      	mov	r8, r3
 8012550:	0e12      	lsrs	r2, r2, #24
 8012552:	464b      	mov	r3, r9
 8012554:	d044      	beq.n	80125e0 <__aeabi_fmul+0xcc>
 8012556:	2aff      	cmp	r2, #255	; 0xff
 8012558:	d011      	beq.n	801257e <__aeabi_fmul+0x6a>
 801255a:	00d8      	lsls	r0, r3, #3
 801255c:	2380      	movs	r3, #128	; 0x80
 801255e:	04db      	lsls	r3, r3, #19
 8012560:	4303      	orrs	r3, r0
 8012562:	4699      	mov	r9, r3
 8012564:	2000      	movs	r0, #0
 8012566:	3a7f      	subs	r2, #127	; 0x7f
 8012568:	18ad      	adds	r5, r5, r2
 801256a:	4647      	mov	r7, r8
 801256c:	4653      	mov	r3, sl
 801256e:	4077      	eors	r7, r6
 8012570:	1c69      	adds	r1, r5, #1
 8012572:	2b0f      	cmp	r3, #15
 8012574:	d83f      	bhi.n	80125f6 <__aeabi_fmul+0xe2>
 8012576:	4a72      	ldr	r2, [pc, #456]	; (8012740 <__aeabi_fmul+0x22c>)
 8012578:	009b      	lsls	r3, r3, #2
 801257a:	58d3      	ldr	r3, [r2, r3]
 801257c:	469f      	mov	pc, r3
 801257e:	35ff      	adds	r5, #255	; 0xff
 8012580:	2b00      	cmp	r3, #0
 8012582:	d000      	beq.n	8012586 <__aeabi_fmul+0x72>
 8012584:	e079      	b.n	801267a <__aeabi_fmul+0x166>
 8012586:	4652      	mov	r2, sl
 8012588:	2302      	movs	r3, #2
 801258a:	431a      	orrs	r2, r3
 801258c:	4692      	mov	sl, r2
 801258e:	2002      	movs	r0, #2
 8012590:	e7eb      	b.n	801256a <__aeabi_fmul+0x56>
 8012592:	4647      	mov	r7, r8
 8012594:	464c      	mov	r4, r9
 8012596:	4683      	mov	fp, r0
 8012598:	465b      	mov	r3, fp
 801259a:	2b02      	cmp	r3, #2
 801259c:	d028      	beq.n	80125f0 <__aeabi_fmul+0xdc>
 801259e:	2b03      	cmp	r3, #3
 80125a0:	d100      	bne.n	80125a4 <__aeabi_fmul+0x90>
 80125a2:	e0c6      	b.n	8012732 <__aeabi_fmul+0x21e>
 80125a4:	2b01      	cmp	r3, #1
 80125a6:	d14f      	bne.n	8012648 <__aeabi_fmul+0x134>
 80125a8:	2000      	movs	r0, #0
 80125aa:	2400      	movs	r4, #0
 80125ac:	05c0      	lsls	r0, r0, #23
 80125ae:	07ff      	lsls	r7, r7, #31
 80125b0:	4320      	orrs	r0, r4
 80125b2:	4338      	orrs	r0, r7
 80125b4:	bc3c      	pop	{r2, r3, r4, r5}
 80125b6:	4690      	mov	r8, r2
 80125b8:	4699      	mov	r9, r3
 80125ba:	46a2      	mov	sl, r4
 80125bc:	46ab      	mov	fp, r5
 80125be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125c0:	2c00      	cmp	r4, #0
 80125c2:	d171      	bne.n	80126a8 <__aeabi_fmul+0x194>
 80125c4:	2304      	movs	r3, #4
 80125c6:	469a      	mov	sl, r3
 80125c8:	3b03      	subs	r3, #3
 80125ca:	2500      	movs	r5, #0
 80125cc:	469b      	mov	fp, r3
 80125ce:	e7b9      	b.n	8012544 <__aeabi_fmul+0x30>
 80125d0:	2c00      	cmp	r4, #0
 80125d2:	d163      	bne.n	801269c <__aeabi_fmul+0x188>
 80125d4:	2308      	movs	r3, #8
 80125d6:	469a      	mov	sl, r3
 80125d8:	3b06      	subs	r3, #6
 80125da:	25ff      	movs	r5, #255	; 0xff
 80125dc:	469b      	mov	fp, r3
 80125de:	e7b1      	b.n	8012544 <__aeabi_fmul+0x30>
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d150      	bne.n	8012686 <__aeabi_fmul+0x172>
 80125e4:	4652      	mov	r2, sl
 80125e6:	3301      	adds	r3, #1
 80125e8:	431a      	orrs	r2, r3
 80125ea:	4692      	mov	sl, r2
 80125ec:	2001      	movs	r0, #1
 80125ee:	e7bc      	b.n	801256a <__aeabi_fmul+0x56>
 80125f0:	20ff      	movs	r0, #255	; 0xff
 80125f2:	2400      	movs	r4, #0
 80125f4:	e7da      	b.n	80125ac <__aeabi_fmul+0x98>
 80125f6:	4648      	mov	r0, r9
 80125f8:	0c26      	lsrs	r6, r4, #16
 80125fa:	0424      	lsls	r4, r4, #16
 80125fc:	0c22      	lsrs	r2, r4, #16
 80125fe:	0404      	lsls	r4, r0, #16
 8012600:	0c24      	lsrs	r4, r4, #16
 8012602:	464b      	mov	r3, r9
 8012604:	0020      	movs	r0, r4
 8012606:	0c1b      	lsrs	r3, r3, #16
 8012608:	4350      	muls	r0, r2
 801260a:	4374      	muls	r4, r6
 801260c:	435a      	muls	r2, r3
 801260e:	435e      	muls	r6, r3
 8012610:	1912      	adds	r2, r2, r4
 8012612:	0c03      	lsrs	r3, r0, #16
 8012614:	189b      	adds	r3, r3, r2
 8012616:	429c      	cmp	r4, r3
 8012618:	d903      	bls.n	8012622 <__aeabi_fmul+0x10e>
 801261a:	2280      	movs	r2, #128	; 0x80
 801261c:	0252      	lsls	r2, r2, #9
 801261e:	4694      	mov	ip, r2
 8012620:	4466      	add	r6, ip
 8012622:	0400      	lsls	r0, r0, #16
 8012624:	041a      	lsls	r2, r3, #16
 8012626:	0c00      	lsrs	r0, r0, #16
 8012628:	1812      	adds	r2, r2, r0
 801262a:	0194      	lsls	r4, r2, #6
 801262c:	1e60      	subs	r0, r4, #1
 801262e:	4184      	sbcs	r4, r0
 8012630:	0c1b      	lsrs	r3, r3, #16
 8012632:	0e92      	lsrs	r2, r2, #26
 8012634:	199b      	adds	r3, r3, r6
 8012636:	4314      	orrs	r4, r2
 8012638:	019b      	lsls	r3, r3, #6
 801263a:	431c      	orrs	r4, r3
 801263c:	011b      	lsls	r3, r3, #4
 801263e:	d572      	bpl.n	8012726 <__aeabi_fmul+0x212>
 8012640:	2001      	movs	r0, #1
 8012642:	0863      	lsrs	r3, r4, #1
 8012644:	4004      	ands	r4, r0
 8012646:	431c      	orrs	r4, r3
 8012648:	0008      	movs	r0, r1
 801264a:	307f      	adds	r0, #127	; 0x7f
 801264c:	2800      	cmp	r0, #0
 801264e:	dd3c      	ble.n	80126ca <__aeabi_fmul+0x1b6>
 8012650:	0763      	lsls	r3, r4, #29
 8012652:	d004      	beq.n	801265e <__aeabi_fmul+0x14a>
 8012654:	230f      	movs	r3, #15
 8012656:	4023      	ands	r3, r4
 8012658:	2b04      	cmp	r3, #4
 801265a:	d000      	beq.n	801265e <__aeabi_fmul+0x14a>
 801265c:	3404      	adds	r4, #4
 801265e:	0123      	lsls	r3, r4, #4
 8012660:	d503      	bpl.n	801266a <__aeabi_fmul+0x156>
 8012662:	3180      	adds	r1, #128	; 0x80
 8012664:	0008      	movs	r0, r1
 8012666:	4b37      	ldr	r3, [pc, #220]	; (8012744 <__aeabi_fmul+0x230>)
 8012668:	401c      	ands	r4, r3
 801266a:	28fe      	cmp	r0, #254	; 0xfe
 801266c:	dcc0      	bgt.n	80125f0 <__aeabi_fmul+0xdc>
 801266e:	01a4      	lsls	r4, r4, #6
 8012670:	0a64      	lsrs	r4, r4, #9
 8012672:	b2c0      	uxtb	r0, r0
 8012674:	e79a      	b.n	80125ac <__aeabi_fmul+0x98>
 8012676:	0037      	movs	r7, r6
 8012678:	e78e      	b.n	8012598 <__aeabi_fmul+0x84>
 801267a:	4652      	mov	r2, sl
 801267c:	2303      	movs	r3, #3
 801267e:	431a      	orrs	r2, r3
 8012680:	4692      	mov	sl, r2
 8012682:	2003      	movs	r0, #3
 8012684:	e771      	b.n	801256a <__aeabi_fmul+0x56>
 8012686:	4648      	mov	r0, r9
 8012688:	f002 f8e0 	bl	801484c <__clzsi2>
 801268c:	464a      	mov	r2, r9
 801268e:	1f43      	subs	r3, r0, #5
 8012690:	409a      	lsls	r2, r3
 8012692:	1a2d      	subs	r5, r5, r0
 8012694:	4691      	mov	r9, r2
 8012696:	2000      	movs	r0, #0
 8012698:	3d76      	subs	r5, #118	; 0x76
 801269a:	e766      	b.n	801256a <__aeabi_fmul+0x56>
 801269c:	230c      	movs	r3, #12
 801269e:	469a      	mov	sl, r3
 80126a0:	3b09      	subs	r3, #9
 80126a2:	25ff      	movs	r5, #255	; 0xff
 80126a4:	469b      	mov	fp, r3
 80126a6:	e74d      	b.n	8012544 <__aeabi_fmul+0x30>
 80126a8:	0020      	movs	r0, r4
 80126aa:	f002 f8cf 	bl	801484c <__clzsi2>
 80126ae:	2576      	movs	r5, #118	; 0x76
 80126b0:	1f43      	subs	r3, r0, #5
 80126b2:	409c      	lsls	r4, r3
 80126b4:	2300      	movs	r3, #0
 80126b6:	426d      	negs	r5, r5
 80126b8:	469a      	mov	sl, r3
 80126ba:	469b      	mov	fp, r3
 80126bc:	1a2d      	subs	r5, r5, r0
 80126be:	e741      	b.n	8012544 <__aeabi_fmul+0x30>
 80126c0:	2480      	movs	r4, #128	; 0x80
 80126c2:	2700      	movs	r7, #0
 80126c4:	20ff      	movs	r0, #255	; 0xff
 80126c6:	03e4      	lsls	r4, r4, #15
 80126c8:	e770      	b.n	80125ac <__aeabi_fmul+0x98>
 80126ca:	2301      	movs	r3, #1
 80126cc:	1a1b      	subs	r3, r3, r0
 80126ce:	2b1b      	cmp	r3, #27
 80126d0:	dd00      	ble.n	80126d4 <__aeabi_fmul+0x1c0>
 80126d2:	e769      	b.n	80125a8 <__aeabi_fmul+0x94>
 80126d4:	319e      	adds	r1, #158	; 0x9e
 80126d6:	0020      	movs	r0, r4
 80126d8:	408c      	lsls	r4, r1
 80126da:	40d8      	lsrs	r0, r3
 80126dc:	1e63      	subs	r3, r4, #1
 80126de:	419c      	sbcs	r4, r3
 80126e0:	4304      	orrs	r4, r0
 80126e2:	0763      	lsls	r3, r4, #29
 80126e4:	d004      	beq.n	80126f0 <__aeabi_fmul+0x1dc>
 80126e6:	230f      	movs	r3, #15
 80126e8:	4023      	ands	r3, r4
 80126ea:	2b04      	cmp	r3, #4
 80126ec:	d000      	beq.n	80126f0 <__aeabi_fmul+0x1dc>
 80126ee:	3404      	adds	r4, #4
 80126f0:	0163      	lsls	r3, r4, #5
 80126f2:	d51a      	bpl.n	801272a <__aeabi_fmul+0x216>
 80126f4:	2001      	movs	r0, #1
 80126f6:	2400      	movs	r4, #0
 80126f8:	e758      	b.n	80125ac <__aeabi_fmul+0x98>
 80126fa:	2080      	movs	r0, #128	; 0x80
 80126fc:	03c0      	lsls	r0, r0, #15
 80126fe:	4204      	tst	r4, r0
 8012700:	d009      	beq.n	8012716 <__aeabi_fmul+0x202>
 8012702:	464b      	mov	r3, r9
 8012704:	4203      	tst	r3, r0
 8012706:	d106      	bne.n	8012716 <__aeabi_fmul+0x202>
 8012708:	464c      	mov	r4, r9
 801270a:	4304      	orrs	r4, r0
 801270c:	0264      	lsls	r4, r4, #9
 801270e:	4647      	mov	r7, r8
 8012710:	20ff      	movs	r0, #255	; 0xff
 8012712:	0a64      	lsrs	r4, r4, #9
 8012714:	e74a      	b.n	80125ac <__aeabi_fmul+0x98>
 8012716:	2080      	movs	r0, #128	; 0x80
 8012718:	03c0      	lsls	r0, r0, #15
 801271a:	4304      	orrs	r4, r0
 801271c:	0264      	lsls	r4, r4, #9
 801271e:	0037      	movs	r7, r6
 8012720:	20ff      	movs	r0, #255	; 0xff
 8012722:	0a64      	lsrs	r4, r4, #9
 8012724:	e742      	b.n	80125ac <__aeabi_fmul+0x98>
 8012726:	0029      	movs	r1, r5
 8012728:	e78e      	b.n	8012648 <__aeabi_fmul+0x134>
 801272a:	01a4      	lsls	r4, r4, #6
 801272c:	2000      	movs	r0, #0
 801272e:	0a64      	lsrs	r4, r4, #9
 8012730:	e73c      	b.n	80125ac <__aeabi_fmul+0x98>
 8012732:	2080      	movs	r0, #128	; 0x80
 8012734:	03c0      	lsls	r0, r0, #15
 8012736:	4304      	orrs	r4, r0
 8012738:	0264      	lsls	r4, r4, #9
 801273a:	20ff      	movs	r0, #255	; 0xff
 801273c:	0a64      	lsrs	r4, r4, #9
 801273e:	e735      	b.n	80125ac <__aeabi_fmul+0x98>
 8012740:	0801ac80 	.word	0x0801ac80
 8012744:	f7ffffff 	.word	0xf7ffffff

08012748 <__aeabi_fsub>:
 8012748:	b5f0      	push	{r4, r5, r6, r7, lr}
 801274a:	4646      	mov	r6, r8
 801274c:	46d6      	mov	lr, sl
 801274e:	464f      	mov	r7, r9
 8012750:	0243      	lsls	r3, r0, #9
 8012752:	0a5b      	lsrs	r3, r3, #9
 8012754:	00da      	lsls	r2, r3, #3
 8012756:	4694      	mov	ip, r2
 8012758:	024a      	lsls	r2, r1, #9
 801275a:	b5c0      	push	{r6, r7, lr}
 801275c:	0044      	lsls	r4, r0, #1
 801275e:	0a56      	lsrs	r6, r2, #9
 8012760:	1c05      	adds	r5, r0, #0
 8012762:	46b0      	mov	r8, r6
 8012764:	0e24      	lsrs	r4, r4, #24
 8012766:	004e      	lsls	r6, r1, #1
 8012768:	0992      	lsrs	r2, r2, #6
 801276a:	001f      	movs	r7, r3
 801276c:	0020      	movs	r0, r4
 801276e:	4692      	mov	sl, r2
 8012770:	0fed      	lsrs	r5, r5, #31
 8012772:	0e36      	lsrs	r6, r6, #24
 8012774:	0fc9      	lsrs	r1, r1, #31
 8012776:	2eff      	cmp	r6, #255	; 0xff
 8012778:	d100      	bne.n	801277c <__aeabi_fsub+0x34>
 801277a:	e07f      	b.n	801287c <__aeabi_fsub+0x134>
 801277c:	2201      	movs	r2, #1
 801277e:	4051      	eors	r1, r2
 8012780:	428d      	cmp	r5, r1
 8012782:	d051      	beq.n	8012828 <__aeabi_fsub+0xe0>
 8012784:	1ba2      	subs	r2, r4, r6
 8012786:	4691      	mov	r9, r2
 8012788:	2a00      	cmp	r2, #0
 801278a:	dc00      	bgt.n	801278e <__aeabi_fsub+0x46>
 801278c:	e07e      	b.n	801288c <__aeabi_fsub+0x144>
 801278e:	2e00      	cmp	r6, #0
 8012790:	d100      	bne.n	8012794 <__aeabi_fsub+0x4c>
 8012792:	e099      	b.n	80128c8 <__aeabi_fsub+0x180>
 8012794:	2cff      	cmp	r4, #255	; 0xff
 8012796:	d100      	bne.n	801279a <__aeabi_fsub+0x52>
 8012798:	e08c      	b.n	80128b4 <__aeabi_fsub+0x16c>
 801279a:	2380      	movs	r3, #128	; 0x80
 801279c:	4652      	mov	r2, sl
 801279e:	04db      	lsls	r3, r3, #19
 80127a0:	431a      	orrs	r2, r3
 80127a2:	4692      	mov	sl, r2
 80127a4:	464a      	mov	r2, r9
 80127a6:	2301      	movs	r3, #1
 80127a8:	2a1b      	cmp	r2, #27
 80127aa:	dc08      	bgt.n	80127be <__aeabi_fsub+0x76>
 80127ac:	4653      	mov	r3, sl
 80127ae:	2120      	movs	r1, #32
 80127b0:	40d3      	lsrs	r3, r2
 80127b2:	1a89      	subs	r1, r1, r2
 80127b4:	4652      	mov	r2, sl
 80127b6:	408a      	lsls	r2, r1
 80127b8:	1e51      	subs	r1, r2, #1
 80127ba:	418a      	sbcs	r2, r1
 80127bc:	4313      	orrs	r3, r2
 80127be:	4662      	mov	r2, ip
 80127c0:	1ad3      	subs	r3, r2, r3
 80127c2:	015a      	lsls	r2, r3, #5
 80127c4:	d400      	bmi.n	80127c8 <__aeabi_fsub+0x80>
 80127c6:	e0f3      	b.n	80129b0 <__aeabi_fsub+0x268>
 80127c8:	019b      	lsls	r3, r3, #6
 80127ca:	099e      	lsrs	r6, r3, #6
 80127cc:	0030      	movs	r0, r6
 80127ce:	f002 f83d 	bl	801484c <__clzsi2>
 80127d2:	3805      	subs	r0, #5
 80127d4:	4086      	lsls	r6, r0
 80127d6:	4284      	cmp	r4, r0
 80127d8:	dd00      	ble.n	80127dc <__aeabi_fsub+0x94>
 80127da:	e0f7      	b.n	80129cc <__aeabi_fsub+0x284>
 80127dc:	0032      	movs	r2, r6
 80127de:	1b04      	subs	r4, r0, r4
 80127e0:	2020      	movs	r0, #32
 80127e2:	3401      	adds	r4, #1
 80127e4:	40e2      	lsrs	r2, r4
 80127e6:	1b04      	subs	r4, r0, r4
 80127e8:	40a6      	lsls	r6, r4
 80127ea:	0033      	movs	r3, r6
 80127ec:	1e5e      	subs	r6, r3, #1
 80127ee:	41b3      	sbcs	r3, r6
 80127f0:	2400      	movs	r4, #0
 80127f2:	4313      	orrs	r3, r2
 80127f4:	075a      	lsls	r2, r3, #29
 80127f6:	d004      	beq.n	8012802 <__aeabi_fsub+0xba>
 80127f8:	220f      	movs	r2, #15
 80127fa:	401a      	ands	r2, r3
 80127fc:	2a04      	cmp	r2, #4
 80127fe:	d000      	beq.n	8012802 <__aeabi_fsub+0xba>
 8012800:	3304      	adds	r3, #4
 8012802:	015a      	lsls	r2, r3, #5
 8012804:	d400      	bmi.n	8012808 <__aeabi_fsub+0xc0>
 8012806:	e0d6      	b.n	80129b6 <__aeabi_fsub+0x26e>
 8012808:	1c62      	adds	r2, r4, #1
 801280a:	2cfe      	cmp	r4, #254	; 0xfe
 801280c:	d100      	bne.n	8012810 <__aeabi_fsub+0xc8>
 801280e:	e0da      	b.n	80129c6 <__aeabi_fsub+0x27e>
 8012810:	019b      	lsls	r3, r3, #6
 8012812:	0a5f      	lsrs	r7, r3, #9
 8012814:	b2d0      	uxtb	r0, r2
 8012816:	05c0      	lsls	r0, r0, #23
 8012818:	4338      	orrs	r0, r7
 801281a:	07ed      	lsls	r5, r5, #31
 801281c:	4328      	orrs	r0, r5
 801281e:	bc1c      	pop	{r2, r3, r4}
 8012820:	4690      	mov	r8, r2
 8012822:	4699      	mov	r9, r3
 8012824:	46a2      	mov	sl, r4
 8012826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012828:	1ba2      	subs	r2, r4, r6
 801282a:	4691      	mov	r9, r2
 801282c:	2a00      	cmp	r2, #0
 801282e:	dd63      	ble.n	80128f8 <__aeabi_fsub+0x1b0>
 8012830:	2e00      	cmp	r6, #0
 8012832:	d100      	bne.n	8012836 <__aeabi_fsub+0xee>
 8012834:	e099      	b.n	801296a <__aeabi_fsub+0x222>
 8012836:	2cff      	cmp	r4, #255	; 0xff
 8012838:	d03c      	beq.n	80128b4 <__aeabi_fsub+0x16c>
 801283a:	2380      	movs	r3, #128	; 0x80
 801283c:	4652      	mov	r2, sl
 801283e:	04db      	lsls	r3, r3, #19
 8012840:	431a      	orrs	r2, r3
 8012842:	4692      	mov	sl, r2
 8012844:	464a      	mov	r2, r9
 8012846:	2301      	movs	r3, #1
 8012848:	2a1b      	cmp	r2, #27
 801284a:	dc08      	bgt.n	801285e <__aeabi_fsub+0x116>
 801284c:	4653      	mov	r3, sl
 801284e:	2120      	movs	r1, #32
 8012850:	40d3      	lsrs	r3, r2
 8012852:	1a89      	subs	r1, r1, r2
 8012854:	4652      	mov	r2, sl
 8012856:	408a      	lsls	r2, r1
 8012858:	1e51      	subs	r1, r2, #1
 801285a:	418a      	sbcs	r2, r1
 801285c:	4313      	orrs	r3, r2
 801285e:	4463      	add	r3, ip
 8012860:	015a      	lsls	r2, r3, #5
 8012862:	d400      	bmi.n	8012866 <__aeabi_fsub+0x11e>
 8012864:	e0a4      	b.n	80129b0 <__aeabi_fsub+0x268>
 8012866:	3401      	adds	r4, #1
 8012868:	2cff      	cmp	r4, #255	; 0xff
 801286a:	d100      	bne.n	801286e <__aeabi_fsub+0x126>
 801286c:	e0ab      	b.n	80129c6 <__aeabi_fsub+0x27e>
 801286e:	2201      	movs	r2, #1
 8012870:	4997      	ldr	r1, [pc, #604]	; (8012ad0 <__aeabi_fsub+0x388>)
 8012872:	401a      	ands	r2, r3
 8012874:	085b      	lsrs	r3, r3, #1
 8012876:	400b      	ands	r3, r1
 8012878:	4313      	orrs	r3, r2
 801287a:	e7bb      	b.n	80127f4 <__aeabi_fsub+0xac>
 801287c:	2a00      	cmp	r2, #0
 801287e:	d032      	beq.n	80128e6 <__aeabi_fsub+0x19e>
 8012880:	428d      	cmp	r5, r1
 8012882:	d035      	beq.n	80128f0 <__aeabi_fsub+0x1a8>
 8012884:	22ff      	movs	r2, #255	; 0xff
 8012886:	4252      	negs	r2, r2
 8012888:	4691      	mov	r9, r2
 801288a:	44a1      	add	r9, r4
 801288c:	464a      	mov	r2, r9
 801288e:	2a00      	cmp	r2, #0
 8012890:	d051      	beq.n	8012936 <__aeabi_fsub+0x1ee>
 8012892:	1b30      	subs	r0, r6, r4
 8012894:	2c00      	cmp	r4, #0
 8012896:	d000      	beq.n	801289a <__aeabi_fsub+0x152>
 8012898:	e09c      	b.n	80129d4 <__aeabi_fsub+0x28c>
 801289a:	4663      	mov	r3, ip
 801289c:	2b00      	cmp	r3, #0
 801289e:	d100      	bne.n	80128a2 <__aeabi_fsub+0x15a>
 80128a0:	e0df      	b.n	8012a62 <__aeabi_fsub+0x31a>
 80128a2:	3801      	subs	r0, #1
 80128a4:	2800      	cmp	r0, #0
 80128a6:	d100      	bne.n	80128aa <__aeabi_fsub+0x162>
 80128a8:	e0f7      	b.n	8012a9a <__aeabi_fsub+0x352>
 80128aa:	2eff      	cmp	r6, #255	; 0xff
 80128ac:	d000      	beq.n	80128b0 <__aeabi_fsub+0x168>
 80128ae:	e099      	b.n	80129e4 <__aeabi_fsub+0x29c>
 80128b0:	000d      	movs	r5, r1
 80128b2:	4643      	mov	r3, r8
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d100      	bne.n	80128ba <__aeabi_fsub+0x172>
 80128b8:	e085      	b.n	80129c6 <__aeabi_fsub+0x27e>
 80128ba:	2780      	movs	r7, #128	; 0x80
 80128bc:	03ff      	lsls	r7, r7, #15
 80128be:	431f      	orrs	r7, r3
 80128c0:	027f      	lsls	r7, r7, #9
 80128c2:	20ff      	movs	r0, #255	; 0xff
 80128c4:	0a7f      	lsrs	r7, r7, #9
 80128c6:	e7a6      	b.n	8012816 <__aeabi_fsub+0xce>
 80128c8:	4652      	mov	r2, sl
 80128ca:	2a00      	cmp	r2, #0
 80128cc:	d074      	beq.n	80129b8 <__aeabi_fsub+0x270>
 80128ce:	2201      	movs	r2, #1
 80128d0:	4252      	negs	r2, r2
 80128d2:	4690      	mov	r8, r2
 80128d4:	44c1      	add	r9, r8
 80128d6:	464a      	mov	r2, r9
 80128d8:	2a00      	cmp	r2, #0
 80128da:	d100      	bne.n	80128de <__aeabi_fsub+0x196>
 80128dc:	e0c8      	b.n	8012a70 <__aeabi_fsub+0x328>
 80128de:	2cff      	cmp	r4, #255	; 0xff
 80128e0:	d000      	beq.n	80128e4 <__aeabi_fsub+0x19c>
 80128e2:	e75f      	b.n	80127a4 <__aeabi_fsub+0x5c>
 80128e4:	e7e6      	b.n	80128b4 <__aeabi_fsub+0x16c>
 80128e6:	2201      	movs	r2, #1
 80128e8:	4051      	eors	r1, r2
 80128ea:	42a9      	cmp	r1, r5
 80128ec:	d000      	beq.n	80128f0 <__aeabi_fsub+0x1a8>
 80128ee:	e749      	b.n	8012784 <__aeabi_fsub+0x3c>
 80128f0:	22ff      	movs	r2, #255	; 0xff
 80128f2:	4252      	negs	r2, r2
 80128f4:	4691      	mov	r9, r2
 80128f6:	44a1      	add	r9, r4
 80128f8:	464a      	mov	r2, r9
 80128fa:	2a00      	cmp	r2, #0
 80128fc:	d043      	beq.n	8012986 <__aeabi_fsub+0x23e>
 80128fe:	1b31      	subs	r1, r6, r4
 8012900:	2c00      	cmp	r4, #0
 8012902:	d100      	bne.n	8012906 <__aeabi_fsub+0x1be>
 8012904:	e08c      	b.n	8012a20 <__aeabi_fsub+0x2d8>
 8012906:	2eff      	cmp	r6, #255	; 0xff
 8012908:	d100      	bne.n	801290c <__aeabi_fsub+0x1c4>
 801290a:	e092      	b.n	8012a32 <__aeabi_fsub+0x2ea>
 801290c:	2380      	movs	r3, #128	; 0x80
 801290e:	4662      	mov	r2, ip
 8012910:	04db      	lsls	r3, r3, #19
 8012912:	431a      	orrs	r2, r3
 8012914:	4694      	mov	ip, r2
 8012916:	2301      	movs	r3, #1
 8012918:	291b      	cmp	r1, #27
 801291a:	dc09      	bgt.n	8012930 <__aeabi_fsub+0x1e8>
 801291c:	2020      	movs	r0, #32
 801291e:	4663      	mov	r3, ip
 8012920:	4662      	mov	r2, ip
 8012922:	40cb      	lsrs	r3, r1
 8012924:	1a41      	subs	r1, r0, r1
 8012926:	408a      	lsls	r2, r1
 8012928:	0011      	movs	r1, r2
 801292a:	1e48      	subs	r0, r1, #1
 801292c:	4181      	sbcs	r1, r0
 801292e:	430b      	orrs	r3, r1
 8012930:	0034      	movs	r4, r6
 8012932:	4453      	add	r3, sl
 8012934:	e794      	b.n	8012860 <__aeabi_fsub+0x118>
 8012936:	22fe      	movs	r2, #254	; 0xfe
 8012938:	1c66      	adds	r6, r4, #1
 801293a:	4232      	tst	r2, r6
 801293c:	d164      	bne.n	8012a08 <__aeabi_fsub+0x2c0>
 801293e:	2c00      	cmp	r4, #0
 8012940:	d000      	beq.n	8012944 <__aeabi_fsub+0x1fc>
 8012942:	e082      	b.n	8012a4a <__aeabi_fsub+0x302>
 8012944:	4663      	mov	r3, ip
 8012946:	2b00      	cmp	r3, #0
 8012948:	d100      	bne.n	801294c <__aeabi_fsub+0x204>
 801294a:	e0ab      	b.n	8012aa4 <__aeabi_fsub+0x35c>
 801294c:	4653      	mov	r3, sl
 801294e:	2b00      	cmp	r3, #0
 8012950:	d100      	bne.n	8012954 <__aeabi_fsub+0x20c>
 8012952:	e760      	b.n	8012816 <__aeabi_fsub+0xce>
 8012954:	4663      	mov	r3, ip
 8012956:	4652      	mov	r2, sl
 8012958:	1a9b      	subs	r3, r3, r2
 801295a:	015a      	lsls	r2, r3, #5
 801295c:	d400      	bmi.n	8012960 <__aeabi_fsub+0x218>
 801295e:	e0aa      	b.n	8012ab6 <__aeabi_fsub+0x36e>
 8012960:	4663      	mov	r3, ip
 8012962:	4652      	mov	r2, sl
 8012964:	000d      	movs	r5, r1
 8012966:	1ad3      	subs	r3, r2, r3
 8012968:	e744      	b.n	80127f4 <__aeabi_fsub+0xac>
 801296a:	4652      	mov	r2, sl
 801296c:	2a00      	cmp	r2, #0
 801296e:	d023      	beq.n	80129b8 <__aeabi_fsub+0x270>
 8012970:	2201      	movs	r2, #1
 8012972:	4252      	negs	r2, r2
 8012974:	4690      	mov	r8, r2
 8012976:	44c1      	add	r9, r8
 8012978:	464a      	mov	r2, r9
 801297a:	2a00      	cmp	r2, #0
 801297c:	d075      	beq.n	8012a6a <__aeabi_fsub+0x322>
 801297e:	2cff      	cmp	r4, #255	; 0xff
 8012980:	d000      	beq.n	8012984 <__aeabi_fsub+0x23c>
 8012982:	e75f      	b.n	8012844 <__aeabi_fsub+0xfc>
 8012984:	e796      	b.n	80128b4 <__aeabi_fsub+0x16c>
 8012986:	26fe      	movs	r6, #254	; 0xfe
 8012988:	3401      	adds	r4, #1
 801298a:	4226      	tst	r6, r4
 801298c:	d153      	bne.n	8012a36 <__aeabi_fsub+0x2ee>
 801298e:	2800      	cmp	r0, #0
 8012990:	d172      	bne.n	8012a78 <__aeabi_fsub+0x330>
 8012992:	4663      	mov	r3, ip
 8012994:	2b00      	cmp	r3, #0
 8012996:	d100      	bne.n	801299a <__aeabi_fsub+0x252>
 8012998:	e093      	b.n	8012ac2 <__aeabi_fsub+0x37a>
 801299a:	4653      	mov	r3, sl
 801299c:	2b00      	cmp	r3, #0
 801299e:	d100      	bne.n	80129a2 <__aeabi_fsub+0x25a>
 80129a0:	e739      	b.n	8012816 <__aeabi_fsub+0xce>
 80129a2:	4463      	add	r3, ip
 80129a4:	2400      	movs	r4, #0
 80129a6:	015a      	lsls	r2, r3, #5
 80129a8:	d502      	bpl.n	80129b0 <__aeabi_fsub+0x268>
 80129aa:	4a4a      	ldr	r2, [pc, #296]	; (8012ad4 <__aeabi_fsub+0x38c>)
 80129ac:	3401      	adds	r4, #1
 80129ae:	4013      	ands	r3, r2
 80129b0:	075a      	lsls	r2, r3, #29
 80129b2:	d000      	beq.n	80129b6 <__aeabi_fsub+0x26e>
 80129b4:	e720      	b.n	80127f8 <__aeabi_fsub+0xb0>
 80129b6:	08db      	lsrs	r3, r3, #3
 80129b8:	2cff      	cmp	r4, #255	; 0xff
 80129ba:	d100      	bne.n	80129be <__aeabi_fsub+0x276>
 80129bc:	e77a      	b.n	80128b4 <__aeabi_fsub+0x16c>
 80129be:	025b      	lsls	r3, r3, #9
 80129c0:	0a5f      	lsrs	r7, r3, #9
 80129c2:	b2e0      	uxtb	r0, r4
 80129c4:	e727      	b.n	8012816 <__aeabi_fsub+0xce>
 80129c6:	20ff      	movs	r0, #255	; 0xff
 80129c8:	2700      	movs	r7, #0
 80129ca:	e724      	b.n	8012816 <__aeabi_fsub+0xce>
 80129cc:	4b41      	ldr	r3, [pc, #260]	; (8012ad4 <__aeabi_fsub+0x38c>)
 80129ce:	1a24      	subs	r4, r4, r0
 80129d0:	4033      	ands	r3, r6
 80129d2:	e70f      	b.n	80127f4 <__aeabi_fsub+0xac>
 80129d4:	2eff      	cmp	r6, #255	; 0xff
 80129d6:	d100      	bne.n	80129da <__aeabi_fsub+0x292>
 80129d8:	e76a      	b.n	80128b0 <__aeabi_fsub+0x168>
 80129da:	2380      	movs	r3, #128	; 0x80
 80129dc:	4662      	mov	r2, ip
 80129de:	04db      	lsls	r3, r3, #19
 80129e0:	431a      	orrs	r2, r3
 80129e2:	4694      	mov	ip, r2
 80129e4:	2301      	movs	r3, #1
 80129e6:	281b      	cmp	r0, #27
 80129e8:	dc09      	bgt.n	80129fe <__aeabi_fsub+0x2b6>
 80129ea:	2420      	movs	r4, #32
 80129ec:	4663      	mov	r3, ip
 80129ee:	4662      	mov	r2, ip
 80129f0:	40c3      	lsrs	r3, r0
 80129f2:	1a20      	subs	r0, r4, r0
 80129f4:	4082      	lsls	r2, r0
 80129f6:	0010      	movs	r0, r2
 80129f8:	1e44      	subs	r4, r0, #1
 80129fa:	41a0      	sbcs	r0, r4
 80129fc:	4303      	orrs	r3, r0
 80129fe:	4652      	mov	r2, sl
 8012a00:	000d      	movs	r5, r1
 8012a02:	0034      	movs	r4, r6
 8012a04:	1ad3      	subs	r3, r2, r3
 8012a06:	e6dc      	b.n	80127c2 <__aeabi_fsub+0x7a>
 8012a08:	4663      	mov	r3, ip
 8012a0a:	4652      	mov	r2, sl
 8012a0c:	1a9e      	subs	r6, r3, r2
 8012a0e:	0173      	lsls	r3, r6, #5
 8012a10:	d417      	bmi.n	8012a42 <__aeabi_fsub+0x2fa>
 8012a12:	2e00      	cmp	r6, #0
 8012a14:	d000      	beq.n	8012a18 <__aeabi_fsub+0x2d0>
 8012a16:	e6d9      	b.n	80127cc <__aeabi_fsub+0x84>
 8012a18:	2500      	movs	r5, #0
 8012a1a:	2000      	movs	r0, #0
 8012a1c:	2700      	movs	r7, #0
 8012a1e:	e6fa      	b.n	8012816 <__aeabi_fsub+0xce>
 8012a20:	4663      	mov	r3, ip
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d044      	beq.n	8012ab0 <__aeabi_fsub+0x368>
 8012a26:	3901      	subs	r1, #1
 8012a28:	2900      	cmp	r1, #0
 8012a2a:	d04c      	beq.n	8012ac6 <__aeabi_fsub+0x37e>
 8012a2c:	2eff      	cmp	r6, #255	; 0xff
 8012a2e:	d000      	beq.n	8012a32 <__aeabi_fsub+0x2ea>
 8012a30:	e771      	b.n	8012916 <__aeabi_fsub+0x1ce>
 8012a32:	4643      	mov	r3, r8
 8012a34:	e73e      	b.n	80128b4 <__aeabi_fsub+0x16c>
 8012a36:	2cff      	cmp	r4, #255	; 0xff
 8012a38:	d0c5      	beq.n	80129c6 <__aeabi_fsub+0x27e>
 8012a3a:	4652      	mov	r2, sl
 8012a3c:	4462      	add	r2, ip
 8012a3e:	0853      	lsrs	r3, r2, #1
 8012a40:	e7b6      	b.n	80129b0 <__aeabi_fsub+0x268>
 8012a42:	4663      	mov	r3, ip
 8012a44:	000d      	movs	r5, r1
 8012a46:	1ad6      	subs	r6, r2, r3
 8012a48:	e6c0      	b.n	80127cc <__aeabi_fsub+0x84>
 8012a4a:	4662      	mov	r2, ip
 8012a4c:	2a00      	cmp	r2, #0
 8012a4e:	d116      	bne.n	8012a7e <__aeabi_fsub+0x336>
 8012a50:	4653      	mov	r3, sl
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d000      	beq.n	8012a58 <__aeabi_fsub+0x310>
 8012a56:	e72b      	b.n	80128b0 <__aeabi_fsub+0x168>
 8012a58:	2780      	movs	r7, #128	; 0x80
 8012a5a:	2500      	movs	r5, #0
 8012a5c:	20ff      	movs	r0, #255	; 0xff
 8012a5e:	03ff      	lsls	r7, r7, #15
 8012a60:	e6d9      	b.n	8012816 <__aeabi_fsub+0xce>
 8012a62:	000d      	movs	r5, r1
 8012a64:	4643      	mov	r3, r8
 8012a66:	0034      	movs	r4, r6
 8012a68:	e7a6      	b.n	80129b8 <__aeabi_fsub+0x270>
 8012a6a:	4653      	mov	r3, sl
 8012a6c:	4463      	add	r3, ip
 8012a6e:	e6f7      	b.n	8012860 <__aeabi_fsub+0x118>
 8012a70:	4663      	mov	r3, ip
 8012a72:	4652      	mov	r2, sl
 8012a74:	1a9b      	subs	r3, r3, r2
 8012a76:	e6a4      	b.n	80127c2 <__aeabi_fsub+0x7a>
 8012a78:	4662      	mov	r2, ip
 8012a7a:	2a00      	cmp	r2, #0
 8012a7c:	d0d9      	beq.n	8012a32 <__aeabi_fsub+0x2ea>
 8012a7e:	4652      	mov	r2, sl
 8012a80:	2a00      	cmp	r2, #0
 8012a82:	d100      	bne.n	8012a86 <__aeabi_fsub+0x33e>
 8012a84:	e716      	b.n	80128b4 <__aeabi_fsub+0x16c>
 8012a86:	2280      	movs	r2, #128	; 0x80
 8012a88:	03d2      	lsls	r2, r2, #15
 8012a8a:	4213      	tst	r3, r2
 8012a8c:	d100      	bne.n	8012a90 <__aeabi_fsub+0x348>
 8012a8e:	e711      	b.n	80128b4 <__aeabi_fsub+0x16c>
 8012a90:	4640      	mov	r0, r8
 8012a92:	4210      	tst	r0, r2
 8012a94:	d000      	beq.n	8012a98 <__aeabi_fsub+0x350>
 8012a96:	e70d      	b.n	80128b4 <__aeabi_fsub+0x16c>
 8012a98:	e70a      	b.n	80128b0 <__aeabi_fsub+0x168>
 8012a9a:	4652      	mov	r2, sl
 8012a9c:	000d      	movs	r5, r1
 8012a9e:	0034      	movs	r4, r6
 8012aa0:	1ad3      	subs	r3, r2, r3
 8012aa2:	e68e      	b.n	80127c2 <__aeabi_fsub+0x7a>
 8012aa4:	4653      	mov	r3, sl
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d008      	beq.n	8012abc <__aeabi_fsub+0x374>
 8012aaa:	000d      	movs	r5, r1
 8012aac:	4647      	mov	r7, r8
 8012aae:	e6b2      	b.n	8012816 <__aeabi_fsub+0xce>
 8012ab0:	4643      	mov	r3, r8
 8012ab2:	0034      	movs	r4, r6
 8012ab4:	e780      	b.n	80129b8 <__aeabi_fsub+0x270>
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d000      	beq.n	8012abc <__aeabi_fsub+0x374>
 8012aba:	e779      	b.n	80129b0 <__aeabi_fsub+0x268>
 8012abc:	2500      	movs	r5, #0
 8012abe:	2700      	movs	r7, #0
 8012ac0:	e6a9      	b.n	8012816 <__aeabi_fsub+0xce>
 8012ac2:	4647      	mov	r7, r8
 8012ac4:	e6a7      	b.n	8012816 <__aeabi_fsub+0xce>
 8012ac6:	4653      	mov	r3, sl
 8012ac8:	0034      	movs	r4, r6
 8012aca:	4463      	add	r3, ip
 8012acc:	e6c8      	b.n	8012860 <__aeabi_fsub+0x118>
 8012ace:	46c0      	nop			; (mov r8, r8)
 8012ad0:	7dffffff 	.word	0x7dffffff
 8012ad4:	fbffffff 	.word	0xfbffffff

08012ad8 <__aeabi_f2iz>:
 8012ad8:	0241      	lsls	r1, r0, #9
 8012ada:	0042      	lsls	r2, r0, #1
 8012adc:	0fc3      	lsrs	r3, r0, #31
 8012ade:	0a49      	lsrs	r1, r1, #9
 8012ae0:	2000      	movs	r0, #0
 8012ae2:	0e12      	lsrs	r2, r2, #24
 8012ae4:	2a7e      	cmp	r2, #126	; 0x7e
 8012ae6:	d903      	bls.n	8012af0 <__aeabi_f2iz+0x18>
 8012ae8:	2a9d      	cmp	r2, #157	; 0x9d
 8012aea:	d902      	bls.n	8012af2 <__aeabi_f2iz+0x1a>
 8012aec:	4a09      	ldr	r2, [pc, #36]	; (8012b14 <__aeabi_f2iz+0x3c>)
 8012aee:	1898      	adds	r0, r3, r2
 8012af0:	4770      	bx	lr
 8012af2:	2080      	movs	r0, #128	; 0x80
 8012af4:	0400      	lsls	r0, r0, #16
 8012af6:	4301      	orrs	r1, r0
 8012af8:	2a95      	cmp	r2, #149	; 0x95
 8012afa:	dc07      	bgt.n	8012b0c <__aeabi_f2iz+0x34>
 8012afc:	2096      	movs	r0, #150	; 0x96
 8012afe:	1a82      	subs	r2, r0, r2
 8012b00:	40d1      	lsrs	r1, r2
 8012b02:	4248      	negs	r0, r1
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d1f3      	bne.n	8012af0 <__aeabi_f2iz+0x18>
 8012b08:	0008      	movs	r0, r1
 8012b0a:	e7f1      	b.n	8012af0 <__aeabi_f2iz+0x18>
 8012b0c:	3a96      	subs	r2, #150	; 0x96
 8012b0e:	4091      	lsls	r1, r2
 8012b10:	e7f7      	b.n	8012b02 <__aeabi_f2iz+0x2a>
 8012b12:	46c0      	nop			; (mov r8, r8)
 8012b14:	7fffffff 	.word	0x7fffffff

08012b18 <__aeabi_i2f>:
 8012b18:	b570      	push	{r4, r5, r6, lr}
 8012b1a:	2800      	cmp	r0, #0
 8012b1c:	d013      	beq.n	8012b46 <__aeabi_i2f+0x2e>
 8012b1e:	17c3      	asrs	r3, r0, #31
 8012b20:	18c5      	adds	r5, r0, r3
 8012b22:	405d      	eors	r5, r3
 8012b24:	0fc4      	lsrs	r4, r0, #31
 8012b26:	0028      	movs	r0, r5
 8012b28:	f001 fe90 	bl	801484c <__clzsi2>
 8012b2c:	239e      	movs	r3, #158	; 0x9e
 8012b2e:	0001      	movs	r1, r0
 8012b30:	1a1b      	subs	r3, r3, r0
 8012b32:	2b96      	cmp	r3, #150	; 0x96
 8012b34:	dc0f      	bgt.n	8012b56 <__aeabi_i2f+0x3e>
 8012b36:	2808      	cmp	r0, #8
 8012b38:	dd01      	ble.n	8012b3e <__aeabi_i2f+0x26>
 8012b3a:	3908      	subs	r1, #8
 8012b3c:	408d      	lsls	r5, r1
 8012b3e:	026d      	lsls	r5, r5, #9
 8012b40:	0a6d      	lsrs	r5, r5, #9
 8012b42:	b2d8      	uxtb	r0, r3
 8012b44:	e002      	b.n	8012b4c <__aeabi_i2f+0x34>
 8012b46:	2400      	movs	r4, #0
 8012b48:	2000      	movs	r0, #0
 8012b4a:	2500      	movs	r5, #0
 8012b4c:	05c0      	lsls	r0, r0, #23
 8012b4e:	4328      	orrs	r0, r5
 8012b50:	07e4      	lsls	r4, r4, #31
 8012b52:	4320      	orrs	r0, r4
 8012b54:	bd70      	pop	{r4, r5, r6, pc}
 8012b56:	2b99      	cmp	r3, #153	; 0x99
 8012b58:	dd0b      	ble.n	8012b72 <__aeabi_i2f+0x5a>
 8012b5a:	2205      	movs	r2, #5
 8012b5c:	002e      	movs	r6, r5
 8012b5e:	1a12      	subs	r2, r2, r0
 8012b60:	40d6      	lsrs	r6, r2
 8012b62:	0002      	movs	r2, r0
 8012b64:	321b      	adds	r2, #27
 8012b66:	4095      	lsls	r5, r2
 8012b68:	0028      	movs	r0, r5
 8012b6a:	1e45      	subs	r5, r0, #1
 8012b6c:	41a8      	sbcs	r0, r5
 8012b6e:	0035      	movs	r5, r6
 8012b70:	4305      	orrs	r5, r0
 8012b72:	2905      	cmp	r1, #5
 8012b74:	dd01      	ble.n	8012b7a <__aeabi_i2f+0x62>
 8012b76:	1f4a      	subs	r2, r1, #5
 8012b78:	4095      	lsls	r5, r2
 8012b7a:	002a      	movs	r2, r5
 8012b7c:	4e08      	ldr	r6, [pc, #32]	; (8012ba0 <__aeabi_i2f+0x88>)
 8012b7e:	4032      	ands	r2, r6
 8012b80:	0768      	lsls	r0, r5, #29
 8012b82:	d009      	beq.n	8012b98 <__aeabi_i2f+0x80>
 8012b84:	200f      	movs	r0, #15
 8012b86:	4028      	ands	r0, r5
 8012b88:	2804      	cmp	r0, #4
 8012b8a:	d005      	beq.n	8012b98 <__aeabi_i2f+0x80>
 8012b8c:	3204      	adds	r2, #4
 8012b8e:	0150      	lsls	r0, r2, #5
 8012b90:	d502      	bpl.n	8012b98 <__aeabi_i2f+0x80>
 8012b92:	239f      	movs	r3, #159	; 0x9f
 8012b94:	4032      	ands	r2, r6
 8012b96:	1a5b      	subs	r3, r3, r1
 8012b98:	0192      	lsls	r2, r2, #6
 8012b9a:	0a55      	lsrs	r5, r2, #9
 8012b9c:	b2d8      	uxtb	r0, r3
 8012b9e:	e7d5      	b.n	8012b4c <__aeabi_i2f+0x34>
 8012ba0:	fbffffff 	.word	0xfbffffff

08012ba4 <__aeabi_ui2f>:
 8012ba4:	b570      	push	{r4, r5, r6, lr}
 8012ba6:	1e05      	subs	r5, r0, #0
 8012ba8:	d00e      	beq.n	8012bc8 <__aeabi_ui2f+0x24>
 8012baa:	f001 fe4f 	bl	801484c <__clzsi2>
 8012bae:	239e      	movs	r3, #158	; 0x9e
 8012bb0:	0004      	movs	r4, r0
 8012bb2:	1a1b      	subs	r3, r3, r0
 8012bb4:	2b96      	cmp	r3, #150	; 0x96
 8012bb6:	dc0c      	bgt.n	8012bd2 <__aeabi_ui2f+0x2e>
 8012bb8:	2808      	cmp	r0, #8
 8012bba:	dd01      	ble.n	8012bc0 <__aeabi_ui2f+0x1c>
 8012bbc:	3c08      	subs	r4, #8
 8012bbe:	40a5      	lsls	r5, r4
 8012bc0:	026d      	lsls	r5, r5, #9
 8012bc2:	0a6d      	lsrs	r5, r5, #9
 8012bc4:	b2d8      	uxtb	r0, r3
 8012bc6:	e001      	b.n	8012bcc <__aeabi_ui2f+0x28>
 8012bc8:	2000      	movs	r0, #0
 8012bca:	2500      	movs	r5, #0
 8012bcc:	05c0      	lsls	r0, r0, #23
 8012bce:	4328      	orrs	r0, r5
 8012bd0:	bd70      	pop	{r4, r5, r6, pc}
 8012bd2:	2b99      	cmp	r3, #153	; 0x99
 8012bd4:	dd09      	ble.n	8012bea <__aeabi_ui2f+0x46>
 8012bd6:	0002      	movs	r2, r0
 8012bd8:	0029      	movs	r1, r5
 8012bda:	321b      	adds	r2, #27
 8012bdc:	4091      	lsls	r1, r2
 8012bde:	1e4a      	subs	r2, r1, #1
 8012be0:	4191      	sbcs	r1, r2
 8012be2:	2205      	movs	r2, #5
 8012be4:	1a12      	subs	r2, r2, r0
 8012be6:	40d5      	lsrs	r5, r2
 8012be8:	430d      	orrs	r5, r1
 8012bea:	2c05      	cmp	r4, #5
 8012bec:	dd01      	ble.n	8012bf2 <__aeabi_ui2f+0x4e>
 8012bee:	1f62      	subs	r2, r4, #5
 8012bf0:	4095      	lsls	r5, r2
 8012bf2:	0029      	movs	r1, r5
 8012bf4:	4e08      	ldr	r6, [pc, #32]	; (8012c18 <__aeabi_ui2f+0x74>)
 8012bf6:	4031      	ands	r1, r6
 8012bf8:	076a      	lsls	r2, r5, #29
 8012bfa:	d009      	beq.n	8012c10 <__aeabi_ui2f+0x6c>
 8012bfc:	200f      	movs	r0, #15
 8012bfe:	4028      	ands	r0, r5
 8012c00:	2804      	cmp	r0, #4
 8012c02:	d005      	beq.n	8012c10 <__aeabi_ui2f+0x6c>
 8012c04:	3104      	adds	r1, #4
 8012c06:	014a      	lsls	r2, r1, #5
 8012c08:	d502      	bpl.n	8012c10 <__aeabi_ui2f+0x6c>
 8012c0a:	239f      	movs	r3, #159	; 0x9f
 8012c0c:	4031      	ands	r1, r6
 8012c0e:	1b1b      	subs	r3, r3, r4
 8012c10:	0189      	lsls	r1, r1, #6
 8012c12:	0a4d      	lsrs	r5, r1, #9
 8012c14:	b2d8      	uxtb	r0, r3
 8012c16:	e7d9      	b.n	8012bcc <__aeabi_ui2f+0x28>
 8012c18:	fbffffff 	.word	0xfbffffff

08012c1c <__aeabi_dadd>:
 8012c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c1e:	464f      	mov	r7, r9
 8012c20:	46d6      	mov	lr, sl
 8012c22:	4646      	mov	r6, r8
 8012c24:	000d      	movs	r5, r1
 8012c26:	0001      	movs	r1, r0
 8012c28:	0018      	movs	r0, r3
 8012c2a:	b5c0      	push	{r6, r7, lr}
 8012c2c:	0017      	movs	r7, r2
 8012c2e:	032b      	lsls	r3, r5, #12
 8012c30:	0a5a      	lsrs	r2, r3, #9
 8012c32:	0f4b      	lsrs	r3, r1, #29
 8012c34:	4313      	orrs	r3, r2
 8012c36:	00ca      	lsls	r2, r1, #3
 8012c38:	4691      	mov	r9, r2
 8012c3a:	0302      	lsls	r2, r0, #12
 8012c3c:	006e      	lsls	r6, r5, #1
 8012c3e:	0041      	lsls	r1, r0, #1
 8012c40:	0a52      	lsrs	r2, r2, #9
 8012c42:	0fec      	lsrs	r4, r5, #31
 8012c44:	0f7d      	lsrs	r5, r7, #29
 8012c46:	4315      	orrs	r5, r2
 8012c48:	0d76      	lsrs	r6, r6, #21
 8012c4a:	0d49      	lsrs	r1, r1, #21
 8012c4c:	0fc0      	lsrs	r0, r0, #31
 8012c4e:	4682      	mov	sl, r0
 8012c50:	46ac      	mov	ip, r5
 8012c52:	00ff      	lsls	r7, r7, #3
 8012c54:	1a72      	subs	r2, r6, r1
 8012c56:	4284      	cmp	r4, r0
 8012c58:	d100      	bne.n	8012c5c <__aeabi_dadd+0x40>
 8012c5a:	e098      	b.n	8012d8e <__aeabi_dadd+0x172>
 8012c5c:	2a00      	cmp	r2, #0
 8012c5e:	dc00      	bgt.n	8012c62 <__aeabi_dadd+0x46>
 8012c60:	e081      	b.n	8012d66 <__aeabi_dadd+0x14a>
 8012c62:	2900      	cmp	r1, #0
 8012c64:	d100      	bne.n	8012c68 <__aeabi_dadd+0x4c>
 8012c66:	e0b6      	b.n	8012dd6 <__aeabi_dadd+0x1ba>
 8012c68:	49c9      	ldr	r1, [pc, #804]	; (8012f90 <__aeabi_dadd+0x374>)
 8012c6a:	428e      	cmp	r6, r1
 8012c6c:	d100      	bne.n	8012c70 <__aeabi_dadd+0x54>
 8012c6e:	e172      	b.n	8012f56 <__aeabi_dadd+0x33a>
 8012c70:	2180      	movs	r1, #128	; 0x80
 8012c72:	0028      	movs	r0, r5
 8012c74:	0409      	lsls	r1, r1, #16
 8012c76:	4308      	orrs	r0, r1
 8012c78:	4684      	mov	ip, r0
 8012c7a:	2a38      	cmp	r2, #56	; 0x38
 8012c7c:	dd00      	ble.n	8012c80 <__aeabi_dadd+0x64>
 8012c7e:	e15e      	b.n	8012f3e <__aeabi_dadd+0x322>
 8012c80:	2a1f      	cmp	r2, #31
 8012c82:	dd00      	ble.n	8012c86 <__aeabi_dadd+0x6a>
 8012c84:	e1ee      	b.n	8013064 <__aeabi_dadd+0x448>
 8012c86:	2020      	movs	r0, #32
 8012c88:	0039      	movs	r1, r7
 8012c8a:	4665      	mov	r5, ip
 8012c8c:	1a80      	subs	r0, r0, r2
 8012c8e:	4087      	lsls	r7, r0
 8012c90:	40d1      	lsrs	r1, r2
 8012c92:	4085      	lsls	r5, r0
 8012c94:	430d      	orrs	r5, r1
 8012c96:	0039      	movs	r1, r7
 8012c98:	1e4f      	subs	r7, r1, #1
 8012c9a:	41b9      	sbcs	r1, r7
 8012c9c:	4667      	mov	r7, ip
 8012c9e:	40d7      	lsrs	r7, r2
 8012ca0:	4329      	orrs	r1, r5
 8012ca2:	1bdb      	subs	r3, r3, r7
 8012ca4:	464a      	mov	r2, r9
 8012ca6:	1a55      	subs	r5, r2, r1
 8012ca8:	45a9      	cmp	r9, r5
 8012caa:	4189      	sbcs	r1, r1
 8012cac:	4249      	negs	r1, r1
 8012cae:	1a5b      	subs	r3, r3, r1
 8012cb0:	4698      	mov	r8, r3
 8012cb2:	4643      	mov	r3, r8
 8012cb4:	021b      	lsls	r3, r3, #8
 8012cb6:	d400      	bmi.n	8012cba <__aeabi_dadd+0x9e>
 8012cb8:	e0cc      	b.n	8012e54 <__aeabi_dadd+0x238>
 8012cba:	4643      	mov	r3, r8
 8012cbc:	025b      	lsls	r3, r3, #9
 8012cbe:	0a5b      	lsrs	r3, r3, #9
 8012cc0:	4698      	mov	r8, r3
 8012cc2:	4643      	mov	r3, r8
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d100      	bne.n	8012cca <__aeabi_dadd+0xae>
 8012cc8:	e12c      	b.n	8012f24 <__aeabi_dadd+0x308>
 8012cca:	4640      	mov	r0, r8
 8012ccc:	f001 fdbe 	bl	801484c <__clzsi2>
 8012cd0:	0001      	movs	r1, r0
 8012cd2:	3908      	subs	r1, #8
 8012cd4:	2220      	movs	r2, #32
 8012cd6:	0028      	movs	r0, r5
 8012cd8:	4643      	mov	r3, r8
 8012cda:	1a52      	subs	r2, r2, r1
 8012cdc:	408b      	lsls	r3, r1
 8012cde:	40d0      	lsrs	r0, r2
 8012ce0:	408d      	lsls	r5, r1
 8012ce2:	4303      	orrs	r3, r0
 8012ce4:	428e      	cmp	r6, r1
 8012ce6:	dd00      	ble.n	8012cea <__aeabi_dadd+0xce>
 8012ce8:	e117      	b.n	8012f1a <__aeabi_dadd+0x2fe>
 8012cea:	1b8e      	subs	r6, r1, r6
 8012cec:	1c72      	adds	r2, r6, #1
 8012cee:	2a1f      	cmp	r2, #31
 8012cf0:	dd00      	ble.n	8012cf4 <__aeabi_dadd+0xd8>
 8012cf2:	e1a7      	b.n	8013044 <__aeabi_dadd+0x428>
 8012cf4:	2120      	movs	r1, #32
 8012cf6:	0018      	movs	r0, r3
 8012cf8:	002e      	movs	r6, r5
 8012cfa:	1a89      	subs	r1, r1, r2
 8012cfc:	408d      	lsls	r5, r1
 8012cfe:	4088      	lsls	r0, r1
 8012d00:	40d6      	lsrs	r6, r2
 8012d02:	40d3      	lsrs	r3, r2
 8012d04:	1e69      	subs	r1, r5, #1
 8012d06:	418d      	sbcs	r5, r1
 8012d08:	4330      	orrs	r0, r6
 8012d0a:	4698      	mov	r8, r3
 8012d0c:	2600      	movs	r6, #0
 8012d0e:	4305      	orrs	r5, r0
 8012d10:	076b      	lsls	r3, r5, #29
 8012d12:	d009      	beq.n	8012d28 <__aeabi_dadd+0x10c>
 8012d14:	230f      	movs	r3, #15
 8012d16:	402b      	ands	r3, r5
 8012d18:	2b04      	cmp	r3, #4
 8012d1a:	d005      	beq.n	8012d28 <__aeabi_dadd+0x10c>
 8012d1c:	1d2b      	adds	r3, r5, #4
 8012d1e:	42ab      	cmp	r3, r5
 8012d20:	41ad      	sbcs	r5, r5
 8012d22:	426d      	negs	r5, r5
 8012d24:	44a8      	add	r8, r5
 8012d26:	001d      	movs	r5, r3
 8012d28:	4643      	mov	r3, r8
 8012d2a:	021b      	lsls	r3, r3, #8
 8012d2c:	d400      	bmi.n	8012d30 <__aeabi_dadd+0x114>
 8012d2e:	e094      	b.n	8012e5a <__aeabi_dadd+0x23e>
 8012d30:	4b97      	ldr	r3, [pc, #604]	; (8012f90 <__aeabi_dadd+0x374>)
 8012d32:	1c72      	adds	r2, r6, #1
 8012d34:	429a      	cmp	r2, r3
 8012d36:	d100      	bne.n	8012d3a <__aeabi_dadd+0x11e>
 8012d38:	e09d      	b.n	8012e76 <__aeabi_dadd+0x25a>
 8012d3a:	4641      	mov	r1, r8
 8012d3c:	4b95      	ldr	r3, [pc, #596]	; (8012f94 <__aeabi_dadd+0x378>)
 8012d3e:	08ed      	lsrs	r5, r5, #3
 8012d40:	4019      	ands	r1, r3
 8012d42:	000b      	movs	r3, r1
 8012d44:	0552      	lsls	r2, r2, #21
 8012d46:	0749      	lsls	r1, r1, #29
 8012d48:	025b      	lsls	r3, r3, #9
 8012d4a:	4329      	orrs	r1, r5
 8012d4c:	0b1b      	lsrs	r3, r3, #12
 8012d4e:	0d52      	lsrs	r2, r2, #21
 8012d50:	0512      	lsls	r2, r2, #20
 8012d52:	4313      	orrs	r3, r2
 8012d54:	07e4      	lsls	r4, r4, #31
 8012d56:	4323      	orrs	r3, r4
 8012d58:	0008      	movs	r0, r1
 8012d5a:	0019      	movs	r1, r3
 8012d5c:	bc1c      	pop	{r2, r3, r4}
 8012d5e:	4690      	mov	r8, r2
 8012d60:	4699      	mov	r9, r3
 8012d62:	46a2      	mov	sl, r4
 8012d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d66:	2a00      	cmp	r2, #0
 8012d68:	d043      	beq.n	8012df2 <__aeabi_dadd+0x1d6>
 8012d6a:	1b8a      	subs	r2, r1, r6
 8012d6c:	2e00      	cmp	r6, #0
 8012d6e:	d000      	beq.n	8012d72 <__aeabi_dadd+0x156>
 8012d70:	e12a      	b.n	8012fc8 <__aeabi_dadd+0x3ac>
 8012d72:	464c      	mov	r4, r9
 8012d74:	431c      	orrs	r4, r3
 8012d76:	d100      	bne.n	8012d7a <__aeabi_dadd+0x15e>
 8012d78:	e1d1      	b.n	801311e <__aeabi_dadd+0x502>
 8012d7a:	1e54      	subs	r4, r2, #1
 8012d7c:	2a01      	cmp	r2, #1
 8012d7e:	d100      	bne.n	8012d82 <__aeabi_dadd+0x166>
 8012d80:	e21f      	b.n	80131c2 <__aeabi_dadd+0x5a6>
 8012d82:	4d83      	ldr	r5, [pc, #524]	; (8012f90 <__aeabi_dadd+0x374>)
 8012d84:	42aa      	cmp	r2, r5
 8012d86:	d100      	bne.n	8012d8a <__aeabi_dadd+0x16e>
 8012d88:	e272      	b.n	8013270 <__aeabi_dadd+0x654>
 8012d8a:	0022      	movs	r2, r4
 8012d8c:	e123      	b.n	8012fd6 <__aeabi_dadd+0x3ba>
 8012d8e:	2a00      	cmp	r2, #0
 8012d90:	dc00      	bgt.n	8012d94 <__aeabi_dadd+0x178>
 8012d92:	e098      	b.n	8012ec6 <__aeabi_dadd+0x2aa>
 8012d94:	2900      	cmp	r1, #0
 8012d96:	d042      	beq.n	8012e1e <__aeabi_dadd+0x202>
 8012d98:	497d      	ldr	r1, [pc, #500]	; (8012f90 <__aeabi_dadd+0x374>)
 8012d9a:	428e      	cmp	r6, r1
 8012d9c:	d100      	bne.n	8012da0 <__aeabi_dadd+0x184>
 8012d9e:	e0da      	b.n	8012f56 <__aeabi_dadd+0x33a>
 8012da0:	2180      	movs	r1, #128	; 0x80
 8012da2:	0028      	movs	r0, r5
 8012da4:	0409      	lsls	r1, r1, #16
 8012da6:	4308      	orrs	r0, r1
 8012da8:	4684      	mov	ip, r0
 8012daa:	2a38      	cmp	r2, #56	; 0x38
 8012dac:	dd00      	ble.n	8012db0 <__aeabi_dadd+0x194>
 8012dae:	e129      	b.n	8013004 <__aeabi_dadd+0x3e8>
 8012db0:	2a1f      	cmp	r2, #31
 8012db2:	dc00      	bgt.n	8012db6 <__aeabi_dadd+0x19a>
 8012db4:	e187      	b.n	80130c6 <__aeabi_dadd+0x4aa>
 8012db6:	0011      	movs	r1, r2
 8012db8:	4665      	mov	r5, ip
 8012dba:	3920      	subs	r1, #32
 8012dbc:	40cd      	lsrs	r5, r1
 8012dbe:	2a20      	cmp	r2, #32
 8012dc0:	d004      	beq.n	8012dcc <__aeabi_dadd+0x1b0>
 8012dc2:	2040      	movs	r0, #64	; 0x40
 8012dc4:	4661      	mov	r1, ip
 8012dc6:	1a82      	subs	r2, r0, r2
 8012dc8:	4091      	lsls	r1, r2
 8012dca:	430f      	orrs	r7, r1
 8012dcc:	0039      	movs	r1, r7
 8012dce:	1e4f      	subs	r7, r1, #1
 8012dd0:	41b9      	sbcs	r1, r7
 8012dd2:	430d      	orrs	r5, r1
 8012dd4:	e11b      	b.n	801300e <__aeabi_dadd+0x3f2>
 8012dd6:	0029      	movs	r1, r5
 8012dd8:	4339      	orrs	r1, r7
 8012dda:	d100      	bne.n	8012dde <__aeabi_dadd+0x1c2>
 8012ddc:	e0b5      	b.n	8012f4a <__aeabi_dadd+0x32e>
 8012dde:	1e51      	subs	r1, r2, #1
 8012de0:	2a01      	cmp	r2, #1
 8012de2:	d100      	bne.n	8012de6 <__aeabi_dadd+0x1ca>
 8012de4:	e1ab      	b.n	801313e <__aeabi_dadd+0x522>
 8012de6:	486a      	ldr	r0, [pc, #424]	; (8012f90 <__aeabi_dadd+0x374>)
 8012de8:	4282      	cmp	r2, r0
 8012dea:	d100      	bne.n	8012dee <__aeabi_dadd+0x1d2>
 8012dec:	e1b2      	b.n	8013154 <__aeabi_dadd+0x538>
 8012dee:	000a      	movs	r2, r1
 8012df0:	e743      	b.n	8012c7a <__aeabi_dadd+0x5e>
 8012df2:	4969      	ldr	r1, [pc, #420]	; (8012f98 <__aeabi_dadd+0x37c>)
 8012df4:	1c75      	adds	r5, r6, #1
 8012df6:	420d      	tst	r5, r1
 8012df8:	d000      	beq.n	8012dfc <__aeabi_dadd+0x1e0>
 8012dfa:	e0cf      	b.n	8012f9c <__aeabi_dadd+0x380>
 8012dfc:	2e00      	cmp	r6, #0
 8012dfe:	d000      	beq.n	8012e02 <__aeabi_dadd+0x1e6>
 8012e00:	e193      	b.n	801312a <__aeabi_dadd+0x50e>
 8012e02:	4649      	mov	r1, r9
 8012e04:	4319      	orrs	r1, r3
 8012e06:	d100      	bne.n	8012e0a <__aeabi_dadd+0x1ee>
 8012e08:	e1d1      	b.n	80131ae <__aeabi_dadd+0x592>
 8012e0a:	4661      	mov	r1, ip
 8012e0c:	4339      	orrs	r1, r7
 8012e0e:	d000      	beq.n	8012e12 <__aeabi_dadd+0x1f6>
 8012e10:	e1e3      	b.n	80131da <__aeabi_dadd+0x5be>
 8012e12:	4649      	mov	r1, r9
 8012e14:	0758      	lsls	r0, r3, #29
 8012e16:	08c9      	lsrs	r1, r1, #3
 8012e18:	4301      	orrs	r1, r0
 8012e1a:	08db      	lsrs	r3, r3, #3
 8012e1c:	e026      	b.n	8012e6c <__aeabi_dadd+0x250>
 8012e1e:	0029      	movs	r1, r5
 8012e20:	4339      	orrs	r1, r7
 8012e22:	d100      	bne.n	8012e26 <__aeabi_dadd+0x20a>
 8012e24:	e091      	b.n	8012f4a <__aeabi_dadd+0x32e>
 8012e26:	1e51      	subs	r1, r2, #1
 8012e28:	2a01      	cmp	r2, #1
 8012e2a:	d005      	beq.n	8012e38 <__aeabi_dadd+0x21c>
 8012e2c:	4858      	ldr	r0, [pc, #352]	; (8012f90 <__aeabi_dadd+0x374>)
 8012e2e:	4282      	cmp	r2, r0
 8012e30:	d100      	bne.n	8012e34 <__aeabi_dadd+0x218>
 8012e32:	e18f      	b.n	8013154 <__aeabi_dadd+0x538>
 8012e34:	000a      	movs	r2, r1
 8012e36:	e7b8      	b.n	8012daa <__aeabi_dadd+0x18e>
 8012e38:	003d      	movs	r5, r7
 8012e3a:	444d      	add	r5, r9
 8012e3c:	454d      	cmp	r5, r9
 8012e3e:	4189      	sbcs	r1, r1
 8012e40:	4463      	add	r3, ip
 8012e42:	4698      	mov	r8, r3
 8012e44:	4249      	negs	r1, r1
 8012e46:	4488      	add	r8, r1
 8012e48:	4643      	mov	r3, r8
 8012e4a:	2602      	movs	r6, #2
 8012e4c:	021b      	lsls	r3, r3, #8
 8012e4e:	d500      	bpl.n	8012e52 <__aeabi_dadd+0x236>
 8012e50:	e0eb      	b.n	801302a <__aeabi_dadd+0x40e>
 8012e52:	3e01      	subs	r6, #1
 8012e54:	076b      	lsls	r3, r5, #29
 8012e56:	d000      	beq.n	8012e5a <__aeabi_dadd+0x23e>
 8012e58:	e75c      	b.n	8012d14 <__aeabi_dadd+0xf8>
 8012e5a:	4643      	mov	r3, r8
 8012e5c:	08e9      	lsrs	r1, r5, #3
 8012e5e:	075a      	lsls	r2, r3, #29
 8012e60:	4311      	orrs	r1, r2
 8012e62:	0032      	movs	r2, r6
 8012e64:	08db      	lsrs	r3, r3, #3
 8012e66:	484a      	ldr	r0, [pc, #296]	; (8012f90 <__aeabi_dadd+0x374>)
 8012e68:	4282      	cmp	r2, r0
 8012e6a:	d021      	beq.n	8012eb0 <__aeabi_dadd+0x294>
 8012e6c:	031b      	lsls	r3, r3, #12
 8012e6e:	0552      	lsls	r2, r2, #21
 8012e70:	0b1b      	lsrs	r3, r3, #12
 8012e72:	0d52      	lsrs	r2, r2, #21
 8012e74:	e76c      	b.n	8012d50 <__aeabi_dadd+0x134>
 8012e76:	2300      	movs	r3, #0
 8012e78:	2100      	movs	r1, #0
 8012e7a:	e769      	b.n	8012d50 <__aeabi_dadd+0x134>
 8012e7c:	002a      	movs	r2, r5
 8012e7e:	433a      	orrs	r2, r7
 8012e80:	d069      	beq.n	8012f56 <__aeabi_dadd+0x33a>
 8012e82:	464a      	mov	r2, r9
 8012e84:	0758      	lsls	r0, r3, #29
 8012e86:	08d1      	lsrs	r1, r2, #3
 8012e88:	08da      	lsrs	r2, r3, #3
 8012e8a:	2380      	movs	r3, #128	; 0x80
 8012e8c:	031b      	lsls	r3, r3, #12
 8012e8e:	4308      	orrs	r0, r1
 8012e90:	421a      	tst	r2, r3
 8012e92:	d007      	beq.n	8012ea4 <__aeabi_dadd+0x288>
 8012e94:	0029      	movs	r1, r5
 8012e96:	08ed      	lsrs	r5, r5, #3
 8012e98:	421d      	tst	r5, r3
 8012e9a:	d103      	bne.n	8012ea4 <__aeabi_dadd+0x288>
 8012e9c:	002a      	movs	r2, r5
 8012e9e:	08ff      	lsrs	r7, r7, #3
 8012ea0:	0748      	lsls	r0, r1, #29
 8012ea2:	4338      	orrs	r0, r7
 8012ea4:	0f43      	lsrs	r3, r0, #29
 8012ea6:	00c1      	lsls	r1, r0, #3
 8012ea8:	075b      	lsls	r3, r3, #29
 8012eaa:	08c9      	lsrs	r1, r1, #3
 8012eac:	4319      	orrs	r1, r3
 8012eae:	0013      	movs	r3, r2
 8012eb0:	000a      	movs	r2, r1
 8012eb2:	431a      	orrs	r2, r3
 8012eb4:	d100      	bne.n	8012eb8 <__aeabi_dadd+0x29c>
 8012eb6:	e213      	b.n	80132e0 <__aeabi_dadd+0x6c4>
 8012eb8:	2280      	movs	r2, #128	; 0x80
 8012eba:	0312      	lsls	r2, r2, #12
 8012ebc:	4313      	orrs	r3, r2
 8012ebe:	031b      	lsls	r3, r3, #12
 8012ec0:	4a33      	ldr	r2, [pc, #204]	; (8012f90 <__aeabi_dadd+0x374>)
 8012ec2:	0b1b      	lsrs	r3, r3, #12
 8012ec4:	e744      	b.n	8012d50 <__aeabi_dadd+0x134>
 8012ec6:	2a00      	cmp	r2, #0
 8012ec8:	d04b      	beq.n	8012f62 <__aeabi_dadd+0x346>
 8012eca:	1b8a      	subs	r2, r1, r6
 8012ecc:	2e00      	cmp	r6, #0
 8012ece:	d100      	bne.n	8012ed2 <__aeabi_dadd+0x2b6>
 8012ed0:	e0e7      	b.n	80130a2 <__aeabi_dadd+0x486>
 8012ed2:	482f      	ldr	r0, [pc, #188]	; (8012f90 <__aeabi_dadd+0x374>)
 8012ed4:	4281      	cmp	r1, r0
 8012ed6:	d100      	bne.n	8012eda <__aeabi_dadd+0x2be>
 8012ed8:	e195      	b.n	8013206 <__aeabi_dadd+0x5ea>
 8012eda:	2080      	movs	r0, #128	; 0x80
 8012edc:	0400      	lsls	r0, r0, #16
 8012ede:	4303      	orrs	r3, r0
 8012ee0:	2a38      	cmp	r2, #56	; 0x38
 8012ee2:	dd00      	ble.n	8012ee6 <__aeabi_dadd+0x2ca>
 8012ee4:	e143      	b.n	801316e <__aeabi_dadd+0x552>
 8012ee6:	2a1f      	cmp	r2, #31
 8012ee8:	dd00      	ble.n	8012eec <__aeabi_dadd+0x2d0>
 8012eea:	e1db      	b.n	80132a4 <__aeabi_dadd+0x688>
 8012eec:	2020      	movs	r0, #32
 8012eee:	001d      	movs	r5, r3
 8012ef0:	464e      	mov	r6, r9
 8012ef2:	1a80      	subs	r0, r0, r2
 8012ef4:	4085      	lsls	r5, r0
 8012ef6:	40d6      	lsrs	r6, r2
 8012ef8:	4335      	orrs	r5, r6
 8012efa:	464e      	mov	r6, r9
 8012efc:	4086      	lsls	r6, r0
 8012efe:	0030      	movs	r0, r6
 8012f00:	40d3      	lsrs	r3, r2
 8012f02:	1e46      	subs	r6, r0, #1
 8012f04:	41b0      	sbcs	r0, r6
 8012f06:	449c      	add	ip, r3
 8012f08:	4305      	orrs	r5, r0
 8012f0a:	19ed      	adds	r5, r5, r7
 8012f0c:	42bd      	cmp	r5, r7
 8012f0e:	419b      	sbcs	r3, r3
 8012f10:	425b      	negs	r3, r3
 8012f12:	4463      	add	r3, ip
 8012f14:	4698      	mov	r8, r3
 8012f16:	000e      	movs	r6, r1
 8012f18:	e07f      	b.n	801301a <__aeabi_dadd+0x3fe>
 8012f1a:	4a1e      	ldr	r2, [pc, #120]	; (8012f94 <__aeabi_dadd+0x378>)
 8012f1c:	1a76      	subs	r6, r6, r1
 8012f1e:	4013      	ands	r3, r2
 8012f20:	4698      	mov	r8, r3
 8012f22:	e6f5      	b.n	8012d10 <__aeabi_dadd+0xf4>
 8012f24:	0028      	movs	r0, r5
 8012f26:	f001 fc91 	bl	801484c <__clzsi2>
 8012f2a:	0001      	movs	r1, r0
 8012f2c:	3118      	adds	r1, #24
 8012f2e:	291f      	cmp	r1, #31
 8012f30:	dc00      	bgt.n	8012f34 <__aeabi_dadd+0x318>
 8012f32:	e6cf      	b.n	8012cd4 <__aeabi_dadd+0xb8>
 8012f34:	002b      	movs	r3, r5
 8012f36:	3808      	subs	r0, #8
 8012f38:	4083      	lsls	r3, r0
 8012f3a:	2500      	movs	r5, #0
 8012f3c:	e6d2      	b.n	8012ce4 <__aeabi_dadd+0xc8>
 8012f3e:	4662      	mov	r2, ip
 8012f40:	433a      	orrs	r2, r7
 8012f42:	0011      	movs	r1, r2
 8012f44:	1e4f      	subs	r7, r1, #1
 8012f46:	41b9      	sbcs	r1, r7
 8012f48:	e6ac      	b.n	8012ca4 <__aeabi_dadd+0x88>
 8012f4a:	4649      	mov	r1, r9
 8012f4c:	0758      	lsls	r0, r3, #29
 8012f4e:	08c9      	lsrs	r1, r1, #3
 8012f50:	4301      	orrs	r1, r0
 8012f52:	08db      	lsrs	r3, r3, #3
 8012f54:	e787      	b.n	8012e66 <__aeabi_dadd+0x24a>
 8012f56:	4649      	mov	r1, r9
 8012f58:	075a      	lsls	r2, r3, #29
 8012f5a:	08c9      	lsrs	r1, r1, #3
 8012f5c:	4311      	orrs	r1, r2
 8012f5e:	08db      	lsrs	r3, r3, #3
 8012f60:	e7a6      	b.n	8012eb0 <__aeabi_dadd+0x294>
 8012f62:	490d      	ldr	r1, [pc, #52]	; (8012f98 <__aeabi_dadd+0x37c>)
 8012f64:	1c70      	adds	r0, r6, #1
 8012f66:	4208      	tst	r0, r1
 8012f68:	d000      	beq.n	8012f6c <__aeabi_dadd+0x350>
 8012f6a:	e0bb      	b.n	80130e4 <__aeabi_dadd+0x4c8>
 8012f6c:	2e00      	cmp	r6, #0
 8012f6e:	d000      	beq.n	8012f72 <__aeabi_dadd+0x356>
 8012f70:	e114      	b.n	801319c <__aeabi_dadd+0x580>
 8012f72:	4649      	mov	r1, r9
 8012f74:	4319      	orrs	r1, r3
 8012f76:	d100      	bne.n	8012f7a <__aeabi_dadd+0x35e>
 8012f78:	e175      	b.n	8013266 <__aeabi_dadd+0x64a>
 8012f7a:	0029      	movs	r1, r5
 8012f7c:	4339      	orrs	r1, r7
 8012f7e:	d000      	beq.n	8012f82 <__aeabi_dadd+0x366>
 8012f80:	e17e      	b.n	8013280 <__aeabi_dadd+0x664>
 8012f82:	4649      	mov	r1, r9
 8012f84:	0758      	lsls	r0, r3, #29
 8012f86:	08c9      	lsrs	r1, r1, #3
 8012f88:	4301      	orrs	r1, r0
 8012f8a:	08db      	lsrs	r3, r3, #3
 8012f8c:	e76e      	b.n	8012e6c <__aeabi_dadd+0x250>
 8012f8e:	46c0      	nop			; (mov r8, r8)
 8012f90:	000007ff 	.word	0x000007ff
 8012f94:	ff7fffff 	.word	0xff7fffff
 8012f98:	000007fe 	.word	0x000007fe
 8012f9c:	4649      	mov	r1, r9
 8012f9e:	1bcd      	subs	r5, r1, r7
 8012fa0:	4661      	mov	r1, ip
 8012fa2:	1a58      	subs	r0, r3, r1
 8012fa4:	45a9      	cmp	r9, r5
 8012fa6:	4189      	sbcs	r1, r1
 8012fa8:	4249      	negs	r1, r1
 8012faa:	4688      	mov	r8, r1
 8012fac:	0001      	movs	r1, r0
 8012fae:	4640      	mov	r0, r8
 8012fb0:	1a09      	subs	r1, r1, r0
 8012fb2:	4688      	mov	r8, r1
 8012fb4:	0209      	lsls	r1, r1, #8
 8012fb6:	d500      	bpl.n	8012fba <__aeabi_dadd+0x39e>
 8012fb8:	e0a6      	b.n	8013108 <__aeabi_dadd+0x4ec>
 8012fba:	4641      	mov	r1, r8
 8012fbc:	4329      	orrs	r1, r5
 8012fbe:	d000      	beq.n	8012fc2 <__aeabi_dadd+0x3a6>
 8012fc0:	e67f      	b.n	8012cc2 <__aeabi_dadd+0xa6>
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	2400      	movs	r4, #0
 8012fc6:	e751      	b.n	8012e6c <__aeabi_dadd+0x250>
 8012fc8:	4cc7      	ldr	r4, [pc, #796]	; (80132e8 <__aeabi_dadd+0x6cc>)
 8012fca:	42a1      	cmp	r1, r4
 8012fcc:	d100      	bne.n	8012fd0 <__aeabi_dadd+0x3b4>
 8012fce:	e0c7      	b.n	8013160 <__aeabi_dadd+0x544>
 8012fd0:	2480      	movs	r4, #128	; 0x80
 8012fd2:	0424      	lsls	r4, r4, #16
 8012fd4:	4323      	orrs	r3, r4
 8012fd6:	2a38      	cmp	r2, #56	; 0x38
 8012fd8:	dc54      	bgt.n	8013084 <__aeabi_dadd+0x468>
 8012fda:	2a1f      	cmp	r2, #31
 8012fdc:	dd00      	ble.n	8012fe0 <__aeabi_dadd+0x3c4>
 8012fde:	e0cc      	b.n	801317a <__aeabi_dadd+0x55e>
 8012fe0:	2420      	movs	r4, #32
 8012fe2:	4648      	mov	r0, r9
 8012fe4:	1aa4      	subs	r4, r4, r2
 8012fe6:	001d      	movs	r5, r3
 8012fe8:	464e      	mov	r6, r9
 8012fea:	40a0      	lsls	r0, r4
 8012fec:	40d6      	lsrs	r6, r2
 8012fee:	40a5      	lsls	r5, r4
 8012ff0:	0004      	movs	r4, r0
 8012ff2:	40d3      	lsrs	r3, r2
 8012ff4:	4662      	mov	r2, ip
 8012ff6:	4335      	orrs	r5, r6
 8012ff8:	1e66      	subs	r6, r4, #1
 8012ffa:	41b4      	sbcs	r4, r6
 8012ffc:	1ad3      	subs	r3, r2, r3
 8012ffe:	469c      	mov	ip, r3
 8013000:	4325      	orrs	r5, r4
 8013002:	e044      	b.n	801308e <__aeabi_dadd+0x472>
 8013004:	4662      	mov	r2, ip
 8013006:	433a      	orrs	r2, r7
 8013008:	0015      	movs	r5, r2
 801300a:	1e6f      	subs	r7, r5, #1
 801300c:	41bd      	sbcs	r5, r7
 801300e:	444d      	add	r5, r9
 8013010:	454d      	cmp	r5, r9
 8013012:	4189      	sbcs	r1, r1
 8013014:	4249      	negs	r1, r1
 8013016:	4688      	mov	r8, r1
 8013018:	4498      	add	r8, r3
 801301a:	4643      	mov	r3, r8
 801301c:	021b      	lsls	r3, r3, #8
 801301e:	d400      	bmi.n	8013022 <__aeabi_dadd+0x406>
 8013020:	e718      	b.n	8012e54 <__aeabi_dadd+0x238>
 8013022:	4bb1      	ldr	r3, [pc, #708]	; (80132e8 <__aeabi_dadd+0x6cc>)
 8013024:	3601      	adds	r6, #1
 8013026:	429e      	cmp	r6, r3
 8013028:	d049      	beq.n	80130be <__aeabi_dadd+0x4a2>
 801302a:	4642      	mov	r2, r8
 801302c:	4baf      	ldr	r3, [pc, #700]	; (80132ec <__aeabi_dadd+0x6d0>)
 801302e:	2101      	movs	r1, #1
 8013030:	401a      	ands	r2, r3
 8013032:	0013      	movs	r3, r2
 8013034:	086a      	lsrs	r2, r5, #1
 8013036:	400d      	ands	r5, r1
 8013038:	4315      	orrs	r5, r2
 801303a:	07d9      	lsls	r1, r3, #31
 801303c:	085b      	lsrs	r3, r3, #1
 801303e:	4698      	mov	r8, r3
 8013040:	430d      	orrs	r5, r1
 8013042:	e665      	b.n	8012d10 <__aeabi_dadd+0xf4>
 8013044:	0018      	movs	r0, r3
 8013046:	3e1f      	subs	r6, #31
 8013048:	40f0      	lsrs	r0, r6
 801304a:	2a20      	cmp	r2, #32
 801304c:	d003      	beq.n	8013056 <__aeabi_dadd+0x43a>
 801304e:	2140      	movs	r1, #64	; 0x40
 8013050:	1a8a      	subs	r2, r1, r2
 8013052:	4093      	lsls	r3, r2
 8013054:	431d      	orrs	r5, r3
 8013056:	1e69      	subs	r1, r5, #1
 8013058:	418d      	sbcs	r5, r1
 801305a:	2300      	movs	r3, #0
 801305c:	2600      	movs	r6, #0
 801305e:	4698      	mov	r8, r3
 8013060:	4305      	orrs	r5, r0
 8013062:	e6f7      	b.n	8012e54 <__aeabi_dadd+0x238>
 8013064:	0011      	movs	r1, r2
 8013066:	4665      	mov	r5, ip
 8013068:	3920      	subs	r1, #32
 801306a:	40cd      	lsrs	r5, r1
 801306c:	2a20      	cmp	r2, #32
 801306e:	d004      	beq.n	801307a <__aeabi_dadd+0x45e>
 8013070:	2040      	movs	r0, #64	; 0x40
 8013072:	4661      	mov	r1, ip
 8013074:	1a82      	subs	r2, r0, r2
 8013076:	4091      	lsls	r1, r2
 8013078:	430f      	orrs	r7, r1
 801307a:	0039      	movs	r1, r7
 801307c:	1e4f      	subs	r7, r1, #1
 801307e:	41b9      	sbcs	r1, r7
 8013080:	4329      	orrs	r1, r5
 8013082:	e60f      	b.n	8012ca4 <__aeabi_dadd+0x88>
 8013084:	464a      	mov	r2, r9
 8013086:	4313      	orrs	r3, r2
 8013088:	001d      	movs	r5, r3
 801308a:	1e6b      	subs	r3, r5, #1
 801308c:	419d      	sbcs	r5, r3
 801308e:	1b7d      	subs	r5, r7, r5
 8013090:	42af      	cmp	r7, r5
 8013092:	419b      	sbcs	r3, r3
 8013094:	4662      	mov	r2, ip
 8013096:	425b      	negs	r3, r3
 8013098:	1ad3      	subs	r3, r2, r3
 801309a:	4698      	mov	r8, r3
 801309c:	4654      	mov	r4, sl
 801309e:	000e      	movs	r6, r1
 80130a0:	e607      	b.n	8012cb2 <__aeabi_dadd+0x96>
 80130a2:	4648      	mov	r0, r9
 80130a4:	4318      	orrs	r0, r3
 80130a6:	d100      	bne.n	80130aa <__aeabi_dadd+0x48e>
 80130a8:	e0b3      	b.n	8013212 <__aeabi_dadd+0x5f6>
 80130aa:	1e50      	subs	r0, r2, #1
 80130ac:	2a01      	cmp	r2, #1
 80130ae:	d100      	bne.n	80130b2 <__aeabi_dadd+0x496>
 80130b0:	e10d      	b.n	80132ce <__aeabi_dadd+0x6b2>
 80130b2:	4d8d      	ldr	r5, [pc, #564]	; (80132e8 <__aeabi_dadd+0x6cc>)
 80130b4:	42aa      	cmp	r2, r5
 80130b6:	d100      	bne.n	80130ba <__aeabi_dadd+0x49e>
 80130b8:	e0a5      	b.n	8013206 <__aeabi_dadd+0x5ea>
 80130ba:	0002      	movs	r2, r0
 80130bc:	e710      	b.n	8012ee0 <__aeabi_dadd+0x2c4>
 80130be:	0032      	movs	r2, r6
 80130c0:	2300      	movs	r3, #0
 80130c2:	2100      	movs	r1, #0
 80130c4:	e644      	b.n	8012d50 <__aeabi_dadd+0x134>
 80130c6:	2120      	movs	r1, #32
 80130c8:	0038      	movs	r0, r7
 80130ca:	1a89      	subs	r1, r1, r2
 80130cc:	4665      	mov	r5, ip
 80130ce:	408f      	lsls	r7, r1
 80130d0:	408d      	lsls	r5, r1
 80130d2:	40d0      	lsrs	r0, r2
 80130d4:	1e79      	subs	r1, r7, #1
 80130d6:	418f      	sbcs	r7, r1
 80130d8:	4305      	orrs	r5, r0
 80130da:	433d      	orrs	r5, r7
 80130dc:	4667      	mov	r7, ip
 80130de:	40d7      	lsrs	r7, r2
 80130e0:	19db      	adds	r3, r3, r7
 80130e2:	e794      	b.n	801300e <__aeabi_dadd+0x3f2>
 80130e4:	4a80      	ldr	r2, [pc, #512]	; (80132e8 <__aeabi_dadd+0x6cc>)
 80130e6:	4290      	cmp	r0, r2
 80130e8:	d100      	bne.n	80130ec <__aeabi_dadd+0x4d0>
 80130ea:	e0ec      	b.n	80132c6 <__aeabi_dadd+0x6aa>
 80130ec:	0039      	movs	r1, r7
 80130ee:	4449      	add	r1, r9
 80130f0:	4549      	cmp	r1, r9
 80130f2:	4192      	sbcs	r2, r2
 80130f4:	4463      	add	r3, ip
 80130f6:	4252      	negs	r2, r2
 80130f8:	189b      	adds	r3, r3, r2
 80130fa:	07dd      	lsls	r5, r3, #31
 80130fc:	0849      	lsrs	r1, r1, #1
 80130fe:	085b      	lsrs	r3, r3, #1
 8013100:	4698      	mov	r8, r3
 8013102:	0006      	movs	r6, r0
 8013104:	430d      	orrs	r5, r1
 8013106:	e6a5      	b.n	8012e54 <__aeabi_dadd+0x238>
 8013108:	464a      	mov	r2, r9
 801310a:	1abd      	subs	r5, r7, r2
 801310c:	42af      	cmp	r7, r5
 801310e:	4189      	sbcs	r1, r1
 8013110:	4662      	mov	r2, ip
 8013112:	4249      	negs	r1, r1
 8013114:	1ad3      	subs	r3, r2, r3
 8013116:	1a5b      	subs	r3, r3, r1
 8013118:	4698      	mov	r8, r3
 801311a:	4654      	mov	r4, sl
 801311c:	e5d1      	b.n	8012cc2 <__aeabi_dadd+0xa6>
 801311e:	076c      	lsls	r4, r5, #29
 8013120:	08f9      	lsrs	r1, r7, #3
 8013122:	4321      	orrs	r1, r4
 8013124:	08eb      	lsrs	r3, r5, #3
 8013126:	0004      	movs	r4, r0
 8013128:	e69d      	b.n	8012e66 <__aeabi_dadd+0x24a>
 801312a:	464a      	mov	r2, r9
 801312c:	431a      	orrs	r2, r3
 801312e:	d175      	bne.n	801321c <__aeabi_dadd+0x600>
 8013130:	4661      	mov	r1, ip
 8013132:	4339      	orrs	r1, r7
 8013134:	d114      	bne.n	8013160 <__aeabi_dadd+0x544>
 8013136:	2380      	movs	r3, #128	; 0x80
 8013138:	2400      	movs	r4, #0
 801313a:	031b      	lsls	r3, r3, #12
 801313c:	e6bc      	b.n	8012eb8 <__aeabi_dadd+0x29c>
 801313e:	464a      	mov	r2, r9
 8013140:	1bd5      	subs	r5, r2, r7
 8013142:	45a9      	cmp	r9, r5
 8013144:	4189      	sbcs	r1, r1
 8013146:	4662      	mov	r2, ip
 8013148:	4249      	negs	r1, r1
 801314a:	1a9b      	subs	r3, r3, r2
 801314c:	1a5b      	subs	r3, r3, r1
 801314e:	4698      	mov	r8, r3
 8013150:	2601      	movs	r6, #1
 8013152:	e5ae      	b.n	8012cb2 <__aeabi_dadd+0x96>
 8013154:	464a      	mov	r2, r9
 8013156:	08d1      	lsrs	r1, r2, #3
 8013158:	075a      	lsls	r2, r3, #29
 801315a:	4311      	orrs	r1, r2
 801315c:	08db      	lsrs	r3, r3, #3
 801315e:	e6a7      	b.n	8012eb0 <__aeabi_dadd+0x294>
 8013160:	4663      	mov	r3, ip
 8013162:	08f9      	lsrs	r1, r7, #3
 8013164:	075a      	lsls	r2, r3, #29
 8013166:	4654      	mov	r4, sl
 8013168:	4311      	orrs	r1, r2
 801316a:	08db      	lsrs	r3, r3, #3
 801316c:	e6a0      	b.n	8012eb0 <__aeabi_dadd+0x294>
 801316e:	464a      	mov	r2, r9
 8013170:	4313      	orrs	r3, r2
 8013172:	001d      	movs	r5, r3
 8013174:	1e6b      	subs	r3, r5, #1
 8013176:	419d      	sbcs	r5, r3
 8013178:	e6c7      	b.n	8012f0a <__aeabi_dadd+0x2ee>
 801317a:	0014      	movs	r4, r2
 801317c:	001e      	movs	r6, r3
 801317e:	3c20      	subs	r4, #32
 8013180:	40e6      	lsrs	r6, r4
 8013182:	2a20      	cmp	r2, #32
 8013184:	d005      	beq.n	8013192 <__aeabi_dadd+0x576>
 8013186:	2440      	movs	r4, #64	; 0x40
 8013188:	1aa2      	subs	r2, r4, r2
 801318a:	4093      	lsls	r3, r2
 801318c:	464a      	mov	r2, r9
 801318e:	431a      	orrs	r2, r3
 8013190:	4691      	mov	r9, r2
 8013192:	464d      	mov	r5, r9
 8013194:	1e6b      	subs	r3, r5, #1
 8013196:	419d      	sbcs	r5, r3
 8013198:	4335      	orrs	r5, r6
 801319a:	e778      	b.n	801308e <__aeabi_dadd+0x472>
 801319c:	464a      	mov	r2, r9
 801319e:	431a      	orrs	r2, r3
 80131a0:	d000      	beq.n	80131a4 <__aeabi_dadd+0x588>
 80131a2:	e66b      	b.n	8012e7c <__aeabi_dadd+0x260>
 80131a4:	076b      	lsls	r3, r5, #29
 80131a6:	08f9      	lsrs	r1, r7, #3
 80131a8:	4319      	orrs	r1, r3
 80131aa:	08eb      	lsrs	r3, r5, #3
 80131ac:	e680      	b.n	8012eb0 <__aeabi_dadd+0x294>
 80131ae:	4661      	mov	r1, ip
 80131b0:	4339      	orrs	r1, r7
 80131b2:	d054      	beq.n	801325e <__aeabi_dadd+0x642>
 80131b4:	4663      	mov	r3, ip
 80131b6:	08f9      	lsrs	r1, r7, #3
 80131b8:	075c      	lsls	r4, r3, #29
 80131ba:	4321      	orrs	r1, r4
 80131bc:	08db      	lsrs	r3, r3, #3
 80131be:	0004      	movs	r4, r0
 80131c0:	e654      	b.n	8012e6c <__aeabi_dadd+0x250>
 80131c2:	464a      	mov	r2, r9
 80131c4:	1abd      	subs	r5, r7, r2
 80131c6:	42af      	cmp	r7, r5
 80131c8:	4189      	sbcs	r1, r1
 80131ca:	4662      	mov	r2, ip
 80131cc:	4249      	negs	r1, r1
 80131ce:	1ad3      	subs	r3, r2, r3
 80131d0:	1a5b      	subs	r3, r3, r1
 80131d2:	4698      	mov	r8, r3
 80131d4:	0004      	movs	r4, r0
 80131d6:	2601      	movs	r6, #1
 80131d8:	e56b      	b.n	8012cb2 <__aeabi_dadd+0x96>
 80131da:	464a      	mov	r2, r9
 80131dc:	1bd5      	subs	r5, r2, r7
 80131de:	45a9      	cmp	r9, r5
 80131e0:	4189      	sbcs	r1, r1
 80131e2:	4662      	mov	r2, ip
 80131e4:	4249      	negs	r1, r1
 80131e6:	1a9a      	subs	r2, r3, r2
 80131e8:	1a52      	subs	r2, r2, r1
 80131ea:	4690      	mov	r8, r2
 80131ec:	0212      	lsls	r2, r2, #8
 80131ee:	d532      	bpl.n	8013256 <__aeabi_dadd+0x63a>
 80131f0:	464a      	mov	r2, r9
 80131f2:	1abd      	subs	r5, r7, r2
 80131f4:	42af      	cmp	r7, r5
 80131f6:	4189      	sbcs	r1, r1
 80131f8:	4662      	mov	r2, ip
 80131fa:	4249      	negs	r1, r1
 80131fc:	1ad3      	subs	r3, r2, r3
 80131fe:	1a5b      	subs	r3, r3, r1
 8013200:	4698      	mov	r8, r3
 8013202:	0004      	movs	r4, r0
 8013204:	e584      	b.n	8012d10 <__aeabi_dadd+0xf4>
 8013206:	4663      	mov	r3, ip
 8013208:	08f9      	lsrs	r1, r7, #3
 801320a:	075a      	lsls	r2, r3, #29
 801320c:	4311      	orrs	r1, r2
 801320e:	08db      	lsrs	r3, r3, #3
 8013210:	e64e      	b.n	8012eb0 <__aeabi_dadd+0x294>
 8013212:	08f9      	lsrs	r1, r7, #3
 8013214:	0768      	lsls	r0, r5, #29
 8013216:	4301      	orrs	r1, r0
 8013218:	08eb      	lsrs	r3, r5, #3
 801321a:	e624      	b.n	8012e66 <__aeabi_dadd+0x24a>
 801321c:	4662      	mov	r2, ip
 801321e:	433a      	orrs	r2, r7
 8013220:	d100      	bne.n	8013224 <__aeabi_dadd+0x608>
 8013222:	e698      	b.n	8012f56 <__aeabi_dadd+0x33a>
 8013224:	464a      	mov	r2, r9
 8013226:	08d1      	lsrs	r1, r2, #3
 8013228:	075a      	lsls	r2, r3, #29
 801322a:	4311      	orrs	r1, r2
 801322c:	08da      	lsrs	r2, r3, #3
 801322e:	2380      	movs	r3, #128	; 0x80
 8013230:	031b      	lsls	r3, r3, #12
 8013232:	421a      	tst	r2, r3
 8013234:	d008      	beq.n	8013248 <__aeabi_dadd+0x62c>
 8013236:	4660      	mov	r0, ip
 8013238:	08c5      	lsrs	r5, r0, #3
 801323a:	421d      	tst	r5, r3
 801323c:	d104      	bne.n	8013248 <__aeabi_dadd+0x62c>
 801323e:	4654      	mov	r4, sl
 8013240:	002a      	movs	r2, r5
 8013242:	08f9      	lsrs	r1, r7, #3
 8013244:	0743      	lsls	r3, r0, #29
 8013246:	4319      	orrs	r1, r3
 8013248:	0f4b      	lsrs	r3, r1, #29
 801324a:	00c9      	lsls	r1, r1, #3
 801324c:	075b      	lsls	r3, r3, #29
 801324e:	08c9      	lsrs	r1, r1, #3
 8013250:	4319      	orrs	r1, r3
 8013252:	0013      	movs	r3, r2
 8013254:	e62c      	b.n	8012eb0 <__aeabi_dadd+0x294>
 8013256:	4641      	mov	r1, r8
 8013258:	4329      	orrs	r1, r5
 801325a:	d000      	beq.n	801325e <__aeabi_dadd+0x642>
 801325c:	e5fa      	b.n	8012e54 <__aeabi_dadd+0x238>
 801325e:	2300      	movs	r3, #0
 8013260:	000a      	movs	r2, r1
 8013262:	2400      	movs	r4, #0
 8013264:	e602      	b.n	8012e6c <__aeabi_dadd+0x250>
 8013266:	076b      	lsls	r3, r5, #29
 8013268:	08f9      	lsrs	r1, r7, #3
 801326a:	4319      	orrs	r1, r3
 801326c:	08eb      	lsrs	r3, r5, #3
 801326e:	e5fd      	b.n	8012e6c <__aeabi_dadd+0x250>
 8013270:	4663      	mov	r3, ip
 8013272:	08f9      	lsrs	r1, r7, #3
 8013274:	075b      	lsls	r3, r3, #29
 8013276:	4319      	orrs	r1, r3
 8013278:	4663      	mov	r3, ip
 801327a:	0004      	movs	r4, r0
 801327c:	08db      	lsrs	r3, r3, #3
 801327e:	e617      	b.n	8012eb0 <__aeabi_dadd+0x294>
 8013280:	003d      	movs	r5, r7
 8013282:	444d      	add	r5, r9
 8013284:	4463      	add	r3, ip
 8013286:	454d      	cmp	r5, r9
 8013288:	4189      	sbcs	r1, r1
 801328a:	4698      	mov	r8, r3
 801328c:	4249      	negs	r1, r1
 801328e:	4488      	add	r8, r1
 8013290:	4643      	mov	r3, r8
 8013292:	021b      	lsls	r3, r3, #8
 8013294:	d400      	bmi.n	8013298 <__aeabi_dadd+0x67c>
 8013296:	e5dd      	b.n	8012e54 <__aeabi_dadd+0x238>
 8013298:	4642      	mov	r2, r8
 801329a:	4b14      	ldr	r3, [pc, #80]	; (80132ec <__aeabi_dadd+0x6d0>)
 801329c:	2601      	movs	r6, #1
 801329e:	401a      	ands	r2, r3
 80132a0:	4690      	mov	r8, r2
 80132a2:	e5d7      	b.n	8012e54 <__aeabi_dadd+0x238>
 80132a4:	0010      	movs	r0, r2
 80132a6:	001e      	movs	r6, r3
 80132a8:	3820      	subs	r0, #32
 80132aa:	40c6      	lsrs	r6, r0
 80132ac:	2a20      	cmp	r2, #32
 80132ae:	d005      	beq.n	80132bc <__aeabi_dadd+0x6a0>
 80132b0:	2040      	movs	r0, #64	; 0x40
 80132b2:	1a82      	subs	r2, r0, r2
 80132b4:	4093      	lsls	r3, r2
 80132b6:	464a      	mov	r2, r9
 80132b8:	431a      	orrs	r2, r3
 80132ba:	4691      	mov	r9, r2
 80132bc:	464d      	mov	r5, r9
 80132be:	1e6b      	subs	r3, r5, #1
 80132c0:	419d      	sbcs	r5, r3
 80132c2:	4335      	orrs	r5, r6
 80132c4:	e621      	b.n	8012f0a <__aeabi_dadd+0x2ee>
 80132c6:	0002      	movs	r2, r0
 80132c8:	2300      	movs	r3, #0
 80132ca:	2100      	movs	r1, #0
 80132cc:	e540      	b.n	8012d50 <__aeabi_dadd+0x134>
 80132ce:	464a      	mov	r2, r9
 80132d0:	19d5      	adds	r5, r2, r7
 80132d2:	42bd      	cmp	r5, r7
 80132d4:	4189      	sbcs	r1, r1
 80132d6:	4463      	add	r3, ip
 80132d8:	4698      	mov	r8, r3
 80132da:	4249      	negs	r1, r1
 80132dc:	4488      	add	r8, r1
 80132de:	e5b3      	b.n	8012e48 <__aeabi_dadd+0x22c>
 80132e0:	2100      	movs	r1, #0
 80132e2:	4a01      	ldr	r2, [pc, #4]	; (80132e8 <__aeabi_dadd+0x6cc>)
 80132e4:	000b      	movs	r3, r1
 80132e6:	e533      	b.n	8012d50 <__aeabi_dadd+0x134>
 80132e8:	000007ff 	.word	0x000007ff
 80132ec:	ff7fffff 	.word	0xff7fffff

080132f0 <__aeabi_ddiv>:
 80132f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132f2:	4657      	mov	r7, sl
 80132f4:	464e      	mov	r6, r9
 80132f6:	4645      	mov	r5, r8
 80132f8:	46de      	mov	lr, fp
 80132fa:	b5e0      	push	{r5, r6, r7, lr}
 80132fc:	4681      	mov	r9, r0
 80132fe:	0005      	movs	r5, r0
 8013300:	030c      	lsls	r4, r1, #12
 8013302:	0048      	lsls	r0, r1, #1
 8013304:	4692      	mov	sl, r2
 8013306:	001f      	movs	r7, r3
 8013308:	b085      	sub	sp, #20
 801330a:	0b24      	lsrs	r4, r4, #12
 801330c:	0d40      	lsrs	r0, r0, #21
 801330e:	0fce      	lsrs	r6, r1, #31
 8013310:	2800      	cmp	r0, #0
 8013312:	d059      	beq.n	80133c8 <__aeabi_ddiv+0xd8>
 8013314:	4b87      	ldr	r3, [pc, #540]	; (8013534 <__aeabi_ddiv+0x244>)
 8013316:	4298      	cmp	r0, r3
 8013318:	d100      	bne.n	801331c <__aeabi_ddiv+0x2c>
 801331a:	e098      	b.n	801344e <__aeabi_ddiv+0x15e>
 801331c:	0f6b      	lsrs	r3, r5, #29
 801331e:	00e4      	lsls	r4, r4, #3
 8013320:	431c      	orrs	r4, r3
 8013322:	2380      	movs	r3, #128	; 0x80
 8013324:	041b      	lsls	r3, r3, #16
 8013326:	4323      	orrs	r3, r4
 8013328:	4698      	mov	r8, r3
 801332a:	4b83      	ldr	r3, [pc, #524]	; (8013538 <__aeabi_ddiv+0x248>)
 801332c:	00ed      	lsls	r5, r5, #3
 801332e:	469b      	mov	fp, r3
 8013330:	2300      	movs	r3, #0
 8013332:	4699      	mov	r9, r3
 8013334:	4483      	add	fp, r0
 8013336:	9300      	str	r3, [sp, #0]
 8013338:	033c      	lsls	r4, r7, #12
 801333a:	007b      	lsls	r3, r7, #1
 801333c:	4650      	mov	r0, sl
 801333e:	0b24      	lsrs	r4, r4, #12
 8013340:	0d5b      	lsrs	r3, r3, #21
 8013342:	0fff      	lsrs	r7, r7, #31
 8013344:	2b00      	cmp	r3, #0
 8013346:	d067      	beq.n	8013418 <__aeabi_ddiv+0x128>
 8013348:	4a7a      	ldr	r2, [pc, #488]	; (8013534 <__aeabi_ddiv+0x244>)
 801334a:	4293      	cmp	r3, r2
 801334c:	d018      	beq.n	8013380 <__aeabi_ddiv+0x90>
 801334e:	497a      	ldr	r1, [pc, #488]	; (8013538 <__aeabi_ddiv+0x248>)
 8013350:	0f42      	lsrs	r2, r0, #29
 8013352:	468c      	mov	ip, r1
 8013354:	00e4      	lsls	r4, r4, #3
 8013356:	4659      	mov	r1, fp
 8013358:	4314      	orrs	r4, r2
 801335a:	2280      	movs	r2, #128	; 0x80
 801335c:	4463      	add	r3, ip
 801335e:	0412      	lsls	r2, r2, #16
 8013360:	1acb      	subs	r3, r1, r3
 8013362:	4314      	orrs	r4, r2
 8013364:	469b      	mov	fp, r3
 8013366:	00c2      	lsls	r2, r0, #3
 8013368:	2000      	movs	r0, #0
 801336a:	0033      	movs	r3, r6
 801336c:	407b      	eors	r3, r7
 801336e:	469a      	mov	sl, r3
 8013370:	464b      	mov	r3, r9
 8013372:	2b0f      	cmp	r3, #15
 8013374:	d900      	bls.n	8013378 <__aeabi_ddiv+0x88>
 8013376:	e0ef      	b.n	8013558 <__aeabi_ddiv+0x268>
 8013378:	4970      	ldr	r1, [pc, #448]	; (801353c <__aeabi_ddiv+0x24c>)
 801337a:	009b      	lsls	r3, r3, #2
 801337c:	58cb      	ldr	r3, [r1, r3]
 801337e:	469f      	mov	pc, r3
 8013380:	4b6f      	ldr	r3, [pc, #444]	; (8013540 <__aeabi_ddiv+0x250>)
 8013382:	4652      	mov	r2, sl
 8013384:	469c      	mov	ip, r3
 8013386:	4322      	orrs	r2, r4
 8013388:	44e3      	add	fp, ip
 801338a:	2a00      	cmp	r2, #0
 801338c:	d000      	beq.n	8013390 <__aeabi_ddiv+0xa0>
 801338e:	e095      	b.n	80134bc <__aeabi_ddiv+0x1cc>
 8013390:	4649      	mov	r1, r9
 8013392:	2302      	movs	r3, #2
 8013394:	4319      	orrs	r1, r3
 8013396:	4689      	mov	r9, r1
 8013398:	2400      	movs	r4, #0
 801339a:	2002      	movs	r0, #2
 801339c:	e7e5      	b.n	801336a <__aeabi_ddiv+0x7a>
 801339e:	2300      	movs	r3, #0
 80133a0:	2400      	movs	r4, #0
 80133a2:	2500      	movs	r5, #0
 80133a4:	4652      	mov	r2, sl
 80133a6:	051b      	lsls	r3, r3, #20
 80133a8:	4323      	orrs	r3, r4
 80133aa:	07d2      	lsls	r2, r2, #31
 80133ac:	4313      	orrs	r3, r2
 80133ae:	0028      	movs	r0, r5
 80133b0:	0019      	movs	r1, r3
 80133b2:	b005      	add	sp, #20
 80133b4:	bc3c      	pop	{r2, r3, r4, r5}
 80133b6:	4690      	mov	r8, r2
 80133b8:	4699      	mov	r9, r3
 80133ba:	46a2      	mov	sl, r4
 80133bc:	46ab      	mov	fp, r5
 80133be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133c0:	2400      	movs	r4, #0
 80133c2:	2500      	movs	r5, #0
 80133c4:	4b5b      	ldr	r3, [pc, #364]	; (8013534 <__aeabi_ddiv+0x244>)
 80133c6:	e7ed      	b.n	80133a4 <__aeabi_ddiv+0xb4>
 80133c8:	464b      	mov	r3, r9
 80133ca:	4323      	orrs	r3, r4
 80133cc:	4698      	mov	r8, r3
 80133ce:	d100      	bne.n	80133d2 <__aeabi_ddiv+0xe2>
 80133d0:	e089      	b.n	80134e6 <__aeabi_ddiv+0x1f6>
 80133d2:	2c00      	cmp	r4, #0
 80133d4:	d100      	bne.n	80133d8 <__aeabi_ddiv+0xe8>
 80133d6:	e1e0      	b.n	801379a <__aeabi_ddiv+0x4aa>
 80133d8:	0020      	movs	r0, r4
 80133da:	f001 fa37 	bl	801484c <__clzsi2>
 80133de:	0001      	movs	r1, r0
 80133e0:	0002      	movs	r2, r0
 80133e2:	390b      	subs	r1, #11
 80133e4:	231d      	movs	r3, #29
 80133e6:	1a5b      	subs	r3, r3, r1
 80133e8:	4649      	mov	r1, r9
 80133ea:	0010      	movs	r0, r2
 80133ec:	40d9      	lsrs	r1, r3
 80133ee:	3808      	subs	r0, #8
 80133f0:	4084      	lsls	r4, r0
 80133f2:	000b      	movs	r3, r1
 80133f4:	464d      	mov	r5, r9
 80133f6:	4323      	orrs	r3, r4
 80133f8:	4698      	mov	r8, r3
 80133fa:	4085      	lsls	r5, r0
 80133fc:	4851      	ldr	r0, [pc, #324]	; (8013544 <__aeabi_ddiv+0x254>)
 80133fe:	033c      	lsls	r4, r7, #12
 8013400:	1a83      	subs	r3, r0, r2
 8013402:	469b      	mov	fp, r3
 8013404:	2300      	movs	r3, #0
 8013406:	4699      	mov	r9, r3
 8013408:	9300      	str	r3, [sp, #0]
 801340a:	007b      	lsls	r3, r7, #1
 801340c:	4650      	mov	r0, sl
 801340e:	0b24      	lsrs	r4, r4, #12
 8013410:	0d5b      	lsrs	r3, r3, #21
 8013412:	0fff      	lsrs	r7, r7, #31
 8013414:	2b00      	cmp	r3, #0
 8013416:	d197      	bne.n	8013348 <__aeabi_ddiv+0x58>
 8013418:	4652      	mov	r2, sl
 801341a:	4322      	orrs	r2, r4
 801341c:	d055      	beq.n	80134ca <__aeabi_ddiv+0x1da>
 801341e:	2c00      	cmp	r4, #0
 8013420:	d100      	bne.n	8013424 <__aeabi_ddiv+0x134>
 8013422:	e1ca      	b.n	80137ba <__aeabi_ddiv+0x4ca>
 8013424:	0020      	movs	r0, r4
 8013426:	f001 fa11 	bl	801484c <__clzsi2>
 801342a:	0002      	movs	r2, r0
 801342c:	3a0b      	subs	r2, #11
 801342e:	231d      	movs	r3, #29
 8013430:	0001      	movs	r1, r0
 8013432:	1a9b      	subs	r3, r3, r2
 8013434:	4652      	mov	r2, sl
 8013436:	3908      	subs	r1, #8
 8013438:	40da      	lsrs	r2, r3
 801343a:	408c      	lsls	r4, r1
 801343c:	4314      	orrs	r4, r2
 801343e:	4652      	mov	r2, sl
 8013440:	408a      	lsls	r2, r1
 8013442:	4b41      	ldr	r3, [pc, #260]	; (8013548 <__aeabi_ddiv+0x258>)
 8013444:	4458      	add	r0, fp
 8013446:	469b      	mov	fp, r3
 8013448:	4483      	add	fp, r0
 801344a:	2000      	movs	r0, #0
 801344c:	e78d      	b.n	801336a <__aeabi_ddiv+0x7a>
 801344e:	464b      	mov	r3, r9
 8013450:	4323      	orrs	r3, r4
 8013452:	4698      	mov	r8, r3
 8013454:	d140      	bne.n	80134d8 <__aeabi_ddiv+0x1e8>
 8013456:	2308      	movs	r3, #8
 8013458:	4699      	mov	r9, r3
 801345a:	3b06      	subs	r3, #6
 801345c:	2500      	movs	r5, #0
 801345e:	4683      	mov	fp, r0
 8013460:	9300      	str	r3, [sp, #0]
 8013462:	e769      	b.n	8013338 <__aeabi_ddiv+0x48>
 8013464:	46b2      	mov	sl, r6
 8013466:	9b00      	ldr	r3, [sp, #0]
 8013468:	2b02      	cmp	r3, #2
 801346a:	d0a9      	beq.n	80133c0 <__aeabi_ddiv+0xd0>
 801346c:	2b03      	cmp	r3, #3
 801346e:	d100      	bne.n	8013472 <__aeabi_ddiv+0x182>
 8013470:	e211      	b.n	8013896 <__aeabi_ddiv+0x5a6>
 8013472:	2b01      	cmp	r3, #1
 8013474:	d093      	beq.n	801339e <__aeabi_ddiv+0xae>
 8013476:	4a35      	ldr	r2, [pc, #212]	; (801354c <__aeabi_ddiv+0x25c>)
 8013478:	445a      	add	r2, fp
 801347a:	2a00      	cmp	r2, #0
 801347c:	dc00      	bgt.n	8013480 <__aeabi_ddiv+0x190>
 801347e:	e13c      	b.n	80136fa <__aeabi_ddiv+0x40a>
 8013480:	076b      	lsls	r3, r5, #29
 8013482:	d000      	beq.n	8013486 <__aeabi_ddiv+0x196>
 8013484:	e1a7      	b.n	80137d6 <__aeabi_ddiv+0x4e6>
 8013486:	08ed      	lsrs	r5, r5, #3
 8013488:	4643      	mov	r3, r8
 801348a:	01db      	lsls	r3, r3, #7
 801348c:	d506      	bpl.n	801349c <__aeabi_ddiv+0x1ac>
 801348e:	4642      	mov	r2, r8
 8013490:	4b2f      	ldr	r3, [pc, #188]	; (8013550 <__aeabi_ddiv+0x260>)
 8013492:	401a      	ands	r2, r3
 8013494:	4690      	mov	r8, r2
 8013496:	2280      	movs	r2, #128	; 0x80
 8013498:	00d2      	lsls	r2, r2, #3
 801349a:	445a      	add	r2, fp
 801349c:	4b2d      	ldr	r3, [pc, #180]	; (8013554 <__aeabi_ddiv+0x264>)
 801349e:	429a      	cmp	r2, r3
 80134a0:	dc8e      	bgt.n	80133c0 <__aeabi_ddiv+0xd0>
 80134a2:	4643      	mov	r3, r8
 80134a4:	0552      	lsls	r2, r2, #21
 80134a6:	0758      	lsls	r0, r3, #29
 80134a8:	025c      	lsls	r4, r3, #9
 80134aa:	4305      	orrs	r5, r0
 80134ac:	0b24      	lsrs	r4, r4, #12
 80134ae:	0d53      	lsrs	r3, r2, #21
 80134b0:	e778      	b.n	80133a4 <__aeabi_ddiv+0xb4>
 80134b2:	46ba      	mov	sl, r7
 80134b4:	46a0      	mov	r8, r4
 80134b6:	0015      	movs	r5, r2
 80134b8:	9000      	str	r0, [sp, #0]
 80134ba:	e7d4      	b.n	8013466 <__aeabi_ddiv+0x176>
 80134bc:	464a      	mov	r2, r9
 80134be:	2303      	movs	r3, #3
 80134c0:	431a      	orrs	r2, r3
 80134c2:	4691      	mov	r9, r2
 80134c4:	2003      	movs	r0, #3
 80134c6:	4652      	mov	r2, sl
 80134c8:	e74f      	b.n	801336a <__aeabi_ddiv+0x7a>
 80134ca:	4649      	mov	r1, r9
 80134cc:	2301      	movs	r3, #1
 80134ce:	4319      	orrs	r1, r3
 80134d0:	4689      	mov	r9, r1
 80134d2:	2400      	movs	r4, #0
 80134d4:	2001      	movs	r0, #1
 80134d6:	e748      	b.n	801336a <__aeabi_ddiv+0x7a>
 80134d8:	230c      	movs	r3, #12
 80134da:	4699      	mov	r9, r3
 80134dc:	3b09      	subs	r3, #9
 80134de:	46a0      	mov	r8, r4
 80134e0:	4683      	mov	fp, r0
 80134e2:	9300      	str	r3, [sp, #0]
 80134e4:	e728      	b.n	8013338 <__aeabi_ddiv+0x48>
 80134e6:	2304      	movs	r3, #4
 80134e8:	4699      	mov	r9, r3
 80134ea:	2300      	movs	r3, #0
 80134ec:	469b      	mov	fp, r3
 80134ee:	3301      	adds	r3, #1
 80134f0:	2500      	movs	r5, #0
 80134f2:	9300      	str	r3, [sp, #0]
 80134f4:	e720      	b.n	8013338 <__aeabi_ddiv+0x48>
 80134f6:	2300      	movs	r3, #0
 80134f8:	2480      	movs	r4, #128	; 0x80
 80134fa:	469a      	mov	sl, r3
 80134fc:	2500      	movs	r5, #0
 80134fe:	4b0d      	ldr	r3, [pc, #52]	; (8013534 <__aeabi_ddiv+0x244>)
 8013500:	0324      	lsls	r4, r4, #12
 8013502:	e74f      	b.n	80133a4 <__aeabi_ddiv+0xb4>
 8013504:	2380      	movs	r3, #128	; 0x80
 8013506:	4641      	mov	r1, r8
 8013508:	031b      	lsls	r3, r3, #12
 801350a:	4219      	tst	r1, r3
 801350c:	d008      	beq.n	8013520 <__aeabi_ddiv+0x230>
 801350e:	421c      	tst	r4, r3
 8013510:	d106      	bne.n	8013520 <__aeabi_ddiv+0x230>
 8013512:	431c      	orrs	r4, r3
 8013514:	0324      	lsls	r4, r4, #12
 8013516:	46ba      	mov	sl, r7
 8013518:	0015      	movs	r5, r2
 801351a:	4b06      	ldr	r3, [pc, #24]	; (8013534 <__aeabi_ddiv+0x244>)
 801351c:	0b24      	lsrs	r4, r4, #12
 801351e:	e741      	b.n	80133a4 <__aeabi_ddiv+0xb4>
 8013520:	2480      	movs	r4, #128	; 0x80
 8013522:	4643      	mov	r3, r8
 8013524:	0324      	lsls	r4, r4, #12
 8013526:	431c      	orrs	r4, r3
 8013528:	0324      	lsls	r4, r4, #12
 801352a:	46b2      	mov	sl, r6
 801352c:	4b01      	ldr	r3, [pc, #4]	; (8013534 <__aeabi_ddiv+0x244>)
 801352e:	0b24      	lsrs	r4, r4, #12
 8013530:	e738      	b.n	80133a4 <__aeabi_ddiv+0xb4>
 8013532:	46c0      	nop			; (mov r8, r8)
 8013534:	000007ff 	.word	0x000007ff
 8013538:	fffffc01 	.word	0xfffffc01
 801353c:	0801acc0 	.word	0x0801acc0
 8013540:	fffff801 	.word	0xfffff801
 8013544:	fffffc0d 	.word	0xfffffc0d
 8013548:	000003f3 	.word	0x000003f3
 801354c:	000003ff 	.word	0x000003ff
 8013550:	feffffff 	.word	0xfeffffff
 8013554:	000007fe 	.word	0x000007fe
 8013558:	4544      	cmp	r4, r8
 801355a:	d200      	bcs.n	801355e <__aeabi_ddiv+0x26e>
 801355c:	e116      	b.n	801378c <__aeabi_ddiv+0x49c>
 801355e:	d100      	bne.n	8013562 <__aeabi_ddiv+0x272>
 8013560:	e111      	b.n	8013786 <__aeabi_ddiv+0x496>
 8013562:	2301      	movs	r3, #1
 8013564:	425b      	negs	r3, r3
 8013566:	469c      	mov	ip, r3
 8013568:	002e      	movs	r6, r5
 801356a:	4640      	mov	r0, r8
 801356c:	2500      	movs	r5, #0
 801356e:	44e3      	add	fp, ip
 8013570:	0223      	lsls	r3, r4, #8
 8013572:	0e14      	lsrs	r4, r2, #24
 8013574:	431c      	orrs	r4, r3
 8013576:	0c1b      	lsrs	r3, r3, #16
 8013578:	4699      	mov	r9, r3
 801357a:	0423      	lsls	r3, r4, #16
 801357c:	0c1f      	lsrs	r7, r3, #16
 801357e:	0212      	lsls	r2, r2, #8
 8013580:	4649      	mov	r1, r9
 8013582:	9200      	str	r2, [sp, #0]
 8013584:	9701      	str	r7, [sp, #4]
 8013586:	f7fe fb49 	bl	8011c1c <__aeabi_uidivmod>
 801358a:	0002      	movs	r2, r0
 801358c:	437a      	muls	r2, r7
 801358e:	040b      	lsls	r3, r1, #16
 8013590:	0c31      	lsrs	r1, r6, #16
 8013592:	4680      	mov	r8, r0
 8013594:	4319      	orrs	r1, r3
 8013596:	428a      	cmp	r2, r1
 8013598:	d90b      	bls.n	80135b2 <__aeabi_ddiv+0x2c2>
 801359a:	2301      	movs	r3, #1
 801359c:	425b      	negs	r3, r3
 801359e:	469c      	mov	ip, r3
 80135a0:	1909      	adds	r1, r1, r4
 80135a2:	44e0      	add	r8, ip
 80135a4:	428c      	cmp	r4, r1
 80135a6:	d804      	bhi.n	80135b2 <__aeabi_ddiv+0x2c2>
 80135a8:	428a      	cmp	r2, r1
 80135aa:	d902      	bls.n	80135b2 <__aeabi_ddiv+0x2c2>
 80135ac:	1e83      	subs	r3, r0, #2
 80135ae:	4698      	mov	r8, r3
 80135b0:	1909      	adds	r1, r1, r4
 80135b2:	1a88      	subs	r0, r1, r2
 80135b4:	4649      	mov	r1, r9
 80135b6:	f7fe fb31 	bl	8011c1c <__aeabi_uidivmod>
 80135ba:	0409      	lsls	r1, r1, #16
 80135bc:	468c      	mov	ip, r1
 80135be:	0431      	lsls	r1, r6, #16
 80135c0:	4666      	mov	r6, ip
 80135c2:	9a01      	ldr	r2, [sp, #4]
 80135c4:	0c09      	lsrs	r1, r1, #16
 80135c6:	4342      	muls	r2, r0
 80135c8:	0003      	movs	r3, r0
 80135ca:	4331      	orrs	r1, r6
 80135cc:	428a      	cmp	r2, r1
 80135ce:	d904      	bls.n	80135da <__aeabi_ddiv+0x2ea>
 80135d0:	1909      	adds	r1, r1, r4
 80135d2:	3b01      	subs	r3, #1
 80135d4:	428c      	cmp	r4, r1
 80135d6:	d800      	bhi.n	80135da <__aeabi_ddiv+0x2ea>
 80135d8:	e111      	b.n	80137fe <__aeabi_ddiv+0x50e>
 80135da:	1a89      	subs	r1, r1, r2
 80135dc:	4642      	mov	r2, r8
 80135de:	9e00      	ldr	r6, [sp, #0]
 80135e0:	0412      	lsls	r2, r2, #16
 80135e2:	431a      	orrs	r2, r3
 80135e4:	0c33      	lsrs	r3, r6, #16
 80135e6:	001f      	movs	r7, r3
 80135e8:	0c10      	lsrs	r0, r2, #16
 80135ea:	4690      	mov	r8, r2
 80135ec:	9302      	str	r3, [sp, #8]
 80135ee:	0413      	lsls	r3, r2, #16
 80135f0:	0432      	lsls	r2, r6, #16
 80135f2:	0c16      	lsrs	r6, r2, #16
 80135f4:	0032      	movs	r2, r6
 80135f6:	0c1b      	lsrs	r3, r3, #16
 80135f8:	435a      	muls	r2, r3
 80135fa:	9603      	str	r6, [sp, #12]
 80135fc:	437b      	muls	r3, r7
 80135fe:	4346      	muls	r6, r0
 8013600:	4378      	muls	r0, r7
 8013602:	0c17      	lsrs	r7, r2, #16
 8013604:	46bc      	mov	ip, r7
 8013606:	199b      	adds	r3, r3, r6
 8013608:	4463      	add	r3, ip
 801360a:	429e      	cmp	r6, r3
 801360c:	d903      	bls.n	8013616 <__aeabi_ddiv+0x326>
 801360e:	2680      	movs	r6, #128	; 0x80
 8013610:	0276      	lsls	r6, r6, #9
 8013612:	46b4      	mov	ip, r6
 8013614:	4460      	add	r0, ip
 8013616:	0c1e      	lsrs	r6, r3, #16
 8013618:	1830      	adds	r0, r6, r0
 801361a:	0416      	lsls	r6, r2, #16
 801361c:	041b      	lsls	r3, r3, #16
 801361e:	0c36      	lsrs	r6, r6, #16
 8013620:	199e      	adds	r6, r3, r6
 8013622:	4281      	cmp	r1, r0
 8013624:	d200      	bcs.n	8013628 <__aeabi_ddiv+0x338>
 8013626:	e09c      	b.n	8013762 <__aeabi_ddiv+0x472>
 8013628:	d100      	bne.n	801362c <__aeabi_ddiv+0x33c>
 801362a:	e097      	b.n	801375c <__aeabi_ddiv+0x46c>
 801362c:	1bae      	subs	r6, r5, r6
 801362e:	1a09      	subs	r1, r1, r0
 8013630:	42b5      	cmp	r5, r6
 8013632:	4180      	sbcs	r0, r0
 8013634:	4240      	negs	r0, r0
 8013636:	1a08      	subs	r0, r1, r0
 8013638:	4284      	cmp	r4, r0
 801363a:	d100      	bne.n	801363e <__aeabi_ddiv+0x34e>
 801363c:	e111      	b.n	8013862 <__aeabi_ddiv+0x572>
 801363e:	4649      	mov	r1, r9
 8013640:	f7fe faec 	bl	8011c1c <__aeabi_uidivmod>
 8013644:	9a01      	ldr	r2, [sp, #4]
 8013646:	040b      	lsls	r3, r1, #16
 8013648:	4342      	muls	r2, r0
 801364a:	0c31      	lsrs	r1, r6, #16
 801364c:	0005      	movs	r5, r0
 801364e:	4319      	orrs	r1, r3
 8013650:	428a      	cmp	r2, r1
 8013652:	d907      	bls.n	8013664 <__aeabi_ddiv+0x374>
 8013654:	1909      	adds	r1, r1, r4
 8013656:	3d01      	subs	r5, #1
 8013658:	428c      	cmp	r4, r1
 801365a:	d803      	bhi.n	8013664 <__aeabi_ddiv+0x374>
 801365c:	428a      	cmp	r2, r1
 801365e:	d901      	bls.n	8013664 <__aeabi_ddiv+0x374>
 8013660:	1e85      	subs	r5, r0, #2
 8013662:	1909      	adds	r1, r1, r4
 8013664:	1a88      	subs	r0, r1, r2
 8013666:	4649      	mov	r1, r9
 8013668:	f7fe fad8 	bl	8011c1c <__aeabi_uidivmod>
 801366c:	0409      	lsls	r1, r1, #16
 801366e:	468c      	mov	ip, r1
 8013670:	0431      	lsls	r1, r6, #16
 8013672:	4666      	mov	r6, ip
 8013674:	9a01      	ldr	r2, [sp, #4]
 8013676:	0c09      	lsrs	r1, r1, #16
 8013678:	4342      	muls	r2, r0
 801367a:	0003      	movs	r3, r0
 801367c:	4331      	orrs	r1, r6
 801367e:	428a      	cmp	r2, r1
 8013680:	d907      	bls.n	8013692 <__aeabi_ddiv+0x3a2>
 8013682:	1909      	adds	r1, r1, r4
 8013684:	3b01      	subs	r3, #1
 8013686:	428c      	cmp	r4, r1
 8013688:	d803      	bhi.n	8013692 <__aeabi_ddiv+0x3a2>
 801368a:	428a      	cmp	r2, r1
 801368c:	d901      	bls.n	8013692 <__aeabi_ddiv+0x3a2>
 801368e:	1e83      	subs	r3, r0, #2
 8013690:	1909      	adds	r1, r1, r4
 8013692:	9e03      	ldr	r6, [sp, #12]
 8013694:	1a89      	subs	r1, r1, r2
 8013696:	0032      	movs	r2, r6
 8013698:	042d      	lsls	r5, r5, #16
 801369a:	431d      	orrs	r5, r3
 801369c:	9f02      	ldr	r7, [sp, #8]
 801369e:	042b      	lsls	r3, r5, #16
 80136a0:	0c1b      	lsrs	r3, r3, #16
 80136a2:	435a      	muls	r2, r3
 80136a4:	437b      	muls	r3, r7
 80136a6:	469c      	mov	ip, r3
 80136a8:	0c28      	lsrs	r0, r5, #16
 80136aa:	4346      	muls	r6, r0
 80136ac:	0c13      	lsrs	r3, r2, #16
 80136ae:	44b4      	add	ip, r6
 80136b0:	4463      	add	r3, ip
 80136b2:	4378      	muls	r0, r7
 80136b4:	429e      	cmp	r6, r3
 80136b6:	d903      	bls.n	80136c0 <__aeabi_ddiv+0x3d0>
 80136b8:	2680      	movs	r6, #128	; 0x80
 80136ba:	0276      	lsls	r6, r6, #9
 80136bc:	46b4      	mov	ip, r6
 80136be:	4460      	add	r0, ip
 80136c0:	0c1e      	lsrs	r6, r3, #16
 80136c2:	0412      	lsls	r2, r2, #16
 80136c4:	041b      	lsls	r3, r3, #16
 80136c6:	0c12      	lsrs	r2, r2, #16
 80136c8:	1830      	adds	r0, r6, r0
 80136ca:	189b      	adds	r3, r3, r2
 80136cc:	4281      	cmp	r1, r0
 80136ce:	d306      	bcc.n	80136de <__aeabi_ddiv+0x3ee>
 80136d0:	d002      	beq.n	80136d8 <__aeabi_ddiv+0x3e8>
 80136d2:	2301      	movs	r3, #1
 80136d4:	431d      	orrs	r5, r3
 80136d6:	e6ce      	b.n	8013476 <__aeabi_ddiv+0x186>
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d100      	bne.n	80136de <__aeabi_ddiv+0x3ee>
 80136dc:	e6cb      	b.n	8013476 <__aeabi_ddiv+0x186>
 80136de:	1861      	adds	r1, r4, r1
 80136e0:	1e6e      	subs	r6, r5, #1
 80136e2:	42a1      	cmp	r1, r4
 80136e4:	d200      	bcs.n	80136e8 <__aeabi_ddiv+0x3f8>
 80136e6:	e0a4      	b.n	8013832 <__aeabi_ddiv+0x542>
 80136e8:	4281      	cmp	r1, r0
 80136ea:	d200      	bcs.n	80136ee <__aeabi_ddiv+0x3fe>
 80136ec:	e0c9      	b.n	8013882 <__aeabi_ddiv+0x592>
 80136ee:	d100      	bne.n	80136f2 <__aeabi_ddiv+0x402>
 80136f0:	e0d9      	b.n	80138a6 <__aeabi_ddiv+0x5b6>
 80136f2:	0035      	movs	r5, r6
 80136f4:	e7ed      	b.n	80136d2 <__aeabi_ddiv+0x3e2>
 80136f6:	2501      	movs	r5, #1
 80136f8:	426d      	negs	r5, r5
 80136fa:	2101      	movs	r1, #1
 80136fc:	1a89      	subs	r1, r1, r2
 80136fe:	2938      	cmp	r1, #56	; 0x38
 8013700:	dd00      	ble.n	8013704 <__aeabi_ddiv+0x414>
 8013702:	e64c      	b.n	801339e <__aeabi_ddiv+0xae>
 8013704:	291f      	cmp	r1, #31
 8013706:	dc00      	bgt.n	801370a <__aeabi_ddiv+0x41a>
 8013708:	e07f      	b.n	801380a <__aeabi_ddiv+0x51a>
 801370a:	231f      	movs	r3, #31
 801370c:	425b      	negs	r3, r3
 801370e:	1a9a      	subs	r2, r3, r2
 8013710:	4643      	mov	r3, r8
 8013712:	40d3      	lsrs	r3, r2
 8013714:	2920      	cmp	r1, #32
 8013716:	d004      	beq.n	8013722 <__aeabi_ddiv+0x432>
 8013718:	4644      	mov	r4, r8
 801371a:	4a65      	ldr	r2, [pc, #404]	; (80138b0 <__aeabi_ddiv+0x5c0>)
 801371c:	445a      	add	r2, fp
 801371e:	4094      	lsls	r4, r2
 8013720:	4325      	orrs	r5, r4
 8013722:	1e6a      	subs	r2, r5, #1
 8013724:	4195      	sbcs	r5, r2
 8013726:	2207      	movs	r2, #7
 8013728:	432b      	orrs	r3, r5
 801372a:	0015      	movs	r5, r2
 801372c:	2400      	movs	r4, #0
 801372e:	401d      	ands	r5, r3
 8013730:	421a      	tst	r2, r3
 8013732:	d100      	bne.n	8013736 <__aeabi_ddiv+0x446>
 8013734:	e0a1      	b.n	801387a <__aeabi_ddiv+0x58a>
 8013736:	220f      	movs	r2, #15
 8013738:	2400      	movs	r4, #0
 801373a:	401a      	ands	r2, r3
 801373c:	2a04      	cmp	r2, #4
 801373e:	d100      	bne.n	8013742 <__aeabi_ddiv+0x452>
 8013740:	e098      	b.n	8013874 <__aeabi_ddiv+0x584>
 8013742:	1d1a      	adds	r2, r3, #4
 8013744:	429a      	cmp	r2, r3
 8013746:	419b      	sbcs	r3, r3
 8013748:	425b      	negs	r3, r3
 801374a:	18e4      	adds	r4, r4, r3
 801374c:	0013      	movs	r3, r2
 801374e:	0222      	lsls	r2, r4, #8
 8013750:	d400      	bmi.n	8013754 <__aeabi_ddiv+0x464>
 8013752:	e08f      	b.n	8013874 <__aeabi_ddiv+0x584>
 8013754:	2301      	movs	r3, #1
 8013756:	2400      	movs	r4, #0
 8013758:	2500      	movs	r5, #0
 801375a:	e623      	b.n	80133a4 <__aeabi_ddiv+0xb4>
 801375c:	42b5      	cmp	r5, r6
 801375e:	d300      	bcc.n	8013762 <__aeabi_ddiv+0x472>
 8013760:	e764      	b.n	801362c <__aeabi_ddiv+0x33c>
 8013762:	4643      	mov	r3, r8
 8013764:	1e5a      	subs	r2, r3, #1
 8013766:	9b00      	ldr	r3, [sp, #0]
 8013768:	469c      	mov	ip, r3
 801376a:	4465      	add	r5, ip
 801376c:	001f      	movs	r7, r3
 801376e:	429d      	cmp	r5, r3
 8013770:	419b      	sbcs	r3, r3
 8013772:	425b      	negs	r3, r3
 8013774:	191b      	adds	r3, r3, r4
 8013776:	18c9      	adds	r1, r1, r3
 8013778:	428c      	cmp	r4, r1
 801377a:	d23a      	bcs.n	80137f2 <__aeabi_ddiv+0x502>
 801377c:	4288      	cmp	r0, r1
 801377e:	d863      	bhi.n	8013848 <__aeabi_ddiv+0x558>
 8013780:	d060      	beq.n	8013844 <__aeabi_ddiv+0x554>
 8013782:	4690      	mov	r8, r2
 8013784:	e752      	b.n	801362c <__aeabi_ddiv+0x33c>
 8013786:	42aa      	cmp	r2, r5
 8013788:	d900      	bls.n	801378c <__aeabi_ddiv+0x49c>
 801378a:	e6ea      	b.n	8013562 <__aeabi_ddiv+0x272>
 801378c:	4643      	mov	r3, r8
 801378e:	07de      	lsls	r6, r3, #31
 8013790:	0858      	lsrs	r0, r3, #1
 8013792:	086b      	lsrs	r3, r5, #1
 8013794:	431e      	orrs	r6, r3
 8013796:	07ed      	lsls	r5, r5, #31
 8013798:	e6ea      	b.n	8013570 <__aeabi_ddiv+0x280>
 801379a:	4648      	mov	r0, r9
 801379c:	f001 f856 	bl	801484c <__clzsi2>
 80137a0:	0001      	movs	r1, r0
 80137a2:	0002      	movs	r2, r0
 80137a4:	3115      	adds	r1, #21
 80137a6:	3220      	adds	r2, #32
 80137a8:	291c      	cmp	r1, #28
 80137aa:	dc00      	bgt.n	80137ae <__aeabi_ddiv+0x4be>
 80137ac:	e61a      	b.n	80133e4 <__aeabi_ddiv+0xf4>
 80137ae:	464b      	mov	r3, r9
 80137b0:	3808      	subs	r0, #8
 80137b2:	4083      	lsls	r3, r0
 80137b4:	2500      	movs	r5, #0
 80137b6:	4698      	mov	r8, r3
 80137b8:	e620      	b.n	80133fc <__aeabi_ddiv+0x10c>
 80137ba:	f001 f847 	bl	801484c <__clzsi2>
 80137be:	0003      	movs	r3, r0
 80137c0:	001a      	movs	r2, r3
 80137c2:	3215      	adds	r2, #21
 80137c4:	3020      	adds	r0, #32
 80137c6:	2a1c      	cmp	r2, #28
 80137c8:	dc00      	bgt.n	80137cc <__aeabi_ddiv+0x4dc>
 80137ca:	e630      	b.n	801342e <__aeabi_ddiv+0x13e>
 80137cc:	4654      	mov	r4, sl
 80137ce:	3b08      	subs	r3, #8
 80137d0:	2200      	movs	r2, #0
 80137d2:	409c      	lsls	r4, r3
 80137d4:	e635      	b.n	8013442 <__aeabi_ddiv+0x152>
 80137d6:	230f      	movs	r3, #15
 80137d8:	402b      	ands	r3, r5
 80137da:	2b04      	cmp	r3, #4
 80137dc:	d100      	bne.n	80137e0 <__aeabi_ddiv+0x4f0>
 80137de:	e652      	b.n	8013486 <__aeabi_ddiv+0x196>
 80137e0:	2305      	movs	r3, #5
 80137e2:	425b      	negs	r3, r3
 80137e4:	42ab      	cmp	r3, r5
 80137e6:	419b      	sbcs	r3, r3
 80137e8:	3504      	adds	r5, #4
 80137ea:	425b      	negs	r3, r3
 80137ec:	08ed      	lsrs	r5, r5, #3
 80137ee:	4498      	add	r8, r3
 80137f0:	e64a      	b.n	8013488 <__aeabi_ddiv+0x198>
 80137f2:	428c      	cmp	r4, r1
 80137f4:	d1c5      	bne.n	8013782 <__aeabi_ddiv+0x492>
 80137f6:	42af      	cmp	r7, r5
 80137f8:	d9c0      	bls.n	801377c <__aeabi_ddiv+0x48c>
 80137fa:	4690      	mov	r8, r2
 80137fc:	e716      	b.n	801362c <__aeabi_ddiv+0x33c>
 80137fe:	428a      	cmp	r2, r1
 8013800:	d800      	bhi.n	8013804 <__aeabi_ddiv+0x514>
 8013802:	e6ea      	b.n	80135da <__aeabi_ddiv+0x2ea>
 8013804:	1e83      	subs	r3, r0, #2
 8013806:	1909      	adds	r1, r1, r4
 8013808:	e6e7      	b.n	80135da <__aeabi_ddiv+0x2ea>
 801380a:	4a2a      	ldr	r2, [pc, #168]	; (80138b4 <__aeabi_ddiv+0x5c4>)
 801380c:	0028      	movs	r0, r5
 801380e:	445a      	add	r2, fp
 8013810:	4643      	mov	r3, r8
 8013812:	4095      	lsls	r5, r2
 8013814:	4093      	lsls	r3, r2
 8013816:	40c8      	lsrs	r0, r1
 8013818:	1e6a      	subs	r2, r5, #1
 801381a:	4195      	sbcs	r5, r2
 801381c:	4644      	mov	r4, r8
 801381e:	4303      	orrs	r3, r0
 8013820:	432b      	orrs	r3, r5
 8013822:	40cc      	lsrs	r4, r1
 8013824:	075a      	lsls	r2, r3, #29
 8013826:	d092      	beq.n	801374e <__aeabi_ddiv+0x45e>
 8013828:	220f      	movs	r2, #15
 801382a:	401a      	ands	r2, r3
 801382c:	2a04      	cmp	r2, #4
 801382e:	d188      	bne.n	8013742 <__aeabi_ddiv+0x452>
 8013830:	e78d      	b.n	801374e <__aeabi_ddiv+0x45e>
 8013832:	0035      	movs	r5, r6
 8013834:	4281      	cmp	r1, r0
 8013836:	d000      	beq.n	801383a <__aeabi_ddiv+0x54a>
 8013838:	e74b      	b.n	80136d2 <__aeabi_ddiv+0x3e2>
 801383a:	9a00      	ldr	r2, [sp, #0]
 801383c:	4293      	cmp	r3, r2
 801383e:	d000      	beq.n	8013842 <__aeabi_ddiv+0x552>
 8013840:	e747      	b.n	80136d2 <__aeabi_ddiv+0x3e2>
 8013842:	e618      	b.n	8013476 <__aeabi_ddiv+0x186>
 8013844:	42ae      	cmp	r6, r5
 8013846:	d99c      	bls.n	8013782 <__aeabi_ddiv+0x492>
 8013848:	2302      	movs	r3, #2
 801384a:	425b      	negs	r3, r3
 801384c:	469c      	mov	ip, r3
 801384e:	9b00      	ldr	r3, [sp, #0]
 8013850:	44e0      	add	r8, ip
 8013852:	469c      	mov	ip, r3
 8013854:	4465      	add	r5, ip
 8013856:	429d      	cmp	r5, r3
 8013858:	419b      	sbcs	r3, r3
 801385a:	425b      	negs	r3, r3
 801385c:	191b      	adds	r3, r3, r4
 801385e:	18c9      	adds	r1, r1, r3
 8013860:	e6e4      	b.n	801362c <__aeabi_ddiv+0x33c>
 8013862:	4a15      	ldr	r2, [pc, #84]	; (80138b8 <__aeabi_ddiv+0x5c8>)
 8013864:	445a      	add	r2, fp
 8013866:	2a00      	cmp	r2, #0
 8013868:	dc00      	bgt.n	801386c <__aeabi_ddiv+0x57c>
 801386a:	e744      	b.n	80136f6 <__aeabi_ddiv+0x406>
 801386c:	2301      	movs	r3, #1
 801386e:	2500      	movs	r5, #0
 8013870:	4498      	add	r8, r3
 8013872:	e609      	b.n	8013488 <__aeabi_ddiv+0x198>
 8013874:	0765      	lsls	r5, r4, #29
 8013876:	0264      	lsls	r4, r4, #9
 8013878:	0b24      	lsrs	r4, r4, #12
 801387a:	08db      	lsrs	r3, r3, #3
 801387c:	431d      	orrs	r5, r3
 801387e:	2300      	movs	r3, #0
 8013880:	e590      	b.n	80133a4 <__aeabi_ddiv+0xb4>
 8013882:	9e00      	ldr	r6, [sp, #0]
 8013884:	3d02      	subs	r5, #2
 8013886:	0072      	lsls	r2, r6, #1
 8013888:	42b2      	cmp	r2, r6
 801388a:	41bf      	sbcs	r7, r7
 801388c:	427f      	negs	r7, r7
 801388e:	193c      	adds	r4, r7, r4
 8013890:	1909      	adds	r1, r1, r4
 8013892:	9200      	str	r2, [sp, #0]
 8013894:	e7ce      	b.n	8013834 <__aeabi_ddiv+0x544>
 8013896:	2480      	movs	r4, #128	; 0x80
 8013898:	4643      	mov	r3, r8
 801389a:	0324      	lsls	r4, r4, #12
 801389c:	431c      	orrs	r4, r3
 801389e:	0324      	lsls	r4, r4, #12
 80138a0:	4b06      	ldr	r3, [pc, #24]	; (80138bc <__aeabi_ddiv+0x5cc>)
 80138a2:	0b24      	lsrs	r4, r4, #12
 80138a4:	e57e      	b.n	80133a4 <__aeabi_ddiv+0xb4>
 80138a6:	9a00      	ldr	r2, [sp, #0]
 80138a8:	429a      	cmp	r2, r3
 80138aa:	d3ea      	bcc.n	8013882 <__aeabi_ddiv+0x592>
 80138ac:	0035      	movs	r5, r6
 80138ae:	e7c4      	b.n	801383a <__aeabi_ddiv+0x54a>
 80138b0:	0000043e 	.word	0x0000043e
 80138b4:	0000041e 	.word	0x0000041e
 80138b8:	000003ff 	.word	0x000003ff
 80138bc:	000007ff 	.word	0x000007ff

080138c0 <__eqdf2>:
 80138c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138c2:	464f      	mov	r7, r9
 80138c4:	4646      	mov	r6, r8
 80138c6:	46d6      	mov	lr, sl
 80138c8:	4694      	mov	ip, r2
 80138ca:	4691      	mov	r9, r2
 80138cc:	031a      	lsls	r2, r3, #12
 80138ce:	0b12      	lsrs	r2, r2, #12
 80138d0:	4d18      	ldr	r5, [pc, #96]	; (8013934 <__eqdf2+0x74>)
 80138d2:	b5c0      	push	{r6, r7, lr}
 80138d4:	004c      	lsls	r4, r1, #1
 80138d6:	030f      	lsls	r7, r1, #12
 80138d8:	4692      	mov	sl, r2
 80138da:	005a      	lsls	r2, r3, #1
 80138dc:	0006      	movs	r6, r0
 80138de:	4680      	mov	r8, r0
 80138e0:	0b3f      	lsrs	r7, r7, #12
 80138e2:	2001      	movs	r0, #1
 80138e4:	0d64      	lsrs	r4, r4, #21
 80138e6:	0fc9      	lsrs	r1, r1, #31
 80138e8:	0d52      	lsrs	r2, r2, #21
 80138ea:	0fdb      	lsrs	r3, r3, #31
 80138ec:	42ac      	cmp	r4, r5
 80138ee:	d00a      	beq.n	8013906 <__eqdf2+0x46>
 80138f0:	42aa      	cmp	r2, r5
 80138f2:	d003      	beq.n	80138fc <__eqdf2+0x3c>
 80138f4:	4294      	cmp	r4, r2
 80138f6:	d101      	bne.n	80138fc <__eqdf2+0x3c>
 80138f8:	4557      	cmp	r7, sl
 80138fa:	d00d      	beq.n	8013918 <__eqdf2+0x58>
 80138fc:	bc1c      	pop	{r2, r3, r4}
 80138fe:	4690      	mov	r8, r2
 8013900:	4699      	mov	r9, r3
 8013902:	46a2      	mov	sl, r4
 8013904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013906:	003d      	movs	r5, r7
 8013908:	4335      	orrs	r5, r6
 801390a:	d1f7      	bne.n	80138fc <__eqdf2+0x3c>
 801390c:	42a2      	cmp	r2, r4
 801390e:	d1f5      	bne.n	80138fc <__eqdf2+0x3c>
 8013910:	4652      	mov	r2, sl
 8013912:	4665      	mov	r5, ip
 8013914:	432a      	orrs	r2, r5
 8013916:	d1f1      	bne.n	80138fc <__eqdf2+0x3c>
 8013918:	2001      	movs	r0, #1
 801391a:	45c8      	cmp	r8, r9
 801391c:	d1ee      	bne.n	80138fc <__eqdf2+0x3c>
 801391e:	4299      	cmp	r1, r3
 8013920:	d006      	beq.n	8013930 <__eqdf2+0x70>
 8013922:	2c00      	cmp	r4, #0
 8013924:	d1ea      	bne.n	80138fc <__eqdf2+0x3c>
 8013926:	433e      	orrs	r6, r7
 8013928:	0030      	movs	r0, r6
 801392a:	1e46      	subs	r6, r0, #1
 801392c:	41b0      	sbcs	r0, r6
 801392e:	e7e5      	b.n	80138fc <__eqdf2+0x3c>
 8013930:	2000      	movs	r0, #0
 8013932:	e7e3      	b.n	80138fc <__eqdf2+0x3c>
 8013934:	000007ff 	.word	0x000007ff

08013938 <__gedf2>:
 8013938:	b5f0      	push	{r4, r5, r6, r7, lr}
 801393a:	464e      	mov	r6, r9
 801393c:	4645      	mov	r5, r8
 801393e:	4657      	mov	r7, sl
 8013940:	46de      	mov	lr, fp
 8013942:	0004      	movs	r4, r0
 8013944:	0018      	movs	r0, r3
 8013946:	b5e0      	push	{r5, r6, r7, lr}
 8013948:	0016      	movs	r6, r2
 801394a:	031b      	lsls	r3, r3, #12
 801394c:	0b1b      	lsrs	r3, r3, #12
 801394e:	4d32      	ldr	r5, [pc, #200]	; (8013a18 <__gedf2+0xe0>)
 8013950:	030f      	lsls	r7, r1, #12
 8013952:	004a      	lsls	r2, r1, #1
 8013954:	4699      	mov	r9, r3
 8013956:	0043      	lsls	r3, r0, #1
 8013958:	46a4      	mov	ip, r4
 801395a:	46b0      	mov	r8, r6
 801395c:	0b3f      	lsrs	r7, r7, #12
 801395e:	0d52      	lsrs	r2, r2, #21
 8013960:	0fc9      	lsrs	r1, r1, #31
 8013962:	0d5b      	lsrs	r3, r3, #21
 8013964:	0fc0      	lsrs	r0, r0, #31
 8013966:	42aa      	cmp	r2, r5
 8013968:	d029      	beq.n	80139be <__gedf2+0x86>
 801396a:	42ab      	cmp	r3, r5
 801396c:	d018      	beq.n	80139a0 <__gedf2+0x68>
 801396e:	2a00      	cmp	r2, #0
 8013970:	d12a      	bne.n	80139c8 <__gedf2+0x90>
 8013972:	433c      	orrs	r4, r7
 8013974:	46a3      	mov	fp, r4
 8013976:	4265      	negs	r5, r4
 8013978:	4165      	adcs	r5, r4
 801397a:	2b00      	cmp	r3, #0
 801397c:	d102      	bne.n	8013984 <__gedf2+0x4c>
 801397e:	464c      	mov	r4, r9
 8013980:	4326      	orrs	r6, r4
 8013982:	d027      	beq.n	80139d4 <__gedf2+0x9c>
 8013984:	2d00      	cmp	r5, #0
 8013986:	d115      	bne.n	80139b4 <__gedf2+0x7c>
 8013988:	4281      	cmp	r1, r0
 801398a:	d028      	beq.n	80139de <__gedf2+0xa6>
 801398c:	2002      	movs	r0, #2
 801398e:	3901      	subs	r1, #1
 8013990:	4008      	ands	r0, r1
 8013992:	3801      	subs	r0, #1
 8013994:	bc3c      	pop	{r2, r3, r4, r5}
 8013996:	4690      	mov	r8, r2
 8013998:	4699      	mov	r9, r3
 801399a:	46a2      	mov	sl, r4
 801399c:	46ab      	mov	fp, r5
 801399e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139a0:	464d      	mov	r5, r9
 80139a2:	432e      	orrs	r6, r5
 80139a4:	d12f      	bne.n	8013a06 <__gedf2+0xce>
 80139a6:	2a00      	cmp	r2, #0
 80139a8:	d1ee      	bne.n	8013988 <__gedf2+0x50>
 80139aa:	433c      	orrs	r4, r7
 80139ac:	4265      	negs	r5, r4
 80139ae:	4165      	adcs	r5, r4
 80139b0:	2d00      	cmp	r5, #0
 80139b2:	d0e9      	beq.n	8013988 <__gedf2+0x50>
 80139b4:	2800      	cmp	r0, #0
 80139b6:	d1ed      	bne.n	8013994 <__gedf2+0x5c>
 80139b8:	2001      	movs	r0, #1
 80139ba:	4240      	negs	r0, r0
 80139bc:	e7ea      	b.n	8013994 <__gedf2+0x5c>
 80139be:	003d      	movs	r5, r7
 80139c0:	4325      	orrs	r5, r4
 80139c2:	d120      	bne.n	8013a06 <__gedf2+0xce>
 80139c4:	4293      	cmp	r3, r2
 80139c6:	d0eb      	beq.n	80139a0 <__gedf2+0x68>
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d1dd      	bne.n	8013988 <__gedf2+0x50>
 80139cc:	464c      	mov	r4, r9
 80139ce:	4326      	orrs	r6, r4
 80139d0:	d1da      	bne.n	8013988 <__gedf2+0x50>
 80139d2:	e7db      	b.n	801398c <__gedf2+0x54>
 80139d4:	465b      	mov	r3, fp
 80139d6:	2000      	movs	r0, #0
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d0db      	beq.n	8013994 <__gedf2+0x5c>
 80139dc:	e7d6      	b.n	801398c <__gedf2+0x54>
 80139de:	429a      	cmp	r2, r3
 80139e0:	dc0a      	bgt.n	80139f8 <__gedf2+0xc0>
 80139e2:	dbe7      	blt.n	80139b4 <__gedf2+0x7c>
 80139e4:	454f      	cmp	r7, r9
 80139e6:	d8d1      	bhi.n	801398c <__gedf2+0x54>
 80139e8:	d010      	beq.n	8013a0c <__gedf2+0xd4>
 80139ea:	2000      	movs	r0, #0
 80139ec:	454f      	cmp	r7, r9
 80139ee:	d2d1      	bcs.n	8013994 <__gedf2+0x5c>
 80139f0:	2900      	cmp	r1, #0
 80139f2:	d0e1      	beq.n	80139b8 <__gedf2+0x80>
 80139f4:	0008      	movs	r0, r1
 80139f6:	e7cd      	b.n	8013994 <__gedf2+0x5c>
 80139f8:	4243      	negs	r3, r0
 80139fa:	4158      	adcs	r0, r3
 80139fc:	2302      	movs	r3, #2
 80139fe:	4240      	negs	r0, r0
 8013a00:	4018      	ands	r0, r3
 8013a02:	3801      	subs	r0, #1
 8013a04:	e7c6      	b.n	8013994 <__gedf2+0x5c>
 8013a06:	2002      	movs	r0, #2
 8013a08:	4240      	negs	r0, r0
 8013a0a:	e7c3      	b.n	8013994 <__gedf2+0x5c>
 8013a0c:	45c4      	cmp	ip, r8
 8013a0e:	d8bd      	bhi.n	801398c <__gedf2+0x54>
 8013a10:	2000      	movs	r0, #0
 8013a12:	45c4      	cmp	ip, r8
 8013a14:	d2be      	bcs.n	8013994 <__gedf2+0x5c>
 8013a16:	e7eb      	b.n	80139f0 <__gedf2+0xb8>
 8013a18:	000007ff 	.word	0x000007ff

08013a1c <__ledf2>:
 8013a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a1e:	464e      	mov	r6, r9
 8013a20:	4645      	mov	r5, r8
 8013a22:	4657      	mov	r7, sl
 8013a24:	46de      	mov	lr, fp
 8013a26:	0004      	movs	r4, r0
 8013a28:	0018      	movs	r0, r3
 8013a2a:	b5e0      	push	{r5, r6, r7, lr}
 8013a2c:	0016      	movs	r6, r2
 8013a2e:	031b      	lsls	r3, r3, #12
 8013a30:	0b1b      	lsrs	r3, r3, #12
 8013a32:	4d31      	ldr	r5, [pc, #196]	; (8013af8 <__ledf2+0xdc>)
 8013a34:	030f      	lsls	r7, r1, #12
 8013a36:	004a      	lsls	r2, r1, #1
 8013a38:	4699      	mov	r9, r3
 8013a3a:	0043      	lsls	r3, r0, #1
 8013a3c:	46a4      	mov	ip, r4
 8013a3e:	46b0      	mov	r8, r6
 8013a40:	0b3f      	lsrs	r7, r7, #12
 8013a42:	0d52      	lsrs	r2, r2, #21
 8013a44:	0fc9      	lsrs	r1, r1, #31
 8013a46:	0d5b      	lsrs	r3, r3, #21
 8013a48:	0fc0      	lsrs	r0, r0, #31
 8013a4a:	42aa      	cmp	r2, r5
 8013a4c:	d011      	beq.n	8013a72 <__ledf2+0x56>
 8013a4e:	42ab      	cmp	r3, r5
 8013a50:	d014      	beq.n	8013a7c <__ledf2+0x60>
 8013a52:	2a00      	cmp	r2, #0
 8013a54:	d12f      	bne.n	8013ab6 <__ledf2+0x9a>
 8013a56:	433c      	orrs	r4, r7
 8013a58:	46a3      	mov	fp, r4
 8013a5a:	4265      	negs	r5, r4
 8013a5c:	4165      	adcs	r5, r4
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d114      	bne.n	8013a8c <__ledf2+0x70>
 8013a62:	464c      	mov	r4, r9
 8013a64:	4326      	orrs	r6, r4
 8013a66:	d111      	bne.n	8013a8c <__ledf2+0x70>
 8013a68:	465b      	mov	r3, fp
 8013a6a:	2000      	movs	r0, #0
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d017      	beq.n	8013aa0 <__ledf2+0x84>
 8013a70:	e010      	b.n	8013a94 <__ledf2+0x78>
 8013a72:	003d      	movs	r5, r7
 8013a74:	4325      	orrs	r5, r4
 8013a76:	d112      	bne.n	8013a9e <__ledf2+0x82>
 8013a78:	4293      	cmp	r3, r2
 8013a7a:	d11c      	bne.n	8013ab6 <__ledf2+0x9a>
 8013a7c:	464d      	mov	r5, r9
 8013a7e:	432e      	orrs	r6, r5
 8013a80:	d10d      	bne.n	8013a9e <__ledf2+0x82>
 8013a82:	2a00      	cmp	r2, #0
 8013a84:	d104      	bne.n	8013a90 <__ledf2+0x74>
 8013a86:	433c      	orrs	r4, r7
 8013a88:	4265      	negs	r5, r4
 8013a8a:	4165      	adcs	r5, r4
 8013a8c:	2d00      	cmp	r5, #0
 8013a8e:	d10d      	bne.n	8013aac <__ledf2+0x90>
 8013a90:	4281      	cmp	r1, r0
 8013a92:	d016      	beq.n	8013ac2 <__ledf2+0xa6>
 8013a94:	2002      	movs	r0, #2
 8013a96:	3901      	subs	r1, #1
 8013a98:	4008      	ands	r0, r1
 8013a9a:	3801      	subs	r0, #1
 8013a9c:	e000      	b.n	8013aa0 <__ledf2+0x84>
 8013a9e:	2002      	movs	r0, #2
 8013aa0:	bc3c      	pop	{r2, r3, r4, r5}
 8013aa2:	4690      	mov	r8, r2
 8013aa4:	4699      	mov	r9, r3
 8013aa6:	46a2      	mov	sl, r4
 8013aa8:	46ab      	mov	fp, r5
 8013aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013aac:	2800      	cmp	r0, #0
 8013aae:	d1f7      	bne.n	8013aa0 <__ledf2+0x84>
 8013ab0:	2001      	movs	r0, #1
 8013ab2:	4240      	negs	r0, r0
 8013ab4:	e7f4      	b.n	8013aa0 <__ledf2+0x84>
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d1ea      	bne.n	8013a90 <__ledf2+0x74>
 8013aba:	464c      	mov	r4, r9
 8013abc:	4326      	orrs	r6, r4
 8013abe:	d1e7      	bne.n	8013a90 <__ledf2+0x74>
 8013ac0:	e7e8      	b.n	8013a94 <__ledf2+0x78>
 8013ac2:	429a      	cmp	r2, r3
 8013ac4:	dd06      	ble.n	8013ad4 <__ledf2+0xb8>
 8013ac6:	4243      	negs	r3, r0
 8013ac8:	4158      	adcs	r0, r3
 8013aca:	2302      	movs	r3, #2
 8013acc:	4240      	negs	r0, r0
 8013ace:	4018      	ands	r0, r3
 8013ad0:	3801      	subs	r0, #1
 8013ad2:	e7e5      	b.n	8013aa0 <__ledf2+0x84>
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	dbe9      	blt.n	8013aac <__ledf2+0x90>
 8013ad8:	454f      	cmp	r7, r9
 8013ada:	d8db      	bhi.n	8013a94 <__ledf2+0x78>
 8013adc:	d006      	beq.n	8013aec <__ledf2+0xd0>
 8013ade:	2000      	movs	r0, #0
 8013ae0:	454f      	cmp	r7, r9
 8013ae2:	d2dd      	bcs.n	8013aa0 <__ledf2+0x84>
 8013ae4:	2900      	cmp	r1, #0
 8013ae6:	d0e3      	beq.n	8013ab0 <__ledf2+0x94>
 8013ae8:	0008      	movs	r0, r1
 8013aea:	e7d9      	b.n	8013aa0 <__ledf2+0x84>
 8013aec:	45c4      	cmp	ip, r8
 8013aee:	d8d1      	bhi.n	8013a94 <__ledf2+0x78>
 8013af0:	2000      	movs	r0, #0
 8013af2:	45c4      	cmp	ip, r8
 8013af4:	d2d4      	bcs.n	8013aa0 <__ledf2+0x84>
 8013af6:	e7f5      	b.n	8013ae4 <__ledf2+0xc8>
 8013af8:	000007ff 	.word	0x000007ff

08013afc <__aeabi_dmul>:
 8013afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013afe:	4657      	mov	r7, sl
 8013b00:	464e      	mov	r6, r9
 8013b02:	4645      	mov	r5, r8
 8013b04:	46de      	mov	lr, fp
 8013b06:	b5e0      	push	{r5, r6, r7, lr}
 8013b08:	4698      	mov	r8, r3
 8013b0a:	030c      	lsls	r4, r1, #12
 8013b0c:	004b      	lsls	r3, r1, #1
 8013b0e:	0006      	movs	r6, r0
 8013b10:	4692      	mov	sl, r2
 8013b12:	b087      	sub	sp, #28
 8013b14:	0b24      	lsrs	r4, r4, #12
 8013b16:	0d5b      	lsrs	r3, r3, #21
 8013b18:	0fcf      	lsrs	r7, r1, #31
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d06c      	beq.n	8013bf8 <__aeabi_dmul+0xfc>
 8013b1e:	4add      	ldr	r2, [pc, #884]	; (8013e94 <__aeabi_dmul+0x398>)
 8013b20:	4293      	cmp	r3, r2
 8013b22:	d100      	bne.n	8013b26 <__aeabi_dmul+0x2a>
 8013b24:	e086      	b.n	8013c34 <__aeabi_dmul+0x138>
 8013b26:	0f42      	lsrs	r2, r0, #29
 8013b28:	00e4      	lsls	r4, r4, #3
 8013b2a:	4314      	orrs	r4, r2
 8013b2c:	2280      	movs	r2, #128	; 0x80
 8013b2e:	0412      	lsls	r2, r2, #16
 8013b30:	4314      	orrs	r4, r2
 8013b32:	4ad9      	ldr	r2, [pc, #868]	; (8013e98 <__aeabi_dmul+0x39c>)
 8013b34:	00c5      	lsls	r5, r0, #3
 8013b36:	4694      	mov	ip, r2
 8013b38:	4463      	add	r3, ip
 8013b3a:	9300      	str	r3, [sp, #0]
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	4699      	mov	r9, r3
 8013b40:	469b      	mov	fp, r3
 8013b42:	4643      	mov	r3, r8
 8013b44:	4642      	mov	r2, r8
 8013b46:	031e      	lsls	r6, r3, #12
 8013b48:	0fd2      	lsrs	r2, r2, #31
 8013b4a:	005b      	lsls	r3, r3, #1
 8013b4c:	4650      	mov	r0, sl
 8013b4e:	4690      	mov	r8, r2
 8013b50:	0b36      	lsrs	r6, r6, #12
 8013b52:	0d5b      	lsrs	r3, r3, #21
 8013b54:	d100      	bne.n	8013b58 <__aeabi_dmul+0x5c>
 8013b56:	e078      	b.n	8013c4a <__aeabi_dmul+0x14e>
 8013b58:	4ace      	ldr	r2, [pc, #824]	; (8013e94 <__aeabi_dmul+0x398>)
 8013b5a:	4293      	cmp	r3, r2
 8013b5c:	d01d      	beq.n	8013b9a <__aeabi_dmul+0x9e>
 8013b5e:	49ce      	ldr	r1, [pc, #824]	; (8013e98 <__aeabi_dmul+0x39c>)
 8013b60:	0f42      	lsrs	r2, r0, #29
 8013b62:	468c      	mov	ip, r1
 8013b64:	9900      	ldr	r1, [sp, #0]
 8013b66:	4463      	add	r3, ip
 8013b68:	00f6      	lsls	r6, r6, #3
 8013b6a:	468c      	mov	ip, r1
 8013b6c:	4316      	orrs	r6, r2
 8013b6e:	2280      	movs	r2, #128	; 0x80
 8013b70:	449c      	add	ip, r3
 8013b72:	0412      	lsls	r2, r2, #16
 8013b74:	4663      	mov	r3, ip
 8013b76:	4316      	orrs	r6, r2
 8013b78:	00c2      	lsls	r2, r0, #3
 8013b7a:	2000      	movs	r0, #0
 8013b7c:	9300      	str	r3, [sp, #0]
 8013b7e:	9900      	ldr	r1, [sp, #0]
 8013b80:	4643      	mov	r3, r8
 8013b82:	3101      	adds	r1, #1
 8013b84:	468c      	mov	ip, r1
 8013b86:	4649      	mov	r1, r9
 8013b88:	407b      	eors	r3, r7
 8013b8a:	9301      	str	r3, [sp, #4]
 8013b8c:	290f      	cmp	r1, #15
 8013b8e:	d900      	bls.n	8013b92 <__aeabi_dmul+0x96>
 8013b90:	e07e      	b.n	8013c90 <__aeabi_dmul+0x194>
 8013b92:	4bc2      	ldr	r3, [pc, #776]	; (8013e9c <__aeabi_dmul+0x3a0>)
 8013b94:	0089      	lsls	r1, r1, #2
 8013b96:	5859      	ldr	r1, [r3, r1]
 8013b98:	468f      	mov	pc, r1
 8013b9a:	4652      	mov	r2, sl
 8013b9c:	9b00      	ldr	r3, [sp, #0]
 8013b9e:	4332      	orrs	r2, r6
 8013ba0:	d000      	beq.n	8013ba4 <__aeabi_dmul+0xa8>
 8013ba2:	e156      	b.n	8013e52 <__aeabi_dmul+0x356>
 8013ba4:	49bb      	ldr	r1, [pc, #748]	; (8013e94 <__aeabi_dmul+0x398>)
 8013ba6:	2600      	movs	r6, #0
 8013ba8:	468c      	mov	ip, r1
 8013baa:	4463      	add	r3, ip
 8013bac:	4649      	mov	r1, r9
 8013bae:	9300      	str	r3, [sp, #0]
 8013bb0:	2302      	movs	r3, #2
 8013bb2:	4319      	orrs	r1, r3
 8013bb4:	4689      	mov	r9, r1
 8013bb6:	2002      	movs	r0, #2
 8013bb8:	e7e1      	b.n	8013b7e <__aeabi_dmul+0x82>
 8013bba:	4643      	mov	r3, r8
 8013bbc:	9301      	str	r3, [sp, #4]
 8013bbe:	0034      	movs	r4, r6
 8013bc0:	0015      	movs	r5, r2
 8013bc2:	4683      	mov	fp, r0
 8013bc4:	465b      	mov	r3, fp
 8013bc6:	2b02      	cmp	r3, #2
 8013bc8:	d05e      	beq.n	8013c88 <__aeabi_dmul+0x18c>
 8013bca:	2b03      	cmp	r3, #3
 8013bcc:	d100      	bne.n	8013bd0 <__aeabi_dmul+0xd4>
 8013bce:	e1f3      	b.n	8013fb8 <__aeabi_dmul+0x4bc>
 8013bd0:	2b01      	cmp	r3, #1
 8013bd2:	d000      	beq.n	8013bd6 <__aeabi_dmul+0xda>
 8013bd4:	e118      	b.n	8013e08 <__aeabi_dmul+0x30c>
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	2400      	movs	r4, #0
 8013bda:	2500      	movs	r5, #0
 8013bdc:	9b01      	ldr	r3, [sp, #4]
 8013bde:	0512      	lsls	r2, r2, #20
 8013be0:	4322      	orrs	r2, r4
 8013be2:	07db      	lsls	r3, r3, #31
 8013be4:	431a      	orrs	r2, r3
 8013be6:	0028      	movs	r0, r5
 8013be8:	0011      	movs	r1, r2
 8013bea:	b007      	add	sp, #28
 8013bec:	bc3c      	pop	{r2, r3, r4, r5}
 8013bee:	4690      	mov	r8, r2
 8013bf0:	4699      	mov	r9, r3
 8013bf2:	46a2      	mov	sl, r4
 8013bf4:	46ab      	mov	fp, r5
 8013bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bf8:	0025      	movs	r5, r4
 8013bfa:	4305      	orrs	r5, r0
 8013bfc:	d100      	bne.n	8013c00 <__aeabi_dmul+0x104>
 8013bfe:	e141      	b.n	8013e84 <__aeabi_dmul+0x388>
 8013c00:	2c00      	cmp	r4, #0
 8013c02:	d100      	bne.n	8013c06 <__aeabi_dmul+0x10a>
 8013c04:	e1ad      	b.n	8013f62 <__aeabi_dmul+0x466>
 8013c06:	0020      	movs	r0, r4
 8013c08:	f000 fe20 	bl	801484c <__clzsi2>
 8013c0c:	0001      	movs	r1, r0
 8013c0e:	0002      	movs	r2, r0
 8013c10:	390b      	subs	r1, #11
 8013c12:	231d      	movs	r3, #29
 8013c14:	0010      	movs	r0, r2
 8013c16:	1a5b      	subs	r3, r3, r1
 8013c18:	0031      	movs	r1, r6
 8013c1a:	0035      	movs	r5, r6
 8013c1c:	3808      	subs	r0, #8
 8013c1e:	4084      	lsls	r4, r0
 8013c20:	40d9      	lsrs	r1, r3
 8013c22:	4085      	lsls	r5, r0
 8013c24:	430c      	orrs	r4, r1
 8013c26:	489e      	ldr	r0, [pc, #632]	; (8013ea0 <__aeabi_dmul+0x3a4>)
 8013c28:	1a83      	subs	r3, r0, r2
 8013c2a:	9300      	str	r3, [sp, #0]
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	4699      	mov	r9, r3
 8013c30:	469b      	mov	fp, r3
 8013c32:	e786      	b.n	8013b42 <__aeabi_dmul+0x46>
 8013c34:	0005      	movs	r5, r0
 8013c36:	4325      	orrs	r5, r4
 8013c38:	d000      	beq.n	8013c3c <__aeabi_dmul+0x140>
 8013c3a:	e11c      	b.n	8013e76 <__aeabi_dmul+0x37a>
 8013c3c:	2208      	movs	r2, #8
 8013c3e:	9300      	str	r3, [sp, #0]
 8013c40:	2302      	movs	r3, #2
 8013c42:	2400      	movs	r4, #0
 8013c44:	4691      	mov	r9, r2
 8013c46:	469b      	mov	fp, r3
 8013c48:	e77b      	b.n	8013b42 <__aeabi_dmul+0x46>
 8013c4a:	4652      	mov	r2, sl
 8013c4c:	4332      	orrs	r2, r6
 8013c4e:	d100      	bne.n	8013c52 <__aeabi_dmul+0x156>
 8013c50:	e10a      	b.n	8013e68 <__aeabi_dmul+0x36c>
 8013c52:	2e00      	cmp	r6, #0
 8013c54:	d100      	bne.n	8013c58 <__aeabi_dmul+0x15c>
 8013c56:	e176      	b.n	8013f46 <__aeabi_dmul+0x44a>
 8013c58:	0030      	movs	r0, r6
 8013c5a:	f000 fdf7 	bl	801484c <__clzsi2>
 8013c5e:	0002      	movs	r2, r0
 8013c60:	3a0b      	subs	r2, #11
 8013c62:	231d      	movs	r3, #29
 8013c64:	0001      	movs	r1, r0
 8013c66:	1a9b      	subs	r3, r3, r2
 8013c68:	4652      	mov	r2, sl
 8013c6a:	3908      	subs	r1, #8
 8013c6c:	40da      	lsrs	r2, r3
 8013c6e:	408e      	lsls	r6, r1
 8013c70:	4316      	orrs	r6, r2
 8013c72:	4652      	mov	r2, sl
 8013c74:	408a      	lsls	r2, r1
 8013c76:	9b00      	ldr	r3, [sp, #0]
 8013c78:	4989      	ldr	r1, [pc, #548]	; (8013ea0 <__aeabi_dmul+0x3a4>)
 8013c7a:	1a18      	subs	r0, r3, r0
 8013c7c:	0003      	movs	r3, r0
 8013c7e:	468c      	mov	ip, r1
 8013c80:	4463      	add	r3, ip
 8013c82:	2000      	movs	r0, #0
 8013c84:	9300      	str	r3, [sp, #0]
 8013c86:	e77a      	b.n	8013b7e <__aeabi_dmul+0x82>
 8013c88:	2400      	movs	r4, #0
 8013c8a:	2500      	movs	r5, #0
 8013c8c:	4a81      	ldr	r2, [pc, #516]	; (8013e94 <__aeabi_dmul+0x398>)
 8013c8e:	e7a5      	b.n	8013bdc <__aeabi_dmul+0xe0>
 8013c90:	0c2f      	lsrs	r7, r5, #16
 8013c92:	042d      	lsls	r5, r5, #16
 8013c94:	0c2d      	lsrs	r5, r5, #16
 8013c96:	002b      	movs	r3, r5
 8013c98:	0c11      	lsrs	r1, r2, #16
 8013c9a:	0412      	lsls	r2, r2, #16
 8013c9c:	0c12      	lsrs	r2, r2, #16
 8013c9e:	4353      	muls	r3, r2
 8013ca0:	4698      	mov	r8, r3
 8013ca2:	0013      	movs	r3, r2
 8013ca4:	0028      	movs	r0, r5
 8013ca6:	437b      	muls	r3, r7
 8013ca8:	4699      	mov	r9, r3
 8013caa:	4348      	muls	r0, r1
 8013cac:	4448      	add	r0, r9
 8013cae:	4683      	mov	fp, r0
 8013cb0:	4640      	mov	r0, r8
 8013cb2:	000b      	movs	r3, r1
 8013cb4:	0c00      	lsrs	r0, r0, #16
 8013cb6:	4682      	mov	sl, r0
 8013cb8:	4658      	mov	r0, fp
 8013cba:	437b      	muls	r3, r7
 8013cbc:	4450      	add	r0, sl
 8013cbe:	9302      	str	r3, [sp, #8]
 8013cc0:	4581      	cmp	r9, r0
 8013cc2:	d906      	bls.n	8013cd2 <__aeabi_dmul+0x1d6>
 8013cc4:	469a      	mov	sl, r3
 8013cc6:	2380      	movs	r3, #128	; 0x80
 8013cc8:	025b      	lsls	r3, r3, #9
 8013cca:	4699      	mov	r9, r3
 8013ccc:	44ca      	add	sl, r9
 8013cce:	4653      	mov	r3, sl
 8013cd0:	9302      	str	r3, [sp, #8]
 8013cd2:	0c03      	lsrs	r3, r0, #16
 8013cd4:	469b      	mov	fp, r3
 8013cd6:	4643      	mov	r3, r8
 8013cd8:	041b      	lsls	r3, r3, #16
 8013cda:	0400      	lsls	r0, r0, #16
 8013cdc:	0c1b      	lsrs	r3, r3, #16
 8013cde:	4698      	mov	r8, r3
 8013ce0:	0003      	movs	r3, r0
 8013ce2:	4443      	add	r3, r8
 8013ce4:	9304      	str	r3, [sp, #16]
 8013ce6:	0c33      	lsrs	r3, r6, #16
 8013ce8:	4699      	mov	r9, r3
 8013cea:	002b      	movs	r3, r5
 8013cec:	0436      	lsls	r6, r6, #16
 8013cee:	0c36      	lsrs	r6, r6, #16
 8013cf0:	4373      	muls	r3, r6
 8013cf2:	4698      	mov	r8, r3
 8013cf4:	0033      	movs	r3, r6
 8013cf6:	437b      	muls	r3, r7
 8013cf8:	469a      	mov	sl, r3
 8013cfa:	464b      	mov	r3, r9
 8013cfc:	435d      	muls	r5, r3
 8013cfe:	435f      	muls	r7, r3
 8013d00:	4643      	mov	r3, r8
 8013d02:	4455      	add	r5, sl
 8013d04:	0c18      	lsrs	r0, r3, #16
 8013d06:	1940      	adds	r0, r0, r5
 8013d08:	4582      	cmp	sl, r0
 8013d0a:	d903      	bls.n	8013d14 <__aeabi_dmul+0x218>
 8013d0c:	2380      	movs	r3, #128	; 0x80
 8013d0e:	025b      	lsls	r3, r3, #9
 8013d10:	469a      	mov	sl, r3
 8013d12:	4457      	add	r7, sl
 8013d14:	0c05      	lsrs	r5, r0, #16
 8013d16:	19eb      	adds	r3, r5, r7
 8013d18:	9305      	str	r3, [sp, #20]
 8013d1a:	4643      	mov	r3, r8
 8013d1c:	041d      	lsls	r5, r3, #16
 8013d1e:	0c2d      	lsrs	r5, r5, #16
 8013d20:	0400      	lsls	r0, r0, #16
 8013d22:	1940      	adds	r0, r0, r5
 8013d24:	0c25      	lsrs	r5, r4, #16
 8013d26:	0424      	lsls	r4, r4, #16
 8013d28:	0c24      	lsrs	r4, r4, #16
 8013d2a:	0027      	movs	r7, r4
 8013d2c:	4357      	muls	r7, r2
 8013d2e:	436a      	muls	r2, r5
 8013d30:	4690      	mov	r8, r2
 8013d32:	002a      	movs	r2, r5
 8013d34:	0c3b      	lsrs	r3, r7, #16
 8013d36:	469a      	mov	sl, r3
 8013d38:	434a      	muls	r2, r1
 8013d3a:	4361      	muls	r1, r4
 8013d3c:	4441      	add	r1, r8
 8013d3e:	4451      	add	r1, sl
 8013d40:	4483      	add	fp, r0
 8013d42:	4588      	cmp	r8, r1
 8013d44:	d903      	bls.n	8013d4e <__aeabi_dmul+0x252>
 8013d46:	2380      	movs	r3, #128	; 0x80
 8013d48:	025b      	lsls	r3, r3, #9
 8013d4a:	4698      	mov	r8, r3
 8013d4c:	4442      	add	r2, r8
 8013d4e:	043f      	lsls	r7, r7, #16
 8013d50:	0c0b      	lsrs	r3, r1, #16
 8013d52:	0c3f      	lsrs	r7, r7, #16
 8013d54:	0409      	lsls	r1, r1, #16
 8013d56:	19c9      	adds	r1, r1, r7
 8013d58:	0027      	movs	r7, r4
 8013d5a:	4698      	mov	r8, r3
 8013d5c:	464b      	mov	r3, r9
 8013d5e:	4377      	muls	r7, r6
 8013d60:	435c      	muls	r4, r3
 8013d62:	436e      	muls	r6, r5
 8013d64:	435d      	muls	r5, r3
 8013d66:	0c3b      	lsrs	r3, r7, #16
 8013d68:	4699      	mov	r9, r3
 8013d6a:	19a4      	adds	r4, r4, r6
 8013d6c:	444c      	add	r4, r9
 8013d6e:	4442      	add	r2, r8
 8013d70:	9503      	str	r5, [sp, #12]
 8013d72:	42a6      	cmp	r6, r4
 8013d74:	d904      	bls.n	8013d80 <__aeabi_dmul+0x284>
 8013d76:	2380      	movs	r3, #128	; 0x80
 8013d78:	025b      	lsls	r3, r3, #9
 8013d7a:	4698      	mov	r8, r3
 8013d7c:	4445      	add	r5, r8
 8013d7e:	9503      	str	r5, [sp, #12]
 8013d80:	9b02      	ldr	r3, [sp, #8]
 8013d82:	043f      	lsls	r7, r7, #16
 8013d84:	445b      	add	r3, fp
 8013d86:	001e      	movs	r6, r3
 8013d88:	4283      	cmp	r3, r0
 8013d8a:	4180      	sbcs	r0, r0
 8013d8c:	0423      	lsls	r3, r4, #16
 8013d8e:	4698      	mov	r8, r3
 8013d90:	9b05      	ldr	r3, [sp, #20]
 8013d92:	0c3f      	lsrs	r7, r7, #16
 8013d94:	4447      	add	r7, r8
 8013d96:	4698      	mov	r8, r3
 8013d98:	1876      	adds	r6, r6, r1
 8013d9a:	428e      	cmp	r6, r1
 8013d9c:	4189      	sbcs	r1, r1
 8013d9e:	4447      	add	r7, r8
 8013da0:	4240      	negs	r0, r0
 8013da2:	183d      	adds	r5, r7, r0
 8013da4:	46a8      	mov	r8, r5
 8013da6:	4693      	mov	fp, r2
 8013da8:	4249      	negs	r1, r1
 8013daa:	468a      	mov	sl, r1
 8013dac:	44c3      	add	fp, r8
 8013dae:	429f      	cmp	r7, r3
 8013db0:	41bf      	sbcs	r7, r7
 8013db2:	4580      	cmp	r8, r0
 8013db4:	4180      	sbcs	r0, r0
 8013db6:	9b03      	ldr	r3, [sp, #12]
 8013db8:	44da      	add	sl, fp
 8013dba:	4698      	mov	r8, r3
 8013dbc:	4653      	mov	r3, sl
 8013dbe:	4240      	negs	r0, r0
 8013dc0:	427f      	negs	r7, r7
 8013dc2:	4307      	orrs	r7, r0
 8013dc4:	0c24      	lsrs	r4, r4, #16
 8013dc6:	4593      	cmp	fp, r2
 8013dc8:	4192      	sbcs	r2, r2
 8013dca:	458a      	cmp	sl, r1
 8013dcc:	4189      	sbcs	r1, r1
 8013dce:	193f      	adds	r7, r7, r4
 8013dd0:	0ddc      	lsrs	r4, r3, #23
 8013dd2:	9b04      	ldr	r3, [sp, #16]
 8013dd4:	0275      	lsls	r5, r6, #9
 8013dd6:	431d      	orrs	r5, r3
 8013dd8:	1e68      	subs	r0, r5, #1
 8013dda:	4185      	sbcs	r5, r0
 8013ddc:	4653      	mov	r3, sl
 8013dde:	4252      	negs	r2, r2
 8013de0:	4249      	negs	r1, r1
 8013de2:	430a      	orrs	r2, r1
 8013de4:	18bf      	adds	r7, r7, r2
 8013de6:	4447      	add	r7, r8
 8013de8:	0df6      	lsrs	r6, r6, #23
 8013dea:	027f      	lsls	r7, r7, #9
 8013dec:	4335      	orrs	r5, r6
 8013dee:	025a      	lsls	r2, r3, #9
 8013df0:	433c      	orrs	r4, r7
 8013df2:	4315      	orrs	r5, r2
 8013df4:	01fb      	lsls	r3, r7, #7
 8013df6:	d400      	bmi.n	8013dfa <__aeabi_dmul+0x2fe>
 8013df8:	e0c1      	b.n	8013f7e <__aeabi_dmul+0x482>
 8013dfa:	2101      	movs	r1, #1
 8013dfc:	086a      	lsrs	r2, r5, #1
 8013dfe:	400d      	ands	r5, r1
 8013e00:	4315      	orrs	r5, r2
 8013e02:	07e2      	lsls	r2, r4, #31
 8013e04:	4315      	orrs	r5, r2
 8013e06:	0864      	lsrs	r4, r4, #1
 8013e08:	4926      	ldr	r1, [pc, #152]	; (8013ea4 <__aeabi_dmul+0x3a8>)
 8013e0a:	4461      	add	r1, ip
 8013e0c:	2900      	cmp	r1, #0
 8013e0e:	dd56      	ble.n	8013ebe <__aeabi_dmul+0x3c2>
 8013e10:	076b      	lsls	r3, r5, #29
 8013e12:	d009      	beq.n	8013e28 <__aeabi_dmul+0x32c>
 8013e14:	220f      	movs	r2, #15
 8013e16:	402a      	ands	r2, r5
 8013e18:	2a04      	cmp	r2, #4
 8013e1a:	d005      	beq.n	8013e28 <__aeabi_dmul+0x32c>
 8013e1c:	1d2a      	adds	r2, r5, #4
 8013e1e:	42aa      	cmp	r2, r5
 8013e20:	41ad      	sbcs	r5, r5
 8013e22:	426d      	negs	r5, r5
 8013e24:	1964      	adds	r4, r4, r5
 8013e26:	0015      	movs	r5, r2
 8013e28:	01e3      	lsls	r3, r4, #7
 8013e2a:	d504      	bpl.n	8013e36 <__aeabi_dmul+0x33a>
 8013e2c:	2180      	movs	r1, #128	; 0x80
 8013e2e:	4a1e      	ldr	r2, [pc, #120]	; (8013ea8 <__aeabi_dmul+0x3ac>)
 8013e30:	00c9      	lsls	r1, r1, #3
 8013e32:	4014      	ands	r4, r2
 8013e34:	4461      	add	r1, ip
 8013e36:	4a1d      	ldr	r2, [pc, #116]	; (8013eac <__aeabi_dmul+0x3b0>)
 8013e38:	4291      	cmp	r1, r2
 8013e3a:	dd00      	ble.n	8013e3e <__aeabi_dmul+0x342>
 8013e3c:	e724      	b.n	8013c88 <__aeabi_dmul+0x18c>
 8013e3e:	0762      	lsls	r2, r4, #29
 8013e40:	08ed      	lsrs	r5, r5, #3
 8013e42:	0264      	lsls	r4, r4, #9
 8013e44:	0549      	lsls	r1, r1, #21
 8013e46:	4315      	orrs	r5, r2
 8013e48:	0b24      	lsrs	r4, r4, #12
 8013e4a:	0d4a      	lsrs	r2, r1, #21
 8013e4c:	e6c6      	b.n	8013bdc <__aeabi_dmul+0xe0>
 8013e4e:	9701      	str	r7, [sp, #4]
 8013e50:	e6b8      	b.n	8013bc4 <__aeabi_dmul+0xc8>
 8013e52:	4a10      	ldr	r2, [pc, #64]	; (8013e94 <__aeabi_dmul+0x398>)
 8013e54:	2003      	movs	r0, #3
 8013e56:	4694      	mov	ip, r2
 8013e58:	4463      	add	r3, ip
 8013e5a:	464a      	mov	r2, r9
 8013e5c:	9300      	str	r3, [sp, #0]
 8013e5e:	2303      	movs	r3, #3
 8013e60:	431a      	orrs	r2, r3
 8013e62:	4691      	mov	r9, r2
 8013e64:	4652      	mov	r2, sl
 8013e66:	e68a      	b.n	8013b7e <__aeabi_dmul+0x82>
 8013e68:	4649      	mov	r1, r9
 8013e6a:	2301      	movs	r3, #1
 8013e6c:	4319      	orrs	r1, r3
 8013e6e:	4689      	mov	r9, r1
 8013e70:	2600      	movs	r6, #0
 8013e72:	2001      	movs	r0, #1
 8013e74:	e683      	b.n	8013b7e <__aeabi_dmul+0x82>
 8013e76:	220c      	movs	r2, #12
 8013e78:	9300      	str	r3, [sp, #0]
 8013e7a:	2303      	movs	r3, #3
 8013e7c:	0005      	movs	r5, r0
 8013e7e:	4691      	mov	r9, r2
 8013e80:	469b      	mov	fp, r3
 8013e82:	e65e      	b.n	8013b42 <__aeabi_dmul+0x46>
 8013e84:	2304      	movs	r3, #4
 8013e86:	4699      	mov	r9, r3
 8013e88:	2300      	movs	r3, #0
 8013e8a:	9300      	str	r3, [sp, #0]
 8013e8c:	3301      	adds	r3, #1
 8013e8e:	2400      	movs	r4, #0
 8013e90:	469b      	mov	fp, r3
 8013e92:	e656      	b.n	8013b42 <__aeabi_dmul+0x46>
 8013e94:	000007ff 	.word	0x000007ff
 8013e98:	fffffc01 	.word	0xfffffc01
 8013e9c:	0801ad00 	.word	0x0801ad00
 8013ea0:	fffffc0d 	.word	0xfffffc0d
 8013ea4:	000003ff 	.word	0x000003ff
 8013ea8:	feffffff 	.word	0xfeffffff
 8013eac:	000007fe 	.word	0x000007fe
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	2480      	movs	r4, #128	; 0x80
 8013eb4:	2500      	movs	r5, #0
 8013eb6:	4a44      	ldr	r2, [pc, #272]	; (8013fc8 <__aeabi_dmul+0x4cc>)
 8013eb8:	9301      	str	r3, [sp, #4]
 8013eba:	0324      	lsls	r4, r4, #12
 8013ebc:	e68e      	b.n	8013bdc <__aeabi_dmul+0xe0>
 8013ebe:	2001      	movs	r0, #1
 8013ec0:	1a40      	subs	r0, r0, r1
 8013ec2:	2838      	cmp	r0, #56	; 0x38
 8013ec4:	dd00      	ble.n	8013ec8 <__aeabi_dmul+0x3cc>
 8013ec6:	e686      	b.n	8013bd6 <__aeabi_dmul+0xda>
 8013ec8:	281f      	cmp	r0, #31
 8013eca:	dd5b      	ble.n	8013f84 <__aeabi_dmul+0x488>
 8013ecc:	221f      	movs	r2, #31
 8013ece:	0023      	movs	r3, r4
 8013ed0:	4252      	negs	r2, r2
 8013ed2:	1a51      	subs	r1, r2, r1
 8013ed4:	40cb      	lsrs	r3, r1
 8013ed6:	0019      	movs	r1, r3
 8013ed8:	2820      	cmp	r0, #32
 8013eda:	d003      	beq.n	8013ee4 <__aeabi_dmul+0x3e8>
 8013edc:	4a3b      	ldr	r2, [pc, #236]	; (8013fcc <__aeabi_dmul+0x4d0>)
 8013ede:	4462      	add	r2, ip
 8013ee0:	4094      	lsls	r4, r2
 8013ee2:	4325      	orrs	r5, r4
 8013ee4:	1e6a      	subs	r2, r5, #1
 8013ee6:	4195      	sbcs	r5, r2
 8013ee8:	002a      	movs	r2, r5
 8013eea:	430a      	orrs	r2, r1
 8013eec:	2107      	movs	r1, #7
 8013eee:	000d      	movs	r5, r1
 8013ef0:	2400      	movs	r4, #0
 8013ef2:	4015      	ands	r5, r2
 8013ef4:	4211      	tst	r1, r2
 8013ef6:	d05b      	beq.n	8013fb0 <__aeabi_dmul+0x4b4>
 8013ef8:	210f      	movs	r1, #15
 8013efa:	2400      	movs	r4, #0
 8013efc:	4011      	ands	r1, r2
 8013efe:	2904      	cmp	r1, #4
 8013f00:	d053      	beq.n	8013faa <__aeabi_dmul+0x4ae>
 8013f02:	1d11      	adds	r1, r2, #4
 8013f04:	4291      	cmp	r1, r2
 8013f06:	4192      	sbcs	r2, r2
 8013f08:	4252      	negs	r2, r2
 8013f0a:	18a4      	adds	r4, r4, r2
 8013f0c:	000a      	movs	r2, r1
 8013f0e:	0223      	lsls	r3, r4, #8
 8013f10:	d54b      	bpl.n	8013faa <__aeabi_dmul+0x4ae>
 8013f12:	2201      	movs	r2, #1
 8013f14:	2400      	movs	r4, #0
 8013f16:	2500      	movs	r5, #0
 8013f18:	e660      	b.n	8013bdc <__aeabi_dmul+0xe0>
 8013f1a:	2380      	movs	r3, #128	; 0x80
 8013f1c:	031b      	lsls	r3, r3, #12
 8013f1e:	421c      	tst	r4, r3
 8013f20:	d009      	beq.n	8013f36 <__aeabi_dmul+0x43a>
 8013f22:	421e      	tst	r6, r3
 8013f24:	d107      	bne.n	8013f36 <__aeabi_dmul+0x43a>
 8013f26:	4333      	orrs	r3, r6
 8013f28:	031c      	lsls	r4, r3, #12
 8013f2a:	4643      	mov	r3, r8
 8013f2c:	0015      	movs	r5, r2
 8013f2e:	0b24      	lsrs	r4, r4, #12
 8013f30:	4a25      	ldr	r2, [pc, #148]	; (8013fc8 <__aeabi_dmul+0x4cc>)
 8013f32:	9301      	str	r3, [sp, #4]
 8013f34:	e652      	b.n	8013bdc <__aeabi_dmul+0xe0>
 8013f36:	2280      	movs	r2, #128	; 0x80
 8013f38:	0312      	lsls	r2, r2, #12
 8013f3a:	4314      	orrs	r4, r2
 8013f3c:	0324      	lsls	r4, r4, #12
 8013f3e:	4a22      	ldr	r2, [pc, #136]	; (8013fc8 <__aeabi_dmul+0x4cc>)
 8013f40:	0b24      	lsrs	r4, r4, #12
 8013f42:	9701      	str	r7, [sp, #4]
 8013f44:	e64a      	b.n	8013bdc <__aeabi_dmul+0xe0>
 8013f46:	f000 fc81 	bl	801484c <__clzsi2>
 8013f4a:	0003      	movs	r3, r0
 8013f4c:	001a      	movs	r2, r3
 8013f4e:	3215      	adds	r2, #21
 8013f50:	3020      	adds	r0, #32
 8013f52:	2a1c      	cmp	r2, #28
 8013f54:	dc00      	bgt.n	8013f58 <__aeabi_dmul+0x45c>
 8013f56:	e684      	b.n	8013c62 <__aeabi_dmul+0x166>
 8013f58:	4656      	mov	r6, sl
 8013f5a:	3b08      	subs	r3, #8
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	409e      	lsls	r6, r3
 8013f60:	e689      	b.n	8013c76 <__aeabi_dmul+0x17a>
 8013f62:	f000 fc73 	bl	801484c <__clzsi2>
 8013f66:	0001      	movs	r1, r0
 8013f68:	0002      	movs	r2, r0
 8013f6a:	3115      	adds	r1, #21
 8013f6c:	3220      	adds	r2, #32
 8013f6e:	291c      	cmp	r1, #28
 8013f70:	dc00      	bgt.n	8013f74 <__aeabi_dmul+0x478>
 8013f72:	e64e      	b.n	8013c12 <__aeabi_dmul+0x116>
 8013f74:	0034      	movs	r4, r6
 8013f76:	3808      	subs	r0, #8
 8013f78:	2500      	movs	r5, #0
 8013f7a:	4084      	lsls	r4, r0
 8013f7c:	e653      	b.n	8013c26 <__aeabi_dmul+0x12a>
 8013f7e:	9b00      	ldr	r3, [sp, #0]
 8013f80:	469c      	mov	ip, r3
 8013f82:	e741      	b.n	8013e08 <__aeabi_dmul+0x30c>
 8013f84:	4912      	ldr	r1, [pc, #72]	; (8013fd0 <__aeabi_dmul+0x4d4>)
 8013f86:	0022      	movs	r2, r4
 8013f88:	4461      	add	r1, ip
 8013f8a:	002e      	movs	r6, r5
 8013f8c:	408d      	lsls	r5, r1
 8013f8e:	408a      	lsls	r2, r1
 8013f90:	40c6      	lsrs	r6, r0
 8013f92:	1e69      	subs	r1, r5, #1
 8013f94:	418d      	sbcs	r5, r1
 8013f96:	4332      	orrs	r2, r6
 8013f98:	432a      	orrs	r2, r5
 8013f9a:	40c4      	lsrs	r4, r0
 8013f9c:	0753      	lsls	r3, r2, #29
 8013f9e:	d0b6      	beq.n	8013f0e <__aeabi_dmul+0x412>
 8013fa0:	210f      	movs	r1, #15
 8013fa2:	4011      	ands	r1, r2
 8013fa4:	2904      	cmp	r1, #4
 8013fa6:	d1ac      	bne.n	8013f02 <__aeabi_dmul+0x406>
 8013fa8:	e7b1      	b.n	8013f0e <__aeabi_dmul+0x412>
 8013faa:	0765      	lsls	r5, r4, #29
 8013fac:	0264      	lsls	r4, r4, #9
 8013fae:	0b24      	lsrs	r4, r4, #12
 8013fb0:	08d2      	lsrs	r2, r2, #3
 8013fb2:	4315      	orrs	r5, r2
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	e611      	b.n	8013bdc <__aeabi_dmul+0xe0>
 8013fb8:	2280      	movs	r2, #128	; 0x80
 8013fba:	0312      	lsls	r2, r2, #12
 8013fbc:	4314      	orrs	r4, r2
 8013fbe:	0324      	lsls	r4, r4, #12
 8013fc0:	4a01      	ldr	r2, [pc, #4]	; (8013fc8 <__aeabi_dmul+0x4cc>)
 8013fc2:	0b24      	lsrs	r4, r4, #12
 8013fc4:	e60a      	b.n	8013bdc <__aeabi_dmul+0xe0>
 8013fc6:	46c0      	nop			; (mov r8, r8)
 8013fc8:	000007ff 	.word	0x000007ff
 8013fcc:	0000043e 	.word	0x0000043e
 8013fd0:	0000041e 	.word	0x0000041e

08013fd4 <__aeabi_dsub>:
 8013fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fd6:	4657      	mov	r7, sl
 8013fd8:	464e      	mov	r6, r9
 8013fda:	4645      	mov	r5, r8
 8013fdc:	46de      	mov	lr, fp
 8013fde:	0004      	movs	r4, r0
 8013fe0:	b5e0      	push	{r5, r6, r7, lr}
 8013fe2:	001f      	movs	r7, r3
 8013fe4:	0010      	movs	r0, r2
 8013fe6:	030b      	lsls	r3, r1, #12
 8013fe8:	0f62      	lsrs	r2, r4, #29
 8013fea:	004e      	lsls	r6, r1, #1
 8013fec:	0fcd      	lsrs	r5, r1, #31
 8013fee:	0a5b      	lsrs	r3, r3, #9
 8013ff0:	0339      	lsls	r1, r7, #12
 8013ff2:	4313      	orrs	r3, r2
 8013ff4:	0a49      	lsrs	r1, r1, #9
 8013ff6:	00e2      	lsls	r2, r4, #3
 8013ff8:	0f44      	lsrs	r4, r0, #29
 8013ffa:	4321      	orrs	r1, r4
 8013ffc:	4cc2      	ldr	r4, [pc, #776]	; (8014308 <__aeabi_dsub+0x334>)
 8013ffe:	4691      	mov	r9, r2
 8014000:	4692      	mov	sl, r2
 8014002:	00c0      	lsls	r0, r0, #3
 8014004:	007a      	lsls	r2, r7, #1
 8014006:	4680      	mov	r8, r0
 8014008:	0d76      	lsrs	r6, r6, #21
 801400a:	0d52      	lsrs	r2, r2, #21
 801400c:	0fff      	lsrs	r7, r7, #31
 801400e:	42a2      	cmp	r2, r4
 8014010:	d100      	bne.n	8014014 <__aeabi_dsub+0x40>
 8014012:	e0b4      	b.n	801417e <__aeabi_dsub+0x1aa>
 8014014:	2401      	movs	r4, #1
 8014016:	4067      	eors	r7, r4
 8014018:	46bb      	mov	fp, r7
 801401a:	42bd      	cmp	r5, r7
 801401c:	d100      	bne.n	8014020 <__aeabi_dsub+0x4c>
 801401e:	e088      	b.n	8014132 <__aeabi_dsub+0x15e>
 8014020:	1ab4      	subs	r4, r6, r2
 8014022:	46a4      	mov	ip, r4
 8014024:	2c00      	cmp	r4, #0
 8014026:	dc00      	bgt.n	801402a <__aeabi_dsub+0x56>
 8014028:	e0b2      	b.n	8014190 <__aeabi_dsub+0x1bc>
 801402a:	2a00      	cmp	r2, #0
 801402c:	d100      	bne.n	8014030 <__aeabi_dsub+0x5c>
 801402e:	e0c5      	b.n	80141bc <__aeabi_dsub+0x1e8>
 8014030:	4ab5      	ldr	r2, [pc, #724]	; (8014308 <__aeabi_dsub+0x334>)
 8014032:	4296      	cmp	r6, r2
 8014034:	d100      	bne.n	8014038 <__aeabi_dsub+0x64>
 8014036:	e28b      	b.n	8014550 <__aeabi_dsub+0x57c>
 8014038:	2280      	movs	r2, #128	; 0x80
 801403a:	0412      	lsls	r2, r2, #16
 801403c:	4311      	orrs	r1, r2
 801403e:	4662      	mov	r2, ip
 8014040:	2a38      	cmp	r2, #56	; 0x38
 8014042:	dd00      	ble.n	8014046 <__aeabi_dsub+0x72>
 8014044:	e1a1      	b.n	801438a <__aeabi_dsub+0x3b6>
 8014046:	2a1f      	cmp	r2, #31
 8014048:	dd00      	ble.n	801404c <__aeabi_dsub+0x78>
 801404a:	e216      	b.n	801447a <__aeabi_dsub+0x4a6>
 801404c:	2720      	movs	r7, #32
 801404e:	000c      	movs	r4, r1
 8014050:	1abf      	subs	r7, r7, r2
 8014052:	40bc      	lsls	r4, r7
 8014054:	0002      	movs	r2, r0
 8014056:	46a0      	mov	r8, r4
 8014058:	4664      	mov	r4, ip
 801405a:	40b8      	lsls	r0, r7
 801405c:	40e2      	lsrs	r2, r4
 801405e:	4644      	mov	r4, r8
 8014060:	4314      	orrs	r4, r2
 8014062:	0002      	movs	r2, r0
 8014064:	1e50      	subs	r0, r2, #1
 8014066:	4182      	sbcs	r2, r0
 8014068:	4660      	mov	r0, ip
 801406a:	40c1      	lsrs	r1, r0
 801406c:	4322      	orrs	r2, r4
 801406e:	1a5b      	subs	r3, r3, r1
 8014070:	4649      	mov	r1, r9
 8014072:	1a8c      	subs	r4, r1, r2
 8014074:	45a1      	cmp	r9, r4
 8014076:	4192      	sbcs	r2, r2
 8014078:	4252      	negs	r2, r2
 801407a:	1a9b      	subs	r3, r3, r2
 801407c:	4698      	mov	r8, r3
 801407e:	4643      	mov	r3, r8
 8014080:	021b      	lsls	r3, r3, #8
 8014082:	d400      	bmi.n	8014086 <__aeabi_dsub+0xb2>
 8014084:	e117      	b.n	80142b6 <__aeabi_dsub+0x2e2>
 8014086:	4643      	mov	r3, r8
 8014088:	025b      	lsls	r3, r3, #9
 801408a:	0a5b      	lsrs	r3, r3, #9
 801408c:	4698      	mov	r8, r3
 801408e:	4643      	mov	r3, r8
 8014090:	2b00      	cmp	r3, #0
 8014092:	d100      	bne.n	8014096 <__aeabi_dsub+0xc2>
 8014094:	e16c      	b.n	8014370 <__aeabi_dsub+0x39c>
 8014096:	4640      	mov	r0, r8
 8014098:	f000 fbd8 	bl	801484c <__clzsi2>
 801409c:	0002      	movs	r2, r0
 801409e:	3a08      	subs	r2, #8
 80140a0:	2120      	movs	r1, #32
 80140a2:	0020      	movs	r0, r4
 80140a4:	4643      	mov	r3, r8
 80140a6:	1a89      	subs	r1, r1, r2
 80140a8:	4093      	lsls	r3, r2
 80140aa:	40c8      	lsrs	r0, r1
 80140ac:	4094      	lsls	r4, r2
 80140ae:	4303      	orrs	r3, r0
 80140b0:	4296      	cmp	r6, r2
 80140b2:	dd00      	ble.n	80140b6 <__aeabi_dsub+0xe2>
 80140b4:	e157      	b.n	8014366 <__aeabi_dsub+0x392>
 80140b6:	1b96      	subs	r6, r2, r6
 80140b8:	1c71      	adds	r1, r6, #1
 80140ba:	291f      	cmp	r1, #31
 80140bc:	dd00      	ble.n	80140c0 <__aeabi_dsub+0xec>
 80140be:	e1cb      	b.n	8014458 <__aeabi_dsub+0x484>
 80140c0:	2220      	movs	r2, #32
 80140c2:	0018      	movs	r0, r3
 80140c4:	0026      	movs	r6, r4
 80140c6:	1a52      	subs	r2, r2, r1
 80140c8:	4094      	lsls	r4, r2
 80140ca:	4090      	lsls	r0, r2
 80140cc:	40ce      	lsrs	r6, r1
 80140ce:	40cb      	lsrs	r3, r1
 80140d0:	1e62      	subs	r2, r4, #1
 80140d2:	4194      	sbcs	r4, r2
 80140d4:	4330      	orrs	r0, r6
 80140d6:	4698      	mov	r8, r3
 80140d8:	2600      	movs	r6, #0
 80140da:	4304      	orrs	r4, r0
 80140dc:	0763      	lsls	r3, r4, #29
 80140de:	d009      	beq.n	80140f4 <__aeabi_dsub+0x120>
 80140e0:	230f      	movs	r3, #15
 80140e2:	4023      	ands	r3, r4
 80140e4:	2b04      	cmp	r3, #4
 80140e6:	d005      	beq.n	80140f4 <__aeabi_dsub+0x120>
 80140e8:	1d23      	adds	r3, r4, #4
 80140ea:	42a3      	cmp	r3, r4
 80140ec:	41a4      	sbcs	r4, r4
 80140ee:	4264      	negs	r4, r4
 80140f0:	44a0      	add	r8, r4
 80140f2:	001c      	movs	r4, r3
 80140f4:	4643      	mov	r3, r8
 80140f6:	021b      	lsls	r3, r3, #8
 80140f8:	d400      	bmi.n	80140fc <__aeabi_dsub+0x128>
 80140fa:	e0df      	b.n	80142bc <__aeabi_dsub+0x2e8>
 80140fc:	4b82      	ldr	r3, [pc, #520]	; (8014308 <__aeabi_dsub+0x334>)
 80140fe:	3601      	adds	r6, #1
 8014100:	429e      	cmp	r6, r3
 8014102:	d100      	bne.n	8014106 <__aeabi_dsub+0x132>
 8014104:	e0fb      	b.n	80142fe <__aeabi_dsub+0x32a>
 8014106:	4642      	mov	r2, r8
 8014108:	4b80      	ldr	r3, [pc, #512]	; (801430c <__aeabi_dsub+0x338>)
 801410a:	08e4      	lsrs	r4, r4, #3
 801410c:	401a      	ands	r2, r3
 801410e:	0013      	movs	r3, r2
 8014110:	0571      	lsls	r1, r6, #21
 8014112:	0752      	lsls	r2, r2, #29
 8014114:	025b      	lsls	r3, r3, #9
 8014116:	4322      	orrs	r2, r4
 8014118:	0b1b      	lsrs	r3, r3, #12
 801411a:	0d49      	lsrs	r1, r1, #21
 801411c:	0509      	lsls	r1, r1, #20
 801411e:	07ed      	lsls	r5, r5, #31
 8014120:	4319      	orrs	r1, r3
 8014122:	4329      	orrs	r1, r5
 8014124:	0010      	movs	r0, r2
 8014126:	bc3c      	pop	{r2, r3, r4, r5}
 8014128:	4690      	mov	r8, r2
 801412a:	4699      	mov	r9, r3
 801412c:	46a2      	mov	sl, r4
 801412e:	46ab      	mov	fp, r5
 8014130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014132:	1ab4      	subs	r4, r6, r2
 8014134:	46a4      	mov	ip, r4
 8014136:	2c00      	cmp	r4, #0
 8014138:	dd58      	ble.n	80141ec <__aeabi_dsub+0x218>
 801413a:	2a00      	cmp	r2, #0
 801413c:	d100      	bne.n	8014140 <__aeabi_dsub+0x16c>
 801413e:	e09e      	b.n	801427e <__aeabi_dsub+0x2aa>
 8014140:	4a71      	ldr	r2, [pc, #452]	; (8014308 <__aeabi_dsub+0x334>)
 8014142:	4296      	cmp	r6, r2
 8014144:	d100      	bne.n	8014148 <__aeabi_dsub+0x174>
 8014146:	e13b      	b.n	80143c0 <__aeabi_dsub+0x3ec>
 8014148:	2280      	movs	r2, #128	; 0x80
 801414a:	0412      	lsls	r2, r2, #16
 801414c:	4311      	orrs	r1, r2
 801414e:	4662      	mov	r2, ip
 8014150:	2a38      	cmp	r2, #56	; 0x38
 8014152:	dd00      	ble.n	8014156 <__aeabi_dsub+0x182>
 8014154:	e0c1      	b.n	80142da <__aeabi_dsub+0x306>
 8014156:	2a1f      	cmp	r2, #31
 8014158:	dc00      	bgt.n	801415c <__aeabi_dsub+0x188>
 801415a:	e1bb      	b.n	80144d4 <__aeabi_dsub+0x500>
 801415c:	000c      	movs	r4, r1
 801415e:	3a20      	subs	r2, #32
 8014160:	40d4      	lsrs	r4, r2
 8014162:	0022      	movs	r2, r4
 8014164:	4664      	mov	r4, ip
 8014166:	2c20      	cmp	r4, #32
 8014168:	d004      	beq.n	8014174 <__aeabi_dsub+0x1a0>
 801416a:	2740      	movs	r7, #64	; 0x40
 801416c:	1b3f      	subs	r7, r7, r4
 801416e:	40b9      	lsls	r1, r7
 8014170:	4308      	orrs	r0, r1
 8014172:	4680      	mov	r8, r0
 8014174:	4644      	mov	r4, r8
 8014176:	1e61      	subs	r1, r4, #1
 8014178:	418c      	sbcs	r4, r1
 801417a:	4314      	orrs	r4, r2
 801417c:	e0b1      	b.n	80142e2 <__aeabi_dsub+0x30e>
 801417e:	000c      	movs	r4, r1
 8014180:	4304      	orrs	r4, r0
 8014182:	d02a      	beq.n	80141da <__aeabi_dsub+0x206>
 8014184:	46bb      	mov	fp, r7
 8014186:	42bd      	cmp	r5, r7
 8014188:	d02d      	beq.n	80141e6 <__aeabi_dsub+0x212>
 801418a:	4c61      	ldr	r4, [pc, #388]	; (8014310 <__aeabi_dsub+0x33c>)
 801418c:	46a4      	mov	ip, r4
 801418e:	44b4      	add	ip, r6
 8014190:	4664      	mov	r4, ip
 8014192:	2c00      	cmp	r4, #0
 8014194:	d05c      	beq.n	8014250 <__aeabi_dsub+0x27c>
 8014196:	1b94      	subs	r4, r2, r6
 8014198:	46a4      	mov	ip, r4
 801419a:	2e00      	cmp	r6, #0
 801419c:	d000      	beq.n	80141a0 <__aeabi_dsub+0x1cc>
 801419e:	e115      	b.n	80143cc <__aeabi_dsub+0x3f8>
 80141a0:	464d      	mov	r5, r9
 80141a2:	431d      	orrs	r5, r3
 80141a4:	d100      	bne.n	80141a8 <__aeabi_dsub+0x1d4>
 80141a6:	e1c3      	b.n	8014530 <__aeabi_dsub+0x55c>
 80141a8:	1e65      	subs	r5, r4, #1
 80141aa:	2c01      	cmp	r4, #1
 80141ac:	d100      	bne.n	80141b0 <__aeabi_dsub+0x1dc>
 80141ae:	e20c      	b.n	80145ca <__aeabi_dsub+0x5f6>
 80141b0:	4e55      	ldr	r6, [pc, #340]	; (8014308 <__aeabi_dsub+0x334>)
 80141b2:	42b4      	cmp	r4, r6
 80141b4:	d100      	bne.n	80141b8 <__aeabi_dsub+0x1e4>
 80141b6:	e1f8      	b.n	80145aa <__aeabi_dsub+0x5d6>
 80141b8:	46ac      	mov	ip, r5
 80141ba:	e10e      	b.n	80143da <__aeabi_dsub+0x406>
 80141bc:	000a      	movs	r2, r1
 80141be:	4302      	orrs	r2, r0
 80141c0:	d100      	bne.n	80141c4 <__aeabi_dsub+0x1f0>
 80141c2:	e136      	b.n	8014432 <__aeabi_dsub+0x45e>
 80141c4:	0022      	movs	r2, r4
 80141c6:	3a01      	subs	r2, #1
 80141c8:	2c01      	cmp	r4, #1
 80141ca:	d100      	bne.n	80141ce <__aeabi_dsub+0x1fa>
 80141cc:	e1c6      	b.n	801455c <__aeabi_dsub+0x588>
 80141ce:	4c4e      	ldr	r4, [pc, #312]	; (8014308 <__aeabi_dsub+0x334>)
 80141d0:	45a4      	cmp	ip, r4
 80141d2:	d100      	bne.n	80141d6 <__aeabi_dsub+0x202>
 80141d4:	e0f4      	b.n	80143c0 <__aeabi_dsub+0x3ec>
 80141d6:	4694      	mov	ip, r2
 80141d8:	e731      	b.n	801403e <__aeabi_dsub+0x6a>
 80141da:	2401      	movs	r4, #1
 80141dc:	4067      	eors	r7, r4
 80141de:	46bb      	mov	fp, r7
 80141e0:	42bd      	cmp	r5, r7
 80141e2:	d000      	beq.n	80141e6 <__aeabi_dsub+0x212>
 80141e4:	e71c      	b.n	8014020 <__aeabi_dsub+0x4c>
 80141e6:	4c4a      	ldr	r4, [pc, #296]	; (8014310 <__aeabi_dsub+0x33c>)
 80141e8:	46a4      	mov	ip, r4
 80141ea:	44b4      	add	ip, r6
 80141ec:	4664      	mov	r4, ip
 80141ee:	2c00      	cmp	r4, #0
 80141f0:	d100      	bne.n	80141f4 <__aeabi_dsub+0x220>
 80141f2:	e0cf      	b.n	8014394 <__aeabi_dsub+0x3c0>
 80141f4:	1b94      	subs	r4, r2, r6
 80141f6:	46a4      	mov	ip, r4
 80141f8:	2e00      	cmp	r6, #0
 80141fa:	d100      	bne.n	80141fe <__aeabi_dsub+0x22a>
 80141fc:	e15c      	b.n	80144b8 <__aeabi_dsub+0x4e4>
 80141fe:	4e42      	ldr	r6, [pc, #264]	; (8014308 <__aeabi_dsub+0x334>)
 8014200:	42b2      	cmp	r2, r6
 8014202:	d100      	bne.n	8014206 <__aeabi_dsub+0x232>
 8014204:	e1ec      	b.n	80145e0 <__aeabi_dsub+0x60c>
 8014206:	2680      	movs	r6, #128	; 0x80
 8014208:	0436      	lsls	r6, r6, #16
 801420a:	4333      	orrs	r3, r6
 801420c:	4664      	mov	r4, ip
 801420e:	2c38      	cmp	r4, #56	; 0x38
 8014210:	dd00      	ble.n	8014214 <__aeabi_dsub+0x240>
 8014212:	e1b3      	b.n	801457c <__aeabi_dsub+0x5a8>
 8014214:	2c1f      	cmp	r4, #31
 8014216:	dd00      	ble.n	801421a <__aeabi_dsub+0x246>
 8014218:	e238      	b.n	801468c <__aeabi_dsub+0x6b8>
 801421a:	2620      	movs	r6, #32
 801421c:	1b36      	subs	r6, r6, r4
 801421e:	001c      	movs	r4, r3
 8014220:	40b4      	lsls	r4, r6
 8014222:	464f      	mov	r7, r9
 8014224:	46a0      	mov	r8, r4
 8014226:	4664      	mov	r4, ip
 8014228:	40e7      	lsrs	r7, r4
 801422a:	4644      	mov	r4, r8
 801422c:	433c      	orrs	r4, r7
 801422e:	464f      	mov	r7, r9
 8014230:	40b7      	lsls	r7, r6
 8014232:	003e      	movs	r6, r7
 8014234:	1e77      	subs	r7, r6, #1
 8014236:	41be      	sbcs	r6, r7
 8014238:	4334      	orrs	r4, r6
 801423a:	4666      	mov	r6, ip
 801423c:	40f3      	lsrs	r3, r6
 801423e:	18c9      	adds	r1, r1, r3
 8014240:	1824      	adds	r4, r4, r0
 8014242:	4284      	cmp	r4, r0
 8014244:	419b      	sbcs	r3, r3
 8014246:	425b      	negs	r3, r3
 8014248:	4698      	mov	r8, r3
 801424a:	0016      	movs	r6, r2
 801424c:	4488      	add	r8, r1
 801424e:	e04e      	b.n	80142ee <__aeabi_dsub+0x31a>
 8014250:	4a30      	ldr	r2, [pc, #192]	; (8014314 <__aeabi_dsub+0x340>)
 8014252:	1c74      	adds	r4, r6, #1
 8014254:	4214      	tst	r4, r2
 8014256:	d000      	beq.n	801425a <__aeabi_dsub+0x286>
 8014258:	e0d6      	b.n	8014408 <__aeabi_dsub+0x434>
 801425a:	464a      	mov	r2, r9
 801425c:	431a      	orrs	r2, r3
 801425e:	2e00      	cmp	r6, #0
 8014260:	d000      	beq.n	8014264 <__aeabi_dsub+0x290>
 8014262:	e15b      	b.n	801451c <__aeabi_dsub+0x548>
 8014264:	2a00      	cmp	r2, #0
 8014266:	d100      	bne.n	801426a <__aeabi_dsub+0x296>
 8014268:	e1a5      	b.n	80145b6 <__aeabi_dsub+0x5e2>
 801426a:	000a      	movs	r2, r1
 801426c:	4302      	orrs	r2, r0
 801426e:	d000      	beq.n	8014272 <__aeabi_dsub+0x29e>
 8014270:	e1bb      	b.n	80145ea <__aeabi_dsub+0x616>
 8014272:	464a      	mov	r2, r9
 8014274:	0759      	lsls	r1, r3, #29
 8014276:	08d2      	lsrs	r2, r2, #3
 8014278:	430a      	orrs	r2, r1
 801427a:	08db      	lsrs	r3, r3, #3
 801427c:	e027      	b.n	80142ce <__aeabi_dsub+0x2fa>
 801427e:	000a      	movs	r2, r1
 8014280:	4302      	orrs	r2, r0
 8014282:	d100      	bne.n	8014286 <__aeabi_dsub+0x2b2>
 8014284:	e174      	b.n	8014570 <__aeabi_dsub+0x59c>
 8014286:	0022      	movs	r2, r4
 8014288:	3a01      	subs	r2, #1
 801428a:	2c01      	cmp	r4, #1
 801428c:	d005      	beq.n	801429a <__aeabi_dsub+0x2c6>
 801428e:	4c1e      	ldr	r4, [pc, #120]	; (8014308 <__aeabi_dsub+0x334>)
 8014290:	45a4      	cmp	ip, r4
 8014292:	d100      	bne.n	8014296 <__aeabi_dsub+0x2c2>
 8014294:	e094      	b.n	80143c0 <__aeabi_dsub+0x3ec>
 8014296:	4694      	mov	ip, r2
 8014298:	e759      	b.n	801414e <__aeabi_dsub+0x17a>
 801429a:	4448      	add	r0, r9
 801429c:	4548      	cmp	r0, r9
 801429e:	4192      	sbcs	r2, r2
 80142a0:	185b      	adds	r3, r3, r1
 80142a2:	4698      	mov	r8, r3
 80142a4:	0004      	movs	r4, r0
 80142a6:	4252      	negs	r2, r2
 80142a8:	4490      	add	r8, r2
 80142aa:	4643      	mov	r3, r8
 80142ac:	2602      	movs	r6, #2
 80142ae:	021b      	lsls	r3, r3, #8
 80142b0:	d500      	bpl.n	80142b4 <__aeabi_dsub+0x2e0>
 80142b2:	e0c4      	b.n	801443e <__aeabi_dsub+0x46a>
 80142b4:	3e01      	subs	r6, #1
 80142b6:	0763      	lsls	r3, r4, #29
 80142b8:	d000      	beq.n	80142bc <__aeabi_dsub+0x2e8>
 80142ba:	e711      	b.n	80140e0 <__aeabi_dsub+0x10c>
 80142bc:	4643      	mov	r3, r8
 80142be:	46b4      	mov	ip, r6
 80142c0:	0759      	lsls	r1, r3, #29
 80142c2:	08e2      	lsrs	r2, r4, #3
 80142c4:	430a      	orrs	r2, r1
 80142c6:	08db      	lsrs	r3, r3, #3
 80142c8:	490f      	ldr	r1, [pc, #60]	; (8014308 <__aeabi_dsub+0x334>)
 80142ca:	458c      	cmp	ip, r1
 80142cc:	d040      	beq.n	8014350 <__aeabi_dsub+0x37c>
 80142ce:	4661      	mov	r1, ip
 80142d0:	031b      	lsls	r3, r3, #12
 80142d2:	0549      	lsls	r1, r1, #21
 80142d4:	0b1b      	lsrs	r3, r3, #12
 80142d6:	0d49      	lsrs	r1, r1, #21
 80142d8:	e720      	b.n	801411c <__aeabi_dsub+0x148>
 80142da:	4301      	orrs	r1, r0
 80142dc:	000c      	movs	r4, r1
 80142de:	1e61      	subs	r1, r4, #1
 80142e0:	418c      	sbcs	r4, r1
 80142e2:	444c      	add	r4, r9
 80142e4:	454c      	cmp	r4, r9
 80142e6:	4192      	sbcs	r2, r2
 80142e8:	4252      	negs	r2, r2
 80142ea:	4690      	mov	r8, r2
 80142ec:	4498      	add	r8, r3
 80142ee:	4643      	mov	r3, r8
 80142f0:	021b      	lsls	r3, r3, #8
 80142f2:	d5e0      	bpl.n	80142b6 <__aeabi_dsub+0x2e2>
 80142f4:	4b04      	ldr	r3, [pc, #16]	; (8014308 <__aeabi_dsub+0x334>)
 80142f6:	3601      	adds	r6, #1
 80142f8:	429e      	cmp	r6, r3
 80142fa:	d000      	beq.n	80142fe <__aeabi_dsub+0x32a>
 80142fc:	e09f      	b.n	801443e <__aeabi_dsub+0x46a>
 80142fe:	0031      	movs	r1, r6
 8014300:	2300      	movs	r3, #0
 8014302:	2200      	movs	r2, #0
 8014304:	e70a      	b.n	801411c <__aeabi_dsub+0x148>
 8014306:	46c0      	nop			; (mov r8, r8)
 8014308:	000007ff 	.word	0x000007ff
 801430c:	ff7fffff 	.word	0xff7fffff
 8014310:	fffff801 	.word	0xfffff801
 8014314:	000007fe 	.word	0x000007fe
 8014318:	2a00      	cmp	r2, #0
 801431a:	d100      	bne.n	801431e <__aeabi_dsub+0x34a>
 801431c:	e160      	b.n	80145e0 <__aeabi_dsub+0x60c>
 801431e:	000a      	movs	r2, r1
 8014320:	4302      	orrs	r2, r0
 8014322:	d04d      	beq.n	80143c0 <__aeabi_dsub+0x3ec>
 8014324:	464a      	mov	r2, r9
 8014326:	075c      	lsls	r4, r3, #29
 8014328:	08d2      	lsrs	r2, r2, #3
 801432a:	4322      	orrs	r2, r4
 801432c:	2480      	movs	r4, #128	; 0x80
 801432e:	08db      	lsrs	r3, r3, #3
 8014330:	0324      	lsls	r4, r4, #12
 8014332:	4223      	tst	r3, r4
 8014334:	d007      	beq.n	8014346 <__aeabi_dsub+0x372>
 8014336:	08ce      	lsrs	r6, r1, #3
 8014338:	4226      	tst	r6, r4
 801433a:	d104      	bne.n	8014346 <__aeabi_dsub+0x372>
 801433c:	465d      	mov	r5, fp
 801433e:	0033      	movs	r3, r6
 8014340:	08c2      	lsrs	r2, r0, #3
 8014342:	0749      	lsls	r1, r1, #29
 8014344:	430a      	orrs	r2, r1
 8014346:	0f51      	lsrs	r1, r2, #29
 8014348:	00d2      	lsls	r2, r2, #3
 801434a:	08d2      	lsrs	r2, r2, #3
 801434c:	0749      	lsls	r1, r1, #29
 801434e:	430a      	orrs	r2, r1
 8014350:	0011      	movs	r1, r2
 8014352:	4319      	orrs	r1, r3
 8014354:	d100      	bne.n	8014358 <__aeabi_dsub+0x384>
 8014356:	e1c8      	b.n	80146ea <__aeabi_dsub+0x716>
 8014358:	2180      	movs	r1, #128	; 0x80
 801435a:	0309      	lsls	r1, r1, #12
 801435c:	430b      	orrs	r3, r1
 801435e:	031b      	lsls	r3, r3, #12
 8014360:	49d5      	ldr	r1, [pc, #852]	; (80146b8 <__aeabi_dsub+0x6e4>)
 8014362:	0b1b      	lsrs	r3, r3, #12
 8014364:	e6da      	b.n	801411c <__aeabi_dsub+0x148>
 8014366:	49d5      	ldr	r1, [pc, #852]	; (80146bc <__aeabi_dsub+0x6e8>)
 8014368:	1ab6      	subs	r6, r6, r2
 801436a:	400b      	ands	r3, r1
 801436c:	4698      	mov	r8, r3
 801436e:	e6b5      	b.n	80140dc <__aeabi_dsub+0x108>
 8014370:	0020      	movs	r0, r4
 8014372:	f000 fa6b 	bl	801484c <__clzsi2>
 8014376:	0002      	movs	r2, r0
 8014378:	3218      	adds	r2, #24
 801437a:	2a1f      	cmp	r2, #31
 801437c:	dc00      	bgt.n	8014380 <__aeabi_dsub+0x3ac>
 801437e:	e68f      	b.n	80140a0 <__aeabi_dsub+0xcc>
 8014380:	0023      	movs	r3, r4
 8014382:	3808      	subs	r0, #8
 8014384:	4083      	lsls	r3, r0
 8014386:	2400      	movs	r4, #0
 8014388:	e692      	b.n	80140b0 <__aeabi_dsub+0xdc>
 801438a:	4308      	orrs	r0, r1
 801438c:	0002      	movs	r2, r0
 801438e:	1e50      	subs	r0, r2, #1
 8014390:	4182      	sbcs	r2, r0
 8014392:	e66d      	b.n	8014070 <__aeabi_dsub+0x9c>
 8014394:	4cca      	ldr	r4, [pc, #808]	; (80146c0 <__aeabi_dsub+0x6ec>)
 8014396:	1c72      	adds	r2, r6, #1
 8014398:	4222      	tst	r2, r4
 801439a:	d000      	beq.n	801439e <__aeabi_dsub+0x3ca>
 801439c:	e0ad      	b.n	80144fa <__aeabi_dsub+0x526>
 801439e:	464a      	mov	r2, r9
 80143a0:	431a      	orrs	r2, r3
 80143a2:	2e00      	cmp	r6, #0
 80143a4:	d1b8      	bne.n	8014318 <__aeabi_dsub+0x344>
 80143a6:	2a00      	cmp	r2, #0
 80143a8:	d100      	bne.n	80143ac <__aeabi_dsub+0x3d8>
 80143aa:	e158      	b.n	801465e <__aeabi_dsub+0x68a>
 80143ac:	000a      	movs	r2, r1
 80143ae:	4302      	orrs	r2, r0
 80143b0:	d000      	beq.n	80143b4 <__aeabi_dsub+0x3e0>
 80143b2:	e159      	b.n	8014668 <__aeabi_dsub+0x694>
 80143b4:	464a      	mov	r2, r9
 80143b6:	0759      	lsls	r1, r3, #29
 80143b8:	08d2      	lsrs	r2, r2, #3
 80143ba:	430a      	orrs	r2, r1
 80143bc:	08db      	lsrs	r3, r3, #3
 80143be:	e786      	b.n	80142ce <__aeabi_dsub+0x2fa>
 80143c0:	464a      	mov	r2, r9
 80143c2:	0759      	lsls	r1, r3, #29
 80143c4:	08d2      	lsrs	r2, r2, #3
 80143c6:	430a      	orrs	r2, r1
 80143c8:	08db      	lsrs	r3, r3, #3
 80143ca:	e7c1      	b.n	8014350 <__aeabi_dsub+0x37c>
 80143cc:	4dba      	ldr	r5, [pc, #744]	; (80146b8 <__aeabi_dsub+0x6e4>)
 80143ce:	42aa      	cmp	r2, r5
 80143d0:	d100      	bne.n	80143d4 <__aeabi_dsub+0x400>
 80143d2:	e11e      	b.n	8014612 <__aeabi_dsub+0x63e>
 80143d4:	2580      	movs	r5, #128	; 0x80
 80143d6:	042d      	lsls	r5, r5, #16
 80143d8:	432b      	orrs	r3, r5
 80143da:	4664      	mov	r4, ip
 80143dc:	2c38      	cmp	r4, #56	; 0x38
 80143de:	dc5d      	bgt.n	801449c <__aeabi_dsub+0x4c8>
 80143e0:	2c1f      	cmp	r4, #31
 80143e2:	dd00      	ble.n	80143e6 <__aeabi_dsub+0x412>
 80143e4:	e0d0      	b.n	8014588 <__aeabi_dsub+0x5b4>
 80143e6:	2520      	movs	r5, #32
 80143e8:	4667      	mov	r7, ip
 80143ea:	1b2d      	subs	r5, r5, r4
 80143ec:	464e      	mov	r6, r9
 80143ee:	001c      	movs	r4, r3
 80143f0:	40fe      	lsrs	r6, r7
 80143f2:	40ac      	lsls	r4, r5
 80143f4:	4334      	orrs	r4, r6
 80143f6:	464e      	mov	r6, r9
 80143f8:	40ae      	lsls	r6, r5
 80143fa:	0035      	movs	r5, r6
 80143fc:	40fb      	lsrs	r3, r7
 80143fe:	1e6e      	subs	r6, r5, #1
 8014400:	41b5      	sbcs	r5, r6
 8014402:	1ac9      	subs	r1, r1, r3
 8014404:	432c      	orrs	r4, r5
 8014406:	e04e      	b.n	80144a6 <__aeabi_dsub+0x4d2>
 8014408:	464a      	mov	r2, r9
 801440a:	1a14      	subs	r4, r2, r0
 801440c:	45a1      	cmp	r9, r4
 801440e:	4192      	sbcs	r2, r2
 8014410:	4252      	negs	r2, r2
 8014412:	4690      	mov	r8, r2
 8014414:	1a5f      	subs	r7, r3, r1
 8014416:	003a      	movs	r2, r7
 8014418:	4647      	mov	r7, r8
 801441a:	1bd2      	subs	r2, r2, r7
 801441c:	4690      	mov	r8, r2
 801441e:	0212      	lsls	r2, r2, #8
 8014420:	d500      	bpl.n	8014424 <__aeabi_dsub+0x450>
 8014422:	e08b      	b.n	801453c <__aeabi_dsub+0x568>
 8014424:	4642      	mov	r2, r8
 8014426:	4322      	orrs	r2, r4
 8014428:	d000      	beq.n	801442c <__aeabi_dsub+0x458>
 801442a:	e630      	b.n	801408e <__aeabi_dsub+0xba>
 801442c:	2300      	movs	r3, #0
 801442e:	2500      	movs	r5, #0
 8014430:	e74d      	b.n	80142ce <__aeabi_dsub+0x2fa>
 8014432:	464a      	mov	r2, r9
 8014434:	0759      	lsls	r1, r3, #29
 8014436:	08d2      	lsrs	r2, r2, #3
 8014438:	430a      	orrs	r2, r1
 801443a:	08db      	lsrs	r3, r3, #3
 801443c:	e744      	b.n	80142c8 <__aeabi_dsub+0x2f4>
 801443e:	4642      	mov	r2, r8
 8014440:	4b9e      	ldr	r3, [pc, #632]	; (80146bc <__aeabi_dsub+0x6e8>)
 8014442:	0861      	lsrs	r1, r4, #1
 8014444:	401a      	ands	r2, r3
 8014446:	0013      	movs	r3, r2
 8014448:	2201      	movs	r2, #1
 801444a:	4014      	ands	r4, r2
 801444c:	430c      	orrs	r4, r1
 801444e:	07da      	lsls	r2, r3, #31
 8014450:	085b      	lsrs	r3, r3, #1
 8014452:	4698      	mov	r8, r3
 8014454:	4314      	orrs	r4, r2
 8014456:	e641      	b.n	80140dc <__aeabi_dsub+0x108>
 8014458:	001a      	movs	r2, r3
 801445a:	3e1f      	subs	r6, #31
 801445c:	40f2      	lsrs	r2, r6
 801445e:	0016      	movs	r6, r2
 8014460:	2920      	cmp	r1, #32
 8014462:	d003      	beq.n	801446c <__aeabi_dsub+0x498>
 8014464:	2240      	movs	r2, #64	; 0x40
 8014466:	1a51      	subs	r1, r2, r1
 8014468:	408b      	lsls	r3, r1
 801446a:	431c      	orrs	r4, r3
 801446c:	1e62      	subs	r2, r4, #1
 801446e:	4194      	sbcs	r4, r2
 8014470:	2300      	movs	r3, #0
 8014472:	4334      	orrs	r4, r6
 8014474:	4698      	mov	r8, r3
 8014476:	2600      	movs	r6, #0
 8014478:	e71d      	b.n	80142b6 <__aeabi_dsub+0x2e2>
 801447a:	000c      	movs	r4, r1
 801447c:	3a20      	subs	r2, #32
 801447e:	40d4      	lsrs	r4, r2
 8014480:	0022      	movs	r2, r4
 8014482:	4664      	mov	r4, ip
 8014484:	2c20      	cmp	r4, #32
 8014486:	d004      	beq.n	8014492 <__aeabi_dsub+0x4be>
 8014488:	2740      	movs	r7, #64	; 0x40
 801448a:	1b3f      	subs	r7, r7, r4
 801448c:	40b9      	lsls	r1, r7
 801448e:	4308      	orrs	r0, r1
 8014490:	4680      	mov	r8, r0
 8014492:	4644      	mov	r4, r8
 8014494:	1e61      	subs	r1, r4, #1
 8014496:	418c      	sbcs	r4, r1
 8014498:	4322      	orrs	r2, r4
 801449a:	e5e9      	b.n	8014070 <__aeabi_dsub+0x9c>
 801449c:	464c      	mov	r4, r9
 801449e:	4323      	orrs	r3, r4
 80144a0:	001c      	movs	r4, r3
 80144a2:	1e63      	subs	r3, r4, #1
 80144a4:	419c      	sbcs	r4, r3
 80144a6:	1b04      	subs	r4, r0, r4
 80144a8:	42a0      	cmp	r0, r4
 80144aa:	419b      	sbcs	r3, r3
 80144ac:	425b      	negs	r3, r3
 80144ae:	1acb      	subs	r3, r1, r3
 80144b0:	4698      	mov	r8, r3
 80144b2:	465d      	mov	r5, fp
 80144b4:	0016      	movs	r6, r2
 80144b6:	e5e2      	b.n	801407e <__aeabi_dsub+0xaa>
 80144b8:	464e      	mov	r6, r9
 80144ba:	431e      	orrs	r6, r3
 80144bc:	d100      	bne.n	80144c0 <__aeabi_dsub+0x4ec>
 80144be:	e0ae      	b.n	801461e <__aeabi_dsub+0x64a>
 80144c0:	1e66      	subs	r6, r4, #1
 80144c2:	2c01      	cmp	r4, #1
 80144c4:	d100      	bne.n	80144c8 <__aeabi_dsub+0x4f4>
 80144c6:	e0fd      	b.n	80146c4 <__aeabi_dsub+0x6f0>
 80144c8:	4f7b      	ldr	r7, [pc, #492]	; (80146b8 <__aeabi_dsub+0x6e4>)
 80144ca:	42bc      	cmp	r4, r7
 80144cc:	d100      	bne.n	80144d0 <__aeabi_dsub+0x4fc>
 80144ce:	e107      	b.n	80146e0 <__aeabi_dsub+0x70c>
 80144d0:	46b4      	mov	ip, r6
 80144d2:	e69b      	b.n	801420c <__aeabi_dsub+0x238>
 80144d4:	4664      	mov	r4, ip
 80144d6:	2220      	movs	r2, #32
 80144d8:	1b12      	subs	r2, r2, r4
 80144da:	000c      	movs	r4, r1
 80144dc:	4094      	lsls	r4, r2
 80144de:	0007      	movs	r7, r0
 80144e0:	4090      	lsls	r0, r2
 80144e2:	46a0      	mov	r8, r4
 80144e4:	4664      	mov	r4, ip
 80144e6:	1e42      	subs	r2, r0, #1
 80144e8:	4190      	sbcs	r0, r2
 80144ea:	4662      	mov	r2, ip
 80144ec:	40e7      	lsrs	r7, r4
 80144ee:	4644      	mov	r4, r8
 80144f0:	40d1      	lsrs	r1, r2
 80144f2:	433c      	orrs	r4, r7
 80144f4:	4304      	orrs	r4, r0
 80144f6:	185b      	adds	r3, r3, r1
 80144f8:	e6f3      	b.n	80142e2 <__aeabi_dsub+0x30e>
 80144fa:	4c6f      	ldr	r4, [pc, #444]	; (80146b8 <__aeabi_dsub+0x6e4>)
 80144fc:	42a2      	cmp	r2, r4
 80144fe:	d100      	bne.n	8014502 <__aeabi_dsub+0x52e>
 8014500:	e0d5      	b.n	80146ae <__aeabi_dsub+0x6da>
 8014502:	4448      	add	r0, r9
 8014504:	185b      	adds	r3, r3, r1
 8014506:	4548      	cmp	r0, r9
 8014508:	4189      	sbcs	r1, r1
 801450a:	4249      	negs	r1, r1
 801450c:	185b      	adds	r3, r3, r1
 801450e:	07dc      	lsls	r4, r3, #31
 8014510:	0840      	lsrs	r0, r0, #1
 8014512:	085b      	lsrs	r3, r3, #1
 8014514:	4698      	mov	r8, r3
 8014516:	0016      	movs	r6, r2
 8014518:	4304      	orrs	r4, r0
 801451a:	e6cc      	b.n	80142b6 <__aeabi_dsub+0x2e2>
 801451c:	2a00      	cmp	r2, #0
 801451e:	d000      	beq.n	8014522 <__aeabi_dsub+0x54e>
 8014520:	e082      	b.n	8014628 <__aeabi_dsub+0x654>
 8014522:	000a      	movs	r2, r1
 8014524:	4302      	orrs	r2, r0
 8014526:	d140      	bne.n	80145aa <__aeabi_dsub+0x5d6>
 8014528:	2380      	movs	r3, #128	; 0x80
 801452a:	2500      	movs	r5, #0
 801452c:	031b      	lsls	r3, r3, #12
 801452e:	e713      	b.n	8014358 <__aeabi_dsub+0x384>
 8014530:	074b      	lsls	r3, r1, #29
 8014532:	08c2      	lsrs	r2, r0, #3
 8014534:	431a      	orrs	r2, r3
 8014536:	465d      	mov	r5, fp
 8014538:	08cb      	lsrs	r3, r1, #3
 801453a:	e6c5      	b.n	80142c8 <__aeabi_dsub+0x2f4>
 801453c:	464a      	mov	r2, r9
 801453e:	1a84      	subs	r4, r0, r2
 8014540:	42a0      	cmp	r0, r4
 8014542:	4192      	sbcs	r2, r2
 8014544:	1acb      	subs	r3, r1, r3
 8014546:	4252      	negs	r2, r2
 8014548:	1a9b      	subs	r3, r3, r2
 801454a:	4698      	mov	r8, r3
 801454c:	465d      	mov	r5, fp
 801454e:	e59e      	b.n	801408e <__aeabi_dsub+0xba>
 8014550:	464a      	mov	r2, r9
 8014552:	0759      	lsls	r1, r3, #29
 8014554:	08d2      	lsrs	r2, r2, #3
 8014556:	430a      	orrs	r2, r1
 8014558:	08db      	lsrs	r3, r3, #3
 801455a:	e6f9      	b.n	8014350 <__aeabi_dsub+0x37c>
 801455c:	464a      	mov	r2, r9
 801455e:	1a14      	subs	r4, r2, r0
 8014560:	45a1      	cmp	r9, r4
 8014562:	4192      	sbcs	r2, r2
 8014564:	1a5b      	subs	r3, r3, r1
 8014566:	4252      	negs	r2, r2
 8014568:	1a9b      	subs	r3, r3, r2
 801456a:	4698      	mov	r8, r3
 801456c:	2601      	movs	r6, #1
 801456e:	e586      	b.n	801407e <__aeabi_dsub+0xaa>
 8014570:	464a      	mov	r2, r9
 8014572:	0759      	lsls	r1, r3, #29
 8014574:	08d2      	lsrs	r2, r2, #3
 8014576:	430a      	orrs	r2, r1
 8014578:	08db      	lsrs	r3, r3, #3
 801457a:	e6a5      	b.n	80142c8 <__aeabi_dsub+0x2f4>
 801457c:	464c      	mov	r4, r9
 801457e:	4323      	orrs	r3, r4
 8014580:	001c      	movs	r4, r3
 8014582:	1e63      	subs	r3, r4, #1
 8014584:	419c      	sbcs	r4, r3
 8014586:	e65b      	b.n	8014240 <__aeabi_dsub+0x26c>
 8014588:	4665      	mov	r5, ip
 801458a:	001e      	movs	r6, r3
 801458c:	3d20      	subs	r5, #32
 801458e:	40ee      	lsrs	r6, r5
 8014590:	2c20      	cmp	r4, #32
 8014592:	d005      	beq.n	80145a0 <__aeabi_dsub+0x5cc>
 8014594:	2540      	movs	r5, #64	; 0x40
 8014596:	1b2d      	subs	r5, r5, r4
 8014598:	40ab      	lsls	r3, r5
 801459a:	464c      	mov	r4, r9
 801459c:	431c      	orrs	r4, r3
 801459e:	46a2      	mov	sl, r4
 80145a0:	4654      	mov	r4, sl
 80145a2:	1e63      	subs	r3, r4, #1
 80145a4:	419c      	sbcs	r4, r3
 80145a6:	4334      	orrs	r4, r6
 80145a8:	e77d      	b.n	80144a6 <__aeabi_dsub+0x4d2>
 80145aa:	074b      	lsls	r3, r1, #29
 80145ac:	08c2      	lsrs	r2, r0, #3
 80145ae:	431a      	orrs	r2, r3
 80145b0:	465d      	mov	r5, fp
 80145b2:	08cb      	lsrs	r3, r1, #3
 80145b4:	e6cc      	b.n	8014350 <__aeabi_dsub+0x37c>
 80145b6:	000a      	movs	r2, r1
 80145b8:	4302      	orrs	r2, r0
 80145ba:	d100      	bne.n	80145be <__aeabi_dsub+0x5ea>
 80145bc:	e736      	b.n	801442c <__aeabi_dsub+0x458>
 80145be:	074b      	lsls	r3, r1, #29
 80145c0:	08c2      	lsrs	r2, r0, #3
 80145c2:	431a      	orrs	r2, r3
 80145c4:	465d      	mov	r5, fp
 80145c6:	08cb      	lsrs	r3, r1, #3
 80145c8:	e681      	b.n	80142ce <__aeabi_dsub+0x2fa>
 80145ca:	464a      	mov	r2, r9
 80145cc:	1a84      	subs	r4, r0, r2
 80145ce:	42a0      	cmp	r0, r4
 80145d0:	4192      	sbcs	r2, r2
 80145d2:	1acb      	subs	r3, r1, r3
 80145d4:	4252      	negs	r2, r2
 80145d6:	1a9b      	subs	r3, r3, r2
 80145d8:	4698      	mov	r8, r3
 80145da:	465d      	mov	r5, fp
 80145dc:	2601      	movs	r6, #1
 80145de:	e54e      	b.n	801407e <__aeabi_dsub+0xaa>
 80145e0:	074b      	lsls	r3, r1, #29
 80145e2:	08c2      	lsrs	r2, r0, #3
 80145e4:	431a      	orrs	r2, r3
 80145e6:	08cb      	lsrs	r3, r1, #3
 80145e8:	e6b2      	b.n	8014350 <__aeabi_dsub+0x37c>
 80145ea:	464a      	mov	r2, r9
 80145ec:	1a14      	subs	r4, r2, r0
 80145ee:	45a1      	cmp	r9, r4
 80145f0:	4192      	sbcs	r2, r2
 80145f2:	1a5f      	subs	r7, r3, r1
 80145f4:	4252      	negs	r2, r2
 80145f6:	1aba      	subs	r2, r7, r2
 80145f8:	4690      	mov	r8, r2
 80145fa:	0212      	lsls	r2, r2, #8
 80145fc:	d56b      	bpl.n	80146d6 <__aeabi_dsub+0x702>
 80145fe:	464a      	mov	r2, r9
 8014600:	1a84      	subs	r4, r0, r2
 8014602:	42a0      	cmp	r0, r4
 8014604:	4192      	sbcs	r2, r2
 8014606:	1acb      	subs	r3, r1, r3
 8014608:	4252      	negs	r2, r2
 801460a:	1a9b      	subs	r3, r3, r2
 801460c:	4698      	mov	r8, r3
 801460e:	465d      	mov	r5, fp
 8014610:	e564      	b.n	80140dc <__aeabi_dsub+0x108>
 8014612:	074b      	lsls	r3, r1, #29
 8014614:	08c2      	lsrs	r2, r0, #3
 8014616:	431a      	orrs	r2, r3
 8014618:	465d      	mov	r5, fp
 801461a:	08cb      	lsrs	r3, r1, #3
 801461c:	e698      	b.n	8014350 <__aeabi_dsub+0x37c>
 801461e:	074b      	lsls	r3, r1, #29
 8014620:	08c2      	lsrs	r2, r0, #3
 8014622:	431a      	orrs	r2, r3
 8014624:	08cb      	lsrs	r3, r1, #3
 8014626:	e64f      	b.n	80142c8 <__aeabi_dsub+0x2f4>
 8014628:	000a      	movs	r2, r1
 801462a:	4302      	orrs	r2, r0
 801462c:	d090      	beq.n	8014550 <__aeabi_dsub+0x57c>
 801462e:	464a      	mov	r2, r9
 8014630:	075c      	lsls	r4, r3, #29
 8014632:	08d2      	lsrs	r2, r2, #3
 8014634:	4314      	orrs	r4, r2
 8014636:	2280      	movs	r2, #128	; 0x80
 8014638:	08db      	lsrs	r3, r3, #3
 801463a:	0312      	lsls	r2, r2, #12
 801463c:	4213      	tst	r3, r2
 801463e:	d008      	beq.n	8014652 <__aeabi_dsub+0x67e>
 8014640:	08ce      	lsrs	r6, r1, #3
 8014642:	4216      	tst	r6, r2
 8014644:	d105      	bne.n	8014652 <__aeabi_dsub+0x67e>
 8014646:	08c0      	lsrs	r0, r0, #3
 8014648:	0749      	lsls	r1, r1, #29
 801464a:	4308      	orrs	r0, r1
 801464c:	0004      	movs	r4, r0
 801464e:	465d      	mov	r5, fp
 8014650:	0033      	movs	r3, r6
 8014652:	0f61      	lsrs	r1, r4, #29
 8014654:	00e2      	lsls	r2, r4, #3
 8014656:	0749      	lsls	r1, r1, #29
 8014658:	08d2      	lsrs	r2, r2, #3
 801465a:	430a      	orrs	r2, r1
 801465c:	e678      	b.n	8014350 <__aeabi_dsub+0x37c>
 801465e:	074b      	lsls	r3, r1, #29
 8014660:	08c2      	lsrs	r2, r0, #3
 8014662:	431a      	orrs	r2, r3
 8014664:	08cb      	lsrs	r3, r1, #3
 8014666:	e632      	b.n	80142ce <__aeabi_dsub+0x2fa>
 8014668:	4448      	add	r0, r9
 801466a:	185b      	adds	r3, r3, r1
 801466c:	4548      	cmp	r0, r9
 801466e:	4192      	sbcs	r2, r2
 8014670:	4698      	mov	r8, r3
 8014672:	4252      	negs	r2, r2
 8014674:	4490      	add	r8, r2
 8014676:	4643      	mov	r3, r8
 8014678:	0004      	movs	r4, r0
 801467a:	021b      	lsls	r3, r3, #8
 801467c:	d400      	bmi.n	8014680 <__aeabi_dsub+0x6ac>
 801467e:	e61a      	b.n	80142b6 <__aeabi_dsub+0x2e2>
 8014680:	4642      	mov	r2, r8
 8014682:	4b0e      	ldr	r3, [pc, #56]	; (80146bc <__aeabi_dsub+0x6e8>)
 8014684:	2601      	movs	r6, #1
 8014686:	401a      	ands	r2, r3
 8014688:	4690      	mov	r8, r2
 801468a:	e614      	b.n	80142b6 <__aeabi_dsub+0x2e2>
 801468c:	4666      	mov	r6, ip
 801468e:	001f      	movs	r7, r3
 8014690:	3e20      	subs	r6, #32
 8014692:	40f7      	lsrs	r7, r6
 8014694:	2c20      	cmp	r4, #32
 8014696:	d005      	beq.n	80146a4 <__aeabi_dsub+0x6d0>
 8014698:	2640      	movs	r6, #64	; 0x40
 801469a:	1b36      	subs	r6, r6, r4
 801469c:	40b3      	lsls	r3, r6
 801469e:	464c      	mov	r4, r9
 80146a0:	431c      	orrs	r4, r3
 80146a2:	46a2      	mov	sl, r4
 80146a4:	4654      	mov	r4, sl
 80146a6:	1e63      	subs	r3, r4, #1
 80146a8:	419c      	sbcs	r4, r3
 80146aa:	433c      	orrs	r4, r7
 80146ac:	e5c8      	b.n	8014240 <__aeabi_dsub+0x26c>
 80146ae:	0011      	movs	r1, r2
 80146b0:	2300      	movs	r3, #0
 80146b2:	2200      	movs	r2, #0
 80146b4:	e532      	b.n	801411c <__aeabi_dsub+0x148>
 80146b6:	46c0      	nop			; (mov r8, r8)
 80146b8:	000007ff 	.word	0x000007ff
 80146bc:	ff7fffff 	.word	0xff7fffff
 80146c0:	000007fe 	.word	0x000007fe
 80146c4:	464a      	mov	r2, r9
 80146c6:	1814      	adds	r4, r2, r0
 80146c8:	4284      	cmp	r4, r0
 80146ca:	4192      	sbcs	r2, r2
 80146cc:	185b      	adds	r3, r3, r1
 80146ce:	4698      	mov	r8, r3
 80146d0:	4252      	negs	r2, r2
 80146d2:	4490      	add	r8, r2
 80146d4:	e5e9      	b.n	80142aa <__aeabi_dsub+0x2d6>
 80146d6:	4642      	mov	r2, r8
 80146d8:	4322      	orrs	r2, r4
 80146da:	d100      	bne.n	80146de <__aeabi_dsub+0x70a>
 80146dc:	e6a6      	b.n	801442c <__aeabi_dsub+0x458>
 80146de:	e5ea      	b.n	80142b6 <__aeabi_dsub+0x2e2>
 80146e0:	074b      	lsls	r3, r1, #29
 80146e2:	08c2      	lsrs	r2, r0, #3
 80146e4:	431a      	orrs	r2, r3
 80146e6:	08cb      	lsrs	r3, r1, #3
 80146e8:	e632      	b.n	8014350 <__aeabi_dsub+0x37c>
 80146ea:	2200      	movs	r2, #0
 80146ec:	4901      	ldr	r1, [pc, #4]	; (80146f4 <__aeabi_dsub+0x720>)
 80146ee:	0013      	movs	r3, r2
 80146f0:	e514      	b.n	801411c <__aeabi_dsub+0x148>
 80146f2:	46c0      	nop			; (mov r8, r8)
 80146f4:	000007ff 	.word	0x000007ff

080146f8 <__aeabi_dcmpun>:
 80146f8:	b570      	push	{r4, r5, r6, lr}
 80146fa:	0005      	movs	r5, r0
 80146fc:	480c      	ldr	r0, [pc, #48]	; (8014730 <__aeabi_dcmpun+0x38>)
 80146fe:	030c      	lsls	r4, r1, #12
 8014700:	0016      	movs	r6, r2
 8014702:	0049      	lsls	r1, r1, #1
 8014704:	031a      	lsls	r2, r3, #12
 8014706:	005b      	lsls	r3, r3, #1
 8014708:	0b24      	lsrs	r4, r4, #12
 801470a:	0d49      	lsrs	r1, r1, #21
 801470c:	0b12      	lsrs	r2, r2, #12
 801470e:	0d5b      	lsrs	r3, r3, #21
 8014710:	4281      	cmp	r1, r0
 8014712:	d008      	beq.n	8014726 <__aeabi_dcmpun+0x2e>
 8014714:	4906      	ldr	r1, [pc, #24]	; (8014730 <__aeabi_dcmpun+0x38>)
 8014716:	2000      	movs	r0, #0
 8014718:	428b      	cmp	r3, r1
 801471a:	d103      	bne.n	8014724 <__aeabi_dcmpun+0x2c>
 801471c:	4332      	orrs	r2, r6
 801471e:	0010      	movs	r0, r2
 8014720:	1e42      	subs	r2, r0, #1
 8014722:	4190      	sbcs	r0, r2
 8014724:	bd70      	pop	{r4, r5, r6, pc}
 8014726:	2001      	movs	r0, #1
 8014728:	432c      	orrs	r4, r5
 801472a:	d1fb      	bne.n	8014724 <__aeabi_dcmpun+0x2c>
 801472c:	e7f2      	b.n	8014714 <__aeabi_dcmpun+0x1c>
 801472e:	46c0      	nop			; (mov r8, r8)
 8014730:	000007ff 	.word	0x000007ff

08014734 <__aeabi_d2iz>:
 8014734:	000a      	movs	r2, r1
 8014736:	b530      	push	{r4, r5, lr}
 8014738:	4c13      	ldr	r4, [pc, #76]	; (8014788 <__aeabi_d2iz+0x54>)
 801473a:	0053      	lsls	r3, r2, #1
 801473c:	0309      	lsls	r1, r1, #12
 801473e:	0005      	movs	r5, r0
 8014740:	0b09      	lsrs	r1, r1, #12
 8014742:	2000      	movs	r0, #0
 8014744:	0d5b      	lsrs	r3, r3, #21
 8014746:	0fd2      	lsrs	r2, r2, #31
 8014748:	42a3      	cmp	r3, r4
 801474a:	dd04      	ble.n	8014756 <__aeabi_d2iz+0x22>
 801474c:	480f      	ldr	r0, [pc, #60]	; (801478c <__aeabi_d2iz+0x58>)
 801474e:	4283      	cmp	r3, r0
 8014750:	dd02      	ble.n	8014758 <__aeabi_d2iz+0x24>
 8014752:	4b0f      	ldr	r3, [pc, #60]	; (8014790 <__aeabi_d2iz+0x5c>)
 8014754:	18d0      	adds	r0, r2, r3
 8014756:	bd30      	pop	{r4, r5, pc}
 8014758:	2080      	movs	r0, #128	; 0x80
 801475a:	0340      	lsls	r0, r0, #13
 801475c:	4301      	orrs	r1, r0
 801475e:	480d      	ldr	r0, [pc, #52]	; (8014794 <__aeabi_d2iz+0x60>)
 8014760:	1ac0      	subs	r0, r0, r3
 8014762:	281f      	cmp	r0, #31
 8014764:	dd08      	ble.n	8014778 <__aeabi_d2iz+0x44>
 8014766:	480c      	ldr	r0, [pc, #48]	; (8014798 <__aeabi_d2iz+0x64>)
 8014768:	1ac3      	subs	r3, r0, r3
 801476a:	40d9      	lsrs	r1, r3
 801476c:	000b      	movs	r3, r1
 801476e:	4258      	negs	r0, r3
 8014770:	2a00      	cmp	r2, #0
 8014772:	d1f0      	bne.n	8014756 <__aeabi_d2iz+0x22>
 8014774:	0018      	movs	r0, r3
 8014776:	e7ee      	b.n	8014756 <__aeabi_d2iz+0x22>
 8014778:	4c08      	ldr	r4, [pc, #32]	; (801479c <__aeabi_d2iz+0x68>)
 801477a:	40c5      	lsrs	r5, r0
 801477c:	46a4      	mov	ip, r4
 801477e:	4463      	add	r3, ip
 8014780:	4099      	lsls	r1, r3
 8014782:	000b      	movs	r3, r1
 8014784:	432b      	orrs	r3, r5
 8014786:	e7f2      	b.n	801476e <__aeabi_d2iz+0x3a>
 8014788:	000003fe 	.word	0x000003fe
 801478c:	0000041d 	.word	0x0000041d
 8014790:	7fffffff 	.word	0x7fffffff
 8014794:	00000433 	.word	0x00000433
 8014798:	00000413 	.word	0x00000413
 801479c:	fffffbed 	.word	0xfffffbed

080147a0 <__aeabi_i2d>:
 80147a0:	b570      	push	{r4, r5, r6, lr}
 80147a2:	2800      	cmp	r0, #0
 80147a4:	d016      	beq.n	80147d4 <__aeabi_i2d+0x34>
 80147a6:	17c3      	asrs	r3, r0, #31
 80147a8:	18c5      	adds	r5, r0, r3
 80147aa:	405d      	eors	r5, r3
 80147ac:	0fc4      	lsrs	r4, r0, #31
 80147ae:	0028      	movs	r0, r5
 80147b0:	f000 f84c 	bl	801484c <__clzsi2>
 80147b4:	4a11      	ldr	r2, [pc, #68]	; (80147fc <__aeabi_i2d+0x5c>)
 80147b6:	1a12      	subs	r2, r2, r0
 80147b8:	280a      	cmp	r0, #10
 80147ba:	dc16      	bgt.n	80147ea <__aeabi_i2d+0x4a>
 80147bc:	0003      	movs	r3, r0
 80147be:	002e      	movs	r6, r5
 80147c0:	3315      	adds	r3, #21
 80147c2:	409e      	lsls	r6, r3
 80147c4:	230b      	movs	r3, #11
 80147c6:	1a18      	subs	r0, r3, r0
 80147c8:	40c5      	lsrs	r5, r0
 80147ca:	0553      	lsls	r3, r2, #21
 80147cc:	032d      	lsls	r5, r5, #12
 80147ce:	0b2d      	lsrs	r5, r5, #12
 80147d0:	0d5b      	lsrs	r3, r3, #21
 80147d2:	e003      	b.n	80147dc <__aeabi_i2d+0x3c>
 80147d4:	2400      	movs	r4, #0
 80147d6:	2300      	movs	r3, #0
 80147d8:	2500      	movs	r5, #0
 80147da:	2600      	movs	r6, #0
 80147dc:	051b      	lsls	r3, r3, #20
 80147de:	432b      	orrs	r3, r5
 80147e0:	07e4      	lsls	r4, r4, #31
 80147e2:	4323      	orrs	r3, r4
 80147e4:	0030      	movs	r0, r6
 80147e6:	0019      	movs	r1, r3
 80147e8:	bd70      	pop	{r4, r5, r6, pc}
 80147ea:	380b      	subs	r0, #11
 80147ec:	4085      	lsls	r5, r0
 80147ee:	0553      	lsls	r3, r2, #21
 80147f0:	032d      	lsls	r5, r5, #12
 80147f2:	2600      	movs	r6, #0
 80147f4:	0b2d      	lsrs	r5, r5, #12
 80147f6:	0d5b      	lsrs	r3, r3, #21
 80147f8:	e7f0      	b.n	80147dc <__aeabi_i2d+0x3c>
 80147fa:	46c0      	nop			; (mov r8, r8)
 80147fc:	0000041e 	.word	0x0000041e

08014800 <__aeabi_ui2d>:
 8014800:	b510      	push	{r4, lr}
 8014802:	1e04      	subs	r4, r0, #0
 8014804:	d010      	beq.n	8014828 <__aeabi_ui2d+0x28>
 8014806:	f000 f821 	bl	801484c <__clzsi2>
 801480a:	4b0f      	ldr	r3, [pc, #60]	; (8014848 <__aeabi_ui2d+0x48>)
 801480c:	1a1b      	subs	r3, r3, r0
 801480e:	280a      	cmp	r0, #10
 8014810:	dc11      	bgt.n	8014836 <__aeabi_ui2d+0x36>
 8014812:	220b      	movs	r2, #11
 8014814:	0021      	movs	r1, r4
 8014816:	1a12      	subs	r2, r2, r0
 8014818:	40d1      	lsrs	r1, r2
 801481a:	3015      	adds	r0, #21
 801481c:	030a      	lsls	r2, r1, #12
 801481e:	055b      	lsls	r3, r3, #21
 8014820:	4084      	lsls	r4, r0
 8014822:	0b12      	lsrs	r2, r2, #12
 8014824:	0d5b      	lsrs	r3, r3, #21
 8014826:	e001      	b.n	801482c <__aeabi_ui2d+0x2c>
 8014828:	2300      	movs	r3, #0
 801482a:	2200      	movs	r2, #0
 801482c:	051b      	lsls	r3, r3, #20
 801482e:	4313      	orrs	r3, r2
 8014830:	0020      	movs	r0, r4
 8014832:	0019      	movs	r1, r3
 8014834:	bd10      	pop	{r4, pc}
 8014836:	0022      	movs	r2, r4
 8014838:	380b      	subs	r0, #11
 801483a:	4082      	lsls	r2, r0
 801483c:	055b      	lsls	r3, r3, #21
 801483e:	0312      	lsls	r2, r2, #12
 8014840:	2400      	movs	r4, #0
 8014842:	0b12      	lsrs	r2, r2, #12
 8014844:	0d5b      	lsrs	r3, r3, #21
 8014846:	e7f1      	b.n	801482c <__aeabi_ui2d+0x2c>
 8014848:	0000041e 	.word	0x0000041e

0801484c <__clzsi2>:
 801484c:	211c      	movs	r1, #28
 801484e:	2301      	movs	r3, #1
 8014850:	041b      	lsls	r3, r3, #16
 8014852:	4298      	cmp	r0, r3
 8014854:	d301      	bcc.n	801485a <__clzsi2+0xe>
 8014856:	0c00      	lsrs	r0, r0, #16
 8014858:	3910      	subs	r1, #16
 801485a:	0a1b      	lsrs	r3, r3, #8
 801485c:	4298      	cmp	r0, r3
 801485e:	d301      	bcc.n	8014864 <__clzsi2+0x18>
 8014860:	0a00      	lsrs	r0, r0, #8
 8014862:	3908      	subs	r1, #8
 8014864:	091b      	lsrs	r3, r3, #4
 8014866:	4298      	cmp	r0, r3
 8014868:	d301      	bcc.n	801486e <__clzsi2+0x22>
 801486a:	0900      	lsrs	r0, r0, #4
 801486c:	3904      	subs	r1, #4
 801486e:	a202      	add	r2, pc, #8	; (adr r2, 8014878 <__clzsi2+0x2c>)
 8014870:	5c10      	ldrb	r0, [r2, r0]
 8014872:	1840      	adds	r0, r0, r1
 8014874:	4770      	bx	lr
 8014876:	46c0      	nop			; (mov r8, r8)
 8014878:	02020304 	.word	0x02020304
 801487c:	01010101 	.word	0x01010101
	...

08014888 <__clzdi2>:
 8014888:	b510      	push	{r4, lr}
 801488a:	2900      	cmp	r1, #0
 801488c:	d103      	bne.n	8014896 <__clzdi2+0xe>
 801488e:	f7ff ffdd 	bl	801484c <__clzsi2>
 8014892:	3020      	adds	r0, #32
 8014894:	e002      	b.n	801489c <__clzdi2+0x14>
 8014896:	1c08      	adds	r0, r1, #0
 8014898:	f7ff ffd8 	bl	801484c <__clzsi2>
 801489c:	bd10      	pop	{r4, pc}
 801489e:	46c0      	nop			; (mov r8, r8)

080148a0 <abs>:
 80148a0:	17c3      	asrs	r3, r0, #31
 80148a2:	18c0      	adds	r0, r0, r3
 80148a4:	4058      	eors	r0, r3
 80148a6:	4770      	bx	lr

080148a8 <__errno>:
 80148a8:	4b01      	ldr	r3, [pc, #4]	; (80148b0 <__errno+0x8>)
 80148aa:	6818      	ldr	r0, [r3, #0]
 80148ac:	4770      	bx	lr
 80148ae:	46c0      	nop			; (mov r8, r8)
 80148b0:	200005dc 	.word	0x200005dc

080148b4 <__sflush_r>:
 80148b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148b6:	46c6      	mov	lr, r8
 80148b8:	b500      	push	{lr}
 80148ba:	898b      	ldrh	r3, [r1, #12]
 80148bc:	4680      	mov	r8, r0
 80148be:	000c      	movs	r4, r1
 80148c0:	071a      	lsls	r2, r3, #28
 80148c2:	d445      	bmi.n	8014950 <__sflush_r+0x9c>
 80148c4:	684a      	ldr	r2, [r1, #4]
 80148c6:	2a00      	cmp	r2, #0
 80148c8:	dd63      	ble.n	8014992 <__sflush_r+0xde>
 80148ca:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80148cc:	2d00      	cmp	r5, #0
 80148ce:	d03b      	beq.n	8014948 <__sflush_r+0x94>
 80148d0:	4642      	mov	r2, r8
 80148d2:	4641      	mov	r1, r8
 80148d4:	6816      	ldr	r6, [r2, #0]
 80148d6:	2200      	movs	r2, #0
 80148d8:	600a      	str	r2, [r1, #0]
 80148da:	6a21      	ldr	r1, [r4, #32]
 80148dc:	04da      	lsls	r2, r3, #19
 80148de:	d45c      	bmi.n	801499a <__sflush_r+0xe6>
 80148e0:	2301      	movs	r3, #1
 80148e2:	2200      	movs	r2, #0
 80148e4:	4640      	mov	r0, r8
 80148e6:	47a8      	blx	r5
 80148e8:	1c43      	adds	r3, r0, #1
 80148ea:	d061      	beq.n	80149b0 <__sflush_r+0xfc>
 80148ec:	89a3      	ldrh	r3, [r4, #12]
 80148ee:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80148f0:	6a21      	ldr	r1, [r4, #32]
 80148f2:	075b      	lsls	r3, r3, #29
 80148f4:	d506      	bpl.n	8014904 <__sflush_r+0x50>
 80148f6:	6863      	ldr	r3, [r4, #4]
 80148f8:	1ac0      	subs	r0, r0, r3
 80148fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d001      	beq.n	8014904 <__sflush_r+0x50>
 8014900:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014902:	1ac0      	subs	r0, r0, r3
 8014904:	2300      	movs	r3, #0
 8014906:	0002      	movs	r2, r0
 8014908:	4640      	mov	r0, r8
 801490a:	47a8      	blx	r5
 801490c:	1c43      	adds	r3, r0, #1
 801490e:	d146      	bne.n	801499e <__sflush_r+0xea>
 8014910:	4643      	mov	r3, r8
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	210c      	movs	r1, #12
 8014916:	5e62      	ldrsh	r2, [r4, r1]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d056      	beq.n	80149ca <__sflush_r+0x116>
 801491c:	2b1d      	cmp	r3, #29
 801491e:	d001      	beq.n	8014924 <__sflush_r+0x70>
 8014920:	2b16      	cmp	r3, #22
 8014922:	d15d      	bne.n	80149e0 <__sflush_r+0x12c>
 8014924:	2300      	movs	r3, #0
 8014926:	6063      	str	r3, [r4, #4]
 8014928:	6923      	ldr	r3, [r4, #16]
 801492a:	6023      	str	r3, [r4, #0]
 801492c:	4643      	mov	r3, r8
 801492e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014930:	601e      	str	r6, [r3, #0]
 8014932:	2900      	cmp	r1, #0
 8014934:	d008      	beq.n	8014948 <__sflush_r+0x94>
 8014936:	0023      	movs	r3, r4
 8014938:	3344      	adds	r3, #68	; 0x44
 801493a:	4299      	cmp	r1, r3
 801493c:	d002      	beq.n	8014944 <__sflush_r+0x90>
 801493e:	4640      	mov	r0, r8
 8014940:	f000 faee 	bl	8014f20 <_free_r>
 8014944:	2300      	movs	r3, #0
 8014946:	6363      	str	r3, [r4, #52]	; 0x34
 8014948:	2000      	movs	r0, #0
 801494a:	bc04      	pop	{r2}
 801494c:	4690      	mov	r8, r2
 801494e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014950:	690e      	ldr	r6, [r1, #16]
 8014952:	2e00      	cmp	r6, #0
 8014954:	d0f8      	beq.n	8014948 <__sflush_r+0x94>
 8014956:	680a      	ldr	r2, [r1, #0]
 8014958:	600e      	str	r6, [r1, #0]
 801495a:	1b95      	subs	r5, r2, r6
 801495c:	2200      	movs	r2, #0
 801495e:	079b      	lsls	r3, r3, #30
 8014960:	d100      	bne.n	8014964 <__sflush_r+0xb0>
 8014962:	694a      	ldr	r2, [r1, #20]
 8014964:	60a2      	str	r2, [r4, #8]
 8014966:	2d00      	cmp	r5, #0
 8014968:	dc04      	bgt.n	8014974 <__sflush_r+0xc0>
 801496a:	e7ed      	b.n	8014948 <__sflush_r+0x94>
 801496c:	1836      	adds	r6, r6, r0
 801496e:	1a2d      	subs	r5, r5, r0
 8014970:	2d00      	cmp	r5, #0
 8014972:	dde9      	ble.n	8014948 <__sflush_r+0x94>
 8014974:	002b      	movs	r3, r5
 8014976:	0032      	movs	r2, r6
 8014978:	6a21      	ldr	r1, [r4, #32]
 801497a:	4640      	mov	r0, r8
 801497c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801497e:	47b8      	blx	r7
 8014980:	2800      	cmp	r0, #0
 8014982:	dcf3      	bgt.n	801496c <__sflush_r+0xb8>
 8014984:	2240      	movs	r2, #64	; 0x40
 8014986:	2001      	movs	r0, #1
 8014988:	89a3      	ldrh	r3, [r4, #12]
 801498a:	4240      	negs	r0, r0
 801498c:	4313      	orrs	r3, r2
 801498e:	81a3      	strh	r3, [r4, #12]
 8014990:	e7db      	b.n	801494a <__sflush_r+0x96>
 8014992:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8014994:	2a00      	cmp	r2, #0
 8014996:	dc98      	bgt.n	80148ca <__sflush_r+0x16>
 8014998:	e7d6      	b.n	8014948 <__sflush_r+0x94>
 801499a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801499c:	e7a9      	b.n	80148f2 <__sflush_r+0x3e>
 801499e:	2300      	movs	r3, #0
 80149a0:	6063      	str	r3, [r4, #4]
 80149a2:	6923      	ldr	r3, [r4, #16]
 80149a4:	6023      	str	r3, [r4, #0]
 80149a6:	89a3      	ldrh	r3, [r4, #12]
 80149a8:	04db      	lsls	r3, r3, #19
 80149aa:	d5bf      	bpl.n	801492c <__sflush_r+0x78>
 80149ac:	6560      	str	r0, [r4, #84]	; 0x54
 80149ae:	e7bd      	b.n	801492c <__sflush_r+0x78>
 80149b0:	4643      	mov	r3, r8
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d099      	beq.n	80148ec <__sflush_r+0x38>
 80149b8:	2b1d      	cmp	r3, #29
 80149ba:	d00d      	beq.n	80149d8 <__sflush_r+0x124>
 80149bc:	2b16      	cmp	r3, #22
 80149be:	d00b      	beq.n	80149d8 <__sflush_r+0x124>
 80149c0:	2240      	movs	r2, #64	; 0x40
 80149c2:	89a3      	ldrh	r3, [r4, #12]
 80149c4:	4313      	orrs	r3, r2
 80149c6:	81a3      	strh	r3, [r4, #12]
 80149c8:	e7bf      	b.n	801494a <__sflush_r+0x96>
 80149ca:	6063      	str	r3, [r4, #4]
 80149cc:	6923      	ldr	r3, [r4, #16]
 80149ce:	6023      	str	r3, [r4, #0]
 80149d0:	04d3      	lsls	r3, r2, #19
 80149d2:	d5ab      	bpl.n	801492c <__sflush_r+0x78>
 80149d4:	6560      	str	r0, [r4, #84]	; 0x54
 80149d6:	e7a9      	b.n	801492c <__sflush_r+0x78>
 80149d8:	4643      	mov	r3, r8
 80149da:	2000      	movs	r0, #0
 80149dc:	601e      	str	r6, [r3, #0]
 80149de:	e7b4      	b.n	801494a <__sflush_r+0x96>
 80149e0:	2340      	movs	r3, #64	; 0x40
 80149e2:	431a      	orrs	r2, r3
 80149e4:	81a2      	strh	r2, [r4, #12]
 80149e6:	e7b0      	b.n	801494a <__sflush_r+0x96>

080149e8 <_fflush_r>:
 80149e8:	690b      	ldr	r3, [r1, #16]
 80149ea:	b570      	push	{r4, r5, r6, lr}
 80149ec:	0005      	movs	r5, r0
 80149ee:	000c      	movs	r4, r1
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d016      	beq.n	8014a22 <_fflush_r+0x3a>
 80149f4:	2800      	cmp	r0, #0
 80149f6:	d002      	beq.n	80149fe <_fflush_r+0x16>
 80149f8:	6983      	ldr	r3, [r0, #24]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d015      	beq.n	8014a2a <_fflush_r+0x42>
 80149fe:	4b0e      	ldr	r3, [pc, #56]	; (8014a38 <_fflush_r+0x50>)
 8014a00:	429c      	cmp	r4, r3
 8014a02:	d010      	beq.n	8014a26 <_fflush_r+0x3e>
 8014a04:	4b0d      	ldr	r3, [pc, #52]	; (8014a3c <_fflush_r+0x54>)
 8014a06:	429c      	cmp	r4, r3
 8014a08:	d012      	beq.n	8014a30 <_fflush_r+0x48>
 8014a0a:	4b0d      	ldr	r3, [pc, #52]	; (8014a40 <_fflush_r+0x58>)
 8014a0c:	429c      	cmp	r4, r3
 8014a0e:	d011      	beq.n	8014a34 <_fflush_r+0x4c>
 8014a10:	220c      	movs	r2, #12
 8014a12:	5ea3      	ldrsh	r3, [r4, r2]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d004      	beq.n	8014a22 <_fflush_r+0x3a>
 8014a18:	0021      	movs	r1, r4
 8014a1a:	0028      	movs	r0, r5
 8014a1c:	f7ff ff4a 	bl	80148b4 <__sflush_r>
 8014a20:	e000      	b.n	8014a24 <_fflush_r+0x3c>
 8014a22:	2000      	movs	r0, #0
 8014a24:	bd70      	pop	{r4, r5, r6, pc}
 8014a26:	686c      	ldr	r4, [r5, #4]
 8014a28:	e7f2      	b.n	8014a10 <_fflush_r+0x28>
 8014a2a:	f000 f917 	bl	8014c5c <__sinit>
 8014a2e:	e7e6      	b.n	80149fe <_fflush_r+0x16>
 8014a30:	68ac      	ldr	r4, [r5, #8]
 8014a32:	e7ed      	b.n	8014a10 <_fflush_r+0x28>
 8014a34:	68ec      	ldr	r4, [r5, #12]
 8014a36:	e7eb      	b.n	8014a10 <_fflush_r+0x28>
 8014a38:	0801ad80 	.word	0x0801ad80
 8014a3c:	0801ad60 	.word	0x0801ad60
 8014a40:	0801ad40 	.word	0x0801ad40

08014a44 <fflush>:
 8014a44:	b510      	push	{r4, lr}
 8014a46:	1e01      	subs	r1, r0, #0
 8014a48:	d004      	beq.n	8014a54 <fflush+0x10>
 8014a4a:	4b05      	ldr	r3, [pc, #20]	; (8014a60 <fflush+0x1c>)
 8014a4c:	6818      	ldr	r0, [r3, #0]
 8014a4e:	f7ff ffcb 	bl	80149e8 <_fflush_r>
 8014a52:	bd10      	pop	{r4, pc}
 8014a54:	4b03      	ldr	r3, [pc, #12]	; (8014a64 <fflush+0x20>)
 8014a56:	4904      	ldr	r1, [pc, #16]	; (8014a68 <fflush+0x24>)
 8014a58:	6818      	ldr	r0, [r3, #0]
 8014a5a:	f000 f949 	bl	8014cf0 <_fwalk_reent>
 8014a5e:	e7f8      	b.n	8014a52 <fflush+0xe>
 8014a60:	200005dc 	.word	0x200005dc
 8014a64:	0801ada0 	.word	0x0801ada0
 8014a68:	080149e9 	.word	0x080149e9

08014a6c <__fp_lock>:
 8014a6c:	2000      	movs	r0, #0
 8014a6e:	4770      	bx	lr

08014a70 <_cleanup_r>:
 8014a70:	b510      	push	{r4, lr}
 8014a72:	4902      	ldr	r1, [pc, #8]	; (8014a7c <_cleanup_r+0xc>)
 8014a74:	f000 f93c 	bl	8014cf0 <_fwalk_reent>
 8014a78:	bd10      	pop	{r4, pc}
 8014a7a:	46c0      	nop			; (mov r8, r8)
 8014a7c:	080149e9 	.word	0x080149e9

08014a80 <__fp_unlock>:
 8014a80:	2000      	movs	r0, #0
 8014a82:	4770      	bx	lr

08014a84 <__sfmoreglue>:
 8014a84:	b570      	push	{r4, r5, r6, lr}
 8014a86:	2468      	movs	r4, #104	; 0x68
 8014a88:	1e4a      	subs	r2, r1, #1
 8014a8a:	4354      	muls	r4, r2
 8014a8c:	000e      	movs	r6, r1
 8014a8e:	0021      	movs	r1, r4
 8014a90:	3174      	adds	r1, #116	; 0x74
 8014a92:	f000 fa9b 	bl	8014fcc <_malloc_r>
 8014a96:	1e05      	subs	r5, r0, #0
 8014a98:	d009      	beq.n	8014aae <__sfmoreglue+0x2a>
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	0022      	movs	r2, r4
 8014a9e:	6003      	str	r3, [r0, #0]
 8014aa0:	6046      	str	r6, [r0, #4]
 8014aa2:	300c      	adds	r0, #12
 8014aa4:	60a8      	str	r0, [r5, #8]
 8014aa6:	3268      	adds	r2, #104	; 0x68
 8014aa8:	2100      	movs	r1, #0
 8014aaa:	f000 f9e5 	bl	8014e78 <memset>
 8014aae:	0028      	movs	r0, r5
 8014ab0:	bd70      	pop	{r4, r5, r6, pc}
 8014ab2:	46c0      	nop			; (mov r8, r8)

08014ab4 <__sfp>:
 8014ab4:	4b1e      	ldr	r3, [pc, #120]	; (8014b30 <__sfp+0x7c>)
 8014ab6:	b570      	push	{r4, r5, r6, lr}
 8014ab8:	681d      	ldr	r5, [r3, #0]
 8014aba:	0006      	movs	r6, r0
 8014abc:	69ab      	ldr	r3, [r5, #24]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d027      	beq.n	8014b12 <__sfp+0x5e>
 8014ac2:	3548      	adds	r5, #72	; 0x48
 8014ac4:	686b      	ldr	r3, [r5, #4]
 8014ac6:	68ac      	ldr	r4, [r5, #8]
 8014ac8:	3b01      	subs	r3, #1
 8014aca:	d503      	bpl.n	8014ad4 <__sfp+0x20>
 8014acc:	e01c      	b.n	8014b08 <__sfp+0x54>
 8014ace:	3468      	adds	r4, #104	; 0x68
 8014ad0:	3b01      	subs	r3, #1
 8014ad2:	d319      	bcc.n	8014b08 <__sfp+0x54>
 8014ad4:	210c      	movs	r1, #12
 8014ad6:	5e62      	ldrsh	r2, [r4, r1]
 8014ad8:	2a00      	cmp	r2, #0
 8014ada:	d1f8      	bne.n	8014ace <__sfp+0x1a>
 8014adc:	2500      	movs	r5, #0
 8014ade:	0020      	movs	r0, r4
 8014ae0:	4b14      	ldr	r3, [pc, #80]	; (8014b34 <__sfp+0x80>)
 8014ae2:	6665      	str	r5, [r4, #100]	; 0x64
 8014ae4:	6025      	str	r5, [r4, #0]
 8014ae6:	6065      	str	r5, [r4, #4]
 8014ae8:	60a5      	str	r5, [r4, #8]
 8014aea:	60e3      	str	r3, [r4, #12]
 8014aec:	6125      	str	r5, [r4, #16]
 8014aee:	6165      	str	r5, [r4, #20]
 8014af0:	61a5      	str	r5, [r4, #24]
 8014af2:	2208      	movs	r2, #8
 8014af4:	2100      	movs	r1, #0
 8014af6:	305c      	adds	r0, #92	; 0x5c
 8014af8:	f000 f9be 	bl	8014e78 <memset>
 8014afc:	6365      	str	r5, [r4, #52]	; 0x34
 8014afe:	63a5      	str	r5, [r4, #56]	; 0x38
 8014b00:	64a5      	str	r5, [r4, #72]	; 0x48
 8014b02:	64e5      	str	r5, [r4, #76]	; 0x4c
 8014b04:	0020      	movs	r0, r4
 8014b06:	bd70      	pop	{r4, r5, r6, pc}
 8014b08:	682c      	ldr	r4, [r5, #0]
 8014b0a:	2c00      	cmp	r4, #0
 8014b0c:	d005      	beq.n	8014b1a <__sfp+0x66>
 8014b0e:	0025      	movs	r5, r4
 8014b10:	e7d8      	b.n	8014ac4 <__sfp+0x10>
 8014b12:	0028      	movs	r0, r5
 8014b14:	f000 f810 	bl	8014b38 <__sinit.part.0>
 8014b18:	e7d3      	b.n	8014ac2 <__sfp+0xe>
 8014b1a:	2104      	movs	r1, #4
 8014b1c:	0030      	movs	r0, r6
 8014b1e:	f7ff ffb1 	bl	8014a84 <__sfmoreglue>
 8014b22:	1e04      	subs	r4, r0, #0
 8014b24:	6028      	str	r0, [r5, #0]
 8014b26:	d1f2      	bne.n	8014b0e <__sfp+0x5a>
 8014b28:	230c      	movs	r3, #12
 8014b2a:	6033      	str	r3, [r6, #0]
 8014b2c:	e7ea      	b.n	8014b04 <__sfp+0x50>
 8014b2e:	46c0      	nop			; (mov r8, r8)
 8014b30:	0801ada0 	.word	0x0801ada0
 8014b34:	ffff0001 	.word	0xffff0001

08014b38 <__sinit.part.0>:
 8014b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b3a:	46d6      	mov	lr, sl
 8014b3c:	464f      	mov	r7, r9
 8014b3e:	4646      	mov	r6, r8
 8014b40:	4b38      	ldr	r3, [pc, #224]	; (8014c24 <__sinit.part.0+0xec>)
 8014b42:	b5c0      	push	{r6, r7, lr}
 8014b44:	6283      	str	r3, [r0, #40]	; 0x28
 8014b46:	2300      	movs	r3, #0
 8014b48:	6483      	str	r3, [r0, #72]	; 0x48
 8014b4a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8014b4c:	6503      	str	r3, [r0, #80]	; 0x50
 8014b4e:	4b36      	ldr	r3, [pc, #216]	; (8014c28 <__sinit.part.0+0xf0>)
 8014b50:	b082      	sub	sp, #8
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	0005      	movs	r5, r0
 8014b56:	9301      	str	r3, [sp, #4]
 8014b58:	4298      	cmp	r0, r3
 8014b5a:	d060      	beq.n	8014c1e <__sinit.part.0+0xe6>
 8014b5c:	0028      	movs	r0, r5
 8014b5e:	f7ff ffa9 	bl	8014ab4 <__sfp>
 8014b62:	6068      	str	r0, [r5, #4]
 8014b64:	0028      	movs	r0, r5
 8014b66:	f7ff ffa5 	bl	8014ab4 <__sfp>
 8014b6a:	60a8      	str	r0, [r5, #8]
 8014b6c:	0028      	movs	r0, r5
 8014b6e:	f7ff ffa1 	bl	8014ab4 <__sfp>
 8014b72:	686e      	ldr	r6, [r5, #4]
 8014b74:	2400      	movs	r4, #0
 8014b76:	60e8      	str	r0, [r5, #12]
 8014b78:	2304      	movs	r3, #4
 8014b7a:	0030      	movs	r0, r6
 8014b7c:	6674      	str	r4, [r6, #100]	; 0x64
 8014b7e:	6034      	str	r4, [r6, #0]
 8014b80:	6074      	str	r4, [r6, #4]
 8014b82:	60b4      	str	r4, [r6, #8]
 8014b84:	60f3      	str	r3, [r6, #12]
 8014b86:	6134      	str	r4, [r6, #16]
 8014b88:	6174      	str	r4, [r6, #20]
 8014b8a:	61b4      	str	r4, [r6, #24]
 8014b8c:	2208      	movs	r2, #8
 8014b8e:	2100      	movs	r1, #0
 8014b90:	305c      	adds	r0, #92	; 0x5c
 8014b92:	f000 f971 	bl	8014e78 <memset>
 8014b96:	4b25      	ldr	r3, [pc, #148]	; (8014c2c <__sinit.part.0+0xf4>)
 8014b98:	4f25      	ldr	r7, [pc, #148]	; (8014c30 <__sinit.part.0+0xf8>)
 8014b9a:	469a      	mov	sl, r3
 8014b9c:	6273      	str	r3, [r6, #36]	; 0x24
 8014b9e:	4b25      	ldr	r3, [pc, #148]	; (8014c34 <__sinit.part.0+0xfc>)
 8014ba0:	6337      	str	r7, [r6, #48]	; 0x30
 8014ba2:	4699      	mov	r9, r3
 8014ba4:	62b3      	str	r3, [r6, #40]	; 0x28
 8014ba6:	4b24      	ldr	r3, [pc, #144]	; (8014c38 <__sinit.part.0+0x100>)
 8014ba8:	6236      	str	r6, [r6, #32]
 8014baa:	62f3      	str	r3, [r6, #44]	; 0x2c
 8014bac:	68ae      	ldr	r6, [r5, #8]
 8014bae:	4698      	mov	r8, r3
 8014bb0:	0030      	movs	r0, r6
 8014bb2:	4b22      	ldr	r3, [pc, #136]	; (8014c3c <__sinit.part.0+0x104>)
 8014bb4:	6674      	str	r4, [r6, #100]	; 0x64
 8014bb6:	6034      	str	r4, [r6, #0]
 8014bb8:	6074      	str	r4, [r6, #4]
 8014bba:	60b4      	str	r4, [r6, #8]
 8014bbc:	60f3      	str	r3, [r6, #12]
 8014bbe:	6134      	str	r4, [r6, #16]
 8014bc0:	6174      	str	r4, [r6, #20]
 8014bc2:	61b4      	str	r4, [r6, #24]
 8014bc4:	2208      	movs	r2, #8
 8014bc6:	2100      	movs	r1, #0
 8014bc8:	305c      	adds	r0, #92	; 0x5c
 8014bca:	f000 f955 	bl	8014e78 <memset>
 8014bce:	4653      	mov	r3, sl
 8014bd0:	6273      	str	r3, [r6, #36]	; 0x24
 8014bd2:	464b      	mov	r3, r9
 8014bd4:	62b3      	str	r3, [r6, #40]	; 0x28
 8014bd6:	4643      	mov	r3, r8
 8014bd8:	6337      	str	r7, [r6, #48]	; 0x30
 8014bda:	62f3      	str	r3, [r6, #44]	; 0x2c
 8014bdc:	6236      	str	r6, [r6, #32]
 8014bde:	68ee      	ldr	r6, [r5, #12]
 8014be0:	4b17      	ldr	r3, [pc, #92]	; (8014c40 <__sinit.part.0+0x108>)
 8014be2:	0030      	movs	r0, r6
 8014be4:	60f3      	str	r3, [r6, #12]
 8014be6:	6674      	str	r4, [r6, #100]	; 0x64
 8014be8:	6034      	str	r4, [r6, #0]
 8014bea:	6074      	str	r4, [r6, #4]
 8014bec:	60b4      	str	r4, [r6, #8]
 8014bee:	6134      	str	r4, [r6, #16]
 8014bf0:	6174      	str	r4, [r6, #20]
 8014bf2:	61b4      	str	r4, [r6, #24]
 8014bf4:	2208      	movs	r2, #8
 8014bf6:	2100      	movs	r1, #0
 8014bf8:	305c      	adds	r0, #92	; 0x5c
 8014bfa:	f000 f93d 	bl	8014e78 <memset>
 8014bfe:	4653      	mov	r3, sl
 8014c00:	6273      	str	r3, [r6, #36]	; 0x24
 8014c02:	464b      	mov	r3, r9
 8014c04:	62b3      	str	r3, [r6, #40]	; 0x28
 8014c06:	4643      	mov	r3, r8
 8014c08:	62f3      	str	r3, [r6, #44]	; 0x2c
 8014c0a:	2301      	movs	r3, #1
 8014c0c:	6236      	str	r6, [r6, #32]
 8014c0e:	6337      	str	r7, [r6, #48]	; 0x30
 8014c10:	61ab      	str	r3, [r5, #24]
 8014c12:	b002      	add	sp, #8
 8014c14:	bc1c      	pop	{r2, r3, r4}
 8014c16:	4690      	mov	r8, r2
 8014c18:	4699      	mov	r9, r3
 8014c1a:	46a2      	mov	sl, r4
 8014c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c1e:	2301      	movs	r3, #1
 8014c20:	6183      	str	r3, [r0, #24]
 8014c22:	e79b      	b.n	8014b5c <__sinit.part.0+0x24>
 8014c24:	08014a71 	.word	0x08014a71
 8014c28:	0801ada0 	.word	0x0801ada0
 8014c2c:	08015285 	.word	0x08015285
 8014c30:	0801531d 	.word	0x0801531d
 8014c34:	080152b1 	.word	0x080152b1
 8014c38:	080152f1 	.word	0x080152f1
 8014c3c:	00010009 	.word	0x00010009
 8014c40:	00020012 	.word	0x00020012

08014c44 <_cleanup>:
 8014c44:	b510      	push	{r4, lr}
 8014c46:	4b03      	ldr	r3, [pc, #12]	; (8014c54 <_cleanup+0x10>)
 8014c48:	4903      	ldr	r1, [pc, #12]	; (8014c58 <_cleanup+0x14>)
 8014c4a:	6818      	ldr	r0, [r3, #0]
 8014c4c:	f000 f850 	bl	8014cf0 <_fwalk_reent>
 8014c50:	bd10      	pop	{r4, pc}
 8014c52:	46c0      	nop			; (mov r8, r8)
 8014c54:	0801ada0 	.word	0x0801ada0
 8014c58:	080149e9 	.word	0x080149e9

08014c5c <__sinit>:
 8014c5c:	6983      	ldr	r3, [r0, #24]
 8014c5e:	b510      	push	{r4, lr}
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d101      	bne.n	8014c68 <__sinit+0xc>
 8014c64:	f7ff ff68 	bl	8014b38 <__sinit.part.0>
 8014c68:	bd10      	pop	{r4, pc}
 8014c6a:	46c0      	nop			; (mov r8, r8)

08014c6c <__sfp_lock_acquire>:
 8014c6c:	4770      	bx	lr
 8014c6e:	46c0      	nop			; (mov r8, r8)

08014c70 <__sfp_lock_release>:
 8014c70:	4770      	bx	lr
 8014c72:	46c0      	nop			; (mov r8, r8)

08014c74 <__sinit_lock_acquire>:
 8014c74:	4770      	bx	lr
 8014c76:	46c0      	nop			; (mov r8, r8)

08014c78 <__sinit_lock_release>:
 8014c78:	4770      	bx	lr
 8014c7a:	46c0      	nop			; (mov r8, r8)

08014c7c <__fp_lock_all>:
 8014c7c:	b510      	push	{r4, lr}
 8014c7e:	4b03      	ldr	r3, [pc, #12]	; (8014c8c <__fp_lock_all+0x10>)
 8014c80:	4903      	ldr	r1, [pc, #12]	; (8014c90 <__fp_lock_all+0x14>)
 8014c82:	6818      	ldr	r0, [r3, #0]
 8014c84:	f000 f812 	bl	8014cac <_fwalk>
 8014c88:	bd10      	pop	{r4, pc}
 8014c8a:	46c0      	nop			; (mov r8, r8)
 8014c8c:	200005dc 	.word	0x200005dc
 8014c90:	08014a6d 	.word	0x08014a6d

08014c94 <__fp_unlock_all>:
 8014c94:	b510      	push	{r4, lr}
 8014c96:	4b03      	ldr	r3, [pc, #12]	; (8014ca4 <__fp_unlock_all+0x10>)
 8014c98:	4903      	ldr	r1, [pc, #12]	; (8014ca8 <__fp_unlock_all+0x14>)
 8014c9a:	6818      	ldr	r0, [r3, #0]
 8014c9c:	f000 f806 	bl	8014cac <_fwalk>
 8014ca0:	bd10      	pop	{r4, pc}
 8014ca2:	46c0      	nop			; (mov r8, r8)
 8014ca4:	200005dc 	.word	0x200005dc
 8014ca8:	08014a81 	.word	0x08014a81

08014cac <_fwalk>:
 8014cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cae:	46c6      	mov	lr, r8
 8014cb0:	3048      	adds	r0, #72	; 0x48
 8014cb2:	b500      	push	{lr}
 8014cb4:	4688      	mov	r8, r1
 8014cb6:	0007      	movs	r7, r0
 8014cb8:	2600      	movs	r6, #0
 8014cba:	2800      	cmp	r0, #0
 8014cbc:	d013      	beq.n	8014ce6 <_fwalk+0x3a>
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	68bc      	ldr	r4, [r7, #8]
 8014cc2:	1e5d      	subs	r5, r3, #1
 8014cc4:	d40c      	bmi.n	8014ce0 <_fwalk+0x34>
 8014cc6:	89a3      	ldrh	r3, [r4, #12]
 8014cc8:	2b01      	cmp	r3, #1
 8014cca:	d906      	bls.n	8014cda <_fwalk+0x2e>
 8014ccc:	220e      	movs	r2, #14
 8014cce:	5ea3      	ldrsh	r3, [r4, r2]
 8014cd0:	3301      	adds	r3, #1
 8014cd2:	d002      	beq.n	8014cda <_fwalk+0x2e>
 8014cd4:	0020      	movs	r0, r4
 8014cd6:	47c0      	blx	r8
 8014cd8:	4306      	orrs	r6, r0
 8014cda:	3468      	adds	r4, #104	; 0x68
 8014cdc:	3d01      	subs	r5, #1
 8014cde:	d2f2      	bcs.n	8014cc6 <_fwalk+0x1a>
 8014ce0:	683f      	ldr	r7, [r7, #0]
 8014ce2:	2f00      	cmp	r7, #0
 8014ce4:	d1eb      	bne.n	8014cbe <_fwalk+0x12>
 8014ce6:	0030      	movs	r0, r6
 8014ce8:	bc04      	pop	{r2}
 8014cea:	4690      	mov	r8, r2
 8014cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cee:	46c0      	nop			; (mov r8, r8)

08014cf0 <_fwalk_reent>:
 8014cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cf2:	4647      	mov	r7, r8
 8014cf4:	46ce      	mov	lr, r9
 8014cf6:	b580      	push	{r7, lr}
 8014cf8:	0007      	movs	r7, r0
 8014cfa:	3748      	adds	r7, #72	; 0x48
 8014cfc:	4680      	mov	r8, r0
 8014cfe:	4689      	mov	r9, r1
 8014d00:	2600      	movs	r6, #0
 8014d02:	2f00      	cmp	r7, #0
 8014d04:	d014      	beq.n	8014d30 <_fwalk_reent+0x40>
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	68bc      	ldr	r4, [r7, #8]
 8014d0a:	1e5d      	subs	r5, r3, #1
 8014d0c:	d40d      	bmi.n	8014d2a <_fwalk_reent+0x3a>
 8014d0e:	89a3      	ldrh	r3, [r4, #12]
 8014d10:	2b01      	cmp	r3, #1
 8014d12:	d907      	bls.n	8014d24 <_fwalk_reent+0x34>
 8014d14:	220e      	movs	r2, #14
 8014d16:	5ea3      	ldrsh	r3, [r4, r2]
 8014d18:	3301      	adds	r3, #1
 8014d1a:	d003      	beq.n	8014d24 <_fwalk_reent+0x34>
 8014d1c:	0021      	movs	r1, r4
 8014d1e:	4640      	mov	r0, r8
 8014d20:	47c8      	blx	r9
 8014d22:	4306      	orrs	r6, r0
 8014d24:	3468      	adds	r4, #104	; 0x68
 8014d26:	3d01      	subs	r5, #1
 8014d28:	d2f1      	bcs.n	8014d0e <_fwalk_reent+0x1e>
 8014d2a:	683f      	ldr	r7, [r7, #0]
 8014d2c:	2f00      	cmp	r7, #0
 8014d2e:	d1ea      	bne.n	8014d06 <_fwalk_reent+0x16>
 8014d30:	0030      	movs	r0, r6
 8014d32:	bc0c      	pop	{r2, r3}
 8014d34:	4690      	mov	r8, r2
 8014d36:	4699      	mov	r9, r3
 8014d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d3a:	46c0      	nop			; (mov r8, r8)

08014d3c <__libc_init_array>:
 8014d3c:	b570      	push	{r4, r5, r6, lr}
 8014d3e:	4d0c      	ldr	r5, [pc, #48]	; (8014d70 <__libc_init_array+0x34>)
 8014d40:	4e0c      	ldr	r6, [pc, #48]	; (8014d74 <__libc_init_array+0x38>)
 8014d42:	1b76      	subs	r6, r6, r5
 8014d44:	10b6      	asrs	r6, r6, #2
 8014d46:	d005      	beq.n	8014d54 <__libc_init_array+0x18>
 8014d48:	2400      	movs	r4, #0
 8014d4a:	cd08      	ldmia	r5!, {r3}
 8014d4c:	3401      	adds	r4, #1
 8014d4e:	4798      	blx	r3
 8014d50:	42a6      	cmp	r6, r4
 8014d52:	d1fa      	bne.n	8014d4a <__libc_init_array+0xe>
 8014d54:	f001 fdae 	bl	80168b4 <_init>
 8014d58:	4d07      	ldr	r5, [pc, #28]	; (8014d78 <__libc_init_array+0x3c>)
 8014d5a:	4e08      	ldr	r6, [pc, #32]	; (8014d7c <__libc_init_array+0x40>)
 8014d5c:	1b76      	subs	r6, r6, r5
 8014d5e:	10b6      	asrs	r6, r6, #2
 8014d60:	d005      	beq.n	8014d6e <__libc_init_array+0x32>
 8014d62:	2400      	movs	r4, #0
 8014d64:	cd08      	ldmia	r5!, {r3}
 8014d66:	3401      	adds	r4, #1
 8014d68:	4798      	blx	r3
 8014d6a:	42a6      	cmp	r6, r4
 8014d6c:	d1fa      	bne.n	8014d64 <__libc_init_array+0x28>
 8014d6e:	bd70      	pop	{r4, r5, r6, pc}
 8014d70:	20000640 	.word	0x20000640
 8014d74:	20000640 	.word	0x20000640
 8014d78:	20000640 	.word	0x20000640
 8014d7c:	20000644 	.word	0x20000644

08014d80 <memcmp>:
 8014d80:	b530      	push	{r4, r5, lr}
 8014d82:	2a03      	cmp	r2, #3
 8014d84:	d90c      	bls.n	8014da0 <memcmp+0x20>
 8014d86:	0003      	movs	r3, r0
 8014d88:	430b      	orrs	r3, r1
 8014d8a:	079b      	lsls	r3, r3, #30
 8014d8c:	d11c      	bne.n	8014dc8 <memcmp+0x48>
 8014d8e:	6803      	ldr	r3, [r0, #0]
 8014d90:	680c      	ldr	r4, [r1, #0]
 8014d92:	42a3      	cmp	r3, r4
 8014d94:	d118      	bne.n	8014dc8 <memcmp+0x48>
 8014d96:	3a04      	subs	r2, #4
 8014d98:	3004      	adds	r0, #4
 8014d9a:	3104      	adds	r1, #4
 8014d9c:	2a03      	cmp	r2, #3
 8014d9e:	d8f6      	bhi.n	8014d8e <memcmp+0xe>
 8014da0:	1e55      	subs	r5, r2, #1
 8014da2:	2a00      	cmp	r2, #0
 8014da4:	d00e      	beq.n	8014dc4 <memcmp+0x44>
 8014da6:	7802      	ldrb	r2, [r0, #0]
 8014da8:	780c      	ldrb	r4, [r1, #0]
 8014daa:	4294      	cmp	r4, r2
 8014dac:	d10e      	bne.n	8014dcc <memcmp+0x4c>
 8014dae:	3501      	adds	r5, #1
 8014db0:	2301      	movs	r3, #1
 8014db2:	3901      	subs	r1, #1
 8014db4:	e004      	b.n	8014dc0 <memcmp+0x40>
 8014db6:	5cc2      	ldrb	r2, [r0, r3]
 8014db8:	3301      	adds	r3, #1
 8014dba:	5ccc      	ldrb	r4, [r1, r3]
 8014dbc:	42a2      	cmp	r2, r4
 8014dbe:	d105      	bne.n	8014dcc <memcmp+0x4c>
 8014dc0:	42ab      	cmp	r3, r5
 8014dc2:	d1f8      	bne.n	8014db6 <memcmp+0x36>
 8014dc4:	2000      	movs	r0, #0
 8014dc6:	bd30      	pop	{r4, r5, pc}
 8014dc8:	1e55      	subs	r5, r2, #1
 8014dca:	e7ec      	b.n	8014da6 <memcmp+0x26>
 8014dcc:	1b10      	subs	r0, r2, r4
 8014dce:	e7fa      	b.n	8014dc6 <memcmp+0x46>

08014dd0 <memcpy>:
 8014dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dd2:	46c6      	mov	lr, r8
 8014dd4:	b500      	push	{lr}
 8014dd6:	2a0f      	cmp	r2, #15
 8014dd8:	d943      	bls.n	8014e62 <memcpy+0x92>
 8014dda:	000b      	movs	r3, r1
 8014ddc:	2603      	movs	r6, #3
 8014dde:	4303      	orrs	r3, r0
 8014de0:	401e      	ands	r6, r3
 8014de2:	000c      	movs	r4, r1
 8014de4:	0003      	movs	r3, r0
 8014de6:	2e00      	cmp	r6, #0
 8014de8:	d140      	bne.n	8014e6c <memcpy+0x9c>
 8014dea:	0015      	movs	r5, r2
 8014dec:	3d10      	subs	r5, #16
 8014dee:	092d      	lsrs	r5, r5, #4
 8014df0:	46ac      	mov	ip, r5
 8014df2:	012d      	lsls	r5, r5, #4
 8014df4:	46a8      	mov	r8, r5
 8014df6:	4480      	add	r8, r0
 8014df8:	e000      	b.n	8014dfc <memcpy+0x2c>
 8014dfa:	003b      	movs	r3, r7
 8014dfc:	6867      	ldr	r7, [r4, #4]
 8014dfe:	6825      	ldr	r5, [r4, #0]
 8014e00:	605f      	str	r7, [r3, #4]
 8014e02:	68e7      	ldr	r7, [r4, #12]
 8014e04:	601d      	str	r5, [r3, #0]
 8014e06:	60df      	str	r7, [r3, #12]
 8014e08:	001f      	movs	r7, r3
 8014e0a:	68a5      	ldr	r5, [r4, #8]
 8014e0c:	3710      	adds	r7, #16
 8014e0e:	609d      	str	r5, [r3, #8]
 8014e10:	3410      	adds	r4, #16
 8014e12:	4543      	cmp	r3, r8
 8014e14:	d1f1      	bne.n	8014dfa <memcpy+0x2a>
 8014e16:	4665      	mov	r5, ip
 8014e18:	230f      	movs	r3, #15
 8014e1a:	240c      	movs	r4, #12
 8014e1c:	3501      	adds	r5, #1
 8014e1e:	012d      	lsls	r5, r5, #4
 8014e20:	1949      	adds	r1, r1, r5
 8014e22:	4013      	ands	r3, r2
 8014e24:	1945      	adds	r5, r0, r5
 8014e26:	4214      	tst	r4, r2
 8014e28:	d023      	beq.n	8014e72 <memcpy+0xa2>
 8014e2a:	598c      	ldr	r4, [r1, r6]
 8014e2c:	51ac      	str	r4, [r5, r6]
 8014e2e:	3604      	adds	r6, #4
 8014e30:	1b9c      	subs	r4, r3, r6
 8014e32:	2c03      	cmp	r4, #3
 8014e34:	d8f9      	bhi.n	8014e2a <memcpy+0x5a>
 8014e36:	2403      	movs	r4, #3
 8014e38:	3b04      	subs	r3, #4
 8014e3a:	089b      	lsrs	r3, r3, #2
 8014e3c:	3301      	adds	r3, #1
 8014e3e:	009b      	lsls	r3, r3, #2
 8014e40:	4022      	ands	r2, r4
 8014e42:	18ed      	adds	r5, r5, r3
 8014e44:	18c9      	adds	r1, r1, r3
 8014e46:	1e56      	subs	r6, r2, #1
 8014e48:	2a00      	cmp	r2, #0
 8014e4a:	d007      	beq.n	8014e5c <memcpy+0x8c>
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	e000      	b.n	8014e52 <memcpy+0x82>
 8014e50:	0023      	movs	r3, r4
 8014e52:	5cca      	ldrb	r2, [r1, r3]
 8014e54:	1c5c      	adds	r4, r3, #1
 8014e56:	54ea      	strb	r2, [r5, r3]
 8014e58:	429e      	cmp	r6, r3
 8014e5a:	d1f9      	bne.n	8014e50 <memcpy+0x80>
 8014e5c:	bc04      	pop	{r2}
 8014e5e:	4690      	mov	r8, r2
 8014e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e62:	0005      	movs	r5, r0
 8014e64:	1e56      	subs	r6, r2, #1
 8014e66:	2a00      	cmp	r2, #0
 8014e68:	d1f0      	bne.n	8014e4c <memcpy+0x7c>
 8014e6a:	e7f7      	b.n	8014e5c <memcpy+0x8c>
 8014e6c:	1e56      	subs	r6, r2, #1
 8014e6e:	0005      	movs	r5, r0
 8014e70:	e7ec      	b.n	8014e4c <memcpy+0x7c>
 8014e72:	001a      	movs	r2, r3
 8014e74:	e7f6      	b.n	8014e64 <memcpy+0x94>
 8014e76:	46c0      	nop			; (mov r8, r8)

08014e78 <memset>:
 8014e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e7a:	0005      	movs	r5, r0
 8014e7c:	0783      	lsls	r3, r0, #30
 8014e7e:	d04a      	beq.n	8014f16 <memset+0x9e>
 8014e80:	1e54      	subs	r4, r2, #1
 8014e82:	2a00      	cmp	r2, #0
 8014e84:	d044      	beq.n	8014f10 <memset+0x98>
 8014e86:	b2ce      	uxtb	r6, r1
 8014e88:	0003      	movs	r3, r0
 8014e8a:	2203      	movs	r2, #3
 8014e8c:	e002      	b.n	8014e94 <memset+0x1c>
 8014e8e:	3501      	adds	r5, #1
 8014e90:	3c01      	subs	r4, #1
 8014e92:	d33d      	bcc.n	8014f10 <memset+0x98>
 8014e94:	3301      	adds	r3, #1
 8014e96:	702e      	strb	r6, [r5, #0]
 8014e98:	4213      	tst	r3, r2
 8014e9a:	d1f8      	bne.n	8014e8e <memset+0x16>
 8014e9c:	2c03      	cmp	r4, #3
 8014e9e:	d92f      	bls.n	8014f00 <memset+0x88>
 8014ea0:	22ff      	movs	r2, #255	; 0xff
 8014ea2:	400a      	ands	r2, r1
 8014ea4:	0215      	lsls	r5, r2, #8
 8014ea6:	4315      	orrs	r5, r2
 8014ea8:	042a      	lsls	r2, r5, #16
 8014eaa:	4315      	orrs	r5, r2
 8014eac:	2c0f      	cmp	r4, #15
 8014eae:	d935      	bls.n	8014f1c <memset+0xa4>
 8014eb0:	0027      	movs	r7, r4
 8014eb2:	3f10      	subs	r7, #16
 8014eb4:	093f      	lsrs	r7, r7, #4
 8014eb6:	013e      	lsls	r6, r7, #4
 8014eb8:	46b4      	mov	ip, r6
 8014eba:	001e      	movs	r6, r3
 8014ebc:	001a      	movs	r2, r3
 8014ebe:	3610      	adds	r6, #16
 8014ec0:	4466      	add	r6, ip
 8014ec2:	6015      	str	r5, [r2, #0]
 8014ec4:	6055      	str	r5, [r2, #4]
 8014ec6:	6095      	str	r5, [r2, #8]
 8014ec8:	60d5      	str	r5, [r2, #12]
 8014eca:	3210      	adds	r2, #16
 8014ecc:	42b2      	cmp	r2, r6
 8014ece:	d1f8      	bne.n	8014ec2 <memset+0x4a>
 8014ed0:	260f      	movs	r6, #15
 8014ed2:	220c      	movs	r2, #12
 8014ed4:	3701      	adds	r7, #1
 8014ed6:	013f      	lsls	r7, r7, #4
 8014ed8:	4026      	ands	r6, r4
 8014eda:	19db      	adds	r3, r3, r7
 8014edc:	0037      	movs	r7, r6
 8014ede:	4222      	tst	r2, r4
 8014ee0:	d017      	beq.n	8014f12 <memset+0x9a>
 8014ee2:	1f3e      	subs	r6, r7, #4
 8014ee4:	08b6      	lsrs	r6, r6, #2
 8014ee6:	00b4      	lsls	r4, r6, #2
 8014ee8:	46a4      	mov	ip, r4
 8014eea:	001a      	movs	r2, r3
 8014eec:	1d1c      	adds	r4, r3, #4
 8014eee:	4464      	add	r4, ip
 8014ef0:	c220      	stmia	r2!, {r5}
 8014ef2:	42a2      	cmp	r2, r4
 8014ef4:	d1fc      	bne.n	8014ef0 <memset+0x78>
 8014ef6:	2403      	movs	r4, #3
 8014ef8:	3601      	adds	r6, #1
 8014efa:	00b6      	lsls	r6, r6, #2
 8014efc:	199b      	adds	r3, r3, r6
 8014efe:	403c      	ands	r4, r7
 8014f00:	2c00      	cmp	r4, #0
 8014f02:	d005      	beq.n	8014f10 <memset+0x98>
 8014f04:	b2c9      	uxtb	r1, r1
 8014f06:	191c      	adds	r4, r3, r4
 8014f08:	7019      	strb	r1, [r3, #0]
 8014f0a:	3301      	adds	r3, #1
 8014f0c:	429c      	cmp	r4, r3
 8014f0e:	d1fb      	bne.n	8014f08 <memset+0x90>
 8014f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f12:	0034      	movs	r4, r6
 8014f14:	e7f4      	b.n	8014f00 <memset+0x88>
 8014f16:	0014      	movs	r4, r2
 8014f18:	0003      	movs	r3, r0
 8014f1a:	e7bf      	b.n	8014e9c <memset+0x24>
 8014f1c:	0027      	movs	r7, r4
 8014f1e:	e7e0      	b.n	8014ee2 <memset+0x6a>

08014f20 <_free_r>:
 8014f20:	b570      	push	{r4, r5, r6, lr}
 8014f22:	0005      	movs	r5, r0
 8014f24:	2900      	cmp	r1, #0
 8014f26:	d015      	beq.n	8014f54 <_free_r+0x34>
 8014f28:	1f0c      	subs	r4, r1, #4
 8014f2a:	6823      	ldr	r3, [r4, #0]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	db27      	blt.n	8014f80 <_free_r+0x60>
 8014f30:	0028      	movs	r0, r5
 8014f32:	f000 fa91 	bl	8015458 <__malloc_lock>
 8014f36:	4b24      	ldr	r3, [pc, #144]	; (8014fc8 <_free_r+0xa8>)
 8014f38:	681a      	ldr	r2, [r3, #0]
 8014f3a:	2a00      	cmp	r2, #0
 8014f3c:	d005      	beq.n	8014f4a <_free_r+0x2a>
 8014f3e:	42a2      	cmp	r2, r4
 8014f40:	d90c      	bls.n	8014f5c <_free_r+0x3c>
 8014f42:	6821      	ldr	r1, [r4, #0]
 8014f44:	1860      	adds	r0, r4, r1
 8014f46:	4282      	cmp	r2, r0
 8014f48:	d024      	beq.n	8014f94 <_free_r+0x74>
 8014f4a:	6062      	str	r2, [r4, #4]
 8014f4c:	0028      	movs	r0, r5
 8014f4e:	601c      	str	r4, [r3, #0]
 8014f50:	f000 fa84 	bl	801545c <__malloc_unlock>
 8014f54:	bd70      	pop	{r4, r5, r6, pc}
 8014f56:	42a3      	cmp	r3, r4
 8014f58:	d803      	bhi.n	8014f62 <_free_r+0x42>
 8014f5a:	001a      	movs	r2, r3
 8014f5c:	6853      	ldr	r3, [r2, #4]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d1f9      	bne.n	8014f56 <_free_r+0x36>
 8014f62:	6811      	ldr	r1, [r2, #0]
 8014f64:	1850      	adds	r0, r2, r1
 8014f66:	42a0      	cmp	r0, r4
 8014f68:	d01b      	beq.n	8014fa2 <_free_r+0x82>
 8014f6a:	d827      	bhi.n	8014fbc <_free_r+0x9c>
 8014f6c:	6821      	ldr	r1, [r4, #0]
 8014f6e:	1860      	adds	r0, r4, r1
 8014f70:	4283      	cmp	r3, r0
 8014f72:	d007      	beq.n	8014f84 <_free_r+0x64>
 8014f74:	6063      	str	r3, [r4, #4]
 8014f76:	6054      	str	r4, [r2, #4]
 8014f78:	0028      	movs	r0, r5
 8014f7a:	f000 fa6f 	bl	801545c <__malloc_unlock>
 8014f7e:	e7e9      	b.n	8014f54 <_free_r+0x34>
 8014f80:	18e4      	adds	r4, r4, r3
 8014f82:	e7d5      	b.n	8014f30 <_free_r+0x10>
 8014f84:	6818      	ldr	r0, [r3, #0]
 8014f86:	685b      	ldr	r3, [r3, #4]
 8014f88:	4684      	mov	ip, r0
 8014f8a:	4461      	add	r1, ip
 8014f8c:	6021      	str	r1, [r4, #0]
 8014f8e:	6063      	str	r3, [r4, #4]
 8014f90:	6054      	str	r4, [r2, #4]
 8014f92:	e7f1      	b.n	8014f78 <_free_r+0x58>
 8014f94:	6810      	ldr	r0, [r2, #0]
 8014f96:	6852      	ldr	r2, [r2, #4]
 8014f98:	4684      	mov	ip, r0
 8014f9a:	4461      	add	r1, ip
 8014f9c:	6021      	str	r1, [r4, #0]
 8014f9e:	6062      	str	r2, [r4, #4]
 8014fa0:	e7d4      	b.n	8014f4c <_free_r+0x2c>
 8014fa2:	6820      	ldr	r0, [r4, #0]
 8014fa4:	1809      	adds	r1, r1, r0
 8014fa6:	1850      	adds	r0, r2, r1
 8014fa8:	6011      	str	r1, [r2, #0]
 8014faa:	4283      	cmp	r3, r0
 8014fac:	d1e4      	bne.n	8014f78 <_free_r+0x58>
 8014fae:	6818      	ldr	r0, [r3, #0]
 8014fb0:	685b      	ldr	r3, [r3, #4]
 8014fb2:	4684      	mov	ip, r0
 8014fb4:	4461      	add	r1, ip
 8014fb6:	6011      	str	r1, [r2, #0]
 8014fb8:	6053      	str	r3, [r2, #4]
 8014fba:	e7dd      	b.n	8014f78 <_free_r+0x58>
 8014fbc:	230c      	movs	r3, #12
 8014fbe:	0028      	movs	r0, r5
 8014fc0:	602b      	str	r3, [r5, #0]
 8014fc2:	f000 fa4b 	bl	801545c <__malloc_unlock>
 8014fc6:	e7c5      	b.n	8014f54 <_free_r+0x34>
 8014fc8:	200043c8 	.word	0x200043c8

08014fcc <_malloc_r>:
 8014fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fce:	2303      	movs	r3, #3
 8014fd0:	1ccd      	adds	r5, r1, #3
 8014fd2:	439d      	bics	r5, r3
 8014fd4:	3508      	adds	r5, #8
 8014fd6:	0006      	movs	r6, r0
 8014fd8:	2d0c      	cmp	r5, #12
 8014fda:	d22a      	bcs.n	8015032 <_malloc_r+0x66>
 8014fdc:	250c      	movs	r5, #12
 8014fde:	42a9      	cmp	r1, r5
 8014fe0:	d829      	bhi.n	8015036 <_malloc_r+0x6a>
 8014fe2:	0030      	movs	r0, r6
 8014fe4:	f000 fa38 	bl	8015458 <__malloc_lock>
 8014fe8:	4f2a      	ldr	r7, [pc, #168]	; (8015094 <_malloc_r+0xc8>)
 8014fea:	683a      	ldr	r2, [r7, #0]
 8014fec:	2a00      	cmp	r2, #0
 8014fee:	d00a      	beq.n	8015006 <_malloc_r+0x3a>
 8014ff0:	6813      	ldr	r3, [r2, #0]
 8014ff2:	1b5b      	subs	r3, r3, r5
 8014ff4:	d404      	bmi.n	8015000 <_malloc_r+0x34>
 8014ff6:	e041      	b.n	801507c <_malloc_r+0xb0>
 8014ff8:	6823      	ldr	r3, [r4, #0]
 8014ffa:	1b5b      	subs	r3, r3, r5
 8014ffc:	d51f      	bpl.n	801503e <_malloc_r+0x72>
 8014ffe:	0022      	movs	r2, r4
 8015000:	6854      	ldr	r4, [r2, #4]
 8015002:	2c00      	cmp	r4, #0
 8015004:	d1f8      	bne.n	8014ff8 <_malloc_r+0x2c>
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d03d      	beq.n	8015088 <_malloc_r+0xbc>
 801500c:	0029      	movs	r1, r5
 801500e:	0030      	movs	r0, r6
 8015010:	f000 f8ea 	bl	80151e8 <_sbrk_r>
 8015014:	1c43      	adds	r3, r0, #1
 8015016:	d02a      	beq.n	801506e <_malloc_r+0xa2>
 8015018:	2303      	movs	r3, #3
 801501a:	1cc4      	adds	r4, r0, #3
 801501c:	439c      	bics	r4, r3
 801501e:	42a0      	cmp	r0, r4
 8015020:	d005      	beq.n	801502e <_malloc_r+0x62>
 8015022:	1a21      	subs	r1, r4, r0
 8015024:	0030      	movs	r0, r6
 8015026:	f000 f8df 	bl	80151e8 <_sbrk_r>
 801502a:	1c43      	adds	r3, r0, #1
 801502c:	d01f      	beq.n	801506e <_malloc_r+0xa2>
 801502e:	6025      	str	r5, [r4, #0]
 8015030:	e010      	b.n	8015054 <_malloc_r+0x88>
 8015032:	2d00      	cmp	r5, #0
 8015034:	dad3      	bge.n	8014fde <_malloc_r+0x12>
 8015036:	230c      	movs	r3, #12
 8015038:	2000      	movs	r0, #0
 801503a:	6033      	str	r3, [r6, #0]
 801503c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801503e:	2b0b      	cmp	r3, #11
 8015040:	d805      	bhi.n	801504e <_malloc_r+0x82>
 8015042:	6863      	ldr	r3, [r4, #4]
 8015044:	42a2      	cmp	r2, r4
 8015046:	d01d      	beq.n	8015084 <_malloc_r+0xb8>
 8015048:	6053      	str	r3, [r2, #4]
 801504a:	e003      	b.n	8015054 <_malloc_r+0x88>
 801504c:	0014      	movs	r4, r2
 801504e:	6023      	str	r3, [r4, #0]
 8015050:	18e4      	adds	r4, r4, r3
 8015052:	6025      	str	r5, [r4, #0]
 8015054:	0030      	movs	r0, r6
 8015056:	f000 fa01 	bl	801545c <__malloc_unlock>
 801505a:	0020      	movs	r0, r4
 801505c:	2207      	movs	r2, #7
 801505e:	300b      	adds	r0, #11
 8015060:	1d23      	adds	r3, r4, #4
 8015062:	4390      	bics	r0, r2
 8015064:	1ac2      	subs	r2, r0, r3
 8015066:	d0e9      	beq.n	801503c <_malloc_r+0x70>
 8015068:	1a1b      	subs	r3, r3, r0
 801506a:	50a3      	str	r3, [r4, r2]
 801506c:	e7e6      	b.n	801503c <_malloc_r+0x70>
 801506e:	230c      	movs	r3, #12
 8015070:	0030      	movs	r0, r6
 8015072:	6033      	str	r3, [r6, #0]
 8015074:	f000 f9f2 	bl	801545c <__malloc_unlock>
 8015078:	2000      	movs	r0, #0
 801507a:	e7df      	b.n	801503c <_malloc_r+0x70>
 801507c:	2b0b      	cmp	r3, #11
 801507e:	d8e5      	bhi.n	801504c <_malloc_r+0x80>
 8015080:	0014      	movs	r4, r2
 8015082:	6853      	ldr	r3, [r2, #4]
 8015084:	603b      	str	r3, [r7, #0]
 8015086:	e7e5      	b.n	8015054 <_malloc_r+0x88>
 8015088:	2100      	movs	r1, #0
 801508a:	0030      	movs	r0, r6
 801508c:	f000 f8ac 	bl	80151e8 <_sbrk_r>
 8015090:	6078      	str	r0, [r7, #4]
 8015092:	e7bb      	b.n	801500c <_malloc_r+0x40>
 8015094:	200043c8 	.word	0x200043c8

08015098 <_iprintf_r>:
 8015098:	b40e      	push	{r1, r2, r3}
 801509a:	b510      	push	{r4, lr}
 801509c:	0004      	movs	r4, r0
 801509e:	b083      	sub	sp, #12
 80150a0:	2800      	cmp	r0, #0
 80150a2:	d002      	beq.n	80150aa <_iprintf_r+0x12>
 80150a4:	6983      	ldr	r3, [r0, #24]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d00b      	beq.n	80150c2 <_iprintf_r+0x2a>
 80150aa:	ab06      	add	r3, sp, #24
 80150ac:	9a05      	ldr	r2, [sp, #20]
 80150ae:	68a1      	ldr	r1, [r4, #8]
 80150b0:	0020      	movs	r0, r4
 80150b2:	9301      	str	r3, [sp, #4]
 80150b4:	f000 fc4c 	bl	8015950 <_vfiprintf_r>
 80150b8:	b003      	add	sp, #12
 80150ba:	bc10      	pop	{r4}
 80150bc:	bc08      	pop	{r3}
 80150be:	b003      	add	sp, #12
 80150c0:	4718      	bx	r3
 80150c2:	f7ff fdcb 	bl	8014c5c <__sinit>
 80150c6:	e7f0      	b.n	80150aa <_iprintf_r+0x12>

080150c8 <iprintf>:
 80150c8:	b40f      	push	{r0, r1, r2, r3}
 80150ca:	b510      	push	{r4, lr}
 80150cc:	4b0b      	ldr	r3, [pc, #44]	; (80150fc <iprintf+0x34>)
 80150ce:	b082      	sub	sp, #8
 80150d0:	681c      	ldr	r4, [r3, #0]
 80150d2:	2c00      	cmp	r4, #0
 80150d4:	d002      	beq.n	80150dc <iprintf+0x14>
 80150d6:	69a3      	ldr	r3, [r4, #24]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d00b      	beq.n	80150f4 <iprintf+0x2c>
 80150dc:	ab05      	add	r3, sp, #20
 80150de:	9a04      	ldr	r2, [sp, #16]
 80150e0:	68a1      	ldr	r1, [r4, #8]
 80150e2:	0020      	movs	r0, r4
 80150e4:	9301      	str	r3, [sp, #4]
 80150e6:	f000 fc33 	bl	8015950 <_vfiprintf_r>
 80150ea:	b002      	add	sp, #8
 80150ec:	bc10      	pop	{r4}
 80150ee:	bc08      	pop	{r3}
 80150f0:	b004      	add	sp, #16
 80150f2:	4718      	bx	r3
 80150f4:	0020      	movs	r0, r4
 80150f6:	f7ff fdb1 	bl	8014c5c <__sinit>
 80150fa:	e7ef      	b.n	80150dc <iprintf+0x14>
 80150fc:	200005dc 	.word	0x200005dc

08015100 <srand>:
 8015100:	4b11      	ldr	r3, [pc, #68]	; (8015148 <srand+0x48>)
 8015102:	b570      	push	{r4, r5, r6, lr}
 8015104:	681c      	ldr	r4, [r3, #0]
 8015106:	0005      	movs	r5, r0
 8015108:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801510a:	2800      	cmp	r0, #0
 801510c:	d003      	beq.n	8015116 <srand+0x16>
 801510e:	2300      	movs	r3, #0
 8015110:	6105      	str	r5, [r0, #16]
 8015112:	6143      	str	r3, [r0, #20]
 8015114:	bd70      	pop	{r4, r5, r6, pc}
 8015116:	3018      	adds	r0, #24
 8015118:	f000 f98a 	bl	8015430 <malloc>
 801511c:	63a0      	str	r0, [r4, #56]	; 0x38
 801511e:	2800      	cmp	r0, #0
 8015120:	d00c      	beq.n	801513c <srand+0x3c>
 8015122:	4b0a      	ldr	r3, [pc, #40]	; (801514c <srand+0x4c>)
 8015124:	2201      	movs	r2, #1
 8015126:	6003      	str	r3, [r0, #0]
 8015128:	4b09      	ldr	r3, [pc, #36]	; (8015150 <srand+0x50>)
 801512a:	6043      	str	r3, [r0, #4]
 801512c:	4b09      	ldr	r3, [pc, #36]	; (8015154 <srand+0x54>)
 801512e:	6083      	str	r3, [r0, #8]
 8015130:	230b      	movs	r3, #11
 8015132:	8183      	strh	r3, [r0, #12]
 8015134:	2300      	movs	r3, #0
 8015136:	6102      	str	r2, [r0, #16]
 8015138:	6143      	str	r3, [r0, #20]
 801513a:	e7e8      	b.n	801510e <srand+0xe>
 801513c:	4b06      	ldr	r3, [pc, #24]	; (8015158 <srand+0x58>)
 801513e:	2200      	movs	r2, #0
 8015140:	2142      	movs	r1, #66	; 0x42
 8015142:	4806      	ldr	r0, [pc, #24]	; (801515c <srand+0x5c>)
 8015144:	f7f3 fa5c 	bl	8008600 <__assert_func>
 8015148:	200005dc 	.word	0x200005dc
 801514c:	abcd330e 	.word	0xabcd330e
 8015150:	e66d1234 	.word	0xe66d1234
 8015154:	0005deec 	.word	0x0005deec
 8015158:	0801ada4 	.word	0x0801ada4
 801515c:	0801adbc 	.word	0x0801adbc

08015160 <rand>:
 8015160:	4b18      	ldr	r3, [pc, #96]	; (80151c4 <rand+0x64>)
 8015162:	b570      	push	{r4, r5, r6, lr}
 8015164:	681d      	ldr	r5, [r3, #0]
 8015166:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8015168:	2c00      	cmp	r4, #0
 801516a:	d00e      	beq.n	801518a <rand+0x2a>
 801516c:	6920      	ldr	r0, [r4, #16]
 801516e:	6961      	ldr	r1, [r4, #20]
 8015170:	4a15      	ldr	r2, [pc, #84]	; (80151c8 <rand+0x68>)
 8015172:	4b16      	ldr	r3, [pc, #88]	; (80151cc <rand+0x6c>)
 8015174:	f7fc feda 	bl	8011f2c <__aeabi_lmul>
 8015178:	2201      	movs	r2, #1
 801517a:	2300      	movs	r3, #0
 801517c:	1812      	adds	r2, r2, r0
 801517e:	414b      	adcs	r3, r1
 8015180:	0058      	lsls	r0, r3, #1
 8015182:	0840      	lsrs	r0, r0, #1
 8015184:	6122      	str	r2, [r4, #16]
 8015186:	6163      	str	r3, [r4, #20]
 8015188:	bd70      	pop	{r4, r5, r6, pc}
 801518a:	2018      	movs	r0, #24
 801518c:	f000 f950 	bl	8015430 <malloc>
 8015190:	1e04      	subs	r4, r0, #0
 8015192:	63a8      	str	r0, [r5, #56]	; 0x38
 8015194:	d00f      	beq.n	80151b6 <rand+0x56>
 8015196:	4b0e      	ldr	r3, [pc, #56]	; (80151d0 <rand+0x70>)
 8015198:	2201      	movs	r2, #1
 801519a:	6003      	str	r3, [r0, #0]
 801519c:	4b0d      	ldr	r3, [pc, #52]	; (80151d4 <rand+0x74>)
 801519e:	6043      	str	r3, [r0, #4]
 80151a0:	4b0d      	ldr	r3, [pc, #52]	; (80151d8 <rand+0x78>)
 80151a2:	6083      	str	r3, [r0, #8]
 80151a4:	230b      	movs	r3, #11
 80151a6:	8183      	strh	r3, [r0, #12]
 80151a8:	2300      	movs	r3, #0
 80151aa:	6102      	str	r2, [r0, #16]
 80151ac:	6143      	str	r3, [r0, #20]
 80151ae:	4807      	ldr	r0, [pc, #28]	; (80151cc <rand+0x6c>)
 80151b0:	4a0a      	ldr	r2, [pc, #40]	; (80151dc <rand+0x7c>)
 80151b2:	4b06      	ldr	r3, [pc, #24]	; (80151cc <rand+0x6c>)
 80151b4:	e7e6      	b.n	8015184 <rand+0x24>
 80151b6:	4b0a      	ldr	r3, [pc, #40]	; (80151e0 <rand+0x80>)
 80151b8:	2200      	movs	r2, #0
 80151ba:	214e      	movs	r1, #78	; 0x4e
 80151bc:	4809      	ldr	r0, [pc, #36]	; (80151e4 <rand+0x84>)
 80151be:	f7f3 fa1f 	bl	8008600 <__assert_func>
 80151c2:	46c0      	nop			; (mov r8, r8)
 80151c4:	200005dc 	.word	0x200005dc
 80151c8:	4c957f2d 	.word	0x4c957f2d
 80151cc:	5851f42d 	.word	0x5851f42d
 80151d0:	abcd330e 	.word	0xabcd330e
 80151d4:	e66d1234 	.word	0xe66d1234
 80151d8:	0005deec 	.word	0x0005deec
 80151dc:	4c957f2e 	.word	0x4c957f2e
 80151e0:	0801ada4 	.word	0x0801ada4
 80151e4:	0801adbc 	.word	0x0801adbc

080151e8 <_sbrk_r>:
 80151e8:	2300      	movs	r3, #0
 80151ea:	b570      	push	{r4, r5, r6, lr}
 80151ec:	4c06      	ldr	r4, [pc, #24]	; (8015208 <_sbrk_r+0x20>)
 80151ee:	0005      	movs	r5, r0
 80151f0:	0008      	movs	r0, r1
 80151f2:	6023      	str	r3, [r4, #0]
 80151f4:	f001 fb50 	bl	8016898 <_sbrk>
 80151f8:	1c43      	adds	r3, r0, #1
 80151fa:	d000      	beq.n	80151fe <_sbrk_r+0x16>
 80151fc:	bd70      	pop	{r4, r5, r6, pc}
 80151fe:	6823      	ldr	r3, [r4, #0]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d0fb      	beq.n	80151fc <_sbrk_r+0x14>
 8015204:	602b      	str	r3, [r5, #0]
 8015206:	e7f9      	b.n	80151fc <_sbrk_r+0x14>
 8015208:	200043d4 	.word	0x200043d4

0801520c <_siprintf_r>:
 801520c:	b40c      	push	{r2, r3}
 801520e:	b500      	push	{lr}
 8015210:	b09d      	sub	sp, #116	; 0x74
 8015212:	9102      	str	r1, [sp, #8]
 8015214:	9106      	str	r1, [sp, #24]
 8015216:	4909      	ldr	r1, [pc, #36]	; (801523c <_siprintf_r+0x30>)
 8015218:	ab1e      	add	r3, sp, #120	; 0x78
 801521a:	9107      	str	r1, [sp, #28]
 801521c:	9104      	str	r1, [sp, #16]
 801521e:	4908      	ldr	r1, [pc, #32]	; (8015240 <_siprintf_r+0x34>)
 8015220:	cb04      	ldmia	r3!, {r2}
 8015222:	9105      	str	r1, [sp, #20]
 8015224:	a902      	add	r1, sp, #8
 8015226:	9301      	str	r3, [sp, #4]
 8015228:	f000 fa0c 	bl	8015644 <_svfiprintf_r>
 801522c:	2300      	movs	r3, #0
 801522e:	9a02      	ldr	r2, [sp, #8]
 8015230:	7013      	strb	r3, [r2, #0]
 8015232:	b01d      	add	sp, #116	; 0x74
 8015234:	bc08      	pop	{r3}
 8015236:	b002      	add	sp, #8
 8015238:	4718      	bx	r3
 801523a:	46c0      	nop			; (mov r8, r8)
 801523c:	7fffffff 	.word	0x7fffffff
 8015240:	ffff0208 	.word	0xffff0208

08015244 <siprintf>:
 8015244:	b40e      	push	{r1, r2, r3}
 8015246:	b500      	push	{lr}
 8015248:	490b      	ldr	r1, [pc, #44]	; (8015278 <siprintf+0x34>)
 801524a:	b09c      	sub	sp, #112	; 0x70
 801524c:	9107      	str	r1, [sp, #28]
 801524e:	9104      	str	r1, [sp, #16]
 8015250:	490a      	ldr	r1, [pc, #40]	; (801527c <siprintf+0x38>)
 8015252:	ab1d      	add	r3, sp, #116	; 0x74
 8015254:	9105      	str	r1, [sp, #20]
 8015256:	490a      	ldr	r1, [pc, #40]	; (8015280 <siprintf+0x3c>)
 8015258:	cb04      	ldmia	r3!, {r2}
 801525a:	9002      	str	r0, [sp, #8]
 801525c:	9006      	str	r0, [sp, #24]
 801525e:	6808      	ldr	r0, [r1, #0]
 8015260:	a902      	add	r1, sp, #8
 8015262:	9301      	str	r3, [sp, #4]
 8015264:	f000 f9ee 	bl	8015644 <_svfiprintf_r>
 8015268:	2300      	movs	r3, #0
 801526a:	9a02      	ldr	r2, [sp, #8]
 801526c:	7013      	strb	r3, [r2, #0]
 801526e:	b01c      	add	sp, #112	; 0x70
 8015270:	bc08      	pop	{r3}
 8015272:	b003      	add	sp, #12
 8015274:	4718      	bx	r3
 8015276:	46c0      	nop			; (mov r8, r8)
 8015278:	7fffffff 	.word	0x7fffffff
 801527c:	ffff0208 	.word	0xffff0208
 8015280:	200005dc 	.word	0x200005dc

08015284 <__sread>:
 8015284:	b570      	push	{r4, r5, r6, lr}
 8015286:	000c      	movs	r4, r1
 8015288:	250e      	movs	r5, #14
 801528a:	5f49      	ldrsh	r1, [r1, r5]
 801528c:	f000 fed6 	bl	801603c <_read_r>
 8015290:	2800      	cmp	r0, #0
 8015292:	db03      	blt.n	801529c <__sread+0x18>
 8015294:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8015296:	181b      	adds	r3, r3, r0
 8015298:	6563      	str	r3, [r4, #84]	; 0x54
 801529a:	bd70      	pop	{r4, r5, r6, pc}
 801529c:	89a3      	ldrh	r3, [r4, #12]
 801529e:	4a02      	ldr	r2, [pc, #8]	; (80152a8 <__sread+0x24>)
 80152a0:	4013      	ands	r3, r2
 80152a2:	81a3      	strh	r3, [r4, #12]
 80152a4:	e7f9      	b.n	801529a <__sread+0x16>
 80152a6:	46c0      	nop			; (mov r8, r8)
 80152a8:	ffffefff 	.word	0xffffefff

080152ac <__seofread>:
 80152ac:	2000      	movs	r0, #0
 80152ae:	4770      	bx	lr

080152b0 <__swrite>:
 80152b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152b2:	0016      	movs	r6, r2
 80152b4:	001f      	movs	r7, r3
 80152b6:	220c      	movs	r2, #12
 80152b8:	5e8b      	ldrsh	r3, [r1, r2]
 80152ba:	000c      	movs	r4, r1
 80152bc:	0005      	movs	r5, r0
 80152be:	220e      	movs	r2, #14
 80152c0:	5e89      	ldrsh	r1, [r1, r2]
 80152c2:	05da      	lsls	r2, r3, #23
 80152c4:	d408      	bmi.n	80152d8 <__swrite+0x28>
 80152c6:	4a09      	ldr	r2, [pc, #36]	; (80152ec <__swrite+0x3c>)
 80152c8:	0028      	movs	r0, r5
 80152ca:	4013      	ands	r3, r2
 80152cc:	81a3      	strh	r3, [r4, #12]
 80152ce:	0032      	movs	r2, r6
 80152d0:	003b      	movs	r3, r7
 80152d2:	f000 f873 	bl	80153bc <_write_r>
 80152d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152d8:	2200      	movs	r2, #0
 80152da:	2302      	movs	r3, #2
 80152dc:	f000 f894 	bl	8015408 <_lseek_r>
 80152e0:	220c      	movs	r2, #12
 80152e2:	5ea3      	ldrsh	r3, [r4, r2]
 80152e4:	220e      	movs	r2, #14
 80152e6:	5ea1      	ldrsh	r1, [r4, r2]
 80152e8:	e7ed      	b.n	80152c6 <__swrite+0x16>
 80152ea:	46c0      	nop			; (mov r8, r8)
 80152ec:	ffffefff 	.word	0xffffefff

080152f0 <__sseek>:
 80152f0:	b570      	push	{r4, r5, r6, lr}
 80152f2:	000c      	movs	r4, r1
 80152f4:	250e      	movs	r5, #14
 80152f6:	5f49      	ldrsh	r1, [r1, r5]
 80152f8:	f000 f886 	bl	8015408 <_lseek_r>
 80152fc:	1c43      	adds	r3, r0, #1
 80152fe:	d006      	beq.n	801530e <__sseek+0x1e>
 8015300:	2380      	movs	r3, #128	; 0x80
 8015302:	89a2      	ldrh	r2, [r4, #12]
 8015304:	015b      	lsls	r3, r3, #5
 8015306:	4313      	orrs	r3, r2
 8015308:	81a3      	strh	r3, [r4, #12]
 801530a:	6560      	str	r0, [r4, #84]	; 0x54
 801530c:	bd70      	pop	{r4, r5, r6, pc}
 801530e:	89a3      	ldrh	r3, [r4, #12]
 8015310:	4a01      	ldr	r2, [pc, #4]	; (8015318 <__sseek+0x28>)
 8015312:	4013      	ands	r3, r2
 8015314:	81a3      	strh	r3, [r4, #12]
 8015316:	e7f9      	b.n	801530c <__sseek+0x1c>
 8015318:	ffffefff 	.word	0xffffefff

0801531c <__sclose>:
 801531c:	b510      	push	{r4, lr}
 801531e:	230e      	movs	r3, #14
 8015320:	5ec9      	ldrsh	r1, [r1, r3]
 8015322:	f000 f85f 	bl	80153e4 <_close_r>
 8015326:	bd10      	pop	{r4, pc}

08015328 <strcpy>:
 8015328:	0003      	movs	r3, r0
 801532a:	780a      	ldrb	r2, [r1, #0]
 801532c:	3101      	adds	r1, #1
 801532e:	701a      	strb	r2, [r3, #0]
 8015330:	3301      	adds	r3, #1
 8015332:	2a00      	cmp	r2, #0
 8015334:	d1f9      	bne.n	801532a <strcpy+0x2>
 8015336:	4770      	bx	lr

08015338 <strnlen>:
 8015338:	b510      	push	{r4, lr}
 801533a:	2900      	cmp	r1, #0
 801533c:	d00b      	beq.n	8015356 <strnlen+0x1e>
 801533e:	7803      	ldrb	r3, [r0, #0]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d00c      	beq.n	801535e <strnlen+0x26>
 8015344:	1844      	adds	r4, r0, r1
 8015346:	0003      	movs	r3, r0
 8015348:	e002      	b.n	8015350 <strnlen+0x18>
 801534a:	781a      	ldrb	r2, [r3, #0]
 801534c:	2a00      	cmp	r2, #0
 801534e:	d004      	beq.n	801535a <strnlen+0x22>
 8015350:	3301      	adds	r3, #1
 8015352:	42a3      	cmp	r3, r4
 8015354:	d1f9      	bne.n	801534a <strnlen+0x12>
 8015356:	0008      	movs	r0, r1
 8015358:	bd10      	pop	{r4, pc}
 801535a:	1a19      	subs	r1, r3, r0
 801535c:	e7fb      	b.n	8015356 <strnlen+0x1e>
 801535e:	2100      	movs	r1, #0
 8015360:	e7f9      	b.n	8015356 <strnlen+0x1e>
 8015362:	46c0      	nop			; (mov r8, r8)

08015364 <viprintf>:
 8015364:	4b0a      	ldr	r3, [pc, #40]	; (8015390 <viprintf+0x2c>)
 8015366:	b570      	push	{r4, r5, r6, lr}
 8015368:	681c      	ldr	r4, [r3, #0]
 801536a:	0005      	movs	r5, r0
 801536c:	000e      	movs	r6, r1
 801536e:	2c00      	cmp	r4, #0
 8015370:	d002      	beq.n	8015378 <viprintf+0x14>
 8015372:	69a3      	ldr	r3, [r4, #24]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d006      	beq.n	8015386 <viprintf+0x22>
 8015378:	0033      	movs	r3, r6
 801537a:	002a      	movs	r2, r5
 801537c:	68a1      	ldr	r1, [r4, #8]
 801537e:	0020      	movs	r0, r4
 8015380:	f000 fae6 	bl	8015950 <_vfiprintf_r>
 8015384:	bd70      	pop	{r4, r5, r6, pc}
 8015386:	0020      	movs	r0, r4
 8015388:	f7ff fc68 	bl	8014c5c <__sinit>
 801538c:	e7f4      	b.n	8015378 <viprintf+0x14>
 801538e:	46c0      	nop			; (mov r8, r8)
 8015390:	200005dc 	.word	0x200005dc

08015394 <_viprintf_r>:
 8015394:	b570      	push	{r4, r5, r6, lr}
 8015396:	0004      	movs	r4, r0
 8015398:	000d      	movs	r5, r1
 801539a:	0016      	movs	r6, r2
 801539c:	2800      	cmp	r0, #0
 801539e:	d002      	beq.n	80153a6 <_viprintf_r+0x12>
 80153a0:	6983      	ldr	r3, [r0, #24]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d006      	beq.n	80153b4 <_viprintf_r+0x20>
 80153a6:	0033      	movs	r3, r6
 80153a8:	002a      	movs	r2, r5
 80153aa:	68a1      	ldr	r1, [r4, #8]
 80153ac:	0020      	movs	r0, r4
 80153ae:	f000 facf 	bl	8015950 <_vfiprintf_r>
 80153b2:	bd70      	pop	{r4, r5, r6, pc}
 80153b4:	f7ff fc52 	bl	8014c5c <__sinit>
 80153b8:	e7f5      	b.n	80153a6 <_viprintf_r+0x12>
 80153ba:	46c0      	nop			; (mov r8, r8)

080153bc <_write_r>:
 80153bc:	b570      	push	{r4, r5, r6, lr}
 80153be:	0005      	movs	r5, r0
 80153c0:	0008      	movs	r0, r1
 80153c2:	0011      	movs	r1, r2
 80153c4:	2200      	movs	r2, #0
 80153c6:	4c06      	ldr	r4, [pc, #24]	; (80153e0 <_write_r+0x24>)
 80153c8:	6022      	str	r2, [r4, #0]
 80153ca:	001a      	movs	r2, r3
 80153cc:	f7f3 f911 	bl	80085f2 <_write>
 80153d0:	1c43      	adds	r3, r0, #1
 80153d2:	d000      	beq.n	80153d6 <_write_r+0x1a>
 80153d4:	bd70      	pop	{r4, r5, r6, pc}
 80153d6:	6823      	ldr	r3, [r4, #0]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d0fb      	beq.n	80153d4 <_write_r+0x18>
 80153dc:	602b      	str	r3, [r5, #0]
 80153de:	e7f9      	b.n	80153d4 <_write_r+0x18>
 80153e0:	200043d4 	.word	0x200043d4

080153e4 <_close_r>:
 80153e4:	2300      	movs	r3, #0
 80153e6:	b570      	push	{r4, r5, r6, lr}
 80153e8:	4c06      	ldr	r4, [pc, #24]	; (8015404 <_close_r+0x20>)
 80153ea:	0005      	movs	r5, r0
 80153ec:	0008      	movs	r0, r1
 80153ee:	6023      	str	r3, [r4, #0]
 80153f0:	f001 fa2a 	bl	8016848 <_close>
 80153f4:	1c43      	adds	r3, r0, #1
 80153f6:	d000      	beq.n	80153fa <_close_r+0x16>
 80153f8:	bd70      	pop	{r4, r5, r6, pc}
 80153fa:	6823      	ldr	r3, [r4, #0]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d0fb      	beq.n	80153f8 <_close_r+0x14>
 8015400:	602b      	str	r3, [r5, #0]
 8015402:	e7f9      	b.n	80153f8 <_close_r+0x14>
 8015404:	200043d4 	.word	0x200043d4

08015408 <_lseek_r>:
 8015408:	b570      	push	{r4, r5, r6, lr}
 801540a:	0005      	movs	r5, r0
 801540c:	0008      	movs	r0, r1
 801540e:	0011      	movs	r1, r2
 8015410:	2200      	movs	r2, #0
 8015412:	4c06      	ldr	r4, [pc, #24]	; (801542c <_lseek_r+0x24>)
 8015414:	6022      	str	r2, [r4, #0]
 8015416:	001a      	movs	r2, r3
 8015418:	f001 fa2e 	bl	8016878 <_lseek>
 801541c:	1c43      	adds	r3, r0, #1
 801541e:	d000      	beq.n	8015422 <_lseek_r+0x1a>
 8015420:	bd70      	pop	{r4, r5, r6, pc}
 8015422:	6823      	ldr	r3, [r4, #0]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d0fb      	beq.n	8015420 <_lseek_r+0x18>
 8015428:	602b      	str	r3, [r5, #0]
 801542a:	e7f9      	b.n	8015420 <_lseek_r+0x18>
 801542c:	200043d4 	.word	0x200043d4

08015430 <malloc>:
 8015430:	b510      	push	{r4, lr}
 8015432:	4b03      	ldr	r3, [pc, #12]	; (8015440 <malloc+0x10>)
 8015434:	0001      	movs	r1, r0
 8015436:	6818      	ldr	r0, [r3, #0]
 8015438:	f7ff fdc8 	bl	8014fcc <_malloc_r>
 801543c:	bd10      	pop	{r4, pc}
 801543e:	46c0      	nop			; (mov r8, r8)
 8015440:	200005dc 	.word	0x200005dc

08015444 <free>:
 8015444:	b510      	push	{r4, lr}
 8015446:	4b03      	ldr	r3, [pc, #12]	; (8015454 <free+0x10>)
 8015448:	0001      	movs	r1, r0
 801544a:	6818      	ldr	r0, [r3, #0]
 801544c:	f7ff fd68 	bl	8014f20 <_free_r>
 8015450:	bd10      	pop	{r4, pc}
 8015452:	46c0      	nop			; (mov r8, r8)
 8015454:	200005dc 	.word	0x200005dc

08015458 <__malloc_lock>:
 8015458:	4770      	bx	lr
 801545a:	46c0      	nop			; (mov r8, r8)

0801545c <__malloc_unlock>:
 801545c:	4770      	bx	lr
 801545e:	46c0      	nop			; (mov r8, r8)

08015460 <__ssputs_r>:
 8015460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015462:	4646      	mov	r6, r8
 8015464:	464f      	mov	r7, r9
 8015466:	46d6      	mov	lr, sl
 8015468:	b5c0      	push	{r6, r7, lr}
 801546a:	688e      	ldr	r6, [r1, #8]
 801546c:	4681      	mov	r9, r0
 801546e:	000c      	movs	r4, r1
 8015470:	4690      	mov	r8, r2
 8015472:	001d      	movs	r5, r3
 8015474:	6808      	ldr	r0, [r1, #0]
 8015476:	429e      	cmp	r6, r3
 8015478:	d839      	bhi.n	80154ee <__ssputs_r+0x8e>
 801547a:	2290      	movs	r2, #144	; 0x90
 801547c:	898b      	ldrh	r3, [r1, #12]
 801547e:	00d2      	lsls	r2, r2, #3
 8015480:	4213      	tst	r3, r2
 8015482:	d111      	bne.n	80154a8 <__ssputs_r+0x48>
 8015484:	0035      	movs	r5, r6
 8015486:	002a      	movs	r2, r5
 8015488:	4641      	mov	r1, r8
 801548a:	f001 f927 	bl	80166dc <memmove>
 801548e:	68a3      	ldr	r3, [r4, #8]
 8015490:	2000      	movs	r0, #0
 8015492:	1b9e      	subs	r6, r3, r6
 8015494:	6823      	ldr	r3, [r4, #0]
 8015496:	60a6      	str	r6, [r4, #8]
 8015498:	469c      	mov	ip, r3
 801549a:	4465      	add	r5, ip
 801549c:	6025      	str	r5, [r4, #0]
 801549e:	bc1c      	pop	{r2, r3, r4}
 80154a0:	4690      	mov	r8, r2
 80154a2:	4699      	mov	r9, r3
 80154a4:	46a2      	mov	sl, r4
 80154a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154a8:	6909      	ldr	r1, [r1, #16]
 80154aa:	1a42      	subs	r2, r0, r1
 80154ac:	4692      	mov	sl, r2
 80154ae:	6962      	ldr	r2, [r4, #20]
 80154b0:	1c68      	adds	r0, r5, #1
 80154b2:	0057      	lsls	r7, r2, #1
 80154b4:	18bf      	adds	r7, r7, r2
 80154b6:	0ffa      	lsrs	r2, r7, #31
 80154b8:	19d7      	adds	r7, r2, r7
 80154ba:	107f      	asrs	r7, r7, #1
 80154bc:	4450      	add	r0, sl
 80154be:	003a      	movs	r2, r7
 80154c0:	42b8      	cmp	r0, r7
 80154c2:	d901      	bls.n	80154c8 <__ssputs_r+0x68>
 80154c4:	0007      	movs	r7, r0
 80154c6:	0002      	movs	r2, r0
 80154c8:	055b      	lsls	r3, r3, #21
 80154ca:	d512      	bpl.n	80154f2 <__ssputs_r+0x92>
 80154cc:	0011      	movs	r1, r2
 80154ce:	4648      	mov	r0, r9
 80154d0:	f7ff fd7c 	bl	8014fcc <_malloc_r>
 80154d4:	1e06      	subs	r6, r0, #0
 80154d6:	d01f      	beq.n	8015518 <__ssputs_r+0xb8>
 80154d8:	4652      	mov	r2, sl
 80154da:	6921      	ldr	r1, [r4, #16]
 80154dc:	f7ff fc78 	bl	8014dd0 <memcpy>
 80154e0:	89a3      	ldrh	r3, [r4, #12]
 80154e2:	4a12      	ldr	r2, [pc, #72]	; (801552c <__ssputs_r+0xcc>)
 80154e4:	4013      	ands	r3, r2
 80154e6:	2280      	movs	r2, #128	; 0x80
 80154e8:	4313      	orrs	r3, r2
 80154ea:	81a3      	strh	r3, [r4, #12]
 80154ec:	e006      	b.n	80154fc <__ssputs_r+0x9c>
 80154ee:	001e      	movs	r6, r3
 80154f0:	e7c9      	b.n	8015486 <__ssputs_r+0x26>
 80154f2:	4648      	mov	r0, r9
 80154f4:	f001 f950 	bl	8016798 <_realloc_r>
 80154f8:	1e06      	subs	r6, r0, #0
 80154fa:	d009      	beq.n	8015510 <__ssputs_r+0xb0>
 80154fc:	0030      	movs	r0, r6
 80154fe:	4653      	mov	r3, sl
 8015500:	4450      	add	r0, sl
 8015502:	6167      	str	r7, [r4, #20]
 8015504:	1aff      	subs	r7, r7, r3
 8015506:	6126      	str	r6, [r4, #16]
 8015508:	6020      	str	r0, [r4, #0]
 801550a:	002e      	movs	r6, r5
 801550c:	60a7      	str	r7, [r4, #8]
 801550e:	e7ba      	b.n	8015486 <__ssputs_r+0x26>
 8015510:	6921      	ldr	r1, [r4, #16]
 8015512:	4648      	mov	r0, r9
 8015514:	f7ff fd04 	bl	8014f20 <_free_r>
 8015518:	230c      	movs	r3, #12
 801551a:	464a      	mov	r2, r9
 801551c:	6013      	str	r3, [r2, #0]
 801551e:	2240      	movs	r2, #64	; 0x40
 8015520:	2001      	movs	r0, #1
 8015522:	89a3      	ldrh	r3, [r4, #12]
 8015524:	4240      	negs	r0, r0
 8015526:	4313      	orrs	r3, r2
 8015528:	81a3      	strh	r3, [r4, #12]
 801552a:	e7b8      	b.n	801549e <__ssputs_r+0x3e>
 801552c:	fffffb7f 	.word	0xfffffb7f

08015530 <__ssprint_r>:
 8015530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015532:	464e      	mov	r6, r9
 8015534:	4645      	mov	r5, r8
 8015536:	46de      	mov	lr, fp
 8015538:	4657      	mov	r7, sl
 801553a:	b5e0      	push	{r5, r6, r7, lr}
 801553c:	6893      	ldr	r3, [r2, #8]
 801553e:	b083      	sub	sp, #12
 8015540:	9001      	str	r0, [sp, #4]
 8015542:	000d      	movs	r5, r1
 8015544:	4691      	mov	r9, r2
 8015546:	2b00      	cmp	r3, #0
 8015548:	d06b      	beq.n	8015622 <__ssprint_r+0xf2>
 801554a:	6817      	ldr	r7, [r2, #0]
 801554c:	6808      	ldr	r0, [r1, #0]
 801554e:	688c      	ldr	r4, [r1, #8]
 8015550:	e044      	b.n	80155dc <__ssprint_r+0xac>
 8015552:	2290      	movs	r2, #144	; 0x90
 8015554:	89ab      	ldrh	r3, [r5, #12]
 8015556:	00d2      	lsls	r2, r2, #3
 8015558:	4213      	tst	r3, r2
 801555a:	d02e      	beq.n	80155ba <__ssprint_r+0x8a>
 801555c:	6929      	ldr	r1, [r5, #16]
 801555e:	1a42      	subs	r2, r0, r1
 8015560:	4693      	mov	fp, r2
 8015562:	6968      	ldr	r0, [r5, #20]
 8015564:	0042      	lsls	r2, r0, #1
 8015566:	1812      	adds	r2, r2, r0
 8015568:	0fd0      	lsrs	r0, r2, #31
 801556a:	1882      	adds	r2, r0, r2
 801556c:	1c70      	adds	r0, r6, #1
 801556e:	1052      	asrs	r2, r2, #1
 8015570:	4458      	add	r0, fp
 8015572:	4690      	mov	r8, r2
 8015574:	4290      	cmp	r0, r2
 8015576:	d901      	bls.n	801557c <__ssprint_r+0x4c>
 8015578:	4680      	mov	r8, r0
 801557a:	0002      	movs	r2, r0
 801557c:	2080      	movs	r0, #128	; 0x80
 801557e:	00c0      	lsls	r0, r0, #3
 8015580:	4203      	tst	r3, r0
 8015582:	d037      	beq.n	80155f4 <__ssprint_r+0xc4>
 8015584:	0011      	movs	r1, r2
 8015586:	9801      	ldr	r0, [sp, #4]
 8015588:	f7ff fd20 	bl	8014fcc <_malloc_r>
 801558c:	1e04      	subs	r4, r0, #0
 801558e:	d053      	beq.n	8015638 <__ssprint_r+0x108>
 8015590:	465a      	mov	r2, fp
 8015592:	6929      	ldr	r1, [r5, #16]
 8015594:	f7ff fc1c 	bl	8014dd0 <memcpy>
 8015598:	89ab      	ldrh	r3, [r5, #12]
 801559a:	4a29      	ldr	r2, [pc, #164]	; (8015640 <__ssprint_r+0x110>)
 801559c:	4013      	ands	r3, r2
 801559e:	2280      	movs	r2, #128	; 0x80
 80155a0:	4313      	orrs	r3, r2
 80155a2:	81ab      	strh	r3, [r5, #12]
 80155a4:	4643      	mov	r3, r8
 80155a6:	0020      	movs	r0, r4
 80155a8:	465a      	mov	r2, fp
 80155aa:	612c      	str	r4, [r5, #16]
 80155ac:	46b0      	mov	r8, r6
 80155ae:	0034      	movs	r4, r6
 80155b0:	4458      	add	r0, fp
 80155b2:	616b      	str	r3, [r5, #20]
 80155b4:	1a9b      	subs	r3, r3, r2
 80155b6:	6028      	str	r0, [r5, #0]
 80155b8:	60ab      	str	r3, [r5, #8]
 80155ba:	4642      	mov	r2, r8
 80155bc:	4651      	mov	r1, sl
 80155be:	f001 f88d 	bl	80166dc <memmove>
 80155c2:	68ab      	ldr	r3, [r5, #8]
 80155c4:	1b1c      	subs	r4, r3, r4
 80155c6:	682b      	ldr	r3, [r5, #0]
 80155c8:	60ac      	str	r4, [r5, #8]
 80155ca:	4443      	add	r3, r8
 80155cc:	602b      	str	r3, [r5, #0]
 80155ce:	0018      	movs	r0, r3
 80155d0:	464b      	mov	r3, r9
 80155d2:	689b      	ldr	r3, [r3, #8]
 80155d4:	1b9e      	subs	r6, r3, r6
 80155d6:	464b      	mov	r3, r9
 80155d8:	609e      	str	r6, [r3, #8]
 80155da:	d022      	beq.n	8015622 <__ssprint_r+0xf2>
 80155dc:	683b      	ldr	r3, [r7, #0]
 80155de:	687e      	ldr	r6, [r7, #4]
 80155e0:	469a      	mov	sl, r3
 80155e2:	3708      	adds	r7, #8
 80155e4:	46a0      	mov	r8, r4
 80155e6:	2e00      	cmp	r6, #0
 80155e8:	d0f8      	beq.n	80155dc <__ssprint_r+0xac>
 80155ea:	42a6      	cmp	r6, r4
 80155ec:	d2b1      	bcs.n	8015552 <__ssprint_r+0x22>
 80155ee:	0034      	movs	r4, r6
 80155f0:	46b0      	mov	r8, r6
 80155f2:	e7e2      	b.n	80155ba <__ssprint_r+0x8a>
 80155f4:	9801      	ldr	r0, [sp, #4]
 80155f6:	f001 f8cf 	bl	8016798 <_realloc_r>
 80155fa:	1e04      	subs	r4, r0, #0
 80155fc:	d1d2      	bne.n	80155a4 <__ssprint_r+0x74>
 80155fe:	9c01      	ldr	r4, [sp, #4]
 8015600:	6929      	ldr	r1, [r5, #16]
 8015602:	0020      	movs	r0, r4
 8015604:	f7ff fc8c 	bl	8014f20 <_free_r>
 8015608:	230c      	movs	r3, #12
 801560a:	6023      	str	r3, [r4, #0]
 801560c:	2240      	movs	r2, #64	; 0x40
 801560e:	89ab      	ldrh	r3, [r5, #12]
 8015610:	2001      	movs	r0, #1
 8015612:	4313      	orrs	r3, r2
 8015614:	81ab      	strh	r3, [r5, #12]
 8015616:	464a      	mov	r2, r9
 8015618:	2300      	movs	r3, #0
 801561a:	4240      	negs	r0, r0
 801561c:	6093      	str	r3, [r2, #8]
 801561e:	6053      	str	r3, [r2, #4]
 8015620:	e003      	b.n	801562a <__ssprint_r+0xfa>
 8015622:	2300      	movs	r3, #0
 8015624:	464a      	mov	r2, r9
 8015626:	2000      	movs	r0, #0
 8015628:	6053      	str	r3, [r2, #4]
 801562a:	b003      	add	sp, #12
 801562c:	bc3c      	pop	{r2, r3, r4, r5}
 801562e:	4690      	mov	r8, r2
 8015630:	4699      	mov	r9, r3
 8015632:	46a2      	mov	sl, r4
 8015634:	46ab      	mov	fp, r5
 8015636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015638:	230c      	movs	r3, #12
 801563a:	9a01      	ldr	r2, [sp, #4]
 801563c:	6013      	str	r3, [r2, #0]
 801563e:	e7e5      	b.n	801560c <__ssprint_r+0xdc>
 8015640:	fffffb7f 	.word	0xfffffb7f

08015644 <_svfiprintf_r>:
 8015644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015646:	464e      	mov	r6, r9
 8015648:	46de      	mov	lr, fp
 801564a:	4657      	mov	r7, sl
 801564c:	4645      	mov	r5, r8
 801564e:	b5e0      	push	{r5, r6, r7, lr}
 8015650:	b0a1      	sub	sp, #132	; 0x84
 8015652:	9004      	str	r0, [sp, #16]
 8015654:	9103      	str	r1, [sp, #12]
 8015656:	001c      	movs	r4, r3
 8015658:	898b      	ldrh	r3, [r1, #12]
 801565a:	4691      	mov	r9, r2
 801565c:	061b      	lsls	r3, r3, #24
 801565e:	d504      	bpl.n	801566a <_svfiprintf_r+0x26>
 8015660:	690b      	ldr	r3, [r1, #16]
 8015662:	9305      	str	r3, [sp, #20]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d100      	bne.n	801566a <_svfiprintf_r+0x26>
 8015668:	e119      	b.n	801589e <_svfiprintf_r+0x25a>
 801566a:	2300      	movs	r3, #0
 801566c:	ad08      	add	r5, sp, #32
 801566e:	616b      	str	r3, [r5, #20]
 8015670:	3320      	adds	r3, #32
 8015672:	766b      	strb	r3, [r5, #25]
 8015674:	3310      	adds	r3, #16
 8015676:	76ab      	strb	r3, [r5, #26]
 8015678:	3b2f      	subs	r3, #47	; 0x2f
 801567a:	4698      	mov	r8, r3
 801567c:	464b      	mov	r3, r9
 801567e:	781b      	ldrb	r3, [r3, #0]
 8015680:	9407      	str	r4, [sp, #28]
 8015682:	4f92      	ldr	r7, [pc, #584]	; (80158cc <_svfiprintf_r+0x288>)
 8015684:	2b00      	cmp	r3, #0
 8015686:	d100      	bne.n	801568a <_svfiprintf_r+0x46>
 8015688:	e086      	b.n	8015798 <_svfiprintf_r+0x154>
 801568a:	2b25      	cmp	r3, #37	; 0x25
 801568c:	d100      	bne.n	8015690 <_svfiprintf_r+0x4c>
 801568e:	e104      	b.n	801589a <_svfiprintf_r+0x256>
 8015690:	464e      	mov	r6, r9
 8015692:	e003      	b.n	801569c <_svfiprintf_r+0x58>
 8015694:	2b25      	cmp	r3, #37	; 0x25
 8015696:	d100      	bne.n	801569a <_svfiprintf_r+0x56>
 8015698:	e08b      	b.n	80157b2 <_svfiprintf_r+0x16e>
 801569a:	0026      	movs	r6, r4
 801569c:	7873      	ldrb	r3, [r6, #1]
 801569e:	1c74      	adds	r4, r6, #1
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d1f7      	bne.n	8015694 <_svfiprintf_r+0x50>
 80156a4:	464b      	mov	r3, r9
 80156a6:	1ae3      	subs	r3, r4, r3
 80156a8:	469a      	mov	sl, r3
 80156aa:	d075      	beq.n	8015798 <_svfiprintf_r+0x154>
 80156ac:	4653      	mov	r3, sl
 80156ae:	464a      	mov	r2, r9
 80156b0:	9903      	ldr	r1, [sp, #12]
 80156b2:	9804      	ldr	r0, [sp, #16]
 80156b4:	f7ff fed4 	bl	8015460 <__ssputs_r>
 80156b8:	1c43      	adds	r3, r0, #1
 80156ba:	d06d      	beq.n	8015798 <_svfiprintf_r+0x154>
 80156bc:	696b      	ldr	r3, [r5, #20]
 80156be:	4453      	add	r3, sl
 80156c0:	616b      	str	r3, [r5, #20]
 80156c2:	7873      	ldrb	r3, [r6, #1]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d067      	beq.n	8015798 <_svfiprintf_r+0x154>
 80156c8:	2201      	movs	r2, #1
 80156ca:	2300      	movs	r3, #0
 80156cc:	4252      	negs	r2, r2
 80156ce:	606a      	str	r2, [r5, #4]
 80156d0:	3244      	adds	r2, #68	; 0x44
 80156d2:	3401      	adds	r4, #1
 80156d4:	602b      	str	r3, [r5, #0]
 80156d6:	60eb      	str	r3, [r5, #12]
 80156d8:	60ab      	str	r3, [r5, #8]
 80156da:	54ab      	strb	r3, [r5, r2]
 80156dc:	65ab      	str	r3, [r5, #88]	; 0x58
 80156de:	e006      	b.n	80156ee <_svfiprintf_r+0xaa>
 80156e0:	4643      	mov	r3, r8
 80156e2:	1bc0      	subs	r0, r0, r7
 80156e4:	4083      	lsls	r3, r0
 80156e6:	0034      	movs	r4, r6
 80156e8:	682a      	ldr	r2, [r5, #0]
 80156ea:	4313      	orrs	r3, r2
 80156ec:	602b      	str	r3, [r5, #0]
 80156ee:	7821      	ldrb	r1, [r4, #0]
 80156f0:	2205      	movs	r2, #5
 80156f2:	0038      	movs	r0, r7
 80156f4:	f000 ffb2 	bl	801665c <memchr>
 80156f8:	1c66      	adds	r6, r4, #1
 80156fa:	2800      	cmp	r0, #0
 80156fc:	d1f0      	bne.n	80156e0 <_svfiprintf_r+0x9c>
 80156fe:	682b      	ldr	r3, [r5, #0]
 8015700:	46b2      	mov	sl, r6
 8015702:	06da      	lsls	r2, r3, #27
 8015704:	d502      	bpl.n	801570c <_svfiprintf_r+0xc8>
 8015706:	2243      	movs	r2, #67	; 0x43
 8015708:	2120      	movs	r1, #32
 801570a:	54a9      	strb	r1, [r5, r2]
 801570c:	071a      	lsls	r2, r3, #28
 801570e:	d502      	bpl.n	8015716 <_svfiprintf_r+0xd2>
 8015710:	2243      	movs	r2, #67	; 0x43
 8015712:	212b      	movs	r1, #43	; 0x2b
 8015714:	54a9      	strb	r1, [r5, r2]
 8015716:	7821      	ldrb	r1, [r4, #0]
 8015718:	292a      	cmp	r1, #42	; 0x2a
 801571a:	d150      	bne.n	80157be <_svfiprintf_r+0x17a>
 801571c:	9a07      	ldr	r2, [sp, #28]
 801571e:	1d11      	adds	r1, r2, #4
 8015720:	6812      	ldr	r2, [r2, #0]
 8015722:	9107      	str	r1, [sp, #28]
 8015724:	2a00      	cmp	r2, #0
 8015726:	da00      	bge.n	801572a <_svfiprintf_r+0xe6>
 8015728:	e09a      	b.n	8015860 <_svfiprintf_r+0x21c>
 801572a:	60ea      	str	r2, [r5, #12]
 801572c:	7861      	ldrb	r1, [r4, #1]
 801572e:	1ca6      	adds	r6, r4, #2
 8015730:	292e      	cmp	r1, #46	; 0x2e
 8015732:	d05c      	beq.n	80157ee <_svfiprintf_r+0x1aa>
 8015734:	4b66      	ldr	r3, [pc, #408]	; (80158d0 <_svfiprintf_r+0x28c>)
 8015736:	2203      	movs	r2, #3
 8015738:	0018      	movs	r0, r3
 801573a:	4699      	mov	r9, r3
 801573c:	f000 ff8e 	bl	801665c <memchr>
 8015740:	2800      	cmp	r0, #0
 8015742:	d100      	bne.n	8015746 <_svfiprintf_r+0x102>
 8015744:	e071      	b.n	801582a <_svfiprintf_r+0x1e6>
 8015746:	464b      	mov	r3, r9
 8015748:	1ac0      	subs	r0, r0, r3
 801574a:	2340      	movs	r3, #64	; 0x40
 801574c:	4083      	lsls	r3, r0
 801574e:	682a      	ldr	r2, [r5, #0]
 8015750:	7831      	ldrb	r1, [r6, #0]
 8015752:	4313      	orrs	r3, r2
 8015754:	602b      	str	r3, [r5, #0]
 8015756:	2206      	movs	r2, #6
 8015758:	1c73      	adds	r3, r6, #1
 801575a:	485e      	ldr	r0, [pc, #376]	; (80158d4 <_svfiprintf_r+0x290>)
 801575c:	4699      	mov	r9, r3
 801575e:	7629      	strb	r1, [r5, #24]
 8015760:	f000 ff7c 	bl	801665c <memchr>
 8015764:	2800      	cmp	r0, #0
 8015766:	d06a      	beq.n	801583e <_svfiprintf_r+0x1fa>
 8015768:	4b5b      	ldr	r3, [pc, #364]	; (80158d8 <_svfiprintf_r+0x294>)
 801576a:	2b00      	cmp	r3, #0
 801576c:	d100      	bne.n	8015770 <_svfiprintf_r+0x12c>
 801576e:	e070      	b.n	8015852 <_svfiprintf_r+0x20e>
 8015770:	ab07      	add	r3, sp, #28
 8015772:	9300      	str	r3, [sp, #0]
 8015774:	9a03      	ldr	r2, [sp, #12]
 8015776:	4b59      	ldr	r3, [pc, #356]	; (80158dc <_svfiprintf_r+0x298>)
 8015778:	0029      	movs	r1, r5
 801577a:	9804      	ldr	r0, [sp, #16]
 801577c:	e000      	b.n	8015780 <_svfiprintf_r+0x13c>
 801577e:	bf00      	nop
 8015780:	4683      	mov	fp, r0
 8015782:	465b      	mov	r3, fp
 8015784:	3301      	adds	r3, #1
 8015786:	d007      	beq.n	8015798 <_svfiprintf_r+0x154>
 8015788:	696b      	ldr	r3, [r5, #20]
 801578a:	445b      	add	r3, fp
 801578c:	616b      	str	r3, [r5, #20]
 801578e:	464b      	mov	r3, r9
 8015790:	781b      	ldrb	r3, [r3, #0]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d000      	beq.n	8015798 <_svfiprintf_r+0x154>
 8015796:	e778      	b.n	801568a <_svfiprintf_r+0x46>
 8015798:	9b03      	ldr	r3, [sp, #12]
 801579a:	899b      	ldrh	r3, [r3, #12]
 801579c:	065b      	lsls	r3, r3, #25
 801579e:	d500      	bpl.n	80157a2 <_svfiprintf_r+0x15e>
 80157a0:	e08c      	b.n	80158bc <_svfiprintf_r+0x278>
 80157a2:	6968      	ldr	r0, [r5, #20]
 80157a4:	b021      	add	sp, #132	; 0x84
 80157a6:	bc3c      	pop	{r2, r3, r4, r5}
 80157a8:	4690      	mov	r8, r2
 80157aa:	4699      	mov	r9, r3
 80157ac:	46a2      	mov	sl, r4
 80157ae:	46ab      	mov	fp, r5
 80157b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157b2:	464b      	mov	r3, r9
 80157b4:	1ae3      	subs	r3, r4, r3
 80157b6:	469a      	mov	sl, r3
 80157b8:	d100      	bne.n	80157bc <_svfiprintf_r+0x178>
 80157ba:	e785      	b.n	80156c8 <_svfiprintf_r+0x84>
 80157bc:	e776      	b.n	80156ac <_svfiprintf_r+0x68>
 80157be:	000a      	movs	r2, r1
 80157c0:	3a30      	subs	r2, #48	; 0x30
 80157c2:	46a2      	mov	sl, r4
 80157c4:	2a09      	cmp	r2, #9
 80157c6:	d8b3      	bhi.n	8015730 <_svfiprintf_r+0xec>
 80157c8:	68eb      	ldr	r3, [r5, #12]
 80157ca:	0018      	movs	r0, r3
 80157cc:	e001      	b.n	80157d2 <_svfiprintf_r+0x18e>
 80157ce:	0034      	movs	r4, r6
 80157d0:	3601      	adds	r6, #1
 80157d2:	0083      	lsls	r3, r0, #2
 80157d4:	181b      	adds	r3, r3, r0
 80157d6:	7831      	ldrb	r1, [r6, #0]
 80157d8:	005b      	lsls	r3, r3, #1
 80157da:	1898      	adds	r0, r3, r2
 80157dc:	000a      	movs	r2, r1
 80157de:	3a30      	subs	r2, #48	; 0x30
 80157e0:	2a09      	cmp	r2, #9
 80157e2:	d9f4      	bls.n	80157ce <_svfiprintf_r+0x18a>
 80157e4:	46b2      	mov	sl, r6
 80157e6:	60e8      	str	r0, [r5, #12]
 80157e8:	1ca6      	adds	r6, r4, #2
 80157ea:	292e      	cmp	r1, #46	; 0x2e
 80157ec:	d1a2      	bne.n	8015734 <_svfiprintf_r+0xf0>
 80157ee:	4653      	mov	r3, sl
 80157f0:	7859      	ldrb	r1, [r3, #1]
 80157f2:	292a      	cmp	r1, #42	; 0x2a
 80157f4:	d13a      	bne.n	801586c <_svfiprintf_r+0x228>
 80157f6:	9b07      	ldr	r3, [sp, #28]
 80157f8:	1d1a      	adds	r2, r3, #4
 80157fa:	9207      	str	r2, [sp, #28]
 80157fc:	4652      	mov	r2, sl
 80157fe:	7891      	ldrb	r1, [r2, #2]
 8015800:	1cd6      	adds	r6, r2, #3
 8015802:	2202      	movs	r2, #2
 8015804:	4694      	mov	ip, r2
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	44e2      	add	sl, ip
 801580a:	606b      	str	r3, [r5, #4]
 801580c:	2b00      	cmp	r3, #0
 801580e:	db00      	blt.n	8015812 <_svfiprintf_r+0x1ce>
 8015810:	e790      	b.n	8015734 <_svfiprintf_r+0xf0>
 8015812:	2301      	movs	r3, #1
 8015814:	425b      	negs	r3, r3
 8015816:	606b      	str	r3, [r5, #4]
 8015818:	4b2d      	ldr	r3, [pc, #180]	; (80158d0 <_svfiprintf_r+0x28c>)
 801581a:	2203      	movs	r2, #3
 801581c:	0018      	movs	r0, r3
 801581e:	4699      	mov	r9, r3
 8015820:	f000 ff1c 	bl	801665c <memchr>
 8015824:	2800      	cmp	r0, #0
 8015826:	d000      	beq.n	801582a <_svfiprintf_r+0x1e6>
 8015828:	e78d      	b.n	8015746 <_svfiprintf_r+0x102>
 801582a:	46b1      	mov	r9, r6
 801582c:	4656      	mov	r6, sl
 801582e:	7831      	ldrb	r1, [r6, #0]
 8015830:	2206      	movs	r2, #6
 8015832:	4828      	ldr	r0, [pc, #160]	; (80158d4 <_svfiprintf_r+0x290>)
 8015834:	7629      	strb	r1, [r5, #24]
 8015836:	f000 ff11 	bl	801665c <memchr>
 801583a:	2800      	cmp	r0, #0
 801583c:	d194      	bne.n	8015768 <_svfiprintf_r+0x124>
 801583e:	ab07      	add	r3, sp, #28
 8015840:	9300      	str	r3, [sp, #0]
 8015842:	9a03      	ldr	r2, [sp, #12]
 8015844:	4b25      	ldr	r3, [pc, #148]	; (80158dc <_svfiprintf_r+0x298>)
 8015846:	0029      	movs	r1, r5
 8015848:	9804      	ldr	r0, [sp, #16]
 801584a:	f000 faa3 	bl	8015d94 <_printf_i>
 801584e:	4683      	mov	fp, r0
 8015850:	e797      	b.n	8015782 <_svfiprintf_r+0x13e>
 8015852:	2207      	movs	r2, #7
 8015854:	9b07      	ldr	r3, [sp, #28]
 8015856:	3307      	adds	r3, #7
 8015858:	4393      	bics	r3, r2
 801585a:	3308      	adds	r3, #8
 801585c:	9307      	str	r3, [sp, #28]
 801585e:	e793      	b.n	8015788 <_svfiprintf_r+0x144>
 8015860:	4252      	negs	r2, r2
 8015862:	60ea      	str	r2, [r5, #12]
 8015864:	2202      	movs	r2, #2
 8015866:	4313      	orrs	r3, r2
 8015868:	602b      	str	r3, [r5, #0]
 801586a:	e75f      	b.n	801572c <_svfiprintf_r+0xe8>
 801586c:	000a      	movs	r2, r1
 801586e:	2300      	movs	r3, #0
 8015870:	3a30      	subs	r2, #48	; 0x30
 8015872:	606b      	str	r3, [r5, #4]
 8015874:	0018      	movs	r0, r3
 8015876:	2a09      	cmp	r2, #9
 8015878:	d901      	bls.n	801587e <_svfiprintf_r+0x23a>
 801587a:	e01c      	b.n	80158b6 <_svfiprintf_r+0x272>
 801587c:	001e      	movs	r6, r3
 801587e:	0083      	lsls	r3, r0, #2
 8015880:	181b      	adds	r3, r3, r0
 8015882:	7871      	ldrb	r1, [r6, #1]
 8015884:	005b      	lsls	r3, r3, #1
 8015886:	1898      	adds	r0, r3, r2
 8015888:	000a      	movs	r2, r1
 801588a:	3a30      	subs	r2, #48	; 0x30
 801588c:	1c73      	adds	r3, r6, #1
 801588e:	2a09      	cmp	r2, #9
 8015890:	d9f4      	bls.n	801587c <_svfiprintf_r+0x238>
 8015892:	469a      	mov	sl, r3
 8015894:	3602      	adds	r6, #2
 8015896:	6068      	str	r0, [r5, #4]
 8015898:	e74c      	b.n	8015734 <_svfiprintf_r+0xf0>
 801589a:	464c      	mov	r4, r9
 801589c:	e714      	b.n	80156c8 <_svfiprintf_r+0x84>
 801589e:	2140      	movs	r1, #64	; 0x40
 80158a0:	f7ff fb94 	bl	8014fcc <_malloc_r>
 80158a4:	9b03      	ldr	r3, [sp, #12]
 80158a6:	6018      	str	r0, [r3, #0]
 80158a8:	6118      	str	r0, [r3, #16]
 80158aa:	2800      	cmp	r0, #0
 80158ac:	d009      	beq.n	80158c2 <_svfiprintf_r+0x27e>
 80158ae:	2340      	movs	r3, #64	; 0x40
 80158b0:	9a03      	ldr	r2, [sp, #12]
 80158b2:	6153      	str	r3, [r2, #20]
 80158b4:	e6d9      	b.n	801566a <_svfiprintf_r+0x26>
 80158b6:	46b2      	mov	sl, r6
 80158b8:	3601      	adds	r6, #1
 80158ba:	e73b      	b.n	8015734 <_svfiprintf_r+0xf0>
 80158bc:	2001      	movs	r0, #1
 80158be:	4240      	negs	r0, r0
 80158c0:	e770      	b.n	80157a4 <_svfiprintf_r+0x160>
 80158c2:	230c      	movs	r3, #12
 80158c4:	9a04      	ldr	r2, [sp, #16]
 80158c6:	3801      	subs	r0, #1
 80158c8:	6013      	str	r3, [r2, #0]
 80158ca:	e76b      	b.n	80157a4 <_svfiprintf_r+0x160>
 80158cc:	0801adf0 	.word	0x0801adf0
 80158d0:	0801adf8 	.word	0x0801adf8
 80158d4:	0801adfc 	.word	0x0801adfc
 80158d8:	00000000 	.word	0x00000000
 80158dc:	08015461 	.word	0x08015461

080158e0 <__sfputc_r>:
 80158e0:	6893      	ldr	r3, [r2, #8]
 80158e2:	b510      	push	{r4, lr}
 80158e4:	3b01      	subs	r3, #1
 80158e6:	6093      	str	r3, [r2, #8]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	da04      	bge.n	80158f6 <__sfputc_r+0x16>
 80158ec:	6994      	ldr	r4, [r2, #24]
 80158ee:	42a3      	cmp	r3, r4
 80158f0:	db07      	blt.n	8015902 <__sfputc_r+0x22>
 80158f2:	290a      	cmp	r1, #10
 80158f4:	d005      	beq.n	8015902 <__sfputc_r+0x22>
 80158f6:	6813      	ldr	r3, [r2, #0]
 80158f8:	1c58      	adds	r0, r3, #1
 80158fa:	6010      	str	r0, [r2, #0]
 80158fc:	0008      	movs	r0, r1
 80158fe:	7019      	strb	r1, [r3, #0]
 8015900:	bd10      	pop	{r4, pc}
 8015902:	f000 fbaf 	bl	8016064 <__swbuf_r>
 8015906:	e7fb      	b.n	8015900 <__sfputc_r+0x20>

08015908 <__sfputs_r>:
 8015908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801590a:	0006      	movs	r6, r0
 801590c:	000f      	movs	r7, r1
 801590e:	2b00      	cmp	r3, #0
 8015910:	d00d      	beq.n	801592e <__sfputs_r+0x26>
 8015912:	0014      	movs	r4, r2
 8015914:	18d5      	adds	r5, r2, r3
 8015916:	e002      	b.n	801591e <__sfputs_r+0x16>
 8015918:	3401      	adds	r4, #1
 801591a:	42ac      	cmp	r4, r5
 801591c:	d007      	beq.n	801592e <__sfputs_r+0x26>
 801591e:	7821      	ldrb	r1, [r4, #0]
 8015920:	003a      	movs	r2, r7
 8015922:	0030      	movs	r0, r6
 8015924:	f7ff ffdc 	bl	80158e0 <__sfputc_r>
 8015928:	1c43      	adds	r3, r0, #1
 801592a:	d1f5      	bne.n	8015918 <__sfputs_r+0x10>
 801592c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801592e:	2000      	movs	r0, #0
 8015930:	e7fc      	b.n	801592c <__sfputs_r+0x24>
 8015932:	46c0      	nop			; (mov r8, r8)

08015934 <__sprint_r>:
 8015934:	6893      	ldr	r3, [r2, #8]
 8015936:	b510      	push	{r4, lr}
 8015938:	0014      	movs	r4, r2
 801593a:	2b00      	cmp	r3, #0
 801593c:	d102      	bne.n	8015944 <__sprint_r+0x10>
 801593e:	2000      	movs	r0, #0
 8015940:	6053      	str	r3, [r2, #4]
 8015942:	bd10      	pop	{r4, pc}
 8015944:	f000 fc8a 	bl	801625c <__sfvwrite_r>
 8015948:	2300      	movs	r3, #0
 801594a:	60a3      	str	r3, [r4, #8]
 801594c:	6063      	str	r3, [r4, #4]
 801594e:	e7f8      	b.n	8015942 <__sprint_r+0xe>

08015950 <_vfiprintf_r>:
 8015950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015952:	464e      	mov	r6, r9
 8015954:	46de      	mov	lr, fp
 8015956:	4657      	mov	r7, sl
 8015958:	4645      	mov	r5, r8
 801595a:	b5e0      	push	{r5, r6, r7, lr}
 801595c:	b0a1      	sub	sp, #132	; 0x84
 801595e:	9004      	str	r0, [sp, #16]
 8015960:	9103      	str	r1, [sp, #12]
 8015962:	4691      	mov	r9, r2
 8015964:	001c      	movs	r4, r3
 8015966:	2800      	cmp	r0, #0
 8015968:	d004      	beq.n	8015974 <_vfiprintf_r+0x24>
 801596a:	6983      	ldr	r3, [r0, #24]
 801596c:	9305      	str	r3, [sp, #20]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d100      	bne.n	8015974 <_vfiprintf_r+0x24>
 8015972:	e0be      	b.n	8015af2 <_vfiprintf_r+0x1a2>
 8015974:	4bad      	ldr	r3, [pc, #692]	; (8015c2c <_vfiprintf_r+0x2dc>)
 8015976:	9a03      	ldr	r2, [sp, #12]
 8015978:	429a      	cmp	r2, r3
 801597a:	d100      	bne.n	801597e <_vfiprintf_r+0x2e>
 801597c:	e0c0      	b.n	8015b00 <_vfiprintf_r+0x1b0>
 801597e:	4bac      	ldr	r3, [pc, #688]	; (8015c30 <_vfiprintf_r+0x2e0>)
 8015980:	9a03      	ldr	r2, [sp, #12]
 8015982:	429a      	cmp	r2, r3
 8015984:	d100      	bne.n	8015988 <_vfiprintf_r+0x38>
 8015986:	e0cd      	b.n	8015b24 <_vfiprintf_r+0x1d4>
 8015988:	4baa      	ldr	r3, [pc, #680]	; (8015c34 <_vfiprintf_r+0x2e4>)
 801598a:	9a03      	ldr	r2, [sp, #12]
 801598c:	429a      	cmp	r2, r3
 801598e:	d100      	bne.n	8015992 <_vfiprintf_r+0x42>
 8015990:	e147      	b.n	8015c22 <_vfiprintf_r+0x2d2>
 8015992:	9a03      	ldr	r2, [sp, #12]
 8015994:	8993      	ldrh	r3, [r2, #12]
 8015996:	071b      	lsls	r3, r3, #28
 8015998:	d400      	bmi.n	801599c <_vfiprintf_r+0x4c>
 801599a:	e0b9      	b.n	8015b10 <_vfiprintf_r+0x1c0>
 801599c:	6913      	ldr	r3, [r2, #16]
 801599e:	9305      	str	r3, [sp, #20]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d100      	bne.n	80159a6 <_vfiprintf_r+0x56>
 80159a4:	e0b4      	b.n	8015b10 <_vfiprintf_r+0x1c0>
 80159a6:	2300      	movs	r3, #0
 80159a8:	ad08      	add	r5, sp, #32
 80159aa:	616b      	str	r3, [r5, #20]
 80159ac:	3320      	adds	r3, #32
 80159ae:	766b      	strb	r3, [r5, #25]
 80159b0:	3310      	adds	r3, #16
 80159b2:	76ab      	strb	r3, [r5, #26]
 80159b4:	3b2f      	subs	r3, #47	; 0x2f
 80159b6:	4698      	mov	r8, r3
 80159b8:	464b      	mov	r3, r9
 80159ba:	781b      	ldrb	r3, [r3, #0]
 80159bc:	9407      	str	r4, [sp, #28]
 80159be:	4f9e      	ldr	r7, [pc, #632]	; (8015c38 <_vfiprintf_r+0x2e8>)
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d100      	bne.n	80159c6 <_vfiprintf_r+0x76>
 80159c4:	e089      	b.n	8015ada <_vfiprintf_r+0x18a>
 80159c6:	2b25      	cmp	r3, #37	; 0x25
 80159c8:	d100      	bne.n	80159cc <_vfiprintf_r+0x7c>
 80159ca:	e125      	b.n	8015c18 <_vfiprintf_r+0x2c8>
 80159cc:	464e      	mov	r6, r9
 80159ce:	e003      	b.n	80159d8 <_vfiprintf_r+0x88>
 80159d0:	2b25      	cmp	r3, #37	; 0x25
 80159d2:	d100      	bne.n	80159d6 <_vfiprintf_r+0x86>
 80159d4:	e0aa      	b.n	8015b2c <_vfiprintf_r+0x1dc>
 80159d6:	0026      	movs	r6, r4
 80159d8:	7873      	ldrb	r3, [r6, #1]
 80159da:	1c74      	adds	r4, r6, #1
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d1f7      	bne.n	80159d0 <_vfiprintf_r+0x80>
 80159e0:	464b      	mov	r3, r9
 80159e2:	1ae3      	subs	r3, r4, r3
 80159e4:	469a      	mov	sl, r3
 80159e6:	d078      	beq.n	8015ada <_vfiprintf_r+0x18a>
 80159e8:	4653      	mov	r3, sl
 80159ea:	464a      	mov	r2, r9
 80159ec:	9903      	ldr	r1, [sp, #12]
 80159ee:	9804      	ldr	r0, [sp, #16]
 80159f0:	f7ff ff8a 	bl	8015908 <__sfputs_r>
 80159f4:	1c43      	adds	r3, r0, #1
 80159f6:	d070      	beq.n	8015ada <_vfiprintf_r+0x18a>
 80159f8:	696b      	ldr	r3, [r5, #20]
 80159fa:	4453      	add	r3, sl
 80159fc:	616b      	str	r3, [r5, #20]
 80159fe:	7873      	ldrb	r3, [r6, #1]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d06a      	beq.n	8015ada <_vfiprintf_r+0x18a>
 8015a04:	2201      	movs	r2, #1
 8015a06:	2300      	movs	r3, #0
 8015a08:	4252      	negs	r2, r2
 8015a0a:	606a      	str	r2, [r5, #4]
 8015a0c:	3244      	adds	r2, #68	; 0x44
 8015a0e:	3401      	adds	r4, #1
 8015a10:	602b      	str	r3, [r5, #0]
 8015a12:	60eb      	str	r3, [r5, #12]
 8015a14:	60ab      	str	r3, [r5, #8]
 8015a16:	54ab      	strb	r3, [r5, r2]
 8015a18:	65ab      	str	r3, [r5, #88]	; 0x58
 8015a1a:	e006      	b.n	8015a2a <_vfiprintf_r+0xda>
 8015a1c:	4643      	mov	r3, r8
 8015a1e:	1bc0      	subs	r0, r0, r7
 8015a20:	4083      	lsls	r3, r0
 8015a22:	0034      	movs	r4, r6
 8015a24:	682a      	ldr	r2, [r5, #0]
 8015a26:	4313      	orrs	r3, r2
 8015a28:	602b      	str	r3, [r5, #0]
 8015a2a:	7821      	ldrb	r1, [r4, #0]
 8015a2c:	2205      	movs	r2, #5
 8015a2e:	0038      	movs	r0, r7
 8015a30:	f000 fe14 	bl	801665c <memchr>
 8015a34:	1c66      	adds	r6, r4, #1
 8015a36:	2800      	cmp	r0, #0
 8015a38:	d1f0      	bne.n	8015a1c <_vfiprintf_r+0xcc>
 8015a3a:	682b      	ldr	r3, [r5, #0]
 8015a3c:	46b2      	mov	sl, r6
 8015a3e:	06da      	lsls	r2, r3, #27
 8015a40:	d502      	bpl.n	8015a48 <_vfiprintf_r+0xf8>
 8015a42:	2243      	movs	r2, #67	; 0x43
 8015a44:	2120      	movs	r1, #32
 8015a46:	54a9      	strb	r1, [r5, r2]
 8015a48:	071a      	lsls	r2, r3, #28
 8015a4a:	d502      	bpl.n	8015a52 <_vfiprintf_r+0x102>
 8015a4c:	2243      	movs	r2, #67	; 0x43
 8015a4e:	212b      	movs	r1, #43	; 0x2b
 8015a50:	54a9      	strb	r1, [r5, r2]
 8015a52:	7821      	ldrb	r1, [r4, #0]
 8015a54:	292a      	cmp	r1, #42	; 0x2a
 8015a56:	d000      	beq.n	8015a5a <_vfiprintf_r+0x10a>
 8015a58:	e06e      	b.n	8015b38 <_vfiprintf_r+0x1e8>
 8015a5a:	9a07      	ldr	r2, [sp, #28]
 8015a5c:	1d11      	adds	r1, r2, #4
 8015a5e:	6812      	ldr	r2, [r2, #0]
 8015a60:	9107      	str	r1, [sp, #28]
 8015a62:	2a00      	cmp	r2, #0
 8015a64:	da00      	bge.n	8015a68 <_vfiprintf_r+0x118>
 8015a66:	e0ba      	b.n	8015bde <_vfiprintf_r+0x28e>
 8015a68:	60ea      	str	r2, [r5, #12]
 8015a6a:	7861      	ldrb	r1, [r4, #1]
 8015a6c:	1ca6      	adds	r6, r4, #2
 8015a6e:	292e      	cmp	r1, #46	; 0x2e
 8015a70:	d100      	bne.n	8015a74 <_vfiprintf_r+0x124>
 8015a72:	e07a      	b.n	8015b6a <_vfiprintf_r+0x21a>
 8015a74:	4b71      	ldr	r3, [pc, #452]	; (8015c3c <_vfiprintf_r+0x2ec>)
 8015a76:	2203      	movs	r2, #3
 8015a78:	0018      	movs	r0, r3
 8015a7a:	4699      	mov	r9, r3
 8015a7c:	f000 fdee 	bl	801665c <memchr>
 8015a80:	2800      	cmp	r0, #0
 8015a82:	d100      	bne.n	8015a86 <_vfiprintf_r+0x136>
 8015a84:	e08f      	b.n	8015ba6 <_vfiprintf_r+0x256>
 8015a86:	464b      	mov	r3, r9
 8015a88:	1ac0      	subs	r0, r0, r3
 8015a8a:	2340      	movs	r3, #64	; 0x40
 8015a8c:	4083      	lsls	r3, r0
 8015a8e:	682a      	ldr	r2, [r5, #0]
 8015a90:	7831      	ldrb	r1, [r6, #0]
 8015a92:	4313      	orrs	r3, r2
 8015a94:	602b      	str	r3, [r5, #0]
 8015a96:	2206      	movs	r2, #6
 8015a98:	1c73      	adds	r3, r6, #1
 8015a9a:	4869      	ldr	r0, [pc, #420]	; (8015c40 <_vfiprintf_r+0x2f0>)
 8015a9c:	4699      	mov	r9, r3
 8015a9e:	7629      	strb	r1, [r5, #24]
 8015aa0:	f000 fddc 	bl	801665c <memchr>
 8015aa4:	2800      	cmp	r0, #0
 8015aa6:	d100      	bne.n	8015aaa <_vfiprintf_r+0x15a>
 8015aa8:	e088      	b.n	8015bbc <_vfiprintf_r+0x26c>
 8015aaa:	4b66      	ldr	r3, [pc, #408]	; (8015c44 <_vfiprintf_r+0x2f4>)
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d100      	bne.n	8015ab2 <_vfiprintf_r+0x162>
 8015ab0:	e08e      	b.n	8015bd0 <_vfiprintf_r+0x280>
 8015ab2:	ab07      	add	r3, sp, #28
 8015ab4:	9300      	str	r3, [sp, #0]
 8015ab6:	9a03      	ldr	r2, [sp, #12]
 8015ab8:	4b63      	ldr	r3, [pc, #396]	; (8015c48 <_vfiprintf_r+0x2f8>)
 8015aba:	0029      	movs	r1, r5
 8015abc:	9804      	ldr	r0, [sp, #16]
 8015abe:	e000      	b.n	8015ac2 <_vfiprintf_r+0x172>
 8015ac0:	bf00      	nop
 8015ac2:	4683      	mov	fp, r0
 8015ac4:	465b      	mov	r3, fp
 8015ac6:	3301      	adds	r3, #1
 8015ac8:	d007      	beq.n	8015ada <_vfiprintf_r+0x18a>
 8015aca:	696b      	ldr	r3, [r5, #20]
 8015acc:	445b      	add	r3, fp
 8015ace:	616b      	str	r3, [r5, #20]
 8015ad0:	464b      	mov	r3, r9
 8015ad2:	781b      	ldrb	r3, [r3, #0]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d000      	beq.n	8015ada <_vfiprintf_r+0x18a>
 8015ad8:	e775      	b.n	80159c6 <_vfiprintf_r+0x76>
 8015ada:	9b03      	ldr	r3, [sp, #12]
 8015adc:	899b      	ldrh	r3, [r3, #12]
 8015ade:	065b      	lsls	r3, r3, #25
 8015ae0:	d41d      	bmi.n	8015b1e <_vfiprintf_r+0x1ce>
 8015ae2:	6968      	ldr	r0, [r5, #20]
 8015ae4:	b021      	add	sp, #132	; 0x84
 8015ae6:	bc3c      	pop	{r2, r3, r4, r5}
 8015ae8:	4690      	mov	r8, r2
 8015aea:	4699      	mov	r9, r3
 8015aec:	46a2      	mov	sl, r4
 8015aee:	46ab      	mov	fp, r5
 8015af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015af2:	f7ff f8b3 	bl	8014c5c <__sinit>
 8015af6:	4b4d      	ldr	r3, [pc, #308]	; (8015c2c <_vfiprintf_r+0x2dc>)
 8015af8:	9a03      	ldr	r2, [sp, #12]
 8015afa:	429a      	cmp	r2, r3
 8015afc:	d000      	beq.n	8015b00 <_vfiprintf_r+0x1b0>
 8015afe:	e73e      	b.n	801597e <_vfiprintf_r+0x2e>
 8015b00:	9b04      	ldr	r3, [sp, #16]
 8015b02:	685b      	ldr	r3, [r3, #4]
 8015b04:	9303      	str	r3, [sp, #12]
 8015b06:	9a03      	ldr	r2, [sp, #12]
 8015b08:	8993      	ldrh	r3, [r2, #12]
 8015b0a:	071b      	lsls	r3, r3, #28
 8015b0c:	d500      	bpl.n	8015b10 <_vfiprintf_r+0x1c0>
 8015b0e:	e745      	b.n	801599c <_vfiprintf_r+0x4c>
 8015b10:	9903      	ldr	r1, [sp, #12]
 8015b12:	9804      	ldr	r0, [sp, #16]
 8015b14:	f000 fb1c 	bl	8016150 <__swsetup_r>
 8015b18:	2800      	cmp	r0, #0
 8015b1a:	d100      	bne.n	8015b1e <_vfiprintf_r+0x1ce>
 8015b1c:	e743      	b.n	80159a6 <_vfiprintf_r+0x56>
 8015b1e:	2001      	movs	r0, #1
 8015b20:	4240      	negs	r0, r0
 8015b22:	e7df      	b.n	8015ae4 <_vfiprintf_r+0x194>
 8015b24:	9b04      	ldr	r3, [sp, #16]
 8015b26:	689b      	ldr	r3, [r3, #8]
 8015b28:	9303      	str	r3, [sp, #12]
 8015b2a:	e732      	b.n	8015992 <_vfiprintf_r+0x42>
 8015b2c:	464b      	mov	r3, r9
 8015b2e:	1ae3      	subs	r3, r4, r3
 8015b30:	469a      	mov	sl, r3
 8015b32:	d100      	bne.n	8015b36 <_vfiprintf_r+0x1e6>
 8015b34:	e766      	b.n	8015a04 <_vfiprintf_r+0xb4>
 8015b36:	e757      	b.n	80159e8 <_vfiprintf_r+0x98>
 8015b38:	000a      	movs	r2, r1
 8015b3a:	3a30      	subs	r2, #48	; 0x30
 8015b3c:	46a2      	mov	sl, r4
 8015b3e:	2a09      	cmp	r2, #9
 8015b40:	d895      	bhi.n	8015a6e <_vfiprintf_r+0x11e>
 8015b42:	68eb      	ldr	r3, [r5, #12]
 8015b44:	0018      	movs	r0, r3
 8015b46:	e001      	b.n	8015b4c <_vfiprintf_r+0x1fc>
 8015b48:	0034      	movs	r4, r6
 8015b4a:	3601      	adds	r6, #1
 8015b4c:	0083      	lsls	r3, r0, #2
 8015b4e:	181b      	adds	r3, r3, r0
 8015b50:	7831      	ldrb	r1, [r6, #0]
 8015b52:	005b      	lsls	r3, r3, #1
 8015b54:	1898      	adds	r0, r3, r2
 8015b56:	000a      	movs	r2, r1
 8015b58:	3a30      	subs	r2, #48	; 0x30
 8015b5a:	2a09      	cmp	r2, #9
 8015b5c:	d9f4      	bls.n	8015b48 <_vfiprintf_r+0x1f8>
 8015b5e:	46b2      	mov	sl, r6
 8015b60:	60e8      	str	r0, [r5, #12]
 8015b62:	1ca6      	adds	r6, r4, #2
 8015b64:	292e      	cmp	r1, #46	; 0x2e
 8015b66:	d000      	beq.n	8015b6a <_vfiprintf_r+0x21a>
 8015b68:	e784      	b.n	8015a74 <_vfiprintf_r+0x124>
 8015b6a:	4653      	mov	r3, sl
 8015b6c:	7859      	ldrb	r1, [r3, #1]
 8015b6e:	292a      	cmp	r1, #42	; 0x2a
 8015b70:	d13b      	bne.n	8015bea <_vfiprintf_r+0x29a>
 8015b72:	9b07      	ldr	r3, [sp, #28]
 8015b74:	1d1a      	adds	r2, r3, #4
 8015b76:	9207      	str	r2, [sp, #28]
 8015b78:	4652      	mov	r2, sl
 8015b7a:	7891      	ldrb	r1, [r2, #2]
 8015b7c:	1cd6      	adds	r6, r2, #3
 8015b7e:	2202      	movs	r2, #2
 8015b80:	4694      	mov	ip, r2
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	44e2      	add	sl, ip
 8015b86:	606b      	str	r3, [r5, #4]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	db00      	blt.n	8015b8e <_vfiprintf_r+0x23e>
 8015b8c:	e772      	b.n	8015a74 <_vfiprintf_r+0x124>
 8015b8e:	2301      	movs	r3, #1
 8015b90:	425b      	negs	r3, r3
 8015b92:	606b      	str	r3, [r5, #4]
 8015b94:	4b29      	ldr	r3, [pc, #164]	; (8015c3c <_vfiprintf_r+0x2ec>)
 8015b96:	2203      	movs	r2, #3
 8015b98:	0018      	movs	r0, r3
 8015b9a:	4699      	mov	r9, r3
 8015b9c:	f000 fd5e 	bl	801665c <memchr>
 8015ba0:	2800      	cmp	r0, #0
 8015ba2:	d000      	beq.n	8015ba6 <_vfiprintf_r+0x256>
 8015ba4:	e76f      	b.n	8015a86 <_vfiprintf_r+0x136>
 8015ba6:	46b1      	mov	r9, r6
 8015ba8:	4656      	mov	r6, sl
 8015baa:	7831      	ldrb	r1, [r6, #0]
 8015bac:	2206      	movs	r2, #6
 8015bae:	4824      	ldr	r0, [pc, #144]	; (8015c40 <_vfiprintf_r+0x2f0>)
 8015bb0:	7629      	strb	r1, [r5, #24]
 8015bb2:	f000 fd53 	bl	801665c <memchr>
 8015bb6:	2800      	cmp	r0, #0
 8015bb8:	d000      	beq.n	8015bbc <_vfiprintf_r+0x26c>
 8015bba:	e776      	b.n	8015aaa <_vfiprintf_r+0x15a>
 8015bbc:	ab07      	add	r3, sp, #28
 8015bbe:	9300      	str	r3, [sp, #0]
 8015bc0:	9a03      	ldr	r2, [sp, #12]
 8015bc2:	4b21      	ldr	r3, [pc, #132]	; (8015c48 <_vfiprintf_r+0x2f8>)
 8015bc4:	0029      	movs	r1, r5
 8015bc6:	9804      	ldr	r0, [sp, #16]
 8015bc8:	f000 f8e4 	bl	8015d94 <_printf_i>
 8015bcc:	4683      	mov	fp, r0
 8015bce:	e779      	b.n	8015ac4 <_vfiprintf_r+0x174>
 8015bd0:	2207      	movs	r2, #7
 8015bd2:	9b07      	ldr	r3, [sp, #28]
 8015bd4:	3307      	adds	r3, #7
 8015bd6:	4393      	bics	r3, r2
 8015bd8:	3308      	adds	r3, #8
 8015bda:	9307      	str	r3, [sp, #28]
 8015bdc:	e775      	b.n	8015aca <_vfiprintf_r+0x17a>
 8015bde:	4252      	negs	r2, r2
 8015be0:	60ea      	str	r2, [r5, #12]
 8015be2:	2202      	movs	r2, #2
 8015be4:	4313      	orrs	r3, r2
 8015be6:	602b      	str	r3, [r5, #0]
 8015be8:	e73f      	b.n	8015a6a <_vfiprintf_r+0x11a>
 8015bea:	000a      	movs	r2, r1
 8015bec:	2300      	movs	r3, #0
 8015bee:	3a30      	subs	r2, #48	; 0x30
 8015bf0:	606b      	str	r3, [r5, #4]
 8015bf2:	0018      	movs	r0, r3
 8015bf4:	2a09      	cmp	r2, #9
 8015bf6:	d901      	bls.n	8015bfc <_vfiprintf_r+0x2ac>
 8015bf8:	e010      	b.n	8015c1c <_vfiprintf_r+0x2cc>
 8015bfa:	001e      	movs	r6, r3
 8015bfc:	0083      	lsls	r3, r0, #2
 8015bfe:	181b      	adds	r3, r3, r0
 8015c00:	7871      	ldrb	r1, [r6, #1]
 8015c02:	005b      	lsls	r3, r3, #1
 8015c04:	1898      	adds	r0, r3, r2
 8015c06:	000a      	movs	r2, r1
 8015c08:	3a30      	subs	r2, #48	; 0x30
 8015c0a:	1c73      	adds	r3, r6, #1
 8015c0c:	2a09      	cmp	r2, #9
 8015c0e:	d9f4      	bls.n	8015bfa <_vfiprintf_r+0x2aa>
 8015c10:	469a      	mov	sl, r3
 8015c12:	3602      	adds	r6, #2
 8015c14:	6068      	str	r0, [r5, #4]
 8015c16:	e72d      	b.n	8015a74 <_vfiprintf_r+0x124>
 8015c18:	464c      	mov	r4, r9
 8015c1a:	e6f3      	b.n	8015a04 <_vfiprintf_r+0xb4>
 8015c1c:	46b2      	mov	sl, r6
 8015c1e:	3601      	adds	r6, #1
 8015c20:	e728      	b.n	8015a74 <_vfiprintf_r+0x124>
 8015c22:	9b04      	ldr	r3, [sp, #16]
 8015c24:	68db      	ldr	r3, [r3, #12]
 8015c26:	9303      	str	r3, [sp, #12]
 8015c28:	e6b3      	b.n	8015992 <_vfiprintf_r+0x42>
 8015c2a:	46c0      	nop			; (mov r8, r8)
 8015c2c:	0801ad80 	.word	0x0801ad80
 8015c30:	0801ad60 	.word	0x0801ad60
 8015c34:	0801ad40 	.word	0x0801ad40
 8015c38:	0801adf0 	.word	0x0801adf0
 8015c3c:	0801adf8 	.word	0x0801adf8
 8015c40:	0801adfc 	.word	0x0801adfc
 8015c44:	00000000 	.word	0x00000000
 8015c48:	08015909 	.word	0x08015909

08015c4c <vfiprintf>:
 8015c4c:	b510      	push	{r4, lr}
 8015c4e:	0004      	movs	r4, r0
 8015c50:	0013      	movs	r3, r2
 8015c52:	4a03      	ldr	r2, [pc, #12]	; (8015c60 <vfiprintf+0x14>)
 8015c54:	6810      	ldr	r0, [r2, #0]
 8015c56:	000a      	movs	r2, r1
 8015c58:	0021      	movs	r1, r4
 8015c5a:	f7ff fe79 	bl	8015950 <_vfiprintf_r>
 8015c5e:	bd10      	pop	{r4, pc}
 8015c60:	200005dc 	.word	0x200005dc

08015c64 <_printf_common>:
 8015c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c66:	464f      	mov	r7, r9
 8015c68:	4646      	mov	r6, r8
 8015c6a:	46d6      	mov	lr, sl
 8015c6c:	b5c0      	push	{r6, r7, lr}
 8015c6e:	001f      	movs	r7, r3
 8015c70:	9b08      	ldr	r3, [sp, #32]
 8015c72:	4691      	mov	r9, r2
 8015c74:	4698      	mov	r8, r3
 8015c76:	688a      	ldr	r2, [r1, #8]
 8015c78:	690b      	ldr	r3, [r1, #16]
 8015c7a:	0006      	movs	r6, r0
 8015c7c:	000c      	movs	r4, r1
 8015c7e:	4293      	cmp	r3, r2
 8015c80:	da00      	bge.n	8015c84 <_printf_common+0x20>
 8015c82:	0013      	movs	r3, r2
 8015c84:	464a      	mov	r2, r9
 8015c86:	6013      	str	r3, [r2, #0]
 8015c88:	2243      	movs	r2, #67	; 0x43
 8015c8a:	5ca2      	ldrb	r2, [r4, r2]
 8015c8c:	2a00      	cmp	r2, #0
 8015c8e:	d002      	beq.n	8015c96 <_printf_common+0x32>
 8015c90:	464a      	mov	r2, r9
 8015c92:	3301      	adds	r3, #1
 8015c94:	6013      	str	r3, [r2, #0]
 8015c96:	6823      	ldr	r3, [r4, #0]
 8015c98:	069a      	lsls	r2, r3, #26
 8015c9a:	d55a      	bpl.n	8015d52 <_printf_common+0xee>
 8015c9c:	464b      	mov	r3, r9
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	2006      	movs	r0, #6
 8015ca2:	1c9a      	adds	r2, r3, #2
 8015ca4:	464b      	mov	r3, r9
 8015ca6:	601a      	str	r2, [r3, #0]
 8015ca8:	6823      	ldr	r3, [r4, #0]
 8015caa:	0019      	movs	r1, r3
 8015cac:	4218      	tst	r0, r3
 8015cae:	d108      	bne.n	8015cc2 <_printf_common+0x5e>
 8015cb0:	68e1      	ldr	r1, [r4, #12]
 8015cb2:	2500      	movs	r5, #0
 8015cb4:	1a8a      	subs	r2, r1, r2
 8015cb6:	2119      	movs	r1, #25
 8015cb8:	468a      	mov	sl, r1
 8015cba:	0019      	movs	r1, r3
 8015cbc:	44a2      	add	sl, r4
 8015cbe:	2a00      	cmp	r2, #0
 8015cc0:	dc3f      	bgt.n	8015d42 <_printf_common+0xde>
 8015cc2:	2343      	movs	r3, #67	; 0x43
 8015cc4:	5ce3      	ldrb	r3, [r4, r3]
 8015cc6:	1e5a      	subs	r2, r3, #1
 8015cc8:	4193      	sbcs	r3, r2
 8015cca:	068a      	lsls	r2, r1, #26
 8015ccc:	d50a      	bpl.n	8015ce4 <_printf_common+0x80>
 8015cce:	2030      	movs	r0, #48	; 0x30
 8015cd0:	18e1      	adds	r1, r4, r3
 8015cd2:	3143      	adds	r1, #67	; 0x43
 8015cd4:	7008      	strb	r0, [r1, #0]
 8015cd6:	2145      	movs	r1, #69	; 0x45
 8015cd8:	1c5a      	adds	r2, r3, #1
 8015cda:	5c61      	ldrb	r1, [r4, r1]
 8015cdc:	18a2      	adds	r2, r4, r2
 8015cde:	3243      	adds	r2, #67	; 0x43
 8015ce0:	3302      	adds	r3, #2
 8015ce2:	7011      	strb	r1, [r2, #0]
 8015ce4:	0022      	movs	r2, r4
 8015ce6:	0039      	movs	r1, r7
 8015ce8:	3243      	adds	r2, #67	; 0x43
 8015cea:	0030      	movs	r0, r6
 8015cec:	47c0      	blx	r8
 8015cee:	1c43      	adds	r3, r0, #1
 8015cf0:	d019      	beq.n	8015d26 <_printf_common+0xc2>
 8015cf2:	2306      	movs	r3, #6
 8015cf4:	6820      	ldr	r0, [r4, #0]
 8015cf6:	68a2      	ldr	r2, [r4, #8]
 8015cf8:	6921      	ldr	r1, [r4, #16]
 8015cfa:	4003      	ands	r3, r0
 8015cfc:	2b04      	cmp	r3, #4
 8015cfe:	d030      	beq.n	8015d62 <_printf_common+0xfe>
 8015d00:	428a      	cmp	r2, r1
 8015d02:	dd3a      	ble.n	8015d7a <_printf_common+0x116>
 8015d04:	2300      	movs	r3, #0
 8015d06:	4699      	mov	r9, r3
 8015d08:	1a52      	subs	r2, r2, r1
 8015d0a:	4491      	add	r9, r2
 8015d0c:	341a      	adds	r4, #26
 8015d0e:	2500      	movs	r5, #0
 8015d10:	e002      	b.n	8015d18 <_printf_common+0xb4>
 8015d12:	3501      	adds	r5, #1
 8015d14:	454d      	cmp	r5, r9
 8015d16:	da30      	bge.n	8015d7a <_printf_common+0x116>
 8015d18:	2301      	movs	r3, #1
 8015d1a:	0022      	movs	r2, r4
 8015d1c:	0039      	movs	r1, r7
 8015d1e:	0030      	movs	r0, r6
 8015d20:	47c0      	blx	r8
 8015d22:	1c43      	adds	r3, r0, #1
 8015d24:	d1f5      	bne.n	8015d12 <_printf_common+0xae>
 8015d26:	2001      	movs	r0, #1
 8015d28:	4240      	negs	r0, r0
 8015d2a:	bc1c      	pop	{r2, r3, r4}
 8015d2c:	4690      	mov	r8, r2
 8015d2e:	4699      	mov	r9, r3
 8015d30:	46a2      	mov	sl, r4
 8015d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d34:	464b      	mov	r3, r9
 8015d36:	68e2      	ldr	r2, [r4, #12]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	3501      	adds	r5, #1
 8015d3c:	1ad3      	subs	r3, r2, r3
 8015d3e:	42ab      	cmp	r3, r5
 8015d40:	dd20      	ble.n	8015d84 <_printf_common+0x120>
 8015d42:	2301      	movs	r3, #1
 8015d44:	4652      	mov	r2, sl
 8015d46:	0039      	movs	r1, r7
 8015d48:	0030      	movs	r0, r6
 8015d4a:	47c0      	blx	r8
 8015d4c:	1c43      	adds	r3, r0, #1
 8015d4e:	d1f1      	bne.n	8015d34 <_printf_common+0xd0>
 8015d50:	e7e9      	b.n	8015d26 <_printf_common+0xc2>
 8015d52:	2206      	movs	r2, #6
 8015d54:	421a      	tst	r2, r3
 8015d56:	d012      	beq.n	8015d7e <_printf_common+0x11a>
 8015d58:	2343      	movs	r3, #67	; 0x43
 8015d5a:	5ce3      	ldrb	r3, [r4, r3]
 8015d5c:	1e5a      	subs	r2, r3, #1
 8015d5e:	4193      	sbcs	r3, r2
 8015d60:	e7c0      	b.n	8015ce4 <_printf_common+0x80>
 8015d62:	464b      	mov	r3, r9
 8015d64:	68e0      	ldr	r0, [r4, #12]
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	1ac3      	subs	r3, r0, r3
 8015d6a:	43d8      	mvns	r0, r3
 8015d6c:	17c0      	asrs	r0, r0, #31
 8015d6e:	4018      	ands	r0, r3
 8015d70:	4681      	mov	r9, r0
 8015d72:	428a      	cmp	r2, r1
 8015d74:	dcc8      	bgt.n	8015d08 <_printf_common+0xa4>
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	dcc8      	bgt.n	8015d0c <_printf_common+0xa8>
 8015d7a:	2000      	movs	r0, #0
 8015d7c:	e7d5      	b.n	8015d2a <_printf_common+0xc6>
 8015d7e:	464a      	mov	r2, r9
 8015d80:	6812      	ldr	r2, [r2, #0]
 8015d82:	e795      	b.n	8015cb0 <_printf_common+0x4c>
 8015d84:	2343      	movs	r3, #67	; 0x43
 8015d86:	6821      	ldr	r1, [r4, #0]
 8015d88:	5ce3      	ldrb	r3, [r4, r3]
 8015d8a:	1e5a      	subs	r2, r3, #1
 8015d8c:	4193      	sbcs	r3, r2
 8015d8e:	068a      	lsls	r2, r1, #26
 8015d90:	d49d      	bmi.n	8015cce <_printf_common+0x6a>
 8015d92:	e7a7      	b.n	8015ce4 <_printf_common+0x80>

08015d94 <_printf_i>:
 8015d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d96:	4657      	mov	r7, sl
 8015d98:	469a      	mov	sl, r3
 8015d9a:	2343      	movs	r3, #67	; 0x43
 8015d9c:	469c      	mov	ip, r3
 8015d9e:	464e      	mov	r6, r9
 8015da0:	4645      	mov	r5, r8
 8015da2:	46de      	mov	lr, fp
 8015da4:	448c      	add	ip, r1
 8015da6:	4663      	mov	r3, ip
 8015da8:	b5e0      	push	{r5, r6, r7, lr}
 8015daa:	b087      	sub	sp, #28
 8015dac:	9303      	str	r3, [sp, #12]
 8015dae:	7e0b      	ldrb	r3, [r1, #24]
 8015db0:	4691      	mov	r9, r2
 8015db2:	4680      	mov	r8, r0
 8015db4:	000c      	movs	r4, r1
 8015db6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015db8:	2b6e      	cmp	r3, #110	; 0x6e
 8015dba:	d100      	bne.n	8015dbe <_printf_i+0x2a>
 8015dbc:	e0d8      	b.n	8015f70 <_printf_i+0x1dc>
 8015dbe:	d800      	bhi.n	8015dc2 <_printf_i+0x2e>
 8015dc0:	e071      	b.n	8015ea6 <_printf_i+0x112>
 8015dc2:	2b73      	cmp	r3, #115	; 0x73
 8015dc4:	d100      	bne.n	8015dc8 <_printf_i+0x34>
 8015dc6:	e11a      	b.n	8015ffe <_printf_i+0x26a>
 8015dc8:	d800      	bhi.n	8015dcc <_printf_i+0x38>
 8015dca:	e081      	b.n	8015ed0 <_printf_i+0x13c>
 8015dcc:	2b75      	cmp	r3, #117	; 0x75
 8015dce:	d100      	bne.n	8015dd2 <_printf_i+0x3e>
 8015dd0:	e0ff      	b.n	8015fd2 <_printf_i+0x23e>
 8015dd2:	2b78      	cmp	r3, #120	; 0x78
 8015dd4:	d000      	beq.n	8015dd8 <_printf_i+0x44>
 8015dd6:	e10b      	b.n	8015ff0 <_printf_i+0x25c>
 8015dd8:	680b      	ldr	r3, [r1, #0]
 8015dda:	2078      	movs	r0, #120	; 0x78
 8015ddc:	2145      	movs	r1, #69	; 0x45
 8015dde:	5460      	strb	r0, [r4, r1]
 8015de0:	4994      	ldr	r1, [pc, #592]	; (8016034 <_printf_i+0x2a0>)
 8015de2:	468b      	mov	fp, r1
 8015de4:	6811      	ldr	r1, [r2, #0]
 8015de6:	c940      	ldmia	r1!, {r6}
 8015de8:	6011      	str	r1, [r2, #0]
 8015dea:	0618      	lsls	r0, r3, #24
 8015dec:	d403      	bmi.n	8015df6 <_printf_i+0x62>
 8015dee:	0658      	lsls	r0, r3, #25
 8015df0:	d501      	bpl.n	8015df6 <_printf_i+0x62>
 8015df2:	0436      	lsls	r6, r6, #16
 8015df4:	0c36      	lsrs	r6, r6, #16
 8015df6:	07da      	lsls	r2, r3, #31
 8015df8:	d502      	bpl.n	8015e00 <_printf_i+0x6c>
 8015dfa:	2220      	movs	r2, #32
 8015dfc:	4313      	orrs	r3, r2
 8015dfe:	6023      	str	r3, [r4, #0]
 8015e00:	2710      	movs	r7, #16
 8015e02:	2e00      	cmp	r6, #0
 8015e04:	d100      	bne.n	8015e08 <_printf_i+0x74>
 8015e06:	e0c2      	b.n	8015f8e <_printf_i+0x1fa>
 8015e08:	2343      	movs	r3, #67	; 0x43
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	54e2      	strb	r2, [r4, r3]
 8015e0e:	6863      	ldr	r3, [r4, #4]
 8015e10:	60a3      	str	r3, [r4, #8]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	da00      	bge.n	8015e18 <_printf_i+0x84>
 8015e16:	e0c5      	b.n	8015fa4 <_printf_i+0x210>
 8015e18:	2204      	movs	r2, #4
 8015e1a:	6821      	ldr	r1, [r4, #0]
 8015e1c:	4391      	bics	r1, r2
 8015e1e:	6021      	str	r1, [r4, #0]
 8015e20:	2e00      	cmp	r6, #0
 8015e22:	d000      	beq.n	8015e26 <_printf_i+0x92>
 8015e24:	e083      	b.n	8015f2e <_printf_i+0x19a>
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d000      	beq.n	8015e2c <_printf_i+0x98>
 8015e2a:	e0bd      	b.n	8015fa8 <_printf_i+0x214>
 8015e2c:	9d03      	ldr	r5, [sp, #12]
 8015e2e:	2f08      	cmp	r7, #8
 8015e30:	d100      	bne.n	8015e34 <_printf_i+0xa0>
 8015e32:	e08c      	b.n	8015f4e <_printf_i+0x1ba>
 8015e34:	9b03      	ldr	r3, [sp, #12]
 8015e36:	1b5b      	subs	r3, r3, r5
 8015e38:	6123      	str	r3, [r4, #16]
 8015e3a:	4653      	mov	r3, sl
 8015e3c:	aa05      	add	r2, sp, #20
 8015e3e:	9300      	str	r3, [sp, #0]
 8015e40:	0021      	movs	r1, r4
 8015e42:	464b      	mov	r3, r9
 8015e44:	4640      	mov	r0, r8
 8015e46:	f7ff ff0d 	bl	8015c64 <_printf_common>
 8015e4a:	1c43      	adds	r3, r0, #1
 8015e4c:	d022      	beq.n	8015e94 <_printf_i+0x100>
 8015e4e:	6923      	ldr	r3, [r4, #16]
 8015e50:	002a      	movs	r2, r5
 8015e52:	4649      	mov	r1, r9
 8015e54:	4640      	mov	r0, r8
 8015e56:	47d0      	blx	sl
 8015e58:	1c43      	adds	r3, r0, #1
 8015e5a:	d01b      	beq.n	8015e94 <_printf_i+0x100>
 8015e5c:	6822      	ldr	r2, [r4, #0]
 8015e5e:	9805      	ldr	r0, [sp, #20]
 8015e60:	68e3      	ldr	r3, [r4, #12]
 8015e62:	0792      	lsls	r2, r2, #30
 8015e64:	d400      	bmi.n	8015e68 <_printf_i+0xd4>
 8015e66:	e07f      	b.n	8015f68 <_printf_i+0x1d4>
 8015e68:	1a1a      	subs	r2, r3, r0
 8015e6a:	2a00      	cmp	r2, #0
 8015e6c:	dc00      	bgt.n	8015e70 <_printf_i+0xdc>
 8015e6e:	e07b      	b.n	8015f68 <_printf_i+0x1d4>
 8015e70:	0026      	movs	r6, r4
 8015e72:	2500      	movs	r5, #0
 8015e74:	3619      	adds	r6, #25
 8015e76:	e006      	b.n	8015e86 <_printf_i+0xf2>
 8015e78:	68e3      	ldr	r3, [r4, #12]
 8015e7a:	9805      	ldr	r0, [sp, #20]
 8015e7c:	3501      	adds	r5, #1
 8015e7e:	1a1a      	subs	r2, r3, r0
 8015e80:	42aa      	cmp	r2, r5
 8015e82:	dc00      	bgt.n	8015e86 <_printf_i+0xf2>
 8015e84:	e070      	b.n	8015f68 <_printf_i+0x1d4>
 8015e86:	2301      	movs	r3, #1
 8015e88:	0032      	movs	r2, r6
 8015e8a:	4649      	mov	r1, r9
 8015e8c:	4640      	mov	r0, r8
 8015e8e:	47d0      	blx	sl
 8015e90:	1c43      	adds	r3, r0, #1
 8015e92:	d1f1      	bne.n	8015e78 <_printf_i+0xe4>
 8015e94:	2001      	movs	r0, #1
 8015e96:	4240      	negs	r0, r0
 8015e98:	b007      	add	sp, #28
 8015e9a:	bc3c      	pop	{r2, r3, r4, r5}
 8015e9c:	4690      	mov	r8, r2
 8015e9e:	4699      	mov	r9, r3
 8015ea0:	46a2      	mov	sl, r4
 8015ea2:	46ab      	mov	fp, r5
 8015ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ea6:	2b63      	cmp	r3, #99	; 0x63
 8015ea8:	d100      	bne.n	8015eac <_printf_i+0x118>
 8015eaa:	e084      	b.n	8015fb6 <_printf_i+0x222>
 8015eac:	d81f      	bhi.n	8015eee <_printf_i+0x15a>
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d069      	beq.n	8015f86 <_printf_i+0x1f2>
 8015eb2:	2b58      	cmp	r3, #88	; 0x58
 8015eb4:	d000      	beq.n	8015eb8 <_printf_i+0x124>
 8015eb6:	e09b      	b.n	8015ff0 <_printf_i+0x25c>
 8015eb8:	2145      	movs	r1, #69	; 0x45
 8015eba:	5463      	strb	r3, [r4, r1]
 8015ebc:	495e      	ldr	r1, [pc, #376]	; (8016038 <_printf_i+0x2a4>)
 8015ebe:	6823      	ldr	r3, [r4, #0]
 8015ec0:	468b      	mov	fp, r1
 8015ec2:	6811      	ldr	r1, [r2, #0]
 8015ec4:	c940      	ldmia	r1!, {r6}
 8015ec6:	6011      	str	r1, [r2, #0]
 8015ec8:	0618      	lsls	r0, r3, #24
 8015eca:	d400      	bmi.n	8015ece <_printf_i+0x13a>
 8015ecc:	e78f      	b.n	8015dee <_printf_i+0x5a>
 8015ece:	e792      	b.n	8015df6 <_printf_i+0x62>
 8015ed0:	2b6f      	cmp	r3, #111	; 0x6f
 8015ed2:	d07e      	beq.n	8015fd2 <_printf_i+0x23e>
 8015ed4:	2b70      	cmp	r3, #112	; 0x70
 8015ed6:	d000      	beq.n	8015eda <_printf_i+0x146>
 8015ed8:	e08a      	b.n	8015ff0 <_printf_i+0x25c>
 8015eda:	2320      	movs	r3, #32
 8015edc:	6809      	ldr	r1, [r1, #0]
 8015ede:	2078      	movs	r0, #120	; 0x78
 8015ee0:	430b      	orrs	r3, r1
 8015ee2:	2145      	movs	r1, #69	; 0x45
 8015ee4:	6023      	str	r3, [r4, #0]
 8015ee6:	5460      	strb	r0, [r4, r1]
 8015ee8:	4952      	ldr	r1, [pc, #328]	; (8016034 <_printf_i+0x2a0>)
 8015eea:	468b      	mov	fp, r1
 8015eec:	e77a      	b.n	8015de4 <_printf_i+0x50>
 8015eee:	2b64      	cmp	r3, #100	; 0x64
 8015ef0:	d001      	beq.n	8015ef6 <_printf_i+0x162>
 8015ef2:	2b69      	cmp	r3, #105	; 0x69
 8015ef4:	d17c      	bne.n	8015ff0 <_printf_i+0x25c>
 8015ef6:	6811      	ldr	r1, [r2, #0]
 8015ef8:	6823      	ldr	r3, [r4, #0]
 8015efa:	1d08      	adds	r0, r1, #4
 8015efc:	6010      	str	r0, [r2, #0]
 8015efe:	061d      	lsls	r5, r3, #24
 8015f00:	d54a      	bpl.n	8015f98 <_printf_i+0x204>
 8015f02:	680a      	ldr	r2, [r1, #0]
 8015f04:	0016      	movs	r6, r2
 8015f06:	2a00      	cmp	r2, #0
 8015f08:	db03      	blt.n	8015f12 <_printf_i+0x17e>
 8015f0a:	4b4b      	ldr	r3, [pc, #300]	; (8016038 <_printf_i+0x2a4>)
 8015f0c:	270a      	movs	r7, #10
 8015f0e:	469b      	mov	fp, r3
 8015f10:	e77d      	b.n	8015e0e <_printf_i+0x7a>
 8015f12:	2243      	movs	r2, #67	; 0x43
 8015f14:	212d      	movs	r1, #45	; 0x2d
 8015f16:	54a1      	strb	r1, [r4, r2]
 8015f18:	6862      	ldr	r2, [r4, #4]
 8015f1a:	4276      	negs	r6, r6
 8015f1c:	60a2      	str	r2, [r4, #8]
 8015f1e:	2a00      	cmp	r2, #0
 8015f20:	db02      	blt.n	8015f28 <_printf_i+0x194>
 8015f22:	2204      	movs	r2, #4
 8015f24:	4393      	bics	r3, r2
 8015f26:	6023      	str	r3, [r4, #0]
 8015f28:	4b43      	ldr	r3, [pc, #268]	; (8016038 <_printf_i+0x2a4>)
 8015f2a:	270a      	movs	r7, #10
 8015f2c:	469b      	mov	fp, r3
 8015f2e:	9d03      	ldr	r5, [sp, #12]
 8015f30:	e000      	b.n	8015f34 <_printf_i+0x1a0>
 8015f32:	0006      	movs	r6, r0
 8015f34:	0039      	movs	r1, r7
 8015f36:	0030      	movs	r0, r6
 8015f38:	f7fb fe70 	bl	8011c1c <__aeabi_uidivmod>
 8015f3c:	465b      	mov	r3, fp
 8015f3e:	5c5b      	ldrb	r3, [r3, r1]
 8015f40:	3d01      	subs	r5, #1
 8015f42:	702b      	strb	r3, [r5, #0]
 8015f44:	42be      	cmp	r6, r7
 8015f46:	d2f4      	bcs.n	8015f32 <_printf_i+0x19e>
 8015f48:	2f08      	cmp	r7, #8
 8015f4a:	d000      	beq.n	8015f4e <_printf_i+0x1ba>
 8015f4c:	e772      	b.n	8015e34 <_printf_i+0xa0>
 8015f4e:	6823      	ldr	r3, [r4, #0]
 8015f50:	07db      	lsls	r3, r3, #31
 8015f52:	d400      	bmi.n	8015f56 <_printf_i+0x1c2>
 8015f54:	e76e      	b.n	8015e34 <_printf_i+0xa0>
 8015f56:	6863      	ldr	r3, [r4, #4]
 8015f58:	6922      	ldr	r2, [r4, #16]
 8015f5a:	4293      	cmp	r3, r2
 8015f5c:	dd00      	ble.n	8015f60 <_printf_i+0x1cc>
 8015f5e:	e769      	b.n	8015e34 <_printf_i+0xa0>
 8015f60:	2330      	movs	r3, #48	; 0x30
 8015f62:	3d01      	subs	r5, #1
 8015f64:	702b      	strb	r3, [r5, #0]
 8015f66:	e765      	b.n	8015e34 <_printf_i+0xa0>
 8015f68:	4298      	cmp	r0, r3
 8015f6a:	da95      	bge.n	8015e98 <_printf_i+0x104>
 8015f6c:	0018      	movs	r0, r3
 8015f6e:	e793      	b.n	8015e98 <_printf_i+0x104>
 8015f70:	6813      	ldr	r3, [r2, #0]
 8015f72:	6809      	ldr	r1, [r1, #0]
 8015f74:	1d1d      	adds	r5, r3, #4
 8015f76:	6960      	ldr	r0, [r4, #20]
 8015f78:	6015      	str	r5, [r2, #0]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	060e      	lsls	r6, r1, #24
 8015f7e:	d401      	bmi.n	8015f84 <_printf_i+0x1f0>
 8015f80:	0649      	lsls	r1, r1, #25
 8015f82:	d44b      	bmi.n	801601c <_printf_i+0x288>
 8015f84:	6018      	str	r0, [r3, #0]
 8015f86:	2300      	movs	r3, #0
 8015f88:	9d03      	ldr	r5, [sp, #12]
 8015f8a:	6123      	str	r3, [r4, #16]
 8015f8c:	e755      	b.n	8015e3a <_printf_i+0xa6>
 8015f8e:	2320      	movs	r3, #32
 8015f90:	6822      	ldr	r2, [r4, #0]
 8015f92:	439a      	bics	r2, r3
 8015f94:	6022      	str	r2, [r4, #0]
 8015f96:	e737      	b.n	8015e08 <_printf_i+0x74>
 8015f98:	065d      	lsls	r5, r3, #25
 8015f9a:	d5b2      	bpl.n	8015f02 <_printf_i+0x16e>
 8015f9c:	2200      	movs	r2, #0
 8015f9e:	5e8e      	ldrsh	r6, [r1, r2]
 8015fa0:	0032      	movs	r2, r6
 8015fa2:	e7b0      	b.n	8015f06 <_printf_i+0x172>
 8015fa4:	2e00      	cmp	r6, #0
 8015fa6:	d1c2      	bne.n	8015f2e <_printf_i+0x19a>
 8015fa8:	465b      	mov	r3, fp
 8015faa:	0025      	movs	r5, r4
 8015fac:	781a      	ldrb	r2, [r3, #0]
 8015fae:	2342      	movs	r3, #66	; 0x42
 8015fb0:	3542      	adds	r5, #66	; 0x42
 8015fb2:	54e2      	strb	r2, [r4, r3]
 8015fb4:	e73b      	b.n	8015e2e <_printf_i+0x9a>
 8015fb6:	6813      	ldr	r3, [r2, #0]
 8015fb8:	0025      	movs	r5, r4
 8015fba:	1d19      	adds	r1, r3, #4
 8015fbc:	6011      	str	r1, [r2, #0]
 8015fbe:	681a      	ldr	r2, [r3, #0]
 8015fc0:	2342      	movs	r3, #66	; 0x42
 8015fc2:	54e2      	strb	r2, [r4, r3]
 8015fc4:	3b41      	subs	r3, #65	; 0x41
 8015fc6:	3542      	adds	r5, #66	; 0x42
 8015fc8:	6123      	str	r3, [r4, #16]
 8015fca:	2343      	movs	r3, #67	; 0x43
 8015fcc:	2200      	movs	r2, #0
 8015fce:	54e2      	strb	r2, [r4, r3]
 8015fd0:	e733      	b.n	8015e3a <_printf_i+0xa6>
 8015fd2:	6811      	ldr	r1, [r2, #0]
 8015fd4:	6820      	ldr	r0, [r4, #0]
 8015fd6:	1d0d      	adds	r5, r1, #4
 8015fd8:	6015      	str	r5, [r2, #0]
 8015fda:	0606      	lsls	r6, r0, #24
 8015fdc:	d401      	bmi.n	8015fe2 <_printf_i+0x24e>
 8015fde:	0640      	lsls	r0, r0, #25
 8015fe0:	d41e      	bmi.n	8016020 <_printf_i+0x28c>
 8015fe2:	680e      	ldr	r6, [r1, #0]
 8015fe4:	2b6f      	cmp	r3, #111	; 0x6f
 8015fe6:	d01d      	beq.n	8016024 <_printf_i+0x290>
 8015fe8:	4b13      	ldr	r3, [pc, #76]	; (8016038 <_printf_i+0x2a4>)
 8015fea:	270a      	movs	r7, #10
 8015fec:	469b      	mov	fp, r3
 8015fee:	e70b      	b.n	8015e08 <_printf_i+0x74>
 8015ff0:	2242      	movs	r2, #66	; 0x42
 8015ff2:	0025      	movs	r5, r4
 8015ff4:	54a3      	strb	r3, [r4, r2]
 8015ff6:	2301      	movs	r3, #1
 8015ff8:	3542      	adds	r5, #66	; 0x42
 8015ffa:	6123      	str	r3, [r4, #16]
 8015ffc:	e7e5      	b.n	8015fca <_printf_i+0x236>
 8015ffe:	6813      	ldr	r3, [r2, #0]
 8016000:	1d19      	adds	r1, r3, #4
 8016002:	6011      	str	r1, [r2, #0]
 8016004:	681d      	ldr	r5, [r3, #0]
 8016006:	6862      	ldr	r2, [r4, #4]
 8016008:	2100      	movs	r1, #0
 801600a:	0028      	movs	r0, r5
 801600c:	f000 fb26 	bl	801665c <memchr>
 8016010:	2800      	cmp	r0, #0
 8016012:	d00b      	beq.n	801602c <_printf_i+0x298>
 8016014:	1b40      	subs	r0, r0, r5
 8016016:	6060      	str	r0, [r4, #4]
 8016018:	6120      	str	r0, [r4, #16]
 801601a:	e7d6      	b.n	8015fca <_printf_i+0x236>
 801601c:	8018      	strh	r0, [r3, #0]
 801601e:	e7b2      	b.n	8015f86 <_printf_i+0x1f2>
 8016020:	880e      	ldrh	r6, [r1, #0]
 8016022:	e7df      	b.n	8015fe4 <_printf_i+0x250>
 8016024:	4b04      	ldr	r3, [pc, #16]	; (8016038 <_printf_i+0x2a4>)
 8016026:	2708      	movs	r7, #8
 8016028:	469b      	mov	fp, r3
 801602a:	e6ed      	b.n	8015e08 <_printf_i+0x74>
 801602c:	6860      	ldr	r0, [r4, #4]
 801602e:	6120      	str	r0, [r4, #16]
 8016030:	e7cb      	b.n	8015fca <_printf_i+0x236>
 8016032:	46c0      	nop			; (mov r8, r8)
 8016034:	0801ae18 	.word	0x0801ae18
 8016038:	0801ae04 	.word	0x0801ae04

0801603c <_read_r>:
 801603c:	b570      	push	{r4, r5, r6, lr}
 801603e:	0005      	movs	r5, r0
 8016040:	0008      	movs	r0, r1
 8016042:	0011      	movs	r1, r2
 8016044:	2200      	movs	r2, #0
 8016046:	4c06      	ldr	r4, [pc, #24]	; (8016060 <_read_r+0x24>)
 8016048:	6022      	str	r2, [r4, #0]
 801604a:	001a      	movs	r2, r3
 801604c:	f000 fc1c 	bl	8016888 <_read>
 8016050:	1c43      	adds	r3, r0, #1
 8016052:	d000      	beq.n	8016056 <_read_r+0x1a>
 8016054:	bd70      	pop	{r4, r5, r6, pc}
 8016056:	6823      	ldr	r3, [r4, #0]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d0fb      	beq.n	8016054 <_read_r+0x18>
 801605c:	602b      	str	r3, [r5, #0]
 801605e:	e7f9      	b.n	8016054 <_read_r+0x18>
 8016060:	200043d4 	.word	0x200043d4

08016064 <__swbuf_r>:
 8016064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016066:	0005      	movs	r5, r0
 8016068:	000e      	movs	r6, r1
 801606a:	0014      	movs	r4, r2
 801606c:	2800      	cmp	r0, #0
 801606e:	d002      	beq.n	8016076 <__swbuf_r+0x12>
 8016070:	6983      	ldr	r3, [r0, #24]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d029      	beq.n	80160ca <__swbuf_r+0x66>
 8016076:	4b2d      	ldr	r3, [pc, #180]	; (801612c <__swbuf_r+0xc8>)
 8016078:	429c      	cmp	r4, r3
 801607a:	d02b      	beq.n	80160d4 <__swbuf_r+0x70>
 801607c:	4b2c      	ldr	r3, [pc, #176]	; (8016130 <__swbuf_r+0xcc>)
 801607e:	429c      	cmp	r4, r3
 8016080:	d046      	beq.n	8016110 <__swbuf_r+0xac>
 8016082:	4b2c      	ldr	r3, [pc, #176]	; (8016134 <__swbuf_r+0xd0>)
 8016084:	429c      	cmp	r4, r3
 8016086:	d04e      	beq.n	8016126 <__swbuf_r+0xc2>
 8016088:	69a3      	ldr	r3, [r4, #24]
 801608a:	60a3      	str	r3, [r4, #8]
 801608c:	89a3      	ldrh	r3, [r4, #12]
 801608e:	071b      	lsls	r3, r3, #28
 8016090:	d526      	bpl.n	80160e0 <__swbuf_r+0x7c>
 8016092:	6923      	ldr	r3, [r4, #16]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d023      	beq.n	80160e0 <__swbuf_r+0x7c>
 8016098:	22ff      	movs	r2, #255	; 0xff
 801609a:	b2f7      	uxtb	r7, r6
 801609c:	6961      	ldr	r1, [r4, #20]
 801609e:	4016      	ands	r6, r2
 80160a0:	6822      	ldr	r2, [r4, #0]
 80160a2:	1ad3      	subs	r3, r2, r3
 80160a4:	4299      	cmp	r1, r3
 80160a6:	dd2a      	ble.n	80160fe <__swbuf_r+0x9a>
 80160a8:	3301      	adds	r3, #1
 80160aa:	68a1      	ldr	r1, [r4, #8]
 80160ac:	3901      	subs	r1, #1
 80160ae:	60a1      	str	r1, [r4, #8]
 80160b0:	1c51      	adds	r1, r2, #1
 80160b2:	6021      	str	r1, [r4, #0]
 80160b4:	7017      	strb	r7, [r2, #0]
 80160b6:	6962      	ldr	r2, [r4, #20]
 80160b8:	429a      	cmp	r2, r3
 80160ba:	d02b      	beq.n	8016114 <__swbuf_r+0xb0>
 80160bc:	89a3      	ldrh	r3, [r4, #12]
 80160be:	07db      	lsls	r3, r3, #31
 80160c0:	d501      	bpl.n	80160c6 <__swbuf_r+0x62>
 80160c2:	2e0a      	cmp	r6, #10
 80160c4:	d026      	beq.n	8016114 <__swbuf_r+0xb0>
 80160c6:	0030      	movs	r0, r6
 80160c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160ca:	f7fe fdc7 	bl	8014c5c <__sinit>
 80160ce:	4b17      	ldr	r3, [pc, #92]	; (801612c <__swbuf_r+0xc8>)
 80160d0:	429c      	cmp	r4, r3
 80160d2:	d1d3      	bne.n	801607c <__swbuf_r+0x18>
 80160d4:	686c      	ldr	r4, [r5, #4]
 80160d6:	69a3      	ldr	r3, [r4, #24]
 80160d8:	60a3      	str	r3, [r4, #8]
 80160da:	89a3      	ldrh	r3, [r4, #12]
 80160dc:	071b      	lsls	r3, r3, #28
 80160de:	d4d8      	bmi.n	8016092 <__swbuf_r+0x2e>
 80160e0:	0021      	movs	r1, r4
 80160e2:	0028      	movs	r0, r5
 80160e4:	f000 f834 	bl	8016150 <__swsetup_r>
 80160e8:	2800      	cmp	r0, #0
 80160ea:	d119      	bne.n	8016120 <__swbuf_r+0xbc>
 80160ec:	22ff      	movs	r2, #255	; 0xff
 80160ee:	6923      	ldr	r3, [r4, #16]
 80160f0:	b2f7      	uxtb	r7, r6
 80160f2:	6961      	ldr	r1, [r4, #20]
 80160f4:	4016      	ands	r6, r2
 80160f6:	6822      	ldr	r2, [r4, #0]
 80160f8:	1ad3      	subs	r3, r2, r3
 80160fa:	4299      	cmp	r1, r3
 80160fc:	dcd4      	bgt.n	80160a8 <__swbuf_r+0x44>
 80160fe:	0021      	movs	r1, r4
 8016100:	0028      	movs	r0, r5
 8016102:	f7fe fc71 	bl	80149e8 <_fflush_r>
 8016106:	2800      	cmp	r0, #0
 8016108:	d10a      	bne.n	8016120 <__swbuf_r+0xbc>
 801610a:	6822      	ldr	r2, [r4, #0]
 801610c:	2301      	movs	r3, #1
 801610e:	e7cc      	b.n	80160aa <__swbuf_r+0x46>
 8016110:	68ac      	ldr	r4, [r5, #8]
 8016112:	e7b9      	b.n	8016088 <__swbuf_r+0x24>
 8016114:	0021      	movs	r1, r4
 8016116:	0028      	movs	r0, r5
 8016118:	f7fe fc66 	bl	80149e8 <_fflush_r>
 801611c:	2800      	cmp	r0, #0
 801611e:	d0d2      	beq.n	80160c6 <__swbuf_r+0x62>
 8016120:	2601      	movs	r6, #1
 8016122:	4276      	negs	r6, r6
 8016124:	e7cf      	b.n	80160c6 <__swbuf_r+0x62>
 8016126:	68ec      	ldr	r4, [r5, #12]
 8016128:	e7ae      	b.n	8016088 <__swbuf_r+0x24>
 801612a:	46c0      	nop			; (mov r8, r8)
 801612c:	0801ad80 	.word	0x0801ad80
 8016130:	0801ad60 	.word	0x0801ad60
 8016134:	0801ad40 	.word	0x0801ad40

08016138 <__swbuf>:
 8016138:	b510      	push	{r4, lr}
 801613a:	4b04      	ldr	r3, [pc, #16]	; (801614c <__swbuf+0x14>)
 801613c:	000a      	movs	r2, r1
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	0001      	movs	r1, r0
 8016142:	0018      	movs	r0, r3
 8016144:	f7ff ff8e 	bl	8016064 <__swbuf_r>
 8016148:	bd10      	pop	{r4, pc}
 801614a:	46c0      	nop			; (mov r8, r8)
 801614c:	200005dc 	.word	0x200005dc

08016150 <__swsetup_r>:
 8016150:	4b3e      	ldr	r3, [pc, #248]	; (801624c <__swsetup_r+0xfc>)
 8016152:	b570      	push	{r4, r5, r6, lr}
 8016154:	681d      	ldr	r5, [r3, #0]
 8016156:	0006      	movs	r6, r0
 8016158:	000c      	movs	r4, r1
 801615a:	2d00      	cmp	r5, #0
 801615c:	d002      	beq.n	8016164 <__swsetup_r+0x14>
 801615e:	69ab      	ldr	r3, [r5, #24]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d01b      	beq.n	801619c <__swsetup_r+0x4c>
 8016164:	4b3a      	ldr	r3, [pc, #232]	; (8016250 <__swsetup_r+0x100>)
 8016166:	429c      	cmp	r4, r3
 8016168:	d01e      	beq.n	80161a8 <__swsetup_r+0x58>
 801616a:	4b3a      	ldr	r3, [pc, #232]	; (8016254 <__swsetup_r+0x104>)
 801616c:	429c      	cmp	r4, r3
 801616e:	d04c      	beq.n	801620a <__swsetup_r+0xba>
 8016170:	4b39      	ldr	r3, [pc, #228]	; (8016258 <__swsetup_r+0x108>)
 8016172:	429c      	cmp	r4, r3
 8016174:	d060      	beq.n	8016238 <__swsetup_r+0xe8>
 8016176:	230c      	movs	r3, #12
 8016178:	5ee2      	ldrsh	r2, [r4, r3]
 801617a:	b293      	uxth	r3, r2
 801617c:	0719      	lsls	r1, r3, #28
 801617e:	d519      	bpl.n	80161b4 <__swsetup_r+0x64>
 8016180:	6921      	ldr	r1, [r4, #16]
 8016182:	2900      	cmp	r1, #0
 8016184:	d021      	beq.n	80161ca <__swsetup_r+0x7a>
 8016186:	07da      	lsls	r2, r3, #31
 8016188:	d52e      	bpl.n	80161e8 <__swsetup_r+0x98>
 801618a:	2300      	movs	r3, #0
 801618c:	60a3      	str	r3, [r4, #8]
 801618e:	6963      	ldr	r3, [r4, #20]
 8016190:	2000      	movs	r0, #0
 8016192:	425b      	negs	r3, r3
 8016194:	61a3      	str	r3, [r4, #24]
 8016196:	2900      	cmp	r1, #0
 8016198:	d02e      	beq.n	80161f8 <__swsetup_r+0xa8>
 801619a:	bd70      	pop	{r4, r5, r6, pc}
 801619c:	0028      	movs	r0, r5
 801619e:	f7fe fd5d 	bl	8014c5c <__sinit>
 80161a2:	4b2b      	ldr	r3, [pc, #172]	; (8016250 <__swsetup_r+0x100>)
 80161a4:	429c      	cmp	r4, r3
 80161a6:	d1e0      	bne.n	801616a <__swsetup_r+0x1a>
 80161a8:	686c      	ldr	r4, [r5, #4]
 80161aa:	230c      	movs	r3, #12
 80161ac:	5ee2      	ldrsh	r2, [r4, r3]
 80161ae:	b293      	uxth	r3, r2
 80161b0:	0719      	lsls	r1, r3, #28
 80161b2:	d4e5      	bmi.n	8016180 <__swsetup_r+0x30>
 80161b4:	06d9      	lsls	r1, r3, #27
 80161b6:	d541      	bpl.n	801623c <__swsetup_r+0xec>
 80161b8:	075b      	lsls	r3, r3, #29
 80161ba:	d428      	bmi.n	801620e <__swsetup_r+0xbe>
 80161bc:	6921      	ldr	r1, [r4, #16]
 80161be:	2308      	movs	r3, #8
 80161c0:	4313      	orrs	r3, r2
 80161c2:	81a3      	strh	r3, [r4, #12]
 80161c4:	b29b      	uxth	r3, r3
 80161c6:	2900      	cmp	r1, #0
 80161c8:	d1dd      	bne.n	8016186 <__swsetup_r+0x36>
 80161ca:	22a0      	movs	r2, #160	; 0xa0
 80161cc:	2080      	movs	r0, #128	; 0x80
 80161ce:	0092      	lsls	r2, r2, #2
 80161d0:	0080      	lsls	r0, r0, #2
 80161d2:	401a      	ands	r2, r3
 80161d4:	4282      	cmp	r2, r0
 80161d6:	d0d6      	beq.n	8016186 <__swsetup_r+0x36>
 80161d8:	0021      	movs	r1, r4
 80161da:	0030      	movs	r0, r6
 80161dc:	f000 f9f6 	bl	80165cc <__smakebuf_r>
 80161e0:	89a3      	ldrh	r3, [r4, #12]
 80161e2:	6921      	ldr	r1, [r4, #16]
 80161e4:	07da      	lsls	r2, r3, #31
 80161e6:	d4d0      	bmi.n	801618a <__swsetup_r+0x3a>
 80161e8:	2200      	movs	r2, #0
 80161ea:	079b      	lsls	r3, r3, #30
 80161ec:	d400      	bmi.n	80161f0 <__swsetup_r+0xa0>
 80161ee:	6962      	ldr	r2, [r4, #20]
 80161f0:	60a2      	str	r2, [r4, #8]
 80161f2:	2000      	movs	r0, #0
 80161f4:	2900      	cmp	r1, #0
 80161f6:	d1d0      	bne.n	801619a <__swsetup_r+0x4a>
 80161f8:	220c      	movs	r2, #12
 80161fa:	5ea3      	ldrsh	r3, [r4, r2]
 80161fc:	061a      	lsls	r2, r3, #24
 80161fe:	d5cc      	bpl.n	801619a <__swsetup_r+0x4a>
 8016200:	2240      	movs	r2, #64	; 0x40
 8016202:	4313      	orrs	r3, r2
 8016204:	81a3      	strh	r3, [r4, #12]
 8016206:	3801      	subs	r0, #1
 8016208:	e7c7      	b.n	801619a <__swsetup_r+0x4a>
 801620a:	68ac      	ldr	r4, [r5, #8]
 801620c:	e7b3      	b.n	8016176 <__swsetup_r+0x26>
 801620e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016210:	2900      	cmp	r1, #0
 8016212:	d00a      	beq.n	801622a <__swsetup_r+0xda>
 8016214:	0023      	movs	r3, r4
 8016216:	3344      	adds	r3, #68	; 0x44
 8016218:	4299      	cmp	r1, r3
 801621a:	d004      	beq.n	8016226 <__swsetup_r+0xd6>
 801621c:	0030      	movs	r0, r6
 801621e:	f7fe fe7f 	bl	8014f20 <_free_r>
 8016222:	230c      	movs	r3, #12
 8016224:	5ee2      	ldrsh	r2, [r4, r3]
 8016226:	2300      	movs	r3, #0
 8016228:	6363      	str	r3, [r4, #52]	; 0x34
 801622a:	2324      	movs	r3, #36	; 0x24
 801622c:	439a      	bics	r2, r3
 801622e:	2300      	movs	r3, #0
 8016230:	6921      	ldr	r1, [r4, #16]
 8016232:	6063      	str	r3, [r4, #4]
 8016234:	6021      	str	r1, [r4, #0]
 8016236:	e7c2      	b.n	80161be <__swsetup_r+0x6e>
 8016238:	68ec      	ldr	r4, [r5, #12]
 801623a:	e79c      	b.n	8016176 <__swsetup_r+0x26>
 801623c:	2309      	movs	r3, #9
 801623e:	6033      	str	r3, [r6, #0]
 8016240:	2340      	movs	r3, #64	; 0x40
 8016242:	2001      	movs	r0, #1
 8016244:	431a      	orrs	r2, r3
 8016246:	81a2      	strh	r2, [r4, #12]
 8016248:	4240      	negs	r0, r0
 801624a:	e7a6      	b.n	801619a <__swsetup_r+0x4a>
 801624c:	200005dc 	.word	0x200005dc
 8016250:	0801ad80 	.word	0x0801ad80
 8016254:	0801ad60 	.word	0x0801ad60
 8016258:	0801ad40 	.word	0x0801ad40

0801625c <__sfvwrite_r>:
 801625c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801625e:	4645      	mov	r5, r8
 8016260:	46de      	mov	lr, fp
 8016262:	4657      	mov	r7, sl
 8016264:	464e      	mov	r6, r9
 8016266:	b5e0      	push	{r5, r6, r7, lr}
 8016268:	6893      	ldr	r3, [r2, #8]
 801626a:	b083      	sub	sp, #12
 801626c:	9000      	str	r0, [sp, #0]
 801626e:	000c      	movs	r4, r1
 8016270:	4690      	mov	r8, r2
 8016272:	2b00      	cmp	r3, #0
 8016274:	d06d      	beq.n	8016352 <__sfvwrite_r+0xf6>
 8016276:	898b      	ldrh	r3, [r1, #12]
 8016278:	071a      	lsls	r2, r3, #28
 801627a:	d400      	bmi.n	801627e <__sfvwrite_r+0x22>
 801627c:	e071      	b.n	8016362 <__sfvwrite_r+0x106>
 801627e:	690a      	ldr	r2, [r1, #16]
 8016280:	2a00      	cmp	r2, #0
 8016282:	d100      	bne.n	8016286 <__sfvwrite_r+0x2a>
 8016284:	e06d      	b.n	8016362 <__sfvwrite_r+0x106>
 8016286:	4642      	mov	r2, r8
 8016288:	6816      	ldr	r6, [r2, #0]
 801628a:	079a      	lsls	r2, r3, #30
 801628c:	d400      	bmi.n	8016290 <__sfvwrite_r+0x34>
 801628e:	e075      	b.n	801637c <__sfvwrite_r+0x120>
 8016290:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016292:	2700      	movs	r7, #0
 8016294:	469a      	mov	sl, r3
 8016296:	4bb5      	ldr	r3, [pc, #724]	; (801656c <__sfvwrite_r+0x310>)
 8016298:	2500      	movs	r5, #0
 801629a:	4699      	mov	r9, r3
 801629c:	6a21      	ldr	r1, [r4, #32]
 801629e:	2d00      	cmp	r5, #0
 80162a0:	d016      	beq.n	80162d0 <__sfvwrite_r+0x74>
 80162a2:	002b      	movs	r3, r5
 80162a4:	454d      	cmp	r5, r9
 80162a6:	d900      	bls.n	80162aa <__sfvwrite_r+0x4e>
 80162a8:	4bb0      	ldr	r3, [pc, #704]	; (801656c <__sfvwrite_r+0x310>)
 80162aa:	003a      	movs	r2, r7
 80162ac:	9800      	ldr	r0, [sp, #0]
 80162ae:	47d0      	blx	sl
 80162b0:	2800      	cmp	r0, #0
 80162b2:	dc00      	bgt.n	80162b6 <__sfvwrite_r+0x5a>
 80162b4:	e0d5      	b.n	8016462 <__sfvwrite_r+0x206>
 80162b6:	4643      	mov	r3, r8
 80162b8:	689b      	ldr	r3, [r3, #8]
 80162ba:	183f      	adds	r7, r7, r0
 80162bc:	1a2d      	subs	r5, r5, r0
 80162be:	1a18      	subs	r0, r3, r0
 80162c0:	4643      	mov	r3, r8
 80162c2:	6098      	str	r0, [r3, #8]
 80162c4:	d045      	beq.n	8016352 <__sfvwrite_r+0xf6>
 80162c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80162c8:	6a21      	ldr	r1, [r4, #32]
 80162ca:	469a      	mov	sl, r3
 80162cc:	2d00      	cmp	r5, #0
 80162ce:	d1e8      	bne.n	80162a2 <__sfvwrite_r+0x46>
 80162d0:	6837      	ldr	r7, [r6, #0]
 80162d2:	6875      	ldr	r5, [r6, #4]
 80162d4:	3608      	adds	r6, #8
 80162d6:	e7e2      	b.n	801629e <__sfvwrite_r+0x42>
 80162d8:	464b      	mov	r3, r9
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	469a      	mov	sl, r3
 80162de:	464b      	mov	r3, r9
 80162e0:	685f      	ldr	r7, [r3, #4]
 80162e2:	2308      	movs	r3, #8
 80162e4:	469c      	mov	ip, r3
 80162e6:	44e1      	add	r9, ip
 80162e8:	2f00      	cmp	r7, #0
 80162ea:	d0f5      	beq.n	80162d8 <__sfvwrite_r+0x7c>
 80162ec:	003a      	movs	r2, r7
 80162ee:	210a      	movs	r1, #10
 80162f0:	4650      	mov	r0, sl
 80162f2:	f000 f9b3 	bl	801665c <memchr>
 80162f6:	2800      	cmp	r0, #0
 80162f8:	d100      	bne.n	80162fc <__sfvwrite_r+0xa0>
 80162fa:	e0ce      	b.n	801649a <__sfvwrite_r+0x23e>
 80162fc:	4653      	mov	r3, sl
 80162fe:	3001      	adds	r0, #1
 8016300:	1ac6      	subs	r6, r0, r3
 8016302:	0033      	movs	r3, r6
 8016304:	46bb      	mov	fp, r7
 8016306:	429f      	cmp	r7, r3
 8016308:	d900      	bls.n	801630c <__sfvwrite_r+0xb0>
 801630a:	469b      	mov	fp, r3
 801630c:	6820      	ldr	r0, [r4, #0]
 801630e:	6922      	ldr	r2, [r4, #16]
 8016310:	6963      	ldr	r3, [r4, #20]
 8016312:	4290      	cmp	r0, r2
 8016314:	d904      	bls.n	8016320 <__sfvwrite_r+0xc4>
 8016316:	68a2      	ldr	r2, [r4, #8]
 8016318:	189d      	adds	r5, r3, r2
 801631a:	45ab      	cmp	fp, r5
 801631c:	dd00      	ble.n	8016320 <__sfvwrite_r+0xc4>
 801631e:	e092      	b.n	8016446 <__sfvwrite_r+0x1ea>
 8016320:	455b      	cmp	r3, fp
 8016322:	dd00      	ble.n	8016326 <__sfvwrite_r+0xca>
 8016324:	e0f9      	b.n	801651a <__sfvwrite_r+0x2be>
 8016326:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8016328:	4652      	mov	r2, sl
 801632a:	6a21      	ldr	r1, [r4, #32]
 801632c:	9800      	ldr	r0, [sp, #0]
 801632e:	47a8      	blx	r5
 8016330:	1e05      	subs	r5, r0, #0
 8016332:	dc00      	bgt.n	8016336 <__sfvwrite_r+0xda>
 8016334:	e095      	b.n	8016462 <__sfvwrite_r+0x206>
 8016336:	1b76      	subs	r6, r6, r5
 8016338:	2001      	movs	r0, #1
 801633a:	2e00      	cmp	r6, #0
 801633c:	d100      	bne.n	8016340 <__sfvwrite_r+0xe4>
 801633e:	e0e4      	b.n	801650a <__sfvwrite_r+0x2ae>
 8016340:	4643      	mov	r3, r8
 8016342:	689b      	ldr	r3, [r3, #8]
 8016344:	44aa      	add	sl, r5
 8016346:	1b7f      	subs	r7, r7, r5
 8016348:	1b5d      	subs	r5, r3, r5
 801634a:	4643      	mov	r3, r8
 801634c:	609d      	str	r5, [r3, #8]
 801634e:	d000      	beq.n	8016352 <__sfvwrite_r+0xf6>
 8016350:	e095      	b.n	801647e <__sfvwrite_r+0x222>
 8016352:	2000      	movs	r0, #0
 8016354:	b003      	add	sp, #12
 8016356:	bc3c      	pop	{r2, r3, r4, r5}
 8016358:	4690      	mov	r8, r2
 801635a:	4699      	mov	r9, r3
 801635c:	46a2      	mov	sl, r4
 801635e:	46ab      	mov	fp, r5
 8016360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016362:	0021      	movs	r1, r4
 8016364:	9800      	ldr	r0, [sp, #0]
 8016366:	f7ff fef3 	bl	8016150 <__swsetup_r>
 801636a:	2800      	cmp	r0, #0
 801636c:	d000      	beq.n	8016370 <__sfvwrite_r+0x114>
 801636e:	e0f9      	b.n	8016564 <__sfvwrite_r+0x308>
 8016370:	4642      	mov	r2, r8
 8016372:	89a3      	ldrh	r3, [r4, #12]
 8016374:	6816      	ldr	r6, [r2, #0]
 8016376:	079a      	lsls	r2, r3, #30
 8016378:	d500      	bpl.n	801637c <__sfvwrite_r+0x120>
 801637a:	e789      	b.n	8016290 <__sfvwrite_r+0x34>
 801637c:	07da      	lsls	r2, r3, #31
 801637e:	d478      	bmi.n	8016472 <__sfvwrite_r+0x216>
 8016380:	2200      	movs	r2, #0
 8016382:	4691      	mov	r9, r2
 8016384:	2280      	movs	r2, #128	; 0x80
 8016386:	0092      	lsls	r2, r2, #2
 8016388:	2700      	movs	r7, #0
 801638a:	4693      	mov	fp, r2
 801638c:	68a5      	ldr	r5, [r4, #8]
 801638e:	6820      	ldr	r0, [r4, #0]
 8016390:	2f00      	cmp	r7, #0
 8016392:	d053      	beq.n	801643c <__sfvwrite_r+0x1e0>
 8016394:	465a      	mov	r2, fp
 8016396:	4213      	tst	r3, r2
 8016398:	d100      	bne.n	801639c <__sfvwrite_r+0x140>
 801639a:	e081      	b.n	80164a0 <__sfvwrite_r+0x244>
 801639c:	46aa      	mov	sl, r5
 801639e:	42bd      	cmp	r5, r7
 80163a0:	d900      	bls.n	80163a4 <__sfvwrite_r+0x148>
 80163a2:	e0af      	b.n	8016504 <__sfvwrite_r+0x2a8>
 80163a4:	2290      	movs	r2, #144	; 0x90
 80163a6:	00d2      	lsls	r2, r2, #3
 80163a8:	4213      	tst	r3, r2
 80163aa:	d02e      	beq.n	801640a <__sfvwrite_r+0x1ae>
 80163ac:	6921      	ldr	r1, [r4, #16]
 80163ae:	1a45      	subs	r5, r0, r1
 80163b0:	46ac      	mov	ip, r5
 80163b2:	6960      	ldr	r0, [r4, #20]
 80163b4:	9501      	str	r5, [sp, #4]
 80163b6:	0042      	lsls	r2, r0, #1
 80163b8:	1812      	adds	r2, r2, r0
 80163ba:	0fd0      	lsrs	r0, r2, #31
 80163bc:	1882      	adds	r2, r0, r2
 80163be:	1c78      	adds	r0, r7, #1
 80163c0:	1052      	asrs	r2, r2, #1
 80163c2:	4460      	add	r0, ip
 80163c4:	4692      	mov	sl, r2
 80163c6:	4290      	cmp	r0, r2
 80163c8:	d901      	bls.n	80163ce <__sfvwrite_r+0x172>
 80163ca:	4682      	mov	sl, r0
 80163cc:	0002      	movs	r2, r0
 80163ce:	055b      	lsls	r3, r3, #21
 80163d0:	d400      	bmi.n	80163d4 <__sfvwrite_r+0x178>
 80163d2:	e0af      	b.n	8016534 <__sfvwrite_r+0x2d8>
 80163d4:	0011      	movs	r1, r2
 80163d6:	9800      	ldr	r0, [sp, #0]
 80163d8:	f7fe fdf8 	bl	8014fcc <_malloc_r>
 80163dc:	1e05      	subs	r5, r0, #0
 80163de:	d100      	bne.n	80163e2 <__sfvwrite_r+0x186>
 80163e0:	e0ba      	b.n	8016558 <__sfvwrite_r+0x2fc>
 80163e2:	9a01      	ldr	r2, [sp, #4]
 80163e4:	6921      	ldr	r1, [r4, #16]
 80163e6:	f7fe fcf3 	bl	8014dd0 <memcpy>
 80163ea:	89a3      	ldrh	r3, [r4, #12]
 80163ec:	4a60      	ldr	r2, [pc, #384]	; (8016570 <__sfvwrite_r+0x314>)
 80163ee:	4013      	ands	r3, r2
 80163f0:	2280      	movs	r2, #128	; 0x80
 80163f2:	4313      	orrs	r3, r2
 80163f4:	81a3      	strh	r3, [r4, #12]
 80163f6:	4652      	mov	r2, sl
 80163f8:	9b01      	ldr	r3, [sp, #4]
 80163fa:	6125      	str	r5, [r4, #16]
 80163fc:	18e8      	adds	r0, r5, r3
 80163fe:	46ba      	mov	sl, r7
 8016400:	003d      	movs	r5, r7
 8016402:	1ad3      	subs	r3, r2, r3
 8016404:	6020      	str	r0, [r4, #0]
 8016406:	6162      	str	r2, [r4, #20]
 8016408:	60a3      	str	r3, [r4, #8]
 801640a:	4652      	mov	r2, sl
 801640c:	4649      	mov	r1, r9
 801640e:	f000 f965 	bl	80166dc <memmove>
 8016412:	68a3      	ldr	r3, [r4, #8]
 8016414:	1b5d      	subs	r5, r3, r5
 8016416:	60a5      	str	r5, [r4, #8]
 8016418:	003d      	movs	r5, r7
 801641a:	2700      	movs	r7, #0
 801641c:	6823      	ldr	r3, [r4, #0]
 801641e:	4453      	add	r3, sl
 8016420:	6023      	str	r3, [r4, #0]
 8016422:	4643      	mov	r3, r8
 8016424:	689b      	ldr	r3, [r3, #8]
 8016426:	44a9      	add	r9, r5
 8016428:	1b5d      	subs	r5, r3, r5
 801642a:	4643      	mov	r3, r8
 801642c:	609d      	str	r5, [r3, #8]
 801642e:	d100      	bne.n	8016432 <__sfvwrite_r+0x1d6>
 8016430:	e78f      	b.n	8016352 <__sfvwrite_r+0xf6>
 8016432:	68a5      	ldr	r5, [r4, #8]
 8016434:	6820      	ldr	r0, [r4, #0]
 8016436:	89a3      	ldrh	r3, [r4, #12]
 8016438:	2f00      	cmp	r7, #0
 801643a:	d1ab      	bne.n	8016394 <__sfvwrite_r+0x138>
 801643c:	6832      	ldr	r2, [r6, #0]
 801643e:	6877      	ldr	r7, [r6, #4]
 8016440:	4691      	mov	r9, r2
 8016442:	3608      	adds	r6, #8
 8016444:	e7a4      	b.n	8016390 <__sfvwrite_r+0x134>
 8016446:	4651      	mov	r1, sl
 8016448:	002a      	movs	r2, r5
 801644a:	f000 f947 	bl	80166dc <memmove>
 801644e:	6823      	ldr	r3, [r4, #0]
 8016450:	0021      	movs	r1, r4
 8016452:	195b      	adds	r3, r3, r5
 8016454:	6023      	str	r3, [r4, #0]
 8016456:	9800      	ldr	r0, [sp, #0]
 8016458:	f7fe fac6 	bl	80149e8 <_fflush_r>
 801645c:	2800      	cmp	r0, #0
 801645e:	d100      	bne.n	8016462 <__sfvwrite_r+0x206>
 8016460:	e769      	b.n	8016336 <__sfvwrite_r+0xda>
 8016462:	220c      	movs	r2, #12
 8016464:	5ea3      	ldrsh	r3, [r4, r2]
 8016466:	2240      	movs	r2, #64	; 0x40
 8016468:	2001      	movs	r0, #1
 801646a:	4313      	orrs	r3, r2
 801646c:	81a3      	strh	r3, [r4, #12]
 801646e:	4240      	negs	r0, r0
 8016470:	e770      	b.n	8016354 <__sfvwrite_r+0xf8>
 8016472:	2300      	movs	r3, #0
 8016474:	46b1      	mov	r9, r6
 8016476:	2000      	movs	r0, #0
 8016478:	469a      	mov	sl, r3
 801647a:	2700      	movs	r7, #0
 801647c:	001e      	movs	r6, r3
 801647e:	2f00      	cmp	r7, #0
 8016480:	d100      	bne.n	8016484 <__sfvwrite_r+0x228>
 8016482:	e729      	b.n	80162d8 <__sfvwrite_r+0x7c>
 8016484:	2800      	cmp	r0, #0
 8016486:	d000      	beq.n	801648a <__sfvwrite_r+0x22e>
 8016488:	e73b      	b.n	8016302 <__sfvwrite_r+0xa6>
 801648a:	003a      	movs	r2, r7
 801648c:	210a      	movs	r1, #10
 801648e:	4650      	mov	r0, sl
 8016490:	f000 f8e4 	bl	801665c <memchr>
 8016494:	2800      	cmp	r0, #0
 8016496:	d000      	beq.n	801649a <__sfvwrite_r+0x23e>
 8016498:	e730      	b.n	80162fc <__sfvwrite_r+0xa0>
 801649a:	1c7b      	adds	r3, r7, #1
 801649c:	001e      	movs	r6, r3
 801649e:	e731      	b.n	8016304 <__sfvwrite_r+0xa8>
 80164a0:	6923      	ldr	r3, [r4, #16]
 80164a2:	4283      	cmp	r3, r0
 80164a4:	d317      	bcc.n	80164d6 <__sfvwrite_r+0x27a>
 80164a6:	6963      	ldr	r3, [r4, #20]
 80164a8:	469a      	mov	sl, r3
 80164aa:	42bb      	cmp	r3, r7
 80164ac:	d813      	bhi.n	80164d6 <__sfvwrite_r+0x27a>
 80164ae:	4b31      	ldr	r3, [pc, #196]	; (8016574 <__sfvwrite_r+0x318>)
 80164b0:	0038      	movs	r0, r7
 80164b2:	429f      	cmp	r7, r3
 80164b4:	d900      	bls.n	80164b8 <__sfvwrite_r+0x25c>
 80164b6:	4830      	ldr	r0, [pc, #192]	; (8016578 <__sfvwrite_r+0x31c>)
 80164b8:	4651      	mov	r1, sl
 80164ba:	f7fb fbb3 	bl	8011c24 <__divsi3>
 80164be:	4653      	mov	r3, sl
 80164c0:	464a      	mov	r2, r9
 80164c2:	4343      	muls	r3, r0
 80164c4:	6a21      	ldr	r1, [r4, #32]
 80164c6:	9800      	ldr	r0, [sp, #0]
 80164c8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80164ca:	47a8      	blx	r5
 80164cc:	2800      	cmp	r0, #0
 80164ce:	ddc8      	ble.n	8016462 <__sfvwrite_r+0x206>
 80164d0:	0005      	movs	r5, r0
 80164d2:	1b7f      	subs	r7, r7, r5
 80164d4:	e7a5      	b.n	8016422 <__sfvwrite_r+0x1c6>
 80164d6:	42bd      	cmp	r5, r7
 80164d8:	d900      	bls.n	80164dc <__sfvwrite_r+0x280>
 80164da:	003d      	movs	r5, r7
 80164dc:	002a      	movs	r2, r5
 80164de:	4649      	mov	r1, r9
 80164e0:	f000 f8fc 	bl	80166dc <memmove>
 80164e4:	68a3      	ldr	r3, [r4, #8]
 80164e6:	6822      	ldr	r2, [r4, #0]
 80164e8:	1b5b      	subs	r3, r3, r5
 80164ea:	1952      	adds	r2, r2, r5
 80164ec:	60a3      	str	r3, [r4, #8]
 80164ee:	6022      	str	r2, [r4, #0]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d1ee      	bne.n	80164d2 <__sfvwrite_r+0x276>
 80164f4:	0021      	movs	r1, r4
 80164f6:	9800      	ldr	r0, [sp, #0]
 80164f8:	f7fe fa76 	bl	80149e8 <_fflush_r>
 80164fc:	2800      	cmp	r0, #0
 80164fe:	d1b0      	bne.n	8016462 <__sfvwrite_r+0x206>
 8016500:	1b7f      	subs	r7, r7, r5
 8016502:	e78e      	b.n	8016422 <__sfvwrite_r+0x1c6>
 8016504:	003d      	movs	r5, r7
 8016506:	46ba      	mov	sl, r7
 8016508:	e77f      	b.n	801640a <__sfvwrite_r+0x1ae>
 801650a:	0021      	movs	r1, r4
 801650c:	9800      	ldr	r0, [sp, #0]
 801650e:	f7fe fa6b 	bl	80149e8 <_fflush_r>
 8016512:	2800      	cmp	r0, #0
 8016514:	d100      	bne.n	8016518 <__sfvwrite_r+0x2bc>
 8016516:	e713      	b.n	8016340 <__sfvwrite_r+0xe4>
 8016518:	e7a3      	b.n	8016462 <__sfvwrite_r+0x206>
 801651a:	465a      	mov	r2, fp
 801651c:	4651      	mov	r1, sl
 801651e:	f000 f8dd 	bl	80166dc <memmove>
 8016522:	465a      	mov	r2, fp
 8016524:	68a3      	ldr	r3, [r4, #8]
 8016526:	465d      	mov	r5, fp
 8016528:	1a9b      	subs	r3, r3, r2
 801652a:	60a3      	str	r3, [r4, #8]
 801652c:	6823      	ldr	r3, [r4, #0]
 801652e:	445b      	add	r3, fp
 8016530:	6023      	str	r3, [r4, #0]
 8016532:	e700      	b.n	8016336 <__sfvwrite_r+0xda>
 8016534:	9800      	ldr	r0, [sp, #0]
 8016536:	f000 f92f 	bl	8016798 <_realloc_r>
 801653a:	1e05      	subs	r5, r0, #0
 801653c:	d000      	beq.n	8016540 <__sfvwrite_r+0x2e4>
 801653e:	e75a      	b.n	80163f6 <__sfvwrite_r+0x19a>
 8016540:	9d00      	ldr	r5, [sp, #0]
 8016542:	6921      	ldr	r1, [r4, #16]
 8016544:	0028      	movs	r0, r5
 8016546:	f7fe fceb 	bl	8014f20 <_free_r>
 801654a:	2280      	movs	r2, #128	; 0x80
 801654c:	89a3      	ldrh	r3, [r4, #12]
 801654e:	4393      	bics	r3, r2
 8016550:	3a74      	subs	r2, #116	; 0x74
 8016552:	b21b      	sxth	r3, r3
 8016554:	602a      	str	r2, [r5, #0]
 8016556:	e786      	b.n	8016466 <__sfvwrite_r+0x20a>
 8016558:	230c      	movs	r3, #12
 801655a:	9a00      	ldr	r2, [sp, #0]
 801655c:	6013      	str	r3, [r2, #0]
 801655e:	220c      	movs	r2, #12
 8016560:	5ea3      	ldrsh	r3, [r4, r2]
 8016562:	e780      	b.n	8016466 <__sfvwrite_r+0x20a>
 8016564:	2001      	movs	r0, #1
 8016566:	4240      	negs	r0, r0
 8016568:	e6f4      	b.n	8016354 <__sfvwrite_r+0xf8>
 801656a:	46c0      	nop			; (mov r8, r8)
 801656c:	7ffffc00 	.word	0x7ffffc00
 8016570:	fffffb7f 	.word	0xfffffb7f
 8016574:	7ffffffe 	.word	0x7ffffffe
 8016578:	7fffffff 	.word	0x7fffffff

0801657c <__swhatbuf_r>:
 801657c:	b570      	push	{r4, r5, r6, lr}
 801657e:	000c      	movs	r4, r1
 8016580:	001d      	movs	r5, r3
 8016582:	230e      	movs	r3, #14
 8016584:	5ec9      	ldrsh	r1, [r1, r3]
 8016586:	b096      	sub	sp, #88	; 0x58
 8016588:	0016      	movs	r6, r2
 801658a:	2900      	cmp	r1, #0
 801658c:	db14      	blt.n	80165b8 <__swhatbuf_r+0x3c>
 801658e:	466a      	mov	r2, sp
 8016590:	f000 f92a 	bl	80167e8 <_fstat_r>
 8016594:	2800      	cmp	r0, #0
 8016596:	db0f      	blt.n	80165b8 <__swhatbuf_r+0x3c>
 8016598:	22f0      	movs	r2, #240	; 0xf0
 801659a:	9b01      	ldr	r3, [sp, #4]
 801659c:	0212      	lsls	r2, r2, #8
 801659e:	4013      	ands	r3, r2
 80165a0:	4a09      	ldr	r2, [pc, #36]	; (80165c8 <__swhatbuf_r+0x4c>)
 80165a2:	4694      	mov	ip, r2
 80165a4:	4463      	add	r3, ip
 80165a6:	425a      	negs	r2, r3
 80165a8:	4153      	adcs	r3, r2
 80165aa:	602b      	str	r3, [r5, #0]
 80165ac:	2380      	movs	r3, #128	; 0x80
 80165ae:	00db      	lsls	r3, r3, #3
 80165b0:	6033      	str	r3, [r6, #0]
 80165b2:	2000      	movs	r0, #0
 80165b4:	b016      	add	sp, #88	; 0x58
 80165b6:	bd70      	pop	{r4, r5, r6, pc}
 80165b8:	2300      	movs	r3, #0
 80165ba:	602b      	str	r3, [r5, #0]
 80165bc:	89a3      	ldrh	r3, [r4, #12]
 80165be:	061b      	lsls	r3, r3, #24
 80165c0:	d5f4      	bpl.n	80165ac <__swhatbuf_r+0x30>
 80165c2:	2340      	movs	r3, #64	; 0x40
 80165c4:	6033      	str	r3, [r6, #0]
 80165c6:	e7f4      	b.n	80165b2 <__swhatbuf_r+0x36>
 80165c8:	ffffe000 	.word	0xffffe000

080165cc <__smakebuf_r>:
 80165cc:	b570      	push	{r4, r5, r6, lr}
 80165ce:	898b      	ldrh	r3, [r1, #12]
 80165d0:	b082      	sub	sp, #8
 80165d2:	0006      	movs	r6, r0
 80165d4:	000c      	movs	r4, r1
 80165d6:	079b      	lsls	r3, r3, #30
 80165d8:	d507      	bpl.n	80165ea <__smakebuf_r+0x1e>
 80165da:	0023      	movs	r3, r4
 80165dc:	3347      	adds	r3, #71	; 0x47
 80165de:	6023      	str	r3, [r4, #0]
 80165e0:	6123      	str	r3, [r4, #16]
 80165e2:	2301      	movs	r3, #1
 80165e4:	6163      	str	r3, [r4, #20]
 80165e6:	b002      	add	sp, #8
 80165e8:	bd70      	pop	{r4, r5, r6, pc}
 80165ea:	ab01      	add	r3, sp, #4
 80165ec:	466a      	mov	r2, sp
 80165ee:	f7ff ffc5 	bl	801657c <__swhatbuf_r>
 80165f2:	9900      	ldr	r1, [sp, #0]
 80165f4:	0005      	movs	r5, r0
 80165f6:	0030      	movs	r0, r6
 80165f8:	f7fe fce8 	bl	8014fcc <_malloc_r>
 80165fc:	2800      	cmp	r0, #0
 80165fe:	d010      	beq.n	8016622 <__smakebuf_r+0x56>
 8016600:	2280      	movs	r2, #128	; 0x80
 8016602:	4b15      	ldr	r3, [pc, #84]	; (8016658 <__smakebuf_r+0x8c>)
 8016604:	62b3      	str	r3, [r6, #40]	; 0x28
 8016606:	89a3      	ldrh	r3, [r4, #12]
 8016608:	6020      	str	r0, [r4, #0]
 801660a:	4313      	orrs	r3, r2
 801660c:	9a00      	ldr	r2, [sp, #0]
 801660e:	b21b      	sxth	r3, r3
 8016610:	6162      	str	r2, [r4, #20]
 8016612:	9a01      	ldr	r2, [sp, #4]
 8016614:	81a3      	strh	r3, [r4, #12]
 8016616:	6120      	str	r0, [r4, #16]
 8016618:	2a00      	cmp	r2, #0
 801661a:	d10c      	bne.n	8016636 <__smakebuf_r+0x6a>
 801661c:	432b      	orrs	r3, r5
 801661e:	81a3      	strh	r3, [r4, #12]
 8016620:	e7e1      	b.n	80165e6 <__smakebuf_r+0x1a>
 8016622:	220c      	movs	r2, #12
 8016624:	5ea3      	ldrsh	r3, [r4, r2]
 8016626:	059a      	lsls	r2, r3, #22
 8016628:	d4dd      	bmi.n	80165e6 <__smakebuf_r+0x1a>
 801662a:	2203      	movs	r2, #3
 801662c:	4393      	bics	r3, r2
 801662e:	2202      	movs	r2, #2
 8016630:	4313      	orrs	r3, r2
 8016632:	81a3      	strh	r3, [r4, #12]
 8016634:	e7d1      	b.n	80165da <__smakebuf_r+0xe>
 8016636:	230e      	movs	r3, #14
 8016638:	5ee1      	ldrsh	r1, [r4, r3]
 801663a:	0030      	movs	r0, r6
 801663c:	f000 f8e8 	bl	8016810 <_isatty_r>
 8016640:	2800      	cmp	r0, #0
 8016642:	d102      	bne.n	801664a <__smakebuf_r+0x7e>
 8016644:	220c      	movs	r2, #12
 8016646:	5ea3      	ldrsh	r3, [r4, r2]
 8016648:	e7e8      	b.n	801661c <__smakebuf_r+0x50>
 801664a:	2203      	movs	r2, #3
 801664c:	89a3      	ldrh	r3, [r4, #12]
 801664e:	4393      	bics	r3, r2
 8016650:	2201      	movs	r2, #1
 8016652:	4313      	orrs	r3, r2
 8016654:	b21b      	sxth	r3, r3
 8016656:	e7e1      	b.n	801661c <__smakebuf_r+0x50>
 8016658:	08014a71 	.word	0x08014a71

0801665c <memchr>:
 801665c:	b570      	push	{r4, r5, r6, lr}
 801665e:	b2cd      	uxtb	r5, r1
 8016660:	0783      	lsls	r3, r0, #30
 8016662:	d034      	beq.n	80166ce <memchr+0x72>
 8016664:	1e53      	subs	r3, r2, #1
 8016666:	2a00      	cmp	r2, #0
 8016668:	d01b      	beq.n	80166a2 <memchr+0x46>
 801666a:	7802      	ldrb	r2, [r0, #0]
 801666c:	42aa      	cmp	r2, r5
 801666e:	d019      	beq.n	80166a4 <memchr+0x48>
 8016670:	2403      	movs	r4, #3
 8016672:	e004      	b.n	801667e <memchr+0x22>
 8016674:	3b01      	subs	r3, #1
 8016676:	d314      	bcc.n	80166a2 <memchr+0x46>
 8016678:	7802      	ldrb	r2, [r0, #0]
 801667a:	42aa      	cmp	r2, r5
 801667c:	d012      	beq.n	80166a4 <memchr+0x48>
 801667e:	3001      	adds	r0, #1
 8016680:	4220      	tst	r0, r4
 8016682:	d1f7      	bne.n	8016674 <memchr+0x18>
 8016684:	2b03      	cmp	r3, #3
 8016686:	d80e      	bhi.n	80166a6 <memchr+0x4a>
 8016688:	2b00      	cmp	r3, #0
 801668a:	d00a      	beq.n	80166a2 <memchr+0x46>
 801668c:	7802      	ldrb	r2, [r0, #0]
 801668e:	42aa      	cmp	r2, r5
 8016690:	d008      	beq.n	80166a4 <memchr+0x48>
 8016692:	18c3      	adds	r3, r0, r3
 8016694:	e002      	b.n	801669c <memchr+0x40>
 8016696:	7802      	ldrb	r2, [r0, #0]
 8016698:	42aa      	cmp	r2, r5
 801669a:	d003      	beq.n	80166a4 <memchr+0x48>
 801669c:	3001      	adds	r0, #1
 801669e:	4283      	cmp	r3, r0
 80166a0:	d1f9      	bne.n	8016696 <memchr+0x3a>
 80166a2:	2000      	movs	r0, #0
 80166a4:	bd70      	pop	{r4, r5, r6, pc}
 80166a6:	22ff      	movs	r2, #255	; 0xff
 80166a8:	060c      	lsls	r4, r1, #24
 80166aa:	0c24      	lsrs	r4, r4, #16
 80166ac:	4011      	ands	r1, r2
 80166ae:	4321      	orrs	r1, r4
 80166b0:	040c      	lsls	r4, r1, #16
 80166b2:	4e08      	ldr	r6, [pc, #32]	; (80166d4 <memchr+0x78>)
 80166b4:	430c      	orrs	r4, r1
 80166b6:	6802      	ldr	r2, [r0, #0]
 80166b8:	4907      	ldr	r1, [pc, #28]	; (80166d8 <memchr+0x7c>)
 80166ba:	4062      	eors	r2, r4
 80166bc:	1851      	adds	r1, r2, r1
 80166be:	4391      	bics	r1, r2
 80166c0:	4231      	tst	r1, r6
 80166c2:	d1e3      	bne.n	801668c <memchr+0x30>
 80166c4:	3b04      	subs	r3, #4
 80166c6:	3004      	adds	r0, #4
 80166c8:	2b03      	cmp	r3, #3
 80166ca:	d8f4      	bhi.n	80166b6 <memchr+0x5a>
 80166cc:	e7dc      	b.n	8016688 <memchr+0x2c>
 80166ce:	0013      	movs	r3, r2
 80166d0:	e7d8      	b.n	8016684 <memchr+0x28>
 80166d2:	46c0      	nop			; (mov r8, r8)
 80166d4:	80808080 	.word	0x80808080
 80166d8:	fefefeff 	.word	0xfefefeff

080166dc <memmove>:
 80166dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166de:	46c6      	mov	lr, r8
 80166e0:	b500      	push	{lr}
 80166e2:	4288      	cmp	r0, r1
 80166e4:	d90c      	bls.n	8016700 <memmove+0x24>
 80166e6:	188b      	adds	r3, r1, r2
 80166e8:	4298      	cmp	r0, r3
 80166ea:	d209      	bcs.n	8016700 <memmove+0x24>
 80166ec:	1e53      	subs	r3, r2, #1
 80166ee:	2a00      	cmp	r2, #0
 80166f0:	d003      	beq.n	80166fa <memmove+0x1e>
 80166f2:	5cca      	ldrb	r2, [r1, r3]
 80166f4:	54c2      	strb	r2, [r0, r3]
 80166f6:	3b01      	subs	r3, #1
 80166f8:	d2fb      	bcs.n	80166f2 <memmove+0x16>
 80166fa:	bc04      	pop	{r2}
 80166fc:	4690      	mov	r8, r2
 80166fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016700:	2a0f      	cmp	r2, #15
 8016702:	d80c      	bhi.n	801671e <memmove+0x42>
 8016704:	0005      	movs	r5, r0
 8016706:	1e56      	subs	r6, r2, #1
 8016708:	2a00      	cmp	r2, #0
 801670a:	d0f6      	beq.n	80166fa <memmove+0x1e>
 801670c:	2300      	movs	r3, #0
 801670e:	e000      	b.n	8016712 <memmove+0x36>
 8016710:	0023      	movs	r3, r4
 8016712:	5cca      	ldrb	r2, [r1, r3]
 8016714:	1c5c      	adds	r4, r3, #1
 8016716:	54ea      	strb	r2, [r5, r3]
 8016718:	429e      	cmp	r6, r3
 801671a:	d1f9      	bne.n	8016710 <memmove+0x34>
 801671c:	e7ed      	b.n	80166fa <memmove+0x1e>
 801671e:	000b      	movs	r3, r1
 8016720:	2603      	movs	r6, #3
 8016722:	4303      	orrs	r3, r0
 8016724:	401e      	ands	r6, r3
 8016726:	000c      	movs	r4, r1
 8016728:	0003      	movs	r3, r0
 801672a:	2e00      	cmp	r6, #0
 801672c:	d12e      	bne.n	801678c <memmove+0xb0>
 801672e:	0015      	movs	r5, r2
 8016730:	3d10      	subs	r5, #16
 8016732:	092d      	lsrs	r5, r5, #4
 8016734:	46ac      	mov	ip, r5
 8016736:	012d      	lsls	r5, r5, #4
 8016738:	46a8      	mov	r8, r5
 801673a:	4480      	add	r8, r0
 801673c:	e000      	b.n	8016740 <memmove+0x64>
 801673e:	002b      	movs	r3, r5
 8016740:	001d      	movs	r5, r3
 8016742:	6827      	ldr	r7, [r4, #0]
 8016744:	3510      	adds	r5, #16
 8016746:	601f      	str	r7, [r3, #0]
 8016748:	6867      	ldr	r7, [r4, #4]
 801674a:	605f      	str	r7, [r3, #4]
 801674c:	68a7      	ldr	r7, [r4, #8]
 801674e:	609f      	str	r7, [r3, #8]
 8016750:	68e7      	ldr	r7, [r4, #12]
 8016752:	3410      	adds	r4, #16
 8016754:	60df      	str	r7, [r3, #12]
 8016756:	4543      	cmp	r3, r8
 8016758:	d1f1      	bne.n	801673e <memmove+0x62>
 801675a:	4665      	mov	r5, ip
 801675c:	230f      	movs	r3, #15
 801675e:	240c      	movs	r4, #12
 8016760:	3501      	adds	r5, #1
 8016762:	012d      	lsls	r5, r5, #4
 8016764:	1949      	adds	r1, r1, r5
 8016766:	4013      	ands	r3, r2
 8016768:	1945      	adds	r5, r0, r5
 801676a:	4214      	tst	r4, r2
 801676c:	d011      	beq.n	8016792 <memmove+0xb6>
 801676e:	598c      	ldr	r4, [r1, r6]
 8016770:	51ac      	str	r4, [r5, r6]
 8016772:	3604      	adds	r6, #4
 8016774:	1b9c      	subs	r4, r3, r6
 8016776:	2c03      	cmp	r4, #3
 8016778:	d8f9      	bhi.n	801676e <memmove+0x92>
 801677a:	2403      	movs	r4, #3
 801677c:	3b04      	subs	r3, #4
 801677e:	089b      	lsrs	r3, r3, #2
 8016780:	3301      	adds	r3, #1
 8016782:	009b      	lsls	r3, r3, #2
 8016784:	18ed      	adds	r5, r5, r3
 8016786:	18c9      	adds	r1, r1, r3
 8016788:	4022      	ands	r2, r4
 801678a:	e7bc      	b.n	8016706 <memmove+0x2a>
 801678c:	1e56      	subs	r6, r2, #1
 801678e:	0005      	movs	r5, r0
 8016790:	e7bc      	b.n	801670c <memmove+0x30>
 8016792:	001a      	movs	r2, r3
 8016794:	e7b7      	b.n	8016706 <memmove+0x2a>
 8016796:	46c0      	nop			; (mov r8, r8)

08016798 <_realloc_r>:
 8016798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801679a:	0007      	movs	r7, r0
 801679c:	000c      	movs	r4, r1
 801679e:	0015      	movs	r5, r2
 80167a0:	2900      	cmp	r1, #0
 80167a2:	d01b      	beq.n	80167dc <_realloc_r+0x44>
 80167a4:	2a00      	cmp	r2, #0
 80167a6:	d015      	beq.n	80167d4 <_realloc_r+0x3c>
 80167a8:	f000 f844 	bl	8016834 <_malloc_usable_size_r>
 80167ac:	0026      	movs	r6, r4
 80167ae:	42a8      	cmp	r0, r5
 80167b0:	d301      	bcc.n	80167b6 <_realloc_r+0x1e>
 80167b2:	0030      	movs	r0, r6
 80167b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167b6:	0029      	movs	r1, r5
 80167b8:	0038      	movs	r0, r7
 80167ba:	f7fe fc07 	bl	8014fcc <_malloc_r>
 80167be:	1e06      	subs	r6, r0, #0
 80167c0:	d0f7      	beq.n	80167b2 <_realloc_r+0x1a>
 80167c2:	0021      	movs	r1, r4
 80167c4:	002a      	movs	r2, r5
 80167c6:	f7fe fb03 	bl	8014dd0 <memcpy>
 80167ca:	0021      	movs	r1, r4
 80167cc:	0038      	movs	r0, r7
 80167ce:	f7fe fba7 	bl	8014f20 <_free_r>
 80167d2:	e7ee      	b.n	80167b2 <_realloc_r+0x1a>
 80167d4:	f7fe fba4 	bl	8014f20 <_free_r>
 80167d8:	2600      	movs	r6, #0
 80167da:	e7ea      	b.n	80167b2 <_realloc_r+0x1a>
 80167dc:	0011      	movs	r1, r2
 80167de:	f7fe fbf5 	bl	8014fcc <_malloc_r>
 80167e2:	0006      	movs	r6, r0
 80167e4:	e7e5      	b.n	80167b2 <_realloc_r+0x1a>
 80167e6:	46c0      	nop			; (mov r8, r8)

080167e8 <_fstat_r>:
 80167e8:	2300      	movs	r3, #0
 80167ea:	b570      	push	{r4, r5, r6, lr}
 80167ec:	4c07      	ldr	r4, [pc, #28]	; (801680c <_fstat_r+0x24>)
 80167ee:	0005      	movs	r5, r0
 80167f0:	0008      	movs	r0, r1
 80167f2:	0011      	movs	r1, r2
 80167f4:	6023      	str	r3, [r4, #0]
 80167f6:	f000 f82f 	bl	8016858 <_fstat>
 80167fa:	1c43      	adds	r3, r0, #1
 80167fc:	d000      	beq.n	8016800 <_fstat_r+0x18>
 80167fe:	bd70      	pop	{r4, r5, r6, pc}
 8016800:	6823      	ldr	r3, [r4, #0]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d0fb      	beq.n	80167fe <_fstat_r+0x16>
 8016806:	602b      	str	r3, [r5, #0]
 8016808:	e7f9      	b.n	80167fe <_fstat_r+0x16>
 801680a:	46c0      	nop			; (mov r8, r8)
 801680c:	200043d4 	.word	0x200043d4

08016810 <_isatty_r>:
 8016810:	2300      	movs	r3, #0
 8016812:	b570      	push	{r4, r5, r6, lr}
 8016814:	4c06      	ldr	r4, [pc, #24]	; (8016830 <_isatty_r+0x20>)
 8016816:	0005      	movs	r5, r0
 8016818:	0008      	movs	r0, r1
 801681a:	6023      	str	r3, [r4, #0]
 801681c:	f000 f824 	bl	8016868 <_isatty>
 8016820:	1c43      	adds	r3, r0, #1
 8016822:	d000      	beq.n	8016826 <_isatty_r+0x16>
 8016824:	bd70      	pop	{r4, r5, r6, pc}
 8016826:	6823      	ldr	r3, [r4, #0]
 8016828:	2b00      	cmp	r3, #0
 801682a:	d0fb      	beq.n	8016824 <_isatty_r+0x14>
 801682c:	602b      	str	r3, [r5, #0]
 801682e:	e7f9      	b.n	8016824 <_isatty_r+0x14>
 8016830:	200043d4 	.word	0x200043d4

08016834 <_malloc_usable_size_r>:
 8016834:	1f0b      	subs	r3, r1, #4
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	1f18      	subs	r0, r3, #4
 801683a:	2b00      	cmp	r3, #0
 801683c:	db00      	blt.n	8016840 <_malloc_usable_size_r+0xc>
 801683e:	4770      	bx	lr
 8016840:	580b      	ldr	r3, [r1, r0]
 8016842:	18c0      	adds	r0, r0, r3
 8016844:	e7fb      	b.n	801683e <_malloc_usable_size_r+0xa>
 8016846:	46c0      	nop			; (mov r8, r8)

08016848 <_close>:
 8016848:	2258      	movs	r2, #88	; 0x58
 801684a:	2001      	movs	r0, #1
 801684c:	4b01      	ldr	r3, [pc, #4]	; (8016854 <_close+0xc>)
 801684e:	4240      	negs	r0, r0
 8016850:	601a      	str	r2, [r3, #0]
 8016852:	4770      	bx	lr
 8016854:	200043d4 	.word	0x200043d4

08016858 <_fstat>:
 8016858:	2258      	movs	r2, #88	; 0x58
 801685a:	2001      	movs	r0, #1
 801685c:	4b01      	ldr	r3, [pc, #4]	; (8016864 <_fstat+0xc>)
 801685e:	4240      	negs	r0, r0
 8016860:	601a      	str	r2, [r3, #0]
 8016862:	4770      	bx	lr
 8016864:	200043d4 	.word	0x200043d4

08016868 <_isatty>:
 8016868:	2258      	movs	r2, #88	; 0x58
 801686a:	4b02      	ldr	r3, [pc, #8]	; (8016874 <_isatty+0xc>)
 801686c:	2000      	movs	r0, #0
 801686e:	601a      	str	r2, [r3, #0]
 8016870:	4770      	bx	lr
 8016872:	46c0      	nop			; (mov r8, r8)
 8016874:	200043d4 	.word	0x200043d4

08016878 <_lseek>:
 8016878:	2258      	movs	r2, #88	; 0x58
 801687a:	2001      	movs	r0, #1
 801687c:	4b01      	ldr	r3, [pc, #4]	; (8016884 <_lseek+0xc>)
 801687e:	4240      	negs	r0, r0
 8016880:	601a      	str	r2, [r3, #0]
 8016882:	4770      	bx	lr
 8016884:	200043d4 	.word	0x200043d4

08016888 <_read>:
 8016888:	2258      	movs	r2, #88	; 0x58
 801688a:	2001      	movs	r0, #1
 801688c:	4b01      	ldr	r3, [pc, #4]	; (8016894 <_read+0xc>)
 801688e:	4240      	negs	r0, r0
 8016890:	601a      	str	r2, [r3, #0]
 8016892:	4770      	bx	lr
 8016894:	200043d4 	.word	0x200043d4

08016898 <_sbrk>:
 8016898:	4a04      	ldr	r2, [pc, #16]	; (80168ac <_sbrk+0x14>)
 801689a:	6813      	ldr	r3, [r2, #0]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d003      	beq.n	80168a8 <_sbrk+0x10>
 80168a0:	1818      	adds	r0, r3, r0
 80168a2:	6010      	str	r0, [r2, #0]
 80168a4:	0018      	movs	r0, r3
 80168a6:	4770      	bx	lr
 80168a8:	4b01      	ldr	r3, [pc, #4]	; (80168b0 <_sbrk+0x18>)
 80168aa:	e7f9      	b.n	80168a0 <_sbrk+0x8>
 80168ac:	200043d0 	.word	0x200043d0
 80168b0:	200043d8 	.word	0x200043d8

080168b4 <_init>:
 80168b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168b6:	46c0      	nop			; (mov r8, r8)
 80168b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168ba:	bc08      	pop	{r3}
 80168bc:	469e      	mov	lr, r3
 80168be:	4770      	bx	lr

080168c0 <_fini>:
 80168c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168c2:	46c0      	nop			; (mov r8, r8)
 80168c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168c6:	bc08      	pop	{r3}
 80168c8:	469e      	mov	lr, r3
 80168ca:	4770      	bx	lr
 80168cc:	3d206372 	.word	0x3d206372
 80168d0:	0030203d 	.word	0x0030203d
 80168d4:	6d6f682f 	.word	0x6d6f682f
 80168d8:	656a2f65 	.word	0x656a2f65
 80168dc:	532f736e 	.word	0x532f736e
 80168e0:	492d6275 	.word	0x492d6275
 80168e4:	532d546f 	.word	0x532d546f
 80168e8:	6b636174 	.word	0x6b636174
 80168ec:	6174732f 	.word	0x6174732f
 80168f0:	612f6b63 	.word	0x612f6b63
 80168f4:	2f737070 	.word	0x2f737070
 80168f8:	74736574 	.word	0x74736574
 80168fc:	6e75665f 	.word	0x6e75665f
 8016900:	6f697463 	.word	0x6f697463
 8016904:	65742f6e 	.word	0x65742f6e
 8016908:	665f7473 	.word	0x665f7473
 801690c:	74636e75 	.word	0x74636e75
 8016910:	2e6e6f69 	.word	0x2e6e6f69
 8016914:	00000063 	.word	0x00000063
 8016918:	69766544 	.word	0x69766544
 801691c:	62206563 	.word	0x62206563
 8016920:	65746f6f 	.word	0x65746f6f
 8016924:	00000a64 	.word	0x00000a64

08016928 <__func__.11821>:
 8016928:	636f7270 5f737365 65636572 64657669     process_received
 8016938:	7461645f 00000061                       _data...

08016940 <_APP_NAME>:
 8016940:	74736574 6e75665f 6f697463 0000006e     test_function...

08016950 <_GIT_SHA1>:
 8016950:	32633835 36656234 00000000 0800055c     58c24be6....\...
 8016960:	08000558 08000558 08000558 08000558     X...X...X...X...
 8016970:	08000584 08000558 08000558 08000558     ....X...X...X...
 8016980:	08000558 08000570 08000558 08000558     X...p...X...X...
 8016990:	0800056c 08000574 08000558 08000558     l...t...X...X...
 80169a0:	08000558 08000560 08000564 08000558     X...`...d...X...
 80169b0:	08000558 08000558 08000558 08000558     X...X...X...X...
 80169c0:	08000554 08000568 736c6166 00000065     T...h...false...
 80169d0:	6d6f682f 656a2f65 532f736e 492d6275     /home/jens/Sub-I
 80169e0:	532d546f 6b636174 6174732f 6d2f6b63     oT-Stack/stack/m
 80169f0:	6c75646f 642f7365 2f706137 2f636e69     odules/d7ap/inc/
 8016a00:	70613764 0000682e 6f727245 6e692072     d7ap.h..Error in
 8016a10:	6e697469 4c412067 6f722050 6120746f     iting ALP root a
 8016a20:	20687475 2079656b 656c6966 6425203a     uth key file: %d
 8016a30:	00000000 6f727245 6e692072 6e697469     ....Error initin
 8016a40:	4c412067 73752050 61207265 20687475     g ALP user auth 
 8016a50:	2079656b 656c6966 6425203a 00000000     key file: %d....
 8016a60:	6d6f682f 656a2f65 532f736e 492d6275     /home/jens/Sub-I
 8016a70:	532d546f 6b636174 6174732f 6d2f6b63     oT-Stack/stack/m
 8016a80:	6c75646f 612f7365 612f706c 6c5f706c     odules/alp/alp_l
 8016a90:	72657961 0000632e 636f7270 5f737365     ayer.c..process_
 8016aa0:	74697261 705f6d68 69646572 65746163     arithm_predicate
 8016ab0:	70797420 69252065 746f6720 206f7420      type %i got to 
 8016ac0:	65726e75 61686361 20656c62 65646f63     unreachable code
 8016ad0:	00000000 5f706c61 6579616c 72705f72     ....alp_layer_pr
 8016ae0:	7365636f 61202c73 675f706c 655f7465     ocess, alp_get_e
 8016af0:	63657078 5f646574 70736572 65736e6f     xpected_response
 8016b00:	6e656c5f 20687467 6c696166 77206465     _length failed w
 8016b10:	20687469 6f727265 25203a72 00000069     ith error: %i...
 8016b20:	636f7270 20737365 61613764 20707463     process d7aactp 
 8016b30:	6c696166 61206465 6c612073 20636f6c     failed as alloc 
 8016b40:	6c696166 00006465 636f7270 20737365     failed..process 
 8016b50:	61613764 20707463 6c696166 61206465     d7aactp failed a
 8016b60:	69662073 70206f66 6f207475 69252066     s fifo put of %i
 8016b70:	74796220 66207365 656c6961 00000064      bytes failed...
 8016b80:	77726f66 65647261 6f632064 6e616d6d     forwarded comman
 8016b90:	6f632064 656c706d 20646574 68746977     d completed with
 8016ba0:	4c554e20 6c61204c 6e695f70 66726574      NULL alp_interf
 8016bb0:	5f656361 74617473 00007375 77726f66     ace_status..forw
 8016bc0:	65647261 6f632064 6e616d6d 6f632064     arded command co
 8016bd0:	656c706d 20646574 6c696166 61206465     mpleted failed a
 8016be0:	6f632073 6e616d6d 69772064 74206874     s command with t
 8016bf0:	736e6172 20646920 61206925 6920646e     rans id %i and i
 8016c00:	69206674 69252064 746f6e20 756f6620     tf id %i not fou
 8016c10:	0000646e 77726f66 65647261 6f632064     nd..forwarded co
 8016c20:	6e616d6d 6f632064 656c706d 20646574     mmand completed 
 8016c30:	6c696166 61206465 6c612073 20636f6c     failed as alloc 
 8016c40:	7220666f 20707365 6d6d6f63 20646e61     of resp command 
 8016c50:	6c696166 00006465 77726f66 65647261     failed..forwarde
 8016c60:	6f632064 6e616d6d 6f632064 656c706d     d command comple
 8016c70:	20646574 6c696166 61206465 6c612073     ted failed as al
 8016c80:	70612070 646e6570 61662073 64656c69     p appends failed
 8016c90:	206e6f20 70736572 6d6f6320 646e616d      on resp command
 8016ca0:	00000000 5f706c61 6579616c 73203a72     ....alp_layer: s
 8016cb0:	6b636174 72746320 6966206c 6320656c     tack ctrl file c
 8016cc0:	626c6c61 3a6b6361 61657220 69662064     allback: read fi
 8016cd0:	7220656c 72757465 2064656e 6f727265     le returned erro
 8016ce0:	69252072 00000000 6c696166 74206465     r %i....failed t
 8016cf0:	6e69206f 69207469 7265746e 65636166     o init interface
 8016d00:	20692520 68746977 72726520 2520726f      %i with error %
 8016d10:	53202e69 70706f74 00676e69 65697274     i. Stopping.trie
 8016d20:	6f742064 61747320 61207472 6e69206e     d to start an in
 8016d30:	66726574 20656361 29692528 61687420     terface (%i) tha
 8016d40:	73692074 746f6e20 67657220 65747369     t is not registe
 8016d50:	00646572 65697274 6f742064 726f6620     red.tried to for
 8016d60:	64726177 6d6f7320 69687465 6f20676e     ward something o
 8016d70:	20726576 6e752061 65757169 66746920     ver a unique itf
 8016d80:	69687720 7320656c 6b636174 6f747320      while stack sto
 8016d90:	73692070 74636120 00657669 636f7270     p is active.proc
 8016da0:	20737365 6e797361 61203a63 636f6c6c     ess async: alloc
 8016db0:	6d6f6320 646e616d 69616620 2064656c      command failed 
 8016dc0:	20726f66 20656874 70736572 65736e6f     for the response
 8016dd0:	6d6f6320 646e616d 7264202c 6970706f      command, droppi
 8016de0:	6320676e 616d6d6f 0000646e 73726170     ng command..pars
 8016df0:	20676e69 6c696166 69206465 7270206e     ing failed in pr
 8016e00:	7365636f 73612073 2c636e79 65687420     ocess async, the
 8016e10:	74636120 206e6f69 74206577 64656972      action we tried
 8016e20:	756f6320 6220646c 69252065 00000000      could be %i....
 8016e30:	636f7270 5f737365 6e797361 74203a63     process_async: t
 8016e40:	695f6761 20732764 276e6f64 79732074     ag_id's don't sy
 8016e50:	7520636e 28202170 21206925 6925203d     nc up! (%i != %i
 8016e60:	203d2120 00002930 636f7270 20737365      != 0)..process 
 8016e70:	6e797361 72702063 7365636f 6f632073     async process co
 8016e80:	6e616d6d 69252064 6e657720 72772074     mmand %i went wr
 8016e90:	20676e6f 68746977 72726520 6320726f     ong with error c
 8016ea0:	2065646f 30257830 00005832 636f7270     ode 0x%02X..proc
 8016eb0:	5f737365 6e797361 66203a63 646e756f     ess_async: found
 8016ec0:	206f6e20 75716572 20747365 6d6d6f63      no request comm
 8016ed0:	20646e61 20726f66 70736572 65736e6f     and for response
 8016ee0:	6d6f6320 646e616d 74697720 61742068      command with ta
 8016ef0:	69252067 646e6120 69726f20 206e6967     g %i and origin 
 8016f00:	20667469 00006925 636f7270 5f737365     itf %i..process_
 8016f10:	6e797361 63203a63 616d6d6f 6920646e     async: command i
 8016f20:	65722073 6e6f7073 62206573 6e207475     s response but n
 8016f30:	6f72206f 28206d6f 20296925 72206e69     o room (%i) in r
 8016f40:	5f707365 6d6d6f63 20646e61 61206f74     esp_command to a
 8016f50:	72206464 6f707365 2065736e 00676174     dd response tag.
 8016f60:	636f7270 20737365 6e797361 74203a63     process async: t
 8016f70:	69206761 65722073 73657571 20646574     ag is requested 
 8016f80:	20747562 72206f6e 206d6f6f 29692528     but no room (%i)
 8016f90:	726f6620 67617420 00000000 0800123c      for tag....<...
 8016fa0:	080010fc 08001164 0800123c 0800116e     ....d...<...n...
 8016fb0:	0800123c 08001178 0800123c 0800123c     <...x...<...<...
 8016fc0:	08001182 0800123c 0800123c 0800123c     ....<...<...<...
 8016fd0:	0800123c 0800123c 0800123c 0800123c     <...<...<...<...
 8016fe0:	08001220 0800123c 0800123c 0800123c      ...<...<...<...
 8016ff0:	0800123c 0800123c 0800123c 0800123c     <...<...<...<...
 8017000:	0800123c 0800123c 0800123c 0800123c     <...<...<...<...
 8017010:	0800123c 0800123c 0800123c 08001216     <...<...<.......
 8017020:	0800123c 0800118c 08001198 0800123c     <...........<...
 8017030:	0800123c 0800123c 0800123c 0800123c     <...<...<...<...
 8017040:	0800123c 0800123c 0800123c 0800123c     <...<...<...<...
 8017050:	0800123c 0800123c 0800123c 0800123c     <...<...<...<...
 8017060:	0800123c 080011e0 080011f0 08001200     <...............
 8017070:	08001228 08001232 65636572 64657669     (...2...received
 8017080:	73657220 736e6f70 61662065 64656c69      response failed
 8017090:	20736120 6d6d6f63 20646e61 68746977      as command with
 80170a0:	61727420 6920736e 69252064 646e6120      trans id %i and
 80170b0:	66746920 20646920 6e206925 6620746f      itf id %i not f
 80170c0:	646e756f 00000000 65636572 64657669     ound....received
 80170d0:	73657220 736e6f70 61662065 64656c69      response failed
 80170e0:	20736120 6f6c6c61 666f2063 73657220      as alloc of res
 80170f0:	6f632070 6e616d6d 61662064 64656c69     p command failed
 8017100:	00000000 65636572 64657669 73657220     ....received res
 8017110:	736e6f70 61662065 64656c69 20736120     ponse failed as 
 8017120:	20706c61 65707061 2073646e 6c696166     alp appends fail
 8017130:	6f206465 6572206e 63207073 616d6d6f     ed on resp comma
 8017140:	0000646e                                nd..

08017144 <__func__.11061>:
 8017144:	6e617274 74696d73 7365725f 736e6f70     transmit_respons
 8017154:	00000065 08001bee 08001b7e 08001b88     e.......~.......
 8017164:	08001bee 08001b74 08001bee 08001b92     ....t...........
 8017174:	08001bee 08001bae 08001bae 08001bee     ................
 8017184:	08001bee 08001bee 08001bee 08001bee     ................
 8017194:	08001bee 08001bee 08001b92 08001bee     ................
 80171a4:	08001bee 08001bee 08001bee 08001bee     ................
 80171b4:	08001bee 08001bee 08001bee 08001bee     ................
 80171c4:	08001bee 08001bee 08001bee 08001bee     ................
 80171d4:	08001bee 08001b74 08001bee 08001b9c     ....t...........
 80171e4:	08001bb8 08001bee 08001bee 08001bee     ................
 80171f4:	08001bee 08001bee 08001bee 08001bee     ................
 8017204:	08001bee 08001bee 08001bee 08001bee     ................
 8017214:	08001bee 08001bee 08001bee 08001bc2     ................
 8017224:	08001bcc 08001bb8 08001bd6 08001be0     ................
 8017234:	08001e5c 08001ce6 08001d2c 08001e5c     \.......,...\...
 8017244:	08001d54 08001e5c 08001db8 08001e5c     T...\.......\...
 8017254:	08001dc4 08001dc4 08001e5c 08001e5c     ........\...\...
 8017264:	08001e5c 08001e5c 08001e5c 08001e5c     \...\...\...\...
 8017274:	08001e5c 08001db8 08001e5c 08001e5c     \.......\...\...
 8017284:	08001e5c 08001e5c 08001e5c 08001e5c     \...\...\...\...
 8017294:	08001e5c 08001e5c 08001e5c 08001e5c     \...\...\...\...
 80172a4:	08001e5c 08001e5c 08001e5c 08001e5c     \...\...\...\...
 80172b4:	08001d54 08001db8 08001e06 08001d48     T...........H...
 80172c4:	08001e5c 08001e5c 08001e5c 08001e5c     \...\...\...\...
 80172d4:	08001e5c 08001e5c 08001e5c 08001e5c     \...\...\...\...
 80172e4:	08001e5c 08001e5c 08001e5c 08001e5c     \...\...\...\...
 80172f4:	08001e5c 08001e5c 08001d8c 08001d9e     \...\...........
 8017304:	08001d38 08001cb4 08001cb4              8...........

08017310 <__func__.6186>:
 8017310:	70613764 6464615f 73736572 695f6565     d7ap_addressee_i
 8017320:	656c5f64 6874676e 00000000 20727265     d_length....err 
 8017330:	53203d3d 45434355 00005353 6d6f682f     == SUCCESS../hom
 8017340:	656a2f65 532f736e 492d6275 532d546f     e/jens/Sub-IoT-S
 8017350:	6b636174 6174732f 6d2f6b63 6c75646f     tack/stack/modul
 8017360:	612f7365 732f706c 61697265 6e695f6c     es/alp/serial_in
 8017370:	66726574 2e656361 00000063 69726573     terface.c...seri
 8017380:	695f6c61 7265746e 65636166 646d635f     al_interface_cmd
 8017390:	6e61685f 72656c64 6e75203a 656c6261     _handler: unable
 80173a0:	206f7420 6f6c6c61 65746163 706c6120      to allocate alp
 80173b0:	6d6f6320 646e616d 00000000 00000001      command........
 80173c0:	08001f11 00000000 00000000 00000000     ................

080173d0 <__func__.10844>:
 80173d0:	69726573 695f6c61 7265746e 65636166     serial_interface
 80173e0:	646d635f 6e61685f 72656c64 00000000     _cmd_handler....
 80173f0:	6d6f682f 656a2f65 532f736e 492d6275     /home/jens/Sub-I
 8017400:	532d546f 6b636174 6174732f 6d2f6b63     oT-Stack/stack/m
 8017410:	6c75646f 612f7365 642f706c 5f706137     odules/alp/d7ap_
 8017420:	65746e69 63616672 00632e65 08002159     interface.c.Y!..
 8017430:	08001fad 080020f1 00140cd7 08001fc5     ..... ..........
 8017440:	08001f6d 08001f51 00000001              m...Q.......

0801744c <__func__.5577>:
 801744c:	70613764 6464615f 73736572 695f6565     d7ap_addressee_i
 801745c:	656c5f64 6874676e 00000000              d_length....

08017468 <__func__.5911>:
 8017468:	6d6d6f63 5f646e61 6d6f7266 6137645f     command_from_d7a
 8017478:	00000070 6d6f682f 656a2f65 532f736e     p.../home/jens/S
 8017488:	492d6275 532d546f 6b636174 6174732f     ub-IoT-Stack/sta
 8017498:	6d2f6b63 6c75646f 642f7365 2f706137     ck/modules/d7ap/
 80174a8:	70613764 6174735f 632e6b63 00000000     d7ap_stack.c....
 80174b8:	70613764 6174735f 735f6b63 65746174     d7ap_stack_state
 80174c8:	203d3d20 50413744 4154535f 535f4b43      == D7AP_STACK_S
 80174d8:	45544154 4f54535f 44455050 00000000     TATE_STOPPED....
 80174e8:	73736573 206e6f69 4e203d21 004c4c55     session != NULL.
 80174f8:	203c2069 73736573 2d6e6f69 7165723e     i < session->req
 8017508:	74736575 00626e5f                       uest_nb.

08017510 <__func__.6131>:
 8017510:	74697773 735f6863 65746174 00000000     switch_state....

08017520 <__func__.6175>:
 8017520:	70613764 6174735f 695f6b63 0074696e     d7ap_stack_init.

08017530 <__func__.6217>:
 8017530:	70613764 6174735f 705f6b63 65636f72     d7ap_stack_proce
 8017540:	725f7373 69656365 5f646576 70736572     ss_received_resp
 8017550:	65736e6f 00000000                       onse....

08017558 <__func__.6232>:
 8017558:	70613764 6174735f 735f6b63 69737365     d7ap_stack_sessi
 8017568:	635f6e6f 6c706d6f 64657465 00000000     on_completed....

08017578 <__func__.6242>:
 8017578:	70613764 6174735f 735f6b63 616e6769     d7ap_stack_signa
 8017588:	63615f6c 65766974 73616d5f 5f726574     l_active_master_
 8017598:	73736573 006e6f69 74696e69 00006465     session.inited..
 80175a8:	6d6f682f 656a2f65 532f736e 492d6275     /home/jens/Sub-I
 80175b8:	532d546f 6b636174 6174732f 6d2f6b63     oT-Stack/stack/m
 80175c8:	6c75646f 642f7365 2f706137 70613764     odules/d7ap/d7ap
 80175d8:	0000632e 69676572 72657473 635f6465     .c..registered_c
 80175e8:	6e65696c 626e5f74 4d203c20 4c55444f     lient_nb < MODUL
 80175f8:	37445f45 4d5f5041 435f5841 4e45494c     E_D7AP_MAX_CLIEN
 8017608:	4f435f54 00544e55                       T_COUNT.

08017610 <__func__.6054>:
 8017610:	70613764 6765725f 65747369 00000072     d7ap_register...
 8017620:	72727563 5f746e65 7473616d 735f7265     current_master_s
 8017630:	69737365 742e6e6f 6e656b6f 203d3d20     ession.token == 
 8017640:	73736573 5f6e6f69 656b6f74 0000006e     session_token...
 8017650:	6d6f682f 656a2f65 532f736e 492d6275     /home/jens/Sub-I
 8017660:	532d546f 6b636174 6174732f 6d2f6b63     oT-Stack/stack/m
 8017670:	6c75646f 642f7365 2f706137 73613764     odules/d7ap/d7as
 8017680:	00632e70 73613764 74735f70 20657461     p.c.d7asp_state 
 8017690:	44203d3d 50534137 4154535f 4d5f4554     == D7ASP_STATE_M
 80176a0:	45545341 7c7c2052 61376420 735f7073     ASTER || d7asp_s
 80176b0:	65746174 203d3d20 53413744 54535f50     tate == D7ASP_ST
 80176c0:	5f455441 444e4550 5f474e49 5453414d     ATE_PENDING_MAST
 80176d0:	7c205245 3764207c 5f707361 74617473     ER || d7asp_stat
 80176e0:	3d3d2065 41374420 535f5053 45544154     e == D7ASP_STATE
 80176f0:	414c535f 00004556 72727563 5f746e65     _SLAVE..current_
 8017700:	7473616d 735f7265 69737365 732e6e6f     master_session.s
 8017710:	65746174 203d3e20 53413744 414d5f50     tate >= D7ASP_MA
 8017720:	52455453 5345535f 4e4f4953 4e45505f     STER_SESSION_PEN
 8017730:	474e4944 00000000 20637472 53203d3d     DING....rtc == S
 8017740:	45434355 00005353 73613764 74735f70     UCCESS..d7asp_st
 8017750:	20657461 44203d3d 50534137 4154535f     ate == D7ASP_STA
 8017760:	535f4554 4556414c 207c7c20 73613764     TE_SLAVE || d7as
 8017770:	74735f70 20657461 44203d3d 50534137     p_state == D7ASP
 8017780:	4154535f 505f4554 49444e45 4d5f474e     _STATE_PENDING_M
 8017790:	45545341 7c7c2052 61376420 735f7073     ASTER || d7asp_s
 80177a0:	65746174 203d3d20 53413744 54535f50     tate == D7ASP_ST
 80177b0:	5f455441 56414c53 41575f45 4e495449     ATE_SLAVE_WAITIN
 80177c0:	45525f47 4e4f5053 00004553 73613764     G_RESPONSE..d7as
 80177d0:	74735f70 20657461 44203d3d 50534137     p_state == D7ASP
 80177e0:	4154535f 495f4554 20454c44 64207c7c     _STATE_IDLE || d
 80177f0:	70736137 6174735f 3d206574 3744203d     7asp_state == D7
 8017800:	5f505341 54415453 4c535f45 00455641     ASP_STATE_SLAVE.
 8017810:	73613764 74735f70 20657461 44203d3d     d7asp_state == D
 8017820:	50534137 4154535f 535f4554 4556414c     7ASP_STATE_SLAVE
 8017830:	207c7c20 73613764 74735f70 20657461      || d7asp_state 
 8017840:	44203d3d 50534137 4154535f 535f4554     == D7ASP_STATE_S
 8017850:	4556414c 4e45505f 474e4944 53414d5f     LAVE_PENDING_MAS
 8017860:	00524554 080029ae 080029a2 0800290c     TER..)...)...)..
 8017870:	080028d0 08002938 0800295e 08002980     .(..8)..^)...)..
 8017880:	72727563 5f746e65 75716572 5f747365     current_request_
 8017890:	6b636170 00007465 73613764 74735f70     packet..d7asp_st
 80178a0:	20657461 44203d3d 50534137 4154535f     ate == D7ASP_STA
 80178b0:	4d5f4554 45545341 00000052 6d726f64     TE_MASTER...dorm
 80178c0:	5f746e61 73736573 2d6e6f69 6174733e     ant_session->sta
 80178d0:	3d206574 3744203d 5f505341 5453414d     te == D7ASP_MAST
 80178e0:	535f5245 49535345 445f4e4f 414d524f     ER_SESSION_DORMA
 80178f0:	0000544e 73613764 74735f70 20657461     NT..d7asp_state 
 8017900:	44203d3d 50534137 4154535f 535f4554     == D7ASP_STATE_S
 8017910:	50504f54 00004445 73613764 616d5f70     TOPPED..d7asp_ma
 8017920:	72657473 7365735f 6e6f6973 6e6f635f     ster_session_con
 8017930:	2d676966 6464613e 73736572 632e6565     fig->addressee.c
 8017940:	2e6c7274 745f6469 20657079 49203d3d     trl.id_type == I
 8017950:	59545f44 4e5f4550 20444942 64207c7c     D_TYPE_NBID || d
 8017960:	70736137 73616d5f 5f726574 73736573     7asp_master_sess
 8017970:	5f6e6f69 666e6f63 3e2d6769 72646461     ion_config->addr
 8017980:	65737365 74632e65 692e6c72 79745f64     essee.ctrl.id_ty
 8017990:	3d206570 4449203d 5059545f 4f4e5f45     pe == ID_TYPE_NO
 80179a0:	00004449 253a7325 61502073 616f6c79     ID..%s:%s Payloa
 80179b0:	6f742064 616c206f 2c656772 20642520     d too large, %d 
 80179c0:	6425203e 00000000 73736573 2d6e6f69     > %d....session-
 80179d0:	7165723e 74736575 6675625f 5f726566     >request_buffer_
 80179e0:	6c696174 7864695f 61202b20 705f706c     tail_idx + alp_p
 80179f0:	6f6c7961 6c5f6461 74676e65 203c2068     ayload_length < 
 8017a00:	55444f4d 445f454c 5f504137 4f464946     MODULE_D7AP_FIFO
 8017a10:	4d4f435f 444e414d 4655425f 5f524546     _COMMAND_BUFFER_
 8017a20:	455a4953 00000000 73736573 2d6e6f69     SIZE....session-
 8017a30:	78656e3e 65725f74 73657571 64695f74     >next_request_id
 8017a40:	4d203c20 4c55444f 37445f45 465f5041      < MODULE_D7AP_F
 8017a50:	5f4f4649 5f58414d 55514552 53545345     IFO_MAX_REQUESTS
 8017a60:	554f435f 0000544e 78652821 74636570     _COUNT..!(expect
 8017a70:	615f6465 725f706c 6f707365 5f65736e     ed_alp_response_
 8017a80:	676e656c 3e206874 26203020 73282026     length > 0 && (s
 8017a90:	69737365 3e2d6e6f 666e6f63 712e6769     ession->config.q
 8017aa0:	712e736f 725f736f 5f707365 65646f6d     os.qos_resp_mode
 8017ab0:	203d3d20 53534553 5f4e4f49 50534552      == SESSION_RESP
 8017ac0:	444f4d5f 4f4e5f45 207c7c20 73736573     _MODE_NO || sess
 8017ad0:	2d6e6f69 6e6f633e 2e676966 2e736f71     ion->config.qos.
 8017ae0:	5f736f71 70736572 646f6d5f 3d3d2065     qos_resp_mode ==
 8017af0:	53455320 4e4f4953 5345525f 4f4d5f50      SESSION_RESP_MO
 8017b00:	4e5f4544 50525f4f 00292954 6b636170     DE_NO_RPT)).pack
 8017b10:	3e2d7465 74613764 69645f70 676f6c61     et->d7atp_dialog
 8017b20:	2064695f 63203d3d 65727275 6d5f746e     _id == current_m
 8017b30:	65747361 65735f72 6f697373 6f742e6e     aster_session.to
 8017b40:	006e656b 6b636170 3e2d7465 74613764     ken.packet->d7at
 8017b50:	72745f70 61736e61 6f697463 64695f6e     p_transaction_id
 8017b60:	203d3d20 72727563 5f746e65 75716572      == current_requ
 8017b70:	5f747365 00006469 6b636170 21207465     est_id..packet !
 8017b80:	7563203d 6e657272 65725f74 73657571     = current_reques
 8017b90:	61705f74 74656b63 00000000 73613764     t_packet....d7as
 8017ba0:	74735f70 20657461 44203d3d 50534137     p_state == D7ASP
 8017bb0:	4154535f 495f4554 20454c44 64207c7c     _STATE_IDLE || d
 8017bc0:	70736137 6174735f 3d206574 3744203d     7asp_state == D7
 8017bd0:	5f505341 54415453 4c535f45 20455641     ASP_STATE_SLAVE 
 8017be0:	64207c7c 70736137 6174735f 3d206574     || d7asp_state =
 8017bf0:	3744203d 5f505341 54415453 45505f45     = D7ASP_STATE_PE
 8017c00:	4e49444e 414d5f47 52455453 207c7c20     NDING_MASTER || 
 8017c10:	73613764 74735f70 20657461 44203d3d     d7asp_state == D
 8017c20:	50534137 4154535f 535f4554 4556414c     7ASP_STATE_SLAVE
 8017c30:	4e45505f 474e4944 53414d5f 00524554     _PENDING_MASTER.
 8017c40:	72727563 5f746e65 70736572 65736e6f     current_response
 8017c50:	6361705f 2074656b 70203d3d 656b6361     _packet == packe
 8017c60:	00000074                                t...

08017c64 <__FUNCTION__.6764>:
 8017c64:	73613764 65735f70 725f646e 6f707365     d7asp_send_respo
 8017c74:	0065736e                                nse.

08017c78 <__func__.5973>:
 8017c78:	70613764 6464615f 73736572 695f6565     d7ap_addressee_i
 8017c88:	656c5f64 6874676e 00000000              d_length....

08017c94 <__func__.6704>:
 8017c94:	65686373 656c7564 7275635f 746e6572     schedule_current
 8017ca4:	7365735f 6e6f6973 00000000              _session....

08017cb0 <__func__.6711>:
 8017cb0:	73756c66 69665f68 00736f66              flush_fifos.

08017cbc <__func__.6724>:
 8017cbc:	74697773 735f6863 65746174 00000000     switch_state....

08017ccc <__func__.6742>:
 8017ccc:	65686373 656c7564 726f645f 746e616d     schedule_dormant
 8017cdc:	7365735f 6e6f6973 00000000              _session....

08017ce8 <__func__.6747>:
 8017ce8:	73613764 6e695f70 00007469              d7asp_init..

08017cf4 <__func__.6755>:
 8017cf4:	73613764 616d5f70 72657473 7365735f     d7asp_master_ses
 8017d04:	6e6f6973 6572635f 00657461              sion_create.

08017d10 <__func__.6759>:
 8017d10:	5f746567 7473616d 735f7265 69737365     get_master_sessi
 8017d20:	665f6e6f 5f6d6f72 656b6f74 0000006e     on_from_token...

08017d30 <__func__.6772>:
 8017d30:	73613764 75715f70 5f657565 75716572     d7asp_queue_requ
 8017d40:	00747365                                est.

08017d44 <__func__.6779>:
 8017d44:	73613764 72705f70 7365636f 65725f73     d7asp_process_re
 8017d54:	76696563 725f6465 6f707365 0065736e     ceived_response.

08017d64 <__func__.6786>:
 8017d64:	73613764 72705f70 7365636f 65725f73     d7asp_process_re
 8017d74:	76696563 705f6465 656b6361 00000074     ceived_packet...

08017d84 <__func__.6792>:
 8017d84:	725f6e6f 65757165 635f7473 6c706d6f     on_request_compl
 8017d94:	64657465 00000000                       eted....

08017d9c <__func__.6798>:
 8017d9c:	73613764 69735f70 6c616e67 6361705f     d7asp_signal_pac
 8017dac:	5f74656b 6e617274 74696d73 00646574     ket_transmitted.

08017dbc <__func__.6805>:
 8017dbc:	73613764 69735f70 6c616e67 6169645f     d7asp_signal_dia
 8017dcc:	5f676f6c 6d726574 74616e69 00006465     log_terminated..
 8017ddc:	74613764 74735f70 20657461 44203d3d     d7atp_state == D
 8017dec:	50544137 4154535f 495f4554 20454c44     7ATP_STATE_IDLE 
 8017dfc:	64207c7c 70746137 6174735f 3d206574     || d7atp_state =
 8017e0c:	3744203d 5f505441 54415453 414d5f45     = D7ATP_STATE_MA
 8017e1c:	52455453 4152545f 4341534e 4e4f4954     STER_TRANSACTION
 8017e2c:	5345525f 534e4f50 45505f45 444f4952     _RESPONSE_PERIOD
 8017e3c:	00000000 6d6f682f 656a2f65 532f736e     ..../home/jens/S
 8017e4c:	492d6275 532d546f 6b636174 6174732f     ub-IoT-Stack/sta
 8017e5c:	6d2f6b63 6c75646f 642f7365 2f706137     ck/modules/d7ap/
 8017e6c:	74613764 00632e70 74613764 74735f70     d7atp.c.d7atp_st
 8017e7c:	20657461 44203d3d 50544137 4154535f     ate == D7ATP_STA
 8017e8c:	4d5f4554 45545341 52545f52 41534e41     TE_MASTER_TRANSA
 8017e9c:	4f495443 45525f4e 53455551 45505f54     CTION_REQUEST_PE
 8017eac:	444f4952 00000000 74613764 74735f70     RIOD....d7atp_st
 8017ebc:	20657461 44203d3d 50544137 4154535f     ate == D7ATP_STA
 8017ecc:	495f4554 20454c44 64207c7c 70746137     TE_IDLE || d7atp
 8017edc:	6174735f 3d206574 3744203d 5f505441     _state == D7ATP_
 8017eec:	54415453 4c535f45 5f455641 4e415254     STATE_SLAVE_TRAN
 8017efc:	54434153 5f4e4f49 50534552 45534e4f     SACTION_RESPONSE
 8017f0c:	5245505f 00444f49 74613764 74735f70     _PERIOD.d7atp_st
 8017f1c:	20657461 44203d3d 50544137 4154535f     ate == D7ATP_STA
 8017f2c:	535f4554 4556414c 4152545f 4341534e     TE_SLAVE_TRANSAC
 8017f3c:	4e4f4954 4345525f 45564945 45525f44     TION_RECEIVED_RE
 8017f4c:	53455551 00000054 74613764 74735f70     QUEST...d7atp_st
 8017f5c:	20657461 44203d3d 50544137 4154535f     ate == D7ATP_STA
 8017f6c:	535f4554 4556414c 4152545f 4341534e     TE_SLAVE_TRANSAC
 8017f7c:	4e4f4954 4e45535f 474e4944 5345525f     TION_SENDING_RES
 8017f8c:	534e4f50 00000045 08003706 08003700     PONSE....7...7..
 8017f9c:	08003676 08003694 080036ae 080036cc     v6...6...6...6..
 8017fac:	080036e6 74613764 74735f70 20657461     .6..d7atp_state 
 8017fbc:	44203d3d 50544137 4154535f 4d5f4554     == D7ATP_STATE_M
 8017fcc:	45545341 52545f52 41534e41 4f495443     ASTER_TRANSACTIO
 8017fdc:	45525f4e 4e4f5053 505f4553 4f495245     N_RESPONSE_PERIO
 8017fec:	00000044 74613764 74735f70 20657461     D...d7atp_state 
 8017ffc:	44203d3d 50544137 4154535f 535f4554     == D7ATP_STATE_S
 801800c:	4556414c 4152545f 4341534e 4e4f4954     LAVE_TRANSACTION
 801801c:	5345525f 534e4f50 45505f45 444f4952     _RESPONSE_PERIOD
 801802c:	207c7c20 74613764 74735f70 20657461      || d7atp_state 
 801803c:	44203d3d 50544137 4154535f 535f4554     == D7ATP_STATE_S
 801804c:	4556414c 4152545f 4341534e 4e4f4954     LAVE_TRANSACTION
 801805c:	4345525f 45564945 45525f44 53455551     _RECEIVED_REQUES
 801806c:	7c7c2054 61376420 735f7074 65746174     T || d7atp_state
 801807c:	203d3d20 54413744 54535f50 5f455441      == D7ATP_STATE_
 801808c:	56414c53 52545f45 41534e41 4f495443     SLAVE_TRANSACTIO
 801809c:	45535f4e 4e49444e 45525f47 4e4f5053     N_SENDING_RESPON
 80180ac:	00004553 74613764 74735f70 20657461     SE..d7atp_state 
 80180bc:	44203d3d 50544137 4154535f 535f4554     == D7ATP_STATE_S
 80180cc:	50504f54 00004445 6c616964 695f676f     TOPPED..dialog_i
 80180dc:	3d3d2064 72756320 746e6572 6169645f     d == current_dia
 80180ec:	5f676f6c 00006469 63617021 2d74656b     log_id..!packet-
 80180fc:	6137643e 635f7074 2e6c7274 6c727463     >d7atp_ctrl.ctrl
 801810c:	5f73695f 5f6b6361 75716572 65747365     _is_ack_requeste
 801811c:	00000064 61376428 735f7074 65746174     d...(d7atp_state
 801812c:	203d3d20 54413744 54535f50 5f455441      == D7ATP_STATE_
 801813c:	5453414d 545f5245 534e4152 49544341     MASTER_TRANSACTI
 801814c:	525f4e4f 45555145 505f5453 4f495245     ON_REQUEST_PERIO
 801815c:	7c202944 6428207c 70746137 6174735f     D) || (d7atp_sta
 801816c:	3d206574 3744203d 5f505441 54415453     te == D7ATP_STAT
 801817c:	4c535f45 5f455641 4e415254 54434153     E_SLAVE_TRANSACT
 801818c:	5f4e4f49 444e4553 5f474e49 50534552     ION_SENDING_RESP
 801819c:	45534e4f 00000029 74613764 74735f70     ONSE)...d7atp_st
 80181ac:	20657461 44203d3d 50544137 4154535f     ate == D7ATP_STA
 80181bc:	4d5f4554 45545341 52545f52 41534e41     TE_MASTER_TRANSA
 80181cc:	4f495443 45525f4e 4e4f5053 505f4553     CTION_RESPONSE_P
 80181dc:	4f495245 7c7c2044 61376420 735f7074     ERIOD || d7atp_s
 80181ec:	65746174 203d3d20 54413744 54535f50     tate == D7ATP_ST
 80181fc:	5f455441 56414c53 52545f45 41534e41     ATE_SLAVE_TRANSA
 801820c:	4f495443 45525f4e 4e4f5053 505f4553     CTION_RESPONSE_P
 801821c:	4f495245 7c7c2044 61376420 735f7074     ERIOD || d7atp_s
 801822c:	65746174 203d3d20 54413744 54535f50     tate == D7ATP_ST
 801823c:	5f455441 454c4449 00000000 72617453     ATE_IDLE....Star
 801824c:	69642074 676f6c61 746f6e20 6c6c6120     t dialog not all
 801825c:	6465776f 65687720 6e69206e 73616d20     owed when in mas
 801826c:	20726574 6e617274 74636173 206e6f69     ter transaction 
 801827c:	74617473 73202c65 7070696b 20676e69     state, skipping 
 801828c:	6d676573 00746e65 746c6946 64657265     segment.Filtered
 801829c:	61726620 7720656d 20687469 6c616944      frame with Dial
 80182ac:	4920676f 6f6e2044 616d2074 69686374     og ID not matchi
 80182bc:	7420676e 72206568 726f6365 20646564     ng the recorded 
 80182cc:	6c616944 4920676f 00000044 746c6946     Dialog ID...Filt
 80182dc:	64657265 61726620 7720656d 20687469     ered frame with 
 80182ec:	52415453 6c632054 65726165 00000064     START cleared...
 80182fc:	63736944 20647261 20656874 75716572     Discard the requ
 801830c:	20747365 636e6973 68742065 65722065     est since the re
 801831c:	6e6f7073 70206573 6f697265 73692064     sponse period is
 801832c:	70786520 64657269 00000000               expired....

08018338 <__func__.6623>:
 8018338:	74697773 735f6863 65746174 00000000     switch_state....

08018348 <__func__.6633>:
 8018348:	63657865 6f697475 65645f6e 5f79616c     execution_delay_
 8018358:	656d6974 5f74756f 646e6168 0072656c     timeout_handler.

08018368 <__func__.6638>:
 8018368:	70736572 65736e6f 7265705f 5f646f69     response_period_
 8018378:	656d6974 5f74756f 646e6168 0072656c     timeout_handler.

08018388 <__func__.6653>:
 8018388:	65686373 656c7564 7365725f 736e6f70     schedule_respons
 8018398:	65705f65 646f6972 6d69745f 74756f65     e_period_timeout
 80183a8:	6e61685f 72656c64 00000000              _handler....

080183b4 <__func__.6663>:
 80183b4:	74613764 6e695f70 00007469              d7atp_init..

080183c0 <__func__.6678>:
 80183c0:	74613764 65735f70 725f646e 65757165     d7atp_send_reque
 80183d0:	00007473                                st..

080183d4 <__func__.6706>:
 80183d4:	74613764 69735f70 6c616e67 6361705f     d7atp_signal_pac
 80183e4:	5f74656b 6e617274 74696d73 00646574     ket_transmitted.

080183f4 <__func__.6709>:
 80183f4:	74613764 69735f70 6c616e67 6172745f     d7atp_signal_tra
 8018404:	696d736e 6f697373 61665f6e 72756c69     nsmission_failur
 8018414:	00000065                                e...

08018418 <__func__.6715>:
 8018418:	74613764 72705f70 7365636f 65725f73     d7atp_process_re
 8018428:	76696563 705f6465 656b6361 00000074     ceived_packet...
 8018438:	6d6f682f 656a2f65 532f736e 492d6275     /home/jens/Sub-I
 8018448:	532d546f 6b636174 6174732f 6d2f6b63     oT-Stack/stack/m
 8018458:	6c75646f 642f7365 2f706137 6e613764     odules/d7ap/d7an
 8018468:	00632e70 6e613764 74735f70 20657461     p.c.d7anp_state 
 8018478:	44203d3d 504e4137 4154535f 495f4554     == D7ANP_STATE_I
 8018488:	20454c44 64207c7c 706e6137 6174735f     DLE || d7anp_sta
 8018498:	3d206574 3744203d 5f504e41 54415453     te == D7ANP_STAT
 80184a8:	4f465f45 52474552 444e554f 4143535f     E_FOREGROUND_SCA
 80184b8:	0000004e 6e613764 74735f70 20657461     N...d7anp_state 
 80184c8:	44203d3d 504e4137 4154535f 545f4554     == D7ANP_STATE_T
 80184d8:	534e4152 2054494d 64207c7c 706e6137     RANSMIT || d7anp
 80184e8:	6174735f 3d206574 3744203d 5f504e41     _state == D7ANP_
 80184f8:	54415453 4f465f45 52474552 444e554f     STATE_FOREGROUND
 8018508:	4143535f 0000004e 6e613764 74735f70     _SCAN...d7anp_st
 8018518:	20657461 44203d3d 504e4137 4154535f     ate == D7ANP_STA
 8018528:	545f4554 534e4152 2054494d 64207c7c     TE_TRANSMIT || d
 8018538:	706e6137 6174735f 3d206574 3744203d     7anp_state == D7
 8018548:	5f504e41 54415453 44495f45 0000454c     ANP_STATE_IDLE..
 8018558:	6e613764 74735f70 20657461 44203d3d     d7anp_state == D
 8018568:	504e4137 4154535f 465f4554 4745524f     7ANP_STATE_FOREG
 8018578:	4e554f52 43535f44 7c204e41 3764207c     ROUND_SCAN || d7
 8018588:	5f706e61 74617473 3d3d2065 41374420     anp_state == D7A
 8018598:	535f504e 45544154 4152545f 494d534e     NP_STATE_TRANSMI
 80185a8:	00000054 70613764 5f73665f 64616572     T...d7ap_fs_read
 80185b8:	6c776e5f 6365735f 74697275 656b5f79     _nwl_security_ke
 80185c8:	656b2879 3d202979 5553203d 53454343     y(key) == SUCCES
 80185d8:	00000053 6e613764 74735f70 20657461     S...d7anp_state 
 80185e8:	44203d3d 504e4137 4154535f 535f4554     == D7ANP_STATE_S
 80185f8:	50504f54 00004445 080046fe 0800470a     TOPPED...F...G..
 8018608:	0800470e 080046f6 080046fa 0800470e     .G...F...F...G..
 8018618:	080046f6 080046fa 08004864 08004870     .F...F..dH..pH..
 8018628:	08004874 0800485c 08004860 08004874     tH..\H..`H..tH..
 8018638:	0800485c 08004860 63617021 2d74656b     \H..`H..!packet-
 8018648:	6137643e 635f706e 2e6c7274 5f706f68     >d7anp_ctrl.hop_
 8018658:	62616e65 0064656c 6e613764 74735f70     enabled.d7anp_st
 8018668:	20657461 44203d3d 504e4137 4154535f     ate == D7ANP_STA
 8018678:	545f4554 534e4152 0054494d 0000ffff     TE_TRANSMIT.....

08018688 <__func__.6615>:
 8018688:	5f746567 68747561 6e656c5f 00000000     get_auth_len....

08018698 <__func__.6620>:
 8018698:	74697773 735f6863 65746174 00000000     switch_state....

080186a8 <__func__.6627>:
 80186a8:	65726f66 756f7267 735f646e 5f6e6163     foreground_scan_
 80186b8:	69707865 00646572                       expired.

080186c0 <__func__.6631>:
 80186c0:	65686373 656c7564 726f665f 6f726765     schedule_foregro
 80186d0:	5f646e75 6e616373 7078655f 64657269     und_scan_expired
 80186e0:	6d69745f 00007265                       _timer..

080186e8 <__func__.6637>:
 80186e8:	6e613764 65735f70 6f665f74 72676572     d7anp_set_foregr
 80186f8:	646e756f 6163735f 69745f6e 756f656d     ound_scan_timeou
 8018708:	00000074                                t...

0801870c <__func__.6652>:
 801870c:	5f746573 0079656b                       set_key.

08018714 <__func__.6655>:
 8018714:	6e613764 6e695f70 00007469              d7anp_init..

08018720 <__func__.6663>:
 8018720:	6e613764 78745f70 726f665f 6f726765     d7anp_tx_foregro
 8018730:	5f646e75 6d617266 00000065              und_frame...

0801873c <__func__.6669>:
 801873c:	65686373 656c7564 726f665f 6f726765     schedule_foregro
 801874c:	5f646e75 6e616373 7466615f 445f7265     und_scan_after_D
 801875c:	64414137 00005076                       7AAdvP..

08018764 <__func__.6733>:
 8018764:	6e613764 73615f70 626d6573 705f656c     d7anp_assemble_p
 8018774:	656b6361 65685f74 72656461 00000000     acket_header....

08018784 <__func__.6758>:
 8018784:	6e613764 69645f70 73736173 6c626d65     d7anp_disassembl
 8018794:	61705f65 74656b63 6165685f 00726564     e_packet_header.

080187a4 <__func__.6761>:
 80187a4:	6e613764 69735f70 6c616e67 6172745f     d7anp_signal_tra
 80187b4:	696d736e 6f697373 61665f6e 72756c69     nsmission_failur
 80187c4:	00000065                                e...

080187c8 <__func__.6765>:
 80187c8:	6e613764 69735f70 6c616e67 6361705f     d7anp_signal_pac
 80187d8:	5f74656b 6e617274 74696d73 00646574     ket_transmitted.

080187e8 <__func__.6771>:
 80187e8:	6e613764 72705f70 7365636f 65725f73     d7anp_process_re
 80187f8:	76696563 705f6465 656b6361 00000074     ceived_packet...
 8018808:	63206577 74276e61 74732720 2027706f     we can't 'stop' 
 8018818:	65646f6d 00692520 67736d28 756f635f     mode %i.(msg_cou
 8018828:	7265746e 70202d20 735f7265 74726174     nter - per_start
 8018838:	646e695f 20297865 30203d21 00000000     _index) != 0....
 8018848:	6d6f682f 656a2f65 532f736e 492d6275     /home/jens/Sub-I
 8018858:	532d546f 6b636174 6174732f 6d2f6b63     oT-Stack/stack/m
 8018868:	6c75646f 642f7365 2f706137 69676e65     odules/d7ap/engi
 8018878:	7265656e 5f676e69 65646f6d 0000632e     neering_mode.c..
 8018888:	20524550 25256925 6f43202e 65746e75     PER %i%%. Counte
 8018898:	69252072 7372202c 25206973 6d426469     r %i, rssi %idBm
 80188a8:	20202020 00002020 0800505c 08005064           ..\P..dP..
 80188b8:	08005072 0800509c 080050a8 08005106     rP...P...P...Q..
 80188c8:	08005186 080051a0 080051ce 08005226     .Q...Q...Q..&R..
 80188d8:	08005254 08005294                       TR...R..

080188e0 <__func__.6731>:
 80188e0:	6b636170 725f7465 69656365 5f646576     packet_received_
 80188f0:	00006d65 6b636170 715f7465 65756575     em..packet_queue
 8018900:	656c655f 746e656d 6174735f 5b737574     _element_status[
 8018910:	3e205d69 4150203d 54454b43 4555515f     i] >= PACKET_QUE
 8018920:	455f4555 454d454c 535f544e 55544154     UE_ELEMENT_STATU
 8018930:	4c415f53 41434f4c 00444554 6d6f682f     S_ALLOCATED./hom
 8018940:	656a2f65 532f736e 492d6275 532d546f     e/jens/Sub-IoT-S
 8018950:	6b636174 6174732f 6d2f6b63 6c75646f     tack/stack/modul
 8018960:	642f7365 2f706137 6b636170 715f7465     es/d7ap/packet_q
 8018970:	65756575 0000632e 6b636170 715f7465     ueue.c..packet_q
 8018980:	65756575 656c655f 746e656d 6174735f     ueue_element_sta
 8018990:	5b737574 21205d69 4150203d 54454b43     tus[i] != PACKET
 80189a0:	4555515f 455f4555 454d454c 535f544e     _QUEUE_ELEMENT_S
 80189b0:	55544154 52465f53 00004545              TATUS_FREE..

080189bc <__func__.5964>:
 80189bc:	6b636170 715f7465 65756575 6572665f     packet_queue_fre
 80189cc:	61705f65 74656b63 00000000              e_packet....

080189d8 <__func__.5979>:
 80189d8:	6b636170 715f7465 65756575 72616d5f     packet_queue_mar
 80189e8:	72705f6b 7365636f 676e6973 00000000     k_processing....
 80189f8:	20435243 61766e69 0064696c 6b636170     CRC invalid.pack
 8018a08:	3e2d7465 6c796170 5f64616f 676e656c     et->payload_leng
 8018a18:	3d206874 6973203d 666f657a 6e697528     th == sizeof(uin
 8018a28:	5f363174 00002974 6d6f682f 656a2f65     t16_t)../home/je
 8018a38:	532f736e 492d6275 532d546f 6b636174     ns/Sub-IoT-Stack
 8018a48:	6174732f 6d2f6b63 6c75646f 642f7365     /stack/modules/d
 8018a58:	2f706137 6b636170 632e7465 00000000     7ap/packet.c....
 8018a68:	70696b53 676e6970 63617020 0074656b     Skipping packet.

08018a78 <__func__.6003>:
 8018a78:	6b636170 645f7465 73617369 626d6573     packet_disassemb
 8018a88:	0000656c 69736f70 6e6f6974 20666f20     le..position of 
 8018a98:	6e616863 206c656e 2074756f 6220666f     channel out of b
 8018aa8:	646e756f 6e49202e 61657263 63206573     ound. Increase c
 8018ab8:	6e6e6168 20736c65 657a6973 20726f20     hannels size or 
 8018ac8:	656c6564 70206574 69766572 0073756f     delete previous.
 8018ad8:	6c6c6428 6174735f 3d206574 4c44203d     (dll_state == DL
 8018ae8:	54535f4c 5f455441 454c4449 20262620     L_STATE_IDLE && 
 8018af8:	636f7270 5f737365 65636572 64657669     process_received
 8018b08:	6361705f 7374656b 7466615f 745f7265     _packets_after_t
 8018b18:	7c202978 6c64207c 74735f6c 20657461     x) || dll_state 
 8018b28:	44203d3d 535f4c4c 45544154 524f465f     == DLL_STATE_FOR
 8018b38:	4f524745 5f444e55 4e414353 207c7c20     EGROUND_SCAN || 
 8018b48:	5f6c6c64 74617473 3d3d2065 4c4c4420     dll_state == DLL
 8018b58:	4154535f 535f4554 5f4e4143 4f545541     _STATE_SCAN_AUTO
 8018b68:	4954414d 00004e4f 6d6f682f 656a2f65     MATION../home/je
 8018b78:	532f736e 492d6275 532d546f 6b636174     ns/Sub-IoT-Stack
 8018b88:	6174732f 6d2f6b63 6c75646f 642f7365     /stack/modules/d
 8018b98:	2f706137 2e6c6c64 00000063 6b636170     7ap/dll.c...pack
 8018ba8:	21207465 554e203d 00004c4c 5f6c6c64     et != NULL..dll_
 8018bb8:	74617473 3d3d2065 4c4c4420 4154535f     state == DLL_STA
 8018bc8:	495f4554 20454c44 64207c7c 735f6c6c     TE_IDLE || dll_s
 8018bd8:	65746174 203d3d20 5f4c4c44 54415453     tate == DLL_STAT
 8018be8:	43535f45 415f4e41 4d4f5455 4f495441     E_SCAN_AUTOMATIO
 8018bf8:	7c7c204e 6c6c6420 6174735f 3d206574     N || dll_state =
 8018c08:	4c44203d 54535f4c 5f455441 45524f46     = DLL_STATE_FORE
 8018c18:	554f5247 535f444e 204e4143 64207c7c     GROUND_SCAN || d
 8018c28:	735f6c6c 65746174 203d3d20 5f4c4c44     ll_state == DLL_
 8018c38:	54415453 58545f45 524f465f 4f524745     STATE_TX_FOREGRO
 8018c48:	5f444e55 504d4f43 4554454c 00000044     UND_COMPLETED...
 8018c58:	5f6c6c64 74617473 3d3d2065 4c4c4420     dll_state == DLL
 8018c68:	4154535f 435f4554 20314143 64207c7c     _STATE_CCA1 || d
 8018c78:	735f6c6c 65746174 203d3d20 5f4c4c44     ll_state == DLL_
 8018c88:	54415453 43435f45 00003241 5f6c6c64     STATE_CCA2..dll_
 8018c98:	74617473 3d3d2065 4c4c4420 4154535f     state == DLL_STA
 8018ca8:	435f4554 5f414d53 535f4143 54524154     TE_CSMA_CA_START
 8018cb8:	7c204445 6c64207c 74735f6c 20657461     ED || dll_state 
 8018cc8:	44203d3d 535f4c4c 45544154 4d53435f     == DLL_STATE_CSM
 8018cd8:	41435f41 5445525f 00005952 5f6c6c64     A_CA_RETRY..dll_
 8018ce8:	74617473 3d3d2065 4c4c4420 4154535f     state == DLL_STA
 8018cf8:	435f4554 00314143 5f6c6c64 74617473     TE_CCA1.dll_stat
 8018d08:	3d3d2065 4c4c4420 4154535f 495f4554     e == DLL_STATE_I
 8018d18:	20454c44 64207c7c 735f6c6c 65746174     DLE || dll_state
 8018d28:	203d3d20 5f4c4c44 54415453 43535f45      == DLL_STATE_SC
 8018d38:	415f4e41 4d4f5455 4f495441 7c7c204e     AN_AUTOMATION ||
 8018d48:	6c6c6420 6174735f 3d206574 4c44203d      dll_state == DL
 8018d58:	54535f4c 5f455441 465f5854 4745524f     L_STATE_TX_FOREG
 8018d68:	4e554f52 4f435f44 454c504d 00444554     ROUND_COMPLETED.
 8018d78:	5f6c6c64 74617473 3d3d2065 4c4c4420     dll_state == DLL
 8018d88:	4154535f 465f4554 4745524f 4e554f52     _STATE_FOREGROUN
 8018d98:	43535f44 7c204e41 6c64207c 74735f6c     D_SCAN || dll_st
 8018da8:	20657461 44203d3d 535f4c4c 45544154     ate == DLL_STATE
 8018db8:	4143435f 4941465f 7c7c204c 6c6c6420     _CCA_FAIL || dll
 8018dc8:	6174735f 3d206574 4c44203d 54535f4c     _state == DLL_ST
 8018dd8:	5f455441 445f5854 41435349 44454452     ATE_TX_DISCARDED
 8018de8:	207c7c20 5f6c6c64 74617473 3d3d2065      || dll_state ==
 8018df8:	4c4c4420 4154535f 545f4554 4f465f58      DLL_STATE_TX_FO
 8018e08:	52474552 444e554f 4d4f435f 54454c50     REGROUND_COMPLET
 8018e18:	7c204445 6c64207c 74735f6c 20657461     ED || dll_state 
 8018e28:	44203d3d 535f4c4c 45544154 4d53435f     == DLL_STATE_CSM
 8018e38:	41435f41 4154535f 44455452 207c7c20     A_CA_STARTED || 
 8018e48:	5f6c6c64 74617473 3d3d2065 4c4c4420     dll_state == DLL
 8018e58:	4154535f 435f4554 20314143 64207c7c     _STATE_CCA1 || d
 8018e68:	735f6c6c 65746174 203d3d20 5f4c4c44     ll_state == DLL_
 8018e78:	54415453 43435f45 7c203241 6c64207c     STATE_CCA2 || dl
 8018e88:	74735f6c 20657461 44203d3d 535f4c4c     l_state == DLL_S
 8018e98:	45544154 4d53435f 41435f41 5445525f     TATE_CSMA_CA_RET
 8018ea8:	7c205952 6c64207c 74735f6c 20657461     RY || dll_state 
 8018eb8:	44203d3d 535f4c4c 45544154 4143535f     == DLL_STATE_SCA
 8018ec8:	55415f4e 414d4f54 4e4f4954 207c7c20     N_AUTOMATION || 
 8018ed8:	5f6c6c64 74617473 3d3d2065 4c4c4420     dll_state == DLL
 8018ee8:	4154535f 495f4554 00454c44 5f6c6c64     _STATE_IDLE.dll_
 8018ef8:	74617473 3d3d2065 4c4c4420 4154535f     state == DLL_STA
 8018f08:	465f4554 4745524f 4e554f52 43535f44     TE_FOREGROUND_SC
 8018f18:	7c204e41 6c64207c 74735f6c 20657461     AN || dll_state 
 8018f28:	44203d3d 535f4c4c 45544154 4c44495f     == DLL_STATE_IDL
 8018f38:	7c7c2045 6c6c6420 6174735f 3d206574     E || dll_state =
 8018f48:	4c44203d 54535f4c 5f455441 465f5854     = DLL_STATE_TX_F
 8018f58:	4745524f 4e554f52 4f435f44 454c504d     OREGROUND_COMPLE
 8018f68:	20444554 64207c7c 735f6c6c 65746174     TED || dll_state
 8018f78:	203d3d20 5f4c4c44 54415453 43535f45      == DLL_STATE_SC
 8018f88:	415f4e41 4d4f5455 4f495441 0000004e     AN_AUTOMATION...
 8018f98:	5f6c6c64 74617473 3d3d2065 4c4c4420     dll_state == DLL
 8018fa8:	4154535f 435f4554 20324143 64207c7c     _STATE_CCA2 || d
 8018fb8:	735f6c6c 65746174 203d3d20 5f4c4c44     ll_state == DLL_
 8018fc8:	54415453 53435f45 435f414d 54535f41     STATE_CSMA_CA_ST
 8018fd8:	45545241 00000044 5f6c6c64 74617473     ARTED...dll_stat
 8018fe8:	3d3d2065 4c4c4420 4154535f 545f4554     e == DLL_STATE_T
 8018ff8:	4f465f58 52474552 444e554f 00000000     X_FOREGROUND....
 8019008:	5f6c6c64 74617473 3d3d2065 4c4c4420     dll_state == DLL
 8019018:	4154535f 435f4554 20314143 64207c7c     _STATE_CCA1 || d
 8019028:	735f6c6c 65746174 203d3d20 5f4c4c44     ll_state == DLL_
 8019038:	54415453 43435f45 7c203241 6c64207c     STATE_CCA2 || dl
 8019048:	74735f6c 20657461 44203d3d 535f4c4c     l_state == DLL_S
 8019058:	45544154 4d53435f 41435f41 4154535f     TATE_CSMA_CA_STA
 8019068:	44455452 207c7c20 5f6c6c64 74617473     RTED || dll_stat
 8019078:	3d3d2065 4c4c4420 4154535f 435f4554     e == DLL_STATE_C
 8019088:	5f414d53 525f4143 59525445 00000000     SMA_CA_RETRY....
 8019098:	08005a7e 08005992 080059e0 080058f4     ~Z...Y...Y...X..
 80190a8:	0800591a 08005938 08005956 08005a58     .Y..8Y..VY..XZ..
 80190b8:	08005970 08005a06 08005a24 08005a3e     pY...Z..$Z..>Z..
 80190c8:	20616354 6167656e 65766974 4343202c     Tca negative, CC
 80190d8:	61662041 64656c69 00000000 20414343     A failed....CCA 
 80190e8:	6c696166 63656220 65737561 6c6c6420     fail because dll
 80190f8:	206f745f 6925203d 00000000 68637374     _to = %i....tsch
 8019108:	21206465 7528203d 31746e69 29745f36     ed != (uint16_t)
 8019118:	0000307e 5f6c6c64 74617473 3d3d2065     ~0..dll_state ==
 8019128:	4c4c4420 4154535f 535f4554 50504f54      DLL_STATE_STOPP
 8019138:	00004445 70613764 5f73665f 74696e69     ED..d7ap_fs_init
 8019148:	6c69665f 37442865 49465f41 505f454c     _file(D7A_FILE_P
 8019158:	535f5948 55544154 49465f53 495f454c     HY_STATUS_FILE_I
 8019168:	26202c44 616c6f76 656c6974 6c69665f     D, &volatile_fil
 8019178:	65685f65 72656461 554e202c 20294c4c     e_header, NULL) 
 8019188:	53203d3d 45434355 00005353 253a7325     == SUCCESS..%s:%
 8019198:	61502073 74656b63 6f6f7420 616d7320     s Packet too sma
 80191a8:	25206c6c 203c2064 00006425 6e656449     ll %d < %d..Iden
 80191b8:	69666974 54207265 66206761 65746c69     tifier Tag filte
 80191c8:	676e6972 69616620 2c64656c 696b7320     ring failed, ski
 80191d8:	6e697070 61702067 74656b63 00000000     pping packet....

080191e8 <__FUNCTION__.6843>:
 80191e8:	5f6c6c64 61736964 6d657373 5f656c62     dll_disassemble_
 80191f8:	6b636170 685f7465 65646165 00000072     packet_header...

08019208 <__func__.6659>:
 8019208:	74697773 735f6863 65746174 00000000     switch_state....

08019218 <__func__.6695>:
 8019218:	72617473 61625f74 72676b63 646e756f     start_background
 8019228:	6163735f 0000006e                       _scan...

08019230 <__func__.6701>:
 8019230:	5f6c6c64 706f7473 6361625f 6f72676b     dll_stop_backgro
 8019240:	5f646e75 6e616373 00000000              und_scan....

0801924c <__func__.6705>:
 801924c:	5f6c6c64 6e676973 705f6c61 656b6361     dll_signal_packe
 801925c:	65725f74 76696563 00006465              t_received..

08019268 <__func__.6713>:
 8019268:	5f6c6c64 6e676973 705f6c61 656b6361     dll_signal_packe
 8019278:	72745f74 6d736e61 65747469 00000064     t_transmitted...

08019288 <__func__.6723>:
 8019288:	5f616363 69737372 6c61765f 00006469     cca_rssi_valid..

08019298 <__func__.6727>:
 8019298:	63657865 5f657475 00616363              execute_cca.

080192a4 <__func__.6732>:
 80192a4:	63657865 5f657475 616d7363 0061635f     execute_csma_ca.

080192b4 <__func__.6777>:
 80192b4:	5f6c6c64 63657865 5f657475 6e616373     dll_execute_scan
 80192c4:	7475615f 74616d6f 006e6f69              _automation.

080192d0 <__func__.6788>:
 80192d0:	666e6f63 6c69665f 68635f65 65676e61     conf_file_change
 80192e0:	61635f64 61626c6c 00006b63              d_callback..

080192ec <__func__.6793>:
 80192ec:	5f6c6c64 69746f6e 615f7966 73656363     dll_notify_acces
 80192fc:	72705f73 6c69666f 69665f65 635f656c     s_profile_file_c
 801930c:	676e6168 00006465                       hanged..

08019314 <__func__.6798>:
 8019314:	5f6c6c64 74696e69 00000000              dll_init....

08019320 <__func__.6818>:
 8019320:	5f6c6c64 665f7874 656d6172 00000000     dll_tx_frame....
 8019330:	206e656c 34203d3d 00000000 6d6f682f     len == 4..../hom
 8019340:	656a2f65 532f736e 492d6275 532d546f     e/jens/Sub-IoT-S
 8019350:	6b636174 6174732f 6d2f6b63 6c75646f     tack/stack/modul
 8019360:	642f7365 2f706137 2e796870 00000063     es/d7ap/phy.c...
 8019370:	74617473 3d3d2065 41545320 545f4554     state == STATE_T
 8019380:	7c7c2058 61747320 3d206574 5453203d     X || state == ST
 8019390:	5f455441 544e4f43 0058545f 74617473     ATE_CONT_TX.stat
 80193a0:	3d3d2065 41545320 525f4554 7c7c2058     e == STATE_RX ||
 80193b0:	61747320 3d206574 5453203d 5f455441      state == STATE_
 80193c0:	535f4742 004e4143 74617473 3d212065     BG_SCAN.state !=
 80193d0:	41545320 545f4554 00000058 6b636170      STATE_TX...pack
 80193e0:	3e2d7465 676e656c 3c206874 4f4d203d     et->length <= MO
 80193f0:	454c5544 4137445f 41525f50 41505f57     DULE_D7AP_RAW_PA
 8019400:	54454b43 5a49535f 00000045              CKET_SIZE...

0801940c <__func__.7071>:
 801940c:	6b636170 745f7465 736e6172 7474696d     packet_transmitt
 801941c:	00006465                                ed..

08019420 <__func__.7075>:
 8019420:	6b636170 725f7465 69656365 00646576     packet_received.

08019430 <__func__.7082>:
 8019430:	6b636170 685f7465 65646165 65725f72     packet_header_re
 8019440:	76696563 00006465                       ceived..

08019448 <__func__.7141>:
 8019448:	5f796870 72617473 6e655f74 79677265     phy_start_energy
 8019458:	6163735f 0000006e                       _scan...

08019460 <__func__.7155>:
 8019460:	5f796870 646e6573 6361705f 0074656b     phy_send_packet.

08019470 <__func__.7184>:
 8019470:	5f796870 72617473 61625f74 72676b63     phy_start_backgr
 8019480:	646e756f 6163735f 0000006e              ound_scan...

0801948c <bg_timeout>:
 801948c:	02040016                                ....

08019490 <default_channel_id>:
 8019490:	00000038                                8...

08019494 <sync_word_value>:
 8019494:	0000e6d0 e6d0f498 00000b67 0b67192f     ........g.../.g.
 80194a4:	73757274 5f646574 65646f6e 20626e5f     trusted_node_nb 
 80194b4:	46203d3c 454d4152 4b524f57 5f53465f     <= FRAMEWORK_FS_
 80194c4:	53555254 5f444554 45444f4e 4241545f     TRUSTED_NODE_TAB
 80194d4:	535f454c 00455a49 6d6f682f 656a2f65     LE_SIZE./home/je
 80194e4:	532f736e 492d6275 532d546f 6b636174     ns/Sub-IoT-Stack
 80194f4:	6174732f 6d2f6b63 6c75646f 642f7365     /stack/modules/d
 8019504:	5f706137 642f7366 5f706137 632e7366     7ap_fs/d7ap_fs.c
 8019514:	00000000                                ....

08019518 <__func__.5411>:
 8019518:	74697277 65735f65 69727563 735f7974     write_security_s
 8019528:	65746174 6765725f 65747369 6e655f72     tate_register_en
 8019538:	00797274                                try.

0801953c <__func__.5418>:
 801953c:	70613764 5f73665f 5f646461 5f6c776e     d7ap_fs_add_nwl_
 801954c:	75636573 79746972 6174735f 725f6574     security_state_r
 801955c:	73696765 5f726574 72746e65 00000079     egister_entry...
 801956c:	3d3d2065 43555320 53534543 00000000     e == SUCCESS....
 801957c:	6d6f682f 656a2f65 532f736e 492d6275     /home/jens/Sub-I
 801958c:	532d546f 6b636174 6174732f 662f6b63     oT-Stack/stack/f
 801959c:	656d6172 6b726f77 6c61682f 616c702f     ramework/hal/pla
 80195ac:	726f6674 422f736d 37304c5f 4c5f5a32     tforms/B_L072Z_L
 80195bc:	4e415752 6c702f31 5f667461 6e69616d     RWAN1/platf_main
 80195cc:	0000632e                                .c..

080195d0 <__func__.10217>:
 80195d0:	725f7768 6f696461 7365725f 00007465     hw_radio_reset..

080195e0 <metadata_blockdevice>:
 80195e0:	20002de8                                .-. 

080195e4 <persistent_files_blockdevice>:
 80195e4:	20002df4                                .-. 

080195e8 <volatile_blockdevice>:
 80195e8:	20000560 6d6f682f 656a2f65 532f736e     `.. /home/jens/S
 80195f8:	492d6275 532d546f 6b636174 6174732f     ub-IoT-Stack/sta
 8019608:	662f6b63 656d6172 6b726f77 6c61682f     ck/framework/hal
 8019618:	616c702f 726f6674 422f736d 37304c5f     /platforms/B_L07
 8019628:	4c5f5a32 4e415752 6c702f31 5f667461     2Z_LRWAN1/platf_
 8019638:	7364656c 0000632e                       leds.c..

08019640 <__func__.9794>:
 8019640:	656c5f5f 6e695f64 00007469 6d6f682f     __led_init../hom
 8019650:	656a2f65 532f736e 492d6275 532d546f     e/jens/Sub-IoT-S
 8019660:	6b636174 6174732f 662f6b63 656d6172     tack/stack/frame
 8019670:	6b726f77 6c61682f 616c702f 726f6674     work/hal/platfor
 8019680:	422f736d 37304c5f 4c5f5a32 4e415752     ms/B_L072Z_LRWAN
 8019690:	6c702f31 5f667461 74747562 632e6e6f     1/platf_button.c
 80196a0:	00000000                                ....

080196a4 <__func__.9928>:
 80196a4:	62755f5f 6f747475 6e695f6e 00007469     __ubutton_init..
 80196b4:	7566202c 6974636e 203a6e6f 00000000     , function: ....
 80196c4:	65737361 6f697472 2522206e 66202273     assertion "%s" f
 80196d4:	656c6961 66203a64 20656c69 22732522     ailed: file "%s"
 80196e4:	696c202c 2520656e 25732564 00000a73     , line %d%s%s...

080196f4 <AHBPrescTable>:
	...
 80196fc:	04030201 09080706                       ........

08019704 <APBPrescTable>:
 8019704:	00000000 04030201                       ........

0801970c <PLLMulTable>:
 801970c:	08060403 2018100c 00000030 0800986e     ....... 0...n...
 801971c:	08009726 0800976a 0800986e 080097ae     &...j...n.......
 801972c:	0800986e 0800986e 0800986e 080097fe     n...n...n.......
 801973c:	0800986e 0800986e 0800986e 0800986e     n...n...n...n...
 801974c:	0800986e 0800986e 0800986e 0800983a     n...n...n...:...
 801975c:	0800986e 0800986e 0800986e 0800986e     n...n...n...n...
 801976c:	0800986e 0800986e 0800986e 0800986e     n...n...n...n...
 801977c:	0800986e 0800986e 0800986e 0800986e     n...n...n...n...
 801978c:	0800986e 0800986e 0800986e 08009648     n...n...n...H...
 801979c:	0800a58c 0800a5a6 0800a5c2 0800a682     ................
 80197ac:	0800a5fa 0800a682 0800a682 0800a682     ................
 80197bc:	0800a65c 0800a4e4 0800a50a 0800a522     \..........."...
 80197cc:	0800a586 0800a556 0800a586 0800a586     ....V...........
 80197dc:	0800a586 0800a56e 65746e69 70757272     ....n...interrup
 80197ec:	705b7374 2e5d6e69 5f727369 2e787463     ts[pin].isr_ctx.
 80197fc:	21206263 554e203d 00004c4c 6d6f682f     cb != NULL../hom
 801980c:	656a2f65 532f736e 492d6275 532d546f     e/jens/Sub-IoT-S
 801981c:	6b636174 6174732f 662f6b63 656d6172     tack/stack/frame
 801982c:	6b726f77 6c61682f 6968632f 732f7370     work/hal/chips/s
 801983c:	32336d74 6d6f635f 2f6e6f6d 336d7473     tm32_common/stm3
 801984c:	6f635f32 6e6f6d6d 6970675f 00632e6f     2_common_gpio.c.
 801985c:	5f4c4c21 49545845 4573495f 6c62616e     !LL_EXTI_IsEnabl
 801986c:	54496465 335f305f 6e692831 6f5f7469     edIT_0_31(init_o
 801987c:	6f697470 3e2d736e 296e6950 00000000     ptions->Pin)....
 801988c:	65746e69 70757272 475b7374 5f4f4950     interrupts[GPIO_
 801989c:	284e4950 5f6e6970 5d296469 746e692e     PIN(pin_id)].int
 80198ac:	75727265 705f7470 2074726f 30203d3d     errupt_port == 0
 80198bc:	00464678                                xFF.

080198c0 <__func__.9599>:
 80198c0:	675f7768 5f6f6970 666e6f63 72756769     hw_gpio_configur
 80198d0:	69705f65 74735f6e 0000006d              e_pin_stm...

080198dc <__func__.9625>:
 80198dc:	6f697067 746e695f 6c61635f 6361626c     gpio_int_callbac
 80198ec:	0000006b                                k...

080198f0 <__func__.9636>:
 80198f0:	675f7768 5f6f6970 5f746573 65676465     hw_gpio_set_edge
 8019900:	746e695f 75727265 00007470              _interrupt..

0801990c <__func__.9652>:
 801990c:	675f7768 5f6f6970 666e6f63 72756769     hw_gpio_configur
 801991c:	6e695f65 72726574 00747075              e_interrupt.

08019928 <__func__.9657>:
 8019928:	675f7768 5f6f6970 62616e65 695f656c     hw_gpio_enable_i
 8019938:	7265746e 74707572 00000000 20746572     nterrupt....ret 
 8019948:	48203d3d 4f5f4c41 0000004b 6d6f682f     == HAL_OK.../hom
 8019958:	656a2f65 532f736e 492d6275 532d546f     e/jens/Sub-IoT-S
 8019968:	6b636174 6174732f 662f6b63 656d6172     tack/stack/frame
 8019978:	6b726f77 6c61682f 6968632f 732f7370     work/hal/chips/s
 8019988:	32336d74 6d6f635f 2f6e6f6d 336d7473     tm32_common/stm3
 8019998:	6f635f32 6e6f6d6d 75636d5f 0000632e     2_common_mcu.c..

080199a8 <__func__.9193>:
 80199a8:	336d7473 6f635f32 6e6f6d6d 75636d5f     stm32_common_mcu
 80199b8:	696e695f 00000074 20727265 53203d3d     _init...err == S
 80199c8:	45434355 7c205353 7265207c 3d3d2072     UCCESS || err ==
 80199d8:	4c414520 44414552 00000059 6d6f682f      EALREADY.../hom
 80199e8:	656a2f65 532f736e 492d6275 532d546f     e/jens/Sub-IoT-S
 80199f8:	6b636174 6174732f 662f6b63 656d6172     tack/stack/frame
 8019a08:	6b726f77 6c61682f 6968632f 732f7370     work/hal/chips/s
 8019a18:	32336d74 6d6f635f 2f6e6f6d 336d7473     tm32_common/stm3
 8019a28:	6f635f32 6e6f6d6d 6970735f 0000632e     2_common_spi.c..
 8019a38:	485f5f21 535f4c41 475f4950 465f5445     !__HAL_SPI_GET_F
 8019a48:	2847414c 616c7326 3e2d6576 2d697073     LAG(&slave->spi-
 8019a58:	7073683e 53202c69 465f4950 5f47414c     >hspi, SPI_FLAG_
 8019a68:	2952564f 00000000 61746164 73746962     OVR)....databits
 8019a78:	203d3d20 00000038 5f697073 626d756e      == 8...spi_numb
 8019a88:	3c207265 49505320 554f435f 0000544e     er < SPI_COUNT..
 8019a98:	7478656e 6970735f 616c735f 685f6576     next_spi_slave_h
 8019aa8:	6c646e61 203c2065 5f58414d 5f495053     andle < MAX_SPI_
 8019ab8:	56414c53 41485f45 454c444e 00000053     SLAVE_HANDLES...

08019ac8 <__func__.9733>:
 8019ac8:	666e6f63 72756769 73635f65 00000000     configure_cs....

08019ad8 <__func__.9752>:
 8019ad8:	5f697073 62616e65 0000656c              spi_enable..

08019ae4 <__func__.9760>:
 8019ae4:	5f697073 61736964 00656c62              spi_disable.

08019af0 <__func__.9771>:
 8019af0:	5f697073 74696e69 00000000              spi_init....

08019afc <__func__.9788>:
 8019afc:	5f697073 74696e69 616c735f 00006576     spi_init_slave..

08019b0c <__func__.9821>:
 8019b0c:	5f697073 64616572 6977335f 625f6572     spi_read_3wire_b
 8019b1c:	73657479 00000000                       ytes....

08019b24 <__func__.9828>:
 8019b24:	5f697073 68637865 65676e61 7479625f     spi_exchange_byt
 8019b34:	00007365                                es..

08019b38 <spi_ports>:
 8019b38:	50000403 50000006 50000007 00000000     ...P...P...P....
	...
 8019b50:	40013000 5000040d 5000040e 5000040f     .0.@...P...P...P
	...
 8019b6c:	40003800 6d6f682f 656a2f65 532f736e     .8.@/home/jens/S
 8019b7c:	492d6275 532d546f 6b636174 6174732f     ub-IoT-Stack/sta
 8019b8c:	662f6b63 656d6172 6b726f77 6c61682f     ck/framework/hal
 8019b9c:	6968632f 732f7370 32336d74 6d6f635f     /chips/stm32_com
 8019bac:	2f6e6f6d 336d7473 6f635f32 6e6f6d6d     mon/stm32_common
 8019bbc:	7379735f 2e6d6574 00000063 52575028     _system.c...(PWR
 8019bcc:	53433e2d 20262052 5f525750 5f525343     ->CSR & PWR_CSR_
 8019bdc:	29465557 203d3d20 00000030 64726148     WUF) == 0...Hard
 8019bec:	6c756146 636f2074 65727563 25203a64     Fault occured: %
 8019bfc:	00000a73                                s...

08019c00 <__func__.9596>:
 8019c00:	735f7768 65747379 61735f6d 725f6576     hw_system_save_r
 8019c10:	6f6f6265 65725f74 6e6f7361 00000000     eboot_reason....

08019c20 <__func__.9603>:
 8019c20:	655f7768 7265746e 776f6c5f 65776f70     hw_enter_lowpowe
 8019c30:	6f6d5f72 00006564                       r_mode..

08019c38 <__func__.9621>:
 8019c38:	61685f5f 61666472 5f746c75 646e6168     __hardfault_hand
 8019c48:	0072656c 5f4c4148 45434352 65505f78     ler.HAL_RCCEx_Pe
 8019c58:	68706972 434b4c43 69666e6f 52262867     riphCLKConfig(&R
 8019c68:	505f4343 70697265 6b6c4368 74696e49     CC_PeriphClkInit
 8019c78:	3d3d2029 4c414820 004b4f5f 6d6f682f     ) == HAL_OK./hom
 8019c88:	656a2f65 532f736e 492d6275 532d546f     e/jens/Sub-IoT-S
 8019c98:	6b636174 6174732f 662f6b63 656d6172     tack/stack/frame
 8019ca8:	6b726f77 6c61682f 6968632f 732f7370     work/hal/chips/s
 8019cb8:	32336d74 6d6f635f 2f6e6f6d 336d7473     tm32_common/stm3
 8019cc8:	6f635f32 6e6f6d6d 6d69745f 632e7265     2_common_timer.c
 8019cd8:	00000000 5f4c4148 4954504c 6e495f4d     ....HAL_LPTIM_In
 8019ce8:	26287469 656d6974 3d202972 4148203d     it(&timer) == HA
 8019cf8:	4b4f5f4c 00000000 454c4c49 204c4147     L_OK....ILLEGAL 
 8019d08:	454d4954 53552052 3a454741 5f776820     TIMER USAGE: hw_
 8019d18:	656d6974 63735f72 75646568 7320656c     timer_schedule s
 8019d28:	6c756f68 6f6e2064 65622074 65737520     hould not be use
 8019d38:	6e692064 6f746120 2063696d 746e6f63     d in atomic cont
 8019d48:	21747865 00000000 5f706d63 5f676572     ext!....cmp_reg_
 8019d58:	74697277 65705f65 6e69646e 3d3d2067     write_pending ==
 8019d68:	6c616620 00006573                        false..

08019d70 <__func__.9132>:
 8019d70:	745f7768 72656d69 696e695f 00000074     hw_timer_init...

08019d80 <__func__.9148>:
 8019d80:	745f7768 72656d69 6863735f 6c756465     hw_timer_schedul
 8019d90:	00000065                                e...

08019d94 <timer_info.9136>:
 8019d94:	00000005 6d6f682f 656a2f65 532f736e     ..../home/jens/S
 8019da4:	492d6275 532d546f 6b636174 6174732f     ub-IoT-Stack/sta
 8019db4:	662f6b63 656d6172 6b726f77 6c61682f     ck/framework/hal
 8019dc4:	6968632f 732f7370 32336d74 6d6f635f     /chips/stm32_com
 8019dd4:	2f6e6f6d 336d7473 6f635f32 6e6f6d6d     mon/stm32_common
 8019de4:	7261755f 00632e74 74726f70 7864695f     _uart.c.port_idx
 8019df4:	55203c20 5f545241 4e554f43 00000054      < UART_COUNT...
 8019e04:	675f7768 5f6f6970 666e6f63 72756769     hw_gpio_configur
 8019e14:	69705f65 74735f6e 6175286d 3e2d7472     e_pin_stm(uart->
 8019e24:	74726175 726f705f 743e2d74 26202c78     uart_port->tx, &
 8019e34:	4f495047 696e495f 72745374 29746375     GPIO_InitStruct)
 8019e44:	203d3d20 43435553 00535345 675f7768      == SUCCESS.hw_g
 8019e54:	5f6f6970 666e6f63 72756769 69705f65     pio_configure_pi
 8019e64:	74735f6e 6175286d 3e2d7472 74726175     n_stm(uart->uart
 8019e74:	726f705f 723e2d74 26202c78 4f495047     _port->rx, &GPIO
 8019e84:	696e495f 72745374 29746375 203d3d20     _InitStruct) == 
 8019e94:	43435553 00535345                       SUCCESS.

08019e9c <__func__.10044>:
 8019e9c:	74726175 7172695f 6e61685f 72656c64     uart_irq_handler
 8019eac:	00000000                                ....

08019eb0 <__func__.9945>:
 8019eb0:	74726175 696e695f 00000074              uart_init...

08019ebc <__func__.9953>:
 8019ebc:	74726175 616e655f 00656c62              uart_enable.

08019ec8 <__func__.9967>:
 8019ec8:	74726175 6c75705f 6f645f6c 725f6e77     uart_pull_down_r
 8019ed8:	00000078                                x...

08019edc <__func__.9977>:
 8019edc:	74726175 7369645f 656c6261 00000000     uart_disable....

08019eec <uart_ports>:
 8019eec:	50000002 50000003 00000004 40004400     ...P...P.....D.@
 8019efc:	0000001c 50000009 5000000a 00000004     .......P...P....
 8019f0c:	40013800 0000001b 6d6f682f 656a2f65     .8.@..../home/je
 8019f1c:	532f736e 492d6275 532d546f 6b636174     ns/Sub-IoT-Stack
 8019f2c:	6174732f 662f6b63 656d6172 6b726f77     /stack/framework
 8019f3c:	6c61682f 6968632f 732f7370 37323178     /hal/chips/sx127
 8019f4c:	78732f78 78373231 0000632e 72727563     x/sx127x.c..curr
 8019f5c:	5f746e65 6b636170 00007465 74617473     ent_packet..stat
 8019f6c:	3d3d2065 41545320 525f4554 00000058     e == STATE_RX...
 8019f7c:	625f7872 73657479 203d3d20 00000034     rx_bytes == 4...
 8019f8c:	676e654c 77206874 74207361 6c206f6f     Length was too l
 8019f9c:	65677261 6964202c 72616373 676e6964     arge, discarding
 8019fac:	63617020 0074656b 6c756f43 6f6e2064      packet.Could no
 8019fbc:	6c612074 61636f6c 70206574 616b6361     t allocate packa
 8019fcc:	202c6567 63736964 69647261 002e676e     ge, discarding..
 8019fdc:	314f4944 52534920 6f687320 20646c75     DIO1 ISR should 
 8019fec:	796c6e6f 20656220 646e6168 676e696c     only be handling
 8019ffc:	54785220 6f656d69 62207475 61207475      RxTimeout but a
 801a00c:	66696420 65726566 6920746e 7265746e      different inter
 801a01c:	74707572 73617720 6e616820 64656c64     rupt was handled
 801a02c:	6e75202c 65707865 64657463 68656220     , unexpected beh
 801a03c:	6f697661 002e7275 74617473 3d3d2065     aviour..state ==
 801a04c:	41545320 525f4554 26262058 726f6c20      STATE_RX && lor
 801a05c:	6f6d5f61 00006564 66717269 7367616c     a_mode..irqflags
 801a06c:	52202620 5f524c46 46515249 5347414c      & RFLR_IRQFLAGS
 801a07c:	4458525f 5f454e4f 4b53414d 00000000     _RXDONE_MASK....
 801a08c:	6c756f63 6f6e2064 6c612074 61636f6c     could not alloca
 801a09c:	70206574 616b6361 202c6567 63736964     te package, disc
 801a0ac:	69647261 002e676e 5f746567 6f6d706f     arding..get_opmo
 801a0bc:	29286564 203d3d20 4f4d504f 535f4544     de() == OPMODE_S
 801a0cc:	444e4154 00005942 0800d0e4 0800d134     TANDBY......4...
 801a0dc:	0800d0ea 0800d12c 0800d0ea 0800d11c     ....,...........
 801a0ec:	0800d124 0800d2b0 0800d2b0 0800d304     $...............
 801a0fc:	0800d304 0800d2f0 0800d310 0800d2e8     ................
 801a10c:	726f6c28 46535f61 203d3e20 26202937     (lora_SF >= 7) &
 801a11c:	6c282026 5f61726f 3c204653 3231203d     & (lora_SF <= 12
 801a12c:	00000029                                )...

0801a130 <__func__.10419>:
 801a130:	735f6762 5f6e6163 645f7872 00656e6f     bg_scan_rx_done.

0801a140 <__func__.10422>:
 801a140:	61726f6c 6478725f 5f656e6f 00727369     lora_rxdone_isr.

0801a150 <__func__.10431>:
 801a150:	61726f6c 7478725f 6f656d69 695f7475     lora_rxtimeout_i
 801a160:	00007273                                sr..

0801a164 <__func__.10444>:
 801a164:	6f666966 76656c5f 695f6c65 00007273     fifo_level_isr..

0801a174 <__func__.10454>:
 801a174:	6f666966 7268745f 6f687365 695f646c     fifo_threshold_i
 801a184:	00007273                                sr..

0801a188 <__func__.10477>:
 801a188:	696c6163 74617262 78725f65 6168635f     calibrate_rx_cha
 801a198:	00006e69                                in..

0801a19c <__func__.10489>:
 801a19c:	725f7768 6f696461 696e695f 00000074     hw_radio_init...

0801a1ac <__func__.10617>:
 801a1ac:	725f7768 6f696461 7465735f 726f6c5f     hw_radio_set_lor
 801a1bc:	6f6d5f61 00006564                       a_mode..

0801a1c4 <lora_available_bw>:
 801a1c4:	00001e78 000028a0 00003cf0 00005140     x....(...<..@Q..
 801a1d4:	00007a12 0000a2e4 0000f424 0001e848     .z......$...H...
 801a1e4:	0003d090 0007a120                       .... ...

0801a1ec <lora_bw_indexes>:
 801a1ec:	0b0c0e0f 03060809 00000000              ............

0801a1f8 <rx_bw_startup_time>:
 801a1f8:	004e0042 00690059 007e0058 0097007d     B.N.Y.i.X.~.}...
 801a208:	00e200b1 01490115 021101ab 033f0277     ......I.....w.?.
 801a218:	04d70409 07f50666 0000098f              ....f.......

0801a224 <Rcon>:
 801a224:	0402018d 40201008 6c361b80 9a4dabd8     ...... @..6l..M.
 801a234:	63bc5e2f 6a3597c6 fa7db3d4 3991c5ef     /^.c..5j..}....9
 801a244:	bdd3e472 259fc261 6633944a 3a1d83cc     r...a..%J.3f...:
 801a254:	8dcbe874 08040201 80402010 d86c361b     t........ @..6l.
 801a264:	2f9a4dab c663bc5e d46a3597 effa7db3     .M./^.c..5j..}..
 801a274:	723991c5 61bdd3e4 4a259fc2 cc663394     ..9r...a..%J.3f.
 801a284:	743a1d83 018dcbe8 10080402 1b804020     ..:t........ @..
 801a294:	abd86c36 5e2f9a4d 97c663bc b3d46a35     6l..M./^.c..5j..
 801a2a4:	c5effa7d e4723991 c261bdd3 944a259f     }....9r...a..%J.
 801a2b4:	83cc6633 e8743a1d 02018dcb 20100804     3f...:t........ 
 801a2c4:	361b8040 4dabd86c bc5e2f9a 3597c663     @..6l..M./^.c..5
 801a2d4:	7db3d46a 91c5effa d3e47239 9fc261bd     j..}....9r...a..
 801a2e4:	33944a25 1d83cc66 cbe8743a 0402018d     %J.3f...:t......
 801a2f4:	40201008 6c361b80 9a4dabd8 63bc5e2f     .. @..6l..M./^.c
 801a304:	6a3597c6 fa7db3d4 3991c5ef bdd3e472     ..5j..}....9r...
 801a314:	259fc261 6633944a 3a1d83cc 00cbe874     a..%J.3f...:t...

0801a324 <sbox>:
 801a324:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
 801a334:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
 801a344:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
 801a354:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
 801a364:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
 801a374:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
 801a384:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
 801a394:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
 801a3a4:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
 801a3b4:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
 801a3c4:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
 801a3d4:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
 801a3e4:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
 801a3f4:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
 801a404:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
 801a414:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..
 801a424:	74726175 616e655f 28656c62 74726175     uart_enable(uart
 801a434:	00000029 6d6f682f 656a2f65 532f736e     ).../home/jens/S
 801a444:	492d6275 532d546f 6b636174 6174732f     ub-IoT-Stack/sta
 801a454:	662f6b63 656d6172 6b726f77 6d6f632f     ck/framework/com
 801a464:	656e6f70 2f73746e 736e6f63 2f656c6f     ponents/console/
 801a474:	736e6f63 2e656c6f 00000063              console.c...

0801a480 <__func__.5587>:
 801a480:	736e6f63 5f656c6f 74696e69 00000000     console_init....

0801a490 <fec_lut>:
 801a490:	02010300 01020003 01020003 02010300     ................

0801a4a0 <trellis0_lut>:
 801a4a0:	02030100 01000203                       ........

0801a4a8 <trellis1_lut>:
 801a4a8:	01000203 02030100 5f736921 695f7366     ........!is_fs_i
 801a4b8:	5f74696e 706d6f63 6574656c 00000064     nit_completed...
 801a4c8:	6d6f682f 656a2f65 532f736e 492d6275     /home/jens/Sub-I
 801a4d8:	532d546f 6b636174 6174732f 662f6b63     oT-Stack/stack/f
 801a4e8:	656d6172 6b726f77 6d6f632f 656e6f70     ramework/compone
 801a4f8:	2f73746e 662f7366 00632e73 626d756e     nts/fs/fs.c.numb
 801a508:	6f5f7265 69665f66 2073656c 5246203c     er_of_files < FR
 801a518:	57454d41 5f4b524f 465f5346 5f454c49     AMEWORK_FS_FILE_
 801a528:	4e554f43 00000054 665f7369 6e695f73     COUNT...is_fs_in
 801a538:	635f7469 6c706d6f 64657465 00000000     it_completed....

0801a548 <__func__.9907>:
 801a548:	5f73665f 74696e69 00000000              _fs_init....

0801a554 <__func__.9914>:
 801a554:	5f73665f 61657263 6d5f6574 63696761     _fs_create_magic
 801a564:	00000000                                ....

0801a568 <__func__.9946>:
 801a568:	695f7366 5f74696e 656c6966 00000000     fs_init_file....
 801a578:	255b0d0a 646c3330 0000205d 6d305b1b     ..[%03ld] ...[0m
 801a588:	00000000 3b345b1b 006d3134 73250d0a     .....[4;41m...%s
 801a598:	3330255b 255d646c 00002073 3c206469     [%03ld]%s ..id <
 801a5a8:	4d554e20 5341545f 0000534b 6d6f682f      NUM_TASKS../hom
 801a5b8:	656a2f65 532f736e 492d6275 532d546f     e/jens/Sub-IoT-S
 801a5c8:	6b636174 6174732f 662f6b63 656d6172     tack/stack/frame
 801a5d8:	6b726f77 6d6f632f 656e6f70 2f73746e     work/components/
 801a5e8:	65686373 656c7564 63732f72 75646568     scheduler/schedu
 801a5f8:	2e72656c 00000063 6e28474e 725f6d75     ler.c...NG(num_r
 801a608:	73696765 65726574 61745f64 29736b73     egistered_tasks)
 801a618:	203d3c20 5f4d554e 4b534154 00000053      <= NUM_TASKS...
 801a628:	3d3c2069 28474e20 5f6d756e 69676572     i <= NG(num_regi
 801a638:	72657473 745f6465 736b7361 00000029     stered_tasks)...
 801a648:	6e28474e 725f6d75 73696765 65726574     NG(num_registere
 801a658:	61745f64 29736b73 4e203c20 545f4d55     d_tasks) < NUM_T
 801a668:	534b5341 00000000 73617421 775f736b     ASKS....!tasks_w
 801a678:	69746961 6928676e 00000029              aiting(i)...

0801a684 <__func__.5232>:
 801a684:	5f746567 6b736174 0064695f              get_task_id.

0801a690 <__func__.5247>:
 801a690:	65686373 65725f64 74736967 745f7265     sched_register_t
 801a6a0:	5f6b7361 6f6c6c61 756d5f77 7069746c     ask_allow_multip
 801a6b0:	0000656c                                le..

0801a6b4 <__func__.5259>:
 801a6b4:	735f7369 64656863 64656c75 00000000     is_scheduled....

0801a6c4 <__func__.5264>:
 801a6c4:	735f7369 64656863 64656c75 7469775f     is_scheduled_wit
 801a6d4:	72615f68 00000067                       h_arg...

0801a6dc <__func__.5330>:
 801a6dc:	65686373 656c7564 75725f72 0000006e     scheduler_run...
 801a6ec:	6d726554 6c616e69 00000000 00545452     Terminal....RTT.
 801a6fc:	47474553 00005245 54524155 52524520     SEGGER..UART ERR
 801a70c:	2520524f 00000069 74726175 7369645f     OR %i...uart_dis
 801a71c:	656c6261 61687028 656c646e 61753e2d     able(phandle->ua
 801a72c:	00297472 6d6f682f 656a2f65 532f736e     rt)./home/jens/S
 801a73c:	492d6275 532d546f 6b636174 6174732f     ub-IoT-Stack/sta
 801a74c:	662f6b63 656d6172 6b726f77 6d6f632f     ck/framework/com
 801a75c:	656e6f70 2f73746e 69726573 705f6c61     ponents/serial_p
 801a76c:	6f746f72 2f6c6f63 69726573 705f6c61     rotocol/serial_p
 801a77c:	6f746f72 2e6c6f63 00000063 20212121     rotocol.c...!!! 
 801a78c:	7373696d 70206465 616b6361 3a736567     missed packages:
 801a79c:	00692520 20435243 6f636e69 63657272      %i.CRC incorrec
 801a7ac:	00002174 21677261 4c554e3d 0000004c     t!..arg!=NULL...
 801a7bc:	00000002 74726175 616e655f 28656c62     ....uart_enable(
 801a7cc:	6e616870 2d656c64 7261753e 00002974     phandle->uart)..
 801a7dc:	646e6168 2120656c 554e203d 00004c4c     handle != NULL..
 801a7ec:	65737521 746e695f 75727265 6c5f7470     !use_interrupt_l
 801a7fc:	73656e69 00000000 65737521 616d645f     ines....!use_dma
 801a80c:	00000000 65686373 65725f64 74736967     ....sched_regist
 801a81c:	745f7265 5f6b7361 6f6c6c61 756d5f77     er_task_allow_mu
 801a82c:	7069746c 2628656c 73756c66 65735f68     ltiple(&flush_se
 801a83c:	6c616972 6f72705f 6f636f74 78745f6c     rial_protocol_tx
 801a84c:	6669665f 74202c6f 29657572 203d3d20     _fifo, true) == 
 801a85c:	43435553 00535345 65686373 65725f64     SUCCESS.sched_re
 801a86c:	74736967 745f7265 5f6b7361 6f6c6c61     gister_task_allo
 801a87c:	756d5f77 7069746c 2628656c 636f7270     w_multiple(&proc
 801a88c:	5f737365 665f7872 2c6f6669 75727420     ess_rx_fifo, tru
 801a89c:	3d202965 5553203d 53454343 00000053     e) == SUCCESS...
 801a8ac:	6f626572 6465746f 74697720 65722068     rebooted with re
 801a8bc:	6e6f7361 00692520                       ason %i.

0801a8c4 <__func__.5852>:
 801a8c4:	69726573 705f6c61 6f746f72 5f6c6f63     serial_protocol_
 801a8d4:	62616e65 0000656c                       enable..

0801a8dc <__func__.5856>:
 801a8dc:	69726573 705f6c61 6f746f72 5f6c6f63     serial_protocol_
 801a8ec:	61736964 00656c62                       disable.

0801a8f4 <__func__.5863>:
 801a8f4:	73756c66 65735f68 6c616972 6f72705f     flush_serial_pro
 801a904:	6f636f74 78745f6c 6669665f 0000006f     tocol_tx_fifo...

0801a914 <__func__.5890>:
 801a914:	636f7270 5f737365 665f7872 006f6669     process_rx_fifo.

0801a924 <__func__.5925>:
 801a924:	69726573 705f6c61 6f746f72 5f6c6f63     serial_protocol_
 801a934:	74696e69 00000000 6d6f682f 656a2f65     init..../home/je
 801a944:	532f736e 492d6275 532d546f 6b636174     ns/Sub-IoT-Stack
 801a954:	6174732f 662f6b63 656d6172 6b726f77     /stack/framework
 801a964:	6d6f632f 656e6f70 2f73746e 656d6974     /components/time
 801a974:	69742f72 2e72656d 00000063 6e692828     r/timer.c...((in
 801a984:	5f323374 69662974 645f6572 79616c65     t32_t)fire_delay
 801a994:	203e2029 00000030 6e28474e 5f747865     ) > 0...NG(next_
 801a9a4:	6e657665 21202974 4f4e203d 4556455f     event) != NO_EVE
 801a9b4:	0000544e 7428474e 72656d69 4e5b2973     NT..NG(timers)[N
 801a9c4:	656e2847 655f7478 746e6576 662e5d29     G(next_event)].f
 801a9d4:	203d2120 00307830 656d6974 69662072      != 0x0.timer fi
 801a9e4:	20646572 206f6f74 6c726165 69772079     red too early wi
 801a9f4:	63206874 65727275 7420746e 20656d69     th current time 
 801aa04:	2b206925 6e696d20 6c656420 74207961     %i + min delay t
 801aa14:	736b6369 20692520 656e203c 65207478     icks %i < next e
 801aa24:	746e6576 3a692520 6e756620 6f697463     vent %i: functio
 801aa34:	7830206e 00005825 656d6974 69662072     n 0x%X..timer fi
 801aa44:	20646572 206f6f74 6574616c 74697720     red too late wit
 801aa54:	75632068 6e657272 69742074 2520656d     h current time %
 801aa64:	203e2069 7478656e 65766520 2520746e     i > next event %
 801aa74:	202b2069 66203a35 74636e75 206e6f69     i + 5: function 
 801aa84:	58257830 00000000 65726966 6d69745f     0x%X....fire_tim
 801aa94:	3d3e2065 5f776820 656d6974 65675f72     e >= hw_timer_ge
 801aaa4:	6c617674 48286575 49545f57 5f52454d     tvalue(HW_TIMER_
 801aab4:	00294449                                ID).

0801aab8 <__func__.4971>:
 801aab8:	656d6974 6e695f72 00007469              timer_init..

0801aac4 <__func__.5043>:
 801aac4:	666e6f63 72756769 656e5f65 655f7478     configure_next_e
 801aad4:	746e6576 00000000                       vent....

0801aadc <__func__.5054>:
 801aadc:	656d6974 766f5f72 6c667265 0000776f     timer_overflow..

0801aaec <__func__.5057>:
 801aaec:	656d6974 69665f72 00646572 26206462     timer_fired.bd &
 801aafc:	64622026 72643e2d 72657669 20262620     & bd->driver && 
 801ab0c:	3e2d6462 76697264 3e2d7265 74696e69     bd->driver->init
 801ab1c:	00000000 6d6f682f 656a2f65 532f736e     ..../home/jens/S
 801ab2c:	492d6275 532d546f 6b636174 6174732f     ub-IoT-Stack/sta
 801ab3c:	662f6b63 656d6172 6b726f77 6c61682f     ck/framework/hal
 801ab4c:	6d6f632f 2f6e6f6d 6c627768 646b636f     /common/hwblockd
 801ab5c:	63697665 00632e65 26206462 64622026     evice.c.bd && bd
 801ab6c:	72643e2d 72657669 20262620 3e2d6462     ->driver && bd->
 801ab7c:	76697264 3e2d7265 64616572 00000000     driver->read....
 801ab8c:	26206462 64622026 72643e2d 72657669     bd && bd->driver
 801ab9c:	20262620 3e2d6462 76697264 3e2d7265      && bd->driver->
 801abac:	676f7270 006d6172                       program.

0801abb4 <__func__.4836>:
 801abb4:	636f6c62 7665646b 5f656369 74696e69     blockdevice_init
 801abc4:	00000000                                ....

0801abc8 <__func__.4843>:
 801abc8:	636f6c62 7665646b 5f656369 64616572     blockdevice_read
 801abd8:	00000000                                ....

0801abdc <__func__.4850>:
 801abdc:	636f6c62 7665646b 5f656369 676f7270     blockdevice_prog
 801abec:	006d6172                                ram.

0801abf0 <TWO52>:
 801abf0:	00000000 43300000 00000000 c3300000     ......0C......0.
 801ac00:	0801233e 080122ca 08012238 080121f2     >#..."..8"...!..
 801ac10:	08012238 08012306 08012238 080121f2     8"...#..8"...!..
 801ac20:	080122ca 080122ca 08012306 080121f2     ."..."...#...!..
 801ac30:	080121f8 080121f8 080121f8 08012314     .!...!...!...#..
 801ac40:	080122ca 080122ca 08012238 080121ee     ."..."..8"...!..
 801ac50:	08012238 08012306 08012238 080121ee     8"...#..8"...!..
 801ac60:	080122ca 080122ca 08012306 080121ee     ."..."...#...!..
 801ac70:	080121f8 080121f8 080121f8 08012310     .!...!...!...#..
 801ac80:	080125f6 08012594 08012594 08012592     .%...%...%...%..
 801ac90:	08012598 08012598 080126c0 08012592     .%...%...&...%..
 801aca0:	08012598 080126c0 08012598 08012592     .%...&...%...%..
 801acb0:	08012676 08012676 08012676 080126fa     v&..v&..v&...&..
 801acc0:	08013558 080133c0 0801339e 080134b2     X5...3...3...4..
 801acd0:	0801339e 080134f6 0801339e 080134b2     .3...4...3...4..
 801ace0:	080133c0 080133c0 080134f6 080134b2     .3...3...4...4..
 801acf0:	08013464 08013464 08013464 08013504     d4..d4..d4...5..
 801ad00:	08013c90 08013bbe 08013bbe 08013bba     .<...;...;...;..
 801ad10:	08013bc4 08013bc4 08013eb0 08013bba     .;...;...>...;..
 801ad20:	08013bc4 08013eb0 08013bc4 08013bba     .;...>...;...;..
 801ad30:	08013e4e 08013e4e 08013e4e 08013f1a     N>..N>..N>...?..

0801ad40 <__sf_fake_stderr>:
	...

0801ad60 <__sf_fake_stdout>:
	...

0801ad80 <__sf_fake_stdin>:
	...

0801ada0 <_global_impure_ptr>:
 801ada0:	200005e0 4e454552 616d2054 636f6c6c     ... REENT malloc
 801adb0:	63757320 64656563 00006465 2e2f2e2e      succeeded..../.
 801adc0:	2e2e2f2e 2f2e2e2f 2e2f2e2e 2e2e2f2e     ./../../../../..
 801add0:	2f2e2e2f 6c77656e 6c2f6269 2f636269     /../newlib/libc/
 801ade0:	6c647473 722f6269 2e646e61 00000063     stdlib/rand.c...
 801adf0:	2b302d23 00000020 004c6c68 45676665     #-0+ ...hlL.efgE
 801ae00:	00004746 33323130 37363534 42413938     FG..0123456789AB
 801ae10:	46454443 00000000 33323130 37363534     CDEF....01234567
 801ae20:	62613938 66656463 00000000              89abcdef....

0801ae2c <__EH_FRAME_BEGIN__>:
 801ae2c:	00000000                                ....
