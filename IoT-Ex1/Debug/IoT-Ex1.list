
IoT-Ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007668  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  080077f8  080077f8  000177f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bb4  08007bb4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007bb4  08007bb4  00017bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bbc  08007bbc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bbc  08007bbc  00017bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bc0  08007bc0  00017bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200001d4  08007d98  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08007d98  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ffcd  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002794  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  000329a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aef  00000000  00000000  000337e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001afa6  00000000  00000000  000342cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e15  00000000  00000000  0004f275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3beb  00000000  00000000  0006108a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049c0  00000000  00000000  00104c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00109638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080077e0 	.word	0x080077e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080077e0 	.word	0x080077e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <uart_rx_buffer_clear>:
    {
      uart_rx_buffer_i++;
    }
}

void uart_rx_buffer_clear(){
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
	for (int i=0; i<(BUFFER_SIZE); i++) {
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	e007      	b.n	8000ec0 <uart_rx_buffer_clear+0x1c>
		uart_rx_buffer[i] = 0x0;
 8000eb0:	4a08      	ldr	r2, [pc, #32]	; (8000ed4 <uart_rx_buffer_clear+0x30>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<(BUFFER_SIZE); i++) {
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b1d      	cmp	r3, #29
 8000ec4:	ddf4      	ble.n	8000eb0 <uart_rx_buffer_clear+0xc>
	}
}
 8000ec6:	bf00      	nop
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	200001f0 	.word	0x200001f0

08000ed8 <SHT40_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SHT40_Init()
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	HAL_I2C_Init(&hi2c1); // Initialize and configure the I2C peripheral
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <SHT40_Init+0x10>)
 8000ede:	f000 ff8b 	bl	8001df8 <HAL_I2C_Init>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000214 	.word	0x20000214

08000eec <LTR329_Init>:
    *t = t_degC;
    *rh = rh_pRH;
}

void LTR329_Init()
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af04      	add	r7, sp, #16
    uint8_t data;

    // Activate the sensor
    data = LTR329_ACTIVE_MODE;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, LTR329_I2C_ADDRESS, LTR329_ALS_CONTR, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000ef6:	2364      	movs	r3, #100	; 0x64
 8000ef8:	9302      	str	r3, [sp, #8]
 8000efa:	2301      	movs	r3, #1
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2301      	movs	r3, #1
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	2152      	movs	r1, #82	; 0x52
 8000f08:	480a      	ldr	r0, [pc, #40]	; (8000f34 <LTR329_Init+0x48>)
 8000f0a:	f001 f811 	bl	8001f30 <HAL_I2C_Mem_Write>

    // Set measurement rate
    data = LTR329_MEAS_RATE;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, LTR329_I2C_ADDRESS, LTR329_ALS_MEAS_RATE, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000f12:	2364      	movs	r3, #100	; 0x64
 8000f14:	9302      	str	r3, [sp, #8]
 8000f16:	2301      	movs	r3, #1
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	2285      	movs	r2, #133	; 0x85
 8000f22:	2152      	movs	r1, #82	; 0x52
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <LTR329_Init+0x48>)
 8000f26:	f001 f803 	bl	8001f30 <HAL_I2C_Mem_Write>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000268 	.word	0x20000268

08000f38 <HAL_UART_RxCpltCallback>:
    //*ch1 = (uint16_t)(data[1] << 8) | data[0];
    //*ch0 = (uint16_t)(data[3] << 8) | data[2];

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a03      	ldr	r2, [pc, #12]	; (8000f54 <HAL_UART_RxCpltCallback+0x1c>)
 8000f46:	4293      	cmp	r3, r2
	} else {
		return;
	}
}
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40004400 	.word	0x40004400

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f000 fb7e 	bl	800165e <HAL_Init>
  //HAL_UART_IRQHandler(&huart1);
  //HAL_UART_IRQHandler(&huart2);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 f83d 	bl	8000fe0 <SystemClock_Config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000f66:	b662      	cpsie	i
}
 8000f68:	bf00      	nop

  /* USER CODE BEGIN SysInit */
  __enable_irq();
  //HAL_UART_IRQHandler(&huart1);
  HAL_UART_IRQHandler(&huart2);
 8000f6a:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <main+0x7c>)
 8000f6c:	f002 fccc 	bl	8003908 <HAL_UART_IRQHandler>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f70:	f000 f8fe 	bl	8001170 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f74:	f000 f8ca 	bl	800110c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f78:	f000 f888 	bl	800108c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    SHT40_Init();
 8000f7c:	f7ff ffac 	bl	8000ed8 <SHT40_Init>
    LTR329_Init();
 8000f80:	f7ff ffb4 	bl	8000eec <LTR329_Init>
    uart_rx_buffer_clear();
 8000f84:	f7ff ff8e 	bl	8000ea4 <uart_rx_buffer_clear>
    HAL_UART_Receive_IT(&huart2, Rx_data, 3);
 8000f88:	2203      	movs	r2, #3
 8000f8a:	4913      	ldr	r1, [pc, #76]	; (8000fd8 <main+0x80>)
 8000f8c:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <main+0x7c>)
 8000f8e:	f002 fc6f 	bl	8003870 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //enum msg_type_e msg_type = Rx_data[1];
	  if (Rx_data[1] == 0x1) {
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <main+0x80>)
 8000f94:	785b      	ldrb	r3, [r3, #1]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d117      	bne.n	8000fca <main+0x72>
		  // For debugging
		  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000f9a:	2108      	movs	r1, #8
 8000f9c:	480f      	ldr	r0, [pc, #60]	; (8000fdc <main+0x84>)
 8000f9e:	f000 ff11 	bl	8001dc4 <HAL_GPIO_TogglePin>
		  uint8_t* DustBytes = create_payload_f(RESPONSE_DUST, rh/t);
		  HAL_UART_Transmit(&huart2, DustBytes, 7, 10);

*/
		  //Clear Rx Buffer
		  for (uint8_t i=0; i<3; i++) {
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	e006      	b.n	8000fb6 <main+0x5e>
			  Rx_data[i] = 0;
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <main+0x80>)
 8000fac:	2100      	movs	r1, #0
 8000fae:	54d1      	strb	r1, [r2, r3]
		  for (uint8_t i=0; i<3; i++) {
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d9f5      	bls.n	8000fa8 <main+0x50>
		  }
		  MX_USART2_UART_Init();
 8000fbc:	f000 f8a6 	bl	800110c <MX_USART2_UART_Init>
		  HAL_UART_Receive_IT(&huart2, Rx_data, 3);
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	4905      	ldr	r1, [pc, #20]	; (8000fd8 <main+0x80>)
 8000fc4:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <main+0x7c>)
 8000fc6:	f002 fc53 	bl	8003870 <HAL_UART_Receive_IT>
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 8000fca:	2064      	movs	r0, #100	; 0x64
 8000fcc:	f000 fbbc 	bl	8001748 <HAL_Delay>
	  if (Rx_data[1] == 0x1) {
 8000fd0:	e7df      	b.n	8000f92 <main+0x3a>
 8000fd2:	bf00      	nop
 8000fd4:	200002bc 	.word	0x200002bc
 8000fd8:	20000210 	.word	0x20000210
 8000fdc:	48000400 	.word	0x48000400

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b096      	sub	sp, #88	; 0x58
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	2244      	movs	r2, #68	; 0x44
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f004 fd57 	bl	8005aa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001002:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001006:	f001 fbc1 	bl	800278c <HAL_PWREx_ControlVoltageScaling>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001010:	f000 f90e 	bl	8001230 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001014:	f001 fb9c 	bl	8002750 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <SystemClock_Config+0xa8>)
 800101a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800101e:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <SystemClock_Config+0xa8>)
 8001020:	f023 0318 	bic.w	r3, r3, #24
 8001024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001028:	2314      	movs	r3, #20
 800102a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800102c:	2301      	movs	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001030:	2301      	movs	r3, #1
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001038:	23a0      	movs	r3, #160	; 0xa0
 800103a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800103c:	2300      	movs	r3, #0
 800103e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4618      	mov	r0, r3
 8001046:	f001 fbf7 	bl	8002838 <HAL_RCC_OscConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001050:	f000 f8ee 	bl	8001230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001054:	230f      	movs	r3, #15
 8001056:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001068:	463b      	mov	r3, r7
 800106a:	2101      	movs	r1, #1
 800106c:	4618      	mov	r0, r3
 800106e:	f002 f845 	bl	80030fc <HAL_RCC_ClockConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001078:	f000 f8da 	bl	8001230 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800107c:	f002 fbe8 	bl	8003850 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001080:	bf00      	nop
 8001082:	3758      	adds	r7, #88	; 0x58
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40021000 	.word	0x40021000

0800108c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_I2C1_Init+0x74>)
 8001092:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <MX_I2C1_Init+0x78>)
 8001094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_I2C1_Init+0x74>)
 8001098:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <MX_I2C1_Init+0x7c>)
 800109a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <MX_I2C1_Init+0x74>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <MX_I2C1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_I2C1_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_I2C1_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_I2C1_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_I2C1_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c6:	480e      	ldr	r0, [pc, #56]	; (8001100 <MX_I2C1_Init+0x74>)
 80010c8:	f000 fe96 	bl	8001df8 <HAL_I2C_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010d2:	f000 f8ad 	bl	8001230 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010d6:	2100      	movs	r1, #0
 80010d8:	4809      	ldr	r0, [pc, #36]	; (8001100 <MX_I2C1_Init+0x74>)
 80010da:	f001 faa1 	bl	8002620 <HAL_I2CEx_ConfigAnalogFilter>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010e4:	f000 f8a4 	bl	8001230 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010e8:	2100      	movs	r1, #0
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_I2C1_Init+0x74>)
 80010ec:	f001 fae3 	bl	80026b6 <HAL_I2CEx_ConfigDigitalFilter>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010f6:	f000 f89b 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000214 	.word	0x20000214
 8001104:	40005400 	.word	0x40005400
 8001108:	00707cbb 	.word	0x00707cbb

0800110c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_USART2_UART_Init+0x5c>)
 8001112:	4a16      	ldr	r2, [pc, #88]	; (800116c <MX_USART2_UART_Init+0x60>)
 8001114:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_USART2_UART_Init+0x5c>)
 8001118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800111c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_USART2_UART_Init+0x5c>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_USART2_UART_Init+0x5c>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_USART2_UART_Init+0x5c>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <MX_USART2_UART_Init+0x5c>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_USART2_UART_Init+0x5c>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <MX_USART2_UART_Init+0x5c>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_USART2_UART_Init+0x5c>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <MX_USART2_UART_Init+0x5c>)
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800114e:	2300      	movs	r3, #0
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_USART2_UART_Init+0x5c>)
 8001156:	f003 fe13 	bl	8004d80 <HAL_RS485Ex_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001160:	f000 f866 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200002bc 	.word	0x200002bc
 800116c:	40004400 	.word	0x40004400

08001170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	4b28      	ldr	r3, [pc, #160]	; (8001228 <MX_GPIO_Init+0xb8>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a27      	ldr	r2, [pc, #156]	; (8001228 <MX_GPIO_Init+0xb8>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <MX_GPIO_Init+0xb8>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <MX_GPIO_Init+0xb8>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	4a21      	ldr	r2, [pc, #132]	; (8001228 <MX_GPIO_Init+0xb8>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <MX_GPIO_Init+0xb8>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <MX_GPIO_Init+0xb8>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <MX_GPIO_Init+0xb8>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <MX_GPIO_Init+0xb8>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2108      	movs	r1, #8
 80011d2:	4816      	ldr	r0, [pc, #88]	; (800122c <MX_GPIO_Init+0xbc>)
 80011d4:	f000 fdde 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80011d8:	2308      	movs	r3, #8
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	480f      	ldr	r0, [pc, #60]	; (800122c <MX_GPIO_Init+0xbc>)
 80011f0:	f000 fc5e 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011f4:	23c0      	movs	r3, #192	; 0xc0
 80011f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001204:	2307      	movs	r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	4619      	mov	r1, r3
 800120e:	4807      	ldr	r0, [pc, #28]	; (800122c <MX_GPIO_Init+0xbc>)
 8001210:	f000 fc4e 	bl	8001ab0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	2108      	movs	r1, #8
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_GPIO_Init+0xbc>)
 800121a:	f000 fdbb 	bl	8001d94 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 800121e:	bf00      	nop
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000
 800122c:	48000400 	.word	0x48000400

08001230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
}
 8001236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001238:	e7fe      	b.n	8001238 <Error_Handler+0x8>
	...

0800123c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <HAL_MspInit+0x44>)
 8001244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001246:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <HAL_MspInit+0x44>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6613      	str	r3, [r2, #96]	; 0x60
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <HAL_MspInit+0x44>)
 8001250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_MspInit+0x44>)
 800125c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <HAL_MspInit+0x44>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001264:	6593      	str	r3, [r2, #88]	; 0x58
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_MspInit+0x44>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000

08001284 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b096      	sub	sp, #88	; 0x58
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	2234      	movs	r2, #52	; 0x34
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f004 fbfc 	bl	8005aa2 <memset>
  if(hi2c->Instance==I2C1)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a1f      	ldr	r2, [pc, #124]	; (800132c <HAL_I2C_MspInit+0xa8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d137      	bne.n	8001324 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012b4:	2340      	movs	r3, #64	; 0x40
 80012b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 f93f 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012cc:	f7ff ffb0 	bl	8001230 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <HAL_I2C_MspInit+0xac>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	4a16      	ldr	r2, [pc, #88]	; (8001330 <HAL_I2C_MspInit+0xac>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <HAL_I2C_MspInit+0xac>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012ec:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ee:	2312      	movs	r3, #18
 80012f0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012fa:	2304      	movs	r3, #4
 80012fc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001308:	f000 fbd2 	bl	8001ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_I2C_MspInit+0xac>)
 800130e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_I2C_MspInit+0xac>)
 8001312:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001316:	6593      	str	r3, [r2, #88]	; 0x58
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_I2C_MspInit+0xac>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001324:	bf00      	nop
 8001326:	3758      	adds	r7, #88	; 0x58
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40005400 	.word	0x40005400
 8001330:	40021000 	.word	0x40021000

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b096      	sub	sp, #88	; 0x58
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	2234      	movs	r2, #52	; 0x34
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f004 fba4 	bl	8005aa2 <memset>
  if(huart->Instance==USART2)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a23      	ldr	r2, [pc, #140]	; (80013ec <HAL_UART_MspInit+0xb8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d13e      	bne.n	80013e2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001364:	2302      	movs	r3, #2
 8001366:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	4618      	mov	r0, r3
 8001372:	f002 f8e7 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800137c:	f7ff ff58 	bl	8001230 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_UART_MspInit+0xbc>)
 8001382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001384:	4a1a      	ldr	r2, [pc, #104]	; (80013f0 <HAL_UART_MspInit+0xbc>)
 8001386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138a:	6593      	str	r3, [r2, #88]	; 0x58
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_UART_MspInit+0xbc>)
 800138e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_UART_MspInit+0xbc>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139c:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <HAL_UART_MspInit+0xbc>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_UART_MspInit+0xbc>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_DE
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80013b0:	230e      	movs	r3, #14
 80013b2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013c0:	2307      	movs	r3, #7
 80013c2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013c8:	4619      	mov	r1, r3
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ce:	f000 fb6f 	bl	8001ab0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	2026      	movs	r0, #38	; 0x26
 80013d8:	f000 fab5 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013dc:	2026      	movs	r0, #38	; 0x26
 80013de:	f000 face 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013e2:	bf00      	nop
 80013e4:	3758      	adds	r7, #88	; 0x58
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40004400 	.word	0x40004400
 80013f0:	40021000 	.word	0x40021000

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <NMI_Handler+0x4>

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001440:	f000 f962 	bl	8001708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <USART2_IRQHandler+0x10>)
 800144e:	f002 fa5b 	bl	8003908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200002bc 	.word	0x200002bc

0800145c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return 1;
 8001460:	2301      	movs	r3, #1
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_kill>:

int _kill(int pid, int sig)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001476:	f004 fb77 	bl	8005b68 <__errno>
 800147a:	4603      	mov	r3, r0
 800147c:	2216      	movs	r2, #22
 800147e:	601a      	str	r2, [r3, #0]
  return -1;
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <_exit>:

void _exit (int status)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ffe7 	bl	800146c <_kill>
  while (1) {}    /* Make sure we hang here */
 800149e:	e7fe      	b.n	800149e <_exit+0x12>

080014a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e00a      	b.n	80014c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014b2:	f3af 8000 	nop.w
 80014b6:	4601      	mov	r1, r0
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	60ba      	str	r2, [r7, #8]
 80014be:	b2ca      	uxtb	r2, r1
 80014c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dbf0      	blt.n	80014b2 <_read+0x12>
  }

  return len;
 80014d0:	687b      	ldr	r3, [r7, #4]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	e009      	b.n	8001500 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	60ba      	str	r2, [r7, #8]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	3301      	adds	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	dbf1      	blt.n	80014ec <_write+0x12>
  }
  return len;
 8001508:	687b      	ldr	r3, [r7, #4]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <_close>:

int _close(int file)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800153a:	605a      	str	r2, [r3, #4]
  return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <_isatty>:

int _isatty(int file)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001584:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <_sbrk+0x5c>)
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <_sbrk+0x60>)
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <_sbrk+0x64>)
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <_sbrk+0x68>)
 800159c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d207      	bcs.n	80015bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ac:	f004 fadc 	bl	8005b68 <__errno>
 80015b0:	4603      	mov	r3, r0
 80015b2:	220c      	movs	r2, #12
 80015b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	e009      	b.n	80015d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <_sbrk+0x64>)
 80015cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000a000 	.word	0x2000a000
 80015dc:	00000400 	.word	0x00000400
 80015e0:	20000344 	.word	0x20000344
 80015e4:	20000498 	.word	0x20000498

080015e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <SystemInit+0x20>)
 80015ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <SystemInit+0x20>)
 80015f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800160c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001644 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001610:	f7ff ffea 	bl	80015e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <LoopForever+0x6>)
  ldr r1, =_edata
 8001616:	490d      	ldr	r1, [pc, #52]	; (800164c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <LoopForever+0xe>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800161c:	e002      	b.n	8001624 <LoopCopyDataInit>

0800161e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001622:	3304      	adds	r3, #4

08001624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001628:	d3f9      	bcc.n	800161e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <LoopForever+0x12>)
  ldr r4, =_ebss
 800162c:	4c0a      	ldr	r4, [pc, #40]	; (8001658 <LoopForever+0x16>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001630:	e001      	b.n	8001636 <LoopFillZerobss>

08001632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001634:	3204      	adds	r2, #4

08001636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001638:	d3fb      	bcc.n	8001632 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800163a:	f004 fa9b 	bl	8005b74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800163e:	f7ff fc8b 	bl	8000f58 <main>

08001642 <LoopForever>:

LoopForever:
    b LoopForever
 8001642:	e7fe      	b.n	8001642 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001644:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800164c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001650:	08007bc4 	.word	0x08007bc4
  ldr r2, =_sbss
 8001654:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001658:	20000498 	.word	0x20000498

0800165c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC1_2_IRQHandler>

0800165e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001668:	2003      	movs	r0, #3
 800166a:	f000 f961 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800166e:	2000      	movs	r0, #0
 8001670:	f000 f80e 	bl	8001690 <HAL_InitTick>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	71fb      	strb	r3, [r7, #7]
 800167e:	e001      	b.n	8001684 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001680:	f7ff fddc 	bl	800123c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001684:	79fb      	ldrb	r3, [r7, #7]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_InitTick+0x6c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d023      	beq.n	80016ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <HAL_InitTick+0x70>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <HAL_InitTick+0x6c>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f96d 	bl	800199a <HAL_SYSTICK_Config>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10f      	bne.n	80016e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d809      	bhi.n	80016e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016cc:	2200      	movs	r2, #0
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f000 f937 	bl	8001946 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d8:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <HAL_InitTick+0x74>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e007      	b.n	80016f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	e004      	b.n	80016f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	e001      	b.n	80016f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000008 	.word	0x20000008
 8001700:	20000000 	.word	0x20000000
 8001704:	20000004 	.word	0x20000004

08001708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x20>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x24>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_IncTick+0x24>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000008 	.word	0x20000008
 800172c:	20000348 	.word	0x20000348

08001730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <HAL_GetTick+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000348 	.word	0x20000348

08001748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001750:	f7ff ffee 	bl	8001730 <HAL_GetTick>
 8001754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001760:	d005      	beq.n	800176e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_Delay+0x44>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800176e:	bf00      	nop
 8001770:	f7ff ffde 	bl	8001730 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	429a      	cmp	r2, r3
 800177e:	d8f7      	bhi.n	8001770 <HAL_Delay+0x28>
  {
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000008 	.word	0x20000008

08001790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <__NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	db0b      	blt.n	800181e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	4907      	ldr	r1, [pc, #28]	; (800182c <__NVIC_EnableIRQ+0x38>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	2001      	movs	r0, #1
 8001816:	fa00 f202 	lsl.w	r2, r0, r2
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f7ff ff8e 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff29 	bl	8001790 <__NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff3e 	bl	80017d8 <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff8e 	bl	8001884 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5d 	bl	8001830 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff31 	bl	80017f4 <__NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffa2 	bl	80018ec <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b085      	sub	sp, #20
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d008      	beq.n	80019dc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2204      	movs	r2, #4
 80019ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e022      	b.n	8001a22 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 020e 	bic.w	r2, r2, #14
 80019ea:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	f003 021c 	and.w	r2, r3, #28
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	2101      	movs	r1, #1
 8001a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d005      	beq.n	8001a52 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2204      	movs	r2, #4
 8001a4a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
 8001a50:	e029      	b.n	8001aa6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 020e 	bic.w	r2, r2, #14
 8001a60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0201 	bic.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f003 021c 	and.w	r2, r3, #28
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	2101      	movs	r1, #1
 8001a80:	fa01 f202 	lsl.w	r2, r1, r2
 8001a84:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
    }
  }
  return status;
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001abe:	e14e      	b.n	8001d5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8001acc:	4013      	ands	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 8140 	beq.w	8001d58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d005      	beq.n	8001af0 <HAL_GPIO_Init+0x40>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d130      	bne.n	8001b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b26:	2201      	movs	r2, #1
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	f003 0201 	and.w	r2, r3, #1
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d017      	beq.n	8001b8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d123      	bne.n	8001be2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	08da      	lsrs	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3208      	adds	r2, #8
 8001bdc:	6939      	ldr	r1, [r7, #16]
 8001bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	2203      	movs	r2, #3
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0203 	and.w	r2, r3, #3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 809a 	beq.w	8001d58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c24:	4b55      	ldr	r3, [pc, #340]	; (8001d7c <HAL_GPIO_Init+0x2cc>)
 8001c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c28:	4a54      	ldr	r2, [pc, #336]	; (8001d7c <HAL_GPIO_Init+0x2cc>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c30:	4b52      	ldr	r3, [pc, #328]	; (8001d7c <HAL_GPIO_Init+0x2cc>)
 8001c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c3c:	4a50      	ldr	r2, [pc, #320]	; (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c66:	d013      	beq.n	8001c90 <HAL_GPIO_Init+0x1e0>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a46      	ldr	r2, [pc, #280]	; (8001d84 <HAL_GPIO_Init+0x2d4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00d      	beq.n	8001c8c <HAL_GPIO_Init+0x1dc>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a45      	ldr	r2, [pc, #276]	; (8001d88 <HAL_GPIO_Init+0x2d8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d007      	beq.n	8001c88 <HAL_GPIO_Init+0x1d8>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a44      	ldr	r2, [pc, #272]	; (8001d8c <HAL_GPIO_Init+0x2dc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d101      	bne.n	8001c84 <HAL_GPIO_Init+0x1d4>
 8001c80:	2303      	movs	r3, #3
 8001c82:	e006      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c84:	2307      	movs	r3, #7
 8001c86:	e004      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e002      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c90:	2300      	movs	r3, #0
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	f002 0203 	and.w	r2, r2, #3
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	4093      	lsls	r3, r2
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ca2:	4937      	ldr	r1, [pc, #220]	; (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cb0:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cd4:	4a2e      	ldr	r2, [pc, #184]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cda:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cfe:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d28:	4a19      	ldr	r2, [pc, #100]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d52:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f47f aea9 	bne.w	8001ac0 <HAL_GPIO_Init+0x10>
  }
}
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40010000 	.word	0x40010000
 8001d84:	48000400 	.word	0x48000400
 8001d88:	48000800 	.word	0x48000800
 8001d8c:	48000c00 	.word	0x48000c00
 8001d90:	40010400 	.word	0x40010400

08001d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001db0:	e002      	b.n	8001db8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001db2:	887a      	ldrh	r2, [r7, #2]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	041a      	lsls	r2, r3, #16
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	43d9      	mvns	r1, r3
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	400b      	ands	r3, r1
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	619a      	str	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e08d      	b.n	8001f26 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d106      	bne.n	8001e24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff fa30 	bl	8001284 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2224      	movs	r2, #36	; 0x24
 8001e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0201 	bic.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d107      	bne.n	8001e72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	e006      	b.n	8001e80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d108      	bne.n	8001e9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	e007      	b.n	8001eaa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ea8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ebc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ecc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69d9      	ldr	r1, [r3, #28]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1a      	ldr	r2, [r3, #32]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2220      	movs	r2, #32
 8001f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	4608      	mov	r0, r1
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4603      	mov	r3, r0
 8001f40:	817b      	strh	r3, [r7, #10]
 8001f42:	460b      	mov	r3, r1
 8001f44:	813b      	strh	r3, [r7, #8]
 8001f46:	4613      	mov	r3, r2
 8001f48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b20      	cmp	r3, #32
 8001f54:	f040 80f9 	bne.w	800214a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_I2C_Mem_Write+0x34>
 8001f5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d105      	bne.n	8001f70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0ed      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_I2C_Mem_Write+0x4e>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e0e6      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f86:	f7ff fbd3 	bl	8001730 <HAL_GetTick>
 8001f8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2319      	movs	r3, #25
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 f955 	bl	8002248 <I2C_WaitOnFlagUntilTimeout>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0d1      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2221      	movs	r2, #33	; 0x21
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2240      	movs	r2, #64	; 0x40
 8001fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a3a      	ldr	r2, [r7, #32]
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fd0:	88f8      	ldrh	r0, [r7, #6]
 8001fd2:	893a      	ldrh	r2, [r7, #8]
 8001fd4:	8979      	ldrh	r1, [r7, #10]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	4603      	mov	r3, r0
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f8b9 	bl	8002158 <I2C_RequestMemoryWrite>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0a9      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	2bff      	cmp	r3, #255	; 0xff
 8002000:	d90e      	bls.n	8002020 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	22ff      	movs	r2, #255	; 0xff
 8002006:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200c:	b2da      	uxtb	r2, r3
 800200e:	8979      	ldrh	r1, [r7, #10]
 8002010:	2300      	movs	r3, #0
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 facf 	bl	80025bc <I2C_TransferConfig>
 800201e:	e00f      	b.n	8002040 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002024:	b29a      	uxth	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	b2da      	uxtb	r2, r3
 8002030:	8979      	ldrh	r1, [r7, #10]
 8002032:	2300      	movs	r3, #0
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fabe 	bl	80025bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 f94e 	bl	80022e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e07b      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206e:	b29b      	uxth	r3, r3
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d034      	beq.n	80020f8 <HAL_I2C_Mem_Write+0x1c8>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002092:	2b00      	cmp	r3, #0
 8002094:	d130      	bne.n	80020f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209c:	2200      	movs	r2, #0
 800209e:	2180      	movs	r1, #128	; 0x80
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 f8d1 	bl	8002248 <I2C_WaitOnFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e04d      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2bff      	cmp	r3, #255	; 0xff
 80020b8:	d90e      	bls.n	80020d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	22ff      	movs	r2, #255	; 0xff
 80020be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	8979      	ldrh	r1, [r7, #10]
 80020c8:	2300      	movs	r3, #0
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 fa73 	bl	80025bc <I2C_TransferConfig>
 80020d6:	e00f      	b.n	80020f8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	8979      	ldrh	r1, [r7, #10]
 80020ea:	2300      	movs	r3, #0
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 fa62 	bl	80025bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d19e      	bne.n	8002040 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f934 	bl	8002374 <I2C_WaitOnSTOPFlagUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e01a      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2220      	movs	r2, #32
 800211c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_I2C_Mem_Write+0x224>)
 800212a:	400b      	ands	r3, r1
 800212c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e000      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800214a:	2302      	movs	r3, #2
  }
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	fe00e800 	.word	0xfe00e800

08002158 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af02      	add	r7, sp, #8
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	4608      	mov	r0, r1
 8002162:	4611      	mov	r1, r2
 8002164:	461a      	mov	r2, r3
 8002166:	4603      	mov	r3, r0
 8002168:	817b      	strh	r3, [r7, #10]
 800216a:	460b      	mov	r3, r1
 800216c:	813b      	strh	r3, [r7, #8]
 800216e:	4613      	mov	r3, r2
 8002170:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	8979      	ldrh	r1, [r7, #10]
 8002178:	4b20      	ldr	r3, [pc, #128]	; (80021fc <I2C_RequestMemoryWrite+0xa4>)
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 fa1b 	bl	80025bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	69b9      	ldr	r1, [r7, #24]
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 f8ab 	bl	80022e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e02c      	b.n	80021f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d105      	bne.n	80021ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021a0:	893b      	ldrh	r3, [r7, #8]
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	629a      	str	r2, [r3, #40]	; 0x28
 80021aa:	e015      	b.n	80021d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021ac:	893b      	ldrh	r3, [r7, #8]
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	69b9      	ldr	r1, [r7, #24]
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 f891 	bl	80022e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e012      	b.n	80021f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021ce:	893b      	ldrh	r3, [r7, #8]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2200      	movs	r2, #0
 80021e0:	2180      	movs	r1, #128	; 0x80
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f830 	bl	8002248 <I2C_WaitOnFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	80002000 	.word	0x80002000

08002200 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b02      	cmp	r3, #2
 8002214:	d103      	bne.n	800221e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2200      	movs	r2, #0
 800221c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d007      	beq.n	800223c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	619a      	str	r2, [r3, #24]
  }
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002258:	e031      	b.n	80022be <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d02d      	beq.n	80022be <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002262:	f7ff fa65 	bl	8001730 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d302      	bcc.n	8002278 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d122      	bne.n	80022be <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	4013      	ands	r3, r2
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	429a      	cmp	r2, r3
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	429a      	cmp	r2, r3
 8002294:	d113      	bne.n	80022be <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f043 0220 	orr.w	r2, r3, #32
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2220      	movs	r2, #32
 80022a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00f      	b.n	80022de <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	699a      	ldr	r2, [r3, #24]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4013      	ands	r3, r2
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	bf0c      	ite	eq
 80022ce:	2301      	moveq	r3, #1
 80022d0:	2300      	movne	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d0be      	beq.n	800225a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022f2:	e033      	b.n	800235c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68b9      	ldr	r1, [r7, #8]
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 f87f 	bl	80023fc <I2C_IsErrorOccurred>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e031      	b.n	800236c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230e:	d025      	beq.n	800235c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002310:	f7ff fa0e 	bl	8001730 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	429a      	cmp	r2, r3
 800231e:	d302      	bcc.n	8002326 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d11a      	bne.n	800235c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b02      	cmp	r3, #2
 8002332:	d013      	beq.n	800235c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	f043 0220 	orr.w	r2, r3, #32
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e007      	b.n	800236c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b02      	cmp	r3, #2
 8002368:	d1c4      	bne.n	80022f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002380:	e02f      	b.n	80023e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f838 	bl	80023fc <I2C_IsErrorOccurred>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e02d      	b.n	80023f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002396:	f7ff f9cb 	bl	8001730 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d302      	bcc.n	80023ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d11a      	bne.n	80023e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d013      	beq.n	80023e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	f043 0220 	orr.w	r2, r3, #32
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e007      	b.n	80023f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d1c8      	bne.n	8002382 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	; 0x28
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	2b00      	cmp	r3, #0
 8002426:	d068      	beq.n	80024fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2210      	movs	r2, #16
 800242e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002430:	e049      	b.n	80024c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002438:	d045      	beq.n	80024c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800243a:	f7ff f979 	bl	8001730 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	429a      	cmp	r2, r3
 8002448:	d302      	bcc.n	8002450 <I2C_IsErrorOccurred+0x54>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d13a      	bne.n	80024c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002462:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800246e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002472:	d121      	bne.n	80024b8 <I2C_IsErrorOccurred+0xbc>
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800247a:	d01d      	beq.n	80024b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	2b20      	cmp	r3, #32
 8002480:	d01a      	beq.n	80024b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002490:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002492:	f7ff f94d 	bl	8001730 <HAL_GetTick>
 8002496:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002498:	e00e      	b.n	80024b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800249a:	f7ff f949 	bl	8001730 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b19      	cmp	r3, #25
 80024a6:	d907      	bls.n	80024b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	f043 0320 	orr.w	r3, r3, #32
 80024ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80024b6:	e006      	b.n	80024c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 0320 	and.w	r3, r3, #32
 80024c2:	2b20      	cmp	r3, #32
 80024c4:	d1e9      	bne.n	800249a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d003      	beq.n	80024dc <I2C_IsErrorOccurred+0xe0>
 80024d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0aa      	beq.n	8002432 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80024dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d103      	bne.n	80024ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2220      	movs	r2, #32
 80024ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	f043 0304 	orr.w	r3, r3, #4
 80024f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00b      	beq.n	8002524 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f44f 7280 	mov.w	r2, #256	; 0x100
 800251c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	f043 0308 	orr.w	r3, r3, #8
 8002534:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00b      	beq.n	8002568 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	f043 0302 	orr.w	r3, r3, #2
 8002556:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002560:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800256c:	2b00      	cmp	r3, #0
 800256e:	d01c      	beq.n	80025aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f7ff fe45 	bl	8002200 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <I2C_IsErrorOccurred+0x1bc>)
 8002582:	400b      	ands	r3, r1
 8002584:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	431a      	orrs	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2220      	movs	r2, #32
 8002596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80025aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3728      	adds	r7, #40	; 0x28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	fe00e800 	.word	0xfe00e800

080025bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	460b      	mov	r3, r1
 80025c8:	817b      	strh	r3, [r7, #10]
 80025ca:	4613      	mov	r3, r2
 80025cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025ce:	897b      	ldrh	r3, [r7, #10]
 80025d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025d4:	7a7b      	ldrb	r3, [r7, #9]
 80025d6:	041b      	lsls	r3, r3, #16
 80025d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	0d5b      	lsrs	r3, r3, #21
 80025f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80025fa:	4b08      	ldr	r3, [pc, #32]	; (800261c <I2C_TransferConfig+0x60>)
 80025fc:	430b      	orrs	r3, r1
 80025fe:	43db      	mvns	r3, r3
 8002600:	ea02 0103 	and.w	r1, r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	430a      	orrs	r2, r1
 800260c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800260e:	bf00      	nop
 8002610:	371c      	adds	r7, #28
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	03ff63ff 	.word	0x03ff63ff

08002620 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b20      	cmp	r3, #32
 8002634:	d138      	bne.n	80026a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002640:	2302      	movs	r3, #2
 8002642:	e032      	b.n	80026aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2224      	movs	r2, #36	; 0x24
 8002650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002672:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6819      	ldr	r1, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e000      	b.n	80026aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026a8:	2302      	movs	r3, #2
  }
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b085      	sub	sp, #20
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d139      	bne.n	8002740 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e033      	b.n	8002742 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2224      	movs	r2, #36	; 0x24
 80026e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0201 	bic.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002708:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	e000      	b.n	8002742 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002740:	2302      	movs	r3, #2
  }
}
 8002742:	4618      	mov	r0, r3
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a04      	ldr	r2, [pc, #16]	; (800276c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800275a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275e:	6013      	str	r3, [r2, #0]
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40007000 	.word	0x40007000

08002770 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <HAL_PWREx_GetVoltageRange+0x18>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40007000 	.word	0x40007000

0800278c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800279a:	d130      	bne.n	80027fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800279c:	4b23      	ldr	r3, [pc, #140]	; (800282c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027a8:	d038      	beq.n	800281c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027aa:	4b20      	ldr	r3, [pc, #128]	; (800282c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027b2:	4a1e      	ldr	r2, [pc, #120]	; (800282c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027ba:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2232      	movs	r2, #50	; 0x32
 80027c0:	fb02 f303 	mul.w	r3, r2, r3
 80027c4:	4a1b      	ldr	r2, [pc, #108]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	0c9b      	lsrs	r3, r3, #18
 80027cc:	3301      	adds	r3, #1
 80027ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027d0:	e002      	b.n	80027d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027d8:	4b14      	ldr	r3, [pc, #80]	; (800282c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e4:	d102      	bne.n	80027ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f2      	bne.n	80027d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027ec:	4b0f      	ldr	r3, [pc, #60]	; (800282c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f8:	d110      	bne.n	800281c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e00f      	b.n	800281e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280a:	d007      	beq.n	800281c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800280c:	4b07      	ldr	r3, [pc, #28]	; (800282c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002814:	4a05      	ldr	r2, [pc, #20]	; (800282c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800281a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40007000 	.word	0x40007000
 8002830:	20000000 	.word	0x20000000
 8002834:	431bde83 	.word	0x431bde83

08002838 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	f000 bc4f 	b.w	80030ea <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800284c:	4b97      	ldr	r3, [pc, #604]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002856:	4b95      	ldr	r3, [pc, #596]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80e6 	beq.w	8002a3a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d007      	beq.n	8002884 <HAL_RCC_OscConfig+0x4c>
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	2b0c      	cmp	r3, #12
 8002878:	f040 808d 	bne.w	8002996 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b01      	cmp	r3, #1
 8002880:	f040 8089 	bne.w	8002996 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002884:	4b89      	ldr	r3, [pc, #548]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d006      	beq.n	800289e <HAL_RCC_OscConfig+0x66>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	f000 bc26 	b.w	80030ea <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a2:	4b82      	ldr	r3, [pc, #520]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d004      	beq.n	80028b8 <HAL_RCC_OscConfig+0x80>
 80028ae:	4b7f      	ldr	r3, [pc, #508]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b6:	e005      	b.n	80028c4 <HAL_RCC_OscConfig+0x8c>
 80028b8:	4b7c      	ldr	r3, [pc, #496]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80028ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d224      	bcs.n	8002912 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fdd9 	bl	8003484 <RCC_SetFlashLatencyFromMSIRange>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	f000 bc06 	b.w	80030ea <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028de:	4b73      	ldr	r3, [pc, #460]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a72      	ldr	r2, [pc, #456]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80028e4:	f043 0308 	orr.w	r3, r3, #8
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	4b70      	ldr	r3, [pc, #448]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	496d      	ldr	r1, [pc, #436]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028fc:	4b6b      	ldr	r3, [pc, #428]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	4968      	ldr	r1, [pc, #416]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
 8002910:	e025      	b.n	800295e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002912:	4b66      	ldr	r3, [pc, #408]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a65      	ldr	r2, [pc, #404]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002918:	f043 0308 	orr.w	r3, r3, #8
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b63      	ldr	r3, [pc, #396]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	4960      	ldr	r1, [pc, #384]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 800292c:	4313      	orrs	r3, r2
 800292e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002930:	4b5e      	ldr	r3, [pc, #376]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	495b      	ldr	r1, [pc, #364]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fd98 	bl	8003484 <RCC_SetFlashLatencyFromMSIRange>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e3c5      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800295e:	f000 fccd 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 8002962:	4602      	mov	r2, r0
 8002964:	4b51      	ldr	r3, [pc, #324]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	4950      	ldr	r1, [pc, #320]	; (8002ab0 <HAL_RCC_OscConfig+0x278>)
 8002970:	5ccb      	ldrb	r3, [r1, r3]
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	fa22 f303 	lsr.w	r3, r2, r3
 800297a:	4a4e      	ldr	r2, [pc, #312]	; (8002ab4 <HAL_RCC_OscConfig+0x27c>)
 800297c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800297e:	4b4e      	ldr	r3, [pc, #312]	; (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fe84 	bl	8001690 <HAL_InitTick>
 8002988:	4603      	mov	r3, r0
 800298a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800298c:	7dfb      	ldrb	r3, [r7, #23]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d052      	beq.n	8002a38 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002992:	7dfb      	ldrb	r3, [r7, #23]
 8002994:	e3a9      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d032      	beq.n	8002a04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800299e:	4b43      	ldr	r3, [pc, #268]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a42      	ldr	r2, [pc, #264]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029aa:	f7fe fec1 	bl	8001730 <HAL_GetTick>
 80029ae:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029b2:	f7fe febd 	bl	8001730 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e392      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029c4:	4b39      	ldr	r3, [pc, #228]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029d0:	4b36      	ldr	r3, [pc, #216]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a35      	ldr	r2, [pc, #212]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80029d6:	f043 0308 	orr.w	r3, r3, #8
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	4b33      	ldr	r3, [pc, #204]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	4930      	ldr	r1, [pc, #192]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029ee:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	492b      	ldr	r1, [pc, #172]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	604b      	str	r3, [r1, #4]
 8002a02:	e01a      	b.n	8002a3a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a04:	4b29      	ldr	r3, [pc, #164]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a28      	ldr	r2, [pc, #160]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a0a:	f023 0301 	bic.w	r3, r3, #1
 8002a0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a10:	f7fe fe8e 	bl	8001730 <HAL_GetTick>
 8002a14:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a18:	f7fe fe8a 	bl	8001730 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e35f      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a2a:	4b20      	ldr	r3, [pc, #128]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x1e0>
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d073      	beq.n	8002b2e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_OscConfig+0x220>
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	2b0c      	cmp	r3, #12
 8002a50:	d10e      	bne.n	8002a70 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d10b      	bne.n	8002a70 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d063      	beq.n	8002b2c <HAL_RCC_OscConfig+0x2f4>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d15f      	bne.n	8002b2c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e33c      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a78:	d106      	bne.n	8002a88 <HAL_RCC_OscConfig+0x250>
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e025      	b.n	8002ad4 <HAL_RCC_OscConfig+0x29c>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a90:	d114      	bne.n	8002abc <HAL_RCC_OscConfig+0x284>
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a05      	ldr	r2, [pc, #20]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a02      	ldr	r2, [pc, #8]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e013      	b.n	8002ad4 <HAL_RCC_OscConfig+0x29c>
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	080077f8 	.word	0x080077f8
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	20000004 	.word	0x20000004
 8002abc:	4b8f      	ldr	r3, [pc, #572]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a8e      	ldr	r2, [pc, #568]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	4b8c      	ldr	r3, [pc, #560]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a8b      	ldr	r2, [pc, #556]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d013      	beq.n	8002b04 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe fe28 	bl	8001730 <HAL_GetTick>
 8002ae0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7fe fe24 	bl	8001730 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	; 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e2f9      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af6:	4b81      	ldr	r3, [pc, #516]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x2ac>
 8002b02:	e014      	b.n	8002b2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fe14 	bl	8001730 <HAL_GetTick>
 8002b08:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7fe fe10 	bl	8001730 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e2e5      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b1e:	4b77      	ldr	r3, [pc, #476]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x2d4>
 8002b2a:	e000      	b.n	8002b2e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d060      	beq.n	8002bfc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_OscConfig+0x314>
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	2b0c      	cmp	r3, #12
 8002b44:	d119      	bne.n	8002b7a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d116      	bne.n	8002b7a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b4c:	4b6b      	ldr	r3, [pc, #428]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_OscConfig+0x32c>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e2c2      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	4b65      	ldr	r3, [pc, #404]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	4962      	ldr	r1, [pc, #392]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b78:	e040      	b.n	8002bfc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d023      	beq.n	8002bca <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b82:	4b5e      	ldr	r3, [pc, #376]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a5d      	ldr	r2, [pc, #372]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8e:	f7fe fdcf 	bl	8001730 <HAL_GetTick>
 8002b92:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b96:	f7fe fdcb 	bl	8001730 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e2a0      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ba8:	4b54      	ldr	r3, [pc, #336]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb4:	4b51      	ldr	r3, [pc, #324]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	494e      	ldr	r1, [pc, #312]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
 8002bc8:	e018      	b.n	8002bfc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bca:	4b4c      	ldr	r3, [pc, #304]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a4b      	ldr	r2, [pc, #300]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7fe fdab 	bl	8001730 <HAL_GetTick>
 8002bda:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bde:	f7fe fda7 	bl	8001730 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e27c      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf0:	4b42      	ldr	r3, [pc, #264]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f0      	bne.n	8002bde <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8082 	beq.w	8002d0e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d05f      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002c12:	4b3a      	ldr	r3, [pc, #232]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c18:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d037      	beq.n	8002c98 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d006      	beq.n	8002c40 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e254      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01b      	beq.n	8002c82 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002c4a:	4b2c      	ldr	r3, [pc, #176]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c50:	4a2a      	ldr	r2, [pc, #168]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c5a:	f7fe fd69 	bl	8001730 <HAL_GetTick>
 8002c5e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c62:	f7fe fd65 	bl	8001730 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b11      	cmp	r3, #17
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e23a      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c74:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1ef      	bne.n	8002c62 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002c82:	4b1e      	ldr	r3, [pc, #120]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c88:	f023 0210 	bic.w	r2, r3, #16
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	491a      	ldr	r1, [pc, #104]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c98:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9e:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7fe fd42 	bl	8001730 <HAL_GetTick>
 8002cac:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb0:	f7fe fd3e 	bl	8001730 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b11      	cmp	r3, #17
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e213      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ef      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x478>
 8002cd0:	e01d      	b.n	8002d0e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd8:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce2:	f7fe fd25 	bl	8001730 <HAL_GetTick>
 8002ce6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cea:	f7fe fd21 	bl	8001730 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b11      	cmp	r3, #17
 8002cf6:	d903      	bls.n	8002d00 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e1f6      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
 8002cfc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d00:	4ba9      	ldr	r3, [pc, #676]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1ed      	bne.n	8002cea <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80bd 	beq.w	8002e96 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d22:	4ba1      	ldr	r3, [pc, #644]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10e      	bne.n	8002d4c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2e:	4b9e      	ldr	r3, [pc, #632]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d32:	4a9d      	ldr	r2, [pc, #628]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d38:	6593      	str	r3, [r2, #88]	; 0x58
 8002d3a:	4b9b      	ldr	r3, [pc, #620]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d46:	2301      	movs	r3, #1
 8002d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4c:	4b97      	ldr	r3, [pc, #604]	; (8002fac <HAL_RCC_OscConfig+0x774>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d118      	bne.n	8002d8a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d58:	4b94      	ldr	r3, [pc, #592]	; (8002fac <HAL_RCC_OscConfig+0x774>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a93      	ldr	r2, [pc, #588]	; (8002fac <HAL_RCC_OscConfig+0x774>)
 8002d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d64:	f7fe fce4 	bl	8001730 <HAL_GetTick>
 8002d68:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6c:	f7fe fce0 	bl	8001730 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e1b5      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7e:	4b8b      	ldr	r3, [pc, #556]	; (8002fac <HAL_RCC_OscConfig+0x774>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d02c      	beq.n	8002df0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002d96:	4b84      	ldr	r3, [pc, #528]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da8:	497f      	ldr	r1, [pc, #508]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d010      	beq.n	8002dde <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002dbc:	4b7a      	ldr	r3, [pc, #488]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	4a79      	ldr	r2, [pc, #484]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002dc4:	f043 0304 	orr.w	r3, r3, #4
 8002dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dcc:	4b76      	ldr	r3, [pc, #472]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd2:	4a75      	ldr	r2, [pc, #468]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ddc:	e018      	b.n	8002e10 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dde:	4b72      	ldr	r3, [pc, #456]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de4:	4a70      	ldr	r2, [pc, #448]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dee:	e00f      	b.n	8002e10 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002df0:	4b6d      	ldr	r3, [pc, #436]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	4a6c      	ldr	r2, [pc, #432]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002df8:	f023 0301 	bic.w	r3, r3, #1
 8002dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e00:	4b69      	ldr	r3, [pc, #420]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	4a68      	ldr	r2, [pc, #416]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002e08:	f023 0304 	bic.w	r3, r3, #4
 8002e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d016      	beq.n	8002e46 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e18:	f7fe fc8a 	bl	8001730 <HAL_GetTick>
 8002e1c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e20:	f7fe fc86 	bl	8001730 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e159      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e36:	4b5c      	ldr	r3, [pc, #368]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0ed      	beq.n	8002e20 <HAL_RCC_OscConfig+0x5e8>
 8002e44:	e01d      	b.n	8002e82 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e46:	f7fe fc73 	bl	8001730 <HAL_GetTick>
 8002e4a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fe fc6f 	bl	8001730 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e142      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e64:	4b50      	ldr	r3, [pc, #320]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1ed      	bne.n	8002e4e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002e72:	4b4d      	ldr	r3, [pc, #308]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e78:	4a4b      	ldr	r2, [pc, #300]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d105      	bne.n	8002e96 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8a:	4b47      	ldr	r3, [pc, #284]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	4a46      	ldr	r2, [pc, #280]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d03c      	beq.n	8002f1c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d01c      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002eaa:	4b3f      	ldr	r3, [pc, #252]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002eac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eb0:	4a3d      	ldr	r2, [pc, #244]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eba:	f7fe fc39 	bl	8001730 <HAL_GetTick>
 8002ebe:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ec2:	f7fe fc35 	bl	8001730 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e10a      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ed4:	4b34      	ldr	r3, [pc, #208]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0ef      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x68a>
 8002ee2:	e01b      	b.n	8002f1c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ee4:	4b30      	ldr	r3, [pc, #192]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eea:	4a2f      	ldr	r2, [pc, #188]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fe fc1c 	bl	8001730 <HAL_GetTick>
 8002ef8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002efc:	f7fe fc18 	bl	8001730 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e0ed      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f0e:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1ef      	bne.n	8002efc <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80e1 	beq.w	80030e8 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	f040 80b5 	bne.w	800309a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f003 0203 	and.w	r2, r3, #3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d124      	bne.n	8002f8e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d11b      	bne.n	8002f8e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d113      	bne.n	8002f8e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f70:	085b      	lsrs	r3, r3, #1
 8002f72:	3b01      	subs	r3, #1
 8002f74:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d109      	bne.n	8002f8e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	085b      	lsrs	r3, r3, #1
 8002f86:	3b01      	subs	r3, #1
 8002f88:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d05f      	beq.n	800304e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	2b0c      	cmp	r3, #12
 8002f92:	d05a      	beq.n	800304a <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a03      	ldr	r2, [pc, #12]	; (8002fa8 <HAL_RCC_OscConfig+0x770>)
 8002f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f9e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fa0:	f7fe fbc6 	bl	8001730 <HAL_GetTick>
 8002fa4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa6:	e00c      	b.n	8002fc2 <HAL_RCC_OscConfig+0x78a>
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7fe fbbe 	bl	8001730 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e093      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc2:	4b4c      	ldr	r3, [pc, #304]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fce:	4b49      	ldr	r3, [pc, #292]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	4b49      	ldr	r3, [pc, #292]	; (80030f8 <HAL_RCC_OscConfig+0x8c0>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fde:	3a01      	subs	r2, #1
 8002fe0:	0112      	lsls	r2, r2, #4
 8002fe2:	4311      	orrs	r1, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fe8:	0212      	lsls	r2, r2, #8
 8002fea:	4311      	orrs	r1, r2
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ff0:	0852      	lsrs	r2, r2, #1
 8002ff2:	3a01      	subs	r2, #1
 8002ff4:	0552      	lsls	r2, r2, #21
 8002ff6:	4311      	orrs	r1, r2
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ffc:	0852      	lsrs	r2, r2, #1
 8002ffe:	3a01      	subs	r2, #1
 8003000:	0652      	lsls	r2, r2, #25
 8003002:	430a      	orrs	r2, r1
 8003004:	493b      	ldr	r1, [pc, #236]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 8003006:	4313      	orrs	r3, r2
 8003008:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800300a:	4b3a      	ldr	r3, [pc, #232]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a39      	ldr	r2, [pc, #228]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 8003010:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003014:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003016:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	4a36      	ldr	r2, [pc, #216]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 800301c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003020:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003022:	f7fe fb85 	bl	8001730 <HAL_GetTick>
 8003026:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302a:	f7fe fb81 	bl	8001730 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e056      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303c:	4b2d      	ldr	r3, [pc, #180]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003048:	e04e      	b.n	80030e8 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e04d      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304e:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d146      	bne.n	80030e8 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800305a:	4b26      	ldr	r3, [pc, #152]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a25      	ldr	r2, [pc, #148]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 8003060:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003064:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003066:	4b23      	ldr	r3, [pc, #140]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	4a22      	ldr	r2, [pc, #136]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 800306c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003070:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003072:	f7fe fb5d 	bl	8001730 <HAL_GetTick>
 8003076:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307a:	f7fe fb59 	bl	8001730 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e02e      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800308c:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f0      	beq.n	800307a <HAL_RCC_OscConfig+0x842>
 8003098:	e026      	b.n	80030e8 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	2b0c      	cmp	r3, #12
 800309e:	d021      	beq.n	80030e4 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a0:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 80030a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe fb40 	bl	8001730 <HAL_GetTick>
 80030b0:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe fb3c 	bl	8001730 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e011      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80030d2:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	4a07      	ldr	r2, [pc, #28]	; (80030f4 <HAL_RCC_OscConfig+0x8bc>)
 80030d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030dc:	f023 0303 	bic.w	r3, r3, #3
 80030e0:	60d3      	str	r3, [r2, #12]
 80030e2:	e001      	b.n	80030e8 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3728      	adds	r7, #40	; 0x28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	f99f808c 	.word	0xf99f808c

080030fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0e7      	b.n	80032e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003110:	4b75      	ldr	r3, [pc, #468]	; (80032e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d910      	bls.n	8003140 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311e:	4b72      	ldr	r3, [pc, #456]	; (80032e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 0207 	bic.w	r2, r3, #7
 8003126:	4970      	ldr	r1, [pc, #448]	; (80032e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b6e      	ldr	r3, [pc, #440]	; (80032e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0cf      	b.n	80032e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d010      	beq.n	800316e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	4b66      	ldr	r3, [pc, #408]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003158:	429a      	cmp	r2, r3
 800315a:	d908      	bls.n	800316e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800315c:	4b63      	ldr	r3, [pc, #396]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4960      	ldr	r1, [pc, #384]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d04c      	beq.n	8003214 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b03      	cmp	r3, #3
 8003180:	d107      	bne.n	8003192 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003182:	4b5a      	ldr	r3, [pc, #360]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d121      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e0a6      	b.n	80032e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d107      	bne.n	80031aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800319a:	4b54      	ldr	r3, [pc, #336]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d115      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e09a      	b.n	80032e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031b2:	4b4e      	ldr	r3, [pc, #312]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e08e      	b.n	80032e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031c2:	4b4a      	ldr	r3, [pc, #296]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e086      	b.n	80032e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031d2:	4b46      	ldr	r3, [pc, #280]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f023 0203 	bic.w	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4943      	ldr	r1, [pc, #268]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e4:	f7fe faa4 	bl	8001730 <HAL_GetTick>
 80031e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ec:	f7fe faa0 	bl	8001730 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e06e      	b.n	80032e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003202:	4b3a      	ldr	r3, [pc, #232]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 020c 	and.w	r2, r3, #12
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	429a      	cmp	r2, r3
 8003212:	d1eb      	bne.n	80031ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d010      	beq.n	8003242 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	4b31      	ldr	r3, [pc, #196]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800322c:	429a      	cmp	r2, r3
 800322e:	d208      	bcs.n	8003242 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003230:	4b2e      	ldr	r3, [pc, #184]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	492b      	ldr	r1, [pc, #172]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003242:	4b29      	ldr	r3, [pc, #164]	; (80032e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d210      	bcs.n	8003272 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003250:	4b25      	ldr	r3, [pc, #148]	; (80032e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 0207 	bic.w	r2, r3, #7
 8003258:	4923      	ldr	r1, [pc, #140]	; (80032e8 <HAL_RCC_ClockConfig+0x1ec>)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	4313      	orrs	r3, r2
 800325e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003260:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <HAL_RCC_ClockConfig+0x1ec>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d001      	beq.n	8003272 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e036      	b.n	80032e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800327e:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	4918      	ldr	r1, [pc, #96]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 800328c:	4313      	orrs	r3, r2
 800328e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4910      	ldr	r1, [pc, #64]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032b0:	f000 f824 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <HAL_RCC_ClockConfig+0x1f0>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	490b      	ldr	r1, [pc, #44]	; (80032f0 <HAL_RCC_ClockConfig+0x1f4>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
 80032cc:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <HAL_RCC_ClockConfig+0x1f8>)
 80032ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <HAL_RCC_ClockConfig+0x1fc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fe f9db 	bl	8001690 <HAL_InitTick>
 80032da:	4603      	mov	r3, r0
 80032dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80032de:	7afb      	ldrb	r3, [r7, #11]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40022000 	.word	0x40022000
 80032ec:	40021000 	.word	0x40021000
 80032f0:	080077f8 	.word	0x080077f8
 80032f4:	20000000 	.word	0x20000000
 80032f8:	20000004 	.word	0x20000004

080032fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b089      	sub	sp, #36	; 0x24
 8003300:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	2300      	movs	r3, #0
 8003308:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800330a:	4b3e      	ldr	r3, [pc, #248]	; (8003404 <HAL_RCC_GetSysClockFreq+0x108>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 030c 	and.w	r3, r3, #12
 8003312:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003314:	4b3b      	ldr	r3, [pc, #236]	; (8003404 <HAL_RCC_GetSysClockFreq+0x108>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x34>
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b0c      	cmp	r3, #12
 8003328:	d121      	bne.n	800336e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d11e      	bne.n	800336e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003330:	4b34      	ldr	r3, [pc, #208]	; (8003404 <HAL_RCC_GetSysClockFreq+0x108>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d107      	bne.n	800334c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800333c:	4b31      	ldr	r3, [pc, #196]	; (8003404 <HAL_RCC_GetSysClockFreq+0x108>)
 800333e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003342:	0a1b      	lsrs	r3, r3, #8
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	e005      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800334c:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <HAL_RCC_GetSysClockFreq+0x108>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003358:	4a2b      	ldr	r2, [pc, #172]	; (8003408 <HAL_RCC_GetSysClockFreq+0x10c>)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003360:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10d      	bne.n	8003384 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800336c:	e00a      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2b04      	cmp	r3, #4
 8003372:	d102      	bne.n	800337a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003374:	4b25      	ldr	r3, [pc, #148]	; (800340c <HAL_RCC_GetSysClockFreq+0x110>)
 8003376:	61bb      	str	r3, [r7, #24]
 8003378:	e004      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d101      	bne.n	8003384 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003380:	4b23      	ldr	r3, [pc, #140]	; (8003410 <HAL_RCC_GetSysClockFreq+0x114>)
 8003382:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b0c      	cmp	r3, #12
 8003388:	d134      	bne.n	80033f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800338a:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <HAL_RCC_GetSysClockFreq+0x108>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d003      	beq.n	80033a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b03      	cmp	r3, #3
 800339e:	d003      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0xac>
 80033a0:	e005      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033a2:	4b1a      	ldr	r3, [pc, #104]	; (800340c <HAL_RCC_GetSysClockFreq+0x110>)
 80033a4:	617b      	str	r3, [r7, #20]
      break;
 80033a6:	e005      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033a8:	4b19      	ldr	r3, [pc, #100]	; (8003410 <HAL_RCC_GetSysClockFreq+0x114>)
 80033aa:	617b      	str	r3, [r7, #20]
      break;
 80033ac:	e002      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	617b      	str	r3, [r7, #20]
      break;
 80033b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033b4:	4b13      	ldr	r3, [pc, #76]	; (8003404 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	3301      	adds	r3, #1
 80033c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033c2:	4b10      	ldr	r3, [pc, #64]	; (8003404 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	fb03 f202 	mul.w	r2, r3, r2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033da:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <HAL_RCC_GetSysClockFreq+0x108>)
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	0e5b      	lsrs	r3, r3, #25
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	3301      	adds	r3, #1
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033f4:	69bb      	ldr	r3, [r7, #24]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	08007810 	.word	0x08007810
 800340c:	00f42400 	.word	0x00f42400
 8003410:	007a1200 	.word	0x007a1200

08003414 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003418:	4b03      	ldr	r3, [pc, #12]	; (8003428 <HAL_RCC_GetHCLKFreq+0x14>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000000 	.word	0x20000000

0800342c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003430:	f7ff fff0 	bl	8003414 <HAL_RCC_GetHCLKFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	4b06      	ldr	r3, [pc, #24]	; (8003450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	0a1b      	lsrs	r3, r3, #8
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	4904      	ldr	r1, [pc, #16]	; (8003454 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003442:	5ccb      	ldrb	r3, [r1, r3]
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800344c:	4618      	mov	r0, r3
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000
 8003454:	08007808 	.word	0x08007808

08003458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800345c:	f7ff ffda 	bl	8003414 <HAL_RCC_GetHCLKFreq>
 8003460:	4602      	mov	r2, r0
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	0adb      	lsrs	r3, r3, #11
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	4904      	ldr	r1, [pc, #16]	; (8003480 <HAL_RCC_GetPCLK2Freq+0x28>)
 800346e:	5ccb      	ldrb	r3, [r1, r3]
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40021000 	.word	0x40021000
 8003480:	08007808 	.word	0x08007808

08003484 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800348c:	2300      	movs	r3, #0
 800348e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003490:	4b2a      	ldr	r3, [pc, #168]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800349c:	f7ff f968 	bl	8002770 <HAL_PWREx_GetVoltageRange>
 80034a0:	6178      	str	r0, [r7, #20]
 80034a2:	e014      	b.n	80034ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034a4:	4b25      	ldr	r3, [pc, #148]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	4a24      	ldr	r2, [pc, #144]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ae:	6593      	str	r3, [r2, #88]	; 0x58
 80034b0:	4b22      	ldr	r3, [pc, #136]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034bc:	f7ff f958 	bl	8002770 <HAL_PWREx_GetVoltageRange>
 80034c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c6:	4a1d      	ldr	r2, [pc, #116]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d4:	d10b      	bne.n	80034ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b80      	cmp	r3, #128	; 0x80
 80034da:	d919      	bls.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2ba0      	cmp	r3, #160	; 0xa0
 80034e0:	d902      	bls.n	80034e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034e2:	2302      	movs	r3, #2
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	e013      	b.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034e8:	2301      	movs	r3, #1
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	e010      	b.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b80      	cmp	r3, #128	; 0x80
 80034f2:	d902      	bls.n	80034fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034f4:	2303      	movs	r3, #3
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	e00a      	b.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b80      	cmp	r3, #128	; 0x80
 80034fe:	d102      	bne.n	8003506 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003500:	2302      	movs	r3, #2
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	e004      	b.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b70      	cmp	r3, #112	; 0x70
 800350a:	d101      	bne.n	8003510 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800350c:	2301      	movs	r3, #1
 800350e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 0207 	bic.w	r2, r3, #7
 8003518:	4909      	ldr	r1, [pc, #36]	; (8003540 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003520:	4b07      	ldr	r3, [pc, #28]	; (8003540 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	429a      	cmp	r2, r3
 800352c:	d001      	beq.n	8003532 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	40022000 	.word	0x40022000

08003544 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800354c:	2300      	movs	r3, #0
 800354e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003550:	2300      	movs	r3, #0
 8003552:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 809e 	beq.w	800369e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003562:	2300      	movs	r3, #0
 8003564:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003566:	4b46      	ldr	r3, [pc, #280]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003576:	2300      	movs	r3, #0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00d      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357c:	4b40      	ldr	r3, [pc, #256]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	4a3f      	ldr	r2, [pc, #252]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003586:	6593      	str	r3, [r2, #88]	; 0x58
 8003588:	4b3d      	ldr	r3, [pc, #244]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003594:	2301      	movs	r3, #1
 8003596:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003598:	4b3a      	ldr	r3, [pc, #232]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a39      	ldr	r2, [pc, #228]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800359e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035a4:	f7fe f8c4 	bl	8001730 <HAL_GetTick>
 80035a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035aa:	e009      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ac:	f7fe f8c0 	bl	8001730 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d902      	bls.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	74fb      	strb	r3, [r7, #19]
        break;
 80035be:	e005      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035c0:	4b30      	ldr	r3, [pc, #192]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0ef      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80035cc:	7cfb      	ldrb	r3, [r7, #19]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d15a      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035d2:	4b2b      	ldr	r3, [pc, #172]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01e      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d019      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035ee:	4b24      	ldr	r3, [pc, #144]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035fa:	4b21      	ldr	r3, [pc, #132]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003600:	4a1f      	ldr	r2, [pc, #124]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800360a:	4b1d      	ldr	r3, [pc, #116]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003610:	4a1b      	ldr	r2, [pc, #108]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800361a:	4a19      	ldr	r2, [pc, #100]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d016      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fe f880 	bl	8001730 <HAL_GetTick>
 8003630:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003632:	e00b      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003634:	f7fe f87c 	bl	8001730 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d902      	bls.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	74fb      	strb	r3, [r7, #19]
            break;
 800364a:	e006      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0ec      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10b      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003660:	4b07      	ldr	r3, [pc, #28]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003666:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	4904      	ldr	r1, [pc, #16]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003676:	e009      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	74bb      	strb	r3, [r7, #18]
 800367c:	e006      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000
 8003684:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003688:	7cfb      	ldrb	r3, [r7, #19]
 800368a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800368c:	7c7b      	ldrb	r3, [r7, #17]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d105      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003692:	4b6e      	ldr	r3, [pc, #440]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003696:	4a6d      	ldr	r2, [pc, #436]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036aa:	4b68      	ldr	r3, [pc, #416]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b0:	f023 0203 	bic.w	r2, r3, #3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4964      	ldr	r1, [pc, #400]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036cc:	4b5f      	ldr	r3, [pc, #380]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d2:	f023 020c 	bic.w	r2, r3, #12
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	495c      	ldr	r1, [pc, #368]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036ee:	4b57      	ldr	r3, [pc, #348]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4953      	ldr	r1, [pc, #332]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003710:	4b4e      	ldr	r3, [pc, #312]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003716:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	494b      	ldr	r1, [pc, #300]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003732:	4b46      	ldr	r3, [pc, #280]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003738:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	4942      	ldr	r1, [pc, #264]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003754:	4b3d      	ldr	r3, [pc, #244]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	493a      	ldr	r1, [pc, #232]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003776:	4b35      	ldr	r3, [pc, #212]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	4931      	ldr	r1, [pc, #196]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003798:	4b2c      	ldr	r3, [pc, #176]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	4929      	ldr	r1, [pc, #164]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037ba:	4b24      	ldr	r3, [pc, #144]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	4920      	ldr	r1, [pc, #128]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d015      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	4918      	ldr	r1, [pc, #96]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037fa:	d105      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037fc:	4b13      	ldr	r3, [pc, #76]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4a12      	ldr	r2, [pc, #72]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003806:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d015      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003814:	4b0d      	ldr	r3, [pc, #52]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	490a      	ldr	r1, [pc, #40]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003832:	d105      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	4a04      	ldr	r2, [pc, #16]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800383a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800383e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003840:	7cbb      	ldrb	r3, [r7, #18]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000

08003850 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a04      	ldr	r2, [pc, #16]	; (800386c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800385a:	f043 0304 	orr.w	r3, r3, #4
 800385e:	6013      	str	r3, [r2, #0]
}
 8003860:	bf00      	nop
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000

08003870 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08a      	sub	sp, #40	; 0x28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003884:	2b20      	cmp	r3, #32
 8003886:	d137      	bne.n	80038f8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_UART_Receive_IT+0x24>
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e030      	b.n	80038fa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a18      	ldr	r2, [pc, #96]	; (8003904 <HAL_UART_Receive_IT+0x94>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d01f      	beq.n	80038e8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d018      	beq.n	80038e8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	e853 3f00 	ldrex	r3, [r3]
 80038c2:	613b      	str	r3, [r7, #16]
   return(result);
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	623b      	str	r3, [r7, #32]
 80038d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d8:	69f9      	ldr	r1, [r7, #28]
 80038da:	6a3a      	ldr	r2, [r7, #32]
 80038dc:	e841 2300 	strex	r3, r2, [r1]
 80038e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1e6      	bne.n	80038b6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	461a      	mov	r2, r3
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 ff20 	bl	8004734 <UART_Start_Receive_IT>
 80038f4:	4603      	mov	r3, r0
 80038f6:	e000      	b.n	80038fa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
  }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3728      	adds	r7, #40	; 0x28
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40008000 	.word	0x40008000

08003908 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b0ba      	sub	sp, #232	; 0xe8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800392e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003932:	f640 030f 	movw	r3, #2063	; 0x80f
 8003936:	4013      	ands	r3, r2
 8003938:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800393c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d115      	bne.n	8003970 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00f      	beq.n	8003970 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003954:	f003 0320 	and.w	r3, r3, #32
 8003958:	2b00      	cmp	r3, #0
 800395a:	d009      	beq.n	8003970 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 82ae 	beq.w	8003ec2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	4798      	blx	r3
      }
      return;
 800396e:	e2a8      	b.n	8003ec2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003970:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 8117 	beq.w	8003ba8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800397a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003986:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800398a:	4b85      	ldr	r3, [pc, #532]	; (8003ba0 <HAL_UART_IRQHandler+0x298>)
 800398c:	4013      	ands	r3, r2
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 810a 	beq.w	8003ba8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d011      	beq.n	80039c4 <HAL_UART_IRQHandler+0xbc>
 80039a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00b      	beq.n	80039c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2201      	movs	r2, #1
 80039b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ba:	f043 0201 	orr.w	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d011      	beq.n	80039f4 <HAL_UART_IRQHandler+0xec>
 80039d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00b      	beq.n	80039f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2202      	movs	r2, #2
 80039e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ea:	f043 0204 	orr.w	r2, r3, #4
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d011      	beq.n	8003a24 <HAL_UART_IRQHandler+0x11c>
 8003a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00b      	beq.n	8003a24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2204      	movs	r2, #4
 8003a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a1a:	f043 0202 	orr.w	r2, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d017      	beq.n	8003a60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d105      	bne.n	8003a48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00b      	beq.n	8003a60 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2208      	movs	r2, #8
 8003a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a56:	f043 0208 	orr.w	r2, r3, #8
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d012      	beq.n	8003a92 <HAL_UART_IRQHandler+0x18a>
 8003a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00c      	beq.n	8003a92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a88:	f043 0220 	orr.w	r2, r3, #32
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 8214 	beq.w	8003ec6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d007      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003acc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	d005      	beq.n	8003aea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ae2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d04f      	beq.n	8003b8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fee8 	bl	80048c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afa:	2b40      	cmp	r3, #64	; 0x40
 8003afc:	d141      	bne.n	8003b82 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3308      	adds	r3, #8
 8003b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b0c:	e853 3f00 	ldrex	r3, [r3]
 8003b10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3308      	adds	r3, #8
 8003b26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1d9      	bne.n	8003afe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d013      	beq.n	8003b7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b56:	4a13      	ldr	r2, [pc, #76]	; (8003ba4 <HAL_UART_IRQHandler+0x29c>)
 8003b58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd ff65 	bl	8001a2e <HAL_DMA_Abort_IT>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d017      	beq.n	8003b9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b74:	4610      	mov	r0, r2
 8003b76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b78:	e00f      	b.n	8003b9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f9b8 	bl	8003ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b80:	e00b      	b.n	8003b9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f9b4 	bl	8003ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b88:	e007      	b.n	8003b9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f9b0 	bl	8003ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003b98:	e195      	b.n	8003ec6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9a:	bf00      	nop
    return;
 8003b9c:	e193      	b.n	8003ec6 <HAL_UART_IRQHandler+0x5be>
 8003b9e:	bf00      	nop
 8003ba0:	04000120 	.word	0x04000120
 8003ba4:	08004989 	.word	0x08004989

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	f040 814e 	bne.w	8003e4e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 8147 	beq.w	8003e4e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8140 	beq.w	8003e4e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2210      	movs	r2, #16
 8003bd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	f040 80b8 	bne.w	8003d56 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bf2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 8167 	beq.w	8003eca <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c06:	429a      	cmp	r2, r3
 8003c08:	f080 815f 	bcs.w	8003eca <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f040 8086 	bne.w	8003d34 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c56:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1da      	bne.n	8003c28 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3308      	adds	r3, #8
 8003c78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3308      	adds	r3, #8
 8003c92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e1      	bne.n	8003c72 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3308      	adds	r3, #8
 8003cce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e3      	bne.n	8003cae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d04:	f023 0310 	bic.w	r3, r3, #16
 8003d08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d16:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d1e:	e841 2300 	strex	r3, r2, [r1]
 8003d22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1e4      	bne.n	8003cf4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd fe3f 	bl	80019b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f8d8 	bl	8003f04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d54:	e0b9      	b.n	8003eca <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 80ab 	beq.w	8003ece <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003d78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80a6 	beq.w	8003ece <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003da4:	647b      	str	r3, [r7, #68]	; 0x44
 8003da6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003daa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e4      	bne.n	8003d82 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	e853 3f00 	ldrex	r3, [r3]
 8003dc6:	623b      	str	r3, [r7, #32]
   return(result);
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	f023 0301 	bic.w	r3, r3, #1
 8003dce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3308      	adds	r3, #8
 8003dd8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ddc:	633a      	str	r2, [r7, #48]	; 0x30
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003de4:	e841 2300 	strex	r3, r2, [r1]
 8003de8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e3      	bne.n	8003db8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f023 0310 	bic.w	r3, r3, #16
 8003e18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e26:	61fb      	str	r3, [r7, #28]
 8003e28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	69b9      	ldr	r1, [r7, #24]
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	617b      	str	r3, [r7, #20]
   return(result);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e4      	bne.n	8003e04 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e44:	4619      	mov	r1, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f85c 	bl	8003f04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e4c:	e03f      	b.n	8003ece <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00e      	beq.n	8003e78 <HAL_UART_IRQHandler+0x570>
 8003e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d008      	beq.n	8003e78 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 ffec 	bl	8004e4e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e76:	e02d      	b.n	8003ed4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00e      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d008      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01c      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4798      	blx	r3
    }
    return;
 8003ea0:	e017      	b.n	8003ed2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d012      	beq.n	8003ed4 <HAL_UART_IRQHandler+0x5cc>
 8003eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00c      	beq.n	8003ed4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fd7a 	bl	80049b4 <UART_EndTransmit_IT>
    return;
 8003ec0:	e008      	b.n	8003ed4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003ec2:	bf00      	nop
 8003ec4:	e006      	b.n	8003ed4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003ec6:	bf00      	nop
 8003ec8:	e004      	b.n	8003ed4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003eca:	bf00      	nop
 8003ecc:	e002      	b.n	8003ed4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003ed2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003ed4:	37e8      	adds	r7, #232	; 0xe8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop

08003edc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f20:	b08a      	sub	sp, #40	; 0x28
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	431a      	orrs	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4b9e      	ldr	r3, [pc, #632]	; (80041c4 <UART_SetConfig+0x2a8>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	6812      	ldr	r2, [r2, #0]
 8003f52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a93      	ldr	r2, [pc, #588]	; (80041c8 <UART_SetConfig+0x2ac>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f84:	4313      	orrs	r3, r2
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a8a      	ldr	r2, [pc, #552]	; (80041cc <UART_SetConfig+0x2b0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d126      	bne.n	8003ff4 <UART_SetConfig+0xd8>
 8003fa6:	4b8a      	ldr	r3, [pc, #552]	; (80041d0 <UART_SetConfig+0x2b4>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d81b      	bhi.n	8003fec <UART_SetConfig+0xd0>
 8003fb4:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <UART_SetConfig+0xa0>)
 8003fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fba:	bf00      	nop
 8003fbc:	08003fcd 	.word	0x08003fcd
 8003fc0:	08003fdd 	.word	0x08003fdd
 8003fc4:	08003fd5 	.word	0x08003fd5
 8003fc8:	08003fe5 	.word	0x08003fe5
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd2:	e0ab      	b.n	800412c <UART_SetConfig+0x210>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fda:	e0a7      	b.n	800412c <UART_SetConfig+0x210>
 8003fdc:	2304      	movs	r3, #4
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe2:	e0a3      	b.n	800412c <UART_SetConfig+0x210>
 8003fe4:	2308      	movs	r3, #8
 8003fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fea:	e09f      	b.n	800412c <UART_SetConfig+0x210>
 8003fec:	2310      	movs	r3, #16
 8003fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff2:	e09b      	b.n	800412c <UART_SetConfig+0x210>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a76      	ldr	r2, [pc, #472]	; (80041d4 <UART_SetConfig+0x2b8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d138      	bne.n	8004070 <UART_SetConfig+0x154>
 8003ffe:	4b74      	ldr	r3, [pc, #464]	; (80041d0 <UART_SetConfig+0x2b4>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004004:	f003 030c 	and.w	r3, r3, #12
 8004008:	2b0c      	cmp	r3, #12
 800400a:	d82d      	bhi.n	8004068 <UART_SetConfig+0x14c>
 800400c:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <UART_SetConfig+0xf8>)
 800400e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004012:	bf00      	nop
 8004014:	08004049 	.word	0x08004049
 8004018:	08004069 	.word	0x08004069
 800401c:	08004069 	.word	0x08004069
 8004020:	08004069 	.word	0x08004069
 8004024:	08004059 	.word	0x08004059
 8004028:	08004069 	.word	0x08004069
 800402c:	08004069 	.word	0x08004069
 8004030:	08004069 	.word	0x08004069
 8004034:	08004051 	.word	0x08004051
 8004038:	08004069 	.word	0x08004069
 800403c:	08004069 	.word	0x08004069
 8004040:	08004069 	.word	0x08004069
 8004044:	08004061 	.word	0x08004061
 8004048:	2300      	movs	r3, #0
 800404a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800404e:	e06d      	b.n	800412c <UART_SetConfig+0x210>
 8004050:	2302      	movs	r3, #2
 8004052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004056:	e069      	b.n	800412c <UART_SetConfig+0x210>
 8004058:	2304      	movs	r3, #4
 800405a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800405e:	e065      	b.n	800412c <UART_SetConfig+0x210>
 8004060:	2308      	movs	r3, #8
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004066:	e061      	b.n	800412c <UART_SetConfig+0x210>
 8004068:	2310      	movs	r3, #16
 800406a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406e:	e05d      	b.n	800412c <UART_SetConfig+0x210>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a58      	ldr	r2, [pc, #352]	; (80041d8 <UART_SetConfig+0x2bc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d125      	bne.n	80040c6 <UART_SetConfig+0x1aa>
 800407a:	4b55      	ldr	r3, [pc, #340]	; (80041d0 <UART_SetConfig+0x2b4>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004080:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004084:	2b30      	cmp	r3, #48	; 0x30
 8004086:	d016      	beq.n	80040b6 <UART_SetConfig+0x19a>
 8004088:	2b30      	cmp	r3, #48	; 0x30
 800408a:	d818      	bhi.n	80040be <UART_SetConfig+0x1a2>
 800408c:	2b20      	cmp	r3, #32
 800408e:	d00a      	beq.n	80040a6 <UART_SetConfig+0x18a>
 8004090:	2b20      	cmp	r3, #32
 8004092:	d814      	bhi.n	80040be <UART_SetConfig+0x1a2>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <UART_SetConfig+0x182>
 8004098:	2b10      	cmp	r3, #16
 800409a:	d008      	beq.n	80040ae <UART_SetConfig+0x192>
 800409c:	e00f      	b.n	80040be <UART_SetConfig+0x1a2>
 800409e:	2300      	movs	r3, #0
 80040a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040a4:	e042      	b.n	800412c <UART_SetConfig+0x210>
 80040a6:	2302      	movs	r3, #2
 80040a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ac:	e03e      	b.n	800412c <UART_SetConfig+0x210>
 80040ae:	2304      	movs	r3, #4
 80040b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040b4:	e03a      	b.n	800412c <UART_SetConfig+0x210>
 80040b6:	2308      	movs	r3, #8
 80040b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040bc:	e036      	b.n	800412c <UART_SetConfig+0x210>
 80040be:	2310      	movs	r3, #16
 80040c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040c4:	e032      	b.n	800412c <UART_SetConfig+0x210>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a3f      	ldr	r2, [pc, #252]	; (80041c8 <UART_SetConfig+0x2ac>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d12a      	bne.n	8004126 <UART_SetConfig+0x20a>
 80040d0:	4b3f      	ldr	r3, [pc, #252]	; (80041d0 <UART_SetConfig+0x2b4>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040de:	d01a      	beq.n	8004116 <UART_SetConfig+0x1fa>
 80040e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040e4:	d81b      	bhi.n	800411e <UART_SetConfig+0x202>
 80040e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ea:	d00c      	beq.n	8004106 <UART_SetConfig+0x1ea>
 80040ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f0:	d815      	bhi.n	800411e <UART_SetConfig+0x202>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <UART_SetConfig+0x1e2>
 80040f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fa:	d008      	beq.n	800410e <UART_SetConfig+0x1f2>
 80040fc:	e00f      	b.n	800411e <UART_SetConfig+0x202>
 80040fe:	2300      	movs	r3, #0
 8004100:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004104:	e012      	b.n	800412c <UART_SetConfig+0x210>
 8004106:	2302      	movs	r3, #2
 8004108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800410c:	e00e      	b.n	800412c <UART_SetConfig+0x210>
 800410e:	2304      	movs	r3, #4
 8004110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004114:	e00a      	b.n	800412c <UART_SetConfig+0x210>
 8004116:	2308      	movs	r3, #8
 8004118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800411c:	e006      	b.n	800412c <UART_SetConfig+0x210>
 800411e:	2310      	movs	r3, #16
 8004120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004124:	e002      	b.n	800412c <UART_SetConfig+0x210>
 8004126:	2310      	movs	r3, #16
 8004128:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a25      	ldr	r2, [pc, #148]	; (80041c8 <UART_SetConfig+0x2ac>)
 8004132:	4293      	cmp	r3, r2
 8004134:	f040 808a 	bne.w	800424c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800413c:	2b08      	cmp	r3, #8
 800413e:	d824      	bhi.n	800418a <UART_SetConfig+0x26e>
 8004140:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <UART_SetConfig+0x22c>)
 8004142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004146:	bf00      	nop
 8004148:	0800416d 	.word	0x0800416d
 800414c:	0800418b 	.word	0x0800418b
 8004150:	08004175 	.word	0x08004175
 8004154:	0800418b 	.word	0x0800418b
 8004158:	0800417b 	.word	0x0800417b
 800415c:	0800418b 	.word	0x0800418b
 8004160:	0800418b 	.word	0x0800418b
 8004164:	0800418b 	.word	0x0800418b
 8004168:	08004183 	.word	0x08004183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800416c:	f7ff f95e 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 8004170:	61f8      	str	r0, [r7, #28]
        break;
 8004172:	e010      	b.n	8004196 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004174:	4b19      	ldr	r3, [pc, #100]	; (80041dc <UART_SetConfig+0x2c0>)
 8004176:	61fb      	str	r3, [r7, #28]
        break;
 8004178:	e00d      	b.n	8004196 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800417a:	f7ff f8bf 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 800417e:	61f8      	str	r0, [r7, #28]
        break;
 8004180:	e009      	b.n	8004196 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004186:	61fb      	str	r3, [r7, #28]
        break;
 8004188:	e005      	b.n	8004196 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004194:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8109 	beq.w	80043b0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	4413      	add	r3, r2
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d305      	bcc.n	80041ba <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d912      	bls.n	80041e0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041c0:	e0f6      	b.n	80043b0 <UART_SetConfig+0x494>
 80041c2:	bf00      	nop
 80041c4:	efff69f3 	.word	0xefff69f3
 80041c8:	40008000 	.word	0x40008000
 80041cc:	40013800 	.word	0x40013800
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40004400 	.word	0x40004400
 80041d8:	40004800 	.word	0x40004800
 80041dc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	2200      	movs	r2, #0
 80041e4:	461c      	mov	r4, r3
 80041e6:	4615      	mov	r5, r2
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	022b      	lsls	r3, r5, #8
 80041f2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80041f6:	0222      	lsls	r2, r4, #8
 80041f8:	68f9      	ldr	r1, [r7, #12]
 80041fa:	6849      	ldr	r1, [r1, #4]
 80041fc:	0849      	lsrs	r1, r1, #1
 80041fe:	2000      	movs	r0, #0
 8004200:	4688      	mov	r8, r1
 8004202:	4681      	mov	r9, r0
 8004204:	eb12 0a08 	adds.w	sl, r2, r8
 8004208:	eb43 0b09 	adc.w	fp, r3, r9
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	607a      	str	r2, [r7, #4]
 8004216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800421a:	4650      	mov	r0, sl
 800421c:	4659      	mov	r1, fp
 800421e:	f7fc fcc3 	bl	8000ba8 <__aeabi_uldivmod>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4613      	mov	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004230:	d308      	bcc.n	8004244 <UART_SetConfig+0x328>
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004238:	d204      	bcs.n	8004244 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	e0b5      	b.n	80043b0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800424a:	e0b1      	b.n	80043b0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004254:	d15d      	bne.n	8004312 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004256:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800425a:	2b08      	cmp	r3, #8
 800425c:	d827      	bhi.n	80042ae <UART_SetConfig+0x392>
 800425e:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <UART_SetConfig+0x348>)
 8004260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004264:	08004289 	.word	0x08004289
 8004268:	08004291 	.word	0x08004291
 800426c:	08004299 	.word	0x08004299
 8004270:	080042af 	.word	0x080042af
 8004274:	0800429f 	.word	0x0800429f
 8004278:	080042af 	.word	0x080042af
 800427c:	080042af 	.word	0x080042af
 8004280:	080042af 	.word	0x080042af
 8004284:	080042a7 	.word	0x080042a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004288:	f7ff f8d0 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 800428c:	61f8      	str	r0, [r7, #28]
        break;
 800428e:	e014      	b.n	80042ba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004290:	f7ff f8e2 	bl	8003458 <HAL_RCC_GetPCLK2Freq>
 8004294:	61f8      	str	r0, [r7, #28]
        break;
 8004296:	e010      	b.n	80042ba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004298:	4b4c      	ldr	r3, [pc, #304]	; (80043cc <UART_SetConfig+0x4b0>)
 800429a:	61fb      	str	r3, [r7, #28]
        break;
 800429c:	e00d      	b.n	80042ba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800429e:	f7ff f82d 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 80042a2:	61f8      	str	r0, [r7, #28]
        break;
 80042a4:	e009      	b.n	80042ba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042aa:	61fb      	str	r3, [r7, #28]
        break;
 80042ac:	e005      	b.n	80042ba <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80042b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d077      	beq.n	80043b0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	005a      	lsls	r2, r3, #1
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	085b      	lsrs	r3, r3, #1
 80042ca:	441a      	add	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	2b0f      	cmp	r3, #15
 80042da:	d916      	bls.n	800430a <UART_SetConfig+0x3ee>
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e2:	d212      	bcs.n	800430a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	f023 030f 	bic.w	r3, r3, #15
 80042ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	085b      	lsrs	r3, r3, #1
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	8afb      	ldrh	r3, [r7, #22]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	8afa      	ldrh	r2, [r7, #22]
 8004306:	60da      	str	r2, [r3, #12]
 8004308:	e052      	b.n	80043b0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004310:	e04e      	b.n	80043b0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004312:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004316:	2b08      	cmp	r3, #8
 8004318:	d827      	bhi.n	800436a <UART_SetConfig+0x44e>
 800431a:	a201      	add	r2, pc, #4	; (adr r2, 8004320 <UART_SetConfig+0x404>)
 800431c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004320:	08004345 	.word	0x08004345
 8004324:	0800434d 	.word	0x0800434d
 8004328:	08004355 	.word	0x08004355
 800432c:	0800436b 	.word	0x0800436b
 8004330:	0800435b 	.word	0x0800435b
 8004334:	0800436b 	.word	0x0800436b
 8004338:	0800436b 	.word	0x0800436b
 800433c:	0800436b 	.word	0x0800436b
 8004340:	08004363 	.word	0x08004363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004344:	f7ff f872 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 8004348:	61f8      	str	r0, [r7, #28]
        break;
 800434a:	e014      	b.n	8004376 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800434c:	f7ff f884 	bl	8003458 <HAL_RCC_GetPCLK2Freq>
 8004350:	61f8      	str	r0, [r7, #28]
        break;
 8004352:	e010      	b.n	8004376 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004354:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <UART_SetConfig+0x4b0>)
 8004356:	61fb      	str	r3, [r7, #28]
        break;
 8004358:	e00d      	b.n	8004376 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800435a:	f7fe ffcf 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 800435e:	61f8      	str	r0, [r7, #28]
        break;
 8004360:	e009      	b.n	8004376 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004366:	61fb      	str	r3, [r7, #28]
        break;
 8004368:	e005      	b.n	8004376 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004374:	bf00      	nop
    }

    if (pclk != 0U)
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d019      	beq.n	80043b0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	085a      	lsrs	r2, r3, #1
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	441a      	add	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	fbb2 f3f3 	udiv	r3, r2, r3
 800438e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b0f      	cmp	r3, #15
 8004394:	d909      	bls.n	80043aa <UART_SetConfig+0x48e>
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800439c:	d205      	bcs.n	80043aa <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60da      	str	r2, [r3, #12]
 80043a8:	e002      	b.n	80043b0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80043bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3728      	adds	r7, #40	; 0x28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ca:	bf00      	nop
 80043cc:	00f42400 	.word	0x00f42400

080043d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00a      	beq.n	80043fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	f003 0320 	and.w	r3, r3, #32
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01a      	beq.n	80044e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ce:	d10a      	bne.n	80044e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	605a      	str	r2, [r3, #4]
  }
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b098      	sub	sp, #96	; 0x60
 8004518:	af02      	add	r7, sp, #8
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004524:	f7fd f904 	bl	8001730 <HAL_GetTick>
 8004528:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b08      	cmp	r3, #8
 8004536:	d12e      	bne.n	8004596 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004538:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004540:	2200      	movs	r2, #0
 8004542:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f88c 	bl	8004664 <UART_WaitOnFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d021      	beq.n	8004596 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004566:	653b      	str	r3, [r7, #80]	; 0x50
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004570:	647b      	str	r3, [r7, #68]	; 0x44
 8004572:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800457e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e6      	bne.n	8004552 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e062      	b.n	800465c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d149      	bne.n	8004638 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ac:	2200      	movs	r2, #0
 80045ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f856 	bl	8004664 <UART_WaitOnFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d03c      	beq.n	8004638 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	e853 3f00 	ldrex	r3, [r3]
 80045ca:	623b      	str	r3, [r7, #32]
   return(result);
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045dc:	633b      	str	r3, [r7, #48]	; 0x30
 80045de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e4:	e841 2300 	strex	r3, r2, [r1]
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e6      	bne.n	80045be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3308      	adds	r3, #8
 80045f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	e853 3f00 	ldrex	r3, [r3]
 80045fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0301 	bic.w	r3, r3, #1
 8004606:	64bb      	str	r3, [r7, #72]	; 0x48
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3308      	adds	r3, #8
 800460e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004610:	61fa      	str	r2, [r7, #28]
 8004612:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	69b9      	ldr	r1, [r7, #24]
 8004616:	69fa      	ldr	r2, [r7, #28]
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	617b      	str	r3, [r7, #20]
   return(result);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e5      	bne.n	80045f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e011      	b.n	800465c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3758      	adds	r7, #88	; 0x58
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	4613      	mov	r3, r2
 8004672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004674:	e049      	b.n	800470a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467c:	d045      	beq.n	800470a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467e:	f7fd f857 	bl	8001730 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	429a      	cmp	r2, r3
 800468c:	d302      	bcc.n	8004694 <UART_WaitOnFlagUntilTimeout+0x30>
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e048      	b.n	800472a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d031      	beq.n	800470a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d110      	bne.n	80046d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2208      	movs	r2, #8
 80046ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f8ff 	bl	80048c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2208      	movs	r2, #8
 80046c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e029      	b.n	800472a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e4:	d111      	bne.n	800470a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f8e5 	bl	80048c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e00f      	b.n	800472a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69da      	ldr	r2, [r3, #28]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4013      	ands	r3, r2
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	429a      	cmp	r2, r3
 8004718:	bf0c      	ite	eq
 800471a:	2301      	moveq	r3, #1
 800471c:	2300      	movne	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	461a      	mov	r2, r3
 8004722:	79fb      	ldrb	r3, [r7, #7]
 8004724:	429a      	cmp	r2, r3
 8004726:	d0a6      	beq.n	8004676 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
	...

08004734 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004734:	b480      	push	{r7}
 8004736:	b097      	sub	sp, #92	; 0x5c
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	4613      	mov	r3, r2
 8004740:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	88fa      	ldrh	r2, [r7, #6]
 800474c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	88fa      	ldrh	r2, [r7, #6]
 8004754:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004766:	d10e      	bne.n	8004786 <UART_Start_Receive_IT+0x52>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d105      	bne.n	800477c <UART_Start_Receive_IT+0x48>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004776:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800477a:	e02d      	b.n	80047d8 <UART_Start_Receive_IT+0xa4>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	22ff      	movs	r2, #255	; 0xff
 8004780:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004784:	e028      	b.n	80047d8 <UART_Start_Receive_IT+0xa4>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10d      	bne.n	80047aa <UART_Start_Receive_IT+0x76>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <UART_Start_Receive_IT+0x6c>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	22ff      	movs	r2, #255	; 0xff
 800479a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800479e:	e01b      	b.n	80047d8 <UART_Start_Receive_IT+0xa4>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	227f      	movs	r2, #127	; 0x7f
 80047a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047a8:	e016      	b.n	80047d8 <UART_Start_Receive_IT+0xa4>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047b2:	d10d      	bne.n	80047d0 <UART_Start_Receive_IT+0x9c>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d104      	bne.n	80047c6 <UART_Start_Receive_IT+0x92>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	227f      	movs	r2, #127	; 0x7f
 80047c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047c4:	e008      	b.n	80047d8 <UART_Start_Receive_IT+0xa4>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	223f      	movs	r2, #63	; 0x3f
 80047ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047ce:	e003      	b.n	80047d8 <UART_Start_Receive_IT+0xa4>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2222      	movs	r2, #34	; 0x22
 80047e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3308      	adds	r3, #8
 80047ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f2:	e853 3f00 	ldrex	r3, [r3]
 80047f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3308      	adds	r3, #8
 8004806:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004808:	64ba      	str	r2, [r7, #72]	; 0x48
 800480a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800480e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004810:	e841 2300 	strex	r3, r2, [r1]
 8004814:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e5      	bne.n	80047e8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004824:	d107      	bne.n	8004836 <UART_Start_Receive_IT+0x102>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d103      	bne.n	8004836 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4a21      	ldr	r2, [pc, #132]	; (80048b8 <UART_Start_Receive_IT+0x184>)
 8004832:	669a      	str	r2, [r3, #104]	; 0x68
 8004834:	e002      	b.n	800483c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4a20      	ldr	r2, [pc, #128]	; (80048bc <UART_Start_Receive_IT+0x188>)
 800483a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d019      	beq.n	8004878 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004858:	64fb      	str	r3, [r7, #76]	; 0x4c
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004862:	637b      	str	r3, [r7, #52]	; 0x34
 8004864:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e6      	bne.n	8004844 <UART_Start_Receive_IT+0x110>
 8004876:	e018      	b.n	80048aa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	613b      	str	r3, [r7, #16]
   return(result);
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f043 0320 	orr.w	r3, r3, #32
 800488c:	653b      	str	r3, [r7, #80]	; 0x50
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	461a      	mov	r2, r3
 8004894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004896:	623b      	str	r3, [r7, #32]
 8004898:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	69f9      	ldr	r1, [r7, #28]
 800489c:	6a3a      	ldr	r2, [r7, #32]
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e6      	bne.n	8004878 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	375c      	adds	r7, #92	; 0x5c
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	08004bc5 	.word	0x08004bc5
 80048bc:	08004a09 	.word	0x08004a09

080048c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b095      	sub	sp, #84	; 0x54
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e6:	643b      	str	r3, [r7, #64]	; 0x40
 80048e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e6      	bne.n	80048c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3308      	adds	r3, #8
 8004900:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	61fb      	str	r3, [r7, #28]
   return(result);
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	f023 0301 	bic.w	r3, r3, #1
 8004910:	64bb      	str	r3, [r7, #72]	; 0x48
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3308      	adds	r3, #8
 8004918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800491a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800491c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004922:	e841 2300 	strex	r3, r2, [r1]
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1e5      	bne.n	80048fa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004932:	2b01      	cmp	r3, #1
 8004934:	d118      	bne.n	8004968 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	e853 3f00 	ldrex	r3, [r3]
 8004942:	60bb      	str	r3, [r7, #8]
   return(result);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f023 0310 	bic.w	r3, r3, #16
 800494a:	647b      	str	r3, [r7, #68]	; 0x44
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	461a      	mov	r2, r3
 8004952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004954:	61bb      	str	r3, [r7, #24]
 8004956:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004958:	6979      	ldr	r1, [r7, #20]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	e841 2300 	strex	r3, r2, [r1]
 8004960:	613b      	str	r3, [r7, #16]
   return(result);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e6      	bne.n	8004936 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800497c:	bf00      	nop
 800497e:	3754      	adds	r7, #84	; 0x54
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004994:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7ff faa2 	bl	8003ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049ac:	bf00      	nop
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d0:	61fb      	str	r3, [r7, #28]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	61bb      	str	r3, [r7, #24]
 80049dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049de:	6979      	ldr	r1, [r7, #20]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	e841 2300 	strex	r3, r2, [r1]
 80049e6:	613b      	str	r3, [r7, #16]
   return(result);
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1e6      	bne.n	80049bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff fa6e 	bl	8003edc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a00:	bf00      	nop
 8004a02:	3720      	adds	r7, #32
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b09c      	sub	sp, #112	; 0x70
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a16:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a20:	2b22      	cmp	r3, #34	; 0x22
 8004a22:	f040 80be 	bne.w	8004ba2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a2c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004a34:	b2d9      	uxtb	r1, r3
 8004a36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a40:	400a      	ands	r2, r1
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f040 80a3 	bne.w	8004bb6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a84:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a90:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e6      	bne.n	8004a70 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab4:	f023 0301 	bic.w	r3, r3, #1
 8004ab8:	667b      	str	r3, [r7, #100]	; 0x64
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3308      	adds	r3, #8
 8004ac0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ac2:	647a      	str	r2, [r7, #68]	; 0x44
 8004ac4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ac8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e5      	bne.n	8004aa2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a34      	ldr	r2, [pc, #208]	; (8004bc0 <UART_RxISR_8BIT+0x1b8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d01f      	beq.n	8004b34 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d018      	beq.n	8004b34 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b16:	663b      	str	r3, [r7, #96]	; 0x60
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b20:	633b      	str	r3, [r7, #48]	; 0x30
 8004b22:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e6      	bne.n	8004b02 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d12e      	bne.n	8004b9a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0310 	bic.w	r3, r3, #16
 8004b56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	69b9      	ldr	r1, [r7, #24]
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e6      	bne.n	8004b42 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f003 0310 	and.w	r3, r3, #16
 8004b7e:	2b10      	cmp	r3, #16
 8004b80:	d103      	bne.n	8004b8a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2210      	movs	r2, #16
 8004b88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b90:	4619      	mov	r1, r3
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff f9b6 	bl	8003f04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b98:	e00d      	b.n	8004bb6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fc f9cc 	bl	8000f38 <HAL_UART_RxCpltCallback>
}
 8004ba0:	e009      	b.n	8004bb6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	8b1b      	ldrh	r3, [r3, #24]
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0208 	orr.w	r2, r2, #8
 8004bb2:	b292      	uxth	r2, r2
 8004bb4:	831a      	strh	r2, [r3, #24]
}
 8004bb6:	bf00      	nop
 8004bb8:	3770      	adds	r7, #112	; 0x70
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40008000 	.word	0x40008000

08004bc4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b09c      	sub	sp, #112	; 0x70
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004bd2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bdc:	2b22      	cmp	r3, #34	; 0x22
 8004bde:	f040 80be 	bne.w	8004d5e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004be8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004bf2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004bf6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	1c9a      	adds	r2, r3, #2
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f040 80a3 	bne.w	8004d72 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c40:	667b      	str	r3, [r7, #100]	; 0x64
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c4a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c4c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e6      	bne.n	8004c2c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3308      	adds	r3, #8
 8004c64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	663b      	str	r3, [r7, #96]	; 0x60
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c7e:	643a      	str	r2, [r7, #64]	; 0x40
 8004c80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e5      	bne.n	8004c5e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a34      	ldr	r2, [pc, #208]	; (8004d7c <UART_RxISR_16BIT+0x1b8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d01f      	beq.n	8004cf0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d018      	beq.n	8004cf0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cde:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ce4:	e841 2300 	strex	r3, r2, [r1]
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e6      	bne.n	8004cbe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d12e      	bne.n	8004d56 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f023 0310 	bic.w	r3, r3, #16
 8004d12:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6979      	ldr	r1, [r7, #20]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	613b      	str	r3, [r7, #16]
   return(result);
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e6      	bne.n	8004cfe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	2b10      	cmp	r3, #16
 8004d3c:	d103      	bne.n	8004d46 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2210      	movs	r2, #16
 8004d44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff f8d8 	bl	8003f04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d54:	e00d      	b.n	8004d72 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fc f8ee 	bl	8000f38 <HAL_UART_RxCpltCallback>
}
 8004d5c:	e009      	b.n	8004d72 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	8b1b      	ldrh	r3, [r3, #24]
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0208 	orr.w	r2, r2, #8
 8004d6e:	b292      	uxth	r2, r2
 8004d70:	831a      	strh	r2, [r3, #24]
}
 8004d72:	bf00      	nop
 8004d74:	3770      	adds	r7, #112	; 0x70
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40008000 	.word	0x40008000

08004d80 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e056      	b.n	8004e46 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d106      	bne.n	8004dae <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7fc fac3 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2224      	movs	r2, #36	; 0x24
 8004db2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0201 	bic.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f7ff faff 	bl	80043d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f7ff f8a2 	bl	8003f1c <UART_SetConfig>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e031      	b.n	8004e46 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004df0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	055b      	lsls	r3, r3, #21
 8004e0a:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	041b      	lsls	r3, r3, #16
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8004e20:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	6979      	ldr	r1, [r7, #20]
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 0201 	orr.w	r2, r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f7ff fb68 	bl	8004514 <UART_CheckIdleState>
 8004e44:	4603      	mov	r3, r0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
	...

08004e64 <malloc>:
 8004e64:	4b02      	ldr	r3, [pc, #8]	; (8004e70 <malloc+0xc>)
 8004e66:	4601      	mov	r1, r0
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	f000 b823 	b.w	8004eb4 <_malloc_r>
 8004e6e:	bf00      	nop
 8004e70:	20000064 	.word	0x20000064

08004e74 <sbrk_aligned>:
 8004e74:	b570      	push	{r4, r5, r6, lr}
 8004e76:	4e0e      	ldr	r6, [pc, #56]	; (8004eb0 <sbrk_aligned+0x3c>)
 8004e78:	460c      	mov	r4, r1
 8004e7a:	6831      	ldr	r1, [r6, #0]
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	b911      	cbnz	r1, 8004e86 <sbrk_aligned+0x12>
 8004e80:	f000 fe50 	bl	8005b24 <_sbrk_r>
 8004e84:	6030      	str	r0, [r6, #0]
 8004e86:	4621      	mov	r1, r4
 8004e88:	4628      	mov	r0, r5
 8004e8a:	f000 fe4b 	bl	8005b24 <_sbrk_r>
 8004e8e:	1c43      	adds	r3, r0, #1
 8004e90:	d00a      	beq.n	8004ea8 <sbrk_aligned+0x34>
 8004e92:	1cc4      	adds	r4, r0, #3
 8004e94:	f024 0403 	bic.w	r4, r4, #3
 8004e98:	42a0      	cmp	r0, r4
 8004e9a:	d007      	beq.n	8004eac <sbrk_aligned+0x38>
 8004e9c:	1a21      	subs	r1, r4, r0
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f000 fe40 	bl	8005b24 <_sbrk_r>
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d101      	bne.n	8004eac <sbrk_aligned+0x38>
 8004ea8:	f04f 34ff 	mov.w	r4, #4294967295
 8004eac:	4620      	mov	r0, r4
 8004eae:	bd70      	pop	{r4, r5, r6, pc}
 8004eb0:	20000350 	.word	0x20000350

08004eb4 <_malloc_r>:
 8004eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eb8:	1ccd      	adds	r5, r1, #3
 8004eba:	f025 0503 	bic.w	r5, r5, #3
 8004ebe:	3508      	adds	r5, #8
 8004ec0:	2d0c      	cmp	r5, #12
 8004ec2:	bf38      	it	cc
 8004ec4:	250c      	movcc	r5, #12
 8004ec6:	2d00      	cmp	r5, #0
 8004ec8:	4607      	mov	r7, r0
 8004eca:	db01      	blt.n	8004ed0 <_malloc_r+0x1c>
 8004ecc:	42a9      	cmp	r1, r5
 8004ece:	d905      	bls.n	8004edc <_malloc_r+0x28>
 8004ed0:	230c      	movs	r3, #12
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	2600      	movs	r6, #0
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004edc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004fb0 <_malloc_r+0xfc>
 8004ee0:	f000 f868 	bl	8004fb4 <__malloc_lock>
 8004ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ee8:	461c      	mov	r4, r3
 8004eea:	bb5c      	cbnz	r4, 8004f44 <_malloc_r+0x90>
 8004eec:	4629      	mov	r1, r5
 8004eee:	4638      	mov	r0, r7
 8004ef0:	f7ff ffc0 	bl	8004e74 <sbrk_aligned>
 8004ef4:	1c43      	adds	r3, r0, #1
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	d155      	bne.n	8004fa6 <_malloc_r+0xf2>
 8004efa:	f8d8 4000 	ldr.w	r4, [r8]
 8004efe:	4626      	mov	r6, r4
 8004f00:	2e00      	cmp	r6, #0
 8004f02:	d145      	bne.n	8004f90 <_malloc_r+0xdc>
 8004f04:	2c00      	cmp	r4, #0
 8004f06:	d048      	beq.n	8004f9a <_malloc_r+0xe6>
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4638      	mov	r0, r7
 8004f0e:	eb04 0903 	add.w	r9, r4, r3
 8004f12:	f000 fe07 	bl	8005b24 <_sbrk_r>
 8004f16:	4581      	cmp	r9, r0
 8004f18:	d13f      	bne.n	8004f9a <_malloc_r+0xe6>
 8004f1a:	6821      	ldr	r1, [r4, #0]
 8004f1c:	1a6d      	subs	r5, r5, r1
 8004f1e:	4629      	mov	r1, r5
 8004f20:	4638      	mov	r0, r7
 8004f22:	f7ff ffa7 	bl	8004e74 <sbrk_aligned>
 8004f26:	3001      	adds	r0, #1
 8004f28:	d037      	beq.n	8004f9a <_malloc_r+0xe6>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	442b      	add	r3, r5
 8004f2e:	6023      	str	r3, [r4, #0]
 8004f30:	f8d8 3000 	ldr.w	r3, [r8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d038      	beq.n	8004faa <_malloc_r+0xf6>
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	42a2      	cmp	r2, r4
 8004f3c:	d12b      	bne.n	8004f96 <_malloc_r+0xe2>
 8004f3e:	2200      	movs	r2, #0
 8004f40:	605a      	str	r2, [r3, #4]
 8004f42:	e00f      	b.n	8004f64 <_malloc_r+0xb0>
 8004f44:	6822      	ldr	r2, [r4, #0]
 8004f46:	1b52      	subs	r2, r2, r5
 8004f48:	d41f      	bmi.n	8004f8a <_malloc_r+0xd6>
 8004f4a:	2a0b      	cmp	r2, #11
 8004f4c:	d917      	bls.n	8004f7e <_malloc_r+0xca>
 8004f4e:	1961      	adds	r1, r4, r5
 8004f50:	42a3      	cmp	r3, r4
 8004f52:	6025      	str	r5, [r4, #0]
 8004f54:	bf18      	it	ne
 8004f56:	6059      	strne	r1, [r3, #4]
 8004f58:	6863      	ldr	r3, [r4, #4]
 8004f5a:	bf08      	it	eq
 8004f5c:	f8c8 1000 	streq.w	r1, [r8]
 8004f60:	5162      	str	r2, [r4, r5]
 8004f62:	604b      	str	r3, [r1, #4]
 8004f64:	4638      	mov	r0, r7
 8004f66:	f104 060b 	add.w	r6, r4, #11
 8004f6a:	f000 f829 	bl	8004fc0 <__malloc_unlock>
 8004f6e:	f026 0607 	bic.w	r6, r6, #7
 8004f72:	1d23      	adds	r3, r4, #4
 8004f74:	1af2      	subs	r2, r6, r3
 8004f76:	d0ae      	beq.n	8004ed6 <_malloc_r+0x22>
 8004f78:	1b9b      	subs	r3, r3, r6
 8004f7a:	50a3      	str	r3, [r4, r2]
 8004f7c:	e7ab      	b.n	8004ed6 <_malloc_r+0x22>
 8004f7e:	42a3      	cmp	r3, r4
 8004f80:	6862      	ldr	r2, [r4, #4]
 8004f82:	d1dd      	bne.n	8004f40 <_malloc_r+0x8c>
 8004f84:	f8c8 2000 	str.w	r2, [r8]
 8004f88:	e7ec      	b.n	8004f64 <_malloc_r+0xb0>
 8004f8a:	4623      	mov	r3, r4
 8004f8c:	6864      	ldr	r4, [r4, #4]
 8004f8e:	e7ac      	b.n	8004eea <_malloc_r+0x36>
 8004f90:	4634      	mov	r4, r6
 8004f92:	6876      	ldr	r6, [r6, #4]
 8004f94:	e7b4      	b.n	8004f00 <_malloc_r+0x4c>
 8004f96:	4613      	mov	r3, r2
 8004f98:	e7cc      	b.n	8004f34 <_malloc_r+0x80>
 8004f9a:	230c      	movs	r3, #12
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	f000 f80e 	bl	8004fc0 <__malloc_unlock>
 8004fa4:	e797      	b.n	8004ed6 <_malloc_r+0x22>
 8004fa6:	6025      	str	r5, [r4, #0]
 8004fa8:	e7dc      	b.n	8004f64 <_malloc_r+0xb0>
 8004faa:	605b      	str	r3, [r3, #4]
 8004fac:	deff      	udf	#255	; 0xff
 8004fae:	bf00      	nop
 8004fb0:	2000034c 	.word	0x2000034c

08004fb4 <__malloc_lock>:
 8004fb4:	4801      	ldr	r0, [pc, #4]	; (8004fbc <__malloc_lock+0x8>)
 8004fb6:	f000 be02 	b.w	8005bbe <__retarget_lock_acquire_recursive>
 8004fba:	bf00      	nop
 8004fbc:	20000494 	.word	0x20000494

08004fc0 <__malloc_unlock>:
 8004fc0:	4801      	ldr	r0, [pc, #4]	; (8004fc8 <__malloc_unlock+0x8>)
 8004fc2:	f000 bdfd 	b.w	8005bc0 <__retarget_lock_release_recursive>
 8004fc6:	bf00      	nop
 8004fc8:	20000494 	.word	0x20000494

08004fcc <__cvt>:
 8004fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd0:	ec55 4b10 	vmov	r4, r5, d0
 8004fd4:	2d00      	cmp	r5, #0
 8004fd6:	460e      	mov	r6, r1
 8004fd8:	4619      	mov	r1, r3
 8004fda:	462b      	mov	r3, r5
 8004fdc:	bfbb      	ittet	lt
 8004fde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004fe2:	461d      	movlt	r5, r3
 8004fe4:	2300      	movge	r3, #0
 8004fe6:	232d      	movlt	r3, #45	; 0x2d
 8004fe8:	700b      	strb	r3, [r1, #0]
 8004fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ff0:	4691      	mov	r9, r2
 8004ff2:	f023 0820 	bic.w	r8, r3, #32
 8004ff6:	bfbc      	itt	lt
 8004ff8:	4622      	movlt	r2, r4
 8004ffa:	4614      	movlt	r4, r2
 8004ffc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005000:	d005      	beq.n	800500e <__cvt+0x42>
 8005002:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005006:	d100      	bne.n	800500a <__cvt+0x3e>
 8005008:	3601      	adds	r6, #1
 800500a:	2102      	movs	r1, #2
 800500c:	e000      	b.n	8005010 <__cvt+0x44>
 800500e:	2103      	movs	r1, #3
 8005010:	ab03      	add	r3, sp, #12
 8005012:	9301      	str	r3, [sp, #4]
 8005014:	ab02      	add	r3, sp, #8
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	ec45 4b10 	vmov	d0, r4, r5
 800501c:	4653      	mov	r3, sl
 800501e:	4632      	mov	r2, r6
 8005020:	f000 fe5a 	bl	8005cd8 <_dtoa_r>
 8005024:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005028:	4607      	mov	r7, r0
 800502a:	d102      	bne.n	8005032 <__cvt+0x66>
 800502c:	f019 0f01 	tst.w	r9, #1
 8005030:	d022      	beq.n	8005078 <__cvt+0xac>
 8005032:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005036:	eb07 0906 	add.w	r9, r7, r6
 800503a:	d110      	bne.n	800505e <__cvt+0x92>
 800503c:	783b      	ldrb	r3, [r7, #0]
 800503e:	2b30      	cmp	r3, #48	; 0x30
 8005040:	d10a      	bne.n	8005058 <__cvt+0x8c>
 8005042:	2200      	movs	r2, #0
 8005044:	2300      	movs	r3, #0
 8005046:	4620      	mov	r0, r4
 8005048:	4629      	mov	r1, r5
 800504a:	f7fb fd3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800504e:	b918      	cbnz	r0, 8005058 <__cvt+0x8c>
 8005050:	f1c6 0601 	rsb	r6, r6, #1
 8005054:	f8ca 6000 	str.w	r6, [sl]
 8005058:	f8da 3000 	ldr.w	r3, [sl]
 800505c:	4499      	add	r9, r3
 800505e:	2200      	movs	r2, #0
 8005060:	2300      	movs	r3, #0
 8005062:	4620      	mov	r0, r4
 8005064:	4629      	mov	r1, r5
 8005066:	f7fb fd2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800506a:	b108      	cbz	r0, 8005070 <__cvt+0xa4>
 800506c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005070:	2230      	movs	r2, #48	; 0x30
 8005072:	9b03      	ldr	r3, [sp, #12]
 8005074:	454b      	cmp	r3, r9
 8005076:	d307      	bcc.n	8005088 <__cvt+0xbc>
 8005078:	9b03      	ldr	r3, [sp, #12]
 800507a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800507c:	1bdb      	subs	r3, r3, r7
 800507e:	4638      	mov	r0, r7
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	b004      	add	sp, #16
 8005084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005088:	1c59      	adds	r1, r3, #1
 800508a:	9103      	str	r1, [sp, #12]
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	e7f0      	b.n	8005072 <__cvt+0xa6>

08005090 <__exponent>:
 8005090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005092:	4603      	mov	r3, r0
 8005094:	2900      	cmp	r1, #0
 8005096:	bfb8      	it	lt
 8005098:	4249      	neglt	r1, r1
 800509a:	f803 2b02 	strb.w	r2, [r3], #2
 800509e:	bfb4      	ite	lt
 80050a0:	222d      	movlt	r2, #45	; 0x2d
 80050a2:	222b      	movge	r2, #43	; 0x2b
 80050a4:	2909      	cmp	r1, #9
 80050a6:	7042      	strb	r2, [r0, #1]
 80050a8:	dd2a      	ble.n	8005100 <__exponent+0x70>
 80050aa:	f10d 0207 	add.w	r2, sp, #7
 80050ae:	4617      	mov	r7, r2
 80050b0:	260a      	movs	r6, #10
 80050b2:	4694      	mov	ip, r2
 80050b4:	fb91 f5f6 	sdiv	r5, r1, r6
 80050b8:	fb06 1415 	mls	r4, r6, r5, r1
 80050bc:	3430      	adds	r4, #48	; 0x30
 80050be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80050c2:	460c      	mov	r4, r1
 80050c4:	2c63      	cmp	r4, #99	; 0x63
 80050c6:	f102 32ff 	add.w	r2, r2, #4294967295
 80050ca:	4629      	mov	r1, r5
 80050cc:	dcf1      	bgt.n	80050b2 <__exponent+0x22>
 80050ce:	3130      	adds	r1, #48	; 0x30
 80050d0:	f1ac 0402 	sub.w	r4, ip, #2
 80050d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80050d8:	1c41      	adds	r1, r0, #1
 80050da:	4622      	mov	r2, r4
 80050dc:	42ba      	cmp	r2, r7
 80050de:	d30a      	bcc.n	80050f6 <__exponent+0x66>
 80050e0:	f10d 0209 	add.w	r2, sp, #9
 80050e4:	eba2 020c 	sub.w	r2, r2, ip
 80050e8:	42bc      	cmp	r4, r7
 80050ea:	bf88      	it	hi
 80050ec:	2200      	movhi	r2, #0
 80050ee:	4413      	add	r3, r2
 80050f0:	1a18      	subs	r0, r3, r0
 80050f2:	b003      	add	sp, #12
 80050f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80050fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80050fe:	e7ed      	b.n	80050dc <__exponent+0x4c>
 8005100:	2330      	movs	r3, #48	; 0x30
 8005102:	3130      	adds	r1, #48	; 0x30
 8005104:	7083      	strb	r3, [r0, #2]
 8005106:	70c1      	strb	r1, [r0, #3]
 8005108:	1d03      	adds	r3, r0, #4
 800510a:	e7f1      	b.n	80050f0 <__exponent+0x60>

0800510c <_printf_float>:
 800510c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005110:	ed2d 8b02 	vpush	{d8}
 8005114:	b08d      	sub	sp, #52	; 0x34
 8005116:	460c      	mov	r4, r1
 8005118:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800511c:	4616      	mov	r6, r2
 800511e:	461f      	mov	r7, r3
 8005120:	4605      	mov	r5, r0
 8005122:	f000 fcc7 	bl	8005ab4 <_localeconv_r>
 8005126:	f8d0 a000 	ldr.w	sl, [r0]
 800512a:	4650      	mov	r0, sl
 800512c:	f7fb f8a0 	bl	8000270 <strlen>
 8005130:	2300      	movs	r3, #0
 8005132:	930a      	str	r3, [sp, #40]	; 0x28
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	9305      	str	r3, [sp, #20]
 8005138:	f8d8 3000 	ldr.w	r3, [r8]
 800513c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005140:	3307      	adds	r3, #7
 8005142:	f023 0307 	bic.w	r3, r3, #7
 8005146:	f103 0208 	add.w	r2, r3, #8
 800514a:	f8c8 2000 	str.w	r2, [r8]
 800514e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005152:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005156:	9307      	str	r3, [sp, #28]
 8005158:	f8cd 8018 	str.w	r8, [sp, #24]
 800515c:	ee08 0a10 	vmov	s16, r0
 8005160:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005164:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005168:	4b9e      	ldr	r3, [pc, #632]	; (80053e4 <_printf_float+0x2d8>)
 800516a:	f04f 32ff 	mov.w	r2, #4294967295
 800516e:	f7fb fcdd 	bl	8000b2c <__aeabi_dcmpun>
 8005172:	bb88      	cbnz	r0, 80051d8 <_printf_float+0xcc>
 8005174:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005178:	4b9a      	ldr	r3, [pc, #616]	; (80053e4 <_printf_float+0x2d8>)
 800517a:	f04f 32ff 	mov.w	r2, #4294967295
 800517e:	f7fb fcb7 	bl	8000af0 <__aeabi_dcmple>
 8005182:	bb48      	cbnz	r0, 80051d8 <_printf_float+0xcc>
 8005184:	2200      	movs	r2, #0
 8005186:	2300      	movs	r3, #0
 8005188:	4640      	mov	r0, r8
 800518a:	4649      	mov	r1, r9
 800518c:	f7fb fca6 	bl	8000adc <__aeabi_dcmplt>
 8005190:	b110      	cbz	r0, 8005198 <_printf_float+0x8c>
 8005192:	232d      	movs	r3, #45	; 0x2d
 8005194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005198:	4a93      	ldr	r2, [pc, #588]	; (80053e8 <_printf_float+0x2dc>)
 800519a:	4b94      	ldr	r3, [pc, #592]	; (80053ec <_printf_float+0x2e0>)
 800519c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80051a0:	bf94      	ite	ls
 80051a2:	4690      	movls	r8, r2
 80051a4:	4698      	movhi	r8, r3
 80051a6:	2303      	movs	r3, #3
 80051a8:	6123      	str	r3, [r4, #16]
 80051aa:	9b05      	ldr	r3, [sp, #20]
 80051ac:	f023 0304 	bic.w	r3, r3, #4
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	f04f 0900 	mov.w	r9, #0
 80051b6:	9700      	str	r7, [sp, #0]
 80051b8:	4633      	mov	r3, r6
 80051ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80051bc:	4621      	mov	r1, r4
 80051be:	4628      	mov	r0, r5
 80051c0:	f000 f9da 	bl	8005578 <_printf_common>
 80051c4:	3001      	adds	r0, #1
 80051c6:	f040 8090 	bne.w	80052ea <_printf_float+0x1de>
 80051ca:	f04f 30ff 	mov.w	r0, #4294967295
 80051ce:	b00d      	add	sp, #52	; 0x34
 80051d0:	ecbd 8b02 	vpop	{d8}
 80051d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d8:	4642      	mov	r2, r8
 80051da:	464b      	mov	r3, r9
 80051dc:	4640      	mov	r0, r8
 80051de:	4649      	mov	r1, r9
 80051e0:	f7fb fca4 	bl	8000b2c <__aeabi_dcmpun>
 80051e4:	b140      	cbz	r0, 80051f8 <_printf_float+0xec>
 80051e6:	464b      	mov	r3, r9
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bfbc      	itt	lt
 80051ec:	232d      	movlt	r3, #45	; 0x2d
 80051ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80051f2:	4a7f      	ldr	r2, [pc, #508]	; (80053f0 <_printf_float+0x2e4>)
 80051f4:	4b7f      	ldr	r3, [pc, #508]	; (80053f4 <_printf_float+0x2e8>)
 80051f6:	e7d1      	b.n	800519c <_printf_float+0x90>
 80051f8:	6863      	ldr	r3, [r4, #4]
 80051fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80051fe:	9206      	str	r2, [sp, #24]
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	d13f      	bne.n	8005284 <_printf_float+0x178>
 8005204:	2306      	movs	r3, #6
 8005206:	6063      	str	r3, [r4, #4]
 8005208:	9b05      	ldr	r3, [sp, #20]
 800520a:	6861      	ldr	r1, [r4, #4]
 800520c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005210:	2300      	movs	r3, #0
 8005212:	9303      	str	r3, [sp, #12]
 8005214:	ab0a      	add	r3, sp, #40	; 0x28
 8005216:	e9cd b301 	strd	fp, r3, [sp, #4]
 800521a:	ab09      	add	r3, sp, #36	; 0x24
 800521c:	ec49 8b10 	vmov	d0, r8, r9
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	6022      	str	r2, [r4, #0]
 8005224:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005228:	4628      	mov	r0, r5
 800522a:	f7ff fecf 	bl	8004fcc <__cvt>
 800522e:	9b06      	ldr	r3, [sp, #24]
 8005230:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005232:	2b47      	cmp	r3, #71	; 0x47
 8005234:	4680      	mov	r8, r0
 8005236:	d108      	bne.n	800524a <_printf_float+0x13e>
 8005238:	1cc8      	adds	r0, r1, #3
 800523a:	db02      	blt.n	8005242 <_printf_float+0x136>
 800523c:	6863      	ldr	r3, [r4, #4]
 800523e:	4299      	cmp	r1, r3
 8005240:	dd41      	ble.n	80052c6 <_printf_float+0x1ba>
 8005242:	f1ab 0302 	sub.w	r3, fp, #2
 8005246:	fa5f fb83 	uxtb.w	fp, r3
 800524a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800524e:	d820      	bhi.n	8005292 <_printf_float+0x186>
 8005250:	3901      	subs	r1, #1
 8005252:	465a      	mov	r2, fp
 8005254:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005258:	9109      	str	r1, [sp, #36]	; 0x24
 800525a:	f7ff ff19 	bl	8005090 <__exponent>
 800525e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005260:	1813      	adds	r3, r2, r0
 8005262:	2a01      	cmp	r2, #1
 8005264:	4681      	mov	r9, r0
 8005266:	6123      	str	r3, [r4, #16]
 8005268:	dc02      	bgt.n	8005270 <_printf_float+0x164>
 800526a:	6822      	ldr	r2, [r4, #0]
 800526c:	07d2      	lsls	r2, r2, #31
 800526e:	d501      	bpl.n	8005274 <_printf_float+0x168>
 8005270:	3301      	adds	r3, #1
 8005272:	6123      	str	r3, [r4, #16]
 8005274:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005278:	2b00      	cmp	r3, #0
 800527a:	d09c      	beq.n	80051b6 <_printf_float+0xaa>
 800527c:	232d      	movs	r3, #45	; 0x2d
 800527e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005282:	e798      	b.n	80051b6 <_printf_float+0xaa>
 8005284:	9a06      	ldr	r2, [sp, #24]
 8005286:	2a47      	cmp	r2, #71	; 0x47
 8005288:	d1be      	bne.n	8005208 <_printf_float+0xfc>
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1bc      	bne.n	8005208 <_printf_float+0xfc>
 800528e:	2301      	movs	r3, #1
 8005290:	e7b9      	b.n	8005206 <_printf_float+0xfa>
 8005292:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005296:	d118      	bne.n	80052ca <_printf_float+0x1be>
 8005298:	2900      	cmp	r1, #0
 800529a:	6863      	ldr	r3, [r4, #4]
 800529c:	dd0b      	ble.n	80052b6 <_printf_float+0x1aa>
 800529e:	6121      	str	r1, [r4, #16]
 80052a0:	b913      	cbnz	r3, 80052a8 <_printf_float+0x19c>
 80052a2:	6822      	ldr	r2, [r4, #0]
 80052a4:	07d0      	lsls	r0, r2, #31
 80052a6:	d502      	bpl.n	80052ae <_printf_float+0x1a2>
 80052a8:	3301      	adds	r3, #1
 80052aa:	440b      	add	r3, r1
 80052ac:	6123      	str	r3, [r4, #16]
 80052ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80052b0:	f04f 0900 	mov.w	r9, #0
 80052b4:	e7de      	b.n	8005274 <_printf_float+0x168>
 80052b6:	b913      	cbnz	r3, 80052be <_printf_float+0x1b2>
 80052b8:	6822      	ldr	r2, [r4, #0]
 80052ba:	07d2      	lsls	r2, r2, #31
 80052bc:	d501      	bpl.n	80052c2 <_printf_float+0x1b6>
 80052be:	3302      	adds	r3, #2
 80052c0:	e7f4      	b.n	80052ac <_printf_float+0x1a0>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e7f2      	b.n	80052ac <_printf_float+0x1a0>
 80052c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80052ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052cc:	4299      	cmp	r1, r3
 80052ce:	db05      	blt.n	80052dc <_printf_float+0x1d0>
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	6121      	str	r1, [r4, #16]
 80052d4:	07d8      	lsls	r0, r3, #31
 80052d6:	d5ea      	bpl.n	80052ae <_printf_float+0x1a2>
 80052d8:	1c4b      	adds	r3, r1, #1
 80052da:	e7e7      	b.n	80052ac <_printf_float+0x1a0>
 80052dc:	2900      	cmp	r1, #0
 80052de:	bfd4      	ite	le
 80052e0:	f1c1 0202 	rsble	r2, r1, #2
 80052e4:	2201      	movgt	r2, #1
 80052e6:	4413      	add	r3, r2
 80052e8:	e7e0      	b.n	80052ac <_printf_float+0x1a0>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	055a      	lsls	r2, r3, #21
 80052ee:	d407      	bmi.n	8005300 <_printf_float+0x1f4>
 80052f0:	6923      	ldr	r3, [r4, #16]
 80052f2:	4642      	mov	r2, r8
 80052f4:	4631      	mov	r1, r6
 80052f6:	4628      	mov	r0, r5
 80052f8:	47b8      	blx	r7
 80052fa:	3001      	adds	r0, #1
 80052fc:	d12c      	bne.n	8005358 <_printf_float+0x24c>
 80052fe:	e764      	b.n	80051ca <_printf_float+0xbe>
 8005300:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005304:	f240 80e0 	bls.w	80054c8 <_printf_float+0x3bc>
 8005308:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800530c:	2200      	movs	r2, #0
 800530e:	2300      	movs	r3, #0
 8005310:	f7fb fbda 	bl	8000ac8 <__aeabi_dcmpeq>
 8005314:	2800      	cmp	r0, #0
 8005316:	d034      	beq.n	8005382 <_printf_float+0x276>
 8005318:	4a37      	ldr	r2, [pc, #220]	; (80053f8 <_printf_float+0x2ec>)
 800531a:	2301      	movs	r3, #1
 800531c:	4631      	mov	r1, r6
 800531e:	4628      	mov	r0, r5
 8005320:	47b8      	blx	r7
 8005322:	3001      	adds	r0, #1
 8005324:	f43f af51 	beq.w	80051ca <_printf_float+0xbe>
 8005328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800532c:	429a      	cmp	r2, r3
 800532e:	db02      	blt.n	8005336 <_printf_float+0x22a>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	07d8      	lsls	r0, r3, #31
 8005334:	d510      	bpl.n	8005358 <_printf_float+0x24c>
 8005336:	ee18 3a10 	vmov	r3, s16
 800533a:	4652      	mov	r2, sl
 800533c:	4631      	mov	r1, r6
 800533e:	4628      	mov	r0, r5
 8005340:	47b8      	blx	r7
 8005342:	3001      	adds	r0, #1
 8005344:	f43f af41 	beq.w	80051ca <_printf_float+0xbe>
 8005348:	f04f 0800 	mov.w	r8, #0
 800534c:	f104 091a 	add.w	r9, r4, #26
 8005350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005352:	3b01      	subs	r3, #1
 8005354:	4543      	cmp	r3, r8
 8005356:	dc09      	bgt.n	800536c <_printf_float+0x260>
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	079b      	lsls	r3, r3, #30
 800535c:	f100 8107 	bmi.w	800556e <_printf_float+0x462>
 8005360:	68e0      	ldr	r0, [r4, #12]
 8005362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005364:	4298      	cmp	r0, r3
 8005366:	bfb8      	it	lt
 8005368:	4618      	movlt	r0, r3
 800536a:	e730      	b.n	80051ce <_printf_float+0xc2>
 800536c:	2301      	movs	r3, #1
 800536e:	464a      	mov	r2, r9
 8005370:	4631      	mov	r1, r6
 8005372:	4628      	mov	r0, r5
 8005374:	47b8      	blx	r7
 8005376:	3001      	adds	r0, #1
 8005378:	f43f af27 	beq.w	80051ca <_printf_float+0xbe>
 800537c:	f108 0801 	add.w	r8, r8, #1
 8005380:	e7e6      	b.n	8005350 <_printf_float+0x244>
 8005382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005384:	2b00      	cmp	r3, #0
 8005386:	dc39      	bgt.n	80053fc <_printf_float+0x2f0>
 8005388:	4a1b      	ldr	r2, [pc, #108]	; (80053f8 <_printf_float+0x2ec>)
 800538a:	2301      	movs	r3, #1
 800538c:	4631      	mov	r1, r6
 800538e:	4628      	mov	r0, r5
 8005390:	47b8      	blx	r7
 8005392:	3001      	adds	r0, #1
 8005394:	f43f af19 	beq.w	80051ca <_printf_float+0xbe>
 8005398:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800539c:	4313      	orrs	r3, r2
 800539e:	d102      	bne.n	80053a6 <_printf_float+0x29a>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	07d9      	lsls	r1, r3, #31
 80053a4:	d5d8      	bpl.n	8005358 <_printf_float+0x24c>
 80053a6:	ee18 3a10 	vmov	r3, s16
 80053aa:	4652      	mov	r2, sl
 80053ac:	4631      	mov	r1, r6
 80053ae:	4628      	mov	r0, r5
 80053b0:	47b8      	blx	r7
 80053b2:	3001      	adds	r0, #1
 80053b4:	f43f af09 	beq.w	80051ca <_printf_float+0xbe>
 80053b8:	f04f 0900 	mov.w	r9, #0
 80053bc:	f104 0a1a 	add.w	sl, r4, #26
 80053c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c2:	425b      	negs	r3, r3
 80053c4:	454b      	cmp	r3, r9
 80053c6:	dc01      	bgt.n	80053cc <_printf_float+0x2c0>
 80053c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ca:	e792      	b.n	80052f2 <_printf_float+0x1e6>
 80053cc:	2301      	movs	r3, #1
 80053ce:	4652      	mov	r2, sl
 80053d0:	4631      	mov	r1, r6
 80053d2:	4628      	mov	r0, r5
 80053d4:	47b8      	blx	r7
 80053d6:	3001      	adds	r0, #1
 80053d8:	f43f aef7 	beq.w	80051ca <_printf_float+0xbe>
 80053dc:	f109 0901 	add.w	r9, r9, #1
 80053e0:	e7ee      	b.n	80053c0 <_printf_float+0x2b4>
 80053e2:	bf00      	nop
 80053e4:	7fefffff 	.word	0x7fefffff
 80053e8:	08007840 	.word	0x08007840
 80053ec:	08007844 	.word	0x08007844
 80053f0:	08007848 	.word	0x08007848
 80053f4:	0800784c 	.word	0x0800784c
 80053f8:	08007850 	.word	0x08007850
 80053fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005400:	429a      	cmp	r2, r3
 8005402:	bfa8      	it	ge
 8005404:	461a      	movge	r2, r3
 8005406:	2a00      	cmp	r2, #0
 8005408:	4691      	mov	r9, r2
 800540a:	dc37      	bgt.n	800547c <_printf_float+0x370>
 800540c:	f04f 0b00 	mov.w	fp, #0
 8005410:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005414:	f104 021a 	add.w	r2, r4, #26
 8005418:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800541a:	9305      	str	r3, [sp, #20]
 800541c:	eba3 0309 	sub.w	r3, r3, r9
 8005420:	455b      	cmp	r3, fp
 8005422:	dc33      	bgt.n	800548c <_printf_float+0x380>
 8005424:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005428:	429a      	cmp	r2, r3
 800542a:	db3b      	blt.n	80054a4 <_printf_float+0x398>
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	07da      	lsls	r2, r3, #31
 8005430:	d438      	bmi.n	80054a4 <_printf_float+0x398>
 8005432:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005436:	eba2 0903 	sub.w	r9, r2, r3
 800543a:	9b05      	ldr	r3, [sp, #20]
 800543c:	1ad2      	subs	r2, r2, r3
 800543e:	4591      	cmp	r9, r2
 8005440:	bfa8      	it	ge
 8005442:	4691      	movge	r9, r2
 8005444:	f1b9 0f00 	cmp.w	r9, #0
 8005448:	dc35      	bgt.n	80054b6 <_printf_float+0x3aa>
 800544a:	f04f 0800 	mov.w	r8, #0
 800544e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005452:	f104 0a1a 	add.w	sl, r4, #26
 8005456:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800545a:	1a9b      	subs	r3, r3, r2
 800545c:	eba3 0309 	sub.w	r3, r3, r9
 8005460:	4543      	cmp	r3, r8
 8005462:	f77f af79 	ble.w	8005358 <_printf_float+0x24c>
 8005466:	2301      	movs	r3, #1
 8005468:	4652      	mov	r2, sl
 800546a:	4631      	mov	r1, r6
 800546c:	4628      	mov	r0, r5
 800546e:	47b8      	blx	r7
 8005470:	3001      	adds	r0, #1
 8005472:	f43f aeaa 	beq.w	80051ca <_printf_float+0xbe>
 8005476:	f108 0801 	add.w	r8, r8, #1
 800547a:	e7ec      	b.n	8005456 <_printf_float+0x34a>
 800547c:	4613      	mov	r3, r2
 800547e:	4631      	mov	r1, r6
 8005480:	4642      	mov	r2, r8
 8005482:	4628      	mov	r0, r5
 8005484:	47b8      	blx	r7
 8005486:	3001      	adds	r0, #1
 8005488:	d1c0      	bne.n	800540c <_printf_float+0x300>
 800548a:	e69e      	b.n	80051ca <_printf_float+0xbe>
 800548c:	2301      	movs	r3, #1
 800548e:	4631      	mov	r1, r6
 8005490:	4628      	mov	r0, r5
 8005492:	9205      	str	r2, [sp, #20]
 8005494:	47b8      	blx	r7
 8005496:	3001      	adds	r0, #1
 8005498:	f43f ae97 	beq.w	80051ca <_printf_float+0xbe>
 800549c:	9a05      	ldr	r2, [sp, #20]
 800549e:	f10b 0b01 	add.w	fp, fp, #1
 80054a2:	e7b9      	b.n	8005418 <_printf_float+0x30c>
 80054a4:	ee18 3a10 	vmov	r3, s16
 80054a8:	4652      	mov	r2, sl
 80054aa:	4631      	mov	r1, r6
 80054ac:	4628      	mov	r0, r5
 80054ae:	47b8      	blx	r7
 80054b0:	3001      	adds	r0, #1
 80054b2:	d1be      	bne.n	8005432 <_printf_float+0x326>
 80054b4:	e689      	b.n	80051ca <_printf_float+0xbe>
 80054b6:	9a05      	ldr	r2, [sp, #20]
 80054b8:	464b      	mov	r3, r9
 80054ba:	4442      	add	r2, r8
 80054bc:	4631      	mov	r1, r6
 80054be:	4628      	mov	r0, r5
 80054c0:	47b8      	blx	r7
 80054c2:	3001      	adds	r0, #1
 80054c4:	d1c1      	bne.n	800544a <_printf_float+0x33e>
 80054c6:	e680      	b.n	80051ca <_printf_float+0xbe>
 80054c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054ca:	2a01      	cmp	r2, #1
 80054cc:	dc01      	bgt.n	80054d2 <_printf_float+0x3c6>
 80054ce:	07db      	lsls	r3, r3, #31
 80054d0:	d53a      	bpl.n	8005548 <_printf_float+0x43c>
 80054d2:	2301      	movs	r3, #1
 80054d4:	4642      	mov	r2, r8
 80054d6:	4631      	mov	r1, r6
 80054d8:	4628      	mov	r0, r5
 80054da:	47b8      	blx	r7
 80054dc:	3001      	adds	r0, #1
 80054de:	f43f ae74 	beq.w	80051ca <_printf_float+0xbe>
 80054e2:	ee18 3a10 	vmov	r3, s16
 80054e6:	4652      	mov	r2, sl
 80054e8:	4631      	mov	r1, r6
 80054ea:	4628      	mov	r0, r5
 80054ec:	47b8      	blx	r7
 80054ee:	3001      	adds	r0, #1
 80054f0:	f43f ae6b 	beq.w	80051ca <_printf_float+0xbe>
 80054f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054f8:	2200      	movs	r2, #0
 80054fa:	2300      	movs	r3, #0
 80054fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005500:	f7fb fae2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005504:	b9d8      	cbnz	r0, 800553e <_printf_float+0x432>
 8005506:	f10a 33ff 	add.w	r3, sl, #4294967295
 800550a:	f108 0201 	add.w	r2, r8, #1
 800550e:	4631      	mov	r1, r6
 8005510:	4628      	mov	r0, r5
 8005512:	47b8      	blx	r7
 8005514:	3001      	adds	r0, #1
 8005516:	d10e      	bne.n	8005536 <_printf_float+0x42a>
 8005518:	e657      	b.n	80051ca <_printf_float+0xbe>
 800551a:	2301      	movs	r3, #1
 800551c:	4652      	mov	r2, sl
 800551e:	4631      	mov	r1, r6
 8005520:	4628      	mov	r0, r5
 8005522:	47b8      	blx	r7
 8005524:	3001      	adds	r0, #1
 8005526:	f43f ae50 	beq.w	80051ca <_printf_float+0xbe>
 800552a:	f108 0801 	add.w	r8, r8, #1
 800552e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005530:	3b01      	subs	r3, #1
 8005532:	4543      	cmp	r3, r8
 8005534:	dcf1      	bgt.n	800551a <_printf_float+0x40e>
 8005536:	464b      	mov	r3, r9
 8005538:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800553c:	e6da      	b.n	80052f4 <_printf_float+0x1e8>
 800553e:	f04f 0800 	mov.w	r8, #0
 8005542:	f104 0a1a 	add.w	sl, r4, #26
 8005546:	e7f2      	b.n	800552e <_printf_float+0x422>
 8005548:	2301      	movs	r3, #1
 800554a:	4642      	mov	r2, r8
 800554c:	e7df      	b.n	800550e <_printf_float+0x402>
 800554e:	2301      	movs	r3, #1
 8005550:	464a      	mov	r2, r9
 8005552:	4631      	mov	r1, r6
 8005554:	4628      	mov	r0, r5
 8005556:	47b8      	blx	r7
 8005558:	3001      	adds	r0, #1
 800555a:	f43f ae36 	beq.w	80051ca <_printf_float+0xbe>
 800555e:	f108 0801 	add.w	r8, r8, #1
 8005562:	68e3      	ldr	r3, [r4, #12]
 8005564:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005566:	1a5b      	subs	r3, r3, r1
 8005568:	4543      	cmp	r3, r8
 800556a:	dcf0      	bgt.n	800554e <_printf_float+0x442>
 800556c:	e6f8      	b.n	8005360 <_printf_float+0x254>
 800556e:	f04f 0800 	mov.w	r8, #0
 8005572:	f104 0919 	add.w	r9, r4, #25
 8005576:	e7f4      	b.n	8005562 <_printf_float+0x456>

08005578 <_printf_common>:
 8005578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800557c:	4616      	mov	r6, r2
 800557e:	4699      	mov	r9, r3
 8005580:	688a      	ldr	r2, [r1, #8]
 8005582:	690b      	ldr	r3, [r1, #16]
 8005584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005588:	4293      	cmp	r3, r2
 800558a:	bfb8      	it	lt
 800558c:	4613      	movlt	r3, r2
 800558e:	6033      	str	r3, [r6, #0]
 8005590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005594:	4607      	mov	r7, r0
 8005596:	460c      	mov	r4, r1
 8005598:	b10a      	cbz	r2, 800559e <_printf_common+0x26>
 800559a:	3301      	adds	r3, #1
 800559c:	6033      	str	r3, [r6, #0]
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	0699      	lsls	r1, r3, #26
 80055a2:	bf42      	ittt	mi
 80055a4:	6833      	ldrmi	r3, [r6, #0]
 80055a6:	3302      	addmi	r3, #2
 80055a8:	6033      	strmi	r3, [r6, #0]
 80055aa:	6825      	ldr	r5, [r4, #0]
 80055ac:	f015 0506 	ands.w	r5, r5, #6
 80055b0:	d106      	bne.n	80055c0 <_printf_common+0x48>
 80055b2:	f104 0a19 	add.w	sl, r4, #25
 80055b6:	68e3      	ldr	r3, [r4, #12]
 80055b8:	6832      	ldr	r2, [r6, #0]
 80055ba:	1a9b      	subs	r3, r3, r2
 80055bc:	42ab      	cmp	r3, r5
 80055be:	dc26      	bgt.n	800560e <_printf_common+0x96>
 80055c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055c4:	1e13      	subs	r3, r2, #0
 80055c6:	6822      	ldr	r2, [r4, #0]
 80055c8:	bf18      	it	ne
 80055ca:	2301      	movne	r3, #1
 80055cc:	0692      	lsls	r2, r2, #26
 80055ce:	d42b      	bmi.n	8005628 <_printf_common+0xb0>
 80055d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055d4:	4649      	mov	r1, r9
 80055d6:	4638      	mov	r0, r7
 80055d8:	47c0      	blx	r8
 80055da:	3001      	adds	r0, #1
 80055dc:	d01e      	beq.n	800561c <_printf_common+0xa4>
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	6922      	ldr	r2, [r4, #16]
 80055e2:	f003 0306 	and.w	r3, r3, #6
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	bf02      	ittt	eq
 80055ea:	68e5      	ldreq	r5, [r4, #12]
 80055ec:	6833      	ldreq	r3, [r6, #0]
 80055ee:	1aed      	subeq	r5, r5, r3
 80055f0:	68a3      	ldr	r3, [r4, #8]
 80055f2:	bf0c      	ite	eq
 80055f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055f8:	2500      	movne	r5, #0
 80055fa:	4293      	cmp	r3, r2
 80055fc:	bfc4      	itt	gt
 80055fe:	1a9b      	subgt	r3, r3, r2
 8005600:	18ed      	addgt	r5, r5, r3
 8005602:	2600      	movs	r6, #0
 8005604:	341a      	adds	r4, #26
 8005606:	42b5      	cmp	r5, r6
 8005608:	d11a      	bne.n	8005640 <_printf_common+0xc8>
 800560a:	2000      	movs	r0, #0
 800560c:	e008      	b.n	8005620 <_printf_common+0xa8>
 800560e:	2301      	movs	r3, #1
 8005610:	4652      	mov	r2, sl
 8005612:	4649      	mov	r1, r9
 8005614:	4638      	mov	r0, r7
 8005616:	47c0      	blx	r8
 8005618:	3001      	adds	r0, #1
 800561a:	d103      	bne.n	8005624 <_printf_common+0xac>
 800561c:	f04f 30ff 	mov.w	r0, #4294967295
 8005620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005624:	3501      	adds	r5, #1
 8005626:	e7c6      	b.n	80055b6 <_printf_common+0x3e>
 8005628:	18e1      	adds	r1, r4, r3
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	2030      	movs	r0, #48	; 0x30
 800562e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005632:	4422      	add	r2, r4
 8005634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800563c:	3302      	adds	r3, #2
 800563e:	e7c7      	b.n	80055d0 <_printf_common+0x58>
 8005640:	2301      	movs	r3, #1
 8005642:	4622      	mov	r2, r4
 8005644:	4649      	mov	r1, r9
 8005646:	4638      	mov	r0, r7
 8005648:	47c0      	blx	r8
 800564a:	3001      	adds	r0, #1
 800564c:	d0e6      	beq.n	800561c <_printf_common+0xa4>
 800564e:	3601      	adds	r6, #1
 8005650:	e7d9      	b.n	8005606 <_printf_common+0x8e>
	...

08005654 <_printf_i>:
 8005654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005658:	7e0f      	ldrb	r7, [r1, #24]
 800565a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800565c:	2f78      	cmp	r7, #120	; 0x78
 800565e:	4691      	mov	r9, r2
 8005660:	4680      	mov	r8, r0
 8005662:	460c      	mov	r4, r1
 8005664:	469a      	mov	sl, r3
 8005666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800566a:	d807      	bhi.n	800567c <_printf_i+0x28>
 800566c:	2f62      	cmp	r7, #98	; 0x62
 800566e:	d80a      	bhi.n	8005686 <_printf_i+0x32>
 8005670:	2f00      	cmp	r7, #0
 8005672:	f000 80d4 	beq.w	800581e <_printf_i+0x1ca>
 8005676:	2f58      	cmp	r7, #88	; 0x58
 8005678:	f000 80c0 	beq.w	80057fc <_printf_i+0x1a8>
 800567c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005684:	e03a      	b.n	80056fc <_printf_i+0xa8>
 8005686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800568a:	2b15      	cmp	r3, #21
 800568c:	d8f6      	bhi.n	800567c <_printf_i+0x28>
 800568e:	a101      	add	r1, pc, #4	; (adr r1, 8005694 <_printf_i+0x40>)
 8005690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005694:	080056ed 	.word	0x080056ed
 8005698:	08005701 	.word	0x08005701
 800569c:	0800567d 	.word	0x0800567d
 80056a0:	0800567d 	.word	0x0800567d
 80056a4:	0800567d 	.word	0x0800567d
 80056a8:	0800567d 	.word	0x0800567d
 80056ac:	08005701 	.word	0x08005701
 80056b0:	0800567d 	.word	0x0800567d
 80056b4:	0800567d 	.word	0x0800567d
 80056b8:	0800567d 	.word	0x0800567d
 80056bc:	0800567d 	.word	0x0800567d
 80056c0:	08005805 	.word	0x08005805
 80056c4:	0800572d 	.word	0x0800572d
 80056c8:	080057bf 	.word	0x080057bf
 80056cc:	0800567d 	.word	0x0800567d
 80056d0:	0800567d 	.word	0x0800567d
 80056d4:	08005827 	.word	0x08005827
 80056d8:	0800567d 	.word	0x0800567d
 80056dc:	0800572d 	.word	0x0800572d
 80056e0:	0800567d 	.word	0x0800567d
 80056e4:	0800567d 	.word	0x0800567d
 80056e8:	080057c7 	.word	0x080057c7
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	1d1a      	adds	r2, r3, #4
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	602a      	str	r2, [r5, #0]
 80056f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056fc:	2301      	movs	r3, #1
 80056fe:	e09f      	b.n	8005840 <_printf_i+0x1ec>
 8005700:	6820      	ldr	r0, [r4, #0]
 8005702:	682b      	ldr	r3, [r5, #0]
 8005704:	0607      	lsls	r7, r0, #24
 8005706:	f103 0104 	add.w	r1, r3, #4
 800570a:	6029      	str	r1, [r5, #0]
 800570c:	d501      	bpl.n	8005712 <_printf_i+0xbe>
 800570e:	681e      	ldr	r6, [r3, #0]
 8005710:	e003      	b.n	800571a <_printf_i+0xc6>
 8005712:	0646      	lsls	r6, r0, #25
 8005714:	d5fb      	bpl.n	800570e <_printf_i+0xba>
 8005716:	f9b3 6000 	ldrsh.w	r6, [r3]
 800571a:	2e00      	cmp	r6, #0
 800571c:	da03      	bge.n	8005726 <_printf_i+0xd2>
 800571e:	232d      	movs	r3, #45	; 0x2d
 8005720:	4276      	negs	r6, r6
 8005722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005726:	485a      	ldr	r0, [pc, #360]	; (8005890 <_printf_i+0x23c>)
 8005728:	230a      	movs	r3, #10
 800572a:	e012      	b.n	8005752 <_printf_i+0xfe>
 800572c:	682b      	ldr	r3, [r5, #0]
 800572e:	6820      	ldr	r0, [r4, #0]
 8005730:	1d19      	adds	r1, r3, #4
 8005732:	6029      	str	r1, [r5, #0]
 8005734:	0605      	lsls	r5, r0, #24
 8005736:	d501      	bpl.n	800573c <_printf_i+0xe8>
 8005738:	681e      	ldr	r6, [r3, #0]
 800573a:	e002      	b.n	8005742 <_printf_i+0xee>
 800573c:	0641      	lsls	r1, r0, #25
 800573e:	d5fb      	bpl.n	8005738 <_printf_i+0xe4>
 8005740:	881e      	ldrh	r6, [r3, #0]
 8005742:	4853      	ldr	r0, [pc, #332]	; (8005890 <_printf_i+0x23c>)
 8005744:	2f6f      	cmp	r7, #111	; 0x6f
 8005746:	bf0c      	ite	eq
 8005748:	2308      	moveq	r3, #8
 800574a:	230a      	movne	r3, #10
 800574c:	2100      	movs	r1, #0
 800574e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005752:	6865      	ldr	r5, [r4, #4]
 8005754:	60a5      	str	r5, [r4, #8]
 8005756:	2d00      	cmp	r5, #0
 8005758:	bfa2      	ittt	ge
 800575a:	6821      	ldrge	r1, [r4, #0]
 800575c:	f021 0104 	bicge.w	r1, r1, #4
 8005760:	6021      	strge	r1, [r4, #0]
 8005762:	b90e      	cbnz	r6, 8005768 <_printf_i+0x114>
 8005764:	2d00      	cmp	r5, #0
 8005766:	d04b      	beq.n	8005800 <_printf_i+0x1ac>
 8005768:	4615      	mov	r5, r2
 800576a:	fbb6 f1f3 	udiv	r1, r6, r3
 800576e:	fb03 6711 	mls	r7, r3, r1, r6
 8005772:	5dc7      	ldrb	r7, [r0, r7]
 8005774:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005778:	4637      	mov	r7, r6
 800577a:	42bb      	cmp	r3, r7
 800577c:	460e      	mov	r6, r1
 800577e:	d9f4      	bls.n	800576a <_printf_i+0x116>
 8005780:	2b08      	cmp	r3, #8
 8005782:	d10b      	bne.n	800579c <_printf_i+0x148>
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	07de      	lsls	r6, r3, #31
 8005788:	d508      	bpl.n	800579c <_printf_i+0x148>
 800578a:	6923      	ldr	r3, [r4, #16]
 800578c:	6861      	ldr	r1, [r4, #4]
 800578e:	4299      	cmp	r1, r3
 8005790:	bfde      	ittt	le
 8005792:	2330      	movle	r3, #48	; 0x30
 8005794:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005798:	f105 35ff 	addle.w	r5, r5, #4294967295
 800579c:	1b52      	subs	r2, r2, r5
 800579e:	6122      	str	r2, [r4, #16]
 80057a0:	f8cd a000 	str.w	sl, [sp]
 80057a4:	464b      	mov	r3, r9
 80057a6:	aa03      	add	r2, sp, #12
 80057a8:	4621      	mov	r1, r4
 80057aa:	4640      	mov	r0, r8
 80057ac:	f7ff fee4 	bl	8005578 <_printf_common>
 80057b0:	3001      	adds	r0, #1
 80057b2:	d14a      	bne.n	800584a <_printf_i+0x1f6>
 80057b4:	f04f 30ff 	mov.w	r0, #4294967295
 80057b8:	b004      	add	sp, #16
 80057ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	f043 0320 	orr.w	r3, r3, #32
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	4833      	ldr	r0, [pc, #204]	; (8005894 <_printf_i+0x240>)
 80057c8:	2778      	movs	r7, #120	; 0x78
 80057ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	6829      	ldr	r1, [r5, #0]
 80057d2:	061f      	lsls	r7, r3, #24
 80057d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80057d8:	d402      	bmi.n	80057e0 <_printf_i+0x18c>
 80057da:	065f      	lsls	r7, r3, #25
 80057dc:	bf48      	it	mi
 80057de:	b2b6      	uxthmi	r6, r6
 80057e0:	07df      	lsls	r7, r3, #31
 80057e2:	bf48      	it	mi
 80057e4:	f043 0320 	orrmi.w	r3, r3, #32
 80057e8:	6029      	str	r1, [r5, #0]
 80057ea:	bf48      	it	mi
 80057ec:	6023      	strmi	r3, [r4, #0]
 80057ee:	b91e      	cbnz	r6, 80057f8 <_printf_i+0x1a4>
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	f023 0320 	bic.w	r3, r3, #32
 80057f6:	6023      	str	r3, [r4, #0]
 80057f8:	2310      	movs	r3, #16
 80057fa:	e7a7      	b.n	800574c <_printf_i+0xf8>
 80057fc:	4824      	ldr	r0, [pc, #144]	; (8005890 <_printf_i+0x23c>)
 80057fe:	e7e4      	b.n	80057ca <_printf_i+0x176>
 8005800:	4615      	mov	r5, r2
 8005802:	e7bd      	b.n	8005780 <_printf_i+0x12c>
 8005804:	682b      	ldr	r3, [r5, #0]
 8005806:	6826      	ldr	r6, [r4, #0]
 8005808:	6961      	ldr	r1, [r4, #20]
 800580a:	1d18      	adds	r0, r3, #4
 800580c:	6028      	str	r0, [r5, #0]
 800580e:	0635      	lsls	r5, r6, #24
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	d501      	bpl.n	8005818 <_printf_i+0x1c4>
 8005814:	6019      	str	r1, [r3, #0]
 8005816:	e002      	b.n	800581e <_printf_i+0x1ca>
 8005818:	0670      	lsls	r0, r6, #25
 800581a:	d5fb      	bpl.n	8005814 <_printf_i+0x1c0>
 800581c:	8019      	strh	r1, [r3, #0]
 800581e:	2300      	movs	r3, #0
 8005820:	6123      	str	r3, [r4, #16]
 8005822:	4615      	mov	r5, r2
 8005824:	e7bc      	b.n	80057a0 <_printf_i+0x14c>
 8005826:	682b      	ldr	r3, [r5, #0]
 8005828:	1d1a      	adds	r2, r3, #4
 800582a:	602a      	str	r2, [r5, #0]
 800582c:	681d      	ldr	r5, [r3, #0]
 800582e:	6862      	ldr	r2, [r4, #4]
 8005830:	2100      	movs	r1, #0
 8005832:	4628      	mov	r0, r5
 8005834:	f7fa fccc 	bl	80001d0 <memchr>
 8005838:	b108      	cbz	r0, 800583e <_printf_i+0x1ea>
 800583a:	1b40      	subs	r0, r0, r5
 800583c:	6060      	str	r0, [r4, #4]
 800583e:	6863      	ldr	r3, [r4, #4]
 8005840:	6123      	str	r3, [r4, #16]
 8005842:	2300      	movs	r3, #0
 8005844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005848:	e7aa      	b.n	80057a0 <_printf_i+0x14c>
 800584a:	6923      	ldr	r3, [r4, #16]
 800584c:	462a      	mov	r2, r5
 800584e:	4649      	mov	r1, r9
 8005850:	4640      	mov	r0, r8
 8005852:	47d0      	blx	sl
 8005854:	3001      	adds	r0, #1
 8005856:	d0ad      	beq.n	80057b4 <_printf_i+0x160>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	079b      	lsls	r3, r3, #30
 800585c:	d413      	bmi.n	8005886 <_printf_i+0x232>
 800585e:	68e0      	ldr	r0, [r4, #12]
 8005860:	9b03      	ldr	r3, [sp, #12]
 8005862:	4298      	cmp	r0, r3
 8005864:	bfb8      	it	lt
 8005866:	4618      	movlt	r0, r3
 8005868:	e7a6      	b.n	80057b8 <_printf_i+0x164>
 800586a:	2301      	movs	r3, #1
 800586c:	4632      	mov	r2, r6
 800586e:	4649      	mov	r1, r9
 8005870:	4640      	mov	r0, r8
 8005872:	47d0      	blx	sl
 8005874:	3001      	adds	r0, #1
 8005876:	d09d      	beq.n	80057b4 <_printf_i+0x160>
 8005878:	3501      	adds	r5, #1
 800587a:	68e3      	ldr	r3, [r4, #12]
 800587c:	9903      	ldr	r1, [sp, #12]
 800587e:	1a5b      	subs	r3, r3, r1
 8005880:	42ab      	cmp	r3, r5
 8005882:	dcf2      	bgt.n	800586a <_printf_i+0x216>
 8005884:	e7eb      	b.n	800585e <_printf_i+0x20a>
 8005886:	2500      	movs	r5, #0
 8005888:	f104 0619 	add.w	r6, r4, #25
 800588c:	e7f5      	b.n	800587a <_printf_i+0x226>
 800588e:	bf00      	nop
 8005890:	08007852 	.word	0x08007852
 8005894:	08007863 	.word	0x08007863

08005898 <std>:
 8005898:	2300      	movs	r3, #0
 800589a:	b510      	push	{r4, lr}
 800589c:	4604      	mov	r4, r0
 800589e:	e9c0 3300 	strd	r3, r3, [r0]
 80058a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058a6:	6083      	str	r3, [r0, #8]
 80058a8:	8181      	strh	r1, [r0, #12]
 80058aa:	6643      	str	r3, [r0, #100]	; 0x64
 80058ac:	81c2      	strh	r2, [r0, #14]
 80058ae:	6183      	str	r3, [r0, #24]
 80058b0:	4619      	mov	r1, r3
 80058b2:	2208      	movs	r2, #8
 80058b4:	305c      	adds	r0, #92	; 0x5c
 80058b6:	f000 f8f4 	bl	8005aa2 <memset>
 80058ba:	4b0d      	ldr	r3, [pc, #52]	; (80058f0 <std+0x58>)
 80058bc:	6263      	str	r3, [r4, #36]	; 0x24
 80058be:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <std+0x5c>)
 80058c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80058c2:	4b0d      	ldr	r3, [pc, #52]	; (80058f8 <std+0x60>)
 80058c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058c6:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <std+0x64>)
 80058c8:	6323      	str	r3, [r4, #48]	; 0x30
 80058ca:	4b0d      	ldr	r3, [pc, #52]	; (8005900 <std+0x68>)
 80058cc:	6224      	str	r4, [r4, #32]
 80058ce:	429c      	cmp	r4, r3
 80058d0:	d006      	beq.n	80058e0 <std+0x48>
 80058d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80058d6:	4294      	cmp	r4, r2
 80058d8:	d002      	beq.n	80058e0 <std+0x48>
 80058da:	33d0      	adds	r3, #208	; 0xd0
 80058dc:	429c      	cmp	r4, r3
 80058de:	d105      	bne.n	80058ec <std+0x54>
 80058e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e8:	f000 b968 	b.w	8005bbc <__retarget_lock_init_recursive>
 80058ec:	bd10      	pop	{r4, pc}
 80058ee:	bf00      	nop
 80058f0:	08005a1d 	.word	0x08005a1d
 80058f4:	08005a3f 	.word	0x08005a3f
 80058f8:	08005a77 	.word	0x08005a77
 80058fc:	08005a9b 	.word	0x08005a9b
 8005900:	20000354 	.word	0x20000354

08005904 <stdio_exit_handler>:
 8005904:	4a02      	ldr	r2, [pc, #8]	; (8005910 <stdio_exit_handler+0xc>)
 8005906:	4903      	ldr	r1, [pc, #12]	; (8005914 <stdio_exit_handler+0x10>)
 8005908:	4803      	ldr	r0, [pc, #12]	; (8005918 <stdio_exit_handler+0x14>)
 800590a:	f000 b869 	b.w	80059e0 <_fwalk_sglue>
 800590e:	bf00      	nop
 8005910:	2000000c 	.word	0x2000000c
 8005914:	08007159 	.word	0x08007159
 8005918:	20000018 	.word	0x20000018

0800591c <cleanup_stdio>:
 800591c:	6841      	ldr	r1, [r0, #4]
 800591e:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <cleanup_stdio+0x34>)
 8005920:	4299      	cmp	r1, r3
 8005922:	b510      	push	{r4, lr}
 8005924:	4604      	mov	r4, r0
 8005926:	d001      	beq.n	800592c <cleanup_stdio+0x10>
 8005928:	f001 fc16 	bl	8007158 <_fflush_r>
 800592c:	68a1      	ldr	r1, [r4, #8]
 800592e:	4b09      	ldr	r3, [pc, #36]	; (8005954 <cleanup_stdio+0x38>)
 8005930:	4299      	cmp	r1, r3
 8005932:	d002      	beq.n	800593a <cleanup_stdio+0x1e>
 8005934:	4620      	mov	r0, r4
 8005936:	f001 fc0f 	bl	8007158 <_fflush_r>
 800593a:	68e1      	ldr	r1, [r4, #12]
 800593c:	4b06      	ldr	r3, [pc, #24]	; (8005958 <cleanup_stdio+0x3c>)
 800593e:	4299      	cmp	r1, r3
 8005940:	d004      	beq.n	800594c <cleanup_stdio+0x30>
 8005942:	4620      	mov	r0, r4
 8005944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005948:	f001 bc06 	b.w	8007158 <_fflush_r>
 800594c:	bd10      	pop	{r4, pc}
 800594e:	bf00      	nop
 8005950:	20000354 	.word	0x20000354
 8005954:	200003bc 	.word	0x200003bc
 8005958:	20000424 	.word	0x20000424

0800595c <global_stdio_init.part.0>:
 800595c:	b510      	push	{r4, lr}
 800595e:	4b0b      	ldr	r3, [pc, #44]	; (800598c <global_stdio_init.part.0+0x30>)
 8005960:	4c0b      	ldr	r4, [pc, #44]	; (8005990 <global_stdio_init.part.0+0x34>)
 8005962:	4a0c      	ldr	r2, [pc, #48]	; (8005994 <global_stdio_init.part.0+0x38>)
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	4620      	mov	r0, r4
 8005968:	2200      	movs	r2, #0
 800596a:	2104      	movs	r1, #4
 800596c:	f7ff ff94 	bl	8005898 <std>
 8005970:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005974:	2201      	movs	r2, #1
 8005976:	2109      	movs	r1, #9
 8005978:	f7ff ff8e 	bl	8005898 <std>
 800597c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005980:	2202      	movs	r2, #2
 8005982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005986:	2112      	movs	r1, #18
 8005988:	f7ff bf86 	b.w	8005898 <std>
 800598c:	2000048c 	.word	0x2000048c
 8005990:	20000354 	.word	0x20000354
 8005994:	08005905 	.word	0x08005905

08005998 <__sfp_lock_acquire>:
 8005998:	4801      	ldr	r0, [pc, #4]	; (80059a0 <__sfp_lock_acquire+0x8>)
 800599a:	f000 b910 	b.w	8005bbe <__retarget_lock_acquire_recursive>
 800599e:	bf00      	nop
 80059a0:	20000495 	.word	0x20000495

080059a4 <__sfp_lock_release>:
 80059a4:	4801      	ldr	r0, [pc, #4]	; (80059ac <__sfp_lock_release+0x8>)
 80059a6:	f000 b90b 	b.w	8005bc0 <__retarget_lock_release_recursive>
 80059aa:	bf00      	nop
 80059ac:	20000495 	.word	0x20000495

080059b0 <__sinit>:
 80059b0:	b510      	push	{r4, lr}
 80059b2:	4604      	mov	r4, r0
 80059b4:	f7ff fff0 	bl	8005998 <__sfp_lock_acquire>
 80059b8:	6a23      	ldr	r3, [r4, #32]
 80059ba:	b11b      	cbz	r3, 80059c4 <__sinit+0x14>
 80059bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c0:	f7ff bff0 	b.w	80059a4 <__sfp_lock_release>
 80059c4:	4b04      	ldr	r3, [pc, #16]	; (80059d8 <__sinit+0x28>)
 80059c6:	6223      	str	r3, [r4, #32]
 80059c8:	4b04      	ldr	r3, [pc, #16]	; (80059dc <__sinit+0x2c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f5      	bne.n	80059bc <__sinit+0xc>
 80059d0:	f7ff ffc4 	bl	800595c <global_stdio_init.part.0>
 80059d4:	e7f2      	b.n	80059bc <__sinit+0xc>
 80059d6:	bf00      	nop
 80059d8:	0800591d 	.word	0x0800591d
 80059dc:	2000048c 	.word	0x2000048c

080059e0 <_fwalk_sglue>:
 80059e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e4:	4607      	mov	r7, r0
 80059e6:	4688      	mov	r8, r1
 80059e8:	4614      	mov	r4, r2
 80059ea:	2600      	movs	r6, #0
 80059ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059f0:	f1b9 0901 	subs.w	r9, r9, #1
 80059f4:	d505      	bpl.n	8005a02 <_fwalk_sglue+0x22>
 80059f6:	6824      	ldr	r4, [r4, #0]
 80059f8:	2c00      	cmp	r4, #0
 80059fa:	d1f7      	bne.n	80059ec <_fwalk_sglue+0xc>
 80059fc:	4630      	mov	r0, r6
 80059fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a02:	89ab      	ldrh	r3, [r5, #12]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d907      	bls.n	8005a18 <_fwalk_sglue+0x38>
 8005a08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	d003      	beq.n	8005a18 <_fwalk_sglue+0x38>
 8005a10:	4629      	mov	r1, r5
 8005a12:	4638      	mov	r0, r7
 8005a14:	47c0      	blx	r8
 8005a16:	4306      	orrs	r6, r0
 8005a18:	3568      	adds	r5, #104	; 0x68
 8005a1a:	e7e9      	b.n	80059f0 <_fwalk_sglue+0x10>

08005a1c <__sread>:
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	460c      	mov	r4, r1
 8005a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a24:	f000 f86c 	bl	8005b00 <_read_r>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	bfab      	itete	ge
 8005a2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a2e:	89a3      	ldrhlt	r3, [r4, #12]
 8005a30:	181b      	addge	r3, r3, r0
 8005a32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a36:	bfac      	ite	ge
 8005a38:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a3a:	81a3      	strhlt	r3, [r4, #12]
 8005a3c:	bd10      	pop	{r4, pc}

08005a3e <__swrite>:
 8005a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a42:	461f      	mov	r7, r3
 8005a44:	898b      	ldrh	r3, [r1, #12]
 8005a46:	05db      	lsls	r3, r3, #23
 8005a48:	4605      	mov	r5, r0
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	4616      	mov	r6, r2
 8005a4e:	d505      	bpl.n	8005a5c <__swrite+0x1e>
 8005a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a54:	2302      	movs	r3, #2
 8005a56:	2200      	movs	r2, #0
 8005a58:	f000 f840 	bl	8005adc <_lseek_r>
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a66:	81a3      	strh	r3, [r4, #12]
 8005a68:	4632      	mov	r2, r6
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a72:	f000 b867 	b.w	8005b44 <_write_r>

08005a76 <__sseek>:
 8005a76:	b510      	push	{r4, lr}
 8005a78:	460c      	mov	r4, r1
 8005a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7e:	f000 f82d 	bl	8005adc <_lseek_r>
 8005a82:	1c43      	adds	r3, r0, #1
 8005a84:	89a3      	ldrh	r3, [r4, #12]
 8005a86:	bf15      	itete	ne
 8005a88:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a92:	81a3      	strheq	r3, [r4, #12]
 8005a94:	bf18      	it	ne
 8005a96:	81a3      	strhne	r3, [r4, #12]
 8005a98:	bd10      	pop	{r4, pc}

08005a9a <__sclose>:
 8005a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a9e:	f000 b80d 	b.w	8005abc <_close_r>

08005aa2 <memset>:
 8005aa2:	4402      	add	r2, r0
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d100      	bne.n	8005aac <memset+0xa>
 8005aaa:	4770      	bx	lr
 8005aac:	f803 1b01 	strb.w	r1, [r3], #1
 8005ab0:	e7f9      	b.n	8005aa6 <memset+0x4>
	...

08005ab4 <_localeconv_r>:
 8005ab4:	4800      	ldr	r0, [pc, #0]	; (8005ab8 <_localeconv_r+0x4>)
 8005ab6:	4770      	bx	lr
 8005ab8:	20000158 	.word	0x20000158

08005abc <_close_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4d06      	ldr	r5, [pc, #24]	; (8005ad8 <_close_r+0x1c>)
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	4608      	mov	r0, r1
 8005ac6:	602b      	str	r3, [r5, #0]
 8005ac8:	f7fb fd23 	bl	8001512 <_close>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_close_r+0x1a>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_close_r+0x1a>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	20000490 	.word	0x20000490

08005adc <_lseek_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d07      	ldr	r5, [pc, #28]	; (8005afc <_lseek_r+0x20>)
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	4608      	mov	r0, r1
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	602a      	str	r2, [r5, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f7fb fd38 	bl	8001560 <_lseek>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_lseek_r+0x1e>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_lseek_r+0x1e>
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	20000490 	.word	0x20000490

08005b00 <_read_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4d07      	ldr	r5, [pc, #28]	; (8005b20 <_read_r+0x20>)
 8005b04:	4604      	mov	r4, r0
 8005b06:	4608      	mov	r0, r1
 8005b08:	4611      	mov	r1, r2
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	602a      	str	r2, [r5, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f7fb fcc6 	bl	80014a0 <_read>
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	d102      	bne.n	8005b1e <_read_r+0x1e>
 8005b18:	682b      	ldr	r3, [r5, #0]
 8005b1a:	b103      	cbz	r3, 8005b1e <_read_r+0x1e>
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	bd38      	pop	{r3, r4, r5, pc}
 8005b20:	20000490 	.word	0x20000490

08005b24 <_sbrk_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	4d06      	ldr	r5, [pc, #24]	; (8005b40 <_sbrk_r+0x1c>)
 8005b28:	2300      	movs	r3, #0
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	4608      	mov	r0, r1
 8005b2e:	602b      	str	r3, [r5, #0]
 8005b30:	f7fb fd24 	bl	800157c <_sbrk>
 8005b34:	1c43      	adds	r3, r0, #1
 8005b36:	d102      	bne.n	8005b3e <_sbrk_r+0x1a>
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	b103      	cbz	r3, 8005b3e <_sbrk_r+0x1a>
 8005b3c:	6023      	str	r3, [r4, #0]
 8005b3e:	bd38      	pop	{r3, r4, r5, pc}
 8005b40:	20000490 	.word	0x20000490

08005b44 <_write_r>:
 8005b44:	b538      	push	{r3, r4, r5, lr}
 8005b46:	4d07      	ldr	r5, [pc, #28]	; (8005b64 <_write_r+0x20>)
 8005b48:	4604      	mov	r4, r0
 8005b4a:	4608      	mov	r0, r1
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	2200      	movs	r2, #0
 8005b50:	602a      	str	r2, [r5, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	f7fb fcc1 	bl	80014da <_write>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	d102      	bne.n	8005b62 <_write_r+0x1e>
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	b103      	cbz	r3, 8005b62 <_write_r+0x1e>
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	20000490 	.word	0x20000490

08005b68 <__errno>:
 8005b68:	4b01      	ldr	r3, [pc, #4]	; (8005b70 <__errno+0x8>)
 8005b6a:	6818      	ldr	r0, [r3, #0]
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	20000064 	.word	0x20000064

08005b74 <__libc_init_array>:
 8005b74:	b570      	push	{r4, r5, r6, lr}
 8005b76:	4d0d      	ldr	r5, [pc, #52]	; (8005bac <__libc_init_array+0x38>)
 8005b78:	4c0d      	ldr	r4, [pc, #52]	; (8005bb0 <__libc_init_array+0x3c>)
 8005b7a:	1b64      	subs	r4, r4, r5
 8005b7c:	10a4      	asrs	r4, r4, #2
 8005b7e:	2600      	movs	r6, #0
 8005b80:	42a6      	cmp	r6, r4
 8005b82:	d109      	bne.n	8005b98 <__libc_init_array+0x24>
 8005b84:	4d0b      	ldr	r5, [pc, #44]	; (8005bb4 <__libc_init_array+0x40>)
 8005b86:	4c0c      	ldr	r4, [pc, #48]	; (8005bb8 <__libc_init_array+0x44>)
 8005b88:	f001 fe2a 	bl	80077e0 <_init>
 8005b8c:	1b64      	subs	r4, r4, r5
 8005b8e:	10a4      	asrs	r4, r4, #2
 8005b90:	2600      	movs	r6, #0
 8005b92:	42a6      	cmp	r6, r4
 8005b94:	d105      	bne.n	8005ba2 <__libc_init_array+0x2e>
 8005b96:	bd70      	pop	{r4, r5, r6, pc}
 8005b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b9c:	4798      	blx	r3
 8005b9e:	3601      	adds	r6, #1
 8005ba0:	e7ee      	b.n	8005b80 <__libc_init_array+0xc>
 8005ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba6:	4798      	blx	r3
 8005ba8:	3601      	adds	r6, #1
 8005baa:	e7f2      	b.n	8005b92 <__libc_init_array+0x1e>
 8005bac:	08007bbc 	.word	0x08007bbc
 8005bb0:	08007bbc 	.word	0x08007bbc
 8005bb4:	08007bbc 	.word	0x08007bbc
 8005bb8:	08007bc0 	.word	0x08007bc0

08005bbc <__retarget_lock_init_recursive>:
 8005bbc:	4770      	bx	lr

08005bbe <__retarget_lock_acquire_recursive>:
 8005bbe:	4770      	bx	lr

08005bc0 <__retarget_lock_release_recursive>:
 8005bc0:	4770      	bx	lr

08005bc2 <quorem>:
 8005bc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc6:	6903      	ldr	r3, [r0, #16]
 8005bc8:	690c      	ldr	r4, [r1, #16]
 8005bca:	42a3      	cmp	r3, r4
 8005bcc:	4607      	mov	r7, r0
 8005bce:	db7e      	blt.n	8005cce <quorem+0x10c>
 8005bd0:	3c01      	subs	r4, #1
 8005bd2:	f101 0814 	add.w	r8, r1, #20
 8005bd6:	f100 0514 	add.w	r5, r0, #20
 8005bda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bde:	9301      	str	r3, [sp, #4]
 8005be0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005be4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005be8:	3301      	adds	r3, #1
 8005bea:	429a      	cmp	r2, r3
 8005bec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005bf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005bf4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005bf8:	d331      	bcc.n	8005c5e <quorem+0x9c>
 8005bfa:	f04f 0e00 	mov.w	lr, #0
 8005bfe:	4640      	mov	r0, r8
 8005c00:	46ac      	mov	ip, r5
 8005c02:	46f2      	mov	sl, lr
 8005c04:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c08:	b293      	uxth	r3, r2
 8005c0a:	fb06 e303 	mla	r3, r6, r3, lr
 8005c0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c12:	0c1a      	lsrs	r2, r3, #16
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	ebaa 0303 	sub.w	r3, sl, r3
 8005c1a:	f8dc a000 	ldr.w	sl, [ip]
 8005c1e:	fa13 f38a 	uxtah	r3, r3, sl
 8005c22:	fb06 220e 	mla	r2, r6, lr, r2
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	9b00      	ldr	r3, [sp, #0]
 8005c2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c2e:	b292      	uxth	r2, r2
 8005c30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c38:	f8bd 3000 	ldrh.w	r3, [sp]
 8005c3c:	4581      	cmp	r9, r0
 8005c3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c42:	f84c 3b04 	str.w	r3, [ip], #4
 8005c46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c4a:	d2db      	bcs.n	8005c04 <quorem+0x42>
 8005c4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c50:	b92b      	cbnz	r3, 8005c5e <quorem+0x9c>
 8005c52:	9b01      	ldr	r3, [sp, #4]
 8005c54:	3b04      	subs	r3, #4
 8005c56:	429d      	cmp	r5, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	d32c      	bcc.n	8005cb6 <quorem+0xf4>
 8005c5c:	613c      	str	r4, [r7, #16]
 8005c5e:	4638      	mov	r0, r7
 8005c60:	f001 f8f4 	bl	8006e4c <__mcmp>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	db22      	blt.n	8005cae <quorem+0xec>
 8005c68:	3601      	adds	r6, #1
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c72:	f8d1 c000 	ldr.w	ip, [r1]
 8005c76:	b293      	uxth	r3, r2
 8005c78:	1ac3      	subs	r3, r0, r3
 8005c7a:	0c12      	lsrs	r2, r2, #16
 8005c7c:	fa13 f38c 	uxtah	r3, r3, ip
 8005c80:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005c84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c8e:	45c1      	cmp	r9, r8
 8005c90:	f841 3b04 	str.w	r3, [r1], #4
 8005c94:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c98:	d2e9      	bcs.n	8005c6e <quorem+0xac>
 8005c9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ca2:	b922      	cbnz	r2, 8005cae <quorem+0xec>
 8005ca4:	3b04      	subs	r3, #4
 8005ca6:	429d      	cmp	r5, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	d30a      	bcc.n	8005cc2 <quorem+0x100>
 8005cac:	613c      	str	r4, [r7, #16]
 8005cae:	4630      	mov	r0, r6
 8005cb0:	b003      	add	sp, #12
 8005cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb6:	6812      	ldr	r2, [r2, #0]
 8005cb8:	3b04      	subs	r3, #4
 8005cba:	2a00      	cmp	r2, #0
 8005cbc:	d1ce      	bne.n	8005c5c <quorem+0x9a>
 8005cbe:	3c01      	subs	r4, #1
 8005cc0:	e7c9      	b.n	8005c56 <quorem+0x94>
 8005cc2:	6812      	ldr	r2, [r2, #0]
 8005cc4:	3b04      	subs	r3, #4
 8005cc6:	2a00      	cmp	r2, #0
 8005cc8:	d1f0      	bne.n	8005cac <quorem+0xea>
 8005cca:	3c01      	subs	r4, #1
 8005ccc:	e7eb      	b.n	8005ca6 <quorem+0xe4>
 8005cce:	2000      	movs	r0, #0
 8005cd0:	e7ee      	b.n	8005cb0 <quorem+0xee>
 8005cd2:	0000      	movs	r0, r0
 8005cd4:	0000      	movs	r0, r0
	...

08005cd8 <_dtoa_r>:
 8005cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cdc:	ed2d 8b04 	vpush	{d8-d9}
 8005ce0:	69c5      	ldr	r5, [r0, #28]
 8005ce2:	b093      	sub	sp, #76	; 0x4c
 8005ce4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005ce8:	ec57 6b10 	vmov	r6, r7, d0
 8005cec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005cf0:	9107      	str	r1, [sp, #28]
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	920a      	str	r2, [sp, #40]	; 0x28
 8005cf6:	930d      	str	r3, [sp, #52]	; 0x34
 8005cf8:	b975      	cbnz	r5, 8005d18 <_dtoa_r+0x40>
 8005cfa:	2010      	movs	r0, #16
 8005cfc:	f7ff f8b2 	bl	8004e64 <malloc>
 8005d00:	4602      	mov	r2, r0
 8005d02:	61e0      	str	r0, [r4, #28]
 8005d04:	b920      	cbnz	r0, 8005d10 <_dtoa_r+0x38>
 8005d06:	4bae      	ldr	r3, [pc, #696]	; (8005fc0 <_dtoa_r+0x2e8>)
 8005d08:	21ef      	movs	r1, #239	; 0xef
 8005d0a:	48ae      	ldr	r0, [pc, #696]	; (8005fc4 <_dtoa_r+0x2ec>)
 8005d0c:	f001 fa5a 	bl	80071c4 <__assert_func>
 8005d10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d14:	6005      	str	r5, [r0, #0]
 8005d16:	60c5      	str	r5, [r0, #12]
 8005d18:	69e3      	ldr	r3, [r4, #28]
 8005d1a:	6819      	ldr	r1, [r3, #0]
 8005d1c:	b151      	cbz	r1, 8005d34 <_dtoa_r+0x5c>
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	604a      	str	r2, [r1, #4]
 8005d22:	2301      	movs	r3, #1
 8005d24:	4093      	lsls	r3, r2
 8005d26:	608b      	str	r3, [r1, #8]
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f000 fe53 	bl	80069d4 <_Bfree>
 8005d2e:	69e3      	ldr	r3, [r4, #28]
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	1e3b      	subs	r3, r7, #0
 8005d36:	bfbb      	ittet	lt
 8005d38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d3c:	9303      	strlt	r3, [sp, #12]
 8005d3e:	2300      	movge	r3, #0
 8005d40:	2201      	movlt	r2, #1
 8005d42:	bfac      	ite	ge
 8005d44:	f8c8 3000 	strge.w	r3, [r8]
 8005d48:	f8c8 2000 	strlt.w	r2, [r8]
 8005d4c:	4b9e      	ldr	r3, [pc, #632]	; (8005fc8 <_dtoa_r+0x2f0>)
 8005d4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005d52:	ea33 0308 	bics.w	r3, r3, r8
 8005d56:	d11b      	bne.n	8005d90 <_dtoa_r+0xb8>
 8005d58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005d64:	4333      	orrs	r3, r6
 8005d66:	f000 8593 	beq.w	8006890 <_dtoa_r+0xbb8>
 8005d6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d6c:	b963      	cbnz	r3, 8005d88 <_dtoa_r+0xb0>
 8005d6e:	4b97      	ldr	r3, [pc, #604]	; (8005fcc <_dtoa_r+0x2f4>)
 8005d70:	e027      	b.n	8005dc2 <_dtoa_r+0xea>
 8005d72:	4b97      	ldr	r3, [pc, #604]	; (8005fd0 <_dtoa_r+0x2f8>)
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	3308      	adds	r3, #8
 8005d78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	9800      	ldr	r0, [sp, #0]
 8005d7e:	b013      	add	sp, #76	; 0x4c
 8005d80:	ecbd 8b04 	vpop	{d8-d9}
 8005d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d88:	4b90      	ldr	r3, [pc, #576]	; (8005fcc <_dtoa_r+0x2f4>)
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	3303      	adds	r3, #3
 8005d8e:	e7f3      	b.n	8005d78 <_dtoa_r+0xa0>
 8005d90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d94:	2200      	movs	r2, #0
 8005d96:	ec51 0b17 	vmov	r0, r1, d7
 8005d9a:	eeb0 8a47 	vmov.f32	s16, s14
 8005d9e:	eef0 8a67 	vmov.f32	s17, s15
 8005da2:	2300      	movs	r3, #0
 8005da4:	f7fa fe90 	bl	8000ac8 <__aeabi_dcmpeq>
 8005da8:	4681      	mov	r9, r0
 8005daa:	b160      	cbz	r0, 8005dc6 <_dtoa_r+0xee>
 8005dac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005dae:	2301      	movs	r3, #1
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 8568 	beq.w	800688a <_dtoa_r+0xbb2>
 8005dba:	4b86      	ldr	r3, [pc, #536]	; (8005fd4 <_dtoa_r+0x2fc>)
 8005dbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	e7da      	b.n	8005d7c <_dtoa_r+0xa4>
 8005dc6:	aa10      	add	r2, sp, #64	; 0x40
 8005dc8:	a911      	add	r1, sp, #68	; 0x44
 8005dca:	4620      	mov	r0, r4
 8005dcc:	eeb0 0a48 	vmov.f32	s0, s16
 8005dd0:	eef0 0a68 	vmov.f32	s1, s17
 8005dd4:	f001 f8e0 	bl	8006f98 <__d2b>
 8005dd8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005ddc:	4682      	mov	sl, r0
 8005dde:	2d00      	cmp	r5, #0
 8005de0:	d07f      	beq.n	8005ee2 <_dtoa_r+0x20a>
 8005de2:	ee18 3a90 	vmov	r3, s17
 8005de6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005dee:	ec51 0b18 	vmov	r0, r1, d8
 8005df2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005df6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005dfa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005dfe:	4619      	mov	r1, r3
 8005e00:	2200      	movs	r2, #0
 8005e02:	4b75      	ldr	r3, [pc, #468]	; (8005fd8 <_dtoa_r+0x300>)
 8005e04:	f7fa fa40 	bl	8000288 <__aeabi_dsub>
 8005e08:	a367      	add	r3, pc, #412	; (adr r3, 8005fa8 <_dtoa_r+0x2d0>)
 8005e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0e:	f7fa fbf3 	bl	80005f8 <__aeabi_dmul>
 8005e12:	a367      	add	r3, pc, #412	; (adr r3, 8005fb0 <_dtoa_r+0x2d8>)
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	f7fa fa38 	bl	800028c <__adddf3>
 8005e1c:	4606      	mov	r6, r0
 8005e1e:	4628      	mov	r0, r5
 8005e20:	460f      	mov	r7, r1
 8005e22:	f7fa fb7f 	bl	8000524 <__aeabi_i2d>
 8005e26:	a364      	add	r3, pc, #400	; (adr r3, 8005fb8 <_dtoa_r+0x2e0>)
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f7fa fbe4 	bl	80005f8 <__aeabi_dmul>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4630      	mov	r0, r6
 8005e36:	4639      	mov	r1, r7
 8005e38:	f7fa fa28 	bl	800028c <__adddf3>
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	460f      	mov	r7, r1
 8005e40:	f7fa fe8a 	bl	8000b58 <__aeabi_d2iz>
 8005e44:	2200      	movs	r2, #0
 8005e46:	4683      	mov	fp, r0
 8005e48:	2300      	movs	r3, #0
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	f7fa fe45 	bl	8000adc <__aeabi_dcmplt>
 8005e52:	b148      	cbz	r0, 8005e68 <_dtoa_r+0x190>
 8005e54:	4658      	mov	r0, fp
 8005e56:	f7fa fb65 	bl	8000524 <__aeabi_i2d>
 8005e5a:	4632      	mov	r2, r6
 8005e5c:	463b      	mov	r3, r7
 8005e5e:	f7fa fe33 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e62:	b908      	cbnz	r0, 8005e68 <_dtoa_r+0x190>
 8005e64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e68:	f1bb 0f16 	cmp.w	fp, #22
 8005e6c:	d857      	bhi.n	8005f1e <_dtoa_r+0x246>
 8005e6e:	4b5b      	ldr	r3, [pc, #364]	; (8005fdc <_dtoa_r+0x304>)
 8005e70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	ec51 0b18 	vmov	r0, r1, d8
 8005e7c:	f7fa fe2e 	bl	8000adc <__aeabi_dcmplt>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d04e      	beq.n	8005f22 <_dtoa_r+0x24a>
 8005e84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e88:	2300      	movs	r3, #0
 8005e8a:	930c      	str	r3, [sp, #48]	; 0x30
 8005e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e8e:	1b5b      	subs	r3, r3, r5
 8005e90:	1e5a      	subs	r2, r3, #1
 8005e92:	bf45      	ittet	mi
 8005e94:	f1c3 0301 	rsbmi	r3, r3, #1
 8005e98:	9305      	strmi	r3, [sp, #20]
 8005e9a:	2300      	movpl	r3, #0
 8005e9c:	2300      	movmi	r3, #0
 8005e9e:	9206      	str	r2, [sp, #24]
 8005ea0:	bf54      	ite	pl
 8005ea2:	9305      	strpl	r3, [sp, #20]
 8005ea4:	9306      	strmi	r3, [sp, #24]
 8005ea6:	f1bb 0f00 	cmp.w	fp, #0
 8005eaa:	db3c      	blt.n	8005f26 <_dtoa_r+0x24e>
 8005eac:	9b06      	ldr	r3, [sp, #24]
 8005eae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005eb2:	445b      	add	r3, fp
 8005eb4:	9306      	str	r3, [sp, #24]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	9308      	str	r3, [sp, #32]
 8005eba:	9b07      	ldr	r3, [sp, #28]
 8005ebc:	2b09      	cmp	r3, #9
 8005ebe:	d868      	bhi.n	8005f92 <_dtoa_r+0x2ba>
 8005ec0:	2b05      	cmp	r3, #5
 8005ec2:	bfc4      	itt	gt
 8005ec4:	3b04      	subgt	r3, #4
 8005ec6:	9307      	strgt	r3, [sp, #28]
 8005ec8:	9b07      	ldr	r3, [sp, #28]
 8005eca:	f1a3 0302 	sub.w	r3, r3, #2
 8005ece:	bfcc      	ite	gt
 8005ed0:	2500      	movgt	r5, #0
 8005ed2:	2501      	movle	r5, #1
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	f200 8085 	bhi.w	8005fe4 <_dtoa_r+0x30c>
 8005eda:	e8df f003 	tbb	[pc, r3]
 8005ede:	3b2e      	.short	0x3b2e
 8005ee0:	5839      	.short	0x5839
 8005ee2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005ee6:	441d      	add	r5, r3
 8005ee8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005eec:	2b20      	cmp	r3, #32
 8005eee:	bfc1      	itttt	gt
 8005ef0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ef4:	fa08 f803 	lslgt.w	r8, r8, r3
 8005ef8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005efc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005f00:	bfd6      	itet	le
 8005f02:	f1c3 0320 	rsble	r3, r3, #32
 8005f06:	ea48 0003 	orrgt.w	r0, r8, r3
 8005f0a:	fa06 f003 	lslle.w	r0, r6, r3
 8005f0e:	f7fa faf9 	bl	8000504 <__aeabi_ui2d>
 8005f12:	2201      	movs	r2, #1
 8005f14:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005f18:	3d01      	subs	r5, #1
 8005f1a:	920e      	str	r2, [sp, #56]	; 0x38
 8005f1c:	e76f      	b.n	8005dfe <_dtoa_r+0x126>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e7b3      	b.n	8005e8a <_dtoa_r+0x1b2>
 8005f22:	900c      	str	r0, [sp, #48]	; 0x30
 8005f24:	e7b2      	b.n	8005e8c <_dtoa_r+0x1b4>
 8005f26:	9b05      	ldr	r3, [sp, #20]
 8005f28:	eba3 030b 	sub.w	r3, r3, fp
 8005f2c:	9305      	str	r3, [sp, #20]
 8005f2e:	f1cb 0300 	rsb	r3, fp, #0
 8005f32:	9308      	str	r3, [sp, #32]
 8005f34:	2300      	movs	r3, #0
 8005f36:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f38:	e7bf      	b.n	8005eba <_dtoa_r+0x1e2>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	dc52      	bgt.n	8005fea <_dtoa_r+0x312>
 8005f44:	2301      	movs	r3, #1
 8005f46:	9301      	str	r3, [sp, #4]
 8005f48:	9304      	str	r3, [sp, #16]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	920a      	str	r2, [sp, #40]	; 0x28
 8005f4e:	e00b      	b.n	8005f68 <_dtoa_r+0x290>
 8005f50:	2301      	movs	r3, #1
 8005f52:	e7f3      	b.n	8005f3c <_dtoa_r+0x264>
 8005f54:	2300      	movs	r3, #0
 8005f56:	9309      	str	r3, [sp, #36]	; 0x24
 8005f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f5a:	445b      	add	r3, fp
 8005f5c:	9301      	str	r3, [sp, #4]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	9304      	str	r3, [sp, #16]
 8005f64:	bfb8      	it	lt
 8005f66:	2301      	movlt	r3, #1
 8005f68:	69e0      	ldr	r0, [r4, #28]
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	2204      	movs	r2, #4
 8005f6e:	f102 0614 	add.w	r6, r2, #20
 8005f72:	429e      	cmp	r6, r3
 8005f74:	d93d      	bls.n	8005ff2 <_dtoa_r+0x31a>
 8005f76:	6041      	str	r1, [r0, #4]
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f000 fceb 	bl	8006954 <_Balloc>
 8005f7e:	9000      	str	r0, [sp, #0]
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d139      	bne.n	8005ff8 <_dtoa_r+0x320>
 8005f84:	4b16      	ldr	r3, [pc, #88]	; (8005fe0 <_dtoa_r+0x308>)
 8005f86:	4602      	mov	r2, r0
 8005f88:	f240 11af 	movw	r1, #431	; 0x1af
 8005f8c:	e6bd      	b.n	8005d0a <_dtoa_r+0x32>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e7e1      	b.n	8005f56 <_dtoa_r+0x27e>
 8005f92:	2501      	movs	r5, #1
 8005f94:	2300      	movs	r3, #0
 8005f96:	9307      	str	r3, [sp, #28]
 8005f98:	9509      	str	r5, [sp, #36]	; 0x24
 8005f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f9e:	9301      	str	r3, [sp, #4]
 8005fa0:	9304      	str	r3, [sp, #16]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	2312      	movs	r3, #18
 8005fa6:	e7d1      	b.n	8005f4c <_dtoa_r+0x274>
 8005fa8:	636f4361 	.word	0x636f4361
 8005fac:	3fd287a7 	.word	0x3fd287a7
 8005fb0:	8b60c8b3 	.word	0x8b60c8b3
 8005fb4:	3fc68a28 	.word	0x3fc68a28
 8005fb8:	509f79fb 	.word	0x509f79fb
 8005fbc:	3fd34413 	.word	0x3fd34413
 8005fc0:	08007881 	.word	0x08007881
 8005fc4:	08007898 	.word	0x08007898
 8005fc8:	7ff00000 	.word	0x7ff00000
 8005fcc:	0800787d 	.word	0x0800787d
 8005fd0:	08007874 	.word	0x08007874
 8005fd4:	08007851 	.word	0x08007851
 8005fd8:	3ff80000 	.word	0x3ff80000
 8005fdc:	08007988 	.word	0x08007988
 8005fe0:	080078f0 	.word	0x080078f0
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8005fe8:	e7d7      	b.n	8005f9a <_dtoa_r+0x2c2>
 8005fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fec:	9301      	str	r3, [sp, #4]
 8005fee:	9304      	str	r3, [sp, #16]
 8005ff0:	e7ba      	b.n	8005f68 <_dtoa_r+0x290>
 8005ff2:	3101      	adds	r1, #1
 8005ff4:	0052      	lsls	r2, r2, #1
 8005ff6:	e7ba      	b.n	8005f6e <_dtoa_r+0x296>
 8005ff8:	69e3      	ldr	r3, [r4, #28]
 8005ffa:	9a00      	ldr	r2, [sp, #0]
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	9b04      	ldr	r3, [sp, #16]
 8006000:	2b0e      	cmp	r3, #14
 8006002:	f200 80a8 	bhi.w	8006156 <_dtoa_r+0x47e>
 8006006:	2d00      	cmp	r5, #0
 8006008:	f000 80a5 	beq.w	8006156 <_dtoa_r+0x47e>
 800600c:	f1bb 0f00 	cmp.w	fp, #0
 8006010:	dd38      	ble.n	8006084 <_dtoa_r+0x3ac>
 8006012:	4bc0      	ldr	r3, [pc, #768]	; (8006314 <_dtoa_r+0x63c>)
 8006014:	f00b 020f 	and.w	r2, fp, #15
 8006018:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800601c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006020:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006024:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006028:	d019      	beq.n	800605e <_dtoa_r+0x386>
 800602a:	4bbb      	ldr	r3, [pc, #748]	; (8006318 <_dtoa_r+0x640>)
 800602c:	ec51 0b18 	vmov	r0, r1, d8
 8006030:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006034:	f7fa fc0a 	bl	800084c <__aeabi_ddiv>
 8006038:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800603c:	f008 080f 	and.w	r8, r8, #15
 8006040:	2503      	movs	r5, #3
 8006042:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006318 <_dtoa_r+0x640>
 8006046:	f1b8 0f00 	cmp.w	r8, #0
 800604a:	d10a      	bne.n	8006062 <_dtoa_r+0x38a>
 800604c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006050:	4632      	mov	r2, r6
 8006052:	463b      	mov	r3, r7
 8006054:	f7fa fbfa 	bl	800084c <__aeabi_ddiv>
 8006058:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800605c:	e02b      	b.n	80060b6 <_dtoa_r+0x3de>
 800605e:	2502      	movs	r5, #2
 8006060:	e7ef      	b.n	8006042 <_dtoa_r+0x36a>
 8006062:	f018 0f01 	tst.w	r8, #1
 8006066:	d008      	beq.n	800607a <_dtoa_r+0x3a2>
 8006068:	4630      	mov	r0, r6
 800606a:	4639      	mov	r1, r7
 800606c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006070:	f7fa fac2 	bl	80005f8 <__aeabi_dmul>
 8006074:	3501      	adds	r5, #1
 8006076:	4606      	mov	r6, r0
 8006078:	460f      	mov	r7, r1
 800607a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800607e:	f109 0908 	add.w	r9, r9, #8
 8006082:	e7e0      	b.n	8006046 <_dtoa_r+0x36e>
 8006084:	f000 809f 	beq.w	80061c6 <_dtoa_r+0x4ee>
 8006088:	f1cb 0600 	rsb	r6, fp, #0
 800608c:	4ba1      	ldr	r3, [pc, #644]	; (8006314 <_dtoa_r+0x63c>)
 800608e:	4fa2      	ldr	r7, [pc, #648]	; (8006318 <_dtoa_r+0x640>)
 8006090:	f006 020f 	and.w	r2, r6, #15
 8006094:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	ec51 0b18 	vmov	r0, r1, d8
 80060a0:	f7fa faaa 	bl	80005f8 <__aeabi_dmul>
 80060a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060a8:	1136      	asrs	r6, r6, #4
 80060aa:	2300      	movs	r3, #0
 80060ac:	2502      	movs	r5, #2
 80060ae:	2e00      	cmp	r6, #0
 80060b0:	d17e      	bne.n	80061b0 <_dtoa_r+0x4d8>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1d0      	bne.n	8006058 <_dtoa_r+0x380>
 80060b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 8084 	beq.w	80061ca <_dtoa_r+0x4f2>
 80060c2:	4b96      	ldr	r3, [pc, #600]	; (800631c <_dtoa_r+0x644>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	4640      	mov	r0, r8
 80060c8:	4649      	mov	r1, r9
 80060ca:	f7fa fd07 	bl	8000adc <__aeabi_dcmplt>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d07b      	beq.n	80061ca <_dtoa_r+0x4f2>
 80060d2:	9b04      	ldr	r3, [sp, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d078      	beq.n	80061ca <_dtoa_r+0x4f2>
 80060d8:	9b01      	ldr	r3, [sp, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	dd39      	ble.n	8006152 <_dtoa_r+0x47a>
 80060de:	4b90      	ldr	r3, [pc, #576]	; (8006320 <_dtoa_r+0x648>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	4640      	mov	r0, r8
 80060e4:	4649      	mov	r1, r9
 80060e6:	f7fa fa87 	bl	80005f8 <__aeabi_dmul>
 80060ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060ee:	9e01      	ldr	r6, [sp, #4]
 80060f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80060f4:	3501      	adds	r5, #1
 80060f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80060fa:	4628      	mov	r0, r5
 80060fc:	f7fa fa12 	bl	8000524 <__aeabi_i2d>
 8006100:	4642      	mov	r2, r8
 8006102:	464b      	mov	r3, r9
 8006104:	f7fa fa78 	bl	80005f8 <__aeabi_dmul>
 8006108:	4b86      	ldr	r3, [pc, #536]	; (8006324 <_dtoa_r+0x64c>)
 800610a:	2200      	movs	r2, #0
 800610c:	f7fa f8be 	bl	800028c <__adddf3>
 8006110:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006118:	9303      	str	r3, [sp, #12]
 800611a:	2e00      	cmp	r6, #0
 800611c:	d158      	bne.n	80061d0 <_dtoa_r+0x4f8>
 800611e:	4b82      	ldr	r3, [pc, #520]	; (8006328 <_dtoa_r+0x650>)
 8006120:	2200      	movs	r2, #0
 8006122:	4640      	mov	r0, r8
 8006124:	4649      	mov	r1, r9
 8006126:	f7fa f8af 	bl	8000288 <__aeabi_dsub>
 800612a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800612e:	4680      	mov	r8, r0
 8006130:	4689      	mov	r9, r1
 8006132:	f7fa fcf1 	bl	8000b18 <__aeabi_dcmpgt>
 8006136:	2800      	cmp	r0, #0
 8006138:	f040 8296 	bne.w	8006668 <_dtoa_r+0x990>
 800613c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006140:	4640      	mov	r0, r8
 8006142:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006146:	4649      	mov	r1, r9
 8006148:	f7fa fcc8 	bl	8000adc <__aeabi_dcmplt>
 800614c:	2800      	cmp	r0, #0
 800614e:	f040 8289 	bne.w	8006664 <_dtoa_r+0x98c>
 8006152:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006156:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006158:	2b00      	cmp	r3, #0
 800615a:	f2c0 814e 	blt.w	80063fa <_dtoa_r+0x722>
 800615e:	f1bb 0f0e 	cmp.w	fp, #14
 8006162:	f300 814a 	bgt.w	80063fa <_dtoa_r+0x722>
 8006166:	4b6b      	ldr	r3, [pc, #428]	; (8006314 <_dtoa_r+0x63c>)
 8006168:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800616c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006172:	2b00      	cmp	r3, #0
 8006174:	f280 80dc 	bge.w	8006330 <_dtoa_r+0x658>
 8006178:	9b04      	ldr	r3, [sp, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	f300 80d8 	bgt.w	8006330 <_dtoa_r+0x658>
 8006180:	f040 826f 	bne.w	8006662 <_dtoa_r+0x98a>
 8006184:	4b68      	ldr	r3, [pc, #416]	; (8006328 <_dtoa_r+0x650>)
 8006186:	2200      	movs	r2, #0
 8006188:	4640      	mov	r0, r8
 800618a:	4649      	mov	r1, r9
 800618c:	f7fa fa34 	bl	80005f8 <__aeabi_dmul>
 8006190:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006194:	f7fa fcb6 	bl	8000b04 <__aeabi_dcmpge>
 8006198:	9e04      	ldr	r6, [sp, #16]
 800619a:	4637      	mov	r7, r6
 800619c:	2800      	cmp	r0, #0
 800619e:	f040 8245 	bne.w	800662c <_dtoa_r+0x954>
 80061a2:	9d00      	ldr	r5, [sp, #0]
 80061a4:	2331      	movs	r3, #49	; 0x31
 80061a6:	f805 3b01 	strb.w	r3, [r5], #1
 80061aa:	f10b 0b01 	add.w	fp, fp, #1
 80061ae:	e241      	b.n	8006634 <_dtoa_r+0x95c>
 80061b0:	07f2      	lsls	r2, r6, #31
 80061b2:	d505      	bpl.n	80061c0 <_dtoa_r+0x4e8>
 80061b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061b8:	f7fa fa1e 	bl	80005f8 <__aeabi_dmul>
 80061bc:	3501      	adds	r5, #1
 80061be:	2301      	movs	r3, #1
 80061c0:	1076      	asrs	r6, r6, #1
 80061c2:	3708      	adds	r7, #8
 80061c4:	e773      	b.n	80060ae <_dtoa_r+0x3d6>
 80061c6:	2502      	movs	r5, #2
 80061c8:	e775      	b.n	80060b6 <_dtoa_r+0x3de>
 80061ca:	9e04      	ldr	r6, [sp, #16]
 80061cc:	465f      	mov	r7, fp
 80061ce:	e792      	b.n	80060f6 <_dtoa_r+0x41e>
 80061d0:	9900      	ldr	r1, [sp, #0]
 80061d2:	4b50      	ldr	r3, [pc, #320]	; (8006314 <_dtoa_r+0x63c>)
 80061d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061d8:	4431      	add	r1, r6
 80061da:	9102      	str	r1, [sp, #8]
 80061dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061de:	eeb0 9a47 	vmov.f32	s18, s14
 80061e2:	eef0 9a67 	vmov.f32	s19, s15
 80061e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061ee:	2900      	cmp	r1, #0
 80061f0:	d044      	beq.n	800627c <_dtoa_r+0x5a4>
 80061f2:	494e      	ldr	r1, [pc, #312]	; (800632c <_dtoa_r+0x654>)
 80061f4:	2000      	movs	r0, #0
 80061f6:	f7fa fb29 	bl	800084c <__aeabi_ddiv>
 80061fa:	ec53 2b19 	vmov	r2, r3, d9
 80061fe:	f7fa f843 	bl	8000288 <__aeabi_dsub>
 8006202:	9d00      	ldr	r5, [sp, #0]
 8006204:	ec41 0b19 	vmov	d9, r0, r1
 8006208:	4649      	mov	r1, r9
 800620a:	4640      	mov	r0, r8
 800620c:	f7fa fca4 	bl	8000b58 <__aeabi_d2iz>
 8006210:	4606      	mov	r6, r0
 8006212:	f7fa f987 	bl	8000524 <__aeabi_i2d>
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	4640      	mov	r0, r8
 800621c:	4649      	mov	r1, r9
 800621e:	f7fa f833 	bl	8000288 <__aeabi_dsub>
 8006222:	3630      	adds	r6, #48	; 0x30
 8006224:	f805 6b01 	strb.w	r6, [r5], #1
 8006228:	ec53 2b19 	vmov	r2, r3, d9
 800622c:	4680      	mov	r8, r0
 800622e:	4689      	mov	r9, r1
 8006230:	f7fa fc54 	bl	8000adc <__aeabi_dcmplt>
 8006234:	2800      	cmp	r0, #0
 8006236:	d164      	bne.n	8006302 <_dtoa_r+0x62a>
 8006238:	4642      	mov	r2, r8
 800623a:	464b      	mov	r3, r9
 800623c:	4937      	ldr	r1, [pc, #220]	; (800631c <_dtoa_r+0x644>)
 800623e:	2000      	movs	r0, #0
 8006240:	f7fa f822 	bl	8000288 <__aeabi_dsub>
 8006244:	ec53 2b19 	vmov	r2, r3, d9
 8006248:	f7fa fc48 	bl	8000adc <__aeabi_dcmplt>
 800624c:	2800      	cmp	r0, #0
 800624e:	f040 80b6 	bne.w	80063be <_dtoa_r+0x6e6>
 8006252:	9b02      	ldr	r3, [sp, #8]
 8006254:	429d      	cmp	r5, r3
 8006256:	f43f af7c 	beq.w	8006152 <_dtoa_r+0x47a>
 800625a:	4b31      	ldr	r3, [pc, #196]	; (8006320 <_dtoa_r+0x648>)
 800625c:	ec51 0b19 	vmov	r0, r1, d9
 8006260:	2200      	movs	r2, #0
 8006262:	f7fa f9c9 	bl	80005f8 <__aeabi_dmul>
 8006266:	4b2e      	ldr	r3, [pc, #184]	; (8006320 <_dtoa_r+0x648>)
 8006268:	ec41 0b19 	vmov	d9, r0, r1
 800626c:	2200      	movs	r2, #0
 800626e:	4640      	mov	r0, r8
 8006270:	4649      	mov	r1, r9
 8006272:	f7fa f9c1 	bl	80005f8 <__aeabi_dmul>
 8006276:	4680      	mov	r8, r0
 8006278:	4689      	mov	r9, r1
 800627a:	e7c5      	b.n	8006208 <_dtoa_r+0x530>
 800627c:	ec51 0b17 	vmov	r0, r1, d7
 8006280:	f7fa f9ba 	bl	80005f8 <__aeabi_dmul>
 8006284:	9b02      	ldr	r3, [sp, #8]
 8006286:	9d00      	ldr	r5, [sp, #0]
 8006288:	930f      	str	r3, [sp, #60]	; 0x3c
 800628a:	ec41 0b19 	vmov	d9, r0, r1
 800628e:	4649      	mov	r1, r9
 8006290:	4640      	mov	r0, r8
 8006292:	f7fa fc61 	bl	8000b58 <__aeabi_d2iz>
 8006296:	4606      	mov	r6, r0
 8006298:	f7fa f944 	bl	8000524 <__aeabi_i2d>
 800629c:	3630      	adds	r6, #48	; 0x30
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4640      	mov	r0, r8
 80062a4:	4649      	mov	r1, r9
 80062a6:	f7f9 ffef 	bl	8000288 <__aeabi_dsub>
 80062aa:	f805 6b01 	strb.w	r6, [r5], #1
 80062ae:	9b02      	ldr	r3, [sp, #8]
 80062b0:	429d      	cmp	r5, r3
 80062b2:	4680      	mov	r8, r0
 80062b4:	4689      	mov	r9, r1
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	d124      	bne.n	8006306 <_dtoa_r+0x62e>
 80062bc:	4b1b      	ldr	r3, [pc, #108]	; (800632c <_dtoa_r+0x654>)
 80062be:	ec51 0b19 	vmov	r0, r1, d9
 80062c2:	f7f9 ffe3 	bl	800028c <__adddf3>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4640      	mov	r0, r8
 80062cc:	4649      	mov	r1, r9
 80062ce:	f7fa fc23 	bl	8000b18 <__aeabi_dcmpgt>
 80062d2:	2800      	cmp	r0, #0
 80062d4:	d173      	bne.n	80063be <_dtoa_r+0x6e6>
 80062d6:	ec53 2b19 	vmov	r2, r3, d9
 80062da:	4914      	ldr	r1, [pc, #80]	; (800632c <_dtoa_r+0x654>)
 80062dc:	2000      	movs	r0, #0
 80062de:	f7f9 ffd3 	bl	8000288 <__aeabi_dsub>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4640      	mov	r0, r8
 80062e8:	4649      	mov	r1, r9
 80062ea:	f7fa fbf7 	bl	8000adc <__aeabi_dcmplt>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	f43f af2f 	beq.w	8006152 <_dtoa_r+0x47a>
 80062f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80062f6:	1e6b      	subs	r3, r5, #1
 80062f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80062fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062fe:	2b30      	cmp	r3, #48	; 0x30
 8006300:	d0f8      	beq.n	80062f4 <_dtoa_r+0x61c>
 8006302:	46bb      	mov	fp, r7
 8006304:	e04a      	b.n	800639c <_dtoa_r+0x6c4>
 8006306:	4b06      	ldr	r3, [pc, #24]	; (8006320 <_dtoa_r+0x648>)
 8006308:	f7fa f976 	bl	80005f8 <__aeabi_dmul>
 800630c:	4680      	mov	r8, r0
 800630e:	4689      	mov	r9, r1
 8006310:	e7bd      	b.n	800628e <_dtoa_r+0x5b6>
 8006312:	bf00      	nop
 8006314:	08007988 	.word	0x08007988
 8006318:	08007960 	.word	0x08007960
 800631c:	3ff00000 	.word	0x3ff00000
 8006320:	40240000 	.word	0x40240000
 8006324:	401c0000 	.word	0x401c0000
 8006328:	40140000 	.word	0x40140000
 800632c:	3fe00000 	.word	0x3fe00000
 8006330:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006334:	9d00      	ldr	r5, [sp, #0]
 8006336:	4642      	mov	r2, r8
 8006338:	464b      	mov	r3, r9
 800633a:	4630      	mov	r0, r6
 800633c:	4639      	mov	r1, r7
 800633e:	f7fa fa85 	bl	800084c <__aeabi_ddiv>
 8006342:	f7fa fc09 	bl	8000b58 <__aeabi_d2iz>
 8006346:	9001      	str	r0, [sp, #4]
 8006348:	f7fa f8ec 	bl	8000524 <__aeabi_i2d>
 800634c:	4642      	mov	r2, r8
 800634e:	464b      	mov	r3, r9
 8006350:	f7fa f952 	bl	80005f8 <__aeabi_dmul>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4630      	mov	r0, r6
 800635a:	4639      	mov	r1, r7
 800635c:	f7f9 ff94 	bl	8000288 <__aeabi_dsub>
 8006360:	9e01      	ldr	r6, [sp, #4]
 8006362:	9f04      	ldr	r7, [sp, #16]
 8006364:	3630      	adds	r6, #48	; 0x30
 8006366:	f805 6b01 	strb.w	r6, [r5], #1
 800636a:	9e00      	ldr	r6, [sp, #0]
 800636c:	1bae      	subs	r6, r5, r6
 800636e:	42b7      	cmp	r7, r6
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	d134      	bne.n	80063e0 <_dtoa_r+0x708>
 8006376:	f7f9 ff89 	bl	800028c <__adddf3>
 800637a:	4642      	mov	r2, r8
 800637c:	464b      	mov	r3, r9
 800637e:	4606      	mov	r6, r0
 8006380:	460f      	mov	r7, r1
 8006382:	f7fa fbc9 	bl	8000b18 <__aeabi_dcmpgt>
 8006386:	b9c8      	cbnz	r0, 80063bc <_dtoa_r+0x6e4>
 8006388:	4642      	mov	r2, r8
 800638a:	464b      	mov	r3, r9
 800638c:	4630      	mov	r0, r6
 800638e:	4639      	mov	r1, r7
 8006390:	f7fa fb9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006394:	b110      	cbz	r0, 800639c <_dtoa_r+0x6c4>
 8006396:	9b01      	ldr	r3, [sp, #4]
 8006398:	07db      	lsls	r3, r3, #31
 800639a:	d40f      	bmi.n	80063bc <_dtoa_r+0x6e4>
 800639c:	4651      	mov	r1, sl
 800639e:	4620      	mov	r0, r4
 80063a0:	f000 fb18 	bl	80069d4 <_Bfree>
 80063a4:	2300      	movs	r3, #0
 80063a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063a8:	702b      	strb	r3, [r5, #0]
 80063aa:	f10b 0301 	add.w	r3, fp, #1
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f43f ace2 	beq.w	8005d7c <_dtoa_r+0xa4>
 80063b8:	601d      	str	r5, [r3, #0]
 80063ba:	e4df      	b.n	8005d7c <_dtoa_r+0xa4>
 80063bc:	465f      	mov	r7, fp
 80063be:	462b      	mov	r3, r5
 80063c0:	461d      	mov	r5, r3
 80063c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063c6:	2a39      	cmp	r2, #57	; 0x39
 80063c8:	d106      	bne.n	80063d8 <_dtoa_r+0x700>
 80063ca:	9a00      	ldr	r2, [sp, #0]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d1f7      	bne.n	80063c0 <_dtoa_r+0x6e8>
 80063d0:	9900      	ldr	r1, [sp, #0]
 80063d2:	2230      	movs	r2, #48	; 0x30
 80063d4:	3701      	adds	r7, #1
 80063d6:	700a      	strb	r2, [r1, #0]
 80063d8:	781a      	ldrb	r2, [r3, #0]
 80063da:	3201      	adds	r2, #1
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	e790      	b.n	8006302 <_dtoa_r+0x62a>
 80063e0:	4ba3      	ldr	r3, [pc, #652]	; (8006670 <_dtoa_r+0x998>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	f7fa f908 	bl	80005f8 <__aeabi_dmul>
 80063e8:	2200      	movs	r2, #0
 80063ea:	2300      	movs	r3, #0
 80063ec:	4606      	mov	r6, r0
 80063ee:	460f      	mov	r7, r1
 80063f0:	f7fa fb6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d09e      	beq.n	8006336 <_dtoa_r+0x65e>
 80063f8:	e7d0      	b.n	800639c <_dtoa_r+0x6c4>
 80063fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063fc:	2a00      	cmp	r2, #0
 80063fe:	f000 80ca 	beq.w	8006596 <_dtoa_r+0x8be>
 8006402:	9a07      	ldr	r2, [sp, #28]
 8006404:	2a01      	cmp	r2, #1
 8006406:	f300 80ad 	bgt.w	8006564 <_dtoa_r+0x88c>
 800640a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800640c:	2a00      	cmp	r2, #0
 800640e:	f000 80a5 	beq.w	800655c <_dtoa_r+0x884>
 8006412:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006416:	9e08      	ldr	r6, [sp, #32]
 8006418:	9d05      	ldr	r5, [sp, #20]
 800641a:	9a05      	ldr	r2, [sp, #20]
 800641c:	441a      	add	r2, r3
 800641e:	9205      	str	r2, [sp, #20]
 8006420:	9a06      	ldr	r2, [sp, #24]
 8006422:	2101      	movs	r1, #1
 8006424:	441a      	add	r2, r3
 8006426:	4620      	mov	r0, r4
 8006428:	9206      	str	r2, [sp, #24]
 800642a:	f000 fb89 	bl	8006b40 <__i2b>
 800642e:	4607      	mov	r7, r0
 8006430:	b165      	cbz	r5, 800644c <_dtoa_r+0x774>
 8006432:	9b06      	ldr	r3, [sp, #24]
 8006434:	2b00      	cmp	r3, #0
 8006436:	dd09      	ble.n	800644c <_dtoa_r+0x774>
 8006438:	42ab      	cmp	r3, r5
 800643a:	9a05      	ldr	r2, [sp, #20]
 800643c:	bfa8      	it	ge
 800643e:	462b      	movge	r3, r5
 8006440:	1ad2      	subs	r2, r2, r3
 8006442:	9205      	str	r2, [sp, #20]
 8006444:	9a06      	ldr	r2, [sp, #24]
 8006446:	1aed      	subs	r5, r5, r3
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	9306      	str	r3, [sp, #24]
 800644c:	9b08      	ldr	r3, [sp, #32]
 800644e:	b1f3      	cbz	r3, 800648e <_dtoa_r+0x7b6>
 8006450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 80a3 	beq.w	800659e <_dtoa_r+0x8c6>
 8006458:	2e00      	cmp	r6, #0
 800645a:	dd10      	ble.n	800647e <_dtoa_r+0x7a6>
 800645c:	4639      	mov	r1, r7
 800645e:	4632      	mov	r2, r6
 8006460:	4620      	mov	r0, r4
 8006462:	f000 fc2d 	bl	8006cc0 <__pow5mult>
 8006466:	4652      	mov	r2, sl
 8006468:	4601      	mov	r1, r0
 800646a:	4607      	mov	r7, r0
 800646c:	4620      	mov	r0, r4
 800646e:	f000 fb7d 	bl	8006b6c <__multiply>
 8006472:	4651      	mov	r1, sl
 8006474:	4680      	mov	r8, r0
 8006476:	4620      	mov	r0, r4
 8006478:	f000 faac 	bl	80069d4 <_Bfree>
 800647c:	46c2      	mov	sl, r8
 800647e:	9b08      	ldr	r3, [sp, #32]
 8006480:	1b9a      	subs	r2, r3, r6
 8006482:	d004      	beq.n	800648e <_dtoa_r+0x7b6>
 8006484:	4651      	mov	r1, sl
 8006486:	4620      	mov	r0, r4
 8006488:	f000 fc1a 	bl	8006cc0 <__pow5mult>
 800648c:	4682      	mov	sl, r0
 800648e:	2101      	movs	r1, #1
 8006490:	4620      	mov	r0, r4
 8006492:	f000 fb55 	bl	8006b40 <__i2b>
 8006496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006498:	2b00      	cmp	r3, #0
 800649a:	4606      	mov	r6, r0
 800649c:	f340 8081 	ble.w	80065a2 <_dtoa_r+0x8ca>
 80064a0:	461a      	mov	r2, r3
 80064a2:	4601      	mov	r1, r0
 80064a4:	4620      	mov	r0, r4
 80064a6:	f000 fc0b 	bl	8006cc0 <__pow5mult>
 80064aa:	9b07      	ldr	r3, [sp, #28]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	4606      	mov	r6, r0
 80064b0:	dd7a      	ble.n	80065a8 <_dtoa_r+0x8d0>
 80064b2:	f04f 0800 	mov.w	r8, #0
 80064b6:	6933      	ldr	r3, [r6, #16]
 80064b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80064bc:	6918      	ldr	r0, [r3, #16]
 80064be:	f000 faf1 	bl	8006aa4 <__hi0bits>
 80064c2:	f1c0 0020 	rsb	r0, r0, #32
 80064c6:	9b06      	ldr	r3, [sp, #24]
 80064c8:	4418      	add	r0, r3
 80064ca:	f010 001f 	ands.w	r0, r0, #31
 80064ce:	f000 8094 	beq.w	80065fa <_dtoa_r+0x922>
 80064d2:	f1c0 0320 	rsb	r3, r0, #32
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	f340 8085 	ble.w	80065e6 <_dtoa_r+0x90e>
 80064dc:	9b05      	ldr	r3, [sp, #20]
 80064de:	f1c0 001c 	rsb	r0, r0, #28
 80064e2:	4403      	add	r3, r0
 80064e4:	9305      	str	r3, [sp, #20]
 80064e6:	9b06      	ldr	r3, [sp, #24]
 80064e8:	4403      	add	r3, r0
 80064ea:	4405      	add	r5, r0
 80064ec:	9306      	str	r3, [sp, #24]
 80064ee:	9b05      	ldr	r3, [sp, #20]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	dd05      	ble.n	8006500 <_dtoa_r+0x828>
 80064f4:	4651      	mov	r1, sl
 80064f6:	461a      	mov	r2, r3
 80064f8:	4620      	mov	r0, r4
 80064fa:	f000 fc3b 	bl	8006d74 <__lshift>
 80064fe:	4682      	mov	sl, r0
 8006500:	9b06      	ldr	r3, [sp, #24]
 8006502:	2b00      	cmp	r3, #0
 8006504:	dd05      	ble.n	8006512 <_dtoa_r+0x83a>
 8006506:	4631      	mov	r1, r6
 8006508:	461a      	mov	r2, r3
 800650a:	4620      	mov	r0, r4
 800650c:	f000 fc32 	bl	8006d74 <__lshift>
 8006510:	4606      	mov	r6, r0
 8006512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006514:	2b00      	cmp	r3, #0
 8006516:	d072      	beq.n	80065fe <_dtoa_r+0x926>
 8006518:	4631      	mov	r1, r6
 800651a:	4650      	mov	r0, sl
 800651c:	f000 fc96 	bl	8006e4c <__mcmp>
 8006520:	2800      	cmp	r0, #0
 8006522:	da6c      	bge.n	80065fe <_dtoa_r+0x926>
 8006524:	2300      	movs	r3, #0
 8006526:	4651      	mov	r1, sl
 8006528:	220a      	movs	r2, #10
 800652a:	4620      	mov	r0, r4
 800652c:	f000 fa74 	bl	8006a18 <__multadd>
 8006530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006532:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006536:	4682      	mov	sl, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 81b0 	beq.w	800689e <_dtoa_r+0xbc6>
 800653e:	2300      	movs	r3, #0
 8006540:	4639      	mov	r1, r7
 8006542:	220a      	movs	r2, #10
 8006544:	4620      	mov	r0, r4
 8006546:	f000 fa67 	bl	8006a18 <__multadd>
 800654a:	9b01      	ldr	r3, [sp, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	4607      	mov	r7, r0
 8006550:	f300 8096 	bgt.w	8006680 <_dtoa_r+0x9a8>
 8006554:	9b07      	ldr	r3, [sp, #28]
 8006556:	2b02      	cmp	r3, #2
 8006558:	dc59      	bgt.n	800660e <_dtoa_r+0x936>
 800655a:	e091      	b.n	8006680 <_dtoa_r+0x9a8>
 800655c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800655e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006562:	e758      	b.n	8006416 <_dtoa_r+0x73e>
 8006564:	9b04      	ldr	r3, [sp, #16]
 8006566:	1e5e      	subs	r6, r3, #1
 8006568:	9b08      	ldr	r3, [sp, #32]
 800656a:	42b3      	cmp	r3, r6
 800656c:	bfbf      	itttt	lt
 800656e:	9b08      	ldrlt	r3, [sp, #32]
 8006570:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006572:	9608      	strlt	r6, [sp, #32]
 8006574:	1af3      	sublt	r3, r6, r3
 8006576:	bfb4      	ite	lt
 8006578:	18d2      	addlt	r2, r2, r3
 800657a:	1b9e      	subge	r6, r3, r6
 800657c:	9b04      	ldr	r3, [sp, #16]
 800657e:	bfbc      	itt	lt
 8006580:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006582:	2600      	movlt	r6, #0
 8006584:	2b00      	cmp	r3, #0
 8006586:	bfb7      	itett	lt
 8006588:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800658c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006590:	1a9d      	sublt	r5, r3, r2
 8006592:	2300      	movlt	r3, #0
 8006594:	e741      	b.n	800641a <_dtoa_r+0x742>
 8006596:	9e08      	ldr	r6, [sp, #32]
 8006598:	9d05      	ldr	r5, [sp, #20]
 800659a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800659c:	e748      	b.n	8006430 <_dtoa_r+0x758>
 800659e:	9a08      	ldr	r2, [sp, #32]
 80065a0:	e770      	b.n	8006484 <_dtoa_r+0x7ac>
 80065a2:	9b07      	ldr	r3, [sp, #28]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	dc19      	bgt.n	80065dc <_dtoa_r+0x904>
 80065a8:	9b02      	ldr	r3, [sp, #8]
 80065aa:	b9bb      	cbnz	r3, 80065dc <_dtoa_r+0x904>
 80065ac:	9b03      	ldr	r3, [sp, #12]
 80065ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065b2:	b99b      	cbnz	r3, 80065dc <_dtoa_r+0x904>
 80065b4:	9b03      	ldr	r3, [sp, #12]
 80065b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065ba:	0d1b      	lsrs	r3, r3, #20
 80065bc:	051b      	lsls	r3, r3, #20
 80065be:	b183      	cbz	r3, 80065e2 <_dtoa_r+0x90a>
 80065c0:	9b05      	ldr	r3, [sp, #20]
 80065c2:	3301      	adds	r3, #1
 80065c4:	9305      	str	r3, [sp, #20]
 80065c6:	9b06      	ldr	r3, [sp, #24]
 80065c8:	3301      	adds	r3, #1
 80065ca:	9306      	str	r3, [sp, #24]
 80065cc:	f04f 0801 	mov.w	r8, #1
 80065d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f47f af6f 	bne.w	80064b6 <_dtoa_r+0x7de>
 80065d8:	2001      	movs	r0, #1
 80065da:	e774      	b.n	80064c6 <_dtoa_r+0x7ee>
 80065dc:	f04f 0800 	mov.w	r8, #0
 80065e0:	e7f6      	b.n	80065d0 <_dtoa_r+0x8f8>
 80065e2:	4698      	mov	r8, r3
 80065e4:	e7f4      	b.n	80065d0 <_dtoa_r+0x8f8>
 80065e6:	d082      	beq.n	80064ee <_dtoa_r+0x816>
 80065e8:	9a05      	ldr	r2, [sp, #20]
 80065ea:	331c      	adds	r3, #28
 80065ec:	441a      	add	r2, r3
 80065ee:	9205      	str	r2, [sp, #20]
 80065f0:	9a06      	ldr	r2, [sp, #24]
 80065f2:	441a      	add	r2, r3
 80065f4:	441d      	add	r5, r3
 80065f6:	9206      	str	r2, [sp, #24]
 80065f8:	e779      	b.n	80064ee <_dtoa_r+0x816>
 80065fa:	4603      	mov	r3, r0
 80065fc:	e7f4      	b.n	80065e8 <_dtoa_r+0x910>
 80065fe:	9b04      	ldr	r3, [sp, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	dc37      	bgt.n	8006674 <_dtoa_r+0x99c>
 8006604:	9b07      	ldr	r3, [sp, #28]
 8006606:	2b02      	cmp	r3, #2
 8006608:	dd34      	ble.n	8006674 <_dtoa_r+0x99c>
 800660a:	9b04      	ldr	r3, [sp, #16]
 800660c:	9301      	str	r3, [sp, #4]
 800660e:	9b01      	ldr	r3, [sp, #4]
 8006610:	b963      	cbnz	r3, 800662c <_dtoa_r+0x954>
 8006612:	4631      	mov	r1, r6
 8006614:	2205      	movs	r2, #5
 8006616:	4620      	mov	r0, r4
 8006618:	f000 f9fe 	bl	8006a18 <__multadd>
 800661c:	4601      	mov	r1, r0
 800661e:	4606      	mov	r6, r0
 8006620:	4650      	mov	r0, sl
 8006622:	f000 fc13 	bl	8006e4c <__mcmp>
 8006626:	2800      	cmp	r0, #0
 8006628:	f73f adbb 	bgt.w	80061a2 <_dtoa_r+0x4ca>
 800662c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800662e:	9d00      	ldr	r5, [sp, #0]
 8006630:	ea6f 0b03 	mvn.w	fp, r3
 8006634:	f04f 0800 	mov.w	r8, #0
 8006638:	4631      	mov	r1, r6
 800663a:	4620      	mov	r0, r4
 800663c:	f000 f9ca 	bl	80069d4 <_Bfree>
 8006640:	2f00      	cmp	r7, #0
 8006642:	f43f aeab 	beq.w	800639c <_dtoa_r+0x6c4>
 8006646:	f1b8 0f00 	cmp.w	r8, #0
 800664a:	d005      	beq.n	8006658 <_dtoa_r+0x980>
 800664c:	45b8      	cmp	r8, r7
 800664e:	d003      	beq.n	8006658 <_dtoa_r+0x980>
 8006650:	4641      	mov	r1, r8
 8006652:	4620      	mov	r0, r4
 8006654:	f000 f9be 	bl	80069d4 <_Bfree>
 8006658:	4639      	mov	r1, r7
 800665a:	4620      	mov	r0, r4
 800665c:	f000 f9ba 	bl	80069d4 <_Bfree>
 8006660:	e69c      	b.n	800639c <_dtoa_r+0x6c4>
 8006662:	2600      	movs	r6, #0
 8006664:	4637      	mov	r7, r6
 8006666:	e7e1      	b.n	800662c <_dtoa_r+0x954>
 8006668:	46bb      	mov	fp, r7
 800666a:	4637      	mov	r7, r6
 800666c:	e599      	b.n	80061a2 <_dtoa_r+0x4ca>
 800666e:	bf00      	nop
 8006670:	40240000 	.word	0x40240000
 8006674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 80c8 	beq.w	800680c <_dtoa_r+0xb34>
 800667c:	9b04      	ldr	r3, [sp, #16]
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	2d00      	cmp	r5, #0
 8006682:	dd05      	ble.n	8006690 <_dtoa_r+0x9b8>
 8006684:	4639      	mov	r1, r7
 8006686:	462a      	mov	r2, r5
 8006688:	4620      	mov	r0, r4
 800668a:	f000 fb73 	bl	8006d74 <__lshift>
 800668e:	4607      	mov	r7, r0
 8006690:	f1b8 0f00 	cmp.w	r8, #0
 8006694:	d05b      	beq.n	800674e <_dtoa_r+0xa76>
 8006696:	6879      	ldr	r1, [r7, #4]
 8006698:	4620      	mov	r0, r4
 800669a:	f000 f95b 	bl	8006954 <_Balloc>
 800669e:	4605      	mov	r5, r0
 80066a0:	b928      	cbnz	r0, 80066ae <_dtoa_r+0x9d6>
 80066a2:	4b83      	ldr	r3, [pc, #524]	; (80068b0 <_dtoa_r+0xbd8>)
 80066a4:	4602      	mov	r2, r0
 80066a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80066aa:	f7ff bb2e 	b.w	8005d0a <_dtoa_r+0x32>
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	3202      	adds	r2, #2
 80066b2:	0092      	lsls	r2, r2, #2
 80066b4:	f107 010c 	add.w	r1, r7, #12
 80066b8:	300c      	adds	r0, #12
 80066ba:	f000 fd75 	bl	80071a8 <memcpy>
 80066be:	2201      	movs	r2, #1
 80066c0:	4629      	mov	r1, r5
 80066c2:	4620      	mov	r0, r4
 80066c4:	f000 fb56 	bl	8006d74 <__lshift>
 80066c8:	9b00      	ldr	r3, [sp, #0]
 80066ca:	3301      	adds	r3, #1
 80066cc:	9304      	str	r3, [sp, #16]
 80066ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066d2:	4413      	add	r3, r2
 80066d4:	9308      	str	r3, [sp, #32]
 80066d6:	9b02      	ldr	r3, [sp, #8]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	46b8      	mov	r8, r7
 80066de:	9306      	str	r3, [sp, #24]
 80066e0:	4607      	mov	r7, r0
 80066e2:	9b04      	ldr	r3, [sp, #16]
 80066e4:	4631      	mov	r1, r6
 80066e6:	3b01      	subs	r3, #1
 80066e8:	4650      	mov	r0, sl
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	f7ff fa69 	bl	8005bc2 <quorem>
 80066f0:	4641      	mov	r1, r8
 80066f2:	9002      	str	r0, [sp, #8]
 80066f4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80066f8:	4650      	mov	r0, sl
 80066fa:	f000 fba7 	bl	8006e4c <__mcmp>
 80066fe:	463a      	mov	r2, r7
 8006700:	9005      	str	r0, [sp, #20]
 8006702:	4631      	mov	r1, r6
 8006704:	4620      	mov	r0, r4
 8006706:	f000 fbbd 	bl	8006e84 <__mdiff>
 800670a:	68c2      	ldr	r2, [r0, #12]
 800670c:	4605      	mov	r5, r0
 800670e:	bb02      	cbnz	r2, 8006752 <_dtoa_r+0xa7a>
 8006710:	4601      	mov	r1, r0
 8006712:	4650      	mov	r0, sl
 8006714:	f000 fb9a 	bl	8006e4c <__mcmp>
 8006718:	4602      	mov	r2, r0
 800671a:	4629      	mov	r1, r5
 800671c:	4620      	mov	r0, r4
 800671e:	9209      	str	r2, [sp, #36]	; 0x24
 8006720:	f000 f958 	bl	80069d4 <_Bfree>
 8006724:	9b07      	ldr	r3, [sp, #28]
 8006726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006728:	9d04      	ldr	r5, [sp, #16]
 800672a:	ea43 0102 	orr.w	r1, r3, r2
 800672e:	9b06      	ldr	r3, [sp, #24]
 8006730:	4319      	orrs	r1, r3
 8006732:	d110      	bne.n	8006756 <_dtoa_r+0xa7e>
 8006734:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006738:	d029      	beq.n	800678e <_dtoa_r+0xab6>
 800673a:	9b05      	ldr	r3, [sp, #20]
 800673c:	2b00      	cmp	r3, #0
 800673e:	dd02      	ble.n	8006746 <_dtoa_r+0xa6e>
 8006740:	9b02      	ldr	r3, [sp, #8]
 8006742:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006746:	9b01      	ldr	r3, [sp, #4]
 8006748:	f883 9000 	strb.w	r9, [r3]
 800674c:	e774      	b.n	8006638 <_dtoa_r+0x960>
 800674e:	4638      	mov	r0, r7
 8006750:	e7ba      	b.n	80066c8 <_dtoa_r+0x9f0>
 8006752:	2201      	movs	r2, #1
 8006754:	e7e1      	b.n	800671a <_dtoa_r+0xa42>
 8006756:	9b05      	ldr	r3, [sp, #20]
 8006758:	2b00      	cmp	r3, #0
 800675a:	db04      	blt.n	8006766 <_dtoa_r+0xa8e>
 800675c:	9907      	ldr	r1, [sp, #28]
 800675e:	430b      	orrs	r3, r1
 8006760:	9906      	ldr	r1, [sp, #24]
 8006762:	430b      	orrs	r3, r1
 8006764:	d120      	bne.n	80067a8 <_dtoa_r+0xad0>
 8006766:	2a00      	cmp	r2, #0
 8006768:	dded      	ble.n	8006746 <_dtoa_r+0xa6e>
 800676a:	4651      	mov	r1, sl
 800676c:	2201      	movs	r2, #1
 800676e:	4620      	mov	r0, r4
 8006770:	f000 fb00 	bl	8006d74 <__lshift>
 8006774:	4631      	mov	r1, r6
 8006776:	4682      	mov	sl, r0
 8006778:	f000 fb68 	bl	8006e4c <__mcmp>
 800677c:	2800      	cmp	r0, #0
 800677e:	dc03      	bgt.n	8006788 <_dtoa_r+0xab0>
 8006780:	d1e1      	bne.n	8006746 <_dtoa_r+0xa6e>
 8006782:	f019 0f01 	tst.w	r9, #1
 8006786:	d0de      	beq.n	8006746 <_dtoa_r+0xa6e>
 8006788:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800678c:	d1d8      	bne.n	8006740 <_dtoa_r+0xa68>
 800678e:	9a01      	ldr	r2, [sp, #4]
 8006790:	2339      	movs	r3, #57	; 0x39
 8006792:	7013      	strb	r3, [r2, #0]
 8006794:	462b      	mov	r3, r5
 8006796:	461d      	mov	r5, r3
 8006798:	3b01      	subs	r3, #1
 800679a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800679e:	2a39      	cmp	r2, #57	; 0x39
 80067a0:	d06c      	beq.n	800687c <_dtoa_r+0xba4>
 80067a2:	3201      	adds	r2, #1
 80067a4:	701a      	strb	r2, [r3, #0]
 80067a6:	e747      	b.n	8006638 <_dtoa_r+0x960>
 80067a8:	2a00      	cmp	r2, #0
 80067aa:	dd07      	ble.n	80067bc <_dtoa_r+0xae4>
 80067ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80067b0:	d0ed      	beq.n	800678e <_dtoa_r+0xab6>
 80067b2:	9a01      	ldr	r2, [sp, #4]
 80067b4:	f109 0301 	add.w	r3, r9, #1
 80067b8:	7013      	strb	r3, [r2, #0]
 80067ba:	e73d      	b.n	8006638 <_dtoa_r+0x960>
 80067bc:	9b04      	ldr	r3, [sp, #16]
 80067be:	9a08      	ldr	r2, [sp, #32]
 80067c0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d043      	beq.n	8006850 <_dtoa_r+0xb78>
 80067c8:	4651      	mov	r1, sl
 80067ca:	2300      	movs	r3, #0
 80067cc:	220a      	movs	r2, #10
 80067ce:	4620      	mov	r0, r4
 80067d0:	f000 f922 	bl	8006a18 <__multadd>
 80067d4:	45b8      	cmp	r8, r7
 80067d6:	4682      	mov	sl, r0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	f04f 020a 	mov.w	r2, #10
 80067e0:	4641      	mov	r1, r8
 80067e2:	4620      	mov	r0, r4
 80067e4:	d107      	bne.n	80067f6 <_dtoa_r+0xb1e>
 80067e6:	f000 f917 	bl	8006a18 <__multadd>
 80067ea:	4680      	mov	r8, r0
 80067ec:	4607      	mov	r7, r0
 80067ee:	9b04      	ldr	r3, [sp, #16]
 80067f0:	3301      	adds	r3, #1
 80067f2:	9304      	str	r3, [sp, #16]
 80067f4:	e775      	b.n	80066e2 <_dtoa_r+0xa0a>
 80067f6:	f000 f90f 	bl	8006a18 <__multadd>
 80067fa:	4639      	mov	r1, r7
 80067fc:	4680      	mov	r8, r0
 80067fe:	2300      	movs	r3, #0
 8006800:	220a      	movs	r2, #10
 8006802:	4620      	mov	r0, r4
 8006804:	f000 f908 	bl	8006a18 <__multadd>
 8006808:	4607      	mov	r7, r0
 800680a:	e7f0      	b.n	80067ee <_dtoa_r+0xb16>
 800680c:	9b04      	ldr	r3, [sp, #16]
 800680e:	9301      	str	r3, [sp, #4]
 8006810:	9d00      	ldr	r5, [sp, #0]
 8006812:	4631      	mov	r1, r6
 8006814:	4650      	mov	r0, sl
 8006816:	f7ff f9d4 	bl	8005bc2 <quorem>
 800681a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800681e:	9b00      	ldr	r3, [sp, #0]
 8006820:	f805 9b01 	strb.w	r9, [r5], #1
 8006824:	1aea      	subs	r2, r5, r3
 8006826:	9b01      	ldr	r3, [sp, #4]
 8006828:	4293      	cmp	r3, r2
 800682a:	dd07      	ble.n	800683c <_dtoa_r+0xb64>
 800682c:	4651      	mov	r1, sl
 800682e:	2300      	movs	r3, #0
 8006830:	220a      	movs	r2, #10
 8006832:	4620      	mov	r0, r4
 8006834:	f000 f8f0 	bl	8006a18 <__multadd>
 8006838:	4682      	mov	sl, r0
 800683a:	e7ea      	b.n	8006812 <_dtoa_r+0xb3a>
 800683c:	9b01      	ldr	r3, [sp, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	bfc8      	it	gt
 8006842:	461d      	movgt	r5, r3
 8006844:	9b00      	ldr	r3, [sp, #0]
 8006846:	bfd8      	it	le
 8006848:	2501      	movle	r5, #1
 800684a:	441d      	add	r5, r3
 800684c:	f04f 0800 	mov.w	r8, #0
 8006850:	4651      	mov	r1, sl
 8006852:	2201      	movs	r2, #1
 8006854:	4620      	mov	r0, r4
 8006856:	f000 fa8d 	bl	8006d74 <__lshift>
 800685a:	4631      	mov	r1, r6
 800685c:	4682      	mov	sl, r0
 800685e:	f000 faf5 	bl	8006e4c <__mcmp>
 8006862:	2800      	cmp	r0, #0
 8006864:	dc96      	bgt.n	8006794 <_dtoa_r+0xabc>
 8006866:	d102      	bne.n	800686e <_dtoa_r+0xb96>
 8006868:	f019 0f01 	tst.w	r9, #1
 800686c:	d192      	bne.n	8006794 <_dtoa_r+0xabc>
 800686e:	462b      	mov	r3, r5
 8006870:	461d      	mov	r5, r3
 8006872:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006876:	2a30      	cmp	r2, #48	; 0x30
 8006878:	d0fa      	beq.n	8006870 <_dtoa_r+0xb98>
 800687a:	e6dd      	b.n	8006638 <_dtoa_r+0x960>
 800687c:	9a00      	ldr	r2, [sp, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d189      	bne.n	8006796 <_dtoa_r+0xabe>
 8006882:	f10b 0b01 	add.w	fp, fp, #1
 8006886:	2331      	movs	r3, #49	; 0x31
 8006888:	e796      	b.n	80067b8 <_dtoa_r+0xae0>
 800688a:	4b0a      	ldr	r3, [pc, #40]	; (80068b4 <_dtoa_r+0xbdc>)
 800688c:	f7ff ba99 	b.w	8005dc2 <_dtoa_r+0xea>
 8006890:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006892:	2b00      	cmp	r3, #0
 8006894:	f47f aa6d 	bne.w	8005d72 <_dtoa_r+0x9a>
 8006898:	4b07      	ldr	r3, [pc, #28]	; (80068b8 <_dtoa_r+0xbe0>)
 800689a:	f7ff ba92 	b.w	8005dc2 <_dtoa_r+0xea>
 800689e:	9b01      	ldr	r3, [sp, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	dcb5      	bgt.n	8006810 <_dtoa_r+0xb38>
 80068a4:	9b07      	ldr	r3, [sp, #28]
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	f73f aeb1 	bgt.w	800660e <_dtoa_r+0x936>
 80068ac:	e7b0      	b.n	8006810 <_dtoa_r+0xb38>
 80068ae:	bf00      	nop
 80068b0:	080078f0 	.word	0x080078f0
 80068b4:	08007850 	.word	0x08007850
 80068b8:	08007874 	.word	0x08007874

080068bc <_free_r>:
 80068bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068be:	2900      	cmp	r1, #0
 80068c0:	d044      	beq.n	800694c <_free_r+0x90>
 80068c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068c6:	9001      	str	r0, [sp, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f1a1 0404 	sub.w	r4, r1, #4
 80068ce:	bfb8      	it	lt
 80068d0:	18e4      	addlt	r4, r4, r3
 80068d2:	f7fe fb6f 	bl	8004fb4 <__malloc_lock>
 80068d6:	4a1e      	ldr	r2, [pc, #120]	; (8006950 <_free_r+0x94>)
 80068d8:	9801      	ldr	r0, [sp, #4]
 80068da:	6813      	ldr	r3, [r2, #0]
 80068dc:	b933      	cbnz	r3, 80068ec <_free_r+0x30>
 80068de:	6063      	str	r3, [r4, #4]
 80068e0:	6014      	str	r4, [r2, #0]
 80068e2:	b003      	add	sp, #12
 80068e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068e8:	f7fe bb6a 	b.w	8004fc0 <__malloc_unlock>
 80068ec:	42a3      	cmp	r3, r4
 80068ee:	d908      	bls.n	8006902 <_free_r+0x46>
 80068f0:	6825      	ldr	r5, [r4, #0]
 80068f2:	1961      	adds	r1, r4, r5
 80068f4:	428b      	cmp	r3, r1
 80068f6:	bf01      	itttt	eq
 80068f8:	6819      	ldreq	r1, [r3, #0]
 80068fa:	685b      	ldreq	r3, [r3, #4]
 80068fc:	1949      	addeq	r1, r1, r5
 80068fe:	6021      	streq	r1, [r4, #0]
 8006900:	e7ed      	b.n	80068de <_free_r+0x22>
 8006902:	461a      	mov	r2, r3
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	b10b      	cbz	r3, 800690c <_free_r+0x50>
 8006908:	42a3      	cmp	r3, r4
 800690a:	d9fa      	bls.n	8006902 <_free_r+0x46>
 800690c:	6811      	ldr	r1, [r2, #0]
 800690e:	1855      	adds	r5, r2, r1
 8006910:	42a5      	cmp	r5, r4
 8006912:	d10b      	bne.n	800692c <_free_r+0x70>
 8006914:	6824      	ldr	r4, [r4, #0]
 8006916:	4421      	add	r1, r4
 8006918:	1854      	adds	r4, r2, r1
 800691a:	42a3      	cmp	r3, r4
 800691c:	6011      	str	r1, [r2, #0]
 800691e:	d1e0      	bne.n	80068e2 <_free_r+0x26>
 8006920:	681c      	ldr	r4, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	6053      	str	r3, [r2, #4]
 8006926:	440c      	add	r4, r1
 8006928:	6014      	str	r4, [r2, #0]
 800692a:	e7da      	b.n	80068e2 <_free_r+0x26>
 800692c:	d902      	bls.n	8006934 <_free_r+0x78>
 800692e:	230c      	movs	r3, #12
 8006930:	6003      	str	r3, [r0, #0]
 8006932:	e7d6      	b.n	80068e2 <_free_r+0x26>
 8006934:	6825      	ldr	r5, [r4, #0]
 8006936:	1961      	adds	r1, r4, r5
 8006938:	428b      	cmp	r3, r1
 800693a:	bf04      	itt	eq
 800693c:	6819      	ldreq	r1, [r3, #0]
 800693e:	685b      	ldreq	r3, [r3, #4]
 8006940:	6063      	str	r3, [r4, #4]
 8006942:	bf04      	itt	eq
 8006944:	1949      	addeq	r1, r1, r5
 8006946:	6021      	streq	r1, [r4, #0]
 8006948:	6054      	str	r4, [r2, #4]
 800694a:	e7ca      	b.n	80068e2 <_free_r+0x26>
 800694c:	b003      	add	sp, #12
 800694e:	bd30      	pop	{r4, r5, pc}
 8006950:	2000034c 	.word	0x2000034c

08006954 <_Balloc>:
 8006954:	b570      	push	{r4, r5, r6, lr}
 8006956:	69c6      	ldr	r6, [r0, #28]
 8006958:	4604      	mov	r4, r0
 800695a:	460d      	mov	r5, r1
 800695c:	b976      	cbnz	r6, 800697c <_Balloc+0x28>
 800695e:	2010      	movs	r0, #16
 8006960:	f7fe fa80 	bl	8004e64 <malloc>
 8006964:	4602      	mov	r2, r0
 8006966:	61e0      	str	r0, [r4, #28]
 8006968:	b920      	cbnz	r0, 8006974 <_Balloc+0x20>
 800696a:	4b18      	ldr	r3, [pc, #96]	; (80069cc <_Balloc+0x78>)
 800696c:	4818      	ldr	r0, [pc, #96]	; (80069d0 <_Balloc+0x7c>)
 800696e:	216b      	movs	r1, #107	; 0x6b
 8006970:	f000 fc28 	bl	80071c4 <__assert_func>
 8006974:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006978:	6006      	str	r6, [r0, #0]
 800697a:	60c6      	str	r6, [r0, #12]
 800697c:	69e6      	ldr	r6, [r4, #28]
 800697e:	68f3      	ldr	r3, [r6, #12]
 8006980:	b183      	cbz	r3, 80069a4 <_Balloc+0x50>
 8006982:	69e3      	ldr	r3, [r4, #28]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800698a:	b9b8      	cbnz	r0, 80069bc <_Balloc+0x68>
 800698c:	2101      	movs	r1, #1
 800698e:	fa01 f605 	lsl.w	r6, r1, r5
 8006992:	1d72      	adds	r2, r6, #5
 8006994:	0092      	lsls	r2, r2, #2
 8006996:	4620      	mov	r0, r4
 8006998:	f000 fc32 	bl	8007200 <_calloc_r>
 800699c:	b160      	cbz	r0, 80069b8 <_Balloc+0x64>
 800699e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069a2:	e00e      	b.n	80069c2 <_Balloc+0x6e>
 80069a4:	2221      	movs	r2, #33	; 0x21
 80069a6:	2104      	movs	r1, #4
 80069a8:	4620      	mov	r0, r4
 80069aa:	f000 fc29 	bl	8007200 <_calloc_r>
 80069ae:	69e3      	ldr	r3, [r4, #28]
 80069b0:	60f0      	str	r0, [r6, #12]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e4      	bne.n	8006982 <_Balloc+0x2e>
 80069b8:	2000      	movs	r0, #0
 80069ba:	bd70      	pop	{r4, r5, r6, pc}
 80069bc:	6802      	ldr	r2, [r0, #0]
 80069be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069c2:	2300      	movs	r3, #0
 80069c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069c8:	e7f7      	b.n	80069ba <_Balloc+0x66>
 80069ca:	bf00      	nop
 80069cc:	08007881 	.word	0x08007881
 80069d0:	08007901 	.word	0x08007901

080069d4 <_Bfree>:
 80069d4:	b570      	push	{r4, r5, r6, lr}
 80069d6:	69c6      	ldr	r6, [r0, #28]
 80069d8:	4605      	mov	r5, r0
 80069da:	460c      	mov	r4, r1
 80069dc:	b976      	cbnz	r6, 80069fc <_Bfree+0x28>
 80069de:	2010      	movs	r0, #16
 80069e0:	f7fe fa40 	bl	8004e64 <malloc>
 80069e4:	4602      	mov	r2, r0
 80069e6:	61e8      	str	r0, [r5, #28]
 80069e8:	b920      	cbnz	r0, 80069f4 <_Bfree+0x20>
 80069ea:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <_Bfree+0x3c>)
 80069ec:	4809      	ldr	r0, [pc, #36]	; (8006a14 <_Bfree+0x40>)
 80069ee:	218f      	movs	r1, #143	; 0x8f
 80069f0:	f000 fbe8 	bl	80071c4 <__assert_func>
 80069f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069f8:	6006      	str	r6, [r0, #0]
 80069fa:	60c6      	str	r6, [r0, #12]
 80069fc:	b13c      	cbz	r4, 8006a0e <_Bfree+0x3a>
 80069fe:	69eb      	ldr	r3, [r5, #28]
 8006a00:	6862      	ldr	r2, [r4, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a08:	6021      	str	r1, [r4, #0]
 8006a0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
 8006a10:	08007881 	.word	0x08007881
 8006a14:	08007901 	.word	0x08007901

08006a18 <__multadd>:
 8006a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a1c:	690d      	ldr	r5, [r1, #16]
 8006a1e:	4607      	mov	r7, r0
 8006a20:	460c      	mov	r4, r1
 8006a22:	461e      	mov	r6, r3
 8006a24:	f101 0c14 	add.w	ip, r1, #20
 8006a28:	2000      	movs	r0, #0
 8006a2a:	f8dc 3000 	ldr.w	r3, [ip]
 8006a2e:	b299      	uxth	r1, r3
 8006a30:	fb02 6101 	mla	r1, r2, r1, r6
 8006a34:	0c1e      	lsrs	r6, r3, #16
 8006a36:	0c0b      	lsrs	r3, r1, #16
 8006a38:	fb02 3306 	mla	r3, r2, r6, r3
 8006a3c:	b289      	uxth	r1, r1
 8006a3e:	3001      	adds	r0, #1
 8006a40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a44:	4285      	cmp	r5, r0
 8006a46:	f84c 1b04 	str.w	r1, [ip], #4
 8006a4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a4e:	dcec      	bgt.n	8006a2a <__multadd+0x12>
 8006a50:	b30e      	cbz	r6, 8006a96 <__multadd+0x7e>
 8006a52:	68a3      	ldr	r3, [r4, #8]
 8006a54:	42ab      	cmp	r3, r5
 8006a56:	dc19      	bgt.n	8006a8c <__multadd+0x74>
 8006a58:	6861      	ldr	r1, [r4, #4]
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	3101      	adds	r1, #1
 8006a5e:	f7ff ff79 	bl	8006954 <_Balloc>
 8006a62:	4680      	mov	r8, r0
 8006a64:	b928      	cbnz	r0, 8006a72 <__multadd+0x5a>
 8006a66:	4602      	mov	r2, r0
 8006a68:	4b0c      	ldr	r3, [pc, #48]	; (8006a9c <__multadd+0x84>)
 8006a6a:	480d      	ldr	r0, [pc, #52]	; (8006aa0 <__multadd+0x88>)
 8006a6c:	21ba      	movs	r1, #186	; 0xba
 8006a6e:	f000 fba9 	bl	80071c4 <__assert_func>
 8006a72:	6922      	ldr	r2, [r4, #16]
 8006a74:	3202      	adds	r2, #2
 8006a76:	f104 010c 	add.w	r1, r4, #12
 8006a7a:	0092      	lsls	r2, r2, #2
 8006a7c:	300c      	adds	r0, #12
 8006a7e:	f000 fb93 	bl	80071a8 <memcpy>
 8006a82:	4621      	mov	r1, r4
 8006a84:	4638      	mov	r0, r7
 8006a86:	f7ff ffa5 	bl	80069d4 <_Bfree>
 8006a8a:	4644      	mov	r4, r8
 8006a8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a90:	3501      	adds	r5, #1
 8006a92:	615e      	str	r6, [r3, #20]
 8006a94:	6125      	str	r5, [r4, #16]
 8006a96:	4620      	mov	r0, r4
 8006a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a9c:	080078f0 	.word	0x080078f0
 8006aa0:	08007901 	.word	0x08007901

08006aa4 <__hi0bits>:
 8006aa4:	0c03      	lsrs	r3, r0, #16
 8006aa6:	041b      	lsls	r3, r3, #16
 8006aa8:	b9d3      	cbnz	r3, 8006ae0 <__hi0bits+0x3c>
 8006aaa:	0400      	lsls	r0, r0, #16
 8006aac:	2310      	movs	r3, #16
 8006aae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006ab2:	bf04      	itt	eq
 8006ab4:	0200      	lsleq	r0, r0, #8
 8006ab6:	3308      	addeq	r3, #8
 8006ab8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006abc:	bf04      	itt	eq
 8006abe:	0100      	lsleq	r0, r0, #4
 8006ac0:	3304      	addeq	r3, #4
 8006ac2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006ac6:	bf04      	itt	eq
 8006ac8:	0080      	lsleq	r0, r0, #2
 8006aca:	3302      	addeq	r3, #2
 8006acc:	2800      	cmp	r0, #0
 8006ace:	db05      	blt.n	8006adc <__hi0bits+0x38>
 8006ad0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ad4:	f103 0301 	add.w	r3, r3, #1
 8006ad8:	bf08      	it	eq
 8006ada:	2320      	moveq	r3, #32
 8006adc:	4618      	mov	r0, r3
 8006ade:	4770      	bx	lr
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	e7e4      	b.n	8006aae <__hi0bits+0xa>

08006ae4 <__lo0bits>:
 8006ae4:	6803      	ldr	r3, [r0, #0]
 8006ae6:	f013 0207 	ands.w	r2, r3, #7
 8006aea:	d00c      	beq.n	8006b06 <__lo0bits+0x22>
 8006aec:	07d9      	lsls	r1, r3, #31
 8006aee:	d422      	bmi.n	8006b36 <__lo0bits+0x52>
 8006af0:	079a      	lsls	r2, r3, #30
 8006af2:	bf49      	itett	mi
 8006af4:	085b      	lsrmi	r3, r3, #1
 8006af6:	089b      	lsrpl	r3, r3, #2
 8006af8:	6003      	strmi	r3, [r0, #0]
 8006afa:	2201      	movmi	r2, #1
 8006afc:	bf5c      	itt	pl
 8006afe:	6003      	strpl	r3, [r0, #0]
 8006b00:	2202      	movpl	r2, #2
 8006b02:	4610      	mov	r0, r2
 8006b04:	4770      	bx	lr
 8006b06:	b299      	uxth	r1, r3
 8006b08:	b909      	cbnz	r1, 8006b0e <__lo0bits+0x2a>
 8006b0a:	0c1b      	lsrs	r3, r3, #16
 8006b0c:	2210      	movs	r2, #16
 8006b0e:	b2d9      	uxtb	r1, r3
 8006b10:	b909      	cbnz	r1, 8006b16 <__lo0bits+0x32>
 8006b12:	3208      	adds	r2, #8
 8006b14:	0a1b      	lsrs	r3, r3, #8
 8006b16:	0719      	lsls	r1, r3, #28
 8006b18:	bf04      	itt	eq
 8006b1a:	091b      	lsreq	r3, r3, #4
 8006b1c:	3204      	addeq	r2, #4
 8006b1e:	0799      	lsls	r1, r3, #30
 8006b20:	bf04      	itt	eq
 8006b22:	089b      	lsreq	r3, r3, #2
 8006b24:	3202      	addeq	r2, #2
 8006b26:	07d9      	lsls	r1, r3, #31
 8006b28:	d403      	bmi.n	8006b32 <__lo0bits+0x4e>
 8006b2a:	085b      	lsrs	r3, r3, #1
 8006b2c:	f102 0201 	add.w	r2, r2, #1
 8006b30:	d003      	beq.n	8006b3a <__lo0bits+0x56>
 8006b32:	6003      	str	r3, [r0, #0]
 8006b34:	e7e5      	b.n	8006b02 <__lo0bits+0x1e>
 8006b36:	2200      	movs	r2, #0
 8006b38:	e7e3      	b.n	8006b02 <__lo0bits+0x1e>
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	e7e1      	b.n	8006b02 <__lo0bits+0x1e>
	...

08006b40 <__i2b>:
 8006b40:	b510      	push	{r4, lr}
 8006b42:	460c      	mov	r4, r1
 8006b44:	2101      	movs	r1, #1
 8006b46:	f7ff ff05 	bl	8006954 <_Balloc>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	b928      	cbnz	r0, 8006b5a <__i2b+0x1a>
 8006b4e:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <__i2b+0x24>)
 8006b50:	4805      	ldr	r0, [pc, #20]	; (8006b68 <__i2b+0x28>)
 8006b52:	f240 1145 	movw	r1, #325	; 0x145
 8006b56:	f000 fb35 	bl	80071c4 <__assert_func>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	6144      	str	r4, [r0, #20]
 8006b5e:	6103      	str	r3, [r0, #16]
 8006b60:	bd10      	pop	{r4, pc}
 8006b62:	bf00      	nop
 8006b64:	080078f0 	.word	0x080078f0
 8006b68:	08007901 	.word	0x08007901

08006b6c <__multiply>:
 8006b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b70:	4691      	mov	r9, r2
 8006b72:	690a      	ldr	r2, [r1, #16]
 8006b74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	bfb8      	it	lt
 8006b7c:	460b      	movlt	r3, r1
 8006b7e:	460c      	mov	r4, r1
 8006b80:	bfbc      	itt	lt
 8006b82:	464c      	movlt	r4, r9
 8006b84:	4699      	movlt	r9, r3
 8006b86:	6927      	ldr	r7, [r4, #16]
 8006b88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b8c:	68a3      	ldr	r3, [r4, #8]
 8006b8e:	6861      	ldr	r1, [r4, #4]
 8006b90:	eb07 060a 	add.w	r6, r7, sl
 8006b94:	42b3      	cmp	r3, r6
 8006b96:	b085      	sub	sp, #20
 8006b98:	bfb8      	it	lt
 8006b9a:	3101      	addlt	r1, #1
 8006b9c:	f7ff feda 	bl	8006954 <_Balloc>
 8006ba0:	b930      	cbnz	r0, 8006bb0 <__multiply+0x44>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	4b44      	ldr	r3, [pc, #272]	; (8006cb8 <__multiply+0x14c>)
 8006ba6:	4845      	ldr	r0, [pc, #276]	; (8006cbc <__multiply+0x150>)
 8006ba8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006bac:	f000 fb0a 	bl	80071c4 <__assert_func>
 8006bb0:	f100 0514 	add.w	r5, r0, #20
 8006bb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006bb8:	462b      	mov	r3, r5
 8006bba:	2200      	movs	r2, #0
 8006bbc:	4543      	cmp	r3, r8
 8006bbe:	d321      	bcc.n	8006c04 <__multiply+0x98>
 8006bc0:	f104 0314 	add.w	r3, r4, #20
 8006bc4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006bc8:	f109 0314 	add.w	r3, r9, #20
 8006bcc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006bd0:	9202      	str	r2, [sp, #8]
 8006bd2:	1b3a      	subs	r2, r7, r4
 8006bd4:	3a15      	subs	r2, #21
 8006bd6:	f022 0203 	bic.w	r2, r2, #3
 8006bda:	3204      	adds	r2, #4
 8006bdc:	f104 0115 	add.w	r1, r4, #21
 8006be0:	428f      	cmp	r7, r1
 8006be2:	bf38      	it	cc
 8006be4:	2204      	movcc	r2, #4
 8006be6:	9201      	str	r2, [sp, #4]
 8006be8:	9a02      	ldr	r2, [sp, #8]
 8006bea:	9303      	str	r3, [sp, #12]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d80c      	bhi.n	8006c0a <__multiply+0x9e>
 8006bf0:	2e00      	cmp	r6, #0
 8006bf2:	dd03      	ble.n	8006bfc <__multiply+0x90>
 8006bf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d05b      	beq.n	8006cb4 <__multiply+0x148>
 8006bfc:	6106      	str	r6, [r0, #16]
 8006bfe:	b005      	add	sp, #20
 8006c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c04:	f843 2b04 	str.w	r2, [r3], #4
 8006c08:	e7d8      	b.n	8006bbc <__multiply+0x50>
 8006c0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c0e:	f1ba 0f00 	cmp.w	sl, #0
 8006c12:	d024      	beq.n	8006c5e <__multiply+0xf2>
 8006c14:	f104 0e14 	add.w	lr, r4, #20
 8006c18:	46a9      	mov	r9, r5
 8006c1a:	f04f 0c00 	mov.w	ip, #0
 8006c1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c22:	f8d9 1000 	ldr.w	r1, [r9]
 8006c26:	fa1f fb82 	uxth.w	fp, r2
 8006c2a:	b289      	uxth	r1, r1
 8006c2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006c30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006c34:	f8d9 2000 	ldr.w	r2, [r9]
 8006c38:	4461      	add	r1, ip
 8006c3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006c42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c46:	b289      	uxth	r1, r1
 8006c48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c4c:	4577      	cmp	r7, lr
 8006c4e:	f849 1b04 	str.w	r1, [r9], #4
 8006c52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c56:	d8e2      	bhi.n	8006c1e <__multiply+0xb2>
 8006c58:	9a01      	ldr	r2, [sp, #4]
 8006c5a:	f845 c002 	str.w	ip, [r5, r2]
 8006c5e:	9a03      	ldr	r2, [sp, #12]
 8006c60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c64:	3304      	adds	r3, #4
 8006c66:	f1b9 0f00 	cmp.w	r9, #0
 8006c6a:	d021      	beq.n	8006cb0 <__multiply+0x144>
 8006c6c:	6829      	ldr	r1, [r5, #0]
 8006c6e:	f104 0c14 	add.w	ip, r4, #20
 8006c72:	46ae      	mov	lr, r5
 8006c74:	f04f 0a00 	mov.w	sl, #0
 8006c78:	f8bc b000 	ldrh.w	fp, [ip]
 8006c7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006c80:	fb09 220b 	mla	r2, r9, fp, r2
 8006c84:	4452      	add	r2, sl
 8006c86:	b289      	uxth	r1, r1
 8006c88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c8c:	f84e 1b04 	str.w	r1, [lr], #4
 8006c90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006c94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c98:	f8be 1000 	ldrh.w	r1, [lr]
 8006c9c:	fb09 110a 	mla	r1, r9, sl, r1
 8006ca0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006ca4:	4567      	cmp	r7, ip
 8006ca6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006caa:	d8e5      	bhi.n	8006c78 <__multiply+0x10c>
 8006cac:	9a01      	ldr	r2, [sp, #4]
 8006cae:	50a9      	str	r1, [r5, r2]
 8006cb0:	3504      	adds	r5, #4
 8006cb2:	e799      	b.n	8006be8 <__multiply+0x7c>
 8006cb4:	3e01      	subs	r6, #1
 8006cb6:	e79b      	b.n	8006bf0 <__multiply+0x84>
 8006cb8:	080078f0 	.word	0x080078f0
 8006cbc:	08007901 	.word	0x08007901

08006cc0 <__pow5mult>:
 8006cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cc4:	4615      	mov	r5, r2
 8006cc6:	f012 0203 	ands.w	r2, r2, #3
 8006cca:	4606      	mov	r6, r0
 8006ccc:	460f      	mov	r7, r1
 8006cce:	d007      	beq.n	8006ce0 <__pow5mult+0x20>
 8006cd0:	4c25      	ldr	r4, [pc, #148]	; (8006d68 <__pow5mult+0xa8>)
 8006cd2:	3a01      	subs	r2, #1
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cda:	f7ff fe9d 	bl	8006a18 <__multadd>
 8006cde:	4607      	mov	r7, r0
 8006ce0:	10ad      	asrs	r5, r5, #2
 8006ce2:	d03d      	beq.n	8006d60 <__pow5mult+0xa0>
 8006ce4:	69f4      	ldr	r4, [r6, #28]
 8006ce6:	b97c      	cbnz	r4, 8006d08 <__pow5mult+0x48>
 8006ce8:	2010      	movs	r0, #16
 8006cea:	f7fe f8bb 	bl	8004e64 <malloc>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	61f0      	str	r0, [r6, #28]
 8006cf2:	b928      	cbnz	r0, 8006d00 <__pow5mult+0x40>
 8006cf4:	4b1d      	ldr	r3, [pc, #116]	; (8006d6c <__pow5mult+0xac>)
 8006cf6:	481e      	ldr	r0, [pc, #120]	; (8006d70 <__pow5mult+0xb0>)
 8006cf8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006cfc:	f000 fa62 	bl	80071c4 <__assert_func>
 8006d00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d04:	6004      	str	r4, [r0, #0]
 8006d06:	60c4      	str	r4, [r0, #12]
 8006d08:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006d0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d10:	b94c      	cbnz	r4, 8006d26 <__pow5mult+0x66>
 8006d12:	f240 2171 	movw	r1, #625	; 0x271
 8006d16:	4630      	mov	r0, r6
 8006d18:	f7ff ff12 	bl	8006b40 <__i2b>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d22:	4604      	mov	r4, r0
 8006d24:	6003      	str	r3, [r0, #0]
 8006d26:	f04f 0900 	mov.w	r9, #0
 8006d2a:	07eb      	lsls	r3, r5, #31
 8006d2c:	d50a      	bpl.n	8006d44 <__pow5mult+0x84>
 8006d2e:	4639      	mov	r1, r7
 8006d30:	4622      	mov	r2, r4
 8006d32:	4630      	mov	r0, r6
 8006d34:	f7ff ff1a 	bl	8006b6c <__multiply>
 8006d38:	4639      	mov	r1, r7
 8006d3a:	4680      	mov	r8, r0
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f7ff fe49 	bl	80069d4 <_Bfree>
 8006d42:	4647      	mov	r7, r8
 8006d44:	106d      	asrs	r5, r5, #1
 8006d46:	d00b      	beq.n	8006d60 <__pow5mult+0xa0>
 8006d48:	6820      	ldr	r0, [r4, #0]
 8006d4a:	b938      	cbnz	r0, 8006d5c <__pow5mult+0x9c>
 8006d4c:	4622      	mov	r2, r4
 8006d4e:	4621      	mov	r1, r4
 8006d50:	4630      	mov	r0, r6
 8006d52:	f7ff ff0b 	bl	8006b6c <__multiply>
 8006d56:	6020      	str	r0, [r4, #0]
 8006d58:	f8c0 9000 	str.w	r9, [r0]
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	e7e4      	b.n	8006d2a <__pow5mult+0x6a>
 8006d60:	4638      	mov	r0, r7
 8006d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d66:	bf00      	nop
 8006d68:	08007a50 	.word	0x08007a50
 8006d6c:	08007881 	.word	0x08007881
 8006d70:	08007901 	.word	0x08007901

08006d74 <__lshift>:
 8006d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d78:	460c      	mov	r4, r1
 8006d7a:	6849      	ldr	r1, [r1, #4]
 8006d7c:	6923      	ldr	r3, [r4, #16]
 8006d7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d82:	68a3      	ldr	r3, [r4, #8]
 8006d84:	4607      	mov	r7, r0
 8006d86:	4691      	mov	r9, r2
 8006d88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d8c:	f108 0601 	add.w	r6, r8, #1
 8006d90:	42b3      	cmp	r3, r6
 8006d92:	db0b      	blt.n	8006dac <__lshift+0x38>
 8006d94:	4638      	mov	r0, r7
 8006d96:	f7ff fddd 	bl	8006954 <_Balloc>
 8006d9a:	4605      	mov	r5, r0
 8006d9c:	b948      	cbnz	r0, 8006db2 <__lshift+0x3e>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	4b28      	ldr	r3, [pc, #160]	; (8006e44 <__lshift+0xd0>)
 8006da2:	4829      	ldr	r0, [pc, #164]	; (8006e48 <__lshift+0xd4>)
 8006da4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006da8:	f000 fa0c 	bl	80071c4 <__assert_func>
 8006dac:	3101      	adds	r1, #1
 8006dae:	005b      	lsls	r3, r3, #1
 8006db0:	e7ee      	b.n	8006d90 <__lshift+0x1c>
 8006db2:	2300      	movs	r3, #0
 8006db4:	f100 0114 	add.w	r1, r0, #20
 8006db8:	f100 0210 	add.w	r2, r0, #16
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	4553      	cmp	r3, sl
 8006dc0:	db33      	blt.n	8006e2a <__lshift+0xb6>
 8006dc2:	6920      	ldr	r0, [r4, #16]
 8006dc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006dc8:	f104 0314 	add.w	r3, r4, #20
 8006dcc:	f019 091f 	ands.w	r9, r9, #31
 8006dd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006dd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006dd8:	d02b      	beq.n	8006e32 <__lshift+0xbe>
 8006dda:	f1c9 0e20 	rsb	lr, r9, #32
 8006dde:	468a      	mov	sl, r1
 8006de0:	2200      	movs	r2, #0
 8006de2:	6818      	ldr	r0, [r3, #0]
 8006de4:	fa00 f009 	lsl.w	r0, r0, r9
 8006de8:	4310      	orrs	r0, r2
 8006dea:	f84a 0b04 	str.w	r0, [sl], #4
 8006dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8006df2:	459c      	cmp	ip, r3
 8006df4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006df8:	d8f3      	bhi.n	8006de2 <__lshift+0x6e>
 8006dfa:	ebac 0304 	sub.w	r3, ip, r4
 8006dfe:	3b15      	subs	r3, #21
 8006e00:	f023 0303 	bic.w	r3, r3, #3
 8006e04:	3304      	adds	r3, #4
 8006e06:	f104 0015 	add.w	r0, r4, #21
 8006e0a:	4584      	cmp	ip, r0
 8006e0c:	bf38      	it	cc
 8006e0e:	2304      	movcc	r3, #4
 8006e10:	50ca      	str	r2, [r1, r3]
 8006e12:	b10a      	cbz	r2, 8006e18 <__lshift+0xa4>
 8006e14:	f108 0602 	add.w	r6, r8, #2
 8006e18:	3e01      	subs	r6, #1
 8006e1a:	4638      	mov	r0, r7
 8006e1c:	612e      	str	r6, [r5, #16]
 8006e1e:	4621      	mov	r1, r4
 8006e20:	f7ff fdd8 	bl	80069d4 <_Bfree>
 8006e24:	4628      	mov	r0, r5
 8006e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e2e:	3301      	adds	r3, #1
 8006e30:	e7c5      	b.n	8006dbe <__lshift+0x4a>
 8006e32:	3904      	subs	r1, #4
 8006e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e38:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e3c:	459c      	cmp	ip, r3
 8006e3e:	d8f9      	bhi.n	8006e34 <__lshift+0xc0>
 8006e40:	e7ea      	b.n	8006e18 <__lshift+0xa4>
 8006e42:	bf00      	nop
 8006e44:	080078f0 	.word	0x080078f0
 8006e48:	08007901 	.word	0x08007901

08006e4c <__mcmp>:
 8006e4c:	b530      	push	{r4, r5, lr}
 8006e4e:	6902      	ldr	r2, [r0, #16]
 8006e50:	690c      	ldr	r4, [r1, #16]
 8006e52:	1b12      	subs	r2, r2, r4
 8006e54:	d10e      	bne.n	8006e74 <__mcmp+0x28>
 8006e56:	f100 0314 	add.w	r3, r0, #20
 8006e5a:	3114      	adds	r1, #20
 8006e5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e6c:	42a5      	cmp	r5, r4
 8006e6e:	d003      	beq.n	8006e78 <__mcmp+0x2c>
 8006e70:	d305      	bcc.n	8006e7e <__mcmp+0x32>
 8006e72:	2201      	movs	r2, #1
 8006e74:	4610      	mov	r0, r2
 8006e76:	bd30      	pop	{r4, r5, pc}
 8006e78:	4283      	cmp	r3, r0
 8006e7a:	d3f3      	bcc.n	8006e64 <__mcmp+0x18>
 8006e7c:	e7fa      	b.n	8006e74 <__mcmp+0x28>
 8006e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e82:	e7f7      	b.n	8006e74 <__mcmp+0x28>

08006e84 <__mdiff>:
 8006e84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e88:	460c      	mov	r4, r1
 8006e8a:	4606      	mov	r6, r0
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	4620      	mov	r0, r4
 8006e90:	4690      	mov	r8, r2
 8006e92:	f7ff ffdb 	bl	8006e4c <__mcmp>
 8006e96:	1e05      	subs	r5, r0, #0
 8006e98:	d110      	bne.n	8006ebc <__mdiff+0x38>
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	f7ff fd59 	bl	8006954 <_Balloc>
 8006ea2:	b930      	cbnz	r0, 8006eb2 <__mdiff+0x2e>
 8006ea4:	4b3a      	ldr	r3, [pc, #232]	; (8006f90 <__mdiff+0x10c>)
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	f240 2137 	movw	r1, #567	; 0x237
 8006eac:	4839      	ldr	r0, [pc, #228]	; (8006f94 <__mdiff+0x110>)
 8006eae:	f000 f989 	bl	80071c4 <__assert_func>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006eb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ebc:	bfa4      	itt	ge
 8006ebe:	4643      	movge	r3, r8
 8006ec0:	46a0      	movge	r8, r4
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006ec8:	bfa6      	itte	ge
 8006eca:	461c      	movge	r4, r3
 8006ecc:	2500      	movge	r5, #0
 8006ece:	2501      	movlt	r5, #1
 8006ed0:	f7ff fd40 	bl	8006954 <_Balloc>
 8006ed4:	b920      	cbnz	r0, 8006ee0 <__mdiff+0x5c>
 8006ed6:	4b2e      	ldr	r3, [pc, #184]	; (8006f90 <__mdiff+0x10c>)
 8006ed8:	4602      	mov	r2, r0
 8006eda:	f240 2145 	movw	r1, #581	; 0x245
 8006ede:	e7e5      	b.n	8006eac <__mdiff+0x28>
 8006ee0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006ee4:	6926      	ldr	r6, [r4, #16]
 8006ee6:	60c5      	str	r5, [r0, #12]
 8006ee8:	f104 0914 	add.w	r9, r4, #20
 8006eec:	f108 0514 	add.w	r5, r8, #20
 8006ef0:	f100 0e14 	add.w	lr, r0, #20
 8006ef4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006ef8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006efc:	f108 0210 	add.w	r2, r8, #16
 8006f00:	46f2      	mov	sl, lr
 8006f02:	2100      	movs	r1, #0
 8006f04:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f0c:	fa11 f88b 	uxtah	r8, r1, fp
 8006f10:	b299      	uxth	r1, r3
 8006f12:	0c1b      	lsrs	r3, r3, #16
 8006f14:	eba8 0801 	sub.w	r8, r8, r1
 8006f18:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f1c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f20:	fa1f f888 	uxth.w	r8, r8
 8006f24:	1419      	asrs	r1, r3, #16
 8006f26:	454e      	cmp	r6, r9
 8006f28:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006f2c:	f84a 3b04 	str.w	r3, [sl], #4
 8006f30:	d8e8      	bhi.n	8006f04 <__mdiff+0x80>
 8006f32:	1b33      	subs	r3, r6, r4
 8006f34:	3b15      	subs	r3, #21
 8006f36:	f023 0303 	bic.w	r3, r3, #3
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	3415      	adds	r4, #21
 8006f3e:	42a6      	cmp	r6, r4
 8006f40:	bf38      	it	cc
 8006f42:	2304      	movcc	r3, #4
 8006f44:	441d      	add	r5, r3
 8006f46:	4473      	add	r3, lr
 8006f48:	469e      	mov	lr, r3
 8006f4a:	462e      	mov	r6, r5
 8006f4c:	4566      	cmp	r6, ip
 8006f4e:	d30e      	bcc.n	8006f6e <__mdiff+0xea>
 8006f50:	f10c 0203 	add.w	r2, ip, #3
 8006f54:	1b52      	subs	r2, r2, r5
 8006f56:	f022 0203 	bic.w	r2, r2, #3
 8006f5a:	3d03      	subs	r5, #3
 8006f5c:	45ac      	cmp	ip, r5
 8006f5e:	bf38      	it	cc
 8006f60:	2200      	movcc	r2, #0
 8006f62:	4413      	add	r3, r2
 8006f64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006f68:	b17a      	cbz	r2, 8006f8a <__mdiff+0x106>
 8006f6a:	6107      	str	r7, [r0, #16]
 8006f6c:	e7a4      	b.n	8006eb8 <__mdiff+0x34>
 8006f6e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006f72:	fa11 f288 	uxtah	r2, r1, r8
 8006f76:	1414      	asrs	r4, r2, #16
 8006f78:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006f7c:	b292      	uxth	r2, r2
 8006f7e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006f82:	f84e 2b04 	str.w	r2, [lr], #4
 8006f86:	1421      	asrs	r1, r4, #16
 8006f88:	e7e0      	b.n	8006f4c <__mdiff+0xc8>
 8006f8a:	3f01      	subs	r7, #1
 8006f8c:	e7ea      	b.n	8006f64 <__mdiff+0xe0>
 8006f8e:	bf00      	nop
 8006f90:	080078f0 	.word	0x080078f0
 8006f94:	08007901 	.word	0x08007901

08006f98 <__d2b>:
 8006f98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f9c:	460f      	mov	r7, r1
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	ec59 8b10 	vmov	r8, r9, d0
 8006fa4:	4616      	mov	r6, r2
 8006fa6:	f7ff fcd5 	bl	8006954 <_Balloc>
 8006faa:	4604      	mov	r4, r0
 8006fac:	b930      	cbnz	r0, 8006fbc <__d2b+0x24>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	4b24      	ldr	r3, [pc, #144]	; (8007044 <__d2b+0xac>)
 8006fb2:	4825      	ldr	r0, [pc, #148]	; (8007048 <__d2b+0xb0>)
 8006fb4:	f240 310f 	movw	r1, #783	; 0x30f
 8006fb8:	f000 f904 	bl	80071c4 <__assert_func>
 8006fbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006fc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fc4:	bb2d      	cbnz	r5, 8007012 <__d2b+0x7a>
 8006fc6:	9301      	str	r3, [sp, #4]
 8006fc8:	f1b8 0300 	subs.w	r3, r8, #0
 8006fcc:	d026      	beq.n	800701c <__d2b+0x84>
 8006fce:	4668      	mov	r0, sp
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	f7ff fd87 	bl	8006ae4 <__lo0bits>
 8006fd6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006fda:	b1e8      	cbz	r0, 8007018 <__d2b+0x80>
 8006fdc:	f1c0 0320 	rsb	r3, r0, #32
 8006fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe4:	430b      	orrs	r3, r1
 8006fe6:	40c2      	lsrs	r2, r0
 8006fe8:	6163      	str	r3, [r4, #20]
 8006fea:	9201      	str	r2, [sp, #4]
 8006fec:	9b01      	ldr	r3, [sp, #4]
 8006fee:	61a3      	str	r3, [r4, #24]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	bf14      	ite	ne
 8006ff4:	2202      	movne	r2, #2
 8006ff6:	2201      	moveq	r2, #1
 8006ff8:	6122      	str	r2, [r4, #16]
 8006ffa:	b1bd      	cbz	r5, 800702c <__d2b+0x94>
 8006ffc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007000:	4405      	add	r5, r0
 8007002:	603d      	str	r5, [r7, #0]
 8007004:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007008:	6030      	str	r0, [r6, #0]
 800700a:	4620      	mov	r0, r4
 800700c:	b003      	add	sp, #12
 800700e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007016:	e7d6      	b.n	8006fc6 <__d2b+0x2e>
 8007018:	6161      	str	r1, [r4, #20]
 800701a:	e7e7      	b.n	8006fec <__d2b+0x54>
 800701c:	a801      	add	r0, sp, #4
 800701e:	f7ff fd61 	bl	8006ae4 <__lo0bits>
 8007022:	9b01      	ldr	r3, [sp, #4]
 8007024:	6163      	str	r3, [r4, #20]
 8007026:	3020      	adds	r0, #32
 8007028:	2201      	movs	r2, #1
 800702a:	e7e5      	b.n	8006ff8 <__d2b+0x60>
 800702c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007030:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007034:	6038      	str	r0, [r7, #0]
 8007036:	6918      	ldr	r0, [r3, #16]
 8007038:	f7ff fd34 	bl	8006aa4 <__hi0bits>
 800703c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007040:	e7e2      	b.n	8007008 <__d2b+0x70>
 8007042:	bf00      	nop
 8007044:	080078f0 	.word	0x080078f0
 8007048:	08007901 	.word	0x08007901

0800704c <__sflush_r>:
 800704c:	898a      	ldrh	r2, [r1, #12]
 800704e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007052:	4605      	mov	r5, r0
 8007054:	0710      	lsls	r0, r2, #28
 8007056:	460c      	mov	r4, r1
 8007058:	d458      	bmi.n	800710c <__sflush_r+0xc0>
 800705a:	684b      	ldr	r3, [r1, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	dc05      	bgt.n	800706c <__sflush_r+0x20>
 8007060:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007062:	2b00      	cmp	r3, #0
 8007064:	dc02      	bgt.n	800706c <__sflush_r+0x20>
 8007066:	2000      	movs	r0, #0
 8007068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800706c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800706e:	2e00      	cmp	r6, #0
 8007070:	d0f9      	beq.n	8007066 <__sflush_r+0x1a>
 8007072:	2300      	movs	r3, #0
 8007074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007078:	682f      	ldr	r7, [r5, #0]
 800707a:	6a21      	ldr	r1, [r4, #32]
 800707c:	602b      	str	r3, [r5, #0]
 800707e:	d032      	beq.n	80070e6 <__sflush_r+0x9a>
 8007080:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007082:	89a3      	ldrh	r3, [r4, #12]
 8007084:	075a      	lsls	r2, r3, #29
 8007086:	d505      	bpl.n	8007094 <__sflush_r+0x48>
 8007088:	6863      	ldr	r3, [r4, #4]
 800708a:	1ac0      	subs	r0, r0, r3
 800708c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800708e:	b10b      	cbz	r3, 8007094 <__sflush_r+0x48>
 8007090:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007092:	1ac0      	subs	r0, r0, r3
 8007094:	2300      	movs	r3, #0
 8007096:	4602      	mov	r2, r0
 8007098:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800709a:	6a21      	ldr	r1, [r4, #32]
 800709c:	4628      	mov	r0, r5
 800709e:	47b0      	blx	r6
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	89a3      	ldrh	r3, [r4, #12]
 80070a4:	d106      	bne.n	80070b4 <__sflush_r+0x68>
 80070a6:	6829      	ldr	r1, [r5, #0]
 80070a8:	291d      	cmp	r1, #29
 80070aa:	d82b      	bhi.n	8007104 <__sflush_r+0xb8>
 80070ac:	4a29      	ldr	r2, [pc, #164]	; (8007154 <__sflush_r+0x108>)
 80070ae:	410a      	asrs	r2, r1
 80070b0:	07d6      	lsls	r6, r2, #31
 80070b2:	d427      	bmi.n	8007104 <__sflush_r+0xb8>
 80070b4:	2200      	movs	r2, #0
 80070b6:	6062      	str	r2, [r4, #4]
 80070b8:	04d9      	lsls	r1, r3, #19
 80070ba:	6922      	ldr	r2, [r4, #16]
 80070bc:	6022      	str	r2, [r4, #0]
 80070be:	d504      	bpl.n	80070ca <__sflush_r+0x7e>
 80070c0:	1c42      	adds	r2, r0, #1
 80070c2:	d101      	bne.n	80070c8 <__sflush_r+0x7c>
 80070c4:	682b      	ldr	r3, [r5, #0]
 80070c6:	b903      	cbnz	r3, 80070ca <__sflush_r+0x7e>
 80070c8:	6560      	str	r0, [r4, #84]	; 0x54
 80070ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070cc:	602f      	str	r7, [r5, #0]
 80070ce:	2900      	cmp	r1, #0
 80070d0:	d0c9      	beq.n	8007066 <__sflush_r+0x1a>
 80070d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070d6:	4299      	cmp	r1, r3
 80070d8:	d002      	beq.n	80070e0 <__sflush_r+0x94>
 80070da:	4628      	mov	r0, r5
 80070dc:	f7ff fbee 	bl	80068bc <_free_r>
 80070e0:	2000      	movs	r0, #0
 80070e2:	6360      	str	r0, [r4, #52]	; 0x34
 80070e4:	e7c0      	b.n	8007068 <__sflush_r+0x1c>
 80070e6:	2301      	movs	r3, #1
 80070e8:	4628      	mov	r0, r5
 80070ea:	47b0      	blx	r6
 80070ec:	1c41      	adds	r1, r0, #1
 80070ee:	d1c8      	bne.n	8007082 <__sflush_r+0x36>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d0c5      	beq.n	8007082 <__sflush_r+0x36>
 80070f6:	2b1d      	cmp	r3, #29
 80070f8:	d001      	beq.n	80070fe <__sflush_r+0xb2>
 80070fa:	2b16      	cmp	r3, #22
 80070fc:	d101      	bne.n	8007102 <__sflush_r+0xb6>
 80070fe:	602f      	str	r7, [r5, #0]
 8007100:	e7b1      	b.n	8007066 <__sflush_r+0x1a>
 8007102:	89a3      	ldrh	r3, [r4, #12]
 8007104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007108:	81a3      	strh	r3, [r4, #12]
 800710a:	e7ad      	b.n	8007068 <__sflush_r+0x1c>
 800710c:	690f      	ldr	r7, [r1, #16]
 800710e:	2f00      	cmp	r7, #0
 8007110:	d0a9      	beq.n	8007066 <__sflush_r+0x1a>
 8007112:	0793      	lsls	r3, r2, #30
 8007114:	680e      	ldr	r6, [r1, #0]
 8007116:	bf08      	it	eq
 8007118:	694b      	ldreq	r3, [r1, #20]
 800711a:	600f      	str	r7, [r1, #0]
 800711c:	bf18      	it	ne
 800711e:	2300      	movne	r3, #0
 8007120:	eba6 0807 	sub.w	r8, r6, r7
 8007124:	608b      	str	r3, [r1, #8]
 8007126:	f1b8 0f00 	cmp.w	r8, #0
 800712a:	dd9c      	ble.n	8007066 <__sflush_r+0x1a>
 800712c:	6a21      	ldr	r1, [r4, #32]
 800712e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007130:	4643      	mov	r3, r8
 8007132:	463a      	mov	r2, r7
 8007134:	4628      	mov	r0, r5
 8007136:	47b0      	blx	r6
 8007138:	2800      	cmp	r0, #0
 800713a:	dc06      	bgt.n	800714a <__sflush_r+0xfe>
 800713c:	89a3      	ldrh	r3, [r4, #12]
 800713e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007142:	81a3      	strh	r3, [r4, #12]
 8007144:	f04f 30ff 	mov.w	r0, #4294967295
 8007148:	e78e      	b.n	8007068 <__sflush_r+0x1c>
 800714a:	4407      	add	r7, r0
 800714c:	eba8 0800 	sub.w	r8, r8, r0
 8007150:	e7e9      	b.n	8007126 <__sflush_r+0xda>
 8007152:	bf00      	nop
 8007154:	dfbffffe 	.word	0xdfbffffe

08007158 <_fflush_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	690b      	ldr	r3, [r1, #16]
 800715c:	4605      	mov	r5, r0
 800715e:	460c      	mov	r4, r1
 8007160:	b913      	cbnz	r3, 8007168 <_fflush_r+0x10>
 8007162:	2500      	movs	r5, #0
 8007164:	4628      	mov	r0, r5
 8007166:	bd38      	pop	{r3, r4, r5, pc}
 8007168:	b118      	cbz	r0, 8007172 <_fflush_r+0x1a>
 800716a:	6a03      	ldr	r3, [r0, #32]
 800716c:	b90b      	cbnz	r3, 8007172 <_fflush_r+0x1a>
 800716e:	f7fe fc1f 	bl	80059b0 <__sinit>
 8007172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0f3      	beq.n	8007162 <_fflush_r+0xa>
 800717a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800717c:	07d0      	lsls	r0, r2, #31
 800717e:	d404      	bmi.n	800718a <_fflush_r+0x32>
 8007180:	0599      	lsls	r1, r3, #22
 8007182:	d402      	bmi.n	800718a <_fflush_r+0x32>
 8007184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007186:	f7fe fd1a 	bl	8005bbe <__retarget_lock_acquire_recursive>
 800718a:	4628      	mov	r0, r5
 800718c:	4621      	mov	r1, r4
 800718e:	f7ff ff5d 	bl	800704c <__sflush_r>
 8007192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007194:	07da      	lsls	r2, r3, #31
 8007196:	4605      	mov	r5, r0
 8007198:	d4e4      	bmi.n	8007164 <_fflush_r+0xc>
 800719a:	89a3      	ldrh	r3, [r4, #12]
 800719c:	059b      	lsls	r3, r3, #22
 800719e:	d4e1      	bmi.n	8007164 <_fflush_r+0xc>
 80071a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071a2:	f7fe fd0d 	bl	8005bc0 <__retarget_lock_release_recursive>
 80071a6:	e7dd      	b.n	8007164 <_fflush_r+0xc>

080071a8 <memcpy>:
 80071a8:	440a      	add	r2, r1
 80071aa:	4291      	cmp	r1, r2
 80071ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80071b0:	d100      	bne.n	80071b4 <memcpy+0xc>
 80071b2:	4770      	bx	lr
 80071b4:	b510      	push	{r4, lr}
 80071b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071be:	4291      	cmp	r1, r2
 80071c0:	d1f9      	bne.n	80071b6 <memcpy+0xe>
 80071c2:	bd10      	pop	{r4, pc}

080071c4 <__assert_func>:
 80071c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071c6:	4614      	mov	r4, r2
 80071c8:	461a      	mov	r2, r3
 80071ca:	4b09      	ldr	r3, [pc, #36]	; (80071f0 <__assert_func+0x2c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4605      	mov	r5, r0
 80071d0:	68d8      	ldr	r0, [r3, #12]
 80071d2:	b14c      	cbz	r4, 80071e8 <__assert_func+0x24>
 80071d4:	4b07      	ldr	r3, [pc, #28]	; (80071f4 <__assert_func+0x30>)
 80071d6:	9100      	str	r1, [sp, #0]
 80071d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071dc:	4906      	ldr	r1, [pc, #24]	; (80071f8 <__assert_func+0x34>)
 80071de:	462b      	mov	r3, r5
 80071e0:	f000 f844 	bl	800726c <fiprintf>
 80071e4:	f000 f854 	bl	8007290 <abort>
 80071e8:	4b04      	ldr	r3, [pc, #16]	; (80071fc <__assert_func+0x38>)
 80071ea:	461c      	mov	r4, r3
 80071ec:	e7f3      	b.n	80071d6 <__assert_func+0x12>
 80071ee:	bf00      	nop
 80071f0:	20000064 	.word	0x20000064
 80071f4:	08007a66 	.word	0x08007a66
 80071f8:	08007a73 	.word	0x08007a73
 80071fc:	08007aa1 	.word	0x08007aa1

08007200 <_calloc_r>:
 8007200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007202:	fba1 2402 	umull	r2, r4, r1, r2
 8007206:	b94c      	cbnz	r4, 800721c <_calloc_r+0x1c>
 8007208:	4611      	mov	r1, r2
 800720a:	9201      	str	r2, [sp, #4]
 800720c:	f7fd fe52 	bl	8004eb4 <_malloc_r>
 8007210:	9a01      	ldr	r2, [sp, #4]
 8007212:	4605      	mov	r5, r0
 8007214:	b930      	cbnz	r0, 8007224 <_calloc_r+0x24>
 8007216:	4628      	mov	r0, r5
 8007218:	b003      	add	sp, #12
 800721a:	bd30      	pop	{r4, r5, pc}
 800721c:	220c      	movs	r2, #12
 800721e:	6002      	str	r2, [r0, #0]
 8007220:	2500      	movs	r5, #0
 8007222:	e7f8      	b.n	8007216 <_calloc_r+0x16>
 8007224:	4621      	mov	r1, r4
 8007226:	f7fe fc3c 	bl	8005aa2 <memset>
 800722a:	e7f4      	b.n	8007216 <_calloc_r+0x16>

0800722c <__ascii_mbtowc>:
 800722c:	b082      	sub	sp, #8
 800722e:	b901      	cbnz	r1, 8007232 <__ascii_mbtowc+0x6>
 8007230:	a901      	add	r1, sp, #4
 8007232:	b142      	cbz	r2, 8007246 <__ascii_mbtowc+0x1a>
 8007234:	b14b      	cbz	r3, 800724a <__ascii_mbtowc+0x1e>
 8007236:	7813      	ldrb	r3, [r2, #0]
 8007238:	600b      	str	r3, [r1, #0]
 800723a:	7812      	ldrb	r2, [r2, #0]
 800723c:	1e10      	subs	r0, r2, #0
 800723e:	bf18      	it	ne
 8007240:	2001      	movne	r0, #1
 8007242:	b002      	add	sp, #8
 8007244:	4770      	bx	lr
 8007246:	4610      	mov	r0, r2
 8007248:	e7fb      	b.n	8007242 <__ascii_mbtowc+0x16>
 800724a:	f06f 0001 	mvn.w	r0, #1
 800724e:	e7f8      	b.n	8007242 <__ascii_mbtowc+0x16>

08007250 <__ascii_wctomb>:
 8007250:	b149      	cbz	r1, 8007266 <__ascii_wctomb+0x16>
 8007252:	2aff      	cmp	r2, #255	; 0xff
 8007254:	bf85      	ittet	hi
 8007256:	238a      	movhi	r3, #138	; 0x8a
 8007258:	6003      	strhi	r3, [r0, #0]
 800725a:	700a      	strbls	r2, [r1, #0]
 800725c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007260:	bf98      	it	ls
 8007262:	2001      	movls	r0, #1
 8007264:	4770      	bx	lr
 8007266:	4608      	mov	r0, r1
 8007268:	4770      	bx	lr
	...

0800726c <fiprintf>:
 800726c:	b40e      	push	{r1, r2, r3}
 800726e:	b503      	push	{r0, r1, lr}
 8007270:	4601      	mov	r1, r0
 8007272:	ab03      	add	r3, sp, #12
 8007274:	4805      	ldr	r0, [pc, #20]	; (800728c <fiprintf+0x20>)
 8007276:	f853 2b04 	ldr.w	r2, [r3], #4
 800727a:	6800      	ldr	r0, [r0, #0]
 800727c:	9301      	str	r3, [sp, #4]
 800727e:	f000 f837 	bl	80072f0 <_vfiprintf_r>
 8007282:	b002      	add	sp, #8
 8007284:	f85d eb04 	ldr.w	lr, [sp], #4
 8007288:	b003      	add	sp, #12
 800728a:	4770      	bx	lr
 800728c:	20000064 	.word	0x20000064

08007290 <abort>:
 8007290:	b508      	push	{r3, lr}
 8007292:	2006      	movs	r0, #6
 8007294:	f000 fa04 	bl	80076a0 <raise>
 8007298:	2001      	movs	r0, #1
 800729a:	f7fa f8f7 	bl	800148c <_exit>

0800729e <__sfputc_r>:
 800729e:	6893      	ldr	r3, [r2, #8]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	b410      	push	{r4}
 80072a6:	6093      	str	r3, [r2, #8]
 80072a8:	da08      	bge.n	80072bc <__sfputc_r+0x1e>
 80072aa:	6994      	ldr	r4, [r2, #24]
 80072ac:	42a3      	cmp	r3, r4
 80072ae:	db01      	blt.n	80072b4 <__sfputc_r+0x16>
 80072b0:	290a      	cmp	r1, #10
 80072b2:	d103      	bne.n	80072bc <__sfputc_r+0x1e>
 80072b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072b8:	f000 b934 	b.w	8007524 <__swbuf_r>
 80072bc:	6813      	ldr	r3, [r2, #0]
 80072be:	1c58      	adds	r0, r3, #1
 80072c0:	6010      	str	r0, [r2, #0]
 80072c2:	7019      	strb	r1, [r3, #0]
 80072c4:	4608      	mov	r0, r1
 80072c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <__sfputs_r>:
 80072cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ce:	4606      	mov	r6, r0
 80072d0:	460f      	mov	r7, r1
 80072d2:	4614      	mov	r4, r2
 80072d4:	18d5      	adds	r5, r2, r3
 80072d6:	42ac      	cmp	r4, r5
 80072d8:	d101      	bne.n	80072de <__sfputs_r+0x12>
 80072da:	2000      	movs	r0, #0
 80072dc:	e007      	b.n	80072ee <__sfputs_r+0x22>
 80072de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e2:	463a      	mov	r2, r7
 80072e4:	4630      	mov	r0, r6
 80072e6:	f7ff ffda 	bl	800729e <__sfputc_r>
 80072ea:	1c43      	adds	r3, r0, #1
 80072ec:	d1f3      	bne.n	80072d6 <__sfputs_r+0xa>
 80072ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072f0 <_vfiprintf_r>:
 80072f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	460d      	mov	r5, r1
 80072f6:	b09d      	sub	sp, #116	; 0x74
 80072f8:	4614      	mov	r4, r2
 80072fa:	4698      	mov	r8, r3
 80072fc:	4606      	mov	r6, r0
 80072fe:	b118      	cbz	r0, 8007308 <_vfiprintf_r+0x18>
 8007300:	6a03      	ldr	r3, [r0, #32]
 8007302:	b90b      	cbnz	r3, 8007308 <_vfiprintf_r+0x18>
 8007304:	f7fe fb54 	bl	80059b0 <__sinit>
 8007308:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800730a:	07d9      	lsls	r1, r3, #31
 800730c:	d405      	bmi.n	800731a <_vfiprintf_r+0x2a>
 800730e:	89ab      	ldrh	r3, [r5, #12]
 8007310:	059a      	lsls	r2, r3, #22
 8007312:	d402      	bmi.n	800731a <_vfiprintf_r+0x2a>
 8007314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007316:	f7fe fc52 	bl	8005bbe <__retarget_lock_acquire_recursive>
 800731a:	89ab      	ldrh	r3, [r5, #12]
 800731c:	071b      	lsls	r3, r3, #28
 800731e:	d501      	bpl.n	8007324 <_vfiprintf_r+0x34>
 8007320:	692b      	ldr	r3, [r5, #16]
 8007322:	b99b      	cbnz	r3, 800734c <_vfiprintf_r+0x5c>
 8007324:	4629      	mov	r1, r5
 8007326:	4630      	mov	r0, r6
 8007328:	f000 f93a 	bl	80075a0 <__swsetup_r>
 800732c:	b170      	cbz	r0, 800734c <_vfiprintf_r+0x5c>
 800732e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007330:	07dc      	lsls	r4, r3, #31
 8007332:	d504      	bpl.n	800733e <_vfiprintf_r+0x4e>
 8007334:	f04f 30ff 	mov.w	r0, #4294967295
 8007338:	b01d      	add	sp, #116	; 0x74
 800733a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800733e:	89ab      	ldrh	r3, [r5, #12]
 8007340:	0598      	lsls	r0, r3, #22
 8007342:	d4f7      	bmi.n	8007334 <_vfiprintf_r+0x44>
 8007344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007346:	f7fe fc3b 	bl	8005bc0 <__retarget_lock_release_recursive>
 800734a:	e7f3      	b.n	8007334 <_vfiprintf_r+0x44>
 800734c:	2300      	movs	r3, #0
 800734e:	9309      	str	r3, [sp, #36]	; 0x24
 8007350:	2320      	movs	r3, #32
 8007352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007356:	f8cd 800c 	str.w	r8, [sp, #12]
 800735a:	2330      	movs	r3, #48	; 0x30
 800735c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007510 <_vfiprintf_r+0x220>
 8007360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007364:	f04f 0901 	mov.w	r9, #1
 8007368:	4623      	mov	r3, r4
 800736a:	469a      	mov	sl, r3
 800736c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007370:	b10a      	cbz	r2, 8007376 <_vfiprintf_r+0x86>
 8007372:	2a25      	cmp	r2, #37	; 0x25
 8007374:	d1f9      	bne.n	800736a <_vfiprintf_r+0x7a>
 8007376:	ebba 0b04 	subs.w	fp, sl, r4
 800737a:	d00b      	beq.n	8007394 <_vfiprintf_r+0xa4>
 800737c:	465b      	mov	r3, fp
 800737e:	4622      	mov	r2, r4
 8007380:	4629      	mov	r1, r5
 8007382:	4630      	mov	r0, r6
 8007384:	f7ff ffa2 	bl	80072cc <__sfputs_r>
 8007388:	3001      	adds	r0, #1
 800738a:	f000 80a9 	beq.w	80074e0 <_vfiprintf_r+0x1f0>
 800738e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007390:	445a      	add	r2, fp
 8007392:	9209      	str	r2, [sp, #36]	; 0x24
 8007394:	f89a 3000 	ldrb.w	r3, [sl]
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 80a1 	beq.w	80074e0 <_vfiprintf_r+0x1f0>
 800739e:	2300      	movs	r3, #0
 80073a0:	f04f 32ff 	mov.w	r2, #4294967295
 80073a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073a8:	f10a 0a01 	add.w	sl, sl, #1
 80073ac:	9304      	str	r3, [sp, #16]
 80073ae:	9307      	str	r3, [sp, #28]
 80073b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073b4:	931a      	str	r3, [sp, #104]	; 0x68
 80073b6:	4654      	mov	r4, sl
 80073b8:	2205      	movs	r2, #5
 80073ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073be:	4854      	ldr	r0, [pc, #336]	; (8007510 <_vfiprintf_r+0x220>)
 80073c0:	f7f8 ff06 	bl	80001d0 <memchr>
 80073c4:	9a04      	ldr	r2, [sp, #16]
 80073c6:	b9d8      	cbnz	r0, 8007400 <_vfiprintf_r+0x110>
 80073c8:	06d1      	lsls	r1, r2, #27
 80073ca:	bf44      	itt	mi
 80073cc:	2320      	movmi	r3, #32
 80073ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073d2:	0713      	lsls	r3, r2, #28
 80073d4:	bf44      	itt	mi
 80073d6:	232b      	movmi	r3, #43	; 0x2b
 80073d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073dc:	f89a 3000 	ldrb.w	r3, [sl]
 80073e0:	2b2a      	cmp	r3, #42	; 0x2a
 80073e2:	d015      	beq.n	8007410 <_vfiprintf_r+0x120>
 80073e4:	9a07      	ldr	r2, [sp, #28]
 80073e6:	4654      	mov	r4, sl
 80073e8:	2000      	movs	r0, #0
 80073ea:	f04f 0c0a 	mov.w	ip, #10
 80073ee:	4621      	mov	r1, r4
 80073f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073f4:	3b30      	subs	r3, #48	; 0x30
 80073f6:	2b09      	cmp	r3, #9
 80073f8:	d94d      	bls.n	8007496 <_vfiprintf_r+0x1a6>
 80073fa:	b1b0      	cbz	r0, 800742a <_vfiprintf_r+0x13a>
 80073fc:	9207      	str	r2, [sp, #28]
 80073fe:	e014      	b.n	800742a <_vfiprintf_r+0x13a>
 8007400:	eba0 0308 	sub.w	r3, r0, r8
 8007404:	fa09 f303 	lsl.w	r3, r9, r3
 8007408:	4313      	orrs	r3, r2
 800740a:	9304      	str	r3, [sp, #16]
 800740c:	46a2      	mov	sl, r4
 800740e:	e7d2      	b.n	80073b6 <_vfiprintf_r+0xc6>
 8007410:	9b03      	ldr	r3, [sp, #12]
 8007412:	1d19      	adds	r1, r3, #4
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	9103      	str	r1, [sp, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	bfbb      	ittet	lt
 800741c:	425b      	neglt	r3, r3
 800741e:	f042 0202 	orrlt.w	r2, r2, #2
 8007422:	9307      	strge	r3, [sp, #28]
 8007424:	9307      	strlt	r3, [sp, #28]
 8007426:	bfb8      	it	lt
 8007428:	9204      	strlt	r2, [sp, #16]
 800742a:	7823      	ldrb	r3, [r4, #0]
 800742c:	2b2e      	cmp	r3, #46	; 0x2e
 800742e:	d10c      	bne.n	800744a <_vfiprintf_r+0x15a>
 8007430:	7863      	ldrb	r3, [r4, #1]
 8007432:	2b2a      	cmp	r3, #42	; 0x2a
 8007434:	d134      	bne.n	80074a0 <_vfiprintf_r+0x1b0>
 8007436:	9b03      	ldr	r3, [sp, #12]
 8007438:	1d1a      	adds	r2, r3, #4
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	9203      	str	r2, [sp, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	bfb8      	it	lt
 8007442:	f04f 33ff 	movlt.w	r3, #4294967295
 8007446:	3402      	adds	r4, #2
 8007448:	9305      	str	r3, [sp, #20]
 800744a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007520 <_vfiprintf_r+0x230>
 800744e:	7821      	ldrb	r1, [r4, #0]
 8007450:	2203      	movs	r2, #3
 8007452:	4650      	mov	r0, sl
 8007454:	f7f8 febc 	bl	80001d0 <memchr>
 8007458:	b138      	cbz	r0, 800746a <_vfiprintf_r+0x17a>
 800745a:	9b04      	ldr	r3, [sp, #16]
 800745c:	eba0 000a 	sub.w	r0, r0, sl
 8007460:	2240      	movs	r2, #64	; 0x40
 8007462:	4082      	lsls	r2, r0
 8007464:	4313      	orrs	r3, r2
 8007466:	3401      	adds	r4, #1
 8007468:	9304      	str	r3, [sp, #16]
 800746a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800746e:	4829      	ldr	r0, [pc, #164]	; (8007514 <_vfiprintf_r+0x224>)
 8007470:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007474:	2206      	movs	r2, #6
 8007476:	f7f8 feab 	bl	80001d0 <memchr>
 800747a:	2800      	cmp	r0, #0
 800747c:	d03f      	beq.n	80074fe <_vfiprintf_r+0x20e>
 800747e:	4b26      	ldr	r3, [pc, #152]	; (8007518 <_vfiprintf_r+0x228>)
 8007480:	bb1b      	cbnz	r3, 80074ca <_vfiprintf_r+0x1da>
 8007482:	9b03      	ldr	r3, [sp, #12]
 8007484:	3307      	adds	r3, #7
 8007486:	f023 0307 	bic.w	r3, r3, #7
 800748a:	3308      	adds	r3, #8
 800748c:	9303      	str	r3, [sp, #12]
 800748e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007490:	443b      	add	r3, r7
 8007492:	9309      	str	r3, [sp, #36]	; 0x24
 8007494:	e768      	b.n	8007368 <_vfiprintf_r+0x78>
 8007496:	fb0c 3202 	mla	r2, ip, r2, r3
 800749a:	460c      	mov	r4, r1
 800749c:	2001      	movs	r0, #1
 800749e:	e7a6      	b.n	80073ee <_vfiprintf_r+0xfe>
 80074a0:	2300      	movs	r3, #0
 80074a2:	3401      	adds	r4, #1
 80074a4:	9305      	str	r3, [sp, #20]
 80074a6:	4619      	mov	r1, r3
 80074a8:	f04f 0c0a 	mov.w	ip, #10
 80074ac:	4620      	mov	r0, r4
 80074ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074b2:	3a30      	subs	r2, #48	; 0x30
 80074b4:	2a09      	cmp	r2, #9
 80074b6:	d903      	bls.n	80074c0 <_vfiprintf_r+0x1d0>
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d0c6      	beq.n	800744a <_vfiprintf_r+0x15a>
 80074bc:	9105      	str	r1, [sp, #20]
 80074be:	e7c4      	b.n	800744a <_vfiprintf_r+0x15a>
 80074c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80074c4:	4604      	mov	r4, r0
 80074c6:	2301      	movs	r3, #1
 80074c8:	e7f0      	b.n	80074ac <_vfiprintf_r+0x1bc>
 80074ca:	ab03      	add	r3, sp, #12
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	462a      	mov	r2, r5
 80074d0:	4b12      	ldr	r3, [pc, #72]	; (800751c <_vfiprintf_r+0x22c>)
 80074d2:	a904      	add	r1, sp, #16
 80074d4:	4630      	mov	r0, r6
 80074d6:	f7fd fe19 	bl	800510c <_printf_float>
 80074da:	4607      	mov	r7, r0
 80074dc:	1c78      	adds	r0, r7, #1
 80074de:	d1d6      	bne.n	800748e <_vfiprintf_r+0x19e>
 80074e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074e2:	07d9      	lsls	r1, r3, #31
 80074e4:	d405      	bmi.n	80074f2 <_vfiprintf_r+0x202>
 80074e6:	89ab      	ldrh	r3, [r5, #12]
 80074e8:	059a      	lsls	r2, r3, #22
 80074ea:	d402      	bmi.n	80074f2 <_vfiprintf_r+0x202>
 80074ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074ee:	f7fe fb67 	bl	8005bc0 <__retarget_lock_release_recursive>
 80074f2:	89ab      	ldrh	r3, [r5, #12]
 80074f4:	065b      	lsls	r3, r3, #25
 80074f6:	f53f af1d 	bmi.w	8007334 <_vfiprintf_r+0x44>
 80074fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074fc:	e71c      	b.n	8007338 <_vfiprintf_r+0x48>
 80074fe:	ab03      	add	r3, sp, #12
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	462a      	mov	r2, r5
 8007504:	4b05      	ldr	r3, [pc, #20]	; (800751c <_vfiprintf_r+0x22c>)
 8007506:	a904      	add	r1, sp, #16
 8007508:	4630      	mov	r0, r6
 800750a:	f7fe f8a3 	bl	8005654 <_printf_i>
 800750e:	e7e4      	b.n	80074da <_vfiprintf_r+0x1ea>
 8007510:	08007ba3 	.word	0x08007ba3
 8007514:	08007bad 	.word	0x08007bad
 8007518:	0800510d 	.word	0x0800510d
 800751c:	080072cd 	.word	0x080072cd
 8007520:	08007ba9 	.word	0x08007ba9

08007524 <__swbuf_r>:
 8007524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007526:	460e      	mov	r6, r1
 8007528:	4614      	mov	r4, r2
 800752a:	4605      	mov	r5, r0
 800752c:	b118      	cbz	r0, 8007536 <__swbuf_r+0x12>
 800752e:	6a03      	ldr	r3, [r0, #32]
 8007530:	b90b      	cbnz	r3, 8007536 <__swbuf_r+0x12>
 8007532:	f7fe fa3d 	bl	80059b0 <__sinit>
 8007536:	69a3      	ldr	r3, [r4, #24]
 8007538:	60a3      	str	r3, [r4, #8]
 800753a:	89a3      	ldrh	r3, [r4, #12]
 800753c:	071a      	lsls	r2, r3, #28
 800753e:	d525      	bpl.n	800758c <__swbuf_r+0x68>
 8007540:	6923      	ldr	r3, [r4, #16]
 8007542:	b31b      	cbz	r3, 800758c <__swbuf_r+0x68>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	6922      	ldr	r2, [r4, #16]
 8007548:	1a98      	subs	r0, r3, r2
 800754a:	6963      	ldr	r3, [r4, #20]
 800754c:	b2f6      	uxtb	r6, r6
 800754e:	4283      	cmp	r3, r0
 8007550:	4637      	mov	r7, r6
 8007552:	dc04      	bgt.n	800755e <__swbuf_r+0x3a>
 8007554:	4621      	mov	r1, r4
 8007556:	4628      	mov	r0, r5
 8007558:	f7ff fdfe 	bl	8007158 <_fflush_r>
 800755c:	b9e0      	cbnz	r0, 8007598 <__swbuf_r+0x74>
 800755e:	68a3      	ldr	r3, [r4, #8]
 8007560:	3b01      	subs	r3, #1
 8007562:	60a3      	str	r3, [r4, #8]
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	6022      	str	r2, [r4, #0]
 800756a:	701e      	strb	r6, [r3, #0]
 800756c:	6962      	ldr	r2, [r4, #20]
 800756e:	1c43      	adds	r3, r0, #1
 8007570:	429a      	cmp	r2, r3
 8007572:	d004      	beq.n	800757e <__swbuf_r+0x5a>
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	07db      	lsls	r3, r3, #31
 8007578:	d506      	bpl.n	8007588 <__swbuf_r+0x64>
 800757a:	2e0a      	cmp	r6, #10
 800757c:	d104      	bne.n	8007588 <__swbuf_r+0x64>
 800757e:	4621      	mov	r1, r4
 8007580:	4628      	mov	r0, r5
 8007582:	f7ff fde9 	bl	8007158 <_fflush_r>
 8007586:	b938      	cbnz	r0, 8007598 <__swbuf_r+0x74>
 8007588:	4638      	mov	r0, r7
 800758a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800758c:	4621      	mov	r1, r4
 800758e:	4628      	mov	r0, r5
 8007590:	f000 f806 	bl	80075a0 <__swsetup_r>
 8007594:	2800      	cmp	r0, #0
 8007596:	d0d5      	beq.n	8007544 <__swbuf_r+0x20>
 8007598:	f04f 37ff 	mov.w	r7, #4294967295
 800759c:	e7f4      	b.n	8007588 <__swbuf_r+0x64>
	...

080075a0 <__swsetup_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4b2a      	ldr	r3, [pc, #168]	; (800764c <__swsetup_r+0xac>)
 80075a4:	4605      	mov	r5, r0
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	460c      	mov	r4, r1
 80075aa:	b118      	cbz	r0, 80075b4 <__swsetup_r+0x14>
 80075ac:	6a03      	ldr	r3, [r0, #32]
 80075ae:	b90b      	cbnz	r3, 80075b4 <__swsetup_r+0x14>
 80075b0:	f7fe f9fe 	bl	80059b0 <__sinit>
 80075b4:	89a3      	ldrh	r3, [r4, #12]
 80075b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075ba:	0718      	lsls	r0, r3, #28
 80075bc:	d422      	bmi.n	8007604 <__swsetup_r+0x64>
 80075be:	06d9      	lsls	r1, r3, #27
 80075c0:	d407      	bmi.n	80075d2 <__swsetup_r+0x32>
 80075c2:	2309      	movs	r3, #9
 80075c4:	602b      	str	r3, [r5, #0]
 80075c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075ca:	81a3      	strh	r3, [r4, #12]
 80075cc:	f04f 30ff 	mov.w	r0, #4294967295
 80075d0:	e034      	b.n	800763c <__swsetup_r+0x9c>
 80075d2:	0758      	lsls	r0, r3, #29
 80075d4:	d512      	bpl.n	80075fc <__swsetup_r+0x5c>
 80075d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075d8:	b141      	cbz	r1, 80075ec <__swsetup_r+0x4c>
 80075da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075de:	4299      	cmp	r1, r3
 80075e0:	d002      	beq.n	80075e8 <__swsetup_r+0x48>
 80075e2:	4628      	mov	r0, r5
 80075e4:	f7ff f96a 	bl	80068bc <_free_r>
 80075e8:	2300      	movs	r3, #0
 80075ea:	6363      	str	r3, [r4, #52]	; 0x34
 80075ec:	89a3      	ldrh	r3, [r4, #12]
 80075ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075f2:	81a3      	strh	r3, [r4, #12]
 80075f4:	2300      	movs	r3, #0
 80075f6:	6063      	str	r3, [r4, #4]
 80075f8:	6923      	ldr	r3, [r4, #16]
 80075fa:	6023      	str	r3, [r4, #0]
 80075fc:	89a3      	ldrh	r3, [r4, #12]
 80075fe:	f043 0308 	orr.w	r3, r3, #8
 8007602:	81a3      	strh	r3, [r4, #12]
 8007604:	6923      	ldr	r3, [r4, #16]
 8007606:	b94b      	cbnz	r3, 800761c <__swsetup_r+0x7c>
 8007608:	89a3      	ldrh	r3, [r4, #12]
 800760a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800760e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007612:	d003      	beq.n	800761c <__swsetup_r+0x7c>
 8007614:	4621      	mov	r1, r4
 8007616:	4628      	mov	r0, r5
 8007618:	f000 f884 	bl	8007724 <__smakebuf_r>
 800761c:	89a0      	ldrh	r0, [r4, #12]
 800761e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007622:	f010 0301 	ands.w	r3, r0, #1
 8007626:	d00a      	beq.n	800763e <__swsetup_r+0x9e>
 8007628:	2300      	movs	r3, #0
 800762a:	60a3      	str	r3, [r4, #8]
 800762c:	6963      	ldr	r3, [r4, #20]
 800762e:	425b      	negs	r3, r3
 8007630:	61a3      	str	r3, [r4, #24]
 8007632:	6923      	ldr	r3, [r4, #16]
 8007634:	b943      	cbnz	r3, 8007648 <__swsetup_r+0xa8>
 8007636:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800763a:	d1c4      	bne.n	80075c6 <__swsetup_r+0x26>
 800763c:	bd38      	pop	{r3, r4, r5, pc}
 800763e:	0781      	lsls	r1, r0, #30
 8007640:	bf58      	it	pl
 8007642:	6963      	ldrpl	r3, [r4, #20]
 8007644:	60a3      	str	r3, [r4, #8]
 8007646:	e7f4      	b.n	8007632 <__swsetup_r+0x92>
 8007648:	2000      	movs	r0, #0
 800764a:	e7f7      	b.n	800763c <__swsetup_r+0x9c>
 800764c:	20000064 	.word	0x20000064

08007650 <_raise_r>:
 8007650:	291f      	cmp	r1, #31
 8007652:	b538      	push	{r3, r4, r5, lr}
 8007654:	4604      	mov	r4, r0
 8007656:	460d      	mov	r5, r1
 8007658:	d904      	bls.n	8007664 <_raise_r+0x14>
 800765a:	2316      	movs	r3, #22
 800765c:	6003      	str	r3, [r0, #0]
 800765e:	f04f 30ff 	mov.w	r0, #4294967295
 8007662:	bd38      	pop	{r3, r4, r5, pc}
 8007664:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007666:	b112      	cbz	r2, 800766e <_raise_r+0x1e>
 8007668:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800766c:	b94b      	cbnz	r3, 8007682 <_raise_r+0x32>
 800766e:	4620      	mov	r0, r4
 8007670:	f000 f830 	bl	80076d4 <_getpid_r>
 8007674:	462a      	mov	r2, r5
 8007676:	4601      	mov	r1, r0
 8007678:	4620      	mov	r0, r4
 800767a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800767e:	f000 b817 	b.w	80076b0 <_kill_r>
 8007682:	2b01      	cmp	r3, #1
 8007684:	d00a      	beq.n	800769c <_raise_r+0x4c>
 8007686:	1c59      	adds	r1, r3, #1
 8007688:	d103      	bne.n	8007692 <_raise_r+0x42>
 800768a:	2316      	movs	r3, #22
 800768c:	6003      	str	r3, [r0, #0]
 800768e:	2001      	movs	r0, #1
 8007690:	e7e7      	b.n	8007662 <_raise_r+0x12>
 8007692:	2400      	movs	r4, #0
 8007694:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007698:	4628      	mov	r0, r5
 800769a:	4798      	blx	r3
 800769c:	2000      	movs	r0, #0
 800769e:	e7e0      	b.n	8007662 <_raise_r+0x12>

080076a0 <raise>:
 80076a0:	4b02      	ldr	r3, [pc, #8]	; (80076ac <raise+0xc>)
 80076a2:	4601      	mov	r1, r0
 80076a4:	6818      	ldr	r0, [r3, #0]
 80076a6:	f7ff bfd3 	b.w	8007650 <_raise_r>
 80076aa:	bf00      	nop
 80076ac:	20000064 	.word	0x20000064

080076b0 <_kill_r>:
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	4d07      	ldr	r5, [pc, #28]	; (80076d0 <_kill_r+0x20>)
 80076b4:	2300      	movs	r3, #0
 80076b6:	4604      	mov	r4, r0
 80076b8:	4608      	mov	r0, r1
 80076ba:	4611      	mov	r1, r2
 80076bc:	602b      	str	r3, [r5, #0]
 80076be:	f7f9 fed5 	bl	800146c <_kill>
 80076c2:	1c43      	adds	r3, r0, #1
 80076c4:	d102      	bne.n	80076cc <_kill_r+0x1c>
 80076c6:	682b      	ldr	r3, [r5, #0]
 80076c8:	b103      	cbz	r3, 80076cc <_kill_r+0x1c>
 80076ca:	6023      	str	r3, [r4, #0]
 80076cc:	bd38      	pop	{r3, r4, r5, pc}
 80076ce:	bf00      	nop
 80076d0:	20000490 	.word	0x20000490

080076d4 <_getpid_r>:
 80076d4:	f7f9 bec2 	b.w	800145c <_getpid>

080076d8 <__swhatbuf_r>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	460c      	mov	r4, r1
 80076dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e0:	2900      	cmp	r1, #0
 80076e2:	b096      	sub	sp, #88	; 0x58
 80076e4:	4615      	mov	r5, r2
 80076e6:	461e      	mov	r6, r3
 80076e8:	da0d      	bge.n	8007706 <__swhatbuf_r+0x2e>
 80076ea:	89a3      	ldrh	r3, [r4, #12]
 80076ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80076f0:	f04f 0100 	mov.w	r1, #0
 80076f4:	bf0c      	ite	eq
 80076f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80076fa:	2340      	movne	r3, #64	; 0x40
 80076fc:	2000      	movs	r0, #0
 80076fe:	6031      	str	r1, [r6, #0]
 8007700:	602b      	str	r3, [r5, #0]
 8007702:	b016      	add	sp, #88	; 0x58
 8007704:	bd70      	pop	{r4, r5, r6, pc}
 8007706:	466a      	mov	r2, sp
 8007708:	f000 f848 	bl	800779c <_fstat_r>
 800770c:	2800      	cmp	r0, #0
 800770e:	dbec      	blt.n	80076ea <__swhatbuf_r+0x12>
 8007710:	9901      	ldr	r1, [sp, #4]
 8007712:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007716:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800771a:	4259      	negs	r1, r3
 800771c:	4159      	adcs	r1, r3
 800771e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007722:	e7eb      	b.n	80076fc <__swhatbuf_r+0x24>

08007724 <__smakebuf_r>:
 8007724:	898b      	ldrh	r3, [r1, #12]
 8007726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007728:	079d      	lsls	r5, r3, #30
 800772a:	4606      	mov	r6, r0
 800772c:	460c      	mov	r4, r1
 800772e:	d507      	bpl.n	8007740 <__smakebuf_r+0x1c>
 8007730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	6123      	str	r3, [r4, #16]
 8007738:	2301      	movs	r3, #1
 800773a:	6163      	str	r3, [r4, #20]
 800773c:	b002      	add	sp, #8
 800773e:	bd70      	pop	{r4, r5, r6, pc}
 8007740:	ab01      	add	r3, sp, #4
 8007742:	466a      	mov	r2, sp
 8007744:	f7ff ffc8 	bl	80076d8 <__swhatbuf_r>
 8007748:	9900      	ldr	r1, [sp, #0]
 800774a:	4605      	mov	r5, r0
 800774c:	4630      	mov	r0, r6
 800774e:	f7fd fbb1 	bl	8004eb4 <_malloc_r>
 8007752:	b948      	cbnz	r0, 8007768 <__smakebuf_r+0x44>
 8007754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007758:	059a      	lsls	r2, r3, #22
 800775a:	d4ef      	bmi.n	800773c <__smakebuf_r+0x18>
 800775c:	f023 0303 	bic.w	r3, r3, #3
 8007760:	f043 0302 	orr.w	r3, r3, #2
 8007764:	81a3      	strh	r3, [r4, #12]
 8007766:	e7e3      	b.n	8007730 <__smakebuf_r+0xc>
 8007768:	89a3      	ldrh	r3, [r4, #12]
 800776a:	6020      	str	r0, [r4, #0]
 800776c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007770:	81a3      	strh	r3, [r4, #12]
 8007772:	9b00      	ldr	r3, [sp, #0]
 8007774:	6163      	str	r3, [r4, #20]
 8007776:	9b01      	ldr	r3, [sp, #4]
 8007778:	6120      	str	r0, [r4, #16]
 800777a:	b15b      	cbz	r3, 8007794 <__smakebuf_r+0x70>
 800777c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007780:	4630      	mov	r0, r6
 8007782:	f000 f81d 	bl	80077c0 <_isatty_r>
 8007786:	b128      	cbz	r0, 8007794 <__smakebuf_r+0x70>
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	f023 0303 	bic.w	r3, r3, #3
 800778e:	f043 0301 	orr.w	r3, r3, #1
 8007792:	81a3      	strh	r3, [r4, #12]
 8007794:	89a3      	ldrh	r3, [r4, #12]
 8007796:	431d      	orrs	r5, r3
 8007798:	81a5      	strh	r5, [r4, #12]
 800779a:	e7cf      	b.n	800773c <__smakebuf_r+0x18>

0800779c <_fstat_r>:
 800779c:	b538      	push	{r3, r4, r5, lr}
 800779e:	4d07      	ldr	r5, [pc, #28]	; (80077bc <_fstat_r+0x20>)
 80077a0:	2300      	movs	r3, #0
 80077a2:	4604      	mov	r4, r0
 80077a4:	4608      	mov	r0, r1
 80077a6:	4611      	mov	r1, r2
 80077a8:	602b      	str	r3, [r5, #0]
 80077aa:	f7f9 febe 	bl	800152a <_fstat>
 80077ae:	1c43      	adds	r3, r0, #1
 80077b0:	d102      	bne.n	80077b8 <_fstat_r+0x1c>
 80077b2:	682b      	ldr	r3, [r5, #0]
 80077b4:	b103      	cbz	r3, 80077b8 <_fstat_r+0x1c>
 80077b6:	6023      	str	r3, [r4, #0]
 80077b8:	bd38      	pop	{r3, r4, r5, pc}
 80077ba:	bf00      	nop
 80077bc:	20000490 	.word	0x20000490

080077c0 <_isatty_r>:
 80077c0:	b538      	push	{r3, r4, r5, lr}
 80077c2:	4d06      	ldr	r5, [pc, #24]	; (80077dc <_isatty_r+0x1c>)
 80077c4:	2300      	movs	r3, #0
 80077c6:	4604      	mov	r4, r0
 80077c8:	4608      	mov	r0, r1
 80077ca:	602b      	str	r3, [r5, #0]
 80077cc:	f7f9 febd 	bl	800154a <_isatty>
 80077d0:	1c43      	adds	r3, r0, #1
 80077d2:	d102      	bne.n	80077da <_isatty_r+0x1a>
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	b103      	cbz	r3, 80077da <_isatty_r+0x1a>
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	bd38      	pop	{r3, r4, r5, pc}
 80077dc:	20000490 	.word	0x20000490

080077e0 <_init>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	bf00      	nop
 80077e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e6:	bc08      	pop	{r3}
 80077e8:	469e      	mov	lr, r3
 80077ea:	4770      	bx	lr

080077ec <_fini>:
 80077ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ee:	bf00      	nop
 80077f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077f2:	bc08      	pop	{r3}
 80077f4:	469e      	mov	lr, r3
 80077f6:	4770      	bx	lr
