
IoT-Ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08007db8  08007db8  00017db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800817c  0800817c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800817c  0800817c  0001817c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008184  08008184  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008184  08008184  00018184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008188  08008188  00018188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800818c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  200001d4  08008360  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08008360  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db99  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fdb  00000000  00000000  0002dde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  0002fdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b0  00000000  00000000  00030a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ac88  00000000  00000000  00031400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fcbc  00000000  00000000  0004c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3edf  00000000  00000000  0005bd44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004358  00000000  00000000  000ffc24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00103f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007da0 	.word	0x08007da0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007da0 	.word	0x08007da0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <SHT40_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SHT40_Init()
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	HAL_I2C_Init(&hi2c1); // Initialize and configure the I2C peripheral
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <SHT40_Init+0x10>)
 8000f4a:	f001 f931 	bl	80021b0 <HAL_I2C_Init>
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200001fc 	.word	0x200001fc

08000f58 <SHT40_Read>:
void SHT40_Read(float *t, float *rh, uint8_t mode)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08e      	sub	sp, #56	; 0x38
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	4613      	mov	r3, r2
 8000f64:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {mode, 0x00};
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	773b      	strb	r3, [r7, #28]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	777b      	strb	r3, [r7, #29]
	uint8_t buffer[6];

    HAL_I2C_Master_Transmit(&hi2c1, SHT40_I2C_ADDRESS, data, 2, HAL_MAX_DELAY);
 8000f6e:	f107 021c 	add.w	r2, r7, #28
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2302      	movs	r3, #2
 8000f7a:	2188      	movs	r1, #136	; 0x88
 8000f7c:	4848      	ldr	r0, [pc, #288]	; (80010a0 <SHT40_Read+0x148>)
 8000f7e:	f001 f9b3 	bl	80022e8 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8000f82:	200a      	movs	r0, #10
 8000f84:	f000 fe7e 	bl	8001c84 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1, SHT40_I2C_ADDRESS, buffer, 6, HAL_MAX_DELAY);
 8000f88:	f107 0214 	add.w	r2, r7, #20
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2306      	movs	r3, #6
 8000f94:	2188      	movs	r1, #136	; 0x88
 8000f96:	4842      	ldr	r0, [pc, #264]	; (80010a0 <SHT40_Read+0x148>)
 8000f98:	f001 fabe 	bl	8002518 <HAL_I2C_Master_Receive>

    uint16_t t_ticks = buffer[0]*256 + buffer[1];
 8000f9c:	7d3b      	ldrb	r3, [r7, #20]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	7d7b      	ldrb	r3, [r7, #21]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t checksum_t = buffer[2];
 8000fac:	7dbb      	ldrb	r3, [r7, #22]
 8000fae:	853b      	strh	r3, [r7, #40]	; 0x28
    uint16_t rh_ticks = buffer[3]*256 + buffer[4];
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	7e3b      	ldrb	r3, [r7, #24]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	4413      	add	r3, r2
 8000fbe:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint16_t checksum_rh = buffer[5];
 8000fc0:	7e7b      	ldrb	r3, [r7, #25]
 8000fc2:	84bb      	strh	r3, [r7, #36]	; 0x24

    float t_degC = -45 + 175.0 * t_ticks/65535;
 8000fc4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff faac 	bl	8000524 <__aeabi_i2d>
 8000fcc:	a330      	add	r3, pc, #192	; (adr r3, 8001090 <SHT40_Read+0x138>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff fb11 	bl	80005f8 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	a32e      	add	r3, pc, #184	; (adr r3, 8001098 <SHT40_Read+0x140>)
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	f7ff fc32 	bl	800084c <__aeabi_ddiv>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <SHT40_Read+0x14c>)
 8000ff6:	f7ff f947 	bl	8000288 <__aeabi_dsub>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	f7ff fdd1 	bl	8000ba8 <__aeabi_d2f>
 8001006:	4603      	mov	r3, r0
 8001008:	623b      	str	r3, [r7, #32]
    float rh_pRH = -6 + 125.0 * rh_ticks/65535;
 800100a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fa89 	bl	8000524 <__aeabi_i2d>
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <SHT40_Read+0x150>)
 8001018:	f7ff faee 	bl	80005f8 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	a31c      	add	r3, pc, #112	; (adr r3, 8001098 <SHT40_Read+0x140>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	f7ff fc0f 	bl	800084c <__aeabi_ddiv>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <SHT40_Read+0x154>)
 800103c:	f7ff f924 	bl	8000288 <__aeabi_dsub>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fdae 	bl	8000ba8 <__aeabi_d2f>
 800104c:	4603      	mov	r3, r0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (rh_pRH > 100){
 8001050:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001054:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80010b0 <SHT40_Read+0x158>
 8001058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800105c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001060:	dd01      	ble.n	8001066 <SHT40_Read+0x10e>
    	rh_pRH = 100; }
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <SHT40_Read+0x15c>)
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (rh_pRH < 0){
 8001066:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800106a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800106e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001072:	d502      	bpl.n	800107a <SHT40_Read+0x122>
    	rh_pRH = 0; }
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c

    *t = t_degC;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6a3a      	ldr	r2, [r7, #32]
 800107e:	601a      	str	r2, [r3, #0]
    *rh = rh_pRH;
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001084:	601a      	str	r2, [r3, #0]
}
 8001086:	bf00      	nop
 8001088:	3730      	adds	r7, #48	; 0x30
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	00000000 	.word	0x00000000
 8001094:	4065e000 	.word	0x4065e000
 8001098:	00000000 	.word	0x00000000
 800109c:	40efffe0 	.word	0x40efffe0
 80010a0:	200001fc 	.word	0x200001fc
 80010a4:	40468000 	.word	0x40468000
 80010a8:	405f4000 	.word	0x405f4000
 80010ac:	40180000 	.word	0x40180000
 80010b0:	42c80000 	.word	0x42c80000
 80010b4:	42c80000 	.word	0x42c80000

080010b8 <LTR329_Init>:

void LTR329_Init()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af04      	add	r7, sp, #16
    uint8_t data;

    // Activate the sensor
    data = LTR329_ACTIVE_MODE;
 80010be:	2301      	movs	r3, #1
 80010c0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, LTR329_I2C_ADDRESS, LTR329_ALS_CONTR, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80010c2:	2364      	movs	r3, #100	; 0x64
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2301      	movs	r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2301      	movs	r3, #1
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	2152      	movs	r1, #82	; 0x52
 80010d4:	480a      	ldr	r0, [pc, #40]	; (8001100 <LTR329_Init+0x48>)
 80010d6:	f001 fb15 	bl	8002704 <HAL_I2C_Mem_Write>

    // Set measurement rate
    data = LTR329_MEAS_RATE;
 80010da:	2303      	movs	r3, #3
 80010dc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, LTR329_I2C_ADDRESS, LTR329_ALS_MEAS_RATE, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80010de:	2364      	movs	r3, #100	; 0x64
 80010e0:	9302      	str	r3, [sp, #8]
 80010e2:	2301      	movs	r3, #1
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2301      	movs	r3, #1
 80010ec:	2285      	movs	r2, #133	; 0x85
 80010ee:	2152      	movs	r1, #82	; 0x52
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <LTR329_Init+0x48>)
 80010f2:	f001 fb07 	bl	8002704 <HAL_I2C_Mem_Write>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000250 	.word	0x20000250

08001104 <LTR329_Read>:
void LTR329_Read(uint8_t *data)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af04      	add	r7, sp, #16
 800110a:	6078      	str	r0, [r7, #4]
    //uint8_t data[4];
    // Read 4 bytes of data starting from LTR329_ALS_DATA_CH1_0
    HAL_I2C_Mem_Read(&hi2c3, LTR329_I2C_ADDRESS, LTR329_ALS_DATA_CH1_0, I2C_MEMADD_SIZE_8BIT, data, 4, 100);
 800110c:	2364      	movs	r3, #100	; 0x64
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	2304      	movs	r3, #4
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	2288      	movs	r2, #136	; 0x88
 800111c:	2152      	movs	r1, #82	; 0x52
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <LTR329_Read+0x28>)
 8001120:	f001 fc04 	bl	800292c <HAL_I2C_Mem_Read>

    // Combine bytes to get the light data for each channel
    //*ch1 = (uint16_t)(data[1] << 8) | data[0];
    //*ch0 = (uint16_t)(data[3] << 8) | data[2];

}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000250 	.word	0x20000250

08001130 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	  uart_rx_buffer_handler(Rx_data[0]);
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_UART_RxCpltCallback+0x38>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fab9 	bl	80016b4 <uart_rx_buffer_handler>
	  uart_rx_buffer_handler(Rx_data[1]);
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_UART_RxCpltCallback+0x38>)
 8001144:	785b      	ldrb	r3, [r3, #1]
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fab4 	bl	80016b4 <uart_rx_buffer_handler>
	  uart_rx_buffer_handler(Rx_data[2]);
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_UART_RxCpltCallback+0x38>)
 800114e:	789b      	ldrb	r3, [r3, #2]
 8001150:	4618      	mov	r0, r3
 8001152:	f000 faaf 	bl	80016b4 <uart_rx_buffer_handler>
	  HAL_UART_Receive_IT(&huart2, Rx_data,3);
 8001156:	2203      	movs	r2, #3
 8001158:	4903      	ldr	r1, [pc, #12]	; (8001168 <HAL_UART_RxCpltCallback+0x38>)
 800115a:	4804      	ldr	r0, [pc, #16]	; (800116c <HAL_UART_RxCpltCallback+0x3c>)
 800115c:	f003 fa1a 	bl	8004594 <HAL_UART_Receive_IT>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200001f0 	.word	0x200001f0
 800116c:	2000032c 	.word	0x2000032c

08001170 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b0a0      	sub	sp, #128	; 0x80
 8001174:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001176:	f000 fd10 	bl	8001b9a <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800117a:	f000 f8e7 	bl	800134c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800117e:	f000 fa07 	bl	8001590 <MX_GPIO_Init>
    MX_I2C1_Init();
 8001182:	f000 f929 	bl	80013d8 <MX_I2C1_Init>
    MX_I2C3_Init();
 8001186:	f000 f965 	bl	8001454 <MX_I2C3_Init>
    MX_USART1_UART_Init();
 800118a:	f000 f9a1 	bl	80014d0 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 800118e:	f000 f9cf 	bl	8001530 <MX_USART2_UART_Init>
    /* USER CODE BEGIN 2 */
    SHT40_Init();
 8001192:	f7ff fed7 	bl	8000f44 <SHT40_Init>
    LTR329_Init();
 8001196:	f7ff ff8f 	bl	80010b8 <LTR329_Init>
    HAL_UART_Receive_IT (&huart2, Rx_data, 3);
 800119a:	2203      	movs	r2, #3
 800119c:	4966      	ldr	r1, [pc, #408]	; (8001338 <main+0x1c8>)
 800119e:	4867      	ldr	r0, [pc, #412]	; (800133c <main+0x1cc>)
 80011a0:	f003 f9f8 	bl	8004594 <HAL_UART_Receive_IT>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        /* USER CODE END WHILE */
    	HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 80011a4:	2120      	movs	r1, #32
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011aa:	f000 ffe7 	bl	800217c <HAL_GPIO_TogglePin>
    	if (uart_rx_done_flag) {
 80011ae:	4b64      	ldr	r3, [pc, #400]	; (8001340 <main+0x1d0>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f5      	beq.n	80011a4 <main+0x34>
    	  		  enum msg_type_e msg_type = uart_rx_buffer[1];
 80011b8:	4b62      	ldr	r3, [pc, #392]	; (8001344 <main+0x1d4>)
 80011ba:	785b      	ldrb	r3, [r3, #1]
 80011bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

    	  		  if (msg_type == REQUEST_DATA) {
 80011c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f040 80b2 	bne.w	800132e <main+0x1be>
    	  			  SHT40_Read(&t, &rh, SHT40_MEAS_HIGH_PRECISION);
 80011ca:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80011ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011d2:	22fd      	movs	r2, #253	; 0xfd
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff febf 	bl	8000f58 <SHT40_Read>
    	  			  uint8_t temperature[4];
    	  			  message Tempm = {.msg_start_char = MSG_START_CHARACTER, .msg_end_char = MSG_END_CHARACTER,
 80011da:	4a5b      	ldr	r2, [pc, #364]	; (8001348 <main+0x1d8>)
 80011dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    	  					  .msg_data.temperature = 30, .msg_type = RESPONSE_TEMPERATURE};
    	  			  int TempBytes = create_payload(Tempm, temperature);
 80011e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011ea:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80011ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f0:	f000 f9fd 	bl	80015ee <create_payload>
 80011f4:	4603      	mov	r3, r0
 80011f6:	67bb      	str	r3, [r7, #120]	; 0x78
    	  			  HAL_UART_Transmit(&huart2, temperature, TempBytes, 10);
 80011f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001200:	230a      	movs	r3, #10
 8001202:	484e      	ldr	r0, [pc, #312]	; (800133c <main+0x1cc>)
 8001204:	f003 f93c 	bl	8004480 <HAL_UART_Transmit>


    	  			  SHT40_Read(&t, &rh, SHT40_MEAS_HIGH_PRECISION);
 8001208:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800120c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001210:	22fd      	movs	r2, #253	; 0xfd
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fea0 	bl	8000f58 <SHT40_Read>
    	  			  uint8_t humidity[4];
    	  			  message Humm = {.msg_start_char = MSG_START_CHARACTER, .msg_end_char = MSG_END_CHARACTER,
 8001218:	2373      	movs	r3, #115	; 0x73
 800121a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800121e:	2302      	movs	r3, #2
 8001220:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001226:	63bb      	str	r3, [r7, #56]	; 0x38
 8001228:	2365      	movs	r3, #101	; 0x65
 800122a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    	  					  .msg_data.humidity = rh, .msg_type = RESPONSE_HUMIDITY};
    	  			  int HumBytes = create_payload(Humm, humidity);
 800122e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001232:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001236:	ca07      	ldmia	r2, {r0, r1, r2}
 8001238:	f000 f9d9 	bl	80015ee <create_payload>
 800123c:	4603      	mov	r3, r0
 800123e:	677b      	str	r3, [r7, #116]	; 0x74
    	  			  HAL_UART_Transmit(&huart2, humidity, HumBytes, 10);
 8001240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001242:	b29a      	uxth	r2, r3
 8001244:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001248:	230a      	movs	r3, #10
 800124a:	483c      	ldr	r0, [pc, #240]	; (800133c <main+0x1cc>)
 800124c:	f003 f918 	bl	8004480 <HAL_UART_Transmit>


    	  			  LTR329_Read(data);
 8001250:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff55 	bl	8001104 <LTR329_Read>
    	  			  uint8_t light[4];
    	  			  message Lightm = {.msg_start_char = MSG_START_CHARACTER, .msg_end_char = MSG_END_CHARACTER,
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	2373      	movs	r3, #115	; 0x73
 8001268:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800126c:	2303      	movs	r3, #3
 800126e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001272:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001276:	b2db      	uxtb	r3, r3
 8001278:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800127c:	2365      	movs	r3, #101	; 0x65
 800127e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    	  					  .msg_data.light = data, .msg_type = RESPONSE_LIGHT};
    	  			  int LightBytes = create_payload(Lightm, light);
 8001282:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001286:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800128a:	ca07      	ldmia	r2, {r0, r1, r2}
 800128c:	f000 f9af 	bl	80015ee <create_payload>
 8001290:	4603      	mov	r3, r0
 8001292:	673b      	str	r3, [r7, #112]	; 0x70
    	  			  HAL_UART_Transmit(&huart2, light, LightBytes, 10);
 8001294:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001296:	b29a      	uxth	r2, r3
 8001298:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800129c:	230a      	movs	r3, #10
 800129e:	4827      	ldr	r0, [pc, #156]	; (800133c <main+0x1cc>)
 80012a0:	f003 f8ee 	bl	8004480 <HAL_UART_Transmit>


    	  			  SHT40_Read(&t, &rh, SHT40_MEAS_HIGH_PRECISION);
 80012a4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80012a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012ac:	22fd      	movs	r2, #253	; 0xfd
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fe52 	bl	8000f58 <SHT40_Read>
    	  			  float radiate = t;
 80012b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    	  			  uint8_t radiation[4];
    	  			  message Radm = {.msg_start_char = MSG_START_CHARACTER, .msg_end_char = MSG_END_CHARACTER,
 80012b8:	2373      	movs	r3, #115	; 0x73
 80012ba:	753b      	strb	r3, [r7, #20]
 80012bc:	2304      	movs	r3, #4
 80012be:	757b      	strb	r3, [r7, #21]
 80012c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	2365      	movs	r3, #101	; 0x65
 80012c6:	773b      	strb	r3, [r7, #28]
    	  					  .msg_data.radiation = radiate, .msg_type = RESPONSE_RADIATION};
    	  			  int RadBytes = create_payload(Radm, radiation);
 80012c8:	f107 0320 	add.w	r3, r7, #32
 80012cc:	f107 0214 	add.w	r2, r7, #20
 80012d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80012d2:	f000 f98c 	bl	80015ee <create_payload>
 80012d6:	4603      	mov	r3, r0
 80012d8:	66bb      	str	r3, [r7, #104]	; 0x68
    	  			  HAL_UART_Transmit(&huart2, radiation, RadBytes, 10);
 80012da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012dc:	b29a      	uxth	r2, r3
 80012de:	f107 0120 	add.w	r1, r7, #32
 80012e2:	230a      	movs	r3, #10
 80012e4:	4815      	ldr	r0, [pc, #84]	; (800133c <main+0x1cc>)
 80012e6:	f003 f8cb 	bl	8004480 <HAL_UART_Transmit>


    	  			  SHT40_Read(&t, &rh, SHT40_MEAS_HIGH_PRECISION);
 80012ea:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80012ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012f2:	22fd      	movs	r2, #253	; 0xfd
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fe2f 	bl	8000f58 <SHT40_Read>
    	  			  float dustsens = rh;
 80012fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012fc:	667b      	str	r3, [r7, #100]	; 0x64
    	  			  uint8_t dust[4];
    	  			  message Dustm = {.msg_start_char = MSG_START_CHARACTER, .msg_end_char = MSG_END_CHARACTER,
 80012fe:	2373      	movs	r3, #115	; 0x73
 8001300:	713b      	strb	r3, [r7, #4]
 8001302:	2305      	movs	r3, #5
 8001304:	717b      	strb	r3, [r7, #5]
 8001306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	2365      	movs	r3, #101	; 0x65
 800130c:	733b      	strb	r3, [r7, #12]
    	  					  .msg_data.radiation = dustsens, .msg_type = RESPONSE_DUST};
    	  			  int DustBytes = create_payload(Dustm, dust);
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	1d3a      	adds	r2, r7, #4
 8001314:	ca07      	ldmia	r2, {r0, r1, r2}
 8001316:	f000 f96a 	bl	80015ee <create_payload>
 800131a:	4603      	mov	r3, r0
 800131c:	663b      	str	r3, [r7, #96]	; 0x60
    	  			  HAL_UART_Transmit(&huart2, dust, DustBytes, 10);
 800131e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001320:	b29a      	uxth	r2, r3
 8001322:	f107 0110 	add.w	r1, r7, #16
 8001326:	230a      	movs	r3, #10
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <main+0x1cc>)
 800132a:	f003 f8a9 	bl	8004480 <HAL_UART_Transmit>


    	  		  }
    	  		// Reset the flag after processing the received data
    	  		uart_rx_done_flag = 0;
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <main+0x1d0>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 8001334:	e736      	b.n	80011a4 <main+0x34>
 8001336:	bf00      	nop
 8001338:	200001f0 	.word	0x200001f0
 800133c:	2000032c 	.word	0x2000032c
 8001340:	200003d3 	.word	0x200003d3
 8001344:	200003b4 	.word	0x200003b4
 8001348:	08007db8 	.word	0x08007db8

0800134c <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b096      	sub	sp, #88	; 0x58
 8001350:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	2244      	movs	r2, #68	; 0x44
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f004 fdcf 	bl	8005efe <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	463b      	mov	r3, r7
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 800136e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001372:	f001 ffd5 	bl	8003320 <HAL_PWREx_ControlVoltageScaling>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0x34>
        Error_Handler();
 800137c:	f000 f932 	bl	80015e4 <Error_Handler>
    }

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001380:	2310      	movs	r3, #16
 8001382:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001384:	2301      	movs	r3, #1
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.MSICalibrationValue = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800138c:	2360      	movs	r3, #96	; 0x60
 800138e:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001390:	2300      	movs	r3, #0
 8001392:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4618      	mov	r0, r3
 800139a:	f002 f817 	bl	80033cc <HAL_RCC_OscConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0x5c>
        Error_Handler();
 80013a4:	f000 f91e 	bl	80015e4 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013a8:	230f      	movs	r3, #15
 80013aa:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80013bc:	463b      	mov	r3, r7
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 fc65 	bl	8003c90 <HAL_RCC_ClockConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0x84>
        Error_Handler();
 80013cc:	f000 f90a 	bl	80015e4 <Error_Handler>
    }
}
 80013d0:	bf00      	nop
 80013d2:	3758      	adds	r7, #88	; 0x58
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <MX_I2C1_Init+0x74>)
 80013de:	4a1c      	ldr	r2, [pc, #112]	; (8001450 <MX_I2C1_Init+0x78>)
 80013e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_I2C1_Init+0x74>)
 80013e4:	f640 6214 	movw	r2, #3604	; 0xe14
 80013e8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_I2C1_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <MX_I2C1_Init+0x74>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <MX_I2C1_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <MX_I2C1_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_I2C1_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <MX_I2C1_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_I2C1_Init+0x74>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <MX_I2C1_Init+0x74>)
 8001416:	f000 fecb 	bl	80021b0 <HAL_I2C_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001420:	f000 f8e0 	bl	80015e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001424:	2100      	movs	r1, #0
 8001426:	4809      	ldr	r0, [pc, #36]	; (800144c <MX_I2C1_Init+0x74>)
 8001428:	f001 fed4 	bl	80031d4 <HAL_I2CEx_ConfigAnalogFilter>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001432:	f000 f8d7 	bl	80015e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001436:	2100      	movs	r1, #0
 8001438:	4804      	ldr	r0, [pc, #16]	; (800144c <MX_I2C1_Init+0x74>)
 800143a:	f001 ff16 	bl	800326a <HAL_I2CEx_ConfigDigitalFilter>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001444:	f000 f8ce 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200001fc 	.word	0x200001fc
 8001450:	40005400 	.word	0x40005400

08001454 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MX_I2C3_Init+0x74>)
 800145a:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <MX_I2C3_Init+0x78>)
 800145c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <MX_I2C3_Init+0x74>)
 8001460:	f640 6214 	movw	r2, #3604	; 0xe14
 8001464:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_I2C3_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <MX_I2C3_Init+0x74>)
 800146e:	2201      	movs	r2, #1
 8001470:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_I2C3_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <MX_I2C3_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_I2C3_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_I2C3_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_I2C3_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001490:	480d      	ldr	r0, [pc, #52]	; (80014c8 <MX_I2C3_Init+0x74>)
 8001492:	f000 fe8d 	bl	80021b0 <HAL_I2C_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800149c:	f000 f8a2 	bl	80015e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014a0:	2100      	movs	r1, #0
 80014a2:	4809      	ldr	r0, [pc, #36]	; (80014c8 <MX_I2C3_Init+0x74>)
 80014a4:	f001 fe96 	bl	80031d4 <HAL_I2CEx_ConfigAnalogFilter>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80014ae:	f000 f899 	bl	80015e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014b2:	2100      	movs	r1, #0
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <MX_I2C3_Init+0x74>)
 80014b6:	f001 fed8 	bl	800326a <HAL_I2CEx_ConfigDigitalFilter>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80014c0:	f000 f890 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000250 	.word	0x20000250
 80014cc:	40005c00 	.word	0x40005c00

080014d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MX_USART1_UART_Init+0x58>)
 80014d6:	4a15      	ldr	r2, [pc, #84]	; (800152c <MX_USART1_UART_Init+0x5c>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <MX_USART1_UART_Init+0x58>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_USART1_UART_Init+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_USART1_UART_Init+0x58>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_USART1_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_USART1_UART_Init+0x58>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_USART1_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_USART1_UART_Init+0x58>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_USART1_UART_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_USART1_UART_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_USART1_UART_Init+0x58>)
 8001514:	f002 ff66 	bl	80043e4 <HAL_UART_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800151e:	f000 f861 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200002a4 	.word	0x200002a4
 800152c:	40013800 	.word	0x40013800

08001530 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001536:	4a15      	ldr	r2, [pc, #84]	; (800158c <MX_USART2_UART_Init+0x5c>)
 8001538:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_USART2_UART_Init+0x58>)
 800153c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001540:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_USART2_UART_Init+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_USART2_UART_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USART2_UART_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001574:	f002 ff36 	bl	80043e4 <HAL_UART_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800157e:	f000 f831 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000032c 	.word	0x2000032c
 800158c:	40004400 	.word	0x40004400

08001590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <MX_GPIO_Init+0x50>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <MX_GPIO_Init+0x50>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_GPIO_Init+0x50>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]

	  /* Configure GPIO pin : PA5 */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015bc:	2320      	movs	r3, #32
 80015be:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	4619      	mov	r1, r3
 80015d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d4:	f000 fc60 	bl	8001e98 <HAL_GPIO_Init>

}
 80015d8:	bf00      	nop
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ec:	e7fe      	b.n	80015ec <Error_Handler+0x8>

080015ee <create_payload>:

volatile uint8_t uart_rx_buffer[BUFFER_SIZE];
static volatile uint8_t uart_rx_buffer_i = 0;
volatile bool uart_rx_done_flag;

uint8_t create_payload(message msg, uint8_t *payload){
 80015ee:	b490      	push	{r4, r7}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	1d3c      	adds	r4, r7, #4
 80015f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015fa:	603b      	str	r3, [r7, #0]
    uint8_t payload_i = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	75fb      	strb	r3, [r7, #23]

    payload[payload_i++] = msg.msg_start_char;
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	75fa      	strb	r2, [r7, #23]
 8001606:	461a      	mov	r2, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	4413      	add	r3, r2
 800160c:	793a      	ldrb	r2, [r7, #4]
 800160e:	701a      	strb	r2, [r3, #0]
    memcpy(payload+payload_i, &msg.msg_type, sizeof(msg.msg_type));
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	4413      	add	r3, r2
 8001616:	797a      	ldrb	r2, [r7, #5]
 8001618:	701a      	strb	r2, [r3, #0]
    payload_i += sizeof(msg.msg_type);
 800161a:	7dfb      	ldrb	r3, [r7, #23]
 800161c:	3301      	adds	r3, #1
 800161e:	75fb      	strb	r3, [r7, #23]

    if (msg.msg_type == RESPONSE_TEMPERATURE){
 8001620:	797b      	ldrb	r3, [r7, #5]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d108      	bne.n	8001638 <create_payload+0x4a>
        memcpy(payload+payload_i, &msg.msg_data.temperature, sizeof(msg.msg_data.temperature));
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	4413      	add	r3, r2
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	601a      	str	r2, [r3, #0]
        payload_i += sizeof(msg.msg_data.temperature);
 8001630:	7dfb      	ldrb	r3, [r7, #23]
 8001632:	3304      	adds	r3, #4
 8001634:	75fb      	strb	r3, [r7, #23]
 8001636:	e02e      	b.n	8001696 <create_payload+0xa8>
    }
    else if (msg.msg_type == RESPONSE_HUMIDITY){
 8001638:	797b      	ldrb	r3, [r7, #5]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d108      	bne.n	8001650 <create_payload+0x62>
        memcpy(payload+payload_i, &msg.msg_data.humidity, sizeof(msg.msg_data.humidity));
 800163e:	7dfb      	ldrb	r3, [r7, #23]
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	4413      	add	r3, r2
 8001644:	68ba      	ldr	r2, [r7, #8]
 8001646:	601a      	str	r2, [r3, #0]
        payload_i += sizeof(msg.msg_data.humidity);
 8001648:	7dfb      	ldrb	r3, [r7, #23]
 800164a:	3304      	adds	r3, #4
 800164c:	75fb      	strb	r3, [r7, #23]
 800164e:	e022      	b.n	8001696 <create_payload+0xa8>
    }
    else if (msg.msg_type == RESPONSE_LIGHT){
 8001650:	797b      	ldrb	r3, [r7, #5]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d108      	bne.n	8001668 <create_payload+0x7a>
        memcpy(payload+payload_i, msg.msg_data.light, sizeof(msg.msg_data.light));
 8001656:	7dfb      	ldrb	r3, [r7, #23]
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	4413      	add	r3, r2
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	601a      	str	r2, [r3, #0]
        payload_i += sizeof(msg.msg_data.light);
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	3304      	adds	r3, #4
 8001664:	75fb      	strb	r3, [r7, #23]
 8001666:	e016      	b.n	8001696 <create_payload+0xa8>
    }
    else if (msg.msg_type == RESPONSE_RADIATION){
 8001668:	797b      	ldrb	r3, [r7, #5]
 800166a:	2b04      	cmp	r3, #4
 800166c:	d108      	bne.n	8001680 <create_payload+0x92>
    	memcpy(payload+payload_i, &msg.msg_data.radiation, sizeof(msg.msg_data.radiation));
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	4413      	add	r3, r2
 8001674:	68ba      	ldr	r2, [r7, #8]
 8001676:	601a      	str	r2, [r3, #0]
    	payload_i += sizeof(msg.msg_data.radiation);
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	3304      	adds	r3, #4
 800167c:	75fb      	strb	r3, [r7, #23]
 800167e:	e00a      	b.n	8001696 <create_payload+0xa8>
    }
    else if (msg.msg_type == RESPONSE_DUST) {
 8001680:	797b      	ldrb	r3, [r7, #5]
 8001682:	2b05      	cmp	r3, #5
 8001684:	d107      	bne.n	8001696 <create_payload+0xa8>
    	memcpy(payload+payload_i, &msg.msg_data.dust, sizeof(msg.msg_data.dust));
 8001686:	7dfb      	ldrb	r3, [r7, #23]
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	4413      	add	r3, r2
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	601a      	str	r2, [r3, #0]
    	payload_i += sizeof(msg.msg_data.dust);
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	3304      	adds	r3, #4
 8001694:	75fb      	strb	r3, [r7, #23]
    }

    payload[payload_i++] = msg.msg_end_char;
 8001696:	7dfb      	ldrb	r3, [r7, #23]
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	75fa      	strb	r2, [r7, #23]
 800169c:	461a      	mov	r2, r3
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	4413      	add	r3, r2
 80016a2:	7b3a      	ldrb	r2, [r7, #12]
 80016a4:	701a      	strb	r2, [r3, #0]

    return payload_i;
 80016a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc90      	pop	{r4, r7}
 80016b0:	4770      	bx	lr
	...

080016b4 <uart_rx_buffer_handler>:

void uart_rx_buffer_handler(uint8_t input_byte){
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
    uart_rx_done_flag = false;
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <uart_rx_buffer_handler+0x5c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]

    if (input_byte == 's')
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2b73      	cmp	r3, #115	; 0x73
 80016c8:	d103      	bne.n	80016d2 <uart_rx_buffer_handler+0x1e>
    {
      uart_rx_buffer_i = 0;
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <uart_rx_buffer_handler+0x60>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e005      	b.n	80016de <uart_rx_buffer_handler+0x2a>
    }
    else if (input_byte == 'e')
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2b65      	cmp	r3, #101	; 0x65
 80016d6:	d102      	bne.n	80016de <uart_rx_buffer_handler+0x2a>
    {
      uart_rx_done_flag = true;
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <uart_rx_buffer_handler+0x5c>)
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
    }

    uart_rx_buffer[uart_rx_buffer_i] = input_byte;
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <uart_rx_buffer_handler+0x60>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	4619      	mov	r1, r3
 80016e6:	4a0c      	ldr	r2, [pc, #48]	; (8001718 <uart_rx_buffer_handler+0x64>)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	5453      	strb	r3, [r2, r1]

    if (uart_rx_buffer_i < (BUFFER_SIZE - 1))
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <uart_rx_buffer_handler+0x60>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b1c      	cmp	r3, #28
 80016f4:	d806      	bhi.n	8001704 <uart_rx_buffer_handler+0x50>
    {
      uart_rx_buffer_i++;
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <uart_rx_buffer_handler+0x60>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	3301      	adds	r3, #1
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <uart_rx_buffer_handler+0x60>)
 8001702:	701a      	strb	r2, [r3, #0]
    }
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	200003d3 	.word	0x200003d3
 8001714:	200003d2 	.word	0x200003d2
 8001718:	200003b4 	.word	0x200003b4

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <HAL_MspInit+0x44>)
 8001724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001726:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <HAL_MspInit+0x44>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6613      	str	r3, [r2, #96]	; 0x60
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_MspInit+0x44>)
 8001730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_MspInit+0x44>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	4a08      	ldr	r2, [pc, #32]	; (8001760 <HAL_MspInit+0x44>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	6593      	str	r3, [r2, #88]	; 0x58
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_MspInit+0x44>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000

08001764 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b096      	sub	sp, #88	; 0x58
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	2234      	movs	r2, #52	; 0x34
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f004 fbba 	bl	8005efe <memset>
  if(hi2c->Instance==I2C1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a1f      	ldr	r2, [pc, #124]	; (800180c <HAL_I2C_MspInit+0xa8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d137      	bne.n	8001804 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001794:	2340      	movs	r3, #64	; 0x40
 8001796:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001798:	2300      	movs	r3, #0
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	4618      	mov	r0, r3
 80017a2:	f002 fc99 	bl	80040d8 <HAL_RCCEx_PeriphCLKConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017ac:	f7ff ff1a 	bl	80015e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_I2C_MspInit+0xac>)
 80017b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b4:	4a16      	ldr	r2, [pc, #88]	; (8001810 <HAL_I2C_MspInit+0xac>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <HAL_I2C_MspInit+0xac>)
 80017be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017cc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ce:	2312      	movs	r3, #18
 80017d0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017da:	2304      	movs	r3, #4
 80017dc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017e2:	4619      	mov	r1, r3
 80017e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e8:	f000 fb56 	bl	8001e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_I2C_MspInit+0xac>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	4a07      	ldr	r2, [pc, #28]	; (8001810 <HAL_I2C_MspInit+0xac>)
 80017f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017f6:	6593      	str	r3, [r2, #88]	; 0x58
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_I2C_MspInit+0xac>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001804:	bf00      	nop
 8001806:	3758      	adds	r7, #88	; 0x58
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40005400 	.word	0x40005400
 8001810:	40021000 	.word	0x40021000

08001814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b098      	sub	sp, #96	; 0x60
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800182c:	f107 0318 	add.w	r3, r7, #24
 8001830:	2234      	movs	r2, #52	; 0x34
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f004 fb62 	bl	8005efe <memset>
  if(huart->Instance==USART1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a3d      	ldr	r2, [pc, #244]	; (8001934 <HAL_UART_MspInit+0x120>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d136      	bne.n	80018b2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001844:	2301      	movs	r3, #1
 8001846:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800184c:	f107 0318 	add.w	r3, r7, #24
 8001850:	4618      	mov	r0, r3
 8001852:	f002 fc41 	bl	80040d8 <HAL_RCCEx_PeriphCLKConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800185c:	f7ff fec2 	bl	80015e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001860:	4b35      	ldr	r3, [pc, #212]	; (8001938 <HAL_UART_MspInit+0x124>)
 8001862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001864:	4a34      	ldr	r2, [pc, #208]	; (8001938 <HAL_UART_MspInit+0x124>)
 8001866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186a:	6613      	str	r3, [r2, #96]	; 0x60
 800186c:	4b32      	ldr	r3, [pc, #200]	; (8001938 <HAL_UART_MspInit+0x124>)
 800186e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <HAL_UART_MspInit+0x124>)
 800187a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187c:	4a2e      	ldr	r2, [pc, #184]	; (8001938 <HAL_UART_MspInit+0x124>)
 800187e:	f043 0302 	orr.w	r3, r3, #2
 8001882:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001884:	4b2c      	ldr	r3, [pc, #176]	; (8001938 <HAL_UART_MspInit+0x124>)
 8001886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001890:	23c0      	movs	r3, #192	; 0xc0
 8001892:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189c:	2303      	movs	r3, #3
 800189e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018a0:	2307      	movs	r3, #7
 80018a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018a8:	4619      	mov	r1, r3
 80018aa:	4824      	ldr	r0, [pc, #144]	; (800193c <HAL_UART_MspInit+0x128>)
 80018ac:	f000 faf4 	bl	8001e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018b0:	e03b      	b.n	800192a <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a22      	ldr	r2, [pc, #136]	; (8001940 <HAL_UART_MspInit+0x12c>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d136      	bne.n	800192a <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018bc:	2302      	movs	r3, #2
 80018be:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c4:	f107 0318 	add.w	r3, r7, #24
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 fc05 	bl	80040d8 <HAL_RCCEx_PeriphCLKConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 80018d4:	f7ff fe86 	bl	80015e4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_UART_MspInit+0x124>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018dc:	4a16      	ldr	r2, [pc, #88]	; (8001938 <HAL_UART_MspInit+0x124>)
 80018de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e2:	6593      	str	r3, [r2, #88]	; 0x58
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_UART_MspInit+0x124>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_UART_MspInit+0x124>)
 80018f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f4:	4a10      	ldr	r2, [pc, #64]	; (8001938 <HAL_UART_MspInit+0x124>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_UART_MspInit+0x124>)
 80018fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001908:	230e      	movs	r3, #14
 800190a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001918:	2307      	movs	r3, #7
 800191a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001920:	4619      	mov	r1, r3
 8001922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001926:	f000 fab7 	bl	8001e98 <HAL_GPIO_Init>
}
 800192a:	bf00      	nop
 800192c:	3760      	adds	r7, #96	; 0x60
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40013800 	.word	0x40013800
 8001938:	40021000 	.word	0x40021000
 800193c:	48000400 	.word	0x48000400
 8001940:	40004400 	.word	0x40004400

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <NMI_Handler+0x4>

0800194a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <MemManage_Handler+0x4>

08001956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <UsageFault_Handler+0x4>

08001962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001990:	f000 f958 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}

08001998 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return 1;
 800199c:	2301      	movs	r3, #1
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <_kill>:

int _kill(int pid, int sig)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019b2:	f004 faf7 	bl	8005fa4 <__errno>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2216      	movs	r2, #22
 80019ba:	601a      	str	r2, [r3, #0]
  return -1;
 80019bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <_exit>:

void _exit (int status)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019d0:	f04f 31ff 	mov.w	r1, #4294967295
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ffe7 	bl	80019a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019da:	e7fe      	b.n	80019da <_exit+0x12>

080019dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	e00a      	b.n	8001a04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ee:	f3af 8000 	nop.w
 80019f2:	4601      	mov	r1, r0
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	60ba      	str	r2, [r7, #8]
 80019fa:	b2ca      	uxtb	r2, r1
 80019fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	3301      	adds	r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dbf0      	blt.n	80019ee <_read+0x12>
  }

  return len;
 8001a0c:	687b      	ldr	r3, [r7, #4]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	e009      	b.n	8001a3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	60ba      	str	r2, [r7, #8]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	dbf1      	blt.n	8001a28 <_write+0x12>
  }
  return len;
 8001a44:	687b      	ldr	r3, [r7, #4]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <_close>:

int _close(int file)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a76:	605a      	str	r2, [r3, #4]
  return 0;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <_isatty>:

int _isatty(int file)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac0:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <_sbrk+0x5c>)
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <_sbrk+0x60>)
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <_sbrk+0x64>)
 8001ad6:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <_sbrk+0x68>)
 8001ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d207      	bcs.n	8001af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae8:	f004 fa5c 	bl	8005fa4 <__errno>
 8001aec:	4603      	mov	r3, r0
 8001aee:	220c      	movs	r2, #12
 8001af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	e009      	b.n	8001b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <_sbrk+0x64>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <_sbrk+0x64>)
 8001b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	2000a000 	.word	0x2000a000
 8001b18:	00000400 	.word	0x00000400
 8001b1c:	200003d4 	.word	0x200003d4
 8001b20:	20000528 	.word	0x20000528

08001b24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <SystemInit+0x20>)
 8001b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b2e:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <SystemInit+0x20>)
 8001b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b4c:	f7ff ffea 	bl	8001b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b52:	490d      	ldr	r1, [pc, #52]	; (8001b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <LoopForever+0xe>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b68:	4c0a      	ldr	r4, [pc, #40]	; (8001b94 <LoopForever+0x16>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b76:	f004 fa1b 	bl	8005fb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b7a:	f7ff faf9 	bl	8001170 <main>

08001b7e <LoopForever>:

LoopForever:
    b LoopForever
 8001b7e:	e7fe      	b.n	8001b7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b80:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b88:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b8c:	0800818c 	.word	0x0800818c
  ldr r2, =_sbss
 8001b90:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b94:	20000528 	.word	0x20000528

08001b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b98:	e7fe      	b.n	8001b98 <ADC1_2_IRQHandler>

08001b9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	f000 f943 	bl	8001e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001baa:	2000      	movs	r0, #0
 8001bac:	f000 f80e 	bl	8001bcc <HAL_InitTick>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	71fb      	strb	r3, [r7, #7]
 8001bba:	e001      	b.n	8001bc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bbc:	f7ff fdae 	bl	800171c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bd8:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <HAL_InitTick+0x6c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d023      	beq.n	8001c28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001be0:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <HAL_InitTick+0x70>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_InitTick+0x6c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f941 	bl	8001e7e <HAL_SYSTICK_Config>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10f      	bne.n	8001c22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d809      	bhi.n	8001c1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f000 f919 	bl	8001e46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c14:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_InitTick+0x74>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e007      	b.n	8001c2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
 8001c20:	e004      	b.n	8001c2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	73fb      	strb	r3, [r7, #15]
 8001c26:	e001      	b.n	8001c2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_IncTick+0x20>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_IncTick+0x24>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <HAL_IncTick+0x24>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000008 	.word	0x20000008
 8001c68:	200003d8 	.word	0x200003d8

08001c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <HAL_GetTick+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	200003d8 	.word	0x200003d8

08001c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff ffee 	bl	8001c6c <HAL_GetTick>
 8001c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9c:	d005      	beq.n	8001caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_Delay+0x44>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001caa:	bf00      	nop
 8001cac:	f7ff ffde 	bl	8001c6c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d8f7      	bhi.n	8001cac <HAL_Delay+0x28>
  {
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000008 	.word	0x20000008

08001ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <__NVIC_GetPriorityGrouping+0x18>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 0307 	and.w	r3, r3, #7
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	db0a      	blt.n	8001d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	490c      	ldr	r1, [pc, #48]	; (8001d7c <__NVIC_SetPriority+0x4c>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	0112      	lsls	r2, r2, #4
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	440b      	add	r3, r1
 8001d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d58:	e00a      	b.n	8001d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4908      	ldr	r1, [pc, #32]	; (8001d80 <__NVIC_SetPriority+0x50>)
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	3b04      	subs	r3, #4
 8001d68:	0112      	lsls	r2, r2, #4
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	761a      	strb	r2, [r3, #24]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000e100 	.word	0xe000e100
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b089      	sub	sp, #36	; 0x24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f1c3 0307 	rsb	r3, r3, #7
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	bf28      	it	cs
 8001da2:	2304      	movcs	r3, #4
 8001da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3304      	adds	r3, #4
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d902      	bls.n	8001db4 <NVIC_EncodePriority+0x30>
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3b03      	subs	r3, #3
 8001db2:	e000      	b.n	8001db6 <NVIC_EncodePriority+0x32>
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	43d9      	mvns	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	4313      	orrs	r3, r2
         );
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3724      	adds	r7, #36	; 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dfc:	d301      	bcc.n	8001e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00f      	b.n	8001e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e02:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <SysTick_Config+0x40>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0a:	210f      	movs	r1, #15
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f7ff ff8e 	bl	8001d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <SysTick_Config+0x40>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1a:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <SysTick_Config+0x40>)
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	e000e010 	.word	0xe000e010

08001e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ff47 	bl	8001ccc <__NVIC_SetPriorityGrouping>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e58:	f7ff ff5c 	bl	8001d14 <__NVIC_GetPriorityGrouping>
 8001e5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	6978      	ldr	r0, [r7, #20]
 8001e64:	f7ff ff8e 	bl	8001d84 <NVIC_EncodePriority>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff5d 	bl	8001d30 <__NVIC_SetPriority>
}
 8001e76:	bf00      	nop
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ffb0 	bl	8001dec <SysTick_Config>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea6:	e14e      	b.n	8002146 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2101      	movs	r1, #1
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8140 	beq.w	8002140 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d005      	beq.n	8001ed8 <HAL_GPIO_Init+0x40>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d130      	bne.n	8001f3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f0e:	2201      	movs	r2, #1
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	f003 0201 	and.w	r2, r3, #1
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d017      	beq.n	8001f76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d123      	bne.n	8001fca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	08da      	lsrs	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3208      	adds	r2, #8
 8001f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	220f      	movs	r2, #15
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	691a      	ldr	r2, [r3, #16]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	08da      	lsrs	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3208      	adds	r2, #8
 8001fc4:	6939      	ldr	r1, [r7, #16]
 8001fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 0203 	and.w	r2, r3, #3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 809a 	beq.w	8002140 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200c:	4b55      	ldr	r3, [pc, #340]	; (8002164 <HAL_GPIO_Init+0x2cc>)
 800200e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002010:	4a54      	ldr	r2, [pc, #336]	; (8002164 <HAL_GPIO_Init+0x2cc>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6613      	str	r3, [r2, #96]	; 0x60
 8002018:	4b52      	ldr	r3, [pc, #328]	; (8002164 <HAL_GPIO_Init+0x2cc>)
 800201a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002024:	4a50      	ldr	r2, [pc, #320]	; (8002168 <HAL_GPIO_Init+0x2d0>)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	089b      	lsrs	r3, r3, #2
 800202a:	3302      	adds	r3, #2
 800202c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	220f      	movs	r2, #15
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800204e:	d013      	beq.n	8002078 <HAL_GPIO_Init+0x1e0>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a46      	ldr	r2, [pc, #280]	; (800216c <HAL_GPIO_Init+0x2d4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00d      	beq.n	8002074 <HAL_GPIO_Init+0x1dc>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a45      	ldr	r2, [pc, #276]	; (8002170 <HAL_GPIO_Init+0x2d8>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d007      	beq.n	8002070 <HAL_GPIO_Init+0x1d8>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a44      	ldr	r2, [pc, #272]	; (8002174 <HAL_GPIO_Init+0x2dc>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d101      	bne.n	800206c <HAL_GPIO_Init+0x1d4>
 8002068:	2303      	movs	r3, #3
 800206a:	e006      	b.n	800207a <HAL_GPIO_Init+0x1e2>
 800206c:	2307      	movs	r3, #7
 800206e:	e004      	b.n	800207a <HAL_GPIO_Init+0x1e2>
 8002070:	2302      	movs	r3, #2
 8002072:	e002      	b.n	800207a <HAL_GPIO_Init+0x1e2>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_GPIO_Init+0x1e2>
 8002078:	2300      	movs	r3, #0
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	f002 0203 	and.w	r2, r2, #3
 8002080:	0092      	lsls	r2, r2, #2
 8002082:	4093      	lsls	r3, r2
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800208a:	4937      	ldr	r1, [pc, #220]	; (8002168 <HAL_GPIO_Init+0x2d0>)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002098:	4b37      	ldr	r3, [pc, #220]	; (8002178 <HAL_GPIO_Init+0x2e0>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020bc:	4a2e      	ldr	r2, [pc, #184]	; (8002178 <HAL_GPIO_Init+0x2e0>)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <HAL_GPIO_Init+0x2e0>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020e6:	4a24      	ldr	r2, [pc, #144]	; (8002178 <HAL_GPIO_Init+0x2e0>)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020ec:	4b22      	ldr	r3, [pc, #136]	; (8002178 <HAL_GPIO_Init+0x2e0>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002110:	4a19      	ldr	r2, [pc, #100]	; (8002178 <HAL_GPIO_Init+0x2e0>)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <HAL_GPIO_Init+0x2e0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	43db      	mvns	r3, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800213a:	4a0f      	ldr	r2, [pc, #60]	; (8002178 <HAL_GPIO_Init+0x2e0>)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3301      	adds	r3, #1
 8002144:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	fa22 f303 	lsr.w	r3, r2, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	f47f aea9 	bne.w	8001ea8 <HAL_GPIO_Init+0x10>
  }
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40021000 	.word	0x40021000
 8002168:	40010000 	.word	0x40010000
 800216c:	48000400 	.word	0x48000400
 8002170:	48000800 	.word	0x48000800
 8002174:	48000c00 	.word	0x48000c00
 8002178:	40010400 	.word	0x40010400

0800217c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4013      	ands	r3, r2
 8002194:	041a      	lsls	r2, r3, #16
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	43d9      	mvns	r1, r3
 800219a:	887b      	ldrh	r3, [r7, #2]
 800219c:	400b      	ands	r3, r1
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e08d      	b.n	80022de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff fac4 	bl	8001764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2224      	movs	r2, #36	; 0x24
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002200:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002210:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d107      	bne.n	800222a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	e006      	b.n	8002238 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002236:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d108      	bne.n	8002252 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	e007      	b.n	8002262 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002260:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002274:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002284:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69d9      	ldr	r1, [r3, #28]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1a      	ldr	r2, [r3, #32]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0201 	orr.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2220      	movs	r2, #32
 80022ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	461a      	mov	r2, r3
 80022f4:	460b      	mov	r3, r1
 80022f6:	817b      	strh	r3, [r7, #10]
 80022f8:	4613      	mov	r3, r2
 80022fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b20      	cmp	r3, #32
 8002306:	f040 80fd 	bne.w	8002504 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_I2C_Master_Transmit+0x30>
 8002314:	2302      	movs	r3, #2
 8002316:	e0f6      	b.n	8002506 <HAL_I2C_Master_Transmit+0x21e>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002320:	f7ff fca4 	bl	8001c6c <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	2319      	movs	r3, #25
 800232c:	2201      	movs	r2, #1
 800232e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fce0 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e0e1      	b.n	8002506 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2221      	movs	r2, #33	; 0x21
 8002346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2210      	movs	r2, #16
 800234e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	893a      	ldrh	r2, [r7, #8]
 8002362:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	2bff      	cmp	r3, #255	; 0xff
 8002372:	d906      	bls.n	8002382 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	22ff      	movs	r2, #255	; 0xff
 8002378:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800237a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	e007      	b.n	8002392 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800238c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002390:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002396:	2b00      	cmp	r3, #0
 8002398:	d024      	beq.n	80023e4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	781a      	ldrb	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	3301      	adds	r3, #1
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	8979      	ldrh	r1, [r7, #10]
 80023d6:	4b4e      	ldr	r3, [pc, #312]	; (8002510 <HAL_I2C_Master_Transmit+0x228>)
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 fec7 	bl	8003170 <I2C_TransferConfig>
 80023e2:	e066      	b.n	80024b2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	8979      	ldrh	r1, [r7, #10]
 80023ec:	4b48      	ldr	r3, [pc, #288]	; (8002510 <HAL_I2C_Master_Transmit+0x228>)
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 febc 	bl	8003170 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80023f8:	e05b      	b.n	80024b2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	6a39      	ldr	r1, [r7, #32]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 fcc9 	bl	8002d96 <I2C_WaitOnTXISFlagUntilTimeout>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e07b      	b.n	8002506 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	781a      	ldrb	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002428:	b29b      	uxth	r3, r3
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d034      	beq.n	80024b2 <HAL_I2C_Master_Transmit+0x1ca>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244c:	2b00      	cmp	r3, #0
 800244e:	d130      	bne.n	80024b2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	2200      	movs	r2, #0
 8002458:	2180      	movs	r1, #128	; 0x80
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fc4c 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e04d      	b.n	8002506 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246e:	b29b      	uxth	r3, r3
 8002470:	2bff      	cmp	r3, #255	; 0xff
 8002472:	d90e      	bls.n	8002492 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	22ff      	movs	r2, #255	; 0xff
 8002478:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247e:	b2da      	uxtb	r2, r3
 8002480:	8979      	ldrh	r1, [r7, #10]
 8002482:	2300      	movs	r3, #0
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 fe70 	bl	8003170 <I2C_TransferConfig>
 8002490:	e00f      	b.n	80024b2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	8979      	ldrh	r1, [r7, #10]
 80024a4:	2300      	movs	r3, #0
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 fe5f 	bl	8003170 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d19e      	bne.n	80023fa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	6a39      	ldr	r1, [r7, #32]
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 fcaf 	bl	8002e24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e01a      	b.n	8002506 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2220      	movs	r2, #32
 80024d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6859      	ldr	r1, [r3, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <HAL_I2C_Master_Transmit+0x22c>)
 80024e4:	400b      	ands	r3, r1
 80024e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	e000      	b.n	8002506 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002504:	2302      	movs	r3, #2
  }
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	80002000 	.word	0x80002000
 8002514:	fe00e800 	.word	0xfe00e800

08002518 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af02      	add	r7, sp, #8
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	461a      	mov	r2, r3
 8002524:	460b      	mov	r3, r1
 8002526:	817b      	strh	r3, [r7, #10]
 8002528:	4613      	mov	r3, r2
 800252a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b20      	cmp	r3, #32
 8002536:	f040 80db 	bne.w	80026f0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_I2C_Master_Receive+0x30>
 8002544:	2302      	movs	r3, #2
 8002546:	e0d4      	b.n	80026f2 <HAL_I2C_Master_Receive+0x1da>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002550:	f7ff fb8c 	bl	8001c6c <HAL_GetTick>
 8002554:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	2319      	movs	r3, #25
 800255c:	2201      	movs	r2, #1
 800255e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 fbc8 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0bf      	b.n	80026f2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2222      	movs	r2, #34	; 0x22
 8002576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2210      	movs	r2, #16
 800257e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	893a      	ldrh	r2, [r7, #8]
 8002592:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2bff      	cmp	r3, #255	; 0xff
 80025a2:	d90e      	bls.n	80025c2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	22ff      	movs	r2, #255	; 0xff
 80025a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	8979      	ldrh	r1, [r7, #10]
 80025b2:	4b52      	ldr	r3, [pc, #328]	; (80026fc <HAL_I2C_Master_Receive+0x1e4>)
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 fdd8 	bl	8003170 <I2C_TransferConfig>
 80025c0:	e06d      	b.n	800269e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	8979      	ldrh	r1, [r7, #10]
 80025d4:	4b49      	ldr	r3, [pc, #292]	; (80026fc <HAL_I2C_Master_Receive+0x1e4>)
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 fdc7 	bl	8003170 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80025e2:	e05c      	b.n	800269e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	6a39      	ldr	r1, [r7, #32]
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 fc5f 	bl	8002eac <I2C_WaitOnRXNEFlagUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e07c      	b.n	80026f2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262e:	b29b      	uxth	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d034      	beq.n	800269e <HAL_I2C_Master_Receive+0x186>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	2b00      	cmp	r3, #0
 800263a:	d130      	bne.n	800269e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	2200      	movs	r2, #0
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fb56 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e04d      	b.n	80026f2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	2bff      	cmp	r3, #255	; 0xff
 800265e:	d90e      	bls.n	800267e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	22ff      	movs	r2, #255	; 0xff
 8002664:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266a:	b2da      	uxtb	r2, r3
 800266c:	8979      	ldrh	r1, [r7, #10]
 800266e:	2300      	movs	r3, #0
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fd7a 	bl	8003170 <I2C_TransferConfig>
 800267c:	e00f      	b.n	800269e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	b2da      	uxtb	r2, r3
 800268e:	8979      	ldrh	r1, [r7, #10]
 8002690:	2300      	movs	r3, #0
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fd69 	bl	8003170 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d19d      	bne.n	80025e4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	6a39      	ldr	r1, [r7, #32]
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fbb9 	bl	8002e24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e01a      	b.n	80026f2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2220      	movs	r2, #32
 80026c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6859      	ldr	r1, [r3, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_I2C_Master_Receive+0x1e8>)
 80026d0:	400b      	ands	r3, r1
 80026d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e000      	b.n	80026f2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80026f0:	2302      	movs	r3, #2
  }
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	80002400 	.word	0x80002400
 8002700:	fe00e800 	.word	0xfe00e800

08002704 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af02      	add	r7, sp, #8
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	4608      	mov	r0, r1
 800270e:	4611      	mov	r1, r2
 8002710:	461a      	mov	r2, r3
 8002712:	4603      	mov	r3, r0
 8002714:	817b      	strh	r3, [r7, #10]
 8002716:	460b      	mov	r3, r1
 8002718:	813b      	strh	r3, [r7, #8]
 800271a:	4613      	mov	r3, r2
 800271c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b20      	cmp	r3, #32
 8002728:	f040 80f9 	bne.w	800291e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <HAL_I2C_Mem_Write+0x34>
 8002732:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002734:	2b00      	cmp	r3, #0
 8002736:	d105      	bne.n	8002744 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800273e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0ed      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_I2C_Mem_Write+0x4e>
 800274e:	2302      	movs	r3, #2
 8002750:	e0e6      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800275a:	f7ff fa87 	bl	8001c6c <HAL_GetTick>
 800275e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2319      	movs	r3, #25
 8002766:	2201      	movs	r2, #1
 8002768:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 fac3 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0d1      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2221      	movs	r2, #33	; 0x21
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2240      	movs	r2, #64	; 0x40
 8002788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a3a      	ldr	r2, [r7, #32]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800279c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027a4:	88f8      	ldrh	r0, [r7, #6]
 80027a6:	893a      	ldrh	r2, [r7, #8]
 80027a8:	8979      	ldrh	r1, [r7, #10]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	4603      	mov	r3, r0
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f9d3 	bl	8002b60 <I2C_RequestMemoryWrite>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0a9      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2bff      	cmp	r3, #255	; 0xff
 80027d4:	d90e      	bls.n	80027f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	22ff      	movs	r2, #255	; 0xff
 80027da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	8979      	ldrh	r1, [r7, #10]
 80027e4:	2300      	movs	r3, #0
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fcbf 	bl	8003170 <I2C_TransferConfig>
 80027f2:	e00f      	b.n	8002814 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002802:	b2da      	uxtb	r2, r3
 8002804:	8979      	ldrh	r1, [r7, #10]
 8002806:	2300      	movs	r3, #0
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fcae 	bl	8003170 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fabc 	bl	8002d96 <I2C_WaitOnTXISFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e07b      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d034      	beq.n	80028cc <HAL_I2C_Mem_Write+0x1c8>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	2b00      	cmp	r3, #0
 8002868:	d130      	bne.n	80028cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	2200      	movs	r2, #0
 8002872:	2180      	movs	r1, #128	; 0x80
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fa3f 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e04d      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002888:	b29b      	uxth	r3, r3
 800288a:	2bff      	cmp	r3, #255	; 0xff
 800288c:	d90e      	bls.n	80028ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	22ff      	movs	r2, #255	; 0xff
 8002892:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	b2da      	uxtb	r2, r3
 800289a:	8979      	ldrh	r1, [r7, #10]
 800289c:	2300      	movs	r3, #0
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 fc63 	bl	8003170 <I2C_TransferConfig>
 80028aa:	e00f      	b.n	80028cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	8979      	ldrh	r1, [r7, #10]
 80028be:	2300      	movs	r3, #0
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fc52 	bl	8003170 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d19e      	bne.n	8002814 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 faa2 	bl	8002e24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e01a      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2220      	movs	r2, #32
 80028f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_I2C_Mem_Write+0x224>)
 80028fe:	400b      	ands	r3, r1
 8002900:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	e000      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800291e:	2302      	movs	r3, #2
  }
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	fe00e800 	.word	0xfe00e800

0800292c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	4608      	mov	r0, r1
 8002936:	4611      	mov	r1, r2
 8002938:	461a      	mov	r2, r3
 800293a:	4603      	mov	r3, r0
 800293c:	817b      	strh	r3, [r7, #10]
 800293e:	460b      	mov	r3, r1
 8002940:	813b      	strh	r3, [r7, #8]
 8002942:	4613      	mov	r3, r2
 8002944:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b20      	cmp	r3, #32
 8002950:	f040 80fd 	bne.w	8002b4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <HAL_I2C_Mem_Read+0x34>
 800295a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002966:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0f1      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_I2C_Mem_Read+0x4e>
 8002976:	2302      	movs	r3, #2
 8002978:	e0ea      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002982:	f7ff f973 	bl	8001c6c <HAL_GetTick>
 8002986:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2319      	movs	r3, #25
 800298e:	2201      	movs	r2, #1
 8002990:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 f9af 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0d5      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2222      	movs	r2, #34	; 0x22
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2240      	movs	r2, #64	; 0x40
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a3a      	ldr	r2, [r7, #32]
 80029be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029cc:	88f8      	ldrh	r0, [r7, #6]
 80029ce:	893a      	ldrh	r2, [r7, #8]
 80029d0:	8979      	ldrh	r1, [r7, #10]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	4603      	mov	r3, r0
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f913 	bl	8002c08 <I2C_RequestMemoryRead>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0ad      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2bff      	cmp	r3, #255	; 0xff
 80029fc:	d90e      	bls.n	8002a1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	22ff      	movs	r2, #255	; 0xff
 8002a02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	8979      	ldrh	r1, [r7, #10]
 8002a0c:	4b52      	ldr	r3, [pc, #328]	; (8002b58 <HAL_I2C_Mem_Read+0x22c>)
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fbab 	bl	8003170 <I2C_TransferConfig>
 8002a1a:	e00f      	b.n	8002a3c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	8979      	ldrh	r1, [r7, #10]
 8002a2e:	4b4a      	ldr	r3, [pc, #296]	; (8002b58 <HAL_I2C_Mem_Read+0x22c>)
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 fb9a 	bl	8003170 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a42:	2200      	movs	r2, #0
 8002a44:	2104      	movs	r1, #4
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f956 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e07c      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d034      	beq.n	8002afc <HAL_I2C_Mem_Read+0x1d0>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d130      	bne.n	8002afc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2180      	movs	r1, #128	; 0x80
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f927 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e04d      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2bff      	cmp	r3, #255	; 0xff
 8002abc:	d90e      	bls.n	8002adc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	22ff      	movs	r2, #255	; 0xff
 8002ac2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	8979      	ldrh	r1, [r7, #10]
 8002acc:	2300      	movs	r3, #0
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fb4b 	bl	8003170 <I2C_TransferConfig>
 8002ada:	e00f      	b.n	8002afc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	8979      	ldrh	r1, [r7, #10]
 8002aee:	2300      	movs	r3, #0
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fb3a 	bl	8003170 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d19a      	bne.n	8002a3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f98a 	bl	8002e24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e01a      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_I2C_Mem_Read+0x230>)
 8002b2e:	400b      	ands	r3, r1
 8002b30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e000      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
  }
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	80002400 	.word	0x80002400
 8002b5c:	fe00e800 	.word	0xfe00e800

08002b60 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	4608      	mov	r0, r1
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	817b      	strh	r3, [r7, #10]
 8002b72:	460b      	mov	r3, r1
 8002b74:	813b      	strh	r3, [r7, #8]
 8002b76:	4613      	mov	r3, r2
 8002b78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	8979      	ldrh	r1, [r7, #10]
 8002b80:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <I2C_RequestMemoryWrite+0xa4>)
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 faf1 	bl	8003170 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	69b9      	ldr	r1, [r7, #24]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f8ff 	bl	8002d96 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e02c      	b.n	8002bfc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d105      	bne.n	8002bb4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ba8:	893b      	ldrh	r3, [r7, #8]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	629a      	str	r2, [r3, #40]	; 0x28
 8002bb2:	e015      	b.n	8002be0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bb4:	893b      	ldrh	r3, [r7, #8]
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bc2:	69fa      	ldr	r2, [r7, #28]
 8002bc4:	69b9      	ldr	r1, [r7, #24]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f8e5 	bl	8002d96 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e012      	b.n	8002bfc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd6:	893b      	ldrh	r3, [r7, #8]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2200      	movs	r2, #0
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f884 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	80002000 	.word	0x80002000

08002c08 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	4608      	mov	r0, r1
 8002c12:	4611      	mov	r1, r2
 8002c14:	461a      	mov	r2, r3
 8002c16:	4603      	mov	r3, r0
 8002c18:	817b      	strh	r3, [r7, #10]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	813b      	strh	r3, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	8979      	ldrh	r1, [r7, #10]
 8002c28:	4b20      	ldr	r3, [pc, #128]	; (8002cac <I2C_RequestMemoryRead+0xa4>)
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fa9e 	bl	8003170 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c34:	69fa      	ldr	r2, [r7, #28]
 8002c36:	69b9      	ldr	r1, [r7, #24]
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f8ac 	bl	8002d96 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e02c      	b.n	8002ca2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d105      	bne.n	8002c5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c4e:	893b      	ldrh	r3, [r7, #8]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
 8002c58:	e015      	b.n	8002c86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c5a:	893b      	ldrh	r3, [r7, #8]
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	69b9      	ldr	r1, [r7, #24]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f892 	bl	8002d96 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e012      	b.n	8002ca2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c7c:	893b      	ldrh	r3, [r7, #8]
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2140      	movs	r1, #64	; 0x40
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f831 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	80002000 	.word	0x80002000

08002cb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d103      	bne.n	8002cce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d007      	beq.n	8002cec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	619a      	str	r2, [r3, #24]
  }
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	4613      	mov	r3, r2
 8002d06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d08:	e031      	b.n	8002d6e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d02d      	beq.n	8002d6e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d12:	f7fe ffab 	bl	8001c6c <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d302      	bcc.n	8002d28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d122      	bne.n	8002d6e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699a      	ldr	r2, [r3, #24]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	4013      	ands	r3, r2
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	bf0c      	ite	eq
 8002d38:	2301      	moveq	r3, #1
 8002d3a:	2300      	movne	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	461a      	mov	r2, r3
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d113      	bne.n	8002d6e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f043 0220 	orr.w	r2, r3, #32
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00f      	b.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4013      	ands	r3, r2
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	bf0c      	ite	eq
 8002d7e:	2301      	moveq	r3, #1
 8002d80:	2300      	movne	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d0be      	beq.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002da2:	e033      	b.n	8002e0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f901 	bl	8002fb0 <I2C_IsErrorOccurred>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e031      	b.n	8002e1c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbe:	d025      	beq.n	8002e0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc0:	f7fe ff54 	bl	8001c6c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d302      	bcc.n	8002dd6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d11a      	bne.n	8002e0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d013      	beq.n	8002e0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e007      	b.n	8002e1c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d1c4      	bne.n	8002da4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e30:	e02f      	b.n	8002e92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f8ba 	bl	8002fb0 <I2C_IsErrorOccurred>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e02d      	b.n	8002ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e46:	f7fe ff11 	bl	8001c6c <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d302      	bcc.n	8002e5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d11a      	bne.n	8002e92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d013      	beq.n	8002e92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	f043 0220 	orr.w	r2, r3, #32
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e007      	b.n	8002ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d1c8      	bne.n	8002e32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eb8:	e06b      	b.n	8002f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f876 	bl	8002fb0 <I2C_IsErrorOccurred>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e069      	b.n	8002fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d138      	bne.n	8002f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d105      	bne.n	8002ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e055      	b.n	8002fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	d107      	bne.n	8002f14 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2210      	movs	r2, #16
 8002f0a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2204      	movs	r2, #4
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
 8002f12:	e002      	b.n	8002f1a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002f2e:	400b      	ands	r3, r1
 8002f30:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e029      	b.n	8002fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4e:	f7fe fe8d 	bl	8001c6c <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d302      	bcc.n	8002f64 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d116      	bne.n	8002f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d00f      	beq.n	8002f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	f043 0220 	orr.w	r2, r3, #32
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e007      	b.n	8002fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d18c      	bne.n	8002eba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	fe00e800 	.word	0xfe00e800

08002fb0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	; 0x28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d068      	beq.n	80030ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fe4:	e049      	b.n	800307a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d045      	beq.n	800307a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fee:	f7fe fe3d 	bl	8001c6c <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d302      	bcc.n	8003004 <I2C_IsErrorOccurred+0x54>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d13a      	bne.n	800307a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003016:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003026:	d121      	bne.n	800306c <I2C_IsErrorOccurred+0xbc>
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800302e:	d01d      	beq.n	800306c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	2b20      	cmp	r3, #32
 8003034:	d01a      	beq.n	800306c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003044:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003046:	f7fe fe11 	bl	8001c6c <HAL_GetTick>
 800304a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800304c:	e00e      	b.n	800306c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800304e:	f7fe fe0d 	bl	8001c6c <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b19      	cmp	r3, #25
 800305a:	d907      	bls.n	800306c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	f043 0320 	orr.w	r3, r3, #32
 8003062:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800306a:	e006      	b.n	800307a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b20      	cmp	r3, #32
 8003078:	d1e9      	bne.n	800304e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b20      	cmp	r3, #32
 8003086:	d003      	beq.n	8003090 <I2C_IsErrorOccurred+0xe0>
 8003088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0aa      	beq.n	8002fe6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003094:	2b00      	cmp	r3, #0
 8003096:	d103      	bne.n	80030a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2220      	movs	r2, #32
 800309e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	f043 0304 	orr.w	r3, r3, #4
 80030a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00b      	beq.n	80030d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00b      	beq.n	80030fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	f043 0308 	orr.w	r3, r3, #8
 80030e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00b      	beq.n	800311c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	f043 0302 	orr.w	r3, r3, #2
 800310a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003114:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800311c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003120:	2b00      	cmp	r3, #0
 8003122:	d01c      	beq.n	800315e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f7ff fdc3 	bl	8002cb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b0d      	ldr	r3, [pc, #52]	; (800316c <I2C_IsErrorOccurred+0x1bc>)
 8003136:	400b      	ands	r3, r1
 8003138:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	431a      	orrs	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800315e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003162:	4618      	mov	r0, r3
 8003164:	3728      	adds	r7, #40	; 0x28
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	fe00e800 	.word	0xfe00e800

08003170 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	817b      	strh	r3, [r7, #10]
 800317e:	4613      	mov	r3, r2
 8003180:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003182:	897b      	ldrh	r3, [r7, #10]
 8003184:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003188:	7a7b      	ldrb	r3, [r7, #9]
 800318a:	041b      	lsls	r3, r3, #16
 800318c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003190:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	4313      	orrs	r3, r2
 800319a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800319e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	0d5b      	lsrs	r3, r3, #21
 80031aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031ae:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <I2C_TransferConfig+0x60>)
 80031b0:	430b      	orrs	r3, r1
 80031b2:	43db      	mvns	r3, r3
 80031b4:	ea02 0103 	and.w	r1, r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	03ff63ff 	.word	0x03ff63ff

080031d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d138      	bne.n	800325c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e032      	b.n	800325e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2224      	movs	r2, #36	; 0x24
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003226:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6819      	ldr	r1, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	e000      	b.n	800325e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800325c:	2302      	movs	r3, #2
  }
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800326a:	b480      	push	{r7}
 800326c:	b085      	sub	sp, #20
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b20      	cmp	r3, #32
 800327e:	d139      	bne.n	80032f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800328a:	2302      	movs	r3, #2
 800328c:	e033      	b.n	80032f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2224      	movs	r2, #36	; 0x24
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0201 	bic.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	e000      	b.n	80032f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032f4:	2302      	movs	r3, #2
  }
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <HAL_PWREx_GetVoltageRange+0x18>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003310:	4618      	mov	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40007000 	.word	0x40007000

08003320 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800332e:	d130      	bne.n	8003392 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003330:	4b23      	ldr	r3, [pc, #140]	; (80033c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800333c:	d038      	beq.n	80033b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800333e:	4b20      	ldr	r3, [pc, #128]	; (80033c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003346:	4a1e      	ldr	r2, [pc, #120]	; (80033c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003348:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800334c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800334e:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2232      	movs	r2, #50	; 0x32
 8003354:	fb02 f303 	mul.w	r3, r2, r3
 8003358:	4a1b      	ldr	r2, [pc, #108]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	0c9b      	lsrs	r3, r3, #18
 8003360:	3301      	adds	r3, #1
 8003362:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003364:	e002      	b.n	800336c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	3b01      	subs	r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800336c:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003378:	d102      	bne.n	8003380 <HAL_PWREx_ControlVoltageScaling+0x60>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1f2      	bne.n	8003366 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003380:	4b0f      	ldr	r3, [pc, #60]	; (80033c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338c:	d110      	bne.n	80033b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e00f      	b.n	80033b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003392:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800339a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339e:	d007      	beq.n	80033b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033a0:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033a8:	4a05      	ldr	r2, [pc, #20]	; (80033c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40007000 	.word	0x40007000
 80033c4:	20000000 	.word	0x20000000
 80033c8:	431bde83 	.word	0x431bde83

080033cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	; 0x28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f000 bc4f 	b.w	8003c7e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e0:	4b97      	ldr	r3, [pc, #604]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 030c 	and.w	r3, r3, #12
 80033e8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033ea:	4b95      	ldr	r3, [pc, #596]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 80e6 	beq.w	80035ce <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d007      	beq.n	8003418 <HAL_RCC_OscConfig+0x4c>
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	2b0c      	cmp	r3, #12
 800340c:	f040 808d 	bne.w	800352a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	2b01      	cmp	r3, #1
 8003414:	f040 8089 	bne.w	800352a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003418:	4b89      	ldr	r3, [pc, #548]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d006      	beq.n	8003432 <HAL_RCC_OscConfig+0x66>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	f000 bc26 	b.w	8003c7e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003436:	4b82      	ldr	r3, [pc, #520]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d004      	beq.n	800344c <HAL_RCC_OscConfig+0x80>
 8003442:	4b7f      	ldr	r3, [pc, #508]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800344a:	e005      	b.n	8003458 <HAL_RCC_OscConfig+0x8c>
 800344c:	4b7c      	ldr	r3, [pc, #496]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 800344e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003458:	4293      	cmp	r3, r2
 800345a:	d224      	bcs.n	80034a6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fdd9 	bl	8004018 <RCC_SetFlashLatencyFromMSIRange>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	f000 bc06 	b.w	8003c7e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003472:	4b73      	ldr	r3, [pc, #460]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a72      	ldr	r2, [pc, #456]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 8003478:	f043 0308 	orr.w	r3, r3, #8
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	4b70      	ldr	r3, [pc, #448]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	496d      	ldr	r1, [pc, #436]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 800348c:	4313      	orrs	r3, r2
 800348e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003490:	4b6b      	ldr	r3, [pc, #428]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	4968      	ldr	r1, [pc, #416]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
 80034a4:	e025      	b.n	80034f2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034a6:	4b66      	ldr	r3, [pc, #408]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a65      	ldr	r2, [pc, #404]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 80034ac:	f043 0308 	orr.w	r3, r3, #8
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	4b63      	ldr	r3, [pc, #396]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	4960      	ldr	r1, [pc, #384]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034c4:	4b5e      	ldr	r3, [pc, #376]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	495b      	ldr	r1, [pc, #364]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fd98 	bl	8004018 <RCC_SetFlashLatencyFromMSIRange>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e3c5      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034f2:	f000 fccd 	bl	8003e90 <HAL_RCC_GetSysClockFreq>
 80034f6:	4602      	mov	r2, r0
 80034f8:	4b51      	ldr	r3, [pc, #324]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	4950      	ldr	r1, [pc, #320]	; (8003644 <HAL_RCC_OscConfig+0x278>)
 8003504:	5ccb      	ldrb	r3, [r1, r3]
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	fa22 f303 	lsr.w	r3, r2, r3
 800350e:	4a4e      	ldr	r2, [pc, #312]	; (8003648 <HAL_RCC_OscConfig+0x27c>)
 8003510:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003512:	4b4e      	ldr	r3, [pc, #312]	; (800364c <HAL_RCC_OscConfig+0x280>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe fb58 	bl	8001bcc <HAL_InitTick>
 800351c:	4603      	mov	r3, r0
 800351e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003520:	7dfb      	ldrb	r3, [r7, #23]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d052      	beq.n	80035cc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003526:	7dfb      	ldrb	r3, [r7, #23]
 8003528:	e3a9      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d032      	beq.n	8003598 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003532:	4b43      	ldr	r3, [pc, #268]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a42      	ldr	r2, [pc, #264]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800353e:	f7fe fb95 	bl	8001c6c <HAL_GetTick>
 8003542:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003546:	f7fe fb91 	bl	8001c6c <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e392      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003558:	4b39      	ldr	r3, [pc, #228]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003564:	4b36      	ldr	r3, [pc, #216]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a35      	ldr	r2, [pc, #212]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 800356a:	f043 0308 	orr.w	r3, r3, #8
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	4b33      	ldr	r3, [pc, #204]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	4930      	ldr	r1, [pc, #192]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003582:	4b2f      	ldr	r3, [pc, #188]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	492b      	ldr	r1, [pc, #172]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 8003592:	4313      	orrs	r3, r2
 8003594:	604b      	str	r3, [r1, #4]
 8003596:	e01a      	b.n	80035ce <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003598:	4b29      	ldr	r3, [pc, #164]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a28      	ldr	r2, [pc, #160]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035a4:	f7fe fb62 	bl	8001c6c <HAL_GetTick>
 80035a8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035ac:	f7fe fb5e 	bl	8001c6c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e35f      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035be:	4b20      	ldr	r3, [pc, #128]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x1e0>
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d073      	beq.n	80036c2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d005      	beq.n	80035ec <HAL_RCC_OscConfig+0x220>
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	2b0c      	cmp	r3, #12
 80035e4:	d10e      	bne.n	8003604 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d10b      	bne.n	8003604 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	4b14      	ldr	r3, [pc, #80]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d063      	beq.n	80036c0 <HAL_RCC_OscConfig+0x2f4>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d15f      	bne.n	80036c0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e33c      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360c:	d106      	bne.n	800361c <HAL_RCC_OscConfig+0x250>
 800360e:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a0b      	ldr	r2, [pc, #44]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e025      	b.n	8003668 <HAL_RCC_OscConfig+0x29c>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003624:	d114      	bne.n	8003650 <HAL_RCC_OscConfig+0x284>
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a05      	ldr	r2, [pc, #20]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 800362c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	4b03      	ldr	r3, [pc, #12]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a02      	ldr	r2, [pc, #8]	; (8003640 <HAL_RCC_OscConfig+0x274>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e013      	b.n	8003668 <HAL_RCC_OscConfig+0x29c>
 8003640:	40021000 	.word	0x40021000
 8003644:	08007dc4 	.word	0x08007dc4
 8003648:	20000000 	.word	0x20000000
 800364c:	20000004 	.word	0x20000004
 8003650:	4b8f      	ldr	r3, [pc, #572]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a8e      	ldr	r2, [pc, #568]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 8003656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	4b8c      	ldr	r3, [pc, #560]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a8b      	ldr	r2, [pc, #556]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 8003662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d013      	beq.n	8003698 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fe fafc 	bl	8001c6c <HAL_GetTick>
 8003674:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003678:	f7fe faf8 	bl	8001c6c <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b64      	cmp	r3, #100	; 0x64
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e2f9      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800368a:	4b81      	ldr	r3, [pc, #516]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0x2ac>
 8003696:	e014      	b.n	80036c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fe fae8 	bl	8001c6c <HAL_GetTick>
 800369c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a0:	f7fe fae4 	bl	8001c6c <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e2e5      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036b2:	4b77      	ldr	r3, [pc, #476]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x2d4>
 80036be:	e000      	b.n	80036c2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d060      	beq.n	8003790 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_OscConfig+0x314>
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	2b0c      	cmp	r3, #12
 80036d8:	d119      	bne.n	800370e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d116      	bne.n	800370e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e0:	4b6b      	ldr	r3, [pc, #428]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_OscConfig+0x32c>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e2c2      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f8:	4b65      	ldr	r3, [pc, #404]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	061b      	lsls	r3, r3, #24
 8003706:	4962      	ldr	r1, [pc, #392]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800370c:	e040      	b.n	8003790 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d023      	beq.n	800375e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003716:	4b5e      	ldr	r3, [pc, #376]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a5d      	ldr	r2, [pc, #372]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 800371c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fe faa3 	bl	8001c6c <HAL_GetTick>
 8003726:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800372a:	f7fe fa9f 	bl	8001c6c <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e2a0      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800373c:	4b54      	ldr	r3, [pc, #336]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003748:	4b51      	ldr	r3, [pc, #324]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	061b      	lsls	r3, r3, #24
 8003756:	494e      	ldr	r1, [pc, #312]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
 800375c:	e018      	b.n	8003790 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800375e:	4b4c      	ldr	r3, [pc, #304]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a4b      	ldr	r2, [pc, #300]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 8003764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376a:	f7fe fa7f 	bl	8001c6c <HAL_GetTick>
 800376e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003772:	f7fe fa7b 	bl	8001c6c <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e27c      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003784:	4b42      	ldr	r3, [pc, #264]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f0      	bne.n	8003772 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8082 	beq.w	80038a2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d05f      	beq.n	8003866 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80037a6:	4b3a      	ldr	r3, [pc, #232]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ac:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d037      	beq.n	800382c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d006      	beq.n	80037d4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e254      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d01b      	beq.n	8003816 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80037de:	4b2c      	ldr	r3, [pc, #176]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e4:	4a2a      	ldr	r2, [pc, #168]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037ee:	f7fe fa3d 	bl	8001c6c <HAL_GetTick>
 80037f2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f6:	f7fe fa39 	bl	8001c6c <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b11      	cmp	r3, #17
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e23a      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003808:	4b21      	ldr	r3, [pc, #132]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 800380a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1ef      	bne.n	80037f6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003816:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800381c:	f023 0210 	bic.w	r2, r3, #16
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	491a      	ldr	r1, [pc, #104]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800382c:	4b18      	ldr	r3, [pc, #96]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 800382e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003832:	4a17      	ldr	r2, [pc, #92]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383c:	f7fe fa16 	bl	8001c6c <HAL_GetTick>
 8003840:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003844:	f7fe fa12 	bl	8001c6c <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b11      	cmp	r3, #17
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e213      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003856:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 8003858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ef      	beq.n	8003844 <HAL_RCC_OscConfig+0x478>
 8003864:	e01d      	b.n	80038a2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003866:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 8003868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386c:	4a08      	ldr	r2, [pc, #32]	; (8003890 <HAL_RCC_OscConfig+0x4c4>)
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003876:	f7fe f9f9 	bl	8001c6c <HAL_GetTick>
 800387a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800387e:	f7fe f9f5 	bl	8001c6c <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b11      	cmp	r3, #17
 800388a:	d903      	bls.n	8003894 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e1f6      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
 8003890:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003894:	4ba9      	ldr	r3, [pc, #676]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1ed      	bne.n	800387e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80bd 	beq.w	8003a2a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038b6:	4ba1      	ldr	r3, [pc, #644]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 80038b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10e      	bne.n	80038e0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c2:	4b9e      	ldr	r3, [pc, #632]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c6:	4a9d      	ldr	r2, [pc, #628]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 80038c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038cc:	6593      	str	r3, [r2, #88]	; 0x58
 80038ce:	4b9b      	ldr	r3, [pc, #620]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038da:	2301      	movs	r3, #1
 80038dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038e0:	4b97      	ldr	r3, [pc, #604]	; (8003b40 <HAL_RCC_OscConfig+0x774>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d118      	bne.n	800391e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ec:	4b94      	ldr	r3, [pc, #592]	; (8003b40 <HAL_RCC_OscConfig+0x774>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a93      	ldr	r2, [pc, #588]	; (8003b40 <HAL_RCC_OscConfig+0x774>)
 80038f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f8:	f7fe f9b8 	bl	8001c6c <HAL_GetTick>
 80038fc:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003900:	f7fe f9b4 	bl	8001c6c <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e1b5      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003912:	4b8b      	ldr	r3, [pc, #556]	; (8003b40 <HAL_RCC_OscConfig+0x774>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d02c      	beq.n	8003984 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800392a:	4b84      	ldr	r3, [pc, #528]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003930:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393c:	497f      	ldr	r1, [pc, #508]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d010      	beq.n	8003972 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003950:	4b7a      	ldr	r3, [pc, #488]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	4a79      	ldr	r2, [pc, #484]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003958:	f043 0304 	orr.w	r3, r3, #4
 800395c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003960:	4b76      	ldr	r3, [pc, #472]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003966:	4a75      	ldr	r2, [pc, #468]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003970:	e018      	b.n	80039a4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003972:	4b72      	ldr	r3, [pc, #456]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003978:	4a70      	ldr	r2, [pc, #448]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003982:	e00f      	b.n	80039a4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003984:	4b6d      	ldr	r3, [pc, #436]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398a:	4a6c      	ldr	r2, [pc, #432]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003994:	4b69      	ldr	r3, [pc, #420]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	4a68      	ldr	r2, [pc, #416]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 800399c:	f023 0304 	bic.w	r3, r3, #4
 80039a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d016      	beq.n	80039da <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ac:	f7fe f95e 	bl	8001c6c <HAL_GetTick>
 80039b0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b4:	f7fe f95a 	bl	8001c6c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e159      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ca:	4b5c      	ldr	r3, [pc, #368]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0ed      	beq.n	80039b4 <HAL_RCC_OscConfig+0x5e8>
 80039d8:	e01d      	b.n	8003a16 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039da:	f7fe f947 	bl	8001c6c <HAL_GetTick>
 80039de:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039e0:	e00a      	b.n	80039f8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e2:	f7fe f943 	bl	8001c6c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e142      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039f8:	4b50      	ldr	r3, [pc, #320]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1ed      	bne.n	80039e2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003a06:	4b4d      	ldr	r3, [pc, #308]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0c:	4a4b      	ldr	r2, [pc, #300]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d105      	bne.n	8003a2a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1e:	4b47      	ldr	r3, [pc, #284]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	4a46      	ldr	r2, [pc, #280]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d03c      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01c      	beq.n	8003a78 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a3e:	4b3f      	ldr	r3, [pc, #252]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a44:	4a3d      	ldr	r2, [pc, #244]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4e:	f7fe f90d 	bl	8001c6c <HAL_GetTick>
 8003a52:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a56:	f7fe f909 	bl	8001c6c <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e10a      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a68:	4b34      	ldr	r3, [pc, #208]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0ef      	beq.n	8003a56 <HAL_RCC_OscConfig+0x68a>
 8003a76:	e01b      	b.n	8003ab0 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a78:	4b30      	ldr	r3, [pc, #192]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a7e:	4a2f      	ldr	r2, [pc, #188]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003a80:	f023 0301 	bic.w	r3, r3, #1
 8003a84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a88:	f7fe f8f0 	bl	8001c6c <HAL_GetTick>
 8003a8c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a90:	f7fe f8ec 	bl	8001c6c <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e0ed      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003aa2:	4b26      	ldr	r3, [pc, #152]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1ef      	bne.n	8003a90 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80e1 	beq.w	8003c7c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	f040 80b5 	bne.w	8003c2e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ac4:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	f003 0203 	and.w	r2, r3, #3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d124      	bne.n	8003b22 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d11b      	bne.n	8003b22 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d113      	bne.n	8003b22 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	3b01      	subs	r3, #1
 8003b08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d109      	bne.n	8003b22 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	085b      	lsrs	r3, r3, #1
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d05f      	beq.n	8003be2 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	2b0c      	cmp	r3, #12
 8003b26:	d05a      	beq.n	8003bde <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a03      	ldr	r2, [pc, #12]	; (8003b3c <HAL_RCC_OscConfig+0x770>)
 8003b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b34:	f7fe f89a 	bl	8001c6c <HAL_GetTick>
 8003b38:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b3a:	e00c      	b.n	8003b56 <HAL_RCC_OscConfig+0x78a>
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fe f892 	bl	8001c6c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e093      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b56:	4b4c      	ldr	r3, [pc, #304]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b62:	4b49      	ldr	r3, [pc, #292]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	4b49      	ldr	r3, [pc, #292]	; (8003c8c <HAL_RCC_OscConfig+0x8c0>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b72:	3a01      	subs	r2, #1
 8003b74:	0112      	lsls	r2, r2, #4
 8003b76:	4311      	orrs	r1, r2
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b7c:	0212      	lsls	r2, r2, #8
 8003b7e:	4311      	orrs	r1, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b84:	0852      	lsrs	r2, r2, #1
 8003b86:	3a01      	subs	r2, #1
 8003b88:	0552      	lsls	r2, r2, #21
 8003b8a:	4311      	orrs	r1, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b90:	0852      	lsrs	r2, r2, #1
 8003b92:	3a01      	subs	r2, #1
 8003b94:	0652      	lsls	r2, r2, #25
 8003b96:	430a      	orrs	r2, r1
 8003b98:	493b      	ldr	r1, [pc, #236]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b9e:	4b3a      	ldr	r3, [pc, #232]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a39      	ldr	r2, [pc, #228]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003ba4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ba8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003baa:	4b37      	ldr	r3, [pc, #220]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	4a36      	ldr	r2, [pc, #216]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003bb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bb4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bb6:	f7fe f859 	bl	8001c6c <HAL_GetTick>
 8003bba:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bbe:	f7fe f855 	bl	8001c6c <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e056      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bd0:	4b2d      	ldr	r3, [pc, #180]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f0      	beq.n	8003bbe <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bdc:	e04e      	b.n	8003c7c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e04d      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be2:	4b29      	ldr	r3, [pc, #164]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d146      	bne.n	8003c7c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bee:	4b26      	ldr	r3, [pc, #152]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a25      	ldr	r2, [pc, #148]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003bf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bf8:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bfa:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	4a22      	ldr	r2, [pc, #136]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003c00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c04:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c06:	f7fe f831 	bl	8001c6c <HAL_GetTick>
 8003c0a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0e:	f7fe f82d 	bl	8001c6c <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e02e      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c20:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x842>
 8003c2c:	e026      	b.n	8003c7c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	2b0c      	cmp	r3, #12
 8003c32:	d021      	beq.n	8003c78 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c34:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a13      	ldr	r2, [pc, #76]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fe f814 	bl	8001c6c <HAL_GetTick>
 8003c44:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c48:	f7fe f810 	bl	8001c6c <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e011      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003c66:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	4a07      	ldr	r2, [pc, #28]	; (8003c88 <HAL_RCC_OscConfig+0x8bc>)
 8003c6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c70:	f023 0303 	bic.w	r3, r3, #3
 8003c74:	60d3      	str	r3, [r2, #12]
 8003c76:	e001      	b.n	8003c7c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3728      	adds	r7, #40	; 0x28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	f99f808c 	.word	0xf99f808c

08003c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0e7      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca4:	4b75      	ldr	r3, [pc, #468]	; (8003e7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d910      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb2:	4b72      	ldr	r3, [pc, #456]	; (8003e7c <HAL_RCC_ClockConfig+0x1ec>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f023 0207 	bic.w	r2, r3, #7
 8003cba:	4970      	ldr	r1, [pc, #448]	; (8003e7c <HAL_RCC_ClockConfig+0x1ec>)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b6e      	ldr	r3, [pc, #440]	; (8003e7c <HAL_RCC_ClockConfig+0x1ec>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0cf      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d010      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	4b66      	ldr	r3, [pc, #408]	; (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d908      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf0:	4b63      	ldr	r3, [pc, #396]	; (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	4960      	ldr	r1, [pc, #384]	; (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d04c      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d16:	4b5a      	ldr	r3, [pc, #360]	; (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d121      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e0a6      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d2e:	4b54      	ldr	r3, [pc, #336]	; (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d115      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e09a      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d107      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d46:	4b4e      	ldr	r3, [pc, #312]	; (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e08e      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d56:	4b4a      	ldr	r3, [pc, #296]	; (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e086      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d66:	4b46      	ldr	r3, [pc, #280]	; (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f023 0203 	bic.w	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4943      	ldr	r1, [pc, #268]	; (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d78:	f7fd ff78 	bl	8001c6c <HAL_GetTick>
 8003d7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7e:	e00a      	b.n	8003d96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d80:	f7fd ff74 	bl	8001c6c <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e06e      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d96:	4b3a      	ldr	r3, [pc, #232]	; (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 020c 	and.w	r2, r3, #12
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d1eb      	bne.n	8003d80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d010      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	4b31      	ldr	r3, [pc, #196]	; (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d208      	bcs.n	8003dd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc4:	4b2e      	ldr	r3, [pc, #184]	; (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	492b      	ldr	r1, [pc, #172]	; (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd6:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <HAL_RCC_ClockConfig+0x1ec>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d210      	bcs.n	8003e06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de4:	4b25      	ldr	r3, [pc, #148]	; (8003e7c <HAL_RCC_ClockConfig+0x1ec>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f023 0207 	bic.w	r2, r3, #7
 8003dec:	4923      	ldr	r1, [pc, #140]	; (8003e7c <HAL_RCC_ClockConfig+0x1ec>)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df4:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <HAL_RCC_ClockConfig+0x1ec>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d001      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e036      	b.n	8003e74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e12:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	4918      	ldr	r1, [pc, #96]	; (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d009      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e30:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4910      	ldr	r1, [pc, #64]	; (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e44:	f000 f824 	bl	8003e90 <HAL_RCC_GetSysClockFreq>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	4b0d      	ldr	r3, [pc, #52]	; (8003e80 <HAL_RCC_ClockConfig+0x1f0>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	091b      	lsrs	r3, r3, #4
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	490b      	ldr	r1, [pc, #44]	; (8003e84 <HAL_RCC_ClockConfig+0x1f4>)
 8003e56:	5ccb      	ldrb	r3, [r1, r3]
 8003e58:	f003 031f 	and.w	r3, r3, #31
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e60:	4a09      	ldr	r2, [pc, #36]	; (8003e88 <HAL_RCC_ClockConfig+0x1f8>)
 8003e62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e64:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <HAL_RCC_ClockConfig+0x1fc>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fd feaf 	bl	8001bcc <HAL_InitTick>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e72:	7afb      	ldrb	r3, [r7, #11]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40022000 	.word	0x40022000
 8003e80:	40021000 	.word	0x40021000
 8003e84:	08007dc4 	.word	0x08007dc4
 8003e88:	20000000 	.word	0x20000000
 8003e8c:	20000004 	.word	0x20000004

08003e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b089      	sub	sp, #36	; 0x24
 8003e94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e9e:	4b3e      	ldr	r3, [pc, #248]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
 8003ea6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ea8:	4b3b      	ldr	r3, [pc, #236]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0303 	and.w	r3, r3, #3
 8003eb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	2b0c      	cmp	r3, #12
 8003ebc:	d121      	bne.n	8003f02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d11e      	bne.n	8003f02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ec4:	4b34      	ldr	r3, [pc, #208]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d107      	bne.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ed0:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed6:	0a1b      	lsrs	r3, r3, #8
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	e005      	b.n	8003eec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ee0:	4b2d      	ldr	r3, [pc, #180]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003eec:	4a2b      	ldr	r2, [pc, #172]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ef4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10d      	bne.n	8003f18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f00:	e00a      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d102      	bne.n	8003f0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f0a:	61bb      	str	r3, [r7, #24]
 8003f0c:	e004      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d101      	bne.n	8003f18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f14:	4b23      	ldr	r3, [pc, #140]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b0c      	cmp	r3, #12
 8003f1c:	d134      	bne.n	8003f88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f1e:	4b1e      	ldr	r3, [pc, #120]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d003      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0xac>
 8003f34:	e005      	b.n	8003f42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f36:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f38:	617b      	str	r3, [r7, #20]
      break;
 8003f3a:	e005      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f3c:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f3e:	617b      	str	r3, [r7, #20]
      break;
 8003f40:	e002      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	617b      	str	r3, [r7, #20]
      break;
 8003f46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f48:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	3301      	adds	r3, #1
 8003f54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f56:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	0a1b      	lsrs	r3, r3, #8
 8003f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	fb03 f202 	mul.w	r2, r3, r2
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	0e5b      	lsrs	r3, r3, #25
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	3301      	adds	r3, #1
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f88:	69bb      	ldr	r3, [r7, #24]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3724      	adds	r7, #36	; 0x24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	08007ddc 	.word	0x08007ddc
 8003fa0:	00f42400 	.word	0x00f42400
 8003fa4:	007a1200 	.word	0x007a1200

08003fa8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000000 	.word	0x20000000

08003fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fc4:	f7ff fff0 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	0a1b      	lsrs	r3, r3, #8
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	4904      	ldr	r1, [pc, #16]	; (8003fe8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fd6:	5ccb      	ldrb	r3, [r1, r3]
 8003fd8:	f003 031f 	and.w	r3, r3, #31
 8003fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	08007dd4 	.word	0x08007dd4

08003fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ff0:	f7ff ffda 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	0adb      	lsrs	r3, r3, #11
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	4904      	ldr	r1, [pc, #16]	; (8004014 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004002:	5ccb      	ldrb	r3, [r1, r3]
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800400c:	4618      	mov	r0, r3
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40021000 	.word	0x40021000
 8004014:	08007dd4 	.word	0x08007dd4

08004018 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004020:	2300      	movs	r3, #0
 8004022:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004024:	4b2a      	ldr	r3, [pc, #168]	; (80040d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004030:	f7ff f968 	bl	8003304 <HAL_PWREx_GetVoltageRange>
 8004034:	6178      	str	r0, [r7, #20]
 8004036:	e014      	b.n	8004062 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004038:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800403a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403c:	4a24      	ldr	r2, [pc, #144]	; (80040d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800403e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004042:	6593      	str	r3, [r2, #88]	; 0x58
 8004044:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004050:	f7ff f958 	bl	8003304 <HAL_PWREx_GetVoltageRange>
 8004054:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004056:	4b1e      	ldr	r3, [pc, #120]	; (80040d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405a:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800405c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004060:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004068:	d10b      	bne.n	8004082 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b80      	cmp	r3, #128	; 0x80
 800406e:	d919      	bls.n	80040a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2ba0      	cmp	r3, #160	; 0xa0
 8004074:	d902      	bls.n	800407c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004076:	2302      	movs	r3, #2
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	e013      	b.n	80040a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800407c:	2301      	movs	r3, #1
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	e010      	b.n	80040a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b80      	cmp	r3, #128	; 0x80
 8004086:	d902      	bls.n	800408e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004088:	2303      	movs	r3, #3
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	e00a      	b.n	80040a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b80      	cmp	r3, #128	; 0x80
 8004092:	d102      	bne.n	800409a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004094:	2302      	movs	r3, #2
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	e004      	b.n	80040a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b70      	cmp	r3, #112	; 0x70
 800409e:	d101      	bne.n	80040a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040a0:	2301      	movs	r3, #1
 80040a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040a4:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f023 0207 	bic.w	r2, r3, #7
 80040ac:	4909      	ldr	r1, [pc, #36]	; (80040d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040b4:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d001      	beq.n	80040c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40022000 	.word	0x40022000

080040d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040e0:	2300      	movs	r3, #0
 80040e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040e4:	2300      	movs	r3, #0
 80040e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 809e 	beq.w	8004232 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f6:	2300      	movs	r3, #0
 80040f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040fa:	4b46      	ldr	r3, [pc, #280]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800410a:	2300      	movs	r3, #0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00d      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004110:	4b40      	ldr	r3, [pc, #256]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004114:	4a3f      	ldr	r2, [pc, #252]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411a:	6593      	str	r3, [r2, #88]	; 0x58
 800411c:	4b3d      	ldr	r3, [pc, #244]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800411e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004128:	2301      	movs	r3, #1
 800412a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800412c:	4b3a      	ldr	r3, [pc, #232]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a39      	ldr	r2, [pc, #228]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004136:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004138:	f7fd fd98 	bl	8001c6c <HAL_GetTick>
 800413c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800413e:	e009      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004140:	f7fd fd94 	bl	8001c6c <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d902      	bls.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	74fb      	strb	r3, [r7, #19]
        break;
 8004152:	e005      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004154:	4b30      	ldr	r3, [pc, #192]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0ef      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004160:	7cfb      	ldrb	r3, [r7, #19]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d15a      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004166:	4b2b      	ldr	r3, [pc, #172]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004170:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d01e      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	429a      	cmp	r2, r3
 8004180:	d019      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004182:	4b24      	ldr	r3, [pc, #144]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800418e:	4b21      	ldr	r3, [pc, #132]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004194:	4a1f      	ldr	r2, [pc, #124]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800419e:	4b1d      	ldr	r3, [pc, #116]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	4a1b      	ldr	r2, [pc, #108]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041ae:	4a19      	ldr	r2, [pc, #100]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d016      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7fd fd54 	bl	8001c6c <HAL_GetTick>
 80041c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041c6:	e00b      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c8:	f7fd fd50 	bl	8001c6c <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d902      	bls.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	74fb      	strb	r3, [r7, #19]
            break;
 80041de:	e006      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e0:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0ec      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80041ee:	7cfb      	ldrb	r3, [r7, #19]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10b      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041f4:	4b07      	ldr	r3, [pc, #28]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	4904      	ldr	r1, [pc, #16]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800420a:	e009      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800420c:	7cfb      	ldrb	r3, [r7, #19]
 800420e:	74bb      	strb	r3, [r7, #18]
 8004210:	e006      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004212:	bf00      	nop
 8004214:	40021000 	.word	0x40021000
 8004218:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004220:	7c7b      	ldrb	r3, [r7, #17]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d105      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004226:	4b6e      	ldr	r3, [pc, #440]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422a:	4a6d      	ldr	r2, [pc, #436]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800422c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004230:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800423e:	4b68      	ldr	r3, [pc, #416]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f023 0203 	bic.w	r2, r3, #3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4964      	ldr	r1, [pc, #400]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004260:	4b5f      	ldr	r3, [pc, #380]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f023 020c 	bic.w	r2, r3, #12
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	495c      	ldr	r1, [pc, #368]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004282:	4b57      	ldr	r3, [pc, #348]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4953      	ldr	r1, [pc, #332]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042a4:	4b4e      	ldr	r3, [pc, #312]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	494b      	ldr	r1, [pc, #300]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042c6:	4b46      	ldr	r3, [pc, #280]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	4942      	ldr	r1, [pc, #264]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042e8:	4b3d      	ldr	r3, [pc, #244]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	493a      	ldr	r1, [pc, #232]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800430a:	4b35      	ldr	r3, [pc, #212]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800430c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004310:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	4931      	ldr	r1, [pc, #196]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800432c:	4b2c      	ldr	r3, [pc, #176]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004332:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	4929      	ldr	r1, [pc, #164]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800434e:	4b24      	ldr	r3, [pc, #144]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004354:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	4920      	ldr	r1, [pc, #128]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d015      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004370:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	4918      	ldr	r1, [pc, #96]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800438e:	d105      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004390:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	4a12      	ldr	r2, [pc, #72]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800439a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d015      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043a8:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	490a      	ldr	r1, [pc, #40]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043c6:	d105      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4a04      	ldr	r2, [pc, #16]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000

080043e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e040      	b.n	8004478 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fd fa04 	bl	8001814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2224      	movs	r2, #36	; 0x24
 8004410:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fb64 	bl	8004af8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f907 	bl	8004644 <UART_SetConfig>
 8004436:	4603      	mov	r3, r0
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e01b      	b.n	8004478 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800444e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800445e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fbe3 	bl	8004c3c <UART_CheckIdleState>
 8004476:	4603      	mov	r3, r0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08a      	sub	sp, #40	; 0x28
 8004484:	af02      	add	r7, sp, #8
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	603b      	str	r3, [r7, #0]
 800448c:	4613      	mov	r3, r2
 800448e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004494:	2b20      	cmp	r3, #32
 8004496:	d178      	bne.n	800458a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <HAL_UART_Transmit+0x24>
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e071      	b.n	800458c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2221      	movs	r2, #33	; 0x21
 80044b4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044b6:	f7fd fbd9 	bl	8001c6c <HAL_GetTick>
 80044ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	88fa      	ldrh	r2, [r7, #6]
 80044c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	88fa      	ldrh	r2, [r7, #6]
 80044c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d4:	d108      	bne.n	80044e8 <HAL_UART_Transmit+0x68>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d104      	bne.n	80044e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	e003      	b.n	80044f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044f0:	e030      	b.n	8004554 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2200      	movs	r2, #0
 80044fa:	2180      	movs	r1, #128	; 0x80
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 fc45 	bl	8004d8c <UART_WaitOnFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d004      	beq.n	8004512 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e03c      	b.n	800458c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10b      	bne.n	8004530 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	881a      	ldrh	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004524:	b292      	uxth	r2, r2
 8004526:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	3302      	adds	r3, #2
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	e008      	b.n	8004542 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	781a      	ldrb	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	b292      	uxth	r2, r2
 800453a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	3301      	adds	r3, #1
 8004540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004548:	b29b      	uxth	r3, r3
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1c8      	bne.n	80044f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2200      	movs	r2, #0
 8004568:	2140      	movs	r1, #64	; 0x40
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 fc0e 	bl	8004d8c <UART_WaitOnFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d004      	beq.n	8004580 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2220      	movs	r2, #32
 800457a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e005      	b.n	800458c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e000      	b.n	800458c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800458a:	2302      	movs	r3, #2
  }
}
 800458c:	4618      	mov	r0, r3
 800458e:	3720      	adds	r7, #32
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	; 0x28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	4613      	mov	r3, r2
 80045a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d137      	bne.n	800461c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_UART_Receive_IT+0x24>
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e030      	b.n	800461e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a18      	ldr	r2, [pc, #96]	; (8004628 <HAL_UART_Receive_IT+0x94>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d01f      	beq.n	800460c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d018      	beq.n	800460c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	e853 3f00 	ldrex	r3, [r3]
 80045e6:	613b      	str	r3, [r7, #16]
   return(result);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	623b      	str	r3, [r7, #32]
 80045fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	69f9      	ldr	r1, [r7, #28]
 80045fe:	6a3a      	ldr	r2, [r7, #32]
 8004600:	e841 2300 	strex	r3, r2, [r1]
 8004604:	61bb      	str	r3, [r7, #24]
   return(result);
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1e6      	bne.n	80045da <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	461a      	mov	r2, r3
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 fc22 	bl	8004e5c <UART_Start_Receive_IT>
 8004618:	4603      	mov	r3, r0
 800461a:	e000      	b.n	800461e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800461c:	2302      	movs	r3, #2
  }
}
 800461e:	4618      	mov	r0, r3
 8004620:	3728      	adds	r7, #40	; 0x28
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40008000 	.word	0x40008000

0800462c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004648:	b08a      	sub	sp, #40	; 0x28
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	431a      	orrs	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	431a      	orrs	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	4313      	orrs	r3, r2
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	4b9e      	ldr	r3, [pc, #632]	; (80048ec <UART_SetConfig+0x2a8>)
 8004674:	4013      	ands	r3, r2
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800467c:	430b      	orrs	r3, r1
 800467e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a93      	ldr	r2, [pc, #588]	; (80048f0 <UART_SetConfig+0x2ac>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d004      	beq.n	80046b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ac:	4313      	orrs	r3, r2
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c0:	430a      	orrs	r2, r1
 80046c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a8a      	ldr	r2, [pc, #552]	; (80048f4 <UART_SetConfig+0x2b0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d126      	bne.n	800471c <UART_SetConfig+0xd8>
 80046ce:	4b8a      	ldr	r3, [pc, #552]	; (80048f8 <UART_SetConfig+0x2b4>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d81b      	bhi.n	8004714 <UART_SetConfig+0xd0>
 80046dc:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <UART_SetConfig+0xa0>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	08004705 	.word	0x08004705
 80046ec:	080046fd 	.word	0x080046fd
 80046f0:	0800470d 	.word	0x0800470d
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fa:	e0ab      	b.n	8004854 <UART_SetConfig+0x210>
 80046fc:	2302      	movs	r3, #2
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004702:	e0a7      	b.n	8004854 <UART_SetConfig+0x210>
 8004704:	2304      	movs	r3, #4
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470a:	e0a3      	b.n	8004854 <UART_SetConfig+0x210>
 800470c:	2308      	movs	r3, #8
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004712:	e09f      	b.n	8004854 <UART_SetConfig+0x210>
 8004714:	2310      	movs	r3, #16
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471a:	e09b      	b.n	8004854 <UART_SetConfig+0x210>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a76      	ldr	r2, [pc, #472]	; (80048fc <UART_SetConfig+0x2b8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d138      	bne.n	8004798 <UART_SetConfig+0x154>
 8004726:	4b74      	ldr	r3, [pc, #464]	; (80048f8 <UART_SetConfig+0x2b4>)
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472c:	f003 030c 	and.w	r3, r3, #12
 8004730:	2b0c      	cmp	r3, #12
 8004732:	d82d      	bhi.n	8004790 <UART_SetConfig+0x14c>
 8004734:	a201      	add	r2, pc, #4	; (adr r2, 800473c <UART_SetConfig+0xf8>)
 8004736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473a:	bf00      	nop
 800473c:	08004771 	.word	0x08004771
 8004740:	08004791 	.word	0x08004791
 8004744:	08004791 	.word	0x08004791
 8004748:	08004791 	.word	0x08004791
 800474c:	08004781 	.word	0x08004781
 8004750:	08004791 	.word	0x08004791
 8004754:	08004791 	.word	0x08004791
 8004758:	08004791 	.word	0x08004791
 800475c:	08004779 	.word	0x08004779
 8004760:	08004791 	.word	0x08004791
 8004764:	08004791 	.word	0x08004791
 8004768:	08004791 	.word	0x08004791
 800476c:	08004789 	.word	0x08004789
 8004770:	2300      	movs	r3, #0
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004776:	e06d      	b.n	8004854 <UART_SetConfig+0x210>
 8004778:	2302      	movs	r3, #2
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477e:	e069      	b.n	8004854 <UART_SetConfig+0x210>
 8004780:	2304      	movs	r3, #4
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004786:	e065      	b.n	8004854 <UART_SetConfig+0x210>
 8004788:	2308      	movs	r3, #8
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478e:	e061      	b.n	8004854 <UART_SetConfig+0x210>
 8004790:	2310      	movs	r3, #16
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	e05d      	b.n	8004854 <UART_SetConfig+0x210>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a58      	ldr	r2, [pc, #352]	; (8004900 <UART_SetConfig+0x2bc>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d125      	bne.n	80047ee <UART_SetConfig+0x1aa>
 80047a2:	4b55      	ldr	r3, [pc, #340]	; (80048f8 <UART_SetConfig+0x2b4>)
 80047a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047ac:	2b30      	cmp	r3, #48	; 0x30
 80047ae:	d016      	beq.n	80047de <UART_SetConfig+0x19a>
 80047b0:	2b30      	cmp	r3, #48	; 0x30
 80047b2:	d818      	bhi.n	80047e6 <UART_SetConfig+0x1a2>
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d00a      	beq.n	80047ce <UART_SetConfig+0x18a>
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d814      	bhi.n	80047e6 <UART_SetConfig+0x1a2>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <UART_SetConfig+0x182>
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d008      	beq.n	80047d6 <UART_SetConfig+0x192>
 80047c4:	e00f      	b.n	80047e6 <UART_SetConfig+0x1a2>
 80047c6:	2300      	movs	r3, #0
 80047c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047cc:	e042      	b.n	8004854 <UART_SetConfig+0x210>
 80047ce:	2302      	movs	r3, #2
 80047d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d4:	e03e      	b.n	8004854 <UART_SetConfig+0x210>
 80047d6:	2304      	movs	r3, #4
 80047d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047dc:	e03a      	b.n	8004854 <UART_SetConfig+0x210>
 80047de:	2308      	movs	r3, #8
 80047e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e4:	e036      	b.n	8004854 <UART_SetConfig+0x210>
 80047e6:	2310      	movs	r3, #16
 80047e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ec:	e032      	b.n	8004854 <UART_SetConfig+0x210>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a3f      	ldr	r2, [pc, #252]	; (80048f0 <UART_SetConfig+0x2ac>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d12a      	bne.n	800484e <UART_SetConfig+0x20a>
 80047f8:	4b3f      	ldr	r3, [pc, #252]	; (80048f8 <UART_SetConfig+0x2b4>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004802:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004806:	d01a      	beq.n	800483e <UART_SetConfig+0x1fa>
 8004808:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800480c:	d81b      	bhi.n	8004846 <UART_SetConfig+0x202>
 800480e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004812:	d00c      	beq.n	800482e <UART_SetConfig+0x1ea>
 8004814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004818:	d815      	bhi.n	8004846 <UART_SetConfig+0x202>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <UART_SetConfig+0x1e2>
 800481e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004822:	d008      	beq.n	8004836 <UART_SetConfig+0x1f2>
 8004824:	e00f      	b.n	8004846 <UART_SetConfig+0x202>
 8004826:	2300      	movs	r3, #0
 8004828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800482c:	e012      	b.n	8004854 <UART_SetConfig+0x210>
 800482e:	2302      	movs	r3, #2
 8004830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004834:	e00e      	b.n	8004854 <UART_SetConfig+0x210>
 8004836:	2304      	movs	r3, #4
 8004838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483c:	e00a      	b.n	8004854 <UART_SetConfig+0x210>
 800483e:	2308      	movs	r3, #8
 8004840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004844:	e006      	b.n	8004854 <UART_SetConfig+0x210>
 8004846:	2310      	movs	r3, #16
 8004848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484c:	e002      	b.n	8004854 <UART_SetConfig+0x210>
 800484e:	2310      	movs	r3, #16
 8004850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a25      	ldr	r2, [pc, #148]	; (80048f0 <UART_SetConfig+0x2ac>)
 800485a:	4293      	cmp	r3, r2
 800485c:	f040 808a 	bne.w	8004974 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004860:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004864:	2b08      	cmp	r3, #8
 8004866:	d824      	bhi.n	80048b2 <UART_SetConfig+0x26e>
 8004868:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <UART_SetConfig+0x22c>)
 800486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486e:	bf00      	nop
 8004870:	08004895 	.word	0x08004895
 8004874:	080048b3 	.word	0x080048b3
 8004878:	0800489d 	.word	0x0800489d
 800487c:	080048b3 	.word	0x080048b3
 8004880:	080048a3 	.word	0x080048a3
 8004884:	080048b3 	.word	0x080048b3
 8004888:	080048b3 	.word	0x080048b3
 800488c:	080048b3 	.word	0x080048b3
 8004890:	080048ab 	.word	0x080048ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004894:	f7ff fb94 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 8004898:	61f8      	str	r0, [r7, #28]
        break;
 800489a:	e010      	b.n	80048be <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800489c:	4b19      	ldr	r3, [pc, #100]	; (8004904 <UART_SetConfig+0x2c0>)
 800489e:	61fb      	str	r3, [r7, #28]
        break;
 80048a0:	e00d      	b.n	80048be <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048a2:	f7ff faf5 	bl	8003e90 <HAL_RCC_GetSysClockFreq>
 80048a6:	61f8      	str	r0, [r7, #28]
        break;
 80048a8:	e009      	b.n	80048be <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ae:	61fb      	str	r3, [r7, #28]
        break;
 80048b0:	e005      	b.n	80048be <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8109 	beq.w	8004ad8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	4413      	add	r3, r2
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d305      	bcc.n	80048e2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d912      	bls.n	8004908 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048e8:	e0f6      	b.n	8004ad8 <UART_SetConfig+0x494>
 80048ea:	bf00      	nop
 80048ec:	efff69f3 	.word	0xefff69f3
 80048f0:	40008000 	.word	0x40008000
 80048f4:	40013800 	.word	0x40013800
 80048f8:	40021000 	.word	0x40021000
 80048fc:	40004400 	.word	0x40004400
 8004900:	40004800 	.word	0x40004800
 8004904:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	2200      	movs	r2, #0
 800490c:	461c      	mov	r4, r3
 800490e:	4615      	mov	r5, r2
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	022b      	lsls	r3, r5, #8
 800491a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800491e:	0222      	lsls	r2, r4, #8
 8004920:	68f9      	ldr	r1, [r7, #12]
 8004922:	6849      	ldr	r1, [r1, #4]
 8004924:	0849      	lsrs	r1, r1, #1
 8004926:	2000      	movs	r0, #0
 8004928:	4688      	mov	r8, r1
 800492a:	4681      	mov	r9, r0
 800492c:	eb12 0a08 	adds.w	sl, r2, r8
 8004930:	eb43 0b09 	adc.w	fp, r3, r9
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	607a      	str	r2, [r7, #4]
 800493e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004942:	4650      	mov	r0, sl
 8004944:	4659      	mov	r1, fp
 8004946:	f7fc f97f 	bl	8000c48 <__aeabi_uldivmod>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4613      	mov	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004958:	d308      	bcc.n	800496c <UART_SetConfig+0x328>
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004960:	d204      	bcs.n	800496c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	60da      	str	r2, [r3, #12]
 800496a:	e0b5      	b.n	8004ad8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004972:	e0b1      	b.n	8004ad8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800497c:	d15d      	bne.n	8004a3a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800497e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004982:	2b08      	cmp	r3, #8
 8004984:	d827      	bhi.n	80049d6 <UART_SetConfig+0x392>
 8004986:	a201      	add	r2, pc, #4	; (adr r2, 800498c <UART_SetConfig+0x348>)
 8004988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049b9 	.word	0x080049b9
 8004994:	080049c1 	.word	0x080049c1
 8004998:	080049d7 	.word	0x080049d7
 800499c:	080049c7 	.word	0x080049c7
 80049a0:	080049d7 	.word	0x080049d7
 80049a4:	080049d7 	.word	0x080049d7
 80049a8:	080049d7 	.word	0x080049d7
 80049ac:	080049cf 	.word	0x080049cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049b0:	f7ff fb06 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 80049b4:	61f8      	str	r0, [r7, #28]
        break;
 80049b6:	e014      	b.n	80049e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b8:	f7ff fb18 	bl	8003fec <HAL_RCC_GetPCLK2Freq>
 80049bc:	61f8      	str	r0, [r7, #28]
        break;
 80049be:	e010      	b.n	80049e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c0:	4b4c      	ldr	r3, [pc, #304]	; (8004af4 <UART_SetConfig+0x4b0>)
 80049c2:	61fb      	str	r3, [r7, #28]
        break;
 80049c4:	e00d      	b.n	80049e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049c6:	f7ff fa63 	bl	8003e90 <HAL_RCC_GetSysClockFreq>
 80049ca:	61f8      	str	r0, [r7, #28]
        break;
 80049cc:	e009      	b.n	80049e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049d2:	61fb      	str	r3, [r7, #28]
        break;
 80049d4:	e005      	b.n	80049e2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d077      	beq.n	8004ad8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	005a      	lsls	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	085b      	lsrs	r3, r3, #1
 80049f2:	441a      	add	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b0f      	cmp	r3, #15
 8004a02:	d916      	bls.n	8004a32 <UART_SetConfig+0x3ee>
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0a:	d212      	bcs.n	8004a32 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f023 030f 	bic.w	r3, r3, #15
 8004a14:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	8afb      	ldrh	r3, [r7, #22]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	8afa      	ldrh	r2, [r7, #22]
 8004a2e:	60da      	str	r2, [r3, #12]
 8004a30:	e052      	b.n	8004ad8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a38:	e04e      	b.n	8004ad8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d827      	bhi.n	8004a92 <UART_SetConfig+0x44e>
 8004a42:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <UART_SetConfig+0x404>)
 8004a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a48:	08004a6d 	.word	0x08004a6d
 8004a4c:	08004a75 	.word	0x08004a75
 8004a50:	08004a7d 	.word	0x08004a7d
 8004a54:	08004a93 	.word	0x08004a93
 8004a58:	08004a83 	.word	0x08004a83
 8004a5c:	08004a93 	.word	0x08004a93
 8004a60:	08004a93 	.word	0x08004a93
 8004a64:	08004a93 	.word	0x08004a93
 8004a68:	08004a8b 	.word	0x08004a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a6c:	f7ff faa8 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 8004a70:	61f8      	str	r0, [r7, #28]
        break;
 8004a72:	e014      	b.n	8004a9e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a74:	f7ff faba 	bl	8003fec <HAL_RCC_GetPCLK2Freq>
 8004a78:	61f8      	str	r0, [r7, #28]
        break;
 8004a7a:	e010      	b.n	8004a9e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a7c:	4b1d      	ldr	r3, [pc, #116]	; (8004af4 <UART_SetConfig+0x4b0>)
 8004a7e:	61fb      	str	r3, [r7, #28]
        break;
 8004a80:	e00d      	b.n	8004a9e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a82:	f7ff fa05 	bl	8003e90 <HAL_RCC_GetSysClockFreq>
 8004a86:	61f8      	str	r0, [r7, #28]
        break;
 8004a88:	e009      	b.n	8004a9e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a8e:	61fb      	str	r3, [r7, #28]
        break;
 8004a90:	e005      	b.n	8004a9e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a9c:	bf00      	nop
    }

    if (pclk != 0U)
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d019      	beq.n	8004ad8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	085a      	lsrs	r2, r3, #1
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	441a      	add	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b0f      	cmp	r3, #15
 8004abc:	d909      	bls.n	8004ad2 <UART_SetConfig+0x48e>
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac4:	d205      	bcs.n	8004ad2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	60da      	str	r2, [r3, #12]
 8004ad0:	e002      	b.n	8004ad8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004ae4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3728      	adds	r7, #40	; 0x28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004af2:	bf00      	nop
 8004af4:	00f42400 	.word	0x00f42400

08004af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00a      	beq.n	8004b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01a      	beq.n	8004c0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf6:	d10a      	bne.n	8004c0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	605a      	str	r2, [r3, #4]
  }
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b098      	sub	sp, #96	; 0x60
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c4c:	f7fd f80e 	bl	8001c6c <HAL_GetTick>
 8004c50:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d12e      	bne.n	8004cbe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f88c 	bl	8004d8c <UART_WaitOnFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d021      	beq.n	8004cbe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c8e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c98:	647b      	str	r3, [r7, #68]	; 0x44
 8004c9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e6      	bne.n	8004c7a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e062      	b.n	8004d84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d149      	bne.n	8004d60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f856 	bl	8004d8c <UART_WaitOnFlagUntilTimeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d03c      	beq.n	8004d60 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	623b      	str	r3, [r7, #32]
   return(result);
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	461a      	mov	r2, r3
 8004d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d04:	633b      	str	r3, [r7, #48]	; 0x30
 8004d06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e6      	bne.n	8004ce6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0301 	bic.w	r3, r3, #1
 8004d2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3308      	adds	r3, #8
 8004d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d38:	61fa      	str	r2, [r7, #28]
 8004d3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	69b9      	ldr	r1, [r7, #24]
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	e841 2300 	strex	r3, r2, [r1]
 8004d44:	617b      	str	r3, [r7, #20]
   return(result);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e5      	bne.n	8004d18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e011      	b.n	8004d84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3758      	adds	r7, #88	; 0x58
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9c:	e049      	b.n	8004e32 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da4:	d045      	beq.n	8004e32 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da6:	f7fc ff61 	bl	8001c6c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d302      	bcc.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x30>
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e048      	b.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d031      	beq.n	8004e32 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d110      	bne.n	8004dfe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2208      	movs	r2, #8
 8004de2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 f8ff 	bl	8004fe8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2208      	movs	r2, #8
 8004dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e029      	b.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e0c:	d111      	bne.n	8004e32 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 f8e5 	bl	8004fe8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e00f      	b.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	bf0c      	ite	eq
 8004e42:	2301      	moveq	r3, #1
 8004e44:	2300      	movne	r3, #0
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d0a6      	beq.n	8004d9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b097      	sub	sp, #92	; 0x5c
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	4613      	mov	r3, r2
 8004e68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	88fa      	ldrh	r2, [r7, #6]
 8004e74:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	88fa      	ldrh	r2, [r7, #6]
 8004e7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8e:	d10e      	bne.n	8004eae <UART_Start_Receive_IT+0x52>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d105      	bne.n	8004ea4 <UART_Start_Receive_IT+0x48>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004e9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ea2:	e02d      	b.n	8004f00 <UART_Start_Receive_IT+0xa4>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	22ff      	movs	r2, #255	; 0xff
 8004ea8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004eac:	e028      	b.n	8004f00 <UART_Start_Receive_IT+0xa4>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10d      	bne.n	8004ed2 <UART_Start_Receive_IT+0x76>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d104      	bne.n	8004ec8 <UART_Start_Receive_IT+0x6c>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	22ff      	movs	r2, #255	; 0xff
 8004ec2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ec6:	e01b      	b.n	8004f00 <UART_Start_Receive_IT+0xa4>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	227f      	movs	r2, #127	; 0x7f
 8004ecc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ed0:	e016      	b.n	8004f00 <UART_Start_Receive_IT+0xa4>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eda:	d10d      	bne.n	8004ef8 <UART_Start_Receive_IT+0x9c>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d104      	bne.n	8004eee <UART_Start_Receive_IT+0x92>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	227f      	movs	r2, #127	; 0x7f
 8004ee8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004eec:	e008      	b.n	8004f00 <UART_Start_Receive_IT+0xa4>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	223f      	movs	r2, #63	; 0x3f
 8004ef2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ef6:	e003      	b.n	8004f00 <UART_Start_Receive_IT+0xa4>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2222      	movs	r2, #34	; 0x22
 8004f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3308      	adds	r3, #8
 8004f16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f1a:	e853 3f00 	ldrex	r3, [r3]
 8004f1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f22:	f043 0301 	orr.w	r3, r3, #1
 8004f26:	657b      	str	r3, [r7, #84]	; 0x54
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3308      	adds	r3, #8
 8004f2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f30:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f32:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f38:	e841 2300 	strex	r3, r2, [r1]
 8004f3c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e5      	bne.n	8004f10 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f4c:	d107      	bne.n	8004f5e <UART_Start_Receive_IT+0x102>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4a21      	ldr	r2, [pc, #132]	; (8004fe0 <UART_Start_Receive_IT+0x184>)
 8004f5a:	669a      	str	r2, [r3, #104]	; 0x68
 8004f5c:	e002      	b.n	8004f64 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4a20      	ldr	r2, [pc, #128]	; (8004fe4 <UART_Start_Receive_IT+0x188>)
 8004f62:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d019      	beq.n	8004fa0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004f80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f8c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e6      	bne.n	8004f6c <UART_Start_Receive_IT+0x110>
 8004f9e:	e018      	b.n	8004fd2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	e853 3f00 	ldrex	r3, [r3]
 8004fac:	613b      	str	r3, [r7, #16]
   return(result);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f043 0320 	orr.w	r3, r3, #32
 8004fb4:	653b      	str	r3, [r7, #80]	; 0x50
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fbe:	623b      	str	r3, [r7, #32]
 8004fc0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	69f9      	ldr	r1, [r7, #28]
 8004fc4:	6a3a      	ldr	r2, [r7, #32]
 8004fc6:	e841 2300 	strex	r3, r2, [r1]
 8004fca:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1e6      	bne.n	8004fa0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	375c      	adds	r7, #92	; 0x5c
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	0800526d 	.word	0x0800526d
 8004fe4:	080050b1 	.word	0x080050b1

08004fe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b095      	sub	sp, #84	; 0x54
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff8:	e853 3f00 	ldrex	r3, [r3]
 8004ffc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005004:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800500e:	643b      	str	r3, [r7, #64]	; 0x40
 8005010:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005012:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005014:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005016:	e841 2300 	strex	r3, r2, [r1]
 800501a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800501c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1e6      	bne.n	8004ff0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3308      	adds	r3, #8
 8005028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	61fb      	str	r3, [r7, #28]
   return(result);
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	f023 0301 	bic.w	r3, r3, #1
 8005038:	64bb      	str	r3, [r7, #72]	; 0x48
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3308      	adds	r3, #8
 8005040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005042:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005044:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005046:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800504a:	e841 2300 	strex	r3, r2, [r1]
 800504e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e5      	bne.n	8005022 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800505a:	2b01      	cmp	r3, #1
 800505c:	d118      	bne.n	8005090 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	60bb      	str	r3, [r7, #8]
   return(result);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f023 0310 	bic.w	r3, r3, #16
 8005072:	647b      	str	r3, [r7, #68]	; 0x44
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800507c:	61bb      	str	r3, [r7, #24]
 800507e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005080:	6979      	ldr	r1, [r7, #20]
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	613b      	str	r3, [r7, #16]
   return(result);
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e6      	bne.n	800505e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2220      	movs	r2, #32
 8005094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80050a4:	bf00      	nop
 80050a6:	3754      	adds	r7, #84	; 0x54
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b09c      	sub	sp, #112	; 0x70
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80050be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050c8:	2b22      	cmp	r3, #34	; 0x22
 80050ca:	f040 80be 	bne.w	800524a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80050d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80050d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80050dc:	b2d9      	uxtb	r1, r3
 80050de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e8:	400a      	ands	r2, r1
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	f040 80a3 	bne.w	800525e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005128:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800512c:	66bb      	str	r3, [r7, #104]	; 0x68
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005136:	65bb      	str	r3, [r7, #88]	; 0x58
 8005138:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800513c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e6      	bne.n	8005118 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3308      	adds	r3, #8
 8005150:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	e853 3f00 	ldrex	r3, [r3]
 8005158:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800515a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515c:	f023 0301 	bic.w	r3, r3, #1
 8005160:	667b      	str	r3, [r7, #100]	; 0x64
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3308      	adds	r3, #8
 8005168:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800516a:	647a      	str	r2, [r7, #68]	; 0x44
 800516c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1e5      	bne.n	800514a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2220      	movs	r2, #32
 8005182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a34      	ldr	r2, [pc, #208]	; (8005268 <UART_RxISR_8BIT+0x1b8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d01f      	beq.n	80051dc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d018      	beq.n	80051dc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	e853 3f00 	ldrex	r3, [r3]
 80051b6:	623b      	str	r3, [r7, #32]
   return(result);
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051be:	663b      	str	r3, [r7, #96]	; 0x60
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051c8:	633b      	str	r3, [r7, #48]	; 0x30
 80051ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e6      	bne.n	80051aa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d12e      	bne.n	8005242 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0310 	bic.w	r3, r3, #16
 80051fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005208:	61fb      	str	r3, [r7, #28]
 800520a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520c:	69b9      	ldr	r1, [r7, #24]
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	e841 2300 	strex	r3, r2, [r1]
 8005214:	617b      	str	r3, [r7, #20]
   return(result);
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e6      	bne.n	80051ea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	f003 0310 	and.w	r3, r3, #16
 8005226:	2b10      	cmp	r3, #16
 8005228:	d103      	bne.n	8005232 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2210      	movs	r2, #16
 8005230:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005238:	4619      	mov	r1, r3
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff f9f6 	bl	800462c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005240:	e00d      	b.n	800525e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fb ff74 	bl	8001130 <HAL_UART_RxCpltCallback>
}
 8005248:	e009      	b.n	800525e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	8b1b      	ldrh	r3, [r3, #24]
 8005250:	b29a      	uxth	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0208 	orr.w	r2, r2, #8
 800525a:	b292      	uxth	r2, r2
 800525c:	831a      	strh	r2, [r3, #24]
}
 800525e:	bf00      	nop
 8005260:	3770      	adds	r7, #112	; 0x70
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	40008000 	.word	0x40008000

0800526c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b09c      	sub	sp, #112	; 0x70
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800527a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005284:	2b22      	cmp	r3, #34	; 0x22
 8005286:	f040 80be 	bne.w	8005406 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005290:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005298:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800529a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800529e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80052a2:	4013      	ands	r3, r2
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ae:	1c9a      	adds	r2, r3, #2
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f040 80a3 	bne.w	800541a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80052e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052e8:	667b      	str	r3, [r7, #100]	; 0x64
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052f2:	657b      	str	r3, [r7, #84]	; 0x54
 80052f4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e6      	bne.n	80052d4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3308      	adds	r3, #8
 800530c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	f023 0301 	bic.w	r3, r3, #1
 800531c:	663b      	str	r3, [r7, #96]	; 0x60
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3308      	adds	r3, #8
 8005324:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005326:	643a      	str	r2, [r7, #64]	; 0x40
 8005328:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800532c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e5      	bne.n	8005306 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a34      	ldr	r2, [pc, #208]	; (8005424 <UART_RxISR_16BIT+0x1b8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d01f      	beq.n	8005398 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d018      	beq.n	8005398 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	e853 3f00 	ldrex	r3, [r3]
 8005372:	61fb      	str	r3, [r7, #28]
   return(result);
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800537a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	461a      	mov	r2, r3
 8005382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005386:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800538a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800538c:	e841 2300 	strex	r3, r2, [r1]
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e6      	bne.n	8005366 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800539c:	2b01      	cmp	r3, #1
 800539e:	d12e      	bne.n	80053fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f023 0310 	bic.w	r3, r3, #16
 80053ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	6979      	ldr	r1, [r7, #20]
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	e841 2300 	strex	r3, r2, [r1]
 80053d0:	613b      	str	r3, [r7, #16]
   return(result);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e6      	bne.n	80053a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	f003 0310 	and.w	r3, r3, #16
 80053e2:	2b10      	cmp	r3, #16
 80053e4:	d103      	bne.n	80053ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2210      	movs	r2, #16
 80053ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80053f4:	4619      	mov	r1, r3
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7ff f918 	bl	800462c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053fc:	e00d      	b.n	800541a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fb fe96 	bl	8001130 <HAL_UART_RxCpltCallback>
}
 8005404:	e009      	b.n	800541a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	8b1b      	ldrh	r3, [r3, #24]
 800540c:	b29a      	uxth	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0208 	orr.w	r2, r2, #8
 8005416:	b292      	uxth	r2, r2
 8005418:	831a      	strh	r2, [r3, #24]
}
 800541a:	bf00      	nop
 800541c:	3770      	adds	r7, #112	; 0x70
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40008000 	.word	0x40008000

08005428 <__cvt>:
 8005428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800542c:	ec55 4b10 	vmov	r4, r5, d0
 8005430:	2d00      	cmp	r5, #0
 8005432:	460e      	mov	r6, r1
 8005434:	4619      	mov	r1, r3
 8005436:	462b      	mov	r3, r5
 8005438:	bfbb      	ittet	lt
 800543a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800543e:	461d      	movlt	r5, r3
 8005440:	2300      	movge	r3, #0
 8005442:	232d      	movlt	r3, #45	; 0x2d
 8005444:	700b      	strb	r3, [r1, #0]
 8005446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005448:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800544c:	4691      	mov	r9, r2
 800544e:	f023 0820 	bic.w	r8, r3, #32
 8005452:	bfbc      	itt	lt
 8005454:	4622      	movlt	r2, r4
 8005456:	4614      	movlt	r4, r2
 8005458:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800545c:	d005      	beq.n	800546a <__cvt+0x42>
 800545e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005462:	d100      	bne.n	8005466 <__cvt+0x3e>
 8005464:	3601      	adds	r6, #1
 8005466:	2102      	movs	r1, #2
 8005468:	e000      	b.n	800546c <__cvt+0x44>
 800546a:	2103      	movs	r1, #3
 800546c:	ab03      	add	r3, sp, #12
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	ab02      	add	r3, sp, #8
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	ec45 4b10 	vmov	d0, r4, r5
 8005478:	4653      	mov	r3, sl
 800547a:	4632      	mov	r2, r6
 800547c:	f000 fe48 	bl	8006110 <_dtoa_r>
 8005480:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005484:	4607      	mov	r7, r0
 8005486:	d102      	bne.n	800548e <__cvt+0x66>
 8005488:	f019 0f01 	tst.w	r9, #1
 800548c:	d022      	beq.n	80054d4 <__cvt+0xac>
 800548e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005492:	eb07 0906 	add.w	r9, r7, r6
 8005496:	d110      	bne.n	80054ba <__cvt+0x92>
 8005498:	783b      	ldrb	r3, [r7, #0]
 800549a:	2b30      	cmp	r3, #48	; 0x30
 800549c:	d10a      	bne.n	80054b4 <__cvt+0x8c>
 800549e:	2200      	movs	r2, #0
 80054a0:	2300      	movs	r3, #0
 80054a2:	4620      	mov	r0, r4
 80054a4:	4629      	mov	r1, r5
 80054a6:	f7fb fb0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80054aa:	b918      	cbnz	r0, 80054b4 <__cvt+0x8c>
 80054ac:	f1c6 0601 	rsb	r6, r6, #1
 80054b0:	f8ca 6000 	str.w	r6, [sl]
 80054b4:	f8da 3000 	ldr.w	r3, [sl]
 80054b8:	4499      	add	r9, r3
 80054ba:	2200      	movs	r2, #0
 80054bc:	2300      	movs	r3, #0
 80054be:	4620      	mov	r0, r4
 80054c0:	4629      	mov	r1, r5
 80054c2:	f7fb fb01 	bl	8000ac8 <__aeabi_dcmpeq>
 80054c6:	b108      	cbz	r0, 80054cc <__cvt+0xa4>
 80054c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80054cc:	2230      	movs	r2, #48	; 0x30
 80054ce:	9b03      	ldr	r3, [sp, #12]
 80054d0:	454b      	cmp	r3, r9
 80054d2:	d307      	bcc.n	80054e4 <__cvt+0xbc>
 80054d4:	9b03      	ldr	r3, [sp, #12]
 80054d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054d8:	1bdb      	subs	r3, r3, r7
 80054da:	4638      	mov	r0, r7
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	b004      	add	sp, #16
 80054e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e4:	1c59      	adds	r1, r3, #1
 80054e6:	9103      	str	r1, [sp, #12]
 80054e8:	701a      	strb	r2, [r3, #0]
 80054ea:	e7f0      	b.n	80054ce <__cvt+0xa6>

080054ec <__exponent>:
 80054ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ee:	4603      	mov	r3, r0
 80054f0:	2900      	cmp	r1, #0
 80054f2:	bfb8      	it	lt
 80054f4:	4249      	neglt	r1, r1
 80054f6:	f803 2b02 	strb.w	r2, [r3], #2
 80054fa:	bfb4      	ite	lt
 80054fc:	222d      	movlt	r2, #45	; 0x2d
 80054fe:	222b      	movge	r2, #43	; 0x2b
 8005500:	2909      	cmp	r1, #9
 8005502:	7042      	strb	r2, [r0, #1]
 8005504:	dd2a      	ble.n	800555c <__exponent+0x70>
 8005506:	f10d 0207 	add.w	r2, sp, #7
 800550a:	4617      	mov	r7, r2
 800550c:	260a      	movs	r6, #10
 800550e:	4694      	mov	ip, r2
 8005510:	fb91 f5f6 	sdiv	r5, r1, r6
 8005514:	fb06 1415 	mls	r4, r6, r5, r1
 8005518:	3430      	adds	r4, #48	; 0x30
 800551a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800551e:	460c      	mov	r4, r1
 8005520:	2c63      	cmp	r4, #99	; 0x63
 8005522:	f102 32ff 	add.w	r2, r2, #4294967295
 8005526:	4629      	mov	r1, r5
 8005528:	dcf1      	bgt.n	800550e <__exponent+0x22>
 800552a:	3130      	adds	r1, #48	; 0x30
 800552c:	f1ac 0402 	sub.w	r4, ip, #2
 8005530:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005534:	1c41      	adds	r1, r0, #1
 8005536:	4622      	mov	r2, r4
 8005538:	42ba      	cmp	r2, r7
 800553a:	d30a      	bcc.n	8005552 <__exponent+0x66>
 800553c:	f10d 0209 	add.w	r2, sp, #9
 8005540:	eba2 020c 	sub.w	r2, r2, ip
 8005544:	42bc      	cmp	r4, r7
 8005546:	bf88      	it	hi
 8005548:	2200      	movhi	r2, #0
 800554a:	4413      	add	r3, r2
 800554c:	1a18      	subs	r0, r3, r0
 800554e:	b003      	add	sp, #12
 8005550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005552:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005556:	f801 5f01 	strb.w	r5, [r1, #1]!
 800555a:	e7ed      	b.n	8005538 <__exponent+0x4c>
 800555c:	2330      	movs	r3, #48	; 0x30
 800555e:	3130      	adds	r1, #48	; 0x30
 8005560:	7083      	strb	r3, [r0, #2]
 8005562:	70c1      	strb	r1, [r0, #3]
 8005564:	1d03      	adds	r3, r0, #4
 8005566:	e7f1      	b.n	800554c <__exponent+0x60>

08005568 <_printf_float>:
 8005568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556c:	ed2d 8b02 	vpush	{d8}
 8005570:	b08d      	sub	sp, #52	; 0x34
 8005572:	460c      	mov	r4, r1
 8005574:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005578:	4616      	mov	r6, r2
 800557a:	461f      	mov	r7, r3
 800557c:	4605      	mov	r5, r0
 800557e:	f000 fcc7 	bl	8005f10 <_localeconv_r>
 8005582:	f8d0 a000 	ldr.w	sl, [r0]
 8005586:	4650      	mov	r0, sl
 8005588:	f7fa fe72 	bl	8000270 <strlen>
 800558c:	2300      	movs	r3, #0
 800558e:	930a      	str	r3, [sp, #40]	; 0x28
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	9305      	str	r3, [sp, #20]
 8005594:	f8d8 3000 	ldr.w	r3, [r8]
 8005598:	f894 b018 	ldrb.w	fp, [r4, #24]
 800559c:	3307      	adds	r3, #7
 800559e:	f023 0307 	bic.w	r3, r3, #7
 80055a2:	f103 0208 	add.w	r2, r3, #8
 80055a6:	f8c8 2000 	str.w	r2, [r8]
 80055aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055b2:	9307      	str	r3, [sp, #28]
 80055b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80055b8:	ee08 0a10 	vmov	s16, r0
 80055bc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80055c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055c4:	4b9e      	ldr	r3, [pc, #632]	; (8005840 <_printf_float+0x2d8>)
 80055c6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ca:	f7fb faaf 	bl	8000b2c <__aeabi_dcmpun>
 80055ce:	bb88      	cbnz	r0, 8005634 <_printf_float+0xcc>
 80055d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055d4:	4b9a      	ldr	r3, [pc, #616]	; (8005840 <_printf_float+0x2d8>)
 80055d6:	f04f 32ff 	mov.w	r2, #4294967295
 80055da:	f7fb fa89 	bl	8000af0 <__aeabi_dcmple>
 80055de:	bb48      	cbnz	r0, 8005634 <_printf_float+0xcc>
 80055e0:	2200      	movs	r2, #0
 80055e2:	2300      	movs	r3, #0
 80055e4:	4640      	mov	r0, r8
 80055e6:	4649      	mov	r1, r9
 80055e8:	f7fb fa78 	bl	8000adc <__aeabi_dcmplt>
 80055ec:	b110      	cbz	r0, 80055f4 <_printf_float+0x8c>
 80055ee:	232d      	movs	r3, #45	; 0x2d
 80055f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f4:	4a93      	ldr	r2, [pc, #588]	; (8005844 <_printf_float+0x2dc>)
 80055f6:	4b94      	ldr	r3, [pc, #592]	; (8005848 <_printf_float+0x2e0>)
 80055f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80055fc:	bf94      	ite	ls
 80055fe:	4690      	movls	r8, r2
 8005600:	4698      	movhi	r8, r3
 8005602:	2303      	movs	r3, #3
 8005604:	6123      	str	r3, [r4, #16]
 8005606:	9b05      	ldr	r3, [sp, #20]
 8005608:	f023 0304 	bic.w	r3, r3, #4
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	f04f 0900 	mov.w	r9, #0
 8005612:	9700      	str	r7, [sp, #0]
 8005614:	4633      	mov	r3, r6
 8005616:	aa0b      	add	r2, sp, #44	; 0x2c
 8005618:	4621      	mov	r1, r4
 800561a:	4628      	mov	r0, r5
 800561c:	f000 f9da 	bl	80059d4 <_printf_common>
 8005620:	3001      	adds	r0, #1
 8005622:	f040 8090 	bne.w	8005746 <_printf_float+0x1de>
 8005626:	f04f 30ff 	mov.w	r0, #4294967295
 800562a:	b00d      	add	sp, #52	; 0x34
 800562c:	ecbd 8b02 	vpop	{d8}
 8005630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005634:	4642      	mov	r2, r8
 8005636:	464b      	mov	r3, r9
 8005638:	4640      	mov	r0, r8
 800563a:	4649      	mov	r1, r9
 800563c:	f7fb fa76 	bl	8000b2c <__aeabi_dcmpun>
 8005640:	b140      	cbz	r0, 8005654 <_printf_float+0xec>
 8005642:	464b      	mov	r3, r9
 8005644:	2b00      	cmp	r3, #0
 8005646:	bfbc      	itt	lt
 8005648:	232d      	movlt	r3, #45	; 0x2d
 800564a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800564e:	4a7f      	ldr	r2, [pc, #508]	; (800584c <_printf_float+0x2e4>)
 8005650:	4b7f      	ldr	r3, [pc, #508]	; (8005850 <_printf_float+0x2e8>)
 8005652:	e7d1      	b.n	80055f8 <_printf_float+0x90>
 8005654:	6863      	ldr	r3, [r4, #4]
 8005656:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800565a:	9206      	str	r2, [sp, #24]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	d13f      	bne.n	80056e0 <_printf_float+0x178>
 8005660:	2306      	movs	r3, #6
 8005662:	6063      	str	r3, [r4, #4]
 8005664:	9b05      	ldr	r3, [sp, #20]
 8005666:	6861      	ldr	r1, [r4, #4]
 8005668:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800566c:	2300      	movs	r3, #0
 800566e:	9303      	str	r3, [sp, #12]
 8005670:	ab0a      	add	r3, sp, #40	; 0x28
 8005672:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005676:	ab09      	add	r3, sp, #36	; 0x24
 8005678:	ec49 8b10 	vmov	d0, r8, r9
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	6022      	str	r2, [r4, #0]
 8005680:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005684:	4628      	mov	r0, r5
 8005686:	f7ff fecf 	bl	8005428 <__cvt>
 800568a:	9b06      	ldr	r3, [sp, #24]
 800568c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800568e:	2b47      	cmp	r3, #71	; 0x47
 8005690:	4680      	mov	r8, r0
 8005692:	d108      	bne.n	80056a6 <_printf_float+0x13e>
 8005694:	1cc8      	adds	r0, r1, #3
 8005696:	db02      	blt.n	800569e <_printf_float+0x136>
 8005698:	6863      	ldr	r3, [r4, #4]
 800569a:	4299      	cmp	r1, r3
 800569c:	dd41      	ble.n	8005722 <_printf_float+0x1ba>
 800569e:	f1ab 0302 	sub.w	r3, fp, #2
 80056a2:	fa5f fb83 	uxtb.w	fp, r3
 80056a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056aa:	d820      	bhi.n	80056ee <_printf_float+0x186>
 80056ac:	3901      	subs	r1, #1
 80056ae:	465a      	mov	r2, fp
 80056b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056b4:	9109      	str	r1, [sp, #36]	; 0x24
 80056b6:	f7ff ff19 	bl	80054ec <__exponent>
 80056ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056bc:	1813      	adds	r3, r2, r0
 80056be:	2a01      	cmp	r2, #1
 80056c0:	4681      	mov	r9, r0
 80056c2:	6123      	str	r3, [r4, #16]
 80056c4:	dc02      	bgt.n	80056cc <_printf_float+0x164>
 80056c6:	6822      	ldr	r2, [r4, #0]
 80056c8:	07d2      	lsls	r2, r2, #31
 80056ca:	d501      	bpl.n	80056d0 <_printf_float+0x168>
 80056cc:	3301      	adds	r3, #1
 80056ce:	6123      	str	r3, [r4, #16]
 80056d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d09c      	beq.n	8005612 <_printf_float+0xaa>
 80056d8:	232d      	movs	r3, #45	; 0x2d
 80056da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056de:	e798      	b.n	8005612 <_printf_float+0xaa>
 80056e0:	9a06      	ldr	r2, [sp, #24]
 80056e2:	2a47      	cmp	r2, #71	; 0x47
 80056e4:	d1be      	bne.n	8005664 <_printf_float+0xfc>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1bc      	bne.n	8005664 <_printf_float+0xfc>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e7b9      	b.n	8005662 <_printf_float+0xfa>
 80056ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80056f2:	d118      	bne.n	8005726 <_printf_float+0x1be>
 80056f4:	2900      	cmp	r1, #0
 80056f6:	6863      	ldr	r3, [r4, #4]
 80056f8:	dd0b      	ble.n	8005712 <_printf_float+0x1aa>
 80056fa:	6121      	str	r1, [r4, #16]
 80056fc:	b913      	cbnz	r3, 8005704 <_printf_float+0x19c>
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	07d0      	lsls	r0, r2, #31
 8005702:	d502      	bpl.n	800570a <_printf_float+0x1a2>
 8005704:	3301      	adds	r3, #1
 8005706:	440b      	add	r3, r1
 8005708:	6123      	str	r3, [r4, #16]
 800570a:	65a1      	str	r1, [r4, #88]	; 0x58
 800570c:	f04f 0900 	mov.w	r9, #0
 8005710:	e7de      	b.n	80056d0 <_printf_float+0x168>
 8005712:	b913      	cbnz	r3, 800571a <_printf_float+0x1b2>
 8005714:	6822      	ldr	r2, [r4, #0]
 8005716:	07d2      	lsls	r2, r2, #31
 8005718:	d501      	bpl.n	800571e <_printf_float+0x1b6>
 800571a:	3302      	adds	r3, #2
 800571c:	e7f4      	b.n	8005708 <_printf_float+0x1a0>
 800571e:	2301      	movs	r3, #1
 8005720:	e7f2      	b.n	8005708 <_printf_float+0x1a0>
 8005722:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005728:	4299      	cmp	r1, r3
 800572a:	db05      	blt.n	8005738 <_printf_float+0x1d0>
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	6121      	str	r1, [r4, #16]
 8005730:	07d8      	lsls	r0, r3, #31
 8005732:	d5ea      	bpl.n	800570a <_printf_float+0x1a2>
 8005734:	1c4b      	adds	r3, r1, #1
 8005736:	e7e7      	b.n	8005708 <_printf_float+0x1a0>
 8005738:	2900      	cmp	r1, #0
 800573a:	bfd4      	ite	le
 800573c:	f1c1 0202 	rsble	r2, r1, #2
 8005740:	2201      	movgt	r2, #1
 8005742:	4413      	add	r3, r2
 8005744:	e7e0      	b.n	8005708 <_printf_float+0x1a0>
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	055a      	lsls	r2, r3, #21
 800574a:	d407      	bmi.n	800575c <_printf_float+0x1f4>
 800574c:	6923      	ldr	r3, [r4, #16]
 800574e:	4642      	mov	r2, r8
 8005750:	4631      	mov	r1, r6
 8005752:	4628      	mov	r0, r5
 8005754:	47b8      	blx	r7
 8005756:	3001      	adds	r0, #1
 8005758:	d12c      	bne.n	80057b4 <_printf_float+0x24c>
 800575a:	e764      	b.n	8005626 <_printf_float+0xbe>
 800575c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005760:	f240 80e0 	bls.w	8005924 <_printf_float+0x3bc>
 8005764:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005768:	2200      	movs	r2, #0
 800576a:	2300      	movs	r3, #0
 800576c:	f7fb f9ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8005770:	2800      	cmp	r0, #0
 8005772:	d034      	beq.n	80057de <_printf_float+0x276>
 8005774:	4a37      	ldr	r2, [pc, #220]	; (8005854 <_printf_float+0x2ec>)
 8005776:	2301      	movs	r3, #1
 8005778:	4631      	mov	r1, r6
 800577a:	4628      	mov	r0, r5
 800577c:	47b8      	blx	r7
 800577e:	3001      	adds	r0, #1
 8005780:	f43f af51 	beq.w	8005626 <_printf_float+0xbe>
 8005784:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005788:	429a      	cmp	r2, r3
 800578a:	db02      	blt.n	8005792 <_printf_float+0x22a>
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	07d8      	lsls	r0, r3, #31
 8005790:	d510      	bpl.n	80057b4 <_printf_float+0x24c>
 8005792:	ee18 3a10 	vmov	r3, s16
 8005796:	4652      	mov	r2, sl
 8005798:	4631      	mov	r1, r6
 800579a:	4628      	mov	r0, r5
 800579c:	47b8      	blx	r7
 800579e:	3001      	adds	r0, #1
 80057a0:	f43f af41 	beq.w	8005626 <_printf_float+0xbe>
 80057a4:	f04f 0800 	mov.w	r8, #0
 80057a8:	f104 091a 	add.w	r9, r4, #26
 80057ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ae:	3b01      	subs	r3, #1
 80057b0:	4543      	cmp	r3, r8
 80057b2:	dc09      	bgt.n	80057c8 <_printf_float+0x260>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	079b      	lsls	r3, r3, #30
 80057b8:	f100 8107 	bmi.w	80059ca <_printf_float+0x462>
 80057bc:	68e0      	ldr	r0, [r4, #12]
 80057be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057c0:	4298      	cmp	r0, r3
 80057c2:	bfb8      	it	lt
 80057c4:	4618      	movlt	r0, r3
 80057c6:	e730      	b.n	800562a <_printf_float+0xc2>
 80057c8:	2301      	movs	r3, #1
 80057ca:	464a      	mov	r2, r9
 80057cc:	4631      	mov	r1, r6
 80057ce:	4628      	mov	r0, r5
 80057d0:	47b8      	blx	r7
 80057d2:	3001      	adds	r0, #1
 80057d4:	f43f af27 	beq.w	8005626 <_printf_float+0xbe>
 80057d8:	f108 0801 	add.w	r8, r8, #1
 80057dc:	e7e6      	b.n	80057ac <_printf_float+0x244>
 80057de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	dc39      	bgt.n	8005858 <_printf_float+0x2f0>
 80057e4:	4a1b      	ldr	r2, [pc, #108]	; (8005854 <_printf_float+0x2ec>)
 80057e6:	2301      	movs	r3, #1
 80057e8:	4631      	mov	r1, r6
 80057ea:	4628      	mov	r0, r5
 80057ec:	47b8      	blx	r7
 80057ee:	3001      	adds	r0, #1
 80057f0:	f43f af19 	beq.w	8005626 <_printf_float+0xbe>
 80057f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80057f8:	4313      	orrs	r3, r2
 80057fa:	d102      	bne.n	8005802 <_printf_float+0x29a>
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	07d9      	lsls	r1, r3, #31
 8005800:	d5d8      	bpl.n	80057b4 <_printf_float+0x24c>
 8005802:	ee18 3a10 	vmov	r3, s16
 8005806:	4652      	mov	r2, sl
 8005808:	4631      	mov	r1, r6
 800580a:	4628      	mov	r0, r5
 800580c:	47b8      	blx	r7
 800580e:	3001      	adds	r0, #1
 8005810:	f43f af09 	beq.w	8005626 <_printf_float+0xbe>
 8005814:	f04f 0900 	mov.w	r9, #0
 8005818:	f104 0a1a 	add.w	sl, r4, #26
 800581c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800581e:	425b      	negs	r3, r3
 8005820:	454b      	cmp	r3, r9
 8005822:	dc01      	bgt.n	8005828 <_printf_float+0x2c0>
 8005824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005826:	e792      	b.n	800574e <_printf_float+0x1e6>
 8005828:	2301      	movs	r3, #1
 800582a:	4652      	mov	r2, sl
 800582c:	4631      	mov	r1, r6
 800582e:	4628      	mov	r0, r5
 8005830:	47b8      	blx	r7
 8005832:	3001      	adds	r0, #1
 8005834:	f43f aef7 	beq.w	8005626 <_printf_float+0xbe>
 8005838:	f109 0901 	add.w	r9, r9, #1
 800583c:	e7ee      	b.n	800581c <_printf_float+0x2b4>
 800583e:	bf00      	nop
 8005840:	7fefffff 	.word	0x7fefffff
 8005844:	08007e0c 	.word	0x08007e0c
 8005848:	08007e10 	.word	0x08007e10
 800584c:	08007e14 	.word	0x08007e14
 8005850:	08007e18 	.word	0x08007e18
 8005854:	08007e1c 	.word	0x08007e1c
 8005858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800585a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800585c:	429a      	cmp	r2, r3
 800585e:	bfa8      	it	ge
 8005860:	461a      	movge	r2, r3
 8005862:	2a00      	cmp	r2, #0
 8005864:	4691      	mov	r9, r2
 8005866:	dc37      	bgt.n	80058d8 <_printf_float+0x370>
 8005868:	f04f 0b00 	mov.w	fp, #0
 800586c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005870:	f104 021a 	add.w	r2, r4, #26
 8005874:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005876:	9305      	str	r3, [sp, #20]
 8005878:	eba3 0309 	sub.w	r3, r3, r9
 800587c:	455b      	cmp	r3, fp
 800587e:	dc33      	bgt.n	80058e8 <_printf_float+0x380>
 8005880:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005884:	429a      	cmp	r2, r3
 8005886:	db3b      	blt.n	8005900 <_printf_float+0x398>
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	07da      	lsls	r2, r3, #31
 800588c:	d438      	bmi.n	8005900 <_printf_float+0x398>
 800588e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005892:	eba2 0903 	sub.w	r9, r2, r3
 8005896:	9b05      	ldr	r3, [sp, #20]
 8005898:	1ad2      	subs	r2, r2, r3
 800589a:	4591      	cmp	r9, r2
 800589c:	bfa8      	it	ge
 800589e:	4691      	movge	r9, r2
 80058a0:	f1b9 0f00 	cmp.w	r9, #0
 80058a4:	dc35      	bgt.n	8005912 <_printf_float+0x3aa>
 80058a6:	f04f 0800 	mov.w	r8, #0
 80058aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058ae:	f104 0a1a 	add.w	sl, r4, #26
 80058b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058b6:	1a9b      	subs	r3, r3, r2
 80058b8:	eba3 0309 	sub.w	r3, r3, r9
 80058bc:	4543      	cmp	r3, r8
 80058be:	f77f af79 	ble.w	80057b4 <_printf_float+0x24c>
 80058c2:	2301      	movs	r3, #1
 80058c4:	4652      	mov	r2, sl
 80058c6:	4631      	mov	r1, r6
 80058c8:	4628      	mov	r0, r5
 80058ca:	47b8      	blx	r7
 80058cc:	3001      	adds	r0, #1
 80058ce:	f43f aeaa 	beq.w	8005626 <_printf_float+0xbe>
 80058d2:	f108 0801 	add.w	r8, r8, #1
 80058d6:	e7ec      	b.n	80058b2 <_printf_float+0x34a>
 80058d8:	4613      	mov	r3, r2
 80058da:	4631      	mov	r1, r6
 80058dc:	4642      	mov	r2, r8
 80058de:	4628      	mov	r0, r5
 80058e0:	47b8      	blx	r7
 80058e2:	3001      	adds	r0, #1
 80058e4:	d1c0      	bne.n	8005868 <_printf_float+0x300>
 80058e6:	e69e      	b.n	8005626 <_printf_float+0xbe>
 80058e8:	2301      	movs	r3, #1
 80058ea:	4631      	mov	r1, r6
 80058ec:	4628      	mov	r0, r5
 80058ee:	9205      	str	r2, [sp, #20]
 80058f0:	47b8      	blx	r7
 80058f2:	3001      	adds	r0, #1
 80058f4:	f43f ae97 	beq.w	8005626 <_printf_float+0xbe>
 80058f8:	9a05      	ldr	r2, [sp, #20]
 80058fa:	f10b 0b01 	add.w	fp, fp, #1
 80058fe:	e7b9      	b.n	8005874 <_printf_float+0x30c>
 8005900:	ee18 3a10 	vmov	r3, s16
 8005904:	4652      	mov	r2, sl
 8005906:	4631      	mov	r1, r6
 8005908:	4628      	mov	r0, r5
 800590a:	47b8      	blx	r7
 800590c:	3001      	adds	r0, #1
 800590e:	d1be      	bne.n	800588e <_printf_float+0x326>
 8005910:	e689      	b.n	8005626 <_printf_float+0xbe>
 8005912:	9a05      	ldr	r2, [sp, #20]
 8005914:	464b      	mov	r3, r9
 8005916:	4442      	add	r2, r8
 8005918:	4631      	mov	r1, r6
 800591a:	4628      	mov	r0, r5
 800591c:	47b8      	blx	r7
 800591e:	3001      	adds	r0, #1
 8005920:	d1c1      	bne.n	80058a6 <_printf_float+0x33e>
 8005922:	e680      	b.n	8005626 <_printf_float+0xbe>
 8005924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005926:	2a01      	cmp	r2, #1
 8005928:	dc01      	bgt.n	800592e <_printf_float+0x3c6>
 800592a:	07db      	lsls	r3, r3, #31
 800592c:	d53a      	bpl.n	80059a4 <_printf_float+0x43c>
 800592e:	2301      	movs	r3, #1
 8005930:	4642      	mov	r2, r8
 8005932:	4631      	mov	r1, r6
 8005934:	4628      	mov	r0, r5
 8005936:	47b8      	blx	r7
 8005938:	3001      	adds	r0, #1
 800593a:	f43f ae74 	beq.w	8005626 <_printf_float+0xbe>
 800593e:	ee18 3a10 	vmov	r3, s16
 8005942:	4652      	mov	r2, sl
 8005944:	4631      	mov	r1, r6
 8005946:	4628      	mov	r0, r5
 8005948:	47b8      	blx	r7
 800594a:	3001      	adds	r0, #1
 800594c:	f43f ae6b 	beq.w	8005626 <_printf_float+0xbe>
 8005950:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005954:	2200      	movs	r2, #0
 8005956:	2300      	movs	r3, #0
 8005958:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800595c:	f7fb f8b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005960:	b9d8      	cbnz	r0, 800599a <_printf_float+0x432>
 8005962:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005966:	f108 0201 	add.w	r2, r8, #1
 800596a:	4631      	mov	r1, r6
 800596c:	4628      	mov	r0, r5
 800596e:	47b8      	blx	r7
 8005970:	3001      	adds	r0, #1
 8005972:	d10e      	bne.n	8005992 <_printf_float+0x42a>
 8005974:	e657      	b.n	8005626 <_printf_float+0xbe>
 8005976:	2301      	movs	r3, #1
 8005978:	4652      	mov	r2, sl
 800597a:	4631      	mov	r1, r6
 800597c:	4628      	mov	r0, r5
 800597e:	47b8      	blx	r7
 8005980:	3001      	adds	r0, #1
 8005982:	f43f ae50 	beq.w	8005626 <_printf_float+0xbe>
 8005986:	f108 0801 	add.w	r8, r8, #1
 800598a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800598c:	3b01      	subs	r3, #1
 800598e:	4543      	cmp	r3, r8
 8005990:	dcf1      	bgt.n	8005976 <_printf_float+0x40e>
 8005992:	464b      	mov	r3, r9
 8005994:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005998:	e6da      	b.n	8005750 <_printf_float+0x1e8>
 800599a:	f04f 0800 	mov.w	r8, #0
 800599e:	f104 0a1a 	add.w	sl, r4, #26
 80059a2:	e7f2      	b.n	800598a <_printf_float+0x422>
 80059a4:	2301      	movs	r3, #1
 80059a6:	4642      	mov	r2, r8
 80059a8:	e7df      	b.n	800596a <_printf_float+0x402>
 80059aa:	2301      	movs	r3, #1
 80059ac:	464a      	mov	r2, r9
 80059ae:	4631      	mov	r1, r6
 80059b0:	4628      	mov	r0, r5
 80059b2:	47b8      	blx	r7
 80059b4:	3001      	adds	r0, #1
 80059b6:	f43f ae36 	beq.w	8005626 <_printf_float+0xbe>
 80059ba:	f108 0801 	add.w	r8, r8, #1
 80059be:	68e3      	ldr	r3, [r4, #12]
 80059c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059c2:	1a5b      	subs	r3, r3, r1
 80059c4:	4543      	cmp	r3, r8
 80059c6:	dcf0      	bgt.n	80059aa <_printf_float+0x442>
 80059c8:	e6f8      	b.n	80057bc <_printf_float+0x254>
 80059ca:	f04f 0800 	mov.w	r8, #0
 80059ce:	f104 0919 	add.w	r9, r4, #25
 80059d2:	e7f4      	b.n	80059be <_printf_float+0x456>

080059d4 <_printf_common>:
 80059d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d8:	4616      	mov	r6, r2
 80059da:	4699      	mov	r9, r3
 80059dc:	688a      	ldr	r2, [r1, #8]
 80059de:	690b      	ldr	r3, [r1, #16]
 80059e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059e4:	4293      	cmp	r3, r2
 80059e6:	bfb8      	it	lt
 80059e8:	4613      	movlt	r3, r2
 80059ea:	6033      	str	r3, [r6, #0]
 80059ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059f0:	4607      	mov	r7, r0
 80059f2:	460c      	mov	r4, r1
 80059f4:	b10a      	cbz	r2, 80059fa <_printf_common+0x26>
 80059f6:	3301      	adds	r3, #1
 80059f8:	6033      	str	r3, [r6, #0]
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	0699      	lsls	r1, r3, #26
 80059fe:	bf42      	ittt	mi
 8005a00:	6833      	ldrmi	r3, [r6, #0]
 8005a02:	3302      	addmi	r3, #2
 8005a04:	6033      	strmi	r3, [r6, #0]
 8005a06:	6825      	ldr	r5, [r4, #0]
 8005a08:	f015 0506 	ands.w	r5, r5, #6
 8005a0c:	d106      	bne.n	8005a1c <_printf_common+0x48>
 8005a0e:	f104 0a19 	add.w	sl, r4, #25
 8005a12:	68e3      	ldr	r3, [r4, #12]
 8005a14:	6832      	ldr	r2, [r6, #0]
 8005a16:	1a9b      	subs	r3, r3, r2
 8005a18:	42ab      	cmp	r3, r5
 8005a1a:	dc26      	bgt.n	8005a6a <_printf_common+0x96>
 8005a1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a20:	1e13      	subs	r3, r2, #0
 8005a22:	6822      	ldr	r2, [r4, #0]
 8005a24:	bf18      	it	ne
 8005a26:	2301      	movne	r3, #1
 8005a28:	0692      	lsls	r2, r2, #26
 8005a2a:	d42b      	bmi.n	8005a84 <_printf_common+0xb0>
 8005a2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a30:	4649      	mov	r1, r9
 8005a32:	4638      	mov	r0, r7
 8005a34:	47c0      	blx	r8
 8005a36:	3001      	adds	r0, #1
 8005a38:	d01e      	beq.n	8005a78 <_printf_common+0xa4>
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	6922      	ldr	r2, [r4, #16]
 8005a3e:	f003 0306 	and.w	r3, r3, #6
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	bf02      	ittt	eq
 8005a46:	68e5      	ldreq	r5, [r4, #12]
 8005a48:	6833      	ldreq	r3, [r6, #0]
 8005a4a:	1aed      	subeq	r5, r5, r3
 8005a4c:	68a3      	ldr	r3, [r4, #8]
 8005a4e:	bf0c      	ite	eq
 8005a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a54:	2500      	movne	r5, #0
 8005a56:	4293      	cmp	r3, r2
 8005a58:	bfc4      	itt	gt
 8005a5a:	1a9b      	subgt	r3, r3, r2
 8005a5c:	18ed      	addgt	r5, r5, r3
 8005a5e:	2600      	movs	r6, #0
 8005a60:	341a      	adds	r4, #26
 8005a62:	42b5      	cmp	r5, r6
 8005a64:	d11a      	bne.n	8005a9c <_printf_common+0xc8>
 8005a66:	2000      	movs	r0, #0
 8005a68:	e008      	b.n	8005a7c <_printf_common+0xa8>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	4652      	mov	r2, sl
 8005a6e:	4649      	mov	r1, r9
 8005a70:	4638      	mov	r0, r7
 8005a72:	47c0      	blx	r8
 8005a74:	3001      	adds	r0, #1
 8005a76:	d103      	bne.n	8005a80 <_printf_common+0xac>
 8005a78:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a80:	3501      	adds	r5, #1
 8005a82:	e7c6      	b.n	8005a12 <_printf_common+0x3e>
 8005a84:	18e1      	adds	r1, r4, r3
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	2030      	movs	r0, #48	; 0x30
 8005a8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a8e:	4422      	add	r2, r4
 8005a90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a98:	3302      	adds	r3, #2
 8005a9a:	e7c7      	b.n	8005a2c <_printf_common+0x58>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	4622      	mov	r2, r4
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	47c0      	blx	r8
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	d0e6      	beq.n	8005a78 <_printf_common+0xa4>
 8005aaa:	3601      	adds	r6, #1
 8005aac:	e7d9      	b.n	8005a62 <_printf_common+0x8e>
	...

08005ab0 <_printf_i>:
 8005ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab4:	7e0f      	ldrb	r7, [r1, #24]
 8005ab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ab8:	2f78      	cmp	r7, #120	; 0x78
 8005aba:	4691      	mov	r9, r2
 8005abc:	4680      	mov	r8, r0
 8005abe:	460c      	mov	r4, r1
 8005ac0:	469a      	mov	sl, r3
 8005ac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ac6:	d807      	bhi.n	8005ad8 <_printf_i+0x28>
 8005ac8:	2f62      	cmp	r7, #98	; 0x62
 8005aca:	d80a      	bhi.n	8005ae2 <_printf_i+0x32>
 8005acc:	2f00      	cmp	r7, #0
 8005ace:	f000 80d4 	beq.w	8005c7a <_printf_i+0x1ca>
 8005ad2:	2f58      	cmp	r7, #88	; 0x58
 8005ad4:	f000 80c0 	beq.w	8005c58 <_printf_i+0x1a8>
 8005ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005adc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ae0:	e03a      	b.n	8005b58 <_printf_i+0xa8>
 8005ae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ae6:	2b15      	cmp	r3, #21
 8005ae8:	d8f6      	bhi.n	8005ad8 <_printf_i+0x28>
 8005aea:	a101      	add	r1, pc, #4	; (adr r1, 8005af0 <_printf_i+0x40>)
 8005aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005af0:	08005b49 	.word	0x08005b49
 8005af4:	08005b5d 	.word	0x08005b5d
 8005af8:	08005ad9 	.word	0x08005ad9
 8005afc:	08005ad9 	.word	0x08005ad9
 8005b00:	08005ad9 	.word	0x08005ad9
 8005b04:	08005ad9 	.word	0x08005ad9
 8005b08:	08005b5d 	.word	0x08005b5d
 8005b0c:	08005ad9 	.word	0x08005ad9
 8005b10:	08005ad9 	.word	0x08005ad9
 8005b14:	08005ad9 	.word	0x08005ad9
 8005b18:	08005ad9 	.word	0x08005ad9
 8005b1c:	08005c61 	.word	0x08005c61
 8005b20:	08005b89 	.word	0x08005b89
 8005b24:	08005c1b 	.word	0x08005c1b
 8005b28:	08005ad9 	.word	0x08005ad9
 8005b2c:	08005ad9 	.word	0x08005ad9
 8005b30:	08005c83 	.word	0x08005c83
 8005b34:	08005ad9 	.word	0x08005ad9
 8005b38:	08005b89 	.word	0x08005b89
 8005b3c:	08005ad9 	.word	0x08005ad9
 8005b40:	08005ad9 	.word	0x08005ad9
 8005b44:	08005c23 	.word	0x08005c23
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	1d1a      	adds	r2, r3, #4
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	602a      	str	r2, [r5, #0]
 8005b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e09f      	b.n	8005c9c <_printf_i+0x1ec>
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	682b      	ldr	r3, [r5, #0]
 8005b60:	0607      	lsls	r7, r0, #24
 8005b62:	f103 0104 	add.w	r1, r3, #4
 8005b66:	6029      	str	r1, [r5, #0]
 8005b68:	d501      	bpl.n	8005b6e <_printf_i+0xbe>
 8005b6a:	681e      	ldr	r6, [r3, #0]
 8005b6c:	e003      	b.n	8005b76 <_printf_i+0xc6>
 8005b6e:	0646      	lsls	r6, r0, #25
 8005b70:	d5fb      	bpl.n	8005b6a <_printf_i+0xba>
 8005b72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b76:	2e00      	cmp	r6, #0
 8005b78:	da03      	bge.n	8005b82 <_printf_i+0xd2>
 8005b7a:	232d      	movs	r3, #45	; 0x2d
 8005b7c:	4276      	negs	r6, r6
 8005b7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b82:	485a      	ldr	r0, [pc, #360]	; (8005cec <_printf_i+0x23c>)
 8005b84:	230a      	movs	r3, #10
 8005b86:	e012      	b.n	8005bae <_printf_i+0xfe>
 8005b88:	682b      	ldr	r3, [r5, #0]
 8005b8a:	6820      	ldr	r0, [r4, #0]
 8005b8c:	1d19      	adds	r1, r3, #4
 8005b8e:	6029      	str	r1, [r5, #0]
 8005b90:	0605      	lsls	r5, r0, #24
 8005b92:	d501      	bpl.n	8005b98 <_printf_i+0xe8>
 8005b94:	681e      	ldr	r6, [r3, #0]
 8005b96:	e002      	b.n	8005b9e <_printf_i+0xee>
 8005b98:	0641      	lsls	r1, r0, #25
 8005b9a:	d5fb      	bpl.n	8005b94 <_printf_i+0xe4>
 8005b9c:	881e      	ldrh	r6, [r3, #0]
 8005b9e:	4853      	ldr	r0, [pc, #332]	; (8005cec <_printf_i+0x23c>)
 8005ba0:	2f6f      	cmp	r7, #111	; 0x6f
 8005ba2:	bf0c      	ite	eq
 8005ba4:	2308      	moveq	r3, #8
 8005ba6:	230a      	movne	r3, #10
 8005ba8:	2100      	movs	r1, #0
 8005baa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bae:	6865      	ldr	r5, [r4, #4]
 8005bb0:	60a5      	str	r5, [r4, #8]
 8005bb2:	2d00      	cmp	r5, #0
 8005bb4:	bfa2      	ittt	ge
 8005bb6:	6821      	ldrge	r1, [r4, #0]
 8005bb8:	f021 0104 	bicge.w	r1, r1, #4
 8005bbc:	6021      	strge	r1, [r4, #0]
 8005bbe:	b90e      	cbnz	r6, 8005bc4 <_printf_i+0x114>
 8005bc0:	2d00      	cmp	r5, #0
 8005bc2:	d04b      	beq.n	8005c5c <_printf_i+0x1ac>
 8005bc4:	4615      	mov	r5, r2
 8005bc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bca:	fb03 6711 	mls	r7, r3, r1, r6
 8005bce:	5dc7      	ldrb	r7, [r0, r7]
 8005bd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bd4:	4637      	mov	r7, r6
 8005bd6:	42bb      	cmp	r3, r7
 8005bd8:	460e      	mov	r6, r1
 8005bda:	d9f4      	bls.n	8005bc6 <_printf_i+0x116>
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d10b      	bne.n	8005bf8 <_printf_i+0x148>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	07de      	lsls	r6, r3, #31
 8005be4:	d508      	bpl.n	8005bf8 <_printf_i+0x148>
 8005be6:	6923      	ldr	r3, [r4, #16]
 8005be8:	6861      	ldr	r1, [r4, #4]
 8005bea:	4299      	cmp	r1, r3
 8005bec:	bfde      	ittt	le
 8005bee:	2330      	movle	r3, #48	; 0x30
 8005bf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bf8:	1b52      	subs	r2, r2, r5
 8005bfa:	6122      	str	r2, [r4, #16]
 8005bfc:	f8cd a000 	str.w	sl, [sp]
 8005c00:	464b      	mov	r3, r9
 8005c02:	aa03      	add	r2, sp, #12
 8005c04:	4621      	mov	r1, r4
 8005c06:	4640      	mov	r0, r8
 8005c08:	f7ff fee4 	bl	80059d4 <_printf_common>
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d14a      	bne.n	8005ca6 <_printf_i+0x1f6>
 8005c10:	f04f 30ff 	mov.w	r0, #4294967295
 8005c14:	b004      	add	sp, #16
 8005c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	f043 0320 	orr.w	r3, r3, #32
 8005c20:	6023      	str	r3, [r4, #0]
 8005c22:	4833      	ldr	r0, [pc, #204]	; (8005cf0 <_printf_i+0x240>)
 8005c24:	2778      	movs	r7, #120	; 0x78
 8005c26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	6829      	ldr	r1, [r5, #0]
 8005c2e:	061f      	lsls	r7, r3, #24
 8005c30:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c34:	d402      	bmi.n	8005c3c <_printf_i+0x18c>
 8005c36:	065f      	lsls	r7, r3, #25
 8005c38:	bf48      	it	mi
 8005c3a:	b2b6      	uxthmi	r6, r6
 8005c3c:	07df      	lsls	r7, r3, #31
 8005c3e:	bf48      	it	mi
 8005c40:	f043 0320 	orrmi.w	r3, r3, #32
 8005c44:	6029      	str	r1, [r5, #0]
 8005c46:	bf48      	it	mi
 8005c48:	6023      	strmi	r3, [r4, #0]
 8005c4a:	b91e      	cbnz	r6, 8005c54 <_printf_i+0x1a4>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	f023 0320 	bic.w	r3, r3, #32
 8005c52:	6023      	str	r3, [r4, #0]
 8005c54:	2310      	movs	r3, #16
 8005c56:	e7a7      	b.n	8005ba8 <_printf_i+0xf8>
 8005c58:	4824      	ldr	r0, [pc, #144]	; (8005cec <_printf_i+0x23c>)
 8005c5a:	e7e4      	b.n	8005c26 <_printf_i+0x176>
 8005c5c:	4615      	mov	r5, r2
 8005c5e:	e7bd      	b.n	8005bdc <_printf_i+0x12c>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	6826      	ldr	r6, [r4, #0]
 8005c64:	6961      	ldr	r1, [r4, #20]
 8005c66:	1d18      	adds	r0, r3, #4
 8005c68:	6028      	str	r0, [r5, #0]
 8005c6a:	0635      	lsls	r5, r6, #24
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	d501      	bpl.n	8005c74 <_printf_i+0x1c4>
 8005c70:	6019      	str	r1, [r3, #0]
 8005c72:	e002      	b.n	8005c7a <_printf_i+0x1ca>
 8005c74:	0670      	lsls	r0, r6, #25
 8005c76:	d5fb      	bpl.n	8005c70 <_printf_i+0x1c0>
 8005c78:	8019      	strh	r1, [r3, #0]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	6123      	str	r3, [r4, #16]
 8005c7e:	4615      	mov	r5, r2
 8005c80:	e7bc      	b.n	8005bfc <_printf_i+0x14c>
 8005c82:	682b      	ldr	r3, [r5, #0]
 8005c84:	1d1a      	adds	r2, r3, #4
 8005c86:	602a      	str	r2, [r5, #0]
 8005c88:	681d      	ldr	r5, [r3, #0]
 8005c8a:	6862      	ldr	r2, [r4, #4]
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f7fa fa9e 	bl	80001d0 <memchr>
 8005c94:	b108      	cbz	r0, 8005c9a <_printf_i+0x1ea>
 8005c96:	1b40      	subs	r0, r0, r5
 8005c98:	6060      	str	r0, [r4, #4]
 8005c9a:	6863      	ldr	r3, [r4, #4]
 8005c9c:	6123      	str	r3, [r4, #16]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ca4:	e7aa      	b.n	8005bfc <_printf_i+0x14c>
 8005ca6:	6923      	ldr	r3, [r4, #16]
 8005ca8:	462a      	mov	r2, r5
 8005caa:	4649      	mov	r1, r9
 8005cac:	4640      	mov	r0, r8
 8005cae:	47d0      	blx	sl
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d0ad      	beq.n	8005c10 <_printf_i+0x160>
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	079b      	lsls	r3, r3, #30
 8005cb8:	d413      	bmi.n	8005ce2 <_printf_i+0x232>
 8005cba:	68e0      	ldr	r0, [r4, #12]
 8005cbc:	9b03      	ldr	r3, [sp, #12]
 8005cbe:	4298      	cmp	r0, r3
 8005cc0:	bfb8      	it	lt
 8005cc2:	4618      	movlt	r0, r3
 8005cc4:	e7a6      	b.n	8005c14 <_printf_i+0x164>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4632      	mov	r2, r6
 8005cca:	4649      	mov	r1, r9
 8005ccc:	4640      	mov	r0, r8
 8005cce:	47d0      	blx	sl
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d09d      	beq.n	8005c10 <_printf_i+0x160>
 8005cd4:	3501      	adds	r5, #1
 8005cd6:	68e3      	ldr	r3, [r4, #12]
 8005cd8:	9903      	ldr	r1, [sp, #12]
 8005cda:	1a5b      	subs	r3, r3, r1
 8005cdc:	42ab      	cmp	r3, r5
 8005cde:	dcf2      	bgt.n	8005cc6 <_printf_i+0x216>
 8005ce0:	e7eb      	b.n	8005cba <_printf_i+0x20a>
 8005ce2:	2500      	movs	r5, #0
 8005ce4:	f104 0619 	add.w	r6, r4, #25
 8005ce8:	e7f5      	b.n	8005cd6 <_printf_i+0x226>
 8005cea:	bf00      	nop
 8005cec:	08007e1e 	.word	0x08007e1e
 8005cf0:	08007e2f 	.word	0x08007e2f

08005cf4 <std>:
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	b510      	push	{r4, lr}
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	e9c0 3300 	strd	r3, r3, [r0]
 8005cfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d02:	6083      	str	r3, [r0, #8]
 8005d04:	8181      	strh	r1, [r0, #12]
 8005d06:	6643      	str	r3, [r0, #100]	; 0x64
 8005d08:	81c2      	strh	r2, [r0, #14]
 8005d0a:	6183      	str	r3, [r0, #24]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	2208      	movs	r2, #8
 8005d10:	305c      	adds	r0, #92	; 0x5c
 8005d12:	f000 f8f4 	bl	8005efe <memset>
 8005d16:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <std+0x58>)
 8005d18:	6263      	str	r3, [r4, #36]	; 0x24
 8005d1a:	4b0d      	ldr	r3, [pc, #52]	; (8005d50 <std+0x5c>)
 8005d1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d1e:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <std+0x60>)
 8005d20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d22:	4b0d      	ldr	r3, [pc, #52]	; (8005d58 <std+0x64>)
 8005d24:	6323      	str	r3, [r4, #48]	; 0x30
 8005d26:	4b0d      	ldr	r3, [pc, #52]	; (8005d5c <std+0x68>)
 8005d28:	6224      	str	r4, [r4, #32]
 8005d2a:	429c      	cmp	r4, r3
 8005d2c:	d006      	beq.n	8005d3c <std+0x48>
 8005d2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005d32:	4294      	cmp	r4, r2
 8005d34:	d002      	beq.n	8005d3c <std+0x48>
 8005d36:	33d0      	adds	r3, #208	; 0xd0
 8005d38:	429c      	cmp	r4, r3
 8005d3a:	d105      	bne.n	8005d48 <std+0x54>
 8005d3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d44:	f000 b958 	b.w	8005ff8 <__retarget_lock_init_recursive>
 8005d48:	bd10      	pop	{r4, pc}
 8005d4a:	bf00      	nop
 8005d4c:	08005e79 	.word	0x08005e79
 8005d50:	08005e9b 	.word	0x08005e9b
 8005d54:	08005ed3 	.word	0x08005ed3
 8005d58:	08005ef7 	.word	0x08005ef7
 8005d5c:	200003dc 	.word	0x200003dc

08005d60 <stdio_exit_handler>:
 8005d60:	4a02      	ldr	r2, [pc, #8]	; (8005d6c <stdio_exit_handler+0xc>)
 8005d62:	4903      	ldr	r1, [pc, #12]	; (8005d70 <stdio_exit_handler+0x10>)
 8005d64:	4803      	ldr	r0, [pc, #12]	; (8005d74 <stdio_exit_handler+0x14>)
 8005d66:	f000 b869 	b.w	8005e3c <_fwalk_sglue>
 8005d6a:	bf00      	nop
 8005d6c:	2000000c 	.word	0x2000000c
 8005d70:	080076f9 	.word	0x080076f9
 8005d74:	20000018 	.word	0x20000018

08005d78 <cleanup_stdio>:
 8005d78:	6841      	ldr	r1, [r0, #4]
 8005d7a:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <cleanup_stdio+0x34>)
 8005d7c:	4299      	cmp	r1, r3
 8005d7e:	b510      	push	{r4, lr}
 8005d80:	4604      	mov	r4, r0
 8005d82:	d001      	beq.n	8005d88 <cleanup_stdio+0x10>
 8005d84:	f001 fcb8 	bl	80076f8 <_fflush_r>
 8005d88:	68a1      	ldr	r1, [r4, #8]
 8005d8a:	4b09      	ldr	r3, [pc, #36]	; (8005db0 <cleanup_stdio+0x38>)
 8005d8c:	4299      	cmp	r1, r3
 8005d8e:	d002      	beq.n	8005d96 <cleanup_stdio+0x1e>
 8005d90:	4620      	mov	r0, r4
 8005d92:	f001 fcb1 	bl	80076f8 <_fflush_r>
 8005d96:	68e1      	ldr	r1, [r4, #12]
 8005d98:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <cleanup_stdio+0x3c>)
 8005d9a:	4299      	cmp	r1, r3
 8005d9c:	d004      	beq.n	8005da8 <cleanup_stdio+0x30>
 8005d9e:	4620      	mov	r0, r4
 8005da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005da4:	f001 bca8 	b.w	80076f8 <_fflush_r>
 8005da8:	bd10      	pop	{r4, pc}
 8005daa:	bf00      	nop
 8005dac:	200003dc 	.word	0x200003dc
 8005db0:	20000444 	.word	0x20000444
 8005db4:	200004ac 	.word	0x200004ac

08005db8 <global_stdio_init.part.0>:
 8005db8:	b510      	push	{r4, lr}
 8005dba:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <global_stdio_init.part.0+0x30>)
 8005dbc:	4c0b      	ldr	r4, [pc, #44]	; (8005dec <global_stdio_init.part.0+0x34>)
 8005dbe:	4a0c      	ldr	r2, [pc, #48]	; (8005df0 <global_stdio_init.part.0+0x38>)
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2104      	movs	r1, #4
 8005dc8:	f7ff ff94 	bl	8005cf4 <std>
 8005dcc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	2109      	movs	r1, #9
 8005dd4:	f7ff ff8e 	bl	8005cf4 <std>
 8005dd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005ddc:	2202      	movs	r2, #2
 8005dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005de2:	2112      	movs	r1, #18
 8005de4:	f7ff bf86 	b.w	8005cf4 <std>
 8005de8:	20000514 	.word	0x20000514
 8005dec:	200003dc 	.word	0x200003dc
 8005df0:	08005d61 	.word	0x08005d61

08005df4 <__sfp_lock_acquire>:
 8005df4:	4801      	ldr	r0, [pc, #4]	; (8005dfc <__sfp_lock_acquire+0x8>)
 8005df6:	f000 b900 	b.w	8005ffa <__retarget_lock_acquire_recursive>
 8005dfa:	bf00      	nop
 8005dfc:	2000051d 	.word	0x2000051d

08005e00 <__sfp_lock_release>:
 8005e00:	4801      	ldr	r0, [pc, #4]	; (8005e08 <__sfp_lock_release+0x8>)
 8005e02:	f000 b8fb 	b.w	8005ffc <__retarget_lock_release_recursive>
 8005e06:	bf00      	nop
 8005e08:	2000051d 	.word	0x2000051d

08005e0c <__sinit>:
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	4604      	mov	r4, r0
 8005e10:	f7ff fff0 	bl	8005df4 <__sfp_lock_acquire>
 8005e14:	6a23      	ldr	r3, [r4, #32]
 8005e16:	b11b      	cbz	r3, 8005e20 <__sinit+0x14>
 8005e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e1c:	f7ff bff0 	b.w	8005e00 <__sfp_lock_release>
 8005e20:	4b04      	ldr	r3, [pc, #16]	; (8005e34 <__sinit+0x28>)
 8005e22:	6223      	str	r3, [r4, #32]
 8005e24:	4b04      	ldr	r3, [pc, #16]	; (8005e38 <__sinit+0x2c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1f5      	bne.n	8005e18 <__sinit+0xc>
 8005e2c:	f7ff ffc4 	bl	8005db8 <global_stdio_init.part.0>
 8005e30:	e7f2      	b.n	8005e18 <__sinit+0xc>
 8005e32:	bf00      	nop
 8005e34:	08005d79 	.word	0x08005d79
 8005e38:	20000514 	.word	0x20000514

08005e3c <_fwalk_sglue>:
 8005e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e40:	4607      	mov	r7, r0
 8005e42:	4688      	mov	r8, r1
 8005e44:	4614      	mov	r4, r2
 8005e46:	2600      	movs	r6, #0
 8005e48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e4c:	f1b9 0901 	subs.w	r9, r9, #1
 8005e50:	d505      	bpl.n	8005e5e <_fwalk_sglue+0x22>
 8005e52:	6824      	ldr	r4, [r4, #0]
 8005e54:	2c00      	cmp	r4, #0
 8005e56:	d1f7      	bne.n	8005e48 <_fwalk_sglue+0xc>
 8005e58:	4630      	mov	r0, r6
 8005e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e5e:	89ab      	ldrh	r3, [r5, #12]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d907      	bls.n	8005e74 <_fwalk_sglue+0x38>
 8005e64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	d003      	beq.n	8005e74 <_fwalk_sglue+0x38>
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	4638      	mov	r0, r7
 8005e70:	47c0      	blx	r8
 8005e72:	4306      	orrs	r6, r0
 8005e74:	3568      	adds	r5, #104	; 0x68
 8005e76:	e7e9      	b.n	8005e4c <_fwalk_sglue+0x10>

08005e78 <__sread>:
 8005e78:	b510      	push	{r4, lr}
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e80:	f000 f86c 	bl	8005f5c <_read_r>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	bfab      	itete	ge
 8005e88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8005e8c:	181b      	addge	r3, r3, r0
 8005e8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e92:	bfac      	ite	ge
 8005e94:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e96:	81a3      	strhlt	r3, [r4, #12]
 8005e98:	bd10      	pop	{r4, pc}

08005e9a <__swrite>:
 8005e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e9e:	461f      	mov	r7, r3
 8005ea0:	898b      	ldrh	r3, [r1, #12]
 8005ea2:	05db      	lsls	r3, r3, #23
 8005ea4:	4605      	mov	r5, r0
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	4616      	mov	r6, r2
 8005eaa:	d505      	bpl.n	8005eb8 <__swrite+0x1e>
 8005eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f000 f840 	bl	8005f38 <_lseek_r>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ebe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	4632      	mov	r2, r6
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	4628      	mov	r0, r5
 8005eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ece:	f000 b857 	b.w	8005f80 <_write_r>

08005ed2 <__sseek>:
 8005ed2:	b510      	push	{r4, lr}
 8005ed4:	460c      	mov	r4, r1
 8005ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eda:	f000 f82d 	bl	8005f38 <_lseek_r>
 8005ede:	1c43      	adds	r3, r0, #1
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	bf15      	itete	ne
 8005ee4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005eea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005eee:	81a3      	strheq	r3, [r4, #12]
 8005ef0:	bf18      	it	ne
 8005ef2:	81a3      	strhne	r3, [r4, #12]
 8005ef4:	bd10      	pop	{r4, pc}

08005ef6 <__sclose>:
 8005ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005efa:	f000 b80d 	b.w	8005f18 <_close_r>

08005efe <memset>:
 8005efe:	4402      	add	r2, r0
 8005f00:	4603      	mov	r3, r0
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d100      	bne.n	8005f08 <memset+0xa>
 8005f06:	4770      	bx	lr
 8005f08:	f803 1b01 	strb.w	r1, [r3], #1
 8005f0c:	e7f9      	b.n	8005f02 <memset+0x4>
	...

08005f10 <_localeconv_r>:
 8005f10:	4800      	ldr	r0, [pc, #0]	; (8005f14 <_localeconv_r+0x4>)
 8005f12:	4770      	bx	lr
 8005f14:	20000158 	.word	0x20000158

08005f18 <_close_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	4d06      	ldr	r5, [pc, #24]	; (8005f34 <_close_r+0x1c>)
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	4604      	mov	r4, r0
 8005f20:	4608      	mov	r0, r1
 8005f22:	602b      	str	r3, [r5, #0]
 8005f24:	f7fb fd93 	bl	8001a4e <_close>
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	d102      	bne.n	8005f32 <_close_r+0x1a>
 8005f2c:	682b      	ldr	r3, [r5, #0]
 8005f2e:	b103      	cbz	r3, 8005f32 <_close_r+0x1a>
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	bd38      	pop	{r3, r4, r5, pc}
 8005f34:	20000518 	.word	0x20000518

08005f38 <_lseek_r>:
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	4d07      	ldr	r5, [pc, #28]	; (8005f58 <_lseek_r+0x20>)
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	4608      	mov	r0, r1
 8005f40:	4611      	mov	r1, r2
 8005f42:	2200      	movs	r2, #0
 8005f44:	602a      	str	r2, [r5, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	f7fb fda8 	bl	8001a9c <_lseek>
 8005f4c:	1c43      	adds	r3, r0, #1
 8005f4e:	d102      	bne.n	8005f56 <_lseek_r+0x1e>
 8005f50:	682b      	ldr	r3, [r5, #0]
 8005f52:	b103      	cbz	r3, 8005f56 <_lseek_r+0x1e>
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	bd38      	pop	{r3, r4, r5, pc}
 8005f58:	20000518 	.word	0x20000518

08005f5c <_read_r>:
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	4d07      	ldr	r5, [pc, #28]	; (8005f7c <_read_r+0x20>)
 8005f60:	4604      	mov	r4, r0
 8005f62:	4608      	mov	r0, r1
 8005f64:	4611      	mov	r1, r2
 8005f66:	2200      	movs	r2, #0
 8005f68:	602a      	str	r2, [r5, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f7fb fd36 	bl	80019dc <_read>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_read_r+0x1e>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_read_r+0x1e>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	20000518 	.word	0x20000518

08005f80 <_write_r>:
 8005f80:	b538      	push	{r3, r4, r5, lr}
 8005f82:	4d07      	ldr	r5, [pc, #28]	; (8005fa0 <_write_r+0x20>)
 8005f84:	4604      	mov	r4, r0
 8005f86:	4608      	mov	r0, r1
 8005f88:	4611      	mov	r1, r2
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	602a      	str	r2, [r5, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f7fb fd41 	bl	8001a16 <_write>
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	d102      	bne.n	8005f9e <_write_r+0x1e>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	b103      	cbz	r3, 8005f9e <_write_r+0x1e>
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	20000518 	.word	0x20000518

08005fa4 <__errno>:
 8005fa4:	4b01      	ldr	r3, [pc, #4]	; (8005fac <__errno+0x8>)
 8005fa6:	6818      	ldr	r0, [r3, #0]
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	20000064 	.word	0x20000064

08005fb0 <__libc_init_array>:
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	4d0d      	ldr	r5, [pc, #52]	; (8005fe8 <__libc_init_array+0x38>)
 8005fb4:	4c0d      	ldr	r4, [pc, #52]	; (8005fec <__libc_init_array+0x3c>)
 8005fb6:	1b64      	subs	r4, r4, r5
 8005fb8:	10a4      	asrs	r4, r4, #2
 8005fba:	2600      	movs	r6, #0
 8005fbc:	42a6      	cmp	r6, r4
 8005fbe:	d109      	bne.n	8005fd4 <__libc_init_array+0x24>
 8005fc0:	4d0b      	ldr	r5, [pc, #44]	; (8005ff0 <__libc_init_array+0x40>)
 8005fc2:	4c0c      	ldr	r4, [pc, #48]	; (8005ff4 <__libc_init_array+0x44>)
 8005fc4:	f001 feec 	bl	8007da0 <_init>
 8005fc8:	1b64      	subs	r4, r4, r5
 8005fca:	10a4      	asrs	r4, r4, #2
 8005fcc:	2600      	movs	r6, #0
 8005fce:	42a6      	cmp	r6, r4
 8005fd0:	d105      	bne.n	8005fde <__libc_init_array+0x2e>
 8005fd2:	bd70      	pop	{r4, r5, r6, pc}
 8005fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd8:	4798      	blx	r3
 8005fda:	3601      	adds	r6, #1
 8005fdc:	e7ee      	b.n	8005fbc <__libc_init_array+0xc>
 8005fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fe2:	4798      	blx	r3
 8005fe4:	3601      	adds	r6, #1
 8005fe6:	e7f2      	b.n	8005fce <__libc_init_array+0x1e>
 8005fe8:	08008184 	.word	0x08008184
 8005fec:	08008184 	.word	0x08008184
 8005ff0:	08008184 	.word	0x08008184
 8005ff4:	08008188 	.word	0x08008188

08005ff8 <__retarget_lock_init_recursive>:
 8005ff8:	4770      	bx	lr

08005ffa <__retarget_lock_acquire_recursive>:
 8005ffa:	4770      	bx	lr

08005ffc <__retarget_lock_release_recursive>:
 8005ffc:	4770      	bx	lr

08005ffe <quorem>:
 8005ffe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006002:	6903      	ldr	r3, [r0, #16]
 8006004:	690c      	ldr	r4, [r1, #16]
 8006006:	42a3      	cmp	r3, r4
 8006008:	4607      	mov	r7, r0
 800600a:	db7e      	blt.n	800610a <quorem+0x10c>
 800600c:	3c01      	subs	r4, #1
 800600e:	f101 0814 	add.w	r8, r1, #20
 8006012:	f100 0514 	add.w	r5, r0, #20
 8006016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800601a:	9301      	str	r3, [sp, #4]
 800601c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006020:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006024:	3301      	adds	r3, #1
 8006026:	429a      	cmp	r2, r3
 8006028:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800602c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006030:	fbb2 f6f3 	udiv	r6, r2, r3
 8006034:	d331      	bcc.n	800609a <quorem+0x9c>
 8006036:	f04f 0e00 	mov.w	lr, #0
 800603a:	4640      	mov	r0, r8
 800603c:	46ac      	mov	ip, r5
 800603e:	46f2      	mov	sl, lr
 8006040:	f850 2b04 	ldr.w	r2, [r0], #4
 8006044:	b293      	uxth	r3, r2
 8006046:	fb06 e303 	mla	r3, r6, r3, lr
 800604a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800604e:	0c1a      	lsrs	r2, r3, #16
 8006050:	b29b      	uxth	r3, r3
 8006052:	ebaa 0303 	sub.w	r3, sl, r3
 8006056:	f8dc a000 	ldr.w	sl, [ip]
 800605a:	fa13 f38a 	uxtah	r3, r3, sl
 800605e:	fb06 220e 	mla	r2, r6, lr, r2
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	9b00      	ldr	r3, [sp, #0]
 8006066:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800606a:	b292      	uxth	r2, r2
 800606c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006070:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006074:	f8bd 3000 	ldrh.w	r3, [sp]
 8006078:	4581      	cmp	r9, r0
 800607a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800607e:	f84c 3b04 	str.w	r3, [ip], #4
 8006082:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006086:	d2db      	bcs.n	8006040 <quorem+0x42>
 8006088:	f855 300b 	ldr.w	r3, [r5, fp]
 800608c:	b92b      	cbnz	r3, 800609a <quorem+0x9c>
 800608e:	9b01      	ldr	r3, [sp, #4]
 8006090:	3b04      	subs	r3, #4
 8006092:	429d      	cmp	r5, r3
 8006094:	461a      	mov	r2, r3
 8006096:	d32c      	bcc.n	80060f2 <quorem+0xf4>
 8006098:	613c      	str	r4, [r7, #16]
 800609a:	4638      	mov	r0, r7
 800609c:	f001 f9a6 	bl	80073ec <__mcmp>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	db22      	blt.n	80060ea <quorem+0xec>
 80060a4:	3601      	adds	r6, #1
 80060a6:	4629      	mov	r1, r5
 80060a8:	2000      	movs	r0, #0
 80060aa:	f858 2b04 	ldr.w	r2, [r8], #4
 80060ae:	f8d1 c000 	ldr.w	ip, [r1]
 80060b2:	b293      	uxth	r3, r2
 80060b4:	1ac3      	subs	r3, r0, r3
 80060b6:	0c12      	lsrs	r2, r2, #16
 80060b8:	fa13 f38c 	uxtah	r3, r3, ip
 80060bc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80060c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060ca:	45c1      	cmp	r9, r8
 80060cc:	f841 3b04 	str.w	r3, [r1], #4
 80060d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80060d4:	d2e9      	bcs.n	80060aa <quorem+0xac>
 80060d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060de:	b922      	cbnz	r2, 80060ea <quorem+0xec>
 80060e0:	3b04      	subs	r3, #4
 80060e2:	429d      	cmp	r5, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	d30a      	bcc.n	80060fe <quorem+0x100>
 80060e8:	613c      	str	r4, [r7, #16]
 80060ea:	4630      	mov	r0, r6
 80060ec:	b003      	add	sp, #12
 80060ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f2:	6812      	ldr	r2, [r2, #0]
 80060f4:	3b04      	subs	r3, #4
 80060f6:	2a00      	cmp	r2, #0
 80060f8:	d1ce      	bne.n	8006098 <quorem+0x9a>
 80060fa:	3c01      	subs	r4, #1
 80060fc:	e7c9      	b.n	8006092 <quorem+0x94>
 80060fe:	6812      	ldr	r2, [r2, #0]
 8006100:	3b04      	subs	r3, #4
 8006102:	2a00      	cmp	r2, #0
 8006104:	d1f0      	bne.n	80060e8 <quorem+0xea>
 8006106:	3c01      	subs	r4, #1
 8006108:	e7eb      	b.n	80060e2 <quorem+0xe4>
 800610a:	2000      	movs	r0, #0
 800610c:	e7ee      	b.n	80060ec <quorem+0xee>
	...

08006110 <_dtoa_r>:
 8006110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006114:	ed2d 8b04 	vpush	{d8-d9}
 8006118:	69c5      	ldr	r5, [r0, #28]
 800611a:	b093      	sub	sp, #76	; 0x4c
 800611c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006120:	ec57 6b10 	vmov	r6, r7, d0
 8006124:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006128:	9107      	str	r1, [sp, #28]
 800612a:	4604      	mov	r4, r0
 800612c:	920a      	str	r2, [sp, #40]	; 0x28
 800612e:	930d      	str	r3, [sp, #52]	; 0x34
 8006130:	b975      	cbnz	r5, 8006150 <_dtoa_r+0x40>
 8006132:	2010      	movs	r0, #16
 8006134:	f000 fe2a 	bl	8006d8c <malloc>
 8006138:	4602      	mov	r2, r0
 800613a:	61e0      	str	r0, [r4, #28]
 800613c:	b920      	cbnz	r0, 8006148 <_dtoa_r+0x38>
 800613e:	4bae      	ldr	r3, [pc, #696]	; (80063f8 <_dtoa_r+0x2e8>)
 8006140:	21ef      	movs	r1, #239	; 0xef
 8006142:	48ae      	ldr	r0, [pc, #696]	; (80063fc <_dtoa_r+0x2ec>)
 8006144:	f001 fb1e 	bl	8007784 <__assert_func>
 8006148:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800614c:	6005      	str	r5, [r0, #0]
 800614e:	60c5      	str	r5, [r0, #12]
 8006150:	69e3      	ldr	r3, [r4, #28]
 8006152:	6819      	ldr	r1, [r3, #0]
 8006154:	b151      	cbz	r1, 800616c <_dtoa_r+0x5c>
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	604a      	str	r2, [r1, #4]
 800615a:	2301      	movs	r3, #1
 800615c:	4093      	lsls	r3, r2
 800615e:	608b      	str	r3, [r1, #8]
 8006160:	4620      	mov	r0, r4
 8006162:	f000 ff07 	bl	8006f74 <_Bfree>
 8006166:	69e3      	ldr	r3, [r4, #28]
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	1e3b      	subs	r3, r7, #0
 800616e:	bfbb      	ittet	lt
 8006170:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006174:	9303      	strlt	r3, [sp, #12]
 8006176:	2300      	movge	r3, #0
 8006178:	2201      	movlt	r2, #1
 800617a:	bfac      	ite	ge
 800617c:	f8c8 3000 	strge.w	r3, [r8]
 8006180:	f8c8 2000 	strlt.w	r2, [r8]
 8006184:	4b9e      	ldr	r3, [pc, #632]	; (8006400 <_dtoa_r+0x2f0>)
 8006186:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800618a:	ea33 0308 	bics.w	r3, r3, r8
 800618e:	d11b      	bne.n	80061c8 <_dtoa_r+0xb8>
 8006190:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006192:	f242 730f 	movw	r3, #9999	; 0x270f
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800619c:	4333      	orrs	r3, r6
 800619e:	f000 8593 	beq.w	8006cc8 <_dtoa_r+0xbb8>
 80061a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061a4:	b963      	cbnz	r3, 80061c0 <_dtoa_r+0xb0>
 80061a6:	4b97      	ldr	r3, [pc, #604]	; (8006404 <_dtoa_r+0x2f4>)
 80061a8:	e027      	b.n	80061fa <_dtoa_r+0xea>
 80061aa:	4b97      	ldr	r3, [pc, #604]	; (8006408 <_dtoa_r+0x2f8>)
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	3308      	adds	r3, #8
 80061b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061b2:	6013      	str	r3, [r2, #0]
 80061b4:	9800      	ldr	r0, [sp, #0]
 80061b6:	b013      	add	sp, #76	; 0x4c
 80061b8:	ecbd 8b04 	vpop	{d8-d9}
 80061bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c0:	4b90      	ldr	r3, [pc, #576]	; (8006404 <_dtoa_r+0x2f4>)
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	3303      	adds	r3, #3
 80061c6:	e7f3      	b.n	80061b0 <_dtoa_r+0xa0>
 80061c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061cc:	2200      	movs	r2, #0
 80061ce:	ec51 0b17 	vmov	r0, r1, d7
 80061d2:	eeb0 8a47 	vmov.f32	s16, s14
 80061d6:	eef0 8a67 	vmov.f32	s17, s15
 80061da:	2300      	movs	r3, #0
 80061dc:	f7fa fc74 	bl	8000ac8 <__aeabi_dcmpeq>
 80061e0:	4681      	mov	r9, r0
 80061e2:	b160      	cbz	r0, 80061fe <_dtoa_r+0xee>
 80061e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061e6:	2301      	movs	r3, #1
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 8568 	beq.w	8006cc2 <_dtoa_r+0xbb2>
 80061f2:	4b86      	ldr	r3, [pc, #536]	; (800640c <_dtoa_r+0x2fc>)
 80061f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061f6:	6013      	str	r3, [r2, #0]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	e7da      	b.n	80061b4 <_dtoa_r+0xa4>
 80061fe:	aa10      	add	r2, sp, #64	; 0x40
 8006200:	a911      	add	r1, sp, #68	; 0x44
 8006202:	4620      	mov	r0, r4
 8006204:	eeb0 0a48 	vmov.f32	s0, s16
 8006208:	eef0 0a68 	vmov.f32	s1, s17
 800620c:	f001 f994 	bl	8007538 <__d2b>
 8006210:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006214:	4682      	mov	sl, r0
 8006216:	2d00      	cmp	r5, #0
 8006218:	d07f      	beq.n	800631a <_dtoa_r+0x20a>
 800621a:	ee18 3a90 	vmov	r3, s17
 800621e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006222:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006226:	ec51 0b18 	vmov	r0, r1, d8
 800622a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800622e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006232:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006236:	4619      	mov	r1, r3
 8006238:	2200      	movs	r2, #0
 800623a:	4b75      	ldr	r3, [pc, #468]	; (8006410 <_dtoa_r+0x300>)
 800623c:	f7fa f824 	bl	8000288 <__aeabi_dsub>
 8006240:	a367      	add	r3, pc, #412	; (adr r3, 80063e0 <_dtoa_r+0x2d0>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f7fa f9d7 	bl	80005f8 <__aeabi_dmul>
 800624a:	a367      	add	r3, pc, #412	; (adr r3, 80063e8 <_dtoa_r+0x2d8>)
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f7fa f81c 	bl	800028c <__adddf3>
 8006254:	4606      	mov	r6, r0
 8006256:	4628      	mov	r0, r5
 8006258:	460f      	mov	r7, r1
 800625a:	f7fa f963 	bl	8000524 <__aeabi_i2d>
 800625e:	a364      	add	r3, pc, #400	; (adr r3, 80063f0 <_dtoa_r+0x2e0>)
 8006260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006264:	f7fa f9c8 	bl	80005f8 <__aeabi_dmul>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	4630      	mov	r0, r6
 800626e:	4639      	mov	r1, r7
 8006270:	f7fa f80c 	bl	800028c <__adddf3>
 8006274:	4606      	mov	r6, r0
 8006276:	460f      	mov	r7, r1
 8006278:	f7fa fc6e 	bl	8000b58 <__aeabi_d2iz>
 800627c:	2200      	movs	r2, #0
 800627e:	4683      	mov	fp, r0
 8006280:	2300      	movs	r3, #0
 8006282:	4630      	mov	r0, r6
 8006284:	4639      	mov	r1, r7
 8006286:	f7fa fc29 	bl	8000adc <__aeabi_dcmplt>
 800628a:	b148      	cbz	r0, 80062a0 <_dtoa_r+0x190>
 800628c:	4658      	mov	r0, fp
 800628e:	f7fa f949 	bl	8000524 <__aeabi_i2d>
 8006292:	4632      	mov	r2, r6
 8006294:	463b      	mov	r3, r7
 8006296:	f7fa fc17 	bl	8000ac8 <__aeabi_dcmpeq>
 800629a:	b908      	cbnz	r0, 80062a0 <_dtoa_r+0x190>
 800629c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062a0:	f1bb 0f16 	cmp.w	fp, #22
 80062a4:	d857      	bhi.n	8006356 <_dtoa_r+0x246>
 80062a6:	4b5b      	ldr	r3, [pc, #364]	; (8006414 <_dtoa_r+0x304>)
 80062a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	ec51 0b18 	vmov	r0, r1, d8
 80062b4:	f7fa fc12 	bl	8000adc <__aeabi_dcmplt>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d04e      	beq.n	800635a <_dtoa_r+0x24a>
 80062bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062c0:	2300      	movs	r3, #0
 80062c2:	930c      	str	r3, [sp, #48]	; 0x30
 80062c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062c6:	1b5b      	subs	r3, r3, r5
 80062c8:	1e5a      	subs	r2, r3, #1
 80062ca:	bf45      	ittet	mi
 80062cc:	f1c3 0301 	rsbmi	r3, r3, #1
 80062d0:	9305      	strmi	r3, [sp, #20]
 80062d2:	2300      	movpl	r3, #0
 80062d4:	2300      	movmi	r3, #0
 80062d6:	9206      	str	r2, [sp, #24]
 80062d8:	bf54      	ite	pl
 80062da:	9305      	strpl	r3, [sp, #20]
 80062dc:	9306      	strmi	r3, [sp, #24]
 80062de:	f1bb 0f00 	cmp.w	fp, #0
 80062e2:	db3c      	blt.n	800635e <_dtoa_r+0x24e>
 80062e4:	9b06      	ldr	r3, [sp, #24]
 80062e6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80062ea:	445b      	add	r3, fp
 80062ec:	9306      	str	r3, [sp, #24]
 80062ee:	2300      	movs	r3, #0
 80062f0:	9308      	str	r3, [sp, #32]
 80062f2:	9b07      	ldr	r3, [sp, #28]
 80062f4:	2b09      	cmp	r3, #9
 80062f6:	d868      	bhi.n	80063ca <_dtoa_r+0x2ba>
 80062f8:	2b05      	cmp	r3, #5
 80062fa:	bfc4      	itt	gt
 80062fc:	3b04      	subgt	r3, #4
 80062fe:	9307      	strgt	r3, [sp, #28]
 8006300:	9b07      	ldr	r3, [sp, #28]
 8006302:	f1a3 0302 	sub.w	r3, r3, #2
 8006306:	bfcc      	ite	gt
 8006308:	2500      	movgt	r5, #0
 800630a:	2501      	movle	r5, #1
 800630c:	2b03      	cmp	r3, #3
 800630e:	f200 8085 	bhi.w	800641c <_dtoa_r+0x30c>
 8006312:	e8df f003 	tbb	[pc, r3]
 8006316:	3b2e      	.short	0x3b2e
 8006318:	5839      	.short	0x5839
 800631a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800631e:	441d      	add	r5, r3
 8006320:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006324:	2b20      	cmp	r3, #32
 8006326:	bfc1      	itttt	gt
 8006328:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800632c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006330:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006334:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006338:	bfd6      	itet	le
 800633a:	f1c3 0320 	rsble	r3, r3, #32
 800633e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006342:	fa06 f003 	lslle.w	r0, r6, r3
 8006346:	f7fa f8dd 	bl	8000504 <__aeabi_ui2d>
 800634a:	2201      	movs	r2, #1
 800634c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006350:	3d01      	subs	r5, #1
 8006352:	920e      	str	r2, [sp, #56]	; 0x38
 8006354:	e76f      	b.n	8006236 <_dtoa_r+0x126>
 8006356:	2301      	movs	r3, #1
 8006358:	e7b3      	b.n	80062c2 <_dtoa_r+0x1b2>
 800635a:	900c      	str	r0, [sp, #48]	; 0x30
 800635c:	e7b2      	b.n	80062c4 <_dtoa_r+0x1b4>
 800635e:	9b05      	ldr	r3, [sp, #20]
 8006360:	eba3 030b 	sub.w	r3, r3, fp
 8006364:	9305      	str	r3, [sp, #20]
 8006366:	f1cb 0300 	rsb	r3, fp, #0
 800636a:	9308      	str	r3, [sp, #32]
 800636c:	2300      	movs	r3, #0
 800636e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006370:	e7bf      	b.n	80062f2 <_dtoa_r+0x1e2>
 8006372:	2300      	movs	r3, #0
 8006374:	9309      	str	r3, [sp, #36]	; 0x24
 8006376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006378:	2b00      	cmp	r3, #0
 800637a:	dc52      	bgt.n	8006422 <_dtoa_r+0x312>
 800637c:	2301      	movs	r3, #1
 800637e:	9301      	str	r3, [sp, #4]
 8006380:	9304      	str	r3, [sp, #16]
 8006382:	461a      	mov	r2, r3
 8006384:	920a      	str	r2, [sp, #40]	; 0x28
 8006386:	e00b      	b.n	80063a0 <_dtoa_r+0x290>
 8006388:	2301      	movs	r3, #1
 800638a:	e7f3      	b.n	8006374 <_dtoa_r+0x264>
 800638c:	2300      	movs	r3, #0
 800638e:	9309      	str	r3, [sp, #36]	; 0x24
 8006390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006392:	445b      	add	r3, fp
 8006394:	9301      	str	r3, [sp, #4]
 8006396:	3301      	adds	r3, #1
 8006398:	2b01      	cmp	r3, #1
 800639a:	9304      	str	r3, [sp, #16]
 800639c:	bfb8      	it	lt
 800639e:	2301      	movlt	r3, #1
 80063a0:	69e0      	ldr	r0, [r4, #28]
 80063a2:	2100      	movs	r1, #0
 80063a4:	2204      	movs	r2, #4
 80063a6:	f102 0614 	add.w	r6, r2, #20
 80063aa:	429e      	cmp	r6, r3
 80063ac:	d93d      	bls.n	800642a <_dtoa_r+0x31a>
 80063ae:	6041      	str	r1, [r0, #4]
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 fd9f 	bl	8006ef4 <_Balloc>
 80063b6:	9000      	str	r0, [sp, #0]
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d139      	bne.n	8006430 <_dtoa_r+0x320>
 80063bc:	4b16      	ldr	r3, [pc, #88]	; (8006418 <_dtoa_r+0x308>)
 80063be:	4602      	mov	r2, r0
 80063c0:	f240 11af 	movw	r1, #431	; 0x1af
 80063c4:	e6bd      	b.n	8006142 <_dtoa_r+0x32>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e7e1      	b.n	800638e <_dtoa_r+0x27e>
 80063ca:	2501      	movs	r5, #1
 80063cc:	2300      	movs	r3, #0
 80063ce:	9307      	str	r3, [sp, #28]
 80063d0:	9509      	str	r5, [sp, #36]	; 0x24
 80063d2:	f04f 33ff 	mov.w	r3, #4294967295
 80063d6:	9301      	str	r3, [sp, #4]
 80063d8:	9304      	str	r3, [sp, #16]
 80063da:	2200      	movs	r2, #0
 80063dc:	2312      	movs	r3, #18
 80063de:	e7d1      	b.n	8006384 <_dtoa_r+0x274>
 80063e0:	636f4361 	.word	0x636f4361
 80063e4:	3fd287a7 	.word	0x3fd287a7
 80063e8:	8b60c8b3 	.word	0x8b60c8b3
 80063ec:	3fc68a28 	.word	0x3fc68a28
 80063f0:	509f79fb 	.word	0x509f79fb
 80063f4:	3fd34413 	.word	0x3fd34413
 80063f8:	08007e4d 	.word	0x08007e4d
 80063fc:	08007e64 	.word	0x08007e64
 8006400:	7ff00000 	.word	0x7ff00000
 8006404:	08007e49 	.word	0x08007e49
 8006408:	08007e40 	.word	0x08007e40
 800640c:	08007e1d 	.word	0x08007e1d
 8006410:	3ff80000 	.word	0x3ff80000
 8006414:	08007f50 	.word	0x08007f50
 8006418:	08007ebc 	.word	0x08007ebc
 800641c:	2301      	movs	r3, #1
 800641e:	9309      	str	r3, [sp, #36]	; 0x24
 8006420:	e7d7      	b.n	80063d2 <_dtoa_r+0x2c2>
 8006422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006424:	9301      	str	r3, [sp, #4]
 8006426:	9304      	str	r3, [sp, #16]
 8006428:	e7ba      	b.n	80063a0 <_dtoa_r+0x290>
 800642a:	3101      	adds	r1, #1
 800642c:	0052      	lsls	r2, r2, #1
 800642e:	e7ba      	b.n	80063a6 <_dtoa_r+0x296>
 8006430:	69e3      	ldr	r3, [r4, #28]
 8006432:	9a00      	ldr	r2, [sp, #0]
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	9b04      	ldr	r3, [sp, #16]
 8006438:	2b0e      	cmp	r3, #14
 800643a:	f200 80a8 	bhi.w	800658e <_dtoa_r+0x47e>
 800643e:	2d00      	cmp	r5, #0
 8006440:	f000 80a5 	beq.w	800658e <_dtoa_r+0x47e>
 8006444:	f1bb 0f00 	cmp.w	fp, #0
 8006448:	dd38      	ble.n	80064bc <_dtoa_r+0x3ac>
 800644a:	4bc0      	ldr	r3, [pc, #768]	; (800674c <_dtoa_r+0x63c>)
 800644c:	f00b 020f 	and.w	r2, fp, #15
 8006450:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006454:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006458:	e9d3 6700 	ldrd	r6, r7, [r3]
 800645c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006460:	d019      	beq.n	8006496 <_dtoa_r+0x386>
 8006462:	4bbb      	ldr	r3, [pc, #748]	; (8006750 <_dtoa_r+0x640>)
 8006464:	ec51 0b18 	vmov	r0, r1, d8
 8006468:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800646c:	f7fa f9ee 	bl	800084c <__aeabi_ddiv>
 8006470:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006474:	f008 080f 	and.w	r8, r8, #15
 8006478:	2503      	movs	r5, #3
 800647a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006750 <_dtoa_r+0x640>
 800647e:	f1b8 0f00 	cmp.w	r8, #0
 8006482:	d10a      	bne.n	800649a <_dtoa_r+0x38a>
 8006484:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006488:	4632      	mov	r2, r6
 800648a:	463b      	mov	r3, r7
 800648c:	f7fa f9de 	bl	800084c <__aeabi_ddiv>
 8006490:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006494:	e02b      	b.n	80064ee <_dtoa_r+0x3de>
 8006496:	2502      	movs	r5, #2
 8006498:	e7ef      	b.n	800647a <_dtoa_r+0x36a>
 800649a:	f018 0f01 	tst.w	r8, #1
 800649e:	d008      	beq.n	80064b2 <_dtoa_r+0x3a2>
 80064a0:	4630      	mov	r0, r6
 80064a2:	4639      	mov	r1, r7
 80064a4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80064a8:	f7fa f8a6 	bl	80005f8 <__aeabi_dmul>
 80064ac:	3501      	adds	r5, #1
 80064ae:	4606      	mov	r6, r0
 80064b0:	460f      	mov	r7, r1
 80064b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80064b6:	f109 0908 	add.w	r9, r9, #8
 80064ba:	e7e0      	b.n	800647e <_dtoa_r+0x36e>
 80064bc:	f000 809f 	beq.w	80065fe <_dtoa_r+0x4ee>
 80064c0:	f1cb 0600 	rsb	r6, fp, #0
 80064c4:	4ba1      	ldr	r3, [pc, #644]	; (800674c <_dtoa_r+0x63c>)
 80064c6:	4fa2      	ldr	r7, [pc, #648]	; (8006750 <_dtoa_r+0x640>)
 80064c8:	f006 020f 	and.w	r2, r6, #15
 80064cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	ec51 0b18 	vmov	r0, r1, d8
 80064d8:	f7fa f88e 	bl	80005f8 <__aeabi_dmul>
 80064dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064e0:	1136      	asrs	r6, r6, #4
 80064e2:	2300      	movs	r3, #0
 80064e4:	2502      	movs	r5, #2
 80064e6:	2e00      	cmp	r6, #0
 80064e8:	d17e      	bne.n	80065e8 <_dtoa_r+0x4d8>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1d0      	bne.n	8006490 <_dtoa_r+0x380>
 80064ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064f0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 8084 	beq.w	8006602 <_dtoa_r+0x4f2>
 80064fa:	4b96      	ldr	r3, [pc, #600]	; (8006754 <_dtoa_r+0x644>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	4640      	mov	r0, r8
 8006500:	4649      	mov	r1, r9
 8006502:	f7fa faeb 	bl	8000adc <__aeabi_dcmplt>
 8006506:	2800      	cmp	r0, #0
 8006508:	d07b      	beq.n	8006602 <_dtoa_r+0x4f2>
 800650a:	9b04      	ldr	r3, [sp, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d078      	beq.n	8006602 <_dtoa_r+0x4f2>
 8006510:	9b01      	ldr	r3, [sp, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	dd39      	ble.n	800658a <_dtoa_r+0x47a>
 8006516:	4b90      	ldr	r3, [pc, #576]	; (8006758 <_dtoa_r+0x648>)
 8006518:	2200      	movs	r2, #0
 800651a:	4640      	mov	r0, r8
 800651c:	4649      	mov	r1, r9
 800651e:	f7fa f86b 	bl	80005f8 <__aeabi_dmul>
 8006522:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006526:	9e01      	ldr	r6, [sp, #4]
 8006528:	f10b 37ff 	add.w	r7, fp, #4294967295
 800652c:	3501      	adds	r5, #1
 800652e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006532:	4628      	mov	r0, r5
 8006534:	f7f9 fff6 	bl	8000524 <__aeabi_i2d>
 8006538:	4642      	mov	r2, r8
 800653a:	464b      	mov	r3, r9
 800653c:	f7fa f85c 	bl	80005f8 <__aeabi_dmul>
 8006540:	4b86      	ldr	r3, [pc, #536]	; (800675c <_dtoa_r+0x64c>)
 8006542:	2200      	movs	r2, #0
 8006544:	f7f9 fea2 	bl	800028c <__adddf3>
 8006548:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800654c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006550:	9303      	str	r3, [sp, #12]
 8006552:	2e00      	cmp	r6, #0
 8006554:	d158      	bne.n	8006608 <_dtoa_r+0x4f8>
 8006556:	4b82      	ldr	r3, [pc, #520]	; (8006760 <_dtoa_r+0x650>)
 8006558:	2200      	movs	r2, #0
 800655a:	4640      	mov	r0, r8
 800655c:	4649      	mov	r1, r9
 800655e:	f7f9 fe93 	bl	8000288 <__aeabi_dsub>
 8006562:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006566:	4680      	mov	r8, r0
 8006568:	4689      	mov	r9, r1
 800656a:	f7fa fad5 	bl	8000b18 <__aeabi_dcmpgt>
 800656e:	2800      	cmp	r0, #0
 8006570:	f040 8296 	bne.w	8006aa0 <_dtoa_r+0x990>
 8006574:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006578:	4640      	mov	r0, r8
 800657a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800657e:	4649      	mov	r1, r9
 8006580:	f7fa faac 	bl	8000adc <__aeabi_dcmplt>
 8006584:	2800      	cmp	r0, #0
 8006586:	f040 8289 	bne.w	8006a9c <_dtoa_r+0x98c>
 800658a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800658e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006590:	2b00      	cmp	r3, #0
 8006592:	f2c0 814e 	blt.w	8006832 <_dtoa_r+0x722>
 8006596:	f1bb 0f0e 	cmp.w	fp, #14
 800659a:	f300 814a 	bgt.w	8006832 <_dtoa_r+0x722>
 800659e:	4b6b      	ldr	r3, [pc, #428]	; (800674c <_dtoa_r+0x63c>)
 80065a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80065a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f280 80dc 	bge.w	8006768 <_dtoa_r+0x658>
 80065b0:	9b04      	ldr	r3, [sp, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f300 80d8 	bgt.w	8006768 <_dtoa_r+0x658>
 80065b8:	f040 826f 	bne.w	8006a9a <_dtoa_r+0x98a>
 80065bc:	4b68      	ldr	r3, [pc, #416]	; (8006760 <_dtoa_r+0x650>)
 80065be:	2200      	movs	r2, #0
 80065c0:	4640      	mov	r0, r8
 80065c2:	4649      	mov	r1, r9
 80065c4:	f7fa f818 	bl	80005f8 <__aeabi_dmul>
 80065c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065cc:	f7fa fa9a 	bl	8000b04 <__aeabi_dcmpge>
 80065d0:	9e04      	ldr	r6, [sp, #16]
 80065d2:	4637      	mov	r7, r6
 80065d4:	2800      	cmp	r0, #0
 80065d6:	f040 8245 	bne.w	8006a64 <_dtoa_r+0x954>
 80065da:	9d00      	ldr	r5, [sp, #0]
 80065dc:	2331      	movs	r3, #49	; 0x31
 80065de:	f805 3b01 	strb.w	r3, [r5], #1
 80065e2:	f10b 0b01 	add.w	fp, fp, #1
 80065e6:	e241      	b.n	8006a6c <_dtoa_r+0x95c>
 80065e8:	07f2      	lsls	r2, r6, #31
 80065ea:	d505      	bpl.n	80065f8 <_dtoa_r+0x4e8>
 80065ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065f0:	f7fa f802 	bl	80005f8 <__aeabi_dmul>
 80065f4:	3501      	adds	r5, #1
 80065f6:	2301      	movs	r3, #1
 80065f8:	1076      	asrs	r6, r6, #1
 80065fa:	3708      	adds	r7, #8
 80065fc:	e773      	b.n	80064e6 <_dtoa_r+0x3d6>
 80065fe:	2502      	movs	r5, #2
 8006600:	e775      	b.n	80064ee <_dtoa_r+0x3de>
 8006602:	9e04      	ldr	r6, [sp, #16]
 8006604:	465f      	mov	r7, fp
 8006606:	e792      	b.n	800652e <_dtoa_r+0x41e>
 8006608:	9900      	ldr	r1, [sp, #0]
 800660a:	4b50      	ldr	r3, [pc, #320]	; (800674c <_dtoa_r+0x63c>)
 800660c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006610:	4431      	add	r1, r6
 8006612:	9102      	str	r1, [sp, #8]
 8006614:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006616:	eeb0 9a47 	vmov.f32	s18, s14
 800661a:	eef0 9a67 	vmov.f32	s19, s15
 800661e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006622:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006626:	2900      	cmp	r1, #0
 8006628:	d044      	beq.n	80066b4 <_dtoa_r+0x5a4>
 800662a:	494e      	ldr	r1, [pc, #312]	; (8006764 <_dtoa_r+0x654>)
 800662c:	2000      	movs	r0, #0
 800662e:	f7fa f90d 	bl	800084c <__aeabi_ddiv>
 8006632:	ec53 2b19 	vmov	r2, r3, d9
 8006636:	f7f9 fe27 	bl	8000288 <__aeabi_dsub>
 800663a:	9d00      	ldr	r5, [sp, #0]
 800663c:	ec41 0b19 	vmov	d9, r0, r1
 8006640:	4649      	mov	r1, r9
 8006642:	4640      	mov	r0, r8
 8006644:	f7fa fa88 	bl	8000b58 <__aeabi_d2iz>
 8006648:	4606      	mov	r6, r0
 800664a:	f7f9 ff6b 	bl	8000524 <__aeabi_i2d>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	4640      	mov	r0, r8
 8006654:	4649      	mov	r1, r9
 8006656:	f7f9 fe17 	bl	8000288 <__aeabi_dsub>
 800665a:	3630      	adds	r6, #48	; 0x30
 800665c:	f805 6b01 	strb.w	r6, [r5], #1
 8006660:	ec53 2b19 	vmov	r2, r3, d9
 8006664:	4680      	mov	r8, r0
 8006666:	4689      	mov	r9, r1
 8006668:	f7fa fa38 	bl	8000adc <__aeabi_dcmplt>
 800666c:	2800      	cmp	r0, #0
 800666e:	d164      	bne.n	800673a <_dtoa_r+0x62a>
 8006670:	4642      	mov	r2, r8
 8006672:	464b      	mov	r3, r9
 8006674:	4937      	ldr	r1, [pc, #220]	; (8006754 <_dtoa_r+0x644>)
 8006676:	2000      	movs	r0, #0
 8006678:	f7f9 fe06 	bl	8000288 <__aeabi_dsub>
 800667c:	ec53 2b19 	vmov	r2, r3, d9
 8006680:	f7fa fa2c 	bl	8000adc <__aeabi_dcmplt>
 8006684:	2800      	cmp	r0, #0
 8006686:	f040 80b6 	bne.w	80067f6 <_dtoa_r+0x6e6>
 800668a:	9b02      	ldr	r3, [sp, #8]
 800668c:	429d      	cmp	r5, r3
 800668e:	f43f af7c 	beq.w	800658a <_dtoa_r+0x47a>
 8006692:	4b31      	ldr	r3, [pc, #196]	; (8006758 <_dtoa_r+0x648>)
 8006694:	ec51 0b19 	vmov	r0, r1, d9
 8006698:	2200      	movs	r2, #0
 800669a:	f7f9 ffad 	bl	80005f8 <__aeabi_dmul>
 800669e:	4b2e      	ldr	r3, [pc, #184]	; (8006758 <_dtoa_r+0x648>)
 80066a0:	ec41 0b19 	vmov	d9, r0, r1
 80066a4:	2200      	movs	r2, #0
 80066a6:	4640      	mov	r0, r8
 80066a8:	4649      	mov	r1, r9
 80066aa:	f7f9 ffa5 	bl	80005f8 <__aeabi_dmul>
 80066ae:	4680      	mov	r8, r0
 80066b0:	4689      	mov	r9, r1
 80066b2:	e7c5      	b.n	8006640 <_dtoa_r+0x530>
 80066b4:	ec51 0b17 	vmov	r0, r1, d7
 80066b8:	f7f9 ff9e 	bl	80005f8 <__aeabi_dmul>
 80066bc:	9b02      	ldr	r3, [sp, #8]
 80066be:	9d00      	ldr	r5, [sp, #0]
 80066c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80066c2:	ec41 0b19 	vmov	d9, r0, r1
 80066c6:	4649      	mov	r1, r9
 80066c8:	4640      	mov	r0, r8
 80066ca:	f7fa fa45 	bl	8000b58 <__aeabi_d2iz>
 80066ce:	4606      	mov	r6, r0
 80066d0:	f7f9 ff28 	bl	8000524 <__aeabi_i2d>
 80066d4:	3630      	adds	r6, #48	; 0x30
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4640      	mov	r0, r8
 80066dc:	4649      	mov	r1, r9
 80066de:	f7f9 fdd3 	bl	8000288 <__aeabi_dsub>
 80066e2:	f805 6b01 	strb.w	r6, [r5], #1
 80066e6:	9b02      	ldr	r3, [sp, #8]
 80066e8:	429d      	cmp	r5, r3
 80066ea:	4680      	mov	r8, r0
 80066ec:	4689      	mov	r9, r1
 80066ee:	f04f 0200 	mov.w	r2, #0
 80066f2:	d124      	bne.n	800673e <_dtoa_r+0x62e>
 80066f4:	4b1b      	ldr	r3, [pc, #108]	; (8006764 <_dtoa_r+0x654>)
 80066f6:	ec51 0b19 	vmov	r0, r1, d9
 80066fa:	f7f9 fdc7 	bl	800028c <__adddf3>
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4640      	mov	r0, r8
 8006704:	4649      	mov	r1, r9
 8006706:	f7fa fa07 	bl	8000b18 <__aeabi_dcmpgt>
 800670a:	2800      	cmp	r0, #0
 800670c:	d173      	bne.n	80067f6 <_dtoa_r+0x6e6>
 800670e:	ec53 2b19 	vmov	r2, r3, d9
 8006712:	4914      	ldr	r1, [pc, #80]	; (8006764 <_dtoa_r+0x654>)
 8006714:	2000      	movs	r0, #0
 8006716:	f7f9 fdb7 	bl	8000288 <__aeabi_dsub>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	4640      	mov	r0, r8
 8006720:	4649      	mov	r1, r9
 8006722:	f7fa f9db 	bl	8000adc <__aeabi_dcmplt>
 8006726:	2800      	cmp	r0, #0
 8006728:	f43f af2f 	beq.w	800658a <_dtoa_r+0x47a>
 800672c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800672e:	1e6b      	subs	r3, r5, #1
 8006730:	930f      	str	r3, [sp, #60]	; 0x3c
 8006732:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006736:	2b30      	cmp	r3, #48	; 0x30
 8006738:	d0f8      	beq.n	800672c <_dtoa_r+0x61c>
 800673a:	46bb      	mov	fp, r7
 800673c:	e04a      	b.n	80067d4 <_dtoa_r+0x6c4>
 800673e:	4b06      	ldr	r3, [pc, #24]	; (8006758 <_dtoa_r+0x648>)
 8006740:	f7f9 ff5a 	bl	80005f8 <__aeabi_dmul>
 8006744:	4680      	mov	r8, r0
 8006746:	4689      	mov	r9, r1
 8006748:	e7bd      	b.n	80066c6 <_dtoa_r+0x5b6>
 800674a:	bf00      	nop
 800674c:	08007f50 	.word	0x08007f50
 8006750:	08007f28 	.word	0x08007f28
 8006754:	3ff00000 	.word	0x3ff00000
 8006758:	40240000 	.word	0x40240000
 800675c:	401c0000 	.word	0x401c0000
 8006760:	40140000 	.word	0x40140000
 8006764:	3fe00000 	.word	0x3fe00000
 8006768:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800676c:	9d00      	ldr	r5, [sp, #0]
 800676e:	4642      	mov	r2, r8
 8006770:	464b      	mov	r3, r9
 8006772:	4630      	mov	r0, r6
 8006774:	4639      	mov	r1, r7
 8006776:	f7fa f869 	bl	800084c <__aeabi_ddiv>
 800677a:	f7fa f9ed 	bl	8000b58 <__aeabi_d2iz>
 800677e:	9001      	str	r0, [sp, #4]
 8006780:	f7f9 fed0 	bl	8000524 <__aeabi_i2d>
 8006784:	4642      	mov	r2, r8
 8006786:	464b      	mov	r3, r9
 8006788:	f7f9 ff36 	bl	80005f8 <__aeabi_dmul>
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	4630      	mov	r0, r6
 8006792:	4639      	mov	r1, r7
 8006794:	f7f9 fd78 	bl	8000288 <__aeabi_dsub>
 8006798:	9e01      	ldr	r6, [sp, #4]
 800679a:	9f04      	ldr	r7, [sp, #16]
 800679c:	3630      	adds	r6, #48	; 0x30
 800679e:	f805 6b01 	strb.w	r6, [r5], #1
 80067a2:	9e00      	ldr	r6, [sp, #0]
 80067a4:	1bae      	subs	r6, r5, r6
 80067a6:	42b7      	cmp	r7, r6
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	d134      	bne.n	8006818 <_dtoa_r+0x708>
 80067ae:	f7f9 fd6d 	bl	800028c <__adddf3>
 80067b2:	4642      	mov	r2, r8
 80067b4:	464b      	mov	r3, r9
 80067b6:	4606      	mov	r6, r0
 80067b8:	460f      	mov	r7, r1
 80067ba:	f7fa f9ad 	bl	8000b18 <__aeabi_dcmpgt>
 80067be:	b9c8      	cbnz	r0, 80067f4 <_dtoa_r+0x6e4>
 80067c0:	4642      	mov	r2, r8
 80067c2:	464b      	mov	r3, r9
 80067c4:	4630      	mov	r0, r6
 80067c6:	4639      	mov	r1, r7
 80067c8:	f7fa f97e 	bl	8000ac8 <__aeabi_dcmpeq>
 80067cc:	b110      	cbz	r0, 80067d4 <_dtoa_r+0x6c4>
 80067ce:	9b01      	ldr	r3, [sp, #4]
 80067d0:	07db      	lsls	r3, r3, #31
 80067d2:	d40f      	bmi.n	80067f4 <_dtoa_r+0x6e4>
 80067d4:	4651      	mov	r1, sl
 80067d6:	4620      	mov	r0, r4
 80067d8:	f000 fbcc 	bl	8006f74 <_Bfree>
 80067dc:	2300      	movs	r3, #0
 80067de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067e0:	702b      	strb	r3, [r5, #0]
 80067e2:	f10b 0301 	add.w	r3, fp, #1
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f43f ace2 	beq.w	80061b4 <_dtoa_r+0xa4>
 80067f0:	601d      	str	r5, [r3, #0]
 80067f2:	e4df      	b.n	80061b4 <_dtoa_r+0xa4>
 80067f4:	465f      	mov	r7, fp
 80067f6:	462b      	mov	r3, r5
 80067f8:	461d      	mov	r5, r3
 80067fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067fe:	2a39      	cmp	r2, #57	; 0x39
 8006800:	d106      	bne.n	8006810 <_dtoa_r+0x700>
 8006802:	9a00      	ldr	r2, [sp, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d1f7      	bne.n	80067f8 <_dtoa_r+0x6e8>
 8006808:	9900      	ldr	r1, [sp, #0]
 800680a:	2230      	movs	r2, #48	; 0x30
 800680c:	3701      	adds	r7, #1
 800680e:	700a      	strb	r2, [r1, #0]
 8006810:	781a      	ldrb	r2, [r3, #0]
 8006812:	3201      	adds	r2, #1
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	e790      	b.n	800673a <_dtoa_r+0x62a>
 8006818:	4ba3      	ldr	r3, [pc, #652]	; (8006aa8 <_dtoa_r+0x998>)
 800681a:	2200      	movs	r2, #0
 800681c:	f7f9 feec 	bl	80005f8 <__aeabi_dmul>
 8006820:	2200      	movs	r2, #0
 8006822:	2300      	movs	r3, #0
 8006824:	4606      	mov	r6, r0
 8006826:	460f      	mov	r7, r1
 8006828:	f7fa f94e 	bl	8000ac8 <__aeabi_dcmpeq>
 800682c:	2800      	cmp	r0, #0
 800682e:	d09e      	beq.n	800676e <_dtoa_r+0x65e>
 8006830:	e7d0      	b.n	80067d4 <_dtoa_r+0x6c4>
 8006832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006834:	2a00      	cmp	r2, #0
 8006836:	f000 80ca 	beq.w	80069ce <_dtoa_r+0x8be>
 800683a:	9a07      	ldr	r2, [sp, #28]
 800683c:	2a01      	cmp	r2, #1
 800683e:	f300 80ad 	bgt.w	800699c <_dtoa_r+0x88c>
 8006842:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006844:	2a00      	cmp	r2, #0
 8006846:	f000 80a5 	beq.w	8006994 <_dtoa_r+0x884>
 800684a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800684e:	9e08      	ldr	r6, [sp, #32]
 8006850:	9d05      	ldr	r5, [sp, #20]
 8006852:	9a05      	ldr	r2, [sp, #20]
 8006854:	441a      	add	r2, r3
 8006856:	9205      	str	r2, [sp, #20]
 8006858:	9a06      	ldr	r2, [sp, #24]
 800685a:	2101      	movs	r1, #1
 800685c:	441a      	add	r2, r3
 800685e:	4620      	mov	r0, r4
 8006860:	9206      	str	r2, [sp, #24]
 8006862:	f000 fc3d 	bl	80070e0 <__i2b>
 8006866:	4607      	mov	r7, r0
 8006868:	b165      	cbz	r5, 8006884 <_dtoa_r+0x774>
 800686a:	9b06      	ldr	r3, [sp, #24]
 800686c:	2b00      	cmp	r3, #0
 800686e:	dd09      	ble.n	8006884 <_dtoa_r+0x774>
 8006870:	42ab      	cmp	r3, r5
 8006872:	9a05      	ldr	r2, [sp, #20]
 8006874:	bfa8      	it	ge
 8006876:	462b      	movge	r3, r5
 8006878:	1ad2      	subs	r2, r2, r3
 800687a:	9205      	str	r2, [sp, #20]
 800687c:	9a06      	ldr	r2, [sp, #24]
 800687e:	1aed      	subs	r5, r5, r3
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	9306      	str	r3, [sp, #24]
 8006884:	9b08      	ldr	r3, [sp, #32]
 8006886:	b1f3      	cbz	r3, 80068c6 <_dtoa_r+0x7b6>
 8006888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 80a3 	beq.w	80069d6 <_dtoa_r+0x8c6>
 8006890:	2e00      	cmp	r6, #0
 8006892:	dd10      	ble.n	80068b6 <_dtoa_r+0x7a6>
 8006894:	4639      	mov	r1, r7
 8006896:	4632      	mov	r2, r6
 8006898:	4620      	mov	r0, r4
 800689a:	f000 fce1 	bl	8007260 <__pow5mult>
 800689e:	4652      	mov	r2, sl
 80068a0:	4601      	mov	r1, r0
 80068a2:	4607      	mov	r7, r0
 80068a4:	4620      	mov	r0, r4
 80068a6:	f000 fc31 	bl	800710c <__multiply>
 80068aa:	4651      	mov	r1, sl
 80068ac:	4680      	mov	r8, r0
 80068ae:	4620      	mov	r0, r4
 80068b0:	f000 fb60 	bl	8006f74 <_Bfree>
 80068b4:	46c2      	mov	sl, r8
 80068b6:	9b08      	ldr	r3, [sp, #32]
 80068b8:	1b9a      	subs	r2, r3, r6
 80068ba:	d004      	beq.n	80068c6 <_dtoa_r+0x7b6>
 80068bc:	4651      	mov	r1, sl
 80068be:	4620      	mov	r0, r4
 80068c0:	f000 fcce 	bl	8007260 <__pow5mult>
 80068c4:	4682      	mov	sl, r0
 80068c6:	2101      	movs	r1, #1
 80068c8:	4620      	mov	r0, r4
 80068ca:	f000 fc09 	bl	80070e0 <__i2b>
 80068ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	4606      	mov	r6, r0
 80068d4:	f340 8081 	ble.w	80069da <_dtoa_r+0x8ca>
 80068d8:	461a      	mov	r2, r3
 80068da:	4601      	mov	r1, r0
 80068dc:	4620      	mov	r0, r4
 80068de:	f000 fcbf 	bl	8007260 <__pow5mult>
 80068e2:	9b07      	ldr	r3, [sp, #28]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	4606      	mov	r6, r0
 80068e8:	dd7a      	ble.n	80069e0 <_dtoa_r+0x8d0>
 80068ea:	f04f 0800 	mov.w	r8, #0
 80068ee:	6933      	ldr	r3, [r6, #16]
 80068f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80068f4:	6918      	ldr	r0, [r3, #16]
 80068f6:	f000 fba5 	bl	8007044 <__hi0bits>
 80068fa:	f1c0 0020 	rsb	r0, r0, #32
 80068fe:	9b06      	ldr	r3, [sp, #24]
 8006900:	4418      	add	r0, r3
 8006902:	f010 001f 	ands.w	r0, r0, #31
 8006906:	f000 8094 	beq.w	8006a32 <_dtoa_r+0x922>
 800690a:	f1c0 0320 	rsb	r3, r0, #32
 800690e:	2b04      	cmp	r3, #4
 8006910:	f340 8085 	ble.w	8006a1e <_dtoa_r+0x90e>
 8006914:	9b05      	ldr	r3, [sp, #20]
 8006916:	f1c0 001c 	rsb	r0, r0, #28
 800691a:	4403      	add	r3, r0
 800691c:	9305      	str	r3, [sp, #20]
 800691e:	9b06      	ldr	r3, [sp, #24]
 8006920:	4403      	add	r3, r0
 8006922:	4405      	add	r5, r0
 8006924:	9306      	str	r3, [sp, #24]
 8006926:	9b05      	ldr	r3, [sp, #20]
 8006928:	2b00      	cmp	r3, #0
 800692a:	dd05      	ble.n	8006938 <_dtoa_r+0x828>
 800692c:	4651      	mov	r1, sl
 800692e:	461a      	mov	r2, r3
 8006930:	4620      	mov	r0, r4
 8006932:	f000 fcef 	bl	8007314 <__lshift>
 8006936:	4682      	mov	sl, r0
 8006938:	9b06      	ldr	r3, [sp, #24]
 800693a:	2b00      	cmp	r3, #0
 800693c:	dd05      	ble.n	800694a <_dtoa_r+0x83a>
 800693e:	4631      	mov	r1, r6
 8006940:	461a      	mov	r2, r3
 8006942:	4620      	mov	r0, r4
 8006944:	f000 fce6 	bl	8007314 <__lshift>
 8006948:	4606      	mov	r6, r0
 800694a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800694c:	2b00      	cmp	r3, #0
 800694e:	d072      	beq.n	8006a36 <_dtoa_r+0x926>
 8006950:	4631      	mov	r1, r6
 8006952:	4650      	mov	r0, sl
 8006954:	f000 fd4a 	bl	80073ec <__mcmp>
 8006958:	2800      	cmp	r0, #0
 800695a:	da6c      	bge.n	8006a36 <_dtoa_r+0x926>
 800695c:	2300      	movs	r3, #0
 800695e:	4651      	mov	r1, sl
 8006960:	220a      	movs	r2, #10
 8006962:	4620      	mov	r0, r4
 8006964:	f000 fb28 	bl	8006fb8 <__multadd>
 8006968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800696a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800696e:	4682      	mov	sl, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 81b0 	beq.w	8006cd6 <_dtoa_r+0xbc6>
 8006976:	2300      	movs	r3, #0
 8006978:	4639      	mov	r1, r7
 800697a:	220a      	movs	r2, #10
 800697c:	4620      	mov	r0, r4
 800697e:	f000 fb1b 	bl	8006fb8 <__multadd>
 8006982:	9b01      	ldr	r3, [sp, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	4607      	mov	r7, r0
 8006988:	f300 8096 	bgt.w	8006ab8 <_dtoa_r+0x9a8>
 800698c:	9b07      	ldr	r3, [sp, #28]
 800698e:	2b02      	cmp	r3, #2
 8006990:	dc59      	bgt.n	8006a46 <_dtoa_r+0x936>
 8006992:	e091      	b.n	8006ab8 <_dtoa_r+0x9a8>
 8006994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006996:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800699a:	e758      	b.n	800684e <_dtoa_r+0x73e>
 800699c:	9b04      	ldr	r3, [sp, #16]
 800699e:	1e5e      	subs	r6, r3, #1
 80069a0:	9b08      	ldr	r3, [sp, #32]
 80069a2:	42b3      	cmp	r3, r6
 80069a4:	bfbf      	itttt	lt
 80069a6:	9b08      	ldrlt	r3, [sp, #32]
 80069a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80069aa:	9608      	strlt	r6, [sp, #32]
 80069ac:	1af3      	sublt	r3, r6, r3
 80069ae:	bfb4      	ite	lt
 80069b0:	18d2      	addlt	r2, r2, r3
 80069b2:	1b9e      	subge	r6, r3, r6
 80069b4:	9b04      	ldr	r3, [sp, #16]
 80069b6:	bfbc      	itt	lt
 80069b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80069ba:	2600      	movlt	r6, #0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	bfb7      	itett	lt
 80069c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80069c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80069c8:	1a9d      	sublt	r5, r3, r2
 80069ca:	2300      	movlt	r3, #0
 80069cc:	e741      	b.n	8006852 <_dtoa_r+0x742>
 80069ce:	9e08      	ldr	r6, [sp, #32]
 80069d0:	9d05      	ldr	r5, [sp, #20]
 80069d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80069d4:	e748      	b.n	8006868 <_dtoa_r+0x758>
 80069d6:	9a08      	ldr	r2, [sp, #32]
 80069d8:	e770      	b.n	80068bc <_dtoa_r+0x7ac>
 80069da:	9b07      	ldr	r3, [sp, #28]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	dc19      	bgt.n	8006a14 <_dtoa_r+0x904>
 80069e0:	9b02      	ldr	r3, [sp, #8]
 80069e2:	b9bb      	cbnz	r3, 8006a14 <_dtoa_r+0x904>
 80069e4:	9b03      	ldr	r3, [sp, #12]
 80069e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069ea:	b99b      	cbnz	r3, 8006a14 <_dtoa_r+0x904>
 80069ec:	9b03      	ldr	r3, [sp, #12]
 80069ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069f2:	0d1b      	lsrs	r3, r3, #20
 80069f4:	051b      	lsls	r3, r3, #20
 80069f6:	b183      	cbz	r3, 8006a1a <_dtoa_r+0x90a>
 80069f8:	9b05      	ldr	r3, [sp, #20]
 80069fa:	3301      	adds	r3, #1
 80069fc:	9305      	str	r3, [sp, #20]
 80069fe:	9b06      	ldr	r3, [sp, #24]
 8006a00:	3301      	adds	r3, #1
 8006a02:	9306      	str	r3, [sp, #24]
 8006a04:	f04f 0801 	mov.w	r8, #1
 8006a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f47f af6f 	bne.w	80068ee <_dtoa_r+0x7de>
 8006a10:	2001      	movs	r0, #1
 8006a12:	e774      	b.n	80068fe <_dtoa_r+0x7ee>
 8006a14:	f04f 0800 	mov.w	r8, #0
 8006a18:	e7f6      	b.n	8006a08 <_dtoa_r+0x8f8>
 8006a1a:	4698      	mov	r8, r3
 8006a1c:	e7f4      	b.n	8006a08 <_dtoa_r+0x8f8>
 8006a1e:	d082      	beq.n	8006926 <_dtoa_r+0x816>
 8006a20:	9a05      	ldr	r2, [sp, #20]
 8006a22:	331c      	adds	r3, #28
 8006a24:	441a      	add	r2, r3
 8006a26:	9205      	str	r2, [sp, #20]
 8006a28:	9a06      	ldr	r2, [sp, #24]
 8006a2a:	441a      	add	r2, r3
 8006a2c:	441d      	add	r5, r3
 8006a2e:	9206      	str	r2, [sp, #24]
 8006a30:	e779      	b.n	8006926 <_dtoa_r+0x816>
 8006a32:	4603      	mov	r3, r0
 8006a34:	e7f4      	b.n	8006a20 <_dtoa_r+0x910>
 8006a36:	9b04      	ldr	r3, [sp, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	dc37      	bgt.n	8006aac <_dtoa_r+0x99c>
 8006a3c:	9b07      	ldr	r3, [sp, #28]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	dd34      	ble.n	8006aac <_dtoa_r+0x99c>
 8006a42:	9b04      	ldr	r3, [sp, #16]
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	9b01      	ldr	r3, [sp, #4]
 8006a48:	b963      	cbnz	r3, 8006a64 <_dtoa_r+0x954>
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	2205      	movs	r2, #5
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f000 fab2 	bl	8006fb8 <__multadd>
 8006a54:	4601      	mov	r1, r0
 8006a56:	4606      	mov	r6, r0
 8006a58:	4650      	mov	r0, sl
 8006a5a:	f000 fcc7 	bl	80073ec <__mcmp>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	f73f adbb 	bgt.w	80065da <_dtoa_r+0x4ca>
 8006a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a66:	9d00      	ldr	r5, [sp, #0]
 8006a68:	ea6f 0b03 	mvn.w	fp, r3
 8006a6c:	f04f 0800 	mov.w	r8, #0
 8006a70:	4631      	mov	r1, r6
 8006a72:	4620      	mov	r0, r4
 8006a74:	f000 fa7e 	bl	8006f74 <_Bfree>
 8006a78:	2f00      	cmp	r7, #0
 8006a7a:	f43f aeab 	beq.w	80067d4 <_dtoa_r+0x6c4>
 8006a7e:	f1b8 0f00 	cmp.w	r8, #0
 8006a82:	d005      	beq.n	8006a90 <_dtoa_r+0x980>
 8006a84:	45b8      	cmp	r8, r7
 8006a86:	d003      	beq.n	8006a90 <_dtoa_r+0x980>
 8006a88:	4641      	mov	r1, r8
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f000 fa72 	bl	8006f74 <_Bfree>
 8006a90:	4639      	mov	r1, r7
 8006a92:	4620      	mov	r0, r4
 8006a94:	f000 fa6e 	bl	8006f74 <_Bfree>
 8006a98:	e69c      	b.n	80067d4 <_dtoa_r+0x6c4>
 8006a9a:	2600      	movs	r6, #0
 8006a9c:	4637      	mov	r7, r6
 8006a9e:	e7e1      	b.n	8006a64 <_dtoa_r+0x954>
 8006aa0:	46bb      	mov	fp, r7
 8006aa2:	4637      	mov	r7, r6
 8006aa4:	e599      	b.n	80065da <_dtoa_r+0x4ca>
 8006aa6:	bf00      	nop
 8006aa8:	40240000 	.word	0x40240000
 8006aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 80c8 	beq.w	8006c44 <_dtoa_r+0xb34>
 8006ab4:	9b04      	ldr	r3, [sp, #16]
 8006ab6:	9301      	str	r3, [sp, #4]
 8006ab8:	2d00      	cmp	r5, #0
 8006aba:	dd05      	ble.n	8006ac8 <_dtoa_r+0x9b8>
 8006abc:	4639      	mov	r1, r7
 8006abe:	462a      	mov	r2, r5
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 fc27 	bl	8007314 <__lshift>
 8006ac6:	4607      	mov	r7, r0
 8006ac8:	f1b8 0f00 	cmp.w	r8, #0
 8006acc:	d05b      	beq.n	8006b86 <_dtoa_r+0xa76>
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f000 fa0f 	bl	8006ef4 <_Balloc>
 8006ad6:	4605      	mov	r5, r0
 8006ad8:	b928      	cbnz	r0, 8006ae6 <_dtoa_r+0x9d6>
 8006ada:	4b83      	ldr	r3, [pc, #524]	; (8006ce8 <_dtoa_r+0xbd8>)
 8006adc:	4602      	mov	r2, r0
 8006ade:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006ae2:	f7ff bb2e 	b.w	8006142 <_dtoa_r+0x32>
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	3202      	adds	r2, #2
 8006aea:	0092      	lsls	r2, r2, #2
 8006aec:	f107 010c 	add.w	r1, r7, #12
 8006af0:	300c      	adds	r0, #12
 8006af2:	f000 fe39 	bl	8007768 <memcpy>
 8006af6:	2201      	movs	r2, #1
 8006af8:	4629      	mov	r1, r5
 8006afa:	4620      	mov	r0, r4
 8006afc:	f000 fc0a 	bl	8007314 <__lshift>
 8006b00:	9b00      	ldr	r3, [sp, #0]
 8006b02:	3301      	adds	r3, #1
 8006b04:	9304      	str	r3, [sp, #16]
 8006b06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	9308      	str	r3, [sp, #32]
 8006b0e:	9b02      	ldr	r3, [sp, #8]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	46b8      	mov	r8, r7
 8006b16:	9306      	str	r3, [sp, #24]
 8006b18:	4607      	mov	r7, r0
 8006b1a:	9b04      	ldr	r3, [sp, #16]
 8006b1c:	4631      	mov	r1, r6
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	4650      	mov	r0, sl
 8006b22:	9301      	str	r3, [sp, #4]
 8006b24:	f7ff fa6b 	bl	8005ffe <quorem>
 8006b28:	4641      	mov	r1, r8
 8006b2a:	9002      	str	r0, [sp, #8]
 8006b2c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b30:	4650      	mov	r0, sl
 8006b32:	f000 fc5b 	bl	80073ec <__mcmp>
 8006b36:	463a      	mov	r2, r7
 8006b38:	9005      	str	r0, [sp, #20]
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f000 fc71 	bl	8007424 <__mdiff>
 8006b42:	68c2      	ldr	r2, [r0, #12]
 8006b44:	4605      	mov	r5, r0
 8006b46:	bb02      	cbnz	r2, 8006b8a <_dtoa_r+0xa7a>
 8006b48:	4601      	mov	r1, r0
 8006b4a:	4650      	mov	r0, sl
 8006b4c:	f000 fc4e 	bl	80073ec <__mcmp>
 8006b50:	4602      	mov	r2, r0
 8006b52:	4629      	mov	r1, r5
 8006b54:	4620      	mov	r0, r4
 8006b56:	9209      	str	r2, [sp, #36]	; 0x24
 8006b58:	f000 fa0c 	bl	8006f74 <_Bfree>
 8006b5c:	9b07      	ldr	r3, [sp, #28]
 8006b5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b60:	9d04      	ldr	r5, [sp, #16]
 8006b62:	ea43 0102 	orr.w	r1, r3, r2
 8006b66:	9b06      	ldr	r3, [sp, #24]
 8006b68:	4319      	orrs	r1, r3
 8006b6a:	d110      	bne.n	8006b8e <_dtoa_r+0xa7e>
 8006b6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006b70:	d029      	beq.n	8006bc6 <_dtoa_r+0xab6>
 8006b72:	9b05      	ldr	r3, [sp, #20]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	dd02      	ble.n	8006b7e <_dtoa_r+0xa6e>
 8006b78:	9b02      	ldr	r3, [sp, #8]
 8006b7a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006b7e:	9b01      	ldr	r3, [sp, #4]
 8006b80:	f883 9000 	strb.w	r9, [r3]
 8006b84:	e774      	b.n	8006a70 <_dtoa_r+0x960>
 8006b86:	4638      	mov	r0, r7
 8006b88:	e7ba      	b.n	8006b00 <_dtoa_r+0x9f0>
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	e7e1      	b.n	8006b52 <_dtoa_r+0xa42>
 8006b8e:	9b05      	ldr	r3, [sp, #20]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	db04      	blt.n	8006b9e <_dtoa_r+0xa8e>
 8006b94:	9907      	ldr	r1, [sp, #28]
 8006b96:	430b      	orrs	r3, r1
 8006b98:	9906      	ldr	r1, [sp, #24]
 8006b9a:	430b      	orrs	r3, r1
 8006b9c:	d120      	bne.n	8006be0 <_dtoa_r+0xad0>
 8006b9e:	2a00      	cmp	r2, #0
 8006ba0:	dded      	ble.n	8006b7e <_dtoa_r+0xa6e>
 8006ba2:	4651      	mov	r1, sl
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f000 fbb4 	bl	8007314 <__lshift>
 8006bac:	4631      	mov	r1, r6
 8006bae:	4682      	mov	sl, r0
 8006bb0:	f000 fc1c 	bl	80073ec <__mcmp>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	dc03      	bgt.n	8006bc0 <_dtoa_r+0xab0>
 8006bb8:	d1e1      	bne.n	8006b7e <_dtoa_r+0xa6e>
 8006bba:	f019 0f01 	tst.w	r9, #1
 8006bbe:	d0de      	beq.n	8006b7e <_dtoa_r+0xa6e>
 8006bc0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006bc4:	d1d8      	bne.n	8006b78 <_dtoa_r+0xa68>
 8006bc6:	9a01      	ldr	r2, [sp, #4]
 8006bc8:	2339      	movs	r3, #57	; 0x39
 8006bca:	7013      	strb	r3, [r2, #0]
 8006bcc:	462b      	mov	r3, r5
 8006bce:	461d      	mov	r5, r3
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006bd6:	2a39      	cmp	r2, #57	; 0x39
 8006bd8:	d06c      	beq.n	8006cb4 <_dtoa_r+0xba4>
 8006bda:	3201      	adds	r2, #1
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	e747      	b.n	8006a70 <_dtoa_r+0x960>
 8006be0:	2a00      	cmp	r2, #0
 8006be2:	dd07      	ble.n	8006bf4 <_dtoa_r+0xae4>
 8006be4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006be8:	d0ed      	beq.n	8006bc6 <_dtoa_r+0xab6>
 8006bea:	9a01      	ldr	r2, [sp, #4]
 8006bec:	f109 0301 	add.w	r3, r9, #1
 8006bf0:	7013      	strb	r3, [r2, #0]
 8006bf2:	e73d      	b.n	8006a70 <_dtoa_r+0x960>
 8006bf4:	9b04      	ldr	r3, [sp, #16]
 8006bf6:	9a08      	ldr	r2, [sp, #32]
 8006bf8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d043      	beq.n	8006c88 <_dtoa_r+0xb78>
 8006c00:	4651      	mov	r1, sl
 8006c02:	2300      	movs	r3, #0
 8006c04:	220a      	movs	r2, #10
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 f9d6 	bl	8006fb8 <__multadd>
 8006c0c:	45b8      	cmp	r8, r7
 8006c0e:	4682      	mov	sl, r0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	f04f 020a 	mov.w	r2, #10
 8006c18:	4641      	mov	r1, r8
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	d107      	bne.n	8006c2e <_dtoa_r+0xb1e>
 8006c1e:	f000 f9cb 	bl	8006fb8 <__multadd>
 8006c22:	4680      	mov	r8, r0
 8006c24:	4607      	mov	r7, r0
 8006c26:	9b04      	ldr	r3, [sp, #16]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	9304      	str	r3, [sp, #16]
 8006c2c:	e775      	b.n	8006b1a <_dtoa_r+0xa0a>
 8006c2e:	f000 f9c3 	bl	8006fb8 <__multadd>
 8006c32:	4639      	mov	r1, r7
 8006c34:	4680      	mov	r8, r0
 8006c36:	2300      	movs	r3, #0
 8006c38:	220a      	movs	r2, #10
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 f9bc 	bl	8006fb8 <__multadd>
 8006c40:	4607      	mov	r7, r0
 8006c42:	e7f0      	b.n	8006c26 <_dtoa_r+0xb16>
 8006c44:	9b04      	ldr	r3, [sp, #16]
 8006c46:	9301      	str	r3, [sp, #4]
 8006c48:	9d00      	ldr	r5, [sp, #0]
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4650      	mov	r0, sl
 8006c4e:	f7ff f9d6 	bl	8005ffe <quorem>
 8006c52:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006c56:	9b00      	ldr	r3, [sp, #0]
 8006c58:	f805 9b01 	strb.w	r9, [r5], #1
 8006c5c:	1aea      	subs	r2, r5, r3
 8006c5e:	9b01      	ldr	r3, [sp, #4]
 8006c60:	4293      	cmp	r3, r2
 8006c62:	dd07      	ble.n	8006c74 <_dtoa_r+0xb64>
 8006c64:	4651      	mov	r1, sl
 8006c66:	2300      	movs	r3, #0
 8006c68:	220a      	movs	r2, #10
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f000 f9a4 	bl	8006fb8 <__multadd>
 8006c70:	4682      	mov	sl, r0
 8006c72:	e7ea      	b.n	8006c4a <_dtoa_r+0xb3a>
 8006c74:	9b01      	ldr	r3, [sp, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	bfc8      	it	gt
 8006c7a:	461d      	movgt	r5, r3
 8006c7c:	9b00      	ldr	r3, [sp, #0]
 8006c7e:	bfd8      	it	le
 8006c80:	2501      	movle	r5, #1
 8006c82:	441d      	add	r5, r3
 8006c84:	f04f 0800 	mov.w	r8, #0
 8006c88:	4651      	mov	r1, sl
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f000 fb41 	bl	8007314 <__lshift>
 8006c92:	4631      	mov	r1, r6
 8006c94:	4682      	mov	sl, r0
 8006c96:	f000 fba9 	bl	80073ec <__mcmp>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	dc96      	bgt.n	8006bcc <_dtoa_r+0xabc>
 8006c9e:	d102      	bne.n	8006ca6 <_dtoa_r+0xb96>
 8006ca0:	f019 0f01 	tst.w	r9, #1
 8006ca4:	d192      	bne.n	8006bcc <_dtoa_r+0xabc>
 8006ca6:	462b      	mov	r3, r5
 8006ca8:	461d      	mov	r5, r3
 8006caa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cae:	2a30      	cmp	r2, #48	; 0x30
 8006cb0:	d0fa      	beq.n	8006ca8 <_dtoa_r+0xb98>
 8006cb2:	e6dd      	b.n	8006a70 <_dtoa_r+0x960>
 8006cb4:	9a00      	ldr	r2, [sp, #0]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d189      	bne.n	8006bce <_dtoa_r+0xabe>
 8006cba:	f10b 0b01 	add.w	fp, fp, #1
 8006cbe:	2331      	movs	r3, #49	; 0x31
 8006cc0:	e796      	b.n	8006bf0 <_dtoa_r+0xae0>
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <_dtoa_r+0xbdc>)
 8006cc4:	f7ff ba99 	b.w	80061fa <_dtoa_r+0xea>
 8006cc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f47f aa6d 	bne.w	80061aa <_dtoa_r+0x9a>
 8006cd0:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <_dtoa_r+0xbe0>)
 8006cd2:	f7ff ba92 	b.w	80061fa <_dtoa_r+0xea>
 8006cd6:	9b01      	ldr	r3, [sp, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	dcb5      	bgt.n	8006c48 <_dtoa_r+0xb38>
 8006cdc:	9b07      	ldr	r3, [sp, #28]
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	f73f aeb1 	bgt.w	8006a46 <_dtoa_r+0x936>
 8006ce4:	e7b0      	b.n	8006c48 <_dtoa_r+0xb38>
 8006ce6:	bf00      	nop
 8006ce8:	08007ebc 	.word	0x08007ebc
 8006cec:	08007e1c 	.word	0x08007e1c
 8006cf0:	08007e40 	.word	0x08007e40

08006cf4 <_free_r>:
 8006cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cf6:	2900      	cmp	r1, #0
 8006cf8:	d044      	beq.n	8006d84 <_free_r+0x90>
 8006cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cfe:	9001      	str	r0, [sp, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f1a1 0404 	sub.w	r4, r1, #4
 8006d06:	bfb8      	it	lt
 8006d08:	18e4      	addlt	r4, r4, r3
 8006d0a:	f000 f8e7 	bl	8006edc <__malloc_lock>
 8006d0e:	4a1e      	ldr	r2, [pc, #120]	; (8006d88 <_free_r+0x94>)
 8006d10:	9801      	ldr	r0, [sp, #4]
 8006d12:	6813      	ldr	r3, [r2, #0]
 8006d14:	b933      	cbnz	r3, 8006d24 <_free_r+0x30>
 8006d16:	6063      	str	r3, [r4, #4]
 8006d18:	6014      	str	r4, [r2, #0]
 8006d1a:	b003      	add	sp, #12
 8006d1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d20:	f000 b8e2 	b.w	8006ee8 <__malloc_unlock>
 8006d24:	42a3      	cmp	r3, r4
 8006d26:	d908      	bls.n	8006d3a <_free_r+0x46>
 8006d28:	6825      	ldr	r5, [r4, #0]
 8006d2a:	1961      	adds	r1, r4, r5
 8006d2c:	428b      	cmp	r3, r1
 8006d2e:	bf01      	itttt	eq
 8006d30:	6819      	ldreq	r1, [r3, #0]
 8006d32:	685b      	ldreq	r3, [r3, #4]
 8006d34:	1949      	addeq	r1, r1, r5
 8006d36:	6021      	streq	r1, [r4, #0]
 8006d38:	e7ed      	b.n	8006d16 <_free_r+0x22>
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	b10b      	cbz	r3, 8006d44 <_free_r+0x50>
 8006d40:	42a3      	cmp	r3, r4
 8006d42:	d9fa      	bls.n	8006d3a <_free_r+0x46>
 8006d44:	6811      	ldr	r1, [r2, #0]
 8006d46:	1855      	adds	r5, r2, r1
 8006d48:	42a5      	cmp	r5, r4
 8006d4a:	d10b      	bne.n	8006d64 <_free_r+0x70>
 8006d4c:	6824      	ldr	r4, [r4, #0]
 8006d4e:	4421      	add	r1, r4
 8006d50:	1854      	adds	r4, r2, r1
 8006d52:	42a3      	cmp	r3, r4
 8006d54:	6011      	str	r1, [r2, #0]
 8006d56:	d1e0      	bne.n	8006d1a <_free_r+0x26>
 8006d58:	681c      	ldr	r4, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	6053      	str	r3, [r2, #4]
 8006d5e:	440c      	add	r4, r1
 8006d60:	6014      	str	r4, [r2, #0]
 8006d62:	e7da      	b.n	8006d1a <_free_r+0x26>
 8006d64:	d902      	bls.n	8006d6c <_free_r+0x78>
 8006d66:	230c      	movs	r3, #12
 8006d68:	6003      	str	r3, [r0, #0]
 8006d6a:	e7d6      	b.n	8006d1a <_free_r+0x26>
 8006d6c:	6825      	ldr	r5, [r4, #0]
 8006d6e:	1961      	adds	r1, r4, r5
 8006d70:	428b      	cmp	r3, r1
 8006d72:	bf04      	itt	eq
 8006d74:	6819      	ldreq	r1, [r3, #0]
 8006d76:	685b      	ldreq	r3, [r3, #4]
 8006d78:	6063      	str	r3, [r4, #4]
 8006d7a:	bf04      	itt	eq
 8006d7c:	1949      	addeq	r1, r1, r5
 8006d7e:	6021      	streq	r1, [r4, #0]
 8006d80:	6054      	str	r4, [r2, #4]
 8006d82:	e7ca      	b.n	8006d1a <_free_r+0x26>
 8006d84:	b003      	add	sp, #12
 8006d86:	bd30      	pop	{r4, r5, pc}
 8006d88:	20000520 	.word	0x20000520

08006d8c <malloc>:
 8006d8c:	4b02      	ldr	r3, [pc, #8]	; (8006d98 <malloc+0xc>)
 8006d8e:	4601      	mov	r1, r0
 8006d90:	6818      	ldr	r0, [r3, #0]
 8006d92:	f000 b823 	b.w	8006ddc <_malloc_r>
 8006d96:	bf00      	nop
 8006d98:	20000064 	.word	0x20000064

08006d9c <sbrk_aligned>:
 8006d9c:	b570      	push	{r4, r5, r6, lr}
 8006d9e:	4e0e      	ldr	r6, [pc, #56]	; (8006dd8 <sbrk_aligned+0x3c>)
 8006da0:	460c      	mov	r4, r1
 8006da2:	6831      	ldr	r1, [r6, #0]
 8006da4:	4605      	mov	r5, r0
 8006da6:	b911      	cbnz	r1, 8006dae <sbrk_aligned+0x12>
 8006da8:	f000 fcce 	bl	8007748 <_sbrk_r>
 8006dac:	6030      	str	r0, [r6, #0]
 8006dae:	4621      	mov	r1, r4
 8006db0:	4628      	mov	r0, r5
 8006db2:	f000 fcc9 	bl	8007748 <_sbrk_r>
 8006db6:	1c43      	adds	r3, r0, #1
 8006db8:	d00a      	beq.n	8006dd0 <sbrk_aligned+0x34>
 8006dba:	1cc4      	adds	r4, r0, #3
 8006dbc:	f024 0403 	bic.w	r4, r4, #3
 8006dc0:	42a0      	cmp	r0, r4
 8006dc2:	d007      	beq.n	8006dd4 <sbrk_aligned+0x38>
 8006dc4:	1a21      	subs	r1, r4, r0
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f000 fcbe 	bl	8007748 <_sbrk_r>
 8006dcc:	3001      	adds	r0, #1
 8006dce:	d101      	bne.n	8006dd4 <sbrk_aligned+0x38>
 8006dd0:	f04f 34ff 	mov.w	r4, #4294967295
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}
 8006dd8:	20000524 	.word	0x20000524

08006ddc <_malloc_r>:
 8006ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006de0:	1ccd      	adds	r5, r1, #3
 8006de2:	f025 0503 	bic.w	r5, r5, #3
 8006de6:	3508      	adds	r5, #8
 8006de8:	2d0c      	cmp	r5, #12
 8006dea:	bf38      	it	cc
 8006dec:	250c      	movcc	r5, #12
 8006dee:	2d00      	cmp	r5, #0
 8006df0:	4607      	mov	r7, r0
 8006df2:	db01      	blt.n	8006df8 <_malloc_r+0x1c>
 8006df4:	42a9      	cmp	r1, r5
 8006df6:	d905      	bls.n	8006e04 <_malloc_r+0x28>
 8006df8:	230c      	movs	r3, #12
 8006dfa:	603b      	str	r3, [r7, #0]
 8006dfc:	2600      	movs	r6, #0
 8006dfe:	4630      	mov	r0, r6
 8006e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ed8 <_malloc_r+0xfc>
 8006e08:	f000 f868 	bl	8006edc <__malloc_lock>
 8006e0c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e10:	461c      	mov	r4, r3
 8006e12:	bb5c      	cbnz	r4, 8006e6c <_malloc_r+0x90>
 8006e14:	4629      	mov	r1, r5
 8006e16:	4638      	mov	r0, r7
 8006e18:	f7ff ffc0 	bl	8006d9c <sbrk_aligned>
 8006e1c:	1c43      	adds	r3, r0, #1
 8006e1e:	4604      	mov	r4, r0
 8006e20:	d155      	bne.n	8006ece <_malloc_r+0xf2>
 8006e22:	f8d8 4000 	ldr.w	r4, [r8]
 8006e26:	4626      	mov	r6, r4
 8006e28:	2e00      	cmp	r6, #0
 8006e2a:	d145      	bne.n	8006eb8 <_malloc_r+0xdc>
 8006e2c:	2c00      	cmp	r4, #0
 8006e2e:	d048      	beq.n	8006ec2 <_malloc_r+0xe6>
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	4631      	mov	r1, r6
 8006e34:	4638      	mov	r0, r7
 8006e36:	eb04 0903 	add.w	r9, r4, r3
 8006e3a:	f000 fc85 	bl	8007748 <_sbrk_r>
 8006e3e:	4581      	cmp	r9, r0
 8006e40:	d13f      	bne.n	8006ec2 <_malloc_r+0xe6>
 8006e42:	6821      	ldr	r1, [r4, #0]
 8006e44:	1a6d      	subs	r5, r5, r1
 8006e46:	4629      	mov	r1, r5
 8006e48:	4638      	mov	r0, r7
 8006e4a:	f7ff ffa7 	bl	8006d9c <sbrk_aligned>
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d037      	beq.n	8006ec2 <_malloc_r+0xe6>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	442b      	add	r3, r5
 8006e56:	6023      	str	r3, [r4, #0]
 8006e58:	f8d8 3000 	ldr.w	r3, [r8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d038      	beq.n	8006ed2 <_malloc_r+0xf6>
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	42a2      	cmp	r2, r4
 8006e64:	d12b      	bne.n	8006ebe <_malloc_r+0xe2>
 8006e66:	2200      	movs	r2, #0
 8006e68:	605a      	str	r2, [r3, #4]
 8006e6a:	e00f      	b.n	8006e8c <_malloc_r+0xb0>
 8006e6c:	6822      	ldr	r2, [r4, #0]
 8006e6e:	1b52      	subs	r2, r2, r5
 8006e70:	d41f      	bmi.n	8006eb2 <_malloc_r+0xd6>
 8006e72:	2a0b      	cmp	r2, #11
 8006e74:	d917      	bls.n	8006ea6 <_malloc_r+0xca>
 8006e76:	1961      	adds	r1, r4, r5
 8006e78:	42a3      	cmp	r3, r4
 8006e7a:	6025      	str	r5, [r4, #0]
 8006e7c:	bf18      	it	ne
 8006e7e:	6059      	strne	r1, [r3, #4]
 8006e80:	6863      	ldr	r3, [r4, #4]
 8006e82:	bf08      	it	eq
 8006e84:	f8c8 1000 	streq.w	r1, [r8]
 8006e88:	5162      	str	r2, [r4, r5]
 8006e8a:	604b      	str	r3, [r1, #4]
 8006e8c:	4638      	mov	r0, r7
 8006e8e:	f104 060b 	add.w	r6, r4, #11
 8006e92:	f000 f829 	bl	8006ee8 <__malloc_unlock>
 8006e96:	f026 0607 	bic.w	r6, r6, #7
 8006e9a:	1d23      	adds	r3, r4, #4
 8006e9c:	1af2      	subs	r2, r6, r3
 8006e9e:	d0ae      	beq.n	8006dfe <_malloc_r+0x22>
 8006ea0:	1b9b      	subs	r3, r3, r6
 8006ea2:	50a3      	str	r3, [r4, r2]
 8006ea4:	e7ab      	b.n	8006dfe <_malloc_r+0x22>
 8006ea6:	42a3      	cmp	r3, r4
 8006ea8:	6862      	ldr	r2, [r4, #4]
 8006eaa:	d1dd      	bne.n	8006e68 <_malloc_r+0x8c>
 8006eac:	f8c8 2000 	str.w	r2, [r8]
 8006eb0:	e7ec      	b.n	8006e8c <_malloc_r+0xb0>
 8006eb2:	4623      	mov	r3, r4
 8006eb4:	6864      	ldr	r4, [r4, #4]
 8006eb6:	e7ac      	b.n	8006e12 <_malloc_r+0x36>
 8006eb8:	4634      	mov	r4, r6
 8006eba:	6876      	ldr	r6, [r6, #4]
 8006ebc:	e7b4      	b.n	8006e28 <_malloc_r+0x4c>
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	e7cc      	b.n	8006e5c <_malloc_r+0x80>
 8006ec2:	230c      	movs	r3, #12
 8006ec4:	603b      	str	r3, [r7, #0]
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	f000 f80e 	bl	8006ee8 <__malloc_unlock>
 8006ecc:	e797      	b.n	8006dfe <_malloc_r+0x22>
 8006ece:	6025      	str	r5, [r4, #0]
 8006ed0:	e7dc      	b.n	8006e8c <_malloc_r+0xb0>
 8006ed2:	605b      	str	r3, [r3, #4]
 8006ed4:	deff      	udf	#255	; 0xff
 8006ed6:	bf00      	nop
 8006ed8:	20000520 	.word	0x20000520

08006edc <__malloc_lock>:
 8006edc:	4801      	ldr	r0, [pc, #4]	; (8006ee4 <__malloc_lock+0x8>)
 8006ede:	f7ff b88c 	b.w	8005ffa <__retarget_lock_acquire_recursive>
 8006ee2:	bf00      	nop
 8006ee4:	2000051c 	.word	0x2000051c

08006ee8 <__malloc_unlock>:
 8006ee8:	4801      	ldr	r0, [pc, #4]	; (8006ef0 <__malloc_unlock+0x8>)
 8006eea:	f7ff b887 	b.w	8005ffc <__retarget_lock_release_recursive>
 8006eee:	bf00      	nop
 8006ef0:	2000051c 	.word	0x2000051c

08006ef4 <_Balloc>:
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	69c6      	ldr	r6, [r0, #28]
 8006ef8:	4604      	mov	r4, r0
 8006efa:	460d      	mov	r5, r1
 8006efc:	b976      	cbnz	r6, 8006f1c <_Balloc+0x28>
 8006efe:	2010      	movs	r0, #16
 8006f00:	f7ff ff44 	bl	8006d8c <malloc>
 8006f04:	4602      	mov	r2, r0
 8006f06:	61e0      	str	r0, [r4, #28]
 8006f08:	b920      	cbnz	r0, 8006f14 <_Balloc+0x20>
 8006f0a:	4b18      	ldr	r3, [pc, #96]	; (8006f6c <_Balloc+0x78>)
 8006f0c:	4818      	ldr	r0, [pc, #96]	; (8006f70 <_Balloc+0x7c>)
 8006f0e:	216b      	movs	r1, #107	; 0x6b
 8006f10:	f000 fc38 	bl	8007784 <__assert_func>
 8006f14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f18:	6006      	str	r6, [r0, #0]
 8006f1a:	60c6      	str	r6, [r0, #12]
 8006f1c:	69e6      	ldr	r6, [r4, #28]
 8006f1e:	68f3      	ldr	r3, [r6, #12]
 8006f20:	b183      	cbz	r3, 8006f44 <_Balloc+0x50>
 8006f22:	69e3      	ldr	r3, [r4, #28]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f2a:	b9b8      	cbnz	r0, 8006f5c <_Balloc+0x68>
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	fa01 f605 	lsl.w	r6, r1, r5
 8006f32:	1d72      	adds	r2, r6, #5
 8006f34:	0092      	lsls	r2, r2, #2
 8006f36:	4620      	mov	r0, r4
 8006f38:	f000 fc42 	bl	80077c0 <_calloc_r>
 8006f3c:	b160      	cbz	r0, 8006f58 <_Balloc+0x64>
 8006f3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f42:	e00e      	b.n	8006f62 <_Balloc+0x6e>
 8006f44:	2221      	movs	r2, #33	; 0x21
 8006f46:	2104      	movs	r1, #4
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f000 fc39 	bl	80077c0 <_calloc_r>
 8006f4e:	69e3      	ldr	r3, [r4, #28]
 8006f50:	60f0      	str	r0, [r6, #12]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e4      	bne.n	8006f22 <_Balloc+0x2e>
 8006f58:	2000      	movs	r0, #0
 8006f5a:	bd70      	pop	{r4, r5, r6, pc}
 8006f5c:	6802      	ldr	r2, [r0, #0]
 8006f5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f62:	2300      	movs	r3, #0
 8006f64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f68:	e7f7      	b.n	8006f5a <_Balloc+0x66>
 8006f6a:	bf00      	nop
 8006f6c:	08007e4d 	.word	0x08007e4d
 8006f70:	08007ecd 	.word	0x08007ecd

08006f74 <_Bfree>:
 8006f74:	b570      	push	{r4, r5, r6, lr}
 8006f76:	69c6      	ldr	r6, [r0, #28]
 8006f78:	4605      	mov	r5, r0
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	b976      	cbnz	r6, 8006f9c <_Bfree+0x28>
 8006f7e:	2010      	movs	r0, #16
 8006f80:	f7ff ff04 	bl	8006d8c <malloc>
 8006f84:	4602      	mov	r2, r0
 8006f86:	61e8      	str	r0, [r5, #28]
 8006f88:	b920      	cbnz	r0, 8006f94 <_Bfree+0x20>
 8006f8a:	4b09      	ldr	r3, [pc, #36]	; (8006fb0 <_Bfree+0x3c>)
 8006f8c:	4809      	ldr	r0, [pc, #36]	; (8006fb4 <_Bfree+0x40>)
 8006f8e:	218f      	movs	r1, #143	; 0x8f
 8006f90:	f000 fbf8 	bl	8007784 <__assert_func>
 8006f94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f98:	6006      	str	r6, [r0, #0]
 8006f9a:	60c6      	str	r6, [r0, #12]
 8006f9c:	b13c      	cbz	r4, 8006fae <_Bfree+0x3a>
 8006f9e:	69eb      	ldr	r3, [r5, #28]
 8006fa0:	6862      	ldr	r2, [r4, #4]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fa8:	6021      	str	r1, [r4, #0]
 8006faa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fae:	bd70      	pop	{r4, r5, r6, pc}
 8006fb0:	08007e4d 	.word	0x08007e4d
 8006fb4:	08007ecd 	.word	0x08007ecd

08006fb8 <__multadd>:
 8006fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fbc:	690d      	ldr	r5, [r1, #16]
 8006fbe:	4607      	mov	r7, r0
 8006fc0:	460c      	mov	r4, r1
 8006fc2:	461e      	mov	r6, r3
 8006fc4:	f101 0c14 	add.w	ip, r1, #20
 8006fc8:	2000      	movs	r0, #0
 8006fca:	f8dc 3000 	ldr.w	r3, [ip]
 8006fce:	b299      	uxth	r1, r3
 8006fd0:	fb02 6101 	mla	r1, r2, r1, r6
 8006fd4:	0c1e      	lsrs	r6, r3, #16
 8006fd6:	0c0b      	lsrs	r3, r1, #16
 8006fd8:	fb02 3306 	mla	r3, r2, r6, r3
 8006fdc:	b289      	uxth	r1, r1
 8006fde:	3001      	adds	r0, #1
 8006fe0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006fe4:	4285      	cmp	r5, r0
 8006fe6:	f84c 1b04 	str.w	r1, [ip], #4
 8006fea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006fee:	dcec      	bgt.n	8006fca <__multadd+0x12>
 8006ff0:	b30e      	cbz	r6, 8007036 <__multadd+0x7e>
 8006ff2:	68a3      	ldr	r3, [r4, #8]
 8006ff4:	42ab      	cmp	r3, r5
 8006ff6:	dc19      	bgt.n	800702c <__multadd+0x74>
 8006ff8:	6861      	ldr	r1, [r4, #4]
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	3101      	adds	r1, #1
 8006ffe:	f7ff ff79 	bl	8006ef4 <_Balloc>
 8007002:	4680      	mov	r8, r0
 8007004:	b928      	cbnz	r0, 8007012 <__multadd+0x5a>
 8007006:	4602      	mov	r2, r0
 8007008:	4b0c      	ldr	r3, [pc, #48]	; (800703c <__multadd+0x84>)
 800700a:	480d      	ldr	r0, [pc, #52]	; (8007040 <__multadd+0x88>)
 800700c:	21ba      	movs	r1, #186	; 0xba
 800700e:	f000 fbb9 	bl	8007784 <__assert_func>
 8007012:	6922      	ldr	r2, [r4, #16]
 8007014:	3202      	adds	r2, #2
 8007016:	f104 010c 	add.w	r1, r4, #12
 800701a:	0092      	lsls	r2, r2, #2
 800701c:	300c      	adds	r0, #12
 800701e:	f000 fba3 	bl	8007768 <memcpy>
 8007022:	4621      	mov	r1, r4
 8007024:	4638      	mov	r0, r7
 8007026:	f7ff ffa5 	bl	8006f74 <_Bfree>
 800702a:	4644      	mov	r4, r8
 800702c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007030:	3501      	adds	r5, #1
 8007032:	615e      	str	r6, [r3, #20]
 8007034:	6125      	str	r5, [r4, #16]
 8007036:	4620      	mov	r0, r4
 8007038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800703c:	08007ebc 	.word	0x08007ebc
 8007040:	08007ecd 	.word	0x08007ecd

08007044 <__hi0bits>:
 8007044:	0c03      	lsrs	r3, r0, #16
 8007046:	041b      	lsls	r3, r3, #16
 8007048:	b9d3      	cbnz	r3, 8007080 <__hi0bits+0x3c>
 800704a:	0400      	lsls	r0, r0, #16
 800704c:	2310      	movs	r3, #16
 800704e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007052:	bf04      	itt	eq
 8007054:	0200      	lsleq	r0, r0, #8
 8007056:	3308      	addeq	r3, #8
 8007058:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800705c:	bf04      	itt	eq
 800705e:	0100      	lsleq	r0, r0, #4
 8007060:	3304      	addeq	r3, #4
 8007062:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007066:	bf04      	itt	eq
 8007068:	0080      	lsleq	r0, r0, #2
 800706a:	3302      	addeq	r3, #2
 800706c:	2800      	cmp	r0, #0
 800706e:	db05      	blt.n	800707c <__hi0bits+0x38>
 8007070:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007074:	f103 0301 	add.w	r3, r3, #1
 8007078:	bf08      	it	eq
 800707a:	2320      	moveq	r3, #32
 800707c:	4618      	mov	r0, r3
 800707e:	4770      	bx	lr
 8007080:	2300      	movs	r3, #0
 8007082:	e7e4      	b.n	800704e <__hi0bits+0xa>

08007084 <__lo0bits>:
 8007084:	6803      	ldr	r3, [r0, #0]
 8007086:	f013 0207 	ands.w	r2, r3, #7
 800708a:	d00c      	beq.n	80070a6 <__lo0bits+0x22>
 800708c:	07d9      	lsls	r1, r3, #31
 800708e:	d422      	bmi.n	80070d6 <__lo0bits+0x52>
 8007090:	079a      	lsls	r2, r3, #30
 8007092:	bf49      	itett	mi
 8007094:	085b      	lsrmi	r3, r3, #1
 8007096:	089b      	lsrpl	r3, r3, #2
 8007098:	6003      	strmi	r3, [r0, #0]
 800709a:	2201      	movmi	r2, #1
 800709c:	bf5c      	itt	pl
 800709e:	6003      	strpl	r3, [r0, #0]
 80070a0:	2202      	movpl	r2, #2
 80070a2:	4610      	mov	r0, r2
 80070a4:	4770      	bx	lr
 80070a6:	b299      	uxth	r1, r3
 80070a8:	b909      	cbnz	r1, 80070ae <__lo0bits+0x2a>
 80070aa:	0c1b      	lsrs	r3, r3, #16
 80070ac:	2210      	movs	r2, #16
 80070ae:	b2d9      	uxtb	r1, r3
 80070b0:	b909      	cbnz	r1, 80070b6 <__lo0bits+0x32>
 80070b2:	3208      	adds	r2, #8
 80070b4:	0a1b      	lsrs	r3, r3, #8
 80070b6:	0719      	lsls	r1, r3, #28
 80070b8:	bf04      	itt	eq
 80070ba:	091b      	lsreq	r3, r3, #4
 80070bc:	3204      	addeq	r2, #4
 80070be:	0799      	lsls	r1, r3, #30
 80070c0:	bf04      	itt	eq
 80070c2:	089b      	lsreq	r3, r3, #2
 80070c4:	3202      	addeq	r2, #2
 80070c6:	07d9      	lsls	r1, r3, #31
 80070c8:	d403      	bmi.n	80070d2 <__lo0bits+0x4e>
 80070ca:	085b      	lsrs	r3, r3, #1
 80070cc:	f102 0201 	add.w	r2, r2, #1
 80070d0:	d003      	beq.n	80070da <__lo0bits+0x56>
 80070d2:	6003      	str	r3, [r0, #0]
 80070d4:	e7e5      	b.n	80070a2 <__lo0bits+0x1e>
 80070d6:	2200      	movs	r2, #0
 80070d8:	e7e3      	b.n	80070a2 <__lo0bits+0x1e>
 80070da:	2220      	movs	r2, #32
 80070dc:	e7e1      	b.n	80070a2 <__lo0bits+0x1e>
	...

080070e0 <__i2b>:
 80070e0:	b510      	push	{r4, lr}
 80070e2:	460c      	mov	r4, r1
 80070e4:	2101      	movs	r1, #1
 80070e6:	f7ff ff05 	bl	8006ef4 <_Balloc>
 80070ea:	4602      	mov	r2, r0
 80070ec:	b928      	cbnz	r0, 80070fa <__i2b+0x1a>
 80070ee:	4b05      	ldr	r3, [pc, #20]	; (8007104 <__i2b+0x24>)
 80070f0:	4805      	ldr	r0, [pc, #20]	; (8007108 <__i2b+0x28>)
 80070f2:	f240 1145 	movw	r1, #325	; 0x145
 80070f6:	f000 fb45 	bl	8007784 <__assert_func>
 80070fa:	2301      	movs	r3, #1
 80070fc:	6144      	str	r4, [r0, #20]
 80070fe:	6103      	str	r3, [r0, #16]
 8007100:	bd10      	pop	{r4, pc}
 8007102:	bf00      	nop
 8007104:	08007ebc 	.word	0x08007ebc
 8007108:	08007ecd 	.word	0x08007ecd

0800710c <__multiply>:
 800710c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007110:	4691      	mov	r9, r2
 8007112:	690a      	ldr	r2, [r1, #16]
 8007114:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007118:	429a      	cmp	r2, r3
 800711a:	bfb8      	it	lt
 800711c:	460b      	movlt	r3, r1
 800711e:	460c      	mov	r4, r1
 8007120:	bfbc      	itt	lt
 8007122:	464c      	movlt	r4, r9
 8007124:	4699      	movlt	r9, r3
 8007126:	6927      	ldr	r7, [r4, #16]
 8007128:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800712c:	68a3      	ldr	r3, [r4, #8]
 800712e:	6861      	ldr	r1, [r4, #4]
 8007130:	eb07 060a 	add.w	r6, r7, sl
 8007134:	42b3      	cmp	r3, r6
 8007136:	b085      	sub	sp, #20
 8007138:	bfb8      	it	lt
 800713a:	3101      	addlt	r1, #1
 800713c:	f7ff feda 	bl	8006ef4 <_Balloc>
 8007140:	b930      	cbnz	r0, 8007150 <__multiply+0x44>
 8007142:	4602      	mov	r2, r0
 8007144:	4b44      	ldr	r3, [pc, #272]	; (8007258 <__multiply+0x14c>)
 8007146:	4845      	ldr	r0, [pc, #276]	; (800725c <__multiply+0x150>)
 8007148:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800714c:	f000 fb1a 	bl	8007784 <__assert_func>
 8007150:	f100 0514 	add.w	r5, r0, #20
 8007154:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007158:	462b      	mov	r3, r5
 800715a:	2200      	movs	r2, #0
 800715c:	4543      	cmp	r3, r8
 800715e:	d321      	bcc.n	80071a4 <__multiply+0x98>
 8007160:	f104 0314 	add.w	r3, r4, #20
 8007164:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007168:	f109 0314 	add.w	r3, r9, #20
 800716c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007170:	9202      	str	r2, [sp, #8]
 8007172:	1b3a      	subs	r2, r7, r4
 8007174:	3a15      	subs	r2, #21
 8007176:	f022 0203 	bic.w	r2, r2, #3
 800717a:	3204      	adds	r2, #4
 800717c:	f104 0115 	add.w	r1, r4, #21
 8007180:	428f      	cmp	r7, r1
 8007182:	bf38      	it	cc
 8007184:	2204      	movcc	r2, #4
 8007186:	9201      	str	r2, [sp, #4]
 8007188:	9a02      	ldr	r2, [sp, #8]
 800718a:	9303      	str	r3, [sp, #12]
 800718c:	429a      	cmp	r2, r3
 800718e:	d80c      	bhi.n	80071aa <__multiply+0x9e>
 8007190:	2e00      	cmp	r6, #0
 8007192:	dd03      	ble.n	800719c <__multiply+0x90>
 8007194:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007198:	2b00      	cmp	r3, #0
 800719a:	d05b      	beq.n	8007254 <__multiply+0x148>
 800719c:	6106      	str	r6, [r0, #16]
 800719e:	b005      	add	sp, #20
 80071a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a4:	f843 2b04 	str.w	r2, [r3], #4
 80071a8:	e7d8      	b.n	800715c <__multiply+0x50>
 80071aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80071ae:	f1ba 0f00 	cmp.w	sl, #0
 80071b2:	d024      	beq.n	80071fe <__multiply+0xf2>
 80071b4:	f104 0e14 	add.w	lr, r4, #20
 80071b8:	46a9      	mov	r9, r5
 80071ba:	f04f 0c00 	mov.w	ip, #0
 80071be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80071c2:	f8d9 1000 	ldr.w	r1, [r9]
 80071c6:	fa1f fb82 	uxth.w	fp, r2
 80071ca:	b289      	uxth	r1, r1
 80071cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80071d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80071d4:	f8d9 2000 	ldr.w	r2, [r9]
 80071d8:	4461      	add	r1, ip
 80071da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80071de:	fb0a c20b 	mla	r2, sl, fp, ip
 80071e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80071e6:	b289      	uxth	r1, r1
 80071e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80071ec:	4577      	cmp	r7, lr
 80071ee:	f849 1b04 	str.w	r1, [r9], #4
 80071f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80071f6:	d8e2      	bhi.n	80071be <__multiply+0xb2>
 80071f8:	9a01      	ldr	r2, [sp, #4]
 80071fa:	f845 c002 	str.w	ip, [r5, r2]
 80071fe:	9a03      	ldr	r2, [sp, #12]
 8007200:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007204:	3304      	adds	r3, #4
 8007206:	f1b9 0f00 	cmp.w	r9, #0
 800720a:	d021      	beq.n	8007250 <__multiply+0x144>
 800720c:	6829      	ldr	r1, [r5, #0]
 800720e:	f104 0c14 	add.w	ip, r4, #20
 8007212:	46ae      	mov	lr, r5
 8007214:	f04f 0a00 	mov.w	sl, #0
 8007218:	f8bc b000 	ldrh.w	fp, [ip]
 800721c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007220:	fb09 220b 	mla	r2, r9, fp, r2
 8007224:	4452      	add	r2, sl
 8007226:	b289      	uxth	r1, r1
 8007228:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800722c:	f84e 1b04 	str.w	r1, [lr], #4
 8007230:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007234:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007238:	f8be 1000 	ldrh.w	r1, [lr]
 800723c:	fb09 110a 	mla	r1, r9, sl, r1
 8007240:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007244:	4567      	cmp	r7, ip
 8007246:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800724a:	d8e5      	bhi.n	8007218 <__multiply+0x10c>
 800724c:	9a01      	ldr	r2, [sp, #4]
 800724e:	50a9      	str	r1, [r5, r2]
 8007250:	3504      	adds	r5, #4
 8007252:	e799      	b.n	8007188 <__multiply+0x7c>
 8007254:	3e01      	subs	r6, #1
 8007256:	e79b      	b.n	8007190 <__multiply+0x84>
 8007258:	08007ebc 	.word	0x08007ebc
 800725c:	08007ecd 	.word	0x08007ecd

08007260 <__pow5mult>:
 8007260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007264:	4615      	mov	r5, r2
 8007266:	f012 0203 	ands.w	r2, r2, #3
 800726a:	4606      	mov	r6, r0
 800726c:	460f      	mov	r7, r1
 800726e:	d007      	beq.n	8007280 <__pow5mult+0x20>
 8007270:	4c25      	ldr	r4, [pc, #148]	; (8007308 <__pow5mult+0xa8>)
 8007272:	3a01      	subs	r2, #1
 8007274:	2300      	movs	r3, #0
 8007276:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800727a:	f7ff fe9d 	bl	8006fb8 <__multadd>
 800727e:	4607      	mov	r7, r0
 8007280:	10ad      	asrs	r5, r5, #2
 8007282:	d03d      	beq.n	8007300 <__pow5mult+0xa0>
 8007284:	69f4      	ldr	r4, [r6, #28]
 8007286:	b97c      	cbnz	r4, 80072a8 <__pow5mult+0x48>
 8007288:	2010      	movs	r0, #16
 800728a:	f7ff fd7f 	bl	8006d8c <malloc>
 800728e:	4602      	mov	r2, r0
 8007290:	61f0      	str	r0, [r6, #28]
 8007292:	b928      	cbnz	r0, 80072a0 <__pow5mult+0x40>
 8007294:	4b1d      	ldr	r3, [pc, #116]	; (800730c <__pow5mult+0xac>)
 8007296:	481e      	ldr	r0, [pc, #120]	; (8007310 <__pow5mult+0xb0>)
 8007298:	f240 11b3 	movw	r1, #435	; 0x1b3
 800729c:	f000 fa72 	bl	8007784 <__assert_func>
 80072a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072a4:	6004      	str	r4, [r0, #0]
 80072a6:	60c4      	str	r4, [r0, #12]
 80072a8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80072ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072b0:	b94c      	cbnz	r4, 80072c6 <__pow5mult+0x66>
 80072b2:	f240 2171 	movw	r1, #625	; 0x271
 80072b6:	4630      	mov	r0, r6
 80072b8:	f7ff ff12 	bl	80070e0 <__i2b>
 80072bc:	2300      	movs	r3, #0
 80072be:	f8c8 0008 	str.w	r0, [r8, #8]
 80072c2:	4604      	mov	r4, r0
 80072c4:	6003      	str	r3, [r0, #0]
 80072c6:	f04f 0900 	mov.w	r9, #0
 80072ca:	07eb      	lsls	r3, r5, #31
 80072cc:	d50a      	bpl.n	80072e4 <__pow5mult+0x84>
 80072ce:	4639      	mov	r1, r7
 80072d0:	4622      	mov	r2, r4
 80072d2:	4630      	mov	r0, r6
 80072d4:	f7ff ff1a 	bl	800710c <__multiply>
 80072d8:	4639      	mov	r1, r7
 80072da:	4680      	mov	r8, r0
 80072dc:	4630      	mov	r0, r6
 80072de:	f7ff fe49 	bl	8006f74 <_Bfree>
 80072e2:	4647      	mov	r7, r8
 80072e4:	106d      	asrs	r5, r5, #1
 80072e6:	d00b      	beq.n	8007300 <__pow5mult+0xa0>
 80072e8:	6820      	ldr	r0, [r4, #0]
 80072ea:	b938      	cbnz	r0, 80072fc <__pow5mult+0x9c>
 80072ec:	4622      	mov	r2, r4
 80072ee:	4621      	mov	r1, r4
 80072f0:	4630      	mov	r0, r6
 80072f2:	f7ff ff0b 	bl	800710c <__multiply>
 80072f6:	6020      	str	r0, [r4, #0]
 80072f8:	f8c0 9000 	str.w	r9, [r0]
 80072fc:	4604      	mov	r4, r0
 80072fe:	e7e4      	b.n	80072ca <__pow5mult+0x6a>
 8007300:	4638      	mov	r0, r7
 8007302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007306:	bf00      	nop
 8007308:	08008018 	.word	0x08008018
 800730c:	08007e4d 	.word	0x08007e4d
 8007310:	08007ecd 	.word	0x08007ecd

08007314 <__lshift>:
 8007314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007318:	460c      	mov	r4, r1
 800731a:	6849      	ldr	r1, [r1, #4]
 800731c:	6923      	ldr	r3, [r4, #16]
 800731e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007322:	68a3      	ldr	r3, [r4, #8]
 8007324:	4607      	mov	r7, r0
 8007326:	4691      	mov	r9, r2
 8007328:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800732c:	f108 0601 	add.w	r6, r8, #1
 8007330:	42b3      	cmp	r3, r6
 8007332:	db0b      	blt.n	800734c <__lshift+0x38>
 8007334:	4638      	mov	r0, r7
 8007336:	f7ff fddd 	bl	8006ef4 <_Balloc>
 800733a:	4605      	mov	r5, r0
 800733c:	b948      	cbnz	r0, 8007352 <__lshift+0x3e>
 800733e:	4602      	mov	r2, r0
 8007340:	4b28      	ldr	r3, [pc, #160]	; (80073e4 <__lshift+0xd0>)
 8007342:	4829      	ldr	r0, [pc, #164]	; (80073e8 <__lshift+0xd4>)
 8007344:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007348:	f000 fa1c 	bl	8007784 <__assert_func>
 800734c:	3101      	adds	r1, #1
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	e7ee      	b.n	8007330 <__lshift+0x1c>
 8007352:	2300      	movs	r3, #0
 8007354:	f100 0114 	add.w	r1, r0, #20
 8007358:	f100 0210 	add.w	r2, r0, #16
 800735c:	4618      	mov	r0, r3
 800735e:	4553      	cmp	r3, sl
 8007360:	db33      	blt.n	80073ca <__lshift+0xb6>
 8007362:	6920      	ldr	r0, [r4, #16]
 8007364:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007368:	f104 0314 	add.w	r3, r4, #20
 800736c:	f019 091f 	ands.w	r9, r9, #31
 8007370:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007374:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007378:	d02b      	beq.n	80073d2 <__lshift+0xbe>
 800737a:	f1c9 0e20 	rsb	lr, r9, #32
 800737e:	468a      	mov	sl, r1
 8007380:	2200      	movs	r2, #0
 8007382:	6818      	ldr	r0, [r3, #0]
 8007384:	fa00 f009 	lsl.w	r0, r0, r9
 8007388:	4310      	orrs	r0, r2
 800738a:	f84a 0b04 	str.w	r0, [sl], #4
 800738e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007392:	459c      	cmp	ip, r3
 8007394:	fa22 f20e 	lsr.w	r2, r2, lr
 8007398:	d8f3      	bhi.n	8007382 <__lshift+0x6e>
 800739a:	ebac 0304 	sub.w	r3, ip, r4
 800739e:	3b15      	subs	r3, #21
 80073a0:	f023 0303 	bic.w	r3, r3, #3
 80073a4:	3304      	adds	r3, #4
 80073a6:	f104 0015 	add.w	r0, r4, #21
 80073aa:	4584      	cmp	ip, r0
 80073ac:	bf38      	it	cc
 80073ae:	2304      	movcc	r3, #4
 80073b0:	50ca      	str	r2, [r1, r3]
 80073b2:	b10a      	cbz	r2, 80073b8 <__lshift+0xa4>
 80073b4:	f108 0602 	add.w	r6, r8, #2
 80073b8:	3e01      	subs	r6, #1
 80073ba:	4638      	mov	r0, r7
 80073bc:	612e      	str	r6, [r5, #16]
 80073be:	4621      	mov	r1, r4
 80073c0:	f7ff fdd8 	bl	8006f74 <_Bfree>
 80073c4:	4628      	mov	r0, r5
 80073c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80073ce:	3301      	adds	r3, #1
 80073d0:	e7c5      	b.n	800735e <__lshift+0x4a>
 80073d2:	3904      	subs	r1, #4
 80073d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80073dc:	459c      	cmp	ip, r3
 80073de:	d8f9      	bhi.n	80073d4 <__lshift+0xc0>
 80073e0:	e7ea      	b.n	80073b8 <__lshift+0xa4>
 80073e2:	bf00      	nop
 80073e4:	08007ebc 	.word	0x08007ebc
 80073e8:	08007ecd 	.word	0x08007ecd

080073ec <__mcmp>:
 80073ec:	b530      	push	{r4, r5, lr}
 80073ee:	6902      	ldr	r2, [r0, #16]
 80073f0:	690c      	ldr	r4, [r1, #16]
 80073f2:	1b12      	subs	r2, r2, r4
 80073f4:	d10e      	bne.n	8007414 <__mcmp+0x28>
 80073f6:	f100 0314 	add.w	r3, r0, #20
 80073fa:	3114      	adds	r1, #20
 80073fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007400:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007404:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007408:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800740c:	42a5      	cmp	r5, r4
 800740e:	d003      	beq.n	8007418 <__mcmp+0x2c>
 8007410:	d305      	bcc.n	800741e <__mcmp+0x32>
 8007412:	2201      	movs	r2, #1
 8007414:	4610      	mov	r0, r2
 8007416:	bd30      	pop	{r4, r5, pc}
 8007418:	4283      	cmp	r3, r0
 800741a:	d3f3      	bcc.n	8007404 <__mcmp+0x18>
 800741c:	e7fa      	b.n	8007414 <__mcmp+0x28>
 800741e:	f04f 32ff 	mov.w	r2, #4294967295
 8007422:	e7f7      	b.n	8007414 <__mcmp+0x28>

08007424 <__mdiff>:
 8007424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007428:	460c      	mov	r4, r1
 800742a:	4606      	mov	r6, r0
 800742c:	4611      	mov	r1, r2
 800742e:	4620      	mov	r0, r4
 8007430:	4690      	mov	r8, r2
 8007432:	f7ff ffdb 	bl	80073ec <__mcmp>
 8007436:	1e05      	subs	r5, r0, #0
 8007438:	d110      	bne.n	800745c <__mdiff+0x38>
 800743a:	4629      	mov	r1, r5
 800743c:	4630      	mov	r0, r6
 800743e:	f7ff fd59 	bl	8006ef4 <_Balloc>
 8007442:	b930      	cbnz	r0, 8007452 <__mdiff+0x2e>
 8007444:	4b3a      	ldr	r3, [pc, #232]	; (8007530 <__mdiff+0x10c>)
 8007446:	4602      	mov	r2, r0
 8007448:	f240 2137 	movw	r1, #567	; 0x237
 800744c:	4839      	ldr	r0, [pc, #228]	; (8007534 <__mdiff+0x110>)
 800744e:	f000 f999 	bl	8007784 <__assert_func>
 8007452:	2301      	movs	r3, #1
 8007454:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007458:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800745c:	bfa4      	itt	ge
 800745e:	4643      	movge	r3, r8
 8007460:	46a0      	movge	r8, r4
 8007462:	4630      	mov	r0, r6
 8007464:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007468:	bfa6      	itte	ge
 800746a:	461c      	movge	r4, r3
 800746c:	2500      	movge	r5, #0
 800746e:	2501      	movlt	r5, #1
 8007470:	f7ff fd40 	bl	8006ef4 <_Balloc>
 8007474:	b920      	cbnz	r0, 8007480 <__mdiff+0x5c>
 8007476:	4b2e      	ldr	r3, [pc, #184]	; (8007530 <__mdiff+0x10c>)
 8007478:	4602      	mov	r2, r0
 800747a:	f240 2145 	movw	r1, #581	; 0x245
 800747e:	e7e5      	b.n	800744c <__mdiff+0x28>
 8007480:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007484:	6926      	ldr	r6, [r4, #16]
 8007486:	60c5      	str	r5, [r0, #12]
 8007488:	f104 0914 	add.w	r9, r4, #20
 800748c:	f108 0514 	add.w	r5, r8, #20
 8007490:	f100 0e14 	add.w	lr, r0, #20
 8007494:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007498:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800749c:	f108 0210 	add.w	r2, r8, #16
 80074a0:	46f2      	mov	sl, lr
 80074a2:	2100      	movs	r1, #0
 80074a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80074a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80074ac:	fa11 f88b 	uxtah	r8, r1, fp
 80074b0:	b299      	uxth	r1, r3
 80074b2:	0c1b      	lsrs	r3, r3, #16
 80074b4:	eba8 0801 	sub.w	r8, r8, r1
 80074b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80074bc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80074c0:	fa1f f888 	uxth.w	r8, r8
 80074c4:	1419      	asrs	r1, r3, #16
 80074c6:	454e      	cmp	r6, r9
 80074c8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80074cc:	f84a 3b04 	str.w	r3, [sl], #4
 80074d0:	d8e8      	bhi.n	80074a4 <__mdiff+0x80>
 80074d2:	1b33      	subs	r3, r6, r4
 80074d4:	3b15      	subs	r3, #21
 80074d6:	f023 0303 	bic.w	r3, r3, #3
 80074da:	3304      	adds	r3, #4
 80074dc:	3415      	adds	r4, #21
 80074de:	42a6      	cmp	r6, r4
 80074e0:	bf38      	it	cc
 80074e2:	2304      	movcc	r3, #4
 80074e4:	441d      	add	r5, r3
 80074e6:	4473      	add	r3, lr
 80074e8:	469e      	mov	lr, r3
 80074ea:	462e      	mov	r6, r5
 80074ec:	4566      	cmp	r6, ip
 80074ee:	d30e      	bcc.n	800750e <__mdiff+0xea>
 80074f0:	f10c 0203 	add.w	r2, ip, #3
 80074f4:	1b52      	subs	r2, r2, r5
 80074f6:	f022 0203 	bic.w	r2, r2, #3
 80074fa:	3d03      	subs	r5, #3
 80074fc:	45ac      	cmp	ip, r5
 80074fe:	bf38      	it	cc
 8007500:	2200      	movcc	r2, #0
 8007502:	4413      	add	r3, r2
 8007504:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007508:	b17a      	cbz	r2, 800752a <__mdiff+0x106>
 800750a:	6107      	str	r7, [r0, #16]
 800750c:	e7a4      	b.n	8007458 <__mdiff+0x34>
 800750e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007512:	fa11 f288 	uxtah	r2, r1, r8
 8007516:	1414      	asrs	r4, r2, #16
 8007518:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800751c:	b292      	uxth	r2, r2
 800751e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007522:	f84e 2b04 	str.w	r2, [lr], #4
 8007526:	1421      	asrs	r1, r4, #16
 8007528:	e7e0      	b.n	80074ec <__mdiff+0xc8>
 800752a:	3f01      	subs	r7, #1
 800752c:	e7ea      	b.n	8007504 <__mdiff+0xe0>
 800752e:	bf00      	nop
 8007530:	08007ebc 	.word	0x08007ebc
 8007534:	08007ecd 	.word	0x08007ecd

08007538 <__d2b>:
 8007538:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800753c:	460f      	mov	r7, r1
 800753e:	2101      	movs	r1, #1
 8007540:	ec59 8b10 	vmov	r8, r9, d0
 8007544:	4616      	mov	r6, r2
 8007546:	f7ff fcd5 	bl	8006ef4 <_Balloc>
 800754a:	4604      	mov	r4, r0
 800754c:	b930      	cbnz	r0, 800755c <__d2b+0x24>
 800754e:	4602      	mov	r2, r0
 8007550:	4b24      	ldr	r3, [pc, #144]	; (80075e4 <__d2b+0xac>)
 8007552:	4825      	ldr	r0, [pc, #148]	; (80075e8 <__d2b+0xb0>)
 8007554:	f240 310f 	movw	r1, #783	; 0x30f
 8007558:	f000 f914 	bl	8007784 <__assert_func>
 800755c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007560:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007564:	bb2d      	cbnz	r5, 80075b2 <__d2b+0x7a>
 8007566:	9301      	str	r3, [sp, #4]
 8007568:	f1b8 0300 	subs.w	r3, r8, #0
 800756c:	d026      	beq.n	80075bc <__d2b+0x84>
 800756e:	4668      	mov	r0, sp
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	f7ff fd87 	bl	8007084 <__lo0bits>
 8007576:	e9dd 1200 	ldrd	r1, r2, [sp]
 800757a:	b1e8      	cbz	r0, 80075b8 <__d2b+0x80>
 800757c:	f1c0 0320 	rsb	r3, r0, #32
 8007580:	fa02 f303 	lsl.w	r3, r2, r3
 8007584:	430b      	orrs	r3, r1
 8007586:	40c2      	lsrs	r2, r0
 8007588:	6163      	str	r3, [r4, #20]
 800758a:	9201      	str	r2, [sp, #4]
 800758c:	9b01      	ldr	r3, [sp, #4]
 800758e:	61a3      	str	r3, [r4, #24]
 8007590:	2b00      	cmp	r3, #0
 8007592:	bf14      	ite	ne
 8007594:	2202      	movne	r2, #2
 8007596:	2201      	moveq	r2, #1
 8007598:	6122      	str	r2, [r4, #16]
 800759a:	b1bd      	cbz	r5, 80075cc <__d2b+0x94>
 800759c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80075a0:	4405      	add	r5, r0
 80075a2:	603d      	str	r5, [r7, #0]
 80075a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075a8:	6030      	str	r0, [r6, #0]
 80075aa:	4620      	mov	r0, r4
 80075ac:	b003      	add	sp, #12
 80075ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075b6:	e7d6      	b.n	8007566 <__d2b+0x2e>
 80075b8:	6161      	str	r1, [r4, #20]
 80075ba:	e7e7      	b.n	800758c <__d2b+0x54>
 80075bc:	a801      	add	r0, sp, #4
 80075be:	f7ff fd61 	bl	8007084 <__lo0bits>
 80075c2:	9b01      	ldr	r3, [sp, #4]
 80075c4:	6163      	str	r3, [r4, #20]
 80075c6:	3020      	adds	r0, #32
 80075c8:	2201      	movs	r2, #1
 80075ca:	e7e5      	b.n	8007598 <__d2b+0x60>
 80075cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075d4:	6038      	str	r0, [r7, #0]
 80075d6:	6918      	ldr	r0, [r3, #16]
 80075d8:	f7ff fd34 	bl	8007044 <__hi0bits>
 80075dc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075e0:	e7e2      	b.n	80075a8 <__d2b+0x70>
 80075e2:	bf00      	nop
 80075e4:	08007ebc 	.word	0x08007ebc
 80075e8:	08007ecd 	.word	0x08007ecd

080075ec <__sflush_r>:
 80075ec:	898a      	ldrh	r2, [r1, #12]
 80075ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f2:	4605      	mov	r5, r0
 80075f4:	0710      	lsls	r0, r2, #28
 80075f6:	460c      	mov	r4, r1
 80075f8:	d458      	bmi.n	80076ac <__sflush_r+0xc0>
 80075fa:	684b      	ldr	r3, [r1, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	dc05      	bgt.n	800760c <__sflush_r+0x20>
 8007600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007602:	2b00      	cmp	r3, #0
 8007604:	dc02      	bgt.n	800760c <__sflush_r+0x20>
 8007606:	2000      	movs	r0, #0
 8007608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800760c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800760e:	2e00      	cmp	r6, #0
 8007610:	d0f9      	beq.n	8007606 <__sflush_r+0x1a>
 8007612:	2300      	movs	r3, #0
 8007614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007618:	682f      	ldr	r7, [r5, #0]
 800761a:	6a21      	ldr	r1, [r4, #32]
 800761c:	602b      	str	r3, [r5, #0]
 800761e:	d032      	beq.n	8007686 <__sflush_r+0x9a>
 8007620:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	075a      	lsls	r2, r3, #29
 8007626:	d505      	bpl.n	8007634 <__sflush_r+0x48>
 8007628:	6863      	ldr	r3, [r4, #4]
 800762a:	1ac0      	subs	r0, r0, r3
 800762c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800762e:	b10b      	cbz	r3, 8007634 <__sflush_r+0x48>
 8007630:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007632:	1ac0      	subs	r0, r0, r3
 8007634:	2300      	movs	r3, #0
 8007636:	4602      	mov	r2, r0
 8007638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800763a:	6a21      	ldr	r1, [r4, #32]
 800763c:	4628      	mov	r0, r5
 800763e:	47b0      	blx	r6
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	d106      	bne.n	8007654 <__sflush_r+0x68>
 8007646:	6829      	ldr	r1, [r5, #0]
 8007648:	291d      	cmp	r1, #29
 800764a:	d82b      	bhi.n	80076a4 <__sflush_r+0xb8>
 800764c:	4a29      	ldr	r2, [pc, #164]	; (80076f4 <__sflush_r+0x108>)
 800764e:	410a      	asrs	r2, r1
 8007650:	07d6      	lsls	r6, r2, #31
 8007652:	d427      	bmi.n	80076a4 <__sflush_r+0xb8>
 8007654:	2200      	movs	r2, #0
 8007656:	6062      	str	r2, [r4, #4]
 8007658:	04d9      	lsls	r1, r3, #19
 800765a:	6922      	ldr	r2, [r4, #16]
 800765c:	6022      	str	r2, [r4, #0]
 800765e:	d504      	bpl.n	800766a <__sflush_r+0x7e>
 8007660:	1c42      	adds	r2, r0, #1
 8007662:	d101      	bne.n	8007668 <__sflush_r+0x7c>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b903      	cbnz	r3, 800766a <__sflush_r+0x7e>
 8007668:	6560      	str	r0, [r4, #84]	; 0x54
 800766a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800766c:	602f      	str	r7, [r5, #0]
 800766e:	2900      	cmp	r1, #0
 8007670:	d0c9      	beq.n	8007606 <__sflush_r+0x1a>
 8007672:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007676:	4299      	cmp	r1, r3
 8007678:	d002      	beq.n	8007680 <__sflush_r+0x94>
 800767a:	4628      	mov	r0, r5
 800767c:	f7ff fb3a 	bl	8006cf4 <_free_r>
 8007680:	2000      	movs	r0, #0
 8007682:	6360      	str	r0, [r4, #52]	; 0x34
 8007684:	e7c0      	b.n	8007608 <__sflush_r+0x1c>
 8007686:	2301      	movs	r3, #1
 8007688:	4628      	mov	r0, r5
 800768a:	47b0      	blx	r6
 800768c:	1c41      	adds	r1, r0, #1
 800768e:	d1c8      	bne.n	8007622 <__sflush_r+0x36>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0c5      	beq.n	8007622 <__sflush_r+0x36>
 8007696:	2b1d      	cmp	r3, #29
 8007698:	d001      	beq.n	800769e <__sflush_r+0xb2>
 800769a:	2b16      	cmp	r3, #22
 800769c:	d101      	bne.n	80076a2 <__sflush_r+0xb6>
 800769e:	602f      	str	r7, [r5, #0]
 80076a0:	e7b1      	b.n	8007606 <__sflush_r+0x1a>
 80076a2:	89a3      	ldrh	r3, [r4, #12]
 80076a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076a8:	81a3      	strh	r3, [r4, #12]
 80076aa:	e7ad      	b.n	8007608 <__sflush_r+0x1c>
 80076ac:	690f      	ldr	r7, [r1, #16]
 80076ae:	2f00      	cmp	r7, #0
 80076b0:	d0a9      	beq.n	8007606 <__sflush_r+0x1a>
 80076b2:	0793      	lsls	r3, r2, #30
 80076b4:	680e      	ldr	r6, [r1, #0]
 80076b6:	bf08      	it	eq
 80076b8:	694b      	ldreq	r3, [r1, #20]
 80076ba:	600f      	str	r7, [r1, #0]
 80076bc:	bf18      	it	ne
 80076be:	2300      	movne	r3, #0
 80076c0:	eba6 0807 	sub.w	r8, r6, r7
 80076c4:	608b      	str	r3, [r1, #8]
 80076c6:	f1b8 0f00 	cmp.w	r8, #0
 80076ca:	dd9c      	ble.n	8007606 <__sflush_r+0x1a>
 80076cc:	6a21      	ldr	r1, [r4, #32]
 80076ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076d0:	4643      	mov	r3, r8
 80076d2:	463a      	mov	r2, r7
 80076d4:	4628      	mov	r0, r5
 80076d6:	47b0      	blx	r6
 80076d8:	2800      	cmp	r0, #0
 80076da:	dc06      	bgt.n	80076ea <__sflush_r+0xfe>
 80076dc:	89a3      	ldrh	r3, [r4, #12]
 80076de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e2:	81a3      	strh	r3, [r4, #12]
 80076e4:	f04f 30ff 	mov.w	r0, #4294967295
 80076e8:	e78e      	b.n	8007608 <__sflush_r+0x1c>
 80076ea:	4407      	add	r7, r0
 80076ec:	eba8 0800 	sub.w	r8, r8, r0
 80076f0:	e7e9      	b.n	80076c6 <__sflush_r+0xda>
 80076f2:	bf00      	nop
 80076f4:	dfbffffe 	.word	0xdfbffffe

080076f8 <_fflush_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	690b      	ldr	r3, [r1, #16]
 80076fc:	4605      	mov	r5, r0
 80076fe:	460c      	mov	r4, r1
 8007700:	b913      	cbnz	r3, 8007708 <_fflush_r+0x10>
 8007702:	2500      	movs	r5, #0
 8007704:	4628      	mov	r0, r5
 8007706:	bd38      	pop	{r3, r4, r5, pc}
 8007708:	b118      	cbz	r0, 8007712 <_fflush_r+0x1a>
 800770a:	6a03      	ldr	r3, [r0, #32]
 800770c:	b90b      	cbnz	r3, 8007712 <_fflush_r+0x1a>
 800770e:	f7fe fb7d 	bl	8005e0c <__sinit>
 8007712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0f3      	beq.n	8007702 <_fflush_r+0xa>
 800771a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800771c:	07d0      	lsls	r0, r2, #31
 800771e:	d404      	bmi.n	800772a <_fflush_r+0x32>
 8007720:	0599      	lsls	r1, r3, #22
 8007722:	d402      	bmi.n	800772a <_fflush_r+0x32>
 8007724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007726:	f7fe fc68 	bl	8005ffa <__retarget_lock_acquire_recursive>
 800772a:	4628      	mov	r0, r5
 800772c:	4621      	mov	r1, r4
 800772e:	f7ff ff5d 	bl	80075ec <__sflush_r>
 8007732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007734:	07da      	lsls	r2, r3, #31
 8007736:	4605      	mov	r5, r0
 8007738:	d4e4      	bmi.n	8007704 <_fflush_r+0xc>
 800773a:	89a3      	ldrh	r3, [r4, #12]
 800773c:	059b      	lsls	r3, r3, #22
 800773e:	d4e1      	bmi.n	8007704 <_fflush_r+0xc>
 8007740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007742:	f7fe fc5b 	bl	8005ffc <__retarget_lock_release_recursive>
 8007746:	e7dd      	b.n	8007704 <_fflush_r+0xc>

08007748 <_sbrk_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	4d06      	ldr	r5, [pc, #24]	; (8007764 <_sbrk_r+0x1c>)
 800774c:	2300      	movs	r3, #0
 800774e:	4604      	mov	r4, r0
 8007750:	4608      	mov	r0, r1
 8007752:	602b      	str	r3, [r5, #0]
 8007754:	f7fa f9b0 	bl	8001ab8 <_sbrk>
 8007758:	1c43      	adds	r3, r0, #1
 800775a:	d102      	bne.n	8007762 <_sbrk_r+0x1a>
 800775c:	682b      	ldr	r3, [r5, #0]
 800775e:	b103      	cbz	r3, 8007762 <_sbrk_r+0x1a>
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	bd38      	pop	{r3, r4, r5, pc}
 8007764:	20000518 	.word	0x20000518

08007768 <memcpy>:
 8007768:	440a      	add	r2, r1
 800776a:	4291      	cmp	r1, r2
 800776c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007770:	d100      	bne.n	8007774 <memcpy+0xc>
 8007772:	4770      	bx	lr
 8007774:	b510      	push	{r4, lr}
 8007776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800777a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800777e:	4291      	cmp	r1, r2
 8007780:	d1f9      	bne.n	8007776 <memcpy+0xe>
 8007782:	bd10      	pop	{r4, pc}

08007784 <__assert_func>:
 8007784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007786:	4614      	mov	r4, r2
 8007788:	461a      	mov	r2, r3
 800778a:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <__assert_func+0x2c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4605      	mov	r5, r0
 8007790:	68d8      	ldr	r0, [r3, #12]
 8007792:	b14c      	cbz	r4, 80077a8 <__assert_func+0x24>
 8007794:	4b07      	ldr	r3, [pc, #28]	; (80077b4 <__assert_func+0x30>)
 8007796:	9100      	str	r1, [sp, #0]
 8007798:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800779c:	4906      	ldr	r1, [pc, #24]	; (80077b8 <__assert_func+0x34>)
 800779e:	462b      	mov	r3, r5
 80077a0:	f000 f844 	bl	800782c <fiprintf>
 80077a4:	f000 f854 	bl	8007850 <abort>
 80077a8:	4b04      	ldr	r3, [pc, #16]	; (80077bc <__assert_func+0x38>)
 80077aa:	461c      	mov	r4, r3
 80077ac:	e7f3      	b.n	8007796 <__assert_func+0x12>
 80077ae:	bf00      	nop
 80077b0:	20000064 	.word	0x20000064
 80077b4:	0800802e 	.word	0x0800802e
 80077b8:	0800803b 	.word	0x0800803b
 80077bc:	08008069 	.word	0x08008069

080077c0 <_calloc_r>:
 80077c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077c2:	fba1 2402 	umull	r2, r4, r1, r2
 80077c6:	b94c      	cbnz	r4, 80077dc <_calloc_r+0x1c>
 80077c8:	4611      	mov	r1, r2
 80077ca:	9201      	str	r2, [sp, #4]
 80077cc:	f7ff fb06 	bl	8006ddc <_malloc_r>
 80077d0:	9a01      	ldr	r2, [sp, #4]
 80077d2:	4605      	mov	r5, r0
 80077d4:	b930      	cbnz	r0, 80077e4 <_calloc_r+0x24>
 80077d6:	4628      	mov	r0, r5
 80077d8:	b003      	add	sp, #12
 80077da:	bd30      	pop	{r4, r5, pc}
 80077dc:	220c      	movs	r2, #12
 80077de:	6002      	str	r2, [r0, #0]
 80077e0:	2500      	movs	r5, #0
 80077e2:	e7f8      	b.n	80077d6 <_calloc_r+0x16>
 80077e4:	4621      	mov	r1, r4
 80077e6:	f7fe fb8a 	bl	8005efe <memset>
 80077ea:	e7f4      	b.n	80077d6 <_calloc_r+0x16>

080077ec <__ascii_mbtowc>:
 80077ec:	b082      	sub	sp, #8
 80077ee:	b901      	cbnz	r1, 80077f2 <__ascii_mbtowc+0x6>
 80077f0:	a901      	add	r1, sp, #4
 80077f2:	b142      	cbz	r2, 8007806 <__ascii_mbtowc+0x1a>
 80077f4:	b14b      	cbz	r3, 800780a <__ascii_mbtowc+0x1e>
 80077f6:	7813      	ldrb	r3, [r2, #0]
 80077f8:	600b      	str	r3, [r1, #0]
 80077fa:	7812      	ldrb	r2, [r2, #0]
 80077fc:	1e10      	subs	r0, r2, #0
 80077fe:	bf18      	it	ne
 8007800:	2001      	movne	r0, #1
 8007802:	b002      	add	sp, #8
 8007804:	4770      	bx	lr
 8007806:	4610      	mov	r0, r2
 8007808:	e7fb      	b.n	8007802 <__ascii_mbtowc+0x16>
 800780a:	f06f 0001 	mvn.w	r0, #1
 800780e:	e7f8      	b.n	8007802 <__ascii_mbtowc+0x16>

08007810 <__ascii_wctomb>:
 8007810:	b149      	cbz	r1, 8007826 <__ascii_wctomb+0x16>
 8007812:	2aff      	cmp	r2, #255	; 0xff
 8007814:	bf85      	ittet	hi
 8007816:	238a      	movhi	r3, #138	; 0x8a
 8007818:	6003      	strhi	r3, [r0, #0]
 800781a:	700a      	strbls	r2, [r1, #0]
 800781c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007820:	bf98      	it	ls
 8007822:	2001      	movls	r0, #1
 8007824:	4770      	bx	lr
 8007826:	4608      	mov	r0, r1
 8007828:	4770      	bx	lr
	...

0800782c <fiprintf>:
 800782c:	b40e      	push	{r1, r2, r3}
 800782e:	b503      	push	{r0, r1, lr}
 8007830:	4601      	mov	r1, r0
 8007832:	ab03      	add	r3, sp, #12
 8007834:	4805      	ldr	r0, [pc, #20]	; (800784c <fiprintf+0x20>)
 8007836:	f853 2b04 	ldr.w	r2, [r3], #4
 800783a:	6800      	ldr	r0, [r0, #0]
 800783c:	9301      	str	r3, [sp, #4]
 800783e:	f000 f837 	bl	80078b0 <_vfiprintf_r>
 8007842:	b002      	add	sp, #8
 8007844:	f85d eb04 	ldr.w	lr, [sp], #4
 8007848:	b003      	add	sp, #12
 800784a:	4770      	bx	lr
 800784c:	20000064 	.word	0x20000064

08007850 <abort>:
 8007850:	b508      	push	{r3, lr}
 8007852:	2006      	movs	r0, #6
 8007854:	f000 fa04 	bl	8007c60 <raise>
 8007858:	2001      	movs	r0, #1
 800785a:	f7fa f8b5 	bl	80019c8 <_exit>

0800785e <__sfputc_r>:
 800785e:	6893      	ldr	r3, [r2, #8]
 8007860:	3b01      	subs	r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	b410      	push	{r4}
 8007866:	6093      	str	r3, [r2, #8]
 8007868:	da08      	bge.n	800787c <__sfputc_r+0x1e>
 800786a:	6994      	ldr	r4, [r2, #24]
 800786c:	42a3      	cmp	r3, r4
 800786e:	db01      	blt.n	8007874 <__sfputc_r+0x16>
 8007870:	290a      	cmp	r1, #10
 8007872:	d103      	bne.n	800787c <__sfputc_r+0x1e>
 8007874:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007878:	f000 b934 	b.w	8007ae4 <__swbuf_r>
 800787c:	6813      	ldr	r3, [r2, #0]
 800787e:	1c58      	adds	r0, r3, #1
 8007880:	6010      	str	r0, [r2, #0]
 8007882:	7019      	strb	r1, [r3, #0]
 8007884:	4608      	mov	r0, r1
 8007886:	f85d 4b04 	ldr.w	r4, [sp], #4
 800788a:	4770      	bx	lr

0800788c <__sfputs_r>:
 800788c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788e:	4606      	mov	r6, r0
 8007890:	460f      	mov	r7, r1
 8007892:	4614      	mov	r4, r2
 8007894:	18d5      	adds	r5, r2, r3
 8007896:	42ac      	cmp	r4, r5
 8007898:	d101      	bne.n	800789e <__sfputs_r+0x12>
 800789a:	2000      	movs	r0, #0
 800789c:	e007      	b.n	80078ae <__sfputs_r+0x22>
 800789e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a2:	463a      	mov	r2, r7
 80078a4:	4630      	mov	r0, r6
 80078a6:	f7ff ffda 	bl	800785e <__sfputc_r>
 80078aa:	1c43      	adds	r3, r0, #1
 80078ac:	d1f3      	bne.n	8007896 <__sfputs_r+0xa>
 80078ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080078b0 <_vfiprintf_r>:
 80078b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b4:	460d      	mov	r5, r1
 80078b6:	b09d      	sub	sp, #116	; 0x74
 80078b8:	4614      	mov	r4, r2
 80078ba:	4698      	mov	r8, r3
 80078bc:	4606      	mov	r6, r0
 80078be:	b118      	cbz	r0, 80078c8 <_vfiprintf_r+0x18>
 80078c0:	6a03      	ldr	r3, [r0, #32]
 80078c2:	b90b      	cbnz	r3, 80078c8 <_vfiprintf_r+0x18>
 80078c4:	f7fe faa2 	bl	8005e0c <__sinit>
 80078c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078ca:	07d9      	lsls	r1, r3, #31
 80078cc:	d405      	bmi.n	80078da <_vfiprintf_r+0x2a>
 80078ce:	89ab      	ldrh	r3, [r5, #12]
 80078d0:	059a      	lsls	r2, r3, #22
 80078d2:	d402      	bmi.n	80078da <_vfiprintf_r+0x2a>
 80078d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078d6:	f7fe fb90 	bl	8005ffa <__retarget_lock_acquire_recursive>
 80078da:	89ab      	ldrh	r3, [r5, #12]
 80078dc:	071b      	lsls	r3, r3, #28
 80078de:	d501      	bpl.n	80078e4 <_vfiprintf_r+0x34>
 80078e0:	692b      	ldr	r3, [r5, #16]
 80078e2:	b99b      	cbnz	r3, 800790c <_vfiprintf_r+0x5c>
 80078e4:	4629      	mov	r1, r5
 80078e6:	4630      	mov	r0, r6
 80078e8:	f000 f93a 	bl	8007b60 <__swsetup_r>
 80078ec:	b170      	cbz	r0, 800790c <_vfiprintf_r+0x5c>
 80078ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078f0:	07dc      	lsls	r4, r3, #31
 80078f2:	d504      	bpl.n	80078fe <_vfiprintf_r+0x4e>
 80078f4:	f04f 30ff 	mov.w	r0, #4294967295
 80078f8:	b01d      	add	sp, #116	; 0x74
 80078fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fe:	89ab      	ldrh	r3, [r5, #12]
 8007900:	0598      	lsls	r0, r3, #22
 8007902:	d4f7      	bmi.n	80078f4 <_vfiprintf_r+0x44>
 8007904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007906:	f7fe fb79 	bl	8005ffc <__retarget_lock_release_recursive>
 800790a:	e7f3      	b.n	80078f4 <_vfiprintf_r+0x44>
 800790c:	2300      	movs	r3, #0
 800790e:	9309      	str	r3, [sp, #36]	; 0x24
 8007910:	2320      	movs	r3, #32
 8007912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007916:	f8cd 800c 	str.w	r8, [sp, #12]
 800791a:	2330      	movs	r3, #48	; 0x30
 800791c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007ad0 <_vfiprintf_r+0x220>
 8007920:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007924:	f04f 0901 	mov.w	r9, #1
 8007928:	4623      	mov	r3, r4
 800792a:	469a      	mov	sl, r3
 800792c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007930:	b10a      	cbz	r2, 8007936 <_vfiprintf_r+0x86>
 8007932:	2a25      	cmp	r2, #37	; 0x25
 8007934:	d1f9      	bne.n	800792a <_vfiprintf_r+0x7a>
 8007936:	ebba 0b04 	subs.w	fp, sl, r4
 800793a:	d00b      	beq.n	8007954 <_vfiprintf_r+0xa4>
 800793c:	465b      	mov	r3, fp
 800793e:	4622      	mov	r2, r4
 8007940:	4629      	mov	r1, r5
 8007942:	4630      	mov	r0, r6
 8007944:	f7ff ffa2 	bl	800788c <__sfputs_r>
 8007948:	3001      	adds	r0, #1
 800794a:	f000 80a9 	beq.w	8007aa0 <_vfiprintf_r+0x1f0>
 800794e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007950:	445a      	add	r2, fp
 8007952:	9209      	str	r2, [sp, #36]	; 0x24
 8007954:	f89a 3000 	ldrb.w	r3, [sl]
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 80a1 	beq.w	8007aa0 <_vfiprintf_r+0x1f0>
 800795e:	2300      	movs	r3, #0
 8007960:	f04f 32ff 	mov.w	r2, #4294967295
 8007964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007968:	f10a 0a01 	add.w	sl, sl, #1
 800796c:	9304      	str	r3, [sp, #16]
 800796e:	9307      	str	r3, [sp, #28]
 8007970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007974:	931a      	str	r3, [sp, #104]	; 0x68
 8007976:	4654      	mov	r4, sl
 8007978:	2205      	movs	r2, #5
 800797a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800797e:	4854      	ldr	r0, [pc, #336]	; (8007ad0 <_vfiprintf_r+0x220>)
 8007980:	f7f8 fc26 	bl	80001d0 <memchr>
 8007984:	9a04      	ldr	r2, [sp, #16]
 8007986:	b9d8      	cbnz	r0, 80079c0 <_vfiprintf_r+0x110>
 8007988:	06d1      	lsls	r1, r2, #27
 800798a:	bf44      	itt	mi
 800798c:	2320      	movmi	r3, #32
 800798e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007992:	0713      	lsls	r3, r2, #28
 8007994:	bf44      	itt	mi
 8007996:	232b      	movmi	r3, #43	; 0x2b
 8007998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800799c:	f89a 3000 	ldrb.w	r3, [sl]
 80079a0:	2b2a      	cmp	r3, #42	; 0x2a
 80079a2:	d015      	beq.n	80079d0 <_vfiprintf_r+0x120>
 80079a4:	9a07      	ldr	r2, [sp, #28]
 80079a6:	4654      	mov	r4, sl
 80079a8:	2000      	movs	r0, #0
 80079aa:	f04f 0c0a 	mov.w	ip, #10
 80079ae:	4621      	mov	r1, r4
 80079b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079b4:	3b30      	subs	r3, #48	; 0x30
 80079b6:	2b09      	cmp	r3, #9
 80079b8:	d94d      	bls.n	8007a56 <_vfiprintf_r+0x1a6>
 80079ba:	b1b0      	cbz	r0, 80079ea <_vfiprintf_r+0x13a>
 80079bc:	9207      	str	r2, [sp, #28]
 80079be:	e014      	b.n	80079ea <_vfiprintf_r+0x13a>
 80079c0:	eba0 0308 	sub.w	r3, r0, r8
 80079c4:	fa09 f303 	lsl.w	r3, r9, r3
 80079c8:	4313      	orrs	r3, r2
 80079ca:	9304      	str	r3, [sp, #16]
 80079cc:	46a2      	mov	sl, r4
 80079ce:	e7d2      	b.n	8007976 <_vfiprintf_r+0xc6>
 80079d0:	9b03      	ldr	r3, [sp, #12]
 80079d2:	1d19      	adds	r1, r3, #4
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	9103      	str	r1, [sp, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	bfbb      	ittet	lt
 80079dc:	425b      	neglt	r3, r3
 80079de:	f042 0202 	orrlt.w	r2, r2, #2
 80079e2:	9307      	strge	r3, [sp, #28]
 80079e4:	9307      	strlt	r3, [sp, #28]
 80079e6:	bfb8      	it	lt
 80079e8:	9204      	strlt	r2, [sp, #16]
 80079ea:	7823      	ldrb	r3, [r4, #0]
 80079ec:	2b2e      	cmp	r3, #46	; 0x2e
 80079ee:	d10c      	bne.n	8007a0a <_vfiprintf_r+0x15a>
 80079f0:	7863      	ldrb	r3, [r4, #1]
 80079f2:	2b2a      	cmp	r3, #42	; 0x2a
 80079f4:	d134      	bne.n	8007a60 <_vfiprintf_r+0x1b0>
 80079f6:	9b03      	ldr	r3, [sp, #12]
 80079f8:	1d1a      	adds	r2, r3, #4
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	9203      	str	r2, [sp, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	bfb8      	it	lt
 8007a02:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a06:	3402      	adds	r4, #2
 8007a08:	9305      	str	r3, [sp, #20]
 8007a0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007ae0 <_vfiprintf_r+0x230>
 8007a0e:	7821      	ldrb	r1, [r4, #0]
 8007a10:	2203      	movs	r2, #3
 8007a12:	4650      	mov	r0, sl
 8007a14:	f7f8 fbdc 	bl	80001d0 <memchr>
 8007a18:	b138      	cbz	r0, 8007a2a <_vfiprintf_r+0x17a>
 8007a1a:	9b04      	ldr	r3, [sp, #16]
 8007a1c:	eba0 000a 	sub.w	r0, r0, sl
 8007a20:	2240      	movs	r2, #64	; 0x40
 8007a22:	4082      	lsls	r2, r0
 8007a24:	4313      	orrs	r3, r2
 8007a26:	3401      	adds	r4, #1
 8007a28:	9304      	str	r3, [sp, #16]
 8007a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a2e:	4829      	ldr	r0, [pc, #164]	; (8007ad4 <_vfiprintf_r+0x224>)
 8007a30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a34:	2206      	movs	r2, #6
 8007a36:	f7f8 fbcb 	bl	80001d0 <memchr>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	d03f      	beq.n	8007abe <_vfiprintf_r+0x20e>
 8007a3e:	4b26      	ldr	r3, [pc, #152]	; (8007ad8 <_vfiprintf_r+0x228>)
 8007a40:	bb1b      	cbnz	r3, 8007a8a <_vfiprintf_r+0x1da>
 8007a42:	9b03      	ldr	r3, [sp, #12]
 8007a44:	3307      	adds	r3, #7
 8007a46:	f023 0307 	bic.w	r3, r3, #7
 8007a4a:	3308      	adds	r3, #8
 8007a4c:	9303      	str	r3, [sp, #12]
 8007a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a50:	443b      	add	r3, r7
 8007a52:	9309      	str	r3, [sp, #36]	; 0x24
 8007a54:	e768      	b.n	8007928 <_vfiprintf_r+0x78>
 8007a56:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	2001      	movs	r0, #1
 8007a5e:	e7a6      	b.n	80079ae <_vfiprintf_r+0xfe>
 8007a60:	2300      	movs	r3, #0
 8007a62:	3401      	adds	r4, #1
 8007a64:	9305      	str	r3, [sp, #20]
 8007a66:	4619      	mov	r1, r3
 8007a68:	f04f 0c0a 	mov.w	ip, #10
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a72:	3a30      	subs	r2, #48	; 0x30
 8007a74:	2a09      	cmp	r2, #9
 8007a76:	d903      	bls.n	8007a80 <_vfiprintf_r+0x1d0>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0c6      	beq.n	8007a0a <_vfiprintf_r+0x15a>
 8007a7c:	9105      	str	r1, [sp, #20]
 8007a7e:	e7c4      	b.n	8007a0a <_vfiprintf_r+0x15a>
 8007a80:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a84:	4604      	mov	r4, r0
 8007a86:	2301      	movs	r3, #1
 8007a88:	e7f0      	b.n	8007a6c <_vfiprintf_r+0x1bc>
 8007a8a:	ab03      	add	r3, sp, #12
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	462a      	mov	r2, r5
 8007a90:	4b12      	ldr	r3, [pc, #72]	; (8007adc <_vfiprintf_r+0x22c>)
 8007a92:	a904      	add	r1, sp, #16
 8007a94:	4630      	mov	r0, r6
 8007a96:	f7fd fd67 	bl	8005568 <_printf_float>
 8007a9a:	4607      	mov	r7, r0
 8007a9c:	1c78      	adds	r0, r7, #1
 8007a9e:	d1d6      	bne.n	8007a4e <_vfiprintf_r+0x19e>
 8007aa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aa2:	07d9      	lsls	r1, r3, #31
 8007aa4:	d405      	bmi.n	8007ab2 <_vfiprintf_r+0x202>
 8007aa6:	89ab      	ldrh	r3, [r5, #12]
 8007aa8:	059a      	lsls	r2, r3, #22
 8007aaa:	d402      	bmi.n	8007ab2 <_vfiprintf_r+0x202>
 8007aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aae:	f7fe faa5 	bl	8005ffc <__retarget_lock_release_recursive>
 8007ab2:	89ab      	ldrh	r3, [r5, #12]
 8007ab4:	065b      	lsls	r3, r3, #25
 8007ab6:	f53f af1d 	bmi.w	80078f4 <_vfiprintf_r+0x44>
 8007aba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007abc:	e71c      	b.n	80078f8 <_vfiprintf_r+0x48>
 8007abe:	ab03      	add	r3, sp, #12
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	462a      	mov	r2, r5
 8007ac4:	4b05      	ldr	r3, [pc, #20]	; (8007adc <_vfiprintf_r+0x22c>)
 8007ac6:	a904      	add	r1, sp, #16
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f7fd fff1 	bl	8005ab0 <_printf_i>
 8007ace:	e7e4      	b.n	8007a9a <_vfiprintf_r+0x1ea>
 8007ad0:	0800816b 	.word	0x0800816b
 8007ad4:	08008175 	.word	0x08008175
 8007ad8:	08005569 	.word	0x08005569
 8007adc:	0800788d 	.word	0x0800788d
 8007ae0:	08008171 	.word	0x08008171

08007ae4 <__swbuf_r>:
 8007ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae6:	460e      	mov	r6, r1
 8007ae8:	4614      	mov	r4, r2
 8007aea:	4605      	mov	r5, r0
 8007aec:	b118      	cbz	r0, 8007af6 <__swbuf_r+0x12>
 8007aee:	6a03      	ldr	r3, [r0, #32]
 8007af0:	b90b      	cbnz	r3, 8007af6 <__swbuf_r+0x12>
 8007af2:	f7fe f98b 	bl	8005e0c <__sinit>
 8007af6:	69a3      	ldr	r3, [r4, #24]
 8007af8:	60a3      	str	r3, [r4, #8]
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	071a      	lsls	r2, r3, #28
 8007afe:	d525      	bpl.n	8007b4c <__swbuf_r+0x68>
 8007b00:	6923      	ldr	r3, [r4, #16]
 8007b02:	b31b      	cbz	r3, 8007b4c <__swbuf_r+0x68>
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	6922      	ldr	r2, [r4, #16]
 8007b08:	1a98      	subs	r0, r3, r2
 8007b0a:	6963      	ldr	r3, [r4, #20]
 8007b0c:	b2f6      	uxtb	r6, r6
 8007b0e:	4283      	cmp	r3, r0
 8007b10:	4637      	mov	r7, r6
 8007b12:	dc04      	bgt.n	8007b1e <__swbuf_r+0x3a>
 8007b14:	4621      	mov	r1, r4
 8007b16:	4628      	mov	r0, r5
 8007b18:	f7ff fdee 	bl	80076f8 <_fflush_r>
 8007b1c:	b9e0      	cbnz	r0, 8007b58 <__swbuf_r+0x74>
 8007b1e:	68a3      	ldr	r3, [r4, #8]
 8007b20:	3b01      	subs	r3, #1
 8007b22:	60a3      	str	r3, [r4, #8]
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	6022      	str	r2, [r4, #0]
 8007b2a:	701e      	strb	r6, [r3, #0]
 8007b2c:	6962      	ldr	r2, [r4, #20]
 8007b2e:	1c43      	adds	r3, r0, #1
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d004      	beq.n	8007b3e <__swbuf_r+0x5a>
 8007b34:	89a3      	ldrh	r3, [r4, #12]
 8007b36:	07db      	lsls	r3, r3, #31
 8007b38:	d506      	bpl.n	8007b48 <__swbuf_r+0x64>
 8007b3a:	2e0a      	cmp	r6, #10
 8007b3c:	d104      	bne.n	8007b48 <__swbuf_r+0x64>
 8007b3e:	4621      	mov	r1, r4
 8007b40:	4628      	mov	r0, r5
 8007b42:	f7ff fdd9 	bl	80076f8 <_fflush_r>
 8007b46:	b938      	cbnz	r0, 8007b58 <__swbuf_r+0x74>
 8007b48:	4638      	mov	r0, r7
 8007b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f000 f806 	bl	8007b60 <__swsetup_r>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	d0d5      	beq.n	8007b04 <__swbuf_r+0x20>
 8007b58:	f04f 37ff 	mov.w	r7, #4294967295
 8007b5c:	e7f4      	b.n	8007b48 <__swbuf_r+0x64>
	...

08007b60 <__swsetup_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4b2a      	ldr	r3, [pc, #168]	; (8007c0c <__swsetup_r+0xac>)
 8007b64:	4605      	mov	r5, r0
 8007b66:	6818      	ldr	r0, [r3, #0]
 8007b68:	460c      	mov	r4, r1
 8007b6a:	b118      	cbz	r0, 8007b74 <__swsetup_r+0x14>
 8007b6c:	6a03      	ldr	r3, [r0, #32]
 8007b6e:	b90b      	cbnz	r3, 8007b74 <__swsetup_r+0x14>
 8007b70:	f7fe f94c 	bl	8005e0c <__sinit>
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b7a:	0718      	lsls	r0, r3, #28
 8007b7c:	d422      	bmi.n	8007bc4 <__swsetup_r+0x64>
 8007b7e:	06d9      	lsls	r1, r3, #27
 8007b80:	d407      	bmi.n	8007b92 <__swsetup_r+0x32>
 8007b82:	2309      	movs	r3, #9
 8007b84:	602b      	str	r3, [r5, #0]
 8007b86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b8a:	81a3      	strh	r3, [r4, #12]
 8007b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b90:	e034      	b.n	8007bfc <__swsetup_r+0x9c>
 8007b92:	0758      	lsls	r0, r3, #29
 8007b94:	d512      	bpl.n	8007bbc <__swsetup_r+0x5c>
 8007b96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b98:	b141      	cbz	r1, 8007bac <__swsetup_r+0x4c>
 8007b9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b9e:	4299      	cmp	r1, r3
 8007ba0:	d002      	beq.n	8007ba8 <__swsetup_r+0x48>
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f7ff f8a6 	bl	8006cf4 <_free_r>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	6363      	str	r3, [r4, #52]	; 0x34
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bb2:	81a3      	strh	r3, [r4, #12]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	6063      	str	r3, [r4, #4]
 8007bb8:	6923      	ldr	r3, [r4, #16]
 8007bba:	6023      	str	r3, [r4, #0]
 8007bbc:	89a3      	ldrh	r3, [r4, #12]
 8007bbe:	f043 0308 	orr.w	r3, r3, #8
 8007bc2:	81a3      	strh	r3, [r4, #12]
 8007bc4:	6923      	ldr	r3, [r4, #16]
 8007bc6:	b94b      	cbnz	r3, 8007bdc <__swsetup_r+0x7c>
 8007bc8:	89a3      	ldrh	r3, [r4, #12]
 8007bca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bd2:	d003      	beq.n	8007bdc <__swsetup_r+0x7c>
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f000 f884 	bl	8007ce4 <__smakebuf_r>
 8007bdc:	89a0      	ldrh	r0, [r4, #12]
 8007bde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007be2:	f010 0301 	ands.w	r3, r0, #1
 8007be6:	d00a      	beq.n	8007bfe <__swsetup_r+0x9e>
 8007be8:	2300      	movs	r3, #0
 8007bea:	60a3      	str	r3, [r4, #8]
 8007bec:	6963      	ldr	r3, [r4, #20]
 8007bee:	425b      	negs	r3, r3
 8007bf0:	61a3      	str	r3, [r4, #24]
 8007bf2:	6923      	ldr	r3, [r4, #16]
 8007bf4:	b943      	cbnz	r3, 8007c08 <__swsetup_r+0xa8>
 8007bf6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bfa:	d1c4      	bne.n	8007b86 <__swsetup_r+0x26>
 8007bfc:	bd38      	pop	{r3, r4, r5, pc}
 8007bfe:	0781      	lsls	r1, r0, #30
 8007c00:	bf58      	it	pl
 8007c02:	6963      	ldrpl	r3, [r4, #20]
 8007c04:	60a3      	str	r3, [r4, #8]
 8007c06:	e7f4      	b.n	8007bf2 <__swsetup_r+0x92>
 8007c08:	2000      	movs	r0, #0
 8007c0a:	e7f7      	b.n	8007bfc <__swsetup_r+0x9c>
 8007c0c:	20000064 	.word	0x20000064

08007c10 <_raise_r>:
 8007c10:	291f      	cmp	r1, #31
 8007c12:	b538      	push	{r3, r4, r5, lr}
 8007c14:	4604      	mov	r4, r0
 8007c16:	460d      	mov	r5, r1
 8007c18:	d904      	bls.n	8007c24 <_raise_r+0x14>
 8007c1a:	2316      	movs	r3, #22
 8007c1c:	6003      	str	r3, [r0, #0]
 8007c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c22:	bd38      	pop	{r3, r4, r5, pc}
 8007c24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007c26:	b112      	cbz	r2, 8007c2e <_raise_r+0x1e>
 8007c28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c2c:	b94b      	cbnz	r3, 8007c42 <_raise_r+0x32>
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f000 f830 	bl	8007c94 <_getpid_r>
 8007c34:	462a      	mov	r2, r5
 8007c36:	4601      	mov	r1, r0
 8007c38:	4620      	mov	r0, r4
 8007c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c3e:	f000 b817 	b.w	8007c70 <_kill_r>
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d00a      	beq.n	8007c5c <_raise_r+0x4c>
 8007c46:	1c59      	adds	r1, r3, #1
 8007c48:	d103      	bne.n	8007c52 <_raise_r+0x42>
 8007c4a:	2316      	movs	r3, #22
 8007c4c:	6003      	str	r3, [r0, #0]
 8007c4e:	2001      	movs	r0, #1
 8007c50:	e7e7      	b.n	8007c22 <_raise_r+0x12>
 8007c52:	2400      	movs	r4, #0
 8007c54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c58:	4628      	mov	r0, r5
 8007c5a:	4798      	blx	r3
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	e7e0      	b.n	8007c22 <_raise_r+0x12>

08007c60 <raise>:
 8007c60:	4b02      	ldr	r3, [pc, #8]	; (8007c6c <raise+0xc>)
 8007c62:	4601      	mov	r1, r0
 8007c64:	6818      	ldr	r0, [r3, #0]
 8007c66:	f7ff bfd3 	b.w	8007c10 <_raise_r>
 8007c6a:	bf00      	nop
 8007c6c:	20000064 	.word	0x20000064

08007c70 <_kill_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	4d07      	ldr	r5, [pc, #28]	; (8007c90 <_kill_r+0x20>)
 8007c74:	2300      	movs	r3, #0
 8007c76:	4604      	mov	r4, r0
 8007c78:	4608      	mov	r0, r1
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	602b      	str	r3, [r5, #0]
 8007c7e:	f7f9 fe93 	bl	80019a8 <_kill>
 8007c82:	1c43      	adds	r3, r0, #1
 8007c84:	d102      	bne.n	8007c8c <_kill_r+0x1c>
 8007c86:	682b      	ldr	r3, [r5, #0]
 8007c88:	b103      	cbz	r3, 8007c8c <_kill_r+0x1c>
 8007c8a:	6023      	str	r3, [r4, #0]
 8007c8c:	bd38      	pop	{r3, r4, r5, pc}
 8007c8e:	bf00      	nop
 8007c90:	20000518 	.word	0x20000518

08007c94 <_getpid_r>:
 8007c94:	f7f9 be80 	b.w	8001998 <_getpid>

08007c98 <__swhatbuf_r>:
 8007c98:	b570      	push	{r4, r5, r6, lr}
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca0:	2900      	cmp	r1, #0
 8007ca2:	b096      	sub	sp, #88	; 0x58
 8007ca4:	4615      	mov	r5, r2
 8007ca6:	461e      	mov	r6, r3
 8007ca8:	da0d      	bge.n	8007cc6 <__swhatbuf_r+0x2e>
 8007caa:	89a3      	ldrh	r3, [r4, #12]
 8007cac:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007cb0:	f04f 0100 	mov.w	r1, #0
 8007cb4:	bf0c      	ite	eq
 8007cb6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007cba:	2340      	movne	r3, #64	; 0x40
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	6031      	str	r1, [r6, #0]
 8007cc0:	602b      	str	r3, [r5, #0]
 8007cc2:	b016      	add	sp, #88	; 0x58
 8007cc4:	bd70      	pop	{r4, r5, r6, pc}
 8007cc6:	466a      	mov	r2, sp
 8007cc8:	f000 f848 	bl	8007d5c <_fstat_r>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	dbec      	blt.n	8007caa <__swhatbuf_r+0x12>
 8007cd0:	9901      	ldr	r1, [sp, #4]
 8007cd2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007cd6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007cda:	4259      	negs	r1, r3
 8007cdc:	4159      	adcs	r1, r3
 8007cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ce2:	e7eb      	b.n	8007cbc <__swhatbuf_r+0x24>

08007ce4 <__smakebuf_r>:
 8007ce4:	898b      	ldrh	r3, [r1, #12]
 8007ce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ce8:	079d      	lsls	r5, r3, #30
 8007cea:	4606      	mov	r6, r0
 8007cec:	460c      	mov	r4, r1
 8007cee:	d507      	bpl.n	8007d00 <__smakebuf_r+0x1c>
 8007cf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007cf4:	6023      	str	r3, [r4, #0]
 8007cf6:	6123      	str	r3, [r4, #16]
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	6163      	str	r3, [r4, #20]
 8007cfc:	b002      	add	sp, #8
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	ab01      	add	r3, sp, #4
 8007d02:	466a      	mov	r2, sp
 8007d04:	f7ff ffc8 	bl	8007c98 <__swhatbuf_r>
 8007d08:	9900      	ldr	r1, [sp, #0]
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f7ff f865 	bl	8006ddc <_malloc_r>
 8007d12:	b948      	cbnz	r0, 8007d28 <__smakebuf_r+0x44>
 8007d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d18:	059a      	lsls	r2, r3, #22
 8007d1a:	d4ef      	bmi.n	8007cfc <__smakebuf_r+0x18>
 8007d1c:	f023 0303 	bic.w	r3, r3, #3
 8007d20:	f043 0302 	orr.w	r3, r3, #2
 8007d24:	81a3      	strh	r3, [r4, #12]
 8007d26:	e7e3      	b.n	8007cf0 <__smakebuf_r+0xc>
 8007d28:	89a3      	ldrh	r3, [r4, #12]
 8007d2a:	6020      	str	r0, [r4, #0]
 8007d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d30:	81a3      	strh	r3, [r4, #12]
 8007d32:	9b00      	ldr	r3, [sp, #0]
 8007d34:	6163      	str	r3, [r4, #20]
 8007d36:	9b01      	ldr	r3, [sp, #4]
 8007d38:	6120      	str	r0, [r4, #16]
 8007d3a:	b15b      	cbz	r3, 8007d54 <__smakebuf_r+0x70>
 8007d3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d40:	4630      	mov	r0, r6
 8007d42:	f000 f81d 	bl	8007d80 <_isatty_r>
 8007d46:	b128      	cbz	r0, 8007d54 <__smakebuf_r+0x70>
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	f023 0303 	bic.w	r3, r3, #3
 8007d4e:	f043 0301 	orr.w	r3, r3, #1
 8007d52:	81a3      	strh	r3, [r4, #12]
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	431d      	orrs	r5, r3
 8007d58:	81a5      	strh	r5, [r4, #12]
 8007d5a:	e7cf      	b.n	8007cfc <__smakebuf_r+0x18>

08007d5c <_fstat_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d07      	ldr	r5, [pc, #28]	; (8007d7c <_fstat_r+0x20>)
 8007d60:	2300      	movs	r3, #0
 8007d62:	4604      	mov	r4, r0
 8007d64:	4608      	mov	r0, r1
 8007d66:	4611      	mov	r1, r2
 8007d68:	602b      	str	r3, [r5, #0]
 8007d6a:	f7f9 fe7c 	bl	8001a66 <_fstat>
 8007d6e:	1c43      	adds	r3, r0, #1
 8007d70:	d102      	bne.n	8007d78 <_fstat_r+0x1c>
 8007d72:	682b      	ldr	r3, [r5, #0]
 8007d74:	b103      	cbz	r3, 8007d78 <_fstat_r+0x1c>
 8007d76:	6023      	str	r3, [r4, #0]
 8007d78:	bd38      	pop	{r3, r4, r5, pc}
 8007d7a:	bf00      	nop
 8007d7c:	20000518 	.word	0x20000518

08007d80 <_isatty_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4d06      	ldr	r5, [pc, #24]	; (8007d9c <_isatty_r+0x1c>)
 8007d84:	2300      	movs	r3, #0
 8007d86:	4604      	mov	r4, r0
 8007d88:	4608      	mov	r0, r1
 8007d8a:	602b      	str	r3, [r5, #0]
 8007d8c:	f7f9 fe7b 	bl	8001a86 <_isatty>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d102      	bne.n	8007d9a <_isatty_r+0x1a>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b103      	cbz	r3, 8007d9a <_isatty_r+0x1a>
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	20000518 	.word	0x20000518

08007da0 <_init>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	bf00      	nop
 8007da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da6:	bc08      	pop	{r3}
 8007da8:	469e      	mov	lr, r3
 8007daa:	4770      	bx	lr

08007dac <_fini>:
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	bf00      	nop
 8007db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db2:	bc08      	pop	{r3}
 8007db4:	469e      	mov	lr, r3
 8007db6:	4770      	bx	lr
