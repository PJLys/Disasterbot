
IoT-Ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008594  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08008728  08008728  00018728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b24  08008b24  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008b24  08008b24  00018b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b2c  08008b2c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b2c  08008b2c  00018b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b30  08008b30  00018b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200001d8  08008d0c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08008d0c  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010279  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002817  00000000  00000000  000304c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00032ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000afb  00000000  00000000  00033b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b175  00000000  00000000  00034623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f40  00000000  00000000  0004f798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3d07  00000000  00000000  000616d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a5c  00000000  00000000  001053e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00109e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800870c 	.word	0x0800870c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800870c 	.word	0x0800870c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <create_payload_f>:

volatile uint8_t uart_rx_buffer[BUFFER_SIZE];
static volatile uint8_t uart_rx_buffer_i = 0;
volatile bool uart_rx_done_flag;

uint8_t* create_payload_f(uint8_t msg_type, float data) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	ed87 0a00 	vstr	s0, [r7]
 8000f50:	71fb      	strb	r3, [r7, #7]
    uint8_t* data_array = floatToUint8Vector(data);
 8000f52:	ed97 0a00 	vldr	s0, [r7]
 8000f56:	f000 f859 	bl	800100c <floatToUint8Vector>
 8000f5a:	60f8      	str	r0, [r7, #12]
    uint8_t* payload = create_payload(msg_type, data_array);
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	68f9      	ldr	r1, [r7, #12]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 f809 	bl	8000f78 <create_payload>
 8000f66:	60b8      	str	r0, [r7, #8]

    // Free the memory allocated for data_array
    free(data_array);
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f004 feb9 	bl	8005ce0 <free>


    return payload;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <create_payload>:

uint8_t* create_payload(uint8_t msg_type, uint8_t* data_array) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
    // Allocate memory for the payload (7 bytes)
    uint8_t* payload = (uint8_t*)malloc(7);
 8000f84:	2007      	movs	r0, #7
 8000f86:	f004 fea3 	bl	8005cd0 <malloc>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	60bb      	str	r3, [r7, #8]

    if (payload != NULL) {
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d01c      	beq.n	8000fce <create_payload+0x56>
        // Place 'e' in the first byte
        payload[0] = MSG_START_CHARACTER;
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	2273      	movs	r2, #115	; 0x73
 8000f98:	701a      	strb	r2, [r3, #0]
        payload[1] = msg_type;
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	79fa      	ldrb	r2, [r7, #7]
 8000fa0:	701a      	strb	r2, [r3, #0]

        // Copy the 4-byte data into bytes 1-4
        for (int i = 0; i < 4; ++i) {
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	e00b      	b.n	8000fc0 <create_payload+0x48>
            payload[i + 2] = data_array[i];
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	441a      	add	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	440b      	add	r3, r1
 8000fb6:	7812      	ldrb	r2, [r2, #0]
 8000fb8:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 4; ++i) {
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	ddf0      	ble.n	8000fa8 <create_payload+0x30>
        }

        // Place 's' in the last byte
        payload[6] = MSG_END_CHARACTER;
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	3306      	adds	r3, #6
 8000fca:	2265      	movs	r2, #101	; 0x65
 8000fcc:	701a      	strb	r2, [r3, #0]
    }

    return payload;
 8000fce:	68bb      	ldr	r3, [r7, #8]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <uart_rx_buffer_clear>:
    if (uart_rx_buffer_i < (BUFFER_SIZE - 1)) {
        uart_rx_buffer_i++;
    }
}

void uart_rx_buffer_clear() {
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	e007      	b.n	8000ff4 <uart_rx_buffer_clear+0x1c>
        uart_rx_buffer[i] = 0x0;
 8000fe4:	4a08      	ldr	r2, [pc, #32]	; (8001008 <uart_rx_buffer_clear+0x30>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b1d      	cmp	r3, #29
 8000ff8:	ddf4      	ble.n	8000fe4 <uart_rx_buffer_clear+0xc>
    }
}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	200001f4 	.word	0x200001f4

0800100c <floatToUint8Vector>:

uint8_t* floatToUint8Vector(float val) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t* data = (uint8_t*)malloc(sizeof(float));
 8001016:	2004      	movs	r0, #4
 8001018:	f004 fe5a 	bl	8005cd0 <malloc>
 800101c:	4603      	mov	r3, r0
 800101e:	60fb      	str	r3, [r7, #12]

    if (data != NULL) {
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <floatToUint8Vector+0x20>
 8001026:	687a      	ldr	r2, [r7, #4]
        memcpy(data, &val, sizeof(val));
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	601a      	str	r2, [r3, #0]
    }

    return data;
 800102c:	68fb      	ldr	r3, [r7, #12]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <SHT40_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SHT40_Init()
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_I2C_Init(&hi2c1); // Initialize and configure the I2C peripheral
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <SHT40_Init+0x10>)
 800103e:	f001 f989 	bl	8002354 <HAL_I2C_Init>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000220 	.word	0x20000220
 800104c:	00000000 	.word	0x00000000

08001050 <SHT40_Read>:
void SHT40_Read(float *t, float *rh, uint8_t mode)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08c      	sub	sp, #48	; 0x30
 8001054:	af02      	add	r7, sp, #8
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	4613      	mov	r3, r2
 800105c:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {mode, 0x00};
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	763b      	strb	r3, [r7, #24]
 8001062:	2300      	movs	r3, #0
 8001064:	767b      	strb	r3, [r7, #25]
	uint8_t buffer[6];

    HAL_I2C_Master_Transmit(&hi2c1, SHT40_I2C_ADDRESS, data, 2, HAL_MAX_DELAY);
 8001066:	f107 0218 	add.w	r2, r7, #24
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2302      	movs	r3, #2
 8001072:	2188      	movs	r1, #136	; 0x88
 8001074:	4846      	ldr	r0, [pc, #280]	; (8001190 <SHT40_Read+0x140>)
 8001076:	f001 fa09 	bl	800248c <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f000 fe12 	bl	8001ca4 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1, SHT40_I2C_ADDRESS, buffer, 6, HAL_MAX_DELAY);
 8001080:	f107 0210 	add.w	r2, r7, #16
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2306      	movs	r3, #6
 800108c:	2188      	movs	r1, #136	; 0x88
 800108e:	4840      	ldr	r0, [pc, #256]	; (8001190 <SHT40_Read+0x140>)
 8001090:	f001 fb14 	bl	80026bc <HAL_I2C_Master_Receive>

    uint16_t t_ticks = buffer[0]*256 + buffer[1];
 8001094:	7c3b      	ldrb	r3, [r7, #16]
 8001096:	b29b      	uxth	r3, r3
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b29a      	uxth	r2, r3
 800109c:	7c7b      	ldrb	r3, [r7, #17]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4413      	add	r3, r2
 80010a2:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t rh_ticks = buffer[3]*256 + buffer[4];
 80010a4:	7cfb      	ldrb	r3, [r7, #19]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	7d3b      	ldrb	r3, [r7, #20]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4413      	add	r3, r2
 80010b2:	843b      	strh	r3, [r7, #32]

    float t_degC = -45 + 175.0 * t_ticks/65535;
 80010b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa34 	bl	8000524 <__aeabi_i2d>
 80010bc:	a330      	add	r3, pc, #192	; (adr r3, 8001180 <SHT40_Read+0x130>)
 80010be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c2:	f7ff fa99 	bl	80005f8 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	a32e      	add	r3, pc, #184	; (adr r3, 8001188 <SHT40_Read+0x138>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff fbba 	bl	800084c <__aeabi_ddiv>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <SHT40_Read+0x144>)
 80010e6:	f7ff f8cf 	bl	8000288 <__aeabi_dsub>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f7ff fd59 	bl	8000ba8 <__aeabi_d2f>
 80010f6:	4603      	mov	r3, r0
 80010f8:	61fb      	str	r3, [r7, #28]
    float rh_pRH = -6 + 125.0 * rh_ticks/65535;
 80010fa:	8c3b      	ldrh	r3, [r7, #32]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa11 	bl	8000524 <__aeabi_i2d>
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <SHT40_Read+0x148>)
 8001108:	f7ff fa76 	bl	80005f8 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	a31c      	add	r3, pc, #112	; (adr r3, 8001188 <SHT40_Read+0x138>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff fb97 	bl	800084c <__aeabi_ddiv>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <SHT40_Read+0x14c>)
 800112c:	f7ff f8ac 	bl	8000288 <__aeabi_dsub>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fd36 	bl	8000ba8 <__aeabi_d2f>
 800113c:	4603      	mov	r3, r0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24

    if (rh_pRH > 100){
 8001140:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001144:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80011a0 <SHT40_Read+0x150>
 8001148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	dd01      	ble.n	8001156 <SHT40_Read+0x106>
    	rh_pRH = 100; }
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <SHT40_Read+0x154>)
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    if (rh_pRH < 0){
 8001156:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800115a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001162:	d502      	bpl.n	800116a <SHT40_Read+0x11a>
    	rh_pRH = 0; }
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24

    *t = t_degC;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	601a      	str	r2, [r3, #0]
    *rh = rh_pRH;
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001174:	601a      	str	r2, [r3, #0]
}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	; 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	00000000 	.word	0x00000000
 8001184:	4065e000 	.word	0x4065e000
 8001188:	00000000 	.word	0x00000000
 800118c:	40efffe0 	.word	0x40efffe0
 8001190:	20000220 	.word	0x20000220
 8001194:	40468000 	.word	0x40468000
 8001198:	405f4000 	.word	0x405f4000
 800119c:	40180000 	.word	0x40180000
 80011a0:	42c80000 	.word	0x42c80000
 80011a4:	42c80000 	.word	0x42c80000

080011a8 <LTR329_Init>:

void LTR329_Init()
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af04      	add	r7, sp, #16
    uint8_t data;

    // Activate the sensor
    data = LTR329_ACTIVE_MODE;
 80011ae:	2301      	movs	r3, #1
 80011b0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, LTR329_I2C_ADDRESS, LTR329_ALS_CONTR, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80011b2:	2364      	movs	r3, #100	; 0x64
 80011b4:	9302      	str	r3, [sp, #8]
 80011b6:	2301      	movs	r3, #1
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	1dfb      	adds	r3, r7, #7
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2301      	movs	r3, #1
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	2152      	movs	r1, #82	; 0x52
 80011c4:	480a      	ldr	r0, [pc, #40]	; (80011f0 <LTR329_Init+0x48>)
 80011c6:	f001 fb6f 	bl	80028a8 <HAL_I2C_Mem_Write>

    // Set measurement rate
    data = LTR329_MEAS_RATE;
 80011ca:	2303      	movs	r3, #3
 80011cc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, LTR329_I2C_ADDRESS, LTR329_ALS_MEAS_RATE, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80011ce:	2364      	movs	r3, #100	; 0x64
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	2301      	movs	r3, #1
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	2285      	movs	r2, #133	; 0x85
 80011de:	2152      	movs	r1, #82	; 0x52
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <LTR329_Init+0x48>)
 80011e2:	f001 fb61 	bl	80028a8 <HAL_I2C_Mem_Write>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000274 	.word	0x20000274

080011f4 <LTR329_Read>:
void LTR329_Read(uint16_t *ch0, uint16_t *ch1)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af04      	add	r7, sp, #16
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
    uint8_t data[4];

    // Read 4 bytes of data starting from LTR329_ALS_DATA_CH1_0
    HAL_I2C_Mem_Read(&hi2c3, LTR329_I2C_ADDRESS, LTR329_ALS_DATA_CH1_0, I2C_MEMADD_SIZE_8BIT, data, 4, 100);
 80011fe:	2364      	movs	r3, #100	; 0x64
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2304      	movs	r3, #4
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2301      	movs	r3, #1
 800120e:	2288      	movs	r2, #136	; 0x88
 8001210:	2152      	movs	r1, #82	; 0x52
 8001212:	480d      	ldr	r0, [pc, #52]	; (8001248 <LTR329_Read+0x54>)
 8001214:	f001 fc5c 	bl	8002ad0 <HAL_I2C_Mem_Read>

    // Combine bytes to get the light data for each channel
    *ch1 = (uint16_t)(data[1] << 8) | data[0];
 8001218:	7b7b      	ldrb	r3, [r7, #13]
 800121a:	b29b      	uxth	r3, r3
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	b29a      	uxth	r2, r3
 8001220:	7b3b      	ldrb	r3, [r7, #12]
 8001222:	b29b      	uxth	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b29a      	uxth	r2, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	801a      	strh	r2, [r3, #0]
    *ch0 = (uint16_t)(data[3] << 8) | data[2];
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	b29b      	uxth	r3, r3
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	b29a      	uxth	r2, r3
 8001234:	7bbb      	ldrb	r3, [r7, #14]
 8001236:	b29b      	uxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b29a      	uxth	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	801a      	strh	r2, [r3, #0]
}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000274 	.word	0x20000274

0800124c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a06      	ldr	r2, [pc, #24]	; (8001274 <HAL_UART_RxCpltCallback+0x28>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d103      	bne.n	8001266 <HAL_UART_RxCpltCallback+0x1a>
		dataReadyFlag = 1;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_UART_RxCpltCallback+0x2c>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	e000      	b.n	8001268 <HAL_UART_RxCpltCallback+0x1c>
		//ledStatus = 1 - ledStatus;
		//HAL_GPIO_WritePin(GPIOB, LD3_Pin, ledStatus);
	} else {
		return;
 8001266:	bf00      	nop
	}
}
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40004400 	.word	0x40004400
 8001278:	200003d8 	.word	0x200003d8

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	; 0x38
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001282:	f000 fc9a 	bl	8001bba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001286:	f000 f917 	bl	80014b8 <SystemClock_Config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800128a:	b662      	cpsie	i
}
 800128c:	bf00      	nop

  /* USER CODE BEGIN SysInit */
  __enable_irq();
  HAL_UART_IRQHandler(&huart1);
 800128e:	4881      	ldr	r0, [pc, #516]	; (8001494 <main+0x218>)
 8001290:	f003 fa70 	bl	8004774 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart2);
 8001294:	4880      	ldr	r0, [pc, #512]	; (8001498 <main+0x21c>)
 8001296:	f003 fa6d 	bl	8004774 <HAL_UART_IRQHandler>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129a:	f000 fa07 	bl	80016ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800129e:	f000 f9a1 	bl	80015e4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80012a2:	f000 f9d1 	bl	8001648 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80012a6:	f000 f95d 	bl	8001564 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    SHT40_Init();
 80012aa:	f7ff fec5 	bl	8001038 <SHT40_Init>
    LTR329_Init();
 80012ae:	f7ff ff7b 	bl	80011a8 <LTR329_Init>
    uart_rx_buffer_clear();
 80012b2:	f7ff fe91 	bl	8000fd8 <uart_rx_buffer_clear>
    HAL_UART_Receive_IT(&huart2, Rx_data, 3);
 80012b6:	2203      	movs	r2, #3
 80012b8:	4978      	ldr	r1, [pc, #480]	; (800149c <main+0x220>)
 80012ba:	4877      	ldr	r0, [pc, #476]	; (8001498 <main+0x21c>)
 80012bc:	f003 fa0e 	bl	80046dc <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(&huart1, BT_data, 8);
 80012c0:	2208      	movs	r2, #8
 80012c2:	4977      	ldr	r1, [pc, #476]	; (80014a0 <main+0x224>)
 80012c4:	4873      	ldr	r0, [pc, #460]	; (8001494 <main+0x218>)
 80012c6:	f003 fa09 	bl	80046dc <HAL_UART_Receive_IT>
    //HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int counter = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	637b      	str	r3, [r7, #52]	; 0x34
	  float radiation = t*rh;
	  float dust = rh/t;*/
	  // Enter low-power mode if no data is ready


	  if (dataReadyFlag == 0){
 80012ce:	4b75      	ldr	r3, [pc, #468]	; (80014a4 <main+0x228>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d108      	bne.n	80012ea <main+0x6e>
		  printf("Entering low-power mode...\n");
 80012d8:	4873      	ldr	r0, [pc, #460]	; (80014a8 <main+0x22c>)
 80012da:	f005 fb31 	bl	8006940 <puts>
		  // Enable UART interrupt and enter low-power mode
		  HAL_UART_Receive_IT(&huart2, Rx_data, 3);
 80012de:	2203      	movs	r2, #3
 80012e0:	496e      	ldr	r1, [pc, #440]	; (800149c <main+0x220>)
 80012e2:	486d      	ldr	r0, [pc, #436]	; (8001498 <main+0x21c>)
 80012e4:	f003 f9fa 	bl	80046dc <HAL_UART_Receive_IT>
 80012e8:	e0d0      	b.n	800148c <main+0x210>
	      //HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	  }
	  else{
		  if (Rx_data[1] == 0x1) {
 80012ea:	4b6c      	ldr	r3, [pc, #432]	; (800149c <main+0x220>)
 80012ec:	785b      	ldrb	r3, [r3, #1]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	f040 80cc 	bne.w	800148c <main+0x210>
	  		  HAL_UART_Transmit(&huart1, txdata, 3, 10);
 80012f4:	230a      	movs	r3, #10
 80012f6:	2203      	movs	r2, #3
 80012f8:	496c      	ldr	r1, [pc, #432]	; (80014ac <main+0x230>)
 80012fa:	4866      	ldr	r0, [pc, #408]	; (8001494 <main+0x218>)
 80012fc:	f003 f964 	bl	80045c8 <HAL_UART_Transmit>

			  	  if(counter >= 5){
 8001300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001302:	2b04      	cmp	r3, #4
 8001304:	dd08      	ble.n	8001318 <main+0x9c>
			  		  counter = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
			  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001314:	f000 ffec 	bl	80022f0 <HAL_GPIO_WritePin>
			  	  }
			  	  printf("Waking up from low-power mode...\n");
 8001318:	4865      	ldr	r0, [pc, #404]	; (80014b0 <main+0x234>)
 800131a:	f005 fb11 	bl	8006940 <puts>
		  		  // Perform measurements
			  	  LTR329_Read(&light_ch0, &light_ch1);
 800131e:	463a      	mov	r2, r7
 8001320:	1cbb      	adds	r3, r7, #2
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff65 	bl	80011f4 <LTR329_Read>
		  		  SHT40_Read(&t, &rh, SHT40_MEAS_HIGH_PRECISION);
 800132a:	1d39      	adds	r1, r7, #4
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	22fd      	movs	r2, #253	; 0xfd
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fe8c 	bl	8001050 <SHT40_Read>
		  		  float radiation = t*rh;
 8001338:	ed97 7a02 	vldr	s14, [r7, #8]
 800133c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001344:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		  		  float light0 = (float)light_ch0;
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001352:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		  		  float light1 = (float)light_ch1;
 8001356:	883b      	ldrh	r3, [r7, #0]
 8001358:	ee07 3a90 	vmov	s15, r3
 800135c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001360:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		  		  float dust = light0+t;
 8001364:	edd7 7a02 	vldr	s15, [r7, #8]
 8001368:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800136c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001370:	edc7 7a08 	vstr	s15, [r7, #32]

		  		  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8001374:	2108      	movs	r1, #8
 8001376:	484f      	ldr	r0, [pc, #316]	; (80014b4 <main+0x238>)
 8001378:	f000 ffd2 	bl	8002320 <HAL_GPIO_TogglePin>
		  		  // SEND TEMP
		  		  if(counter == 0){
 800137c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137e:	2b00      	cmp	r3, #0
 8001380:	d118      	bne.n	80013b4 <main+0x138>
		  			SHT40_Read(&t, &rh, SHT40_MEAS_HIGH_PRECISION);
 8001382:	1d39      	adds	r1, r7, #4
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	22fd      	movs	r2, #253	; 0xfd
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe60 	bl	8001050 <SHT40_Read>
			  		  uint8_t* TempBytes = create_payload_f(RESPONSE_TEMPERATURE, t);
 8001390:	edd7 7a02 	vldr	s15, [r7, #8]
 8001394:	eeb0 0a67 	vmov.f32	s0, s15
 8001398:	2002      	movs	r0, #2
 800139a:	f7ff fdd3 	bl	8000f44 <create_payload_f>
 800139e:	60f8      	str	r0, [r7, #12]
			  		  HAL_UART_Transmit(&huart2, TempBytes, 7, 10);
 80013a0:	230a      	movs	r3, #10
 80013a2:	2207      	movs	r2, #7
 80013a4:	68f9      	ldr	r1, [r7, #12]
 80013a6:	483c      	ldr	r0, [pc, #240]	; (8001498 <main+0x21c>)
 80013a8:	f003 f90e 	bl	80045c8 <HAL_UART_Transmit>
			  		  free(TempBytes);
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f004 fc97 	bl	8005ce0 <free>
 80013b2:	e053      	b.n	800145c <main+0x1e0>
		  		  }else if(counter == 1){
 80013b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d111      	bne.n	80013de <main+0x162>
			  		  uint8_t* HumBytes = create_payload_f(RESPONSE_HUMIDITY, rh);
 80013ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	2003      	movs	r0, #3
 80013c4:	f7ff fdbe 	bl	8000f44 <create_payload_f>
 80013c8:	6138      	str	r0, [r7, #16]
			  		  HAL_UART_Transmit(&huart2, HumBytes, 7, 10);
 80013ca:	230a      	movs	r3, #10
 80013cc:	2207      	movs	r2, #7
 80013ce:	6939      	ldr	r1, [r7, #16]
 80013d0:	4831      	ldr	r0, [pc, #196]	; (8001498 <main+0x21c>)
 80013d2:	f003 f8f9 	bl	80045c8 <HAL_UART_Transmit>
			  		  free(HumBytes);
 80013d6:	6938      	ldr	r0, [r7, #16]
 80013d8:	f004 fc82 	bl	8005ce0 <free>
 80013dc:	e03e      	b.n	800145c <main+0x1e0>
		  		  }else if(counter == 2){
 80013de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d10f      	bne.n	8001404 <main+0x188>
			  		  uint8_t* LightBytes = create_payload_f(RESPONSE_LIGHT, light1);
 80013e4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80013e8:	2004      	movs	r0, #4
 80013ea:	f7ff fdab 	bl	8000f44 <create_payload_f>
 80013ee:	6178      	str	r0, [r7, #20]
			  		  HAL_UART_Transmit(&huart2, LightBytes, 7, 10);
 80013f0:	230a      	movs	r3, #10
 80013f2:	2207      	movs	r2, #7
 80013f4:	6979      	ldr	r1, [r7, #20]
 80013f6:	4828      	ldr	r0, [pc, #160]	; (8001498 <main+0x21c>)
 80013f8:	f003 f8e6 	bl	80045c8 <HAL_UART_Transmit>
			  		  free(LightBytes);
 80013fc:	6978      	ldr	r0, [r7, #20]
 80013fe:	f004 fc6f 	bl	8005ce0 <free>
 8001402:	e02b      	b.n	800145c <main+0x1e0>
		  		  }else if(counter == 3){
 8001404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001406:	2b03      	cmp	r3, #3
 8001408:	d10f      	bne.n	800142a <main+0x1ae>
			  		  uint8_t* RadBytes = create_payload_f(RESPONSE_RADIATION, radiation);
 800140a:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800140e:	2005      	movs	r0, #5
 8001410:	f7ff fd98 	bl	8000f44 <create_payload_f>
 8001414:	61b8      	str	r0, [r7, #24]
			  		  HAL_UART_Transmit(&huart2, RadBytes, 7, 10);
 8001416:	230a      	movs	r3, #10
 8001418:	2207      	movs	r2, #7
 800141a:	69b9      	ldr	r1, [r7, #24]
 800141c:	481e      	ldr	r0, [pc, #120]	; (8001498 <main+0x21c>)
 800141e:	f003 f8d3 	bl	80045c8 <HAL_UART_Transmit>
			  		  free(RadBytes);
 8001422:	69b8      	ldr	r0, [r7, #24]
 8001424:	f004 fc5c 	bl	8005ce0 <free>
 8001428:	e018      	b.n	800145c <main+0x1e0>

		  		  }else if(counter == 4){
 800142a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142c:	2b04      	cmp	r3, #4
 800142e:	d115      	bne.n	800145c <main+0x1e0>
			  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8001430:	2201      	movs	r2, #1
 8001432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143a:	f000 ff59 	bl	80022f0 <HAL_GPIO_WritePin>
			  		  uint8_t* DustBytes = create_payload_f(RESPONSE_DUST, dust);
 800143e:	ed97 0a08 	vldr	s0, [r7, #32]
 8001442:	2006      	movs	r0, #6
 8001444:	f7ff fd7e 	bl	8000f44 <create_payload_f>
 8001448:	61f8      	str	r0, [r7, #28]
			  		  HAL_UART_Transmit(&huart2, DustBytes, 7, 10);
 800144a:	230a      	movs	r3, #10
 800144c:	2207      	movs	r2, #7
 800144e:	69f9      	ldr	r1, [r7, #28]
 8001450:	4811      	ldr	r0, [pc, #68]	; (8001498 <main+0x21c>)
 8001452:	f003 f8b9 	bl	80045c8 <HAL_UART_Transmit>
					  free(DustBytes);
 8001456:	69f8      	ldr	r0, [r7, #28]
 8001458:	f004 fc42 	bl	8005ce0 <free>
		  		  }


		  		  counter++;
 800145c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145e:	3301      	adds	r3, #1
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
		  		  //Clear Rx Buffer
		  		  for (uint8_t i=0; i<3; i++) {
 8001462:	2300      	movs	r3, #0
 8001464:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001468:	e009      	b.n	800147e <main+0x202>
		  			  Rx_data[i] = 0;
 800146a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800146e:	4a0b      	ldr	r2, [pc, #44]	; (800149c <main+0x220>)
 8001470:	2100      	movs	r1, #0
 8001472:	54d1      	strb	r1, [r2, r3]
		  		  for (uint8_t i=0; i<3; i++) {
 8001474:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001478:	3301      	adds	r3, #1
 800147a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800147e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001482:	2b02      	cmp	r3, #2
 8001484:	d9f1      	bls.n	800146a <main+0x1ee>
		  		  }
		  		  // Data is processed, reset the flag
		  		  dataReadyFlag = 0;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <main+0x228>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
	  //enum msg_type_e msg_type = Rx_data[1];

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 800148c:	2064      	movs	r0, #100	; 0x64
 800148e:	f000 fc09 	bl	8001ca4 <HAL_Delay>
	  if (dataReadyFlag == 0){
 8001492:	e71c      	b.n	80012ce <main+0x52>
 8001494:	200002c8 	.word	0x200002c8
 8001498:	20000350 	.word	0x20000350
 800149c:	20000214 	.word	0x20000214
 80014a0:	20000218 	.word	0x20000218
 80014a4:	200003d8 	.word	0x200003d8
 80014a8:	08008728 	.word	0x08008728
 80014ac:	20000000 	.word	0x20000000
 80014b0:	08008744 	.word	0x08008744
 80014b4:	48000400 	.word	0x48000400

080014b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b096      	sub	sp, #88	; 0x58
 80014bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	2244      	movs	r2, #68	; 0x44
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f005 fb1a 	bl	8006b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014cc:	463b      	mov	r3, r7
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014de:	f002 f801 	bl	80034e4 <HAL_PWREx_ControlVoltageScaling>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014e8:	f000 f950 	bl	800178c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014ec:	f001 ffdc 	bl	80034a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <SystemClock_Config+0xa8>)
 80014f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f6:	4a1a      	ldr	r2, [pc, #104]	; (8001560 <SystemClock_Config+0xa8>)
 80014f8:	f023 0318 	bic.w	r3, r3, #24
 80014fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001500:	2314      	movs	r3, #20
 8001502:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001504:	2301      	movs	r3, #1
 8001506:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001508:	2301      	movs	r3, #1
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001510:	23a0      	movs	r3, #160	; 0xa0
 8001512:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001514:	2300      	movs	r3, #0
 8001516:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4618      	mov	r0, r3
 800151e:	f002 f837 	bl	8003590 <HAL_RCC_OscConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001528:	f000 f930 	bl	800178c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152c:	230f      	movs	r3, #15
 800152e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001540:	463b      	mov	r3, r7
 8001542:	2101      	movs	r1, #1
 8001544:	4618      	mov	r0, r3
 8001546:	f002 fc85 	bl	8003e54 <HAL_RCC_ClockConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001550:	f000 f91c 	bl	800178c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001554:	f003 f828 	bl	80045a8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001558:	bf00      	nop
 800155a:	3758      	adds	r7, #88	; 0x58
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40021000 	.word	0x40021000

08001564 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <MX_I2C1_Init+0x74>)
 800156a:	4a1c      	ldr	r2, [pc, #112]	; (80015dc <MX_I2C1_Init+0x78>)
 800156c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MX_I2C1_Init+0x74>)
 8001570:	4a1b      	ldr	r2, [pc, #108]	; (80015e0 <MX_I2C1_Init+0x7c>)
 8001572:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <MX_I2C1_Init+0x74>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <MX_I2C1_Init+0x74>)
 800157c:	2201      	movs	r2, #1
 800157e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001580:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <MX_I2C1_Init+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <MX_I2C1_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <MX_I2C1_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_I2C1_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <MX_I2C1_Init+0x74>)
 800159a:	2200      	movs	r2, #0
 800159c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159e:	480e      	ldr	r0, [pc, #56]	; (80015d8 <MX_I2C1_Init+0x74>)
 80015a0:	f000 fed8 	bl	8002354 <HAL_I2C_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015aa:	f000 f8ef 	bl	800178c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ae:	2100      	movs	r1, #0
 80015b0:	4809      	ldr	r0, [pc, #36]	; (80015d8 <MX_I2C1_Init+0x74>)
 80015b2:	f001 fee1 	bl	8003378 <HAL_I2CEx_ConfigAnalogFilter>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015bc:	f000 f8e6 	bl	800178c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015c0:	2100      	movs	r1, #0
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_I2C1_Init+0x74>)
 80015c4:	f001 ff23 	bl	800340e <HAL_I2CEx_ConfigDigitalFilter>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015ce:	f000 f8dd 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000220 	.word	0x20000220
 80015dc:	40005400 	.word	0x40005400
 80015e0:	00707cbb 	.word	0x00707cbb

080015e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e8:	4b15      	ldr	r3, [pc, #84]	; (8001640 <MX_USART2_UART_Init+0x5c>)
 80015ea:	4a16      	ldr	r2, [pc, #88]	; (8001644 <MX_USART2_UART_Init+0x60>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_USART2_UART_Init+0x5c>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_USART2_UART_Init+0x5c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_USART2_UART_Init+0x5c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_USART2_UART_Init+0x5c>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <MX_USART2_UART_Init+0x5c>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_USART2_UART_Init+0x5c>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <MX_USART2_UART_Init+0x5c>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_USART2_UART_Init+0x5c>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <MX_USART2_UART_Init+0x5c>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001626:	2300      	movs	r3, #0
 8001628:	2200      	movs	r2, #0
 800162a:	2100      	movs	r1, #0
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <MX_USART2_UART_Init+0x5c>)
 800162e:	f004 fadd 	bl	8005bec <HAL_RS485Ex_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001638:	f000 f8a8 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000350 	.word	0x20000350
 8001644:	40004400 	.word	0x40004400

08001648 <MX_USART1_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart1.Instance = USART2;
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <MX_USART1_UART_Init+0x5c>)
 800164e:	4a16      	ldr	r2, [pc, #88]	; (80016a8 <MX_USART1_UART_Init+0x60>)
 8001650:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_USART1_UART_Init+0x5c>)
 8001654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001658:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <MX_USART1_UART_Init+0x5c>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001660:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <MX_USART1_UART_Init+0x5c>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_USART1_UART_Init+0x5c>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800166c:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <MX_USART1_UART_Init+0x5c>)
 800166e:	220c      	movs	r2, #12
 8001670:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_USART1_UART_Init+0x5c>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <MX_USART1_UART_Init+0x5c>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_USART1_UART_Init+0x5c>)
 8001680:	2200      	movs	r2, #0
 8001682:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <MX_USART1_UART_Init+0x5c>)
 8001686:	2200      	movs	r2, #0
 8001688:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800168a:	2300      	movs	r3, #0
 800168c:	2200      	movs	r2, #0
 800168e:	2100      	movs	r1, #0
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <MX_USART1_UART_Init+0x5c>)
 8001692:	f004 faab 	bl	8005bec <HAL_RS485Ex_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800169c:	f000 f876 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200002c8 	.word	0x200002c8
 80016a8:	40004400 	.word	0x40004400

080016ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c2:	4b30      	ldr	r3, [pc, #192]	; (8001784 <MX_GPIO_Init+0xd8>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	4a2f      	ldr	r2, [pc, #188]	; (8001784 <MX_GPIO_Init+0xd8>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ce:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <MX_GPIO_Init+0xd8>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <MX_GPIO_Init+0xd8>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	4a29      	ldr	r2, [pc, #164]	; (8001784 <MX_GPIO_Init+0xd8>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e6:	4b27      	ldr	r3, [pc, #156]	; (8001784 <MX_GPIO_Init+0xd8>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	4b24      	ldr	r3, [pc, #144]	; (8001784 <MX_GPIO_Init+0xd8>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	4a23      	ldr	r2, [pc, #140]	; (8001784 <MX_GPIO_Init+0xd8>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fe:	4b21      	ldr	r3, [pc, #132]	; (8001784 <MX_GPIO_Init+0xd8>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	2108      	movs	r1, #8
 800170e:	481e      	ldr	r0, [pc, #120]	; (8001788 <MX_GPIO_Init+0xdc>)
 8001710:	f000 fdee 	bl	80022f0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	4619      	mov	r1, r3
 800172c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001730:	f000 fc6c 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001734:	2308      	movs	r3, #8
 8001736:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	4619      	mov	r1, r3
 800174a:	480f      	ldr	r0, [pc, #60]	; (8001788 <MX_GPIO_Init+0xdc>)
 800174c:	f000 fc5e 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001750:	23c0      	movs	r3, #192	; 0xc0
 8001752:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001760:	2307      	movs	r3, #7
 8001762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	4619      	mov	r1, r3
 800176a:	4807      	ldr	r0, [pc, #28]	; (8001788 <MX_GPIO_Init+0xdc>)
 800176c:	f000 fc4e 	bl	800200c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2108      	movs	r1, #8
 8001774:	4804      	ldr	r0, [pc, #16]	; (8001788 <MX_GPIO_Init+0xdc>)
 8001776:	f000 fdbb 	bl	80022f0 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 800177a:	bf00      	nop
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	48000400 	.word	0x48000400

0800178c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001790:	b672      	cpsid	i
}
 8001792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001794:	e7fe      	b.n	8001794 <Error_Handler+0x8>
	...

08001798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_MspInit+0x44>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a2:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <HAL_MspInit+0x44>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6613      	str	r3, [r2, #96]	; 0x60
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_MspInit+0x44>)
 80017ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_MspInit+0x44>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	4a08      	ldr	r2, [pc, #32]	; (80017dc <HAL_MspInit+0x44>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c0:	6593      	str	r3, [r2, #88]	; 0x58
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_MspInit+0x44>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000

080017e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b096      	sub	sp, #88	; 0x58
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	2234      	movs	r2, #52	; 0x34
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f005 f97d 	bl	8006b00 <memset>
  if(hi2c->Instance==I2C1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <HAL_I2C_MspInit+0xa8>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d137      	bne.n	8001880 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001810:	2340      	movs	r3, #64	; 0x40
 8001812:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	4618      	mov	r0, r3
 800181e:	f002 fd3d 	bl	800429c <HAL_RCCEx_PeriphCLKConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001828:	f7ff ffb0 	bl	800178c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <HAL_I2C_MspInit+0xac>)
 800182e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001830:	4a16      	ldr	r2, [pc, #88]	; (800188c <HAL_I2C_MspInit+0xac>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_I2C_MspInit+0xac>)
 800183a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001844:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001848:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800184a:	2312      	movs	r3, #18
 800184c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001856:	2304      	movs	r3, #4
 8001858:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800185e:	4619      	mov	r1, r3
 8001860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001864:	f000 fbd2 	bl	800200c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_I2C_MspInit+0xac>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186c:	4a07      	ldr	r2, [pc, #28]	; (800188c <HAL_I2C_MspInit+0xac>)
 800186e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001872:	6593      	str	r3, [r2, #88]	; 0x58
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_I2C_MspInit+0xac>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001880:	bf00      	nop
 8001882:	3758      	adds	r7, #88	; 0x58
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40005400 	.word	0x40005400
 800188c:	40021000 	.word	0x40021000

08001890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b096      	sub	sp, #88	; 0x58
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	2234      	movs	r2, #52	; 0x34
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f005 f925 	bl	8006b00 <memset>
  if(huart->Instance==USART2)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a23      	ldr	r2, [pc, #140]	; (8001948 <HAL_UART_MspInit+0xb8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d13e      	bne.n	800193e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018c0:	2302      	movs	r3, #2
 80018c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 fce5 	bl	800429c <HAL_RCCEx_PeriphCLKConfig>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018d8:	f7ff ff58 	bl	800178c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_UART_MspInit+0xbc>)
 80018de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e0:	4a1a      	ldr	r2, [pc, #104]	; (800194c <HAL_UART_MspInit+0xbc>)
 80018e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e6:	6593      	str	r3, [r2, #88]	; 0x58
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_UART_MspInit+0xbc>)
 80018ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_UART_MspInit+0xbc>)
 80018f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f8:	4a14      	ldr	r2, [pc, #80]	; (800194c <HAL_UART_MspInit+0xbc>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_UART_MspInit+0xbc>)
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_DE
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800190c:	230e      	movs	r3, #14
 800190e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800191c:	2307      	movs	r3, #7
 800191e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001924:	4619      	mov	r1, r3
 8001926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192a:	f000 fb6f 	bl	800200c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	2026      	movs	r0, #38	; 0x26
 8001934:	f000 fab5 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001938:	2026      	movs	r0, #38	; 0x26
 800193a:	f000 face 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800193e:	bf00      	nop
 8001940:	3758      	adds	r7, #88	; 0x58
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40004400 	.word	0x40004400
 800194c:	40021000 	.word	0x40021000

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <NMI_Handler+0x4>

08001956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <MemManage_Handler+0x4>

08001962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <UsageFault_Handler+0x4>

0800196e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199c:	f000 f962 	bl	8001c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <USART2_IRQHandler+0x10>)
 80019aa:	f002 fee3 	bl	8004774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000350 	.word	0x20000350

080019b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return 1;
 80019bc:	2301      	movs	r3, #1
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_kill>:

int _kill(int pid, int sig)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019d2:	f005 f8f7 	bl	8006bc4 <__errno>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2216      	movs	r2, #22
 80019da:	601a      	str	r2, [r3, #0]
  return -1;
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_exit>:

void _exit (int status)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ffe7 	bl	80019c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019fa:	e7fe      	b.n	80019fa <_exit+0x12>

080019fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e00a      	b.n	8001a24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a0e:	f3af 8000 	nop.w
 8001a12:	4601      	mov	r1, r0
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	60ba      	str	r2, [r7, #8]
 8001a1a:	b2ca      	uxtb	r2, r1
 8001a1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3301      	adds	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	dbf0      	blt.n	8001a0e <_read+0x12>
  }

  return len;
 8001a2c:	687b      	ldr	r3, [r7, #4]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e009      	b.n	8001a5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	60ba      	str	r2, [r7, #8]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	dbf1      	blt.n	8001a48 <_write+0x12>
  }
  return len;
 8001a64:	687b      	ldr	r3, [r7, #4]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <_close>:

int _close(int file)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a96:	605a      	str	r2, [r3, #4]
  return 0;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <_isatty>:

int _isatty(int file)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <_sbrk+0x5c>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <_sbrk+0x60>)
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <_sbrk+0x64>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <_sbrk+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d207      	bcs.n	8001b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b08:	f005 f85c 	bl	8006bc4 <__errno>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	220c      	movs	r2, #12
 8001b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	e009      	b.n	8001b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <_sbrk+0x64>)
 8001b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	2000a000 	.word	0x2000a000
 8001b38:	00000400 	.word	0x00000400
 8001b3c:	200003dc 	.word	0x200003dc
 8001b40:	20000530 	.word	0x20000530

08001b44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <SystemInit+0x20>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b4e:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <SystemInit+0x20>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b6c:	f7ff ffea 	bl	8001b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b70:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b72:	490d      	ldr	r1, [pc, #52]	; (8001ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b74:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <LoopForever+0xe>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b88:	4c0a      	ldr	r4, [pc, #40]	; (8001bb4 <LoopForever+0x16>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b96:	f005 f81b 	bl	8006bd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b9a:	f7ff fb6f 	bl	800127c <main>

08001b9e <LoopForever>:

LoopForever:
    b LoopForever
 8001b9e:	e7fe      	b.n	8001b9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ba0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001bac:	08008b34 	.word	0x08008b34
  ldr r2, =_sbss
 8001bb0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001bb4:	20000530 	.word	0x20000530

08001bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC1_2_IRQHandler>

08001bba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f000 f961 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f000 f80e 	bl	8001bec <HAL_InitTick>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	71fb      	strb	r3, [r7, #7]
 8001bda:	e001      	b.n	8001be0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bdc:	f7ff fddc 	bl	8001798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001be0:	79fb      	ldrb	r3, [r7, #7]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_InitTick+0x6c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d023      	beq.n	8001c48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_InitTick+0x70>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_InitTick+0x6c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f96d 	bl	8001ef6 <HAL_SYSTICK_Config>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10f      	bne.n	8001c42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d809      	bhi.n	8001c3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f000 f937 	bl	8001ea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_InitTick+0x74>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e007      	b.n	8001c4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	e004      	b.n	8001c4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	e001      	b.n	8001c4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	2000000c 	.word	0x2000000c
 8001c5c:	20000004 	.word	0x20000004
 8001c60:	20000008 	.word	0x20000008

08001c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_IncTick+0x20>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_IncTick+0x24>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <HAL_IncTick+0x24>)
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	2000000c 	.word	0x2000000c
 8001c88:	200003e0 	.word	0x200003e0

08001c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_GetTick+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	200003e0 	.word	0x200003e0

08001ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cac:	f7ff ffee 	bl	8001c8c <HAL_GetTick>
 8001cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbc:	d005      	beq.n	8001cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_Delay+0x44>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cca:	bf00      	nop
 8001ccc:	f7ff ffde 	bl	8001c8c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d8f7      	bhi.n	8001ccc <HAL_Delay+0x28>
  {
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000000c 	.word	0x2000000c

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4907      	ldr	r1, [pc, #28]	; (8001d88 <__NVIC_EnableIRQ+0x38>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff8e 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff29 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff3e 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff8e 	bl	8001de0 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5d 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff31 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffa2 	bl	8001e48 <SysTick_Config>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b085      	sub	sp, #20
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d008      	beq.n	8001f38 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2204      	movs	r2, #4
 8001f2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e022      	b.n	8001f7e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 020e 	bic.w	r2, r2, #14
 8001f46:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5c:	f003 021c 	and.w	r2, r3, #28
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	2101      	movs	r1, #1
 8001f66:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d005      	beq.n	8001fae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	e029      	b.n	8002002 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 020e 	bic.w	r2, r2, #14
 8001fbc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0201 	bic.w	r2, r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f003 021c 	and.w	r2, r3, #28
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	2101      	movs	r1, #1
 8001fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
    }
  }
  return status;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201a:	e14e      	b.n	80022ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	2101      	movs	r1, #1
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	4013      	ands	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 8140 	beq.w	80022b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b01      	cmp	r3, #1
 800203e:	d005      	beq.n	800204c <HAL_GPIO_Init+0x40>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d130      	bne.n	80020ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002082:	2201      	movs	r2, #1
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	f003 0201 	and.w	r2, r3, #1
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d017      	beq.n	80020ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	2203      	movs	r2, #3
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d123      	bne.n	800213e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	08da      	lsrs	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3208      	adds	r2, #8
 80020fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	220f      	movs	r2, #15
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	691a      	ldr	r2, [r3, #16]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	08da      	lsrs	r2, r3, #3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3208      	adds	r2, #8
 8002138:	6939      	ldr	r1, [r7, #16]
 800213a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2203      	movs	r2, #3
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0203 	and.w	r2, r3, #3
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 809a 	beq.w	80022b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002180:	4b55      	ldr	r3, [pc, #340]	; (80022d8 <HAL_GPIO_Init+0x2cc>)
 8002182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002184:	4a54      	ldr	r2, [pc, #336]	; (80022d8 <HAL_GPIO_Init+0x2cc>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6613      	str	r3, [r2, #96]	; 0x60
 800218c:	4b52      	ldr	r3, [pc, #328]	; (80022d8 <HAL_GPIO_Init+0x2cc>)
 800218e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002198:	4a50      	ldr	r2, [pc, #320]	; (80022dc <HAL_GPIO_Init+0x2d0>)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	220f      	movs	r2, #15
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021c2:	d013      	beq.n	80021ec <HAL_GPIO_Init+0x1e0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a46      	ldr	r2, [pc, #280]	; (80022e0 <HAL_GPIO_Init+0x2d4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00d      	beq.n	80021e8 <HAL_GPIO_Init+0x1dc>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a45      	ldr	r2, [pc, #276]	; (80022e4 <HAL_GPIO_Init+0x2d8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d007      	beq.n	80021e4 <HAL_GPIO_Init+0x1d8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a44      	ldr	r2, [pc, #272]	; (80022e8 <HAL_GPIO_Init+0x2dc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d101      	bne.n	80021e0 <HAL_GPIO_Init+0x1d4>
 80021dc:	2303      	movs	r3, #3
 80021de:	e006      	b.n	80021ee <HAL_GPIO_Init+0x1e2>
 80021e0:	2307      	movs	r3, #7
 80021e2:	e004      	b.n	80021ee <HAL_GPIO_Init+0x1e2>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e002      	b.n	80021ee <HAL_GPIO_Init+0x1e2>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_GPIO_Init+0x1e2>
 80021ec:	2300      	movs	r3, #0
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	f002 0203 	and.w	r2, r2, #3
 80021f4:	0092      	lsls	r2, r2, #2
 80021f6:	4093      	lsls	r3, r2
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021fe:	4937      	ldr	r1, [pc, #220]	; (80022dc <HAL_GPIO_Init+0x2d0>)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800220c:	4b37      	ldr	r3, [pc, #220]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002230:	4a2e      	ldr	r2, [pc, #184]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002236:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800225a:	4a24      	ldr	r2, [pc, #144]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002260:	4b22      	ldr	r3, [pc, #136]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002284:	4a19      	ldr	r2, [pc, #100]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800228a:	4b18      	ldr	r3, [pc, #96]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022ae:	4a0f      	ldr	r2, [pc, #60]	; (80022ec <HAL_GPIO_Init+0x2e0>)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	3301      	adds	r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f47f aea9 	bne.w	800201c <HAL_GPIO_Init+0x10>
  }
}
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40010000 	.word	0x40010000
 80022e0:	48000400 	.word	0x48000400
 80022e4:	48000800 	.word	0x48000800
 80022e8:	48000c00 	.word	0x48000c00
 80022ec:	40010400 	.word	0x40010400

080022f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
 80022fc:	4613      	mov	r3, r2
 80022fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002300:	787b      	ldrb	r3, [r7, #1]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800230c:	e002      	b.n	8002314 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002332:	887a      	ldrh	r2, [r7, #2]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4013      	ands	r3, r2
 8002338:	041a      	lsls	r2, r3, #16
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43d9      	mvns	r1, r3
 800233e:	887b      	ldrh	r3, [r7, #2]
 8002340:	400b      	ands	r3, r1
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	619a      	str	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e08d      	b.n	8002482 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff fa30 	bl	80017e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2224      	movs	r2, #36	; 0x24
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d107      	bne.n	80023ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	e006      	b.n	80023dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d108      	bne.n	80023f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	e007      	b.n	8002406 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002404:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002418:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002428:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69d9      	ldr	r1, [r3, #28]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1a      	ldr	r2, [r3, #32]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af02      	add	r7, sp, #8
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	461a      	mov	r2, r3
 8002498:	460b      	mov	r3, r1
 800249a:	817b      	strh	r3, [r7, #10]
 800249c:	4613      	mov	r3, r2
 800249e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	f040 80fd 	bne.w	80026a8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_I2C_Master_Transmit+0x30>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e0f6      	b.n	80026aa <HAL_I2C_Master_Transmit+0x21e>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024c4:	f7ff fbe2 	bl	8001c8c <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2319      	movs	r3, #25
 80024d0:	2201      	movs	r2, #1
 80024d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fce0 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0e1      	b.n	80026aa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2221      	movs	r2, #33	; 0x21
 80024ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2210      	movs	r2, #16
 80024f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	893a      	ldrh	r2, [r7, #8]
 8002506:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	2bff      	cmp	r3, #255	; 0xff
 8002516:	d906      	bls.n	8002526 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	22ff      	movs	r2, #255	; 0xff
 800251c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800251e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	e007      	b.n	8002536 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002530:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002534:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253a:	2b00      	cmp	r3, #0
 800253c:	d024      	beq.n	8002588 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	781a      	ldrb	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002572:	b2db      	uxtb	r3, r3
 8002574:	3301      	adds	r3, #1
 8002576:	b2da      	uxtb	r2, r3
 8002578:	8979      	ldrh	r1, [r7, #10]
 800257a:	4b4e      	ldr	r3, [pc, #312]	; (80026b4 <HAL_I2C_Master_Transmit+0x228>)
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 fec7 	bl	8003314 <I2C_TransferConfig>
 8002586:	e066      	b.n	8002656 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	b2da      	uxtb	r2, r3
 800258e:	8979      	ldrh	r1, [r7, #10]
 8002590:	4b48      	ldr	r3, [pc, #288]	; (80026b4 <HAL_I2C_Master_Transmit+0x228>)
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 febc 	bl	8003314 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800259c:	e05b      	b.n	8002656 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	6a39      	ldr	r1, [r7, #32]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fcc9 	bl	8002f3a <I2C_WaitOnTXISFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e07b      	b.n	80026aa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d034      	beq.n	8002656 <HAL_I2C_Master_Transmit+0x1ca>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d130      	bne.n	8002656 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	2200      	movs	r2, #0
 80025fc:	2180      	movs	r1, #128	; 0x80
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 fc4c 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e04d      	b.n	80026aa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002612:	b29b      	uxth	r3, r3
 8002614:	2bff      	cmp	r3, #255	; 0xff
 8002616:	d90e      	bls.n	8002636 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	22ff      	movs	r2, #255	; 0xff
 800261c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002622:	b2da      	uxtb	r2, r3
 8002624:	8979      	ldrh	r1, [r7, #10]
 8002626:	2300      	movs	r3, #0
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 fe70 	bl	8003314 <I2C_TransferConfig>
 8002634:	e00f      	b.n	8002656 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	b2da      	uxtb	r2, r3
 8002646:	8979      	ldrh	r1, [r7, #10]
 8002648:	2300      	movs	r3, #0
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 fe5f 	bl	8003314 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d19e      	bne.n	800259e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	6a39      	ldr	r1, [r7, #32]
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fcaf 	bl	8002fc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e01a      	b.n	80026aa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2220      	movs	r2, #32
 800267a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6859      	ldr	r1, [r3, #4]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <HAL_I2C_Master_Transmit+0x22c>)
 8002688:	400b      	ands	r3, r1
 800268a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e000      	b.n	80026aa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80026a8:	2302      	movs	r3, #2
  }
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	80002000 	.word	0x80002000
 80026b8:	fe00e800 	.word	0xfe00e800

080026bc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	461a      	mov	r2, r3
 80026c8:	460b      	mov	r3, r1
 80026ca:	817b      	strh	r3, [r7, #10]
 80026cc:	4613      	mov	r3, r2
 80026ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b20      	cmp	r3, #32
 80026da:	f040 80db 	bne.w	8002894 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_I2C_Master_Receive+0x30>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e0d4      	b.n	8002896 <HAL_I2C_Master_Receive+0x1da>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026f4:	f7ff faca 	bl	8001c8c <HAL_GetTick>
 80026f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2319      	movs	r3, #25
 8002700:	2201      	movs	r2, #1
 8002702:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fbc8 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e0bf      	b.n	8002896 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2222      	movs	r2, #34	; 0x22
 800271a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2210      	movs	r2, #16
 8002722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	893a      	ldrh	r2, [r7, #8]
 8002736:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002742:	b29b      	uxth	r3, r3
 8002744:	2bff      	cmp	r3, #255	; 0xff
 8002746:	d90e      	bls.n	8002766 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	22ff      	movs	r2, #255	; 0xff
 800274c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002752:	b2da      	uxtb	r2, r3
 8002754:	8979      	ldrh	r1, [r7, #10]
 8002756:	4b52      	ldr	r3, [pc, #328]	; (80028a0 <HAL_I2C_Master_Receive+0x1e4>)
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 fdd8 	bl	8003314 <I2C_TransferConfig>
 8002764:	e06d      	b.n	8002842 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002774:	b2da      	uxtb	r2, r3
 8002776:	8979      	ldrh	r1, [r7, #10]
 8002778:	4b49      	ldr	r3, [pc, #292]	; (80028a0 <HAL_I2C_Master_Receive+0x1e4>)
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 fdc7 	bl	8003314 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002786:	e05c      	b.n	8002842 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	6a39      	ldr	r1, [r7, #32]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fc5f 	bl	8003050 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e07c      	b.n	8002896 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d034      	beq.n	8002842 <HAL_I2C_Master_Receive+0x186>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d130      	bne.n	8002842 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	2200      	movs	r2, #0
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fb56 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e04d      	b.n	8002896 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2bff      	cmp	r3, #255	; 0xff
 8002802:	d90e      	bls.n	8002822 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	22ff      	movs	r2, #255	; 0xff
 8002808:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	b2da      	uxtb	r2, r3
 8002810:	8979      	ldrh	r1, [r7, #10]
 8002812:	2300      	movs	r3, #0
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 fd7a 	bl	8003314 <I2C_TransferConfig>
 8002820:	e00f      	b.n	8002842 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002830:	b2da      	uxtb	r2, r3
 8002832:	8979      	ldrh	r1, [r7, #10]
 8002834:	2300      	movs	r3, #0
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 fd69 	bl	8003314 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d19d      	bne.n	8002788 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	6a39      	ldr	r1, [r7, #32]
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fbb9 	bl	8002fc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e01a      	b.n	8002896 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2220      	movs	r2, #32
 8002866:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6859      	ldr	r1, [r3, #4]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <HAL_I2C_Master_Receive+0x1e8>)
 8002874:	400b      	ands	r3, r1
 8002876:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	e000      	b.n	8002896 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002894:	2302      	movs	r3, #2
  }
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	80002400 	.word	0x80002400
 80028a4:	fe00e800 	.word	0xfe00e800

080028a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	4608      	mov	r0, r1
 80028b2:	4611      	mov	r1, r2
 80028b4:	461a      	mov	r2, r3
 80028b6:	4603      	mov	r3, r0
 80028b8:	817b      	strh	r3, [r7, #10]
 80028ba:	460b      	mov	r3, r1
 80028bc:	813b      	strh	r3, [r7, #8]
 80028be:	4613      	mov	r3, r2
 80028c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b20      	cmp	r3, #32
 80028cc:	f040 80f9 	bne.w	8002ac2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_I2C_Mem_Write+0x34>
 80028d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d105      	bne.n	80028e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0ed      	b.n	8002ac4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_I2C_Mem_Write+0x4e>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e0e6      	b.n	8002ac4 <HAL_I2C_Mem_Write+0x21c>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028fe:	f7ff f9c5 	bl	8001c8c <HAL_GetTick>
 8002902:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	2319      	movs	r3, #25
 800290a:	2201      	movs	r2, #1
 800290c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 fac3 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0d1      	b.n	8002ac4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2221      	movs	r2, #33	; 0x21
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2240      	movs	r2, #64	; 0x40
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a3a      	ldr	r2, [r7, #32]
 800293a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002940:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002948:	88f8      	ldrh	r0, [r7, #6]
 800294a:	893a      	ldrh	r2, [r7, #8]
 800294c:	8979      	ldrh	r1, [r7, #10]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	4603      	mov	r3, r0
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 f9d3 	bl	8002d04 <I2C_RequestMemoryWrite>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0a9      	b.n	8002ac4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002974:	b29b      	uxth	r3, r3
 8002976:	2bff      	cmp	r3, #255	; 0xff
 8002978:	d90e      	bls.n	8002998 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	22ff      	movs	r2, #255	; 0xff
 800297e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002984:	b2da      	uxtb	r2, r3
 8002986:	8979      	ldrh	r1, [r7, #10]
 8002988:	2300      	movs	r3, #0
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 fcbf 	bl	8003314 <I2C_TransferConfig>
 8002996:	e00f      	b.n	80029b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	8979      	ldrh	r1, [r7, #10]
 80029aa:	2300      	movs	r3, #0
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 fcae 	bl	8003314 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fabc 	bl	8002f3a <I2C_WaitOnTXISFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e07b      	b.n	8002ac4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	781a      	ldrb	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d034      	beq.n	8002a70 <HAL_I2C_Mem_Write+0x1c8>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d130      	bne.n	8002a70 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	2200      	movs	r2, #0
 8002a16:	2180      	movs	r1, #128	; 0x80
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 fa3f 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e04d      	b.n	8002ac4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2bff      	cmp	r3, #255	; 0xff
 8002a30:	d90e      	bls.n	8002a50 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	22ff      	movs	r2, #255	; 0xff
 8002a36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	8979      	ldrh	r1, [r7, #10]
 8002a40:	2300      	movs	r3, #0
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 fc63 	bl	8003314 <I2C_TransferConfig>
 8002a4e:	e00f      	b.n	8002a70 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	8979      	ldrh	r1, [r7, #10]
 8002a62:	2300      	movs	r3, #0
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 fc52 	bl	8003314 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d19e      	bne.n	80029b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 faa2 	bl	8002fc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e01a      	b.n	8002ac4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2220      	movs	r2, #32
 8002a94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6859      	ldr	r1, [r3, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <HAL_I2C_Mem_Write+0x224>)
 8002aa2:	400b      	ands	r3, r1
 8002aa4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e000      	b.n	8002ac4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ac2:	2302      	movs	r3, #2
  }
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	fe00e800 	.word	0xfe00e800

08002ad0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	4608      	mov	r0, r1
 8002ada:	4611      	mov	r1, r2
 8002adc:	461a      	mov	r2, r3
 8002ade:	4603      	mov	r3, r0
 8002ae0:	817b      	strh	r3, [r7, #10]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	813b      	strh	r3, [r7, #8]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	f040 80fd 	bne.w	8002cf2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_I2C_Mem_Read+0x34>
 8002afe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0f1      	b.n	8002cf4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_I2C_Mem_Read+0x4e>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e0ea      	b.n	8002cf4 <HAL_I2C_Mem_Read+0x224>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b26:	f7ff f8b1 	bl	8001c8c <HAL_GetTick>
 8002b2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	2319      	movs	r3, #25
 8002b32:	2201      	movs	r2, #1
 8002b34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f9af 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0d5      	b.n	8002cf4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2222      	movs	r2, #34	; 0x22
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2240      	movs	r2, #64	; 0x40
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a3a      	ldr	r2, [r7, #32]
 8002b62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b70:	88f8      	ldrh	r0, [r7, #6]
 8002b72:	893a      	ldrh	r2, [r7, #8]
 8002b74:	8979      	ldrh	r1, [r7, #10]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	4603      	mov	r3, r0
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f913 	bl	8002dac <I2C_RequestMemoryRead>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0ad      	b.n	8002cf4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2bff      	cmp	r3, #255	; 0xff
 8002ba0:	d90e      	bls.n	8002bc0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	22ff      	movs	r2, #255	; 0xff
 8002ba6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	8979      	ldrh	r1, [r7, #10]
 8002bb0:	4b52      	ldr	r3, [pc, #328]	; (8002cfc <HAL_I2C_Mem_Read+0x22c>)
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 fbab 	bl	8003314 <I2C_TransferConfig>
 8002bbe:	e00f      	b.n	8002be0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	8979      	ldrh	r1, [r7, #10]
 8002bd2:	4b4a      	ldr	r3, [pc, #296]	; (8002cfc <HAL_I2C_Mem_Read+0x22c>)
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fb9a 	bl	8003314 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be6:	2200      	movs	r2, #0
 8002be8:	2104      	movs	r1, #4
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f956 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e07c      	b.n	8002cf4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d034      	beq.n	8002ca0 <HAL_I2C_Mem_Read+0x1d0>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d130      	bne.n	8002ca0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	2200      	movs	r2, #0
 8002c46:	2180      	movs	r1, #128	; 0x80
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f927 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e04d      	b.n	8002cf4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2bff      	cmp	r3, #255	; 0xff
 8002c60:	d90e      	bls.n	8002c80 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	22ff      	movs	r2, #255	; 0xff
 8002c66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	8979      	ldrh	r1, [r7, #10]
 8002c70:	2300      	movs	r3, #0
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 fb4b 	bl	8003314 <I2C_TransferConfig>
 8002c7e:	e00f      	b.n	8002ca0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	8979      	ldrh	r1, [r7, #10]
 8002c92:	2300      	movs	r3, #0
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fb3a 	bl	8003314 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d19a      	bne.n	8002be0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f98a 	bl	8002fc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e01a      	b.n	8002cf4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6859      	ldr	r1, [r3, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_I2C_Mem_Read+0x230>)
 8002cd2:	400b      	ands	r3, r1
 8002cd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e000      	b.n	8002cf4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
  }
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	80002400 	.word	0x80002400
 8002d00:	fe00e800 	.word	0xfe00e800

08002d04 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	4608      	mov	r0, r1
 8002d0e:	4611      	mov	r1, r2
 8002d10:	461a      	mov	r2, r3
 8002d12:	4603      	mov	r3, r0
 8002d14:	817b      	strh	r3, [r7, #10]
 8002d16:	460b      	mov	r3, r1
 8002d18:	813b      	strh	r3, [r7, #8]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	8979      	ldrh	r1, [r7, #10]
 8002d24:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <I2C_RequestMemoryWrite+0xa4>)
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 faf1 	bl	8003314 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	69b9      	ldr	r1, [r7, #24]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f8ff 	bl	8002f3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e02c      	b.n	8002da0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d105      	bne.n	8002d58 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d4c:	893b      	ldrh	r3, [r7, #8]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	629a      	str	r2, [r3, #40]	; 0x28
 8002d56:	e015      	b.n	8002d84 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d58:	893b      	ldrh	r3, [r7, #8]
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	69b9      	ldr	r1, [r7, #24]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f8e5 	bl	8002f3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e012      	b.n	8002da0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d7a:	893b      	ldrh	r3, [r7, #8]
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2180      	movs	r1, #128	; 0x80
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f884 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	80002000 	.word	0x80002000

08002dac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	4608      	mov	r0, r1
 8002db6:	4611      	mov	r1, r2
 8002db8:	461a      	mov	r2, r3
 8002dba:	4603      	mov	r3, r0
 8002dbc:	817b      	strh	r3, [r7, #10]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	813b      	strh	r3, [r7, #8]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	8979      	ldrh	r1, [r7, #10]
 8002dcc:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <I2C_RequestMemoryRead+0xa4>)
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fa9e 	bl	8003314 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	69b9      	ldr	r1, [r7, #24]
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f8ac 	bl	8002f3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e02c      	b.n	8002e46 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d105      	bne.n	8002dfe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002df2:	893b      	ldrh	r3, [r7, #8]
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28
 8002dfc:	e015      	b.n	8002e2a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002dfe:	893b      	ldrh	r3, [r7, #8]
 8002e00:	0a1b      	lsrs	r3, r3, #8
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	69b9      	ldr	r1, [r7, #24]
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f892 	bl	8002f3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e012      	b.n	8002e46 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e20:	893b      	ldrh	r3, [r7, #8]
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	2200      	movs	r2, #0
 8002e32:	2140      	movs	r1, #64	; 0x40
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f831 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	80002000 	.word	0x80002000

08002e54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d103      	bne.n	8002e72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d007      	beq.n	8002e90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	619a      	str	r2, [r3, #24]
  }
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eac:	e031      	b.n	8002f12 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d02d      	beq.n	8002f12 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb6:	f7fe fee9 	bl	8001c8c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d302      	bcc.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d122      	bne.n	8002f12 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d113      	bne.n	8002f12 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	f043 0220 	orr.w	r2, r3, #32
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e00f      	b.n	8002f32 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	bf0c      	ite	eq
 8002f22:	2301      	moveq	r3, #1
 8002f24:	2300      	movne	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d0be      	beq.n	8002eae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f46:	e033      	b.n	8002fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f901 	bl	8003154 <I2C_IsErrorOccurred>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e031      	b.n	8002fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f62:	d025      	beq.n	8002fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f64:	f7fe fe92 	bl	8001c8c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d302      	bcc.n	8002f7a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d11a      	bne.n	8002fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d013      	beq.n	8002fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e007      	b.n	8002fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d1c4      	bne.n	8002f48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fd4:	e02f      	b.n	8003036 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f8ba 	bl	8003154 <I2C_IsErrorOccurred>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e02d      	b.n	8003046 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fea:	f7fe fe4f 	bl	8001c8c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d302      	bcc.n	8003000 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d11a      	bne.n	8003036 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	2b20      	cmp	r3, #32
 800300c:	d013      	beq.n	8003036 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	f043 0220 	orr.w	r2, r3, #32
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e007      	b.n	8003046 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b20      	cmp	r3, #32
 8003042:	d1c8      	bne.n	8002fd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800305c:	e06b      	b.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f876 	bl	8003154 <I2C_IsErrorOccurred>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e069      	b.n	8003146 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b20      	cmp	r3, #32
 800307e:	d138      	bne.n	80030f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b04      	cmp	r3, #4
 800308c:	d105      	bne.n	800309a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e055      	b.n	8003146 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	d107      	bne.n	80030b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2210      	movs	r2, #16
 80030ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2204      	movs	r2, #4
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44
 80030b6:	e002      	b.n	80030be <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2220      	movs	r2, #32
 80030c4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80030d2:	400b      	ands	r3, r1
 80030d4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e029      	b.n	8003146 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f2:	f7fe fdcb 	bl	8001c8c <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d302      	bcc.n	8003108 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d116      	bne.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b04      	cmp	r3, #4
 8003114:	d00f      	beq.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e007      	b.n	8003146 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b04      	cmp	r3, #4
 8003142:	d18c      	bne.n	800305e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	fe00e800 	.word	0xfe00e800

08003154 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	; 0x28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	2b00      	cmp	r3, #0
 800317e:	d068      	beq.n	8003252 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2210      	movs	r2, #16
 8003186:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003188:	e049      	b.n	800321e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d045      	beq.n	800321e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003192:	f7fe fd7b 	bl	8001c8c <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <I2C_IsErrorOccurred+0x54>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d13a      	bne.n	800321e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ca:	d121      	bne.n	8003210 <I2C_IsErrorOccurred+0xbc>
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031d2:	d01d      	beq.n	8003210 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	d01a      	beq.n	8003210 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031ea:	f7fe fd4f 	bl	8001c8c <HAL_GetTick>
 80031ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031f0:	e00e      	b.n	8003210 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031f2:	f7fe fd4b 	bl	8001c8c <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b19      	cmp	r3, #25
 80031fe:	d907      	bls.n	8003210 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	f043 0320 	orr.w	r3, r3, #32
 8003206:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800320e:	e006      	b.n	800321e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b20      	cmp	r3, #32
 800321c:	d1e9      	bne.n	80031f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b20      	cmp	r3, #32
 800322a:	d003      	beq.n	8003234 <I2C_IsErrorOccurred+0xe0>
 800322c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0aa      	beq.n	800318a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003238:	2b00      	cmp	r3, #0
 800323a:	d103      	bne.n	8003244 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2220      	movs	r2, #32
 8003242:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00b      	beq.n	800327c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003274:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	f043 0308 	orr.w	r3, r3, #8
 800328c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003296:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00b      	beq.n	80032c0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	f043 0302 	orr.w	r3, r3, #2
 80032ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80032c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01c      	beq.n	8003302 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f7ff fdc3 	bl	8002e54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <I2C_IsErrorOccurred+0x1bc>)
 80032da:	400b      	ands	r3, r1
 80032dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003302:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003306:	4618      	mov	r0, r3
 8003308:	3728      	adds	r7, #40	; 0x28
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	fe00e800 	.word	0xfe00e800

08003314 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	607b      	str	r3, [r7, #4]
 800331e:	460b      	mov	r3, r1
 8003320:	817b      	strh	r3, [r7, #10]
 8003322:	4613      	mov	r3, r2
 8003324:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003326:	897b      	ldrh	r3, [r7, #10]
 8003328:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800332c:	7a7b      	ldrb	r3, [r7, #9]
 800332e:	041b      	lsls	r3, r3, #16
 8003330:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003334:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	4313      	orrs	r3, r2
 800333e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003342:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	0d5b      	lsrs	r3, r3, #21
 800334e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003352:	4b08      	ldr	r3, [pc, #32]	; (8003374 <I2C_TransferConfig+0x60>)
 8003354:	430b      	orrs	r3, r1
 8003356:	43db      	mvns	r3, r3
 8003358:	ea02 0103 	and.w	r1, r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	03ff63ff 	.word	0x03ff63ff

08003378 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b20      	cmp	r3, #32
 800338c:	d138      	bne.n	8003400 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003398:	2302      	movs	r3, #2
 800339a:	e032      	b.n	8003402 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2224      	movs	r2, #36	; 0x24
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0201 	bic.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6819      	ldr	r1, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e000      	b.n	8003402 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003400:	2302      	movs	r3, #2
  }
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b20      	cmp	r3, #32
 8003422:	d139      	bne.n	8003498 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800342e:	2302      	movs	r3, #2
 8003430:	e033      	b.n	800349a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2224      	movs	r2, #36	; 0x24
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0201 	bic.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003460:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	021b      	lsls	r3, r3, #8
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4313      	orrs	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	e000      	b.n	800349a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003498:	2302      	movs	r3, #2
  }
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b6:	6013      	str	r3, [r2, #0]
}
 80034b8:	bf00      	nop
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40007000 	.word	0x40007000

080034c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034cc:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40007000 	.word	0x40007000

080034e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f2:	d130      	bne.n	8003556 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034f4:	4b23      	ldr	r3, [pc, #140]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003500:	d038      	beq.n	8003574 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003502:	4b20      	ldr	r3, [pc, #128]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800350a:	4a1e      	ldr	r2, [pc, #120]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003510:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003512:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2232      	movs	r2, #50	; 0x32
 8003518:	fb02 f303 	mul.w	r3, r2, r3
 800351c:	4a1b      	ldr	r2, [pc, #108]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	0c9b      	lsrs	r3, r3, #18
 8003524:	3301      	adds	r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003528:	e002      	b.n	8003530 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3b01      	subs	r3, #1
 800352e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003530:	4b14      	ldr	r3, [pc, #80]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353c:	d102      	bne.n	8003544 <HAL_PWREx_ControlVoltageScaling+0x60>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f2      	bne.n	800352a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003544:	4b0f      	ldr	r3, [pc, #60]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003550:	d110      	bne.n	8003574 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e00f      	b.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003556:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800355e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003562:	d007      	beq.n	8003574 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003564:	4b07      	ldr	r3, [pc, #28]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800356c:	4a05      	ldr	r2, [pc, #20]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800356e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003572:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40007000 	.word	0x40007000
 8003588:	20000004 	.word	0x20000004
 800358c:	431bde83 	.word	0x431bde83

08003590 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	f000 bc4f 	b.w	8003e42 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a4:	4b97      	ldr	r3, [pc, #604]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035ae:	4b95      	ldr	r3, [pc, #596]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 80e6 	beq.w	8003792 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d007      	beq.n	80035dc <HAL_RCC_OscConfig+0x4c>
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	2b0c      	cmp	r3, #12
 80035d0:	f040 808d 	bne.w	80036ee <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	f040 8089 	bne.w	80036ee <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035dc:	4b89      	ldr	r3, [pc, #548]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d006      	beq.n	80035f6 <HAL_RCC_OscConfig+0x66>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d102      	bne.n	80035f6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f000 bc26 	b.w	8003e42 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035fa:	4b82      	ldr	r3, [pc, #520]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d004      	beq.n	8003610 <HAL_RCC_OscConfig+0x80>
 8003606:	4b7f      	ldr	r3, [pc, #508]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800360e:	e005      	b.n	800361c <HAL_RCC_OscConfig+0x8c>
 8003610:	4b7c      	ldr	r3, [pc, #496]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 8003612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800361c:	4293      	cmp	r3, r2
 800361e:	d224      	bcs.n	800366a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fdd9 	bl	80041dc <RCC_SetFlashLatencyFromMSIRange>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	f000 bc06 	b.w	8003e42 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003636:	4b73      	ldr	r3, [pc, #460]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a72      	ldr	r2, [pc, #456]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 800363c:	f043 0308 	orr.w	r3, r3, #8
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	4b70      	ldr	r3, [pc, #448]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	496d      	ldr	r1, [pc, #436]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 8003650:	4313      	orrs	r3, r2
 8003652:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003654:	4b6b      	ldr	r3, [pc, #428]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	4968      	ldr	r1, [pc, #416]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]
 8003668:	e025      	b.n	80036b6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800366a:	4b66      	ldr	r3, [pc, #408]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a65      	ldr	r2, [pc, #404]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 8003670:	f043 0308 	orr.w	r3, r3, #8
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	4b63      	ldr	r3, [pc, #396]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	4960      	ldr	r1, [pc, #384]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003688:	4b5e      	ldr	r3, [pc, #376]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	495b      	ldr	r1, [pc, #364]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 fd98 	bl	80041dc <RCC_SetFlashLatencyFromMSIRange>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e3c5      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036b6:	f000 fccd 	bl	8004054 <HAL_RCC_GetSysClockFreq>
 80036ba:	4602      	mov	r2, r0
 80036bc:	4b51      	ldr	r3, [pc, #324]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	4950      	ldr	r1, [pc, #320]	; (8003808 <HAL_RCC_OscConfig+0x278>)
 80036c8:	5ccb      	ldrb	r3, [r1, r3]
 80036ca:	f003 031f 	and.w	r3, r3, #31
 80036ce:	fa22 f303 	lsr.w	r3, r2, r3
 80036d2:	4a4e      	ldr	r2, [pc, #312]	; (800380c <HAL_RCC_OscConfig+0x27c>)
 80036d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036d6:	4b4e      	ldr	r3, [pc, #312]	; (8003810 <HAL_RCC_OscConfig+0x280>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fe fa86 	bl	8001bec <HAL_InitTick>
 80036e0:	4603      	mov	r3, r0
 80036e2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d052      	beq.n	8003790 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
 80036ec:	e3a9      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d032      	beq.n	800375c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036f6:	4b43      	ldr	r3, [pc, #268]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a42      	ldr	r2, [pc, #264]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003702:	f7fe fac3 	bl	8001c8c <HAL_GetTick>
 8003706:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800370a:	f7fe fabf 	bl	8001c8c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e392      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800371c:	4b39      	ldr	r3, [pc, #228]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003728:	4b36      	ldr	r3, [pc, #216]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a35      	ldr	r2, [pc, #212]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 800372e:	f043 0308 	orr.w	r3, r3, #8
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	4b33      	ldr	r3, [pc, #204]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	4930      	ldr	r1, [pc, #192]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003746:	4b2f      	ldr	r3, [pc, #188]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	492b      	ldr	r1, [pc, #172]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 8003756:	4313      	orrs	r3, r2
 8003758:	604b      	str	r3, [r1, #4]
 800375a:	e01a      	b.n	8003792 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800375c:	4b29      	ldr	r3, [pc, #164]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a28      	ldr	r2, [pc, #160]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003768:	f7fe fa90 	bl	8001c8c <HAL_GetTick>
 800376c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003770:	f7fe fa8c 	bl	8001c8c <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e35f      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003782:	4b20      	ldr	r3, [pc, #128]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x1e0>
 800378e:	e000      	b.n	8003792 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003790:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d073      	beq.n	8003886 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_OscConfig+0x220>
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	2b0c      	cmp	r3, #12
 80037a8:	d10e      	bne.n	80037c8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d10b      	bne.n	80037c8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b0:	4b14      	ldr	r3, [pc, #80]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d063      	beq.n	8003884 <HAL_RCC_OscConfig+0x2f4>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d15f      	bne.n	8003884 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e33c      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d0:	d106      	bne.n	80037e0 <HAL_RCC_OscConfig+0x250>
 80037d2:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a0b      	ldr	r2, [pc, #44]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e025      	b.n	800382c <HAL_RCC_OscConfig+0x29c>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037e8:	d114      	bne.n	8003814 <HAL_RCC_OscConfig+0x284>
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a05      	ldr	r2, [pc, #20]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 80037f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	4b03      	ldr	r3, [pc, #12]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a02      	ldr	r2, [pc, #8]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 80037fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e013      	b.n	800382c <HAL_RCC_OscConfig+0x29c>
 8003804:	40021000 	.word	0x40021000
 8003808:	08008768 	.word	0x08008768
 800380c:	20000004 	.word	0x20000004
 8003810:	20000008 	.word	0x20000008
 8003814:	4b8f      	ldr	r3, [pc, #572]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a8e      	ldr	r2, [pc, #568]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 800381a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b8c      	ldr	r3, [pc, #560]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a8b      	ldr	r2, [pc, #556]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d013      	beq.n	800385c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fe fa2a 	bl	8001c8c <HAL_GetTick>
 8003838:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383c:	f7fe fa26 	bl	8001c8c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	; 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e2f9      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800384e:	4b81      	ldr	r3, [pc, #516]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0x2ac>
 800385a:	e014      	b.n	8003886 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe fa16 	bl	8001c8c <HAL_GetTick>
 8003860:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003864:	f7fe fa12 	bl	8001c8c <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	; 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e2e5      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003876:	4b77      	ldr	r3, [pc, #476]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x2d4>
 8003882:	e000      	b.n	8003886 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d060      	beq.n	8003954 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	2b04      	cmp	r3, #4
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_OscConfig+0x314>
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	2b0c      	cmp	r3, #12
 800389c:	d119      	bne.n	80038d2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d116      	bne.n	80038d2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a4:	4b6b      	ldr	r3, [pc, #428]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_OscConfig+0x32c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e2c2      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038bc:	4b65      	ldr	r3, [pc, #404]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	061b      	lsls	r3, r3, #24
 80038ca:	4962      	ldr	r1, [pc, #392]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d0:	e040      	b.n	8003954 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d023      	beq.n	8003922 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038da:	4b5e      	ldr	r3, [pc, #376]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a5d      	ldr	r2, [pc, #372]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80038e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e6:	f7fe f9d1 	bl	8001c8c <HAL_GetTick>
 80038ea:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ee:	f7fe f9cd 	bl	8001c8c <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e2a0      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003900:	4b54      	ldr	r3, [pc, #336]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390c:	4b51      	ldr	r3, [pc, #324]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	061b      	lsls	r3, r3, #24
 800391a:	494e      	ldr	r1, [pc, #312]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]
 8003920:	e018      	b.n	8003954 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003922:	4b4c      	ldr	r3, [pc, #304]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a4b      	ldr	r2, [pc, #300]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800392c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7fe f9ad 	bl	8001c8c <HAL_GetTick>
 8003932:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003936:	f7fe f9a9 	bl	8001c8c <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e27c      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003948:	4b42      	ldr	r3, [pc, #264]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f0      	bne.n	8003936 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8082 	beq.w	8003a66 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d05f      	beq.n	8003a2a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800396a:	4b3a      	ldr	r3, [pc, #232]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 800396c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003970:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	429a      	cmp	r2, r3
 800397e:	d037      	beq.n	80039f0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d006      	beq.n	8003998 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e254      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01b      	beq.n	80039da <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80039a2:	4b2c      	ldr	r3, [pc, #176]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80039a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a8:	4a2a      	ldr	r2, [pc, #168]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039b2:	f7fe f96b 	bl	8001c8c <HAL_GetTick>
 80039b6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ba:	f7fe f967 	bl	8001c8c <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b11      	cmp	r3, #17
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e23a      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039cc:	4b21      	ldr	r3, [pc, #132]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80039ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1ef      	bne.n	80039ba <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80039da:	4b1e      	ldr	r3, [pc, #120]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e0:	f023 0210 	bic.w	r2, r3, #16
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	491a      	ldr	r1, [pc, #104]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f0:	4b18      	ldr	r3, [pc, #96]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80039f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039f6:	4a17      	ldr	r2, [pc, #92]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7fe f944 	bl	8001c8c <HAL_GetTick>
 8003a04:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a08:	f7fe f940 	bl	8001c8c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b11      	cmp	r3, #17
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e213      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a1a:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0ef      	beq.n	8003a08 <HAL_RCC_OscConfig+0x478>
 8003a28:	e01d      	b.n	8003a66 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a30:	4a08      	ldr	r2, [pc, #32]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003a32:	f023 0301 	bic.w	r3, r3, #1
 8003a36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3a:	f7fe f927 	bl	8001c8c <HAL_GetTick>
 8003a3e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a40:	e00a      	b.n	8003a58 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a42:	f7fe f923 	bl	8001c8c <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b11      	cmp	r3, #17
 8003a4e:	d903      	bls.n	8003a58 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e1f6      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
 8003a54:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a58:	4ba9      	ldr	r3, [pc, #676]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1ed      	bne.n	8003a42 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80bd 	beq.w	8003bee <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a74:	2300      	movs	r3, #0
 8003a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a7a:	4ba1      	ldr	r3, [pc, #644]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10e      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a86:	4b9e      	ldr	r3, [pc, #632]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8a:	4a9d      	ldr	r2, [pc, #628]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a90:	6593      	str	r3, [r2, #88]	; 0x58
 8003a92:	4b9b      	ldr	r3, [pc, #620]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa4:	4b97      	ldr	r3, [pc, #604]	; (8003d04 <HAL_RCC_OscConfig+0x774>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d118      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ab0:	4b94      	ldr	r3, [pc, #592]	; (8003d04 <HAL_RCC_OscConfig+0x774>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a93      	ldr	r2, [pc, #588]	; (8003d04 <HAL_RCC_OscConfig+0x774>)
 8003ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003abc:	f7fe f8e6 	bl	8001c8c <HAL_GetTick>
 8003ac0:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac4:	f7fe f8e2 	bl	8001c8c <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e1b5      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad6:	4b8b      	ldr	r3, [pc, #556]	; (8003d04 <HAL_RCC_OscConfig+0x774>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d02c      	beq.n	8003b48 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003aee:	4b84      	ldr	r3, [pc, #528]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b00:	497f      	ldr	r1, [pc, #508]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d010      	beq.n	8003b36 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b14:	4b7a      	ldr	r3, [pc, #488]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	4a79      	ldr	r2, [pc, #484]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003b1c:	f043 0304 	orr.w	r3, r3, #4
 8003b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b24:	4b76      	ldr	r3, [pc, #472]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2a:	4a75      	ldr	r2, [pc, #468]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b34:	e018      	b.n	8003b68 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b36:	4b72      	ldr	r3, [pc, #456]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3c:	4a70      	ldr	r2, [pc, #448]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b46:	e00f      	b.n	8003b68 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b48:	4b6d      	ldr	r3, [pc, #436]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	4a6c      	ldr	r2, [pc, #432]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b58:	4b69      	ldr	r3, [pc, #420]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	4a68      	ldr	r2, [pc, #416]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003b60:	f023 0304 	bic.w	r3, r3, #4
 8003b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d016      	beq.n	8003b9e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fe f88c 	bl	8001c8c <HAL_GetTick>
 8003b74:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b76:	e00a      	b.n	8003b8e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b78:	f7fe f888 	bl	8001c8c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e159      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8e:	4b5c      	ldr	r3, [pc, #368]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0ed      	beq.n	8003b78 <HAL_RCC_OscConfig+0x5e8>
 8003b9c:	e01d      	b.n	8003bda <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9e:	f7fe f875 	bl	8001c8c <HAL_GetTick>
 8003ba2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba6:	f7fe f871 	bl	8001c8c <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e142      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bbc:	4b50      	ldr	r3, [pc, #320]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1ed      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003bca:	4b4d      	ldr	r3, [pc, #308]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd0:	4a4b      	ldr	r2, [pc, #300]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d105      	bne.n	8003bee <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be2:	4b47      	ldr	r3, [pc, #284]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be6:	4a46      	ldr	r2, [pc, #280]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d03c      	beq.n	8003c74 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d01c      	beq.n	8003c3c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c02:	4b3f      	ldr	r3, [pc, #252]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003c04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c08:	4a3d      	ldr	r2, [pc, #244]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c12:	f7fe f83b 	bl	8001c8c <HAL_GetTick>
 8003c16:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c1a:	f7fe f837 	bl	8001c8c <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e10a      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c2c:	4b34      	ldr	r3, [pc, #208]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003c2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0ef      	beq.n	8003c1a <HAL_RCC_OscConfig+0x68a>
 8003c3a:	e01b      	b.n	8003c74 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c3c:	4b30      	ldr	r3, [pc, #192]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003c3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c42:	4a2f      	ldr	r2, [pc, #188]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4c:	f7fe f81e 	bl	8001c8c <HAL_GetTick>
 8003c50:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c54:	f7fe f81a 	bl	8001c8c <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e0ed      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c66:	4b26      	ldr	r3, [pc, #152]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1ef      	bne.n	8003c54 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80e1 	beq.w	8003e40 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	f040 80b5 	bne.w	8003df2 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c88:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	f003 0203 	and.w	r2, r3, #3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d124      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d11b      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d113      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc8:	085b      	lsrs	r3, r3, #1
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d109      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	085b      	lsrs	r3, r3, #1
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d05f      	beq.n	8003da6 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	2b0c      	cmp	r3, #12
 8003cea:	d05a      	beq.n	8003da2 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003cec:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a03      	ldr	r2, [pc, #12]	; (8003d00 <HAL_RCC_OscConfig+0x770>)
 8003cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cf8:	f7fd ffc8 	bl	8001c8c <HAL_GetTick>
 8003cfc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cfe:	e00c      	b.n	8003d1a <HAL_RCC_OscConfig+0x78a>
 8003d00:	40021000 	.word	0x40021000
 8003d04:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d08:	f7fd ffc0 	bl	8001c8c <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e093      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d1a:	4b4c      	ldr	r3, [pc, #304]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d26:	4b49      	ldr	r3, [pc, #292]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	4b49      	ldr	r3, [pc, #292]	; (8003e50 <HAL_RCC_OscConfig+0x8c0>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d36:	3a01      	subs	r2, #1
 8003d38:	0112      	lsls	r2, r2, #4
 8003d3a:	4311      	orrs	r1, r2
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d40:	0212      	lsls	r2, r2, #8
 8003d42:	4311      	orrs	r1, r2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d48:	0852      	lsrs	r2, r2, #1
 8003d4a:	3a01      	subs	r2, #1
 8003d4c:	0552      	lsls	r2, r2, #21
 8003d4e:	4311      	orrs	r1, r2
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d54:	0852      	lsrs	r2, r2, #1
 8003d56:	3a01      	subs	r2, #1
 8003d58:	0652      	lsls	r2, r2, #25
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	493b      	ldr	r1, [pc, #236]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d62:	4b3a      	ldr	r3, [pc, #232]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a39      	ldr	r2, [pc, #228]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003d68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d6e:	4b37      	ldr	r3, [pc, #220]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	4a36      	ldr	r2, [pc, #216]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003d74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d78:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d7a:	f7fd ff87 	bl	8001c8c <HAL_GetTick>
 8003d7e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d82:	f7fd ff83 	bl	8001c8c <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e056      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d94:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003da0:	e04e      	b.n	8003e40 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e04d      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da6:	4b29      	ldr	r3, [pc, #164]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d146      	bne.n	8003e40 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003db2:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a25      	ldr	r2, [pc, #148]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003db8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dbc:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dbe:	4b23      	ldr	r3, [pc, #140]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003dc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dc8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dca:	f7fd ff5f 	bl	8001c8c <HAL_GetTick>
 8003dce:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd2:	f7fd ff5b 	bl	8001c8c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e02e      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003de4:	4b19      	ldr	r3, [pc, #100]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x842>
 8003df0:	e026      	b.n	8003e40 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	2b0c      	cmp	r3, #12
 8003df6:	d021      	beq.n	8003e3c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df8:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a13      	ldr	r2, [pc, #76]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd ff42 	bl	8001c8c <HAL_GetTick>
 8003e08:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0c:	f7fd ff3e 	bl	8001c8c <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e011      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003e2a:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	4a07      	ldr	r2, [pc, #28]	; (8003e4c <HAL_RCC_OscConfig+0x8bc>)
 8003e30:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003e34:	f023 0303 	bic.w	r3, r3, #3
 8003e38:	60d3      	str	r3, [r2, #12]
 8003e3a:	e001      	b.n	8003e40 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3728      	adds	r7, #40	; 0x28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	f99f808c 	.word	0xf99f808c

08003e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0e7      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e68:	4b75      	ldr	r3, [pc, #468]	; (8004040 <HAL_RCC_ClockConfig+0x1ec>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d910      	bls.n	8003e98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e76:	4b72      	ldr	r3, [pc, #456]	; (8004040 <HAL_RCC_ClockConfig+0x1ec>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f023 0207 	bic.w	r2, r3, #7
 8003e7e:	4970      	ldr	r1, [pc, #448]	; (8004040 <HAL_RCC_ClockConfig+0x1ec>)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e86:	4b6e      	ldr	r3, [pc, #440]	; (8004040 <HAL_RCC_ClockConfig+0x1ec>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0cf      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d010      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	4b66      	ldr	r3, [pc, #408]	; (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d908      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb4:	4b63      	ldr	r3, [pc, #396]	; (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4960      	ldr	r1, [pc, #384]	; (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d04c      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d107      	bne.n	8003eea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eda:	4b5a      	ldr	r3, [pc, #360]	; (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d121      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e0a6      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d107      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ef2:	4b54      	ldr	r3, [pc, #336]	; (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d115      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e09a      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d107      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f0a:	4b4e      	ldr	r3, [pc, #312]	; (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e08e      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f1a:	4b4a      	ldr	r3, [pc, #296]	; (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e086      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f2a:	4b46      	ldr	r3, [pc, #280]	; (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f023 0203 	bic.w	r2, r3, #3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4943      	ldr	r1, [pc, #268]	; (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f3c:	f7fd fea6 	bl	8001c8c <HAL_GetTick>
 8003f40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f42:	e00a      	b.n	8003f5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f44:	f7fd fea2 	bl	8001c8c <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e06e      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5a:	4b3a      	ldr	r3, [pc, #232]	; (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 020c 	and.w	r2, r3, #12
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d1eb      	bne.n	8003f44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d010      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	4b31      	ldr	r3, [pc, #196]	; (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d208      	bcs.n	8003f9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f88:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	492b      	ldr	r1, [pc, #172]	; (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f9a:	4b29      	ldr	r3, [pc, #164]	; (8004040 <HAL_RCC_ClockConfig+0x1ec>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d210      	bcs.n	8003fca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa8:	4b25      	ldr	r3, [pc, #148]	; (8004040 <HAL_RCC_ClockConfig+0x1ec>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f023 0207 	bic.w	r2, r3, #7
 8003fb0:	4923      	ldr	r1, [pc, #140]	; (8004040 <HAL_RCC_ClockConfig+0x1ec>)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb8:	4b21      	ldr	r3, [pc, #132]	; (8004040 <HAL_RCC_ClockConfig+0x1ec>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d001      	beq.n	8003fca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e036      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d008      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd6:	4b1b      	ldr	r3, [pc, #108]	; (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	4918      	ldr	r1, [pc, #96]	; (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d009      	beq.n	8004008 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ff4:	4b13      	ldr	r3, [pc, #76]	; (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	4910      	ldr	r1, [pc, #64]	; (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8004004:	4313      	orrs	r3, r2
 8004006:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004008:	f000 f824 	bl	8004054 <HAL_RCC_GetSysClockFreq>
 800400c:	4602      	mov	r2, r0
 800400e:	4b0d      	ldr	r3, [pc, #52]	; (8004044 <HAL_RCC_ClockConfig+0x1f0>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	091b      	lsrs	r3, r3, #4
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	490b      	ldr	r1, [pc, #44]	; (8004048 <HAL_RCC_ClockConfig+0x1f4>)
 800401a:	5ccb      	ldrb	r3, [r1, r3]
 800401c:	f003 031f 	and.w	r3, r3, #31
 8004020:	fa22 f303 	lsr.w	r3, r2, r3
 8004024:	4a09      	ldr	r2, [pc, #36]	; (800404c <HAL_RCC_ClockConfig+0x1f8>)
 8004026:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004028:	4b09      	ldr	r3, [pc, #36]	; (8004050 <HAL_RCC_ClockConfig+0x1fc>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7fd fddd 	bl	8001bec <HAL_InitTick>
 8004032:	4603      	mov	r3, r0
 8004034:	72fb      	strb	r3, [r7, #11]

  return status;
 8004036:	7afb      	ldrb	r3, [r7, #11]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40022000 	.word	0x40022000
 8004044:	40021000 	.word	0x40021000
 8004048:	08008768 	.word	0x08008768
 800404c:	20000004 	.word	0x20000004
 8004050:	20000008 	.word	0x20000008

08004054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004054:	b480      	push	{r7}
 8004056:	b089      	sub	sp, #36	; 0x24
 8004058:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	2300      	movs	r3, #0
 8004060:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004062:	4b3e      	ldr	r3, [pc, #248]	; (800415c <HAL_RCC_GetSysClockFreq+0x108>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800406c:	4b3b      	ldr	r3, [pc, #236]	; (800415c <HAL_RCC_GetSysClockFreq+0x108>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_GetSysClockFreq+0x34>
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b0c      	cmp	r3, #12
 8004080:	d121      	bne.n	80040c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d11e      	bne.n	80040c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004088:	4b34      	ldr	r3, [pc, #208]	; (800415c <HAL_RCC_GetSysClockFreq+0x108>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b00      	cmp	r3, #0
 8004092:	d107      	bne.n	80040a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004094:	4b31      	ldr	r3, [pc, #196]	; (800415c <HAL_RCC_GetSysClockFreq+0x108>)
 8004096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800409a:	0a1b      	lsrs	r3, r3, #8
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	e005      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040a4:	4b2d      	ldr	r3, [pc, #180]	; (800415c <HAL_RCC_GetSysClockFreq+0x108>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040b0:	4a2b      	ldr	r2, [pc, #172]	; (8004160 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10d      	bne.n	80040dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040c4:	e00a      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d102      	bne.n	80040d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <HAL_RCC_GetSysClockFreq+0x110>)
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	e004      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d101      	bne.n	80040dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040d8:	4b23      	ldr	r3, [pc, #140]	; (8004168 <HAL_RCC_GetSysClockFreq+0x114>)
 80040da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	2b0c      	cmp	r3, #12
 80040e0:	d134      	bne.n	800414c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040e2:	4b1e      	ldr	r3, [pc, #120]	; (800415c <HAL_RCC_GetSysClockFreq+0x108>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d003      	beq.n	80040fa <HAL_RCC_GetSysClockFreq+0xa6>
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d003      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0xac>
 80040f8:	e005      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040fa:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <HAL_RCC_GetSysClockFreq+0x110>)
 80040fc:	617b      	str	r3, [r7, #20]
      break;
 80040fe:	e005      	b.n	800410c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004100:	4b19      	ldr	r3, [pc, #100]	; (8004168 <HAL_RCC_GetSysClockFreq+0x114>)
 8004102:	617b      	str	r3, [r7, #20]
      break;
 8004104:	e002      	b.n	800410c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	617b      	str	r3, [r7, #20]
      break;
 800410a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800410c:	4b13      	ldr	r3, [pc, #76]	; (800415c <HAL_RCC_GetSysClockFreq+0x108>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	091b      	lsrs	r3, r3, #4
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	3301      	adds	r3, #1
 8004118:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800411a:	4b10      	ldr	r3, [pc, #64]	; (800415c <HAL_RCC_GetSysClockFreq+0x108>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	0a1b      	lsrs	r3, r3, #8
 8004120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	fb03 f202 	mul.w	r2, r3, r2
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004132:	4b0a      	ldr	r3, [pc, #40]	; (800415c <HAL_RCC_GetSysClockFreq+0x108>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	0e5b      	lsrs	r3, r3, #25
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	3301      	adds	r3, #1
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	fbb2 f3f3 	udiv	r3, r2, r3
 800414a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800414c:	69bb      	ldr	r3, [r7, #24]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3724      	adds	r7, #36	; 0x24
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40021000 	.word	0x40021000
 8004160:	08008780 	.word	0x08008780
 8004164:	00f42400 	.word	0x00f42400
 8004168:	007a1200 	.word	0x007a1200

0800416c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004170:	4b03      	ldr	r3, [pc, #12]	; (8004180 <HAL_RCC_GetHCLKFreq+0x14>)
 8004172:	681b      	ldr	r3, [r3, #0]
}
 8004174:	4618      	mov	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	20000004 	.word	0x20000004

08004184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004188:	f7ff fff0 	bl	800416c <HAL_RCC_GetHCLKFreq>
 800418c:	4602      	mov	r2, r0
 800418e:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	4904      	ldr	r1, [pc, #16]	; (80041ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800419a:	5ccb      	ldrb	r3, [r1, r3]
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40021000 	.word	0x40021000
 80041ac:	08008778 	.word	0x08008778

080041b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041b4:	f7ff ffda 	bl	800416c <HAL_RCC_GetHCLKFreq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	0adb      	lsrs	r3, r3, #11
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	4904      	ldr	r1, [pc, #16]	; (80041d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041c6:	5ccb      	ldrb	r3, [r1, r3]
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40021000 	.word	0x40021000
 80041d8:	08008778 	.word	0x08008778

080041dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041e4:	2300      	movs	r3, #0
 80041e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041e8:	4b2a      	ldr	r3, [pc, #168]	; (8004294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041f4:	f7ff f968 	bl	80034c8 <HAL_PWREx_GetVoltageRange>
 80041f8:	6178      	str	r0, [r7, #20]
 80041fa:	e014      	b.n	8004226 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041fc:	4b25      	ldr	r3, [pc, #148]	; (8004294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004200:	4a24      	ldr	r2, [pc, #144]	; (8004294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004206:	6593      	str	r3, [r2, #88]	; 0x58
 8004208:	4b22      	ldr	r3, [pc, #136]	; (8004294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800420a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004214:	f7ff f958 	bl	80034c8 <HAL_PWREx_GetVoltageRange>
 8004218:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800421a:	4b1e      	ldr	r3, [pc, #120]	; (8004294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800421c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421e:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004224:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800422c:	d10b      	bne.n	8004246 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b80      	cmp	r3, #128	; 0x80
 8004232:	d919      	bls.n	8004268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2ba0      	cmp	r3, #160	; 0xa0
 8004238:	d902      	bls.n	8004240 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800423a:	2302      	movs	r3, #2
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	e013      	b.n	8004268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004240:	2301      	movs	r3, #1
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	e010      	b.n	8004268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b80      	cmp	r3, #128	; 0x80
 800424a:	d902      	bls.n	8004252 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800424c:	2303      	movs	r3, #3
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	e00a      	b.n	8004268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b80      	cmp	r3, #128	; 0x80
 8004256:	d102      	bne.n	800425e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004258:	2302      	movs	r3, #2
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	e004      	b.n	8004268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b70      	cmp	r3, #112	; 0x70
 8004262:	d101      	bne.n	8004268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004264:	2301      	movs	r3, #1
 8004266:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004268:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f023 0207 	bic.w	r2, r3, #7
 8004270:	4909      	ldr	r1, [pc, #36]	; (8004298 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004278:	4b07      	ldr	r3, [pc, #28]	; (8004298 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	429a      	cmp	r2, r3
 8004284:	d001      	beq.n	800428a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000
 8004298:	40022000 	.word	0x40022000

0800429c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042a4:	2300      	movs	r3, #0
 80042a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042a8:	2300      	movs	r3, #0
 80042aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 809e 	beq.w	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ba:	2300      	movs	r3, #0
 80042bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042be:	4b46      	ldr	r3, [pc, #280]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80042c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x32>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80042ce:	2300      	movs	r3, #0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00d      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d4:	4b40      	ldr	r3, [pc, #256]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80042d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d8:	4a3f      	ldr	r2, [pc, #252]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80042da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042de:	6593      	str	r3, [r2, #88]	; 0x58
 80042e0:	4b3d      	ldr	r3, [pc, #244]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80042e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ec:	2301      	movs	r3, #1
 80042ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042f0:	4b3a      	ldr	r3, [pc, #232]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a39      	ldr	r2, [pc, #228]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80042f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042fc:	f7fd fcc6 	bl	8001c8c <HAL_GetTick>
 8004300:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004302:	e009      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004304:	f7fd fcc2 	bl	8001c8c <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d902      	bls.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	74fb      	strb	r3, [r7, #19]
        break;
 8004316:	e005      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004318:	4b30      	ldr	r3, [pc, #192]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0ef      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004324:	7cfb      	ldrb	r3, [r7, #19]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d15a      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800432a:	4b2b      	ldr	r3, [pc, #172]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800432c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004334:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01e      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	429a      	cmp	r2, r3
 8004344:	d019      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004346:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004350:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004352:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004358:	4a1f      	ldr	r2, [pc, #124]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800435a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004362:	4b1d      	ldr	r3, [pc, #116]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004368:	4a1b      	ldr	r2, [pc, #108]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800436a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800436e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004372:	4a19      	ldr	r2, [pc, #100]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d016      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fd fc82 	bl	8001c8c <HAL_GetTick>
 8004388:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438a:	e00b      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438c:	f7fd fc7e 	bl	8001c8c <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	f241 3288 	movw	r2, #5000	; 0x1388
 800439a:	4293      	cmp	r3, r2
 800439c:	d902      	bls.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	74fb      	strb	r3, [r7, #19]
            break;
 80043a2:	e006      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0ec      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80043b2:	7cfb      	ldrb	r3, [r7, #19]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10b      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043b8:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	4904      	ldr	r1, [pc, #16]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043ce:	e009      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043d0:	7cfb      	ldrb	r3, [r7, #19]
 80043d2:	74bb      	strb	r3, [r7, #18]
 80043d4:	e006      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e0:	7cfb      	ldrb	r3, [r7, #19]
 80043e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043e4:	7c7b      	ldrb	r3, [r7, #17]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d105      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ea:	4b6e      	ldr	r3, [pc, #440]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ee:	4a6d      	ldr	r2, [pc, #436]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004402:	4b68      	ldr	r3, [pc, #416]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004408:	f023 0203 	bic.w	r2, r3, #3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4964      	ldr	r1, [pc, #400]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004424:	4b5f      	ldr	r3, [pc, #380]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f023 020c 	bic.w	r2, r3, #12
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	495c      	ldr	r1, [pc, #368]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004446:	4b57      	ldr	r3, [pc, #348]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4953      	ldr	r1, [pc, #332]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004468:	4b4e      	ldr	r3, [pc, #312]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	494b      	ldr	r1, [pc, #300]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800448a:	4b46      	ldr	r3, [pc, #280]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	4942      	ldr	r1, [pc, #264]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044ac:	4b3d      	ldr	r3, [pc, #244]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	493a      	ldr	r1, [pc, #232]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044ce:	4b35      	ldr	r3, [pc, #212]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	4931      	ldr	r1, [pc, #196]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044f0:	4b2c      	ldr	r3, [pc, #176]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	4929      	ldr	r1, [pc, #164]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004512:	4b24      	ldr	r3, [pc, #144]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	4920      	ldr	r1, [pc, #128]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d015      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004534:	4b1b      	ldr	r3, [pc, #108]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004542:	4918      	ldr	r1, [pc, #96]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004552:	d105      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004554:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4a12      	ldr	r2, [pc, #72]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800455a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800455e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d015      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800456c:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	490a      	ldr	r1, [pc, #40]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004586:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800458a:	d105      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	4a04      	ldr	r2, [pc, #16]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004596:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004598:	7cbb      	ldrb	r3, [r7, #18]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40021000 	.word	0x40021000

080045a8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a04      	ldr	r2, [pc, #16]	; (80045c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80045b2:	f043 0304 	orr.w	r3, r3, #4
 80045b6:	6013      	str	r3, [r2, #0]
}
 80045b8:	bf00      	nop
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000

080045c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	; 0x28
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	4613      	mov	r3, r2
 80045d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d178      	bne.n	80046d2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_UART_Transmit+0x24>
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e071      	b.n	80046d4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2221      	movs	r2, #33	; 0x21
 80045fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045fe:	f7fd fb45 	bl	8001c8c <HAL_GetTick>
 8004602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	88fa      	ldrh	r2, [r7, #6]
 8004608:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	88fa      	ldrh	r2, [r7, #6]
 8004610:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461c:	d108      	bne.n	8004630 <HAL_UART_Transmit+0x68>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d104      	bne.n	8004630 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	e003      	b.n	8004638 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004634:	2300      	movs	r3, #0
 8004636:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004638:	e030      	b.n	800469c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2200      	movs	r2, #0
 8004642:	2180      	movs	r1, #128	; 0x80
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 ff43 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d004      	beq.n	800465a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e03c      	b.n	80046d4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10b      	bne.n	8004678 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	881a      	ldrh	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800466c:	b292      	uxth	r2, r2
 800466e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	3302      	adds	r3, #2
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	e008      	b.n	800468a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	781a      	ldrb	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	b292      	uxth	r2, r2
 8004682:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	3301      	adds	r3, #1
 8004688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1c8      	bne.n	800463a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2200      	movs	r2, #0
 80046b0:	2140      	movs	r1, #64	; 0x40
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 ff0c 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d004      	beq.n	80046c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e005      	b.n	80046d4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	e000      	b.n	80046d4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80046d2:	2302      	movs	r3, #2
  }
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3720      	adds	r7, #32
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08a      	sub	sp, #40	; 0x28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d137      	bne.n	8004764 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <HAL_UART_Receive_IT+0x24>
 80046fa:	88fb      	ldrh	r3, [r7, #6]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e030      	b.n	8004766 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a18      	ldr	r2, [pc, #96]	; (8004770 <HAL_UART_Receive_IT+0x94>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d01f      	beq.n	8004754 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d018      	beq.n	8004754 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	e853 3f00 	ldrex	r3, [r3]
 800472e:	613b      	str	r3, [r7, #16]
   return(result);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	623b      	str	r3, [r7, #32]
 8004742:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	69f9      	ldr	r1, [r7, #28]
 8004746:	6a3a      	ldr	r2, [r7, #32]
 8004748:	e841 2300 	strex	r3, r2, [r1]
 800474c:	61bb      	str	r3, [r7, #24]
   return(result);
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e6      	bne.n	8004722 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004754:	88fb      	ldrh	r3, [r7, #6]
 8004756:	461a      	mov	r2, r3
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 ff20 	bl	80055a0 <UART_Start_Receive_IT>
 8004760:	4603      	mov	r3, r0
 8004762:	e000      	b.n	8004766 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004764:	2302      	movs	r3, #2
  }
}
 8004766:	4618      	mov	r0, r3
 8004768:	3728      	adds	r7, #40	; 0x28
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40008000 	.word	0x40008000

08004774 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b0ba      	sub	sp, #232	; 0xe8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800479a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800479e:	f640 030f 	movw	r3, #2063	; 0x80f
 80047a2:	4013      	ands	r3, r2
 80047a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80047a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d115      	bne.n	80047dc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00f      	beq.n	80047dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d009      	beq.n	80047dc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 82ae 	beq.w	8004d2e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	4798      	blx	r3
      }
      return;
 80047da:	e2a8      	b.n	8004d2e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80047dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 8117 	beq.w	8004a14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80047f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80047f6:	4b85      	ldr	r3, [pc, #532]	; (8004a0c <HAL_UART_IRQHandler+0x298>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 810a 	beq.w	8004a14 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d011      	beq.n	8004830 <HAL_UART_IRQHandler+0xbc>
 800480c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00b      	beq.n	8004830 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2201      	movs	r2, #1
 800481e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004826:	f043 0201 	orr.w	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d011      	beq.n	8004860 <HAL_UART_IRQHandler+0xec>
 800483c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00b      	beq.n	8004860 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2202      	movs	r2, #2
 800484e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004856:	f043 0204 	orr.w	r2, r3, #4
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d011      	beq.n	8004890 <HAL_UART_IRQHandler+0x11c>
 800486c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00b      	beq.n	8004890 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2204      	movs	r2, #4
 800487e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004886:	f043 0202 	orr.w	r2, r3, #2
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	d017      	beq.n	80048cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800489c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d105      	bne.n	80048b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80048a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00b      	beq.n	80048cc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2208      	movs	r2, #8
 80048ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c2:	f043 0208 	orr.w	r2, r3, #8
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d012      	beq.n	80048fe <HAL_UART_IRQHandler+0x18a>
 80048d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00c      	beq.n	80048fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f4:	f043 0220 	orr.w	r2, r3, #32
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8214 	beq.w	8004d32 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800490a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00d      	beq.n	8004932 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b00      	cmp	r3, #0
 8004920:	d007      	beq.n	8004932 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004938:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004946:	2b40      	cmp	r3, #64	; 0x40
 8004948:	d005      	beq.n	8004956 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800494a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800494e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004952:	2b00      	cmp	r3, #0
 8004954:	d04f      	beq.n	80049f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fee8 	bl	800572c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	2b40      	cmp	r3, #64	; 0x40
 8004968:	d141      	bne.n	80049ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3308      	adds	r3, #8
 8004970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004980:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3308      	adds	r3, #8
 8004992:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004996:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800499a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1d9      	bne.n	800496a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d013      	beq.n	80049e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c2:	4a13      	ldr	r2, [pc, #76]	; (8004a10 <HAL_UART_IRQHandler+0x29c>)
 80049c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fd fadd 	bl	8001f8a <HAL_DMA_Abort_IT>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d017      	beq.n	8004a06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049e0:	4610      	mov	r0, r2
 80049e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e4:	e00f      	b.n	8004a06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f9b8 	bl	8004d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ec:	e00b      	b.n	8004a06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f9b4 	bl	8004d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f4:	e007      	b.n	8004a06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f9b0 	bl	8004d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004a04:	e195      	b.n	8004d32 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a06:	bf00      	nop
    return;
 8004a08:	e193      	b.n	8004d32 <HAL_UART_IRQHandler+0x5be>
 8004a0a:	bf00      	nop
 8004a0c:	04000120 	.word	0x04000120
 8004a10:	080057f5 	.word	0x080057f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	f040 814e 	bne.w	8004cba <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 8147 	beq.w	8004cba <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 8140 	beq.w	8004cba <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2210      	movs	r2, #16
 8004a40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	f040 80b8 	bne.w	8004bc2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 8167 	beq.w	8004d36 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a72:	429a      	cmp	r2, r3
 8004a74:	f080 815f 	bcs.w	8004d36 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0320 	and.w	r3, r3, #32
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f040 8086 	bne.w	8004ba0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004abe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ac2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004aca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1da      	bne.n	8004a94 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3308      	adds	r3, #8
 8004ae4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ae8:	e853 3f00 	ldrex	r3, [r3]
 8004aec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004af0:	f023 0301 	bic.w	r3, r3, #1
 8004af4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3308      	adds	r3, #8
 8004afe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e1      	bne.n	8004ade <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3308      	adds	r3, #8
 8004b20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3308      	adds	r3, #8
 8004b3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e3      	bne.n	8004b1a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b70:	f023 0310 	bic.w	r3, r3, #16
 8004b74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b82:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b84:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b8a:	e841 2300 	strex	r3, r2, [r1]
 8004b8e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1e4      	bne.n	8004b60 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fd f9b7 	bl	8001f0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	4619      	mov	r1, r3
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f8d8 	bl	8004d70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bc0:	e0b9      	b.n	8004d36 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 80ab 	beq.w	8004d3a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004be4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80a6 	beq.w	8004d3a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c10:	647b      	str	r3, [r7, #68]	; 0x44
 8004c12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e4      	bne.n	8004bee <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	623b      	str	r3, [r7, #32]
   return(result);
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3308      	adds	r3, #8
 8004c44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c48:	633a      	str	r2, [r7, #48]	; 0x30
 8004c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c50:	e841 2300 	strex	r3, r2, [r1]
 8004c54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e3      	bne.n	8004c24 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f023 0310 	bic.w	r3, r3, #16
 8004c84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c92:	61fb      	str	r3, [r7, #28]
 8004c94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	69b9      	ldr	r1, [r7, #24]
 8004c98:	69fa      	ldr	r2, [r7, #28]
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	617b      	str	r3, [r7, #20]
   return(result);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e4      	bne.n	8004c70 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f85c 	bl	8004d70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cb8:	e03f      	b.n	8004d3a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00e      	beq.n	8004ce4 <HAL_UART_IRQHandler+0x570>
 8004cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004cda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 ffec 	bl	8005cba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ce2:	e02d      	b.n	8004d40 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00e      	beq.n	8004d0e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01c      	beq.n	8004d3e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	4798      	blx	r3
    }
    return;
 8004d0c:	e017      	b.n	8004d3e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d012      	beq.n	8004d40 <HAL_UART_IRQHandler+0x5cc>
 8004d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00c      	beq.n	8004d40 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fd7a 	bl	8005820 <UART_EndTransmit_IT>
    return;
 8004d2c:	e008      	b.n	8004d40 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004d2e:	bf00      	nop
 8004d30:	e006      	b.n	8004d40 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004d32:	bf00      	nop
 8004d34:	e004      	b.n	8004d40 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004d36:	bf00      	nop
 8004d38:	e002      	b.n	8004d40 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004d3a:	bf00      	nop
 8004d3c:	e000      	b.n	8004d40 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004d3e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004d40:	37e8      	adds	r7, #232	; 0xe8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop

08004d48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d8c:	b08a      	sub	sp, #40	; 0x28
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	431a      	orrs	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	431a      	orrs	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	4b9e      	ldr	r3, [pc, #632]	; (8005030 <UART_SetConfig+0x2a8>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	6812      	ldr	r2, [r2, #0]
 8004dbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a93      	ldr	r2, [pc, #588]	; (8005034 <UART_SetConfig+0x2ac>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d004      	beq.n	8004df4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df0:	4313      	orrs	r3, r2
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e04:	430a      	orrs	r2, r1
 8004e06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a8a      	ldr	r2, [pc, #552]	; (8005038 <UART_SetConfig+0x2b0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d126      	bne.n	8004e60 <UART_SetConfig+0xd8>
 8004e12:	4b8a      	ldr	r3, [pc, #552]	; (800503c <UART_SetConfig+0x2b4>)
 8004e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e18:	f003 0303 	and.w	r3, r3, #3
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d81b      	bhi.n	8004e58 <UART_SetConfig+0xd0>
 8004e20:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <UART_SetConfig+0xa0>)
 8004e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e26:	bf00      	nop
 8004e28:	08004e39 	.word	0x08004e39
 8004e2c:	08004e49 	.word	0x08004e49
 8004e30:	08004e41 	.word	0x08004e41
 8004e34:	08004e51 	.word	0x08004e51
 8004e38:	2301      	movs	r3, #1
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3e:	e0ab      	b.n	8004f98 <UART_SetConfig+0x210>
 8004e40:	2302      	movs	r3, #2
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e46:	e0a7      	b.n	8004f98 <UART_SetConfig+0x210>
 8004e48:	2304      	movs	r3, #4
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4e:	e0a3      	b.n	8004f98 <UART_SetConfig+0x210>
 8004e50:	2308      	movs	r3, #8
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e56:	e09f      	b.n	8004f98 <UART_SetConfig+0x210>
 8004e58:	2310      	movs	r3, #16
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5e:	e09b      	b.n	8004f98 <UART_SetConfig+0x210>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a76      	ldr	r2, [pc, #472]	; (8005040 <UART_SetConfig+0x2b8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d138      	bne.n	8004edc <UART_SetConfig+0x154>
 8004e6a:	4b74      	ldr	r3, [pc, #464]	; (800503c <UART_SetConfig+0x2b4>)
 8004e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e70:	f003 030c 	and.w	r3, r3, #12
 8004e74:	2b0c      	cmp	r3, #12
 8004e76:	d82d      	bhi.n	8004ed4 <UART_SetConfig+0x14c>
 8004e78:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <UART_SetConfig+0xf8>)
 8004e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7e:	bf00      	nop
 8004e80:	08004eb5 	.word	0x08004eb5
 8004e84:	08004ed5 	.word	0x08004ed5
 8004e88:	08004ed5 	.word	0x08004ed5
 8004e8c:	08004ed5 	.word	0x08004ed5
 8004e90:	08004ec5 	.word	0x08004ec5
 8004e94:	08004ed5 	.word	0x08004ed5
 8004e98:	08004ed5 	.word	0x08004ed5
 8004e9c:	08004ed5 	.word	0x08004ed5
 8004ea0:	08004ebd 	.word	0x08004ebd
 8004ea4:	08004ed5 	.word	0x08004ed5
 8004ea8:	08004ed5 	.word	0x08004ed5
 8004eac:	08004ed5 	.word	0x08004ed5
 8004eb0:	08004ecd 	.word	0x08004ecd
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eba:	e06d      	b.n	8004f98 <UART_SetConfig+0x210>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ec2:	e069      	b.n	8004f98 <UART_SetConfig+0x210>
 8004ec4:	2304      	movs	r3, #4
 8004ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eca:	e065      	b.n	8004f98 <UART_SetConfig+0x210>
 8004ecc:	2308      	movs	r3, #8
 8004ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ed2:	e061      	b.n	8004f98 <UART_SetConfig+0x210>
 8004ed4:	2310      	movs	r3, #16
 8004ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eda:	e05d      	b.n	8004f98 <UART_SetConfig+0x210>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a58      	ldr	r2, [pc, #352]	; (8005044 <UART_SetConfig+0x2bc>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d125      	bne.n	8004f32 <UART_SetConfig+0x1aa>
 8004ee6:	4b55      	ldr	r3, [pc, #340]	; (800503c <UART_SetConfig+0x2b4>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ef0:	2b30      	cmp	r3, #48	; 0x30
 8004ef2:	d016      	beq.n	8004f22 <UART_SetConfig+0x19a>
 8004ef4:	2b30      	cmp	r3, #48	; 0x30
 8004ef6:	d818      	bhi.n	8004f2a <UART_SetConfig+0x1a2>
 8004ef8:	2b20      	cmp	r3, #32
 8004efa:	d00a      	beq.n	8004f12 <UART_SetConfig+0x18a>
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d814      	bhi.n	8004f2a <UART_SetConfig+0x1a2>
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <UART_SetConfig+0x182>
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d008      	beq.n	8004f1a <UART_SetConfig+0x192>
 8004f08:	e00f      	b.n	8004f2a <UART_SetConfig+0x1a2>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f10:	e042      	b.n	8004f98 <UART_SetConfig+0x210>
 8004f12:	2302      	movs	r3, #2
 8004f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f18:	e03e      	b.n	8004f98 <UART_SetConfig+0x210>
 8004f1a:	2304      	movs	r3, #4
 8004f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f20:	e03a      	b.n	8004f98 <UART_SetConfig+0x210>
 8004f22:	2308      	movs	r3, #8
 8004f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f28:	e036      	b.n	8004f98 <UART_SetConfig+0x210>
 8004f2a:	2310      	movs	r3, #16
 8004f2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f30:	e032      	b.n	8004f98 <UART_SetConfig+0x210>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a3f      	ldr	r2, [pc, #252]	; (8005034 <UART_SetConfig+0x2ac>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d12a      	bne.n	8004f92 <UART_SetConfig+0x20a>
 8004f3c:	4b3f      	ldr	r3, [pc, #252]	; (800503c <UART_SetConfig+0x2b4>)
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f42:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f4a:	d01a      	beq.n	8004f82 <UART_SetConfig+0x1fa>
 8004f4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f50:	d81b      	bhi.n	8004f8a <UART_SetConfig+0x202>
 8004f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f56:	d00c      	beq.n	8004f72 <UART_SetConfig+0x1ea>
 8004f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f5c:	d815      	bhi.n	8004f8a <UART_SetConfig+0x202>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <UART_SetConfig+0x1e2>
 8004f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f66:	d008      	beq.n	8004f7a <UART_SetConfig+0x1f2>
 8004f68:	e00f      	b.n	8004f8a <UART_SetConfig+0x202>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f70:	e012      	b.n	8004f98 <UART_SetConfig+0x210>
 8004f72:	2302      	movs	r3, #2
 8004f74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f78:	e00e      	b.n	8004f98 <UART_SetConfig+0x210>
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f80:	e00a      	b.n	8004f98 <UART_SetConfig+0x210>
 8004f82:	2308      	movs	r3, #8
 8004f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f88:	e006      	b.n	8004f98 <UART_SetConfig+0x210>
 8004f8a:	2310      	movs	r3, #16
 8004f8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f90:	e002      	b.n	8004f98 <UART_SetConfig+0x210>
 8004f92:	2310      	movs	r3, #16
 8004f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a25      	ldr	r2, [pc, #148]	; (8005034 <UART_SetConfig+0x2ac>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	f040 808a 	bne.w	80050b8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d824      	bhi.n	8004ff6 <UART_SetConfig+0x26e>
 8004fac:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <UART_SetConfig+0x22c>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08004fd9 	.word	0x08004fd9
 8004fb8:	08004ff7 	.word	0x08004ff7
 8004fbc:	08004fe1 	.word	0x08004fe1
 8004fc0:	08004ff7 	.word	0x08004ff7
 8004fc4:	08004fe7 	.word	0x08004fe7
 8004fc8:	08004ff7 	.word	0x08004ff7
 8004fcc:	08004ff7 	.word	0x08004ff7
 8004fd0:	08004ff7 	.word	0x08004ff7
 8004fd4:	08004fef 	.word	0x08004fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd8:	f7ff f8d4 	bl	8004184 <HAL_RCC_GetPCLK1Freq>
 8004fdc:	61f8      	str	r0, [r7, #28]
        break;
 8004fde:	e010      	b.n	8005002 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe0:	4b19      	ldr	r3, [pc, #100]	; (8005048 <UART_SetConfig+0x2c0>)
 8004fe2:	61fb      	str	r3, [r7, #28]
        break;
 8004fe4:	e00d      	b.n	8005002 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fe6:	f7ff f835 	bl	8004054 <HAL_RCC_GetSysClockFreq>
 8004fea:	61f8      	str	r0, [r7, #28]
        break;
 8004fec:	e009      	b.n	8005002 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff2:	61fb      	str	r3, [r7, #28]
        break;
 8004ff4:	e005      	b.n	8005002 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005000:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8109 	beq.w	800521c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	4413      	add	r3, r2
 8005014:	69fa      	ldr	r2, [r7, #28]
 8005016:	429a      	cmp	r2, r3
 8005018:	d305      	bcc.n	8005026 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005020:	69fa      	ldr	r2, [r7, #28]
 8005022:	429a      	cmp	r2, r3
 8005024:	d912      	bls.n	800504c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800502c:	e0f6      	b.n	800521c <UART_SetConfig+0x494>
 800502e:	bf00      	nop
 8005030:	efff69f3 	.word	0xefff69f3
 8005034:	40008000 	.word	0x40008000
 8005038:	40013800 	.word	0x40013800
 800503c:	40021000 	.word	0x40021000
 8005040:	40004400 	.word	0x40004400
 8005044:	40004800 	.word	0x40004800
 8005048:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	2200      	movs	r2, #0
 8005050:	461c      	mov	r4, r3
 8005052:	4615      	mov	r5, r2
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	022b      	lsls	r3, r5, #8
 800505e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005062:	0222      	lsls	r2, r4, #8
 8005064:	68f9      	ldr	r1, [r7, #12]
 8005066:	6849      	ldr	r1, [r1, #4]
 8005068:	0849      	lsrs	r1, r1, #1
 800506a:	2000      	movs	r0, #0
 800506c:	4688      	mov	r8, r1
 800506e:	4681      	mov	r9, r0
 8005070:	eb12 0a08 	adds.w	sl, r2, r8
 8005074:	eb43 0b09 	adc.w	fp, r3, r9
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	607a      	str	r2, [r7, #4]
 8005082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005086:	4650      	mov	r0, sl
 8005088:	4659      	mov	r1, fp
 800508a:	f7fb fddd 	bl	8000c48 <__aeabi_uldivmod>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4613      	mov	r3, r2
 8005094:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800509c:	d308      	bcc.n	80050b0 <UART_SetConfig+0x328>
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050a4:	d204      	bcs.n	80050b0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	60da      	str	r2, [r3, #12]
 80050ae:	e0b5      	b.n	800521c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050b6:	e0b1      	b.n	800521c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c0:	d15d      	bne.n	800517e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80050c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d827      	bhi.n	800511a <UART_SetConfig+0x392>
 80050ca:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <UART_SetConfig+0x348>)
 80050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d0:	080050f5 	.word	0x080050f5
 80050d4:	080050fd 	.word	0x080050fd
 80050d8:	08005105 	.word	0x08005105
 80050dc:	0800511b 	.word	0x0800511b
 80050e0:	0800510b 	.word	0x0800510b
 80050e4:	0800511b 	.word	0x0800511b
 80050e8:	0800511b 	.word	0x0800511b
 80050ec:	0800511b 	.word	0x0800511b
 80050f0:	08005113 	.word	0x08005113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f4:	f7ff f846 	bl	8004184 <HAL_RCC_GetPCLK1Freq>
 80050f8:	61f8      	str	r0, [r7, #28]
        break;
 80050fa:	e014      	b.n	8005126 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050fc:	f7ff f858 	bl	80041b0 <HAL_RCC_GetPCLK2Freq>
 8005100:	61f8      	str	r0, [r7, #28]
        break;
 8005102:	e010      	b.n	8005126 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005104:	4b4c      	ldr	r3, [pc, #304]	; (8005238 <UART_SetConfig+0x4b0>)
 8005106:	61fb      	str	r3, [r7, #28]
        break;
 8005108:	e00d      	b.n	8005126 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800510a:	f7fe ffa3 	bl	8004054 <HAL_RCC_GetSysClockFreq>
 800510e:	61f8      	str	r0, [r7, #28]
        break;
 8005110:	e009      	b.n	8005126 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005116:	61fb      	str	r3, [r7, #28]
        break;
 8005118:	e005      	b.n	8005126 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005124:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d077      	beq.n	800521c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	005a      	lsls	r2, r3, #1
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	441a      	add	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005140:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2b0f      	cmp	r3, #15
 8005146:	d916      	bls.n	8005176 <UART_SetConfig+0x3ee>
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514e:	d212      	bcs.n	8005176 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	b29b      	uxth	r3, r3
 8005154:	f023 030f 	bic.w	r3, r3, #15
 8005158:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	b29b      	uxth	r3, r3
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	b29a      	uxth	r2, r3
 8005166:	8afb      	ldrh	r3, [r7, #22]
 8005168:	4313      	orrs	r3, r2
 800516a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	8afa      	ldrh	r2, [r7, #22]
 8005172:	60da      	str	r2, [r3, #12]
 8005174:	e052      	b.n	800521c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800517c:	e04e      	b.n	800521c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800517e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005182:	2b08      	cmp	r3, #8
 8005184:	d827      	bhi.n	80051d6 <UART_SetConfig+0x44e>
 8005186:	a201      	add	r2, pc, #4	; (adr r2, 800518c <UART_SetConfig+0x404>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	080051b1 	.word	0x080051b1
 8005190:	080051b9 	.word	0x080051b9
 8005194:	080051c1 	.word	0x080051c1
 8005198:	080051d7 	.word	0x080051d7
 800519c:	080051c7 	.word	0x080051c7
 80051a0:	080051d7 	.word	0x080051d7
 80051a4:	080051d7 	.word	0x080051d7
 80051a8:	080051d7 	.word	0x080051d7
 80051ac:	080051cf 	.word	0x080051cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b0:	f7fe ffe8 	bl	8004184 <HAL_RCC_GetPCLK1Freq>
 80051b4:	61f8      	str	r0, [r7, #28]
        break;
 80051b6:	e014      	b.n	80051e2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051b8:	f7fe fffa 	bl	80041b0 <HAL_RCC_GetPCLK2Freq>
 80051bc:	61f8      	str	r0, [r7, #28]
        break;
 80051be:	e010      	b.n	80051e2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c0:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <UART_SetConfig+0x4b0>)
 80051c2:	61fb      	str	r3, [r7, #28]
        break;
 80051c4:	e00d      	b.n	80051e2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051c6:	f7fe ff45 	bl	8004054 <HAL_RCC_GetSysClockFreq>
 80051ca:	61f8      	str	r0, [r7, #28]
        break;
 80051cc:	e009      	b.n	80051e2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051d2:	61fb      	str	r3, [r7, #28]
        break;
 80051d4:	e005      	b.n	80051e2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051e0:	bf00      	nop
    }

    if (pclk != 0U)
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d019      	beq.n	800521c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	085a      	lsrs	r2, r3, #1
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	441a      	add	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	2b0f      	cmp	r3, #15
 8005200:	d909      	bls.n	8005216 <UART_SetConfig+0x48e>
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005208:	d205      	bcs.n	8005216 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60da      	str	r2, [r3, #12]
 8005214:	e002      	b.n	800521c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005228:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800522c:	4618      	mov	r0, r3
 800522e:	3728      	adds	r7, #40	; 0x28
 8005230:	46bd      	mov	sp, r7
 8005232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005236:	bf00      	nop
 8005238:	00f42400 	.word	0x00f42400

0800523c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	f003 0310 	and.w	r3, r3, #16
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01a      	beq.n	8005352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800533a:	d10a      	bne.n	8005352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	605a      	str	r2, [r3, #4]
  }
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b098      	sub	sp, #96	; 0x60
 8005384:	af02      	add	r7, sp, #8
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005390:	f7fc fc7c 	bl	8001c8c <HAL_GetTick>
 8005394:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d12e      	bne.n	8005402 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ac:	2200      	movs	r2, #0
 80053ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f88c 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d021      	beq.n	8005402 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d2:	653b      	str	r3, [r7, #80]	; 0x50
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053dc:	647b      	str	r3, [r7, #68]	; 0x44
 80053de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e6      	bne.n	80053be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e062      	b.n	80054c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b04      	cmp	r3, #4
 800540e:	d149      	bne.n	80054a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005410:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005418:	2200      	movs	r2, #0
 800541a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f856 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d03c      	beq.n	80054a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	623b      	str	r3, [r7, #32]
   return(result);
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800543e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005448:	633b      	str	r3, [r7, #48]	; 0x30
 800544a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800544e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e6      	bne.n	800542a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3308      	adds	r3, #8
 8005462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	60fb      	str	r3, [r7, #12]
   return(result);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0301 	bic.w	r3, r3, #1
 8005472:	64bb      	str	r3, [r7, #72]	; 0x48
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3308      	adds	r3, #8
 800547a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800547c:	61fa      	str	r2, [r7, #28]
 800547e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	69b9      	ldr	r1, [r7, #24]
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	617b      	str	r3, [r7, #20]
   return(result);
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e5      	bne.n	800545c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e011      	b.n	80054c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3758      	adds	r7, #88	; 0x58
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	4613      	mov	r3, r2
 80054de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e0:	e049      	b.n	8005576 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d045      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ea:	f7fc fbcf 	bl	8001c8c <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d302      	bcc.n	8005500 <UART_WaitOnFlagUntilTimeout+0x30>
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e048      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	d031      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b08      	cmp	r3, #8
 800551e:	d110      	bne.n	8005542 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2208      	movs	r2, #8
 8005526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 f8ff 	bl	800572c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2208      	movs	r2, #8
 8005532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e029      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800554c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005550:	d111      	bne.n	8005576 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800555a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f8e5 	bl	800572c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e00f      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69da      	ldr	r2, [r3, #28]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4013      	ands	r3, r2
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	429a      	cmp	r2, r3
 8005584:	bf0c      	ite	eq
 8005586:	2301      	moveq	r3, #1
 8005588:	2300      	movne	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	429a      	cmp	r2, r3
 8005592:	d0a6      	beq.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b097      	sub	sp, #92	; 0x5c
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	4613      	mov	r3, r2
 80055ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	88fa      	ldrh	r2, [r7, #6]
 80055b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	88fa      	ldrh	r2, [r7, #6]
 80055c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d2:	d10e      	bne.n	80055f2 <UART_Start_Receive_IT+0x52>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d105      	bne.n	80055e8 <UART_Start_Receive_IT+0x48>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80055e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055e6:	e02d      	b.n	8005644 <UART_Start_Receive_IT+0xa4>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	22ff      	movs	r2, #255	; 0xff
 80055ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055f0:	e028      	b.n	8005644 <UART_Start_Receive_IT+0xa4>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10d      	bne.n	8005616 <UART_Start_Receive_IT+0x76>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d104      	bne.n	800560c <UART_Start_Receive_IT+0x6c>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	22ff      	movs	r2, #255	; 0xff
 8005606:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800560a:	e01b      	b.n	8005644 <UART_Start_Receive_IT+0xa4>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	227f      	movs	r2, #127	; 0x7f
 8005610:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005614:	e016      	b.n	8005644 <UART_Start_Receive_IT+0xa4>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800561e:	d10d      	bne.n	800563c <UART_Start_Receive_IT+0x9c>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d104      	bne.n	8005632 <UART_Start_Receive_IT+0x92>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	227f      	movs	r2, #127	; 0x7f
 800562c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005630:	e008      	b.n	8005644 <UART_Start_Receive_IT+0xa4>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	223f      	movs	r2, #63	; 0x3f
 8005636:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800563a:	e003      	b.n	8005644 <UART_Start_Receive_IT+0xa4>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2222      	movs	r2, #34	; 0x22
 8005650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3308      	adds	r3, #8
 800565a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	f043 0301 	orr.w	r3, r3, #1
 800566a:	657b      	str	r3, [r7, #84]	; 0x54
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3308      	adds	r3, #8
 8005672:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005674:	64ba      	str	r2, [r7, #72]	; 0x48
 8005676:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800567a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e5      	bne.n	8005654 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005690:	d107      	bne.n	80056a2 <UART_Start_Receive_IT+0x102>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d103      	bne.n	80056a2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a21      	ldr	r2, [pc, #132]	; (8005724 <UART_Start_Receive_IT+0x184>)
 800569e:	669a      	str	r2, [r3, #104]	; 0x68
 80056a0:	e002      	b.n	80056a8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4a20      	ldr	r2, [pc, #128]	; (8005728 <UART_Start_Receive_IT+0x188>)
 80056a6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d019      	beq.n	80056e4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80056c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ce:	637b      	str	r3, [r7, #52]	; 0x34
 80056d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e6      	bne.n	80056b0 <UART_Start_Receive_IT+0x110>
 80056e2:	e018      	b.n	8005716 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	613b      	str	r3, [r7, #16]
   return(result);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f043 0320 	orr.w	r3, r3, #32
 80056f8:	653b      	str	r3, [r7, #80]	; 0x50
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005702:	623b      	str	r3, [r7, #32]
 8005704:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	69f9      	ldr	r1, [r7, #28]
 8005708:	6a3a      	ldr	r2, [r7, #32]
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e6      	bne.n	80056e4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	375c      	adds	r7, #92	; 0x5c
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	08005a31 	.word	0x08005a31
 8005728:	08005875 	.word	0x08005875

0800572c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800572c:	b480      	push	{r7}
 800572e:	b095      	sub	sp, #84	; 0x54
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573c:	e853 3f00 	ldrex	r3, [r3]
 8005740:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005752:	643b      	str	r3, [r7, #64]	; 0x40
 8005754:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005758:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1e6      	bne.n	8005734 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3308      	adds	r3, #8
 800576c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	61fb      	str	r3, [r7, #28]
   return(result);
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	f023 0301 	bic.w	r3, r3, #1
 800577c:	64bb      	str	r3, [r7, #72]	; 0x48
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3308      	adds	r3, #8
 8005784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005786:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005788:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800578c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e5      	bne.n	8005766 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d118      	bne.n	80057d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f023 0310 	bic.w	r3, r3, #16
 80057b6:	647b      	str	r3, [r7, #68]	; 0x44
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	6979      	ldr	r1, [r7, #20]
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	613b      	str	r3, [r7, #16]
   return(result);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e6      	bne.n	80057a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80057e8:	bf00      	nop
 80057ea:	3754      	adds	r7, #84	; 0x54
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f7ff faa2 	bl	8004d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005818:	bf00      	nop
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	60bb      	str	r3, [r7, #8]
   return(result);
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800583c:	61fb      	str	r3, [r7, #28]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	61bb      	str	r3, [r7, #24]
 8005848:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	6979      	ldr	r1, [r7, #20]
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	613b      	str	r3, [r7, #16]
   return(result);
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e6      	bne.n	8005828 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff fa6e 	bl	8004d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800586c:	bf00      	nop
 800586e:	3720      	adds	r7, #32
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b09c      	sub	sp, #112	; 0x70
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005882:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800588c:	2b22      	cmp	r3, #34	; 0x22
 800588e:	f040 80be 	bne.w	8005a0e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005898:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800589c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80058a0:	b2d9      	uxtb	r1, r3
 80058a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ac:	400a      	ands	r2, r1
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f040 80a3 	bne.w	8005a22 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80058fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1e6      	bne.n	80058dc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3308      	adds	r3, #8
 8005914:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800591e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005920:	f023 0301 	bic.w	r3, r3, #1
 8005924:	667b      	str	r3, [r7, #100]	; 0x64
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3308      	adds	r3, #8
 800592c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800592e:	647a      	str	r2, [r7, #68]	; 0x44
 8005930:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005934:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800593c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e5      	bne.n	800590e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a34      	ldr	r2, [pc, #208]	; (8005a2c <UART_RxISR_8BIT+0x1b8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d01f      	beq.n	80059a0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d018      	beq.n	80059a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	e853 3f00 	ldrex	r3, [r3]
 800597a:	623b      	str	r3, [r7, #32]
   return(result);
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005982:	663b      	str	r3, [r7, #96]	; 0x60
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	461a      	mov	r2, r3
 800598a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800598c:	633b      	str	r3, [r7, #48]	; 0x30
 800598e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005994:	e841 2300 	strex	r3, r2, [r1]
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e6      	bne.n	800596e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d12e      	bne.n	8005a06 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	e853 3f00 	ldrex	r3, [r3]
 80059ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0310 	bic.w	r3, r3, #16
 80059c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	461a      	mov	r2, r3
 80059ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059cc:	61fb      	str	r3, [r7, #28]
 80059ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d0:	69b9      	ldr	r1, [r7, #24]
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	e841 2300 	strex	r3, r2, [r1]
 80059d8:	617b      	str	r3, [r7, #20]
   return(result);
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e6      	bne.n	80059ae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	f003 0310 	and.w	r3, r3, #16
 80059ea:	2b10      	cmp	r3, #16
 80059ec:	d103      	bne.n	80059f6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2210      	movs	r2, #16
 80059f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff f9b6 	bl	8004d70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a04:	e00d      	b.n	8005a22 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fb fc20 	bl	800124c <HAL_UART_RxCpltCallback>
}
 8005a0c:	e009      	b.n	8005a22 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	8b1b      	ldrh	r3, [r3, #24]
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0208 	orr.w	r2, r2, #8
 8005a1e:	b292      	uxth	r2, r2
 8005a20:	831a      	strh	r2, [r3, #24]
}
 8005a22:	bf00      	nop
 8005a24:	3770      	adds	r7, #112	; 0x70
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40008000 	.word	0x40008000

08005a30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b09c      	sub	sp, #112	; 0x70
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a3e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a48:	2b22      	cmp	r3, #34	; 0x22
 8005a4a:	f040 80be 	bne.w	8005bca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a5e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005a62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005a66:	4013      	ands	r3, r2
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a72:	1c9a      	adds	r2, r3, #2
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f040 80a3 	bne.w	8005bde <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005aac:	667b      	str	r3, [r7, #100]	; 0x64
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ab6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ab8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005abc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005abe:	e841 2300 	strex	r3, r2, [r1]
 8005ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1e6      	bne.n	8005a98 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3308      	adds	r3, #8
 8005ad0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	f023 0301 	bic.w	r3, r3, #1
 8005ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005aea:	643a      	str	r2, [r7, #64]	; 0x40
 8005aec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005af0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1e5      	bne.n	8005aca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a34      	ldr	r2, [pc, #208]	; (8005be8 <UART_RxISR_16BIT+0x1b8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d01f      	beq.n	8005b5c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d018      	beq.n	8005b5c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	e853 3f00 	ldrex	r3, [r3]
 8005b36:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	461a      	mov	r2, r3
 8005b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b4a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e6      	bne.n	8005b2a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d12e      	bne.n	8005bc2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f023 0310 	bic.w	r3, r3, #16
 8005b7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b88:	61bb      	str	r3, [r7, #24]
 8005b8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	6979      	ldr	r1, [r7, #20]
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	613b      	str	r3, [r7, #16]
   return(result);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e6      	bne.n	8005b6a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2b10      	cmp	r3, #16
 8005ba8:	d103      	bne.n	8005bb2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2210      	movs	r2, #16
 8005bb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bb8:	4619      	mov	r1, r3
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7ff f8d8 	bl	8004d70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bc0:	e00d      	b.n	8005bde <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7fb fb42 	bl	800124c <HAL_UART_RxCpltCallback>
}
 8005bc8:	e009      	b.n	8005bde <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	8b1b      	ldrh	r3, [r3, #24]
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0208 	orr.w	r2, r2, #8
 8005bda:	b292      	uxth	r2, r2
 8005bdc:	831a      	strh	r2, [r3, #24]
}
 8005bde:	bf00      	nop
 8005be0:	3770      	adds	r7, #112	; 0x70
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40008000 	.word	0x40008000

08005bec <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e056      	b.n	8005cb2 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d106      	bne.n	8005c1a <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7fb fe3b 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2224      	movs	r2, #36	; 0x24
 8005c1e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0201 	bic.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f7ff faff 	bl	800523c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f7ff f8a2 	bl	8004d88 <UART_SetConfig>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d101      	bne.n	8005c4e <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e031      	b.n	8005cb2 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c5c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	055b      	lsls	r3, r3, #21
 8005c76:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	041b      	lsls	r3, r3, #16
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8005c8c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	6812      	ldr	r2, [r2, #0]
 8005c94:	6979      	ldr	r1, [r7, #20]
 8005c96:	430b      	orrs	r3, r1
 8005c98:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0201 	orr.w	r2, r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f7ff fb68 	bl	8005380 <UART_CheckIdleState>
 8005cb0:	4603      	mov	r3, r0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
	...

08005cd0 <malloc>:
 8005cd0:	4b02      	ldr	r3, [pc, #8]	; (8005cdc <malloc+0xc>)
 8005cd2:	4601      	mov	r1, r0
 8005cd4:	6818      	ldr	r0, [r3, #0]
 8005cd6:	f000 b82b 	b.w	8005d30 <_malloc_r>
 8005cda:	bf00      	nop
 8005cdc:	20000068 	.word	0x20000068

08005ce0 <free>:
 8005ce0:	4b02      	ldr	r3, [pc, #8]	; (8005cec <free+0xc>)
 8005ce2:	4601      	mov	r1, r0
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	f001 be15 	b.w	8007914 <_free_r>
 8005cea:	bf00      	nop
 8005cec:	20000068 	.word	0x20000068

08005cf0 <sbrk_aligned>:
 8005cf0:	b570      	push	{r4, r5, r6, lr}
 8005cf2:	4e0e      	ldr	r6, [pc, #56]	; (8005d2c <sbrk_aligned+0x3c>)
 8005cf4:	460c      	mov	r4, r1
 8005cf6:	6831      	ldr	r1, [r6, #0]
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	b911      	cbnz	r1, 8005d02 <sbrk_aligned+0x12>
 8005cfc:	f000 ff40 	bl	8006b80 <_sbrk_r>
 8005d00:	6030      	str	r0, [r6, #0]
 8005d02:	4621      	mov	r1, r4
 8005d04:	4628      	mov	r0, r5
 8005d06:	f000 ff3b 	bl	8006b80 <_sbrk_r>
 8005d0a:	1c43      	adds	r3, r0, #1
 8005d0c:	d00a      	beq.n	8005d24 <sbrk_aligned+0x34>
 8005d0e:	1cc4      	adds	r4, r0, #3
 8005d10:	f024 0403 	bic.w	r4, r4, #3
 8005d14:	42a0      	cmp	r0, r4
 8005d16:	d007      	beq.n	8005d28 <sbrk_aligned+0x38>
 8005d18:	1a21      	subs	r1, r4, r0
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f000 ff30 	bl	8006b80 <_sbrk_r>
 8005d20:	3001      	adds	r0, #1
 8005d22:	d101      	bne.n	8005d28 <sbrk_aligned+0x38>
 8005d24:	f04f 34ff 	mov.w	r4, #4294967295
 8005d28:	4620      	mov	r0, r4
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}
 8005d2c:	200003e8 	.word	0x200003e8

08005d30 <_malloc_r>:
 8005d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d34:	1ccd      	adds	r5, r1, #3
 8005d36:	f025 0503 	bic.w	r5, r5, #3
 8005d3a:	3508      	adds	r5, #8
 8005d3c:	2d0c      	cmp	r5, #12
 8005d3e:	bf38      	it	cc
 8005d40:	250c      	movcc	r5, #12
 8005d42:	2d00      	cmp	r5, #0
 8005d44:	4607      	mov	r7, r0
 8005d46:	db01      	blt.n	8005d4c <_malloc_r+0x1c>
 8005d48:	42a9      	cmp	r1, r5
 8005d4a:	d905      	bls.n	8005d58 <_malloc_r+0x28>
 8005d4c:	230c      	movs	r3, #12
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	2600      	movs	r6, #0
 8005d52:	4630      	mov	r0, r6
 8005d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e2c <_malloc_r+0xfc>
 8005d5c:	f000 f868 	bl	8005e30 <__malloc_lock>
 8005d60:	f8d8 3000 	ldr.w	r3, [r8]
 8005d64:	461c      	mov	r4, r3
 8005d66:	bb5c      	cbnz	r4, 8005dc0 <_malloc_r+0x90>
 8005d68:	4629      	mov	r1, r5
 8005d6a:	4638      	mov	r0, r7
 8005d6c:	f7ff ffc0 	bl	8005cf0 <sbrk_aligned>
 8005d70:	1c43      	adds	r3, r0, #1
 8005d72:	4604      	mov	r4, r0
 8005d74:	d155      	bne.n	8005e22 <_malloc_r+0xf2>
 8005d76:	f8d8 4000 	ldr.w	r4, [r8]
 8005d7a:	4626      	mov	r6, r4
 8005d7c:	2e00      	cmp	r6, #0
 8005d7e:	d145      	bne.n	8005e0c <_malloc_r+0xdc>
 8005d80:	2c00      	cmp	r4, #0
 8005d82:	d048      	beq.n	8005e16 <_malloc_r+0xe6>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	4631      	mov	r1, r6
 8005d88:	4638      	mov	r0, r7
 8005d8a:	eb04 0903 	add.w	r9, r4, r3
 8005d8e:	f000 fef7 	bl	8006b80 <_sbrk_r>
 8005d92:	4581      	cmp	r9, r0
 8005d94:	d13f      	bne.n	8005e16 <_malloc_r+0xe6>
 8005d96:	6821      	ldr	r1, [r4, #0]
 8005d98:	1a6d      	subs	r5, r5, r1
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	f7ff ffa7 	bl	8005cf0 <sbrk_aligned>
 8005da2:	3001      	adds	r0, #1
 8005da4:	d037      	beq.n	8005e16 <_malloc_r+0xe6>
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	442b      	add	r3, r5
 8005daa:	6023      	str	r3, [r4, #0]
 8005dac:	f8d8 3000 	ldr.w	r3, [r8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d038      	beq.n	8005e26 <_malloc_r+0xf6>
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	42a2      	cmp	r2, r4
 8005db8:	d12b      	bne.n	8005e12 <_malloc_r+0xe2>
 8005dba:	2200      	movs	r2, #0
 8005dbc:	605a      	str	r2, [r3, #4]
 8005dbe:	e00f      	b.n	8005de0 <_malloc_r+0xb0>
 8005dc0:	6822      	ldr	r2, [r4, #0]
 8005dc2:	1b52      	subs	r2, r2, r5
 8005dc4:	d41f      	bmi.n	8005e06 <_malloc_r+0xd6>
 8005dc6:	2a0b      	cmp	r2, #11
 8005dc8:	d917      	bls.n	8005dfa <_malloc_r+0xca>
 8005dca:	1961      	adds	r1, r4, r5
 8005dcc:	42a3      	cmp	r3, r4
 8005dce:	6025      	str	r5, [r4, #0]
 8005dd0:	bf18      	it	ne
 8005dd2:	6059      	strne	r1, [r3, #4]
 8005dd4:	6863      	ldr	r3, [r4, #4]
 8005dd6:	bf08      	it	eq
 8005dd8:	f8c8 1000 	streq.w	r1, [r8]
 8005ddc:	5162      	str	r2, [r4, r5]
 8005dde:	604b      	str	r3, [r1, #4]
 8005de0:	4638      	mov	r0, r7
 8005de2:	f104 060b 	add.w	r6, r4, #11
 8005de6:	f000 f829 	bl	8005e3c <__malloc_unlock>
 8005dea:	f026 0607 	bic.w	r6, r6, #7
 8005dee:	1d23      	adds	r3, r4, #4
 8005df0:	1af2      	subs	r2, r6, r3
 8005df2:	d0ae      	beq.n	8005d52 <_malloc_r+0x22>
 8005df4:	1b9b      	subs	r3, r3, r6
 8005df6:	50a3      	str	r3, [r4, r2]
 8005df8:	e7ab      	b.n	8005d52 <_malloc_r+0x22>
 8005dfa:	42a3      	cmp	r3, r4
 8005dfc:	6862      	ldr	r2, [r4, #4]
 8005dfe:	d1dd      	bne.n	8005dbc <_malloc_r+0x8c>
 8005e00:	f8c8 2000 	str.w	r2, [r8]
 8005e04:	e7ec      	b.n	8005de0 <_malloc_r+0xb0>
 8005e06:	4623      	mov	r3, r4
 8005e08:	6864      	ldr	r4, [r4, #4]
 8005e0a:	e7ac      	b.n	8005d66 <_malloc_r+0x36>
 8005e0c:	4634      	mov	r4, r6
 8005e0e:	6876      	ldr	r6, [r6, #4]
 8005e10:	e7b4      	b.n	8005d7c <_malloc_r+0x4c>
 8005e12:	4613      	mov	r3, r2
 8005e14:	e7cc      	b.n	8005db0 <_malloc_r+0x80>
 8005e16:	230c      	movs	r3, #12
 8005e18:	603b      	str	r3, [r7, #0]
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	f000 f80e 	bl	8005e3c <__malloc_unlock>
 8005e20:	e797      	b.n	8005d52 <_malloc_r+0x22>
 8005e22:	6025      	str	r5, [r4, #0]
 8005e24:	e7dc      	b.n	8005de0 <_malloc_r+0xb0>
 8005e26:	605b      	str	r3, [r3, #4]
 8005e28:	deff      	udf	#255	; 0xff
 8005e2a:	bf00      	nop
 8005e2c:	200003e4 	.word	0x200003e4

08005e30 <__malloc_lock>:
 8005e30:	4801      	ldr	r0, [pc, #4]	; (8005e38 <__malloc_lock+0x8>)
 8005e32:	f000 bef2 	b.w	8006c1a <__retarget_lock_acquire_recursive>
 8005e36:	bf00      	nop
 8005e38:	2000052c 	.word	0x2000052c

08005e3c <__malloc_unlock>:
 8005e3c:	4801      	ldr	r0, [pc, #4]	; (8005e44 <__malloc_unlock+0x8>)
 8005e3e:	f000 beed 	b.w	8006c1c <__retarget_lock_release_recursive>
 8005e42:	bf00      	nop
 8005e44:	2000052c 	.word	0x2000052c

08005e48 <__cvt>:
 8005e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	ec55 4b10 	vmov	r4, r5, d0
 8005e50:	2d00      	cmp	r5, #0
 8005e52:	460e      	mov	r6, r1
 8005e54:	4619      	mov	r1, r3
 8005e56:	462b      	mov	r3, r5
 8005e58:	bfbb      	ittet	lt
 8005e5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e5e:	461d      	movlt	r5, r3
 8005e60:	2300      	movge	r3, #0
 8005e62:	232d      	movlt	r3, #45	; 0x2d
 8005e64:	700b      	strb	r3, [r1, #0]
 8005e66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e6c:	4691      	mov	r9, r2
 8005e6e:	f023 0820 	bic.w	r8, r3, #32
 8005e72:	bfbc      	itt	lt
 8005e74:	4622      	movlt	r2, r4
 8005e76:	4614      	movlt	r4, r2
 8005e78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e7c:	d005      	beq.n	8005e8a <__cvt+0x42>
 8005e7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e82:	d100      	bne.n	8005e86 <__cvt+0x3e>
 8005e84:	3601      	adds	r6, #1
 8005e86:	2102      	movs	r1, #2
 8005e88:	e000      	b.n	8005e8c <__cvt+0x44>
 8005e8a:	2103      	movs	r1, #3
 8005e8c:	ab03      	add	r3, sp, #12
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	ab02      	add	r3, sp, #8
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	ec45 4b10 	vmov	d0, r4, r5
 8005e98:	4653      	mov	r3, sl
 8005e9a:	4632      	mov	r2, r6
 8005e9c:	f000 ff48 	bl	8006d30 <_dtoa_r>
 8005ea0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ea4:	4607      	mov	r7, r0
 8005ea6:	d102      	bne.n	8005eae <__cvt+0x66>
 8005ea8:	f019 0f01 	tst.w	r9, #1
 8005eac:	d022      	beq.n	8005ef4 <__cvt+0xac>
 8005eae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005eb2:	eb07 0906 	add.w	r9, r7, r6
 8005eb6:	d110      	bne.n	8005eda <__cvt+0x92>
 8005eb8:	783b      	ldrb	r3, [r7, #0]
 8005eba:	2b30      	cmp	r3, #48	; 0x30
 8005ebc:	d10a      	bne.n	8005ed4 <__cvt+0x8c>
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	f7fa fdff 	bl	8000ac8 <__aeabi_dcmpeq>
 8005eca:	b918      	cbnz	r0, 8005ed4 <__cvt+0x8c>
 8005ecc:	f1c6 0601 	rsb	r6, r6, #1
 8005ed0:	f8ca 6000 	str.w	r6, [sl]
 8005ed4:	f8da 3000 	ldr.w	r3, [sl]
 8005ed8:	4499      	add	r9, r3
 8005eda:	2200      	movs	r2, #0
 8005edc:	2300      	movs	r3, #0
 8005ede:	4620      	mov	r0, r4
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	f7fa fdf1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ee6:	b108      	cbz	r0, 8005eec <__cvt+0xa4>
 8005ee8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005eec:	2230      	movs	r2, #48	; 0x30
 8005eee:	9b03      	ldr	r3, [sp, #12]
 8005ef0:	454b      	cmp	r3, r9
 8005ef2:	d307      	bcc.n	8005f04 <__cvt+0xbc>
 8005ef4:	9b03      	ldr	r3, [sp, #12]
 8005ef6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ef8:	1bdb      	subs	r3, r3, r7
 8005efa:	4638      	mov	r0, r7
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	b004      	add	sp, #16
 8005f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f04:	1c59      	adds	r1, r3, #1
 8005f06:	9103      	str	r1, [sp, #12]
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	e7f0      	b.n	8005eee <__cvt+0xa6>

08005f0c <__exponent>:
 8005f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2900      	cmp	r1, #0
 8005f12:	bfb8      	it	lt
 8005f14:	4249      	neglt	r1, r1
 8005f16:	f803 2b02 	strb.w	r2, [r3], #2
 8005f1a:	bfb4      	ite	lt
 8005f1c:	222d      	movlt	r2, #45	; 0x2d
 8005f1e:	222b      	movge	r2, #43	; 0x2b
 8005f20:	2909      	cmp	r1, #9
 8005f22:	7042      	strb	r2, [r0, #1]
 8005f24:	dd2a      	ble.n	8005f7c <__exponent+0x70>
 8005f26:	f10d 0207 	add.w	r2, sp, #7
 8005f2a:	4617      	mov	r7, r2
 8005f2c:	260a      	movs	r6, #10
 8005f2e:	4694      	mov	ip, r2
 8005f30:	fb91 f5f6 	sdiv	r5, r1, r6
 8005f34:	fb06 1415 	mls	r4, r6, r5, r1
 8005f38:	3430      	adds	r4, #48	; 0x30
 8005f3a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005f3e:	460c      	mov	r4, r1
 8005f40:	2c63      	cmp	r4, #99	; 0x63
 8005f42:	f102 32ff 	add.w	r2, r2, #4294967295
 8005f46:	4629      	mov	r1, r5
 8005f48:	dcf1      	bgt.n	8005f2e <__exponent+0x22>
 8005f4a:	3130      	adds	r1, #48	; 0x30
 8005f4c:	f1ac 0402 	sub.w	r4, ip, #2
 8005f50:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005f54:	1c41      	adds	r1, r0, #1
 8005f56:	4622      	mov	r2, r4
 8005f58:	42ba      	cmp	r2, r7
 8005f5a:	d30a      	bcc.n	8005f72 <__exponent+0x66>
 8005f5c:	f10d 0209 	add.w	r2, sp, #9
 8005f60:	eba2 020c 	sub.w	r2, r2, ip
 8005f64:	42bc      	cmp	r4, r7
 8005f66:	bf88      	it	hi
 8005f68:	2200      	movhi	r2, #0
 8005f6a:	4413      	add	r3, r2
 8005f6c:	1a18      	subs	r0, r3, r0
 8005f6e:	b003      	add	sp, #12
 8005f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f72:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005f76:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005f7a:	e7ed      	b.n	8005f58 <__exponent+0x4c>
 8005f7c:	2330      	movs	r3, #48	; 0x30
 8005f7e:	3130      	adds	r1, #48	; 0x30
 8005f80:	7083      	strb	r3, [r0, #2]
 8005f82:	70c1      	strb	r1, [r0, #3]
 8005f84:	1d03      	adds	r3, r0, #4
 8005f86:	e7f1      	b.n	8005f6c <__exponent+0x60>

08005f88 <_printf_float>:
 8005f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8c:	ed2d 8b02 	vpush	{d8}
 8005f90:	b08d      	sub	sp, #52	; 0x34
 8005f92:	460c      	mov	r4, r1
 8005f94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f98:	4616      	mov	r6, r2
 8005f9a:	461f      	mov	r7, r3
 8005f9c:	4605      	mov	r5, r0
 8005f9e:	f000 fdb7 	bl	8006b10 <_localeconv_r>
 8005fa2:	f8d0 a000 	ldr.w	sl, [r0]
 8005fa6:	4650      	mov	r0, sl
 8005fa8:	f7fa f962 	bl	8000270 <strlen>
 8005fac:	2300      	movs	r3, #0
 8005fae:	930a      	str	r3, [sp, #40]	; 0x28
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	9305      	str	r3, [sp, #20]
 8005fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005fbc:	3307      	adds	r3, #7
 8005fbe:	f023 0307 	bic.w	r3, r3, #7
 8005fc2:	f103 0208 	add.w	r2, r3, #8
 8005fc6:	f8c8 2000 	str.w	r2, [r8]
 8005fca:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005fd2:	9307      	str	r3, [sp, #28]
 8005fd4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fd8:	ee08 0a10 	vmov	s16, r0
 8005fdc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005fe0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fe4:	4b9e      	ldr	r3, [pc, #632]	; (8006260 <_printf_float+0x2d8>)
 8005fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fea:	f7fa fd9f 	bl	8000b2c <__aeabi_dcmpun>
 8005fee:	bb88      	cbnz	r0, 8006054 <_printf_float+0xcc>
 8005ff0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ff4:	4b9a      	ldr	r3, [pc, #616]	; (8006260 <_printf_float+0x2d8>)
 8005ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8005ffa:	f7fa fd79 	bl	8000af0 <__aeabi_dcmple>
 8005ffe:	bb48      	cbnz	r0, 8006054 <_printf_float+0xcc>
 8006000:	2200      	movs	r2, #0
 8006002:	2300      	movs	r3, #0
 8006004:	4640      	mov	r0, r8
 8006006:	4649      	mov	r1, r9
 8006008:	f7fa fd68 	bl	8000adc <__aeabi_dcmplt>
 800600c:	b110      	cbz	r0, 8006014 <_printf_float+0x8c>
 800600e:	232d      	movs	r3, #45	; 0x2d
 8006010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006014:	4a93      	ldr	r2, [pc, #588]	; (8006264 <_printf_float+0x2dc>)
 8006016:	4b94      	ldr	r3, [pc, #592]	; (8006268 <_printf_float+0x2e0>)
 8006018:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800601c:	bf94      	ite	ls
 800601e:	4690      	movls	r8, r2
 8006020:	4698      	movhi	r8, r3
 8006022:	2303      	movs	r3, #3
 8006024:	6123      	str	r3, [r4, #16]
 8006026:	9b05      	ldr	r3, [sp, #20]
 8006028:	f023 0304 	bic.w	r3, r3, #4
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	f04f 0900 	mov.w	r9, #0
 8006032:	9700      	str	r7, [sp, #0]
 8006034:	4633      	mov	r3, r6
 8006036:	aa0b      	add	r2, sp, #44	; 0x2c
 8006038:	4621      	mov	r1, r4
 800603a:	4628      	mov	r0, r5
 800603c:	f000 f9da 	bl	80063f4 <_printf_common>
 8006040:	3001      	adds	r0, #1
 8006042:	f040 8090 	bne.w	8006166 <_printf_float+0x1de>
 8006046:	f04f 30ff 	mov.w	r0, #4294967295
 800604a:	b00d      	add	sp, #52	; 0x34
 800604c:	ecbd 8b02 	vpop	{d8}
 8006050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006054:	4642      	mov	r2, r8
 8006056:	464b      	mov	r3, r9
 8006058:	4640      	mov	r0, r8
 800605a:	4649      	mov	r1, r9
 800605c:	f7fa fd66 	bl	8000b2c <__aeabi_dcmpun>
 8006060:	b140      	cbz	r0, 8006074 <_printf_float+0xec>
 8006062:	464b      	mov	r3, r9
 8006064:	2b00      	cmp	r3, #0
 8006066:	bfbc      	itt	lt
 8006068:	232d      	movlt	r3, #45	; 0x2d
 800606a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800606e:	4a7f      	ldr	r2, [pc, #508]	; (800626c <_printf_float+0x2e4>)
 8006070:	4b7f      	ldr	r3, [pc, #508]	; (8006270 <_printf_float+0x2e8>)
 8006072:	e7d1      	b.n	8006018 <_printf_float+0x90>
 8006074:	6863      	ldr	r3, [r4, #4]
 8006076:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800607a:	9206      	str	r2, [sp, #24]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	d13f      	bne.n	8006100 <_printf_float+0x178>
 8006080:	2306      	movs	r3, #6
 8006082:	6063      	str	r3, [r4, #4]
 8006084:	9b05      	ldr	r3, [sp, #20]
 8006086:	6861      	ldr	r1, [r4, #4]
 8006088:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800608c:	2300      	movs	r3, #0
 800608e:	9303      	str	r3, [sp, #12]
 8006090:	ab0a      	add	r3, sp, #40	; 0x28
 8006092:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006096:	ab09      	add	r3, sp, #36	; 0x24
 8006098:	ec49 8b10 	vmov	d0, r8, r9
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	6022      	str	r2, [r4, #0]
 80060a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80060a4:	4628      	mov	r0, r5
 80060a6:	f7ff fecf 	bl	8005e48 <__cvt>
 80060aa:	9b06      	ldr	r3, [sp, #24]
 80060ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060ae:	2b47      	cmp	r3, #71	; 0x47
 80060b0:	4680      	mov	r8, r0
 80060b2:	d108      	bne.n	80060c6 <_printf_float+0x13e>
 80060b4:	1cc8      	adds	r0, r1, #3
 80060b6:	db02      	blt.n	80060be <_printf_float+0x136>
 80060b8:	6863      	ldr	r3, [r4, #4]
 80060ba:	4299      	cmp	r1, r3
 80060bc:	dd41      	ble.n	8006142 <_printf_float+0x1ba>
 80060be:	f1ab 0302 	sub.w	r3, fp, #2
 80060c2:	fa5f fb83 	uxtb.w	fp, r3
 80060c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80060ca:	d820      	bhi.n	800610e <_printf_float+0x186>
 80060cc:	3901      	subs	r1, #1
 80060ce:	465a      	mov	r2, fp
 80060d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060d4:	9109      	str	r1, [sp, #36]	; 0x24
 80060d6:	f7ff ff19 	bl	8005f0c <__exponent>
 80060da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060dc:	1813      	adds	r3, r2, r0
 80060de:	2a01      	cmp	r2, #1
 80060e0:	4681      	mov	r9, r0
 80060e2:	6123      	str	r3, [r4, #16]
 80060e4:	dc02      	bgt.n	80060ec <_printf_float+0x164>
 80060e6:	6822      	ldr	r2, [r4, #0]
 80060e8:	07d2      	lsls	r2, r2, #31
 80060ea:	d501      	bpl.n	80060f0 <_printf_float+0x168>
 80060ec:	3301      	adds	r3, #1
 80060ee:	6123      	str	r3, [r4, #16]
 80060f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d09c      	beq.n	8006032 <_printf_float+0xaa>
 80060f8:	232d      	movs	r3, #45	; 0x2d
 80060fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060fe:	e798      	b.n	8006032 <_printf_float+0xaa>
 8006100:	9a06      	ldr	r2, [sp, #24]
 8006102:	2a47      	cmp	r2, #71	; 0x47
 8006104:	d1be      	bne.n	8006084 <_printf_float+0xfc>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1bc      	bne.n	8006084 <_printf_float+0xfc>
 800610a:	2301      	movs	r3, #1
 800610c:	e7b9      	b.n	8006082 <_printf_float+0xfa>
 800610e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006112:	d118      	bne.n	8006146 <_printf_float+0x1be>
 8006114:	2900      	cmp	r1, #0
 8006116:	6863      	ldr	r3, [r4, #4]
 8006118:	dd0b      	ble.n	8006132 <_printf_float+0x1aa>
 800611a:	6121      	str	r1, [r4, #16]
 800611c:	b913      	cbnz	r3, 8006124 <_printf_float+0x19c>
 800611e:	6822      	ldr	r2, [r4, #0]
 8006120:	07d0      	lsls	r0, r2, #31
 8006122:	d502      	bpl.n	800612a <_printf_float+0x1a2>
 8006124:	3301      	adds	r3, #1
 8006126:	440b      	add	r3, r1
 8006128:	6123      	str	r3, [r4, #16]
 800612a:	65a1      	str	r1, [r4, #88]	; 0x58
 800612c:	f04f 0900 	mov.w	r9, #0
 8006130:	e7de      	b.n	80060f0 <_printf_float+0x168>
 8006132:	b913      	cbnz	r3, 800613a <_printf_float+0x1b2>
 8006134:	6822      	ldr	r2, [r4, #0]
 8006136:	07d2      	lsls	r2, r2, #31
 8006138:	d501      	bpl.n	800613e <_printf_float+0x1b6>
 800613a:	3302      	adds	r3, #2
 800613c:	e7f4      	b.n	8006128 <_printf_float+0x1a0>
 800613e:	2301      	movs	r3, #1
 8006140:	e7f2      	b.n	8006128 <_printf_float+0x1a0>
 8006142:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006148:	4299      	cmp	r1, r3
 800614a:	db05      	blt.n	8006158 <_printf_float+0x1d0>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	6121      	str	r1, [r4, #16]
 8006150:	07d8      	lsls	r0, r3, #31
 8006152:	d5ea      	bpl.n	800612a <_printf_float+0x1a2>
 8006154:	1c4b      	adds	r3, r1, #1
 8006156:	e7e7      	b.n	8006128 <_printf_float+0x1a0>
 8006158:	2900      	cmp	r1, #0
 800615a:	bfd4      	ite	le
 800615c:	f1c1 0202 	rsble	r2, r1, #2
 8006160:	2201      	movgt	r2, #1
 8006162:	4413      	add	r3, r2
 8006164:	e7e0      	b.n	8006128 <_printf_float+0x1a0>
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	055a      	lsls	r2, r3, #21
 800616a:	d407      	bmi.n	800617c <_printf_float+0x1f4>
 800616c:	6923      	ldr	r3, [r4, #16]
 800616e:	4642      	mov	r2, r8
 8006170:	4631      	mov	r1, r6
 8006172:	4628      	mov	r0, r5
 8006174:	47b8      	blx	r7
 8006176:	3001      	adds	r0, #1
 8006178:	d12c      	bne.n	80061d4 <_printf_float+0x24c>
 800617a:	e764      	b.n	8006046 <_printf_float+0xbe>
 800617c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006180:	f240 80e0 	bls.w	8006344 <_printf_float+0x3bc>
 8006184:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006188:	2200      	movs	r2, #0
 800618a:	2300      	movs	r3, #0
 800618c:	f7fa fc9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006190:	2800      	cmp	r0, #0
 8006192:	d034      	beq.n	80061fe <_printf_float+0x276>
 8006194:	4a37      	ldr	r2, [pc, #220]	; (8006274 <_printf_float+0x2ec>)
 8006196:	2301      	movs	r3, #1
 8006198:	4631      	mov	r1, r6
 800619a:	4628      	mov	r0, r5
 800619c:	47b8      	blx	r7
 800619e:	3001      	adds	r0, #1
 80061a0:	f43f af51 	beq.w	8006046 <_printf_float+0xbe>
 80061a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061a8:	429a      	cmp	r2, r3
 80061aa:	db02      	blt.n	80061b2 <_printf_float+0x22a>
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	07d8      	lsls	r0, r3, #31
 80061b0:	d510      	bpl.n	80061d4 <_printf_float+0x24c>
 80061b2:	ee18 3a10 	vmov	r3, s16
 80061b6:	4652      	mov	r2, sl
 80061b8:	4631      	mov	r1, r6
 80061ba:	4628      	mov	r0, r5
 80061bc:	47b8      	blx	r7
 80061be:	3001      	adds	r0, #1
 80061c0:	f43f af41 	beq.w	8006046 <_printf_float+0xbe>
 80061c4:	f04f 0800 	mov.w	r8, #0
 80061c8:	f104 091a 	add.w	r9, r4, #26
 80061cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ce:	3b01      	subs	r3, #1
 80061d0:	4543      	cmp	r3, r8
 80061d2:	dc09      	bgt.n	80061e8 <_printf_float+0x260>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	079b      	lsls	r3, r3, #30
 80061d8:	f100 8107 	bmi.w	80063ea <_printf_float+0x462>
 80061dc:	68e0      	ldr	r0, [r4, #12]
 80061de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061e0:	4298      	cmp	r0, r3
 80061e2:	bfb8      	it	lt
 80061e4:	4618      	movlt	r0, r3
 80061e6:	e730      	b.n	800604a <_printf_float+0xc2>
 80061e8:	2301      	movs	r3, #1
 80061ea:	464a      	mov	r2, r9
 80061ec:	4631      	mov	r1, r6
 80061ee:	4628      	mov	r0, r5
 80061f0:	47b8      	blx	r7
 80061f2:	3001      	adds	r0, #1
 80061f4:	f43f af27 	beq.w	8006046 <_printf_float+0xbe>
 80061f8:	f108 0801 	add.w	r8, r8, #1
 80061fc:	e7e6      	b.n	80061cc <_printf_float+0x244>
 80061fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006200:	2b00      	cmp	r3, #0
 8006202:	dc39      	bgt.n	8006278 <_printf_float+0x2f0>
 8006204:	4a1b      	ldr	r2, [pc, #108]	; (8006274 <_printf_float+0x2ec>)
 8006206:	2301      	movs	r3, #1
 8006208:	4631      	mov	r1, r6
 800620a:	4628      	mov	r0, r5
 800620c:	47b8      	blx	r7
 800620e:	3001      	adds	r0, #1
 8006210:	f43f af19 	beq.w	8006046 <_printf_float+0xbe>
 8006214:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006218:	4313      	orrs	r3, r2
 800621a:	d102      	bne.n	8006222 <_printf_float+0x29a>
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	07d9      	lsls	r1, r3, #31
 8006220:	d5d8      	bpl.n	80061d4 <_printf_float+0x24c>
 8006222:	ee18 3a10 	vmov	r3, s16
 8006226:	4652      	mov	r2, sl
 8006228:	4631      	mov	r1, r6
 800622a:	4628      	mov	r0, r5
 800622c:	47b8      	blx	r7
 800622e:	3001      	adds	r0, #1
 8006230:	f43f af09 	beq.w	8006046 <_printf_float+0xbe>
 8006234:	f04f 0900 	mov.w	r9, #0
 8006238:	f104 0a1a 	add.w	sl, r4, #26
 800623c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623e:	425b      	negs	r3, r3
 8006240:	454b      	cmp	r3, r9
 8006242:	dc01      	bgt.n	8006248 <_printf_float+0x2c0>
 8006244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006246:	e792      	b.n	800616e <_printf_float+0x1e6>
 8006248:	2301      	movs	r3, #1
 800624a:	4652      	mov	r2, sl
 800624c:	4631      	mov	r1, r6
 800624e:	4628      	mov	r0, r5
 8006250:	47b8      	blx	r7
 8006252:	3001      	adds	r0, #1
 8006254:	f43f aef7 	beq.w	8006046 <_printf_float+0xbe>
 8006258:	f109 0901 	add.w	r9, r9, #1
 800625c:	e7ee      	b.n	800623c <_printf_float+0x2b4>
 800625e:	bf00      	nop
 8006260:	7fefffff 	.word	0x7fefffff
 8006264:	080087b0 	.word	0x080087b0
 8006268:	080087b4 	.word	0x080087b4
 800626c:	080087b8 	.word	0x080087b8
 8006270:	080087bc 	.word	0x080087bc
 8006274:	080087c0 	.word	0x080087c0
 8006278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800627a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800627c:	429a      	cmp	r2, r3
 800627e:	bfa8      	it	ge
 8006280:	461a      	movge	r2, r3
 8006282:	2a00      	cmp	r2, #0
 8006284:	4691      	mov	r9, r2
 8006286:	dc37      	bgt.n	80062f8 <_printf_float+0x370>
 8006288:	f04f 0b00 	mov.w	fp, #0
 800628c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006290:	f104 021a 	add.w	r2, r4, #26
 8006294:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006296:	9305      	str	r3, [sp, #20]
 8006298:	eba3 0309 	sub.w	r3, r3, r9
 800629c:	455b      	cmp	r3, fp
 800629e:	dc33      	bgt.n	8006308 <_printf_float+0x380>
 80062a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062a4:	429a      	cmp	r2, r3
 80062a6:	db3b      	blt.n	8006320 <_printf_float+0x398>
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	07da      	lsls	r2, r3, #31
 80062ac:	d438      	bmi.n	8006320 <_printf_float+0x398>
 80062ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80062b2:	eba2 0903 	sub.w	r9, r2, r3
 80062b6:	9b05      	ldr	r3, [sp, #20]
 80062b8:	1ad2      	subs	r2, r2, r3
 80062ba:	4591      	cmp	r9, r2
 80062bc:	bfa8      	it	ge
 80062be:	4691      	movge	r9, r2
 80062c0:	f1b9 0f00 	cmp.w	r9, #0
 80062c4:	dc35      	bgt.n	8006332 <_printf_float+0x3aa>
 80062c6:	f04f 0800 	mov.w	r8, #0
 80062ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062ce:	f104 0a1a 	add.w	sl, r4, #26
 80062d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062d6:	1a9b      	subs	r3, r3, r2
 80062d8:	eba3 0309 	sub.w	r3, r3, r9
 80062dc:	4543      	cmp	r3, r8
 80062de:	f77f af79 	ble.w	80061d4 <_printf_float+0x24c>
 80062e2:	2301      	movs	r3, #1
 80062e4:	4652      	mov	r2, sl
 80062e6:	4631      	mov	r1, r6
 80062e8:	4628      	mov	r0, r5
 80062ea:	47b8      	blx	r7
 80062ec:	3001      	adds	r0, #1
 80062ee:	f43f aeaa 	beq.w	8006046 <_printf_float+0xbe>
 80062f2:	f108 0801 	add.w	r8, r8, #1
 80062f6:	e7ec      	b.n	80062d2 <_printf_float+0x34a>
 80062f8:	4613      	mov	r3, r2
 80062fa:	4631      	mov	r1, r6
 80062fc:	4642      	mov	r2, r8
 80062fe:	4628      	mov	r0, r5
 8006300:	47b8      	blx	r7
 8006302:	3001      	adds	r0, #1
 8006304:	d1c0      	bne.n	8006288 <_printf_float+0x300>
 8006306:	e69e      	b.n	8006046 <_printf_float+0xbe>
 8006308:	2301      	movs	r3, #1
 800630a:	4631      	mov	r1, r6
 800630c:	4628      	mov	r0, r5
 800630e:	9205      	str	r2, [sp, #20]
 8006310:	47b8      	blx	r7
 8006312:	3001      	adds	r0, #1
 8006314:	f43f ae97 	beq.w	8006046 <_printf_float+0xbe>
 8006318:	9a05      	ldr	r2, [sp, #20]
 800631a:	f10b 0b01 	add.w	fp, fp, #1
 800631e:	e7b9      	b.n	8006294 <_printf_float+0x30c>
 8006320:	ee18 3a10 	vmov	r3, s16
 8006324:	4652      	mov	r2, sl
 8006326:	4631      	mov	r1, r6
 8006328:	4628      	mov	r0, r5
 800632a:	47b8      	blx	r7
 800632c:	3001      	adds	r0, #1
 800632e:	d1be      	bne.n	80062ae <_printf_float+0x326>
 8006330:	e689      	b.n	8006046 <_printf_float+0xbe>
 8006332:	9a05      	ldr	r2, [sp, #20]
 8006334:	464b      	mov	r3, r9
 8006336:	4442      	add	r2, r8
 8006338:	4631      	mov	r1, r6
 800633a:	4628      	mov	r0, r5
 800633c:	47b8      	blx	r7
 800633e:	3001      	adds	r0, #1
 8006340:	d1c1      	bne.n	80062c6 <_printf_float+0x33e>
 8006342:	e680      	b.n	8006046 <_printf_float+0xbe>
 8006344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006346:	2a01      	cmp	r2, #1
 8006348:	dc01      	bgt.n	800634e <_printf_float+0x3c6>
 800634a:	07db      	lsls	r3, r3, #31
 800634c:	d53a      	bpl.n	80063c4 <_printf_float+0x43c>
 800634e:	2301      	movs	r3, #1
 8006350:	4642      	mov	r2, r8
 8006352:	4631      	mov	r1, r6
 8006354:	4628      	mov	r0, r5
 8006356:	47b8      	blx	r7
 8006358:	3001      	adds	r0, #1
 800635a:	f43f ae74 	beq.w	8006046 <_printf_float+0xbe>
 800635e:	ee18 3a10 	vmov	r3, s16
 8006362:	4652      	mov	r2, sl
 8006364:	4631      	mov	r1, r6
 8006366:	4628      	mov	r0, r5
 8006368:	47b8      	blx	r7
 800636a:	3001      	adds	r0, #1
 800636c:	f43f ae6b 	beq.w	8006046 <_printf_float+0xbe>
 8006370:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006374:	2200      	movs	r2, #0
 8006376:	2300      	movs	r3, #0
 8006378:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800637c:	f7fa fba4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006380:	b9d8      	cbnz	r0, 80063ba <_printf_float+0x432>
 8006382:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006386:	f108 0201 	add.w	r2, r8, #1
 800638a:	4631      	mov	r1, r6
 800638c:	4628      	mov	r0, r5
 800638e:	47b8      	blx	r7
 8006390:	3001      	adds	r0, #1
 8006392:	d10e      	bne.n	80063b2 <_printf_float+0x42a>
 8006394:	e657      	b.n	8006046 <_printf_float+0xbe>
 8006396:	2301      	movs	r3, #1
 8006398:	4652      	mov	r2, sl
 800639a:	4631      	mov	r1, r6
 800639c:	4628      	mov	r0, r5
 800639e:	47b8      	blx	r7
 80063a0:	3001      	adds	r0, #1
 80063a2:	f43f ae50 	beq.w	8006046 <_printf_float+0xbe>
 80063a6:	f108 0801 	add.w	r8, r8, #1
 80063aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ac:	3b01      	subs	r3, #1
 80063ae:	4543      	cmp	r3, r8
 80063b0:	dcf1      	bgt.n	8006396 <_printf_float+0x40e>
 80063b2:	464b      	mov	r3, r9
 80063b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063b8:	e6da      	b.n	8006170 <_printf_float+0x1e8>
 80063ba:	f04f 0800 	mov.w	r8, #0
 80063be:	f104 0a1a 	add.w	sl, r4, #26
 80063c2:	e7f2      	b.n	80063aa <_printf_float+0x422>
 80063c4:	2301      	movs	r3, #1
 80063c6:	4642      	mov	r2, r8
 80063c8:	e7df      	b.n	800638a <_printf_float+0x402>
 80063ca:	2301      	movs	r3, #1
 80063cc:	464a      	mov	r2, r9
 80063ce:	4631      	mov	r1, r6
 80063d0:	4628      	mov	r0, r5
 80063d2:	47b8      	blx	r7
 80063d4:	3001      	adds	r0, #1
 80063d6:	f43f ae36 	beq.w	8006046 <_printf_float+0xbe>
 80063da:	f108 0801 	add.w	r8, r8, #1
 80063de:	68e3      	ldr	r3, [r4, #12]
 80063e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063e2:	1a5b      	subs	r3, r3, r1
 80063e4:	4543      	cmp	r3, r8
 80063e6:	dcf0      	bgt.n	80063ca <_printf_float+0x442>
 80063e8:	e6f8      	b.n	80061dc <_printf_float+0x254>
 80063ea:	f04f 0800 	mov.w	r8, #0
 80063ee:	f104 0919 	add.w	r9, r4, #25
 80063f2:	e7f4      	b.n	80063de <_printf_float+0x456>

080063f4 <_printf_common>:
 80063f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f8:	4616      	mov	r6, r2
 80063fa:	4699      	mov	r9, r3
 80063fc:	688a      	ldr	r2, [r1, #8]
 80063fe:	690b      	ldr	r3, [r1, #16]
 8006400:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006404:	4293      	cmp	r3, r2
 8006406:	bfb8      	it	lt
 8006408:	4613      	movlt	r3, r2
 800640a:	6033      	str	r3, [r6, #0]
 800640c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006410:	4607      	mov	r7, r0
 8006412:	460c      	mov	r4, r1
 8006414:	b10a      	cbz	r2, 800641a <_printf_common+0x26>
 8006416:	3301      	adds	r3, #1
 8006418:	6033      	str	r3, [r6, #0]
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	0699      	lsls	r1, r3, #26
 800641e:	bf42      	ittt	mi
 8006420:	6833      	ldrmi	r3, [r6, #0]
 8006422:	3302      	addmi	r3, #2
 8006424:	6033      	strmi	r3, [r6, #0]
 8006426:	6825      	ldr	r5, [r4, #0]
 8006428:	f015 0506 	ands.w	r5, r5, #6
 800642c:	d106      	bne.n	800643c <_printf_common+0x48>
 800642e:	f104 0a19 	add.w	sl, r4, #25
 8006432:	68e3      	ldr	r3, [r4, #12]
 8006434:	6832      	ldr	r2, [r6, #0]
 8006436:	1a9b      	subs	r3, r3, r2
 8006438:	42ab      	cmp	r3, r5
 800643a:	dc26      	bgt.n	800648a <_printf_common+0x96>
 800643c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006440:	1e13      	subs	r3, r2, #0
 8006442:	6822      	ldr	r2, [r4, #0]
 8006444:	bf18      	it	ne
 8006446:	2301      	movne	r3, #1
 8006448:	0692      	lsls	r2, r2, #26
 800644a:	d42b      	bmi.n	80064a4 <_printf_common+0xb0>
 800644c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006450:	4649      	mov	r1, r9
 8006452:	4638      	mov	r0, r7
 8006454:	47c0      	blx	r8
 8006456:	3001      	adds	r0, #1
 8006458:	d01e      	beq.n	8006498 <_printf_common+0xa4>
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	6922      	ldr	r2, [r4, #16]
 800645e:	f003 0306 	and.w	r3, r3, #6
 8006462:	2b04      	cmp	r3, #4
 8006464:	bf02      	ittt	eq
 8006466:	68e5      	ldreq	r5, [r4, #12]
 8006468:	6833      	ldreq	r3, [r6, #0]
 800646a:	1aed      	subeq	r5, r5, r3
 800646c:	68a3      	ldr	r3, [r4, #8]
 800646e:	bf0c      	ite	eq
 8006470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006474:	2500      	movne	r5, #0
 8006476:	4293      	cmp	r3, r2
 8006478:	bfc4      	itt	gt
 800647a:	1a9b      	subgt	r3, r3, r2
 800647c:	18ed      	addgt	r5, r5, r3
 800647e:	2600      	movs	r6, #0
 8006480:	341a      	adds	r4, #26
 8006482:	42b5      	cmp	r5, r6
 8006484:	d11a      	bne.n	80064bc <_printf_common+0xc8>
 8006486:	2000      	movs	r0, #0
 8006488:	e008      	b.n	800649c <_printf_common+0xa8>
 800648a:	2301      	movs	r3, #1
 800648c:	4652      	mov	r2, sl
 800648e:	4649      	mov	r1, r9
 8006490:	4638      	mov	r0, r7
 8006492:	47c0      	blx	r8
 8006494:	3001      	adds	r0, #1
 8006496:	d103      	bne.n	80064a0 <_printf_common+0xac>
 8006498:	f04f 30ff 	mov.w	r0, #4294967295
 800649c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a0:	3501      	adds	r5, #1
 80064a2:	e7c6      	b.n	8006432 <_printf_common+0x3e>
 80064a4:	18e1      	adds	r1, r4, r3
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	2030      	movs	r0, #48	; 0x30
 80064aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064ae:	4422      	add	r2, r4
 80064b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064b8:	3302      	adds	r3, #2
 80064ba:	e7c7      	b.n	800644c <_printf_common+0x58>
 80064bc:	2301      	movs	r3, #1
 80064be:	4622      	mov	r2, r4
 80064c0:	4649      	mov	r1, r9
 80064c2:	4638      	mov	r0, r7
 80064c4:	47c0      	blx	r8
 80064c6:	3001      	adds	r0, #1
 80064c8:	d0e6      	beq.n	8006498 <_printf_common+0xa4>
 80064ca:	3601      	adds	r6, #1
 80064cc:	e7d9      	b.n	8006482 <_printf_common+0x8e>
	...

080064d0 <_printf_i>:
 80064d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064d4:	7e0f      	ldrb	r7, [r1, #24]
 80064d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064d8:	2f78      	cmp	r7, #120	; 0x78
 80064da:	4691      	mov	r9, r2
 80064dc:	4680      	mov	r8, r0
 80064de:	460c      	mov	r4, r1
 80064e0:	469a      	mov	sl, r3
 80064e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064e6:	d807      	bhi.n	80064f8 <_printf_i+0x28>
 80064e8:	2f62      	cmp	r7, #98	; 0x62
 80064ea:	d80a      	bhi.n	8006502 <_printf_i+0x32>
 80064ec:	2f00      	cmp	r7, #0
 80064ee:	f000 80d4 	beq.w	800669a <_printf_i+0x1ca>
 80064f2:	2f58      	cmp	r7, #88	; 0x58
 80064f4:	f000 80c0 	beq.w	8006678 <_printf_i+0x1a8>
 80064f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006500:	e03a      	b.n	8006578 <_printf_i+0xa8>
 8006502:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006506:	2b15      	cmp	r3, #21
 8006508:	d8f6      	bhi.n	80064f8 <_printf_i+0x28>
 800650a:	a101      	add	r1, pc, #4	; (adr r1, 8006510 <_printf_i+0x40>)
 800650c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006510:	08006569 	.word	0x08006569
 8006514:	0800657d 	.word	0x0800657d
 8006518:	080064f9 	.word	0x080064f9
 800651c:	080064f9 	.word	0x080064f9
 8006520:	080064f9 	.word	0x080064f9
 8006524:	080064f9 	.word	0x080064f9
 8006528:	0800657d 	.word	0x0800657d
 800652c:	080064f9 	.word	0x080064f9
 8006530:	080064f9 	.word	0x080064f9
 8006534:	080064f9 	.word	0x080064f9
 8006538:	080064f9 	.word	0x080064f9
 800653c:	08006681 	.word	0x08006681
 8006540:	080065a9 	.word	0x080065a9
 8006544:	0800663b 	.word	0x0800663b
 8006548:	080064f9 	.word	0x080064f9
 800654c:	080064f9 	.word	0x080064f9
 8006550:	080066a3 	.word	0x080066a3
 8006554:	080064f9 	.word	0x080064f9
 8006558:	080065a9 	.word	0x080065a9
 800655c:	080064f9 	.word	0x080064f9
 8006560:	080064f9 	.word	0x080064f9
 8006564:	08006643 	.word	0x08006643
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	1d1a      	adds	r2, r3, #4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	602a      	str	r2, [r5, #0]
 8006570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006578:	2301      	movs	r3, #1
 800657a:	e09f      	b.n	80066bc <_printf_i+0x1ec>
 800657c:	6820      	ldr	r0, [r4, #0]
 800657e:	682b      	ldr	r3, [r5, #0]
 8006580:	0607      	lsls	r7, r0, #24
 8006582:	f103 0104 	add.w	r1, r3, #4
 8006586:	6029      	str	r1, [r5, #0]
 8006588:	d501      	bpl.n	800658e <_printf_i+0xbe>
 800658a:	681e      	ldr	r6, [r3, #0]
 800658c:	e003      	b.n	8006596 <_printf_i+0xc6>
 800658e:	0646      	lsls	r6, r0, #25
 8006590:	d5fb      	bpl.n	800658a <_printf_i+0xba>
 8006592:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006596:	2e00      	cmp	r6, #0
 8006598:	da03      	bge.n	80065a2 <_printf_i+0xd2>
 800659a:	232d      	movs	r3, #45	; 0x2d
 800659c:	4276      	negs	r6, r6
 800659e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065a2:	485a      	ldr	r0, [pc, #360]	; (800670c <_printf_i+0x23c>)
 80065a4:	230a      	movs	r3, #10
 80065a6:	e012      	b.n	80065ce <_printf_i+0xfe>
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	6820      	ldr	r0, [r4, #0]
 80065ac:	1d19      	adds	r1, r3, #4
 80065ae:	6029      	str	r1, [r5, #0]
 80065b0:	0605      	lsls	r5, r0, #24
 80065b2:	d501      	bpl.n	80065b8 <_printf_i+0xe8>
 80065b4:	681e      	ldr	r6, [r3, #0]
 80065b6:	e002      	b.n	80065be <_printf_i+0xee>
 80065b8:	0641      	lsls	r1, r0, #25
 80065ba:	d5fb      	bpl.n	80065b4 <_printf_i+0xe4>
 80065bc:	881e      	ldrh	r6, [r3, #0]
 80065be:	4853      	ldr	r0, [pc, #332]	; (800670c <_printf_i+0x23c>)
 80065c0:	2f6f      	cmp	r7, #111	; 0x6f
 80065c2:	bf0c      	ite	eq
 80065c4:	2308      	moveq	r3, #8
 80065c6:	230a      	movne	r3, #10
 80065c8:	2100      	movs	r1, #0
 80065ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065ce:	6865      	ldr	r5, [r4, #4]
 80065d0:	60a5      	str	r5, [r4, #8]
 80065d2:	2d00      	cmp	r5, #0
 80065d4:	bfa2      	ittt	ge
 80065d6:	6821      	ldrge	r1, [r4, #0]
 80065d8:	f021 0104 	bicge.w	r1, r1, #4
 80065dc:	6021      	strge	r1, [r4, #0]
 80065de:	b90e      	cbnz	r6, 80065e4 <_printf_i+0x114>
 80065e0:	2d00      	cmp	r5, #0
 80065e2:	d04b      	beq.n	800667c <_printf_i+0x1ac>
 80065e4:	4615      	mov	r5, r2
 80065e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80065ea:	fb03 6711 	mls	r7, r3, r1, r6
 80065ee:	5dc7      	ldrb	r7, [r0, r7]
 80065f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065f4:	4637      	mov	r7, r6
 80065f6:	42bb      	cmp	r3, r7
 80065f8:	460e      	mov	r6, r1
 80065fa:	d9f4      	bls.n	80065e6 <_printf_i+0x116>
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	d10b      	bne.n	8006618 <_printf_i+0x148>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	07de      	lsls	r6, r3, #31
 8006604:	d508      	bpl.n	8006618 <_printf_i+0x148>
 8006606:	6923      	ldr	r3, [r4, #16]
 8006608:	6861      	ldr	r1, [r4, #4]
 800660a:	4299      	cmp	r1, r3
 800660c:	bfde      	ittt	le
 800660e:	2330      	movle	r3, #48	; 0x30
 8006610:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006614:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006618:	1b52      	subs	r2, r2, r5
 800661a:	6122      	str	r2, [r4, #16]
 800661c:	f8cd a000 	str.w	sl, [sp]
 8006620:	464b      	mov	r3, r9
 8006622:	aa03      	add	r2, sp, #12
 8006624:	4621      	mov	r1, r4
 8006626:	4640      	mov	r0, r8
 8006628:	f7ff fee4 	bl	80063f4 <_printf_common>
 800662c:	3001      	adds	r0, #1
 800662e:	d14a      	bne.n	80066c6 <_printf_i+0x1f6>
 8006630:	f04f 30ff 	mov.w	r0, #4294967295
 8006634:	b004      	add	sp, #16
 8006636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	f043 0320 	orr.w	r3, r3, #32
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	4833      	ldr	r0, [pc, #204]	; (8006710 <_printf_i+0x240>)
 8006644:	2778      	movs	r7, #120	; 0x78
 8006646:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	6829      	ldr	r1, [r5, #0]
 800664e:	061f      	lsls	r7, r3, #24
 8006650:	f851 6b04 	ldr.w	r6, [r1], #4
 8006654:	d402      	bmi.n	800665c <_printf_i+0x18c>
 8006656:	065f      	lsls	r7, r3, #25
 8006658:	bf48      	it	mi
 800665a:	b2b6      	uxthmi	r6, r6
 800665c:	07df      	lsls	r7, r3, #31
 800665e:	bf48      	it	mi
 8006660:	f043 0320 	orrmi.w	r3, r3, #32
 8006664:	6029      	str	r1, [r5, #0]
 8006666:	bf48      	it	mi
 8006668:	6023      	strmi	r3, [r4, #0]
 800666a:	b91e      	cbnz	r6, 8006674 <_printf_i+0x1a4>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	f023 0320 	bic.w	r3, r3, #32
 8006672:	6023      	str	r3, [r4, #0]
 8006674:	2310      	movs	r3, #16
 8006676:	e7a7      	b.n	80065c8 <_printf_i+0xf8>
 8006678:	4824      	ldr	r0, [pc, #144]	; (800670c <_printf_i+0x23c>)
 800667a:	e7e4      	b.n	8006646 <_printf_i+0x176>
 800667c:	4615      	mov	r5, r2
 800667e:	e7bd      	b.n	80065fc <_printf_i+0x12c>
 8006680:	682b      	ldr	r3, [r5, #0]
 8006682:	6826      	ldr	r6, [r4, #0]
 8006684:	6961      	ldr	r1, [r4, #20]
 8006686:	1d18      	adds	r0, r3, #4
 8006688:	6028      	str	r0, [r5, #0]
 800668a:	0635      	lsls	r5, r6, #24
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	d501      	bpl.n	8006694 <_printf_i+0x1c4>
 8006690:	6019      	str	r1, [r3, #0]
 8006692:	e002      	b.n	800669a <_printf_i+0x1ca>
 8006694:	0670      	lsls	r0, r6, #25
 8006696:	d5fb      	bpl.n	8006690 <_printf_i+0x1c0>
 8006698:	8019      	strh	r1, [r3, #0]
 800669a:	2300      	movs	r3, #0
 800669c:	6123      	str	r3, [r4, #16]
 800669e:	4615      	mov	r5, r2
 80066a0:	e7bc      	b.n	800661c <_printf_i+0x14c>
 80066a2:	682b      	ldr	r3, [r5, #0]
 80066a4:	1d1a      	adds	r2, r3, #4
 80066a6:	602a      	str	r2, [r5, #0]
 80066a8:	681d      	ldr	r5, [r3, #0]
 80066aa:	6862      	ldr	r2, [r4, #4]
 80066ac:	2100      	movs	r1, #0
 80066ae:	4628      	mov	r0, r5
 80066b0:	f7f9 fd8e 	bl	80001d0 <memchr>
 80066b4:	b108      	cbz	r0, 80066ba <_printf_i+0x1ea>
 80066b6:	1b40      	subs	r0, r0, r5
 80066b8:	6060      	str	r0, [r4, #4]
 80066ba:	6863      	ldr	r3, [r4, #4]
 80066bc:	6123      	str	r3, [r4, #16]
 80066be:	2300      	movs	r3, #0
 80066c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066c4:	e7aa      	b.n	800661c <_printf_i+0x14c>
 80066c6:	6923      	ldr	r3, [r4, #16]
 80066c8:	462a      	mov	r2, r5
 80066ca:	4649      	mov	r1, r9
 80066cc:	4640      	mov	r0, r8
 80066ce:	47d0      	blx	sl
 80066d0:	3001      	adds	r0, #1
 80066d2:	d0ad      	beq.n	8006630 <_printf_i+0x160>
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	079b      	lsls	r3, r3, #30
 80066d8:	d413      	bmi.n	8006702 <_printf_i+0x232>
 80066da:	68e0      	ldr	r0, [r4, #12]
 80066dc:	9b03      	ldr	r3, [sp, #12]
 80066de:	4298      	cmp	r0, r3
 80066e0:	bfb8      	it	lt
 80066e2:	4618      	movlt	r0, r3
 80066e4:	e7a6      	b.n	8006634 <_printf_i+0x164>
 80066e6:	2301      	movs	r3, #1
 80066e8:	4632      	mov	r2, r6
 80066ea:	4649      	mov	r1, r9
 80066ec:	4640      	mov	r0, r8
 80066ee:	47d0      	blx	sl
 80066f0:	3001      	adds	r0, #1
 80066f2:	d09d      	beq.n	8006630 <_printf_i+0x160>
 80066f4:	3501      	adds	r5, #1
 80066f6:	68e3      	ldr	r3, [r4, #12]
 80066f8:	9903      	ldr	r1, [sp, #12]
 80066fa:	1a5b      	subs	r3, r3, r1
 80066fc:	42ab      	cmp	r3, r5
 80066fe:	dcf2      	bgt.n	80066e6 <_printf_i+0x216>
 8006700:	e7eb      	b.n	80066da <_printf_i+0x20a>
 8006702:	2500      	movs	r5, #0
 8006704:	f104 0619 	add.w	r6, r4, #25
 8006708:	e7f5      	b.n	80066f6 <_printf_i+0x226>
 800670a:	bf00      	nop
 800670c:	080087c2 	.word	0x080087c2
 8006710:	080087d3 	.word	0x080087d3

08006714 <std>:
 8006714:	2300      	movs	r3, #0
 8006716:	b510      	push	{r4, lr}
 8006718:	4604      	mov	r4, r0
 800671a:	e9c0 3300 	strd	r3, r3, [r0]
 800671e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006722:	6083      	str	r3, [r0, #8]
 8006724:	8181      	strh	r1, [r0, #12]
 8006726:	6643      	str	r3, [r0, #100]	; 0x64
 8006728:	81c2      	strh	r2, [r0, #14]
 800672a:	6183      	str	r3, [r0, #24]
 800672c:	4619      	mov	r1, r3
 800672e:	2208      	movs	r2, #8
 8006730:	305c      	adds	r0, #92	; 0x5c
 8006732:	f000 f9e5 	bl	8006b00 <memset>
 8006736:	4b0d      	ldr	r3, [pc, #52]	; (800676c <std+0x58>)
 8006738:	6263      	str	r3, [r4, #36]	; 0x24
 800673a:	4b0d      	ldr	r3, [pc, #52]	; (8006770 <std+0x5c>)
 800673c:	62a3      	str	r3, [r4, #40]	; 0x28
 800673e:	4b0d      	ldr	r3, [pc, #52]	; (8006774 <std+0x60>)
 8006740:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006742:	4b0d      	ldr	r3, [pc, #52]	; (8006778 <std+0x64>)
 8006744:	6323      	str	r3, [r4, #48]	; 0x30
 8006746:	4b0d      	ldr	r3, [pc, #52]	; (800677c <std+0x68>)
 8006748:	6224      	str	r4, [r4, #32]
 800674a:	429c      	cmp	r4, r3
 800674c:	d006      	beq.n	800675c <std+0x48>
 800674e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006752:	4294      	cmp	r4, r2
 8006754:	d002      	beq.n	800675c <std+0x48>
 8006756:	33d0      	adds	r3, #208	; 0xd0
 8006758:	429c      	cmp	r4, r3
 800675a:	d105      	bne.n	8006768 <std+0x54>
 800675c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006764:	f000 ba58 	b.w	8006c18 <__retarget_lock_init_recursive>
 8006768:	bd10      	pop	{r4, pc}
 800676a:	bf00      	nop
 800676c:	08006951 	.word	0x08006951
 8006770:	08006973 	.word	0x08006973
 8006774:	080069ab 	.word	0x080069ab
 8006778:	080069cf 	.word	0x080069cf
 800677c:	200003ec 	.word	0x200003ec

08006780 <stdio_exit_handler>:
 8006780:	4a02      	ldr	r2, [pc, #8]	; (800678c <stdio_exit_handler+0xc>)
 8006782:	4903      	ldr	r1, [pc, #12]	; (8006790 <stdio_exit_handler+0x10>)
 8006784:	4803      	ldr	r0, [pc, #12]	; (8006794 <stdio_exit_handler+0x14>)
 8006786:	f000 b869 	b.w	800685c <_fwalk_sglue>
 800678a:	bf00      	nop
 800678c:	20000010 	.word	0x20000010
 8006790:	080081b1 	.word	0x080081b1
 8006794:	2000001c 	.word	0x2000001c

08006798 <cleanup_stdio>:
 8006798:	6841      	ldr	r1, [r0, #4]
 800679a:	4b0c      	ldr	r3, [pc, #48]	; (80067cc <cleanup_stdio+0x34>)
 800679c:	4299      	cmp	r1, r3
 800679e:	b510      	push	{r4, lr}
 80067a0:	4604      	mov	r4, r0
 80067a2:	d001      	beq.n	80067a8 <cleanup_stdio+0x10>
 80067a4:	f001 fd04 	bl	80081b0 <_fflush_r>
 80067a8:	68a1      	ldr	r1, [r4, #8]
 80067aa:	4b09      	ldr	r3, [pc, #36]	; (80067d0 <cleanup_stdio+0x38>)
 80067ac:	4299      	cmp	r1, r3
 80067ae:	d002      	beq.n	80067b6 <cleanup_stdio+0x1e>
 80067b0:	4620      	mov	r0, r4
 80067b2:	f001 fcfd 	bl	80081b0 <_fflush_r>
 80067b6:	68e1      	ldr	r1, [r4, #12]
 80067b8:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <cleanup_stdio+0x3c>)
 80067ba:	4299      	cmp	r1, r3
 80067bc:	d004      	beq.n	80067c8 <cleanup_stdio+0x30>
 80067be:	4620      	mov	r0, r4
 80067c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067c4:	f001 bcf4 	b.w	80081b0 <_fflush_r>
 80067c8:	bd10      	pop	{r4, pc}
 80067ca:	bf00      	nop
 80067cc:	200003ec 	.word	0x200003ec
 80067d0:	20000454 	.word	0x20000454
 80067d4:	200004bc 	.word	0x200004bc

080067d8 <global_stdio_init.part.0>:
 80067d8:	b510      	push	{r4, lr}
 80067da:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <global_stdio_init.part.0+0x30>)
 80067dc:	4c0b      	ldr	r4, [pc, #44]	; (800680c <global_stdio_init.part.0+0x34>)
 80067de:	4a0c      	ldr	r2, [pc, #48]	; (8006810 <global_stdio_init.part.0+0x38>)
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	4620      	mov	r0, r4
 80067e4:	2200      	movs	r2, #0
 80067e6:	2104      	movs	r1, #4
 80067e8:	f7ff ff94 	bl	8006714 <std>
 80067ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80067f0:	2201      	movs	r2, #1
 80067f2:	2109      	movs	r1, #9
 80067f4:	f7ff ff8e 	bl	8006714 <std>
 80067f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80067fc:	2202      	movs	r2, #2
 80067fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006802:	2112      	movs	r1, #18
 8006804:	f7ff bf86 	b.w	8006714 <std>
 8006808:	20000524 	.word	0x20000524
 800680c:	200003ec 	.word	0x200003ec
 8006810:	08006781 	.word	0x08006781

08006814 <__sfp_lock_acquire>:
 8006814:	4801      	ldr	r0, [pc, #4]	; (800681c <__sfp_lock_acquire+0x8>)
 8006816:	f000 ba00 	b.w	8006c1a <__retarget_lock_acquire_recursive>
 800681a:	bf00      	nop
 800681c:	2000052d 	.word	0x2000052d

08006820 <__sfp_lock_release>:
 8006820:	4801      	ldr	r0, [pc, #4]	; (8006828 <__sfp_lock_release+0x8>)
 8006822:	f000 b9fb 	b.w	8006c1c <__retarget_lock_release_recursive>
 8006826:	bf00      	nop
 8006828:	2000052d 	.word	0x2000052d

0800682c <__sinit>:
 800682c:	b510      	push	{r4, lr}
 800682e:	4604      	mov	r4, r0
 8006830:	f7ff fff0 	bl	8006814 <__sfp_lock_acquire>
 8006834:	6a23      	ldr	r3, [r4, #32]
 8006836:	b11b      	cbz	r3, 8006840 <__sinit+0x14>
 8006838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800683c:	f7ff bff0 	b.w	8006820 <__sfp_lock_release>
 8006840:	4b04      	ldr	r3, [pc, #16]	; (8006854 <__sinit+0x28>)
 8006842:	6223      	str	r3, [r4, #32]
 8006844:	4b04      	ldr	r3, [pc, #16]	; (8006858 <__sinit+0x2c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1f5      	bne.n	8006838 <__sinit+0xc>
 800684c:	f7ff ffc4 	bl	80067d8 <global_stdio_init.part.0>
 8006850:	e7f2      	b.n	8006838 <__sinit+0xc>
 8006852:	bf00      	nop
 8006854:	08006799 	.word	0x08006799
 8006858:	20000524 	.word	0x20000524

0800685c <_fwalk_sglue>:
 800685c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006860:	4607      	mov	r7, r0
 8006862:	4688      	mov	r8, r1
 8006864:	4614      	mov	r4, r2
 8006866:	2600      	movs	r6, #0
 8006868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800686c:	f1b9 0901 	subs.w	r9, r9, #1
 8006870:	d505      	bpl.n	800687e <_fwalk_sglue+0x22>
 8006872:	6824      	ldr	r4, [r4, #0]
 8006874:	2c00      	cmp	r4, #0
 8006876:	d1f7      	bne.n	8006868 <_fwalk_sglue+0xc>
 8006878:	4630      	mov	r0, r6
 800687a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800687e:	89ab      	ldrh	r3, [r5, #12]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d907      	bls.n	8006894 <_fwalk_sglue+0x38>
 8006884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006888:	3301      	adds	r3, #1
 800688a:	d003      	beq.n	8006894 <_fwalk_sglue+0x38>
 800688c:	4629      	mov	r1, r5
 800688e:	4638      	mov	r0, r7
 8006890:	47c0      	blx	r8
 8006892:	4306      	orrs	r6, r0
 8006894:	3568      	adds	r5, #104	; 0x68
 8006896:	e7e9      	b.n	800686c <_fwalk_sglue+0x10>

08006898 <_puts_r>:
 8006898:	6a03      	ldr	r3, [r0, #32]
 800689a:	b570      	push	{r4, r5, r6, lr}
 800689c:	6884      	ldr	r4, [r0, #8]
 800689e:	4605      	mov	r5, r0
 80068a0:	460e      	mov	r6, r1
 80068a2:	b90b      	cbnz	r3, 80068a8 <_puts_r+0x10>
 80068a4:	f7ff ffc2 	bl	800682c <__sinit>
 80068a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068aa:	07db      	lsls	r3, r3, #31
 80068ac:	d405      	bmi.n	80068ba <_puts_r+0x22>
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	0598      	lsls	r0, r3, #22
 80068b2:	d402      	bmi.n	80068ba <_puts_r+0x22>
 80068b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068b6:	f000 f9b0 	bl	8006c1a <__retarget_lock_acquire_recursive>
 80068ba:	89a3      	ldrh	r3, [r4, #12]
 80068bc:	0719      	lsls	r1, r3, #28
 80068be:	d513      	bpl.n	80068e8 <_puts_r+0x50>
 80068c0:	6923      	ldr	r3, [r4, #16]
 80068c2:	b18b      	cbz	r3, 80068e8 <_puts_r+0x50>
 80068c4:	3e01      	subs	r6, #1
 80068c6:	68a3      	ldr	r3, [r4, #8]
 80068c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068cc:	3b01      	subs	r3, #1
 80068ce:	60a3      	str	r3, [r4, #8]
 80068d0:	b9e9      	cbnz	r1, 800690e <_puts_r+0x76>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	da2e      	bge.n	8006934 <_puts_r+0x9c>
 80068d6:	4622      	mov	r2, r4
 80068d8:	210a      	movs	r1, #10
 80068da:	4628      	mov	r0, r5
 80068dc:	f000 f87b 	bl	80069d6 <__swbuf_r>
 80068e0:	3001      	adds	r0, #1
 80068e2:	d007      	beq.n	80068f4 <_puts_r+0x5c>
 80068e4:	250a      	movs	r5, #10
 80068e6:	e007      	b.n	80068f8 <_puts_r+0x60>
 80068e8:	4621      	mov	r1, r4
 80068ea:	4628      	mov	r0, r5
 80068ec:	f000 f8b0 	bl	8006a50 <__swsetup_r>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d0e7      	beq.n	80068c4 <_puts_r+0x2c>
 80068f4:	f04f 35ff 	mov.w	r5, #4294967295
 80068f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068fa:	07da      	lsls	r2, r3, #31
 80068fc:	d405      	bmi.n	800690a <_puts_r+0x72>
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	059b      	lsls	r3, r3, #22
 8006902:	d402      	bmi.n	800690a <_puts_r+0x72>
 8006904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006906:	f000 f989 	bl	8006c1c <__retarget_lock_release_recursive>
 800690a:	4628      	mov	r0, r5
 800690c:	bd70      	pop	{r4, r5, r6, pc}
 800690e:	2b00      	cmp	r3, #0
 8006910:	da04      	bge.n	800691c <_puts_r+0x84>
 8006912:	69a2      	ldr	r2, [r4, #24]
 8006914:	429a      	cmp	r2, r3
 8006916:	dc06      	bgt.n	8006926 <_puts_r+0x8e>
 8006918:	290a      	cmp	r1, #10
 800691a:	d004      	beq.n	8006926 <_puts_r+0x8e>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	6022      	str	r2, [r4, #0]
 8006922:	7019      	strb	r1, [r3, #0]
 8006924:	e7cf      	b.n	80068c6 <_puts_r+0x2e>
 8006926:	4622      	mov	r2, r4
 8006928:	4628      	mov	r0, r5
 800692a:	f000 f854 	bl	80069d6 <__swbuf_r>
 800692e:	3001      	adds	r0, #1
 8006930:	d1c9      	bne.n	80068c6 <_puts_r+0x2e>
 8006932:	e7df      	b.n	80068f4 <_puts_r+0x5c>
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	250a      	movs	r5, #10
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	6022      	str	r2, [r4, #0]
 800693c:	701d      	strb	r5, [r3, #0]
 800693e:	e7db      	b.n	80068f8 <_puts_r+0x60>

08006940 <puts>:
 8006940:	4b02      	ldr	r3, [pc, #8]	; (800694c <puts+0xc>)
 8006942:	4601      	mov	r1, r0
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	f7ff bfa7 	b.w	8006898 <_puts_r>
 800694a:	bf00      	nop
 800694c:	20000068 	.word	0x20000068

08006950 <__sread>:
 8006950:	b510      	push	{r4, lr}
 8006952:	460c      	mov	r4, r1
 8006954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006958:	f000 f900 	bl	8006b5c <_read_r>
 800695c:	2800      	cmp	r0, #0
 800695e:	bfab      	itete	ge
 8006960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006962:	89a3      	ldrhlt	r3, [r4, #12]
 8006964:	181b      	addge	r3, r3, r0
 8006966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800696a:	bfac      	ite	ge
 800696c:	6563      	strge	r3, [r4, #84]	; 0x54
 800696e:	81a3      	strhlt	r3, [r4, #12]
 8006970:	bd10      	pop	{r4, pc}

08006972 <__swrite>:
 8006972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006976:	461f      	mov	r7, r3
 8006978:	898b      	ldrh	r3, [r1, #12]
 800697a:	05db      	lsls	r3, r3, #23
 800697c:	4605      	mov	r5, r0
 800697e:	460c      	mov	r4, r1
 8006980:	4616      	mov	r6, r2
 8006982:	d505      	bpl.n	8006990 <__swrite+0x1e>
 8006984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006988:	2302      	movs	r3, #2
 800698a:	2200      	movs	r2, #0
 800698c:	f000 f8d4 	bl	8006b38 <_lseek_r>
 8006990:	89a3      	ldrh	r3, [r4, #12]
 8006992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800699a:	81a3      	strh	r3, [r4, #12]
 800699c:	4632      	mov	r2, r6
 800699e:	463b      	mov	r3, r7
 80069a0:	4628      	mov	r0, r5
 80069a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069a6:	f000 b8fb 	b.w	8006ba0 <_write_r>

080069aa <__sseek>:
 80069aa:	b510      	push	{r4, lr}
 80069ac:	460c      	mov	r4, r1
 80069ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b2:	f000 f8c1 	bl	8006b38 <_lseek_r>
 80069b6:	1c43      	adds	r3, r0, #1
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	bf15      	itete	ne
 80069bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80069be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069c6:	81a3      	strheq	r3, [r4, #12]
 80069c8:	bf18      	it	ne
 80069ca:	81a3      	strhne	r3, [r4, #12]
 80069cc:	bd10      	pop	{r4, pc}

080069ce <__sclose>:
 80069ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d2:	f000 b8a1 	b.w	8006b18 <_close_r>

080069d6 <__swbuf_r>:
 80069d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d8:	460e      	mov	r6, r1
 80069da:	4614      	mov	r4, r2
 80069dc:	4605      	mov	r5, r0
 80069de:	b118      	cbz	r0, 80069e8 <__swbuf_r+0x12>
 80069e0:	6a03      	ldr	r3, [r0, #32]
 80069e2:	b90b      	cbnz	r3, 80069e8 <__swbuf_r+0x12>
 80069e4:	f7ff ff22 	bl	800682c <__sinit>
 80069e8:	69a3      	ldr	r3, [r4, #24]
 80069ea:	60a3      	str	r3, [r4, #8]
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	071a      	lsls	r2, r3, #28
 80069f0:	d525      	bpl.n	8006a3e <__swbuf_r+0x68>
 80069f2:	6923      	ldr	r3, [r4, #16]
 80069f4:	b31b      	cbz	r3, 8006a3e <__swbuf_r+0x68>
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	6922      	ldr	r2, [r4, #16]
 80069fa:	1a98      	subs	r0, r3, r2
 80069fc:	6963      	ldr	r3, [r4, #20]
 80069fe:	b2f6      	uxtb	r6, r6
 8006a00:	4283      	cmp	r3, r0
 8006a02:	4637      	mov	r7, r6
 8006a04:	dc04      	bgt.n	8006a10 <__swbuf_r+0x3a>
 8006a06:	4621      	mov	r1, r4
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f001 fbd1 	bl	80081b0 <_fflush_r>
 8006a0e:	b9e0      	cbnz	r0, 8006a4a <__swbuf_r+0x74>
 8006a10:	68a3      	ldr	r3, [r4, #8]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	60a3      	str	r3, [r4, #8]
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	6022      	str	r2, [r4, #0]
 8006a1c:	701e      	strb	r6, [r3, #0]
 8006a1e:	6962      	ldr	r2, [r4, #20]
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d004      	beq.n	8006a30 <__swbuf_r+0x5a>
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	07db      	lsls	r3, r3, #31
 8006a2a:	d506      	bpl.n	8006a3a <__swbuf_r+0x64>
 8006a2c:	2e0a      	cmp	r6, #10
 8006a2e:	d104      	bne.n	8006a3a <__swbuf_r+0x64>
 8006a30:	4621      	mov	r1, r4
 8006a32:	4628      	mov	r0, r5
 8006a34:	f001 fbbc 	bl	80081b0 <_fflush_r>
 8006a38:	b938      	cbnz	r0, 8006a4a <__swbuf_r+0x74>
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a3e:	4621      	mov	r1, r4
 8006a40:	4628      	mov	r0, r5
 8006a42:	f000 f805 	bl	8006a50 <__swsetup_r>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	d0d5      	beq.n	80069f6 <__swbuf_r+0x20>
 8006a4a:	f04f 37ff 	mov.w	r7, #4294967295
 8006a4e:	e7f4      	b.n	8006a3a <__swbuf_r+0x64>

08006a50 <__swsetup_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4b2a      	ldr	r3, [pc, #168]	; (8006afc <__swsetup_r+0xac>)
 8006a54:	4605      	mov	r5, r0
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	460c      	mov	r4, r1
 8006a5a:	b118      	cbz	r0, 8006a64 <__swsetup_r+0x14>
 8006a5c:	6a03      	ldr	r3, [r0, #32]
 8006a5e:	b90b      	cbnz	r3, 8006a64 <__swsetup_r+0x14>
 8006a60:	f7ff fee4 	bl	800682c <__sinit>
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a6a:	0718      	lsls	r0, r3, #28
 8006a6c:	d422      	bmi.n	8006ab4 <__swsetup_r+0x64>
 8006a6e:	06d9      	lsls	r1, r3, #27
 8006a70:	d407      	bmi.n	8006a82 <__swsetup_r+0x32>
 8006a72:	2309      	movs	r3, #9
 8006a74:	602b      	str	r3, [r5, #0]
 8006a76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a7a:	81a3      	strh	r3, [r4, #12]
 8006a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a80:	e034      	b.n	8006aec <__swsetup_r+0x9c>
 8006a82:	0758      	lsls	r0, r3, #29
 8006a84:	d512      	bpl.n	8006aac <__swsetup_r+0x5c>
 8006a86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a88:	b141      	cbz	r1, 8006a9c <__swsetup_r+0x4c>
 8006a8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a8e:	4299      	cmp	r1, r3
 8006a90:	d002      	beq.n	8006a98 <__swsetup_r+0x48>
 8006a92:	4628      	mov	r0, r5
 8006a94:	f000 ff3e 	bl	8007914 <_free_r>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	6363      	str	r3, [r4, #52]	; 0x34
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006aa2:	81a3      	strh	r3, [r4, #12]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	6063      	str	r3, [r4, #4]
 8006aa8:	6923      	ldr	r3, [r4, #16]
 8006aaa:	6023      	str	r3, [r4, #0]
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	f043 0308 	orr.w	r3, r3, #8
 8006ab2:	81a3      	strh	r3, [r4, #12]
 8006ab4:	6923      	ldr	r3, [r4, #16]
 8006ab6:	b94b      	cbnz	r3, 8006acc <__swsetup_r+0x7c>
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ac2:	d003      	beq.n	8006acc <__swsetup_r+0x7c>
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f001 fbc0 	bl	800824c <__smakebuf_r>
 8006acc:	89a0      	ldrh	r0, [r4, #12]
 8006ace:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ad2:	f010 0301 	ands.w	r3, r0, #1
 8006ad6:	d00a      	beq.n	8006aee <__swsetup_r+0x9e>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60a3      	str	r3, [r4, #8]
 8006adc:	6963      	ldr	r3, [r4, #20]
 8006ade:	425b      	negs	r3, r3
 8006ae0:	61a3      	str	r3, [r4, #24]
 8006ae2:	6923      	ldr	r3, [r4, #16]
 8006ae4:	b943      	cbnz	r3, 8006af8 <__swsetup_r+0xa8>
 8006ae6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006aea:	d1c4      	bne.n	8006a76 <__swsetup_r+0x26>
 8006aec:	bd38      	pop	{r3, r4, r5, pc}
 8006aee:	0781      	lsls	r1, r0, #30
 8006af0:	bf58      	it	pl
 8006af2:	6963      	ldrpl	r3, [r4, #20]
 8006af4:	60a3      	str	r3, [r4, #8]
 8006af6:	e7f4      	b.n	8006ae2 <__swsetup_r+0x92>
 8006af8:	2000      	movs	r0, #0
 8006afa:	e7f7      	b.n	8006aec <__swsetup_r+0x9c>
 8006afc:	20000068 	.word	0x20000068

08006b00 <memset>:
 8006b00:	4402      	add	r2, r0
 8006b02:	4603      	mov	r3, r0
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d100      	bne.n	8006b0a <memset+0xa>
 8006b08:	4770      	bx	lr
 8006b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b0e:	e7f9      	b.n	8006b04 <memset+0x4>

08006b10 <_localeconv_r>:
 8006b10:	4800      	ldr	r0, [pc, #0]	; (8006b14 <_localeconv_r+0x4>)
 8006b12:	4770      	bx	lr
 8006b14:	2000015c 	.word	0x2000015c

08006b18 <_close_r>:
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	4d06      	ldr	r5, [pc, #24]	; (8006b34 <_close_r+0x1c>)
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	4604      	mov	r4, r0
 8006b20:	4608      	mov	r0, r1
 8006b22:	602b      	str	r3, [r5, #0]
 8006b24:	f7fa ffa3 	bl	8001a6e <_close>
 8006b28:	1c43      	adds	r3, r0, #1
 8006b2a:	d102      	bne.n	8006b32 <_close_r+0x1a>
 8006b2c:	682b      	ldr	r3, [r5, #0]
 8006b2e:	b103      	cbz	r3, 8006b32 <_close_r+0x1a>
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	bd38      	pop	{r3, r4, r5, pc}
 8006b34:	20000528 	.word	0x20000528

08006b38 <_lseek_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4d07      	ldr	r5, [pc, #28]	; (8006b58 <_lseek_r+0x20>)
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	4608      	mov	r0, r1
 8006b40:	4611      	mov	r1, r2
 8006b42:	2200      	movs	r2, #0
 8006b44:	602a      	str	r2, [r5, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	f7fa ffb8 	bl	8001abc <_lseek>
 8006b4c:	1c43      	adds	r3, r0, #1
 8006b4e:	d102      	bne.n	8006b56 <_lseek_r+0x1e>
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	b103      	cbz	r3, 8006b56 <_lseek_r+0x1e>
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	bd38      	pop	{r3, r4, r5, pc}
 8006b58:	20000528 	.word	0x20000528

08006b5c <_read_r>:
 8006b5c:	b538      	push	{r3, r4, r5, lr}
 8006b5e:	4d07      	ldr	r5, [pc, #28]	; (8006b7c <_read_r+0x20>)
 8006b60:	4604      	mov	r4, r0
 8006b62:	4608      	mov	r0, r1
 8006b64:	4611      	mov	r1, r2
 8006b66:	2200      	movs	r2, #0
 8006b68:	602a      	str	r2, [r5, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f7fa ff46 	bl	80019fc <_read>
 8006b70:	1c43      	adds	r3, r0, #1
 8006b72:	d102      	bne.n	8006b7a <_read_r+0x1e>
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	b103      	cbz	r3, 8006b7a <_read_r+0x1e>
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	bd38      	pop	{r3, r4, r5, pc}
 8006b7c:	20000528 	.word	0x20000528

08006b80 <_sbrk_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	4d06      	ldr	r5, [pc, #24]	; (8006b9c <_sbrk_r+0x1c>)
 8006b84:	2300      	movs	r3, #0
 8006b86:	4604      	mov	r4, r0
 8006b88:	4608      	mov	r0, r1
 8006b8a:	602b      	str	r3, [r5, #0]
 8006b8c:	f7fa ffa4 	bl	8001ad8 <_sbrk>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d102      	bne.n	8006b9a <_sbrk_r+0x1a>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	b103      	cbz	r3, 8006b9a <_sbrk_r+0x1a>
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	20000528 	.word	0x20000528

08006ba0 <_write_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4d07      	ldr	r5, [pc, #28]	; (8006bc0 <_write_r+0x20>)
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	4608      	mov	r0, r1
 8006ba8:	4611      	mov	r1, r2
 8006baa:	2200      	movs	r2, #0
 8006bac:	602a      	str	r2, [r5, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f7fa ff41 	bl	8001a36 <_write>
 8006bb4:	1c43      	adds	r3, r0, #1
 8006bb6:	d102      	bne.n	8006bbe <_write_r+0x1e>
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	b103      	cbz	r3, 8006bbe <_write_r+0x1e>
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	bd38      	pop	{r3, r4, r5, pc}
 8006bc0:	20000528 	.word	0x20000528

08006bc4 <__errno>:
 8006bc4:	4b01      	ldr	r3, [pc, #4]	; (8006bcc <__errno+0x8>)
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	20000068 	.word	0x20000068

08006bd0 <__libc_init_array>:
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	4d0d      	ldr	r5, [pc, #52]	; (8006c08 <__libc_init_array+0x38>)
 8006bd4:	4c0d      	ldr	r4, [pc, #52]	; (8006c0c <__libc_init_array+0x3c>)
 8006bd6:	1b64      	subs	r4, r4, r5
 8006bd8:	10a4      	asrs	r4, r4, #2
 8006bda:	2600      	movs	r6, #0
 8006bdc:	42a6      	cmp	r6, r4
 8006bde:	d109      	bne.n	8006bf4 <__libc_init_array+0x24>
 8006be0:	4d0b      	ldr	r5, [pc, #44]	; (8006c10 <__libc_init_array+0x40>)
 8006be2:	4c0c      	ldr	r4, [pc, #48]	; (8006c14 <__libc_init_array+0x44>)
 8006be4:	f001 fd92 	bl	800870c <_init>
 8006be8:	1b64      	subs	r4, r4, r5
 8006bea:	10a4      	asrs	r4, r4, #2
 8006bec:	2600      	movs	r6, #0
 8006bee:	42a6      	cmp	r6, r4
 8006bf0:	d105      	bne.n	8006bfe <__libc_init_array+0x2e>
 8006bf2:	bd70      	pop	{r4, r5, r6, pc}
 8006bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bf8:	4798      	blx	r3
 8006bfa:	3601      	adds	r6, #1
 8006bfc:	e7ee      	b.n	8006bdc <__libc_init_array+0xc>
 8006bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c02:	4798      	blx	r3
 8006c04:	3601      	adds	r6, #1
 8006c06:	e7f2      	b.n	8006bee <__libc_init_array+0x1e>
 8006c08:	08008b2c 	.word	0x08008b2c
 8006c0c:	08008b2c 	.word	0x08008b2c
 8006c10:	08008b2c 	.word	0x08008b2c
 8006c14:	08008b30 	.word	0x08008b30

08006c18 <__retarget_lock_init_recursive>:
 8006c18:	4770      	bx	lr

08006c1a <__retarget_lock_acquire_recursive>:
 8006c1a:	4770      	bx	lr

08006c1c <__retarget_lock_release_recursive>:
 8006c1c:	4770      	bx	lr

08006c1e <quorem>:
 8006c1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c22:	6903      	ldr	r3, [r0, #16]
 8006c24:	690c      	ldr	r4, [r1, #16]
 8006c26:	42a3      	cmp	r3, r4
 8006c28:	4607      	mov	r7, r0
 8006c2a:	db7e      	blt.n	8006d2a <quorem+0x10c>
 8006c2c:	3c01      	subs	r4, #1
 8006c2e:	f101 0814 	add.w	r8, r1, #20
 8006c32:	f100 0514 	add.w	r5, r0, #20
 8006c36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c3a:	9301      	str	r3, [sp, #4]
 8006c3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c44:	3301      	adds	r3, #1
 8006c46:	429a      	cmp	r2, r3
 8006c48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c50:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c54:	d331      	bcc.n	8006cba <quorem+0x9c>
 8006c56:	f04f 0e00 	mov.w	lr, #0
 8006c5a:	4640      	mov	r0, r8
 8006c5c:	46ac      	mov	ip, r5
 8006c5e:	46f2      	mov	sl, lr
 8006c60:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c64:	b293      	uxth	r3, r2
 8006c66:	fb06 e303 	mla	r3, r6, r3, lr
 8006c6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c6e:	0c1a      	lsrs	r2, r3, #16
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	ebaa 0303 	sub.w	r3, sl, r3
 8006c76:	f8dc a000 	ldr.w	sl, [ip]
 8006c7a:	fa13 f38a 	uxtah	r3, r3, sl
 8006c7e:	fb06 220e 	mla	r2, r6, lr, r2
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	9b00      	ldr	r3, [sp, #0]
 8006c86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c8a:	b292      	uxth	r2, r2
 8006c8c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006c90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c94:	f8bd 3000 	ldrh.w	r3, [sp]
 8006c98:	4581      	cmp	r9, r0
 8006c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c9e:	f84c 3b04 	str.w	r3, [ip], #4
 8006ca2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ca6:	d2db      	bcs.n	8006c60 <quorem+0x42>
 8006ca8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006cac:	b92b      	cbnz	r3, 8006cba <quorem+0x9c>
 8006cae:	9b01      	ldr	r3, [sp, #4]
 8006cb0:	3b04      	subs	r3, #4
 8006cb2:	429d      	cmp	r5, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	d32c      	bcc.n	8006d12 <quorem+0xf4>
 8006cb8:	613c      	str	r4, [r7, #16]
 8006cba:	4638      	mov	r0, r7
 8006cbc:	f001 f8f2 	bl	8007ea4 <__mcmp>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	db22      	blt.n	8006d0a <quorem+0xec>
 8006cc4:	3601      	adds	r6, #1
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	2000      	movs	r0, #0
 8006cca:	f858 2b04 	ldr.w	r2, [r8], #4
 8006cce:	f8d1 c000 	ldr.w	ip, [r1]
 8006cd2:	b293      	uxth	r3, r2
 8006cd4:	1ac3      	subs	r3, r0, r3
 8006cd6:	0c12      	lsrs	r2, r2, #16
 8006cd8:	fa13 f38c 	uxtah	r3, r3, ip
 8006cdc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006ce0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cea:	45c1      	cmp	r9, r8
 8006cec:	f841 3b04 	str.w	r3, [r1], #4
 8006cf0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006cf4:	d2e9      	bcs.n	8006cca <quorem+0xac>
 8006cf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cfe:	b922      	cbnz	r2, 8006d0a <quorem+0xec>
 8006d00:	3b04      	subs	r3, #4
 8006d02:	429d      	cmp	r5, r3
 8006d04:	461a      	mov	r2, r3
 8006d06:	d30a      	bcc.n	8006d1e <quorem+0x100>
 8006d08:	613c      	str	r4, [r7, #16]
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	b003      	add	sp, #12
 8006d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d12:	6812      	ldr	r2, [r2, #0]
 8006d14:	3b04      	subs	r3, #4
 8006d16:	2a00      	cmp	r2, #0
 8006d18:	d1ce      	bne.n	8006cb8 <quorem+0x9a>
 8006d1a:	3c01      	subs	r4, #1
 8006d1c:	e7c9      	b.n	8006cb2 <quorem+0x94>
 8006d1e:	6812      	ldr	r2, [r2, #0]
 8006d20:	3b04      	subs	r3, #4
 8006d22:	2a00      	cmp	r2, #0
 8006d24:	d1f0      	bne.n	8006d08 <quorem+0xea>
 8006d26:	3c01      	subs	r4, #1
 8006d28:	e7eb      	b.n	8006d02 <quorem+0xe4>
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	e7ee      	b.n	8006d0c <quorem+0xee>
	...

08006d30 <_dtoa_r>:
 8006d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d34:	ed2d 8b04 	vpush	{d8-d9}
 8006d38:	69c5      	ldr	r5, [r0, #28]
 8006d3a:	b093      	sub	sp, #76	; 0x4c
 8006d3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006d40:	ec57 6b10 	vmov	r6, r7, d0
 8006d44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006d48:	9107      	str	r1, [sp, #28]
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	920a      	str	r2, [sp, #40]	; 0x28
 8006d4e:	930d      	str	r3, [sp, #52]	; 0x34
 8006d50:	b975      	cbnz	r5, 8006d70 <_dtoa_r+0x40>
 8006d52:	2010      	movs	r0, #16
 8006d54:	f7fe ffbc 	bl	8005cd0 <malloc>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	61e0      	str	r0, [r4, #28]
 8006d5c:	b920      	cbnz	r0, 8006d68 <_dtoa_r+0x38>
 8006d5e:	4bae      	ldr	r3, [pc, #696]	; (8007018 <_dtoa_r+0x2e8>)
 8006d60:	21ef      	movs	r1, #239	; 0xef
 8006d62:	48ae      	ldr	r0, [pc, #696]	; (800701c <_dtoa_r+0x2ec>)
 8006d64:	f001 fade 	bl	8008324 <__assert_func>
 8006d68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d6c:	6005      	str	r5, [r0, #0]
 8006d6e:	60c5      	str	r5, [r0, #12]
 8006d70:	69e3      	ldr	r3, [r4, #28]
 8006d72:	6819      	ldr	r1, [r3, #0]
 8006d74:	b151      	cbz	r1, 8006d8c <_dtoa_r+0x5c>
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	604a      	str	r2, [r1, #4]
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	4093      	lsls	r3, r2
 8006d7e:	608b      	str	r3, [r1, #8]
 8006d80:	4620      	mov	r0, r4
 8006d82:	f000 fe53 	bl	8007a2c <_Bfree>
 8006d86:	69e3      	ldr	r3, [r4, #28]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	1e3b      	subs	r3, r7, #0
 8006d8e:	bfbb      	ittet	lt
 8006d90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d94:	9303      	strlt	r3, [sp, #12]
 8006d96:	2300      	movge	r3, #0
 8006d98:	2201      	movlt	r2, #1
 8006d9a:	bfac      	ite	ge
 8006d9c:	f8c8 3000 	strge.w	r3, [r8]
 8006da0:	f8c8 2000 	strlt.w	r2, [r8]
 8006da4:	4b9e      	ldr	r3, [pc, #632]	; (8007020 <_dtoa_r+0x2f0>)
 8006da6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006daa:	ea33 0308 	bics.w	r3, r3, r8
 8006dae:	d11b      	bne.n	8006de8 <_dtoa_r+0xb8>
 8006db0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006db2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006dbc:	4333      	orrs	r3, r6
 8006dbe:	f000 8593 	beq.w	80078e8 <_dtoa_r+0xbb8>
 8006dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dc4:	b963      	cbnz	r3, 8006de0 <_dtoa_r+0xb0>
 8006dc6:	4b97      	ldr	r3, [pc, #604]	; (8007024 <_dtoa_r+0x2f4>)
 8006dc8:	e027      	b.n	8006e1a <_dtoa_r+0xea>
 8006dca:	4b97      	ldr	r3, [pc, #604]	; (8007028 <_dtoa_r+0x2f8>)
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	9800      	ldr	r0, [sp, #0]
 8006dd6:	b013      	add	sp, #76	; 0x4c
 8006dd8:	ecbd 8b04 	vpop	{d8-d9}
 8006ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de0:	4b90      	ldr	r3, [pc, #576]	; (8007024 <_dtoa_r+0x2f4>)
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	3303      	adds	r3, #3
 8006de6:	e7f3      	b.n	8006dd0 <_dtoa_r+0xa0>
 8006de8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006dec:	2200      	movs	r2, #0
 8006dee:	ec51 0b17 	vmov	r0, r1, d7
 8006df2:	eeb0 8a47 	vmov.f32	s16, s14
 8006df6:	eef0 8a67 	vmov.f32	s17, s15
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f7f9 fe64 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e00:	4681      	mov	r9, r0
 8006e02:	b160      	cbz	r0, 8006e1e <_dtoa_r+0xee>
 8006e04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e06:	2301      	movs	r3, #1
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 8568 	beq.w	80078e2 <_dtoa_r+0xbb2>
 8006e12:	4b86      	ldr	r3, [pc, #536]	; (800702c <_dtoa_r+0x2fc>)
 8006e14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	e7da      	b.n	8006dd4 <_dtoa_r+0xa4>
 8006e1e:	aa10      	add	r2, sp, #64	; 0x40
 8006e20:	a911      	add	r1, sp, #68	; 0x44
 8006e22:	4620      	mov	r0, r4
 8006e24:	eeb0 0a48 	vmov.f32	s0, s16
 8006e28:	eef0 0a68 	vmov.f32	s1, s17
 8006e2c:	f001 f8e0 	bl	8007ff0 <__d2b>
 8006e30:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006e34:	4682      	mov	sl, r0
 8006e36:	2d00      	cmp	r5, #0
 8006e38:	d07f      	beq.n	8006f3a <_dtoa_r+0x20a>
 8006e3a:	ee18 3a90 	vmov	r3, s17
 8006e3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e42:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006e46:	ec51 0b18 	vmov	r0, r1, d8
 8006e4a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006e4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e52:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006e56:	4619      	mov	r1, r3
 8006e58:	2200      	movs	r2, #0
 8006e5a:	4b75      	ldr	r3, [pc, #468]	; (8007030 <_dtoa_r+0x300>)
 8006e5c:	f7f9 fa14 	bl	8000288 <__aeabi_dsub>
 8006e60:	a367      	add	r3, pc, #412	; (adr r3, 8007000 <_dtoa_r+0x2d0>)
 8006e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e66:	f7f9 fbc7 	bl	80005f8 <__aeabi_dmul>
 8006e6a:	a367      	add	r3, pc, #412	; (adr r3, 8007008 <_dtoa_r+0x2d8>)
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	f7f9 fa0c 	bl	800028c <__adddf3>
 8006e74:	4606      	mov	r6, r0
 8006e76:	4628      	mov	r0, r5
 8006e78:	460f      	mov	r7, r1
 8006e7a:	f7f9 fb53 	bl	8000524 <__aeabi_i2d>
 8006e7e:	a364      	add	r3, pc, #400	; (adr r3, 8007010 <_dtoa_r+0x2e0>)
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	f7f9 fbb8 	bl	80005f8 <__aeabi_dmul>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	4639      	mov	r1, r7
 8006e90:	f7f9 f9fc 	bl	800028c <__adddf3>
 8006e94:	4606      	mov	r6, r0
 8006e96:	460f      	mov	r7, r1
 8006e98:	f7f9 fe5e 	bl	8000b58 <__aeabi_d2iz>
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	4683      	mov	fp, r0
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	4639      	mov	r1, r7
 8006ea6:	f7f9 fe19 	bl	8000adc <__aeabi_dcmplt>
 8006eaa:	b148      	cbz	r0, 8006ec0 <_dtoa_r+0x190>
 8006eac:	4658      	mov	r0, fp
 8006eae:	f7f9 fb39 	bl	8000524 <__aeabi_i2d>
 8006eb2:	4632      	mov	r2, r6
 8006eb4:	463b      	mov	r3, r7
 8006eb6:	f7f9 fe07 	bl	8000ac8 <__aeabi_dcmpeq>
 8006eba:	b908      	cbnz	r0, 8006ec0 <_dtoa_r+0x190>
 8006ebc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ec0:	f1bb 0f16 	cmp.w	fp, #22
 8006ec4:	d857      	bhi.n	8006f76 <_dtoa_r+0x246>
 8006ec6:	4b5b      	ldr	r3, [pc, #364]	; (8007034 <_dtoa_r+0x304>)
 8006ec8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed0:	ec51 0b18 	vmov	r0, r1, d8
 8006ed4:	f7f9 fe02 	bl	8000adc <__aeabi_dcmplt>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d04e      	beq.n	8006f7a <_dtoa_r+0x24a>
 8006edc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	930c      	str	r3, [sp, #48]	; 0x30
 8006ee4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ee6:	1b5b      	subs	r3, r3, r5
 8006ee8:	1e5a      	subs	r2, r3, #1
 8006eea:	bf45      	ittet	mi
 8006eec:	f1c3 0301 	rsbmi	r3, r3, #1
 8006ef0:	9305      	strmi	r3, [sp, #20]
 8006ef2:	2300      	movpl	r3, #0
 8006ef4:	2300      	movmi	r3, #0
 8006ef6:	9206      	str	r2, [sp, #24]
 8006ef8:	bf54      	ite	pl
 8006efa:	9305      	strpl	r3, [sp, #20]
 8006efc:	9306      	strmi	r3, [sp, #24]
 8006efe:	f1bb 0f00 	cmp.w	fp, #0
 8006f02:	db3c      	blt.n	8006f7e <_dtoa_r+0x24e>
 8006f04:	9b06      	ldr	r3, [sp, #24]
 8006f06:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006f0a:	445b      	add	r3, fp
 8006f0c:	9306      	str	r3, [sp, #24]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	9308      	str	r3, [sp, #32]
 8006f12:	9b07      	ldr	r3, [sp, #28]
 8006f14:	2b09      	cmp	r3, #9
 8006f16:	d868      	bhi.n	8006fea <_dtoa_r+0x2ba>
 8006f18:	2b05      	cmp	r3, #5
 8006f1a:	bfc4      	itt	gt
 8006f1c:	3b04      	subgt	r3, #4
 8006f1e:	9307      	strgt	r3, [sp, #28]
 8006f20:	9b07      	ldr	r3, [sp, #28]
 8006f22:	f1a3 0302 	sub.w	r3, r3, #2
 8006f26:	bfcc      	ite	gt
 8006f28:	2500      	movgt	r5, #0
 8006f2a:	2501      	movle	r5, #1
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	f200 8085 	bhi.w	800703c <_dtoa_r+0x30c>
 8006f32:	e8df f003 	tbb	[pc, r3]
 8006f36:	3b2e      	.short	0x3b2e
 8006f38:	5839      	.short	0x5839
 8006f3a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006f3e:	441d      	add	r5, r3
 8006f40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	bfc1      	itttt	gt
 8006f48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f4c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006f50:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006f54:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006f58:	bfd6      	itet	le
 8006f5a:	f1c3 0320 	rsble	r3, r3, #32
 8006f5e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006f62:	fa06 f003 	lslle.w	r0, r6, r3
 8006f66:	f7f9 facd 	bl	8000504 <__aeabi_ui2d>
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006f70:	3d01      	subs	r5, #1
 8006f72:	920e      	str	r2, [sp, #56]	; 0x38
 8006f74:	e76f      	b.n	8006e56 <_dtoa_r+0x126>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e7b3      	b.n	8006ee2 <_dtoa_r+0x1b2>
 8006f7a:	900c      	str	r0, [sp, #48]	; 0x30
 8006f7c:	e7b2      	b.n	8006ee4 <_dtoa_r+0x1b4>
 8006f7e:	9b05      	ldr	r3, [sp, #20]
 8006f80:	eba3 030b 	sub.w	r3, r3, fp
 8006f84:	9305      	str	r3, [sp, #20]
 8006f86:	f1cb 0300 	rsb	r3, fp, #0
 8006f8a:	9308      	str	r3, [sp, #32]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f90:	e7bf      	b.n	8006f12 <_dtoa_r+0x1e2>
 8006f92:	2300      	movs	r3, #0
 8006f94:	9309      	str	r3, [sp, #36]	; 0x24
 8006f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	dc52      	bgt.n	8007042 <_dtoa_r+0x312>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	9301      	str	r3, [sp, #4]
 8006fa0:	9304      	str	r3, [sp, #16]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	920a      	str	r2, [sp, #40]	; 0x28
 8006fa6:	e00b      	b.n	8006fc0 <_dtoa_r+0x290>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e7f3      	b.n	8006f94 <_dtoa_r+0x264>
 8006fac:	2300      	movs	r3, #0
 8006fae:	9309      	str	r3, [sp, #36]	; 0x24
 8006fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb2:	445b      	add	r3, fp
 8006fb4:	9301      	str	r3, [sp, #4]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	9304      	str	r3, [sp, #16]
 8006fbc:	bfb8      	it	lt
 8006fbe:	2301      	movlt	r3, #1
 8006fc0:	69e0      	ldr	r0, [r4, #28]
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	f102 0614 	add.w	r6, r2, #20
 8006fca:	429e      	cmp	r6, r3
 8006fcc:	d93d      	bls.n	800704a <_dtoa_r+0x31a>
 8006fce:	6041      	str	r1, [r0, #4]
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 fceb 	bl	80079ac <_Balloc>
 8006fd6:	9000      	str	r0, [sp, #0]
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d139      	bne.n	8007050 <_dtoa_r+0x320>
 8006fdc:	4b16      	ldr	r3, [pc, #88]	; (8007038 <_dtoa_r+0x308>)
 8006fde:	4602      	mov	r2, r0
 8006fe0:	f240 11af 	movw	r1, #431	; 0x1af
 8006fe4:	e6bd      	b.n	8006d62 <_dtoa_r+0x32>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e7e1      	b.n	8006fae <_dtoa_r+0x27e>
 8006fea:	2501      	movs	r5, #1
 8006fec:	2300      	movs	r3, #0
 8006fee:	9307      	str	r3, [sp, #28]
 8006ff0:	9509      	str	r5, [sp, #36]	; 0x24
 8006ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	9304      	str	r3, [sp, #16]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2312      	movs	r3, #18
 8006ffe:	e7d1      	b.n	8006fa4 <_dtoa_r+0x274>
 8007000:	636f4361 	.word	0x636f4361
 8007004:	3fd287a7 	.word	0x3fd287a7
 8007008:	8b60c8b3 	.word	0x8b60c8b3
 800700c:	3fc68a28 	.word	0x3fc68a28
 8007010:	509f79fb 	.word	0x509f79fb
 8007014:	3fd34413 	.word	0x3fd34413
 8007018:	080087f1 	.word	0x080087f1
 800701c:	08008808 	.word	0x08008808
 8007020:	7ff00000 	.word	0x7ff00000
 8007024:	080087ed 	.word	0x080087ed
 8007028:	080087e4 	.word	0x080087e4
 800702c:	080087c1 	.word	0x080087c1
 8007030:	3ff80000 	.word	0x3ff80000
 8007034:	080088f8 	.word	0x080088f8
 8007038:	08008860 	.word	0x08008860
 800703c:	2301      	movs	r3, #1
 800703e:	9309      	str	r3, [sp, #36]	; 0x24
 8007040:	e7d7      	b.n	8006ff2 <_dtoa_r+0x2c2>
 8007042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	9304      	str	r3, [sp, #16]
 8007048:	e7ba      	b.n	8006fc0 <_dtoa_r+0x290>
 800704a:	3101      	adds	r1, #1
 800704c:	0052      	lsls	r2, r2, #1
 800704e:	e7ba      	b.n	8006fc6 <_dtoa_r+0x296>
 8007050:	69e3      	ldr	r3, [r4, #28]
 8007052:	9a00      	ldr	r2, [sp, #0]
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	9b04      	ldr	r3, [sp, #16]
 8007058:	2b0e      	cmp	r3, #14
 800705a:	f200 80a8 	bhi.w	80071ae <_dtoa_r+0x47e>
 800705e:	2d00      	cmp	r5, #0
 8007060:	f000 80a5 	beq.w	80071ae <_dtoa_r+0x47e>
 8007064:	f1bb 0f00 	cmp.w	fp, #0
 8007068:	dd38      	ble.n	80070dc <_dtoa_r+0x3ac>
 800706a:	4bc0      	ldr	r3, [pc, #768]	; (800736c <_dtoa_r+0x63c>)
 800706c:	f00b 020f 	and.w	r2, fp, #15
 8007070:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007074:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007078:	e9d3 6700 	ldrd	r6, r7, [r3]
 800707c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007080:	d019      	beq.n	80070b6 <_dtoa_r+0x386>
 8007082:	4bbb      	ldr	r3, [pc, #748]	; (8007370 <_dtoa_r+0x640>)
 8007084:	ec51 0b18 	vmov	r0, r1, d8
 8007088:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800708c:	f7f9 fbde 	bl	800084c <__aeabi_ddiv>
 8007090:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007094:	f008 080f 	and.w	r8, r8, #15
 8007098:	2503      	movs	r5, #3
 800709a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007370 <_dtoa_r+0x640>
 800709e:	f1b8 0f00 	cmp.w	r8, #0
 80070a2:	d10a      	bne.n	80070ba <_dtoa_r+0x38a>
 80070a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070a8:	4632      	mov	r2, r6
 80070aa:	463b      	mov	r3, r7
 80070ac:	f7f9 fbce 	bl	800084c <__aeabi_ddiv>
 80070b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070b4:	e02b      	b.n	800710e <_dtoa_r+0x3de>
 80070b6:	2502      	movs	r5, #2
 80070b8:	e7ef      	b.n	800709a <_dtoa_r+0x36a>
 80070ba:	f018 0f01 	tst.w	r8, #1
 80070be:	d008      	beq.n	80070d2 <_dtoa_r+0x3a2>
 80070c0:	4630      	mov	r0, r6
 80070c2:	4639      	mov	r1, r7
 80070c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80070c8:	f7f9 fa96 	bl	80005f8 <__aeabi_dmul>
 80070cc:	3501      	adds	r5, #1
 80070ce:	4606      	mov	r6, r0
 80070d0:	460f      	mov	r7, r1
 80070d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80070d6:	f109 0908 	add.w	r9, r9, #8
 80070da:	e7e0      	b.n	800709e <_dtoa_r+0x36e>
 80070dc:	f000 809f 	beq.w	800721e <_dtoa_r+0x4ee>
 80070e0:	f1cb 0600 	rsb	r6, fp, #0
 80070e4:	4ba1      	ldr	r3, [pc, #644]	; (800736c <_dtoa_r+0x63c>)
 80070e6:	4fa2      	ldr	r7, [pc, #648]	; (8007370 <_dtoa_r+0x640>)
 80070e8:	f006 020f 	and.w	r2, r6, #15
 80070ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	ec51 0b18 	vmov	r0, r1, d8
 80070f8:	f7f9 fa7e 	bl	80005f8 <__aeabi_dmul>
 80070fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007100:	1136      	asrs	r6, r6, #4
 8007102:	2300      	movs	r3, #0
 8007104:	2502      	movs	r5, #2
 8007106:	2e00      	cmp	r6, #0
 8007108:	d17e      	bne.n	8007208 <_dtoa_r+0x4d8>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1d0      	bne.n	80070b0 <_dtoa_r+0x380>
 800710e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007110:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 8084 	beq.w	8007222 <_dtoa_r+0x4f2>
 800711a:	4b96      	ldr	r3, [pc, #600]	; (8007374 <_dtoa_r+0x644>)
 800711c:	2200      	movs	r2, #0
 800711e:	4640      	mov	r0, r8
 8007120:	4649      	mov	r1, r9
 8007122:	f7f9 fcdb 	bl	8000adc <__aeabi_dcmplt>
 8007126:	2800      	cmp	r0, #0
 8007128:	d07b      	beq.n	8007222 <_dtoa_r+0x4f2>
 800712a:	9b04      	ldr	r3, [sp, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d078      	beq.n	8007222 <_dtoa_r+0x4f2>
 8007130:	9b01      	ldr	r3, [sp, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	dd39      	ble.n	80071aa <_dtoa_r+0x47a>
 8007136:	4b90      	ldr	r3, [pc, #576]	; (8007378 <_dtoa_r+0x648>)
 8007138:	2200      	movs	r2, #0
 800713a:	4640      	mov	r0, r8
 800713c:	4649      	mov	r1, r9
 800713e:	f7f9 fa5b 	bl	80005f8 <__aeabi_dmul>
 8007142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007146:	9e01      	ldr	r6, [sp, #4]
 8007148:	f10b 37ff 	add.w	r7, fp, #4294967295
 800714c:	3501      	adds	r5, #1
 800714e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007152:	4628      	mov	r0, r5
 8007154:	f7f9 f9e6 	bl	8000524 <__aeabi_i2d>
 8007158:	4642      	mov	r2, r8
 800715a:	464b      	mov	r3, r9
 800715c:	f7f9 fa4c 	bl	80005f8 <__aeabi_dmul>
 8007160:	4b86      	ldr	r3, [pc, #536]	; (800737c <_dtoa_r+0x64c>)
 8007162:	2200      	movs	r2, #0
 8007164:	f7f9 f892 	bl	800028c <__adddf3>
 8007168:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800716c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007170:	9303      	str	r3, [sp, #12]
 8007172:	2e00      	cmp	r6, #0
 8007174:	d158      	bne.n	8007228 <_dtoa_r+0x4f8>
 8007176:	4b82      	ldr	r3, [pc, #520]	; (8007380 <_dtoa_r+0x650>)
 8007178:	2200      	movs	r2, #0
 800717a:	4640      	mov	r0, r8
 800717c:	4649      	mov	r1, r9
 800717e:	f7f9 f883 	bl	8000288 <__aeabi_dsub>
 8007182:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007186:	4680      	mov	r8, r0
 8007188:	4689      	mov	r9, r1
 800718a:	f7f9 fcc5 	bl	8000b18 <__aeabi_dcmpgt>
 800718e:	2800      	cmp	r0, #0
 8007190:	f040 8296 	bne.w	80076c0 <_dtoa_r+0x990>
 8007194:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007198:	4640      	mov	r0, r8
 800719a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800719e:	4649      	mov	r1, r9
 80071a0:	f7f9 fc9c 	bl	8000adc <__aeabi_dcmplt>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	f040 8289 	bne.w	80076bc <_dtoa_r+0x98c>
 80071aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80071ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f2c0 814e 	blt.w	8007452 <_dtoa_r+0x722>
 80071b6:	f1bb 0f0e 	cmp.w	fp, #14
 80071ba:	f300 814a 	bgt.w	8007452 <_dtoa_r+0x722>
 80071be:	4b6b      	ldr	r3, [pc, #428]	; (800736c <_dtoa_r+0x63c>)
 80071c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80071c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f280 80dc 	bge.w	8007388 <_dtoa_r+0x658>
 80071d0:	9b04      	ldr	r3, [sp, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f300 80d8 	bgt.w	8007388 <_dtoa_r+0x658>
 80071d8:	f040 826f 	bne.w	80076ba <_dtoa_r+0x98a>
 80071dc:	4b68      	ldr	r3, [pc, #416]	; (8007380 <_dtoa_r+0x650>)
 80071de:	2200      	movs	r2, #0
 80071e0:	4640      	mov	r0, r8
 80071e2:	4649      	mov	r1, r9
 80071e4:	f7f9 fa08 	bl	80005f8 <__aeabi_dmul>
 80071e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071ec:	f7f9 fc8a 	bl	8000b04 <__aeabi_dcmpge>
 80071f0:	9e04      	ldr	r6, [sp, #16]
 80071f2:	4637      	mov	r7, r6
 80071f4:	2800      	cmp	r0, #0
 80071f6:	f040 8245 	bne.w	8007684 <_dtoa_r+0x954>
 80071fa:	9d00      	ldr	r5, [sp, #0]
 80071fc:	2331      	movs	r3, #49	; 0x31
 80071fe:	f805 3b01 	strb.w	r3, [r5], #1
 8007202:	f10b 0b01 	add.w	fp, fp, #1
 8007206:	e241      	b.n	800768c <_dtoa_r+0x95c>
 8007208:	07f2      	lsls	r2, r6, #31
 800720a:	d505      	bpl.n	8007218 <_dtoa_r+0x4e8>
 800720c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007210:	f7f9 f9f2 	bl	80005f8 <__aeabi_dmul>
 8007214:	3501      	adds	r5, #1
 8007216:	2301      	movs	r3, #1
 8007218:	1076      	asrs	r6, r6, #1
 800721a:	3708      	adds	r7, #8
 800721c:	e773      	b.n	8007106 <_dtoa_r+0x3d6>
 800721e:	2502      	movs	r5, #2
 8007220:	e775      	b.n	800710e <_dtoa_r+0x3de>
 8007222:	9e04      	ldr	r6, [sp, #16]
 8007224:	465f      	mov	r7, fp
 8007226:	e792      	b.n	800714e <_dtoa_r+0x41e>
 8007228:	9900      	ldr	r1, [sp, #0]
 800722a:	4b50      	ldr	r3, [pc, #320]	; (800736c <_dtoa_r+0x63c>)
 800722c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007230:	4431      	add	r1, r6
 8007232:	9102      	str	r1, [sp, #8]
 8007234:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007236:	eeb0 9a47 	vmov.f32	s18, s14
 800723a:	eef0 9a67 	vmov.f32	s19, s15
 800723e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007242:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007246:	2900      	cmp	r1, #0
 8007248:	d044      	beq.n	80072d4 <_dtoa_r+0x5a4>
 800724a:	494e      	ldr	r1, [pc, #312]	; (8007384 <_dtoa_r+0x654>)
 800724c:	2000      	movs	r0, #0
 800724e:	f7f9 fafd 	bl	800084c <__aeabi_ddiv>
 8007252:	ec53 2b19 	vmov	r2, r3, d9
 8007256:	f7f9 f817 	bl	8000288 <__aeabi_dsub>
 800725a:	9d00      	ldr	r5, [sp, #0]
 800725c:	ec41 0b19 	vmov	d9, r0, r1
 8007260:	4649      	mov	r1, r9
 8007262:	4640      	mov	r0, r8
 8007264:	f7f9 fc78 	bl	8000b58 <__aeabi_d2iz>
 8007268:	4606      	mov	r6, r0
 800726a:	f7f9 f95b 	bl	8000524 <__aeabi_i2d>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	4640      	mov	r0, r8
 8007274:	4649      	mov	r1, r9
 8007276:	f7f9 f807 	bl	8000288 <__aeabi_dsub>
 800727a:	3630      	adds	r6, #48	; 0x30
 800727c:	f805 6b01 	strb.w	r6, [r5], #1
 8007280:	ec53 2b19 	vmov	r2, r3, d9
 8007284:	4680      	mov	r8, r0
 8007286:	4689      	mov	r9, r1
 8007288:	f7f9 fc28 	bl	8000adc <__aeabi_dcmplt>
 800728c:	2800      	cmp	r0, #0
 800728e:	d164      	bne.n	800735a <_dtoa_r+0x62a>
 8007290:	4642      	mov	r2, r8
 8007292:	464b      	mov	r3, r9
 8007294:	4937      	ldr	r1, [pc, #220]	; (8007374 <_dtoa_r+0x644>)
 8007296:	2000      	movs	r0, #0
 8007298:	f7f8 fff6 	bl	8000288 <__aeabi_dsub>
 800729c:	ec53 2b19 	vmov	r2, r3, d9
 80072a0:	f7f9 fc1c 	bl	8000adc <__aeabi_dcmplt>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f040 80b6 	bne.w	8007416 <_dtoa_r+0x6e6>
 80072aa:	9b02      	ldr	r3, [sp, #8]
 80072ac:	429d      	cmp	r5, r3
 80072ae:	f43f af7c 	beq.w	80071aa <_dtoa_r+0x47a>
 80072b2:	4b31      	ldr	r3, [pc, #196]	; (8007378 <_dtoa_r+0x648>)
 80072b4:	ec51 0b19 	vmov	r0, r1, d9
 80072b8:	2200      	movs	r2, #0
 80072ba:	f7f9 f99d 	bl	80005f8 <__aeabi_dmul>
 80072be:	4b2e      	ldr	r3, [pc, #184]	; (8007378 <_dtoa_r+0x648>)
 80072c0:	ec41 0b19 	vmov	d9, r0, r1
 80072c4:	2200      	movs	r2, #0
 80072c6:	4640      	mov	r0, r8
 80072c8:	4649      	mov	r1, r9
 80072ca:	f7f9 f995 	bl	80005f8 <__aeabi_dmul>
 80072ce:	4680      	mov	r8, r0
 80072d0:	4689      	mov	r9, r1
 80072d2:	e7c5      	b.n	8007260 <_dtoa_r+0x530>
 80072d4:	ec51 0b17 	vmov	r0, r1, d7
 80072d8:	f7f9 f98e 	bl	80005f8 <__aeabi_dmul>
 80072dc:	9b02      	ldr	r3, [sp, #8]
 80072de:	9d00      	ldr	r5, [sp, #0]
 80072e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80072e2:	ec41 0b19 	vmov	d9, r0, r1
 80072e6:	4649      	mov	r1, r9
 80072e8:	4640      	mov	r0, r8
 80072ea:	f7f9 fc35 	bl	8000b58 <__aeabi_d2iz>
 80072ee:	4606      	mov	r6, r0
 80072f0:	f7f9 f918 	bl	8000524 <__aeabi_i2d>
 80072f4:	3630      	adds	r6, #48	; 0x30
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	4640      	mov	r0, r8
 80072fc:	4649      	mov	r1, r9
 80072fe:	f7f8 ffc3 	bl	8000288 <__aeabi_dsub>
 8007302:	f805 6b01 	strb.w	r6, [r5], #1
 8007306:	9b02      	ldr	r3, [sp, #8]
 8007308:	429d      	cmp	r5, r3
 800730a:	4680      	mov	r8, r0
 800730c:	4689      	mov	r9, r1
 800730e:	f04f 0200 	mov.w	r2, #0
 8007312:	d124      	bne.n	800735e <_dtoa_r+0x62e>
 8007314:	4b1b      	ldr	r3, [pc, #108]	; (8007384 <_dtoa_r+0x654>)
 8007316:	ec51 0b19 	vmov	r0, r1, d9
 800731a:	f7f8 ffb7 	bl	800028c <__adddf3>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4640      	mov	r0, r8
 8007324:	4649      	mov	r1, r9
 8007326:	f7f9 fbf7 	bl	8000b18 <__aeabi_dcmpgt>
 800732a:	2800      	cmp	r0, #0
 800732c:	d173      	bne.n	8007416 <_dtoa_r+0x6e6>
 800732e:	ec53 2b19 	vmov	r2, r3, d9
 8007332:	4914      	ldr	r1, [pc, #80]	; (8007384 <_dtoa_r+0x654>)
 8007334:	2000      	movs	r0, #0
 8007336:	f7f8 ffa7 	bl	8000288 <__aeabi_dsub>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4640      	mov	r0, r8
 8007340:	4649      	mov	r1, r9
 8007342:	f7f9 fbcb 	bl	8000adc <__aeabi_dcmplt>
 8007346:	2800      	cmp	r0, #0
 8007348:	f43f af2f 	beq.w	80071aa <_dtoa_r+0x47a>
 800734c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800734e:	1e6b      	subs	r3, r5, #1
 8007350:	930f      	str	r3, [sp, #60]	; 0x3c
 8007352:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007356:	2b30      	cmp	r3, #48	; 0x30
 8007358:	d0f8      	beq.n	800734c <_dtoa_r+0x61c>
 800735a:	46bb      	mov	fp, r7
 800735c:	e04a      	b.n	80073f4 <_dtoa_r+0x6c4>
 800735e:	4b06      	ldr	r3, [pc, #24]	; (8007378 <_dtoa_r+0x648>)
 8007360:	f7f9 f94a 	bl	80005f8 <__aeabi_dmul>
 8007364:	4680      	mov	r8, r0
 8007366:	4689      	mov	r9, r1
 8007368:	e7bd      	b.n	80072e6 <_dtoa_r+0x5b6>
 800736a:	bf00      	nop
 800736c:	080088f8 	.word	0x080088f8
 8007370:	080088d0 	.word	0x080088d0
 8007374:	3ff00000 	.word	0x3ff00000
 8007378:	40240000 	.word	0x40240000
 800737c:	401c0000 	.word	0x401c0000
 8007380:	40140000 	.word	0x40140000
 8007384:	3fe00000 	.word	0x3fe00000
 8007388:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800738c:	9d00      	ldr	r5, [sp, #0]
 800738e:	4642      	mov	r2, r8
 8007390:	464b      	mov	r3, r9
 8007392:	4630      	mov	r0, r6
 8007394:	4639      	mov	r1, r7
 8007396:	f7f9 fa59 	bl	800084c <__aeabi_ddiv>
 800739a:	f7f9 fbdd 	bl	8000b58 <__aeabi_d2iz>
 800739e:	9001      	str	r0, [sp, #4]
 80073a0:	f7f9 f8c0 	bl	8000524 <__aeabi_i2d>
 80073a4:	4642      	mov	r2, r8
 80073a6:	464b      	mov	r3, r9
 80073a8:	f7f9 f926 	bl	80005f8 <__aeabi_dmul>
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	4630      	mov	r0, r6
 80073b2:	4639      	mov	r1, r7
 80073b4:	f7f8 ff68 	bl	8000288 <__aeabi_dsub>
 80073b8:	9e01      	ldr	r6, [sp, #4]
 80073ba:	9f04      	ldr	r7, [sp, #16]
 80073bc:	3630      	adds	r6, #48	; 0x30
 80073be:	f805 6b01 	strb.w	r6, [r5], #1
 80073c2:	9e00      	ldr	r6, [sp, #0]
 80073c4:	1bae      	subs	r6, r5, r6
 80073c6:	42b7      	cmp	r7, r6
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	d134      	bne.n	8007438 <_dtoa_r+0x708>
 80073ce:	f7f8 ff5d 	bl	800028c <__adddf3>
 80073d2:	4642      	mov	r2, r8
 80073d4:	464b      	mov	r3, r9
 80073d6:	4606      	mov	r6, r0
 80073d8:	460f      	mov	r7, r1
 80073da:	f7f9 fb9d 	bl	8000b18 <__aeabi_dcmpgt>
 80073de:	b9c8      	cbnz	r0, 8007414 <_dtoa_r+0x6e4>
 80073e0:	4642      	mov	r2, r8
 80073e2:	464b      	mov	r3, r9
 80073e4:	4630      	mov	r0, r6
 80073e6:	4639      	mov	r1, r7
 80073e8:	f7f9 fb6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80073ec:	b110      	cbz	r0, 80073f4 <_dtoa_r+0x6c4>
 80073ee:	9b01      	ldr	r3, [sp, #4]
 80073f0:	07db      	lsls	r3, r3, #31
 80073f2:	d40f      	bmi.n	8007414 <_dtoa_r+0x6e4>
 80073f4:	4651      	mov	r1, sl
 80073f6:	4620      	mov	r0, r4
 80073f8:	f000 fb18 	bl	8007a2c <_Bfree>
 80073fc:	2300      	movs	r3, #0
 80073fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007400:	702b      	strb	r3, [r5, #0]
 8007402:	f10b 0301 	add.w	r3, fp, #1
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800740a:	2b00      	cmp	r3, #0
 800740c:	f43f ace2 	beq.w	8006dd4 <_dtoa_r+0xa4>
 8007410:	601d      	str	r5, [r3, #0]
 8007412:	e4df      	b.n	8006dd4 <_dtoa_r+0xa4>
 8007414:	465f      	mov	r7, fp
 8007416:	462b      	mov	r3, r5
 8007418:	461d      	mov	r5, r3
 800741a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800741e:	2a39      	cmp	r2, #57	; 0x39
 8007420:	d106      	bne.n	8007430 <_dtoa_r+0x700>
 8007422:	9a00      	ldr	r2, [sp, #0]
 8007424:	429a      	cmp	r2, r3
 8007426:	d1f7      	bne.n	8007418 <_dtoa_r+0x6e8>
 8007428:	9900      	ldr	r1, [sp, #0]
 800742a:	2230      	movs	r2, #48	; 0x30
 800742c:	3701      	adds	r7, #1
 800742e:	700a      	strb	r2, [r1, #0]
 8007430:	781a      	ldrb	r2, [r3, #0]
 8007432:	3201      	adds	r2, #1
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	e790      	b.n	800735a <_dtoa_r+0x62a>
 8007438:	4ba3      	ldr	r3, [pc, #652]	; (80076c8 <_dtoa_r+0x998>)
 800743a:	2200      	movs	r2, #0
 800743c:	f7f9 f8dc 	bl	80005f8 <__aeabi_dmul>
 8007440:	2200      	movs	r2, #0
 8007442:	2300      	movs	r3, #0
 8007444:	4606      	mov	r6, r0
 8007446:	460f      	mov	r7, r1
 8007448:	f7f9 fb3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800744c:	2800      	cmp	r0, #0
 800744e:	d09e      	beq.n	800738e <_dtoa_r+0x65e>
 8007450:	e7d0      	b.n	80073f4 <_dtoa_r+0x6c4>
 8007452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007454:	2a00      	cmp	r2, #0
 8007456:	f000 80ca 	beq.w	80075ee <_dtoa_r+0x8be>
 800745a:	9a07      	ldr	r2, [sp, #28]
 800745c:	2a01      	cmp	r2, #1
 800745e:	f300 80ad 	bgt.w	80075bc <_dtoa_r+0x88c>
 8007462:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007464:	2a00      	cmp	r2, #0
 8007466:	f000 80a5 	beq.w	80075b4 <_dtoa_r+0x884>
 800746a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800746e:	9e08      	ldr	r6, [sp, #32]
 8007470:	9d05      	ldr	r5, [sp, #20]
 8007472:	9a05      	ldr	r2, [sp, #20]
 8007474:	441a      	add	r2, r3
 8007476:	9205      	str	r2, [sp, #20]
 8007478:	9a06      	ldr	r2, [sp, #24]
 800747a:	2101      	movs	r1, #1
 800747c:	441a      	add	r2, r3
 800747e:	4620      	mov	r0, r4
 8007480:	9206      	str	r2, [sp, #24]
 8007482:	f000 fb89 	bl	8007b98 <__i2b>
 8007486:	4607      	mov	r7, r0
 8007488:	b165      	cbz	r5, 80074a4 <_dtoa_r+0x774>
 800748a:	9b06      	ldr	r3, [sp, #24]
 800748c:	2b00      	cmp	r3, #0
 800748e:	dd09      	ble.n	80074a4 <_dtoa_r+0x774>
 8007490:	42ab      	cmp	r3, r5
 8007492:	9a05      	ldr	r2, [sp, #20]
 8007494:	bfa8      	it	ge
 8007496:	462b      	movge	r3, r5
 8007498:	1ad2      	subs	r2, r2, r3
 800749a:	9205      	str	r2, [sp, #20]
 800749c:	9a06      	ldr	r2, [sp, #24]
 800749e:	1aed      	subs	r5, r5, r3
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	9306      	str	r3, [sp, #24]
 80074a4:	9b08      	ldr	r3, [sp, #32]
 80074a6:	b1f3      	cbz	r3, 80074e6 <_dtoa_r+0x7b6>
 80074a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 80a3 	beq.w	80075f6 <_dtoa_r+0x8c6>
 80074b0:	2e00      	cmp	r6, #0
 80074b2:	dd10      	ble.n	80074d6 <_dtoa_r+0x7a6>
 80074b4:	4639      	mov	r1, r7
 80074b6:	4632      	mov	r2, r6
 80074b8:	4620      	mov	r0, r4
 80074ba:	f000 fc2d 	bl	8007d18 <__pow5mult>
 80074be:	4652      	mov	r2, sl
 80074c0:	4601      	mov	r1, r0
 80074c2:	4607      	mov	r7, r0
 80074c4:	4620      	mov	r0, r4
 80074c6:	f000 fb7d 	bl	8007bc4 <__multiply>
 80074ca:	4651      	mov	r1, sl
 80074cc:	4680      	mov	r8, r0
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 faac 	bl	8007a2c <_Bfree>
 80074d4:	46c2      	mov	sl, r8
 80074d6:	9b08      	ldr	r3, [sp, #32]
 80074d8:	1b9a      	subs	r2, r3, r6
 80074da:	d004      	beq.n	80074e6 <_dtoa_r+0x7b6>
 80074dc:	4651      	mov	r1, sl
 80074de:	4620      	mov	r0, r4
 80074e0:	f000 fc1a 	bl	8007d18 <__pow5mult>
 80074e4:	4682      	mov	sl, r0
 80074e6:	2101      	movs	r1, #1
 80074e8:	4620      	mov	r0, r4
 80074ea:	f000 fb55 	bl	8007b98 <__i2b>
 80074ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	4606      	mov	r6, r0
 80074f4:	f340 8081 	ble.w	80075fa <_dtoa_r+0x8ca>
 80074f8:	461a      	mov	r2, r3
 80074fa:	4601      	mov	r1, r0
 80074fc:	4620      	mov	r0, r4
 80074fe:	f000 fc0b 	bl	8007d18 <__pow5mult>
 8007502:	9b07      	ldr	r3, [sp, #28]
 8007504:	2b01      	cmp	r3, #1
 8007506:	4606      	mov	r6, r0
 8007508:	dd7a      	ble.n	8007600 <_dtoa_r+0x8d0>
 800750a:	f04f 0800 	mov.w	r8, #0
 800750e:	6933      	ldr	r3, [r6, #16]
 8007510:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007514:	6918      	ldr	r0, [r3, #16]
 8007516:	f000 faf1 	bl	8007afc <__hi0bits>
 800751a:	f1c0 0020 	rsb	r0, r0, #32
 800751e:	9b06      	ldr	r3, [sp, #24]
 8007520:	4418      	add	r0, r3
 8007522:	f010 001f 	ands.w	r0, r0, #31
 8007526:	f000 8094 	beq.w	8007652 <_dtoa_r+0x922>
 800752a:	f1c0 0320 	rsb	r3, r0, #32
 800752e:	2b04      	cmp	r3, #4
 8007530:	f340 8085 	ble.w	800763e <_dtoa_r+0x90e>
 8007534:	9b05      	ldr	r3, [sp, #20]
 8007536:	f1c0 001c 	rsb	r0, r0, #28
 800753a:	4403      	add	r3, r0
 800753c:	9305      	str	r3, [sp, #20]
 800753e:	9b06      	ldr	r3, [sp, #24]
 8007540:	4403      	add	r3, r0
 8007542:	4405      	add	r5, r0
 8007544:	9306      	str	r3, [sp, #24]
 8007546:	9b05      	ldr	r3, [sp, #20]
 8007548:	2b00      	cmp	r3, #0
 800754a:	dd05      	ble.n	8007558 <_dtoa_r+0x828>
 800754c:	4651      	mov	r1, sl
 800754e:	461a      	mov	r2, r3
 8007550:	4620      	mov	r0, r4
 8007552:	f000 fc3b 	bl	8007dcc <__lshift>
 8007556:	4682      	mov	sl, r0
 8007558:	9b06      	ldr	r3, [sp, #24]
 800755a:	2b00      	cmp	r3, #0
 800755c:	dd05      	ble.n	800756a <_dtoa_r+0x83a>
 800755e:	4631      	mov	r1, r6
 8007560:	461a      	mov	r2, r3
 8007562:	4620      	mov	r0, r4
 8007564:	f000 fc32 	bl	8007dcc <__lshift>
 8007568:	4606      	mov	r6, r0
 800756a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800756c:	2b00      	cmp	r3, #0
 800756e:	d072      	beq.n	8007656 <_dtoa_r+0x926>
 8007570:	4631      	mov	r1, r6
 8007572:	4650      	mov	r0, sl
 8007574:	f000 fc96 	bl	8007ea4 <__mcmp>
 8007578:	2800      	cmp	r0, #0
 800757a:	da6c      	bge.n	8007656 <_dtoa_r+0x926>
 800757c:	2300      	movs	r3, #0
 800757e:	4651      	mov	r1, sl
 8007580:	220a      	movs	r2, #10
 8007582:	4620      	mov	r0, r4
 8007584:	f000 fa74 	bl	8007a70 <__multadd>
 8007588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800758a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800758e:	4682      	mov	sl, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 81b0 	beq.w	80078f6 <_dtoa_r+0xbc6>
 8007596:	2300      	movs	r3, #0
 8007598:	4639      	mov	r1, r7
 800759a:	220a      	movs	r2, #10
 800759c:	4620      	mov	r0, r4
 800759e:	f000 fa67 	bl	8007a70 <__multadd>
 80075a2:	9b01      	ldr	r3, [sp, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	4607      	mov	r7, r0
 80075a8:	f300 8096 	bgt.w	80076d8 <_dtoa_r+0x9a8>
 80075ac:	9b07      	ldr	r3, [sp, #28]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	dc59      	bgt.n	8007666 <_dtoa_r+0x936>
 80075b2:	e091      	b.n	80076d8 <_dtoa_r+0x9a8>
 80075b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80075ba:	e758      	b.n	800746e <_dtoa_r+0x73e>
 80075bc:	9b04      	ldr	r3, [sp, #16]
 80075be:	1e5e      	subs	r6, r3, #1
 80075c0:	9b08      	ldr	r3, [sp, #32]
 80075c2:	42b3      	cmp	r3, r6
 80075c4:	bfbf      	itttt	lt
 80075c6:	9b08      	ldrlt	r3, [sp, #32]
 80075c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80075ca:	9608      	strlt	r6, [sp, #32]
 80075cc:	1af3      	sublt	r3, r6, r3
 80075ce:	bfb4      	ite	lt
 80075d0:	18d2      	addlt	r2, r2, r3
 80075d2:	1b9e      	subge	r6, r3, r6
 80075d4:	9b04      	ldr	r3, [sp, #16]
 80075d6:	bfbc      	itt	lt
 80075d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80075da:	2600      	movlt	r6, #0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	bfb7      	itett	lt
 80075e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80075e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80075e8:	1a9d      	sublt	r5, r3, r2
 80075ea:	2300      	movlt	r3, #0
 80075ec:	e741      	b.n	8007472 <_dtoa_r+0x742>
 80075ee:	9e08      	ldr	r6, [sp, #32]
 80075f0:	9d05      	ldr	r5, [sp, #20]
 80075f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80075f4:	e748      	b.n	8007488 <_dtoa_r+0x758>
 80075f6:	9a08      	ldr	r2, [sp, #32]
 80075f8:	e770      	b.n	80074dc <_dtoa_r+0x7ac>
 80075fa:	9b07      	ldr	r3, [sp, #28]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	dc19      	bgt.n	8007634 <_dtoa_r+0x904>
 8007600:	9b02      	ldr	r3, [sp, #8]
 8007602:	b9bb      	cbnz	r3, 8007634 <_dtoa_r+0x904>
 8007604:	9b03      	ldr	r3, [sp, #12]
 8007606:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800760a:	b99b      	cbnz	r3, 8007634 <_dtoa_r+0x904>
 800760c:	9b03      	ldr	r3, [sp, #12]
 800760e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007612:	0d1b      	lsrs	r3, r3, #20
 8007614:	051b      	lsls	r3, r3, #20
 8007616:	b183      	cbz	r3, 800763a <_dtoa_r+0x90a>
 8007618:	9b05      	ldr	r3, [sp, #20]
 800761a:	3301      	adds	r3, #1
 800761c:	9305      	str	r3, [sp, #20]
 800761e:	9b06      	ldr	r3, [sp, #24]
 8007620:	3301      	adds	r3, #1
 8007622:	9306      	str	r3, [sp, #24]
 8007624:	f04f 0801 	mov.w	r8, #1
 8007628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800762a:	2b00      	cmp	r3, #0
 800762c:	f47f af6f 	bne.w	800750e <_dtoa_r+0x7de>
 8007630:	2001      	movs	r0, #1
 8007632:	e774      	b.n	800751e <_dtoa_r+0x7ee>
 8007634:	f04f 0800 	mov.w	r8, #0
 8007638:	e7f6      	b.n	8007628 <_dtoa_r+0x8f8>
 800763a:	4698      	mov	r8, r3
 800763c:	e7f4      	b.n	8007628 <_dtoa_r+0x8f8>
 800763e:	d082      	beq.n	8007546 <_dtoa_r+0x816>
 8007640:	9a05      	ldr	r2, [sp, #20]
 8007642:	331c      	adds	r3, #28
 8007644:	441a      	add	r2, r3
 8007646:	9205      	str	r2, [sp, #20]
 8007648:	9a06      	ldr	r2, [sp, #24]
 800764a:	441a      	add	r2, r3
 800764c:	441d      	add	r5, r3
 800764e:	9206      	str	r2, [sp, #24]
 8007650:	e779      	b.n	8007546 <_dtoa_r+0x816>
 8007652:	4603      	mov	r3, r0
 8007654:	e7f4      	b.n	8007640 <_dtoa_r+0x910>
 8007656:	9b04      	ldr	r3, [sp, #16]
 8007658:	2b00      	cmp	r3, #0
 800765a:	dc37      	bgt.n	80076cc <_dtoa_r+0x99c>
 800765c:	9b07      	ldr	r3, [sp, #28]
 800765e:	2b02      	cmp	r3, #2
 8007660:	dd34      	ble.n	80076cc <_dtoa_r+0x99c>
 8007662:	9b04      	ldr	r3, [sp, #16]
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	9b01      	ldr	r3, [sp, #4]
 8007668:	b963      	cbnz	r3, 8007684 <_dtoa_r+0x954>
 800766a:	4631      	mov	r1, r6
 800766c:	2205      	movs	r2, #5
 800766e:	4620      	mov	r0, r4
 8007670:	f000 f9fe 	bl	8007a70 <__multadd>
 8007674:	4601      	mov	r1, r0
 8007676:	4606      	mov	r6, r0
 8007678:	4650      	mov	r0, sl
 800767a:	f000 fc13 	bl	8007ea4 <__mcmp>
 800767e:	2800      	cmp	r0, #0
 8007680:	f73f adbb 	bgt.w	80071fa <_dtoa_r+0x4ca>
 8007684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007686:	9d00      	ldr	r5, [sp, #0]
 8007688:	ea6f 0b03 	mvn.w	fp, r3
 800768c:	f04f 0800 	mov.w	r8, #0
 8007690:	4631      	mov	r1, r6
 8007692:	4620      	mov	r0, r4
 8007694:	f000 f9ca 	bl	8007a2c <_Bfree>
 8007698:	2f00      	cmp	r7, #0
 800769a:	f43f aeab 	beq.w	80073f4 <_dtoa_r+0x6c4>
 800769e:	f1b8 0f00 	cmp.w	r8, #0
 80076a2:	d005      	beq.n	80076b0 <_dtoa_r+0x980>
 80076a4:	45b8      	cmp	r8, r7
 80076a6:	d003      	beq.n	80076b0 <_dtoa_r+0x980>
 80076a8:	4641      	mov	r1, r8
 80076aa:	4620      	mov	r0, r4
 80076ac:	f000 f9be 	bl	8007a2c <_Bfree>
 80076b0:	4639      	mov	r1, r7
 80076b2:	4620      	mov	r0, r4
 80076b4:	f000 f9ba 	bl	8007a2c <_Bfree>
 80076b8:	e69c      	b.n	80073f4 <_dtoa_r+0x6c4>
 80076ba:	2600      	movs	r6, #0
 80076bc:	4637      	mov	r7, r6
 80076be:	e7e1      	b.n	8007684 <_dtoa_r+0x954>
 80076c0:	46bb      	mov	fp, r7
 80076c2:	4637      	mov	r7, r6
 80076c4:	e599      	b.n	80071fa <_dtoa_r+0x4ca>
 80076c6:	bf00      	nop
 80076c8:	40240000 	.word	0x40240000
 80076cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 80c8 	beq.w	8007864 <_dtoa_r+0xb34>
 80076d4:	9b04      	ldr	r3, [sp, #16]
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	2d00      	cmp	r5, #0
 80076da:	dd05      	ble.n	80076e8 <_dtoa_r+0x9b8>
 80076dc:	4639      	mov	r1, r7
 80076de:	462a      	mov	r2, r5
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 fb73 	bl	8007dcc <__lshift>
 80076e6:	4607      	mov	r7, r0
 80076e8:	f1b8 0f00 	cmp.w	r8, #0
 80076ec:	d05b      	beq.n	80077a6 <_dtoa_r+0xa76>
 80076ee:	6879      	ldr	r1, [r7, #4]
 80076f0:	4620      	mov	r0, r4
 80076f2:	f000 f95b 	bl	80079ac <_Balloc>
 80076f6:	4605      	mov	r5, r0
 80076f8:	b928      	cbnz	r0, 8007706 <_dtoa_r+0x9d6>
 80076fa:	4b83      	ldr	r3, [pc, #524]	; (8007908 <_dtoa_r+0xbd8>)
 80076fc:	4602      	mov	r2, r0
 80076fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007702:	f7ff bb2e 	b.w	8006d62 <_dtoa_r+0x32>
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	3202      	adds	r2, #2
 800770a:	0092      	lsls	r2, r2, #2
 800770c:	f107 010c 	add.w	r1, r7, #12
 8007710:	300c      	adds	r0, #12
 8007712:	f000 fdf9 	bl	8008308 <memcpy>
 8007716:	2201      	movs	r2, #1
 8007718:	4629      	mov	r1, r5
 800771a:	4620      	mov	r0, r4
 800771c:	f000 fb56 	bl	8007dcc <__lshift>
 8007720:	9b00      	ldr	r3, [sp, #0]
 8007722:	3301      	adds	r3, #1
 8007724:	9304      	str	r3, [sp, #16]
 8007726:	e9dd 2300 	ldrd	r2, r3, [sp]
 800772a:	4413      	add	r3, r2
 800772c:	9308      	str	r3, [sp, #32]
 800772e:	9b02      	ldr	r3, [sp, #8]
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	46b8      	mov	r8, r7
 8007736:	9306      	str	r3, [sp, #24]
 8007738:	4607      	mov	r7, r0
 800773a:	9b04      	ldr	r3, [sp, #16]
 800773c:	4631      	mov	r1, r6
 800773e:	3b01      	subs	r3, #1
 8007740:	4650      	mov	r0, sl
 8007742:	9301      	str	r3, [sp, #4]
 8007744:	f7ff fa6b 	bl	8006c1e <quorem>
 8007748:	4641      	mov	r1, r8
 800774a:	9002      	str	r0, [sp, #8]
 800774c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007750:	4650      	mov	r0, sl
 8007752:	f000 fba7 	bl	8007ea4 <__mcmp>
 8007756:	463a      	mov	r2, r7
 8007758:	9005      	str	r0, [sp, #20]
 800775a:	4631      	mov	r1, r6
 800775c:	4620      	mov	r0, r4
 800775e:	f000 fbbd 	bl	8007edc <__mdiff>
 8007762:	68c2      	ldr	r2, [r0, #12]
 8007764:	4605      	mov	r5, r0
 8007766:	bb02      	cbnz	r2, 80077aa <_dtoa_r+0xa7a>
 8007768:	4601      	mov	r1, r0
 800776a:	4650      	mov	r0, sl
 800776c:	f000 fb9a 	bl	8007ea4 <__mcmp>
 8007770:	4602      	mov	r2, r0
 8007772:	4629      	mov	r1, r5
 8007774:	4620      	mov	r0, r4
 8007776:	9209      	str	r2, [sp, #36]	; 0x24
 8007778:	f000 f958 	bl	8007a2c <_Bfree>
 800777c:	9b07      	ldr	r3, [sp, #28]
 800777e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007780:	9d04      	ldr	r5, [sp, #16]
 8007782:	ea43 0102 	orr.w	r1, r3, r2
 8007786:	9b06      	ldr	r3, [sp, #24]
 8007788:	4319      	orrs	r1, r3
 800778a:	d110      	bne.n	80077ae <_dtoa_r+0xa7e>
 800778c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007790:	d029      	beq.n	80077e6 <_dtoa_r+0xab6>
 8007792:	9b05      	ldr	r3, [sp, #20]
 8007794:	2b00      	cmp	r3, #0
 8007796:	dd02      	ble.n	800779e <_dtoa_r+0xa6e>
 8007798:	9b02      	ldr	r3, [sp, #8]
 800779a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800779e:	9b01      	ldr	r3, [sp, #4]
 80077a0:	f883 9000 	strb.w	r9, [r3]
 80077a4:	e774      	b.n	8007690 <_dtoa_r+0x960>
 80077a6:	4638      	mov	r0, r7
 80077a8:	e7ba      	b.n	8007720 <_dtoa_r+0x9f0>
 80077aa:	2201      	movs	r2, #1
 80077ac:	e7e1      	b.n	8007772 <_dtoa_r+0xa42>
 80077ae:	9b05      	ldr	r3, [sp, #20]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	db04      	blt.n	80077be <_dtoa_r+0xa8e>
 80077b4:	9907      	ldr	r1, [sp, #28]
 80077b6:	430b      	orrs	r3, r1
 80077b8:	9906      	ldr	r1, [sp, #24]
 80077ba:	430b      	orrs	r3, r1
 80077bc:	d120      	bne.n	8007800 <_dtoa_r+0xad0>
 80077be:	2a00      	cmp	r2, #0
 80077c0:	dded      	ble.n	800779e <_dtoa_r+0xa6e>
 80077c2:	4651      	mov	r1, sl
 80077c4:	2201      	movs	r2, #1
 80077c6:	4620      	mov	r0, r4
 80077c8:	f000 fb00 	bl	8007dcc <__lshift>
 80077cc:	4631      	mov	r1, r6
 80077ce:	4682      	mov	sl, r0
 80077d0:	f000 fb68 	bl	8007ea4 <__mcmp>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	dc03      	bgt.n	80077e0 <_dtoa_r+0xab0>
 80077d8:	d1e1      	bne.n	800779e <_dtoa_r+0xa6e>
 80077da:	f019 0f01 	tst.w	r9, #1
 80077de:	d0de      	beq.n	800779e <_dtoa_r+0xa6e>
 80077e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80077e4:	d1d8      	bne.n	8007798 <_dtoa_r+0xa68>
 80077e6:	9a01      	ldr	r2, [sp, #4]
 80077e8:	2339      	movs	r3, #57	; 0x39
 80077ea:	7013      	strb	r3, [r2, #0]
 80077ec:	462b      	mov	r3, r5
 80077ee:	461d      	mov	r5, r3
 80077f0:	3b01      	subs	r3, #1
 80077f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80077f6:	2a39      	cmp	r2, #57	; 0x39
 80077f8:	d06c      	beq.n	80078d4 <_dtoa_r+0xba4>
 80077fa:	3201      	adds	r2, #1
 80077fc:	701a      	strb	r2, [r3, #0]
 80077fe:	e747      	b.n	8007690 <_dtoa_r+0x960>
 8007800:	2a00      	cmp	r2, #0
 8007802:	dd07      	ble.n	8007814 <_dtoa_r+0xae4>
 8007804:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007808:	d0ed      	beq.n	80077e6 <_dtoa_r+0xab6>
 800780a:	9a01      	ldr	r2, [sp, #4]
 800780c:	f109 0301 	add.w	r3, r9, #1
 8007810:	7013      	strb	r3, [r2, #0]
 8007812:	e73d      	b.n	8007690 <_dtoa_r+0x960>
 8007814:	9b04      	ldr	r3, [sp, #16]
 8007816:	9a08      	ldr	r2, [sp, #32]
 8007818:	f803 9c01 	strb.w	r9, [r3, #-1]
 800781c:	4293      	cmp	r3, r2
 800781e:	d043      	beq.n	80078a8 <_dtoa_r+0xb78>
 8007820:	4651      	mov	r1, sl
 8007822:	2300      	movs	r3, #0
 8007824:	220a      	movs	r2, #10
 8007826:	4620      	mov	r0, r4
 8007828:	f000 f922 	bl	8007a70 <__multadd>
 800782c:	45b8      	cmp	r8, r7
 800782e:	4682      	mov	sl, r0
 8007830:	f04f 0300 	mov.w	r3, #0
 8007834:	f04f 020a 	mov.w	r2, #10
 8007838:	4641      	mov	r1, r8
 800783a:	4620      	mov	r0, r4
 800783c:	d107      	bne.n	800784e <_dtoa_r+0xb1e>
 800783e:	f000 f917 	bl	8007a70 <__multadd>
 8007842:	4680      	mov	r8, r0
 8007844:	4607      	mov	r7, r0
 8007846:	9b04      	ldr	r3, [sp, #16]
 8007848:	3301      	adds	r3, #1
 800784a:	9304      	str	r3, [sp, #16]
 800784c:	e775      	b.n	800773a <_dtoa_r+0xa0a>
 800784e:	f000 f90f 	bl	8007a70 <__multadd>
 8007852:	4639      	mov	r1, r7
 8007854:	4680      	mov	r8, r0
 8007856:	2300      	movs	r3, #0
 8007858:	220a      	movs	r2, #10
 800785a:	4620      	mov	r0, r4
 800785c:	f000 f908 	bl	8007a70 <__multadd>
 8007860:	4607      	mov	r7, r0
 8007862:	e7f0      	b.n	8007846 <_dtoa_r+0xb16>
 8007864:	9b04      	ldr	r3, [sp, #16]
 8007866:	9301      	str	r3, [sp, #4]
 8007868:	9d00      	ldr	r5, [sp, #0]
 800786a:	4631      	mov	r1, r6
 800786c:	4650      	mov	r0, sl
 800786e:	f7ff f9d6 	bl	8006c1e <quorem>
 8007872:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007876:	9b00      	ldr	r3, [sp, #0]
 8007878:	f805 9b01 	strb.w	r9, [r5], #1
 800787c:	1aea      	subs	r2, r5, r3
 800787e:	9b01      	ldr	r3, [sp, #4]
 8007880:	4293      	cmp	r3, r2
 8007882:	dd07      	ble.n	8007894 <_dtoa_r+0xb64>
 8007884:	4651      	mov	r1, sl
 8007886:	2300      	movs	r3, #0
 8007888:	220a      	movs	r2, #10
 800788a:	4620      	mov	r0, r4
 800788c:	f000 f8f0 	bl	8007a70 <__multadd>
 8007890:	4682      	mov	sl, r0
 8007892:	e7ea      	b.n	800786a <_dtoa_r+0xb3a>
 8007894:	9b01      	ldr	r3, [sp, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	bfc8      	it	gt
 800789a:	461d      	movgt	r5, r3
 800789c:	9b00      	ldr	r3, [sp, #0]
 800789e:	bfd8      	it	le
 80078a0:	2501      	movle	r5, #1
 80078a2:	441d      	add	r5, r3
 80078a4:	f04f 0800 	mov.w	r8, #0
 80078a8:	4651      	mov	r1, sl
 80078aa:	2201      	movs	r2, #1
 80078ac:	4620      	mov	r0, r4
 80078ae:	f000 fa8d 	bl	8007dcc <__lshift>
 80078b2:	4631      	mov	r1, r6
 80078b4:	4682      	mov	sl, r0
 80078b6:	f000 faf5 	bl	8007ea4 <__mcmp>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	dc96      	bgt.n	80077ec <_dtoa_r+0xabc>
 80078be:	d102      	bne.n	80078c6 <_dtoa_r+0xb96>
 80078c0:	f019 0f01 	tst.w	r9, #1
 80078c4:	d192      	bne.n	80077ec <_dtoa_r+0xabc>
 80078c6:	462b      	mov	r3, r5
 80078c8:	461d      	mov	r5, r3
 80078ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078ce:	2a30      	cmp	r2, #48	; 0x30
 80078d0:	d0fa      	beq.n	80078c8 <_dtoa_r+0xb98>
 80078d2:	e6dd      	b.n	8007690 <_dtoa_r+0x960>
 80078d4:	9a00      	ldr	r2, [sp, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d189      	bne.n	80077ee <_dtoa_r+0xabe>
 80078da:	f10b 0b01 	add.w	fp, fp, #1
 80078de:	2331      	movs	r3, #49	; 0x31
 80078e0:	e796      	b.n	8007810 <_dtoa_r+0xae0>
 80078e2:	4b0a      	ldr	r3, [pc, #40]	; (800790c <_dtoa_r+0xbdc>)
 80078e4:	f7ff ba99 	b.w	8006e1a <_dtoa_r+0xea>
 80078e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f47f aa6d 	bne.w	8006dca <_dtoa_r+0x9a>
 80078f0:	4b07      	ldr	r3, [pc, #28]	; (8007910 <_dtoa_r+0xbe0>)
 80078f2:	f7ff ba92 	b.w	8006e1a <_dtoa_r+0xea>
 80078f6:	9b01      	ldr	r3, [sp, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	dcb5      	bgt.n	8007868 <_dtoa_r+0xb38>
 80078fc:	9b07      	ldr	r3, [sp, #28]
 80078fe:	2b02      	cmp	r3, #2
 8007900:	f73f aeb1 	bgt.w	8007666 <_dtoa_r+0x936>
 8007904:	e7b0      	b.n	8007868 <_dtoa_r+0xb38>
 8007906:	bf00      	nop
 8007908:	08008860 	.word	0x08008860
 800790c:	080087c0 	.word	0x080087c0
 8007910:	080087e4 	.word	0x080087e4

08007914 <_free_r>:
 8007914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007916:	2900      	cmp	r1, #0
 8007918:	d044      	beq.n	80079a4 <_free_r+0x90>
 800791a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800791e:	9001      	str	r0, [sp, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	f1a1 0404 	sub.w	r4, r1, #4
 8007926:	bfb8      	it	lt
 8007928:	18e4      	addlt	r4, r4, r3
 800792a:	f7fe fa81 	bl	8005e30 <__malloc_lock>
 800792e:	4a1e      	ldr	r2, [pc, #120]	; (80079a8 <_free_r+0x94>)
 8007930:	9801      	ldr	r0, [sp, #4]
 8007932:	6813      	ldr	r3, [r2, #0]
 8007934:	b933      	cbnz	r3, 8007944 <_free_r+0x30>
 8007936:	6063      	str	r3, [r4, #4]
 8007938:	6014      	str	r4, [r2, #0]
 800793a:	b003      	add	sp, #12
 800793c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007940:	f7fe ba7c 	b.w	8005e3c <__malloc_unlock>
 8007944:	42a3      	cmp	r3, r4
 8007946:	d908      	bls.n	800795a <_free_r+0x46>
 8007948:	6825      	ldr	r5, [r4, #0]
 800794a:	1961      	adds	r1, r4, r5
 800794c:	428b      	cmp	r3, r1
 800794e:	bf01      	itttt	eq
 8007950:	6819      	ldreq	r1, [r3, #0]
 8007952:	685b      	ldreq	r3, [r3, #4]
 8007954:	1949      	addeq	r1, r1, r5
 8007956:	6021      	streq	r1, [r4, #0]
 8007958:	e7ed      	b.n	8007936 <_free_r+0x22>
 800795a:	461a      	mov	r2, r3
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	b10b      	cbz	r3, 8007964 <_free_r+0x50>
 8007960:	42a3      	cmp	r3, r4
 8007962:	d9fa      	bls.n	800795a <_free_r+0x46>
 8007964:	6811      	ldr	r1, [r2, #0]
 8007966:	1855      	adds	r5, r2, r1
 8007968:	42a5      	cmp	r5, r4
 800796a:	d10b      	bne.n	8007984 <_free_r+0x70>
 800796c:	6824      	ldr	r4, [r4, #0]
 800796e:	4421      	add	r1, r4
 8007970:	1854      	adds	r4, r2, r1
 8007972:	42a3      	cmp	r3, r4
 8007974:	6011      	str	r1, [r2, #0]
 8007976:	d1e0      	bne.n	800793a <_free_r+0x26>
 8007978:	681c      	ldr	r4, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	6053      	str	r3, [r2, #4]
 800797e:	440c      	add	r4, r1
 8007980:	6014      	str	r4, [r2, #0]
 8007982:	e7da      	b.n	800793a <_free_r+0x26>
 8007984:	d902      	bls.n	800798c <_free_r+0x78>
 8007986:	230c      	movs	r3, #12
 8007988:	6003      	str	r3, [r0, #0]
 800798a:	e7d6      	b.n	800793a <_free_r+0x26>
 800798c:	6825      	ldr	r5, [r4, #0]
 800798e:	1961      	adds	r1, r4, r5
 8007990:	428b      	cmp	r3, r1
 8007992:	bf04      	itt	eq
 8007994:	6819      	ldreq	r1, [r3, #0]
 8007996:	685b      	ldreq	r3, [r3, #4]
 8007998:	6063      	str	r3, [r4, #4]
 800799a:	bf04      	itt	eq
 800799c:	1949      	addeq	r1, r1, r5
 800799e:	6021      	streq	r1, [r4, #0]
 80079a0:	6054      	str	r4, [r2, #4]
 80079a2:	e7ca      	b.n	800793a <_free_r+0x26>
 80079a4:	b003      	add	sp, #12
 80079a6:	bd30      	pop	{r4, r5, pc}
 80079a8:	200003e4 	.word	0x200003e4

080079ac <_Balloc>:
 80079ac:	b570      	push	{r4, r5, r6, lr}
 80079ae:	69c6      	ldr	r6, [r0, #28]
 80079b0:	4604      	mov	r4, r0
 80079b2:	460d      	mov	r5, r1
 80079b4:	b976      	cbnz	r6, 80079d4 <_Balloc+0x28>
 80079b6:	2010      	movs	r0, #16
 80079b8:	f7fe f98a 	bl	8005cd0 <malloc>
 80079bc:	4602      	mov	r2, r0
 80079be:	61e0      	str	r0, [r4, #28]
 80079c0:	b920      	cbnz	r0, 80079cc <_Balloc+0x20>
 80079c2:	4b18      	ldr	r3, [pc, #96]	; (8007a24 <_Balloc+0x78>)
 80079c4:	4818      	ldr	r0, [pc, #96]	; (8007a28 <_Balloc+0x7c>)
 80079c6:	216b      	movs	r1, #107	; 0x6b
 80079c8:	f000 fcac 	bl	8008324 <__assert_func>
 80079cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079d0:	6006      	str	r6, [r0, #0]
 80079d2:	60c6      	str	r6, [r0, #12]
 80079d4:	69e6      	ldr	r6, [r4, #28]
 80079d6:	68f3      	ldr	r3, [r6, #12]
 80079d8:	b183      	cbz	r3, 80079fc <_Balloc+0x50>
 80079da:	69e3      	ldr	r3, [r4, #28]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079e2:	b9b8      	cbnz	r0, 8007a14 <_Balloc+0x68>
 80079e4:	2101      	movs	r1, #1
 80079e6:	fa01 f605 	lsl.w	r6, r1, r5
 80079ea:	1d72      	adds	r2, r6, #5
 80079ec:	0092      	lsls	r2, r2, #2
 80079ee:	4620      	mov	r0, r4
 80079f0:	f000 fcb6 	bl	8008360 <_calloc_r>
 80079f4:	b160      	cbz	r0, 8007a10 <_Balloc+0x64>
 80079f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079fa:	e00e      	b.n	8007a1a <_Balloc+0x6e>
 80079fc:	2221      	movs	r2, #33	; 0x21
 80079fe:	2104      	movs	r1, #4
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 fcad 	bl	8008360 <_calloc_r>
 8007a06:	69e3      	ldr	r3, [r4, #28]
 8007a08:	60f0      	str	r0, [r6, #12]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1e4      	bne.n	80079da <_Balloc+0x2e>
 8007a10:	2000      	movs	r0, #0
 8007a12:	bd70      	pop	{r4, r5, r6, pc}
 8007a14:	6802      	ldr	r2, [r0, #0]
 8007a16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a20:	e7f7      	b.n	8007a12 <_Balloc+0x66>
 8007a22:	bf00      	nop
 8007a24:	080087f1 	.word	0x080087f1
 8007a28:	08008871 	.word	0x08008871

08007a2c <_Bfree>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	69c6      	ldr	r6, [r0, #28]
 8007a30:	4605      	mov	r5, r0
 8007a32:	460c      	mov	r4, r1
 8007a34:	b976      	cbnz	r6, 8007a54 <_Bfree+0x28>
 8007a36:	2010      	movs	r0, #16
 8007a38:	f7fe f94a 	bl	8005cd0 <malloc>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	61e8      	str	r0, [r5, #28]
 8007a40:	b920      	cbnz	r0, 8007a4c <_Bfree+0x20>
 8007a42:	4b09      	ldr	r3, [pc, #36]	; (8007a68 <_Bfree+0x3c>)
 8007a44:	4809      	ldr	r0, [pc, #36]	; (8007a6c <_Bfree+0x40>)
 8007a46:	218f      	movs	r1, #143	; 0x8f
 8007a48:	f000 fc6c 	bl	8008324 <__assert_func>
 8007a4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a50:	6006      	str	r6, [r0, #0]
 8007a52:	60c6      	str	r6, [r0, #12]
 8007a54:	b13c      	cbz	r4, 8007a66 <_Bfree+0x3a>
 8007a56:	69eb      	ldr	r3, [r5, #28]
 8007a58:	6862      	ldr	r2, [r4, #4]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a60:	6021      	str	r1, [r4, #0]
 8007a62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a66:	bd70      	pop	{r4, r5, r6, pc}
 8007a68:	080087f1 	.word	0x080087f1
 8007a6c:	08008871 	.word	0x08008871

08007a70 <__multadd>:
 8007a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a74:	690d      	ldr	r5, [r1, #16]
 8007a76:	4607      	mov	r7, r0
 8007a78:	460c      	mov	r4, r1
 8007a7a:	461e      	mov	r6, r3
 8007a7c:	f101 0c14 	add.w	ip, r1, #20
 8007a80:	2000      	movs	r0, #0
 8007a82:	f8dc 3000 	ldr.w	r3, [ip]
 8007a86:	b299      	uxth	r1, r3
 8007a88:	fb02 6101 	mla	r1, r2, r1, r6
 8007a8c:	0c1e      	lsrs	r6, r3, #16
 8007a8e:	0c0b      	lsrs	r3, r1, #16
 8007a90:	fb02 3306 	mla	r3, r2, r6, r3
 8007a94:	b289      	uxth	r1, r1
 8007a96:	3001      	adds	r0, #1
 8007a98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a9c:	4285      	cmp	r5, r0
 8007a9e:	f84c 1b04 	str.w	r1, [ip], #4
 8007aa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007aa6:	dcec      	bgt.n	8007a82 <__multadd+0x12>
 8007aa8:	b30e      	cbz	r6, 8007aee <__multadd+0x7e>
 8007aaa:	68a3      	ldr	r3, [r4, #8]
 8007aac:	42ab      	cmp	r3, r5
 8007aae:	dc19      	bgt.n	8007ae4 <__multadd+0x74>
 8007ab0:	6861      	ldr	r1, [r4, #4]
 8007ab2:	4638      	mov	r0, r7
 8007ab4:	3101      	adds	r1, #1
 8007ab6:	f7ff ff79 	bl	80079ac <_Balloc>
 8007aba:	4680      	mov	r8, r0
 8007abc:	b928      	cbnz	r0, 8007aca <__multadd+0x5a>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	4b0c      	ldr	r3, [pc, #48]	; (8007af4 <__multadd+0x84>)
 8007ac2:	480d      	ldr	r0, [pc, #52]	; (8007af8 <__multadd+0x88>)
 8007ac4:	21ba      	movs	r1, #186	; 0xba
 8007ac6:	f000 fc2d 	bl	8008324 <__assert_func>
 8007aca:	6922      	ldr	r2, [r4, #16]
 8007acc:	3202      	adds	r2, #2
 8007ace:	f104 010c 	add.w	r1, r4, #12
 8007ad2:	0092      	lsls	r2, r2, #2
 8007ad4:	300c      	adds	r0, #12
 8007ad6:	f000 fc17 	bl	8008308 <memcpy>
 8007ada:	4621      	mov	r1, r4
 8007adc:	4638      	mov	r0, r7
 8007ade:	f7ff ffa5 	bl	8007a2c <_Bfree>
 8007ae2:	4644      	mov	r4, r8
 8007ae4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ae8:	3501      	adds	r5, #1
 8007aea:	615e      	str	r6, [r3, #20]
 8007aec:	6125      	str	r5, [r4, #16]
 8007aee:	4620      	mov	r0, r4
 8007af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af4:	08008860 	.word	0x08008860
 8007af8:	08008871 	.word	0x08008871

08007afc <__hi0bits>:
 8007afc:	0c03      	lsrs	r3, r0, #16
 8007afe:	041b      	lsls	r3, r3, #16
 8007b00:	b9d3      	cbnz	r3, 8007b38 <__hi0bits+0x3c>
 8007b02:	0400      	lsls	r0, r0, #16
 8007b04:	2310      	movs	r3, #16
 8007b06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b0a:	bf04      	itt	eq
 8007b0c:	0200      	lsleq	r0, r0, #8
 8007b0e:	3308      	addeq	r3, #8
 8007b10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b14:	bf04      	itt	eq
 8007b16:	0100      	lsleq	r0, r0, #4
 8007b18:	3304      	addeq	r3, #4
 8007b1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b1e:	bf04      	itt	eq
 8007b20:	0080      	lsleq	r0, r0, #2
 8007b22:	3302      	addeq	r3, #2
 8007b24:	2800      	cmp	r0, #0
 8007b26:	db05      	blt.n	8007b34 <__hi0bits+0x38>
 8007b28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007b2c:	f103 0301 	add.w	r3, r3, #1
 8007b30:	bf08      	it	eq
 8007b32:	2320      	moveq	r3, #32
 8007b34:	4618      	mov	r0, r3
 8007b36:	4770      	bx	lr
 8007b38:	2300      	movs	r3, #0
 8007b3a:	e7e4      	b.n	8007b06 <__hi0bits+0xa>

08007b3c <__lo0bits>:
 8007b3c:	6803      	ldr	r3, [r0, #0]
 8007b3e:	f013 0207 	ands.w	r2, r3, #7
 8007b42:	d00c      	beq.n	8007b5e <__lo0bits+0x22>
 8007b44:	07d9      	lsls	r1, r3, #31
 8007b46:	d422      	bmi.n	8007b8e <__lo0bits+0x52>
 8007b48:	079a      	lsls	r2, r3, #30
 8007b4a:	bf49      	itett	mi
 8007b4c:	085b      	lsrmi	r3, r3, #1
 8007b4e:	089b      	lsrpl	r3, r3, #2
 8007b50:	6003      	strmi	r3, [r0, #0]
 8007b52:	2201      	movmi	r2, #1
 8007b54:	bf5c      	itt	pl
 8007b56:	6003      	strpl	r3, [r0, #0]
 8007b58:	2202      	movpl	r2, #2
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	4770      	bx	lr
 8007b5e:	b299      	uxth	r1, r3
 8007b60:	b909      	cbnz	r1, 8007b66 <__lo0bits+0x2a>
 8007b62:	0c1b      	lsrs	r3, r3, #16
 8007b64:	2210      	movs	r2, #16
 8007b66:	b2d9      	uxtb	r1, r3
 8007b68:	b909      	cbnz	r1, 8007b6e <__lo0bits+0x32>
 8007b6a:	3208      	adds	r2, #8
 8007b6c:	0a1b      	lsrs	r3, r3, #8
 8007b6e:	0719      	lsls	r1, r3, #28
 8007b70:	bf04      	itt	eq
 8007b72:	091b      	lsreq	r3, r3, #4
 8007b74:	3204      	addeq	r2, #4
 8007b76:	0799      	lsls	r1, r3, #30
 8007b78:	bf04      	itt	eq
 8007b7a:	089b      	lsreq	r3, r3, #2
 8007b7c:	3202      	addeq	r2, #2
 8007b7e:	07d9      	lsls	r1, r3, #31
 8007b80:	d403      	bmi.n	8007b8a <__lo0bits+0x4e>
 8007b82:	085b      	lsrs	r3, r3, #1
 8007b84:	f102 0201 	add.w	r2, r2, #1
 8007b88:	d003      	beq.n	8007b92 <__lo0bits+0x56>
 8007b8a:	6003      	str	r3, [r0, #0]
 8007b8c:	e7e5      	b.n	8007b5a <__lo0bits+0x1e>
 8007b8e:	2200      	movs	r2, #0
 8007b90:	e7e3      	b.n	8007b5a <__lo0bits+0x1e>
 8007b92:	2220      	movs	r2, #32
 8007b94:	e7e1      	b.n	8007b5a <__lo0bits+0x1e>
	...

08007b98 <__i2b>:
 8007b98:	b510      	push	{r4, lr}
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	2101      	movs	r1, #1
 8007b9e:	f7ff ff05 	bl	80079ac <_Balloc>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	b928      	cbnz	r0, 8007bb2 <__i2b+0x1a>
 8007ba6:	4b05      	ldr	r3, [pc, #20]	; (8007bbc <__i2b+0x24>)
 8007ba8:	4805      	ldr	r0, [pc, #20]	; (8007bc0 <__i2b+0x28>)
 8007baa:	f240 1145 	movw	r1, #325	; 0x145
 8007bae:	f000 fbb9 	bl	8008324 <__assert_func>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	6144      	str	r4, [r0, #20]
 8007bb6:	6103      	str	r3, [r0, #16]
 8007bb8:	bd10      	pop	{r4, pc}
 8007bba:	bf00      	nop
 8007bbc:	08008860 	.word	0x08008860
 8007bc0:	08008871 	.word	0x08008871

08007bc4 <__multiply>:
 8007bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc8:	4691      	mov	r9, r2
 8007bca:	690a      	ldr	r2, [r1, #16]
 8007bcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	bfb8      	it	lt
 8007bd4:	460b      	movlt	r3, r1
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	bfbc      	itt	lt
 8007bda:	464c      	movlt	r4, r9
 8007bdc:	4699      	movlt	r9, r3
 8007bde:	6927      	ldr	r7, [r4, #16]
 8007be0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007be4:	68a3      	ldr	r3, [r4, #8]
 8007be6:	6861      	ldr	r1, [r4, #4]
 8007be8:	eb07 060a 	add.w	r6, r7, sl
 8007bec:	42b3      	cmp	r3, r6
 8007bee:	b085      	sub	sp, #20
 8007bf0:	bfb8      	it	lt
 8007bf2:	3101      	addlt	r1, #1
 8007bf4:	f7ff feda 	bl	80079ac <_Balloc>
 8007bf8:	b930      	cbnz	r0, 8007c08 <__multiply+0x44>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	4b44      	ldr	r3, [pc, #272]	; (8007d10 <__multiply+0x14c>)
 8007bfe:	4845      	ldr	r0, [pc, #276]	; (8007d14 <__multiply+0x150>)
 8007c00:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007c04:	f000 fb8e 	bl	8008324 <__assert_func>
 8007c08:	f100 0514 	add.w	r5, r0, #20
 8007c0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c10:	462b      	mov	r3, r5
 8007c12:	2200      	movs	r2, #0
 8007c14:	4543      	cmp	r3, r8
 8007c16:	d321      	bcc.n	8007c5c <__multiply+0x98>
 8007c18:	f104 0314 	add.w	r3, r4, #20
 8007c1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007c20:	f109 0314 	add.w	r3, r9, #20
 8007c24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007c28:	9202      	str	r2, [sp, #8]
 8007c2a:	1b3a      	subs	r2, r7, r4
 8007c2c:	3a15      	subs	r2, #21
 8007c2e:	f022 0203 	bic.w	r2, r2, #3
 8007c32:	3204      	adds	r2, #4
 8007c34:	f104 0115 	add.w	r1, r4, #21
 8007c38:	428f      	cmp	r7, r1
 8007c3a:	bf38      	it	cc
 8007c3c:	2204      	movcc	r2, #4
 8007c3e:	9201      	str	r2, [sp, #4]
 8007c40:	9a02      	ldr	r2, [sp, #8]
 8007c42:	9303      	str	r3, [sp, #12]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d80c      	bhi.n	8007c62 <__multiply+0x9e>
 8007c48:	2e00      	cmp	r6, #0
 8007c4a:	dd03      	ble.n	8007c54 <__multiply+0x90>
 8007c4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d05b      	beq.n	8007d0c <__multiply+0x148>
 8007c54:	6106      	str	r6, [r0, #16]
 8007c56:	b005      	add	sp, #20
 8007c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5c:	f843 2b04 	str.w	r2, [r3], #4
 8007c60:	e7d8      	b.n	8007c14 <__multiply+0x50>
 8007c62:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c66:	f1ba 0f00 	cmp.w	sl, #0
 8007c6a:	d024      	beq.n	8007cb6 <__multiply+0xf2>
 8007c6c:	f104 0e14 	add.w	lr, r4, #20
 8007c70:	46a9      	mov	r9, r5
 8007c72:	f04f 0c00 	mov.w	ip, #0
 8007c76:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c7a:	f8d9 1000 	ldr.w	r1, [r9]
 8007c7e:	fa1f fb82 	uxth.w	fp, r2
 8007c82:	b289      	uxth	r1, r1
 8007c84:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007c8c:	f8d9 2000 	ldr.w	r2, [r9]
 8007c90:	4461      	add	r1, ip
 8007c92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c96:	fb0a c20b 	mla	r2, sl, fp, ip
 8007c9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c9e:	b289      	uxth	r1, r1
 8007ca0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ca4:	4577      	cmp	r7, lr
 8007ca6:	f849 1b04 	str.w	r1, [r9], #4
 8007caa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007cae:	d8e2      	bhi.n	8007c76 <__multiply+0xb2>
 8007cb0:	9a01      	ldr	r2, [sp, #4]
 8007cb2:	f845 c002 	str.w	ip, [r5, r2]
 8007cb6:	9a03      	ldr	r2, [sp, #12]
 8007cb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	f1b9 0f00 	cmp.w	r9, #0
 8007cc2:	d021      	beq.n	8007d08 <__multiply+0x144>
 8007cc4:	6829      	ldr	r1, [r5, #0]
 8007cc6:	f104 0c14 	add.w	ip, r4, #20
 8007cca:	46ae      	mov	lr, r5
 8007ccc:	f04f 0a00 	mov.w	sl, #0
 8007cd0:	f8bc b000 	ldrh.w	fp, [ip]
 8007cd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007cd8:	fb09 220b 	mla	r2, r9, fp, r2
 8007cdc:	4452      	add	r2, sl
 8007cde:	b289      	uxth	r1, r1
 8007ce0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ce4:	f84e 1b04 	str.w	r1, [lr], #4
 8007ce8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007cec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007cf0:	f8be 1000 	ldrh.w	r1, [lr]
 8007cf4:	fb09 110a 	mla	r1, r9, sl, r1
 8007cf8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007cfc:	4567      	cmp	r7, ip
 8007cfe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d02:	d8e5      	bhi.n	8007cd0 <__multiply+0x10c>
 8007d04:	9a01      	ldr	r2, [sp, #4]
 8007d06:	50a9      	str	r1, [r5, r2]
 8007d08:	3504      	adds	r5, #4
 8007d0a:	e799      	b.n	8007c40 <__multiply+0x7c>
 8007d0c:	3e01      	subs	r6, #1
 8007d0e:	e79b      	b.n	8007c48 <__multiply+0x84>
 8007d10:	08008860 	.word	0x08008860
 8007d14:	08008871 	.word	0x08008871

08007d18 <__pow5mult>:
 8007d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d1c:	4615      	mov	r5, r2
 8007d1e:	f012 0203 	ands.w	r2, r2, #3
 8007d22:	4606      	mov	r6, r0
 8007d24:	460f      	mov	r7, r1
 8007d26:	d007      	beq.n	8007d38 <__pow5mult+0x20>
 8007d28:	4c25      	ldr	r4, [pc, #148]	; (8007dc0 <__pow5mult+0xa8>)
 8007d2a:	3a01      	subs	r2, #1
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d32:	f7ff fe9d 	bl	8007a70 <__multadd>
 8007d36:	4607      	mov	r7, r0
 8007d38:	10ad      	asrs	r5, r5, #2
 8007d3a:	d03d      	beq.n	8007db8 <__pow5mult+0xa0>
 8007d3c:	69f4      	ldr	r4, [r6, #28]
 8007d3e:	b97c      	cbnz	r4, 8007d60 <__pow5mult+0x48>
 8007d40:	2010      	movs	r0, #16
 8007d42:	f7fd ffc5 	bl	8005cd0 <malloc>
 8007d46:	4602      	mov	r2, r0
 8007d48:	61f0      	str	r0, [r6, #28]
 8007d4a:	b928      	cbnz	r0, 8007d58 <__pow5mult+0x40>
 8007d4c:	4b1d      	ldr	r3, [pc, #116]	; (8007dc4 <__pow5mult+0xac>)
 8007d4e:	481e      	ldr	r0, [pc, #120]	; (8007dc8 <__pow5mult+0xb0>)
 8007d50:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007d54:	f000 fae6 	bl	8008324 <__assert_func>
 8007d58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d5c:	6004      	str	r4, [r0, #0]
 8007d5e:	60c4      	str	r4, [r0, #12]
 8007d60:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007d64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d68:	b94c      	cbnz	r4, 8007d7e <__pow5mult+0x66>
 8007d6a:	f240 2171 	movw	r1, #625	; 0x271
 8007d6e:	4630      	mov	r0, r6
 8007d70:	f7ff ff12 	bl	8007b98 <__i2b>
 8007d74:	2300      	movs	r3, #0
 8007d76:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	6003      	str	r3, [r0, #0]
 8007d7e:	f04f 0900 	mov.w	r9, #0
 8007d82:	07eb      	lsls	r3, r5, #31
 8007d84:	d50a      	bpl.n	8007d9c <__pow5mult+0x84>
 8007d86:	4639      	mov	r1, r7
 8007d88:	4622      	mov	r2, r4
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	f7ff ff1a 	bl	8007bc4 <__multiply>
 8007d90:	4639      	mov	r1, r7
 8007d92:	4680      	mov	r8, r0
 8007d94:	4630      	mov	r0, r6
 8007d96:	f7ff fe49 	bl	8007a2c <_Bfree>
 8007d9a:	4647      	mov	r7, r8
 8007d9c:	106d      	asrs	r5, r5, #1
 8007d9e:	d00b      	beq.n	8007db8 <__pow5mult+0xa0>
 8007da0:	6820      	ldr	r0, [r4, #0]
 8007da2:	b938      	cbnz	r0, 8007db4 <__pow5mult+0x9c>
 8007da4:	4622      	mov	r2, r4
 8007da6:	4621      	mov	r1, r4
 8007da8:	4630      	mov	r0, r6
 8007daa:	f7ff ff0b 	bl	8007bc4 <__multiply>
 8007dae:	6020      	str	r0, [r4, #0]
 8007db0:	f8c0 9000 	str.w	r9, [r0]
 8007db4:	4604      	mov	r4, r0
 8007db6:	e7e4      	b.n	8007d82 <__pow5mult+0x6a>
 8007db8:	4638      	mov	r0, r7
 8007dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dbe:	bf00      	nop
 8007dc0:	080089c0 	.word	0x080089c0
 8007dc4:	080087f1 	.word	0x080087f1
 8007dc8:	08008871 	.word	0x08008871

08007dcc <__lshift>:
 8007dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	6849      	ldr	r1, [r1, #4]
 8007dd4:	6923      	ldr	r3, [r4, #16]
 8007dd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007dda:	68a3      	ldr	r3, [r4, #8]
 8007ddc:	4607      	mov	r7, r0
 8007dde:	4691      	mov	r9, r2
 8007de0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007de4:	f108 0601 	add.w	r6, r8, #1
 8007de8:	42b3      	cmp	r3, r6
 8007dea:	db0b      	blt.n	8007e04 <__lshift+0x38>
 8007dec:	4638      	mov	r0, r7
 8007dee:	f7ff fddd 	bl	80079ac <_Balloc>
 8007df2:	4605      	mov	r5, r0
 8007df4:	b948      	cbnz	r0, 8007e0a <__lshift+0x3e>
 8007df6:	4602      	mov	r2, r0
 8007df8:	4b28      	ldr	r3, [pc, #160]	; (8007e9c <__lshift+0xd0>)
 8007dfa:	4829      	ldr	r0, [pc, #164]	; (8007ea0 <__lshift+0xd4>)
 8007dfc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007e00:	f000 fa90 	bl	8008324 <__assert_func>
 8007e04:	3101      	adds	r1, #1
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	e7ee      	b.n	8007de8 <__lshift+0x1c>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f100 0114 	add.w	r1, r0, #20
 8007e10:	f100 0210 	add.w	r2, r0, #16
 8007e14:	4618      	mov	r0, r3
 8007e16:	4553      	cmp	r3, sl
 8007e18:	db33      	blt.n	8007e82 <__lshift+0xb6>
 8007e1a:	6920      	ldr	r0, [r4, #16]
 8007e1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e20:	f104 0314 	add.w	r3, r4, #20
 8007e24:	f019 091f 	ands.w	r9, r9, #31
 8007e28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e30:	d02b      	beq.n	8007e8a <__lshift+0xbe>
 8007e32:	f1c9 0e20 	rsb	lr, r9, #32
 8007e36:	468a      	mov	sl, r1
 8007e38:	2200      	movs	r2, #0
 8007e3a:	6818      	ldr	r0, [r3, #0]
 8007e3c:	fa00 f009 	lsl.w	r0, r0, r9
 8007e40:	4310      	orrs	r0, r2
 8007e42:	f84a 0b04 	str.w	r0, [sl], #4
 8007e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e4a:	459c      	cmp	ip, r3
 8007e4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e50:	d8f3      	bhi.n	8007e3a <__lshift+0x6e>
 8007e52:	ebac 0304 	sub.w	r3, ip, r4
 8007e56:	3b15      	subs	r3, #21
 8007e58:	f023 0303 	bic.w	r3, r3, #3
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	f104 0015 	add.w	r0, r4, #21
 8007e62:	4584      	cmp	ip, r0
 8007e64:	bf38      	it	cc
 8007e66:	2304      	movcc	r3, #4
 8007e68:	50ca      	str	r2, [r1, r3]
 8007e6a:	b10a      	cbz	r2, 8007e70 <__lshift+0xa4>
 8007e6c:	f108 0602 	add.w	r6, r8, #2
 8007e70:	3e01      	subs	r6, #1
 8007e72:	4638      	mov	r0, r7
 8007e74:	612e      	str	r6, [r5, #16]
 8007e76:	4621      	mov	r1, r4
 8007e78:	f7ff fdd8 	bl	8007a2c <_Bfree>
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e82:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e86:	3301      	adds	r3, #1
 8007e88:	e7c5      	b.n	8007e16 <__lshift+0x4a>
 8007e8a:	3904      	subs	r1, #4
 8007e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e90:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e94:	459c      	cmp	ip, r3
 8007e96:	d8f9      	bhi.n	8007e8c <__lshift+0xc0>
 8007e98:	e7ea      	b.n	8007e70 <__lshift+0xa4>
 8007e9a:	bf00      	nop
 8007e9c:	08008860 	.word	0x08008860
 8007ea0:	08008871 	.word	0x08008871

08007ea4 <__mcmp>:
 8007ea4:	b530      	push	{r4, r5, lr}
 8007ea6:	6902      	ldr	r2, [r0, #16]
 8007ea8:	690c      	ldr	r4, [r1, #16]
 8007eaa:	1b12      	subs	r2, r2, r4
 8007eac:	d10e      	bne.n	8007ecc <__mcmp+0x28>
 8007eae:	f100 0314 	add.w	r3, r0, #20
 8007eb2:	3114      	adds	r1, #20
 8007eb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007eb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ebc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ec0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ec4:	42a5      	cmp	r5, r4
 8007ec6:	d003      	beq.n	8007ed0 <__mcmp+0x2c>
 8007ec8:	d305      	bcc.n	8007ed6 <__mcmp+0x32>
 8007eca:	2201      	movs	r2, #1
 8007ecc:	4610      	mov	r0, r2
 8007ece:	bd30      	pop	{r4, r5, pc}
 8007ed0:	4283      	cmp	r3, r0
 8007ed2:	d3f3      	bcc.n	8007ebc <__mcmp+0x18>
 8007ed4:	e7fa      	b.n	8007ecc <__mcmp+0x28>
 8007ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eda:	e7f7      	b.n	8007ecc <__mcmp+0x28>

08007edc <__mdiff>:
 8007edc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee0:	460c      	mov	r4, r1
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	4690      	mov	r8, r2
 8007eea:	f7ff ffdb 	bl	8007ea4 <__mcmp>
 8007eee:	1e05      	subs	r5, r0, #0
 8007ef0:	d110      	bne.n	8007f14 <__mdiff+0x38>
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	f7ff fd59 	bl	80079ac <_Balloc>
 8007efa:	b930      	cbnz	r0, 8007f0a <__mdiff+0x2e>
 8007efc:	4b3a      	ldr	r3, [pc, #232]	; (8007fe8 <__mdiff+0x10c>)
 8007efe:	4602      	mov	r2, r0
 8007f00:	f240 2137 	movw	r1, #567	; 0x237
 8007f04:	4839      	ldr	r0, [pc, #228]	; (8007fec <__mdiff+0x110>)
 8007f06:	f000 fa0d 	bl	8008324 <__assert_func>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f14:	bfa4      	itt	ge
 8007f16:	4643      	movge	r3, r8
 8007f18:	46a0      	movge	r8, r4
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007f20:	bfa6      	itte	ge
 8007f22:	461c      	movge	r4, r3
 8007f24:	2500      	movge	r5, #0
 8007f26:	2501      	movlt	r5, #1
 8007f28:	f7ff fd40 	bl	80079ac <_Balloc>
 8007f2c:	b920      	cbnz	r0, 8007f38 <__mdiff+0x5c>
 8007f2e:	4b2e      	ldr	r3, [pc, #184]	; (8007fe8 <__mdiff+0x10c>)
 8007f30:	4602      	mov	r2, r0
 8007f32:	f240 2145 	movw	r1, #581	; 0x245
 8007f36:	e7e5      	b.n	8007f04 <__mdiff+0x28>
 8007f38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007f3c:	6926      	ldr	r6, [r4, #16]
 8007f3e:	60c5      	str	r5, [r0, #12]
 8007f40:	f104 0914 	add.w	r9, r4, #20
 8007f44:	f108 0514 	add.w	r5, r8, #20
 8007f48:	f100 0e14 	add.w	lr, r0, #20
 8007f4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007f50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f54:	f108 0210 	add.w	r2, r8, #16
 8007f58:	46f2      	mov	sl, lr
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f64:	fa11 f88b 	uxtah	r8, r1, fp
 8007f68:	b299      	uxth	r1, r3
 8007f6a:	0c1b      	lsrs	r3, r3, #16
 8007f6c:	eba8 0801 	sub.w	r8, r8, r1
 8007f70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f74:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f78:	fa1f f888 	uxth.w	r8, r8
 8007f7c:	1419      	asrs	r1, r3, #16
 8007f7e:	454e      	cmp	r6, r9
 8007f80:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f84:	f84a 3b04 	str.w	r3, [sl], #4
 8007f88:	d8e8      	bhi.n	8007f5c <__mdiff+0x80>
 8007f8a:	1b33      	subs	r3, r6, r4
 8007f8c:	3b15      	subs	r3, #21
 8007f8e:	f023 0303 	bic.w	r3, r3, #3
 8007f92:	3304      	adds	r3, #4
 8007f94:	3415      	adds	r4, #21
 8007f96:	42a6      	cmp	r6, r4
 8007f98:	bf38      	it	cc
 8007f9a:	2304      	movcc	r3, #4
 8007f9c:	441d      	add	r5, r3
 8007f9e:	4473      	add	r3, lr
 8007fa0:	469e      	mov	lr, r3
 8007fa2:	462e      	mov	r6, r5
 8007fa4:	4566      	cmp	r6, ip
 8007fa6:	d30e      	bcc.n	8007fc6 <__mdiff+0xea>
 8007fa8:	f10c 0203 	add.w	r2, ip, #3
 8007fac:	1b52      	subs	r2, r2, r5
 8007fae:	f022 0203 	bic.w	r2, r2, #3
 8007fb2:	3d03      	subs	r5, #3
 8007fb4:	45ac      	cmp	ip, r5
 8007fb6:	bf38      	it	cc
 8007fb8:	2200      	movcc	r2, #0
 8007fba:	4413      	add	r3, r2
 8007fbc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007fc0:	b17a      	cbz	r2, 8007fe2 <__mdiff+0x106>
 8007fc2:	6107      	str	r7, [r0, #16]
 8007fc4:	e7a4      	b.n	8007f10 <__mdiff+0x34>
 8007fc6:	f856 8b04 	ldr.w	r8, [r6], #4
 8007fca:	fa11 f288 	uxtah	r2, r1, r8
 8007fce:	1414      	asrs	r4, r2, #16
 8007fd0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007fd4:	b292      	uxth	r2, r2
 8007fd6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007fda:	f84e 2b04 	str.w	r2, [lr], #4
 8007fde:	1421      	asrs	r1, r4, #16
 8007fe0:	e7e0      	b.n	8007fa4 <__mdiff+0xc8>
 8007fe2:	3f01      	subs	r7, #1
 8007fe4:	e7ea      	b.n	8007fbc <__mdiff+0xe0>
 8007fe6:	bf00      	nop
 8007fe8:	08008860 	.word	0x08008860
 8007fec:	08008871 	.word	0x08008871

08007ff0 <__d2b>:
 8007ff0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ff4:	460f      	mov	r7, r1
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	ec59 8b10 	vmov	r8, r9, d0
 8007ffc:	4616      	mov	r6, r2
 8007ffe:	f7ff fcd5 	bl	80079ac <_Balloc>
 8008002:	4604      	mov	r4, r0
 8008004:	b930      	cbnz	r0, 8008014 <__d2b+0x24>
 8008006:	4602      	mov	r2, r0
 8008008:	4b24      	ldr	r3, [pc, #144]	; (800809c <__d2b+0xac>)
 800800a:	4825      	ldr	r0, [pc, #148]	; (80080a0 <__d2b+0xb0>)
 800800c:	f240 310f 	movw	r1, #783	; 0x30f
 8008010:	f000 f988 	bl	8008324 <__assert_func>
 8008014:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008018:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800801c:	bb2d      	cbnz	r5, 800806a <__d2b+0x7a>
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	f1b8 0300 	subs.w	r3, r8, #0
 8008024:	d026      	beq.n	8008074 <__d2b+0x84>
 8008026:	4668      	mov	r0, sp
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	f7ff fd87 	bl	8007b3c <__lo0bits>
 800802e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008032:	b1e8      	cbz	r0, 8008070 <__d2b+0x80>
 8008034:	f1c0 0320 	rsb	r3, r0, #32
 8008038:	fa02 f303 	lsl.w	r3, r2, r3
 800803c:	430b      	orrs	r3, r1
 800803e:	40c2      	lsrs	r2, r0
 8008040:	6163      	str	r3, [r4, #20]
 8008042:	9201      	str	r2, [sp, #4]
 8008044:	9b01      	ldr	r3, [sp, #4]
 8008046:	61a3      	str	r3, [r4, #24]
 8008048:	2b00      	cmp	r3, #0
 800804a:	bf14      	ite	ne
 800804c:	2202      	movne	r2, #2
 800804e:	2201      	moveq	r2, #1
 8008050:	6122      	str	r2, [r4, #16]
 8008052:	b1bd      	cbz	r5, 8008084 <__d2b+0x94>
 8008054:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008058:	4405      	add	r5, r0
 800805a:	603d      	str	r5, [r7, #0]
 800805c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008060:	6030      	str	r0, [r6, #0]
 8008062:	4620      	mov	r0, r4
 8008064:	b003      	add	sp, #12
 8008066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800806a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800806e:	e7d6      	b.n	800801e <__d2b+0x2e>
 8008070:	6161      	str	r1, [r4, #20]
 8008072:	e7e7      	b.n	8008044 <__d2b+0x54>
 8008074:	a801      	add	r0, sp, #4
 8008076:	f7ff fd61 	bl	8007b3c <__lo0bits>
 800807a:	9b01      	ldr	r3, [sp, #4]
 800807c:	6163      	str	r3, [r4, #20]
 800807e:	3020      	adds	r0, #32
 8008080:	2201      	movs	r2, #1
 8008082:	e7e5      	b.n	8008050 <__d2b+0x60>
 8008084:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008088:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800808c:	6038      	str	r0, [r7, #0]
 800808e:	6918      	ldr	r0, [r3, #16]
 8008090:	f7ff fd34 	bl	8007afc <__hi0bits>
 8008094:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008098:	e7e2      	b.n	8008060 <__d2b+0x70>
 800809a:	bf00      	nop
 800809c:	08008860 	.word	0x08008860
 80080a0:	08008871 	.word	0x08008871

080080a4 <__sflush_r>:
 80080a4:	898a      	ldrh	r2, [r1, #12]
 80080a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080aa:	4605      	mov	r5, r0
 80080ac:	0710      	lsls	r0, r2, #28
 80080ae:	460c      	mov	r4, r1
 80080b0:	d458      	bmi.n	8008164 <__sflush_r+0xc0>
 80080b2:	684b      	ldr	r3, [r1, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	dc05      	bgt.n	80080c4 <__sflush_r+0x20>
 80080b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	dc02      	bgt.n	80080c4 <__sflush_r+0x20>
 80080be:	2000      	movs	r0, #0
 80080c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080c6:	2e00      	cmp	r6, #0
 80080c8:	d0f9      	beq.n	80080be <__sflush_r+0x1a>
 80080ca:	2300      	movs	r3, #0
 80080cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080d0:	682f      	ldr	r7, [r5, #0]
 80080d2:	6a21      	ldr	r1, [r4, #32]
 80080d4:	602b      	str	r3, [r5, #0]
 80080d6:	d032      	beq.n	800813e <__sflush_r+0x9a>
 80080d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080da:	89a3      	ldrh	r3, [r4, #12]
 80080dc:	075a      	lsls	r2, r3, #29
 80080de:	d505      	bpl.n	80080ec <__sflush_r+0x48>
 80080e0:	6863      	ldr	r3, [r4, #4]
 80080e2:	1ac0      	subs	r0, r0, r3
 80080e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080e6:	b10b      	cbz	r3, 80080ec <__sflush_r+0x48>
 80080e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080ea:	1ac0      	subs	r0, r0, r3
 80080ec:	2300      	movs	r3, #0
 80080ee:	4602      	mov	r2, r0
 80080f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080f2:	6a21      	ldr	r1, [r4, #32]
 80080f4:	4628      	mov	r0, r5
 80080f6:	47b0      	blx	r6
 80080f8:	1c43      	adds	r3, r0, #1
 80080fa:	89a3      	ldrh	r3, [r4, #12]
 80080fc:	d106      	bne.n	800810c <__sflush_r+0x68>
 80080fe:	6829      	ldr	r1, [r5, #0]
 8008100:	291d      	cmp	r1, #29
 8008102:	d82b      	bhi.n	800815c <__sflush_r+0xb8>
 8008104:	4a29      	ldr	r2, [pc, #164]	; (80081ac <__sflush_r+0x108>)
 8008106:	410a      	asrs	r2, r1
 8008108:	07d6      	lsls	r6, r2, #31
 800810a:	d427      	bmi.n	800815c <__sflush_r+0xb8>
 800810c:	2200      	movs	r2, #0
 800810e:	6062      	str	r2, [r4, #4]
 8008110:	04d9      	lsls	r1, r3, #19
 8008112:	6922      	ldr	r2, [r4, #16]
 8008114:	6022      	str	r2, [r4, #0]
 8008116:	d504      	bpl.n	8008122 <__sflush_r+0x7e>
 8008118:	1c42      	adds	r2, r0, #1
 800811a:	d101      	bne.n	8008120 <__sflush_r+0x7c>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	b903      	cbnz	r3, 8008122 <__sflush_r+0x7e>
 8008120:	6560      	str	r0, [r4, #84]	; 0x54
 8008122:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008124:	602f      	str	r7, [r5, #0]
 8008126:	2900      	cmp	r1, #0
 8008128:	d0c9      	beq.n	80080be <__sflush_r+0x1a>
 800812a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800812e:	4299      	cmp	r1, r3
 8008130:	d002      	beq.n	8008138 <__sflush_r+0x94>
 8008132:	4628      	mov	r0, r5
 8008134:	f7ff fbee 	bl	8007914 <_free_r>
 8008138:	2000      	movs	r0, #0
 800813a:	6360      	str	r0, [r4, #52]	; 0x34
 800813c:	e7c0      	b.n	80080c0 <__sflush_r+0x1c>
 800813e:	2301      	movs	r3, #1
 8008140:	4628      	mov	r0, r5
 8008142:	47b0      	blx	r6
 8008144:	1c41      	adds	r1, r0, #1
 8008146:	d1c8      	bne.n	80080da <__sflush_r+0x36>
 8008148:	682b      	ldr	r3, [r5, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0c5      	beq.n	80080da <__sflush_r+0x36>
 800814e:	2b1d      	cmp	r3, #29
 8008150:	d001      	beq.n	8008156 <__sflush_r+0xb2>
 8008152:	2b16      	cmp	r3, #22
 8008154:	d101      	bne.n	800815a <__sflush_r+0xb6>
 8008156:	602f      	str	r7, [r5, #0]
 8008158:	e7b1      	b.n	80080be <__sflush_r+0x1a>
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008160:	81a3      	strh	r3, [r4, #12]
 8008162:	e7ad      	b.n	80080c0 <__sflush_r+0x1c>
 8008164:	690f      	ldr	r7, [r1, #16]
 8008166:	2f00      	cmp	r7, #0
 8008168:	d0a9      	beq.n	80080be <__sflush_r+0x1a>
 800816a:	0793      	lsls	r3, r2, #30
 800816c:	680e      	ldr	r6, [r1, #0]
 800816e:	bf08      	it	eq
 8008170:	694b      	ldreq	r3, [r1, #20]
 8008172:	600f      	str	r7, [r1, #0]
 8008174:	bf18      	it	ne
 8008176:	2300      	movne	r3, #0
 8008178:	eba6 0807 	sub.w	r8, r6, r7
 800817c:	608b      	str	r3, [r1, #8]
 800817e:	f1b8 0f00 	cmp.w	r8, #0
 8008182:	dd9c      	ble.n	80080be <__sflush_r+0x1a>
 8008184:	6a21      	ldr	r1, [r4, #32]
 8008186:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008188:	4643      	mov	r3, r8
 800818a:	463a      	mov	r2, r7
 800818c:	4628      	mov	r0, r5
 800818e:	47b0      	blx	r6
 8008190:	2800      	cmp	r0, #0
 8008192:	dc06      	bgt.n	80081a2 <__sflush_r+0xfe>
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800819a:	81a3      	strh	r3, [r4, #12]
 800819c:	f04f 30ff 	mov.w	r0, #4294967295
 80081a0:	e78e      	b.n	80080c0 <__sflush_r+0x1c>
 80081a2:	4407      	add	r7, r0
 80081a4:	eba8 0800 	sub.w	r8, r8, r0
 80081a8:	e7e9      	b.n	800817e <__sflush_r+0xda>
 80081aa:	bf00      	nop
 80081ac:	dfbffffe 	.word	0xdfbffffe

080081b0 <_fflush_r>:
 80081b0:	b538      	push	{r3, r4, r5, lr}
 80081b2:	690b      	ldr	r3, [r1, #16]
 80081b4:	4605      	mov	r5, r0
 80081b6:	460c      	mov	r4, r1
 80081b8:	b913      	cbnz	r3, 80081c0 <_fflush_r+0x10>
 80081ba:	2500      	movs	r5, #0
 80081bc:	4628      	mov	r0, r5
 80081be:	bd38      	pop	{r3, r4, r5, pc}
 80081c0:	b118      	cbz	r0, 80081ca <_fflush_r+0x1a>
 80081c2:	6a03      	ldr	r3, [r0, #32]
 80081c4:	b90b      	cbnz	r3, 80081ca <_fflush_r+0x1a>
 80081c6:	f7fe fb31 	bl	800682c <__sinit>
 80081ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0f3      	beq.n	80081ba <_fflush_r+0xa>
 80081d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081d4:	07d0      	lsls	r0, r2, #31
 80081d6:	d404      	bmi.n	80081e2 <_fflush_r+0x32>
 80081d8:	0599      	lsls	r1, r3, #22
 80081da:	d402      	bmi.n	80081e2 <_fflush_r+0x32>
 80081dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081de:	f7fe fd1c 	bl	8006c1a <__retarget_lock_acquire_recursive>
 80081e2:	4628      	mov	r0, r5
 80081e4:	4621      	mov	r1, r4
 80081e6:	f7ff ff5d 	bl	80080a4 <__sflush_r>
 80081ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081ec:	07da      	lsls	r2, r3, #31
 80081ee:	4605      	mov	r5, r0
 80081f0:	d4e4      	bmi.n	80081bc <_fflush_r+0xc>
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	059b      	lsls	r3, r3, #22
 80081f6:	d4e1      	bmi.n	80081bc <_fflush_r+0xc>
 80081f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081fa:	f7fe fd0f 	bl	8006c1c <__retarget_lock_release_recursive>
 80081fe:	e7dd      	b.n	80081bc <_fflush_r+0xc>

08008200 <__swhatbuf_r>:
 8008200:	b570      	push	{r4, r5, r6, lr}
 8008202:	460c      	mov	r4, r1
 8008204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008208:	2900      	cmp	r1, #0
 800820a:	b096      	sub	sp, #88	; 0x58
 800820c:	4615      	mov	r5, r2
 800820e:	461e      	mov	r6, r3
 8008210:	da0d      	bge.n	800822e <__swhatbuf_r+0x2e>
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008218:	f04f 0100 	mov.w	r1, #0
 800821c:	bf0c      	ite	eq
 800821e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008222:	2340      	movne	r3, #64	; 0x40
 8008224:	2000      	movs	r0, #0
 8008226:	6031      	str	r1, [r6, #0]
 8008228:	602b      	str	r3, [r5, #0]
 800822a:	b016      	add	sp, #88	; 0x58
 800822c:	bd70      	pop	{r4, r5, r6, pc}
 800822e:	466a      	mov	r2, sp
 8008230:	f000 f848 	bl	80082c4 <_fstat_r>
 8008234:	2800      	cmp	r0, #0
 8008236:	dbec      	blt.n	8008212 <__swhatbuf_r+0x12>
 8008238:	9901      	ldr	r1, [sp, #4]
 800823a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800823e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008242:	4259      	negs	r1, r3
 8008244:	4159      	adcs	r1, r3
 8008246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800824a:	e7eb      	b.n	8008224 <__swhatbuf_r+0x24>

0800824c <__smakebuf_r>:
 800824c:	898b      	ldrh	r3, [r1, #12]
 800824e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008250:	079d      	lsls	r5, r3, #30
 8008252:	4606      	mov	r6, r0
 8008254:	460c      	mov	r4, r1
 8008256:	d507      	bpl.n	8008268 <__smakebuf_r+0x1c>
 8008258:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800825c:	6023      	str	r3, [r4, #0]
 800825e:	6123      	str	r3, [r4, #16]
 8008260:	2301      	movs	r3, #1
 8008262:	6163      	str	r3, [r4, #20]
 8008264:	b002      	add	sp, #8
 8008266:	bd70      	pop	{r4, r5, r6, pc}
 8008268:	ab01      	add	r3, sp, #4
 800826a:	466a      	mov	r2, sp
 800826c:	f7ff ffc8 	bl	8008200 <__swhatbuf_r>
 8008270:	9900      	ldr	r1, [sp, #0]
 8008272:	4605      	mov	r5, r0
 8008274:	4630      	mov	r0, r6
 8008276:	f7fd fd5b 	bl	8005d30 <_malloc_r>
 800827a:	b948      	cbnz	r0, 8008290 <__smakebuf_r+0x44>
 800827c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008280:	059a      	lsls	r2, r3, #22
 8008282:	d4ef      	bmi.n	8008264 <__smakebuf_r+0x18>
 8008284:	f023 0303 	bic.w	r3, r3, #3
 8008288:	f043 0302 	orr.w	r3, r3, #2
 800828c:	81a3      	strh	r3, [r4, #12]
 800828e:	e7e3      	b.n	8008258 <__smakebuf_r+0xc>
 8008290:	89a3      	ldrh	r3, [r4, #12]
 8008292:	6020      	str	r0, [r4, #0]
 8008294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008298:	81a3      	strh	r3, [r4, #12]
 800829a:	9b00      	ldr	r3, [sp, #0]
 800829c:	6163      	str	r3, [r4, #20]
 800829e:	9b01      	ldr	r3, [sp, #4]
 80082a0:	6120      	str	r0, [r4, #16]
 80082a2:	b15b      	cbz	r3, 80082bc <__smakebuf_r+0x70>
 80082a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082a8:	4630      	mov	r0, r6
 80082aa:	f000 f81d 	bl	80082e8 <_isatty_r>
 80082ae:	b128      	cbz	r0, 80082bc <__smakebuf_r+0x70>
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	f023 0303 	bic.w	r3, r3, #3
 80082b6:	f043 0301 	orr.w	r3, r3, #1
 80082ba:	81a3      	strh	r3, [r4, #12]
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	431d      	orrs	r5, r3
 80082c0:	81a5      	strh	r5, [r4, #12]
 80082c2:	e7cf      	b.n	8008264 <__smakebuf_r+0x18>

080082c4 <_fstat_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	4d07      	ldr	r5, [pc, #28]	; (80082e4 <_fstat_r+0x20>)
 80082c8:	2300      	movs	r3, #0
 80082ca:	4604      	mov	r4, r0
 80082cc:	4608      	mov	r0, r1
 80082ce:	4611      	mov	r1, r2
 80082d0:	602b      	str	r3, [r5, #0]
 80082d2:	f7f9 fbd8 	bl	8001a86 <_fstat>
 80082d6:	1c43      	adds	r3, r0, #1
 80082d8:	d102      	bne.n	80082e0 <_fstat_r+0x1c>
 80082da:	682b      	ldr	r3, [r5, #0]
 80082dc:	b103      	cbz	r3, 80082e0 <_fstat_r+0x1c>
 80082de:	6023      	str	r3, [r4, #0]
 80082e0:	bd38      	pop	{r3, r4, r5, pc}
 80082e2:	bf00      	nop
 80082e4:	20000528 	.word	0x20000528

080082e8 <_isatty_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4d06      	ldr	r5, [pc, #24]	; (8008304 <_isatty_r+0x1c>)
 80082ec:	2300      	movs	r3, #0
 80082ee:	4604      	mov	r4, r0
 80082f0:	4608      	mov	r0, r1
 80082f2:	602b      	str	r3, [r5, #0]
 80082f4:	f7f9 fbd7 	bl	8001aa6 <_isatty>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	d102      	bne.n	8008302 <_isatty_r+0x1a>
 80082fc:	682b      	ldr	r3, [r5, #0]
 80082fe:	b103      	cbz	r3, 8008302 <_isatty_r+0x1a>
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	bd38      	pop	{r3, r4, r5, pc}
 8008304:	20000528 	.word	0x20000528

08008308 <memcpy>:
 8008308:	440a      	add	r2, r1
 800830a:	4291      	cmp	r1, r2
 800830c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008310:	d100      	bne.n	8008314 <memcpy+0xc>
 8008312:	4770      	bx	lr
 8008314:	b510      	push	{r4, lr}
 8008316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800831a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800831e:	4291      	cmp	r1, r2
 8008320:	d1f9      	bne.n	8008316 <memcpy+0xe>
 8008322:	bd10      	pop	{r4, pc}

08008324 <__assert_func>:
 8008324:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008326:	4614      	mov	r4, r2
 8008328:	461a      	mov	r2, r3
 800832a:	4b09      	ldr	r3, [pc, #36]	; (8008350 <__assert_func+0x2c>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4605      	mov	r5, r0
 8008330:	68d8      	ldr	r0, [r3, #12]
 8008332:	b14c      	cbz	r4, 8008348 <__assert_func+0x24>
 8008334:	4b07      	ldr	r3, [pc, #28]	; (8008354 <__assert_func+0x30>)
 8008336:	9100      	str	r1, [sp, #0]
 8008338:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800833c:	4906      	ldr	r1, [pc, #24]	; (8008358 <__assert_func+0x34>)
 800833e:	462b      	mov	r3, r5
 8008340:	f000 f844 	bl	80083cc <fiprintf>
 8008344:	f000 f854 	bl	80083f0 <abort>
 8008348:	4b04      	ldr	r3, [pc, #16]	; (800835c <__assert_func+0x38>)
 800834a:	461c      	mov	r4, r3
 800834c:	e7f3      	b.n	8008336 <__assert_func+0x12>
 800834e:	bf00      	nop
 8008350:	20000068 	.word	0x20000068
 8008354:	080089d6 	.word	0x080089d6
 8008358:	080089e3 	.word	0x080089e3
 800835c:	08008a11 	.word	0x08008a11

08008360 <_calloc_r>:
 8008360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008362:	fba1 2402 	umull	r2, r4, r1, r2
 8008366:	b94c      	cbnz	r4, 800837c <_calloc_r+0x1c>
 8008368:	4611      	mov	r1, r2
 800836a:	9201      	str	r2, [sp, #4]
 800836c:	f7fd fce0 	bl	8005d30 <_malloc_r>
 8008370:	9a01      	ldr	r2, [sp, #4]
 8008372:	4605      	mov	r5, r0
 8008374:	b930      	cbnz	r0, 8008384 <_calloc_r+0x24>
 8008376:	4628      	mov	r0, r5
 8008378:	b003      	add	sp, #12
 800837a:	bd30      	pop	{r4, r5, pc}
 800837c:	220c      	movs	r2, #12
 800837e:	6002      	str	r2, [r0, #0]
 8008380:	2500      	movs	r5, #0
 8008382:	e7f8      	b.n	8008376 <_calloc_r+0x16>
 8008384:	4621      	mov	r1, r4
 8008386:	f7fe fbbb 	bl	8006b00 <memset>
 800838a:	e7f4      	b.n	8008376 <_calloc_r+0x16>

0800838c <__ascii_mbtowc>:
 800838c:	b082      	sub	sp, #8
 800838e:	b901      	cbnz	r1, 8008392 <__ascii_mbtowc+0x6>
 8008390:	a901      	add	r1, sp, #4
 8008392:	b142      	cbz	r2, 80083a6 <__ascii_mbtowc+0x1a>
 8008394:	b14b      	cbz	r3, 80083aa <__ascii_mbtowc+0x1e>
 8008396:	7813      	ldrb	r3, [r2, #0]
 8008398:	600b      	str	r3, [r1, #0]
 800839a:	7812      	ldrb	r2, [r2, #0]
 800839c:	1e10      	subs	r0, r2, #0
 800839e:	bf18      	it	ne
 80083a0:	2001      	movne	r0, #1
 80083a2:	b002      	add	sp, #8
 80083a4:	4770      	bx	lr
 80083a6:	4610      	mov	r0, r2
 80083a8:	e7fb      	b.n	80083a2 <__ascii_mbtowc+0x16>
 80083aa:	f06f 0001 	mvn.w	r0, #1
 80083ae:	e7f8      	b.n	80083a2 <__ascii_mbtowc+0x16>

080083b0 <__ascii_wctomb>:
 80083b0:	b149      	cbz	r1, 80083c6 <__ascii_wctomb+0x16>
 80083b2:	2aff      	cmp	r2, #255	; 0xff
 80083b4:	bf85      	ittet	hi
 80083b6:	238a      	movhi	r3, #138	; 0x8a
 80083b8:	6003      	strhi	r3, [r0, #0]
 80083ba:	700a      	strbls	r2, [r1, #0]
 80083bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80083c0:	bf98      	it	ls
 80083c2:	2001      	movls	r0, #1
 80083c4:	4770      	bx	lr
 80083c6:	4608      	mov	r0, r1
 80083c8:	4770      	bx	lr
	...

080083cc <fiprintf>:
 80083cc:	b40e      	push	{r1, r2, r3}
 80083ce:	b503      	push	{r0, r1, lr}
 80083d0:	4601      	mov	r1, r0
 80083d2:	ab03      	add	r3, sp, #12
 80083d4:	4805      	ldr	r0, [pc, #20]	; (80083ec <fiprintf+0x20>)
 80083d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083da:	6800      	ldr	r0, [r0, #0]
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	f000 f837 	bl	8008450 <_vfiprintf_r>
 80083e2:	b002      	add	sp, #8
 80083e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80083e8:	b003      	add	sp, #12
 80083ea:	4770      	bx	lr
 80083ec:	20000068 	.word	0x20000068

080083f0 <abort>:
 80083f0:	b508      	push	{r3, lr}
 80083f2:	2006      	movs	r0, #6
 80083f4:	f000 f96e 	bl	80086d4 <raise>
 80083f8:	2001      	movs	r0, #1
 80083fa:	f7f9 faf5 	bl	80019e8 <_exit>

080083fe <__sfputc_r>:
 80083fe:	6893      	ldr	r3, [r2, #8]
 8008400:	3b01      	subs	r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	b410      	push	{r4}
 8008406:	6093      	str	r3, [r2, #8]
 8008408:	da08      	bge.n	800841c <__sfputc_r+0x1e>
 800840a:	6994      	ldr	r4, [r2, #24]
 800840c:	42a3      	cmp	r3, r4
 800840e:	db01      	blt.n	8008414 <__sfputc_r+0x16>
 8008410:	290a      	cmp	r1, #10
 8008412:	d103      	bne.n	800841c <__sfputc_r+0x1e>
 8008414:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008418:	f7fe badd 	b.w	80069d6 <__swbuf_r>
 800841c:	6813      	ldr	r3, [r2, #0]
 800841e:	1c58      	adds	r0, r3, #1
 8008420:	6010      	str	r0, [r2, #0]
 8008422:	7019      	strb	r1, [r3, #0]
 8008424:	4608      	mov	r0, r1
 8008426:	f85d 4b04 	ldr.w	r4, [sp], #4
 800842a:	4770      	bx	lr

0800842c <__sfputs_r>:
 800842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842e:	4606      	mov	r6, r0
 8008430:	460f      	mov	r7, r1
 8008432:	4614      	mov	r4, r2
 8008434:	18d5      	adds	r5, r2, r3
 8008436:	42ac      	cmp	r4, r5
 8008438:	d101      	bne.n	800843e <__sfputs_r+0x12>
 800843a:	2000      	movs	r0, #0
 800843c:	e007      	b.n	800844e <__sfputs_r+0x22>
 800843e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008442:	463a      	mov	r2, r7
 8008444:	4630      	mov	r0, r6
 8008446:	f7ff ffda 	bl	80083fe <__sfputc_r>
 800844a:	1c43      	adds	r3, r0, #1
 800844c:	d1f3      	bne.n	8008436 <__sfputs_r+0xa>
 800844e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008450 <_vfiprintf_r>:
 8008450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008454:	460d      	mov	r5, r1
 8008456:	b09d      	sub	sp, #116	; 0x74
 8008458:	4614      	mov	r4, r2
 800845a:	4698      	mov	r8, r3
 800845c:	4606      	mov	r6, r0
 800845e:	b118      	cbz	r0, 8008468 <_vfiprintf_r+0x18>
 8008460:	6a03      	ldr	r3, [r0, #32]
 8008462:	b90b      	cbnz	r3, 8008468 <_vfiprintf_r+0x18>
 8008464:	f7fe f9e2 	bl	800682c <__sinit>
 8008468:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800846a:	07d9      	lsls	r1, r3, #31
 800846c:	d405      	bmi.n	800847a <_vfiprintf_r+0x2a>
 800846e:	89ab      	ldrh	r3, [r5, #12]
 8008470:	059a      	lsls	r2, r3, #22
 8008472:	d402      	bmi.n	800847a <_vfiprintf_r+0x2a>
 8008474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008476:	f7fe fbd0 	bl	8006c1a <__retarget_lock_acquire_recursive>
 800847a:	89ab      	ldrh	r3, [r5, #12]
 800847c:	071b      	lsls	r3, r3, #28
 800847e:	d501      	bpl.n	8008484 <_vfiprintf_r+0x34>
 8008480:	692b      	ldr	r3, [r5, #16]
 8008482:	b99b      	cbnz	r3, 80084ac <_vfiprintf_r+0x5c>
 8008484:	4629      	mov	r1, r5
 8008486:	4630      	mov	r0, r6
 8008488:	f7fe fae2 	bl	8006a50 <__swsetup_r>
 800848c:	b170      	cbz	r0, 80084ac <_vfiprintf_r+0x5c>
 800848e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008490:	07dc      	lsls	r4, r3, #31
 8008492:	d504      	bpl.n	800849e <_vfiprintf_r+0x4e>
 8008494:	f04f 30ff 	mov.w	r0, #4294967295
 8008498:	b01d      	add	sp, #116	; 0x74
 800849a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800849e:	89ab      	ldrh	r3, [r5, #12]
 80084a0:	0598      	lsls	r0, r3, #22
 80084a2:	d4f7      	bmi.n	8008494 <_vfiprintf_r+0x44>
 80084a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084a6:	f7fe fbb9 	bl	8006c1c <__retarget_lock_release_recursive>
 80084aa:	e7f3      	b.n	8008494 <_vfiprintf_r+0x44>
 80084ac:	2300      	movs	r3, #0
 80084ae:	9309      	str	r3, [sp, #36]	; 0x24
 80084b0:	2320      	movs	r3, #32
 80084b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80084ba:	2330      	movs	r3, #48	; 0x30
 80084bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008670 <_vfiprintf_r+0x220>
 80084c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084c4:	f04f 0901 	mov.w	r9, #1
 80084c8:	4623      	mov	r3, r4
 80084ca:	469a      	mov	sl, r3
 80084cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084d0:	b10a      	cbz	r2, 80084d6 <_vfiprintf_r+0x86>
 80084d2:	2a25      	cmp	r2, #37	; 0x25
 80084d4:	d1f9      	bne.n	80084ca <_vfiprintf_r+0x7a>
 80084d6:	ebba 0b04 	subs.w	fp, sl, r4
 80084da:	d00b      	beq.n	80084f4 <_vfiprintf_r+0xa4>
 80084dc:	465b      	mov	r3, fp
 80084de:	4622      	mov	r2, r4
 80084e0:	4629      	mov	r1, r5
 80084e2:	4630      	mov	r0, r6
 80084e4:	f7ff ffa2 	bl	800842c <__sfputs_r>
 80084e8:	3001      	adds	r0, #1
 80084ea:	f000 80a9 	beq.w	8008640 <_vfiprintf_r+0x1f0>
 80084ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084f0:	445a      	add	r2, fp
 80084f2:	9209      	str	r2, [sp, #36]	; 0x24
 80084f4:	f89a 3000 	ldrb.w	r3, [sl]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f000 80a1 	beq.w	8008640 <_vfiprintf_r+0x1f0>
 80084fe:	2300      	movs	r3, #0
 8008500:	f04f 32ff 	mov.w	r2, #4294967295
 8008504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008508:	f10a 0a01 	add.w	sl, sl, #1
 800850c:	9304      	str	r3, [sp, #16]
 800850e:	9307      	str	r3, [sp, #28]
 8008510:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008514:	931a      	str	r3, [sp, #104]	; 0x68
 8008516:	4654      	mov	r4, sl
 8008518:	2205      	movs	r2, #5
 800851a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800851e:	4854      	ldr	r0, [pc, #336]	; (8008670 <_vfiprintf_r+0x220>)
 8008520:	f7f7 fe56 	bl	80001d0 <memchr>
 8008524:	9a04      	ldr	r2, [sp, #16]
 8008526:	b9d8      	cbnz	r0, 8008560 <_vfiprintf_r+0x110>
 8008528:	06d1      	lsls	r1, r2, #27
 800852a:	bf44      	itt	mi
 800852c:	2320      	movmi	r3, #32
 800852e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008532:	0713      	lsls	r3, r2, #28
 8008534:	bf44      	itt	mi
 8008536:	232b      	movmi	r3, #43	; 0x2b
 8008538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800853c:	f89a 3000 	ldrb.w	r3, [sl]
 8008540:	2b2a      	cmp	r3, #42	; 0x2a
 8008542:	d015      	beq.n	8008570 <_vfiprintf_r+0x120>
 8008544:	9a07      	ldr	r2, [sp, #28]
 8008546:	4654      	mov	r4, sl
 8008548:	2000      	movs	r0, #0
 800854a:	f04f 0c0a 	mov.w	ip, #10
 800854e:	4621      	mov	r1, r4
 8008550:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008554:	3b30      	subs	r3, #48	; 0x30
 8008556:	2b09      	cmp	r3, #9
 8008558:	d94d      	bls.n	80085f6 <_vfiprintf_r+0x1a6>
 800855a:	b1b0      	cbz	r0, 800858a <_vfiprintf_r+0x13a>
 800855c:	9207      	str	r2, [sp, #28]
 800855e:	e014      	b.n	800858a <_vfiprintf_r+0x13a>
 8008560:	eba0 0308 	sub.w	r3, r0, r8
 8008564:	fa09 f303 	lsl.w	r3, r9, r3
 8008568:	4313      	orrs	r3, r2
 800856a:	9304      	str	r3, [sp, #16]
 800856c:	46a2      	mov	sl, r4
 800856e:	e7d2      	b.n	8008516 <_vfiprintf_r+0xc6>
 8008570:	9b03      	ldr	r3, [sp, #12]
 8008572:	1d19      	adds	r1, r3, #4
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	9103      	str	r1, [sp, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	bfbb      	ittet	lt
 800857c:	425b      	neglt	r3, r3
 800857e:	f042 0202 	orrlt.w	r2, r2, #2
 8008582:	9307      	strge	r3, [sp, #28]
 8008584:	9307      	strlt	r3, [sp, #28]
 8008586:	bfb8      	it	lt
 8008588:	9204      	strlt	r2, [sp, #16]
 800858a:	7823      	ldrb	r3, [r4, #0]
 800858c:	2b2e      	cmp	r3, #46	; 0x2e
 800858e:	d10c      	bne.n	80085aa <_vfiprintf_r+0x15a>
 8008590:	7863      	ldrb	r3, [r4, #1]
 8008592:	2b2a      	cmp	r3, #42	; 0x2a
 8008594:	d134      	bne.n	8008600 <_vfiprintf_r+0x1b0>
 8008596:	9b03      	ldr	r3, [sp, #12]
 8008598:	1d1a      	adds	r2, r3, #4
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	9203      	str	r2, [sp, #12]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	bfb8      	it	lt
 80085a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80085a6:	3402      	adds	r4, #2
 80085a8:	9305      	str	r3, [sp, #20]
 80085aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008680 <_vfiprintf_r+0x230>
 80085ae:	7821      	ldrb	r1, [r4, #0]
 80085b0:	2203      	movs	r2, #3
 80085b2:	4650      	mov	r0, sl
 80085b4:	f7f7 fe0c 	bl	80001d0 <memchr>
 80085b8:	b138      	cbz	r0, 80085ca <_vfiprintf_r+0x17a>
 80085ba:	9b04      	ldr	r3, [sp, #16]
 80085bc:	eba0 000a 	sub.w	r0, r0, sl
 80085c0:	2240      	movs	r2, #64	; 0x40
 80085c2:	4082      	lsls	r2, r0
 80085c4:	4313      	orrs	r3, r2
 80085c6:	3401      	adds	r4, #1
 80085c8:	9304      	str	r3, [sp, #16]
 80085ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ce:	4829      	ldr	r0, [pc, #164]	; (8008674 <_vfiprintf_r+0x224>)
 80085d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085d4:	2206      	movs	r2, #6
 80085d6:	f7f7 fdfb 	bl	80001d0 <memchr>
 80085da:	2800      	cmp	r0, #0
 80085dc:	d03f      	beq.n	800865e <_vfiprintf_r+0x20e>
 80085de:	4b26      	ldr	r3, [pc, #152]	; (8008678 <_vfiprintf_r+0x228>)
 80085e0:	bb1b      	cbnz	r3, 800862a <_vfiprintf_r+0x1da>
 80085e2:	9b03      	ldr	r3, [sp, #12]
 80085e4:	3307      	adds	r3, #7
 80085e6:	f023 0307 	bic.w	r3, r3, #7
 80085ea:	3308      	adds	r3, #8
 80085ec:	9303      	str	r3, [sp, #12]
 80085ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f0:	443b      	add	r3, r7
 80085f2:	9309      	str	r3, [sp, #36]	; 0x24
 80085f4:	e768      	b.n	80084c8 <_vfiprintf_r+0x78>
 80085f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80085fa:	460c      	mov	r4, r1
 80085fc:	2001      	movs	r0, #1
 80085fe:	e7a6      	b.n	800854e <_vfiprintf_r+0xfe>
 8008600:	2300      	movs	r3, #0
 8008602:	3401      	adds	r4, #1
 8008604:	9305      	str	r3, [sp, #20]
 8008606:	4619      	mov	r1, r3
 8008608:	f04f 0c0a 	mov.w	ip, #10
 800860c:	4620      	mov	r0, r4
 800860e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008612:	3a30      	subs	r2, #48	; 0x30
 8008614:	2a09      	cmp	r2, #9
 8008616:	d903      	bls.n	8008620 <_vfiprintf_r+0x1d0>
 8008618:	2b00      	cmp	r3, #0
 800861a:	d0c6      	beq.n	80085aa <_vfiprintf_r+0x15a>
 800861c:	9105      	str	r1, [sp, #20]
 800861e:	e7c4      	b.n	80085aa <_vfiprintf_r+0x15a>
 8008620:	fb0c 2101 	mla	r1, ip, r1, r2
 8008624:	4604      	mov	r4, r0
 8008626:	2301      	movs	r3, #1
 8008628:	e7f0      	b.n	800860c <_vfiprintf_r+0x1bc>
 800862a:	ab03      	add	r3, sp, #12
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	462a      	mov	r2, r5
 8008630:	4b12      	ldr	r3, [pc, #72]	; (800867c <_vfiprintf_r+0x22c>)
 8008632:	a904      	add	r1, sp, #16
 8008634:	4630      	mov	r0, r6
 8008636:	f7fd fca7 	bl	8005f88 <_printf_float>
 800863a:	4607      	mov	r7, r0
 800863c:	1c78      	adds	r0, r7, #1
 800863e:	d1d6      	bne.n	80085ee <_vfiprintf_r+0x19e>
 8008640:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008642:	07d9      	lsls	r1, r3, #31
 8008644:	d405      	bmi.n	8008652 <_vfiprintf_r+0x202>
 8008646:	89ab      	ldrh	r3, [r5, #12]
 8008648:	059a      	lsls	r2, r3, #22
 800864a:	d402      	bmi.n	8008652 <_vfiprintf_r+0x202>
 800864c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800864e:	f7fe fae5 	bl	8006c1c <__retarget_lock_release_recursive>
 8008652:	89ab      	ldrh	r3, [r5, #12]
 8008654:	065b      	lsls	r3, r3, #25
 8008656:	f53f af1d 	bmi.w	8008494 <_vfiprintf_r+0x44>
 800865a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800865c:	e71c      	b.n	8008498 <_vfiprintf_r+0x48>
 800865e:	ab03      	add	r3, sp, #12
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	462a      	mov	r2, r5
 8008664:	4b05      	ldr	r3, [pc, #20]	; (800867c <_vfiprintf_r+0x22c>)
 8008666:	a904      	add	r1, sp, #16
 8008668:	4630      	mov	r0, r6
 800866a:	f7fd ff31 	bl	80064d0 <_printf_i>
 800866e:	e7e4      	b.n	800863a <_vfiprintf_r+0x1ea>
 8008670:	08008b13 	.word	0x08008b13
 8008674:	08008b1d 	.word	0x08008b1d
 8008678:	08005f89 	.word	0x08005f89
 800867c:	0800842d 	.word	0x0800842d
 8008680:	08008b19 	.word	0x08008b19

08008684 <_raise_r>:
 8008684:	291f      	cmp	r1, #31
 8008686:	b538      	push	{r3, r4, r5, lr}
 8008688:	4604      	mov	r4, r0
 800868a:	460d      	mov	r5, r1
 800868c:	d904      	bls.n	8008698 <_raise_r+0x14>
 800868e:	2316      	movs	r3, #22
 8008690:	6003      	str	r3, [r0, #0]
 8008692:	f04f 30ff 	mov.w	r0, #4294967295
 8008696:	bd38      	pop	{r3, r4, r5, pc}
 8008698:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800869a:	b112      	cbz	r2, 80086a2 <_raise_r+0x1e>
 800869c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086a0:	b94b      	cbnz	r3, 80086b6 <_raise_r+0x32>
 80086a2:	4620      	mov	r0, r4
 80086a4:	f000 f830 	bl	8008708 <_getpid_r>
 80086a8:	462a      	mov	r2, r5
 80086aa:	4601      	mov	r1, r0
 80086ac:	4620      	mov	r0, r4
 80086ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086b2:	f000 b817 	b.w	80086e4 <_kill_r>
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d00a      	beq.n	80086d0 <_raise_r+0x4c>
 80086ba:	1c59      	adds	r1, r3, #1
 80086bc:	d103      	bne.n	80086c6 <_raise_r+0x42>
 80086be:	2316      	movs	r3, #22
 80086c0:	6003      	str	r3, [r0, #0]
 80086c2:	2001      	movs	r0, #1
 80086c4:	e7e7      	b.n	8008696 <_raise_r+0x12>
 80086c6:	2400      	movs	r4, #0
 80086c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80086cc:	4628      	mov	r0, r5
 80086ce:	4798      	blx	r3
 80086d0:	2000      	movs	r0, #0
 80086d2:	e7e0      	b.n	8008696 <_raise_r+0x12>

080086d4 <raise>:
 80086d4:	4b02      	ldr	r3, [pc, #8]	; (80086e0 <raise+0xc>)
 80086d6:	4601      	mov	r1, r0
 80086d8:	6818      	ldr	r0, [r3, #0]
 80086da:	f7ff bfd3 	b.w	8008684 <_raise_r>
 80086de:	bf00      	nop
 80086e0:	20000068 	.word	0x20000068

080086e4 <_kill_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	4d07      	ldr	r5, [pc, #28]	; (8008704 <_kill_r+0x20>)
 80086e8:	2300      	movs	r3, #0
 80086ea:	4604      	mov	r4, r0
 80086ec:	4608      	mov	r0, r1
 80086ee:	4611      	mov	r1, r2
 80086f0:	602b      	str	r3, [r5, #0]
 80086f2:	f7f9 f969 	bl	80019c8 <_kill>
 80086f6:	1c43      	adds	r3, r0, #1
 80086f8:	d102      	bne.n	8008700 <_kill_r+0x1c>
 80086fa:	682b      	ldr	r3, [r5, #0]
 80086fc:	b103      	cbz	r3, 8008700 <_kill_r+0x1c>
 80086fe:	6023      	str	r3, [r4, #0]
 8008700:	bd38      	pop	{r3, r4, r5, pc}
 8008702:	bf00      	nop
 8008704:	20000528 	.word	0x20000528

08008708 <_getpid_r>:
 8008708:	f7f9 b956 	b.w	80019b8 <_getpid>

0800870c <_init>:
 800870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870e:	bf00      	nop
 8008710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008712:	bc08      	pop	{r3}
 8008714:	469e      	mov	lr, r3
 8008716:	4770      	bx	lr

08008718 <_fini>:
 8008718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871a:	bf00      	nop
 800871c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800871e:	bc08      	pop	{r3}
 8008720:	469e      	mov	lr, r3
 8008722:	4770      	bx	lr
