
IoT-Ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008010  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  080081a0  080081a0  000181a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800855c  0800855c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800855c  0800855c  0001855c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008564  08008564  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008564  08008564  00018564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008568  08008568  00018568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800856c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  200001d4  08008740  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08008740  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010182  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027aa  00000000  00000000  000303c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e28  00000000  00000000  00032b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae4  00000000  00000000  000339a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001afa6  00000000  00000000  00034484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e39  00000000  00000000  0004f42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3cbd  00000000  00000000  00061263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000499c  00000000  00000000  00104f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001098bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008188 	.word	0x08008188

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008188 	.word	0x08008188

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <create_payload>:

volatile uint8_t uart_rx_buffer[BUFFER_SIZE];
static volatile uint8_t uart_rx_buffer_i = 0;
volatile bool uart_rx_done_flag;

uint8_t create_payload(message msg, uint8_t *payload){
 8000f44:	b490      	push	{r4, r7}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	1d3c      	adds	r4, r7, #4
 8000f4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000f50:	603b      	str	r3, [r7, #0]
    uint8_t payload_i = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	75fb      	strb	r3, [r7, #23]

    payload[payload_i++] = msg.msg_start_char;
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
 8000f58:	1c5a      	adds	r2, r3, #1
 8000f5a:	75fa      	strb	r2, [r7, #23]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	793a      	ldrb	r2, [r7, #4]
 8000f64:	701a      	strb	r2, [r3, #0]
    memcpy(payload+payload_i, &msg.msg_type, sizeof(msg.msg_type));
 8000f66:	7dfb      	ldrb	r3, [r7, #23]
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	797a      	ldrb	r2, [r7, #5]
 8000f6e:	701a      	strb	r2, [r3, #0]
    payload_i += sizeof(msg.msg_type);
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	3301      	adds	r3, #1
 8000f74:	75fb      	strb	r3, [r7, #23]

    if (msg.msg_type == RESPONSE_TEMPERATURE){
 8000f76:	797b      	ldrb	r3, [r7, #5]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d108      	bne.n	8000f8e <create_payload+0x4a>
        memcpy(payload+payload_i, &msg.msg_data.temperature, sizeof(msg.msg_data.temperature));
 8000f7c:	7dfb      	ldrb	r3, [r7, #23]
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	4413      	add	r3, r2
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	601a      	str	r2, [r3, #0]
        payload_i += sizeof(msg.msg_data.temperature);
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	75fb      	strb	r3, [r7, #23]
 8000f8c:	e02e      	b.n	8000fec <create_payload+0xa8>
    }
    else if (msg.msg_type == RESPONSE_HUMIDITY){
 8000f8e:	797b      	ldrb	r3, [r7, #5]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d108      	bne.n	8000fa6 <create_payload+0x62>
        memcpy(payload+payload_i, &msg.msg_data.humidity, sizeof(msg.msg_data.humidity));
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	4413      	add	r3, r2
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	601a      	str	r2, [r3, #0]
        payload_i += sizeof(msg.msg_data.humidity);
 8000f9e:	7dfb      	ldrb	r3, [r7, #23]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	75fb      	strb	r3, [r7, #23]
 8000fa4:	e022      	b.n	8000fec <create_payload+0xa8>
    }
    else if (msg.msg_type == RESPONSE_LIGHT){
 8000fa6:	797b      	ldrb	r3, [r7, #5]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d108      	bne.n	8000fbe <create_payload+0x7a>
        memcpy(payload+payload_i, msg.msg_data.light, sizeof(msg.msg_data.light));
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	601a      	str	r2, [r3, #0]
        payload_i += sizeof(msg.msg_data.light);
 8000fb6:	7dfb      	ldrb	r3, [r7, #23]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	75fb      	strb	r3, [r7, #23]
 8000fbc:	e016      	b.n	8000fec <create_payload+0xa8>
    }
    else if (msg.msg_type == RESPONSE_RADIATION){
 8000fbe:	797b      	ldrb	r3, [r7, #5]
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d108      	bne.n	8000fd6 <create_payload+0x92>
    	memcpy(payload+payload_i, &msg.msg_data.radiation, sizeof(msg.msg_data.radiation));
 8000fc4:	7dfb      	ldrb	r3, [r7, #23]
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	601a      	str	r2, [r3, #0]
    	payload_i += sizeof(msg.msg_data.radiation);
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	75fb      	strb	r3, [r7, #23]
 8000fd4:	e00a      	b.n	8000fec <create_payload+0xa8>
    }
    else if (msg.msg_type == RESPONSE_DUST) {
 8000fd6:	797b      	ldrb	r3, [r7, #5]
 8000fd8:	2b05      	cmp	r3, #5
 8000fda:	d107      	bne.n	8000fec <create_payload+0xa8>
    	memcpy(payload+payload_i, &msg.msg_data.dust, sizeof(msg.msg_data.dust));
 8000fdc:	7dfb      	ldrb	r3, [r7, #23]
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	601a      	str	r2, [r3, #0]
    	payload_i += sizeof(msg.msg_data.dust);
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	75fb      	strb	r3, [r7, #23]
    }

    payload[payload_i++] = msg.msg_end_char;
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	75fa      	strb	r2, [r7, #23]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	7b3a      	ldrb	r2, [r7, #12]
 8000ffa:	701a      	strb	r2, [r3, #0]

    return payload_i;
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bc90      	pop	{r4, r7}
 8001006:	4770      	bx	lr

08001008 <uart_rx_buffer_clear>:
    {
      uart_rx_buffer_i++;
    }
}

void uart_rx_buffer_clear(){
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
	for (int i=0; i<(BUFFER_SIZE); i++) {
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	e007      	b.n	8001024 <uart_rx_buffer_clear+0x1c>
		uart_rx_buffer[i] = 0x0;
 8001014:	4a08      	ldr	r2, [pc, #32]	; (8001038 <uart_rx_buffer_clear+0x30>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<(BUFFER_SIZE); i++) {
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3301      	adds	r3, #1
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b1d      	cmp	r3, #29
 8001028:	ddf4      	ble.n	8001014 <uart_rx_buffer_clear+0xc>
	}
}
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	200001f0 	.word	0x200001f0

0800103c <SHT40_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SHT40_Init()
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	HAL_I2C_Init(&hi2c1); // Initialize and configure the I2C peripheral
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <SHT40_Init+0x10>)
 8001042:	f001 f893 	bl	800216c <HAL_I2C_Init>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000214 	.word	0x20000214

08001050 <SHT40_Read>:
void SHT40_Read(float *t, float *rh, uint8_t mode)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08c      	sub	sp, #48	; 0x30
 8001054:	af02      	add	r7, sp, #8
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	4613      	mov	r3, r2
 800105c:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {mode, 0x00};
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	763b      	strb	r3, [r7, #24]
 8001062:	2300      	movs	r3, #0
 8001064:	767b      	strb	r3, [r7, #25]
	uint8_t buffer[6];

    HAL_I2C_Master_Transmit(&hi2c1, SHT40_I2C_ADDRESS, data, 2, HAL_MAX_DELAY);
 8001066:	f107 0218 	add.w	r2, r7, #24
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2302      	movs	r3, #2
 8001072:	2188      	movs	r1, #136	; 0x88
 8001074:	4846      	ldr	r0, [pc, #280]	; (8001190 <SHT40_Read+0x140>)
 8001076:	f001 f915 	bl	80022a4 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f000 fd1e 	bl	8001abc <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1, SHT40_I2C_ADDRESS, buffer, 6, HAL_MAX_DELAY);
 8001080:	f107 0210 	add.w	r2, r7, #16
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2306      	movs	r3, #6
 800108c:	2188      	movs	r1, #136	; 0x88
 800108e:	4840      	ldr	r0, [pc, #256]	; (8001190 <SHT40_Read+0x140>)
 8001090:	f001 fa20 	bl	80024d4 <HAL_I2C_Master_Receive>

    uint16_t t_ticks = buffer[0]*256 + buffer[1];
 8001094:	7c3b      	ldrb	r3, [r7, #16]
 8001096:	b29b      	uxth	r3, r3
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b29a      	uxth	r2, r3
 800109c:	7c7b      	ldrb	r3, [r7, #17]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4413      	add	r3, r2
 80010a2:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t rh_ticks = buffer[3]*256 + buffer[4];
 80010a4:	7cfb      	ldrb	r3, [r7, #19]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	7d3b      	ldrb	r3, [r7, #20]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4413      	add	r3, r2
 80010b2:	843b      	strh	r3, [r7, #32]

    float t_degC = -45 + 175.0 * t_ticks/65535;
 80010b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa34 	bl	8000524 <__aeabi_i2d>
 80010bc:	a330      	add	r3, pc, #192	; (adr r3, 8001180 <SHT40_Read+0x130>)
 80010be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c2:	f7ff fa99 	bl	80005f8 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	a32e      	add	r3, pc, #184	; (adr r3, 8001188 <SHT40_Read+0x138>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff fbba 	bl	800084c <__aeabi_ddiv>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <SHT40_Read+0x144>)
 80010e6:	f7ff f8cf 	bl	8000288 <__aeabi_dsub>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f7ff fd59 	bl	8000ba8 <__aeabi_d2f>
 80010f6:	4603      	mov	r3, r0
 80010f8:	61fb      	str	r3, [r7, #28]
    float rh_pRH = -6 + 125.0 * rh_ticks/65535;
 80010fa:	8c3b      	ldrh	r3, [r7, #32]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa11 	bl	8000524 <__aeabi_i2d>
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <SHT40_Read+0x148>)
 8001108:	f7ff fa76 	bl	80005f8 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	a31c      	add	r3, pc, #112	; (adr r3, 8001188 <SHT40_Read+0x138>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff fb97 	bl	800084c <__aeabi_ddiv>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <SHT40_Read+0x14c>)
 800112c:	f7ff f8ac 	bl	8000288 <__aeabi_dsub>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fd36 	bl	8000ba8 <__aeabi_d2f>
 800113c:	4603      	mov	r3, r0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24

    if (rh_pRH > 100){
 8001140:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001144:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80011a0 <SHT40_Read+0x150>
 8001148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	dd01      	ble.n	8001156 <SHT40_Read+0x106>
    	rh_pRH = 100; }
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <SHT40_Read+0x154>)
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    if (rh_pRH < 0){
 8001156:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800115a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001162:	d502      	bpl.n	800116a <SHT40_Read+0x11a>
    	rh_pRH = 0; }
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24

    *t = t_degC;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	601a      	str	r2, [r3, #0]
    *rh = rh_pRH;
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001174:	601a      	str	r2, [r3, #0]
}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	; 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	00000000 	.word	0x00000000
 8001184:	4065e000 	.word	0x4065e000
 8001188:	00000000 	.word	0x00000000
 800118c:	40efffe0 	.word	0x40efffe0
 8001190:	20000214 	.word	0x20000214
 8001194:	40468000 	.word	0x40468000
 8001198:	405f4000 	.word	0x405f4000
 800119c:	40180000 	.word	0x40180000
 80011a0:	42c80000 	.word	0x42c80000
 80011a4:	42c80000 	.word	0x42c80000

080011a8 <LTR329_Init>:

void LTR329_Init()
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af04      	add	r7, sp, #16
    uint8_t data;

    // Activate the sensor
    data = LTR329_ACTIVE_MODE;
 80011ae:	2301      	movs	r3, #1
 80011b0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, LTR329_I2C_ADDRESS, LTR329_ALS_CONTR, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80011b2:	2364      	movs	r3, #100	; 0x64
 80011b4:	9302      	str	r3, [sp, #8]
 80011b6:	2301      	movs	r3, #1
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	1dfb      	adds	r3, r7, #7
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2301      	movs	r3, #1
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	2152      	movs	r1, #82	; 0x52
 80011c4:	480a      	ldr	r0, [pc, #40]	; (80011f0 <LTR329_Init+0x48>)
 80011c6:	f001 fa7b 	bl	80026c0 <HAL_I2C_Mem_Write>

    // Set measurement rate
    data = LTR329_MEAS_RATE;
 80011ca:	2303      	movs	r3, #3
 80011cc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, LTR329_I2C_ADDRESS, LTR329_ALS_MEAS_RATE, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80011ce:	2364      	movs	r3, #100	; 0x64
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	2301      	movs	r3, #1
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	2285      	movs	r2, #133	; 0x85
 80011de:	2152      	movs	r1, #82	; 0x52
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <LTR329_Init+0x48>)
 80011e2:	f001 fa6d 	bl	80026c0 <HAL_I2C_Mem_Write>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000268 	.word	0x20000268

080011f4 <HAL_UART_RxCpltCallback>:
    //*ch1 = (uint16_t)(data[1] << 8) | data[0];
    //*ch0 = (uint16_t)(data[3] << 8) | data[2];

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_UART_RxCpltCallback+0x2c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d107      	bne.n	8001216 <HAL_UART_RxCpltCallback+0x22>
	  MX_USART2_UART_Init();
 8001206:	f000 f93b 	bl	8001480 <MX_USART2_UART_Init>
	  HAL_UART_Receive_IT(&huart2, Rx_data, 3);
 800120a:	2203      	movs	r2, #3
 800120c:	4905      	ldr	r1, [pc, #20]	; (8001224 <HAL_UART_RxCpltCallback+0x30>)
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <HAL_UART_RxCpltCallback+0x34>)
 8001210:	f003 f802 	bl	8004218 <HAL_UART_Receive_IT>
 8001214:	e000      	b.n	8001218 <HAL_UART_RxCpltCallback+0x24>
	} else {
		return;
 8001216:	bf00      	nop
	}
}
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40004400 	.word	0x40004400
 8001224:	20000210 	.word	0x20000210
 8001228:	20000344 	.word	0x20000344

0800122c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b092      	sub	sp, #72	; 0x48
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001232:	f000 fbce 	bl	80019d2 <HAL_Init>
  //HAL_UART_IRQHandler(&huart1);
  //HAL_UART_IRQHandler(&huart2);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001236:	f000 f88d 	bl	8001354 <SystemClock_Config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800123a:	b662      	cpsie	i
}
 800123c:	bf00      	nop

  /* USER CODE BEGIN SysInit */
  __enable_irq();
  //HAL_UART_IRQHandler(&huart1);
  HAL_UART_IRQHandler(&huart2);
 800123e:	4841      	ldr	r0, [pc, #260]	; (8001344 <main+0x118>)
 8001240:	f003 f836 	bl	80042b0 <HAL_UART_IRQHandler>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001244:	f000 f94e 	bl	80014e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001248:	f000 f91a 	bl	8001480 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800124c:	f000 f8d8 	bl	8001400 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    SHT40_Init();
 8001250:	f7ff fef4 	bl	800103c <SHT40_Init>
    LTR329_Init();
 8001254:	f7ff ffa8 	bl	80011a8 <LTR329_Init>
    uart_rx_buffer_clear();
 8001258:	f7ff fed6 	bl	8001008 <uart_rx_buffer_clear>
    HAL_UART_Receive_IT(&huart2, Rx_data, 3);
 800125c:	2203      	movs	r2, #3
 800125e:	493a      	ldr	r1, [pc, #232]	; (8001348 <main+0x11c>)
 8001260:	4838      	ldr	r0, [pc, #224]	; (8001344 <main+0x118>)
 8001262:	f002 ffd9 	bl	8004218 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //enum msg_type_e msg_type = Rx_data[1];
	  if (Rx_data[1] == 0x1) {
 8001266:	4b38      	ldr	r3, [pc, #224]	; (8001348 <main+0x11c>)
 8001268:	785b      	ldrb	r3, [r3, #1]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d166      	bne.n	800133c <main+0x110>
		  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 800126e:	2108      	movs	r1, #8
 8001270:	4836      	ldr	r0, [pc, #216]	; (800134c <main+0x120>)
 8001272:	f000 ff61 	bl	8002138 <HAL_GPIO_TogglePin>
		  message Lightm = {.msg_start_char = MSG_START_CHARACTER, .msg_end_char = MSG_END_CHARACTER,
				  .msg_data.light = data, .msg_type = RESPONSE_LIGHT};
		  int LightBytes = create_payload(Lightm, light);
		  HAL_UART_Transmit(&huart2, light, LightBytes, 10);
		*/
		  uint8_t *testptr = (uint8_t *)&(uint8_t){0xAA};
 8001276:	23aa      	movs	r3, #170	; 0xaa
 8001278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800127c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8001280:	643b      	str	r3, [r7, #64]	; 0x40
		  HAL_UART_Transmit(&huart1, testptr, 1, 10);
 8001282:	230a      	movs	r3, #10
 8001284:	2201      	movs	r2, #1
 8001286:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001288:	4831      	ldr	r0, [pc, #196]	; (8001350 <main+0x124>)
 800128a:	f002 ff3b 	bl	8004104 <HAL_UART_Transmit>


		  SHT40_Read(&t, &rh, SHT40_MEAS_HIGH_PRECISION);
 800128e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001292:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001296:	22fd      	movs	r2, #253	; 0xfd
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fed9 	bl	8001050 <SHT40_Read>
		  float radiate = t;
 800129e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		  uint8_t radiation[4];
		  message Radm = {.msg_start_char = MSG_START_CHARACTER, .msg_end_char = MSG_END_CHARACTER,
 80012a2:	2373      	movs	r3, #115	; 0x73
 80012a4:	753b      	strb	r3, [r7, #20]
 80012a6:	2304      	movs	r3, #4
 80012a8:	757b      	strb	r3, [r7, #21]
 80012aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012ac:	61bb      	str	r3, [r7, #24]
 80012ae:	2365      	movs	r3, #101	; 0x65
 80012b0:	773b      	strb	r3, [r7, #28]
				  .msg_data.radiation = radiate, .msg_type = RESPONSE_RADIATION};
		  int RadBytes = create_payload(Radm, radiation);
 80012b2:	f107 0320 	add.w	r3, r7, #32
 80012b6:	f107 0214 	add.w	r2, r7, #20
 80012ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80012bc:	f7ff fe42 	bl	8000f44 <create_payload>
 80012c0:	4603      	mov	r3, r0
 80012c2:	63bb      	str	r3, [r7, #56]	; 0x38
		  HAL_UART_Transmit(&huart2, radiation, RadBytes, 10);
 80012c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	f107 0120 	add.w	r1, r7, #32
 80012cc:	230a      	movs	r3, #10
 80012ce:	481d      	ldr	r0, [pc, #116]	; (8001344 <main+0x118>)
 80012d0:	f002 ff18 	bl	8004104 <HAL_UART_Transmit>


		  SHT40_Read(&t, &rh, SHT40_MEAS_HIGH_PRECISION);
 80012d4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012dc:	22fd      	movs	r2, #253	; 0xfd
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff feb6 	bl	8001050 <SHT40_Read>
		  float dustsens = rh;
 80012e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34
		  uint8_t dust[4];
		  message Dustm = {.msg_start_char = MSG_START_CHARACTER, .msg_end_char = MSG_END_CHARACTER,
 80012e8:	2373      	movs	r3, #115	; 0x73
 80012ea:	713b      	strb	r3, [r7, #4]
 80012ec:	2305      	movs	r3, #5
 80012ee:	717b      	strb	r3, [r7, #5]
 80012f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	2365      	movs	r3, #101	; 0x65
 80012f6:	733b      	strb	r3, [r7, #12]
				  .msg_data.radiation = dustsens, .msg_type = RESPONSE_DUST};
		  int DustBytes = create_payload(Dustm, dust);
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	1d3a      	adds	r2, r7, #4
 80012fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001300:	f7ff fe20 	bl	8000f44 <create_payload>
 8001304:	4603      	mov	r3, r0
 8001306:	633b      	str	r3, [r7, #48]	; 0x30
		  HAL_UART_Transmit(&huart2, dust, DustBytes, 10);
 8001308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130a:	b29a      	uxth	r2, r3
 800130c:	f107 0110 	add.w	r1, r7, #16
 8001310:	230a      	movs	r3, #10
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <main+0x118>)
 8001314:	f002 fef6 	bl	8004104 <HAL_UART_Transmit>

		  for (uint8_t i=0; i<3; i++){
 8001318:	2300      	movs	r3, #0
 800131a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800131e:	e009      	b.n	8001334 <main+0x108>
			  Rx_data[i] = 0;
 8001320:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001324:	4a08      	ldr	r2, [pc, #32]	; (8001348 <main+0x11c>)
 8001326:	2100      	movs	r1, #0
 8001328:	54d1      	strb	r1, [r2, r3]
		  for (uint8_t i=0; i<3; i++){
 800132a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800132e:	3301      	adds	r3, #1
 8001330:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001334:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001338:	2b02      	cmp	r3, #2
 800133a:	d9f1      	bls.n	8001320 <main+0xf4>
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 800133c:	2064      	movs	r0, #100	; 0x64
 800133e:	f000 fbbd 	bl	8001abc <HAL_Delay>
	  if (Rx_data[1] == 0x1) {
 8001342:	e790      	b.n	8001266 <main+0x3a>
 8001344:	20000344 	.word	0x20000344
 8001348:	20000210 	.word	0x20000210
 800134c:	48000400 	.word	0x48000400
 8001350:	200002bc 	.word	0x200002bc

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b096      	sub	sp, #88	; 0x58
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	2244      	movs	r2, #68	; 0x44
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f004 ffbd 	bl	80062e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	463b      	mov	r3, r7
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001376:	f44f 7000 	mov.w	r0, #512	; 0x200
 800137a:	f001 fe51 	bl	8003020 <HAL_PWREx_ControlVoltageScaling>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001384:	f000 f90e 	bl	80015a4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001388:	f001 fe2c 	bl	8002fe4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <SystemClock_Config+0xa8>)
 800138e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001392:	4a1a      	ldr	r2, [pc, #104]	; (80013fc <SystemClock_Config+0xa8>)
 8001394:	f023 0318 	bic.w	r3, r3, #24
 8001398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800139c:	2314      	movs	r3, #20
 800139e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013a4:	2301      	movs	r3, #1
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80013ac:	23a0      	movs	r3, #160	; 0xa0
 80013ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4618      	mov	r0, r3
 80013ba:	f001 fe87 	bl	80030cc <HAL_RCC_OscConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80013c4:	f000 f8ee 	bl	80015a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c8:	230f      	movs	r3, #15
 80013ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013cc:	2300      	movs	r3, #0
 80013ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013dc:	463b      	mov	r3, r7
 80013de:	2101      	movs	r1, #1
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 fad5 	bl	8003990 <HAL_RCC_ClockConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013ec:	f000 f8da 	bl	80015a4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80013f0:	f002 fe78 	bl	80040e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80013f4:	bf00      	nop
 80013f6:	3758      	adds	r7, #88	; 0x58
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40021000 	.word	0x40021000

08001400 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <MX_I2C1_Init+0x74>)
 8001406:	4a1c      	ldr	r2, [pc, #112]	; (8001478 <MX_I2C1_Init+0x78>)
 8001408:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MX_I2C1_Init+0x74>)
 800140c:	4a1b      	ldr	r2, [pc, #108]	; (800147c <MX_I2C1_Init+0x7c>)
 800140e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <MX_I2C1_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <MX_I2C1_Init+0x74>)
 8001418:	2201      	movs	r2, #1
 800141a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <MX_I2C1_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_I2C1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <MX_I2C1_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_I2C1_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_I2C1_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800143a:	480e      	ldr	r0, [pc, #56]	; (8001474 <MX_I2C1_Init+0x74>)
 800143c:	f000 fe96 	bl	800216c <HAL_I2C_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001446:	f000 f8ad 	bl	80015a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800144a:	2100      	movs	r1, #0
 800144c:	4809      	ldr	r0, [pc, #36]	; (8001474 <MX_I2C1_Init+0x74>)
 800144e:	f001 fd31 	bl	8002eb4 <HAL_I2CEx_ConfigAnalogFilter>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001458:	f000 f8a4 	bl	80015a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800145c:	2100      	movs	r1, #0
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_I2C1_Init+0x74>)
 8001460:	f001 fd73 	bl	8002f4a <HAL_I2CEx_ConfigDigitalFilter>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800146a:	f000 f89b 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000214 	.word	0x20000214
 8001478:	40005400 	.word	0x40005400
 800147c:	00707cbb 	.word	0x00707cbb

08001480 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <MX_USART2_UART_Init+0x5c>)
 8001486:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <MX_USART2_UART_Init+0x60>)
 8001488:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <MX_USART2_UART_Init+0x5c>)
 800148c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001490:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <MX_USART2_UART_Init+0x5c>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <MX_USART2_UART_Init+0x5c>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_USART2_UART_Init+0x5c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <MX_USART2_UART_Init+0x5c>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_USART2_UART_Init+0x5c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <MX_USART2_UART_Init+0x5c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_USART2_UART_Init+0x5c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <MX_USART2_UART_Init+0x5c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80014c2:	2300      	movs	r3, #0
 80014c4:	2200      	movs	r2, #0
 80014c6:	2100      	movs	r1, #0
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <MX_USART2_UART_Init+0x5c>)
 80014ca:	f004 f92d 	bl	8005728 <HAL_RS485Ex_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80014d4:	f000 f866 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000344 	.word	0x20000344
 80014e0:	40004400 	.word	0x40004400

080014e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	4b28      	ldr	r3, [pc, #160]	; (800159c <MX_GPIO_Init+0xb8>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4a27      	ldr	r2, [pc, #156]	; (800159c <MX_GPIO_Init+0xb8>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4b25      	ldr	r3, [pc, #148]	; (800159c <MX_GPIO_Init+0xb8>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	4b22      	ldr	r3, [pc, #136]	; (800159c <MX_GPIO_Init+0xb8>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4a21      	ldr	r2, [pc, #132]	; (800159c <MX_GPIO_Init+0xb8>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151e:	4b1f      	ldr	r3, [pc, #124]	; (800159c <MX_GPIO_Init+0xb8>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <MX_GPIO_Init+0xb8>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4a1b      	ldr	r2, [pc, #108]	; (800159c <MX_GPIO_Init+0xb8>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <MX_GPIO_Init+0xb8>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2108      	movs	r1, #8
 8001546:	4816      	ldr	r0, [pc, #88]	; (80015a0 <MX_GPIO_Init+0xbc>)
 8001548:	f000 fdde 	bl	8002108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800154c:	2308      	movs	r3, #8
 800154e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4619      	mov	r1, r3
 8001562:	480f      	ldr	r0, [pc, #60]	; (80015a0 <MX_GPIO_Init+0xbc>)
 8001564:	f000 fc5e 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001568:	23c0      	movs	r3, #192	; 0xc0
 800156a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001578:	2307      	movs	r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	4619      	mov	r1, r3
 8001582:	4807      	ldr	r0, [pc, #28]	; (80015a0 <MX_GPIO_Init+0xbc>)
 8001584:	f000 fc4e 	bl	8001e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2108      	movs	r1, #8
 800158c:	4804      	ldr	r0, [pc, #16]	; (80015a0 <MX_GPIO_Init+0xbc>)
 800158e:	f000 fdbb 	bl	8002108 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001592:	bf00      	nop
 8001594:	3720      	adds	r7, #32
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000
 80015a0:	48000400 	.word	0x48000400

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ac:	e7fe      	b.n	80015ac <Error_Handler+0x8>
	...

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <HAL_MspInit+0x44>)
 80015b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ba:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <HAL_MspInit+0x44>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6613      	str	r3, [r2, #96]	; 0x60
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_MspInit+0x44>)
 80015c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_MspInit+0x44>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <HAL_MspInit+0x44>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d8:	6593      	str	r3, [r2, #88]	; 0x58
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_MspInit+0x44>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000

080015f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b096      	sub	sp, #88	; 0x58
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	2234      	movs	r2, #52	; 0x34
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f004 fe62 	bl	80062e2 <memset>
  if(hi2c->Instance==I2C1)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a1f      	ldr	r2, [pc, #124]	; (80016a0 <HAL_I2C_MspInit+0xa8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d137      	bne.n	8001698 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001628:	2340      	movs	r3, #64	; 0x40
 800162a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	4618      	mov	r0, r3
 8001636:	f002 fbcf 	bl	8003dd8 <HAL_RCCEx_PeriphCLKConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001640:	f7ff ffb0 	bl	80015a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <HAL_I2C_MspInit+0xac>)
 8001646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001648:	4a16      	ldr	r2, [pc, #88]	; (80016a4 <HAL_I2C_MspInit+0xac>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_I2C_MspInit+0xac>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800165c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001660:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001662:	2312      	movs	r3, #18
 8001664:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800166e:	2304      	movs	r3, #4
 8001670:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001672:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001676:	4619      	mov	r1, r3
 8001678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167c:	f000 fbd2 	bl	8001e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_I2C_MspInit+0xac>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001684:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_I2C_MspInit+0xac>)
 8001686:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800168a:	6593      	str	r3, [r2, #88]	; 0x58
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_I2C_MspInit+0xac>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001698:	bf00      	nop
 800169a:	3758      	adds	r7, #88	; 0x58
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40005400 	.word	0x40005400
 80016a4:	40021000 	.word	0x40021000

080016a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b096      	sub	sp, #88	; 0x58
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	2234      	movs	r2, #52	; 0x34
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f004 fe0a 	bl	80062e2 <memset>
  if(huart->Instance==USART2)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a23      	ldr	r2, [pc, #140]	; (8001760 <HAL_UART_MspInit+0xb8>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d13e      	bne.n	8001756 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016d8:	2302      	movs	r3, #2
 80016da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 fb77 	bl	8003dd8 <HAL_RCCEx_PeriphCLKConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016f0:	f7ff ff58 	bl	80015a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_UART_MspInit+0xbc>)
 80016f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f8:	4a1a      	ldr	r2, [pc, #104]	; (8001764 <HAL_UART_MspInit+0xbc>)
 80016fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_UART_MspInit+0xbc>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_UART_MspInit+0xbc>)
 800170e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <HAL_UART_MspInit+0xbc>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_UART_MspInit+0xbc>)
 800171a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_DE
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001724:	230e      	movs	r3, #14
 8001726:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001734:	2307      	movs	r3, #7
 8001736:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800173c:	4619      	mov	r1, r3
 800173e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001742:	f000 fb6f 	bl	8001e24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	2026      	movs	r0, #38	; 0x26
 800174c:	f000 fab5 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001750:	2026      	movs	r0, #38	; 0x26
 8001752:	f000 face 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001756:	bf00      	nop
 8001758:	3758      	adds	r7, #88	; 0x58
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40004400 	.word	0x40004400
 8001764:	40021000 	.word	0x40021000

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800176c:	e7fe      	b.n	800176c <NMI_Handler+0x4>

0800176e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <HardFault_Handler+0x4>

08001774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <MemManage_Handler+0x4>

0800177a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <UsageFault_Handler+0x4>

08001786 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b4:	f000 f962 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}

080017bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <USART2_IRQHandler+0x10>)
 80017c2:	f002 fd75 	bl	80042b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000344 	.word	0x20000344

080017d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return 1;
 80017d4:	2301      	movs	r3, #1
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_kill>:

int _kill(int pid, int sig)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ea:	f004 fdcd 	bl	8006388 <__errno>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2216      	movs	r2, #22
 80017f2:	601a      	str	r2, [r3, #0]
  return -1;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_exit>:

void _exit (int status)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ffe7 	bl	80017e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001812:	e7fe      	b.n	8001812 <_exit+0x12>

08001814 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e00a      	b.n	800183c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001826:	f3af 8000 	nop.w
 800182a:	4601      	mov	r1, r0
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	60ba      	str	r2, [r7, #8]
 8001832:	b2ca      	uxtb	r2, r1
 8001834:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	429a      	cmp	r2, r3
 8001842:	dbf0      	blt.n	8001826 <_read+0x12>
  }

  return len;
 8001844:	687b      	ldr	r3, [r7, #4]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	e009      	b.n	8001874 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	60ba      	str	r2, [r7, #8]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3301      	adds	r3, #1
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	429a      	cmp	r2, r3
 800187a:	dbf1      	blt.n	8001860 <_write+0x12>
  }
  return len;
 800187c:	687b      	ldr	r3, [r7, #4]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <_close>:

int _close(int file)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ae:	605a      	str	r2, [r3, #4]
  return 0;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_isatty>:

int _isatty(int file)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f8:	4a14      	ldr	r2, [pc, #80]	; (800194c <_sbrk+0x5c>)
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <_sbrk+0x60>)
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <_sbrk+0x64>)
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <_sbrk+0x68>)
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	d207      	bcs.n	8001930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001920:	f004 fd32 	bl	8006388 <__errno>
 8001924:	4603      	mov	r3, r0
 8001926:	220c      	movs	r2, #12
 8001928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	e009      	b.n	8001944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <_sbrk+0x64>)
 8001940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000a000 	.word	0x2000a000
 8001950:	00000400 	.word	0x00000400
 8001954:	200003cc 	.word	0x200003cc
 8001958:	20000520 	.word	0x20000520

0800195c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <SystemInit+0x20>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <SystemInit+0x20>)
 8001968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800196c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001984:	f7ff ffea 	bl	800195c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001988:	480c      	ldr	r0, [pc, #48]	; (80019bc <LoopForever+0x6>)
  ldr r1, =_edata
 800198a:	490d      	ldr	r1, [pc, #52]	; (80019c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800198c:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <LoopForever+0xe>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a0:	4c0a      	ldr	r4, [pc, #40]	; (80019cc <LoopForever+0x16>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ae:	f004 fcf1 	bl	8006394 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019b2:	f7ff fc3b 	bl	800122c <main>

080019b6 <LoopForever>:

LoopForever:
    b LoopForever
 80019b6:	e7fe      	b.n	80019b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019b8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019c4:	0800856c 	.word	0x0800856c
  ldr r2, =_sbss
 80019c8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019cc:	20000520 	.word	0x20000520

080019d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC1_2_IRQHandler>

080019d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019dc:	2003      	movs	r0, #3
 80019de:	f000 f961 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e2:	2000      	movs	r0, #0
 80019e4:	f000 f80e 	bl	8001a04 <HAL_InitTick>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	71fb      	strb	r3, [r7, #7]
 80019f2:	e001      	b.n	80019f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019f4:	f7ff fddc 	bl	80015b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019f8:	79fb      	ldrb	r3, [r7, #7]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a10:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <HAL_InitTick+0x6c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d023      	beq.n	8001a60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_InitTick+0x70>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_InitTick+0x6c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f96d 	bl	8001d0e <HAL_SYSTICK_Config>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10f      	bne.n	8001a5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d809      	bhi.n	8001a54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a40:	2200      	movs	r2, #0
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f000 f937 	bl	8001cba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_InitTick+0x74>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e007      	b.n	8001a64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	e004      	b.n	8001a64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
 8001a5e:	e001      	b.n	8001a64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000008 	.word	0x20000008
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000004 	.word	0x20000004

08001a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	200003d0 	.word	0x200003d0

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	200003d0 	.word	0x200003d0

08001abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac4:	f7ff ffee 	bl	8001aa4 <HAL_GetTick>
 8001ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d005      	beq.n	8001ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_Delay+0x44>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ae2:	bf00      	nop
 8001ae4:	f7ff ffde 	bl	8001aa4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d8f7      	bhi.n	8001ae4 <HAL_Delay+0x28>
  {
  }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000008 	.word	0x20000008

08001b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b20:	4013      	ands	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b36:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	60d3      	str	r3, [r2, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <__NVIC_GetPriorityGrouping+0x18>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 0307 	and.w	r3, r3, #7
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db0b      	blt.n	8001b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <__NVIC_EnableIRQ+0x38>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	2001      	movs	r0, #1
 8001b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	; (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c70:	d301      	bcc.n	8001c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00f      	b.n	8001c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <SysTick_Config+0x40>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7e:	210f      	movs	r1, #15
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f7ff ff8e 	bl	8001ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <SysTick_Config+0x40>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8e:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <SysTick_Config+0x40>)
 8001c90:	2207      	movs	r2, #7
 8001c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	e000e010 	.word	0xe000e010

08001ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff29 	bl	8001b04 <__NVIC_SetPriorityGrouping>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ccc:	f7ff ff3e 	bl	8001b4c <__NVIC_GetPriorityGrouping>
 8001cd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	6978      	ldr	r0, [r7, #20]
 8001cd8:	f7ff ff8e 	bl	8001bf8 <NVIC_EncodePriority>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff5d 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001cea:	bf00      	nop
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff31 	bl	8001b68 <__NVIC_EnableIRQ>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ffa2 	bl	8001c60 <SysTick_Config>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d008      	beq.n	8001d50 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2204      	movs	r2, #4
 8001d42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e022      	b.n	8001d96 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 020e 	bic.w	r2, r2, #14
 8001d5e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0201 	bic.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d74:	f003 021c 	and.w	r2, r3, #28
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d82:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d005      	beq.n	8001dc6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e029      	b.n	8001e1a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 020e 	bic.w	r2, r2, #14
 8001dd4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0201 	bic.w	r2, r2, #1
 8001de4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f003 021c 	and.w	r2, r3, #28
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f202 	lsl.w	r2, r1, r2
 8001df8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	4798      	blx	r3
    }
  }
  return status;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e32:	e14e      	b.n	80020d2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8140 	beq.w	80020cc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d005      	beq.n	8001e64 <HAL_GPIO_Init+0x40>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d130      	bne.n	8001ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	f003 0201 	and.w	r2, r3, #1
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d017      	beq.n	8001f02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d123      	bne.n	8001f56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	08da      	lsrs	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3208      	adds	r2, #8
 8001f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	220f      	movs	r2, #15
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	08da      	lsrs	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3208      	adds	r2, #8
 8001f50:	6939      	ldr	r1, [r7, #16]
 8001f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	2203      	movs	r2, #3
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0203 	and.w	r2, r3, #3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 809a 	beq.w	80020cc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f98:	4b55      	ldr	r3, [pc, #340]	; (80020f0 <HAL_GPIO_Init+0x2cc>)
 8001f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9c:	4a54      	ldr	r2, [pc, #336]	; (80020f0 <HAL_GPIO_Init+0x2cc>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6613      	str	r3, [r2, #96]	; 0x60
 8001fa4:	4b52      	ldr	r3, [pc, #328]	; (80020f0 <HAL_GPIO_Init+0x2cc>)
 8001fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fb0:	4a50      	ldr	r2, [pc, #320]	; (80020f4 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fda:	d013      	beq.n	8002004 <HAL_GPIO_Init+0x1e0>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a46      	ldr	r2, [pc, #280]	; (80020f8 <HAL_GPIO_Init+0x2d4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00d      	beq.n	8002000 <HAL_GPIO_Init+0x1dc>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a45      	ldr	r2, [pc, #276]	; (80020fc <HAL_GPIO_Init+0x2d8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d007      	beq.n	8001ffc <HAL_GPIO_Init+0x1d8>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a44      	ldr	r2, [pc, #272]	; (8002100 <HAL_GPIO_Init+0x2dc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d101      	bne.n	8001ff8 <HAL_GPIO_Init+0x1d4>
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e006      	b.n	8002006 <HAL_GPIO_Init+0x1e2>
 8001ff8:	2307      	movs	r3, #7
 8001ffa:	e004      	b.n	8002006 <HAL_GPIO_Init+0x1e2>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e002      	b.n	8002006 <HAL_GPIO_Init+0x1e2>
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_GPIO_Init+0x1e2>
 8002004:	2300      	movs	r3, #0
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	f002 0203 	and.w	r2, r2, #3
 800200c:	0092      	lsls	r2, r2, #2
 800200e:	4093      	lsls	r3, r2
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002016:	4937      	ldr	r1, [pc, #220]	; (80020f4 <HAL_GPIO_Init+0x2d0>)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002024:	4b37      	ldr	r3, [pc, #220]	; (8002104 <HAL_GPIO_Init+0x2e0>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	43db      	mvns	r3, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002048:	4a2e      	ldr	r2, [pc, #184]	; (8002104 <HAL_GPIO_Init+0x2e0>)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800204e:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <HAL_GPIO_Init+0x2e0>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002072:	4a24      	ldr	r2, [pc, #144]	; (8002104 <HAL_GPIO_Init+0x2e0>)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002078:	4b22      	ldr	r3, [pc, #136]	; (8002104 <HAL_GPIO_Init+0x2e0>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	43db      	mvns	r3, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800209c:	4a19      	ldr	r2, [pc, #100]	; (8002104 <HAL_GPIO_Init+0x2e0>)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <HAL_GPIO_Init+0x2e0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020c6:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <HAL_GPIO_Init+0x2e0>)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	3301      	adds	r3, #1
 80020d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f47f aea9 	bne.w	8001e34 <HAL_GPIO_Init+0x10>
  }
}
 80020e2:	bf00      	nop
 80020e4:	bf00      	nop
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40010000 	.word	0x40010000
 80020f8:	48000400 	.word	0x48000400
 80020fc:	48000800 	.word	0x48000800
 8002100:	48000c00 	.word	0x48000c00
 8002104:	40010400 	.word	0x40010400

08002108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	807b      	strh	r3, [r7, #2]
 8002114:	4613      	mov	r3, r2
 8002116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002118:	787b      	ldrb	r3, [r7, #1]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800211e:	887a      	ldrh	r2, [r7, #2]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002124:	e002      	b.n	800212c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002126:	887a      	ldrh	r2, [r7, #2]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800214a:	887a      	ldrh	r2, [r7, #2]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4013      	ands	r3, r2
 8002150:	041a      	lsls	r2, r3, #16
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43d9      	mvns	r1, r3
 8002156:	887b      	ldrh	r3, [r7, #2]
 8002158:	400b      	ands	r3, r1
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	619a      	str	r2, [r3, #24]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e08d      	b.n	800229a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fa30 	bl	80015f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2224      	movs	r2, #36	; 0x24
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	e006      	b.n	80021f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d108      	bne.n	800220e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	e007      	b.n	800221e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800221c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800222c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002230:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002240:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69d9      	ldr	r1, [r3, #28]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1a      	ldr	r2, [r3, #32]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2220      	movs	r2, #32
 8002286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	461a      	mov	r2, r3
 80022b0:	460b      	mov	r3, r1
 80022b2:	817b      	strh	r3, [r7, #10]
 80022b4:	4613      	mov	r3, r2
 80022b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b20      	cmp	r3, #32
 80022c2:	f040 80fd 	bne.w	80024c0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_I2C_Master_Transmit+0x30>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e0f6      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x21e>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022dc:	f7ff fbe2 	bl	8001aa4 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	2319      	movs	r3, #25
 80022e8:	2201      	movs	r2, #1
 80022ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 fb72 	bl	80029d8 <I2C_WaitOnFlagUntilTimeout>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0e1      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2221      	movs	r2, #33	; 0x21
 8002302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2210      	movs	r2, #16
 800230a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	893a      	ldrh	r2, [r7, #8]
 800231e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	2bff      	cmp	r3, #255	; 0xff
 800232e:	d906      	bls.n	800233e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	22ff      	movs	r2, #255	; 0xff
 8002334:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002336:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	e007      	b.n	800234e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002348:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800234c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002352:	2b00      	cmp	r3, #0
 8002354:	d024      	beq.n	80023a0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	781a      	ldrb	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238a:	b2db      	uxtb	r3, r3
 800238c:	3301      	adds	r3, #1
 800238e:	b2da      	uxtb	r2, r3
 8002390:	8979      	ldrh	r1, [r7, #10]
 8002392:	4b4e      	ldr	r3, [pc, #312]	; (80024cc <HAL_I2C_Master_Transmit+0x228>)
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 fd59 	bl	8002e50 <I2C_TransferConfig>
 800239e:	e066      	b.n	800246e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	8979      	ldrh	r1, [r7, #10]
 80023a8:	4b48      	ldr	r3, [pc, #288]	; (80024cc <HAL_I2C_Master_Transmit+0x228>)
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 fd4e 	bl	8002e50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80023b4:	e05b      	b.n	800246e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	6a39      	ldr	r1, [r7, #32]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 fb5b 	bl	8002a76 <I2C_WaitOnTXISFlagUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e07b      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	781a      	ldrb	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d034      	beq.n	800246e <HAL_I2C_Master_Transmit+0x1ca>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	2b00      	cmp	r3, #0
 800240a:	d130      	bne.n	800246e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	2200      	movs	r2, #0
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 fade 	bl	80029d8 <I2C_WaitOnFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e04d      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	2bff      	cmp	r3, #255	; 0xff
 800242e:	d90e      	bls.n	800244e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	22ff      	movs	r2, #255	; 0xff
 8002434:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243a:	b2da      	uxtb	r2, r3
 800243c:	8979      	ldrh	r1, [r7, #10]
 800243e:	2300      	movs	r3, #0
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 fd02 	bl	8002e50 <I2C_TransferConfig>
 800244c:	e00f      	b.n	800246e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245c:	b2da      	uxtb	r2, r3
 800245e:	8979      	ldrh	r1, [r7, #10]
 8002460:	2300      	movs	r3, #0
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fcf1 	bl	8002e50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d19e      	bne.n	80023b6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	6a39      	ldr	r1, [r7, #32]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 fb41 	bl	8002b04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e01a      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2220      	movs	r2, #32
 8002492:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6859      	ldr	r1, [r3, #4]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <HAL_I2C_Master_Transmit+0x22c>)
 80024a0:	400b      	ands	r3, r1
 80024a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	80002000 	.word	0x80002000
 80024d0:	fe00e800 	.word	0xfe00e800

080024d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	461a      	mov	r2, r3
 80024e0:	460b      	mov	r3, r1
 80024e2:	817b      	strh	r3, [r7, #10]
 80024e4:	4613      	mov	r3, r2
 80024e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	f040 80db 	bne.w	80026ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_I2C_Master_Receive+0x30>
 8002500:	2302      	movs	r3, #2
 8002502:	e0d4      	b.n	80026ae <HAL_I2C_Master_Receive+0x1da>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800250c:	f7ff faca 	bl	8001aa4 <HAL_GetTick>
 8002510:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	2319      	movs	r3, #25
 8002518:	2201      	movs	r2, #1
 800251a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fa5a 	bl	80029d8 <I2C_WaitOnFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e0bf      	b.n	80026ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2222      	movs	r2, #34	; 0x22
 8002532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2210      	movs	r2, #16
 800253a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	893a      	ldrh	r2, [r7, #8]
 800254e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	2bff      	cmp	r3, #255	; 0xff
 800255e:	d90e      	bls.n	800257e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	22ff      	movs	r2, #255	; 0xff
 8002564:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256a:	b2da      	uxtb	r2, r3
 800256c:	8979      	ldrh	r1, [r7, #10]
 800256e:	4b52      	ldr	r3, [pc, #328]	; (80026b8 <HAL_I2C_Master_Receive+0x1e4>)
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fc6a 	bl	8002e50 <I2C_TransferConfig>
 800257c:	e06d      	b.n	800265a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	b2da      	uxtb	r2, r3
 800258e:	8979      	ldrh	r1, [r7, #10]
 8002590:	4b49      	ldr	r3, [pc, #292]	; (80026b8 <HAL_I2C_Master_Receive+0x1e4>)
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 fc59 	bl	8002e50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800259e:	e05c      	b.n	800265a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	6a39      	ldr	r1, [r7, #32]
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 faf1 	bl	8002b8c <I2C_WaitOnRXNEFlagUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e07c      	b.n	80026ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d034      	beq.n	800265a <HAL_I2C_Master_Receive+0x186>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d130      	bne.n	800265a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	2200      	movs	r2, #0
 8002600:	2180      	movs	r1, #128	; 0x80
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f9e8 	bl	80029d8 <I2C_WaitOnFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e04d      	b.n	80026ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	2bff      	cmp	r3, #255	; 0xff
 800261a:	d90e      	bls.n	800263a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	22ff      	movs	r2, #255	; 0xff
 8002620:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	b2da      	uxtb	r2, r3
 8002628:	8979      	ldrh	r1, [r7, #10]
 800262a:	2300      	movs	r3, #0
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fc0c 	bl	8002e50 <I2C_TransferConfig>
 8002638:	e00f      	b.n	800265a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	b2da      	uxtb	r2, r3
 800264a:	8979      	ldrh	r1, [r7, #10]
 800264c:	2300      	movs	r3, #0
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 fbfb 	bl	8002e50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d19d      	bne.n	80025a0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	6a39      	ldr	r1, [r7, #32]
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fa4b 	bl	8002b04 <I2C_WaitOnSTOPFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e01a      	b.n	80026ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2220      	movs	r2, #32
 800267e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6859      	ldr	r1, [r3, #4]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <HAL_I2C_Master_Receive+0x1e8>)
 800268c:	400b      	ands	r3, r1
 800268e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e000      	b.n	80026ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80026ac:	2302      	movs	r3, #2
  }
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	80002400 	.word	0x80002400
 80026bc:	fe00e800 	.word	0xfe00e800

080026c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	4608      	mov	r0, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	461a      	mov	r2, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	817b      	strh	r3, [r7, #10]
 80026d2:	460b      	mov	r3, r1
 80026d4:	813b      	strh	r3, [r7, #8]
 80026d6:	4613      	mov	r3, r2
 80026d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b20      	cmp	r3, #32
 80026e4:	f040 80f9 	bne.w	80028da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <HAL_I2C_Mem_Write+0x34>
 80026ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d105      	bne.n	8002700 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0ed      	b.n	80028dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_I2C_Mem_Write+0x4e>
 800270a:	2302      	movs	r3, #2
 800270c:	e0e6      	b.n	80028dc <HAL_I2C_Mem_Write+0x21c>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002716:	f7ff f9c5 	bl	8001aa4 <HAL_GetTick>
 800271a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2319      	movs	r3, #25
 8002722:	2201      	movs	r2, #1
 8002724:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 f955 	bl	80029d8 <I2C_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0d1      	b.n	80028dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2221      	movs	r2, #33	; 0x21
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2240      	movs	r2, #64	; 0x40
 8002744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a3a      	ldr	r2, [r7, #32]
 8002752:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002758:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002760:	88f8      	ldrh	r0, [r7, #6]
 8002762:	893a      	ldrh	r2, [r7, #8]
 8002764:	8979      	ldrh	r1, [r7, #10]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	4603      	mov	r3, r0
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 f8b9 	bl	80028e8 <I2C_RequestMemoryWrite>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0a9      	b.n	80028dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278c:	b29b      	uxth	r3, r3
 800278e:	2bff      	cmp	r3, #255	; 0xff
 8002790:	d90e      	bls.n	80027b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	22ff      	movs	r2, #255	; 0xff
 8002796:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	b2da      	uxtb	r2, r3
 800279e:	8979      	ldrh	r1, [r7, #10]
 80027a0:	2300      	movs	r3, #0
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 fb51 	bl	8002e50 <I2C_TransferConfig>
 80027ae:	e00f      	b.n	80027d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	8979      	ldrh	r1, [r7, #10]
 80027c2:	2300      	movs	r3, #0
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fb40 	bl	8002e50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f94e 	bl	8002a76 <I2C_WaitOnTXISFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e07b      	b.n	80028dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d034      	beq.n	8002888 <HAL_I2C_Mem_Write+0x1c8>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002822:	2b00      	cmp	r3, #0
 8002824:	d130      	bne.n	8002888 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	2200      	movs	r2, #0
 800282e:	2180      	movs	r1, #128	; 0x80
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f8d1 	bl	80029d8 <I2C_WaitOnFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e04d      	b.n	80028dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	2bff      	cmp	r3, #255	; 0xff
 8002848:	d90e      	bls.n	8002868 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	22ff      	movs	r2, #255	; 0xff
 800284e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002854:	b2da      	uxtb	r2, r3
 8002856:	8979      	ldrh	r1, [r7, #10]
 8002858:	2300      	movs	r3, #0
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 faf5 	bl	8002e50 <I2C_TransferConfig>
 8002866:	e00f      	b.n	8002888 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002876:	b2da      	uxtb	r2, r3
 8002878:	8979      	ldrh	r1, [r7, #10]
 800287a:	2300      	movs	r3, #0
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fae4 	bl	8002e50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d19e      	bne.n	80027d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f934 	bl	8002b04 <I2C_WaitOnSTOPFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e01a      	b.n	80028dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2220      	movs	r2, #32
 80028ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_I2C_Mem_Write+0x224>)
 80028ba:	400b      	ands	r3, r1
 80028bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e000      	b.n	80028dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80028da:	2302      	movs	r3, #2
  }
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	fe00e800 	.word	0xfe00e800

080028e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	4608      	mov	r0, r1
 80028f2:	4611      	mov	r1, r2
 80028f4:	461a      	mov	r2, r3
 80028f6:	4603      	mov	r3, r0
 80028f8:	817b      	strh	r3, [r7, #10]
 80028fa:	460b      	mov	r3, r1
 80028fc:	813b      	strh	r3, [r7, #8]
 80028fe:	4613      	mov	r3, r2
 8002900:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	8979      	ldrh	r1, [r7, #10]
 8002908:	4b20      	ldr	r3, [pc, #128]	; (800298c <I2C_RequestMemoryWrite+0xa4>)
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 fa9d 	bl	8002e50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	69b9      	ldr	r1, [r7, #24]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f8ab 	bl	8002a76 <I2C_WaitOnTXISFlagUntilTimeout>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e02c      	b.n	8002984 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d105      	bne.n	800293c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002930:	893b      	ldrh	r3, [r7, #8]
 8002932:	b2da      	uxtb	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	629a      	str	r2, [r3, #40]	; 0x28
 800293a:	e015      	b.n	8002968 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800293c:	893b      	ldrh	r3, [r7, #8]
 800293e:	0a1b      	lsrs	r3, r3, #8
 8002940:	b29b      	uxth	r3, r3
 8002942:	b2da      	uxtb	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	69b9      	ldr	r1, [r7, #24]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f891 	bl	8002a76 <I2C_WaitOnTXISFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e012      	b.n	8002984 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800295e:	893b      	ldrh	r3, [r7, #8]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2200      	movs	r2, #0
 8002970:	2180      	movs	r1, #128	; 0x80
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f830 	bl	80029d8 <I2C_WaitOnFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	80002000 	.word	0x80002000

08002990 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d103      	bne.n	80029ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2200      	movs	r2, #0
 80029ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d007      	beq.n	80029cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	619a      	str	r2, [r3, #24]
  }
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e8:	e031      	b.n	8002a4e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d02d      	beq.n	8002a4e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f2:	f7ff f857 	bl	8001aa4 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d302      	bcc.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d122      	bne.n	8002a4e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	4013      	ands	r3, r2
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	bf0c      	ite	eq
 8002a18:	2301      	moveq	r3, #1
 8002a1a:	2300      	movne	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d113      	bne.n	8002a4e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	f043 0220 	orr.w	r2, r3, #32
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00f      	b.n	8002a6e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699a      	ldr	r2, [r3, #24]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4013      	ands	r3, r2
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	bf0c      	ite	eq
 8002a5e:	2301      	moveq	r3, #1
 8002a60:	2300      	movne	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d0be      	beq.n	80029ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a82:	e033      	b.n	8002aec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f901 	bl	8002c90 <I2C_IsErrorOccurred>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e031      	b.n	8002afc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9e:	d025      	beq.n	8002aec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa0:	f7ff f800 	bl	8001aa4 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d302      	bcc.n	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d11a      	bne.n	8002aec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d013      	beq.n	8002aec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	f043 0220 	orr.w	r2, r3, #32
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e007      	b.n	8002afc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d1c4      	bne.n	8002a84 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b10:	e02f      	b.n	8002b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f8ba 	bl	8002c90 <I2C_IsErrorOccurred>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e02d      	b.n	8002b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b26:	f7fe ffbd 	bl	8001aa4 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d302      	bcc.n	8002b3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d11a      	bne.n	8002b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d013      	beq.n	8002b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f043 0220 	orr.w	r2, r3, #32
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e007      	b.n	8002b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d1c8      	bne.n	8002b12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b98:	e06b      	b.n	8002c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 f876 	bl	8002c90 <I2C_IsErrorOccurred>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e069      	b.n	8002c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d138      	bne.n	8002c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d105      	bne.n	8002bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e055      	b.n	8002c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b10      	cmp	r3, #16
 8002be2:	d107      	bne.n	8002bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2210      	movs	r2, #16
 8002bea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2204      	movs	r2, #4
 8002bf0:	645a      	str	r2, [r3, #68]	; 0x44
 8002bf2:	e002      	b.n	8002bfa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002c0e:	400b      	ands	r3, r1
 8002c10:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e029      	b.n	8002c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2e:	f7fe ff39 	bl	8001aa4 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d302      	bcc.n	8002c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d116      	bne.n	8002c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d00f      	beq.n	8002c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f043 0220 	orr.w	r2, r3, #32
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e007      	b.n	8002c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d18c      	bne.n	8002b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	fe00e800 	.word	0xfe00e800

08002c90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d068      	beq.n	8002d8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cc4:	e049      	b.n	8002d5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d045      	beq.n	8002d5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cce:	f7fe fee9 	bl	8001aa4 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d302      	bcc.n	8002ce4 <I2C_IsErrorOccurred+0x54>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d13a      	bne.n	8002d5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cf6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d06:	d121      	bne.n	8002d4c <I2C_IsErrorOccurred+0xbc>
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d0e:	d01d      	beq.n	8002d4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002d10:	7cfb      	ldrb	r3, [r7, #19]
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	d01a      	beq.n	8002d4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d26:	f7fe febd 	bl	8001aa4 <HAL_GetTick>
 8002d2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d2c:	e00e      	b.n	8002d4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d2e:	f7fe feb9 	bl	8001aa4 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b19      	cmp	r3, #25
 8002d3a:	d907      	bls.n	8002d4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	f043 0320 	orr.w	r3, r3, #32
 8002d42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002d4a:	e006      	b.n	8002d5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b20      	cmp	r3, #32
 8002d58:	d1e9      	bne.n	8002d2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	d003      	beq.n	8002d70 <I2C_IsErrorOccurred+0xe0>
 8002d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0aa      	beq.n	8002cc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d103      	bne.n	8002d80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	f043 0304 	orr.w	r3, r3, #4
 8002d86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00b      	beq.n	8002db8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002db0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	f043 0308 	orr.w	r3, r3, #8
 8002dc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00b      	beq.n	8002dfc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	f043 0302 	orr.w	r3, r3, #2
 8002dea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002df4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01c      	beq.n	8002e3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f7ff fdc3 	bl	8002990 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <I2C_IsErrorOccurred+0x1bc>)
 8002e16:	400b      	ands	r3, r1
 8002e18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	431a      	orrs	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3728      	adds	r7, #40	; 0x28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	fe00e800 	.word	0xfe00e800

08002e50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	817b      	strh	r3, [r7, #10]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e62:	897b      	ldrh	r3, [r7, #10]
 8002e64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e68:	7a7b      	ldrb	r3, [r7, #9]
 8002e6a:	041b      	lsls	r3, r3, #16
 8002e6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	0d5b      	lsrs	r3, r3, #21
 8002e8a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <I2C_TransferConfig+0x60>)
 8002e90:	430b      	orrs	r3, r1
 8002e92:	43db      	mvns	r3, r3
 8002e94:	ea02 0103 	and.w	r1, r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	03ff63ff 	.word	0x03ff63ff

08002eb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	d138      	bne.n	8002f3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e032      	b.n	8002f3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2224      	movs	r2, #36	; 0x24
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6819      	ldr	r1, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e000      	b.n	8002f3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
  }
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b085      	sub	sp, #20
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d139      	bne.n	8002fd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e033      	b.n	8002fd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2224      	movs	r2, #36	; 0x24
 8002f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0201 	bic.w	r2, r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	021b      	lsls	r3, r3, #8
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e000      	b.n	8002fd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fd4:	2302      	movs	r3, #2
  }
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a04      	ldr	r2, [pc, #16]	; (8003000 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff2:	6013      	str	r3, [r2, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40007000 	.word	0x40007000

08003004 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <HAL_PWREx_GetVoltageRange+0x18>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40007000 	.word	0x40007000

08003020 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800302e:	d130      	bne.n	8003092 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003030:	4b23      	ldr	r3, [pc, #140]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800303c:	d038      	beq.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800303e:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003046:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800304c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800304e:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2232      	movs	r2, #50	; 0x32
 8003054:	fb02 f303 	mul.w	r3, r2, r3
 8003058:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	0c9b      	lsrs	r3, r3, #18
 8003060:	3301      	adds	r3, #1
 8003062:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003064:	e002      	b.n	800306c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3b01      	subs	r3, #1
 800306a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800306c:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003078:	d102      	bne.n	8003080 <HAL_PWREx_ControlVoltageScaling+0x60>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f2      	bne.n	8003066 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003080:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308c:	d110      	bne.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e00f      	b.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800309a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309e:	d007      	beq.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030a0:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030a8:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40007000 	.word	0x40007000
 80030c4:	20000000 	.word	0x20000000
 80030c8:	431bde83 	.word	0x431bde83

080030cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	; 0x28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d102      	bne.n	80030e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	f000 bc4f 	b.w	800397e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030e0:	4b97      	ldr	r3, [pc, #604]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030ea:	4b95      	ldr	r3, [pc, #596]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80e6 	beq.w	80032ce <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d007      	beq.n	8003118 <HAL_RCC_OscConfig+0x4c>
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	2b0c      	cmp	r3, #12
 800310c:	f040 808d 	bne.w	800322a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	2b01      	cmp	r3, #1
 8003114:	f040 8089 	bne.w	800322a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003118:	4b89      	ldr	r3, [pc, #548]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d006      	beq.n	8003132 <HAL_RCC_OscConfig+0x66>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	f000 bc26 	b.w	800397e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003136:	4b82      	ldr	r3, [pc, #520]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d004      	beq.n	800314c <HAL_RCC_OscConfig+0x80>
 8003142:	4b7f      	ldr	r3, [pc, #508]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800314a:	e005      	b.n	8003158 <HAL_RCC_OscConfig+0x8c>
 800314c:	4b7c      	ldr	r3, [pc, #496]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 800314e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003152:	091b      	lsrs	r3, r3, #4
 8003154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003158:	4293      	cmp	r3, r2
 800315a:	d224      	bcs.n	80031a6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fdd9 	bl	8003d18 <RCC_SetFlashLatencyFromMSIRange>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	f000 bc06 	b.w	800397e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003172:	4b73      	ldr	r3, [pc, #460]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a72      	ldr	r2, [pc, #456]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 8003178:	f043 0308 	orr.w	r3, r3, #8
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	4b70      	ldr	r3, [pc, #448]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	496d      	ldr	r1, [pc, #436]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 800318c:	4313      	orrs	r3, r2
 800318e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003190:	4b6b      	ldr	r3, [pc, #428]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	021b      	lsls	r3, r3, #8
 800319e:	4968      	ldr	r1, [pc, #416]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
 80031a4:	e025      	b.n	80031f2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031a6:	4b66      	ldr	r3, [pc, #408]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a65      	ldr	r2, [pc, #404]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 80031ac:	f043 0308 	orr.w	r3, r3, #8
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b63      	ldr	r3, [pc, #396]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	4960      	ldr	r1, [pc, #384]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031c4:	4b5e      	ldr	r3, [pc, #376]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	495b      	ldr	r1, [pc, #364]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fd98 	bl	8003d18 <RCC_SetFlashLatencyFromMSIRange>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e3c5      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031f2:	f000 fccd 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 80031f6:	4602      	mov	r2, r0
 80031f8:	4b51      	ldr	r3, [pc, #324]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	4950      	ldr	r1, [pc, #320]	; (8003344 <HAL_RCC_OscConfig+0x278>)
 8003204:	5ccb      	ldrb	r3, [r1, r3]
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	fa22 f303 	lsr.w	r3, r2, r3
 800320e:	4a4e      	ldr	r2, [pc, #312]	; (8003348 <HAL_RCC_OscConfig+0x27c>)
 8003210:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003212:	4b4e      	ldr	r3, [pc, #312]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe fbf4 	bl	8001a04 <HAL_InitTick>
 800321c:	4603      	mov	r3, r0
 800321e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003220:	7dfb      	ldrb	r3, [r7, #23]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d052      	beq.n	80032cc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003226:	7dfb      	ldrb	r3, [r7, #23]
 8003228:	e3a9      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d032      	beq.n	8003298 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003232:	4b43      	ldr	r3, [pc, #268]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a42      	ldr	r2, [pc, #264]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800323e:	f7fe fc31 	bl	8001aa4 <HAL_GetTick>
 8003242:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003246:	f7fe fc2d 	bl	8001aa4 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e392      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003258:	4b39      	ldr	r3, [pc, #228]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003264:	4b36      	ldr	r3, [pc, #216]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a35      	ldr	r2, [pc, #212]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 800326a:	f043 0308 	orr.w	r3, r3, #8
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4b33      	ldr	r3, [pc, #204]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	4930      	ldr	r1, [pc, #192]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003282:	4b2f      	ldr	r3, [pc, #188]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	492b      	ldr	r1, [pc, #172]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 8003292:	4313      	orrs	r3, r2
 8003294:	604b      	str	r3, [r1, #4]
 8003296:	e01a      	b.n	80032ce <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003298:	4b29      	ldr	r3, [pc, #164]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a28      	ldr	r2, [pc, #160]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032a4:	f7fe fbfe 	bl	8001aa4 <HAL_GetTick>
 80032a8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032ac:	f7fe fbfa 	bl	8001aa4 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e35f      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032be:	4b20      	ldr	r3, [pc, #128]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x1e0>
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d073      	beq.n	80033c2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d005      	beq.n	80032ec <HAL_RCC_OscConfig+0x220>
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	2b0c      	cmp	r3, #12
 80032e4:	d10e      	bne.n	8003304 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d10b      	bne.n	8003304 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ec:	4b14      	ldr	r3, [pc, #80]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d063      	beq.n	80033c0 <HAL_RCC_OscConfig+0x2f4>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d15f      	bne.n	80033c0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e33c      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330c:	d106      	bne.n	800331c <HAL_RCC_OscConfig+0x250>
 800330e:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a0b      	ldr	r2, [pc, #44]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e025      	b.n	8003368 <HAL_RCC_OscConfig+0x29c>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003324:	d114      	bne.n	8003350 <HAL_RCC_OscConfig+0x284>
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a05      	ldr	r2, [pc, #20]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 800332c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4b03      	ldr	r3, [pc, #12]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a02      	ldr	r2, [pc, #8]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e013      	b.n	8003368 <HAL_RCC_OscConfig+0x29c>
 8003340:	40021000 	.word	0x40021000
 8003344:	080081a0 	.word	0x080081a0
 8003348:	20000000 	.word	0x20000000
 800334c:	20000004 	.word	0x20000004
 8003350:	4b8f      	ldr	r3, [pc, #572]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a8e      	ldr	r2, [pc, #568]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	4b8c      	ldr	r3, [pc, #560]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a8b      	ldr	r2, [pc, #556]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d013      	beq.n	8003398 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fe fb98 	bl	8001aa4 <HAL_GetTick>
 8003374:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003378:	f7fe fb94 	bl	8001aa4 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	; 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e2f9      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800338a:	4b81      	ldr	r3, [pc, #516]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x2ac>
 8003396:	e014      	b.n	80033c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fe fb84 	bl	8001aa4 <HAL_GetTick>
 800339c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a0:	f7fe fb80 	bl	8001aa4 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	; 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e2e5      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033b2:	4b77      	ldr	r3, [pc, #476]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x2d4>
 80033be:	e000      	b.n	80033c2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d060      	beq.n	8003490 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d005      	beq.n	80033e0 <HAL_RCC_OscConfig+0x314>
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	2b0c      	cmp	r3, #12
 80033d8:	d119      	bne.n	800340e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d116      	bne.n	800340e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033e0:	4b6b      	ldr	r3, [pc, #428]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_OscConfig+0x32c>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e2c2      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f8:	4b65      	ldr	r3, [pc, #404]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	061b      	lsls	r3, r3, #24
 8003406:	4962      	ldr	r1, [pc, #392]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003408:	4313      	orrs	r3, r2
 800340a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800340c:	e040      	b.n	8003490 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d023      	beq.n	800345e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003416:	4b5e      	ldr	r3, [pc, #376]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a5d      	ldr	r2, [pc, #372]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003422:	f7fe fb3f 	bl	8001aa4 <HAL_GetTick>
 8003426:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342a:	f7fe fb3b 	bl	8001aa4 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e2a0      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800343c:	4b54      	ldr	r3, [pc, #336]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003448:	4b51      	ldr	r3, [pc, #324]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	061b      	lsls	r3, r3, #24
 8003456:	494e      	ldr	r1, [pc, #312]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]
 800345c:	e018      	b.n	8003490 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345e:	4b4c      	ldr	r3, [pc, #304]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a4b      	ldr	r2, [pc, #300]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346a:	f7fe fb1b 	bl	8001aa4 <HAL_GetTick>
 800346e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003472:	f7fe fb17 	bl	8001aa4 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e27c      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003484:	4b42      	ldr	r3, [pc, #264]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1f0      	bne.n	8003472 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8082 	beq.w	80035a2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d05f      	beq.n	8003566 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80034a6:	4b3a      	ldr	r3, [pc, #232]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ac:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699a      	ldr	r2, [r3, #24]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d037      	beq.n	800352c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d006      	beq.n	80034d4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e254      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01b      	beq.n	8003516 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80034de:	4b2c      	ldr	r3, [pc, #176]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e4:	4a2a      	ldr	r2, [pc, #168]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034ee:	f7fe fad9 	bl	8001aa4 <HAL_GetTick>
 80034f2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f6:	f7fe fad5 	bl	8001aa4 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b11      	cmp	r3, #17
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e23a      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003508:	4b21      	ldr	r3, [pc, #132]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800350a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1ef      	bne.n	80034f6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003516:	4b1e      	ldr	r3, [pc, #120]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800351c:	f023 0210 	bic.w	r2, r3, #16
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	491a      	ldr	r1, [pc, #104]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352c:	4b18      	ldr	r3, [pc, #96]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800352e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003532:	4a17      	ldr	r2, [pc, #92]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fe fab2 	bl	8001aa4 <HAL_GetTick>
 8003540:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003544:	f7fe faae 	bl	8001aa4 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b11      	cmp	r3, #17
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e213      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003556:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0ef      	beq.n	8003544 <HAL_RCC_OscConfig+0x478>
 8003564:	e01d      	b.n	80035a2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003566:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800356c:	4a08      	ldr	r2, [pc, #32]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800356e:	f023 0301 	bic.w	r3, r3, #1
 8003572:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003576:	f7fe fa95 	bl	8001aa4 <HAL_GetTick>
 800357a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800357c:	e00a      	b.n	8003594 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357e:	f7fe fa91 	bl	8001aa4 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b11      	cmp	r3, #17
 800358a:	d903      	bls.n	8003594 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e1f6      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
 8003590:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003594:	4ba9      	ldr	r3, [pc, #676]	; (800383c <HAL_RCC_OscConfig+0x770>)
 8003596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1ed      	bne.n	800357e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80bd 	beq.w	800372a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b0:	2300      	movs	r3, #0
 80035b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035b6:	4ba1      	ldr	r3, [pc, #644]	; (800383c <HAL_RCC_OscConfig+0x770>)
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10e      	bne.n	80035e0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c2:	4b9e      	ldr	r3, [pc, #632]	; (800383c <HAL_RCC_OscConfig+0x770>)
 80035c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c6:	4a9d      	ldr	r2, [pc, #628]	; (800383c <HAL_RCC_OscConfig+0x770>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035cc:	6593      	str	r3, [r2, #88]	; 0x58
 80035ce:	4b9b      	ldr	r3, [pc, #620]	; (800383c <HAL_RCC_OscConfig+0x770>)
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035da:	2301      	movs	r3, #1
 80035dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e0:	4b97      	ldr	r3, [pc, #604]	; (8003840 <HAL_RCC_OscConfig+0x774>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d118      	bne.n	800361e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035ec:	4b94      	ldr	r3, [pc, #592]	; (8003840 <HAL_RCC_OscConfig+0x774>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a93      	ldr	r2, [pc, #588]	; (8003840 <HAL_RCC_OscConfig+0x774>)
 80035f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f8:	f7fe fa54 	bl	8001aa4 <HAL_GetTick>
 80035fc:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003600:	f7fe fa50 	bl	8001aa4 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e1b5      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003612:	4b8b      	ldr	r3, [pc, #556]	; (8003840 <HAL_RCC_OscConfig+0x774>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d02c      	beq.n	8003684 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800362a:	4b84      	ldr	r3, [pc, #528]	; (800383c <HAL_RCC_OscConfig+0x770>)
 800362c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003630:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	497f      	ldr	r1, [pc, #508]	; (800383c <HAL_RCC_OscConfig+0x770>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d010      	beq.n	8003672 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003650:	4b7a      	ldr	r3, [pc, #488]	; (800383c <HAL_RCC_OscConfig+0x770>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	4a79      	ldr	r2, [pc, #484]	; (800383c <HAL_RCC_OscConfig+0x770>)
 8003658:	f043 0304 	orr.w	r3, r3, #4
 800365c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003660:	4b76      	ldr	r3, [pc, #472]	; (800383c <HAL_RCC_OscConfig+0x770>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003666:	4a75      	ldr	r2, [pc, #468]	; (800383c <HAL_RCC_OscConfig+0x770>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003670:	e018      	b.n	80036a4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003672:	4b72      	ldr	r3, [pc, #456]	; (800383c <HAL_RCC_OscConfig+0x770>)
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003678:	4a70      	ldr	r2, [pc, #448]	; (800383c <HAL_RCC_OscConfig+0x770>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003682:	e00f      	b.n	80036a4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003684:	4b6d      	ldr	r3, [pc, #436]	; (800383c <HAL_RCC_OscConfig+0x770>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	4a6c      	ldr	r2, [pc, #432]	; (800383c <HAL_RCC_OscConfig+0x770>)
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003694:	4b69      	ldr	r3, [pc, #420]	; (800383c <HAL_RCC_OscConfig+0x770>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369a:	4a68      	ldr	r2, [pc, #416]	; (800383c <HAL_RCC_OscConfig+0x770>)
 800369c:	f023 0304 	bic.w	r3, r3, #4
 80036a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d016      	beq.n	80036da <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ac:	f7fe f9fa 	bl	8001aa4 <HAL_GetTick>
 80036b0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b4:	f7fe f9f6 	bl	8001aa4 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e159      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ca:	4b5c      	ldr	r3, [pc, #368]	; (800383c <HAL_RCC_OscConfig+0x770>)
 80036cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0ed      	beq.n	80036b4 <HAL_RCC_OscConfig+0x5e8>
 80036d8:	e01d      	b.n	8003716 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036da:	f7fe f9e3 	bl	8001aa4 <HAL_GetTick>
 80036de:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036e0:	e00a      	b.n	80036f8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7fe f9df 	bl	8001aa4 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e142      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036f8:	4b50      	ldr	r3, [pc, #320]	; (800383c <HAL_RCC_OscConfig+0x770>)
 80036fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1ed      	bne.n	80036e2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003706:	4b4d      	ldr	r3, [pc, #308]	; (800383c <HAL_RCC_OscConfig+0x770>)
 8003708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370c:	4a4b      	ldr	r2, [pc, #300]	; (800383c <HAL_RCC_OscConfig+0x770>)
 800370e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800371a:	2b01      	cmp	r3, #1
 800371c:	d105      	bne.n	800372a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371e:	4b47      	ldr	r3, [pc, #284]	; (800383c <HAL_RCC_OscConfig+0x770>)
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	4a46      	ldr	r2, [pc, #280]	; (800383c <HAL_RCC_OscConfig+0x770>)
 8003724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003728:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d03c      	beq.n	80037b0 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	2b00      	cmp	r3, #0
 800373c:	d01c      	beq.n	8003778 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800373e:	4b3f      	ldr	r3, [pc, #252]	; (800383c <HAL_RCC_OscConfig+0x770>)
 8003740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003744:	4a3d      	ldr	r2, [pc, #244]	; (800383c <HAL_RCC_OscConfig+0x770>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374e:	f7fe f9a9 	bl	8001aa4 <HAL_GetTick>
 8003752:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003756:	f7fe f9a5 	bl	8001aa4 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e10a      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003768:	4b34      	ldr	r3, [pc, #208]	; (800383c <HAL_RCC_OscConfig+0x770>)
 800376a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0ef      	beq.n	8003756 <HAL_RCC_OscConfig+0x68a>
 8003776:	e01b      	b.n	80037b0 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003778:	4b30      	ldr	r3, [pc, #192]	; (800383c <HAL_RCC_OscConfig+0x770>)
 800377a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800377e:	4a2f      	ldr	r2, [pc, #188]	; (800383c <HAL_RCC_OscConfig+0x770>)
 8003780:	f023 0301 	bic.w	r3, r3, #1
 8003784:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003788:	f7fe f98c 	bl	8001aa4 <HAL_GetTick>
 800378c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003790:	f7fe f988 	bl	8001aa4 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e0ed      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037a2:	4b26      	ldr	r3, [pc, #152]	; (800383c <HAL_RCC_OscConfig+0x770>)
 80037a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1ef      	bne.n	8003790 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80e1 	beq.w	800397c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	2b02      	cmp	r3, #2
 80037c0:	f040 80b5 	bne.w	800392e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037c4:	4b1d      	ldr	r3, [pc, #116]	; (800383c <HAL_RCC_OscConfig+0x770>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f003 0203 	and.w	r2, r3, #3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d124      	bne.n	8003822 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e2:	3b01      	subs	r3, #1
 80037e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d11b      	bne.n	8003822 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d113      	bne.n	8003822 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003804:	085b      	lsrs	r3, r3, #1
 8003806:	3b01      	subs	r3, #1
 8003808:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d109      	bne.n	8003822 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	085b      	lsrs	r3, r3, #1
 800381a:	3b01      	subs	r3, #1
 800381c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d05f      	beq.n	80038e2 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	2b0c      	cmp	r3, #12
 8003826:	d05a      	beq.n	80038de <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <HAL_RCC_OscConfig+0x770>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a03      	ldr	r2, [pc, #12]	; (800383c <HAL_RCC_OscConfig+0x770>)
 800382e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003832:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003834:	f7fe f936 	bl	8001aa4 <HAL_GetTick>
 8003838:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800383a:	e00c      	b.n	8003856 <HAL_RCC_OscConfig+0x78a>
 800383c:	40021000 	.word	0x40021000
 8003840:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003844:	f7fe f92e 	bl	8001aa4 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e093      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003856:	4b4c      	ldr	r3, [pc, #304]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003862:	4b49      	ldr	r3, [pc, #292]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	4b49      	ldr	r3, [pc, #292]	; (800398c <HAL_RCC_OscConfig+0x8c0>)
 8003868:	4013      	ands	r3, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003872:	3a01      	subs	r2, #1
 8003874:	0112      	lsls	r2, r2, #4
 8003876:	4311      	orrs	r1, r2
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800387c:	0212      	lsls	r2, r2, #8
 800387e:	4311      	orrs	r1, r2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003884:	0852      	lsrs	r2, r2, #1
 8003886:	3a01      	subs	r2, #1
 8003888:	0552      	lsls	r2, r2, #21
 800388a:	4311      	orrs	r1, r2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003890:	0852      	lsrs	r2, r2, #1
 8003892:	3a01      	subs	r2, #1
 8003894:	0652      	lsls	r2, r2, #25
 8003896:	430a      	orrs	r2, r1
 8003898:	493b      	ldr	r1, [pc, #236]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800389e:	4b3a      	ldr	r3, [pc, #232]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a39      	ldr	r2, [pc, #228]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 80038a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038a8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038aa:	4b37      	ldr	r3, [pc, #220]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	4a36      	ldr	r2, [pc, #216]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 80038b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038b4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038b6:	f7fe f8f5 	bl	8001aa4 <HAL_GetTick>
 80038ba:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038be:	f7fe f8f1 	bl	8001aa4 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e056      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d0:	4b2d      	ldr	r3, [pc, #180]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038dc:	e04e      	b.n	800397c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e04d      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e2:	4b29      	ldr	r3, [pc, #164]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d146      	bne.n	800397c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038ee:	4b26      	ldr	r3, [pc, #152]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a25      	ldr	r2, [pc, #148]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 80038f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038f8:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038fa:	4b23      	ldr	r3, [pc, #140]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	4a22      	ldr	r2, [pc, #136]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 8003900:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003904:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003906:	f7fe f8cd 	bl	8001aa4 <HAL_GetTick>
 800390a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390e:	f7fe f8c9 	bl	8001aa4 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e02e      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003920:	4b19      	ldr	r3, [pc, #100]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x842>
 800392c:	e026      	b.n	800397c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	2b0c      	cmp	r3, #12
 8003932:	d021      	beq.n	8003978 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003934:	4b14      	ldr	r3, [pc, #80]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a13      	ldr	r2, [pc, #76]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 800393a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800393e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fe f8b0 	bl	8001aa4 <HAL_GetTick>
 8003944:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003948:	f7fe f8ac 	bl	8001aa4 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e011      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003966:	4b08      	ldr	r3, [pc, #32]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	4a07      	ldr	r2, [pc, #28]	; (8003988 <HAL_RCC_OscConfig+0x8bc>)
 800396c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003970:	f023 0303 	bic.w	r3, r3, #3
 8003974:	60d3      	str	r3, [r2, #12]
 8003976:	e001      	b.n	800397c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3728      	adds	r7, #40	; 0x28
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40021000 	.word	0x40021000
 800398c:	f99f808c 	.word	0xf99f808c

08003990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0e7      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a4:	4b75      	ldr	r3, [pc, #468]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d910      	bls.n	80039d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b72      	ldr	r3, [pc, #456]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 0207 	bic.w	r2, r3, #7
 80039ba:	4970      	ldr	r1, [pc, #448]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b6e      	ldr	r3, [pc, #440]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0cf      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d010      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	4b66      	ldr	r3, [pc, #408]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d908      	bls.n	8003a02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f0:	4b63      	ldr	r3, [pc, #396]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4960      	ldr	r1, [pc, #384]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d04c      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a16:	4b5a      	ldr	r3, [pc, #360]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d121      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0a6      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a2e:	4b54      	ldr	r3, [pc, #336]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d115      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e09a      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a46:	4b4e      	ldr	r3, [pc, #312]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e08e      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a56:	4b4a      	ldr	r3, [pc, #296]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e086      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a66:	4b46      	ldr	r3, [pc, #280]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4943      	ldr	r1, [pc, #268]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a78:	f7fe f814 	bl	8001aa4 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a80:	f7fe f810 	bl	8001aa4 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e06e      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	4b3a      	ldr	r3, [pc, #232]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 020c 	and.w	r2, r3, #12
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d1eb      	bne.n	8003a80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d010      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	4b31      	ldr	r3, [pc, #196]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d208      	bcs.n	8003ad6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac4:	4b2e      	ldr	r3, [pc, #184]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	492b      	ldr	r1, [pc, #172]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad6:	4b29      	ldr	r3, [pc, #164]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d210      	bcs.n	8003b06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae4:	4b25      	ldr	r3, [pc, #148]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 0207 	bic.w	r2, r3, #7
 8003aec:	4923      	ldr	r1, [pc, #140]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af4:	4b21      	ldr	r3, [pc, #132]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e036      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b12:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	4918      	ldr	r1, [pc, #96]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d009      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b30:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4910      	ldr	r1, [pc, #64]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b44:	f000 f824 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	490b      	ldr	r1, [pc, #44]	; (8003b84 <HAL_RCC_ClockConfig+0x1f4>)
 8003b56:	5ccb      	ldrb	r3, [r1, r3]
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b60:	4a09      	ldr	r2, [pc, #36]	; (8003b88 <HAL_RCC_ClockConfig+0x1f8>)
 8003b62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <HAL_RCC_ClockConfig+0x1fc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fd ff4b 	bl	8001a04 <HAL_InitTick>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b72:	7afb      	ldrb	r3, [r7, #11]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40022000 	.word	0x40022000
 8003b80:	40021000 	.word	0x40021000
 8003b84:	080081a0 	.word	0x080081a0
 8003b88:	20000000 	.word	0x20000000
 8003b8c:	20000004 	.word	0x20000004

08003b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	; 0x24
 8003b94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b9e:	4b3e      	ldr	r3, [pc, #248]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ba8:	4b3b      	ldr	r3, [pc, #236]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d121      	bne.n	8003c02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d11e      	bne.n	8003c02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bc4:	4b34      	ldr	r3, [pc, #208]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bd0:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd6:	0a1b      	lsrs	r3, r3, #8
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	e005      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003be0:	4b2d      	ldr	r3, [pc, #180]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003bec:	4a2b      	ldr	r2, [pc, #172]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10d      	bne.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c00:	e00a      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d102      	bne.n	8003c0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e004      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c14:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	d134      	bne.n	8003c88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c1e:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d003      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0xac>
 8003c34:	e005      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c36:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c38:	617b      	str	r3, [r7, #20]
      break;
 8003c3a:	e005      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c3c:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c3e:	617b      	str	r3, [r7, #20]
      break;
 8003c40:	e002      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	617b      	str	r3, [r7, #20]
      break;
 8003c46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c48:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	3301      	adds	r3, #1
 8003c54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	fb03 f202 	mul.w	r2, r3, r2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	0e5b      	lsrs	r3, r3, #25
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	3301      	adds	r3, #1
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c88:	69bb      	ldr	r3, [r7, #24]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3724      	adds	r7, #36	; 0x24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	080081b8 	.word	0x080081b8
 8003ca0:	00f42400 	.word	0x00f42400
 8003ca4:	007a1200 	.word	0x007a1200

08003ca8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cac:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000000 	.word	0x20000000

08003cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cc4:	f7ff fff0 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4904      	ldr	r1, [pc, #16]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	080081b0 	.word	0x080081b0

08003cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cf0:	f7ff ffda 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	0adb      	lsrs	r3, r3, #11
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4904      	ldr	r1, [pc, #16]	; (8003d14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000
 8003d14:	080081b0 	.word	0x080081b0

08003d18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d24:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d30:	f7ff f968 	bl	8003004 <HAL_PWREx_GetVoltageRange>
 8003d34:	6178      	str	r0, [r7, #20]
 8003d36:	e014      	b.n	8003d62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d38:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3c:	4a24      	ldr	r2, [pc, #144]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d42:	6593      	str	r3, [r2, #88]	; 0x58
 8003d44:	4b22      	ldr	r3, [pc, #136]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d50:	f7ff f958 	bl	8003004 <HAL_PWREx_GetVoltageRange>
 8003d54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d56:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5a:	4a1d      	ldr	r2, [pc, #116]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d68:	d10b      	bne.n	8003d82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b80      	cmp	r3, #128	; 0x80
 8003d6e:	d919      	bls.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2ba0      	cmp	r3, #160	; 0xa0
 8003d74:	d902      	bls.n	8003d7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d76:	2302      	movs	r3, #2
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	e013      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	e010      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b80      	cmp	r3, #128	; 0x80
 8003d86:	d902      	bls.n	8003d8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d88:	2303      	movs	r3, #3
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	e00a      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b80      	cmp	r3, #128	; 0x80
 8003d92:	d102      	bne.n	8003d9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d94:	2302      	movs	r3, #2
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	e004      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b70      	cmp	r3, #112	; 0x70
 8003d9e:	d101      	bne.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003da0:	2301      	movs	r3, #1
 8003da2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f023 0207 	bic.w	r2, r3, #7
 8003dac:	4909      	ldr	r1, [pc, #36]	; (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003db4:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d001      	beq.n	8003dc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40022000 	.word	0x40022000

08003dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003de0:	2300      	movs	r3, #0
 8003de2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003de4:	2300      	movs	r3, #0
 8003de6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 809e 	beq.w	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df6:	2300      	movs	r3, #0
 8003df8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dfa:	4b46      	ldr	r3, [pc, #280]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00d      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e10:	4b40      	ldr	r3, [pc, #256]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e14:	4a3f      	ldr	r2, [pc, #252]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e1c:	4b3d      	ldr	r3, [pc, #244]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e2c:	4b3a      	ldr	r3, [pc, #232]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a39      	ldr	r2, [pc, #228]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e38:	f7fd fe34 	bl	8001aa4 <HAL_GetTick>
 8003e3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e3e:	e009      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e40:	f7fd fe30 	bl	8001aa4 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d902      	bls.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	74fb      	strb	r3, [r7, #19]
        break;
 8003e52:	e005      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e54:	4b30      	ldr	r3, [pc, #192]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0ef      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003e60:	7cfb      	ldrb	r3, [r7, #19]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d15a      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e66:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01e      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d019      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e82:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e8e:	4b21      	ldr	r3, [pc, #132]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e94:	4a1f      	ldr	r2, [pc, #124]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e9e:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea4:	4a1b      	ldr	r2, [pc, #108]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003eae:	4a19      	ldr	r2, [pc, #100]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d016      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fd fdf0 	bl	8001aa4 <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec6:	e00b      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec8:	f7fd fdec 	bl	8001aa4 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d902      	bls.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	74fb      	strb	r3, [r7, #19]
            break;
 8003ede:	e006      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0ec      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003eee:	7cfb      	ldrb	r3, [r7, #19]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10b      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ef4:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	4904      	ldr	r1, [pc, #16]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f0a:	e009      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f0c:	7cfb      	ldrb	r3, [r7, #19]
 8003f0e:	74bb      	strb	r3, [r7, #18]
 8003f10:	e006      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003f12:	bf00      	nop
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1c:	7cfb      	ldrb	r3, [r7, #19]
 8003f1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f20:	7c7b      	ldrb	r3, [r7, #17]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d105      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f26:	4b6e      	ldr	r3, [pc, #440]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	4a6d      	ldr	r2, [pc, #436]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f3e:	4b68      	ldr	r3, [pc, #416]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	f023 0203 	bic.w	r2, r3, #3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	4964      	ldr	r1, [pc, #400]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f60:	4b5f      	ldr	r3, [pc, #380]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f66:	f023 020c 	bic.w	r2, r3, #12
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	495c      	ldr	r1, [pc, #368]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f82:	4b57      	ldr	r3, [pc, #348]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4953      	ldr	r1, [pc, #332]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fa4:	4b4e      	ldr	r3, [pc, #312]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003faa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	494b      	ldr	r1, [pc, #300]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fc6:	4b46      	ldr	r3, [pc, #280]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	4942      	ldr	r1, [pc, #264]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fe8:	4b3d      	ldr	r3, [pc, #244]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	493a      	ldr	r1, [pc, #232]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800400a:	4b35      	ldr	r3, [pc, #212]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	4931      	ldr	r1, [pc, #196]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800402c:	4b2c      	ldr	r3, [pc, #176]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004032:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	4929      	ldr	r1, [pc, #164]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800404e:	4b24      	ldr	r3, [pc, #144]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004054:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	4920      	ldr	r1, [pc, #128]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d015      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004070:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	4918      	ldr	r1, [pc, #96]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800408e:	d105      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004090:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	4a12      	ldr	r2, [pc, #72]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800409a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d015      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040a8:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	490a      	ldr	r1, [pc, #40]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040c6:	d105      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4a04      	ldr	r2, [pc, #16]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40021000 	.word	0x40021000

080040e4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a04      	ldr	r2, [pc, #16]	; (8004100 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040ee:	f043 0304 	orr.w	r3, r3, #4
 80040f2:	6013      	str	r3, [r2, #0]
}
 80040f4:	bf00      	nop
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40021000 	.word	0x40021000

08004104 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08a      	sub	sp, #40	; 0x28
 8004108:	af02      	add	r7, sp, #8
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	4613      	mov	r3, r2
 8004112:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004118:	2b20      	cmp	r3, #32
 800411a:	d178      	bne.n	800420e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_UART_Transmit+0x24>
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e071      	b.n	8004210 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2221      	movs	r2, #33	; 0x21
 8004138:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800413a:	f7fd fcb3 	bl	8001aa4 <HAL_GetTick>
 800413e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	88fa      	ldrh	r2, [r7, #6]
 8004144:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	88fa      	ldrh	r2, [r7, #6]
 800414c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004158:	d108      	bne.n	800416c <HAL_UART_Transmit+0x68>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d104      	bne.n	800416c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	61bb      	str	r3, [r7, #24]
 800416a:	e003      	b.n	8004174 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004170:	2300      	movs	r3, #0
 8004172:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004174:	e030      	b.n	80041d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2200      	movs	r2, #0
 800417e:	2180      	movs	r1, #128	; 0x80
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 ff43 	bl	800500c <UART_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d004      	beq.n	8004196 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e03c      	b.n	8004210 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10b      	bne.n	80041b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	881a      	ldrh	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a8:	b292      	uxth	r2, r2
 80041aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	3302      	adds	r3, #2
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	e008      	b.n	80041c6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	781a      	ldrb	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	b292      	uxth	r2, r2
 80041be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	3301      	adds	r3, #1
 80041c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1c8      	bne.n	8004176 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2200      	movs	r2, #0
 80041ec:	2140      	movs	r1, #64	; 0x40
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 ff0c 	bl	800500c <UART_WaitOnFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d004      	beq.n	8004204 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2220      	movs	r2, #32
 80041fe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e005      	b.n	8004210 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	e000      	b.n	8004210 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800420e:	2302      	movs	r3, #2
  }
}
 8004210:	4618      	mov	r0, r3
 8004212:	3720      	adds	r7, #32
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	; 0x28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800422c:	2b20      	cmp	r3, #32
 800422e:	d137      	bne.n	80042a0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <HAL_UART_Receive_IT+0x24>
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e030      	b.n	80042a2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a18      	ldr	r2, [pc, #96]	; (80042ac <HAL_UART_Receive_IT+0x94>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d01f      	beq.n	8004290 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d018      	beq.n	8004290 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	613b      	str	r3, [r7, #16]
   return(result);
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	623b      	str	r3, [r7, #32]
 800427e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	69f9      	ldr	r1, [r7, #28]
 8004282:	6a3a      	ldr	r2, [r7, #32]
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	61bb      	str	r3, [r7, #24]
   return(result);
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e6      	bne.n	800425e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004290:	88fb      	ldrh	r3, [r7, #6]
 8004292:	461a      	mov	r2, r3
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 ff20 	bl	80050dc <UART_Start_Receive_IT>
 800429c:	4603      	mov	r3, r0
 800429e:	e000      	b.n	80042a2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042a0:	2302      	movs	r3, #2
  }
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3728      	adds	r7, #40	; 0x28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40008000 	.word	0x40008000

080042b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b0ba      	sub	sp, #232	; 0xe8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80042da:	f640 030f 	movw	r3, #2063	; 0x80f
 80042de:	4013      	ands	r3, r2
 80042e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80042e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d115      	bne.n	8004318 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80042ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00f      	beq.n	8004318 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d009      	beq.n	8004318 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 82ae 	beq.w	800486a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	4798      	blx	r3
      }
      return;
 8004316:	e2a8      	b.n	800486a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 8117 	beq.w	8004550 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800432e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004332:	4b85      	ldr	r3, [pc, #532]	; (8004548 <HAL_UART_IRQHandler+0x298>)
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 810a 	beq.w	8004550 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800433c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d011      	beq.n	800436c <HAL_UART_IRQHandler+0xbc>
 8004348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00b      	beq.n	800436c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2201      	movs	r2, #1
 800435a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004362:	f043 0201 	orr.w	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800436c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d011      	beq.n	800439c <HAL_UART_IRQHandler+0xec>
 8004378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00b      	beq.n	800439c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2202      	movs	r2, #2
 800438a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004392:	f043 0204 	orr.w	r2, r3, #4
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800439c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d011      	beq.n	80043cc <HAL_UART_IRQHandler+0x11c>
 80043a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00b      	beq.n	80043cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2204      	movs	r2, #4
 80043ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c2:	f043 0202 	orr.w	r2, r3, #2
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d017      	beq.n	8004408 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80043e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00b      	beq.n	8004408 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2208      	movs	r2, #8
 80043f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043fe:	f043 0208 	orr.w	r2, r3, #8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800440c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004410:	2b00      	cmp	r3, #0
 8004412:	d012      	beq.n	800443a <HAL_UART_IRQHandler+0x18a>
 8004414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004418:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00c      	beq.n	800443a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004428:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004430:	f043 0220 	orr.w	r2, r3, #32
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8214 	beq.w	800486e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00d      	beq.n	800446e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004474:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004482:	2b40      	cmp	r3, #64	; 0x40
 8004484:	d005      	beq.n	8004492 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800448a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800448e:	2b00      	cmp	r3, #0
 8004490:	d04f      	beq.n	8004532 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fee8 	bl	8005268 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a2:	2b40      	cmp	r3, #64	; 0x40
 80044a4:	d141      	bne.n	800452a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3308      	adds	r3, #8
 80044ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3308      	adds	r3, #8
 80044ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1d9      	bne.n	80044a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d013      	beq.n	8004522 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044fe:	4a13      	ldr	r2, [pc, #76]	; (800454c <HAL_UART_IRQHandler+0x29c>)
 8004500:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004506:	4618      	mov	r0, r3
 8004508:	f7fd fc4b 	bl	8001da2 <HAL_DMA_Abort_IT>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d017      	beq.n	8004542 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800451c:	4610      	mov	r0, r2
 800451e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004520:	e00f      	b.n	8004542 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f9b8 	bl	8004898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004528:	e00b      	b.n	8004542 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9b4 	bl	8004898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004530:	e007      	b.n	8004542 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f9b0 	bl	8004898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004540:	e195      	b.n	800486e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004542:	bf00      	nop
    return;
 8004544:	e193      	b.n	800486e <HAL_UART_IRQHandler+0x5be>
 8004546:	bf00      	nop
 8004548:	04000120 	.word	0x04000120
 800454c:	08005331 	.word	0x08005331

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004554:	2b01      	cmp	r3, #1
 8004556:	f040 814e 	bne.w	80047f6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800455a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455e:	f003 0310 	and.w	r3, r3, #16
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 8147 	beq.w	80047f6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8140 	beq.w	80047f6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2210      	movs	r2, #16
 800457c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004588:	2b40      	cmp	r3, #64	; 0x40
 800458a:	f040 80b8 	bne.w	80046fe <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800459a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 8167 	beq.w	8004872 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80045aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045ae:	429a      	cmp	r2, r3
 80045b0:	f080 815f 	bcs.w	8004872 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f040 8086 	bne.w	80046dc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80045fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80045fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004606:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1da      	bne.n	80045d0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3308      	adds	r3, #8
 8004620:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800462a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3308      	adds	r3, #8
 800463a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800463e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004642:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004646:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e1      	bne.n	800461a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3308      	adds	r3, #8
 800465c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800466c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3308      	adds	r3, #8
 8004676:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800467a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800467c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004680:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e3      	bne.n	8004656 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ac:	f023 0310 	bic.w	r3, r3, #16
 80046b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046be:	65bb      	str	r3, [r7, #88]	; 0x58
 80046c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046c6:	e841 2300 	strex	r3, r2, [r1]
 80046ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1e4      	bne.n	800469c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fd fb25 	bl	8001d26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	4619      	mov	r1, r3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f8d8 	bl	80048ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046fc:	e0b9      	b.n	8004872 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800470a:	b29b      	uxth	r3, r3
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 80ab 	beq.w	8004876 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004720:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 80a6 	beq.w	8004876 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800473e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800474c:	647b      	str	r3, [r7, #68]	; 0x44
 800474e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004750:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004754:	e841 2300 	strex	r3, r2, [r1]
 8004758:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800475a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e4      	bne.n	800472a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3308      	adds	r3, #8
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	623b      	str	r3, [r7, #32]
   return(result);
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	f023 0301 	bic.w	r3, r3, #1
 8004776:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3308      	adds	r3, #8
 8004780:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004784:	633a      	str	r2, [r7, #48]	; 0x30
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800478a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e3      	bne.n	8004760 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f023 0310 	bic.w	r3, r3, #16
 80047c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	69b9      	ldr	r1, [r7, #24]
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	617b      	str	r3, [r7, #20]
   return(result);
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e4      	bne.n	80047ac <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2202      	movs	r2, #2
 80047e6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047ec:	4619      	mov	r1, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f85c 	bl	80048ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047f4:	e03f      	b.n	8004876 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00e      	beq.n	8004820 <HAL_UART_IRQHandler+0x570>
 8004802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004816:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 ffec 	bl	80057f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800481e:	e02d      	b.n	800487c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00e      	beq.n	800484a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800482c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004834:	2b00      	cmp	r3, #0
 8004836:	d008      	beq.n	800484a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01c      	beq.n	800487a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	4798      	blx	r3
    }
    return;
 8004848:	e017      	b.n	800487a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800484a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800484e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d012      	beq.n	800487c <HAL_UART_IRQHandler+0x5cc>
 8004856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800485a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00c      	beq.n	800487c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fd7a 	bl	800535c <UART_EndTransmit_IT>
    return;
 8004868:	e008      	b.n	800487c <HAL_UART_IRQHandler+0x5cc>
      return;
 800486a:	bf00      	nop
 800486c:	e006      	b.n	800487c <HAL_UART_IRQHandler+0x5cc>
    return;
 800486e:	bf00      	nop
 8004870:	e004      	b.n	800487c <HAL_UART_IRQHandler+0x5cc>
      return;
 8004872:	bf00      	nop
 8004874:	e002      	b.n	800487c <HAL_UART_IRQHandler+0x5cc>
      return;
 8004876:	bf00      	nop
 8004878:	e000      	b.n	800487c <HAL_UART_IRQHandler+0x5cc>
    return;
 800487a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800487c:	37e8      	adds	r7, #232	; 0xe8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop

08004884 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c8:	b08a      	sub	sp, #40	; 0x28
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	431a      	orrs	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	4b9e      	ldr	r3, [pc, #632]	; (8004b6c <UART_SetConfig+0x2a8>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048fc:	430b      	orrs	r3, r1
 80048fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a93      	ldr	r2, [pc, #588]	; (8004b70 <UART_SetConfig+0x2ac>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d004      	beq.n	8004930 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492c:	4313      	orrs	r3, r2
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004940:	430a      	orrs	r2, r1
 8004942:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a8a      	ldr	r2, [pc, #552]	; (8004b74 <UART_SetConfig+0x2b0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d126      	bne.n	800499c <UART_SetConfig+0xd8>
 800494e:	4b8a      	ldr	r3, [pc, #552]	; (8004b78 <UART_SetConfig+0x2b4>)
 8004950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004954:	f003 0303 	and.w	r3, r3, #3
 8004958:	2b03      	cmp	r3, #3
 800495a:	d81b      	bhi.n	8004994 <UART_SetConfig+0xd0>
 800495c:	a201      	add	r2, pc, #4	; (adr r2, 8004964 <UART_SetConfig+0xa0>)
 800495e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004962:	bf00      	nop
 8004964:	08004975 	.word	0x08004975
 8004968:	08004985 	.word	0x08004985
 800496c:	0800497d 	.word	0x0800497d
 8004970:	0800498d 	.word	0x0800498d
 8004974:	2301      	movs	r3, #1
 8004976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497a:	e0ab      	b.n	8004ad4 <UART_SetConfig+0x210>
 800497c:	2302      	movs	r3, #2
 800497e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004982:	e0a7      	b.n	8004ad4 <UART_SetConfig+0x210>
 8004984:	2304      	movs	r3, #4
 8004986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498a:	e0a3      	b.n	8004ad4 <UART_SetConfig+0x210>
 800498c:	2308      	movs	r3, #8
 800498e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004992:	e09f      	b.n	8004ad4 <UART_SetConfig+0x210>
 8004994:	2310      	movs	r3, #16
 8004996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800499a:	e09b      	b.n	8004ad4 <UART_SetConfig+0x210>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a76      	ldr	r2, [pc, #472]	; (8004b7c <UART_SetConfig+0x2b8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d138      	bne.n	8004a18 <UART_SetConfig+0x154>
 80049a6:	4b74      	ldr	r3, [pc, #464]	; (8004b78 <UART_SetConfig+0x2b4>)
 80049a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ac:	f003 030c 	and.w	r3, r3, #12
 80049b0:	2b0c      	cmp	r3, #12
 80049b2:	d82d      	bhi.n	8004a10 <UART_SetConfig+0x14c>
 80049b4:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <UART_SetConfig+0xf8>)
 80049b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ba:	bf00      	nop
 80049bc:	080049f1 	.word	0x080049f1
 80049c0:	08004a11 	.word	0x08004a11
 80049c4:	08004a11 	.word	0x08004a11
 80049c8:	08004a11 	.word	0x08004a11
 80049cc:	08004a01 	.word	0x08004a01
 80049d0:	08004a11 	.word	0x08004a11
 80049d4:	08004a11 	.word	0x08004a11
 80049d8:	08004a11 	.word	0x08004a11
 80049dc:	080049f9 	.word	0x080049f9
 80049e0:	08004a11 	.word	0x08004a11
 80049e4:	08004a11 	.word	0x08004a11
 80049e8:	08004a11 	.word	0x08004a11
 80049ec:	08004a09 	.word	0x08004a09
 80049f0:	2300      	movs	r3, #0
 80049f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049f6:	e06d      	b.n	8004ad4 <UART_SetConfig+0x210>
 80049f8:	2302      	movs	r3, #2
 80049fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049fe:	e069      	b.n	8004ad4 <UART_SetConfig+0x210>
 8004a00:	2304      	movs	r3, #4
 8004a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a06:	e065      	b.n	8004ad4 <UART_SetConfig+0x210>
 8004a08:	2308      	movs	r3, #8
 8004a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0e:	e061      	b.n	8004ad4 <UART_SetConfig+0x210>
 8004a10:	2310      	movs	r3, #16
 8004a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a16:	e05d      	b.n	8004ad4 <UART_SetConfig+0x210>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a58      	ldr	r2, [pc, #352]	; (8004b80 <UART_SetConfig+0x2bc>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d125      	bne.n	8004a6e <UART_SetConfig+0x1aa>
 8004a22:	4b55      	ldr	r3, [pc, #340]	; (8004b78 <UART_SetConfig+0x2b4>)
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a2c:	2b30      	cmp	r3, #48	; 0x30
 8004a2e:	d016      	beq.n	8004a5e <UART_SetConfig+0x19a>
 8004a30:	2b30      	cmp	r3, #48	; 0x30
 8004a32:	d818      	bhi.n	8004a66 <UART_SetConfig+0x1a2>
 8004a34:	2b20      	cmp	r3, #32
 8004a36:	d00a      	beq.n	8004a4e <UART_SetConfig+0x18a>
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	d814      	bhi.n	8004a66 <UART_SetConfig+0x1a2>
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <UART_SetConfig+0x182>
 8004a40:	2b10      	cmp	r3, #16
 8004a42:	d008      	beq.n	8004a56 <UART_SetConfig+0x192>
 8004a44:	e00f      	b.n	8004a66 <UART_SetConfig+0x1a2>
 8004a46:	2300      	movs	r3, #0
 8004a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a4c:	e042      	b.n	8004ad4 <UART_SetConfig+0x210>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a54:	e03e      	b.n	8004ad4 <UART_SetConfig+0x210>
 8004a56:	2304      	movs	r3, #4
 8004a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a5c:	e03a      	b.n	8004ad4 <UART_SetConfig+0x210>
 8004a5e:	2308      	movs	r3, #8
 8004a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a64:	e036      	b.n	8004ad4 <UART_SetConfig+0x210>
 8004a66:	2310      	movs	r3, #16
 8004a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a6c:	e032      	b.n	8004ad4 <UART_SetConfig+0x210>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a3f      	ldr	r2, [pc, #252]	; (8004b70 <UART_SetConfig+0x2ac>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d12a      	bne.n	8004ace <UART_SetConfig+0x20a>
 8004a78:	4b3f      	ldr	r3, [pc, #252]	; (8004b78 <UART_SetConfig+0x2b4>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a86:	d01a      	beq.n	8004abe <UART_SetConfig+0x1fa>
 8004a88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a8c:	d81b      	bhi.n	8004ac6 <UART_SetConfig+0x202>
 8004a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a92:	d00c      	beq.n	8004aae <UART_SetConfig+0x1ea>
 8004a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a98:	d815      	bhi.n	8004ac6 <UART_SetConfig+0x202>
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <UART_SetConfig+0x1e2>
 8004a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa2:	d008      	beq.n	8004ab6 <UART_SetConfig+0x1f2>
 8004aa4:	e00f      	b.n	8004ac6 <UART_SetConfig+0x202>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aac:	e012      	b.n	8004ad4 <UART_SetConfig+0x210>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab4:	e00e      	b.n	8004ad4 <UART_SetConfig+0x210>
 8004ab6:	2304      	movs	r3, #4
 8004ab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004abc:	e00a      	b.n	8004ad4 <UART_SetConfig+0x210>
 8004abe:	2308      	movs	r3, #8
 8004ac0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac4:	e006      	b.n	8004ad4 <UART_SetConfig+0x210>
 8004ac6:	2310      	movs	r3, #16
 8004ac8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004acc:	e002      	b.n	8004ad4 <UART_SetConfig+0x210>
 8004ace:	2310      	movs	r3, #16
 8004ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a25      	ldr	r2, [pc, #148]	; (8004b70 <UART_SetConfig+0x2ac>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	f040 808a 	bne.w	8004bf4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ae0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d824      	bhi.n	8004b32 <UART_SetConfig+0x26e>
 8004ae8:	a201      	add	r2, pc, #4	; (adr r2, 8004af0 <UART_SetConfig+0x22c>)
 8004aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aee:	bf00      	nop
 8004af0:	08004b15 	.word	0x08004b15
 8004af4:	08004b33 	.word	0x08004b33
 8004af8:	08004b1d 	.word	0x08004b1d
 8004afc:	08004b33 	.word	0x08004b33
 8004b00:	08004b23 	.word	0x08004b23
 8004b04:	08004b33 	.word	0x08004b33
 8004b08:	08004b33 	.word	0x08004b33
 8004b0c:	08004b33 	.word	0x08004b33
 8004b10:	08004b2b 	.word	0x08004b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b14:	f7ff f8d4 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8004b18:	61f8      	str	r0, [r7, #28]
        break;
 8004b1a:	e010      	b.n	8004b3e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b1c:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <UART_SetConfig+0x2c0>)
 8004b1e:	61fb      	str	r3, [r7, #28]
        break;
 8004b20:	e00d      	b.n	8004b3e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b22:	f7ff f835 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8004b26:	61f8      	str	r0, [r7, #28]
        break;
 8004b28:	e009      	b.n	8004b3e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2e:	61fb      	str	r3, [r7, #28]
        break;
 8004b30:	e005      	b.n	8004b3e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8109 	beq.w	8004d58 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	4413      	add	r3, r2
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d305      	bcc.n	8004b62 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d912      	bls.n	8004b88 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b68:	e0f6      	b.n	8004d58 <UART_SetConfig+0x494>
 8004b6a:	bf00      	nop
 8004b6c:	efff69f3 	.word	0xefff69f3
 8004b70:	40008000 	.word	0x40008000
 8004b74:	40013800 	.word	0x40013800
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	40004400 	.word	0x40004400
 8004b80:	40004800 	.word	0x40004800
 8004b84:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	461c      	mov	r4, r3
 8004b8e:	4615      	mov	r5, r2
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	022b      	lsls	r3, r5, #8
 8004b9a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b9e:	0222      	lsls	r2, r4, #8
 8004ba0:	68f9      	ldr	r1, [r7, #12]
 8004ba2:	6849      	ldr	r1, [r1, #4]
 8004ba4:	0849      	lsrs	r1, r1, #1
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	4688      	mov	r8, r1
 8004baa:	4681      	mov	r9, r0
 8004bac:	eb12 0a08 	adds.w	sl, r2, r8
 8004bb0:	eb43 0b09 	adc.w	fp, r3, r9
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bc2:	4650      	mov	r0, sl
 8004bc4:	4659      	mov	r1, fp
 8004bc6:	f7fc f83f 	bl	8000c48 <__aeabi_uldivmod>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4613      	mov	r3, r2
 8004bd0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bd8:	d308      	bcc.n	8004bec <UART_SetConfig+0x328>
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be0:	d204      	bcs.n	8004bec <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	60da      	str	r2, [r3, #12]
 8004bea:	e0b5      	b.n	8004d58 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bf2:	e0b1      	b.n	8004d58 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bfc:	d15d      	bne.n	8004cba <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004bfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d827      	bhi.n	8004c56 <UART_SetConfig+0x392>
 8004c06:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <UART_SetConfig+0x348>)
 8004c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0c:	08004c31 	.word	0x08004c31
 8004c10:	08004c39 	.word	0x08004c39
 8004c14:	08004c41 	.word	0x08004c41
 8004c18:	08004c57 	.word	0x08004c57
 8004c1c:	08004c47 	.word	0x08004c47
 8004c20:	08004c57 	.word	0x08004c57
 8004c24:	08004c57 	.word	0x08004c57
 8004c28:	08004c57 	.word	0x08004c57
 8004c2c:	08004c4f 	.word	0x08004c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c30:	f7ff f846 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8004c34:	61f8      	str	r0, [r7, #28]
        break;
 8004c36:	e014      	b.n	8004c62 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c38:	f7ff f858 	bl	8003cec <HAL_RCC_GetPCLK2Freq>
 8004c3c:	61f8      	str	r0, [r7, #28]
        break;
 8004c3e:	e010      	b.n	8004c62 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c40:	4b4c      	ldr	r3, [pc, #304]	; (8004d74 <UART_SetConfig+0x4b0>)
 8004c42:	61fb      	str	r3, [r7, #28]
        break;
 8004c44:	e00d      	b.n	8004c62 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c46:	f7fe ffa3 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8004c4a:	61f8      	str	r0, [r7, #28]
        break;
 8004c4c:	e009      	b.n	8004c62 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c52:	61fb      	str	r3, [r7, #28]
        break;
 8004c54:	e005      	b.n	8004c62 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d077      	beq.n	8004d58 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	005a      	lsls	r2, r3, #1
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	441a      	add	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b0f      	cmp	r3, #15
 8004c82:	d916      	bls.n	8004cb2 <UART_SetConfig+0x3ee>
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c8a:	d212      	bcs.n	8004cb2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f023 030f 	bic.w	r3, r3, #15
 8004c94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	085b      	lsrs	r3, r3, #1
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	8afb      	ldrh	r3, [r7, #22]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	8afa      	ldrh	r2, [r7, #22]
 8004cae:	60da      	str	r2, [r3, #12]
 8004cb0:	e052      	b.n	8004d58 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004cb8:	e04e      	b.n	8004d58 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d827      	bhi.n	8004d12 <UART_SetConfig+0x44e>
 8004cc2:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <UART_SetConfig+0x404>)
 8004cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc8:	08004ced 	.word	0x08004ced
 8004ccc:	08004cf5 	.word	0x08004cf5
 8004cd0:	08004cfd 	.word	0x08004cfd
 8004cd4:	08004d13 	.word	0x08004d13
 8004cd8:	08004d03 	.word	0x08004d03
 8004cdc:	08004d13 	.word	0x08004d13
 8004ce0:	08004d13 	.word	0x08004d13
 8004ce4:	08004d13 	.word	0x08004d13
 8004ce8:	08004d0b 	.word	0x08004d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cec:	f7fe ffe8 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8004cf0:	61f8      	str	r0, [r7, #28]
        break;
 8004cf2:	e014      	b.n	8004d1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cf4:	f7fe fffa 	bl	8003cec <HAL_RCC_GetPCLK2Freq>
 8004cf8:	61f8      	str	r0, [r7, #28]
        break;
 8004cfa:	e010      	b.n	8004d1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cfc:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <UART_SetConfig+0x4b0>)
 8004cfe:	61fb      	str	r3, [r7, #28]
        break;
 8004d00:	e00d      	b.n	8004d1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d02:	f7fe ff45 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8004d06:	61f8      	str	r0, [r7, #28]
        break;
 8004d08:	e009      	b.n	8004d1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d0e:	61fb      	str	r3, [r7, #28]
        break;
 8004d10:	e005      	b.n	8004d1e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d1c:	bf00      	nop
    }

    if (pclk != 0U)
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d019      	beq.n	8004d58 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	085a      	lsrs	r2, r3, #1
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	441a      	add	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	2b0f      	cmp	r3, #15
 8004d3c:	d909      	bls.n	8004d52 <UART_SetConfig+0x48e>
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d44:	d205      	bcs.n	8004d52 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60da      	str	r2, [r3, #12]
 8004d50:	e002      	b.n	8004d58 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3728      	adds	r7, #40	; 0x28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d72:	bf00      	nop
 8004d74:	00f42400 	.word	0x00f42400

08004d78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	f003 0310 	and.w	r3, r3, #16
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01a      	beq.n	8004e8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e76:	d10a      	bne.n	8004e8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00a      	beq.n	8004eb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	605a      	str	r2, [r3, #4]
  }
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b098      	sub	sp, #96	; 0x60
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ecc:	f7fc fdea 	bl	8001aa4 <HAL_GetTick>
 8004ed0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d12e      	bne.n	8004f3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f88c 	bl	800500c <UART_WaitOnFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d021      	beq.n	8004f3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f02:	e853 3f00 	ldrex	r3, [r3]
 8004f06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f0e:	653b      	str	r3, [r7, #80]	; 0x50
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f18:	647b      	str	r3, [r7, #68]	; 0x44
 8004f1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f20:	e841 2300 	strex	r3, r2, [r1]
 8004f24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e6      	bne.n	8004efa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e062      	b.n	8005004 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d149      	bne.n	8004fe0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f54:	2200      	movs	r2, #0
 8004f56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f856 	bl	800500c <UART_WaitOnFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d03c      	beq.n	8004fe0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	623b      	str	r3, [r7, #32]
   return(result);
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f84:	633b      	str	r3, [r7, #48]	; 0x30
 8004f86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e6      	bne.n	8004f66 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3308      	adds	r3, #8
 8004f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	e853 3f00 	ldrex	r3, [r3]
 8004fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0301 	bic.w	r3, r3, #1
 8004fae:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3308      	adds	r3, #8
 8004fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fb8:	61fa      	str	r2, [r7, #28]
 8004fba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbc:	69b9      	ldr	r1, [r7, #24]
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	e841 2300 	strex	r3, r2, [r1]
 8004fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e5      	bne.n	8004f98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e011      	b.n	8005004 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3758      	adds	r7, #88	; 0x58
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	4613      	mov	r3, r2
 800501a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800501c:	e049      	b.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005024:	d045      	beq.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005026:	f7fc fd3d 	bl	8001aa4 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	429a      	cmp	r2, r3
 8005034:	d302      	bcc.n	800503c <UART_WaitOnFlagUntilTimeout+0x30>
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e048      	b.n	80050d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	2b00      	cmp	r3, #0
 800504c:	d031      	beq.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b08      	cmp	r3, #8
 800505a:	d110      	bne.n	800507e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2208      	movs	r2, #8
 8005062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f8ff 	bl	8005268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2208      	movs	r2, #8
 800506e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e029      	b.n	80050d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800508c:	d111      	bne.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f8e5 	bl	8005268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e00f      	b.n	80050d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69da      	ldr	r2, [r3, #28]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4013      	ands	r3, r2
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	429a      	cmp	r2, r3
 80050c0:	bf0c      	ite	eq
 80050c2:	2301      	moveq	r3, #1
 80050c4:	2300      	movne	r3, #0
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d0a6      	beq.n	800501e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050dc:	b480      	push	{r7}
 80050de:	b097      	sub	sp, #92	; 0x5c
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	4613      	mov	r3, r2
 80050e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	88fa      	ldrh	r2, [r7, #6]
 80050f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	88fa      	ldrh	r2, [r7, #6]
 80050fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510e:	d10e      	bne.n	800512e <UART_Start_Receive_IT+0x52>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d105      	bne.n	8005124 <UART_Start_Receive_IT+0x48>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800511e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005122:	e02d      	b.n	8005180 <UART_Start_Receive_IT+0xa4>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	22ff      	movs	r2, #255	; 0xff
 8005128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800512c:	e028      	b.n	8005180 <UART_Start_Receive_IT+0xa4>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10d      	bne.n	8005152 <UART_Start_Receive_IT+0x76>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d104      	bne.n	8005148 <UART_Start_Receive_IT+0x6c>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	22ff      	movs	r2, #255	; 0xff
 8005142:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005146:	e01b      	b.n	8005180 <UART_Start_Receive_IT+0xa4>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	227f      	movs	r2, #127	; 0x7f
 800514c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005150:	e016      	b.n	8005180 <UART_Start_Receive_IT+0xa4>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800515a:	d10d      	bne.n	8005178 <UART_Start_Receive_IT+0x9c>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <UART_Start_Receive_IT+0x92>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	227f      	movs	r2, #127	; 0x7f
 8005168:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800516c:	e008      	b.n	8005180 <UART_Start_Receive_IT+0xa4>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	223f      	movs	r2, #63	; 0x3f
 8005172:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005176:	e003      	b.n	8005180 <UART_Start_Receive_IT+0xa4>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2222      	movs	r2, #34	; 0x22
 800518c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3308      	adds	r3, #8
 8005196:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800519a:	e853 3f00 	ldrex	r3, [r3]
 800519e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	657b      	str	r3, [r7, #84]	; 0x54
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3308      	adds	r3, #8
 80051ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051b0:	64ba      	str	r2, [r7, #72]	; 0x48
 80051b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e5      	bne.n	8005190 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051cc:	d107      	bne.n	80051de <UART_Start_Receive_IT+0x102>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d103      	bne.n	80051de <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4a21      	ldr	r2, [pc, #132]	; (8005260 <UART_Start_Receive_IT+0x184>)
 80051da:	669a      	str	r2, [r3, #104]	; 0x68
 80051dc:	e002      	b.n	80051e4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4a20      	ldr	r2, [pc, #128]	; (8005264 <UART_Start_Receive_IT+0x188>)
 80051e2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d019      	beq.n	8005220 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005200:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800520a:	637b      	str	r3, [r7, #52]	; 0x34
 800520c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e6      	bne.n	80051ec <UART_Start_Receive_IT+0x110>
 800521e:	e018      	b.n	8005252 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	613b      	str	r3, [r7, #16]
   return(result);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f043 0320 	orr.w	r3, r3, #32
 8005234:	653b      	str	r3, [r7, #80]	; 0x50
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800523e:	623b      	str	r3, [r7, #32]
 8005240:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	69f9      	ldr	r1, [r7, #28]
 8005244:	6a3a      	ldr	r2, [r7, #32]
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	61bb      	str	r3, [r7, #24]
   return(result);
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e6      	bne.n	8005220 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	375c      	adds	r7, #92	; 0x5c
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	0800556d 	.word	0x0800556d
 8005264:	080053b1 	.word	0x080053b1

08005268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005268:	b480      	push	{r7}
 800526a:	b095      	sub	sp, #84	; 0x54
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005284:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	461a      	mov	r2, r3
 800528c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800528e:	643b      	str	r3, [r7, #64]	; 0x40
 8005290:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005296:	e841 2300 	strex	r3, r2, [r1]
 800529a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800529c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e6      	bne.n	8005270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3308      	adds	r3, #8
 80052a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	f023 0301 	bic.w	r3, r3, #1
 80052b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3308      	adds	r3, #8
 80052c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ca:	e841 2300 	strex	r3, r2, [r1]
 80052ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1e5      	bne.n	80052a2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d118      	bne.n	8005310 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f023 0310 	bic.w	r3, r3, #16
 80052f2:	647b      	str	r3, [r7, #68]	; 0x44
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6979      	ldr	r1, [r7, #20]
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	613b      	str	r3, [r7, #16]
   return(result);
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e6      	bne.n	80052de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2220      	movs	r2, #32
 8005314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005324:	bf00      	nop
 8005326:	3754      	adds	r7, #84	; 0x54
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f7ff faa2 	bl	8004898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005354:	bf00      	nop
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	60bb      	str	r3, [r7, #8]
   return(result);
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005378:	61fb      	str	r3, [r7, #28]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	6979      	ldr	r1, [r7, #20]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	613b      	str	r3, [r7, #16]
   return(result);
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e6      	bne.n	8005364 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7ff fa6e 	bl	8004884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053a8:	bf00      	nop
 80053aa:	3720      	adds	r7, #32
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b09c      	sub	sp, #112	; 0x70
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053c8:	2b22      	cmp	r3, #34	; 0x22
 80053ca:	f040 80be 	bne.w	800554a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80053d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80053dc:	b2d9      	uxtb	r1, r3
 80053de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e8:	400a      	ands	r2, r1
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	f040 80a3 	bne.w	800555e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005420:	e853 3f00 	ldrex	r3, [r3]
 8005424:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800542c:	66bb      	str	r3, [r7, #104]	; 0x68
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005436:	65bb      	str	r3, [r7, #88]	; 0x58
 8005438:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800543c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e6      	bne.n	8005418 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3308      	adds	r3, #8
 8005450:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005454:	e853 3f00 	ldrex	r3, [r3]
 8005458:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800545a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545c:	f023 0301 	bic.w	r3, r3, #1
 8005460:	667b      	str	r3, [r7, #100]	; 0x64
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3308      	adds	r3, #8
 8005468:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800546a:	647a      	str	r2, [r7, #68]	; 0x44
 800546c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005470:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005472:	e841 2300 	strex	r3, r2, [r1]
 8005476:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1e5      	bne.n	800544a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2220      	movs	r2, #32
 8005482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a34      	ldr	r2, [pc, #208]	; (8005568 <UART_RxISR_8BIT+0x1b8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d01f      	beq.n	80054dc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d018      	beq.n	80054dc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	623b      	str	r3, [r7, #32]
   return(result);
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054be:	663b      	str	r3, [r7, #96]	; 0x60
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054c8:	633b      	str	r3, [r7, #48]	; 0x30
 80054ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e6      	bne.n	80054aa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d12e      	bne.n	8005542 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0310 	bic.w	r3, r3, #16
 80054fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005508:	61fb      	str	r3, [r7, #28]
 800550a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	69b9      	ldr	r1, [r7, #24]
 800550e:	69fa      	ldr	r2, [r7, #28]
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	617b      	str	r3, [r7, #20]
   return(result);
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e6      	bne.n	80054ea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b10      	cmp	r3, #16
 8005528:	d103      	bne.n	8005532 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2210      	movs	r2, #16
 8005530:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005538:	4619      	mov	r1, r3
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff f9b6 	bl	80048ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005540:	e00d      	b.n	800555e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fb fe56 	bl	80011f4 <HAL_UART_RxCpltCallback>
}
 8005548:	e009      	b.n	800555e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	8b1b      	ldrh	r3, [r3, #24]
 8005550:	b29a      	uxth	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0208 	orr.w	r2, r2, #8
 800555a:	b292      	uxth	r2, r2
 800555c:	831a      	strh	r2, [r3, #24]
}
 800555e:	bf00      	nop
 8005560:	3770      	adds	r7, #112	; 0x70
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	40008000 	.word	0x40008000

0800556c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b09c      	sub	sp, #112	; 0x70
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800557a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005584:	2b22      	cmp	r3, #34	; 0x22
 8005586:	f040 80be 	bne.w	8005706 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005590:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005598:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800559a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800559e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80055a2:	4013      	ands	r3, r2
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ae:	1c9a      	adds	r2, r3, #2
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f040 80a3 	bne.w	800571a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80055e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055e8:	667b      	str	r3, [r7, #100]	; 0x64
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055f2:	657b      	str	r3, [r7, #84]	; 0x54
 80055f4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80055f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e6      	bne.n	80055d4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3308      	adds	r3, #8
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	f023 0301 	bic.w	r3, r3, #1
 800561c:	663b      	str	r3, [r7, #96]	; 0x60
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3308      	adds	r3, #8
 8005624:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005626:	643a      	str	r2, [r7, #64]	; 0x40
 8005628:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800562c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e5      	bne.n	8005606 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a34      	ldr	r2, [pc, #208]	; (8005724 <UART_RxISR_16BIT+0x1b8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d01f      	beq.n	8005698 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d018      	beq.n	8005698 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	61fb      	str	r3, [r7, #28]
   return(result);
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800567a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005686:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800568a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e6      	bne.n	8005666 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569c:	2b01      	cmp	r3, #1
 800569e:	d12e      	bne.n	80056fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	e853 3f00 	ldrex	r3, [r3]
 80056b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f023 0310 	bic.w	r3, r3, #16
 80056ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056c4:	61bb      	str	r3, [r7, #24]
 80056c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	6979      	ldr	r1, [r7, #20]
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	613b      	str	r3, [r7, #16]
   return(result);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e6      	bne.n	80056a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f003 0310 	and.w	r3, r3, #16
 80056e2:	2b10      	cmp	r3, #16
 80056e4:	d103      	bne.n	80056ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2210      	movs	r2, #16
 80056ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056f4:	4619      	mov	r1, r3
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff f8d8 	bl	80048ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056fc:	e00d      	b.n	800571a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7fb fd78 	bl	80011f4 <HAL_UART_RxCpltCallback>
}
 8005704:	e009      	b.n	800571a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	8b1b      	ldrh	r3, [r3, #24]
 800570c:	b29a      	uxth	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0208 	orr.w	r2, r2, #8
 8005716:	b292      	uxth	r2, r2
 8005718:	831a      	strh	r2, [r3, #24]
}
 800571a:	bf00      	nop
 800571c:	3770      	adds	r7, #112	; 0x70
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40008000 	.word	0x40008000

08005728 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e056      	b.n	80057ee <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d106      	bne.n	8005756 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f7fb ffa9 	bl	80016a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2224      	movs	r2, #36	; 0x24
 800575a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0201 	bic.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f7ff faff 	bl	8004d78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f7ff f8a2 	bl	80048c4 <UART_SetConfig>
 8005780:	4603      	mov	r3, r0
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e031      	b.n	80057ee <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005798:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	055b      	lsls	r3, r3, #21
 80057b2:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	041b      	lsls	r3, r3, #16
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 80057c8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	6812      	ldr	r2, [r2, #0]
 80057d0:	6979      	ldr	r1, [r7, #20]
 80057d2:	430b      	orrs	r3, r1
 80057d4:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0201 	orr.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f7ff fb68 	bl	8004ebc <UART_CheckIdleState>
 80057ec:	4603      	mov	r3, r0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <__cvt>:
 800580a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800580e:	ec55 4b10 	vmov	r4, r5, d0
 8005812:	2d00      	cmp	r5, #0
 8005814:	460e      	mov	r6, r1
 8005816:	4619      	mov	r1, r3
 8005818:	462b      	mov	r3, r5
 800581a:	bfbb      	ittet	lt
 800581c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005820:	461d      	movlt	r5, r3
 8005822:	2300      	movge	r3, #0
 8005824:	232d      	movlt	r3, #45	; 0x2d
 8005826:	700b      	strb	r3, [r1, #0]
 8005828:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800582a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800582e:	4691      	mov	r9, r2
 8005830:	f023 0820 	bic.w	r8, r3, #32
 8005834:	bfbc      	itt	lt
 8005836:	4622      	movlt	r2, r4
 8005838:	4614      	movlt	r4, r2
 800583a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800583e:	d005      	beq.n	800584c <__cvt+0x42>
 8005840:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005844:	d100      	bne.n	8005848 <__cvt+0x3e>
 8005846:	3601      	adds	r6, #1
 8005848:	2102      	movs	r1, #2
 800584a:	e000      	b.n	800584e <__cvt+0x44>
 800584c:	2103      	movs	r1, #3
 800584e:	ab03      	add	r3, sp, #12
 8005850:	9301      	str	r3, [sp, #4]
 8005852:	ab02      	add	r3, sp, #8
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	ec45 4b10 	vmov	d0, r4, r5
 800585a:	4653      	mov	r3, sl
 800585c:	4632      	mov	r2, r6
 800585e:	f000 fe4b 	bl	80064f8 <_dtoa_r>
 8005862:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005866:	4607      	mov	r7, r0
 8005868:	d102      	bne.n	8005870 <__cvt+0x66>
 800586a:	f019 0f01 	tst.w	r9, #1
 800586e:	d022      	beq.n	80058b6 <__cvt+0xac>
 8005870:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005874:	eb07 0906 	add.w	r9, r7, r6
 8005878:	d110      	bne.n	800589c <__cvt+0x92>
 800587a:	783b      	ldrb	r3, [r7, #0]
 800587c:	2b30      	cmp	r3, #48	; 0x30
 800587e:	d10a      	bne.n	8005896 <__cvt+0x8c>
 8005880:	2200      	movs	r2, #0
 8005882:	2300      	movs	r3, #0
 8005884:	4620      	mov	r0, r4
 8005886:	4629      	mov	r1, r5
 8005888:	f7fb f91e 	bl	8000ac8 <__aeabi_dcmpeq>
 800588c:	b918      	cbnz	r0, 8005896 <__cvt+0x8c>
 800588e:	f1c6 0601 	rsb	r6, r6, #1
 8005892:	f8ca 6000 	str.w	r6, [sl]
 8005896:	f8da 3000 	ldr.w	r3, [sl]
 800589a:	4499      	add	r9, r3
 800589c:	2200      	movs	r2, #0
 800589e:	2300      	movs	r3, #0
 80058a0:	4620      	mov	r0, r4
 80058a2:	4629      	mov	r1, r5
 80058a4:	f7fb f910 	bl	8000ac8 <__aeabi_dcmpeq>
 80058a8:	b108      	cbz	r0, 80058ae <__cvt+0xa4>
 80058aa:	f8cd 900c 	str.w	r9, [sp, #12]
 80058ae:	2230      	movs	r2, #48	; 0x30
 80058b0:	9b03      	ldr	r3, [sp, #12]
 80058b2:	454b      	cmp	r3, r9
 80058b4:	d307      	bcc.n	80058c6 <__cvt+0xbc>
 80058b6:	9b03      	ldr	r3, [sp, #12]
 80058b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058ba:	1bdb      	subs	r3, r3, r7
 80058bc:	4638      	mov	r0, r7
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	b004      	add	sp, #16
 80058c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c6:	1c59      	adds	r1, r3, #1
 80058c8:	9103      	str	r1, [sp, #12]
 80058ca:	701a      	strb	r2, [r3, #0]
 80058cc:	e7f0      	b.n	80058b0 <__cvt+0xa6>

080058ce <__exponent>:
 80058ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058d0:	4603      	mov	r3, r0
 80058d2:	2900      	cmp	r1, #0
 80058d4:	bfb8      	it	lt
 80058d6:	4249      	neglt	r1, r1
 80058d8:	f803 2b02 	strb.w	r2, [r3], #2
 80058dc:	bfb4      	ite	lt
 80058de:	222d      	movlt	r2, #45	; 0x2d
 80058e0:	222b      	movge	r2, #43	; 0x2b
 80058e2:	2909      	cmp	r1, #9
 80058e4:	7042      	strb	r2, [r0, #1]
 80058e6:	dd2a      	ble.n	800593e <__exponent+0x70>
 80058e8:	f10d 0207 	add.w	r2, sp, #7
 80058ec:	4617      	mov	r7, r2
 80058ee:	260a      	movs	r6, #10
 80058f0:	4694      	mov	ip, r2
 80058f2:	fb91 f5f6 	sdiv	r5, r1, r6
 80058f6:	fb06 1415 	mls	r4, r6, r5, r1
 80058fa:	3430      	adds	r4, #48	; 0x30
 80058fc:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005900:	460c      	mov	r4, r1
 8005902:	2c63      	cmp	r4, #99	; 0x63
 8005904:	f102 32ff 	add.w	r2, r2, #4294967295
 8005908:	4629      	mov	r1, r5
 800590a:	dcf1      	bgt.n	80058f0 <__exponent+0x22>
 800590c:	3130      	adds	r1, #48	; 0x30
 800590e:	f1ac 0402 	sub.w	r4, ip, #2
 8005912:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005916:	1c41      	adds	r1, r0, #1
 8005918:	4622      	mov	r2, r4
 800591a:	42ba      	cmp	r2, r7
 800591c:	d30a      	bcc.n	8005934 <__exponent+0x66>
 800591e:	f10d 0209 	add.w	r2, sp, #9
 8005922:	eba2 020c 	sub.w	r2, r2, ip
 8005926:	42bc      	cmp	r4, r7
 8005928:	bf88      	it	hi
 800592a:	2200      	movhi	r2, #0
 800592c:	4413      	add	r3, r2
 800592e:	1a18      	subs	r0, r3, r0
 8005930:	b003      	add	sp, #12
 8005932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005934:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005938:	f801 5f01 	strb.w	r5, [r1, #1]!
 800593c:	e7ed      	b.n	800591a <__exponent+0x4c>
 800593e:	2330      	movs	r3, #48	; 0x30
 8005940:	3130      	adds	r1, #48	; 0x30
 8005942:	7083      	strb	r3, [r0, #2]
 8005944:	70c1      	strb	r1, [r0, #3]
 8005946:	1d03      	adds	r3, r0, #4
 8005948:	e7f1      	b.n	800592e <__exponent+0x60>
	...

0800594c <_printf_float>:
 800594c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005950:	ed2d 8b02 	vpush	{d8}
 8005954:	b08d      	sub	sp, #52	; 0x34
 8005956:	460c      	mov	r4, r1
 8005958:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800595c:	4616      	mov	r6, r2
 800595e:	461f      	mov	r7, r3
 8005960:	4605      	mov	r5, r0
 8005962:	f000 fcc7 	bl	80062f4 <_localeconv_r>
 8005966:	f8d0 a000 	ldr.w	sl, [r0]
 800596a:	4650      	mov	r0, sl
 800596c:	f7fa fc80 	bl	8000270 <strlen>
 8005970:	2300      	movs	r3, #0
 8005972:	930a      	str	r3, [sp, #40]	; 0x28
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	9305      	str	r3, [sp, #20]
 8005978:	f8d8 3000 	ldr.w	r3, [r8]
 800597c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005980:	3307      	adds	r3, #7
 8005982:	f023 0307 	bic.w	r3, r3, #7
 8005986:	f103 0208 	add.w	r2, r3, #8
 800598a:	f8c8 2000 	str.w	r2, [r8]
 800598e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005992:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005996:	9307      	str	r3, [sp, #28]
 8005998:	f8cd 8018 	str.w	r8, [sp, #24]
 800599c:	ee08 0a10 	vmov	s16, r0
 80059a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80059a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059a8:	4b9e      	ldr	r3, [pc, #632]	; (8005c24 <_printf_float+0x2d8>)
 80059aa:	f04f 32ff 	mov.w	r2, #4294967295
 80059ae:	f7fb f8bd 	bl	8000b2c <__aeabi_dcmpun>
 80059b2:	bb88      	cbnz	r0, 8005a18 <_printf_float+0xcc>
 80059b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059b8:	4b9a      	ldr	r3, [pc, #616]	; (8005c24 <_printf_float+0x2d8>)
 80059ba:	f04f 32ff 	mov.w	r2, #4294967295
 80059be:	f7fb f897 	bl	8000af0 <__aeabi_dcmple>
 80059c2:	bb48      	cbnz	r0, 8005a18 <_printf_float+0xcc>
 80059c4:	2200      	movs	r2, #0
 80059c6:	2300      	movs	r3, #0
 80059c8:	4640      	mov	r0, r8
 80059ca:	4649      	mov	r1, r9
 80059cc:	f7fb f886 	bl	8000adc <__aeabi_dcmplt>
 80059d0:	b110      	cbz	r0, 80059d8 <_printf_float+0x8c>
 80059d2:	232d      	movs	r3, #45	; 0x2d
 80059d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d8:	4a93      	ldr	r2, [pc, #588]	; (8005c28 <_printf_float+0x2dc>)
 80059da:	4b94      	ldr	r3, [pc, #592]	; (8005c2c <_printf_float+0x2e0>)
 80059dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80059e0:	bf94      	ite	ls
 80059e2:	4690      	movls	r8, r2
 80059e4:	4698      	movhi	r8, r3
 80059e6:	2303      	movs	r3, #3
 80059e8:	6123      	str	r3, [r4, #16]
 80059ea:	9b05      	ldr	r3, [sp, #20]
 80059ec:	f023 0304 	bic.w	r3, r3, #4
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	f04f 0900 	mov.w	r9, #0
 80059f6:	9700      	str	r7, [sp, #0]
 80059f8:	4633      	mov	r3, r6
 80059fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80059fc:	4621      	mov	r1, r4
 80059fe:	4628      	mov	r0, r5
 8005a00:	f000 f9da 	bl	8005db8 <_printf_common>
 8005a04:	3001      	adds	r0, #1
 8005a06:	f040 8090 	bne.w	8005b2a <_printf_float+0x1de>
 8005a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a0e:	b00d      	add	sp, #52	; 0x34
 8005a10:	ecbd 8b02 	vpop	{d8}
 8005a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a18:	4642      	mov	r2, r8
 8005a1a:	464b      	mov	r3, r9
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	4649      	mov	r1, r9
 8005a20:	f7fb f884 	bl	8000b2c <__aeabi_dcmpun>
 8005a24:	b140      	cbz	r0, 8005a38 <_printf_float+0xec>
 8005a26:	464b      	mov	r3, r9
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	bfbc      	itt	lt
 8005a2c:	232d      	movlt	r3, #45	; 0x2d
 8005a2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a32:	4a7f      	ldr	r2, [pc, #508]	; (8005c30 <_printf_float+0x2e4>)
 8005a34:	4b7f      	ldr	r3, [pc, #508]	; (8005c34 <_printf_float+0x2e8>)
 8005a36:	e7d1      	b.n	80059dc <_printf_float+0x90>
 8005a38:	6863      	ldr	r3, [r4, #4]
 8005a3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a3e:	9206      	str	r2, [sp, #24]
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	d13f      	bne.n	8005ac4 <_printf_float+0x178>
 8005a44:	2306      	movs	r3, #6
 8005a46:	6063      	str	r3, [r4, #4]
 8005a48:	9b05      	ldr	r3, [sp, #20]
 8005a4a:	6861      	ldr	r1, [r4, #4]
 8005a4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a50:	2300      	movs	r3, #0
 8005a52:	9303      	str	r3, [sp, #12]
 8005a54:	ab0a      	add	r3, sp, #40	; 0x28
 8005a56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a5a:	ab09      	add	r3, sp, #36	; 0x24
 8005a5c:	ec49 8b10 	vmov	d0, r8, r9
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	6022      	str	r2, [r4, #0]
 8005a64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a68:	4628      	mov	r0, r5
 8005a6a:	f7ff fece 	bl	800580a <__cvt>
 8005a6e:	9b06      	ldr	r3, [sp, #24]
 8005a70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a72:	2b47      	cmp	r3, #71	; 0x47
 8005a74:	4680      	mov	r8, r0
 8005a76:	d108      	bne.n	8005a8a <_printf_float+0x13e>
 8005a78:	1cc8      	adds	r0, r1, #3
 8005a7a:	db02      	blt.n	8005a82 <_printf_float+0x136>
 8005a7c:	6863      	ldr	r3, [r4, #4]
 8005a7e:	4299      	cmp	r1, r3
 8005a80:	dd41      	ble.n	8005b06 <_printf_float+0x1ba>
 8005a82:	f1ab 0302 	sub.w	r3, fp, #2
 8005a86:	fa5f fb83 	uxtb.w	fp, r3
 8005a8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a8e:	d820      	bhi.n	8005ad2 <_printf_float+0x186>
 8005a90:	3901      	subs	r1, #1
 8005a92:	465a      	mov	r2, fp
 8005a94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a98:	9109      	str	r1, [sp, #36]	; 0x24
 8005a9a:	f7ff ff18 	bl	80058ce <__exponent>
 8005a9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aa0:	1813      	adds	r3, r2, r0
 8005aa2:	2a01      	cmp	r2, #1
 8005aa4:	4681      	mov	r9, r0
 8005aa6:	6123      	str	r3, [r4, #16]
 8005aa8:	dc02      	bgt.n	8005ab0 <_printf_float+0x164>
 8005aaa:	6822      	ldr	r2, [r4, #0]
 8005aac:	07d2      	lsls	r2, r2, #31
 8005aae:	d501      	bpl.n	8005ab4 <_printf_float+0x168>
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	6123      	str	r3, [r4, #16]
 8005ab4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d09c      	beq.n	80059f6 <_printf_float+0xaa>
 8005abc:	232d      	movs	r3, #45	; 0x2d
 8005abe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ac2:	e798      	b.n	80059f6 <_printf_float+0xaa>
 8005ac4:	9a06      	ldr	r2, [sp, #24]
 8005ac6:	2a47      	cmp	r2, #71	; 0x47
 8005ac8:	d1be      	bne.n	8005a48 <_printf_float+0xfc>
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1bc      	bne.n	8005a48 <_printf_float+0xfc>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e7b9      	b.n	8005a46 <_printf_float+0xfa>
 8005ad2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005ad6:	d118      	bne.n	8005b0a <_printf_float+0x1be>
 8005ad8:	2900      	cmp	r1, #0
 8005ada:	6863      	ldr	r3, [r4, #4]
 8005adc:	dd0b      	ble.n	8005af6 <_printf_float+0x1aa>
 8005ade:	6121      	str	r1, [r4, #16]
 8005ae0:	b913      	cbnz	r3, 8005ae8 <_printf_float+0x19c>
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	07d0      	lsls	r0, r2, #31
 8005ae6:	d502      	bpl.n	8005aee <_printf_float+0x1a2>
 8005ae8:	3301      	adds	r3, #1
 8005aea:	440b      	add	r3, r1
 8005aec:	6123      	str	r3, [r4, #16]
 8005aee:	65a1      	str	r1, [r4, #88]	; 0x58
 8005af0:	f04f 0900 	mov.w	r9, #0
 8005af4:	e7de      	b.n	8005ab4 <_printf_float+0x168>
 8005af6:	b913      	cbnz	r3, 8005afe <_printf_float+0x1b2>
 8005af8:	6822      	ldr	r2, [r4, #0]
 8005afa:	07d2      	lsls	r2, r2, #31
 8005afc:	d501      	bpl.n	8005b02 <_printf_float+0x1b6>
 8005afe:	3302      	adds	r3, #2
 8005b00:	e7f4      	b.n	8005aec <_printf_float+0x1a0>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e7f2      	b.n	8005aec <_printf_float+0x1a0>
 8005b06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b0c:	4299      	cmp	r1, r3
 8005b0e:	db05      	blt.n	8005b1c <_printf_float+0x1d0>
 8005b10:	6823      	ldr	r3, [r4, #0]
 8005b12:	6121      	str	r1, [r4, #16]
 8005b14:	07d8      	lsls	r0, r3, #31
 8005b16:	d5ea      	bpl.n	8005aee <_printf_float+0x1a2>
 8005b18:	1c4b      	adds	r3, r1, #1
 8005b1a:	e7e7      	b.n	8005aec <_printf_float+0x1a0>
 8005b1c:	2900      	cmp	r1, #0
 8005b1e:	bfd4      	ite	le
 8005b20:	f1c1 0202 	rsble	r2, r1, #2
 8005b24:	2201      	movgt	r2, #1
 8005b26:	4413      	add	r3, r2
 8005b28:	e7e0      	b.n	8005aec <_printf_float+0x1a0>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	055a      	lsls	r2, r3, #21
 8005b2e:	d407      	bmi.n	8005b40 <_printf_float+0x1f4>
 8005b30:	6923      	ldr	r3, [r4, #16]
 8005b32:	4642      	mov	r2, r8
 8005b34:	4631      	mov	r1, r6
 8005b36:	4628      	mov	r0, r5
 8005b38:	47b8      	blx	r7
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	d12c      	bne.n	8005b98 <_printf_float+0x24c>
 8005b3e:	e764      	b.n	8005a0a <_printf_float+0xbe>
 8005b40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b44:	f240 80e0 	bls.w	8005d08 <_printf_float+0x3bc>
 8005b48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f7fa ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d034      	beq.n	8005bc2 <_printf_float+0x276>
 8005b58:	4a37      	ldr	r2, [pc, #220]	; (8005c38 <_printf_float+0x2ec>)
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	4628      	mov	r0, r5
 8005b60:	47b8      	blx	r7
 8005b62:	3001      	adds	r0, #1
 8005b64:	f43f af51 	beq.w	8005a0a <_printf_float+0xbe>
 8005b68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	db02      	blt.n	8005b76 <_printf_float+0x22a>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	07d8      	lsls	r0, r3, #31
 8005b74:	d510      	bpl.n	8005b98 <_printf_float+0x24c>
 8005b76:	ee18 3a10 	vmov	r3, s16
 8005b7a:	4652      	mov	r2, sl
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	4628      	mov	r0, r5
 8005b80:	47b8      	blx	r7
 8005b82:	3001      	adds	r0, #1
 8005b84:	f43f af41 	beq.w	8005a0a <_printf_float+0xbe>
 8005b88:	f04f 0800 	mov.w	r8, #0
 8005b8c:	f104 091a 	add.w	r9, r4, #26
 8005b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b92:	3b01      	subs	r3, #1
 8005b94:	4543      	cmp	r3, r8
 8005b96:	dc09      	bgt.n	8005bac <_printf_float+0x260>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	079b      	lsls	r3, r3, #30
 8005b9c:	f100 8107 	bmi.w	8005dae <_printf_float+0x462>
 8005ba0:	68e0      	ldr	r0, [r4, #12]
 8005ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ba4:	4298      	cmp	r0, r3
 8005ba6:	bfb8      	it	lt
 8005ba8:	4618      	movlt	r0, r3
 8005baa:	e730      	b.n	8005a0e <_printf_float+0xc2>
 8005bac:	2301      	movs	r3, #1
 8005bae:	464a      	mov	r2, r9
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	47b8      	blx	r7
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	f43f af27 	beq.w	8005a0a <_printf_float+0xbe>
 8005bbc:	f108 0801 	add.w	r8, r8, #1
 8005bc0:	e7e6      	b.n	8005b90 <_printf_float+0x244>
 8005bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	dc39      	bgt.n	8005c3c <_printf_float+0x2f0>
 8005bc8:	4a1b      	ldr	r2, [pc, #108]	; (8005c38 <_printf_float+0x2ec>)
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b8      	blx	r7
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	f43f af19 	beq.w	8005a0a <_printf_float+0xbe>
 8005bd8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	d102      	bne.n	8005be6 <_printf_float+0x29a>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	07d9      	lsls	r1, r3, #31
 8005be4:	d5d8      	bpl.n	8005b98 <_printf_float+0x24c>
 8005be6:	ee18 3a10 	vmov	r3, s16
 8005bea:	4652      	mov	r2, sl
 8005bec:	4631      	mov	r1, r6
 8005bee:	4628      	mov	r0, r5
 8005bf0:	47b8      	blx	r7
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	f43f af09 	beq.w	8005a0a <_printf_float+0xbe>
 8005bf8:	f04f 0900 	mov.w	r9, #0
 8005bfc:	f104 0a1a 	add.w	sl, r4, #26
 8005c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c02:	425b      	negs	r3, r3
 8005c04:	454b      	cmp	r3, r9
 8005c06:	dc01      	bgt.n	8005c0c <_printf_float+0x2c0>
 8005c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c0a:	e792      	b.n	8005b32 <_printf_float+0x1e6>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	4652      	mov	r2, sl
 8005c10:	4631      	mov	r1, r6
 8005c12:	4628      	mov	r0, r5
 8005c14:	47b8      	blx	r7
 8005c16:	3001      	adds	r0, #1
 8005c18:	f43f aef7 	beq.w	8005a0a <_printf_float+0xbe>
 8005c1c:	f109 0901 	add.w	r9, r9, #1
 8005c20:	e7ee      	b.n	8005c00 <_printf_float+0x2b4>
 8005c22:	bf00      	nop
 8005c24:	7fefffff 	.word	0x7fefffff
 8005c28:	080081e8 	.word	0x080081e8
 8005c2c:	080081ec 	.word	0x080081ec
 8005c30:	080081f0 	.word	0x080081f0
 8005c34:	080081f4 	.word	0x080081f4
 8005c38:	080081f8 	.word	0x080081f8
 8005c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c40:	429a      	cmp	r2, r3
 8005c42:	bfa8      	it	ge
 8005c44:	461a      	movge	r2, r3
 8005c46:	2a00      	cmp	r2, #0
 8005c48:	4691      	mov	r9, r2
 8005c4a:	dc37      	bgt.n	8005cbc <_printf_float+0x370>
 8005c4c:	f04f 0b00 	mov.w	fp, #0
 8005c50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c54:	f104 021a 	add.w	r2, r4, #26
 8005c58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c5a:	9305      	str	r3, [sp, #20]
 8005c5c:	eba3 0309 	sub.w	r3, r3, r9
 8005c60:	455b      	cmp	r3, fp
 8005c62:	dc33      	bgt.n	8005ccc <_printf_float+0x380>
 8005c64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	db3b      	blt.n	8005ce4 <_printf_float+0x398>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	07da      	lsls	r2, r3, #31
 8005c70:	d438      	bmi.n	8005ce4 <_printf_float+0x398>
 8005c72:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c76:	eba2 0903 	sub.w	r9, r2, r3
 8005c7a:	9b05      	ldr	r3, [sp, #20]
 8005c7c:	1ad2      	subs	r2, r2, r3
 8005c7e:	4591      	cmp	r9, r2
 8005c80:	bfa8      	it	ge
 8005c82:	4691      	movge	r9, r2
 8005c84:	f1b9 0f00 	cmp.w	r9, #0
 8005c88:	dc35      	bgt.n	8005cf6 <_printf_float+0x3aa>
 8005c8a:	f04f 0800 	mov.w	r8, #0
 8005c8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c92:	f104 0a1a 	add.w	sl, r4, #26
 8005c96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c9a:	1a9b      	subs	r3, r3, r2
 8005c9c:	eba3 0309 	sub.w	r3, r3, r9
 8005ca0:	4543      	cmp	r3, r8
 8005ca2:	f77f af79 	ble.w	8005b98 <_printf_float+0x24c>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	4652      	mov	r2, sl
 8005caa:	4631      	mov	r1, r6
 8005cac:	4628      	mov	r0, r5
 8005cae:	47b8      	blx	r7
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	f43f aeaa 	beq.w	8005a0a <_printf_float+0xbe>
 8005cb6:	f108 0801 	add.w	r8, r8, #1
 8005cba:	e7ec      	b.n	8005c96 <_printf_float+0x34a>
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4642      	mov	r2, r8
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	47b8      	blx	r7
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	d1c0      	bne.n	8005c4c <_printf_float+0x300>
 8005cca:	e69e      	b.n	8005a0a <_printf_float+0xbe>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	4631      	mov	r1, r6
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	9205      	str	r2, [sp, #20]
 8005cd4:	47b8      	blx	r7
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	f43f ae97 	beq.w	8005a0a <_printf_float+0xbe>
 8005cdc:	9a05      	ldr	r2, [sp, #20]
 8005cde:	f10b 0b01 	add.w	fp, fp, #1
 8005ce2:	e7b9      	b.n	8005c58 <_printf_float+0x30c>
 8005ce4:	ee18 3a10 	vmov	r3, s16
 8005ce8:	4652      	mov	r2, sl
 8005cea:	4631      	mov	r1, r6
 8005cec:	4628      	mov	r0, r5
 8005cee:	47b8      	blx	r7
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	d1be      	bne.n	8005c72 <_printf_float+0x326>
 8005cf4:	e689      	b.n	8005a0a <_printf_float+0xbe>
 8005cf6:	9a05      	ldr	r2, [sp, #20]
 8005cf8:	464b      	mov	r3, r9
 8005cfa:	4442      	add	r2, r8
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	4628      	mov	r0, r5
 8005d00:	47b8      	blx	r7
 8005d02:	3001      	adds	r0, #1
 8005d04:	d1c1      	bne.n	8005c8a <_printf_float+0x33e>
 8005d06:	e680      	b.n	8005a0a <_printf_float+0xbe>
 8005d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d0a:	2a01      	cmp	r2, #1
 8005d0c:	dc01      	bgt.n	8005d12 <_printf_float+0x3c6>
 8005d0e:	07db      	lsls	r3, r3, #31
 8005d10:	d53a      	bpl.n	8005d88 <_printf_float+0x43c>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4642      	mov	r2, r8
 8005d16:	4631      	mov	r1, r6
 8005d18:	4628      	mov	r0, r5
 8005d1a:	47b8      	blx	r7
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	f43f ae74 	beq.w	8005a0a <_printf_float+0xbe>
 8005d22:	ee18 3a10 	vmov	r3, s16
 8005d26:	4652      	mov	r2, sl
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	47b8      	blx	r7
 8005d2e:	3001      	adds	r0, #1
 8005d30:	f43f ae6b 	beq.w	8005a0a <_printf_float+0xbe>
 8005d34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005d40:	f7fa fec2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d44:	b9d8      	cbnz	r0, 8005d7e <_printf_float+0x432>
 8005d46:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005d4a:	f108 0201 	add.w	r2, r8, #1
 8005d4e:	4631      	mov	r1, r6
 8005d50:	4628      	mov	r0, r5
 8005d52:	47b8      	blx	r7
 8005d54:	3001      	adds	r0, #1
 8005d56:	d10e      	bne.n	8005d76 <_printf_float+0x42a>
 8005d58:	e657      	b.n	8005a0a <_printf_float+0xbe>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	4652      	mov	r2, sl
 8005d5e:	4631      	mov	r1, r6
 8005d60:	4628      	mov	r0, r5
 8005d62:	47b8      	blx	r7
 8005d64:	3001      	adds	r0, #1
 8005d66:	f43f ae50 	beq.w	8005a0a <_printf_float+0xbe>
 8005d6a:	f108 0801 	add.w	r8, r8, #1
 8005d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d70:	3b01      	subs	r3, #1
 8005d72:	4543      	cmp	r3, r8
 8005d74:	dcf1      	bgt.n	8005d5a <_printf_float+0x40e>
 8005d76:	464b      	mov	r3, r9
 8005d78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d7c:	e6da      	b.n	8005b34 <_printf_float+0x1e8>
 8005d7e:	f04f 0800 	mov.w	r8, #0
 8005d82:	f104 0a1a 	add.w	sl, r4, #26
 8005d86:	e7f2      	b.n	8005d6e <_printf_float+0x422>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	4642      	mov	r2, r8
 8005d8c:	e7df      	b.n	8005d4e <_printf_float+0x402>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	464a      	mov	r2, r9
 8005d92:	4631      	mov	r1, r6
 8005d94:	4628      	mov	r0, r5
 8005d96:	47b8      	blx	r7
 8005d98:	3001      	adds	r0, #1
 8005d9a:	f43f ae36 	beq.w	8005a0a <_printf_float+0xbe>
 8005d9e:	f108 0801 	add.w	r8, r8, #1
 8005da2:	68e3      	ldr	r3, [r4, #12]
 8005da4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005da6:	1a5b      	subs	r3, r3, r1
 8005da8:	4543      	cmp	r3, r8
 8005daa:	dcf0      	bgt.n	8005d8e <_printf_float+0x442>
 8005dac:	e6f8      	b.n	8005ba0 <_printf_float+0x254>
 8005dae:	f04f 0800 	mov.w	r8, #0
 8005db2:	f104 0919 	add.w	r9, r4, #25
 8005db6:	e7f4      	b.n	8005da2 <_printf_float+0x456>

08005db8 <_printf_common>:
 8005db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dbc:	4616      	mov	r6, r2
 8005dbe:	4699      	mov	r9, r3
 8005dc0:	688a      	ldr	r2, [r1, #8]
 8005dc2:	690b      	ldr	r3, [r1, #16]
 8005dc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	bfb8      	it	lt
 8005dcc:	4613      	movlt	r3, r2
 8005dce:	6033      	str	r3, [r6, #0]
 8005dd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dd4:	4607      	mov	r7, r0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	b10a      	cbz	r2, 8005dde <_printf_common+0x26>
 8005dda:	3301      	adds	r3, #1
 8005ddc:	6033      	str	r3, [r6, #0]
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	0699      	lsls	r1, r3, #26
 8005de2:	bf42      	ittt	mi
 8005de4:	6833      	ldrmi	r3, [r6, #0]
 8005de6:	3302      	addmi	r3, #2
 8005de8:	6033      	strmi	r3, [r6, #0]
 8005dea:	6825      	ldr	r5, [r4, #0]
 8005dec:	f015 0506 	ands.w	r5, r5, #6
 8005df0:	d106      	bne.n	8005e00 <_printf_common+0x48>
 8005df2:	f104 0a19 	add.w	sl, r4, #25
 8005df6:	68e3      	ldr	r3, [r4, #12]
 8005df8:	6832      	ldr	r2, [r6, #0]
 8005dfa:	1a9b      	subs	r3, r3, r2
 8005dfc:	42ab      	cmp	r3, r5
 8005dfe:	dc26      	bgt.n	8005e4e <_printf_common+0x96>
 8005e00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e04:	1e13      	subs	r3, r2, #0
 8005e06:	6822      	ldr	r2, [r4, #0]
 8005e08:	bf18      	it	ne
 8005e0a:	2301      	movne	r3, #1
 8005e0c:	0692      	lsls	r2, r2, #26
 8005e0e:	d42b      	bmi.n	8005e68 <_printf_common+0xb0>
 8005e10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e14:	4649      	mov	r1, r9
 8005e16:	4638      	mov	r0, r7
 8005e18:	47c0      	blx	r8
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	d01e      	beq.n	8005e5c <_printf_common+0xa4>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	6922      	ldr	r2, [r4, #16]
 8005e22:	f003 0306 	and.w	r3, r3, #6
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	bf02      	ittt	eq
 8005e2a:	68e5      	ldreq	r5, [r4, #12]
 8005e2c:	6833      	ldreq	r3, [r6, #0]
 8005e2e:	1aed      	subeq	r5, r5, r3
 8005e30:	68a3      	ldr	r3, [r4, #8]
 8005e32:	bf0c      	ite	eq
 8005e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e38:	2500      	movne	r5, #0
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	bfc4      	itt	gt
 8005e3e:	1a9b      	subgt	r3, r3, r2
 8005e40:	18ed      	addgt	r5, r5, r3
 8005e42:	2600      	movs	r6, #0
 8005e44:	341a      	adds	r4, #26
 8005e46:	42b5      	cmp	r5, r6
 8005e48:	d11a      	bne.n	8005e80 <_printf_common+0xc8>
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	e008      	b.n	8005e60 <_printf_common+0xa8>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	4652      	mov	r2, sl
 8005e52:	4649      	mov	r1, r9
 8005e54:	4638      	mov	r0, r7
 8005e56:	47c0      	blx	r8
 8005e58:	3001      	adds	r0, #1
 8005e5a:	d103      	bne.n	8005e64 <_printf_common+0xac>
 8005e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e64:	3501      	adds	r5, #1
 8005e66:	e7c6      	b.n	8005df6 <_printf_common+0x3e>
 8005e68:	18e1      	adds	r1, r4, r3
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	2030      	movs	r0, #48	; 0x30
 8005e6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e72:	4422      	add	r2, r4
 8005e74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e7c:	3302      	adds	r3, #2
 8005e7e:	e7c7      	b.n	8005e10 <_printf_common+0x58>
 8005e80:	2301      	movs	r3, #1
 8005e82:	4622      	mov	r2, r4
 8005e84:	4649      	mov	r1, r9
 8005e86:	4638      	mov	r0, r7
 8005e88:	47c0      	blx	r8
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	d0e6      	beq.n	8005e5c <_printf_common+0xa4>
 8005e8e:	3601      	adds	r6, #1
 8005e90:	e7d9      	b.n	8005e46 <_printf_common+0x8e>
	...

08005e94 <_printf_i>:
 8005e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e98:	7e0f      	ldrb	r7, [r1, #24]
 8005e9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e9c:	2f78      	cmp	r7, #120	; 0x78
 8005e9e:	4691      	mov	r9, r2
 8005ea0:	4680      	mov	r8, r0
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	469a      	mov	sl, r3
 8005ea6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005eaa:	d807      	bhi.n	8005ebc <_printf_i+0x28>
 8005eac:	2f62      	cmp	r7, #98	; 0x62
 8005eae:	d80a      	bhi.n	8005ec6 <_printf_i+0x32>
 8005eb0:	2f00      	cmp	r7, #0
 8005eb2:	f000 80d4 	beq.w	800605e <_printf_i+0x1ca>
 8005eb6:	2f58      	cmp	r7, #88	; 0x58
 8005eb8:	f000 80c0 	beq.w	800603c <_printf_i+0x1a8>
 8005ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ec0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ec4:	e03a      	b.n	8005f3c <_printf_i+0xa8>
 8005ec6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005eca:	2b15      	cmp	r3, #21
 8005ecc:	d8f6      	bhi.n	8005ebc <_printf_i+0x28>
 8005ece:	a101      	add	r1, pc, #4	; (adr r1, 8005ed4 <_printf_i+0x40>)
 8005ed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ed4:	08005f2d 	.word	0x08005f2d
 8005ed8:	08005f41 	.word	0x08005f41
 8005edc:	08005ebd 	.word	0x08005ebd
 8005ee0:	08005ebd 	.word	0x08005ebd
 8005ee4:	08005ebd 	.word	0x08005ebd
 8005ee8:	08005ebd 	.word	0x08005ebd
 8005eec:	08005f41 	.word	0x08005f41
 8005ef0:	08005ebd 	.word	0x08005ebd
 8005ef4:	08005ebd 	.word	0x08005ebd
 8005ef8:	08005ebd 	.word	0x08005ebd
 8005efc:	08005ebd 	.word	0x08005ebd
 8005f00:	08006045 	.word	0x08006045
 8005f04:	08005f6d 	.word	0x08005f6d
 8005f08:	08005fff 	.word	0x08005fff
 8005f0c:	08005ebd 	.word	0x08005ebd
 8005f10:	08005ebd 	.word	0x08005ebd
 8005f14:	08006067 	.word	0x08006067
 8005f18:	08005ebd 	.word	0x08005ebd
 8005f1c:	08005f6d 	.word	0x08005f6d
 8005f20:	08005ebd 	.word	0x08005ebd
 8005f24:	08005ebd 	.word	0x08005ebd
 8005f28:	08006007 	.word	0x08006007
 8005f2c:	682b      	ldr	r3, [r5, #0]
 8005f2e:	1d1a      	adds	r2, r3, #4
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	602a      	str	r2, [r5, #0]
 8005f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e09f      	b.n	8006080 <_printf_i+0x1ec>
 8005f40:	6820      	ldr	r0, [r4, #0]
 8005f42:	682b      	ldr	r3, [r5, #0]
 8005f44:	0607      	lsls	r7, r0, #24
 8005f46:	f103 0104 	add.w	r1, r3, #4
 8005f4a:	6029      	str	r1, [r5, #0]
 8005f4c:	d501      	bpl.n	8005f52 <_printf_i+0xbe>
 8005f4e:	681e      	ldr	r6, [r3, #0]
 8005f50:	e003      	b.n	8005f5a <_printf_i+0xc6>
 8005f52:	0646      	lsls	r6, r0, #25
 8005f54:	d5fb      	bpl.n	8005f4e <_printf_i+0xba>
 8005f56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005f5a:	2e00      	cmp	r6, #0
 8005f5c:	da03      	bge.n	8005f66 <_printf_i+0xd2>
 8005f5e:	232d      	movs	r3, #45	; 0x2d
 8005f60:	4276      	negs	r6, r6
 8005f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f66:	485a      	ldr	r0, [pc, #360]	; (80060d0 <_printf_i+0x23c>)
 8005f68:	230a      	movs	r3, #10
 8005f6a:	e012      	b.n	8005f92 <_printf_i+0xfe>
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	6820      	ldr	r0, [r4, #0]
 8005f70:	1d19      	adds	r1, r3, #4
 8005f72:	6029      	str	r1, [r5, #0]
 8005f74:	0605      	lsls	r5, r0, #24
 8005f76:	d501      	bpl.n	8005f7c <_printf_i+0xe8>
 8005f78:	681e      	ldr	r6, [r3, #0]
 8005f7a:	e002      	b.n	8005f82 <_printf_i+0xee>
 8005f7c:	0641      	lsls	r1, r0, #25
 8005f7e:	d5fb      	bpl.n	8005f78 <_printf_i+0xe4>
 8005f80:	881e      	ldrh	r6, [r3, #0]
 8005f82:	4853      	ldr	r0, [pc, #332]	; (80060d0 <_printf_i+0x23c>)
 8005f84:	2f6f      	cmp	r7, #111	; 0x6f
 8005f86:	bf0c      	ite	eq
 8005f88:	2308      	moveq	r3, #8
 8005f8a:	230a      	movne	r3, #10
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f92:	6865      	ldr	r5, [r4, #4]
 8005f94:	60a5      	str	r5, [r4, #8]
 8005f96:	2d00      	cmp	r5, #0
 8005f98:	bfa2      	ittt	ge
 8005f9a:	6821      	ldrge	r1, [r4, #0]
 8005f9c:	f021 0104 	bicge.w	r1, r1, #4
 8005fa0:	6021      	strge	r1, [r4, #0]
 8005fa2:	b90e      	cbnz	r6, 8005fa8 <_printf_i+0x114>
 8005fa4:	2d00      	cmp	r5, #0
 8005fa6:	d04b      	beq.n	8006040 <_printf_i+0x1ac>
 8005fa8:	4615      	mov	r5, r2
 8005faa:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fae:	fb03 6711 	mls	r7, r3, r1, r6
 8005fb2:	5dc7      	ldrb	r7, [r0, r7]
 8005fb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fb8:	4637      	mov	r7, r6
 8005fba:	42bb      	cmp	r3, r7
 8005fbc:	460e      	mov	r6, r1
 8005fbe:	d9f4      	bls.n	8005faa <_printf_i+0x116>
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d10b      	bne.n	8005fdc <_printf_i+0x148>
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	07de      	lsls	r6, r3, #31
 8005fc8:	d508      	bpl.n	8005fdc <_printf_i+0x148>
 8005fca:	6923      	ldr	r3, [r4, #16]
 8005fcc:	6861      	ldr	r1, [r4, #4]
 8005fce:	4299      	cmp	r1, r3
 8005fd0:	bfde      	ittt	le
 8005fd2:	2330      	movle	r3, #48	; 0x30
 8005fd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fdc:	1b52      	subs	r2, r2, r5
 8005fde:	6122      	str	r2, [r4, #16]
 8005fe0:	f8cd a000 	str.w	sl, [sp]
 8005fe4:	464b      	mov	r3, r9
 8005fe6:	aa03      	add	r2, sp, #12
 8005fe8:	4621      	mov	r1, r4
 8005fea:	4640      	mov	r0, r8
 8005fec:	f7ff fee4 	bl	8005db8 <_printf_common>
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	d14a      	bne.n	800608a <_printf_i+0x1f6>
 8005ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff8:	b004      	add	sp, #16
 8005ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	f043 0320 	orr.w	r3, r3, #32
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	4833      	ldr	r0, [pc, #204]	; (80060d4 <_printf_i+0x240>)
 8006008:	2778      	movs	r7, #120	; 0x78
 800600a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	6829      	ldr	r1, [r5, #0]
 8006012:	061f      	lsls	r7, r3, #24
 8006014:	f851 6b04 	ldr.w	r6, [r1], #4
 8006018:	d402      	bmi.n	8006020 <_printf_i+0x18c>
 800601a:	065f      	lsls	r7, r3, #25
 800601c:	bf48      	it	mi
 800601e:	b2b6      	uxthmi	r6, r6
 8006020:	07df      	lsls	r7, r3, #31
 8006022:	bf48      	it	mi
 8006024:	f043 0320 	orrmi.w	r3, r3, #32
 8006028:	6029      	str	r1, [r5, #0]
 800602a:	bf48      	it	mi
 800602c:	6023      	strmi	r3, [r4, #0]
 800602e:	b91e      	cbnz	r6, 8006038 <_printf_i+0x1a4>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	f023 0320 	bic.w	r3, r3, #32
 8006036:	6023      	str	r3, [r4, #0]
 8006038:	2310      	movs	r3, #16
 800603a:	e7a7      	b.n	8005f8c <_printf_i+0xf8>
 800603c:	4824      	ldr	r0, [pc, #144]	; (80060d0 <_printf_i+0x23c>)
 800603e:	e7e4      	b.n	800600a <_printf_i+0x176>
 8006040:	4615      	mov	r5, r2
 8006042:	e7bd      	b.n	8005fc0 <_printf_i+0x12c>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	6826      	ldr	r6, [r4, #0]
 8006048:	6961      	ldr	r1, [r4, #20]
 800604a:	1d18      	adds	r0, r3, #4
 800604c:	6028      	str	r0, [r5, #0]
 800604e:	0635      	lsls	r5, r6, #24
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	d501      	bpl.n	8006058 <_printf_i+0x1c4>
 8006054:	6019      	str	r1, [r3, #0]
 8006056:	e002      	b.n	800605e <_printf_i+0x1ca>
 8006058:	0670      	lsls	r0, r6, #25
 800605a:	d5fb      	bpl.n	8006054 <_printf_i+0x1c0>
 800605c:	8019      	strh	r1, [r3, #0]
 800605e:	2300      	movs	r3, #0
 8006060:	6123      	str	r3, [r4, #16]
 8006062:	4615      	mov	r5, r2
 8006064:	e7bc      	b.n	8005fe0 <_printf_i+0x14c>
 8006066:	682b      	ldr	r3, [r5, #0]
 8006068:	1d1a      	adds	r2, r3, #4
 800606a:	602a      	str	r2, [r5, #0]
 800606c:	681d      	ldr	r5, [r3, #0]
 800606e:	6862      	ldr	r2, [r4, #4]
 8006070:	2100      	movs	r1, #0
 8006072:	4628      	mov	r0, r5
 8006074:	f7fa f8ac 	bl	80001d0 <memchr>
 8006078:	b108      	cbz	r0, 800607e <_printf_i+0x1ea>
 800607a:	1b40      	subs	r0, r0, r5
 800607c:	6060      	str	r0, [r4, #4]
 800607e:	6863      	ldr	r3, [r4, #4]
 8006080:	6123      	str	r3, [r4, #16]
 8006082:	2300      	movs	r3, #0
 8006084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006088:	e7aa      	b.n	8005fe0 <_printf_i+0x14c>
 800608a:	6923      	ldr	r3, [r4, #16]
 800608c:	462a      	mov	r2, r5
 800608e:	4649      	mov	r1, r9
 8006090:	4640      	mov	r0, r8
 8006092:	47d0      	blx	sl
 8006094:	3001      	adds	r0, #1
 8006096:	d0ad      	beq.n	8005ff4 <_printf_i+0x160>
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	079b      	lsls	r3, r3, #30
 800609c:	d413      	bmi.n	80060c6 <_printf_i+0x232>
 800609e:	68e0      	ldr	r0, [r4, #12]
 80060a0:	9b03      	ldr	r3, [sp, #12]
 80060a2:	4298      	cmp	r0, r3
 80060a4:	bfb8      	it	lt
 80060a6:	4618      	movlt	r0, r3
 80060a8:	e7a6      	b.n	8005ff8 <_printf_i+0x164>
 80060aa:	2301      	movs	r3, #1
 80060ac:	4632      	mov	r2, r6
 80060ae:	4649      	mov	r1, r9
 80060b0:	4640      	mov	r0, r8
 80060b2:	47d0      	blx	sl
 80060b4:	3001      	adds	r0, #1
 80060b6:	d09d      	beq.n	8005ff4 <_printf_i+0x160>
 80060b8:	3501      	adds	r5, #1
 80060ba:	68e3      	ldr	r3, [r4, #12]
 80060bc:	9903      	ldr	r1, [sp, #12]
 80060be:	1a5b      	subs	r3, r3, r1
 80060c0:	42ab      	cmp	r3, r5
 80060c2:	dcf2      	bgt.n	80060aa <_printf_i+0x216>
 80060c4:	e7eb      	b.n	800609e <_printf_i+0x20a>
 80060c6:	2500      	movs	r5, #0
 80060c8:	f104 0619 	add.w	r6, r4, #25
 80060cc:	e7f5      	b.n	80060ba <_printf_i+0x226>
 80060ce:	bf00      	nop
 80060d0:	080081fa 	.word	0x080081fa
 80060d4:	0800820b 	.word	0x0800820b

080060d8 <std>:
 80060d8:	2300      	movs	r3, #0
 80060da:	b510      	push	{r4, lr}
 80060dc:	4604      	mov	r4, r0
 80060de:	e9c0 3300 	strd	r3, r3, [r0]
 80060e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060e6:	6083      	str	r3, [r0, #8]
 80060e8:	8181      	strh	r1, [r0, #12]
 80060ea:	6643      	str	r3, [r0, #100]	; 0x64
 80060ec:	81c2      	strh	r2, [r0, #14]
 80060ee:	6183      	str	r3, [r0, #24]
 80060f0:	4619      	mov	r1, r3
 80060f2:	2208      	movs	r2, #8
 80060f4:	305c      	adds	r0, #92	; 0x5c
 80060f6:	f000 f8f4 	bl	80062e2 <memset>
 80060fa:	4b0d      	ldr	r3, [pc, #52]	; (8006130 <std+0x58>)
 80060fc:	6263      	str	r3, [r4, #36]	; 0x24
 80060fe:	4b0d      	ldr	r3, [pc, #52]	; (8006134 <std+0x5c>)
 8006100:	62a3      	str	r3, [r4, #40]	; 0x28
 8006102:	4b0d      	ldr	r3, [pc, #52]	; (8006138 <std+0x60>)
 8006104:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006106:	4b0d      	ldr	r3, [pc, #52]	; (800613c <std+0x64>)
 8006108:	6323      	str	r3, [r4, #48]	; 0x30
 800610a:	4b0d      	ldr	r3, [pc, #52]	; (8006140 <std+0x68>)
 800610c:	6224      	str	r4, [r4, #32]
 800610e:	429c      	cmp	r4, r3
 8006110:	d006      	beq.n	8006120 <std+0x48>
 8006112:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006116:	4294      	cmp	r4, r2
 8006118:	d002      	beq.n	8006120 <std+0x48>
 800611a:	33d0      	adds	r3, #208	; 0xd0
 800611c:	429c      	cmp	r4, r3
 800611e:	d105      	bne.n	800612c <std+0x54>
 8006120:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006128:	f000 b958 	b.w	80063dc <__retarget_lock_init_recursive>
 800612c:	bd10      	pop	{r4, pc}
 800612e:	bf00      	nop
 8006130:	0800625d 	.word	0x0800625d
 8006134:	0800627f 	.word	0x0800627f
 8006138:	080062b7 	.word	0x080062b7
 800613c:	080062db 	.word	0x080062db
 8006140:	200003d4 	.word	0x200003d4

08006144 <stdio_exit_handler>:
 8006144:	4a02      	ldr	r2, [pc, #8]	; (8006150 <stdio_exit_handler+0xc>)
 8006146:	4903      	ldr	r1, [pc, #12]	; (8006154 <stdio_exit_handler+0x10>)
 8006148:	4803      	ldr	r0, [pc, #12]	; (8006158 <stdio_exit_handler+0x14>)
 800614a:	f000 b869 	b.w	8006220 <_fwalk_sglue>
 800614e:	bf00      	nop
 8006150:	2000000c 	.word	0x2000000c
 8006154:	08007ae1 	.word	0x08007ae1
 8006158:	20000018 	.word	0x20000018

0800615c <cleanup_stdio>:
 800615c:	6841      	ldr	r1, [r0, #4]
 800615e:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <cleanup_stdio+0x34>)
 8006160:	4299      	cmp	r1, r3
 8006162:	b510      	push	{r4, lr}
 8006164:	4604      	mov	r4, r0
 8006166:	d001      	beq.n	800616c <cleanup_stdio+0x10>
 8006168:	f001 fcba 	bl	8007ae0 <_fflush_r>
 800616c:	68a1      	ldr	r1, [r4, #8]
 800616e:	4b09      	ldr	r3, [pc, #36]	; (8006194 <cleanup_stdio+0x38>)
 8006170:	4299      	cmp	r1, r3
 8006172:	d002      	beq.n	800617a <cleanup_stdio+0x1e>
 8006174:	4620      	mov	r0, r4
 8006176:	f001 fcb3 	bl	8007ae0 <_fflush_r>
 800617a:	68e1      	ldr	r1, [r4, #12]
 800617c:	4b06      	ldr	r3, [pc, #24]	; (8006198 <cleanup_stdio+0x3c>)
 800617e:	4299      	cmp	r1, r3
 8006180:	d004      	beq.n	800618c <cleanup_stdio+0x30>
 8006182:	4620      	mov	r0, r4
 8006184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006188:	f001 bcaa 	b.w	8007ae0 <_fflush_r>
 800618c:	bd10      	pop	{r4, pc}
 800618e:	bf00      	nop
 8006190:	200003d4 	.word	0x200003d4
 8006194:	2000043c 	.word	0x2000043c
 8006198:	200004a4 	.word	0x200004a4

0800619c <global_stdio_init.part.0>:
 800619c:	b510      	push	{r4, lr}
 800619e:	4b0b      	ldr	r3, [pc, #44]	; (80061cc <global_stdio_init.part.0+0x30>)
 80061a0:	4c0b      	ldr	r4, [pc, #44]	; (80061d0 <global_stdio_init.part.0+0x34>)
 80061a2:	4a0c      	ldr	r2, [pc, #48]	; (80061d4 <global_stdio_init.part.0+0x38>)
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	4620      	mov	r0, r4
 80061a8:	2200      	movs	r2, #0
 80061aa:	2104      	movs	r1, #4
 80061ac:	f7ff ff94 	bl	80060d8 <std>
 80061b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80061b4:	2201      	movs	r2, #1
 80061b6:	2109      	movs	r1, #9
 80061b8:	f7ff ff8e 	bl	80060d8 <std>
 80061bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80061c0:	2202      	movs	r2, #2
 80061c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061c6:	2112      	movs	r1, #18
 80061c8:	f7ff bf86 	b.w	80060d8 <std>
 80061cc:	2000050c 	.word	0x2000050c
 80061d0:	200003d4 	.word	0x200003d4
 80061d4:	08006145 	.word	0x08006145

080061d8 <__sfp_lock_acquire>:
 80061d8:	4801      	ldr	r0, [pc, #4]	; (80061e0 <__sfp_lock_acquire+0x8>)
 80061da:	f000 b900 	b.w	80063de <__retarget_lock_acquire_recursive>
 80061de:	bf00      	nop
 80061e0:	20000515 	.word	0x20000515

080061e4 <__sfp_lock_release>:
 80061e4:	4801      	ldr	r0, [pc, #4]	; (80061ec <__sfp_lock_release+0x8>)
 80061e6:	f000 b8fb 	b.w	80063e0 <__retarget_lock_release_recursive>
 80061ea:	bf00      	nop
 80061ec:	20000515 	.word	0x20000515

080061f0 <__sinit>:
 80061f0:	b510      	push	{r4, lr}
 80061f2:	4604      	mov	r4, r0
 80061f4:	f7ff fff0 	bl	80061d8 <__sfp_lock_acquire>
 80061f8:	6a23      	ldr	r3, [r4, #32]
 80061fa:	b11b      	cbz	r3, 8006204 <__sinit+0x14>
 80061fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006200:	f7ff bff0 	b.w	80061e4 <__sfp_lock_release>
 8006204:	4b04      	ldr	r3, [pc, #16]	; (8006218 <__sinit+0x28>)
 8006206:	6223      	str	r3, [r4, #32]
 8006208:	4b04      	ldr	r3, [pc, #16]	; (800621c <__sinit+0x2c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1f5      	bne.n	80061fc <__sinit+0xc>
 8006210:	f7ff ffc4 	bl	800619c <global_stdio_init.part.0>
 8006214:	e7f2      	b.n	80061fc <__sinit+0xc>
 8006216:	bf00      	nop
 8006218:	0800615d 	.word	0x0800615d
 800621c:	2000050c 	.word	0x2000050c

08006220 <_fwalk_sglue>:
 8006220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006224:	4607      	mov	r7, r0
 8006226:	4688      	mov	r8, r1
 8006228:	4614      	mov	r4, r2
 800622a:	2600      	movs	r6, #0
 800622c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006230:	f1b9 0901 	subs.w	r9, r9, #1
 8006234:	d505      	bpl.n	8006242 <_fwalk_sglue+0x22>
 8006236:	6824      	ldr	r4, [r4, #0]
 8006238:	2c00      	cmp	r4, #0
 800623a:	d1f7      	bne.n	800622c <_fwalk_sglue+0xc>
 800623c:	4630      	mov	r0, r6
 800623e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006242:	89ab      	ldrh	r3, [r5, #12]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d907      	bls.n	8006258 <_fwalk_sglue+0x38>
 8006248:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800624c:	3301      	adds	r3, #1
 800624e:	d003      	beq.n	8006258 <_fwalk_sglue+0x38>
 8006250:	4629      	mov	r1, r5
 8006252:	4638      	mov	r0, r7
 8006254:	47c0      	blx	r8
 8006256:	4306      	orrs	r6, r0
 8006258:	3568      	adds	r5, #104	; 0x68
 800625a:	e7e9      	b.n	8006230 <_fwalk_sglue+0x10>

0800625c <__sread>:
 800625c:	b510      	push	{r4, lr}
 800625e:	460c      	mov	r4, r1
 8006260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006264:	f000 f86c 	bl	8006340 <_read_r>
 8006268:	2800      	cmp	r0, #0
 800626a:	bfab      	itete	ge
 800626c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800626e:	89a3      	ldrhlt	r3, [r4, #12]
 8006270:	181b      	addge	r3, r3, r0
 8006272:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006276:	bfac      	ite	ge
 8006278:	6563      	strge	r3, [r4, #84]	; 0x54
 800627a:	81a3      	strhlt	r3, [r4, #12]
 800627c:	bd10      	pop	{r4, pc}

0800627e <__swrite>:
 800627e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006282:	461f      	mov	r7, r3
 8006284:	898b      	ldrh	r3, [r1, #12]
 8006286:	05db      	lsls	r3, r3, #23
 8006288:	4605      	mov	r5, r0
 800628a:	460c      	mov	r4, r1
 800628c:	4616      	mov	r6, r2
 800628e:	d505      	bpl.n	800629c <__swrite+0x1e>
 8006290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006294:	2302      	movs	r3, #2
 8006296:	2200      	movs	r2, #0
 8006298:	f000 f840 	bl	800631c <_lseek_r>
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062a6:	81a3      	strh	r3, [r4, #12]
 80062a8:	4632      	mov	r2, r6
 80062aa:	463b      	mov	r3, r7
 80062ac:	4628      	mov	r0, r5
 80062ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062b2:	f000 b857 	b.w	8006364 <_write_r>

080062b6 <__sseek>:
 80062b6:	b510      	push	{r4, lr}
 80062b8:	460c      	mov	r4, r1
 80062ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062be:	f000 f82d 	bl	800631c <_lseek_r>
 80062c2:	1c43      	adds	r3, r0, #1
 80062c4:	89a3      	ldrh	r3, [r4, #12]
 80062c6:	bf15      	itete	ne
 80062c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80062ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062d2:	81a3      	strheq	r3, [r4, #12]
 80062d4:	bf18      	it	ne
 80062d6:	81a3      	strhne	r3, [r4, #12]
 80062d8:	bd10      	pop	{r4, pc}

080062da <__sclose>:
 80062da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062de:	f000 b80d 	b.w	80062fc <_close_r>

080062e2 <memset>:
 80062e2:	4402      	add	r2, r0
 80062e4:	4603      	mov	r3, r0
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d100      	bne.n	80062ec <memset+0xa>
 80062ea:	4770      	bx	lr
 80062ec:	f803 1b01 	strb.w	r1, [r3], #1
 80062f0:	e7f9      	b.n	80062e6 <memset+0x4>
	...

080062f4 <_localeconv_r>:
 80062f4:	4800      	ldr	r0, [pc, #0]	; (80062f8 <_localeconv_r+0x4>)
 80062f6:	4770      	bx	lr
 80062f8:	20000158 	.word	0x20000158

080062fc <_close_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4d06      	ldr	r5, [pc, #24]	; (8006318 <_close_r+0x1c>)
 8006300:	2300      	movs	r3, #0
 8006302:	4604      	mov	r4, r0
 8006304:	4608      	mov	r0, r1
 8006306:	602b      	str	r3, [r5, #0]
 8006308:	f7fb fabd 	bl	8001886 <_close>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d102      	bne.n	8006316 <_close_r+0x1a>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	b103      	cbz	r3, 8006316 <_close_r+0x1a>
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	bd38      	pop	{r3, r4, r5, pc}
 8006318:	20000510 	.word	0x20000510

0800631c <_lseek_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	4d07      	ldr	r5, [pc, #28]	; (800633c <_lseek_r+0x20>)
 8006320:	4604      	mov	r4, r0
 8006322:	4608      	mov	r0, r1
 8006324:	4611      	mov	r1, r2
 8006326:	2200      	movs	r2, #0
 8006328:	602a      	str	r2, [r5, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	f7fb fad2 	bl	80018d4 <_lseek>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d102      	bne.n	800633a <_lseek_r+0x1e>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	b103      	cbz	r3, 800633a <_lseek_r+0x1e>
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	bd38      	pop	{r3, r4, r5, pc}
 800633c:	20000510 	.word	0x20000510

08006340 <_read_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4d07      	ldr	r5, [pc, #28]	; (8006360 <_read_r+0x20>)
 8006344:	4604      	mov	r4, r0
 8006346:	4608      	mov	r0, r1
 8006348:	4611      	mov	r1, r2
 800634a:	2200      	movs	r2, #0
 800634c:	602a      	str	r2, [r5, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	f7fb fa60 	bl	8001814 <_read>
 8006354:	1c43      	adds	r3, r0, #1
 8006356:	d102      	bne.n	800635e <_read_r+0x1e>
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	b103      	cbz	r3, 800635e <_read_r+0x1e>
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	bd38      	pop	{r3, r4, r5, pc}
 8006360:	20000510 	.word	0x20000510

08006364 <_write_r>:
 8006364:	b538      	push	{r3, r4, r5, lr}
 8006366:	4d07      	ldr	r5, [pc, #28]	; (8006384 <_write_r+0x20>)
 8006368:	4604      	mov	r4, r0
 800636a:	4608      	mov	r0, r1
 800636c:	4611      	mov	r1, r2
 800636e:	2200      	movs	r2, #0
 8006370:	602a      	str	r2, [r5, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	f7fb fa6b 	bl	800184e <_write>
 8006378:	1c43      	adds	r3, r0, #1
 800637a:	d102      	bne.n	8006382 <_write_r+0x1e>
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	b103      	cbz	r3, 8006382 <_write_r+0x1e>
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	20000510 	.word	0x20000510

08006388 <__errno>:
 8006388:	4b01      	ldr	r3, [pc, #4]	; (8006390 <__errno+0x8>)
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	20000064 	.word	0x20000064

08006394 <__libc_init_array>:
 8006394:	b570      	push	{r4, r5, r6, lr}
 8006396:	4d0d      	ldr	r5, [pc, #52]	; (80063cc <__libc_init_array+0x38>)
 8006398:	4c0d      	ldr	r4, [pc, #52]	; (80063d0 <__libc_init_array+0x3c>)
 800639a:	1b64      	subs	r4, r4, r5
 800639c:	10a4      	asrs	r4, r4, #2
 800639e:	2600      	movs	r6, #0
 80063a0:	42a6      	cmp	r6, r4
 80063a2:	d109      	bne.n	80063b8 <__libc_init_array+0x24>
 80063a4:	4d0b      	ldr	r5, [pc, #44]	; (80063d4 <__libc_init_array+0x40>)
 80063a6:	4c0c      	ldr	r4, [pc, #48]	; (80063d8 <__libc_init_array+0x44>)
 80063a8:	f001 feee 	bl	8008188 <_init>
 80063ac:	1b64      	subs	r4, r4, r5
 80063ae:	10a4      	asrs	r4, r4, #2
 80063b0:	2600      	movs	r6, #0
 80063b2:	42a6      	cmp	r6, r4
 80063b4:	d105      	bne.n	80063c2 <__libc_init_array+0x2e>
 80063b6:	bd70      	pop	{r4, r5, r6, pc}
 80063b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063bc:	4798      	blx	r3
 80063be:	3601      	adds	r6, #1
 80063c0:	e7ee      	b.n	80063a0 <__libc_init_array+0xc>
 80063c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c6:	4798      	blx	r3
 80063c8:	3601      	adds	r6, #1
 80063ca:	e7f2      	b.n	80063b2 <__libc_init_array+0x1e>
 80063cc:	08008564 	.word	0x08008564
 80063d0:	08008564 	.word	0x08008564
 80063d4:	08008564 	.word	0x08008564
 80063d8:	08008568 	.word	0x08008568

080063dc <__retarget_lock_init_recursive>:
 80063dc:	4770      	bx	lr

080063de <__retarget_lock_acquire_recursive>:
 80063de:	4770      	bx	lr

080063e0 <__retarget_lock_release_recursive>:
 80063e0:	4770      	bx	lr

080063e2 <quorem>:
 80063e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e6:	6903      	ldr	r3, [r0, #16]
 80063e8:	690c      	ldr	r4, [r1, #16]
 80063ea:	42a3      	cmp	r3, r4
 80063ec:	4607      	mov	r7, r0
 80063ee:	db7e      	blt.n	80064ee <quorem+0x10c>
 80063f0:	3c01      	subs	r4, #1
 80063f2:	f101 0814 	add.w	r8, r1, #20
 80063f6:	f100 0514 	add.w	r5, r0, #20
 80063fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063fe:	9301      	str	r3, [sp, #4]
 8006400:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006404:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006408:	3301      	adds	r3, #1
 800640a:	429a      	cmp	r2, r3
 800640c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006410:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006414:	fbb2 f6f3 	udiv	r6, r2, r3
 8006418:	d331      	bcc.n	800647e <quorem+0x9c>
 800641a:	f04f 0e00 	mov.w	lr, #0
 800641e:	4640      	mov	r0, r8
 8006420:	46ac      	mov	ip, r5
 8006422:	46f2      	mov	sl, lr
 8006424:	f850 2b04 	ldr.w	r2, [r0], #4
 8006428:	b293      	uxth	r3, r2
 800642a:	fb06 e303 	mla	r3, r6, r3, lr
 800642e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006432:	0c1a      	lsrs	r2, r3, #16
 8006434:	b29b      	uxth	r3, r3
 8006436:	ebaa 0303 	sub.w	r3, sl, r3
 800643a:	f8dc a000 	ldr.w	sl, [ip]
 800643e:	fa13 f38a 	uxtah	r3, r3, sl
 8006442:	fb06 220e 	mla	r2, r6, lr, r2
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	9b00      	ldr	r3, [sp, #0]
 800644a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800644e:	b292      	uxth	r2, r2
 8006450:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006454:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006458:	f8bd 3000 	ldrh.w	r3, [sp]
 800645c:	4581      	cmp	r9, r0
 800645e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006462:	f84c 3b04 	str.w	r3, [ip], #4
 8006466:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800646a:	d2db      	bcs.n	8006424 <quorem+0x42>
 800646c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006470:	b92b      	cbnz	r3, 800647e <quorem+0x9c>
 8006472:	9b01      	ldr	r3, [sp, #4]
 8006474:	3b04      	subs	r3, #4
 8006476:	429d      	cmp	r5, r3
 8006478:	461a      	mov	r2, r3
 800647a:	d32c      	bcc.n	80064d6 <quorem+0xf4>
 800647c:	613c      	str	r4, [r7, #16]
 800647e:	4638      	mov	r0, r7
 8006480:	f001 f9a8 	bl	80077d4 <__mcmp>
 8006484:	2800      	cmp	r0, #0
 8006486:	db22      	blt.n	80064ce <quorem+0xec>
 8006488:	3601      	adds	r6, #1
 800648a:	4629      	mov	r1, r5
 800648c:	2000      	movs	r0, #0
 800648e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006492:	f8d1 c000 	ldr.w	ip, [r1]
 8006496:	b293      	uxth	r3, r2
 8006498:	1ac3      	subs	r3, r0, r3
 800649a:	0c12      	lsrs	r2, r2, #16
 800649c:	fa13 f38c 	uxtah	r3, r3, ip
 80064a0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80064a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064ae:	45c1      	cmp	r9, r8
 80064b0:	f841 3b04 	str.w	r3, [r1], #4
 80064b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064b8:	d2e9      	bcs.n	800648e <quorem+0xac>
 80064ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064c2:	b922      	cbnz	r2, 80064ce <quorem+0xec>
 80064c4:	3b04      	subs	r3, #4
 80064c6:	429d      	cmp	r5, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	d30a      	bcc.n	80064e2 <quorem+0x100>
 80064cc:	613c      	str	r4, [r7, #16]
 80064ce:	4630      	mov	r0, r6
 80064d0:	b003      	add	sp, #12
 80064d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d6:	6812      	ldr	r2, [r2, #0]
 80064d8:	3b04      	subs	r3, #4
 80064da:	2a00      	cmp	r2, #0
 80064dc:	d1ce      	bne.n	800647c <quorem+0x9a>
 80064de:	3c01      	subs	r4, #1
 80064e0:	e7c9      	b.n	8006476 <quorem+0x94>
 80064e2:	6812      	ldr	r2, [r2, #0]
 80064e4:	3b04      	subs	r3, #4
 80064e6:	2a00      	cmp	r2, #0
 80064e8:	d1f0      	bne.n	80064cc <quorem+0xea>
 80064ea:	3c01      	subs	r4, #1
 80064ec:	e7eb      	b.n	80064c6 <quorem+0xe4>
 80064ee:	2000      	movs	r0, #0
 80064f0:	e7ee      	b.n	80064d0 <quorem+0xee>
 80064f2:	0000      	movs	r0, r0
 80064f4:	0000      	movs	r0, r0
	...

080064f8 <_dtoa_r>:
 80064f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fc:	ed2d 8b04 	vpush	{d8-d9}
 8006500:	69c5      	ldr	r5, [r0, #28]
 8006502:	b093      	sub	sp, #76	; 0x4c
 8006504:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006508:	ec57 6b10 	vmov	r6, r7, d0
 800650c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006510:	9107      	str	r1, [sp, #28]
 8006512:	4604      	mov	r4, r0
 8006514:	920a      	str	r2, [sp, #40]	; 0x28
 8006516:	930d      	str	r3, [sp, #52]	; 0x34
 8006518:	b975      	cbnz	r5, 8006538 <_dtoa_r+0x40>
 800651a:	2010      	movs	r0, #16
 800651c:	f000 fe2a 	bl	8007174 <malloc>
 8006520:	4602      	mov	r2, r0
 8006522:	61e0      	str	r0, [r4, #28]
 8006524:	b920      	cbnz	r0, 8006530 <_dtoa_r+0x38>
 8006526:	4bae      	ldr	r3, [pc, #696]	; (80067e0 <_dtoa_r+0x2e8>)
 8006528:	21ef      	movs	r1, #239	; 0xef
 800652a:	48ae      	ldr	r0, [pc, #696]	; (80067e4 <_dtoa_r+0x2ec>)
 800652c:	f001 fb1e 	bl	8007b6c <__assert_func>
 8006530:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006534:	6005      	str	r5, [r0, #0]
 8006536:	60c5      	str	r5, [r0, #12]
 8006538:	69e3      	ldr	r3, [r4, #28]
 800653a:	6819      	ldr	r1, [r3, #0]
 800653c:	b151      	cbz	r1, 8006554 <_dtoa_r+0x5c>
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	604a      	str	r2, [r1, #4]
 8006542:	2301      	movs	r3, #1
 8006544:	4093      	lsls	r3, r2
 8006546:	608b      	str	r3, [r1, #8]
 8006548:	4620      	mov	r0, r4
 800654a:	f000 ff07 	bl	800735c <_Bfree>
 800654e:	69e3      	ldr	r3, [r4, #28]
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	1e3b      	subs	r3, r7, #0
 8006556:	bfbb      	ittet	lt
 8006558:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800655c:	9303      	strlt	r3, [sp, #12]
 800655e:	2300      	movge	r3, #0
 8006560:	2201      	movlt	r2, #1
 8006562:	bfac      	ite	ge
 8006564:	f8c8 3000 	strge.w	r3, [r8]
 8006568:	f8c8 2000 	strlt.w	r2, [r8]
 800656c:	4b9e      	ldr	r3, [pc, #632]	; (80067e8 <_dtoa_r+0x2f0>)
 800656e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006572:	ea33 0308 	bics.w	r3, r3, r8
 8006576:	d11b      	bne.n	80065b0 <_dtoa_r+0xb8>
 8006578:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800657a:	f242 730f 	movw	r3, #9999	; 0x270f
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006584:	4333      	orrs	r3, r6
 8006586:	f000 8593 	beq.w	80070b0 <_dtoa_r+0xbb8>
 800658a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800658c:	b963      	cbnz	r3, 80065a8 <_dtoa_r+0xb0>
 800658e:	4b97      	ldr	r3, [pc, #604]	; (80067ec <_dtoa_r+0x2f4>)
 8006590:	e027      	b.n	80065e2 <_dtoa_r+0xea>
 8006592:	4b97      	ldr	r3, [pc, #604]	; (80067f0 <_dtoa_r+0x2f8>)
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	3308      	adds	r3, #8
 8006598:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800659a:	6013      	str	r3, [r2, #0]
 800659c:	9800      	ldr	r0, [sp, #0]
 800659e:	b013      	add	sp, #76	; 0x4c
 80065a0:	ecbd 8b04 	vpop	{d8-d9}
 80065a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a8:	4b90      	ldr	r3, [pc, #576]	; (80067ec <_dtoa_r+0x2f4>)
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	3303      	adds	r3, #3
 80065ae:	e7f3      	b.n	8006598 <_dtoa_r+0xa0>
 80065b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80065b4:	2200      	movs	r2, #0
 80065b6:	ec51 0b17 	vmov	r0, r1, d7
 80065ba:	eeb0 8a47 	vmov.f32	s16, s14
 80065be:	eef0 8a67 	vmov.f32	s17, s15
 80065c2:	2300      	movs	r3, #0
 80065c4:	f7fa fa80 	bl	8000ac8 <__aeabi_dcmpeq>
 80065c8:	4681      	mov	r9, r0
 80065ca:	b160      	cbz	r0, 80065e6 <_dtoa_r+0xee>
 80065cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065ce:	2301      	movs	r3, #1
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8568 	beq.w	80070aa <_dtoa_r+0xbb2>
 80065da:	4b86      	ldr	r3, [pc, #536]	; (80067f4 <_dtoa_r+0x2fc>)
 80065dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	e7da      	b.n	800659c <_dtoa_r+0xa4>
 80065e6:	aa10      	add	r2, sp, #64	; 0x40
 80065e8:	a911      	add	r1, sp, #68	; 0x44
 80065ea:	4620      	mov	r0, r4
 80065ec:	eeb0 0a48 	vmov.f32	s0, s16
 80065f0:	eef0 0a68 	vmov.f32	s1, s17
 80065f4:	f001 f994 	bl	8007920 <__d2b>
 80065f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80065fc:	4682      	mov	sl, r0
 80065fe:	2d00      	cmp	r5, #0
 8006600:	d07f      	beq.n	8006702 <_dtoa_r+0x20a>
 8006602:	ee18 3a90 	vmov	r3, s17
 8006606:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800660a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800660e:	ec51 0b18 	vmov	r0, r1, d8
 8006612:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006616:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800661a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800661e:	4619      	mov	r1, r3
 8006620:	2200      	movs	r2, #0
 8006622:	4b75      	ldr	r3, [pc, #468]	; (80067f8 <_dtoa_r+0x300>)
 8006624:	f7f9 fe30 	bl	8000288 <__aeabi_dsub>
 8006628:	a367      	add	r3, pc, #412	; (adr r3, 80067c8 <_dtoa_r+0x2d0>)
 800662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662e:	f7f9 ffe3 	bl	80005f8 <__aeabi_dmul>
 8006632:	a367      	add	r3, pc, #412	; (adr r3, 80067d0 <_dtoa_r+0x2d8>)
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	f7f9 fe28 	bl	800028c <__adddf3>
 800663c:	4606      	mov	r6, r0
 800663e:	4628      	mov	r0, r5
 8006640:	460f      	mov	r7, r1
 8006642:	f7f9 ff6f 	bl	8000524 <__aeabi_i2d>
 8006646:	a364      	add	r3, pc, #400	; (adr r3, 80067d8 <_dtoa_r+0x2e0>)
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f7f9 ffd4 	bl	80005f8 <__aeabi_dmul>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4630      	mov	r0, r6
 8006656:	4639      	mov	r1, r7
 8006658:	f7f9 fe18 	bl	800028c <__adddf3>
 800665c:	4606      	mov	r6, r0
 800665e:	460f      	mov	r7, r1
 8006660:	f7fa fa7a 	bl	8000b58 <__aeabi_d2iz>
 8006664:	2200      	movs	r2, #0
 8006666:	4683      	mov	fp, r0
 8006668:	2300      	movs	r3, #0
 800666a:	4630      	mov	r0, r6
 800666c:	4639      	mov	r1, r7
 800666e:	f7fa fa35 	bl	8000adc <__aeabi_dcmplt>
 8006672:	b148      	cbz	r0, 8006688 <_dtoa_r+0x190>
 8006674:	4658      	mov	r0, fp
 8006676:	f7f9 ff55 	bl	8000524 <__aeabi_i2d>
 800667a:	4632      	mov	r2, r6
 800667c:	463b      	mov	r3, r7
 800667e:	f7fa fa23 	bl	8000ac8 <__aeabi_dcmpeq>
 8006682:	b908      	cbnz	r0, 8006688 <_dtoa_r+0x190>
 8006684:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006688:	f1bb 0f16 	cmp.w	fp, #22
 800668c:	d857      	bhi.n	800673e <_dtoa_r+0x246>
 800668e:	4b5b      	ldr	r3, [pc, #364]	; (80067fc <_dtoa_r+0x304>)
 8006690:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006698:	ec51 0b18 	vmov	r0, r1, d8
 800669c:	f7fa fa1e 	bl	8000adc <__aeabi_dcmplt>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d04e      	beq.n	8006742 <_dtoa_r+0x24a>
 80066a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066a8:	2300      	movs	r3, #0
 80066aa:	930c      	str	r3, [sp, #48]	; 0x30
 80066ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066ae:	1b5b      	subs	r3, r3, r5
 80066b0:	1e5a      	subs	r2, r3, #1
 80066b2:	bf45      	ittet	mi
 80066b4:	f1c3 0301 	rsbmi	r3, r3, #1
 80066b8:	9305      	strmi	r3, [sp, #20]
 80066ba:	2300      	movpl	r3, #0
 80066bc:	2300      	movmi	r3, #0
 80066be:	9206      	str	r2, [sp, #24]
 80066c0:	bf54      	ite	pl
 80066c2:	9305      	strpl	r3, [sp, #20]
 80066c4:	9306      	strmi	r3, [sp, #24]
 80066c6:	f1bb 0f00 	cmp.w	fp, #0
 80066ca:	db3c      	blt.n	8006746 <_dtoa_r+0x24e>
 80066cc:	9b06      	ldr	r3, [sp, #24]
 80066ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80066d2:	445b      	add	r3, fp
 80066d4:	9306      	str	r3, [sp, #24]
 80066d6:	2300      	movs	r3, #0
 80066d8:	9308      	str	r3, [sp, #32]
 80066da:	9b07      	ldr	r3, [sp, #28]
 80066dc:	2b09      	cmp	r3, #9
 80066de:	d868      	bhi.n	80067b2 <_dtoa_r+0x2ba>
 80066e0:	2b05      	cmp	r3, #5
 80066e2:	bfc4      	itt	gt
 80066e4:	3b04      	subgt	r3, #4
 80066e6:	9307      	strgt	r3, [sp, #28]
 80066e8:	9b07      	ldr	r3, [sp, #28]
 80066ea:	f1a3 0302 	sub.w	r3, r3, #2
 80066ee:	bfcc      	ite	gt
 80066f0:	2500      	movgt	r5, #0
 80066f2:	2501      	movle	r5, #1
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	f200 8085 	bhi.w	8006804 <_dtoa_r+0x30c>
 80066fa:	e8df f003 	tbb	[pc, r3]
 80066fe:	3b2e      	.short	0x3b2e
 8006700:	5839      	.short	0x5839
 8006702:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006706:	441d      	add	r5, r3
 8006708:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800670c:	2b20      	cmp	r3, #32
 800670e:	bfc1      	itttt	gt
 8006710:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006714:	fa08 f803 	lslgt.w	r8, r8, r3
 8006718:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800671c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006720:	bfd6      	itet	le
 8006722:	f1c3 0320 	rsble	r3, r3, #32
 8006726:	ea48 0003 	orrgt.w	r0, r8, r3
 800672a:	fa06 f003 	lslle.w	r0, r6, r3
 800672e:	f7f9 fee9 	bl	8000504 <__aeabi_ui2d>
 8006732:	2201      	movs	r2, #1
 8006734:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006738:	3d01      	subs	r5, #1
 800673a:	920e      	str	r2, [sp, #56]	; 0x38
 800673c:	e76f      	b.n	800661e <_dtoa_r+0x126>
 800673e:	2301      	movs	r3, #1
 8006740:	e7b3      	b.n	80066aa <_dtoa_r+0x1b2>
 8006742:	900c      	str	r0, [sp, #48]	; 0x30
 8006744:	e7b2      	b.n	80066ac <_dtoa_r+0x1b4>
 8006746:	9b05      	ldr	r3, [sp, #20]
 8006748:	eba3 030b 	sub.w	r3, r3, fp
 800674c:	9305      	str	r3, [sp, #20]
 800674e:	f1cb 0300 	rsb	r3, fp, #0
 8006752:	9308      	str	r3, [sp, #32]
 8006754:	2300      	movs	r3, #0
 8006756:	930b      	str	r3, [sp, #44]	; 0x2c
 8006758:	e7bf      	b.n	80066da <_dtoa_r+0x1e2>
 800675a:	2300      	movs	r3, #0
 800675c:	9309      	str	r3, [sp, #36]	; 0x24
 800675e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006760:	2b00      	cmp	r3, #0
 8006762:	dc52      	bgt.n	800680a <_dtoa_r+0x312>
 8006764:	2301      	movs	r3, #1
 8006766:	9301      	str	r3, [sp, #4]
 8006768:	9304      	str	r3, [sp, #16]
 800676a:	461a      	mov	r2, r3
 800676c:	920a      	str	r2, [sp, #40]	; 0x28
 800676e:	e00b      	b.n	8006788 <_dtoa_r+0x290>
 8006770:	2301      	movs	r3, #1
 8006772:	e7f3      	b.n	800675c <_dtoa_r+0x264>
 8006774:	2300      	movs	r3, #0
 8006776:	9309      	str	r3, [sp, #36]	; 0x24
 8006778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800677a:	445b      	add	r3, fp
 800677c:	9301      	str	r3, [sp, #4]
 800677e:	3301      	adds	r3, #1
 8006780:	2b01      	cmp	r3, #1
 8006782:	9304      	str	r3, [sp, #16]
 8006784:	bfb8      	it	lt
 8006786:	2301      	movlt	r3, #1
 8006788:	69e0      	ldr	r0, [r4, #28]
 800678a:	2100      	movs	r1, #0
 800678c:	2204      	movs	r2, #4
 800678e:	f102 0614 	add.w	r6, r2, #20
 8006792:	429e      	cmp	r6, r3
 8006794:	d93d      	bls.n	8006812 <_dtoa_r+0x31a>
 8006796:	6041      	str	r1, [r0, #4]
 8006798:	4620      	mov	r0, r4
 800679a:	f000 fd9f 	bl	80072dc <_Balloc>
 800679e:	9000      	str	r0, [sp, #0]
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d139      	bne.n	8006818 <_dtoa_r+0x320>
 80067a4:	4b16      	ldr	r3, [pc, #88]	; (8006800 <_dtoa_r+0x308>)
 80067a6:	4602      	mov	r2, r0
 80067a8:	f240 11af 	movw	r1, #431	; 0x1af
 80067ac:	e6bd      	b.n	800652a <_dtoa_r+0x32>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e7e1      	b.n	8006776 <_dtoa_r+0x27e>
 80067b2:	2501      	movs	r5, #1
 80067b4:	2300      	movs	r3, #0
 80067b6:	9307      	str	r3, [sp, #28]
 80067b8:	9509      	str	r5, [sp, #36]	; 0x24
 80067ba:	f04f 33ff 	mov.w	r3, #4294967295
 80067be:	9301      	str	r3, [sp, #4]
 80067c0:	9304      	str	r3, [sp, #16]
 80067c2:	2200      	movs	r2, #0
 80067c4:	2312      	movs	r3, #18
 80067c6:	e7d1      	b.n	800676c <_dtoa_r+0x274>
 80067c8:	636f4361 	.word	0x636f4361
 80067cc:	3fd287a7 	.word	0x3fd287a7
 80067d0:	8b60c8b3 	.word	0x8b60c8b3
 80067d4:	3fc68a28 	.word	0x3fc68a28
 80067d8:	509f79fb 	.word	0x509f79fb
 80067dc:	3fd34413 	.word	0x3fd34413
 80067e0:	08008229 	.word	0x08008229
 80067e4:	08008240 	.word	0x08008240
 80067e8:	7ff00000 	.word	0x7ff00000
 80067ec:	08008225 	.word	0x08008225
 80067f0:	0800821c 	.word	0x0800821c
 80067f4:	080081f9 	.word	0x080081f9
 80067f8:	3ff80000 	.word	0x3ff80000
 80067fc:	08008330 	.word	0x08008330
 8006800:	08008298 	.word	0x08008298
 8006804:	2301      	movs	r3, #1
 8006806:	9309      	str	r3, [sp, #36]	; 0x24
 8006808:	e7d7      	b.n	80067ba <_dtoa_r+0x2c2>
 800680a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800680c:	9301      	str	r3, [sp, #4]
 800680e:	9304      	str	r3, [sp, #16]
 8006810:	e7ba      	b.n	8006788 <_dtoa_r+0x290>
 8006812:	3101      	adds	r1, #1
 8006814:	0052      	lsls	r2, r2, #1
 8006816:	e7ba      	b.n	800678e <_dtoa_r+0x296>
 8006818:	69e3      	ldr	r3, [r4, #28]
 800681a:	9a00      	ldr	r2, [sp, #0]
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	9b04      	ldr	r3, [sp, #16]
 8006820:	2b0e      	cmp	r3, #14
 8006822:	f200 80a8 	bhi.w	8006976 <_dtoa_r+0x47e>
 8006826:	2d00      	cmp	r5, #0
 8006828:	f000 80a5 	beq.w	8006976 <_dtoa_r+0x47e>
 800682c:	f1bb 0f00 	cmp.w	fp, #0
 8006830:	dd38      	ble.n	80068a4 <_dtoa_r+0x3ac>
 8006832:	4bc0      	ldr	r3, [pc, #768]	; (8006b34 <_dtoa_r+0x63c>)
 8006834:	f00b 020f 	and.w	r2, fp, #15
 8006838:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800683c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006840:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006844:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006848:	d019      	beq.n	800687e <_dtoa_r+0x386>
 800684a:	4bbb      	ldr	r3, [pc, #748]	; (8006b38 <_dtoa_r+0x640>)
 800684c:	ec51 0b18 	vmov	r0, r1, d8
 8006850:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006854:	f7f9 fffa 	bl	800084c <__aeabi_ddiv>
 8006858:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800685c:	f008 080f 	and.w	r8, r8, #15
 8006860:	2503      	movs	r5, #3
 8006862:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006b38 <_dtoa_r+0x640>
 8006866:	f1b8 0f00 	cmp.w	r8, #0
 800686a:	d10a      	bne.n	8006882 <_dtoa_r+0x38a>
 800686c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006870:	4632      	mov	r2, r6
 8006872:	463b      	mov	r3, r7
 8006874:	f7f9 ffea 	bl	800084c <__aeabi_ddiv>
 8006878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800687c:	e02b      	b.n	80068d6 <_dtoa_r+0x3de>
 800687e:	2502      	movs	r5, #2
 8006880:	e7ef      	b.n	8006862 <_dtoa_r+0x36a>
 8006882:	f018 0f01 	tst.w	r8, #1
 8006886:	d008      	beq.n	800689a <_dtoa_r+0x3a2>
 8006888:	4630      	mov	r0, r6
 800688a:	4639      	mov	r1, r7
 800688c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006890:	f7f9 feb2 	bl	80005f8 <__aeabi_dmul>
 8006894:	3501      	adds	r5, #1
 8006896:	4606      	mov	r6, r0
 8006898:	460f      	mov	r7, r1
 800689a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800689e:	f109 0908 	add.w	r9, r9, #8
 80068a2:	e7e0      	b.n	8006866 <_dtoa_r+0x36e>
 80068a4:	f000 809f 	beq.w	80069e6 <_dtoa_r+0x4ee>
 80068a8:	f1cb 0600 	rsb	r6, fp, #0
 80068ac:	4ba1      	ldr	r3, [pc, #644]	; (8006b34 <_dtoa_r+0x63c>)
 80068ae:	4fa2      	ldr	r7, [pc, #648]	; (8006b38 <_dtoa_r+0x640>)
 80068b0:	f006 020f 	and.w	r2, r6, #15
 80068b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068bc:	ec51 0b18 	vmov	r0, r1, d8
 80068c0:	f7f9 fe9a 	bl	80005f8 <__aeabi_dmul>
 80068c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068c8:	1136      	asrs	r6, r6, #4
 80068ca:	2300      	movs	r3, #0
 80068cc:	2502      	movs	r5, #2
 80068ce:	2e00      	cmp	r6, #0
 80068d0:	d17e      	bne.n	80069d0 <_dtoa_r+0x4d8>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1d0      	bne.n	8006878 <_dtoa_r+0x380>
 80068d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 8084 	beq.w	80069ea <_dtoa_r+0x4f2>
 80068e2:	4b96      	ldr	r3, [pc, #600]	; (8006b3c <_dtoa_r+0x644>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	4640      	mov	r0, r8
 80068e8:	4649      	mov	r1, r9
 80068ea:	f7fa f8f7 	bl	8000adc <__aeabi_dcmplt>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	d07b      	beq.n	80069ea <_dtoa_r+0x4f2>
 80068f2:	9b04      	ldr	r3, [sp, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d078      	beq.n	80069ea <_dtoa_r+0x4f2>
 80068f8:	9b01      	ldr	r3, [sp, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	dd39      	ble.n	8006972 <_dtoa_r+0x47a>
 80068fe:	4b90      	ldr	r3, [pc, #576]	; (8006b40 <_dtoa_r+0x648>)
 8006900:	2200      	movs	r2, #0
 8006902:	4640      	mov	r0, r8
 8006904:	4649      	mov	r1, r9
 8006906:	f7f9 fe77 	bl	80005f8 <__aeabi_dmul>
 800690a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800690e:	9e01      	ldr	r6, [sp, #4]
 8006910:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006914:	3501      	adds	r5, #1
 8006916:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800691a:	4628      	mov	r0, r5
 800691c:	f7f9 fe02 	bl	8000524 <__aeabi_i2d>
 8006920:	4642      	mov	r2, r8
 8006922:	464b      	mov	r3, r9
 8006924:	f7f9 fe68 	bl	80005f8 <__aeabi_dmul>
 8006928:	4b86      	ldr	r3, [pc, #536]	; (8006b44 <_dtoa_r+0x64c>)
 800692a:	2200      	movs	r2, #0
 800692c:	f7f9 fcae 	bl	800028c <__adddf3>
 8006930:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006938:	9303      	str	r3, [sp, #12]
 800693a:	2e00      	cmp	r6, #0
 800693c:	d158      	bne.n	80069f0 <_dtoa_r+0x4f8>
 800693e:	4b82      	ldr	r3, [pc, #520]	; (8006b48 <_dtoa_r+0x650>)
 8006940:	2200      	movs	r2, #0
 8006942:	4640      	mov	r0, r8
 8006944:	4649      	mov	r1, r9
 8006946:	f7f9 fc9f 	bl	8000288 <__aeabi_dsub>
 800694a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800694e:	4680      	mov	r8, r0
 8006950:	4689      	mov	r9, r1
 8006952:	f7fa f8e1 	bl	8000b18 <__aeabi_dcmpgt>
 8006956:	2800      	cmp	r0, #0
 8006958:	f040 8296 	bne.w	8006e88 <_dtoa_r+0x990>
 800695c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006960:	4640      	mov	r0, r8
 8006962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006966:	4649      	mov	r1, r9
 8006968:	f7fa f8b8 	bl	8000adc <__aeabi_dcmplt>
 800696c:	2800      	cmp	r0, #0
 800696e:	f040 8289 	bne.w	8006e84 <_dtoa_r+0x98c>
 8006972:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006976:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006978:	2b00      	cmp	r3, #0
 800697a:	f2c0 814e 	blt.w	8006c1a <_dtoa_r+0x722>
 800697e:	f1bb 0f0e 	cmp.w	fp, #14
 8006982:	f300 814a 	bgt.w	8006c1a <_dtoa_r+0x722>
 8006986:	4b6b      	ldr	r3, [pc, #428]	; (8006b34 <_dtoa_r+0x63c>)
 8006988:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800698c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006992:	2b00      	cmp	r3, #0
 8006994:	f280 80dc 	bge.w	8006b50 <_dtoa_r+0x658>
 8006998:	9b04      	ldr	r3, [sp, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	f300 80d8 	bgt.w	8006b50 <_dtoa_r+0x658>
 80069a0:	f040 826f 	bne.w	8006e82 <_dtoa_r+0x98a>
 80069a4:	4b68      	ldr	r3, [pc, #416]	; (8006b48 <_dtoa_r+0x650>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	4640      	mov	r0, r8
 80069aa:	4649      	mov	r1, r9
 80069ac:	f7f9 fe24 	bl	80005f8 <__aeabi_dmul>
 80069b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069b4:	f7fa f8a6 	bl	8000b04 <__aeabi_dcmpge>
 80069b8:	9e04      	ldr	r6, [sp, #16]
 80069ba:	4637      	mov	r7, r6
 80069bc:	2800      	cmp	r0, #0
 80069be:	f040 8245 	bne.w	8006e4c <_dtoa_r+0x954>
 80069c2:	9d00      	ldr	r5, [sp, #0]
 80069c4:	2331      	movs	r3, #49	; 0x31
 80069c6:	f805 3b01 	strb.w	r3, [r5], #1
 80069ca:	f10b 0b01 	add.w	fp, fp, #1
 80069ce:	e241      	b.n	8006e54 <_dtoa_r+0x95c>
 80069d0:	07f2      	lsls	r2, r6, #31
 80069d2:	d505      	bpl.n	80069e0 <_dtoa_r+0x4e8>
 80069d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069d8:	f7f9 fe0e 	bl	80005f8 <__aeabi_dmul>
 80069dc:	3501      	adds	r5, #1
 80069de:	2301      	movs	r3, #1
 80069e0:	1076      	asrs	r6, r6, #1
 80069e2:	3708      	adds	r7, #8
 80069e4:	e773      	b.n	80068ce <_dtoa_r+0x3d6>
 80069e6:	2502      	movs	r5, #2
 80069e8:	e775      	b.n	80068d6 <_dtoa_r+0x3de>
 80069ea:	9e04      	ldr	r6, [sp, #16]
 80069ec:	465f      	mov	r7, fp
 80069ee:	e792      	b.n	8006916 <_dtoa_r+0x41e>
 80069f0:	9900      	ldr	r1, [sp, #0]
 80069f2:	4b50      	ldr	r3, [pc, #320]	; (8006b34 <_dtoa_r+0x63c>)
 80069f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069f8:	4431      	add	r1, r6
 80069fa:	9102      	str	r1, [sp, #8]
 80069fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069fe:	eeb0 9a47 	vmov.f32	s18, s14
 8006a02:	eef0 9a67 	vmov.f32	s19, s15
 8006a06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a0e:	2900      	cmp	r1, #0
 8006a10:	d044      	beq.n	8006a9c <_dtoa_r+0x5a4>
 8006a12:	494e      	ldr	r1, [pc, #312]	; (8006b4c <_dtoa_r+0x654>)
 8006a14:	2000      	movs	r0, #0
 8006a16:	f7f9 ff19 	bl	800084c <__aeabi_ddiv>
 8006a1a:	ec53 2b19 	vmov	r2, r3, d9
 8006a1e:	f7f9 fc33 	bl	8000288 <__aeabi_dsub>
 8006a22:	9d00      	ldr	r5, [sp, #0]
 8006a24:	ec41 0b19 	vmov	d9, r0, r1
 8006a28:	4649      	mov	r1, r9
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	f7fa f894 	bl	8000b58 <__aeabi_d2iz>
 8006a30:	4606      	mov	r6, r0
 8006a32:	f7f9 fd77 	bl	8000524 <__aeabi_i2d>
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	f7f9 fc23 	bl	8000288 <__aeabi_dsub>
 8006a42:	3630      	adds	r6, #48	; 0x30
 8006a44:	f805 6b01 	strb.w	r6, [r5], #1
 8006a48:	ec53 2b19 	vmov	r2, r3, d9
 8006a4c:	4680      	mov	r8, r0
 8006a4e:	4689      	mov	r9, r1
 8006a50:	f7fa f844 	bl	8000adc <__aeabi_dcmplt>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	d164      	bne.n	8006b22 <_dtoa_r+0x62a>
 8006a58:	4642      	mov	r2, r8
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	4937      	ldr	r1, [pc, #220]	; (8006b3c <_dtoa_r+0x644>)
 8006a5e:	2000      	movs	r0, #0
 8006a60:	f7f9 fc12 	bl	8000288 <__aeabi_dsub>
 8006a64:	ec53 2b19 	vmov	r2, r3, d9
 8006a68:	f7fa f838 	bl	8000adc <__aeabi_dcmplt>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	f040 80b6 	bne.w	8006bde <_dtoa_r+0x6e6>
 8006a72:	9b02      	ldr	r3, [sp, #8]
 8006a74:	429d      	cmp	r5, r3
 8006a76:	f43f af7c 	beq.w	8006972 <_dtoa_r+0x47a>
 8006a7a:	4b31      	ldr	r3, [pc, #196]	; (8006b40 <_dtoa_r+0x648>)
 8006a7c:	ec51 0b19 	vmov	r0, r1, d9
 8006a80:	2200      	movs	r2, #0
 8006a82:	f7f9 fdb9 	bl	80005f8 <__aeabi_dmul>
 8006a86:	4b2e      	ldr	r3, [pc, #184]	; (8006b40 <_dtoa_r+0x648>)
 8006a88:	ec41 0b19 	vmov	d9, r0, r1
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	4640      	mov	r0, r8
 8006a90:	4649      	mov	r1, r9
 8006a92:	f7f9 fdb1 	bl	80005f8 <__aeabi_dmul>
 8006a96:	4680      	mov	r8, r0
 8006a98:	4689      	mov	r9, r1
 8006a9a:	e7c5      	b.n	8006a28 <_dtoa_r+0x530>
 8006a9c:	ec51 0b17 	vmov	r0, r1, d7
 8006aa0:	f7f9 fdaa 	bl	80005f8 <__aeabi_dmul>
 8006aa4:	9b02      	ldr	r3, [sp, #8]
 8006aa6:	9d00      	ldr	r5, [sp, #0]
 8006aa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006aaa:	ec41 0b19 	vmov	d9, r0, r1
 8006aae:	4649      	mov	r1, r9
 8006ab0:	4640      	mov	r0, r8
 8006ab2:	f7fa f851 	bl	8000b58 <__aeabi_d2iz>
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	f7f9 fd34 	bl	8000524 <__aeabi_i2d>
 8006abc:	3630      	adds	r6, #48	; 0x30
 8006abe:	4602      	mov	r2, r0
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	4640      	mov	r0, r8
 8006ac4:	4649      	mov	r1, r9
 8006ac6:	f7f9 fbdf 	bl	8000288 <__aeabi_dsub>
 8006aca:	f805 6b01 	strb.w	r6, [r5], #1
 8006ace:	9b02      	ldr	r3, [sp, #8]
 8006ad0:	429d      	cmp	r5, r3
 8006ad2:	4680      	mov	r8, r0
 8006ad4:	4689      	mov	r9, r1
 8006ad6:	f04f 0200 	mov.w	r2, #0
 8006ada:	d124      	bne.n	8006b26 <_dtoa_r+0x62e>
 8006adc:	4b1b      	ldr	r3, [pc, #108]	; (8006b4c <_dtoa_r+0x654>)
 8006ade:	ec51 0b19 	vmov	r0, r1, d9
 8006ae2:	f7f9 fbd3 	bl	800028c <__adddf3>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4640      	mov	r0, r8
 8006aec:	4649      	mov	r1, r9
 8006aee:	f7fa f813 	bl	8000b18 <__aeabi_dcmpgt>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	d173      	bne.n	8006bde <_dtoa_r+0x6e6>
 8006af6:	ec53 2b19 	vmov	r2, r3, d9
 8006afa:	4914      	ldr	r1, [pc, #80]	; (8006b4c <_dtoa_r+0x654>)
 8006afc:	2000      	movs	r0, #0
 8006afe:	f7f9 fbc3 	bl	8000288 <__aeabi_dsub>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	4640      	mov	r0, r8
 8006b08:	4649      	mov	r1, r9
 8006b0a:	f7f9 ffe7 	bl	8000adc <__aeabi_dcmplt>
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	f43f af2f 	beq.w	8006972 <_dtoa_r+0x47a>
 8006b14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b16:	1e6b      	subs	r3, r5, #1
 8006b18:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b1e:	2b30      	cmp	r3, #48	; 0x30
 8006b20:	d0f8      	beq.n	8006b14 <_dtoa_r+0x61c>
 8006b22:	46bb      	mov	fp, r7
 8006b24:	e04a      	b.n	8006bbc <_dtoa_r+0x6c4>
 8006b26:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <_dtoa_r+0x648>)
 8006b28:	f7f9 fd66 	bl	80005f8 <__aeabi_dmul>
 8006b2c:	4680      	mov	r8, r0
 8006b2e:	4689      	mov	r9, r1
 8006b30:	e7bd      	b.n	8006aae <_dtoa_r+0x5b6>
 8006b32:	bf00      	nop
 8006b34:	08008330 	.word	0x08008330
 8006b38:	08008308 	.word	0x08008308
 8006b3c:	3ff00000 	.word	0x3ff00000
 8006b40:	40240000 	.word	0x40240000
 8006b44:	401c0000 	.word	0x401c0000
 8006b48:	40140000 	.word	0x40140000
 8006b4c:	3fe00000 	.word	0x3fe00000
 8006b50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b54:	9d00      	ldr	r5, [sp, #0]
 8006b56:	4642      	mov	r2, r8
 8006b58:	464b      	mov	r3, r9
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	4639      	mov	r1, r7
 8006b5e:	f7f9 fe75 	bl	800084c <__aeabi_ddiv>
 8006b62:	f7f9 fff9 	bl	8000b58 <__aeabi_d2iz>
 8006b66:	9001      	str	r0, [sp, #4]
 8006b68:	f7f9 fcdc 	bl	8000524 <__aeabi_i2d>
 8006b6c:	4642      	mov	r2, r8
 8006b6e:	464b      	mov	r3, r9
 8006b70:	f7f9 fd42 	bl	80005f8 <__aeabi_dmul>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	4630      	mov	r0, r6
 8006b7a:	4639      	mov	r1, r7
 8006b7c:	f7f9 fb84 	bl	8000288 <__aeabi_dsub>
 8006b80:	9e01      	ldr	r6, [sp, #4]
 8006b82:	9f04      	ldr	r7, [sp, #16]
 8006b84:	3630      	adds	r6, #48	; 0x30
 8006b86:	f805 6b01 	strb.w	r6, [r5], #1
 8006b8a:	9e00      	ldr	r6, [sp, #0]
 8006b8c:	1bae      	subs	r6, r5, r6
 8006b8e:	42b7      	cmp	r7, r6
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	d134      	bne.n	8006c00 <_dtoa_r+0x708>
 8006b96:	f7f9 fb79 	bl	800028c <__adddf3>
 8006b9a:	4642      	mov	r2, r8
 8006b9c:	464b      	mov	r3, r9
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	460f      	mov	r7, r1
 8006ba2:	f7f9 ffb9 	bl	8000b18 <__aeabi_dcmpgt>
 8006ba6:	b9c8      	cbnz	r0, 8006bdc <_dtoa_r+0x6e4>
 8006ba8:	4642      	mov	r2, r8
 8006baa:	464b      	mov	r3, r9
 8006bac:	4630      	mov	r0, r6
 8006bae:	4639      	mov	r1, r7
 8006bb0:	f7f9 ff8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bb4:	b110      	cbz	r0, 8006bbc <_dtoa_r+0x6c4>
 8006bb6:	9b01      	ldr	r3, [sp, #4]
 8006bb8:	07db      	lsls	r3, r3, #31
 8006bba:	d40f      	bmi.n	8006bdc <_dtoa_r+0x6e4>
 8006bbc:	4651      	mov	r1, sl
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f000 fbcc 	bl	800735c <_Bfree>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bc8:	702b      	strb	r3, [r5, #0]
 8006bca:	f10b 0301 	add.w	r3, fp, #1
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f43f ace2 	beq.w	800659c <_dtoa_r+0xa4>
 8006bd8:	601d      	str	r5, [r3, #0]
 8006bda:	e4df      	b.n	800659c <_dtoa_r+0xa4>
 8006bdc:	465f      	mov	r7, fp
 8006bde:	462b      	mov	r3, r5
 8006be0:	461d      	mov	r5, r3
 8006be2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006be6:	2a39      	cmp	r2, #57	; 0x39
 8006be8:	d106      	bne.n	8006bf8 <_dtoa_r+0x700>
 8006bea:	9a00      	ldr	r2, [sp, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d1f7      	bne.n	8006be0 <_dtoa_r+0x6e8>
 8006bf0:	9900      	ldr	r1, [sp, #0]
 8006bf2:	2230      	movs	r2, #48	; 0x30
 8006bf4:	3701      	adds	r7, #1
 8006bf6:	700a      	strb	r2, [r1, #0]
 8006bf8:	781a      	ldrb	r2, [r3, #0]
 8006bfa:	3201      	adds	r2, #1
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	e790      	b.n	8006b22 <_dtoa_r+0x62a>
 8006c00:	4ba3      	ldr	r3, [pc, #652]	; (8006e90 <_dtoa_r+0x998>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	f7f9 fcf8 	bl	80005f8 <__aeabi_dmul>
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	4606      	mov	r6, r0
 8006c0e:	460f      	mov	r7, r1
 8006c10:	f7f9 ff5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d09e      	beq.n	8006b56 <_dtoa_r+0x65e>
 8006c18:	e7d0      	b.n	8006bbc <_dtoa_r+0x6c4>
 8006c1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c1c:	2a00      	cmp	r2, #0
 8006c1e:	f000 80ca 	beq.w	8006db6 <_dtoa_r+0x8be>
 8006c22:	9a07      	ldr	r2, [sp, #28]
 8006c24:	2a01      	cmp	r2, #1
 8006c26:	f300 80ad 	bgt.w	8006d84 <_dtoa_r+0x88c>
 8006c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c2c:	2a00      	cmp	r2, #0
 8006c2e:	f000 80a5 	beq.w	8006d7c <_dtoa_r+0x884>
 8006c32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c36:	9e08      	ldr	r6, [sp, #32]
 8006c38:	9d05      	ldr	r5, [sp, #20]
 8006c3a:	9a05      	ldr	r2, [sp, #20]
 8006c3c:	441a      	add	r2, r3
 8006c3e:	9205      	str	r2, [sp, #20]
 8006c40:	9a06      	ldr	r2, [sp, #24]
 8006c42:	2101      	movs	r1, #1
 8006c44:	441a      	add	r2, r3
 8006c46:	4620      	mov	r0, r4
 8006c48:	9206      	str	r2, [sp, #24]
 8006c4a:	f000 fc3d 	bl	80074c8 <__i2b>
 8006c4e:	4607      	mov	r7, r0
 8006c50:	b165      	cbz	r5, 8006c6c <_dtoa_r+0x774>
 8006c52:	9b06      	ldr	r3, [sp, #24]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	dd09      	ble.n	8006c6c <_dtoa_r+0x774>
 8006c58:	42ab      	cmp	r3, r5
 8006c5a:	9a05      	ldr	r2, [sp, #20]
 8006c5c:	bfa8      	it	ge
 8006c5e:	462b      	movge	r3, r5
 8006c60:	1ad2      	subs	r2, r2, r3
 8006c62:	9205      	str	r2, [sp, #20]
 8006c64:	9a06      	ldr	r2, [sp, #24]
 8006c66:	1aed      	subs	r5, r5, r3
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	9306      	str	r3, [sp, #24]
 8006c6c:	9b08      	ldr	r3, [sp, #32]
 8006c6e:	b1f3      	cbz	r3, 8006cae <_dtoa_r+0x7b6>
 8006c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 80a3 	beq.w	8006dbe <_dtoa_r+0x8c6>
 8006c78:	2e00      	cmp	r6, #0
 8006c7a:	dd10      	ble.n	8006c9e <_dtoa_r+0x7a6>
 8006c7c:	4639      	mov	r1, r7
 8006c7e:	4632      	mov	r2, r6
 8006c80:	4620      	mov	r0, r4
 8006c82:	f000 fce1 	bl	8007648 <__pow5mult>
 8006c86:	4652      	mov	r2, sl
 8006c88:	4601      	mov	r1, r0
 8006c8a:	4607      	mov	r7, r0
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f000 fc31 	bl	80074f4 <__multiply>
 8006c92:	4651      	mov	r1, sl
 8006c94:	4680      	mov	r8, r0
 8006c96:	4620      	mov	r0, r4
 8006c98:	f000 fb60 	bl	800735c <_Bfree>
 8006c9c:	46c2      	mov	sl, r8
 8006c9e:	9b08      	ldr	r3, [sp, #32]
 8006ca0:	1b9a      	subs	r2, r3, r6
 8006ca2:	d004      	beq.n	8006cae <_dtoa_r+0x7b6>
 8006ca4:	4651      	mov	r1, sl
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f000 fcce 	bl	8007648 <__pow5mult>
 8006cac:	4682      	mov	sl, r0
 8006cae:	2101      	movs	r1, #1
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f000 fc09 	bl	80074c8 <__i2b>
 8006cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	4606      	mov	r6, r0
 8006cbc:	f340 8081 	ble.w	8006dc2 <_dtoa_r+0x8ca>
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4601      	mov	r1, r0
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f000 fcbf 	bl	8007648 <__pow5mult>
 8006cca:	9b07      	ldr	r3, [sp, #28]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	4606      	mov	r6, r0
 8006cd0:	dd7a      	ble.n	8006dc8 <_dtoa_r+0x8d0>
 8006cd2:	f04f 0800 	mov.w	r8, #0
 8006cd6:	6933      	ldr	r3, [r6, #16]
 8006cd8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006cdc:	6918      	ldr	r0, [r3, #16]
 8006cde:	f000 fba5 	bl	800742c <__hi0bits>
 8006ce2:	f1c0 0020 	rsb	r0, r0, #32
 8006ce6:	9b06      	ldr	r3, [sp, #24]
 8006ce8:	4418      	add	r0, r3
 8006cea:	f010 001f 	ands.w	r0, r0, #31
 8006cee:	f000 8094 	beq.w	8006e1a <_dtoa_r+0x922>
 8006cf2:	f1c0 0320 	rsb	r3, r0, #32
 8006cf6:	2b04      	cmp	r3, #4
 8006cf8:	f340 8085 	ble.w	8006e06 <_dtoa_r+0x90e>
 8006cfc:	9b05      	ldr	r3, [sp, #20]
 8006cfe:	f1c0 001c 	rsb	r0, r0, #28
 8006d02:	4403      	add	r3, r0
 8006d04:	9305      	str	r3, [sp, #20]
 8006d06:	9b06      	ldr	r3, [sp, #24]
 8006d08:	4403      	add	r3, r0
 8006d0a:	4405      	add	r5, r0
 8006d0c:	9306      	str	r3, [sp, #24]
 8006d0e:	9b05      	ldr	r3, [sp, #20]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	dd05      	ble.n	8006d20 <_dtoa_r+0x828>
 8006d14:	4651      	mov	r1, sl
 8006d16:	461a      	mov	r2, r3
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f000 fcef 	bl	80076fc <__lshift>
 8006d1e:	4682      	mov	sl, r0
 8006d20:	9b06      	ldr	r3, [sp, #24]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	dd05      	ble.n	8006d32 <_dtoa_r+0x83a>
 8006d26:	4631      	mov	r1, r6
 8006d28:	461a      	mov	r2, r3
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	f000 fce6 	bl	80076fc <__lshift>
 8006d30:	4606      	mov	r6, r0
 8006d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d072      	beq.n	8006e1e <_dtoa_r+0x926>
 8006d38:	4631      	mov	r1, r6
 8006d3a:	4650      	mov	r0, sl
 8006d3c:	f000 fd4a 	bl	80077d4 <__mcmp>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	da6c      	bge.n	8006e1e <_dtoa_r+0x926>
 8006d44:	2300      	movs	r3, #0
 8006d46:	4651      	mov	r1, sl
 8006d48:	220a      	movs	r2, #10
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f000 fb28 	bl	80073a0 <__multadd>
 8006d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d56:	4682      	mov	sl, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 81b0 	beq.w	80070be <_dtoa_r+0xbc6>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	4639      	mov	r1, r7
 8006d62:	220a      	movs	r2, #10
 8006d64:	4620      	mov	r0, r4
 8006d66:	f000 fb1b 	bl	80073a0 <__multadd>
 8006d6a:	9b01      	ldr	r3, [sp, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	4607      	mov	r7, r0
 8006d70:	f300 8096 	bgt.w	8006ea0 <_dtoa_r+0x9a8>
 8006d74:	9b07      	ldr	r3, [sp, #28]
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	dc59      	bgt.n	8006e2e <_dtoa_r+0x936>
 8006d7a:	e091      	b.n	8006ea0 <_dtoa_r+0x9a8>
 8006d7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d82:	e758      	b.n	8006c36 <_dtoa_r+0x73e>
 8006d84:	9b04      	ldr	r3, [sp, #16]
 8006d86:	1e5e      	subs	r6, r3, #1
 8006d88:	9b08      	ldr	r3, [sp, #32]
 8006d8a:	42b3      	cmp	r3, r6
 8006d8c:	bfbf      	itttt	lt
 8006d8e:	9b08      	ldrlt	r3, [sp, #32]
 8006d90:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006d92:	9608      	strlt	r6, [sp, #32]
 8006d94:	1af3      	sublt	r3, r6, r3
 8006d96:	bfb4      	ite	lt
 8006d98:	18d2      	addlt	r2, r2, r3
 8006d9a:	1b9e      	subge	r6, r3, r6
 8006d9c:	9b04      	ldr	r3, [sp, #16]
 8006d9e:	bfbc      	itt	lt
 8006da0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006da2:	2600      	movlt	r6, #0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	bfb7      	itett	lt
 8006da8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006dac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006db0:	1a9d      	sublt	r5, r3, r2
 8006db2:	2300      	movlt	r3, #0
 8006db4:	e741      	b.n	8006c3a <_dtoa_r+0x742>
 8006db6:	9e08      	ldr	r6, [sp, #32]
 8006db8:	9d05      	ldr	r5, [sp, #20]
 8006dba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006dbc:	e748      	b.n	8006c50 <_dtoa_r+0x758>
 8006dbe:	9a08      	ldr	r2, [sp, #32]
 8006dc0:	e770      	b.n	8006ca4 <_dtoa_r+0x7ac>
 8006dc2:	9b07      	ldr	r3, [sp, #28]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	dc19      	bgt.n	8006dfc <_dtoa_r+0x904>
 8006dc8:	9b02      	ldr	r3, [sp, #8]
 8006dca:	b9bb      	cbnz	r3, 8006dfc <_dtoa_r+0x904>
 8006dcc:	9b03      	ldr	r3, [sp, #12]
 8006dce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dd2:	b99b      	cbnz	r3, 8006dfc <_dtoa_r+0x904>
 8006dd4:	9b03      	ldr	r3, [sp, #12]
 8006dd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dda:	0d1b      	lsrs	r3, r3, #20
 8006ddc:	051b      	lsls	r3, r3, #20
 8006dde:	b183      	cbz	r3, 8006e02 <_dtoa_r+0x90a>
 8006de0:	9b05      	ldr	r3, [sp, #20]
 8006de2:	3301      	adds	r3, #1
 8006de4:	9305      	str	r3, [sp, #20]
 8006de6:	9b06      	ldr	r3, [sp, #24]
 8006de8:	3301      	adds	r3, #1
 8006dea:	9306      	str	r3, [sp, #24]
 8006dec:	f04f 0801 	mov.w	r8, #1
 8006df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f47f af6f 	bne.w	8006cd6 <_dtoa_r+0x7de>
 8006df8:	2001      	movs	r0, #1
 8006dfa:	e774      	b.n	8006ce6 <_dtoa_r+0x7ee>
 8006dfc:	f04f 0800 	mov.w	r8, #0
 8006e00:	e7f6      	b.n	8006df0 <_dtoa_r+0x8f8>
 8006e02:	4698      	mov	r8, r3
 8006e04:	e7f4      	b.n	8006df0 <_dtoa_r+0x8f8>
 8006e06:	d082      	beq.n	8006d0e <_dtoa_r+0x816>
 8006e08:	9a05      	ldr	r2, [sp, #20]
 8006e0a:	331c      	adds	r3, #28
 8006e0c:	441a      	add	r2, r3
 8006e0e:	9205      	str	r2, [sp, #20]
 8006e10:	9a06      	ldr	r2, [sp, #24]
 8006e12:	441a      	add	r2, r3
 8006e14:	441d      	add	r5, r3
 8006e16:	9206      	str	r2, [sp, #24]
 8006e18:	e779      	b.n	8006d0e <_dtoa_r+0x816>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	e7f4      	b.n	8006e08 <_dtoa_r+0x910>
 8006e1e:	9b04      	ldr	r3, [sp, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	dc37      	bgt.n	8006e94 <_dtoa_r+0x99c>
 8006e24:	9b07      	ldr	r3, [sp, #28]
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	dd34      	ble.n	8006e94 <_dtoa_r+0x99c>
 8006e2a:	9b04      	ldr	r3, [sp, #16]
 8006e2c:	9301      	str	r3, [sp, #4]
 8006e2e:	9b01      	ldr	r3, [sp, #4]
 8006e30:	b963      	cbnz	r3, 8006e4c <_dtoa_r+0x954>
 8006e32:	4631      	mov	r1, r6
 8006e34:	2205      	movs	r2, #5
 8006e36:	4620      	mov	r0, r4
 8006e38:	f000 fab2 	bl	80073a0 <__multadd>
 8006e3c:	4601      	mov	r1, r0
 8006e3e:	4606      	mov	r6, r0
 8006e40:	4650      	mov	r0, sl
 8006e42:	f000 fcc7 	bl	80077d4 <__mcmp>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	f73f adbb 	bgt.w	80069c2 <_dtoa_r+0x4ca>
 8006e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e4e:	9d00      	ldr	r5, [sp, #0]
 8006e50:	ea6f 0b03 	mvn.w	fp, r3
 8006e54:	f04f 0800 	mov.w	r8, #0
 8006e58:	4631      	mov	r1, r6
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f000 fa7e 	bl	800735c <_Bfree>
 8006e60:	2f00      	cmp	r7, #0
 8006e62:	f43f aeab 	beq.w	8006bbc <_dtoa_r+0x6c4>
 8006e66:	f1b8 0f00 	cmp.w	r8, #0
 8006e6a:	d005      	beq.n	8006e78 <_dtoa_r+0x980>
 8006e6c:	45b8      	cmp	r8, r7
 8006e6e:	d003      	beq.n	8006e78 <_dtoa_r+0x980>
 8006e70:	4641      	mov	r1, r8
 8006e72:	4620      	mov	r0, r4
 8006e74:	f000 fa72 	bl	800735c <_Bfree>
 8006e78:	4639      	mov	r1, r7
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f000 fa6e 	bl	800735c <_Bfree>
 8006e80:	e69c      	b.n	8006bbc <_dtoa_r+0x6c4>
 8006e82:	2600      	movs	r6, #0
 8006e84:	4637      	mov	r7, r6
 8006e86:	e7e1      	b.n	8006e4c <_dtoa_r+0x954>
 8006e88:	46bb      	mov	fp, r7
 8006e8a:	4637      	mov	r7, r6
 8006e8c:	e599      	b.n	80069c2 <_dtoa_r+0x4ca>
 8006e8e:	bf00      	nop
 8006e90:	40240000 	.word	0x40240000
 8006e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 80c8 	beq.w	800702c <_dtoa_r+0xb34>
 8006e9c:	9b04      	ldr	r3, [sp, #16]
 8006e9e:	9301      	str	r3, [sp, #4]
 8006ea0:	2d00      	cmp	r5, #0
 8006ea2:	dd05      	ble.n	8006eb0 <_dtoa_r+0x9b8>
 8006ea4:	4639      	mov	r1, r7
 8006ea6:	462a      	mov	r2, r5
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f000 fc27 	bl	80076fc <__lshift>
 8006eae:	4607      	mov	r7, r0
 8006eb0:	f1b8 0f00 	cmp.w	r8, #0
 8006eb4:	d05b      	beq.n	8006f6e <_dtoa_r+0xa76>
 8006eb6:	6879      	ldr	r1, [r7, #4]
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f000 fa0f 	bl	80072dc <_Balloc>
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	b928      	cbnz	r0, 8006ece <_dtoa_r+0x9d6>
 8006ec2:	4b83      	ldr	r3, [pc, #524]	; (80070d0 <_dtoa_r+0xbd8>)
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006eca:	f7ff bb2e 	b.w	800652a <_dtoa_r+0x32>
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	3202      	adds	r2, #2
 8006ed2:	0092      	lsls	r2, r2, #2
 8006ed4:	f107 010c 	add.w	r1, r7, #12
 8006ed8:	300c      	adds	r0, #12
 8006eda:	f000 fe39 	bl	8007b50 <memcpy>
 8006ede:	2201      	movs	r2, #1
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f000 fc0a 	bl	80076fc <__lshift>
 8006ee8:	9b00      	ldr	r3, [sp, #0]
 8006eea:	3301      	adds	r3, #1
 8006eec:	9304      	str	r3, [sp, #16]
 8006eee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	9308      	str	r3, [sp, #32]
 8006ef6:	9b02      	ldr	r3, [sp, #8]
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	46b8      	mov	r8, r7
 8006efe:	9306      	str	r3, [sp, #24]
 8006f00:	4607      	mov	r7, r0
 8006f02:	9b04      	ldr	r3, [sp, #16]
 8006f04:	4631      	mov	r1, r6
 8006f06:	3b01      	subs	r3, #1
 8006f08:	4650      	mov	r0, sl
 8006f0a:	9301      	str	r3, [sp, #4]
 8006f0c:	f7ff fa69 	bl	80063e2 <quorem>
 8006f10:	4641      	mov	r1, r8
 8006f12:	9002      	str	r0, [sp, #8]
 8006f14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006f18:	4650      	mov	r0, sl
 8006f1a:	f000 fc5b 	bl	80077d4 <__mcmp>
 8006f1e:	463a      	mov	r2, r7
 8006f20:	9005      	str	r0, [sp, #20]
 8006f22:	4631      	mov	r1, r6
 8006f24:	4620      	mov	r0, r4
 8006f26:	f000 fc71 	bl	800780c <__mdiff>
 8006f2a:	68c2      	ldr	r2, [r0, #12]
 8006f2c:	4605      	mov	r5, r0
 8006f2e:	bb02      	cbnz	r2, 8006f72 <_dtoa_r+0xa7a>
 8006f30:	4601      	mov	r1, r0
 8006f32:	4650      	mov	r0, sl
 8006f34:	f000 fc4e 	bl	80077d4 <__mcmp>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8006f40:	f000 fa0c 	bl	800735c <_Bfree>
 8006f44:	9b07      	ldr	r3, [sp, #28]
 8006f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f48:	9d04      	ldr	r5, [sp, #16]
 8006f4a:	ea43 0102 	orr.w	r1, r3, r2
 8006f4e:	9b06      	ldr	r3, [sp, #24]
 8006f50:	4319      	orrs	r1, r3
 8006f52:	d110      	bne.n	8006f76 <_dtoa_r+0xa7e>
 8006f54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f58:	d029      	beq.n	8006fae <_dtoa_r+0xab6>
 8006f5a:	9b05      	ldr	r3, [sp, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	dd02      	ble.n	8006f66 <_dtoa_r+0xa6e>
 8006f60:	9b02      	ldr	r3, [sp, #8]
 8006f62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006f66:	9b01      	ldr	r3, [sp, #4]
 8006f68:	f883 9000 	strb.w	r9, [r3]
 8006f6c:	e774      	b.n	8006e58 <_dtoa_r+0x960>
 8006f6e:	4638      	mov	r0, r7
 8006f70:	e7ba      	b.n	8006ee8 <_dtoa_r+0x9f0>
 8006f72:	2201      	movs	r2, #1
 8006f74:	e7e1      	b.n	8006f3a <_dtoa_r+0xa42>
 8006f76:	9b05      	ldr	r3, [sp, #20]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	db04      	blt.n	8006f86 <_dtoa_r+0xa8e>
 8006f7c:	9907      	ldr	r1, [sp, #28]
 8006f7e:	430b      	orrs	r3, r1
 8006f80:	9906      	ldr	r1, [sp, #24]
 8006f82:	430b      	orrs	r3, r1
 8006f84:	d120      	bne.n	8006fc8 <_dtoa_r+0xad0>
 8006f86:	2a00      	cmp	r2, #0
 8006f88:	dded      	ble.n	8006f66 <_dtoa_r+0xa6e>
 8006f8a:	4651      	mov	r1, sl
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	4620      	mov	r0, r4
 8006f90:	f000 fbb4 	bl	80076fc <__lshift>
 8006f94:	4631      	mov	r1, r6
 8006f96:	4682      	mov	sl, r0
 8006f98:	f000 fc1c 	bl	80077d4 <__mcmp>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	dc03      	bgt.n	8006fa8 <_dtoa_r+0xab0>
 8006fa0:	d1e1      	bne.n	8006f66 <_dtoa_r+0xa6e>
 8006fa2:	f019 0f01 	tst.w	r9, #1
 8006fa6:	d0de      	beq.n	8006f66 <_dtoa_r+0xa6e>
 8006fa8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006fac:	d1d8      	bne.n	8006f60 <_dtoa_r+0xa68>
 8006fae:	9a01      	ldr	r2, [sp, #4]
 8006fb0:	2339      	movs	r3, #57	; 0x39
 8006fb2:	7013      	strb	r3, [r2, #0]
 8006fb4:	462b      	mov	r3, r5
 8006fb6:	461d      	mov	r5, r3
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006fbe:	2a39      	cmp	r2, #57	; 0x39
 8006fc0:	d06c      	beq.n	800709c <_dtoa_r+0xba4>
 8006fc2:	3201      	adds	r2, #1
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	e747      	b.n	8006e58 <_dtoa_r+0x960>
 8006fc8:	2a00      	cmp	r2, #0
 8006fca:	dd07      	ble.n	8006fdc <_dtoa_r+0xae4>
 8006fcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006fd0:	d0ed      	beq.n	8006fae <_dtoa_r+0xab6>
 8006fd2:	9a01      	ldr	r2, [sp, #4]
 8006fd4:	f109 0301 	add.w	r3, r9, #1
 8006fd8:	7013      	strb	r3, [r2, #0]
 8006fda:	e73d      	b.n	8006e58 <_dtoa_r+0x960>
 8006fdc:	9b04      	ldr	r3, [sp, #16]
 8006fde:	9a08      	ldr	r2, [sp, #32]
 8006fe0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d043      	beq.n	8007070 <_dtoa_r+0xb78>
 8006fe8:	4651      	mov	r1, sl
 8006fea:	2300      	movs	r3, #0
 8006fec:	220a      	movs	r2, #10
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f000 f9d6 	bl	80073a0 <__multadd>
 8006ff4:	45b8      	cmp	r8, r7
 8006ff6:	4682      	mov	sl, r0
 8006ff8:	f04f 0300 	mov.w	r3, #0
 8006ffc:	f04f 020a 	mov.w	r2, #10
 8007000:	4641      	mov	r1, r8
 8007002:	4620      	mov	r0, r4
 8007004:	d107      	bne.n	8007016 <_dtoa_r+0xb1e>
 8007006:	f000 f9cb 	bl	80073a0 <__multadd>
 800700a:	4680      	mov	r8, r0
 800700c:	4607      	mov	r7, r0
 800700e:	9b04      	ldr	r3, [sp, #16]
 8007010:	3301      	adds	r3, #1
 8007012:	9304      	str	r3, [sp, #16]
 8007014:	e775      	b.n	8006f02 <_dtoa_r+0xa0a>
 8007016:	f000 f9c3 	bl	80073a0 <__multadd>
 800701a:	4639      	mov	r1, r7
 800701c:	4680      	mov	r8, r0
 800701e:	2300      	movs	r3, #0
 8007020:	220a      	movs	r2, #10
 8007022:	4620      	mov	r0, r4
 8007024:	f000 f9bc 	bl	80073a0 <__multadd>
 8007028:	4607      	mov	r7, r0
 800702a:	e7f0      	b.n	800700e <_dtoa_r+0xb16>
 800702c:	9b04      	ldr	r3, [sp, #16]
 800702e:	9301      	str	r3, [sp, #4]
 8007030:	9d00      	ldr	r5, [sp, #0]
 8007032:	4631      	mov	r1, r6
 8007034:	4650      	mov	r0, sl
 8007036:	f7ff f9d4 	bl	80063e2 <quorem>
 800703a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800703e:	9b00      	ldr	r3, [sp, #0]
 8007040:	f805 9b01 	strb.w	r9, [r5], #1
 8007044:	1aea      	subs	r2, r5, r3
 8007046:	9b01      	ldr	r3, [sp, #4]
 8007048:	4293      	cmp	r3, r2
 800704a:	dd07      	ble.n	800705c <_dtoa_r+0xb64>
 800704c:	4651      	mov	r1, sl
 800704e:	2300      	movs	r3, #0
 8007050:	220a      	movs	r2, #10
 8007052:	4620      	mov	r0, r4
 8007054:	f000 f9a4 	bl	80073a0 <__multadd>
 8007058:	4682      	mov	sl, r0
 800705a:	e7ea      	b.n	8007032 <_dtoa_r+0xb3a>
 800705c:	9b01      	ldr	r3, [sp, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	bfc8      	it	gt
 8007062:	461d      	movgt	r5, r3
 8007064:	9b00      	ldr	r3, [sp, #0]
 8007066:	bfd8      	it	le
 8007068:	2501      	movle	r5, #1
 800706a:	441d      	add	r5, r3
 800706c:	f04f 0800 	mov.w	r8, #0
 8007070:	4651      	mov	r1, sl
 8007072:	2201      	movs	r2, #1
 8007074:	4620      	mov	r0, r4
 8007076:	f000 fb41 	bl	80076fc <__lshift>
 800707a:	4631      	mov	r1, r6
 800707c:	4682      	mov	sl, r0
 800707e:	f000 fba9 	bl	80077d4 <__mcmp>
 8007082:	2800      	cmp	r0, #0
 8007084:	dc96      	bgt.n	8006fb4 <_dtoa_r+0xabc>
 8007086:	d102      	bne.n	800708e <_dtoa_r+0xb96>
 8007088:	f019 0f01 	tst.w	r9, #1
 800708c:	d192      	bne.n	8006fb4 <_dtoa_r+0xabc>
 800708e:	462b      	mov	r3, r5
 8007090:	461d      	mov	r5, r3
 8007092:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007096:	2a30      	cmp	r2, #48	; 0x30
 8007098:	d0fa      	beq.n	8007090 <_dtoa_r+0xb98>
 800709a:	e6dd      	b.n	8006e58 <_dtoa_r+0x960>
 800709c:	9a00      	ldr	r2, [sp, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d189      	bne.n	8006fb6 <_dtoa_r+0xabe>
 80070a2:	f10b 0b01 	add.w	fp, fp, #1
 80070a6:	2331      	movs	r3, #49	; 0x31
 80070a8:	e796      	b.n	8006fd8 <_dtoa_r+0xae0>
 80070aa:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <_dtoa_r+0xbdc>)
 80070ac:	f7ff ba99 	b.w	80065e2 <_dtoa_r+0xea>
 80070b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f47f aa6d 	bne.w	8006592 <_dtoa_r+0x9a>
 80070b8:	4b07      	ldr	r3, [pc, #28]	; (80070d8 <_dtoa_r+0xbe0>)
 80070ba:	f7ff ba92 	b.w	80065e2 <_dtoa_r+0xea>
 80070be:	9b01      	ldr	r3, [sp, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	dcb5      	bgt.n	8007030 <_dtoa_r+0xb38>
 80070c4:	9b07      	ldr	r3, [sp, #28]
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	f73f aeb1 	bgt.w	8006e2e <_dtoa_r+0x936>
 80070cc:	e7b0      	b.n	8007030 <_dtoa_r+0xb38>
 80070ce:	bf00      	nop
 80070d0:	08008298 	.word	0x08008298
 80070d4:	080081f8 	.word	0x080081f8
 80070d8:	0800821c 	.word	0x0800821c

080070dc <_free_r>:
 80070dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070de:	2900      	cmp	r1, #0
 80070e0:	d044      	beq.n	800716c <_free_r+0x90>
 80070e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070e6:	9001      	str	r0, [sp, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f1a1 0404 	sub.w	r4, r1, #4
 80070ee:	bfb8      	it	lt
 80070f0:	18e4      	addlt	r4, r4, r3
 80070f2:	f000 f8e7 	bl	80072c4 <__malloc_lock>
 80070f6:	4a1e      	ldr	r2, [pc, #120]	; (8007170 <_free_r+0x94>)
 80070f8:	9801      	ldr	r0, [sp, #4]
 80070fa:	6813      	ldr	r3, [r2, #0]
 80070fc:	b933      	cbnz	r3, 800710c <_free_r+0x30>
 80070fe:	6063      	str	r3, [r4, #4]
 8007100:	6014      	str	r4, [r2, #0]
 8007102:	b003      	add	sp, #12
 8007104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007108:	f000 b8e2 	b.w	80072d0 <__malloc_unlock>
 800710c:	42a3      	cmp	r3, r4
 800710e:	d908      	bls.n	8007122 <_free_r+0x46>
 8007110:	6825      	ldr	r5, [r4, #0]
 8007112:	1961      	adds	r1, r4, r5
 8007114:	428b      	cmp	r3, r1
 8007116:	bf01      	itttt	eq
 8007118:	6819      	ldreq	r1, [r3, #0]
 800711a:	685b      	ldreq	r3, [r3, #4]
 800711c:	1949      	addeq	r1, r1, r5
 800711e:	6021      	streq	r1, [r4, #0]
 8007120:	e7ed      	b.n	80070fe <_free_r+0x22>
 8007122:	461a      	mov	r2, r3
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	b10b      	cbz	r3, 800712c <_free_r+0x50>
 8007128:	42a3      	cmp	r3, r4
 800712a:	d9fa      	bls.n	8007122 <_free_r+0x46>
 800712c:	6811      	ldr	r1, [r2, #0]
 800712e:	1855      	adds	r5, r2, r1
 8007130:	42a5      	cmp	r5, r4
 8007132:	d10b      	bne.n	800714c <_free_r+0x70>
 8007134:	6824      	ldr	r4, [r4, #0]
 8007136:	4421      	add	r1, r4
 8007138:	1854      	adds	r4, r2, r1
 800713a:	42a3      	cmp	r3, r4
 800713c:	6011      	str	r1, [r2, #0]
 800713e:	d1e0      	bne.n	8007102 <_free_r+0x26>
 8007140:	681c      	ldr	r4, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	6053      	str	r3, [r2, #4]
 8007146:	440c      	add	r4, r1
 8007148:	6014      	str	r4, [r2, #0]
 800714a:	e7da      	b.n	8007102 <_free_r+0x26>
 800714c:	d902      	bls.n	8007154 <_free_r+0x78>
 800714e:	230c      	movs	r3, #12
 8007150:	6003      	str	r3, [r0, #0]
 8007152:	e7d6      	b.n	8007102 <_free_r+0x26>
 8007154:	6825      	ldr	r5, [r4, #0]
 8007156:	1961      	adds	r1, r4, r5
 8007158:	428b      	cmp	r3, r1
 800715a:	bf04      	itt	eq
 800715c:	6819      	ldreq	r1, [r3, #0]
 800715e:	685b      	ldreq	r3, [r3, #4]
 8007160:	6063      	str	r3, [r4, #4]
 8007162:	bf04      	itt	eq
 8007164:	1949      	addeq	r1, r1, r5
 8007166:	6021      	streq	r1, [r4, #0]
 8007168:	6054      	str	r4, [r2, #4]
 800716a:	e7ca      	b.n	8007102 <_free_r+0x26>
 800716c:	b003      	add	sp, #12
 800716e:	bd30      	pop	{r4, r5, pc}
 8007170:	20000518 	.word	0x20000518

08007174 <malloc>:
 8007174:	4b02      	ldr	r3, [pc, #8]	; (8007180 <malloc+0xc>)
 8007176:	4601      	mov	r1, r0
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	f000 b823 	b.w	80071c4 <_malloc_r>
 800717e:	bf00      	nop
 8007180:	20000064 	.word	0x20000064

08007184 <sbrk_aligned>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	4e0e      	ldr	r6, [pc, #56]	; (80071c0 <sbrk_aligned+0x3c>)
 8007188:	460c      	mov	r4, r1
 800718a:	6831      	ldr	r1, [r6, #0]
 800718c:	4605      	mov	r5, r0
 800718e:	b911      	cbnz	r1, 8007196 <sbrk_aligned+0x12>
 8007190:	f000 fcce 	bl	8007b30 <_sbrk_r>
 8007194:	6030      	str	r0, [r6, #0]
 8007196:	4621      	mov	r1, r4
 8007198:	4628      	mov	r0, r5
 800719a:	f000 fcc9 	bl	8007b30 <_sbrk_r>
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	d00a      	beq.n	80071b8 <sbrk_aligned+0x34>
 80071a2:	1cc4      	adds	r4, r0, #3
 80071a4:	f024 0403 	bic.w	r4, r4, #3
 80071a8:	42a0      	cmp	r0, r4
 80071aa:	d007      	beq.n	80071bc <sbrk_aligned+0x38>
 80071ac:	1a21      	subs	r1, r4, r0
 80071ae:	4628      	mov	r0, r5
 80071b0:	f000 fcbe 	bl	8007b30 <_sbrk_r>
 80071b4:	3001      	adds	r0, #1
 80071b6:	d101      	bne.n	80071bc <sbrk_aligned+0x38>
 80071b8:	f04f 34ff 	mov.w	r4, #4294967295
 80071bc:	4620      	mov	r0, r4
 80071be:	bd70      	pop	{r4, r5, r6, pc}
 80071c0:	2000051c 	.word	0x2000051c

080071c4 <_malloc_r>:
 80071c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c8:	1ccd      	adds	r5, r1, #3
 80071ca:	f025 0503 	bic.w	r5, r5, #3
 80071ce:	3508      	adds	r5, #8
 80071d0:	2d0c      	cmp	r5, #12
 80071d2:	bf38      	it	cc
 80071d4:	250c      	movcc	r5, #12
 80071d6:	2d00      	cmp	r5, #0
 80071d8:	4607      	mov	r7, r0
 80071da:	db01      	blt.n	80071e0 <_malloc_r+0x1c>
 80071dc:	42a9      	cmp	r1, r5
 80071de:	d905      	bls.n	80071ec <_malloc_r+0x28>
 80071e0:	230c      	movs	r3, #12
 80071e2:	603b      	str	r3, [r7, #0]
 80071e4:	2600      	movs	r6, #0
 80071e6:	4630      	mov	r0, r6
 80071e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80072c0 <_malloc_r+0xfc>
 80071f0:	f000 f868 	bl	80072c4 <__malloc_lock>
 80071f4:	f8d8 3000 	ldr.w	r3, [r8]
 80071f8:	461c      	mov	r4, r3
 80071fa:	bb5c      	cbnz	r4, 8007254 <_malloc_r+0x90>
 80071fc:	4629      	mov	r1, r5
 80071fe:	4638      	mov	r0, r7
 8007200:	f7ff ffc0 	bl	8007184 <sbrk_aligned>
 8007204:	1c43      	adds	r3, r0, #1
 8007206:	4604      	mov	r4, r0
 8007208:	d155      	bne.n	80072b6 <_malloc_r+0xf2>
 800720a:	f8d8 4000 	ldr.w	r4, [r8]
 800720e:	4626      	mov	r6, r4
 8007210:	2e00      	cmp	r6, #0
 8007212:	d145      	bne.n	80072a0 <_malloc_r+0xdc>
 8007214:	2c00      	cmp	r4, #0
 8007216:	d048      	beq.n	80072aa <_malloc_r+0xe6>
 8007218:	6823      	ldr	r3, [r4, #0]
 800721a:	4631      	mov	r1, r6
 800721c:	4638      	mov	r0, r7
 800721e:	eb04 0903 	add.w	r9, r4, r3
 8007222:	f000 fc85 	bl	8007b30 <_sbrk_r>
 8007226:	4581      	cmp	r9, r0
 8007228:	d13f      	bne.n	80072aa <_malloc_r+0xe6>
 800722a:	6821      	ldr	r1, [r4, #0]
 800722c:	1a6d      	subs	r5, r5, r1
 800722e:	4629      	mov	r1, r5
 8007230:	4638      	mov	r0, r7
 8007232:	f7ff ffa7 	bl	8007184 <sbrk_aligned>
 8007236:	3001      	adds	r0, #1
 8007238:	d037      	beq.n	80072aa <_malloc_r+0xe6>
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	442b      	add	r3, r5
 800723e:	6023      	str	r3, [r4, #0]
 8007240:	f8d8 3000 	ldr.w	r3, [r8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d038      	beq.n	80072ba <_malloc_r+0xf6>
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	42a2      	cmp	r2, r4
 800724c:	d12b      	bne.n	80072a6 <_malloc_r+0xe2>
 800724e:	2200      	movs	r2, #0
 8007250:	605a      	str	r2, [r3, #4]
 8007252:	e00f      	b.n	8007274 <_malloc_r+0xb0>
 8007254:	6822      	ldr	r2, [r4, #0]
 8007256:	1b52      	subs	r2, r2, r5
 8007258:	d41f      	bmi.n	800729a <_malloc_r+0xd6>
 800725a:	2a0b      	cmp	r2, #11
 800725c:	d917      	bls.n	800728e <_malloc_r+0xca>
 800725e:	1961      	adds	r1, r4, r5
 8007260:	42a3      	cmp	r3, r4
 8007262:	6025      	str	r5, [r4, #0]
 8007264:	bf18      	it	ne
 8007266:	6059      	strne	r1, [r3, #4]
 8007268:	6863      	ldr	r3, [r4, #4]
 800726a:	bf08      	it	eq
 800726c:	f8c8 1000 	streq.w	r1, [r8]
 8007270:	5162      	str	r2, [r4, r5]
 8007272:	604b      	str	r3, [r1, #4]
 8007274:	4638      	mov	r0, r7
 8007276:	f104 060b 	add.w	r6, r4, #11
 800727a:	f000 f829 	bl	80072d0 <__malloc_unlock>
 800727e:	f026 0607 	bic.w	r6, r6, #7
 8007282:	1d23      	adds	r3, r4, #4
 8007284:	1af2      	subs	r2, r6, r3
 8007286:	d0ae      	beq.n	80071e6 <_malloc_r+0x22>
 8007288:	1b9b      	subs	r3, r3, r6
 800728a:	50a3      	str	r3, [r4, r2]
 800728c:	e7ab      	b.n	80071e6 <_malloc_r+0x22>
 800728e:	42a3      	cmp	r3, r4
 8007290:	6862      	ldr	r2, [r4, #4]
 8007292:	d1dd      	bne.n	8007250 <_malloc_r+0x8c>
 8007294:	f8c8 2000 	str.w	r2, [r8]
 8007298:	e7ec      	b.n	8007274 <_malloc_r+0xb0>
 800729a:	4623      	mov	r3, r4
 800729c:	6864      	ldr	r4, [r4, #4]
 800729e:	e7ac      	b.n	80071fa <_malloc_r+0x36>
 80072a0:	4634      	mov	r4, r6
 80072a2:	6876      	ldr	r6, [r6, #4]
 80072a4:	e7b4      	b.n	8007210 <_malloc_r+0x4c>
 80072a6:	4613      	mov	r3, r2
 80072a8:	e7cc      	b.n	8007244 <_malloc_r+0x80>
 80072aa:	230c      	movs	r3, #12
 80072ac:	603b      	str	r3, [r7, #0]
 80072ae:	4638      	mov	r0, r7
 80072b0:	f000 f80e 	bl	80072d0 <__malloc_unlock>
 80072b4:	e797      	b.n	80071e6 <_malloc_r+0x22>
 80072b6:	6025      	str	r5, [r4, #0]
 80072b8:	e7dc      	b.n	8007274 <_malloc_r+0xb0>
 80072ba:	605b      	str	r3, [r3, #4]
 80072bc:	deff      	udf	#255	; 0xff
 80072be:	bf00      	nop
 80072c0:	20000518 	.word	0x20000518

080072c4 <__malloc_lock>:
 80072c4:	4801      	ldr	r0, [pc, #4]	; (80072cc <__malloc_lock+0x8>)
 80072c6:	f7ff b88a 	b.w	80063de <__retarget_lock_acquire_recursive>
 80072ca:	bf00      	nop
 80072cc:	20000514 	.word	0x20000514

080072d0 <__malloc_unlock>:
 80072d0:	4801      	ldr	r0, [pc, #4]	; (80072d8 <__malloc_unlock+0x8>)
 80072d2:	f7ff b885 	b.w	80063e0 <__retarget_lock_release_recursive>
 80072d6:	bf00      	nop
 80072d8:	20000514 	.word	0x20000514

080072dc <_Balloc>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	69c6      	ldr	r6, [r0, #28]
 80072e0:	4604      	mov	r4, r0
 80072e2:	460d      	mov	r5, r1
 80072e4:	b976      	cbnz	r6, 8007304 <_Balloc+0x28>
 80072e6:	2010      	movs	r0, #16
 80072e8:	f7ff ff44 	bl	8007174 <malloc>
 80072ec:	4602      	mov	r2, r0
 80072ee:	61e0      	str	r0, [r4, #28]
 80072f0:	b920      	cbnz	r0, 80072fc <_Balloc+0x20>
 80072f2:	4b18      	ldr	r3, [pc, #96]	; (8007354 <_Balloc+0x78>)
 80072f4:	4818      	ldr	r0, [pc, #96]	; (8007358 <_Balloc+0x7c>)
 80072f6:	216b      	movs	r1, #107	; 0x6b
 80072f8:	f000 fc38 	bl	8007b6c <__assert_func>
 80072fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007300:	6006      	str	r6, [r0, #0]
 8007302:	60c6      	str	r6, [r0, #12]
 8007304:	69e6      	ldr	r6, [r4, #28]
 8007306:	68f3      	ldr	r3, [r6, #12]
 8007308:	b183      	cbz	r3, 800732c <_Balloc+0x50>
 800730a:	69e3      	ldr	r3, [r4, #28]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007312:	b9b8      	cbnz	r0, 8007344 <_Balloc+0x68>
 8007314:	2101      	movs	r1, #1
 8007316:	fa01 f605 	lsl.w	r6, r1, r5
 800731a:	1d72      	adds	r2, r6, #5
 800731c:	0092      	lsls	r2, r2, #2
 800731e:	4620      	mov	r0, r4
 8007320:	f000 fc42 	bl	8007ba8 <_calloc_r>
 8007324:	b160      	cbz	r0, 8007340 <_Balloc+0x64>
 8007326:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800732a:	e00e      	b.n	800734a <_Balloc+0x6e>
 800732c:	2221      	movs	r2, #33	; 0x21
 800732e:	2104      	movs	r1, #4
 8007330:	4620      	mov	r0, r4
 8007332:	f000 fc39 	bl	8007ba8 <_calloc_r>
 8007336:	69e3      	ldr	r3, [r4, #28]
 8007338:	60f0      	str	r0, [r6, #12]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e4      	bne.n	800730a <_Balloc+0x2e>
 8007340:	2000      	movs	r0, #0
 8007342:	bd70      	pop	{r4, r5, r6, pc}
 8007344:	6802      	ldr	r2, [r0, #0]
 8007346:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800734a:	2300      	movs	r3, #0
 800734c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007350:	e7f7      	b.n	8007342 <_Balloc+0x66>
 8007352:	bf00      	nop
 8007354:	08008229 	.word	0x08008229
 8007358:	080082a9 	.word	0x080082a9

0800735c <_Bfree>:
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	69c6      	ldr	r6, [r0, #28]
 8007360:	4605      	mov	r5, r0
 8007362:	460c      	mov	r4, r1
 8007364:	b976      	cbnz	r6, 8007384 <_Bfree+0x28>
 8007366:	2010      	movs	r0, #16
 8007368:	f7ff ff04 	bl	8007174 <malloc>
 800736c:	4602      	mov	r2, r0
 800736e:	61e8      	str	r0, [r5, #28]
 8007370:	b920      	cbnz	r0, 800737c <_Bfree+0x20>
 8007372:	4b09      	ldr	r3, [pc, #36]	; (8007398 <_Bfree+0x3c>)
 8007374:	4809      	ldr	r0, [pc, #36]	; (800739c <_Bfree+0x40>)
 8007376:	218f      	movs	r1, #143	; 0x8f
 8007378:	f000 fbf8 	bl	8007b6c <__assert_func>
 800737c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007380:	6006      	str	r6, [r0, #0]
 8007382:	60c6      	str	r6, [r0, #12]
 8007384:	b13c      	cbz	r4, 8007396 <_Bfree+0x3a>
 8007386:	69eb      	ldr	r3, [r5, #28]
 8007388:	6862      	ldr	r2, [r4, #4]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007390:	6021      	str	r1, [r4, #0]
 8007392:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007396:	bd70      	pop	{r4, r5, r6, pc}
 8007398:	08008229 	.word	0x08008229
 800739c:	080082a9 	.word	0x080082a9

080073a0 <__multadd>:
 80073a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a4:	690d      	ldr	r5, [r1, #16]
 80073a6:	4607      	mov	r7, r0
 80073a8:	460c      	mov	r4, r1
 80073aa:	461e      	mov	r6, r3
 80073ac:	f101 0c14 	add.w	ip, r1, #20
 80073b0:	2000      	movs	r0, #0
 80073b2:	f8dc 3000 	ldr.w	r3, [ip]
 80073b6:	b299      	uxth	r1, r3
 80073b8:	fb02 6101 	mla	r1, r2, r1, r6
 80073bc:	0c1e      	lsrs	r6, r3, #16
 80073be:	0c0b      	lsrs	r3, r1, #16
 80073c0:	fb02 3306 	mla	r3, r2, r6, r3
 80073c4:	b289      	uxth	r1, r1
 80073c6:	3001      	adds	r0, #1
 80073c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073cc:	4285      	cmp	r5, r0
 80073ce:	f84c 1b04 	str.w	r1, [ip], #4
 80073d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073d6:	dcec      	bgt.n	80073b2 <__multadd+0x12>
 80073d8:	b30e      	cbz	r6, 800741e <__multadd+0x7e>
 80073da:	68a3      	ldr	r3, [r4, #8]
 80073dc:	42ab      	cmp	r3, r5
 80073de:	dc19      	bgt.n	8007414 <__multadd+0x74>
 80073e0:	6861      	ldr	r1, [r4, #4]
 80073e2:	4638      	mov	r0, r7
 80073e4:	3101      	adds	r1, #1
 80073e6:	f7ff ff79 	bl	80072dc <_Balloc>
 80073ea:	4680      	mov	r8, r0
 80073ec:	b928      	cbnz	r0, 80073fa <__multadd+0x5a>
 80073ee:	4602      	mov	r2, r0
 80073f0:	4b0c      	ldr	r3, [pc, #48]	; (8007424 <__multadd+0x84>)
 80073f2:	480d      	ldr	r0, [pc, #52]	; (8007428 <__multadd+0x88>)
 80073f4:	21ba      	movs	r1, #186	; 0xba
 80073f6:	f000 fbb9 	bl	8007b6c <__assert_func>
 80073fa:	6922      	ldr	r2, [r4, #16]
 80073fc:	3202      	adds	r2, #2
 80073fe:	f104 010c 	add.w	r1, r4, #12
 8007402:	0092      	lsls	r2, r2, #2
 8007404:	300c      	adds	r0, #12
 8007406:	f000 fba3 	bl	8007b50 <memcpy>
 800740a:	4621      	mov	r1, r4
 800740c:	4638      	mov	r0, r7
 800740e:	f7ff ffa5 	bl	800735c <_Bfree>
 8007412:	4644      	mov	r4, r8
 8007414:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007418:	3501      	adds	r5, #1
 800741a:	615e      	str	r6, [r3, #20]
 800741c:	6125      	str	r5, [r4, #16]
 800741e:	4620      	mov	r0, r4
 8007420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007424:	08008298 	.word	0x08008298
 8007428:	080082a9 	.word	0x080082a9

0800742c <__hi0bits>:
 800742c:	0c03      	lsrs	r3, r0, #16
 800742e:	041b      	lsls	r3, r3, #16
 8007430:	b9d3      	cbnz	r3, 8007468 <__hi0bits+0x3c>
 8007432:	0400      	lsls	r0, r0, #16
 8007434:	2310      	movs	r3, #16
 8007436:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800743a:	bf04      	itt	eq
 800743c:	0200      	lsleq	r0, r0, #8
 800743e:	3308      	addeq	r3, #8
 8007440:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007444:	bf04      	itt	eq
 8007446:	0100      	lsleq	r0, r0, #4
 8007448:	3304      	addeq	r3, #4
 800744a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800744e:	bf04      	itt	eq
 8007450:	0080      	lsleq	r0, r0, #2
 8007452:	3302      	addeq	r3, #2
 8007454:	2800      	cmp	r0, #0
 8007456:	db05      	blt.n	8007464 <__hi0bits+0x38>
 8007458:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800745c:	f103 0301 	add.w	r3, r3, #1
 8007460:	bf08      	it	eq
 8007462:	2320      	moveq	r3, #32
 8007464:	4618      	mov	r0, r3
 8007466:	4770      	bx	lr
 8007468:	2300      	movs	r3, #0
 800746a:	e7e4      	b.n	8007436 <__hi0bits+0xa>

0800746c <__lo0bits>:
 800746c:	6803      	ldr	r3, [r0, #0]
 800746e:	f013 0207 	ands.w	r2, r3, #7
 8007472:	d00c      	beq.n	800748e <__lo0bits+0x22>
 8007474:	07d9      	lsls	r1, r3, #31
 8007476:	d422      	bmi.n	80074be <__lo0bits+0x52>
 8007478:	079a      	lsls	r2, r3, #30
 800747a:	bf49      	itett	mi
 800747c:	085b      	lsrmi	r3, r3, #1
 800747e:	089b      	lsrpl	r3, r3, #2
 8007480:	6003      	strmi	r3, [r0, #0]
 8007482:	2201      	movmi	r2, #1
 8007484:	bf5c      	itt	pl
 8007486:	6003      	strpl	r3, [r0, #0]
 8007488:	2202      	movpl	r2, #2
 800748a:	4610      	mov	r0, r2
 800748c:	4770      	bx	lr
 800748e:	b299      	uxth	r1, r3
 8007490:	b909      	cbnz	r1, 8007496 <__lo0bits+0x2a>
 8007492:	0c1b      	lsrs	r3, r3, #16
 8007494:	2210      	movs	r2, #16
 8007496:	b2d9      	uxtb	r1, r3
 8007498:	b909      	cbnz	r1, 800749e <__lo0bits+0x32>
 800749a:	3208      	adds	r2, #8
 800749c:	0a1b      	lsrs	r3, r3, #8
 800749e:	0719      	lsls	r1, r3, #28
 80074a0:	bf04      	itt	eq
 80074a2:	091b      	lsreq	r3, r3, #4
 80074a4:	3204      	addeq	r2, #4
 80074a6:	0799      	lsls	r1, r3, #30
 80074a8:	bf04      	itt	eq
 80074aa:	089b      	lsreq	r3, r3, #2
 80074ac:	3202      	addeq	r2, #2
 80074ae:	07d9      	lsls	r1, r3, #31
 80074b0:	d403      	bmi.n	80074ba <__lo0bits+0x4e>
 80074b2:	085b      	lsrs	r3, r3, #1
 80074b4:	f102 0201 	add.w	r2, r2, #1
 80074b8:	d003      	beq.n	80074c2 <__lo0bits+0x56>
 80074ba:	6003      	str	r3, [r0, #0]
 80074bc:	e7e5      	b.n	800748a <__lo0bits+0x1e>
 80074be:	2200      	movs	r2, #0
 80074c0:	e7e3      	b.n	800748a <__lo0bits+0x1e>
 80074c2:	2220      	movs	r2, #32
 80074c4:	e7e1      	b.n	800748a <__lo0bits+0x1e>
	...

080074c8 <__i2b>:
 80074c8:	b510      	push	{r4, lr}
 80074ca:	460c      	mov	r4, r1
 80074cc:	2101      	movs	r1, #1
 80074ce:	f7ff ff05 	bl	80072dc <_Balloc>
 80074d2:	4602      	mov	r2, r0
 80074d4:	b928      	cbnz	r0, 80074e2 <__i2b+0x1a>
 80074d6:	4b05      	ldr	r3, [pc, #20]	; (80074ec <__i2b+0x24>)
 80074d8:	4805      	ldr	r0, [pc, #20]	; (80074f0 <__i2b+0x28>)
 80074da:	f240 1145 	movw	r1, #325	; 0x145
 80074de:	f000 fb45 	bl	8007b6c <__assert_func>
 80074e2:	2301      	movs	r3, #1
 80074e4:	6144      	str	r4, [r0, #20]
 80074e6:	6103      	str	r3, [r0, #16]
 80074e8:	bd10      	pop	{r4, pc}
 80074ea:	bf00      	nop
 80074ec:	08008298 	.word	0x08008298
 80074f0:	080082a9 	.word	0x080082a9

080074f4 <__multiply>:
 80074f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f8:	4691      	mov	r9, r2
 80074fa:	690a      	ldr	r2, [r1, #16]
 80074fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007500:	429a      	cmp	r2, r3
 8007502:	bfb8      	it	lt
 8007504:	460b      	movlt	r3, r1
 8007506:	460c      	mov	r4, r1
 8007508:	bfbc      	itt	lt
 800750a:	464c      	movlt	r4, r9
 800750c:	4699      	movlt	r9, r3
 800750e:	6927      	ldr	r7, [r4, #16]
 8007510:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007514:	68a3      	ldr	r3, [r4, #8]
 8007516:	6861      	ldr	r1, [r4, #4]
 8007518:	eb07 060a 	add.w	r6, r7, sl
 800751c:	42b3      	cmp	r3, r6
 800751e:	b085      	sub	sp, #20
 8007520:	bfb8      	it	lt
 8007522:	3101      	addlt	r1, #1
 8007524:	f7ff feda 	bl	80072dc <_Balloc>
 8007528:	b930      	cbnz	r0, 8007538 <__multiply+0x44>
 800752a:	4602      	mov	r2, r0
 800752c:	4b44      	ldr	r3, [pc, #272]	; (8007640 <__multiply+0x14c>)
 800752e:	4845      	ldr	r0, [pc, #276]	; (8007644 <__multiply+0x150>)
 8007530:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007534:	f000 fb1a 	bl	8007b6c <__assert_func>
 8007538:	f100 0514 	add.w	r5, r0, #20
 800753c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007540:	462b      	mov	r3, r5
 8007542:	2200      	movs	r2, #0
 8007544:	4543      	cmp	r3, r8
 8007546:	d321      	bcc.n	800758c <__multiply+0x98>
 8007548:	f104 0314 	add.w	r3, r4, #20
 800754c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007550:	f109 0314 	add.w	r3, r9, #20
 8007554:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007558:	9202      	str	r2, [sp, #8]
 800755a:	1b3a      	subs	r2, r7, r4
 800755c:	3a15      	subs	r2, #21
 800755e:	f022 0203 	bic.w	r2, r2, #3
 8007562:	3204      	adds	r2, #4
 8007564:	f104 0115 	add.w	r1, r4, #21
 8007568:	428f      	cmp	r7, r1
 800756a:	bf38      	it	cc
 800756c:	2204      	movcc	r2, #4
 800756e:	9201      	str	r2, [sp, #4]
 8007570:	9a02      	ldr	r2, [sp, #8]
 8007572:	9303      	str	r3, [sp, #12]
 8007574:	429a      	cmp	r2, r3
 8007576:	d80c      	bhi.n	8007592 <__multiply+0x9e>
 8007578:	2e00      	cmp	r6, #0
 800757a:	dd03      	ble.n	8007584 <__multiply+0x90>
 800757c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007580:	2b00      	cmp	r3, #0
 8007582:	d05b      	beq.n	800763c <__multiply+0x148>
 8007584:	6106      	str	r6, [r0, #16]
 8007586:	b005      	add	sp, #20
 8007588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800758c:	f843 2b04 	str.w	r2, [r3], #4
 8007590:	e7d8      	b.n	8007544 <__multiply+0x50>
 8007592:	f8b3 a000 	ldrh.w	sl, [r3]
 8007596:	f1ba 0f00 	cmp.w	sl, #0
 800759a:	d024      	beq.n	80075e6 <__multiply+0xf2>
 800759c:	f104 0e14 	add.w	lr, r4, #20
 80075a0:	46a9      	mov	r9, r5
 80075a2:	f04f 0c00 	mov.w	ip, #0
 80075a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80075aa:	f8d9 1000 	ldr.w	r1, [r9]
 80075ae:	fa1f fb82 	uxth.w	fp, r2
 80075b2:	b289      	uxth	r1, r1
 80075b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80075b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80075bc:	f8d9 2000 	ldr.w	r2, [r9]
 80075c0:	4461      	add	r1, ip
 80075c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80075ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80075ce:	b289      	uxth	r1, r1
 80075d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075d4:	4577      	cmp	r7, lr
 80075d6:	f849 1b04 	str.w	r1, [r9], #4
 80075da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075de:	d8e2      	bhi.n	80075a6 <__multiply+0xb2>
 80075e0:	9a01      	ldr	r2, [sp, #4]
 80075e2:	f845 c002 	str.w	ip, [r5, r2]
 80075e6:	9a03      	ldr	r2, [sp, #12]
 80075e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80075ec:	3304      	adds	r3, #4
 80075ee:	f1b9 0f00 	cmp.w	r9, #0
 80075f2:	d021      	beq.n	8007638 <__multiply+0x144>
 80075f4:	6829      	ldr	r1, [r5, #0]
 80075f6:	f104 0c14 	add.w	ip, r4, #20
 80075fa:	46ae      	mov	lr, r5
 80075fc:	f04f 0a00 	mov.w	sl, #0
 8007600:	f8bc b000 	ldrh.w	fp, [ip]
 8007604:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007608:	fb09 220b 	mla	r2, r9, fp, r2
 800760c:	4452      	add	r2, sl
 800760e:	b289      	uxth	r1, r1
 8007610:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007614:	f84e 1b04 	str.w	r1, [lr], #4
 8007618:	f85c 1b04 	ldr.w	r1, [ip], #4
 800761c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007620:	f8be 1000 	ldrh.w	r1, [lr]
 8007624:	fb09 110a 	mla	r1, r9, sl, r1
 8007628:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800762c:	4567      	cmp	r7, ip
 800762e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007632:	d8e5      	bhi.n	8007600 <__multiply+0x10c>
 8007634:	9a01      	ldr	r2, [sp, #4]
 8007636:	50a9      	str	r1, [r5, r2]
 8007638:	3504      	adds	r5, #4
 800763a:	e799      	b.n	8007570 <__multiply+0x7c>
 800763c:	3e01      	subs	r6, #1
 800763e:	e79b      	b.n	8007578 <__multiply+0x84>
 8007640:	08008298 	.word	0x08008298
 8007644:	080082a9 	.word	0x080082a9

08007648 <__pow5mult>:
 8007648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800764c:	4615      	mov	r5, r2
 800764e:	f012 0203 	ands.w	r2, r2, #3
 8007652:	4606      	mov	r6, r0
 8007654:	460f      	mov	r7, r1
 8007656:	d007      	beq.n	8007668 <__pow5mult+0x20>
 8007658:	4c25      	ldr	r4, [pc, #148]	; (80076f0 <__pow5mult+0xa8>)
 800765a:	3a01      	subs	r2, #1
 800765c:	2300      	movs	r3, #0
 800765e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007662:	f7ff fe9d 	bl	80073a0 <__multadd>
 8007666:	4607      	mov	r7, r0
 8007668:	10ad      	asrs	r5, r5, #2
 800766a:	d03d      	beq.n	80076e8 <__pow5mult+0xa0>
 800766c:	69f4      	ldr	r4, [r6, #28]
 800766e:	b97c      	cbnz	r4, 8007690 <__pow5mult+0x48>
 8007670:	2010      	movs	r0, #16
 8007672:	f7ff fd7f 	bl	8007174 <malloc>
 8007676:	4602      	mov	r2, r0
 8007678:	61f0      	str	r0, [r6, #28]
 800767a:	b928      	cbnz	r0, 8007688 <__pow5mult+0x40>
 800767c:	4b1d      	ldr	r3, [pc, #116]	; (80076f4 <__pow5mult+0xac>)
 800767e:	481e      	ldr	r0, [pc, #120]	; (80076f8 <__pow5mult+0xb0>)
 8007680:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007684:	f000 fa72 	bl	8007b6c <__assert_func>
 8007688:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800768c:	6004      	str	r4, [r0, #0]
 800768e:	60c4      	str	r4, [r0, #12]
 8007690:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007694:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007698:	b94c      	cbnz	r4, 80076ae <__pow5mult+0x66>
 800769a:	f240 2171 	movw	r1, #625	; 0x271
 800769e:	4630      	mov	r0, r6
 80076a0:	f7ff ff12 	bl	80074c8 <__i2b>
 80076a4:	2300      	movs	r3, #0
 80076a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80076aa:	4604      	mov	r4, r0
 80076ac:	6003      	str	r3, [r0, #0]
 80076ae:	f04f 0900 	mov.w	r9, #0
 80076b2:	07eb      	lsls	r3, r5, #31
 80076b4:	d50a      	bpl.n	80076cc <__pow5mult+0x84>
 80076b6:	4639      	mov	r1, r7
 80076b8:	4622      	mov	r2, r4
 80076ba:	4630      	mov	r0, r6
 80076bc:	f7ff ff1a 	bl	80074f4 <__multiply>
 80076c0:	4639      	mov	r1, r7
 80076c2:	4680      	mov	r8, r0
 80076c4:	4630      	mov	r0, r6
 80076c6:	f7ff fe49 	bl	800735c <_Bfree>
 80076ca:	4647      	mov	r7, r8
 80076cc:	106d      	asrs	r5, r5, #1
 80076ce:	d00b      	beq.n	80076e8 <__pow5mult+0xa0>
 80076d0:	6820      	ldr	r0, [r4, #0]
 80076d2:	b938      	cbnz	r0, 80076e4 <__pow5mult+0x9c>
 80076d4:	4622      	mov	r2, r4
 80076d6:	4621      	mov	r1, r4
 80076d8:	4630      	mov	r0, r6
 80076da:	f7ff ff0b 	bl	80074f4 <__multiply>
 80076de:	6020      	str	r0, [r4, #0]
 80076e0:	f8c0 9000 	str.w	r9, [r0]
 80076e4:	4604      	mov	r4, r0
 80076e6:	e7e4      	b.n	80076b2 <__pow5mult+0x6a>
 80076e8:	4638      	mov	r0, r7
 80076ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ee:	bf00      	nop
 80076f0:	080083f8 	.word	0x080083f8
 80076f4:	08008229 	.word	0x08008229
 80076f8:	080082a9 	.word	0x080082a9

080076fc <__lshift>:
 80076fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007700:	460c      	mov	r4, r1
 8007702:	6849      	ldr	r1, [r1, #4]
 8007704:	6923      	ldr	r3, [r4, #16]
 8007706:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800770a:	68a3      	ldr	r3, [r4, #8]
 800770c:	4607      	mov	r7, r0
 800770e:	4691      	mov	r9, r2
 8007710:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007714:	f108 0601 	add.w	r6, r8, #1
 8007718:	42b3      	cmp	r3, r6
 800771a:	db0b      	blt.n	8007734 <__lshift+0x38>
 800771c:	4638      	mov	r0, r7
 800771e:	f7ff fddd 	bl	80072dc <_Balloc>
 8007722:	4605      	mov	r5, r0
 8007724:	b948      	cbnz	r0, 800773a <__lshift+0x3e>
 8007726:	4602      	mov	r2, r0
 8007728:	4b28      	ldr	r3, [pc, #160]	; (80077cc <__lshift+0xd0>)
 800772a:	4829      	ldr	r0, [pc, #164]	; (80077d0 <__lshift+0xd4>)
 800772c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007730:	f000 fa1c 	bl	8007b6c <__assert_func>
 8007734:	3101      	adds	r1, #1
 8007736:	005b      	lsls	r3, r3, #1
 8007738:	e7ee      	b.n	8007718 <__lshift+0x1c>
 800773a:	2300      	movs	r3, #0
 800773c:	f100 0114 	add.w	r1, r0, #20
 8007740:	f100 0210 	add.w	r2, r0, #16
 8007744:	4618      	mov	r0, r3
 8007746:	4553      	cmp	r3, sl
 8007748:	db33      	blt.n	80077b2 <__lshift+0xb6>
 800774a:	6920      	ldr	r0, [r4, #16]
 800774c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007750:	f104 0314 	add.w	r3, r4, #20
 8007754:	f019 091f 	ands.w	r9, r9, #31
 8007758:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800775c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007760:	d02b      	beq.n	80077ba <__lshift+0xbe>
 8007762:	f1c9 0e20 	rsb	lr, r9, #32
 8007766:	468a      	mov	sl, r1
 8007768:	2200      	movs	r2, #0
 800776a:	6818      	ldr	r0, [r3, #0]
 800776c:	fa00 f009 	lsl.w	r0, r0, r9
 8007770:	4310      	orrs	r0, r2
 8007772:	f84a 0b04 	str.w	r0, [sl], #4
 8007776:	f853 2b04 	ldr.w	r2, [r3], #4
 800777a:	459c      	cmp	ip, r3
 800777c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007780:	d8f3      	bhi.n	800776a <__lshift+0x6e>
 8007782:	ebac 0304 	sub.w	r3, ip, r4
 8007786:	3b15      	subs	r3, #21
 8007788:	f023 0303 	bic.w	r3, r3, #3
 800778c:	3304      	adds	r3, #4
 800778e:	f104 0015 	add.w	r0, r4, #21
 8007792:	4584      	cmp	ip, r0
 8007794:	bf38      	it	cc
 8007796:	2304      	movcc	r3, #4
 8007798:	50ca      	str	r2, [r1, r3]
 800779a:	b10a      	cbz	r2, 80077a0 <__lshift+0xa4>
 800779c:	f108 0602 	add.w	r6, r8, #2
 80077a0:	3e01      	subs	r6, #1
 80077a2:	4638      	mov	r0, r7
 80077a4:	612e      	str	r6, [r5, #16]
 80077a6:	4621      	mov	r1, r4
 80077a8:	f7ff fdd8 	bl	800735c <_Bfree>
 80077ac:	4628      	mov	r0, r5
 80077ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80077b6:	3301      	adds	r3, #1
 80077b8:	e7c5      	b.n	8007746 <__lshift+0x4a>
 80077ba:	3904      	subs	r1, #4
 80077bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80077c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80077c4:	459c      	cmp	ip, r3
 80077c6:	d8f9      	bhi.n	80077bc <__lshift+0xc0>
 80077c8:	e7ea      	b.n	80077a0 <__lshift+0xa4>
 80077ca:	bf00      	nop
 80077cc:	08008298 	.word	0x08008298
 80077d0:	080082a9 	.word	0x080082a9

080077d4 <__mcmp>:
 80077d4:	b530      	push	{r4, r5, lr}
 80077d6:	6902      	ldr	r2, [r0, #16]
 80077d8:	690c      	ldr	r4, [r1, #16]
 80077da:	1b12      	subs	r2, r2, r4
 80077dc:	d10e      	bne.n	80077fc <__mcmp+0x28>
 80077de:	f100 0314 	add.w	r3, r0, #20
 80077e2:	3114      	adds	r1, #20
 80077e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80077e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80077ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80077f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80077f4:	42a5      	cmp	r5, r4
 80077f6:	d003      	beq.n	8007800 <__mcmp+0x2c>
 80077f8:	d305      	bcc.n	8007806 <__mcmp+0x32>
 80077fa:	2201      	movs	r2, #1
 80077fc:	4610      	mov	r0, r2
 80077fe:	bd30      	pop	{r4, r5, pc}
 8007800:	4283      	cmp	r3, r0
 8007802:	d3f3      	bcc.n	80077ec <__mcmp+0x18>
 8007804:	e7fa      	b.n	80077fc <__mcmp+0x28>
 8007806:	f04f 32ff 	mov.w	r2, #4294967295
 800780a:	e7f7      	b.n	80077fc <__mcmp+0x28>

0800780c <__mdiff>:
 800780c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007810:	460c      	mov	r4, r1
 8007812:	4606      	mov	r6, r0
 8007814:	4611      	mov	r1, r2
 8007816:	4620      	mov	r0, r4
 8007818:	4690      	mov	r8, r2
 800781a:	f7ff ffdb 	bl	80077d4 <__mcmp>
 800781e:	1e05      	subs	r5, r0, #0
 8007820:	d110      	bne.n	8007844 <__mdiff+0x38>
 8007822:	4629      	mov	r1, r5
 8007824:	4630      	mov	r0, r6
 8007826:	f7ff fd59 	bl	80072dc <_Balloc>
 800782a:	b930      	cbnz	r0, 800783a <__mdiff+0x2e>
 800782c:	4b3a      	ldr	r3, [pc, #232]	; (8007918 <__mdiff+0x10c>)
 800782e:	4602      	mov	r2, r0
 8007830:	f240 2137 	movw	r1, #567	; 0x237
 8007834:	4839      	ldr	r0, [pc, #228]	; (800791c <__mdiff+0x110>)
 8007836:	f000 f999 	bl	8007b6c <__assert_func>
 800783a:	2301      	movs	r3, #1
 800783c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007840:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007844:	bfa4      	itt	ge
 8007846:	4643      	movge	r3, r8
 8007848:	46a0      	movge	r8, r4
 800784a:	4630      	mov	r0, r6
 800784c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007850:	bfa6      	itte	ge
 8007852:	461c      	movge	r4, r3
 8007854:	2500      	movge	r5, #0
 8007856:	2501      	movlt	r5, #1
 8007858:	f7ff fd40 	bl	80072dc <_Balloc>
 800785c:	b920      	cbnz	r0, 8007868 <__mdiff+0x5c>
 800785e:	4b2e      	ldr	r3, [pc, #184]	; (8007918 <__mdiff+0x10c>)
 8007860:	4602      	mov	r2, r0
 8007862:	f240 2145 	movw	r1, #581	; 0x245
 8007866:	e7e5      	b.n	8007834 <__mdiff+0x28>
 8007868:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800786c:	6926      	ldr	r6, [r4, #16]
 800786e:	60c5      	str	r5, [r0, #12]
 8007870:	f104 0914 	add.w	r9, r4, #20
 8007874:	f108 0514 	add.w	r5, r8, #20
 8007878:	f100 0e14 	add.w	lr, r0, #20
 800787c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007880:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007884:	f108 0210 	add.w	r2, r8, #16
 8007888:	46f2      	mov	sl, lr
 800788a:	2100      	movs	r1, #0
 800788c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007890:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007894:	fa11 f88b 	uxtah	r8, r1, fp
 8007898:	b299      	uxth	r1, r3
 800789a:	0c1b      	lsrs	r3, r3, #16
 800789c:	eba8 0801 	sub.w	r8, r8, r1
 80078a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80078a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80078a8:	fa1f f888 	uxth.w	r8, r8
 80078ac:	1419      	asrs	r1, r3, #16
 80078ae:	454e      	cmp	r6, r9
 80078b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80078b4:	f84a 3b04 	str.w	r3, [sl], #4
 80078b8:	d8e8      	bhi.n	800788c <__mdiff+0x80>
 80078ba:	1b33      	subs	r3, r6, r4
 80078bc:	3b15      	subs	r3, #21
 80078be:	f023 0303 	bic.w	r3, r3, #3
 80078c2:	3304      	adds	r3, #4
 80078c4:	3415      	adds	r4, #21
 80078c6:	42a6      	cmp	r6, r4
 80078c8:	bf38      	it	cc
 80078ca:	2304      	movcc	r3, #4
 80078cc:	441d      	add	r5, r3
 80078ce:	4473      	add	r3, lr
 80078d0:	469e      	mov	lr, r3
 80078d2:	462e      	mov	r6, r5
 80078d4:	4566      	cmp	r6, ip
 80078d6:	d30e      	bcc.n	80078f6 <__mdiff+0xea>
 80078d8:	f10c 0203 	add.w	r2, ip, #3
 80078dc:	1b52      	subs	r2, r2, r5
 80078de:	f022 0203 	bic.w	r2, r2, #3
 80078e2:	3d03      	subs	r5, #3
 80078e4:	45ac      	cmp	ip, r5
 80078e6:	bf38      	it	cc
 80078e8:	2200      	movcc	r2, #0
 80078ea:	4413      	add	r3, r2
 80078ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80078f0:	b17a      	cbz	r2, 8007912 <__mdiff+0x106>
 80078f2:	6107      	str	r7, [r0, #16]
 80078f4:	e7a4      	b.n	8007840 <__mdiff+0x34>
 80078f6:	f856 8b04 	ldr.w	r8, [r6], #4
 80078fa:	fa11 f288 	uxtah	r2, r1, r8
 80078fe:	1414      	asrs	r4, r2, #16
 8007900:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007904:	b292      	uxth	r2, r2
 8007906:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800790a:	f84e 2b04 	str.w	r2, [lr], #4
 800790e:	1421      	asrs	r1, r4, #16
 8007910:	e7e0      	b.n	80078d4 <__mdiff+0xc8>
 8007912:	3f01      	subs	r7, #1
 8007914:	e7ea      	b.n	80078ec <__mdiff+0xe0>
 8007916:	bf00      	nop
 8007918:	08008298 	.word	0x08008298
 800791c:	080082a9 	.word	0x080082a9

08007920 <__d2b>:
 8007920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007924:	460f      	mov	r7, r1
 8007926:	2101      	movs	r1, #1
 8007928:	ec59 8b10 	vmov	r8, r9, d0
 800792c:	4616      	mov	r6, r2
 800792e:	f7ff fcd5 	bl	80072dc <_Balloc>
 8007932:	4604      	mov	r4, r0
 8007934:	b930      	cbnz	r0, 8007944 <__d2b+0x24>
 8007936:	4602      	mov	r2, r0
 8007938:	4b24      	ldr	r3, [pc, #144]	; (80079cc <__d2b+0xac>)
 800793a:	4825      	ldr	r0, [pc, #148]	; (80079d0 <__d2b+0xb0>)
 800793c:	f240 310f 	movw	r1, #783	; 0x30f
 8007940:	f000 f914 	bl	8007b6c <__assert_func>
 8007944:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007948:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800794c:	bb2d      	cbnz	r5, 800799a <__d2b+0x7a>
 800794e:	9301      	str	r3, [sp, #4]
 8007950:	f1b8 0300 	subs.w	r3, r8, #0
 8007954:	d026      	beq.n	80079a4 <__d2b+0x84>
 8007956:	4668      	mov	r0, sp
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	f7ff fd87 	bl	800746c <__lo0bits>
 800795e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007962:	b1e8      	cbz	r0, 80079a0 <__d2b+0x80>
 8007964:	f1c0 0320 	rsb	r3, r0, #32
 8007968:	fa02 f303 	lsl.w	r3, r2, r3
 800796c:	430b      	orrs	r3, r1
 800796e:	40c2      	lsrs	r2, r0
 8007970:	6163      	str	r3, [r4, #20]
 8007972:	9201      	str	r2, [sp, #4]
 8007974:	9b01      	ldr	r3, [sp, #4]
 8007976:	61a3      	str	r3, [r4, #24]
 8007978:	2b00      	cmp	r3, #0
 800797a:	bf14      	ite	ne
 800797c:	2202      	movne	r2, #2
 800797e:	2201      	moveq	r2, #1
 8007980:	6122      	str	r2, [r4, #16]
 8007982:	b1bd      	cbz	r5, 80079b4 <__d2b+0x94>
 8007984:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007988:	4405      	add	r5, r0
 800798a:	603d      	str	r5, [r7, #0]
 800798c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007990:	6030      	str	r0, [r6, #0]
 8007992:	4620      	mov	r0, r4
 8007994:	b003      	add	sp, #12
 8007996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800799a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800799e:	e7d6      	b.n	800794e <__d2b+0x2e>
 80079a0:	6161      	str	r1, [r4, #20]
 80079a2:	e7e7      	b.n	8007974 <__d2b+0x54>
 80079a4:	a801      	add	r0, sp, #4
 80079a6:	f7ff fd61 	bl	800746c <__lo0bits>
 80079aa:	9b01      	ldr	r3, [sp, #4]
 80079ac:	6163      	str	r3, [r4, #20]
 80079ae:	3020      	adds	r0, #32
 80079b0:	2201      	movs	r2, #1
 80079b2:	e7e5      	b.n	8007980 <__d2b+0x60>
 80079b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80079b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079bc:	6038      	str	r0, [r7, #0]
 80079be:	6918      	ldr	r0, [r3, #16]
 80079c0:	f7ff fd34 	bl	800742c <__hi0bits>
 80079c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80079c8:	e7e2      	b.n	8007990 <__d2b+0x70>
 80079ca:	bf00      	nop
 80079cc:	08008298 	.word	0x08008298
 80079d0:	080082a9 	.word	0x080082a9

080079d4 <__sflush_r>:
 80079d4:	898a      	ldrh	r2, [r1, #12]
 80079d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079da:	4605      	mov	r5, r0
 80079dc:	0710      	lsls	r0, r2, #28
 80079de:	460c      	mov	r4, r1
 80079e0:	d458      	bmi.n	8007a94 <__sflush_r+0xc0>
 80079e2:	684b      	ldr	r3, [r1, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	dc05      	bgt.n	80079f4 <__sflush_r+0x20>
 80079e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	dc02      	bgt.n	80079f4 <__sflush_r+0x20>
 80079ee:	2000      	movs	r0, #0
 80079f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079f6:	2e00      	cmp	r6, #0
 80079f8:	d0f9      	beq.n	80079ee <__sflush_r+0x1a>
 80079fa:	2300      	movs	r3, #0
 80079fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a00:	682f      	ldr	r7, [r5, #0]
 8007a02:	6a21      	ldr	r1, [r4, #32]
 8007a04:	602b      	str	r3, [r5, #0]
 8007a06:	d032      	beq.n	8007a6e <__sflush_r+0x9a>
 8007a08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a0a:	89a3      	ldrh	r3, [r4, #12]
 8007a0c:	075a      	lsls	r2, r3, #29
 8007a0e:	d505      	bpl.n	8007a1c <__sflush_r+0x48>
 8007a10:	6863      	ldr	r3, [r4, #4]
 8007a12:	1ac0      	subs	r0, r0, r3
 8007a14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a16:	b10b      	cbz	r3, 8007a1c <__sflush_r+0x48>
 8007a18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a1a:	1ac0      	subs	r0, r0, r3
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	4602      	mov	r2, r0
 8007a20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a22:	6a21      	ldr	r1, [r4, #32]
 8007a24:	4628      	mov	r0, r5
 8007a26:	47b0      	blx	r6
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	d106      	bne.n	8007a3c <__sflush_r+0x68>
 8007a2e:	6829      	ldr	r1, [r5, #0]
 8007a30:	291d      	cmp	r1, #29
 8007a32:	d82b      	bhi.n	8007a8c <__sflush_r+0xb8>
 8007a34:	4a29      	ldr	r2, [pc, #164]	; (8007adc <__sflush_r+0x108>)
 8007a36:	410a      	asrs	r2, r1
 8007a38:	07d6      	lsls	r6, r2, #31
 8007a3a:	d427      	bmi.n	8007a8c <__sflush_r+0xb8>
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	6062      	str	r2, [r4, #4]
 8007a40:	04d9      	lsls	r1, r3, #19
 8007a42:	6922      	ldr	r2, [r4, #16]
 8007a44:	6022      	str	r2, [r4, #0]
 8007a46:	d504      	bpl.n	8007a52 <__sflush_r+0x7e>
 8007a48:	1c42      	adds	r2, r0, #1
 8007a4a:	d101      	bne.n	8007a50 <__sflush_r+0x7c>
 8007a4c:	682b      	ldr	r3, [r5, #0]
 8007a4e:	b903      	cbnz	r3, 8007a52 <__sflush_r+0x7e>
 8007a50:	6560      	str	r0, [r4, #84]	; 0x54
 8007a52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a54:	602f      	str	r7, [r5, #0]
 8007a56:	2900      	cmp	r1, #0
 8007a58:	d0c9      	beq.n	80079ee <__sflush_r+0x1a>
 8007a5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a5e:	4299      	cmp	r1, r3
 8007a60:	d002      	beq.n	8007a68 <__sflush_r+0x94>
 8007a62:	4628      	mov	r0, r5
 8007a64:	f7ff fb3a 	bl	80070dc <_free_r>
 8007a68:	2000      	movs	r0, #0
 8007a6a:	6360      	str	r0, [r4, #52]	; 0x34
 8007a6c:	e7c0      	b.n	80079f0 <__sflush_r+0x1c>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	4628      	mov	r0, r5
 8007a72:	47b0      	blx	r6
 8007a74:	1c41      	adds	r1, r0, #1
 8007a76:	d1c8      	bne.n	8007a0a <__sflush_r+0x36>
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0c5      	beq.n	8007a0a <__sflush_r+0x36>
 8007a7e:	2b1d      	cmp	r3, #29
 8007a80:	d001      	beq.n	8007a86 <__sflush_r+0xb2>
 8007a82:	2b16      	cmp	r3, #22
 8007a84:	d101      	bne.n	8007a8a <__sflush_r+0xb6>
 8007a86:	602f      	str	r7, [r5, #0]
 8007a88:	e7b1      	b.n	80079ee <__sflush_r+0x1a>
 8007a8a:	89a3      	ldrh	r3, [r4, #12]
 8007a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a90:	81a3      	strh	r3, [r4, #12]
 8007a92:	e7ad      	b.n	80079f0 <__sflush_r+0x1c>
 8007a94:	690f      	ldr	r7, [r1, #16]
 8007a96:	2f00      	cmp	r7, #0
 8007a98:	d0a9      	beq.n	80079ee <__sflush_r+0x1a>
 8007a9a:	0793      	lsls	r3, r2, #30
 8007a9c:	680e      	ldr	r6, [r1, #0]
 8007a9e:	bf08      	it	eq
 8007aa0:	694b      	ldreq	r3, [r1, #20]
 8007aa2:	600f      	str	r7, [r1, #0]
 8007aa4:	bf18      	it	ne
 8007aa6:	2300      	movne	r3, #0
 8007aa8:	eba6 0807 	sub.w	r8, r6, r7
 8007aac:	608b      	str	r3, [r1, #8]
 8007aae:	f1b8 0f00 	cmp.w	r8, #0
 8007ab2:	dd9c      	ble.n	80079ee <__sflush_r+0x1a>
 8007ab4:	6a21      	ldr	r1, [r4, #32]
 8007ab6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ab8:	4643      	mov	r3, r8
 8007aba:	463a      	mov	r2, r7
 8007abc:	4628      	mov	r0, r5
 8007abe:	47b0      	blx	r6
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	dc06      	bgt.n	8007ad2 <__sflush_r+0xfe>
 8007ac4:	89a3      	ldrh	r3, [r4, #12]
 8007ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aca:	81a3      	strh	r3, [r4, #12]
 8007acc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad0:	e78e      	b.n	80079f0 <__sflush_r+0x1c>
 8007ad2:	4407      	add	r7, r0
 8007ad4:	eba8 0800 	sub.w	r8, r8, r0
 8007ad8:	e7e9      	b.n	8007aae <__sflush_r+0xda>
 8007ada:	bf00      	nop
 8007adc:	dfbffffe 	.word	0xdfbffffe

08007ae0 <_fflush_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	690b      	ldr	r3, [r1, #16]
 8007ae4:	4605      	mov	r5, r0
 8007ae6:	460c      	mov	r4, r1
 8007ae8:	b913      	cbnz	r3, 8007af0 <_fflush_r+0x10>
 8007aea:	2500      	movs	r5, #0
 8007aec:	4628      	mov	r0, r5
 8007aee:	bd38      	pop	{r3, r4, r5, pc}
 8007af0:	b118      	cbz	r0, 8007afa <_fflush_r+0x1a>
 8007af2:	6a03      	ldr	r3, [r0, #32]
 8007af4:	b90b      	cbnz	r3, 8007afa <_fflush_r+0x1a>
 8007af6:	f7fe fb7b 	bl	80061f0 <__sinit>
 8007afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d0f3      	beq.n	8007aea <_fflush_r+0xa>
 8007b02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b04:	07d0      	lsls	r0, r2, #31
 8007b06:	d404      	bmi.n	8007b12 <_fflush_r+0x32>
 8007b08:	0599      	lsls	r1, r3, #22
 8007b0a:	d402      	bmi.n	8007b12 <_fflush_r+0x32>
 8007b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b0e:	f7fe fc66 	bl	80063de <__retarget_lock_acquire_recursive>
 8007b12:	4628      	mov	r0, r5
 8007b14:	4621      	mov	r1, r4
 8007b16:	f7ff ff5d 	bl	80079d4 <__sflush_r>
 8007b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b1c:	07da      	lsls	r2, r3, #31
 8007b1e:	4605      	mov	r5, r0
 8007b20:	d4e4      	bmi.n	8007aec <_fflush_r+0xc>
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	059b      	lsls	r3, r3, #22
 8007b26:	d4e1      	bmi.n	8007aec <_fflush_r+0xc>
 8007b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b2a:	f7fe fc59 	bl	80063e0 <__retarget_lock_release_recursive>
 8007b2e:	e7dd      	b.n	8007aec <_fflush_r+0xc>

08007b30 <_sbrk_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4d06      	ldr	r5, [pc, #24]	; (8007b4c <_sbrk_r+0x1c>)
 8007b34:	2300      	movs	r3, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	602b      	str	r3, [r5, #0]
 8007b3c:	f7f9 fed8 	bl	80018f0 <_sbrk>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d102      	bne.n	8007b4a <_sbrk_r+0x1a>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	b103      	cbz	r3, 8007b4a <_sbrk_r+0x1a>
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
 8007b4c:	20000510 	.word	0x20000510

08007b50 <memcpy>:
 8007b50:	440a      	add	r2, r1
 8007b52:	4291      	cmp	r1, r2
 8007b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b58:	d100      	bne.n	8007b5c <memcpy+0xc>
 8007b5a:	4770      	bx	lr
 8007b5c:	b510      	push	{r4, lr}
 8007b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b66:	4291      	cmp	r1, r2
 8007b68:	d1f9      	bne.n	8007b5e <memcpy+0xe>
 8007b6a:	bd10      	pop	{r4, pc}

08007b6c <__assert_func>:
 8007b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b6e:	4614      	mov	r4, r2
 8007b70:	461a      	mov	r2, r3
 8007b72:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <__assert_func+0x2c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4605      	mov	r5, r0
 8007b78:	68d8      	ldr	r0, [r3, #12]
 8007b7a:	b14c      	cbz	r4, 8007b90 <__assert_func+0x24>
 8007b7c:	4b07      	ldr	r3, [pc, #28]	; (8007b9c <__assert_func+0x30>)
 8007b7e:	9100      	str	r1, [sp, #0]
 8007b80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b84:	4906      	ldr	r1, [pc, #24]	; (8007ba0 <__assert_func+0x34>)
 8007b86:	462b      	mov	r3, r5
 8007b88:	f000 f844 	bl	8007c14 <fiprintf>
 8007b8c:	f000 f854 	bl	8007c38 <abort>
 8007b90:	4b04      	ldr	r3, [pc, #16]	; (8007ba4 <__assert_func+0x38>)
 8007b92:	461c      	mov	r4, r3
 8007b94:	e7f3      	b.n	8007b7e <__assert_func+0x12>
 8007b96:	bf00      	nop
 8007b98:	20000064 	.word	0x20000064
 8007b9c:	0800840e 	.word	0x0800840e
 8007ba0:	0800841b 	.word	0x0800841b
 8007ba4:	08008449 	.word	0x08008449

08007ba8 <_calloc_r>:
 8007ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007baa:	fba1 2402 	umull	r2, r4, r1, r2
 8007bae:	b94c      	cbnz	r4, 8007bc4 <_calloc_r+0x1c>
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	9201      	str	r2, [sp, #4]
 8007bb4:	f7ff fb06 	bl	80071c4 <_malloc_r>
 8007bb8:	9a01      	ldr	r2, [sp, #4]
 8007bba:	4605      	mov	r5, r0
 8007bbc:	b930      	cbnz	r0, 8007bcc <_calloc_r+0x24>
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	b003      	add	sp, #12
 8007bc2:	bd30      	pop	{r4, r5, pc}
 8007bc4:	220c      	movs	r2, #12
 8007bc6:	6002      	str	r2, [r0, #0]
 8007bc8:	2500      	movs	r5, #0
 8007bca:	e7f8      	b.n	8007bbe <_calloc_r+0x16>
 8007bcc:	4621      	mov	r1, r4
 8007bce:	f7fe fb88 	bl	80062e2 <memset>
 8007bd2:	e7f4      	b.n	8007bbe <_calloc_r+0x16>

08007bd4 <__ascii_mbtowc>:
 8007bd4:	b082      	sub	sp, #8
 8007bd6:	b901      	cbnz	r1, 8007bda <__ascii_mbtowc+0x6>
 8007bd8:	a901      	add	r1, sp, #4
 8007bda:	b142      	cbz	r2, 8007bee <__ascii_mbtowc+0x1a>
 8007bdc:	b14b      	cbz	r3, 8007bf2 <__ascii_mbtowc+0x1e>
 8007bde:	7813      	ldrb	r3, [r2, #0]
 8007be0:	600b      	str	r3, [r1, #0]
 8007be2:	7812      	ldrb	r2, [r2, #0]
 8007be4:	1e10      	subs	r0, r2, #0
 8007be6:	bf18      	it	ne
 8007be8:	2001      	movne	r0, #1
 8007bea:	b002      	add	sp, #8
 8007bec:	4770      	bx	lr
 8007bee:	4610      	mov	r0, r2
 8007bf0:	e7fb      	b.n	8007bea <__ascii_mbtowc+0x16>
 8007bf2:	f06f 0001 	mvn.w	r0, #1
 8007bf6:	e7f8      	b.n	8007bea <__ascii_mbtowc+0x16>

08007bf8 <__ascii_wctomb>:
 8007bf8:	b149      	cbz	r1, 8007c0e <__ascii_wctomb+0x16>
 8007bfa:	2aff      	cmp	r2, #255	; 0xff
 8007bfc:	bf85      	ittet	hi
 8007bfe:	238a      	movhi	r3, #138	; 0x8a
 8007c00:	6003      	strhi	r3, [r0, #0]
 8007c02:	700a      	strbls	r2, [r1, #0]
 8007c04:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c08:	bf98      	it	ls
 8007c0a:	2001      	movls	r0, #1
 8007c0c:	4770      	bx	lr
 8007c0e:	4608      	mov	r0, r1
 8007c10:	4770      	bx	lr
	...

08007c14 <fiprintf>:
 8007c14:	b40e      	push	{r1, r2, r3}
 8007c16:	b503      	push	{r0, r1, lr}
 8007c18:	4601      	mov	r1, r0
 8007c1a:	ab03      	add	r3, sp, #12
 8007c1c:	4805      	ldr	r0, [pc, #20]	; (8007c34 <fiprintf+0x20>)
 8007c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c22:	6800      	ldr	r0, [r0, #0]
 8007c24:	9301      	str	r3, [sp, #4]
 8007c26:	f000 f837 	bl	8007c98 <_vfiprintf_r>
 8007c2a:	b002      	add	sp, #8
 8007c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c30:	b003      	add	sp, #12
 8007c32:	4770      	bx	lr
 8007c34:	20000064 	.word	0x20000064

08007c38 <abort>:
 8007c38:	b508      	push	{r3, lr}
 8007c3a:	2006      	movs	r0, #6
 8007c3c:	f000 fa04 	bl	8008048 <raise>
 8007c40:	2001      	movs	r0, #1
 8007c42:	f7f9 fddd 	bl	8001800 <_exit>

08007c46 <__sfputc_r>:
 8007c46:	6893      	ldr	r3, [r2, #8]
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	b410      	push	{r4}
 8007c4e:	6093      	str	r3, [r2, #8]
 8007c50:	da08      	bge.n	8007c64 <__sfputc_r+0x1e>
 8007c52:	6994      	ldr	r4, [r2, #24]
 8007c54:	42a3      	cmp	r3, r4
 8007c56:	db01      	blt.n	8007c5c <__sfputc_r+0x16>
 8007c58:	290a      	cmp	r1, #10
 8007c5a:	d103      	bne.n	8007c64 <__sfputc_r+0x1e>
 8007c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c60:	f000 b934 	b.w	8007ecc <__swbuf_r>
 8007c64:	6813      	ldr	r3, [r2, #0]
 8007c66:	1c58      	adds	r0, r3, #1
 8007c68:	6010      	str	r0, [r2, #0]
 8007c6a:	7019      	strb	r1, [r3, #0]
 8007c6c:	4608      	mov	r0, r1
 8007c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <__sfputs_r>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	4606      	mov	r6, r0
 8007c78:	460f      	mov	r7, r1
 8007c7a:	4614      	mov	r4, r2
 8007c7c:	18d5      	adds	r5, r2, r3
 8007c7e:	42ac      	cmp	r4, r5
 8007c80:	d101      	bne.n	8007c86 <__sfputs_r+0x12>
 8007c82:	2000      	movs	r0, #0
 8007c84:	e007      	b.n	8007c96 <__sfputs_r+0x22>
 8007c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c8a:	463a      	mov	r2, r7
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f7ff ffda 	bl	8007c46 <__sfputc_r>
 8007c92:	1c43      	adds	r3, r0, #1
 8007c94:	d1f3      	bne.n	8007c7e <__sfputs_r+0xa>
 8007c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007c98 <_vfiprintf_r>:
 8007c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	460d      	mov	r5, r1
 8007c9e:	b09d      	sub	sp, #116	; 0x74
 8007ca0:	4614      	mov	r4, r2
 8007ca2:	4698      	mov	r8, r3
 8007ca4:	4606      	mov	r6, r0
 8007ca6:	b118      	cbz	r0, 8007cb0 <_vfiprintf_r+0x18>
 8007ca8:	6a03      	ldr	r3, [r0, #32]
 8007caa:	b90b      	cbnz	r3, 8007cb0 <_vfiprintf_r+0x18>
 8007cac:	f7fe faa0 	bl	80061f0 <__sinit>
 8007cb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cb2:	07d9      	lsls	r1, r3, #31
 8007cb4:	d405      	bmi.n	8007cc2 <_vfiprintf_r+0x2a>
 8007cb6:	89ab      	ldrh	r3, [r5, #12]
 8007cb8:	059a      	lsls	r2, r3, #22
 8007cba:	d402      	bmi.n	8007cc2 <_vfiprintf_r+0x2a>
 8007cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cbe:	f7fe fb8e 	bl	80063de <__retarget_lock_acquire_recursive>
 8007cc2:	89ab      	ldrh	r3, [r5, #12]
 8007cc4:	071b      	lsls	r3, r3, #28
 8007cc6:	d501      	bpl.n	8007ccc <_vfiprintf_r+0x34>
 8007cc8:	692b      	ldr	r3, [r5, #16]
 8007cca:	b99b      	cbnz	r3, 8007cf4 <_vfiprintf_r+0x5c>
 8007ccc:	4629      	mov	r1, r5
 8007cce:	4630      	mov	r0, r6
 8007cd0:	f000 f93a 	bl	8007f48 <__swsetup_r>
 8007cd4:	b170      	cbz	r0, 8007cf4 <_vfiprintf_r+0x5c>
 8007cd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cd8:	07dc      	lsls	r4, r3, #31
 8007cda:	d504      	bpl.n	8007ce6 <_vfiprintf_r+0x4e>
 8007cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce0:	b01d      	add	sp, #116	; 0x74
 8007ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce6:	89ab      	ldrh	r3, [r5, #12]
 8007ce8:	0598      	lsls	r0, r3, #22
 8007cea:	d4f7      	bmi.n	8007cdc <_vfiprintf_r+0x44>
 8007cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cee:	f7fe fb77 	bl	80063e0 <__retarget_lock_release_recursive>
 8007cf2:	e7f3      	b.n	8007cdc <_vfiprintf_r+0x44>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cf8:	2320      	movs	r3, #32
 8007cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d02:	2330      	movs	r3, #48	; 0x30
 8007d04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007eb8 <_vfiprintf_r+0x220>
 8007d08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d0c:	f04f 0901 	mov.w	r9, #1
 8007d10:	4623      	mov	r3, r4
 8007d12:	469a      	mov	sl, r3
 8007d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d18:	b10a      	cbz	r2, 8007d1e <_vfiprintf_r+0x86>
 8007d1a:	2a25      	cmp	r2, #37	; 0x25
 8007d1c:	d1f9      	bne.n	8007d12 <_vfiprintf_r+0x7a>
 8007d1e:	ebba 0b04 	subs.w	fp, sl, r4
 8007d22:	d00b      	beq.n	8007d3c <_vfiprintf_r+0xa4>
 8007d24:	465b      	mov	r3, fp
 8007d26:	4622      	mov	r2, r4
 8007d28:	4629      	mov	r1, r5
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	f7ff ffa2 	bl	8007c74 <__sfputs_r>
 8007d30:	3001      	adds	r0, #1
 8007d32:	f000 80a9 	beq.w	8007e88 <_vfiprintf_r+0x1f0>
 8007d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d38:	445a      	add	r2, fp
 8007d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 80a1 	beq.w	8007e88 <_vfiprintf_r+0x1f0>
 8007d46:	2300      	movs	r3, #0
 8007d48:	f04f 32ff 	mov.w	r2, #4294967295
 8007d4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d50:	f10a 0a01 	add.w	sl, sl, #1
 8007d54:	9304      	str	r3, [sp, #16]
 8007d56:	9307      	str	r3, [sp, #28]
 8007d58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d5c:	931a      	str	r3, [sp, #104]	; 0x68
 8007d5e:	4654      	mov	r4, sl
 8007d60:	2205      	movs	r2, #5
 8007d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d66:	4854      	ldr	r0, [pc, #336]	; (8007eb8 <_vfiprintf_r+0x220>)
 8007d68:	f7f8 fa32 	bl	80001d0 <memchr>
 8007d6c:	9a04      	ldr	r2, [sp, #16]
 8007d6e:	b9d8      	cbnz	r0, 8007da8 <_vfiprintf_r+0x110>
 8007d70:	06d1      	lsls	r1, r2, #27
 8007d72:	bf44      	itt	mi
 8007d74:	2320      	movmi	r3, #32
 8007d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d7a:	0713      	lsls	r3, r2, #28
 8007d7c:	bf44      	itt	mi
 8007d7e:	232b      	movmi	r3, #43	; 0x2b
 8007d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d84:	f89a 3000 	ldrb.w	r3, [sl]
 8007d88:	2b2a      	cmp	r3, #42	; 0x2a
 8007d8a:	d015      	beq.n	8007db8 <_vfiprintf_r+0x120>
 8007d8c:	9a07      	ldr	r2, [sp, #28]
 8007d8e:	4654      	mov	r4, sl
 8007d90:	2000      	movs	r0, #0
 8007d92:	f04f 0c0a 	mov.w	ip, #10
 8007d96:	4621      	mov	r1, r4
 8007d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d9c:	3b30      	subs	r3, #48	; 0x30
 8007d9e:	2b09      	cmp	r3, #9
 8007da0:	d94d      	bls.n	8007e3e <_vfiprintf_r+0x1a6>
 8007da2:	b1b0      	cbz	r0, 8007dd2 <_vfiprintf_r+0x13a>
 8007da4:	9207      	str	r2, [sp, #28]
 8007da6:	e014      	b.n	8007dd2 <_vfiprintf_r+0x13a>
 8007da8:	eba0 0308 	sub.w	r3, r0, r8
 8007dac:	fa09 f303 	lsl.w	r3, r9, r3
 8007db0:	4313      	orrs	r3, r2
 8007db2:	9304      	str	r3, [sp, #16]
 8007db4:	46a2      	mov	sl, r4
 8007db6:	e7d2      	b.n	8007d5e <_vfiprintf_r+0xc6>
 8007db8:	9b03      	ldr	r3, [sp, #12]
 8007dba:	1d19      	adds	r1, r3, #4
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	9103      	str	r1, [sp, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	bfbb      	ittet	lt
 8007dc4:	425b      	neglt	r3, r3
 8007dc6:	f042 0202 	orrlt.w	r2, r2, #2
 8007dca:	9307      	strge	r3, [sp, #28]
 8007dcc:	9307      	strlt	r3, [sp, #28]
 8007dce:	bfb8      	it	lt
 8007dd0:	9204      	strlt	r2, [sp, #16]
 8007dd2:	7823      	ldrb	r3, [r4, #0]
 8007dd4:	2b2e      	cmp	r3, #46	; 0x2e
 8007dd6:	d10c      	bne.n	8007df2 <_vfiprintf_r+0x15a>
 8007dd8:	7863      	ldrb	r3, [r4, #1]
 8007dda:	2b2a      	cmp	r3, #42	; 0x2a
 8007ddc:	d134      	bne.n	8007e48 <_vfiprintf_r+0x1b0>
 8007dde:	9b03      	ldr	r3, [sp, #12]
 8007de0:	1d1a      	adds	r2, r3, #4
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	9203      	str	r2, [sp, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	bfb8      	it	lt
 8007dea:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dee:	3402      	adds	r4, #2
 8007df0:	9305      	str	r3, [sp, #20]
 8007df2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007ec8 <_vfiprintf_r+0x230>
 8007df6:	7821      	ldrb	r1, [r4, #0]
 8007df8:	2203      	movs	r2, #3
 8007dfa:	4650      	mov	r0, sl
 8007dfc:	f7f8 f9e8 	bl	80001d0 <memchr>
 8007e00:	b138      	cbz	r0, 8007e12 <_vfiprintf_r+0x17a>
 8007e02:	9b04      	ldr	r3, [sp, #16]
 8007e04:	eba0 000a 	sub.w	r0, r0, sl
 8007e08:	2240      	movs	r2, #64	; 0x40
 8007e0a:	4082      	lsls	r2, r0
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	3401      	adds	r4, #1
 8007e10:	9304      	str	r3, [sp, #16]
 8007e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e16:	4829      	ldr	r0, [pc, #164]	; (8007ebc <_vfiprintf_r+0x224>)
 8007e18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e1c:	2206      	movs	r2, #6
 8007e1e:	f7f8 f9d7 	bl	80001d0 <memchr>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d03f      	beq.n	8007ea6 <_vfiprintf_r+0x20e>
 8007e26:	4b26      	ldr	r3, [pc, #152]	; (8007ec0 <_vfiprintf_r+0x228>)
 8007e28:	bb1b      	cbnz	r3, 8007e72 <_vfiprintf_r+0x1da>
 8007e2a:	9b03      	ldr	r3, [sp, #12]
 8007e2c:	3307      	adds	r3, #7
 8007e2e:	f023 0307 	bic.w	r3, r3, #7
 8007e32:	3308      	adds	r3, #8
 8007e34:	9303      	str	r3, [sp, #12]
 8007e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e38:	443b      	add	r3, r7
 8007e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e3c:	e768      	b.n	8007d10 <_vfiprintf_r+0x78>
 8007e3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e42:	460c      	mov	r4, r1
 8007e44:	2001      	movs	r0, #1
 8007e46:	e7a6      	b.n	8007d96 <_vfiprintf_r+0xfe>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	3401      	adds	r4, #1
 8007e4c:	9305      	str	r3, [sp, #20]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	f04f 0c0a 	mov.w	ip, #10
 8007e54:	4620      	mov	r0, r4
 8007e56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e5a:	3a30      	subs	r2, #48	; 0x30
 8007e5c:	2a09      	cmp	r2, #9
 8007e5e:	d903      	bls.n	8007e68 <_vfiprintf_r+0x1d0>
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d0c6      	beq.n	8007df2 <_vfiprintf_r+0x15a>
 8007e64:	9105      	str	r1, [sp, #20]
 8007e66:	e7c4      	b.n	8007df2 <_vfiprintf_r+0x15a>
 8007e68:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e7f0      	b.n	8007e54 <_vfiprintf_r+0x1bc>
 8007e72:	ab03      	add	r3, sp, #12
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	462a      	mov	r2, r5
 8007e78:	4b12      	ldr	r3, [pc, #72]	; (8007ec4 <_vfiprintf_r+0x22c>)
 8007e7a:	a904      	add	r1, sp, #16
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	f7fd fd65 	bl	800594c <_printf_float>
 8007e82:	4607      	mov	r7, r0
 8007e84:	1c78      	adds	r0, r7, #1
 8007e86:	d1d6      	bne.n	8007e36 <_vfiprintf_r+0x19e>
 8007e88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e8a:	07d9      	lsls	r1, r3, #31
 8007e8c:	d405      	bmi.n	8007e9a <_vfiprintf_r+0x202>
 8007e8e:	89ab      	ldrh	r3, [r5, #12]
 8007e90:	059a      	lsls	r2, r3, #22
 8007e92:	d402      	bmi.n	8007e9a <_vfiprintf_r+0x202>
 8007e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e96:	f7fe faa3 	bl	80063e0 <__retarget_lock_release_recursive>
 8007e9a:	89ab      	ldrh	r3, [r5, #12]
 8007e9c:	065b      	lsls	r3, r3, #25
 8007e9e:	f53f af1d 	bmi.w	8007cdc <_vfiprintf_r+0x44>
 8007ea2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ea4:	e71c      	b.n	8007ce0 <_vfiprintf_r+0x48>
 8007ea6:	ab03      	add	r3, sp, #12
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	462a      	mov	r2, r5
 8007eac:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <_vfiprintf_r+0x22c>)
 8007eae:	a904      	add	r1, sp, #16
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f7fd ffef 	bl	8005e94 <_printf_i>
 8007eb6:	e7e4      	b.n	8007e82 <_vfiprintf_r+0x1ea>
 8007eb8:	0800854b 	.word	0x0800854b
 8007ebc:	08008555 	.word	0x08008555
 8007ec0:	0800594d 	.word	0x0800594d
 8007ec4:	08007c75 	.word	0x08007c75
 8007ec8:	08008551 	.word	0x08008551

08007ecc <__swbuf_r>:
 8007ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ece:	460e      	mov	r6, r1
 8007ed0:	4614      	mov	r4, r2
 8007ed2:	4605      	mov	r5, r0
 8007ed4:	b118      	cbz	r0, 8007ede <__swbuf_r+0x12>
 8007ed6:	6a03      	ldr	r3, [r0, #32]
 8007ed8:	b90b      	cbnz	r3, 8007ede <__swbuf_r+0x12>
 8007eda:	f7fe f989 	bl	80061f0 <__sinit>
 8007ede:	69a3      	ldr	r3, [r4, #24]
 8007ee0:	60a3      	str	r3, [r4, #8]
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	071a      	lsls	r2, r3, #28
 8007ee6:	d525      	bpl.n	8007f34 <__swbuf_r+0x68>
 8007ee8:	6923      	ldr	r3, [r4, #16]
 8007eea:	b31b      	cbz	r3, 8007f34 <__swbuf_r+0x68>
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	6922      	ldr	r2, [r4, #16]
 8007ef0:	1a98      	subs	r0, r3, r2
 8007ef2:	6963      	ldr	r3, [r4, #20]
 8007ef4:	b2f6      	uxtb	r6, r6
 8007ef6:	4283      	cmp	r3, r0
 8007ef8:	4637      	mov	r7, r6
 8007efa:	dc04      	bgt.n	8007f06 <__swbuf_r+0x3a>
 8007efc:	4621      	mov	r1, r4
 8007efe:	4628      	mov	r0, r5
 8007f00:	f7ff fdee 	bl	8007ae0 <_fflush_r>
 8007f04:	b9e0      	cbnz	r0, 8007f40 <__swbuf_r+0x74>
 8007f06:	68a3      	ldr	r3, [r4, #8]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	60a3      	str	r3, [r4, #8]
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	1c5a      	adds	r2, r3, #1
 8007f10:	6022      	str	r2, [r4, #0]
 8007f12:	701e      	strb	r6, [r3, #0]
 8007f14:	6962      	ldr	r2, [r4, #20]
 8007f16:	1c43      	adds	r3, r0, #1
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d004      	beq.n	8007f26 <__swbuf_r+0x5a>
 8007f1c:	89a3      	ldrh	r3, [r4, #12]
 8007f1e:	07db      	lsls	r3, r3, #31
 8007f20:	d506      	bpl.n	8007f30 <__swbuf_r+0x64>
 8007f22:	2e0a      	cmp	r6, #10
 8007f24:	d104      	bne.n	8007f30 <__swbuf_r+0x64>
 8007f26:	4621      	mov	r1, r4
 8007f28:	4628      	mov	r0, r5
 8007f2a:	f7ff fdd9 	bl	8007ae0 <_fflush_r>
 8007f2e:	b938      	cbnz	r0, 8007f40 <__swbuf_r+0x74>
 8007f30:	4638      	mov	r0, r7
 8007f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f34:	4621      	mov	r1, r4
 8007f36:	4628      	mov	r0, r5
 8007f38:	f000 f806 	bl	8007f48 <__swsetup_r>
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	d0d5      	beq.n	8007eec <__swbuf_r+0x20>
 8007f40:	f04f 37ff 	mov.w	r7, #4294967295
 8007f44:	e7f4      	b.n	8007f30 <__swbuf_r+0x64>
	...

08007f48 <__swsetup_r>:
 8007f48:	b538      	push	{r3, r4, r5, lr}
 8007f4a:	4b2a      	ldr	r3, [pc, #168]	; (8007ff4 <__swsetup_r+0xac>)
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	6818      	ldr	r0, [r3, #0]
 8007f50:	460c      	mov	r4, r1
 8007f52:	b118      	cbz	r0, 8007f5c <__swsetup_r+0x14>
 8007f54:	6a03      	ldr	r3, [r0, #32]
 8007f56:	b90b      	cbnz	r3, 8007f5c <__swsetup_r+0x14>
 8007f58:	f7fe f94a 	bl	80061f0 <__sinit>
 8007f5c:	89a3      	ldrh	r3, [r4, #12]
 8007f5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f62:	0718      	lsls	r0, r3, #28
 8007f64:	d422      	bmi.n	8007fac <__swsetup_r+0x64>
 8007f66:	06d9      	lsls	r1, r3, #27
 8007f68:	d407      	bmi.n	8007f7a <__swsetup_r+0x32>
 8007f6a:	2309      	movs	r3, #9
 8007f6c:	602b      	str	r3, [r5, #0]
 8007f6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f72:	81a3      	strh	r3, [r4, #12]
 8007f74:	f04f 30ff 	mov.w	r0, #4294967295
 8007f78:	e034      	b.n	8007fe4 <__swsetup_r+0x9c>
 8007f7a:	0758      	lsls	r0, r3, #29
 8007f7c:	d512      	bpl.n	8007fa4 <__swsetup_r+0x5c>
 8007f7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f80:	b141      	cbz	r1, 8007f94 <__swsetup_r+0x4c>
 8007f82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f86:	4299      	cmp	r1, r3
 8007f88:	d002      	beq.n	8007f90 <__swsetup_r+0x48>
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	f7ff f8a6 	bl	80070dc <_free_r>
 8007f90:	2300      	movs	r3, #0
 8007f92:	6363      	str	r3, [r4, #52]	; 0x34
 8007f94:	89a3      	ldrh	r3, [r4, #12]
 8007f96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f9a:	81a3      	strh	r3, [r4, #12]
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	6063      	str	r3, [r4, #4]
 8007fa0:	6923      	ldr	r3, [r4, #16]
 8007fa2:	6023      	str	r3, [r4, #0]
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	f043 0308 	orr.w	r3, r3, #8
 8007faa:	81a3      	strh	r3, [r4, #12]
 8007fac:	6923      	ldr	r3, [r4, #16]
 8007fae:	b94b      	cbnz	r3, 8007fc4 <__swsetup_r+0x7c>
 8007fb0:	89a3      	ldrh	r3, [r4, #12]
 8007fb2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fba:	d003      	beq.n	8007fc4 <__swsetup_r+0x7c>
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	f000 f884 	bl	80080cc <__smakebuf_r>
 8007fc4:	89a0      	ldrh	r0, [r4, #12]
 8007fc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fca:	f010 0301 	ands.w	r3, r0, #1
 8007fce:	d00a      	beq.n	8007fe6 <__swsetup_r+0x9e>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	60a3      	str	r3, [r4, #8]
 8007fd4:	6963      	ldr	r3, [r4, #20]
 8007fd6:	425b      	negs	r3, r3
 8007fd8:	61a3      	str	r3, [r4, #24]
 8007fda:	6923      	ldr	r3, [r4, #16]
 8007fdc:	b943      	cbnz	r3, 8007ff0 <__swsetup_r+0xa8>
 8007fde:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007fe2:	d1c4      	bne.n	8007f6e <__swsetup_r+0x26>
 8007fe4:	bd38      	pop	{r3, r4, r5, pc}
 8007fe6:	0781      	lsls	r1, r0, #30
 8007fe8:	bf58      	it	pl
 8007fea:	6963      	ldrpl	r3, [r4, #20]
 8007fec:	60a3      	str	r3, [r4, #8]
 8007fee:	e7f4      	b.n	8007fda <__swsetup_r+0x92>
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	e7f7      	b.n	8007fe4 <__swsetup_r+0x9c>
 8007ff4:	20000064 	.word	0x20000064

08007ff8 <_raise_r>:
 8007ff8:	291f      	cmp	r1, #31
 8007ffa:	b538      	push	{r3, r4, r5, lr}
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	460d      	mov	r5, r1
 8008000:	d904      	bls.n	800800c <_raise_r+0x14>
 8008002:	2316      	movs	r3, #22
 8008004:	6003      	str	r3, [r0, #0]
 8008006:	f04f 30ff 	mov.w	r0, #4294967295
 800800a:	bd38      	pop	{r3, r4, r5, pc}
 800800c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800800e:	b112      	cbz	r2, 8008016 <_raise_r+0x1e>
 8008010:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008014:	b94b      	cbnz	r3, 800802a <_raise_r+0x32>
 8008016:	4620      	mov	r0, r4
 8008018:	f000 f830 	bl	800807c <_getpid_r>
 800801c:	462a      	mov	r2, r5
 800801e:	4601      	mov	r1, r0
 8008020:	4620      	mov	r0, r4
 8008022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008026:	f000 b817 	b.w	8008058 <_kill_r>
 800802a:	2b01      	cmp	r3, #1
 800802c:	d00a      	beq.n	8008044 <_raise_r+0x4c>
 800802e:	1c59      	adds	r1, r3, #1
 8008030:	d103      	bne.n	800803a <_raise_r+0x42>
 8008032:	2316      	movs	r3, #22
 8008034:	6003      	str	r3, [r0, #0]
 8008036:	2001      	movs	r0, #1
 8008038:	e7e7      	b.n	800800a <_raise_r+0x12>
 800803a:	2400      	movs	r4, #0
 800803c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008040:	4628      	mov	r0, r5
 8008042:	4798      	blx	r3
 8008044:	2000      	movs	r0, #0
 8008046:	e7e0      	b.n	800800a <_raise_r+0x12>

08008048 <raise>:
 8008048:	4b02      	ldr	r3, [pc, #8]	; (8008054 <raise+0xc>)
 800804a:	4601      	mov	r1, r0
 800804c:	6818      	ldr	r0, [r3, #0]
 800804e:	f7ff bfd3 	b.w	8007ff8 <_raise_r>
 8008052:	bf00      	nop
 8008054:	20000064 	.word	0x20000064

08008058 <_kill_r>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	4d07      	ldr	r5, [pc, #28]	; (8008078 <_kill_r+0x20>)
 800805c:	2300      	movs	r3, #0
 800805e:	4604      	mov	r4, r0
 8008060:	4608      	mov	r0, r1
 8008062:	4611      	mov	r1, r2
 8008064:	602b      	str	r3, [r5, #0]
 8008066:	f7f9 fbbb 	bl	80017e0 <_kill>
 800806a:	1c43      	adds	r3, r0, #1
 800806c:	d102      	bne.n	8008074 <_kill_r+0x1c>
 800806e:	682b      	ldr	r3, [r5, #0]
 8008070:	b103      	cbz	r3, 8008074 <_kill_r+0x1c>
 8008072:	6023      	str	r3, [r4, #0]
 8008074:	bd38      	pop	{r3, r4, r5, pc}
 8008076:	bf00      	nop
 8008078:	20000510 	.word	0x20000510

0800807c <_getpid_r>:
 800807c:	f7f9 bba8 	b.w	80017d0 <_getpid>

08008080 <__swhatbuf_r>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	460c      	mov	r4, r1
 8008084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008088:	2900      	cmp	r1, #0
 800808a:	b096      	sub	sp, #88	; 0x58
 800808c:	4615      	mov	r5, r2
 800808e:	461e      	mov	r6, r3
 8008090:	da0d      	bge.n	80080ae <__swhatbuf_r+0x2e>
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008098:	f04f 0100 	mov.w	r1, #0
 800809c:	bf0c      	ite	eq
 800809e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80080a2:	2340      	movne	r3, #64	; 0x40
 80080a4:	2000      	movs	r0, #0
 80080a6:	6031      	str	r1, [r6, #0]
 80080a8:	602b      	str	r3, [r5, #0]
 80080aa:	b016      	add	sp, #88	; 0x58
 80080ac:	bd70      	pop	{r4, r5, r6, pc}
 80080ae:	466a      	mov	r2, sp
 80080b0:	f000 f848 	bl	8008144 <_fstat_r>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	dbec      	blt.n	8008092 <__swhatbuf_r+0x12>
 80080b8:	9901      	ldr	r1, [sp, #4]
 80080ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80080be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80080c2:	4259      	negs	r1, r3
 80080c4:	4159      	adcs	r1, r3
 80080c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080ca:	e7eb      	b.n	80080a4 <__swhatbuf_r+0x24>

080080cc <__smakebuf_r>:
 80080cc:	898b      	ldrh	r3, [r1, #12]
 80080ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080d0:	079d      	lsls	r5, r3, #30
 80080d2:	4606      	mov	r6, r0
 80080d4:	460c      	mov	r4, r1
 80080d6:	d507      	bpl.n	80080e8 <__smakebuf_r+0x1c>
 80080d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	6123      	str	r3, [r4, #16]
 80080e0:	2301      	movs	r3, #1
 80080e2:	6163      	str	r3, [r4, #20]
 80080e4:	b002      	add	sp, #8
 80080e6:	bd70      	pop	{r4, r5, r6, pc}
 80080e8:	ab01      	add	r3, sp, #4
 80080ea:	466a      	mov	r2, sp
 80080ec:	f7ff ffc8 	bl	8008080 <__swhatbuf_r>
 80080f0:	9900      	ldr	r1, [sp, #0]
 80080f2:	4605      	mov	r5, r0
 80080f4:	4630      	mov	r0, r6
 80080f6:	f7ff f865 	bl	80071c4 <_malloc_r>
 80080fa:	b948      	cbnz	r0, 8008110 <__smakebuf_r+0x44>
 80080fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008100:	059a      	lsls	r2, r3, #22
 8008102:	d4ef      	bmi.n	80080e4 <__smakebuf_r+0x18>
 8008104:	f023 0303 	bic.w	r3, r3, #3
 8008108:	f043 0302 	orr.w	r3, r3, #2
 800810c:	81a3      	strh	r3, [r4, #12]
 800810e:	e7e3      	b.n	80080d8 <__smakebuf_r+0xc>
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	6020      	str	r0, [r4, #0]
 8008114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008118:	81a3      	strh	r3, [r4, #12]
 800811a:	9b00      	ldr	r3, [sp, #0]
 800811c:	6163      	str	r3, [r4, #20]
 800811e:	9b01      	ldr	r3, [sp, #4]
 8008120:	6120      	str	r0, [r4, #16]
 8008122:	b15b      	cbz	r3, 800813c <__smakebuf_r+0x70>
 8008124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008128:	4630      	mov	r0, r6
 800812a:	f000 f81d 	bl	8008168 <_isatty_r>
 800812e:	b128      	cbz	r0, 800813c <__smakebuf_r+0x70>
 8008130:	89a3      	ldrh	r3, [r4, #12]
 8008132:	f023 0303 	bic.w	r3, r3, #3
 8008136:	f043 0301 	orr.w	r3, r3, #1
 800813a:	81a3      	strh	r3, [r4, #12]
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	431d      	orrs	r5, r3
 8008140:	81a5      	strh	r5, [r4, #12]
 8008142:	e7cf      	b.n	80080e4 <__smakebuf_r+0x18>

08008144 <_fstat_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4d07      	ldr	r5, [pc, #28]	; (8008164 <_fstat_r+0x20>)
 8008148:	2300      	movs	r3, #0
 800814a:	4604      	mov	r4, r0
 800814c:	4608      	mov	r0, r1
 800814e:	4611      	mov	r1, r2
 8008150:	602b      	str	r3, [r5, #0]
 8008152:	f7f9 fba4 	bl	800189e <_fstat>
 8008156:	1c43      	adds	r3, r0, #1
 8008158:	d102      	bne.n	8008160 <_fstat_r+0x1c>
 800815a:	682b      	ldr	r3, [r5, #0]
 800815c:	b103      	cbz	r3, 8008160 <_fstat_r+0x1c>
 800815e:	6023      	str	r3, [r4, #0]
 8008160:	bd38      	pop	{r3, r4, r5, pc}
 8008162:	bf00      	nop
 8008164:	20000510 	.word	0x20000510

08008168 <_isatty_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d06      	ldr	r5, [pc, #24]	; (8008184 <_isatty_r+0x1c>)
 800816c:	2300      	movs	r3, #0
 800816e:	4604      	mov	r4, r0
 8008170:	4608      	mov	r0, r1
 8008172:	602b      	str	r3, [r5, #0]
 8008174:	f7f9 fba3 	bl	80018be <_isatty>
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	d102      	bne.n	8008182 <_isatty_r+0x1a>
 800817c:	682b      	ldr	r3, [r5, #0]
 800817e:	b103      	cbz	r3, 8008182 <_isatty_r+0x1a>
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	bd38      	pop	{r3, r4, r5, pc}
 8008184:	20000510 	.word	0x20000510

08008188 <_init>:
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818a:	bf00      	nop
 800818c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818e:	bc08      	pop	{r3}
 8008190:	469e      	mov	lr, r3
 8008192:	4770      	bx	lr

08008194 <_fini>:
 8008194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008196:	bf00      	nop
 8008198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800819a:	bc08      	pop	{r3}
 800819c:	469e      	mov	lr, r3
 800819e:	4770      	bx	lr
