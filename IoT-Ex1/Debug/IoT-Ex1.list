
IoT-Ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08008590  08008590  00018590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800898c  0800898c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800898c  0800898c  0001898c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008994  08008994  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008994  08008994  00018994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008998  08008998  00018998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800899c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  200001d4  08008b70  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08008b70  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001016b  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027bd  00000000  00000000  000303b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  00032b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af5  00000000  00000000  000339b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b175  00000000  00000000  000344a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e9b  00000000  00000000  0004f61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3cc1  00000000  00000000  000614b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a3c  00000000  00000000  00105178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00109bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008574 	.word	0x08008574

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008574 	.word	0x08008574

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <create_payload_f>:

volatile uint8_t uart_rx_buffer[BUFFER_SIZE];
static volatile uint8_t uart_rx_buffer_i = 0;
volatile bool uart_rx_done_flag;

uint8_t* create_payload_f(uint8_t msg_type, float data) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	ed87 0a00 	vstr	s0, [r7]
 8000f50:	71fb      	strb	r3, [r7, #7]
    uint8_t* data_array = floatToUint8Vector(data);
 8000f52:	ed97 0a00 	vldr	s0, [r7]
 8000f56:	f000 f859 	bl	800100c <floatToUint8Vector>
 8000f5a:	60f8      	str	r0, [r7, #12]
    uint8_t* payload = create_payload(msg_type, data_array);
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	68f9      	ldr	r1, [r7, #12]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 f809 	bl	8000f78 <create_payload>
 8000f66:	60b8      	str	r0, [r7, #8]

    // Free the memory allocated for data_array
    free(data_array);
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f004 fdeb 	bl	8005b44 <free>

    return payload;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <create_payload>:

uint8_t* create_payload(uint8_t msg_type, uint8_t* data_array) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
    // Allocate memory for the payload (7 bytes)
    uint8_t* payload = (uint8_t*)malloc(7);
 8000f84:	2007      	movs	r0, #7
 8000f86:	f004 fdd5 	bl	8005b34 <malloc>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	60bb      	str	r3, [r7, #8]

    if (payload != NULL) {
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d01c      	beq.n	8000fce <create_payload+0x56>
        // Place 'e' in the first byte
        payload[0] = MSG_START_CHARACTER;
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	2273      	movs	r2, #115	; 0x73
 8000f98:	701a      	strb	r2, [r3, #0]
        payload[1] = msg_type;
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	79fa      	ldrb	r2, [r7, #7]
 8000fa0:	701a      	strb	r2, [r3, #0]

        // Copy the 4-byte data into bytes 1-4
        for (int i = 0; i < 4; ++i) {
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	e00b      	b.n	8000fc0 <create_payload+0x48>
            payload[i + 2] = data_array[i];
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	441a      	add	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	440b      	add	r3, r1
 8000fb6:	7812      	ldrb	r2, [r2, #0]
 8000fb8:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 4; ++i) {
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	ddf0      	ble.n	8000fa8 <create_payload+0x30>
        }

        // Place 's' in the last byte
        payload[6] = MSG_END_CHARACTER;
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	3306      	adds	r3, #6
 8000fca:	2265      	movs	r2, #101	; 0x65
 8000fcc:	701a      	strb	r2, [r3, #0]
    }

    return payload;
 8000fce:	68bb      	ldr	r3, [r7, #8]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <uart_rx_buffer_clear>:
    if (uart_rx_buffer_i < (BUFFER_SIZE - 1)) {
        uart_rx_buffer_i++;
    }
}

void uart_rx_buffer_clear() {
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	e007      	b.n	8000ff4 <uart_rx_buffer_clear+0x1c>
        uart_rx_buffer[i] = 0x0;
 8000fe4:	4a08      	ldr	r2, [pc, #32]	; (8001008 <uart_rx_buffer_clear+0x30>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b1d      	cmp	r3, #29
 8000ff8:	ddf4      	ble.n	8000fe4 <uart_rx_buffer_clear+0xc>
    }
}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	200001f0 	.word	0x200001f0

0800100c <floatToUint8Vector>:

uint8_t* floatToUint8Vector(float val) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t* data = (uint8_t*)malloc(sizeof(float));
 8001016:	2004      	movs	r0, #4
 8001018:	f004 fd8c 	bl	8005b34 <malloc>
 800101c:	4603      	mov	r3, r0
 800101e:	60fb      	str	r3, [r7, #12]

    if (data != NULL) {
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <floatToUint8Vector+0x20>
 8001026:	687a      	ldr	r2, [r7, #4]
        memcpy(data, &val, sizeof(val));
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	601a      	str	r2, [r3, #0]
    }

    return data;
 800102c:	68fb      	ldr	r3, [r7, #12]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <SHT40_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SHT40_Init()
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_I2C_Init(&hi2c1); // Initialize and configure the I2C peripheral
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <SHT40_Init+0x10>)
 800103e:	f001 f8bb 	bl	80021b8 <HAL_I2C_Init>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000214 	.word	0x20000214
 800104c:	00000000 	.word	0x00000000

08001050 <SHT40_Read>:
void SHT40_Read(float *t, float *rh, uint8_t mode)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08c      	sub	sp, #48	; 0x30
 8001054:	af02      	add	r7, sp, #8
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	4613      	mov	r3, r2
 800105c:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {mode, 0x00};
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	763b      	strb	r3, [r7, #24]
 8001062:	2300      	movs	r3, #0
 8001064:	767b      	strb	r3, [r7, #25]
	uint8_t buffer[6];

    HAL_I2C_Master_Transmit(&hi2c1, SHT40_I2C_ADDRESS, data, 2, HAL_MAX_DELAY);
 8001066:	f107 0218 	add.w	r2, r7, #24
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2302      	movs	r3, #2
 8001072:	2188      	movs	r1, #136	; 0x88
 8001074:	4846      	ldr	r0, [pc, #280]	; (8001190 <SHT40_Read+0x140>)
 8001076:	f001 f93b 	bl	80022f0 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f000 fd5e 	bl	8001b3c <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1, SHT40_I2C_ADDRESS, buffer, 6, HAL_MAX_DELAY);
 8001080:	f107 0210 	add.w	r2, r7, #16
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2306      	movs	r3, #6
 800108c:	2188      	movs	r1, #136	; 0x88
 800108e:	4840      	ldr	r0, [pc, #256]	; (8001190 <SHT40_Read+0x140>)
 8001090:	f001 fa46 	bl	8002520 <HAL_I2C_Master_Receive>

    uint16_t t_ticks = buffer[0]*256 + buffer[1];
 8001094:	7c3b      	ldrb	r3, [r7, #16]
 8001096:	b29b      	uxth	r3, r3
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b29a      	uxth	r2, r3
 800109c:	7c7b      	ldrb	r3, [r7, #17]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4413      	add	r3, r2
 80010a2:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t rh_ticks = buffer[3]*256 + buffer[4];
 80010a4:	7cfb      	ldrb	r3, [r7, #19]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	7d3b      	ldrb	r3, [r7, #20]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4413      	add	r3, r2
 80010b2:	843b      	strh	r3, [r7, #32]

    float t_degC = -45 + 175.0 * t_ticks/65535;
 80010b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa34 	bl	8000524 <__aeabi_i2d>
 80010bc:	a330      	add	r3, pc, #192	; (adr r3, 8001180 <SHT40_Read+0x130>)
 80010be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c2:	f7ff fa99 	bl	80005f8 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	a32e      	add	r3, pc, #184	; (adr r3, 8001188 <SHT40_Read+0x138>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff fbba 	bl	800084c <__aeabi_ddiv>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <SHT40_Read+0x144>)
 80010e6:	f7ff f8cf 	bl	8000288 <__aeabi_dsub>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f7ff fd59 	bl	8000ba8 <__aeabi_d2f>
 80010f6:	4603      	mov	r3, r0
 80010f8:	61fb      	str	r3, [r7, #28]
    float rh_pRH = -6 + 125.0 * rh_ticks/65535;
 80010fa:	8c3b      	ldrh	r3, [r7, #32]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa11 	bl	8000524 <__aeabi_i2d>
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <SHT40_Read+0x148>)
 8001108:	f7ff fa76 	bl	80005f8 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	a31c      	add	r3, pc, #112	; (adr r3, 8001188 <SHT40_Read+0x138>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff fb97 	bl	800084c <__aeabi_ddiv>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <SHT40_Read+0x14c>)
 800112c:	f7ff f8ac 	bl	8000288 <__aeabi_dsub>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fd36 	bl	8000ba8 <__aeabi_d2f>
 800113c:	4603      	mov	r3, r0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24

    if (rh_pRH > 100){
 8001140:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001144:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80011a0 <SHT40_Read+0x150>
 8001148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	dd01      	ble.n	8001156 <SHT40_Read+0x106>
    	rh_pRH = 100; }
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <SHT40_Read+0x154>)
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    if (rh_pRH < 0){
 8001156:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800115a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001162:	d502      	bpl.n	800116a <SHT40_Read+0x11a>
    	rh_pRH = 0; }
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24

    *t = t_degC;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	601a      	str	r2, [r3, #0]
    *rh = rh_pRH;
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001174:	601a      	str	r2, [r3, #0]
}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	; 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	00000000 	.word	0x00000000
 8001184:	4065e000 	.word	0x4065e000
 8001188:	00000000 	.word	0x00000000
 800118c:	40efffe0 	.word	0x40efffe0
 8001190:	20000214 	.word	0x20000214
 8001194:	40468000 	.word	0x40468000
 8001198:	405f4000 	.word	0x405f4000
 800119c:	40180000 	.word	0x40180000
 80011a0:	42c80000 	.word	0x42c80000
 80011a4:	42c80000 	.word	0x42c80000

080011a8 <LTR329_Init>:

void LTR329_Init()
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af04      	add	r7, sp, #16
    uint8_t data;

    // Activate the sensor
    data = LTR329_ACTIVE_MODE;
 80011ae:	2301      	movs	r3, #1
 80011b0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, LTR329_I2C_ADDRESS, LTR329_ALS_CONTR, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80011b2:	2364      	movs	r3, #100	; 0x64
 80011b4:	9302      	str	r3, [sp, #8]
 80011b6:	2301      	movs	r3, #1
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	1dfb      	adds	r3, r7, #7
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2301      	movs	r3, #1
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	2152      	movs	r1, #82	; 0x52
 80011c4:	480a      	ldr	r0, [pc, #40]	; (80011f0 <LTR329_Init+0x48>)
 80011c6:	f001 faa1 	bl	800270c <HAL_I2C_Mem_Write>

    // Set measurement rate
    data = LTR329_MEAS_RATE;
 80011ca:	2303      	movs	r3, #3
 80011cc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, LTR329_I2C_ADDRESS, LTR329_ALS_MEAS_RATE, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80011ce:	2364      	movs	r3, #100	; 0x64
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	2301      	movs	r3, #1
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	2285      	movs	r2, #133	; 0x85
 80011de:	2152      	movs	r1, #82	; 0x52
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <LTR329_Init+0x48>)
 80011e2:	f001 fa93 	bl	800270c <HAL_I2C_Mem_Write>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000268 	.word	0x20000268

080011f4 <LTR329_Read>:
void LTR329_Read(uint8_t *data)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af04      	add	r7, sp, #16
 80011fa:	6078      	str	r0, [r7, #4]
    //uint8_t data[4];
    // Read 4 bytes of data starting from LTR329_ALS_DATA_CH1_0
    HAL_I2C_Mem_Read(&hi2c3, LTR329_I2C_ADDRESS, LTR329_ALS_DATA_CH1_0, I2C_MEMADD_SIZE_8BIT, data, 4, 100);
 80011fc:	2364      	movs	r3, #100	; 0x64
 80011fe:	9302      	str	r3, [sp, #8]
 8001200:	2304      	movs	r3, #4
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	2288      	movs	r2, #136	; 0x88
 800120c:	2152      	movs	r1, #82	; 0x52
 800120e:	4803      	ldr	r0, [pc, #12]	; (800121c <LTR329_Read+0x28>)
 8001210:	f001 fb90 	bl	8002934 <HAL_I2C_Mem_Read>

    // Combine bytes to get the light data for each channel
    //*ch1 = (uint16_t)(data[1] << 8) | data[0];
    //*ch0 = (uint16_t)(data[3] << 8) | data[2];

}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000268 	.word	0x20000268

08001220 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0c      	ldr	r2, [pc, #48]	; (8001260 <HAL_UART_RxCpltCallback+0x40>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d111      	bne.n	8001256 <HAL_UART_RxCpltCallback+0x36>
		dataReadyFlag = 1;
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_UART_RxCpltCallback+0x44>)
 8001234:	2201      	movs	r2, #1
 8001236:	701a      	strb	r2, [r3, #0]
		ledStatus = 1 - ledStatus;
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_UART_RxCpltCallback+0x48>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	f1c3 0301 	rsb	r3, r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_UART_RxCpltCallback+0x48>)
 8001244:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, LD3_Pin, ledStatus);
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_UART_RxCpltCallback+0x48>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	2108      	movs	r1, #8
 800124e:	4807      	ldr	r0, [pc, #28]	; (800126c <HAL_UART_RxCpltCallback+0x4c>)
 8001250:	f000 ff9a 	bl	8002188 <HAL_GPIO_WritePin>
 8001254:	e000      	b.n	8001258 <HAL_UART_RxCpltCallback+0x38>
	} else {
		return;
 8001256:	bf00      	nop
	}
}
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40004400 	.word	0x40004400
 8001264:	20000344 	.word	0x20000344
 8001268:	20000345 	.word	0x20000345
 800126c:	48000400 	.word	0x48000400

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	; 0x30
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001276:	f000 fbec 	bl	8001a52 <HAL_Init>
  //HAL_UART_IRQHandler(&huart1);
  //HAL_UART_IRQHandler(&huart2);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127a:	f000 f8ab 	bl	80013d4 <SystemClock_Config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800127e:	b662      	cpsie	i
}
 8001280:	bf00      	nop

  /* USER CODE BEGIN SysInit */
  __enable_irq();
  //HAL_UART_IRQHandler(&huart1);
  HAL_UART_IRQHandler(&huart2);
 8001282:	484f      	ldr	r0, [pc, #316]	; (80013c0 <main+0x150>)
 8001284:	f003 f9a8 	bl	80045d8 <HAL_UART_IRQHandler>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001288:	f000 f96c 	bl	8001564 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800128c:	f000 f938 	bl	8001500 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001290:	f000 f8f6 	bl	8001480 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    SHT40_Init();
 8001294:	f7ff fed0 	bl	8001038 <SHT40_Init>
    LTR329_Init();
 8001298:	f7ff ff86 	bl	80011a8 <LTR329_Init>
    uart_rx_buffer_clear();
 800129c:	f7ff fe9c 	bl	8000fd8 <uart_rx_buffer_clear>
    HAL_UART_Receive_IT(&huart2, Rx_data, 3);
 80012a0:	2203      	movs	r2, #3
 80012a2:	4948      	ldr	r1, [pc, #288]	; (80013c4 <main+0x154>)
 80012a4:	4846      	ldr	r0, [pc, #280]	; (80013c0 <main+0x150>)
 80012a6:	f003 f94b 	bl	8004540 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Enter low-power mode if no data is ready
	  if (dataReadyFlag == 0){
 80012aa:	4b47      	ldr	r3, [pc, #284]	; (80013c8 <main+0x158>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d108      	bne.n	80012c6 <main+0x56>
		  printf("Entering low-power mode...\n");
 80012b4:	4845      	ldr	r0, [pc, #276]	; (80013cc <main+0x15c>)
 80012b6:	f005 fa75 	bl	80067a4 <puts>
		  // Enable UART interrupt and enter low-power mode
		  HAL_UART_Receive_IT(&huart2, Rx_data, 3);
 80012ba:	2203      	movs	r2, #3
 80012bc:	4941      	ldr	r1, [pc, #260]	; (80013c4 <main+0x154>)
 80012be:	4840      	ldr	r0, [pc, #256]	; (80013c0 <main+0x150>)
 80012c0:	f003 f93e 	bl	8004540 <HAL_UART_Receive_IT>
 80012c4:	e077      	b.n	80013b6 <main+0x146>
	      //HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	  }
	  else{
		  if (Rx_data[1] == 0x1) {
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <main+0x154>)
 80012c8:	785b      	ldrb	r3, [r3, #1]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d173      	bne.n	80013b6 <main+0x146>
			  	  printf("Waking up from low-power mode...\n");
 80012ce:	4840      	ldr	r0, [pc, #256]	; (80013d0 <main+0x160>)
 80012d0:	f005 fa68 	bl	80067a4 <puts>
		  		  // Perform measurements
		  		  LTR329_Read(data);
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff8c 	bl	80011f4 <LTR329_Read>
		  		  SHT40_Read(&t, &rh, SHT40_MEAS_HIGH_PRECISION);
 80012dc:	f107 0108 	add.w	r1, r7, #8
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	22fd      	movs	r2, #253	; 0xfd
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff feb2 	bl	8001050 <SHT40_Read>
		  		  float radiation = t*rh;
 80012ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80012f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		  		  float dust = rh/t;
 80012fc:	edd7 6a02 	vldr	s13, [r7, #8]
 8001300:	ed97 7a03 	vldr	s14, [r7, #12]
 8001304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001308:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		  		  // SEND TEMP
		  		  uint8_t* TempBytes = create_payload_f(RESPONSE_TEMPERATURE, t);
 800130c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001310:	eeb0 0a67 	vmov.f32	s0, s15
 8001314:	2002      	movs	r0, #2
 8001316:	f7ff fe15 	bl	8000f44 <create_payload_f>
 800131a:	6238      	str	r0, [r7, #32]
		  		  HAL_UART_Transmit(&huart2, TempBytes, 7, 10);
 800131c:	230a      	movs	r3, #10
 800131e:	2207      	movs	r2, #7
 8001320:	6a39      	ldr	r1, [r7, #32]
 8001322:	4827      	ldr	r0, [pc, #156]	; (80013c0 <main+0x150>)
 8001324:	f003 f882 	bl	800442c <HAL_UART_Transmit>

		  		  //SEND HUMIDITY
		  		  uint8_t* HumBytes = create_payload_f(RESPONSE_HUMIDITY, rh);
 8001328:	edd7 7a02 	vldr	s15, [r7, #8]
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	2003      	movs	r0, #3
 8001332:	f7ff fe07 	bl	8000f44 <create_payload_f>
 8001336:	61f8      	str	r0, [r7, #28]
		  		  HAL_UART_Transmit(&huart2, HumBytes, 7, 10);
 8001338:	230a      	movs	r3, #10
 800133a:	2207      	movs	r2, #7
 800133c:	69f9      	ldr	r1, [r7, #28]
 800133e:	4820      	ldr	r0, [pc, #128]	; (80013c0 <main+0x150>)
 8001340:	f003 f874 	bl	800442c <HAL_UART_Transmit>

		  		  //SEND LIGHT
		  		  uint8_t* LightBytes = create_payload(RESPONSE_LIGHT, data);
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	4619      	mov	r1, r3
 8001348:	2004      	movs	r0, #4
 800134a:	f7ff fe15 	bl	8000f78 <create_payload>
 800134e:	61b8      	str	r0, [r7, #24]
		  		  HAL_UART_Transmit(&huart2, LightBytes, 7, 10);
 8001350:	230a      	movs	r3, #10
 8001352:	2207      	movs	r2, #7
 8001354:	69b9      	ldr	r1, [r7, #24]
 8001356:	481a      	ldr	r0, [pc, #104]	; (80013c0 <main+0x150>)
 8001358:	f003 f868 	bl	800442c <HAL_UART_Transmit>

		  		  //SIMULATE AND SEND RADIATION
		  		  uint8_t* RadBytes = create_payload_f(RESPONSE_RADIATION, radiation);
 800135c:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001360:	2005      	movs	r0, #5
 8001362:	f7ff fdef 	bl	8000f44 <create_payload_f>
 8001366:	6178      	str	r0, [r7, #20]
		  		  HAL_UART_Transmit(&huart2, RadBytes, 7, 10);
 8001368:	230a      	movs	r3, #10
 800136a:	2207      	movs	r2, #7
 800136c:	6979      	ldr	r1, [r7, #20]
 800136e:	4814      	ldr	r0, [pc, #80]	; (80013c0 <main+0x150>)
 8001370:	f003 f85c 	bl	800442c <HAL_UART_Transmit>

		  		  //SIMULATE AND SEND DUST
		  		  uint8_t* DustBytes = create_payload_f(RESPONSE_DUST, dust);
 8001374:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001378:	2006      	movs	r0, #6
 800137a:	f7ff fde3 	bl	8000f44 <create_payload_f>
 800137e:	6138      	str	r0, [r7, #16]
		  		  HAL_UART_Transmit(&huart2, DustBytes, 7, 10);
 8001380:	230a      	movs	r3, #10
 8001382:	2207      	movs	r2, #7
 8001384:	6939      	ldr	r1, [r7, #16]
 8001386:	480e      	ldr	r0, [pc, #56]	; (80013c0 <main+0x150>)
 8001388:	f003 f850 	bl	800442c <HAL_UART_Transmit>

		  		  //Clear Rx Buffer
		  		  for (uint8_t i=0; i<3; i++) {
 800138c:	2300      	movs	r3, #0
 800138e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001392:	e009      	b.n	80013a8 <main+0x138>
		  			  Rx_data[i] = 0;
 8001394:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <main+0x154>)
 800139a:	2100      	movs	r1, #0
 800139c:	54d1      	strb	r1, [r2, r3]
		  		  for (uint8_t i=0; i<3; i++) {
 800139e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013a2:	3301      	adds	r3, #1
 80013a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80013a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d9f1      	bls.n	8001394 <main+0x124>
		  		  }
		  		  // Data is processed, reset the flag
		  		  dataReadyFlag = 0;
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <main+0x158>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
	  //enum msg_type_e msg_type = Rx_data[1];

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 80013b6:	2064      	movs	r0, #100	; 0x64
 80013b8:	f000 fbc0 	bl	8001b3c <HAL_Delay>
	  if (dataReadyFlag == 0){
 80013bc:	e775      	b.n	80012aa <main+0x3a>
 80013be:	bf00      	nop
 80013c0:	200002bc 	.word	0x200002bc
 80013c4:	20000210 	.word	0x20000210
 80013c8:	20000344 	.word	0x20000344
 80013cc:	08008590 	.word	0x08008590
 80013d0:	080085ac 	.word	0x080085ac

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b096      	sub	sp, #88	; 0x58
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	2244      	movs	r2, #68	; 0x44
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f005 fabe 	bl	8006964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	463b      	mov	r3, r7
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013fa:	f001 ffa5 	bl	8003348 <HAL_PWREx_ControlVoltageScaling>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001404:	f000 f90e 	bl	8001624 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001408:	f001 ff80 	bl	800330c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <SystemClock_Config+0xa8>)
 800140e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001412:	4a1a      	ldr	r2, [pc, #104]	; (800147c <SystemClock_Config+0xa8>)
 8001414:	f023 0318 	bic.w	r3, r3, #24
 8001418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800141c:	2314      	movs	r3, #20
 800141e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001420:	2301      	movs	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001424:	2301      	movs	r3, #1
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800142c:	23a0      	movs	r3, #160	; 0xa0
 800142e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001430:	2300      	movs	r3, #0
 8001432:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4618      	mov	r0, r3
 800143a:	f001 ffdb 	bl	80033f4 <HAL_RCC_OscConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001444:	f000 f8ee 	bl	8001624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001448:	230f      	movs	r3, #15
 800144a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	2101      	movs	r1, #1
 8001460:	4618      	mov	r0, r3
 8001462:	f002 fc29 	bl	8003cb8 <HAL_RCC_ClockConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800146c:	f000 f8da 	bl	8001624 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001470:	f002 ffcc 	bl	800440c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001474:	bf00      	nop
 8001476:	3758      	adds	r7, #88	; 0x58
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000

08001480 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_I2C1_Init+0x74>)
 8001486:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <MX_I2C1_Init+0x78>)
 8001488:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_I2C1_Init+0x74>)
 800148c:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <MX_I2C1_Init+0x7c>)
 800148e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_I2C1_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_I2C1_Init+0x74>)
 8001498:	2201      	movs	r2, #1
 800149a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_I2C1_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_I2C1_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_I2C1_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_I2C1_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_I2C1_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ba:	480e      	ldr	r0, [pc, #56]	; (80014f4 <MX_I2C1_Init+0x74>)
 80014bc:	f000 fe7c 	bl	80021b8 <HAL_I2C_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014c6:	f000 f8ad 	bl	8001624 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ca:	2100      	movs	r1, #0
 80014cc:	4809      	ldr	r0, [pc, #36]	; (80014f4 <MX_I2C1_Init+0x74>)
 80014ce:	f001 fe85 	bl	80031dc <HAL_I2CEx_ConfigAnalogFilter>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014d8:	f000 f8a4 	bl	8001624 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014dc:	2100      	movs	r1, #0
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_I2C1_Init+0x74>)
 80014e0:	f001 fec7 	bl	8003272 <HAL_I2CEx_ConfigDigitalFilter>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014ea:	f000 f89b 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000214 	.word	0x20000214
 80014f8:	40005400 	.word	0x40005400
 80014fc:	00707cbb 	.word	0x00707cbb

08001500 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_USART2_UART_Init+0x5c>)
 8001506:	4a16      	ldr	r2, [pc, #88]	; (8001560 <MX_USART2_UART_Init+0x60>)
 8001508:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_USART2_UART_Init+0x5c>)
 800150c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001510:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_USART2_UART_Init+0x5c>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <MX_USART2_UART_Init+0x5c>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_USART2_UART_Init+0x5c>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001524:	4b0d      	ldr	r3, [pc, #52]	; (800155c <MX_USART2_UART_Init+0x5c>)
 8001526:	220c      	movs	r2, #12
 8001528:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_USART2_UART_Init+0x5c>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <MX_USART2_UART_Init+0x5c>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_USART2_UART_Init+0x5c>)
 8001538:	2200      	movs	r2, #0
 800153a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <MX_USART2_UART_Init+0x5c>)
 800153e:	2200      	movs	r2, #0
 8001540:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001542:	2300      	movs	r3, #0
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	4804      	ldr	r0, [pc, #16]	; (800155c <MX_USART2_UART_Init+0x5c>)
 800154a:	f004 fa81 	bl	8005a50 <HAL_RS485Ex_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001554:	f000 f866 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200002bc 	.word	0x200002bc
 8001560:	40004400 	.word	0x40004400

08001564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	4b28      	ldr	r3, [pc, #160]	; (800161c <MX_GPIO_Init+0xb8>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	4a27      	ldr	r2, [pc, #156]	; (800161c <MX_GPIO_Init+0xb8>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001586:	4b25      	ldr	r3, [pc, #148]	; (800161c <MX_GPIO_Init+0xb8>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <MX_GPIO_Init+0xb8>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	4a21      	ldr	r2, [pc, #132]	; (800161c <MX_GPIO_Init+0xb8>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159e:	4b1f      	ldr	r3, [pc, #124]	; (800161c <MX_GPIO_Init+0xb8>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <MX_GPIO_Init+0xb8>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	4a1b      	ldr	r2, [pc, #108]	; (800161c <MX_GPIO_Init+0xb8>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <MX_GPIO_Init+0xb8>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2108      	movs	r1, #8
 80015c6:	4816      	ldr	r0, [pc, #88]	; (8001620 <MX_GPIO_Init+0xbc>)
 80015c8:	f000 fdde 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80015cc:	2308      	movs	r3, #8
 80015ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	4619      	mov	r1, r3
 80015e2:	480f      	ldr	r0, [pc, #60]	; (8001620 <MX_GPIO_Init+0xbc>)
 80015e4:	f000 fc5e 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015e8:	23c0      	movs	r3, #192	; 0xc0
 80015ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015f8:	2307      	movs	r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	4619      	mov	r1, r3
 8001602:	4807      	ldr	r0, [pc, #28]	; (8001620 <MX_GPIO_Init+0xbc>)
 8001604:	f000 fc4e 	bl	8001ea4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	2108      	movs	r1, #8
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <MX_GPIO_Init+0xbc>)
 800160e:	f000 fdbb 	bl	8002188 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001612:	bf00      	nop
 8001614:	3720      	adds	r7, #32
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	48000400 	.word	0x48000400

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162c:	e7fe      	b.n	800162c <Error_Handler+0x8>
	...

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_MspInit+0x44>)
 8001638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163a:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <HAL_MspInit+0x44>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6613      	str	r3, [r2, #96]	; 0x60
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_MspInit+0x44>)
 8001644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_MspInit+0x44>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	4a08      	ldr	r2, [pc, #32]	; (8001674 <HAL_MspInit+0x44>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	6593      	str	r3, [r2, #88]	; 0x58
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_MspInit+0x44>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000

08001678 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b096      	sub	sp, #88	; 0x58
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	2234      	movs	r2, #52	; 0x34
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f005 f963 	bl	8006964 <memset>
  if(hi2c->Instance==I2C1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a1f      	ldr	r2, [pc, #124]	; (8001720 <HAL_I2C_MspInit+0xa8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d137      	bne.n	8001718 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016a8:	2340      	movs	r3, #64	; 0x40
 80016aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4618      	mov	r0, r3
 80016b6:	f002 fd23 	bl	8004100 <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016c0:	f7ff ffb0 	bl	8001624 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	4b17      	ldr	r3, [pc, #92]	; (8001724 <HAL_I2C_MspInit+0xac>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	4a16      	ldr	r2, [pc, #88]	; (8001724 <HAL_I2C_MspInit+0xac>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <HAL_I2C_MspInit+0xac>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016e0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e2:	2312      	movs	r3, #18
 80016e4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ee:	2304      	movs	r3, #4
 80016f0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016f6:	4619      	mov	r1, r3
 80016f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fc:	f000 fbd2 	bl	8001ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_I2C_MspInit+0xac>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_I2C_MspInit+0xac>)
 8001706:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800170a:	6593      	str	r3, [r2, #88]	; 0x58
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_I2C_MspInit+0xac>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001718:	bf00      	nop
 800171a:	3758      	adds	r7, #88	; 0x58
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40005400 	.word	0x40005400
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b096      	sub	sp, #88	; 0x58
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	2234      	movs	r2, #52	; 0x34
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f005 f90b 	bl	8006964 <memset>
  if(huart->Instance==USART2)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a23      	ldr	r2, [pc, #140]	; (80017e0 <HAL_UART_MspInit+0xb8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d13e      	bne.n	80017d6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001758:	2302      	movs	r3, #2
 800175a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800175c:	2300      	movs	r3, #0
 800175e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fccb 	bl	8004100 <HAL_RCCEx_PeriphCLKConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001770:	f7ff ff58 	bl	8001624 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_UART_MspInit+0xbc>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	4a1a      	ldr	r2, [pc, #104]	; (80017e4 <HAL_UART_MspInit+0xbc>)
 800177a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177e:	6593      	str	r3, [r2, #88]	; 0x58
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_UART_MspInit+0xbc>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_UART_MspInit+0xbc>)
 800178e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001790:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <HAL_UART_MspInit+0xbc>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_UART_MspInit+0xbc>)
 800179a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_DE
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80017a4:	230e      	movs	r3, #14
 80017a6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017b4:	2307      	movs	r3, #7
 80017b6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017bc:	4619      	mov	r1, r3
 80017be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c2:	f000 fb6f 	bl	8001ea4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	2026      	movs	r0, #38	; 0x26
 80017cc:	f000 fab5 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017d0:	2026      	movs	r0, #38	; 0x26
 80017d2:	f000 face 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017d6:	bf00      	nop
 80017d8:	3758      	adds	r7, #88	; 0x58
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40004400 	.word	0x40004400
 80017e4:	40021000 	.word	0x40021000

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <NMI_Handler+0x4>

080017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <MemManage_Handler+0x4>

080017fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <UsageFault_Handler+0x4>

08001806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001834:	f000 f962 	bl	8001afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <USART2_IRQHandler+0x10>)
 8001842:	f002 fec9 	bl	80045d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200002bc 	.word	0x200002bc

08001850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return 1;
 8001854:	2301      	movs	r3, #1
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_kill>:

int _kill(int pid, int sig)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800186a:	f005 f8dd 	bl	8006a28 <__errno>
 800186e:	4603      	mov	r3, r0
 8001870:	2216      	movs	r2, #22
 8001872:	601a      	str	r2, [r3, #0]
  return -1;
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <_exit>:

void _exit (int status)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001888:	f04f 31ff 	mov.w	r1, #4294967295
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ffe7 	bl	8001860 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001892:	e7fe      	b.n	8001892 <_exit+0x12>

08001894 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	e00a      	b.n	80018bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018a6:	f3af 8000 	nop.w
 80018aa:	4601      	mov	r1, r0
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	60ba      	str	r2, [r7, #8]
 80018b2:	b2ca      	uxtb	r2, r1
 80018b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dbf0      	blt.n	80018a6 <_read+0x12>
  }

  return len;
 80018c4:	687b      	ldr	r3, [r7, #4]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	e009      	b.n	80018f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	60ba      	str	r2, [r7, #8]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dbf1      	blt.n	80018e0 <_write+0x12>
  }
  return len;
 80018fc:	687b      	ldr	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_close>:

int _close(int file)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800192e:	605a      	str	r2, [r3, #4]
  return 0;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_isatty>:

int _isatty(int file)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001946:	2301      	movs	r3, #1
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <_sbrk+0x5c>)
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <_sbrk+0x60>)
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <_sbrk+0x64>)
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <_sbrk+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d207      	bcs.n	80019b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a0:	f005 f842 	bl	8006a28 <__errno>
 80019a4:	4603      	mov	r3, r0
 80019a6:	220c      	movs	r2, #12
 80019a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	e009      	b.n	80019c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <_sbrk+0x64>)
 80019c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2000a000 	.word	0x2000a000
 80019d0:	00000400 	.word	0x00000400
 80019d4:	20000348 	.word	0x20000348
 80019d8:	200004a0 	.word	0x200004a0

080019dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a04:	f7ff ffea 	bl	80019dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a0a:	490d      	ldr	r1, [pc, #52]	; (8001a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <LoopForever+0xe>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a20:	4c0a      	ldr	r4, [pc, #40]	; (8001a4c <LoopForever+0x16>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f005 f801 	bl	8006a34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a32:	f7ff fc1d 	bl	8001270 <main>

08001a36 <LoopForever>:

LoopForever:
    b LoopForever
 8001a36:	e7fe      	b.n	8001a36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a38:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a44:	0800899c 	.word	0x0800899c
  ldr r2, =_sbss
 8001a48:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a4c:	2000049c 	.word	0x2000049c

08001a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC1_2_IRQHandler>

08001a52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f000 f961 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a62:	2000      	movs	r0, #0
 8001a64:	f000 f80e 	bl	8001a84 <HAL_InitTick>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	e001      	b.n	8001a78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a74:	f7ff fddc 	bl	8001630 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a78:	79fb      	ldrb	r3, [r7, #7]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a90:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <HAL_InitTick+0x6c>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d023      	beq.n	8001ae0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <HAL_InitTick+0x70>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_InitTick+0x6c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f96d 	bl	8001d8e <HAL_SYSTICK_Config>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10f      	bne.n	8001ada <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d809      	bhi.n	8001ad4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f000 f937 	bl	8001d3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001acc:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_InitTick+0x74>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e007      	b.n	8001ae4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	e004      	b.n	8001ae4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e001      	b.n	8001ae4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000008 	.word	0x20000008
 8001af4:	20000000 	.word	0x20000000
 8001af8:	20000004 	.word	0x20000004

08001afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_IncTick+0x20>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x24>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <HAL_IncTick+0x24>)
 8001b0e:	6013      	str	r3, [r2, #0]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000008 	.word	0x20000008
 8001b20:	2000034c 	.word	0x2000034c

08001b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_GetTick+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	2000034c 	.word	0x2000034c

08001b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f7ff ffee 	bl	8001b24 <HAL_GetTick>
 8001b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d005      	beq.n	8001b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_Delay+0x44>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b62:	bf00      	nop
 8001b64:	f7ff ffde 	bl	8001b24 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d8f7      	bhi.n	8001b64 <HAL_Delay+0x28>
  {
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000008 	.word	0x20000008

08001b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	60d3      	str	r3, [r2, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4907      	ldr	r1, [pc, #28]	; (8001c20 <__NVIC_EnableIRQ+0x38>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	; (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	; (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf0:	d301      	bcc.n	8001cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00f      	b.n	8001d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <SysTick_Config+0x40>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfe:	210f      	movs	r1, #15
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f7ff ff8e 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <SysTick_Config+0x40>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <SysTick_Config+0x40>)
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	e000e010 	.word	0xe000e010

08001d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff29 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d4c:	f7ff ff3e 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	6978      	ldr	r0, [r7, #20]
 8001d58:	f7ff ff8e 	bl	8001c78 <NVIC_EncodePriority>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff5d 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff31 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ffa2 	bl	8001ce0 <SysTick_Config>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b085      	sub	sp, #20
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d008      	beq.n	8001dd0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e022      	b.n	8001e16 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 020e 	bic.w	r2, r2, #14
 8001dde:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0201 	bic.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df4:	f003 021c 	and.w	r2, r3, #28
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001e02:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d005      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
 8001e44:	e029      	b.n	8001e9a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 020e 	bic.w	r2, r2, #14
 8001e54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0201 	bic.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f003 021c 	and.w	r2, r3, #28
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	2101      	movs	r1, #1
 8001e74:	fa01 f202 	lsl.w	r2, r1, r2
 8001e78:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	4798      	blx	r3
    }
  }
  return status;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb2:	e14e      	b.n	8002152 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 8140 	beq.w	800214c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d005      	beq.n	8001ee4 <HAL_GPIO_Init+0x40>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d130      	bne.n	8001f46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	2203      	movs	r2, #3
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	091b      	lsrs	r3, r3, #4
 8001f30:	f003 0201 	and.w	r2, r3, #1
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d017      	beq.n	8001f82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d123      	bne.n	8001fd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	691a      	ldr	r2, [r3, #16]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	6939      	ldr	r1, [r7, #16]
 8001fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0203 	and.w	r2, r3, #3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 809a 	beq.w	800214c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002018:	4b55      	ldr	r3, [pc, #340]	; (8002170 <HAL_GPIO_Init+0x2cc>)
 800201a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800201c:	4a54      	ldr	r2, [pc, #336]	; (8002170 <HAL_GPIO_Init+0x2cc>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6613      	str	r3, [r2, #96]	; 0x60
 8002024:	4b52      	ldr	r3, [pc, #328]	; (8002170 <HAL_GPIO_Init+0x2cc>)
 8002026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002030:	4a50      	ldr	r2, [pc, #320]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	3302      	adds	r3, #2
 8002038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	220f      	movs	r2, #15
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800205a:	d013      	beq.n	8002084 <HAL_GPIO_Init+0x1e0>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a46      	ldr	r2, [pc, #280]	; (8002178 <HAL_GPIO_Init+0x2d4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d00d      	beq.n	8002080 <HAL_GPIO_Init+0x1dc>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a45      	ldr	r2, [pc, #276]	; (800217c <HAL_GPIO_Init+0x2d8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d007      	beq.n	800207c <HAL_GPIO_Init+0x1d8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a44      	ldr	r2, [pc, #272]	; (8002180 <HAL_GPIO_Init+0x2dc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d101      	bne.n	8002078 <HAL_GPIO_Init+0x1d4>
 8002074:	2303      	movs	r3, #3
 8002076:	e006      	b.n	8002086 <HAL_GPIO_Init+0x1e2>
 8002078:	2307      	movs	r3, #7
 800207a:	e004      	b.n	8002086 <HAL_GPIO_Init+0x1e2>
 800207c:	2302      	movs	r3, #2
 800207e:	e002      	b.n	8002086 <HAL_GPIO_Init+0x1e2>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <HAL_GPIO_Init+0x1e2>
 8002084:	2300      	movs	r3, #0
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	f002 0203 	and.w	r2, r2, #3
 800208c:	0092      	lsls	r2, r2, #2
 800208e:	4093      	lsls	r3, r2
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002096:	4937      	ldr	r1, [pc, #220]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	3302      	adds	r3, #2
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020a4:	4b37      	ldr	r3, [pc, #220]	; (8002184 <HAL_GPIO_Init+0x2e0>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020c8:	4a2e      	ldr	r2, [pc, #184]	; (8002184 <HAL_GPIO_Init+0x2e0>)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020ce:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_GPIO_Init+0x2e0>)
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020f2:	4a24      	ldr	r2, [pc, #144]	; (8002184 <HAL_GPIO_Init+0x2e0>)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020f8:	4b22      	ldr	r3, [pc, #136]	; (8002184 <HAL_GPIO_Init+0x2e0>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	43db      	mvns	r3, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800211c:	4a19      	ldr	r2, [pc, #100]	; (8002184 <HAL_GPIO_Init+0x2e0>)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <HAL_GPIO_Init+0x2e0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	43db      	mvns	r3, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002146:	4a0f      	ldr	r2, [pc, #60]	; (8002184 <HAL_GPIO_Init+0x2e0>)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	3301      	adds	r3, #1
 8002150:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	f47f aea9 	bne.w	8001eb4 <HAL_GPIO_Init+0x10>
  }
}
 8002162:	bf00      	nop
 8002164:	bf00      	nop
 8002166:	371c      	adds	r7, #28
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	40021000 	.word	0x40021000
 8002174:	40010000 	.word	0x40010000
 8002178:	48000400 	.word	0x48000400
 800217c:	48000800 	.word	0x48000800
 8002180:	48000c00 	.word	0x48000c00
 8002184:	40010400 	.word	0x40010400

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021a4:	e002      	b.n	80021ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e08d      	b.n	80022e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d106      	bne.n	80021e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fa4a 	bl	8001678 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2224      	movs	r2, #36	; 0x24
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0201 	bic.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002208:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002218:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d107      	bne.n	8002232 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	e006      	b.n	8002240 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800223e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d108      	bne.n	800225a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	e007      	b.n	800226a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002268:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800227c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800228c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691a      	ldr	r2, [r3, #16]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69d9      	ldr	r1, [r3, #28]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1a      	ldr	r2, [r3, #32]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2220      	movs	r2, #32
 80022d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	461a      	mov	r2, r3
 80022fc:	460b      	mov	r3, r1
 80022fe:	817b      	strh	r3, [r7, #10]
 8002300:	4613      	mov	r3, r2
 8002302:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b20      	cmp	r3, #32
 800230e:	f040 80fd 	bne.w	800250c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_I2C_Master_Transmit+0x30>
 800231c:	2302      	movs	r3, #2
 800231e:	e0f6      	b.n	800250e <HAL_I2C_Master_Transmit+0x21e>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002328:	f7ff fbfc 	bl	8001b24 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	2319      	movs	r3, #25
 8002334:	2201      	movs	r2, #1
 8002336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 fce0 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0e1      	b.n	800250e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2221      	movs	r2, #33	; 0x21
 800234e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2210      	movs	r2, #16
 8002356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	893a      	ldrh	r2, [r7, #8]
 800236a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	2bff      	cmp	r3, #255	; 0xff
 800237a:	d906      	bls.n	800238a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	22ff      	movs	r2, #255	; 0xff
 8002380:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002382:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e007      	b.n	800239a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002394:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002398:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d024      	beq.n	80023ec <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	781a      	ldrb	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	3301      	adds	r3, #1
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	8979      	ldrh	r1, [r7, #10]
 80023de:	4b4e      	ldr	r3, [pc, #312]	; (8002518 <HAL_I2C_Master_Transmit+0x228>)
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fec7 	bl	8003178 <I2C_TransferConfig>
 80023ea:	e066      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	8979      	ldrh	r1, [r7, #10]
 80023f4:	4b48      	ldr	r3, [pc, #288]	; (8002518 <HAL_I2C_Master_Transmit+0x228>)
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 febc 	bl	8003178 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002400:	e05b      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	6a39      	ldr	r1, [r7, #32]
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 fcc9 	bl	8002d9e <I2C_WaitOnTXISFlagUntilTimeout>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e07b      	b.n	800250e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	781a      	ldrb	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	3b01      	subs	r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d034      	beq.n	80024ba <HAL_I2C_Master_Transmit+0x1ca>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	d130      	bne.n	80024ba <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	2200      	movs	r2, #0
 8002460:	2180      	movs	r1, #128	; 0x80
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 fc4c 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e04d      	b.n	800250e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002476:	b29b      	uxth	r3, r3
 8002478:	2bff      	cmp	r3, #255	; 0xff
 800247a:	d90e      	bls.n	800249a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	22ff      	movs	r2, #255	; 0xff
 8002480:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002486:	b2da      	uxtb	r2, r3
 8002488:	8979      	ldrh	r1, [r7, #10]
 800248a:	2300      	movs	r3, #0
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 fe70 	bl	8003178 <I2C_TransferConfig>
 8002498:	e00f      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	8979      	ldrh	r1, [r7, #10]
 80024ac:	2300      	movs	r3, #0
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fe5f 	bl	8003178 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d19e      	bne.n	8002402 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	6a39      	ldr	r1, [r7, #32]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 fcaf 	bl	8002e2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e01a      	b.n	800250e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2220      	movs	r2, #32
 80024de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6859      	ldr	r1, [r3, #4]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <HAL_I2C_Master_Transmit+0x22c>)
 80024ec:	400b      	ands	r3, r1
 80024ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	80002000 	.word	0x80002000
 800251c:	fe00e800 	.word	0xfe00e800

08002520 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	461a      	mov	r2, r3
 800252c:	460b      	mov	r3, r1
 800252e:	817b      	strh	r3, [r7, #10]
 8002530:	4613      	mov	r3, r2
 8002532:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b20      	cmp	r3, #32
 800253e:	f040 80db 	bne.w	80026f8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_I2C_Master_Receive+0x30>
 800254c:	2302      	movs	r3, #2
 800254e:	e0d4      	b.n	80026fa <HAL_I2C_Master_Receive+0x1da>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002558:	f7ff fae4 	bl	8001b24 <HAL_GetTick>
 800255c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	2319      	movs	r3, #25
 8002564:	2201      	movs	r2, #1
 8002566:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 fbc8 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e0bf      	b.n	80026fa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2222      	movs	r2, #34	; 0x22
 800257e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2210      	movs	r2, #16
 8002586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	893a      	ldrh	r2, [r7, #8]
 800259a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2bff      	cmp	r3, #255	; 0xff
 80025aa:	d90e      	bls.n	80025ca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	22ff      	movs	r2, #255	; 0xff
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	8979      	ldrh	r1, [r7, #10]
 80025ba:	4b52      	ldr	r3, [pc, #328]	; (8002704 <HAL_I2C_Master_Receive+0x1e4>)
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fdd8 	bl	8003178 <I2C_TransferConfig>
 80025c8:	e06d      	b.n	80026a6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	8979      	ldrh	r1, [r7, #10]
 80025dc:	4b49      	ldr	r3, [pc, #292]	; (8002704 <HAL_I2C_Master_Receive+0x1e4>)
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fdc7 	bl	8003178 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80025ea:	e05c      	b.n	80026a6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	6a39      	ldr	r1, [r7, #32]
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 fc5f 	bl	8002eb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e07c      	b.n	80026fa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d034      	beq.n	80026a6 <HAL_I2C_Master_Receive+0x186>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	2b00      	cmp	r3, #0
 8002642:	d130      	bne.n	80026a6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	2200      	movs	r2, #0
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 fb56 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e04d      	b.n	80026fa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	2bff      	cmp	r3, #255	; 0xff
 8002666:	d90e      	bls.n	8002686 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	22ff      	movs	r2, #255	; 0xff
 800266c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002672:	b2da      	uxtb	r2, r3
 8002674:	8979      	ldrh	r1, [r7, #10]
 8002676:	2300      	movs	r3, #0
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fd7a 	bl	8003178 <I2C_TransferConfig>
 8002684:	e00f      	b.n	80026a6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002694:	b2da      	uxtb	r2, r3
 8002696:	8979      	ldrh	r1, [r7, #10]
 8002698:	2300      	movs	r3, #0
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 fd69 	bl	8003178 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d19d      	bne.n	80025ec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	6a39      	ldr	r1, [r7, #32]
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 fbb9 	bl	8002e2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e01a      	b.n	80026fa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2220      	movs	r2, #32
 80026ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6859      	ldr	r1, [r3, #4]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <HAL_I2C_Master_Receive+0x1e8>)
 80026d8:	400b      	ands	r3, r1
 80026da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	e000      	b.n	80026fa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80026f8:	2302      	movs	r3, #2
  }
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	80002400 	.word	0x80002400
 8002708:	fe00e800 	.word	0xfe00e800

0800270c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af02      	add	r7, sp, #8
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	4608      	mov	r0, r1
 8002716:	4611      	mov	r1, r2
 8002718:	461a      	mov	r2, r3
 800271a:	4603      	mov	r3, r0
 800271c:	817b      	strh	r3, [r7, #10]
 800271e:	460b      	mov	r3, r1
 8002720:	813b      	strh	r3, [r7, #8]
 8002722:	4613      	mov	r3, r2
 8002724:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b20      	cmp	r3, #32
 8002730:	f040 80f9 	bne.w	8002926 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_I2C_Mem_Write+0x34>
 800273a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800273c:	2b00      	cmp	r3, #0
 800273e:	d105      	bne.n	800274c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002746:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0ed      	b.n	8002928 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_I2C_Mem_Write+0x4e>
 8002756:	2302      	movs	r3, #2
 8002758:	e0e6      	b.n	8002928 <HAL_I2C_Mem_Write+0x21c>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002762:	f7ff f9df 	bl	8001b24 <HAL_GetTick>
 8002766:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2319      	movs	r3, #25
 800276e:	2201      	movs	r2, #1
 8002770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 fac3 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0d1      	b.n	8002928 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2221      	movs	r2, #33	; 0x21
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2240      	movs	r2, #64	; 0x40
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a3a      	ldr	r2, [r7, #32]
 800279e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ac:	88f8      	ldrh	r0, [r7, #6]
 80027ae:	893a      	ldrh	r2, [r7, #8]
 80027b0:	8979      	ldrh	r1, [r7, #10]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	4603      	mov	r3, r0
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f9d3 	bl	8002b68 <I2C_RequestMemoryWrite>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0a9      	b.n	8002928 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2bff      	cmp	r3, #255	; 0xff
 80027dc:	d90e      	bls.n	80027fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	22ff      	movs	r2, #255	; 0xff
 80027e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	8979      	ldrh	r1, [r7, #10]
 80027ec:	2300      	movs	r3, #0
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fcbf 	bl	8003178 <I2C_TransferConfig>
 80027fa:	e00f      	b.n	800281c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280a:	b2da      	uxtb	r2, r3
 800280c:	8979      	ldrh	r1, [r7, #10]
 800280e:	2300      	movs	r3, #0
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 fcae 	bl	8003178 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 fabc 	bl	8002d9e <I2C_WaitOnTXISFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e07b      	b.n	8002928 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d034      	beq.n	80028d4 <HAL_I2C_Mem_Write+0x1c8>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	2b00      	cmp	r3, #0
 8002870:	d130      	bne.n	80028d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002878:	2200      	movs	r2, #0
 800287a:	2180      	movs	r1, #128	; 0x80
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fa3f 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e04d      	b.n	8002928 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	2bff      	cmp	r3, #255	; 0xff
 8002894:	d90e      	bls.n	80028b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	22ff      	movs	r2, #255	; 0xff
 800289a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	8979      	ldrh	r1, [r7, #10]
 80028a4:	2300      	movs	r3, #0
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 fc63 	bl	8003178 <I2C_TransferConfig>
 80028b2:	e00f      	b.n	80028d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	8979      	ldrh	r1, [r7, #10]
 80028c6:	2300      	movs	r3, #0
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fc52 	bl	8003178 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d19e      	bne.n	800281c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 faa2 	bl	8002e2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e01a      	b.n	8002928 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2220      	movs	r2, #32
 80028f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <HAL_I2C_Mem_Write+0x224>)
 8002906:	400b      	ands	r3, r1
 8002908:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e000      	b.n	8002928 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002926:	2302      	movs	r3, #2
  }
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	fe00e800 	.word	0xfe00e800

08002934 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	4608      	mov	r0, r1
 800293e:	4611      	mov	r1, r2
 8002940:	461a      	mov	r2, r3
 8002942:	4603      	mov	r3, r0
 8002944:	817b      	strh	r3, [r7, #10]
 8002946:	460b      	mov	r3, r1
 8002948:	813b      	strh	r3, [r7, #8]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b20      	cmp	r3, #32
 8002958:	f040 80fd 	bne.w	8002b56 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_I2C_Mem_Read+0x34>
 8002962:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800296e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0f1      	b.n	8002b58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_I2C_Mem_Read+0x4e>
 800297e:	2302      	movs	r3, #2
 8002980:	e0ea      	b.n	8002b58 <HAL_I2C_Mem_Read+0x224>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800298a:	f7ff f8cb 	bl	8001b24 <HAL_GetTick>
 800298e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	2319      	movs	r3, #25
 8002996:	2201      	movs	r2, #1
 8002998:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f9af 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0d5      	b.n	8002b58 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2222      	movs	r2, #34	; 0x22
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2240      	movs	r2, #64	; 0x40
 80029b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a3a      	ldr	r2, [r7, #32]
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029d4:	88f8      	ldrh	r0, [r7, #6]
 80029d6:	893a      	ldrh	r2, [r7, #8]
 80029d8:	8979      	ldrh	r1, [r7, #10]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	4603      	mov	r3, r0
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f913 	bl	8002c10 <I2C_RequestMemoryRead>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0ad      	b.n	8002b58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2bff      	cmp	r3, #255	; 0xff
 8002a04:	d90e      	bls.n	8002a24 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	22ff      	movs	r2, #255	; 0xff
 8002a0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	8979      	ldrh	r1, [r7, #10]
 8002a14:	4b52      	ldr	r3, [pc, #328]	; (8002b60 <HAL_I2C_Mem_Read+0x22c>)
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fbab 	bl	8003178 <I2C_TransferConfig>
 8002a22:	e00f      	b.n	8002a44 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	8979      	ldrh	r1, [r7, #10]
 8002a36:	4b4a      	ldr	r3, [pc, #296]	; (8002b60 <HAL_I2C_Mem_Read+0x22c>)
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 fb9a 	bl	8003178 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2104      	movs	r1, #4
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f956 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e07c      	b.n	8002b58 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d034      	beq.n	8002b04 <HAL_I2C_Mem_Read+0x1d0>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d130      	bne.n	8002b04 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2180      	movs	r1, #128	; 0x80
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f927 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e04d      	b.n	8002b58 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2bff      	cmp	r3, #255	; 0xff
 8002ac4:	d90e      	bls.n	8002ae4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	22ff      	movs	r2, #255	; 0xff
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	8979      	ldrh	r1, [r7, #10]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 fb4b 	bl	8003178 <I2C_TransferConfig>
 8002ae2:	e00f      	b.n	8002b04 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	8979      	ldrh	r1, [r7, #10]
 8002af6:	2300      	movs	r3, #0
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 fb3a 	bl	8003178 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d19a      	bne.n	8002a44 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f98a 	bl	8002e2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e01a      	b.n	8002b58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2220      	movs	r2, #32
 8002b28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_I2C_Mem_Read+0x230>)
 8002b36:	400b      	ands	r3, r1
 8002b38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e000      	b.n	8002b58 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
  }
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	80002400 	.word	0x80002400
 8002b64:	fe00e800 	.word	0xfe00e800

08002b68 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	4608      	mov	r0, r1
 8002b72:	4611      	mov	r1, r2
 8002b74:	461a      	mov	r2, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	817b      	strh	r3, [r7, #10]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	813b      	strh	r3, [r7, #8]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	8979      	ldrh	r1, [r7, #10]
 8002b88:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <I2C_RequestMemoryWrite+0xa4>)
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 faf1 	bl	8003178 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	69b9      	ldr	r1, [r7, #24]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f8ff 	bl	8002d9e <I2C_WaitOnTXISFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e02c      	b.n	8002c04 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d105      	bne.n	8002bbc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb0:	893b      	ldrh	r3, [r7, #8]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	629a      	str	r2, [r3, #40]	; 0x28
 8002bba:	e015      	b.n	8002be8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bbc:	893b      	ldrh	r3, [r7, #8]
 8002bbe:	0a1b      	lsrs	r3, r3, #8
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	69b9      	ldr	r1, [r7, #24]
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 f8e5 	bl	8002d9e <I2C_WaitOnTXISFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e012      	b.n	8002c04 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bde:	893b      	ldrh	r3, [r7, #8]
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2180      	movs	r1, #128	; 0x80
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f884 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	80002000 	.word	0x80002000

08002c10 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	4608      	mov	r0, r1
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	817b      	strh	r3, [r7, #10]
 8002c22:	460b      	mov	r3, r1
 8002c24:	813b      	strh	r3, [r7, #8]
 8002c26:	4613      	mov	r3, r2
 8002c28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	8979      	ldrh	r1, [r7, #10]
 8002c30:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <I2C_RequestMemoryRead+0xa4>)
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	2300      	movs	r3, #0
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fa9e 	bl	8003178 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	69b9      	ldr	r1, [r7, #24]
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f8ac 	bl	8002d9e <I2C_WaitOnTXISFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e02c      	b.n	8002caa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d105      	bne.n	8002c62 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c56:	893b      	ldrh	r3, [r7, #8]
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c60:	e015      	b.n	8002c8e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c62:	893b      	ldrh	r3, [r7, #8]
 8002c64:	0a1b      	lsrs	r3, r3, #8
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c70:	69fa      	ldr	r2, [r7, #28]
 8002c72:	69b9      	ldr	r1, [r7, #24]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f892 	bl	8002d9e <I2C_WaitOnTXISFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e012      	b.n	8002caa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c84:	893b      	ldrh	r3, [r7, #8]
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2200      	movs	r2, #0
 8002c96:	2140      	movs	r1, #64	; 0x40
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f831 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	80002000 	.word	0x80002000

08002cb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d103      	bne.n	8002cd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d007      	beq.n	8002cf4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	619a      	str	r2, [r3, #24]
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d10:	e031      	b.n	8002d76 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d02d      	beq.n	8002d76 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1a:	f7fe ff03 	bl	8001b24 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d302      	bcc.n	8002d30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d122      	bne.n	8002d76 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d113      	bne.n	8002d76 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f043 0220 	orr.w	r2, r3, #32
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e00f      	b.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699a      	ldr	r2, [r3, #24]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	bf0c      	ite	eq
 8002d86:	2301      	moveq	r3, #1
 8002d88:	2300      	movne	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d0be      	beq.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002daa:	e033      	b.n	8002e14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f901 	bl	8002fb8 <I2C_IsErrorOccurred>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e031      	b.n	8002e24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc6:	d025      	beq.n	8002e14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc8:	f7fe feac 	bl	8001b24 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d302      	bcc.n	8002dde <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d11a      	bne.n	8002e14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d013      	beq.n	8002e14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	f043 0220 	orr.w	r2, r3, #32
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e007      	b.n	8002e24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d1c4      	bne.n	8002dac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e38:	e02f      	b.n	8002e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f8ba 	bl	8002fb8 <I2C_IsErrorOccurred>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e02d      	b.n	8002eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4e:	f7fe fe69 	bl	8001b24 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d302      	bcc.n	8002e64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d11a      	bne.n	8002e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d013      	beq.n	8002e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	f043 0220 	orr.w	r2, r3, #32
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e007      	b.n	8002eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d1c8      	bne.n	8002e3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ec0:	e06b      	b.n	8002f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f876 	bl	8002fb8 <I2C_IsErrorOccurred>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e069      	b.n	8002faa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d138      	bne.n	8002f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d105      	bne.n	8002efe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e055      	b.n	8002faa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b10      	cmp	r3, #16
 8002f0a:	d107      	bne.n	8002f1c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2210      	movs	r2, #16
 8002f12:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2204      	movs	r2, #4
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
 8002f1a:	e002      	b.n	8002f22 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2220      	movs	r2, #32
 8002f28:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6859      	ldr	r1, [r3, #4]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b1f      	ldr	r3, [pc, #124]	; (8002fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002f36:	400b      	ands	r3, r1
 8002f38:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e029      	b.n	8002faa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f56:	f7fe fde5 	bl	8001b24 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d302      	bcc.n	8002f6c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d116      	bne.n	8002f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d00f      	beq.n	8002f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f043 0220 	orr.w	r2, r3, #32
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e007      	b.n	8002faa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d18c      	bne.n	8002ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	fe00e800 	.word	0xfe00e800

08002fb8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	; 0x28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d068      	beq.n	80030b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2210      	movs	r2, #16
 8002fea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fec:	e049      	b.n	8003082 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d045      	beq.n	8003082 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ff6:	f7fe fd95 	bl	8001b24 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	429a      	cmp	r2, r3
 8003004:	d302      	bcc.n	800300c <I2C_IsErrorOccurred+0x54>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d13a      	bne.n	8003082 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003016:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800301e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800302a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800302e:	d121      	bne.n	8003074 <I2C_IsErrorOccurred+0xbc>
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003036:	d01d      	beq.n	8003074 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003038:	7cfb      	ldrb	r3, [r7, #19]
 800303a:	2b20      	cmp	r3, #32
 800303c:	d01a      	beq.n	8003074 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800304c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800304e:	f7fe fd69 	bl	8001b24 <HAL_GetTick>
 8003052:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003054:	e00e      	b.n	8003074 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003056:	f7fe fd65 	bl	8001b24 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b19      	cmp	r3, #25
 8003062:	d907      	bls.n	8003074 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	f043 0320 	orr.w	r3, r3, #32
 800306a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003072:	e006      	b.n	8003082 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b20      	cmp	r3, #32
 8003080:	d1e9      	bne.n	8003056 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b20      	cmp	r3, #32
 800308e:	d003      	beq.n	8003098 <I2C_IsErrorOccurred+0xe0>
 8003090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0aa      	beq.n	8002fee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800309c:	2b00      	cmp	r3, #0
 800309e:	d103      	bne.n	80030a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2220      	movs	r2, #32
 80030a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	f043 0304 	orr.w	r3, r3, #4
 80030ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00b      	beq.n	80030e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	f043 0308 	orr.w	r3, r3, #8
 80030f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00b      	beq.n	8003124 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	f043 0302 	orr.w	r3, r3, #2
 8003112:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800311c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01c      	beq.n	8003166 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f7ff fdc3 	bl	8002cb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <I2C_IsErrorOccurred+0x1bc>)
 800313e:	400b      	ands	r3, r1
 8003140:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	431a      	orrs	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003166:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800316a:	4618      	mov	r0, r3
 800316c:	3728      	adds	r7, #40	; 0x28
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	fe00e800 	.word	0xfe00e800

08003178 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	460b      	mov	r3, r1
 8003184:	817b      	strh	r3, [r7, #10]
 8003186:	4613      	mov	r3, r2
 8003188:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800318a:	897b      	ldrh	r3, [r7, #10]
 800318c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003190:	7a7b      	ldrb	r3, [r7, #9]
 8003192:	041b      	lsls	r3, r3, #16
 8003194:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003198:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	0d5b      	lsrs	r3, r3, #21
 80031b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031b6:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <I2C_TransferConfig+0x60>)
 80031b8:	430b      	orrs	r3, r1
 80031ba:	43db      	mvns	r3, r3
 80031bc:	ea02 0103 	and.w	r1, r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031ca:	bf00      	nop
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	03ff63ff 	.word	0x03ff63ff

080031dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d138      	bne.n	8003264 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e032      	b.n	8003266 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2224      	movs	r2, #36	; 0x24
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0201 	bic.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800322e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6819      	ldr	r1, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	e000      	b.n	8003266 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
  }
}
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003272:	b480      	push	{r7}
 8003274:	b085      	sub	sp, #20
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b20      	cmp	r3, #32
 8003286:	d139      	bne.n	80032fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003292:	2302      	movs	r3, #2
 8003294:	e033      	b.n	80032fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2224      	movs	r2, #36	; 0x24
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	e000      	b.n	80032fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032fc:	2302      	movs	r3, #2
  }
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a04      	ldr	r2, [pc, #16]	; (8003328 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331a:	6013      	str	r3, [r2, #0]
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40007000 	.word	0x40007000

0800332c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <HAL_PWREx_GetVoltageRange+0x18>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40007000 	.word	0x40007000

08003348 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003356:	d130      	bne.n	80033ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003358:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003364:	d038      	beq.n	80033d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003366:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800336e:	4a1e      	ldr	r2, [pc, #120]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003370:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003374:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003376:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2232      	movs	r2, #50	; 0x32
 800337c:	fb02 f303 	mul.w	r3, r2, r3
 8003380:	4a1b      	ldr	r2, [pc, #108]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	0c9b      	lsrs	r3, r3, #18
 8003388:	3301      	adds	r3, #1
 800338a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800338c:	e002      	b.n	8003394 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3b01      	subs	r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003394:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a0:	d102      	bne.n	80033a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f2      	bne.n	800338e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033a8:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b4:	d110      	bne.n	80033d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e00f      	b.n	80033da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80033ba:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c6:	d007      	beq.n	80033d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033c8:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033d0:	4a05      	ldr	r2, [pc, #20]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40007000 	.word	0x40007000
 80033ec:	20000000 	.word	0x20000000
 80033f0:	431bde83 	.word	0x431bde83

080033f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	; 0x28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d102      	bne.n	8003408 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	f000 bc4f 	b.w	8003ca6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003408:	4b97      	ldr	r3, [pc, #604]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 030c 	and.w	r3, r3, #12
 8003410:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003412:	4b95      	ldr	r3, [pc, #596]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80e6 	beq.w	80035f6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <HAL_RCC_OscConfig+0x4c>
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	2b0c      	cmp	r3, #12
 8003434:	f040 808d 	bne.w	8003552 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	2b01      	cmp	r3, #1
 800343c:	f040 8089 	bne.w	8003552 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003440:	4b89      	ldr	r3, [pc, #548]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d006      	beq.n	800345a <HAL_RCC_OscConfig+0x66>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f000 bc26 	b.w	8003ca6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800345e:	4b82      	ldr	r3, [pc, #520]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d004      	beq.n	8003474 <HAL_RCC_OscConfig+0x80>
 800346a:	4b7f      	ldr	r3, [pc, #508]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003472:	e005      	b.n	8003480 <HAL_RCC_OscConfig+0x8c>
 8003474:	4b7c      	ldr	r3, [pc, #496]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800347a:	091b      	lsrs	r3, r3, #4
 800347c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003480:	4293      	cmp	r3, r2
 8003482:	d224      	bcs.n	80034ce <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fdd9 	bl	8004040 <RCC_SetFlashLatencyFromMSIRange>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	f000 bc06 	b.w	8003ca6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800349a:	4b73      	ldr	r3, [pc, #460]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a72      	ldr	r2, [pc, #456]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034a0:	f043 0308 	orr.w	r3, r3, #8
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	4b70      	ldr	r3, [pc, #448]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	496d      	ldr	r1, [pc, #436]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034b8:	4b6b      	ldr	r3, [pc, #428]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	4968      	ldr	r1, [pc, #416]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	604b      	str	r3, [r1, #4]
 80034cc:	e025      	b.n	800351a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ce:	4b66      	ldr	r3, [pc, #408]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a65      	ldr	r2, [pc, #404]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034d4:	f043 0308 	orr.w	r3, r3, #8
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	4b63      	ldr	r3, [pc, #396]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	4960      	ldr	r1, [pc, #384]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ec:	4b5e      	ldr	r3, [pc, #376]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	495b      	ldr	r1, [pc, #364]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fd98 	bl	8004040 <RCC_SetFlashLatencyFromMSIRange>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e3c5      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800351a:	f000 fccd 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 800351e:	4602      	mov	r2, r0
 8003520:	4b51      	ldr	r3, [pc, #324]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	4950      	ldr	r1, [pc, #320]	; (800366c <HAL_RCC_OscConfig+0x278>)
 800352c:	5ccb      	ldrb	r3, [r1, r3]
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	fa22 f303 	lsr.w	r3, r2, r3
 8003536:	4a4e      	ldr	r2, [pc, #312]	; (8003670 <HAL_RCC_OscConfig+0x27c>)
 8003538:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800353a:	4b4e      	ldr	r3, [pc, #312]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fe faa0 	bl	8001a84 <HAL_InitTick>
 8003544:	4603      	mov	r3, r0
 8003546:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d052      	beq.n	80035f4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800354e:	7dfb      	ldrb	r3, [r7, #23]
 8003550:	e3a9      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d032      	beq.n	80035c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800355a:	4b43      	ldr	r3, [pc, #268]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a42      	ldr	r2, [pc, #264]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003566:	f7fe fadd 	bl	8001b24 <HAL_GetTick>
 800356a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800356e:	f7fe fad9 	bl	8001b24 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e392      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003580:	4b39      	ldr	r3, [pc, #228]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0f0      	beq.n	800356e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800358c:	4b36      	ldr	r3, [pc, #216]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a35      	ldr	r2, [pc, #212]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003592:	f043 0308 	orr.w	r3, r3, #8
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b33      	ldr	r3, [pc, #204]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	4930      	ldr	r1, [pc, #192]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035aa:	4b2f      	ldr	r3, [pc, #188]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	492b      	ldr	r1, [pc, #172]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	604b      	str	r3, [r1, #4]
 80035be:	e01a      	b.n	80035f6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035c0:	4b29      	ldr	r3, [pc, #164]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a28      	ldr	r2, [pc, #160]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80035c6:	f023 0301 	bic.w	r3, r3, #1
 80035ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035cc:	f7fe faaa 	bl	8001b24 <HAL_GetTick>
 80035d0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035d4:	f7fe faa6 	bl	8001b24 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e35f      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035e6:	4b20      	ldr	r3, [pc, #128]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0x1e0>
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d073      	beq.n	80036ea <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	2b08      	cmp	r3, #8
 8003606:	d005      	beq.n	8003614 <HAL_RCC_OscConfig+0x220>
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	2b0c      	cmp	r3, #12
 800360c:	d10e      	bne.n	800362c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	2b03      	cmp	r3, #3
 8003612:	d10b      	bne.n	800362c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003614:	4b14      	ldr	r3, [pc, #80]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d063      	beq.n	80036e8 <HAL_RCC_OscConfig+0x2f4>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d15f      	bne.n	80036e8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e33c      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003634:	d106      	bne.n	8003644 <HAL_RCC_OscConfig+0x250>
 8003636:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a0b      	ldr	r2, [pc, #44]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800363c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	e025      	b.n	8003690 <HAL_RCC_OscConfig+0x29c>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800364c:	d114      	bne.n	8003678 <HAL_RCC_OscConfig+0x284>
 800364e:	4b06      	ldr	r3, [pc, #24]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a05      	ldr	r2, [pc, #20]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	4b03      	ldr	r3, [pc, #12]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a02      	ldr	r2, [pc, #8]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e013      	b.n	8003690 <HAL_RCC_OscConfig+0x29c>
 8003668:	40021000 	.word	0x40021000
 800366c:	080085d0 	.word	0x080085d0
 8003670:	20000000 	.word	0x20000000
 8003674:	20000004 	.word	0x20000004
 8003678:	4b8f      	ldr	r3, [pc, #572]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a8e      	ldr	r2, [pc, #568]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 800367e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	4b8c      	ldr	r3, [pc, #560]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a8b      	ldr	r2, [pc, #556]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 800368a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800368e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d013      	beq.n	80036c0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fe fa44 	bl	8001b24 <HAL_GetTick>
 800369c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a0:	f7fe fa40 	bl	8001b24 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e2f9      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036b2:	4b81      	ldr	r3, [pc, #516]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0x2ac>
 80036be:	e014      	b.n	80036ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fe fa30 	bl	8001b24 <HAL_GetTick>
 80036c4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c8:	f7fe fa2c 	bl	8001b24 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	; 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e2e5      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036da:	4b77      	ldr	r3, [pc, #476]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x2d4>
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d060      	beq.n	80037b8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_OscConfig+0x314>
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	2b0c      	cmp	r3, #12
 8003700:	d119      	bne.n	8003736 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	2b02      	cmp	r3, #2
 8003706:	d116      	bne.n	8003736 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003708:	4b6b      	ldr	r3, [pc, #428]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_RCC_OscConfig+0x32c>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e2c2      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003720:	4b65      	ldr	r3, [pc, #404]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	061b      	lsls	r3, r3, #24
 800372e:	4962      	ldr	r1, [pc, #392]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003734:	e040      	b.n	80037b8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d023      	beq.n	8003786 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800373e:	4b5e      	ldr	r3, [pc, #376]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a5d      	ldr	r2, [pc, #372]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 8003744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374a:	f7fe f9eb 	bl	8001b24 <HAL_GetTick>
 800374e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003752:	f7fe f9e7 	bl	8001b24 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e2a0      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003764:	4b54      	ldr	r3, [pc, #336]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f0      	beq.n	8003752 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003770:	4b51      	ldr	r3, [pc, #324]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	061b      	lsls	r3, r3, #24
 800377e:	494e      	ldr	r1, [pc, #312]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
 8003784:	e018      	b.n	80037b8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003786:	4b4c      	ldr	r3, [pc, #304]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a4b      	ldr	r2, [pc, #300]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 800378c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003792:	f7fe f9c7 	bl	8001b24 <HAL_GetTick>
 8003796:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800379a:	f7fe f9c3 	bl	8001b24 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e27c      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037ac:	4b42      	ldr	r3, [pc, #264]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f0      	bne.n	800379a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 8082 	beq.w	80038ca <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d05f      	beq.n	800388e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80037ce:	4b3a      	ldr	r3, [pc, #232]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d037      	beq.n	8003854 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d006      	beq.n	80037fc <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e254      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d01b      	beq.n	800383e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8003806:	4b2c      	ldr	r3, [pc, #176]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380c:	4a2a      	ldr	r2, [pc, #168]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 800380e:	f023 0301 	bic.w	r3, r3, #1
 8003812:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003816:	f7fe f985 	bl	8001b24 <HAL_GetTick>
 800381a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800381e:	f7fe f981 	bl	8001b24 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b11      	cmp	r3, #17
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e23a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003830:	4b21      	ldr	r3, [pc, #132]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 8003832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1ef      	bne.n	800381e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800383e:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 8003840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003844:	f023 0210 	bic.w	r2, r3, #16
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	491a      	ldr	r1, [pc, #104]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003854:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 8003856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800385a:	4a17      	ldr	r2, [pc, #92]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003864:	f7fe f95e 	bl	8001b24 <HAL_GetTick>
 8003868:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800386c:	f7fe f95a 	bl	8001b24 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b11      	cmp	r3, #17
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e213      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800387e:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 8003880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0ef      	beq.n	800386c <HAL_RCC_OscConfig+0x478>
 800388c:	e01d      	b.n	80038ca <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 8003890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003894:	4a08      	ldr	r2, [pc, #32]	; (80038b8 <HAL_RCC_OscConfig+0x4c4>)
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389e:	f7fe f941 	bl	8001b24 <HAL_GetTick>
 80038a2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038a4:	e00a      	b.n	80038bc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a6:	f7fe f93d 	bl	8001b24 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b11      	cmp	r3, #17
 80038b2:	d903      	bls.n	80038bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e1f6      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
 80038b8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038bc:	4ba9      	ldr	r3, [pc, #676]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 80038be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1ed      	bne.n	80038a6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 80bd 	beq.w	8003a52 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d8:	2300      	movs	r3, #0
 80038da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038de:	4ba1      	ldr	r3, [pc, #644]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10e      	bne.n	8003908 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ea:	4b9e      	ldr	r3, [pc, #632]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	4a9d      	ldr	r2, [pc, #628]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 80038f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f4:	6593      	str	r3, [r2, #88]	; 0x58
 80038f6:	4b9b      	ldr	r3, [pc, #620]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 80038f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003902:	2301      	movs	r3, #1
 8003904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003908:	4b97      	ldr	r3, [pc, #604]	; (8003b68 <HAL_RCC_OscConfig+0x774>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d118      	bne.n	8003946 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003914:	4b94      	ldr	r3, [pc, #592]	; (8003b68 <HAL_RCC_OscConfig+0x774>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a93      	ldr	r2, [pc, #588]	; (8003b68 <HAL_RCC_OscConfig+0x774>)
 800391a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003920:	f7fe f900 	bl	8001b24 <HAL_GetTick>
 8003924:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003928:	f7fe f8fc 	bl	8001b24 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e1b5      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800393a:	4b8b      	ldr	r3, [pc, #556]	; (8003b68 <HAL_RCC_OscConfig+0x774>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d02c      	beq.n	80039ac <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003952:	4b84      	ldr	r3, [pc, #528]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 8003954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003958:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003964:	497f      	ldr	r1, [pc, #508]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d010      	beq.n	800399a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003978:	4b7a      	ldr	r3, [pc, #488]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	4a79      	ldr	r2, [pc, #484]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 8003980:	f043 0304 	orr.w	r3, r3, #4
 8003984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003988:	4b76      	ldr	r3, [pc, #472]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 800398a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398e:	4a75      	ldr	r2, [pc, #468]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003998:	e018      	b.n	80039cc <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800399a:	4b72      	ldr	r3, [pc, #456]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 800399c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a0:	4a70      	ldr	r2, [pc, #448]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039aa:	e00f      	b.n	80039cc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80039ac:	4b6d      	ldr	r3, [pc, #436]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b2:	4a6c      	ldr	r2, [pc, #432]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 80039b4:	f023 0301 	bic.w	r3, r3, #1
 80039b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80039bc:	4b69      	ldr	r3, [pc, #420]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	4a68      	ldr	r2, [pc, #416]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 80039c4:	f023 0304 	bic.w	r3, r3, #4
 80039c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d016      	beq.n	8003a02 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d4:	f7fe f8a6 	bl	8001b24 <HAL_GetTick>
 80039d8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039dc:	f7fe f8a2 	bl	8001b24 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e159      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f2:	4b5c      	ldr	r3, [pc, #368]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0ed      	beq.n	80039dc <HAL_RCC_OscConfig+0x5e8>
 8003a00:	e01d      	b.n	8003a3e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a02:	f7fe f88f 	bl	8001b24 <HAL_GetTick>
 8003a06:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a08:	e00a      	b.n	8003a20 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0a:	f7fe f88b 	bl	8001b24 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e142      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a20:	4b50      	ldr	r3, [pc, #320]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1ed      	bne.n	8003a0a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003a2e:	4b4d      	ldr	r3, [pc, #308]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 8003a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a34:	4a4b      	ldr	r2, [pc, #300]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 8003a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d105      	bne.n	8003a52 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a46:	4b47      	ldr	r3, [pc, #284]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 8003a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4a:	4a46      	ldr	r2, [pc, #280]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 8003a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d03c      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d01c      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a66:	4b3f      	ldr	r3, [pc, #252]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 8003a68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a6c:	4a3d      	ldr	r2, [pc, #244]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a76:	f7fe f855 	bl	8001b24 <HAL_GetTick>
 8003a7a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a7e:	f7fe f851 	bl	8001b24 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e10a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a90:	4b34      	ldr	r3, [pc, #208]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 8003a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0ef      	beq.n	8003a7e <HAL_RCC_OscConfig+0x68a>
 8003a9e:	e01b      	b.n	8003ad8 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003aa0:	4b30      	ldr	r3, [pc, #192]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 8003aa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aa6:	4a2f      	ldr	r2, [pc, #188]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab0:	f7fe f838 	bl	8001b24 <HAL_GetTick>
 8003ab4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ab8:	f7fe f834 	bl	8001b24 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e0ed      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003aca:	4b26      	ldr	r3, [pc, #152]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 8003acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1ef      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80e1 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	f040 80b5 	bne.w	8003c56 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003aec:	4b1d      	ldr	r3, [pc, #116]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f003 0203 	and.w	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d124      	bne.n	8003b4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d11b      	bne.n	8003b4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d113      	bne.n	8003b4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d109      	bne.n	8003b4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	085b      	lsrs	r3, r3, #1
 8003b42:	3b01      	subs	r3, #1
 8003b44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d05f      	beq.n	8003c0a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	2b0c      	cmp	r3, #12
 8003b4e:	d05a      	beq.n	8003c06 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a03      	ldr	r2, [pc, #12]	; (8003b64 <HAL_RCC_OscConfig+0x770>)
 8003b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b5c:	f7fd ffe2 	bl	8001b24 <HAL_GetTick>
 8003b60:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b62:	e00c      	b.n	8003b7e <HAL_RCC_OscConfig+0x78a>
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fd ffda 	bl	8001b24 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e093      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b7e:	4b4c      	ldr	r3, [pc, #304]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b8a:	4b49      	ldr	r3, [pc, #292]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	4b49      	ldr	r3, [pc, #292]	; (8003cb4 <HAL_RCC_OscConfig+0x8c0>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b9a:	3a01      	subs	r2, #1
 8003b9c:	0112      	lsls	r2, r2, #4
 8003b9e:	4311      	orrs	r1, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ba4:	0212      	lsls	r2, r2, #8
 8003ba6:	4311      	orrs	r1, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bac:	0852      	lsrs	r2, r2, #1
 8003bae:	3a01      	subs	r2, #1
 8003bb0:	0552      	lsls	r2, r2, #21
 8003bb2:	4311      	orrs	r1, r2
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bb8:	0852      	lsrs	r2, r2, #1
 8003bba:	3a01      	subs	r2, #1
 8003bbc:	0652      	lsls	r2, r2, #25
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	493b      	ldr	r1, [pc, #236]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bc6:	4b3a      	ldr	r3, [pc, #232]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a39      	ldr	r2, [pc, #228]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003bcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bd0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bd2:	4b37      	ldr	r3, [pc, #220]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	4a36      	ldr	r2, [pc, #216]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003bd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bdc:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bde:	f7fd ffa1 	bl	8001b24 <HAL_GetTick>
 8003be2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be6:	f7fd ff9d 	bl	8001b24 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e056      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf8:	4b2d      	ldr	r3, [pc, #180]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c04:	e04e      	b.n	8003ca4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e04d      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c0a:	4b29      	ldr	r3, [pc, #164]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d146      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c16:	4b26      	ldr	r3, [pc, #152]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a25      	ldr	r2, [pc, #148]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003c1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c20:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c22:	4b23      	ldr	r3, [pc, #140]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	4a22      	ldr	r2, [pc, #136]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003c28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c2c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c2e:	f7fd ff79 	bl	8001b24 <HAL_GetTick>
 8003c32:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c36:	f7fd ff75 	bl	8001b24 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e02e      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c48:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x842>
 8003c54:	e026      	b.n	8003ca4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	2b0c      	cmp	r3, #12
 8003c5a:	d021      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5c:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fd ff5c 	bl	8001b24 <HAL_GetTick>
 8003c6c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c70:	f7fd ff58 	bl	8001b24 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e011      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003c8e:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	4a07      	ldr	r2, [pc, #28]	; (8003cb0 <HAL_RCC_OscConfig+0x8bc>)
 8003c94:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c98:	f023 0303 	bic.w	r3, r3, #3
 8003c9c:	60d3      	str	r3, [r2, #12]
 8003c9e:	e001      	b.n	8003ca4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3728      	adds	r7, #40	; 0x28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	f99f808c 	.word	0xf99f808c

08003cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0e7      	b.n	8003e9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ccc:	4b75      	ldr	r3, [pc, #468]	; (8003ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d910      	bls.n	8003cfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cda:	4b72      	ldr	r3, [pc, #456]	; (8003ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 0207 	bic.w	r2, r3, #7
 8003ce2:	4970      	ldr	r1, [pc, #448]	; (8003ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cea:	4b6e      	ldr	r3, [pc, #440]	; (8003ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0cf      	b.n	8003e9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d010      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	4b66      	ldr	r3, [pc, #408]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d908      	bls.n	8003d2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d18:	4b63      	ldr	r3, [pc, #396]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	4960      	ldr	r1, [pc, #384]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d04c      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3e:	4b5a      	ldr	r3, [pc, #360]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d121      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e0a6      	b.n	8003e9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d56:	4b54      	ldr	r3, [pc, #336]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d115      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e09a      	b.n	8003e9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d107      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d6e:	4b4e      	ldr	r3, [pc, #312]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e08e      	b.n	8003e9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e086      	b.n	8003e9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d8e:	4b46      	ldr	r3, [pc, #280]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f023 0203 	bic.w	r2, r3, #3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	4943      	ldr	r1, [pc, #268]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da0:	f7fd fec0 	bl	8001b24 <HAL_GetTick>
 8003da4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	e00a      	b.n	8003dbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da8:	f7fd febc 	bl	8001b24 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e06e      	b.n	8003e9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	4b3a      	ldr	r3, [pc, #232]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 020c 	and.w	r2, r3, #12
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d1eb      	bne.n	8003da8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d010      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	4b31      	ldr	r3, [pc, #196]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d208      	bcs.n	8003dfe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dec:	4b2e      	ldr	r3, [pc, #184]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	492b      	ldr	r1, [pc, #172]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dfe:	4b29      	ldr	r3, [pc, #164]	; (8003ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d210      	bcs.n	8003e2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f023 0207 	bic.w	r2, r3, #7
 8003e14:	4923      	ldr	r1, [pc, #140]	; (8003ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1c:	4b21      	ldr	r3, [pc, #132]	; (8003ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d001      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e036      	b.n	8003e9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d008      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	4918      	ldr	r1, [pc, #96]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d009      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e58:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4910      	ldr	r1, [pc, #64]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e6c:	f000 f824 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8003e70:	4602      	mov	r2, r0
 8003e72:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	490b      	ldr	r1, [pc, #44]	; (8003eac <HAL_RCC_ClockConfig+0x1f4>)
 8003e7e:	5ccb      	ldrb	r3, [r1, r3]
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	fa22 f303 	lsr.w	r3, r2, r3
 8003e88:	4a09      	ldr	r2, [pc, #36]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e8c:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <HAL_RCC_ClockConfig+0x1fc>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fd fdf7 	bl	8001a84 <HAL_InitTick>
 8003e96:	4603      	mov	r3, r0
 8003e98:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e9a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40022000 	.word	0x40022000
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	080085d0 	.word	0x080085d0
 8003eb0:	20000000 	.word	0x20000000
 8003eb4:	20000004 	.word	0x20000004

08003eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b089      	sub	sp, #36	; 0x24
 8003ebc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ec6:	4b3e      	ldr	r3, [pc, #248]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ed0:	4b3b      	ldr	r3, [pc, #236]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0x34>
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	2b0c      	cmp	r3, #12
 8003ee4:	d121      	bne.n	8003f2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d11e      	bne.n	8003f2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003eec:	4b34      	ldr	r3, [pc, #208]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d107      	bne.n	8003f08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ef8:	4b31      	ldr	r3, [pc, #196]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003efe:	0a1b      	lsrs	r3, r3, #8
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	e005      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f08:	4b2d      	ldr	r3, [pc, #180]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	091b      	lsrs	r3, r3, #4
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f14:	4a2b      	ldr	r2, [pc, #172]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10d      	bne.n	8003f40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f28:	e00a      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d102      	bne.n	8003f36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f30:	4b25      	ldr	r3, [pc, #148]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f32:	61bb      	str	r3, [r7, #24]
 8003f34:	e004      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d101      	bne.n	8003f40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f3c:	4b23      	ldr	r3, [pc, #140]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x114>)
 8003f3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	2b0c      	cmp	r3, #12
 8003f44:	d134      	bne.n	8003fb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f46:	4b1e      	ldr	r3, [pc, #120]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d003      	beq.n	8003f5e <HAL_RCC_GetSysClockFreq+0xa6>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d003      	beq.n	8003f64 <HAL_RCC_GetSysClockFreq+0xac>
 8003f5c:	e005      	b.n	8003f6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f5e:	4b1a      	ldr	r3, [pc, #104]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f60:	617b      	str	r3, [r7, #20]
      break;
 8003f62:	e005      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f64:	4b19      	ldr	r3, [pc, #100]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x114>)
 8003f66:	617b      	str	r3, [r7, #20]
      break;
 8003f68:	e002      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	617b      	str	r3, [r7, #20]
      break;
 8003f6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f70:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f7e:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	0a1b      	lsrs	r3, r3, #8
 8003f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	fb03 f202 	mul.w	r2, r3, r2
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f96:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	0e5b      	lsrs	r3, r3, #25
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fb0:	69bb      	ldr	r3, [r7, #24]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3724      	adds	r7, #36	; 0x24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	080085e8 	.word	0x080085e8
 8003fc8:	00f42400 	.word	0x00f42400
 8003fcc:	007a1200 	.word	0x007a1200

08003fd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd4:	4b03      	ldr	r3, [pc, #12]	; (8003fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	20000000 	.word	0x20000000

08003fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fec:	f7ff fff0 	bl	8003fd0 <HAL_RCC_GetHCLKFreq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b06      	ldr	r3, [pc, #24]	; (800400c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	4904      	ldr	r1, [pc, #16]	; (8004010 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ffe:	5ccb      	ldrb	r3, [r1, r3]
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004008:	4618      	mov	r0, r3
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40021000 	.word	0x40021000
 8004010:	080085e0 	.word	0x080085e0

08004014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004018:	f7ff ffda 	bl	8003fd0 <HAL_RCC_GetHCLKFreq>
 800401c:	4602      	mov	r2, r0
 800401e:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	0adb      	lsrs	r3, r3, #11
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	4904      	ldr	r1, [pc, #16]	; (800403c <HAL_RCC_GetPCLK2Freq+0x28>)
 800402a:	5ccb      	ldrb	r3, [r1, r3]
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004034:	4618      	mov	r0, r3
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000
 800403c:	080085e0 	.word	0x080085e0

08004040 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004048:	2300      	movs	r3, #0
 800404a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800404c:	4b2a      	ldr	r3, [pc, #168]	; (80040f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800404e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004058:	f7ff f968 	bl	800332c <HAL_PWREx_GetVoltageRange>
 800405c:	6178      	str	r0, [r7, #20]
 800405e:	e014      	b.n	800408a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004060:	4b25      	ldr	r3, [pc, #148]	; (80040f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	4a24      	ldr	r2, [pc, #144]	; (80040f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406a:	6593      	str	r3, [r2, #88]	; 0x58
 800406c:	4b22      	ldr	r3, [pc, #136]	; (80040f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800406e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004078:	f7ff f958 	bl	800332c <HAL_PWREx_GetVoltageRange>
 800407c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800407e:	4b1e      	ldr	r3, [pc, #120]	; (80040f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004082:	4a1d      	ldr	r2, [pc, #116]	; (80040f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004088:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004090:	d10b      	bne.n	80040aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b80      	cmp	r3, #128	; 0x80
 8004096:	d919      	bls.n	80040cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2ba0      	cmp	r3, #160	; 0xa0
 800409c:	d902      	bls.n	80040a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800409e:	2302      	movs	r3, #2
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	e013      	b.n	80040cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040a4:	2301      	movs	r3, #1
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	e010      	b.n	80040cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b80      	cmp	r3, #128	; 0x80
 80040ae:	d902      	bls.n	80040b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040b0:	2303      	movs	r3, #3
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	e00a      	b.n	80040cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b80      	cmp	r3, #128	; 0x80
 80040ba:	d102      	bne.n	80040c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040bc:	2302      	movs	r3, #2
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	e004      	b.n	80040cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b70      	cmp	r3, #112	; 0x70
 80040c6:	d101      	bne.n	80040cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040c8:	2301      	movs	r3, #1
 80040ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f023 0207 	bic.w	r2, r3, #7
 80040d4:	4909      	ldr	r1, [pc, #36]	; (80040fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040dc:	4b07      	ldr	r3, [pc, #28]	; (80040fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d001      	beq.n	80040ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40022000 	.word	0x40022000

08004100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004108:	2300      	movs	r3, #0
 800410a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800410c:	2300      	movs	r3, #0
 800410e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 809e 	beq.w	800425a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800411e:	2300      	movs	r3, #0
 8004120:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004122:	4b46      	ldr	r3, [pc, #280]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004132:	2300      	movs	r3, #0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00d      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004138:	4b40      	ldr	r3, [pc, #256]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800413a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413c:	4a3f      	ldr	r2, [pc, #252]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800413e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004142:	6593      	str	r3, [r2, #88]	; 0x58
 8004144:	4b3d      	ldr	r3, [pc, #244]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004150:	2301      	movs	r3, #1
 8004152:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004154:	4b3a      	ldr	r3, [pc, #232]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a39      	ldr	r2, [pc, #228]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800415a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004160:	f7fd fce0 	bl	8001b24 <HAL_GetTick>
 8004164:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004166:	e009      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004168:	f7fd fcdc 	bl	8001b24 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d902      	bls.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	74fb      	strb	r3, [r7, #19]
        break;
 800417a:	e005      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800417c:	4b30      	ldr	r3, [pc, #192]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0ef      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004188:	7cfb      	ldrb	r3, [r7, #19]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d15a      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800418e:	4b2b      	ldr	r3, [pc, #172]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004198:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01e      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xde>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d019      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041aa:	4b24      	ldr	r3, [pc, #144]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041b6:	4b21      	ldr	r3, [pc, #132]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041bc:	4a1f      	ldr	r2, [pc, #124]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041c6:	4b1d      	ldr	r3, [pc, #116]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041cc:	4a1b      	ldr	r2, [pc, #108]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041d6:	4a19      	ldr	r2, [pc, #100]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d016      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7fd fc9c 	bl	8001b24 <HAL_GetTick>
 80041ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ee:	e00b      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f0:	f7fd fc98 	bl	8001b24 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fe:	4293      	cmp	r3, r2
 8004200:	d902      	bls.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	74fb      	strb	r3, [r7, #19]
            break;
 8004206:	e006      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004208:	4b0c      	ldr	r3, [pc, #48]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0ec      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004216:	7cfb      	ldrb	r3, [r7, #19]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800421c:	4b07      	ldr	r3, [pc, #28]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	4904      	ldr	r1, [pc, #16]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004232:	e009      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004234:	7cfb      	ldrb	r3, [r7, #19]
 8004236:	74bb      	strb	r3, [r7, #18]
 8004238:	e006      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000
 8004240:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004244:	7cfb      	ldrb	r3, [r7, #19]
 8004246:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004248:	7c7b      	ldrb	r3, [r7, #17]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d105      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424e:	4b6e      	ldr	r3, [pc, #440]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004252:	4a6d      	ldr	r2, [pc, #436]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004258:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004266:	4b68      	ldr	r3, [pc, #416]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f023 0203 	bic.w	r2, r3, #3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	4964      	ldr	r1, [pc, #400]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004288:	4b5f      	ldr	r3, [pc, #380]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f023 020c 	bic.w	r2, r3, #12
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	495c      	ldr	r1, [pc, #368]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042aa:	4b57      	ldr	r3, [pc, #348]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	4953      	ldr	r1, [pc, #332]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042cc:	4b4e      	ldr	r3, [pc, #312]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	494b      	ldr	r1, [pc, #300]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042ee:	4b46      	ldr	r3, [pc, #280]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	4942      	ldr	r1, [pc, #264]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004310:	4b3d      	ldr	r3, [pc, #244]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	493a      	ldr	r1, [pc, #232]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004332:	4b35      	ldr	r3, [pc, #212]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	4931      	ldr	r1, [pc, #196]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004354:	4b2c      	ldr	r3, [pc, #176]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	4929      	ldr	r1, [pc, #164]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004376:	4b24      	ldr	r3, [pc, #144]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	4920      	ldr	r1, [pc, #128]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d015      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004398:	4b1b      	ldr	r3, [pc, #108]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	4918      	ldr	r1, [pc, #96]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043b6:	d105      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043b8:	4b13      	ldr	r3, [pc, #76]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4a12      	ldr	r2, [pc, #72]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d015      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043d0:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	490a      	ldr	r1, [pc, #40]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043ee:	d105      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4a04      	ldr	r2, [pc, #16]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40021000 	.word	0x40021000

0800440c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004410:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a04      	ldr	r2, [pc, #16]	; (8004428 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004416:	f043 0304 	orr.w	r3, r3, #4
 800441a:	6013      	str	r3, [r2, #0]
}
 800441c:	bf00      	nop
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000

0800442c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af02      	add	r7, sp, #8
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004440:	2b20      	cmp	r3, #32
 8004442:	d178      	bne.n	8004536 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_UART_Transmit+0x24>
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e071      	b.n	8004538 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2221      	movs	r2, #33	; 0x21
 8004460:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004462:	f7fd fb5f 	bl	8001b24 <HAL_GetTick>
 8004466:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	88fa      	ldrh	r2, [r7, #6]
 800446c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	88fa      	ldrh	r2, [r7, #6]
 8004474:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004480:	d108      	bne.n	8004494 <HAL_UART_Transmit+0x68>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d104      	bne.n	8004494 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	e003      	b.n	800449c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004498:	2300      	movs	r3, #0
 800449a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800449c:	e030      	b.n	8004500 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2200      	movs	r2, #0
 80044a6:	2180      	movs	r1, #128	; 0x80
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 ff43 	bl	8005334 <UART_WaitOnFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d004      	beq.n	80044be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e03c      	b.n	8004538 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10b      	bne.n	80044dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	881a      	ldrh	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044d0:	b292      	uxth	r2, r2
 80044d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	3302      	adds	r3, #2
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	e008      	b.n	80044ee <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	781a      	ldrb	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	b292      	uxth	r2, r2
 80044e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	3301      	adds	r3, #1
 80044ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1c8      	bne.n	800449e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2200      	movs	r2, #0
 8004514:	2140      	movs	r1, #64	; 0x40
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 ff0c 	bl	8005334 <UART_WaitOnFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d004      	beq.n	800452c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e005      	b.n	8004538 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	e000      	b.n	8004538 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004536:	2302      	movs	r3, #2
  }
}
 8004538:	4618      	mov	r0, r3
 800453a:	3720      	adds	r7, #32
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08a      	sub	sp, #40	; 0x28
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	4613      	mov	r3, r2
 800454c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004554:	2b20      	cmp	r3, #32
 8004556:	d137      	bne.n	80045c8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <HAL_UART_Receive_IT+0x24>
 800455e:	88fb      	ldrh	r3, [r7, #6]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e030      	b.n	80045ca <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a18      	ldr	r2, [pc, #96]	; (80045d4 <HAL_UART_Receive_IT+0x94>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d01f      	beq.n	80045b8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d018      	beq.n	80045b8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	613b      	str	r3, [r7, #16]
   return(result);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	623b      	str	r3, [r7, #32]
 80045a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	69f9      	ldr	r1, [r7, #28]
 80045aa:	6a3a      	ldr	r2, [r7, #32]
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e6      	bne.n	8004586 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045b8:	88fb      	ldrh	r3, [r7, #6]
 80045ba:	461a      	mov	r2, r3
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 ff20 	bl	8005404 <UART_Start_Receive_IT>
 80045c4:	4603      	mov	r3, r0
 80045c6:	e000      	b.n	80045ca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045c8:	2302      	movs	r3, #2
  }
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3728      	adds	r7, #40	; 0x28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40008000 	.word	0x40008000

080045d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b0ba      	sub	sp, #232	; 0xe8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004602:	f640 030f 	movw	r3, #2063	; 0x80f
 8004606:	4013      	ands	r3, r2
 8004608:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800460c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004610:	2b00      	cmp	r3, #0
 8004612:	d115      	bne.n	8004640 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00f      	beq.n	8004640 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d009      	beq.n	8004640 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 82ae 	beq.w	8004b92 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	4798      	blx	r3
      }
      return;
 800463e:	e2a8      	b.n	8004b92 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8117 	beq.w	8004878 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800464a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004656:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800465a:	4b85      	ldr	r3, [pc, #532]	; (8004870 <HAL_UART_IRQHandler+0x298>)
 800465c:	4013      	ands	r3, r2
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 810a 	beq.w	8004878 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d011      	beq.n	8004694 <HAL_UART_IRQHandler+0xbc>
 8004670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00b      	beq.n	8004694 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2201      	movs	r2, #1
 8004682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468a:	f043 0201 	orr.w	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d011      	beq.n	80046c4 <HAL_UART_IRQHandler+0xec>
 80046a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00b      	beq.n	80046c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2202      	movs	r2, #2
 80046b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ba:	f043 0204 	orr.w	r2, r3, #4
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d011      	beq.n	80046f4 <HAL_UART_IRQHandler+0x11c>
 80046d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2204      	movs	r2, #4
 80046e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ea:	f043 0202 	orr.w	r2, r3, #2
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d017      	beq.n	8004730 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d105      	bne.n	8004718 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800470c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004710:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00b      	beq.n	8004730 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2208      	movs	r2, #8
 800471e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004726:	f043 0208 	orr.w	r2, r3, #8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004738:	2b00      	cmp	r3, #0
 800473a:	d012      	beq.n	8004762 <HAL_UART_IRQHandler+0x18a>
 800473c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00c      	beq.n	8004762 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004758:	f043 0220 	orr.w	r2, r3, #32
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8214 	beq.w	8004b96 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800476e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00d      	beq.n	8004796 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800477a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d007      	beq.n	8004796 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047aa:	2b40      	cmp	r3, #64	; 0x40
 80047ac:	d005      	beq.n	80047ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d04f      	beq.n	800485a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fee8 	bl	8005590 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	d141      	bne.n	8004852 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3308      	adds	r3, #8
 80047d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3308      	adds	r3, #8
 80047f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004806:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1d9      	bne.n	80047ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800481e:	2b00      	cmp	r3, #0
 8004820:	d013      	beq.n	800484a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004826:	4a13      	ldr	r2, [pc, #76]	; (8004874 <HAL_UART_IRQHandler+0x29c>)
 8004828:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482e:	4618      	mov	r0, r3
 8004830:	f7fd faf7 	bl	8001e22 <HAL_DMA_Abort_IT>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d017      	beq.n	800486a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004844:	4610      	mov	r0, r2
 8004846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004848:	e00f      	b.n	800486a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f9b8 	bl	8004bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004850:	e00b      	b.n	800486a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f9b4 	bl	8004bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004858:	e007      	b.n	800486a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f9b0 	bl	8004bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004868:	e195      	b.n	8004b96 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800486a:	bf00      	nop
    return;
 800486c:	e193      	b.n	8004b96 <HAL_UART_IRQHandler+0x5be>
 800486e:	bf00      	nop
 8004870:	04000120 	.word	0x04000120
 8004874:	08005659 	.word	0x08005659

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487c:	2b01      	cmp	r3, #1
 800487e:	f040 814e 	bne.w	8004b1e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004886:	f003 0310 	and.w	r3, r3, #16
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 8147 	beq.w	8004b1e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 8140 	beq.w	8004b1e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2210      	movs	r2, #16
 80048a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b0:	2b40      	cmp	r3, #64	; 0x40
 80048b2:	f040 80b8 	bne.w	8004a26 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 8167 	beq.w	8004b9a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048d6:	429a      	cmp	r2, r3
 80048d8:	f080 815f 	bcs.w	8004b9a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f040 8086 	bne.w	8004a04 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800490c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004914:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004922:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004926:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800492e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800493a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1da      	bne.n	80048f8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3308      	adds	r3, #8
 8004948:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004954:	f023 0301 	bic.w	r3, r3, #1
 8004958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3308      	adds	r3, #8
 8004962:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004966:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800496a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800496e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e1      	bne.n	8004942 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3308      	adds	r3, #8
 8004984:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800498e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3308      	adds	r3, #8
 800499e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e3      	bne.n	800497e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d4:	f023 0310 	bic.w	r3, r3, #16
 80049d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80049e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e4      	bne.n	80049c4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fd f9d1 	bl	8001da6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f8d8 	bl	8004bd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a24:	e0b9      	b.n	8004b9a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 80ab 	beq.w	8004b9e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004a48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80a6 	beq.w	8004b9e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5a:	e853 3f00 	ldrex	r3, [r3]
 8004a5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a74:	647b      	str	r3, [r7, #68]	; 0x44
 8004a76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e4      	bne.n	8004a52 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	e853 3f00 	ldrex	r3, [r3]
 8004a96:	623b      	str	r3, [r7, #32]
   return(result);
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	f023 0301 	bic.w	r3, r3, #1
 8004a9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004aac:	633a      	str	r2, [r7, #48]	; 0x30
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e3      	bne.n	8004a88 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f023 0310 	bic.w	r3, r3, #16
 8004ae8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	461a      	mov	r2, r3
 8004af2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004af6:	61fb      	str	r3, [r7, #28]
 8004af8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	69b9      	ldr	r1, [r7, #24]
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	617b      	str	r3, [r7, #20]
   return(result);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e4      	bne.n	8004ad4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b14:	4619      	mov	r1, r3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f85c 	bl	8004bd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b1c:	e03f      	b.n	8004b9e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00e      	beq.n	8004b48 <HAL_UART_IRQHandler+0x570>
 8004b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d008      	beq.n	8004b48 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 ffec 	bl	8005b1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b46:	e02d      	b.n	8004ba4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00e      	beq.n	8004b72 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d01c      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	4798      	blx	r3
    }
    return;
 8004b70:	e017      	b.n	8004ba2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d012      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x5cc>
 8004b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00c      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fd7a 	bl	8005684 <UART_EndTransmit_IT>
    return;
 8004b90:	e008      	b.n	8004ba4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004b92:	bf00      	nop
 8004b94:	e006      	b.n	8004ba4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004b96:	bf00      	nop
 8004b98:	e004      	b.n	8004ba4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004b9a:	bf00      	nop
 8004b9c:	e002      	b.n	8004ba4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004b9e:	bf00      	nop
 8004ba0:	e000      	b.n	8004ba4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004ba2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004ba4:	37e8      	adds	r7, #232	; 0xe8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop

08004bac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf0:	b08a      	sub	sp, #40	; 0x28
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	431a      	orrs	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b9e      	ldr	r3, [pc, #632]	; (8004e94 <UART_SetConfig+0x2a8>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	6812      	ldr	r2, [r2, #0]
 8004c22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c24:	430b      	orrs	r3, r1
 8004c26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a93      	ldr	r2, [pc, #588]	; (8004e98 <UART_SetConfig+0x2ac>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c54:	4313      	orrs	r3, r2
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a8a      	ldr	r2, [pc, #552]	; (8004e9c <UART_SetConfig+0x2b0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d126      	bne.n	8004cc4 <UART_SetConfig+0xd8>
 8004c76:	4b8a      	ldr	r3, [pc, #552]	; (8004ea0 <UART_SetConfig+0x2b4>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d81b      	bhi.n	8004cbc <UART_SetConfig+0xd0>
 8004c84:	a201      	add	r2, pc, #4	; (adr r2, 8004c8c <UART_SetConfig+0xa0>)
 8004c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8a:	bf00      	nop
 8004c8c:	08004c9d 	.word	0x08004c9d
 8004c90:	08004cad 	.word	0x08004cad
 8004c94:	08004ca5 	.word	0x08004ca5
 8004c98:	08004cb5 	.word	0x08004cb5
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca2:	e0ab      	b.n	8004dfc <UART_SetConfig+0x210>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004caa:	e0a7      	b.n	8004dfc <UART_SetConfig+0x210>
 8004cac:	2304      	movs	r3, #4
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb2:	e0a3      	b.n	8004dfc <UART_SetConfig+0x210>
 8004cb4:	2308      	movs	r3, #8
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cba:	e09f      	b.n	8004dfc <UART_SetConfig+0x210>
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc2:	e09b      	b.n	8004dfc <UART_SetConfig+0x210>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a76      	ldr	r2, [pc, #472]	; (8004ea4 <UART_SetConfig+0x2b8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d138      	bne.n	8004d40 <UART_SetConfig+0x154>
 8004cce:	4b74      	ldr	r3, [pc, #464]	; (8004ea0 <UART_SetConfig+0x2b4>)
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd4:	f003 030c 	and.w	r3, r3, #12
 8004cd8:	2b0c      	cmp	r3, #12
 8004cda:	d82d      	bhi.n	8004d38 <UART_SetConfig+0x14c>
 8004cdc:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <UART_SetConfig+0xf8>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004d19 	.word	0x08004d19
 8004ce8:	08004d39 	.word	0x08004d39
 8004cec:	08004d39 	.word	0x08004d39
 8004cf0:	08004d39 	.word	0x08004d39
 8004cf4:	08004d29 	.word	0x08004d29
 8004cf8:	08004d39 	.word	0x08004d39
 8004cfc:	08004d39 	.word	0x08004d39
 8004d00:	08004d39 	.word	0x08004d39
 8004d04:	08004d21 	.word	0x08004d21
 8004d08:	08004d39 	.word	0x08004d39
 8004d0c:	08004d39 	.word	0x08004d39
 8004d10:	08004d39 	.word	0x08004d39
 8004d14:	08004d31 	.word	0x08004d31
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1e:	e06d      	b.n	8004dfc <UART_SetConfig+0x210>
 8004d20:	2302      	movs	r3, #2
 8004d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d26:	e069      	b.n	8004dfc <UART_SetConfig+0x210>
 8004d28:	2304      	movs	r3, #4
 8004d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2e:	e065      	b.n	8004dfc <UART_SetConfig+0x210>
 8004d30:	2308      	movs	r3, #8
 8004d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d36:	e061      	b.n	8004dfc <UART_SetConfig+0x210>
 8004d38:	2310      	movs	r3, #16
 8004d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3e:	e05d      	b.n	8004dfc <UART_SetConfig+0x210>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a58      	ldr	r2, [pc, #352]	; (8004ea8 <UART_SetConfig+0x2bc>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d125      	bne.n	8004d96 <UART_SetConfig+0x1aa>
 8004d4a:	4b55      	ldr	r3, [pc, #340]	; (8004ea0 <UART_SetConfig+0x2b4>)
 8004d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d54:	2b30      	cmp	r3, #48	; 0x30
 8004d56:	d016      	beq.n	8004d86 <UART_SetConfig+0x19a>
 8004d58:	2b30      	cmp	r3, #48	; 0x30
 8004d5a:	d818      	bhi.n	8004d8e <UART_SetConfig+0x1a2>
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d00a      	beq.n	8004d76 <UART_SetConfig+0x18a>
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	d814      	bhi.n	8004d8e <UART_SetConfig+0x1a2>
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <UART_SetConfig+0x182>
 8004d68:	2b10      	cmp	r3, #16
 8004d6a:	d008      	beq.n	8004d7e <UART_SetConfig+0x192>
 8004d6c:	e00f      	b.n	8004d8e <UART_SetConfig+0x1a2>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d74:	e042      	b.n	8004dfc <UART_SetConfig+0x210>
 8004d76:	2302      	movs	r3, #2
 8004d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7c:	e03e      	b.n	8004dfc <UART_SetConfig+0x210>
 8004d7e:	2304      	movs	r3, #4
 8004d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d84:	e03a      	b.n	8004dfc <UART_SetConfig+0x210>
 8004d86:	2308      	movs	r3, #8
 8004d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8c:	e036      	b.n	8004dfc <UART_SetConfig+0x210>
 8004d8e:	2310      	movs	r3, #16
 8004d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d94:	e032      	b.n	8004dfc <UART_SetConfig+0x210>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a3f      	ldr	r2, [pc, #252]	; (8004e98 <UART_SetConfig+0x2ac>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d12a      	bne.n	8004df6 <UART_SetConfig+0x20a>
 8004da0:	4b3f      	ldr	r3, [pc, #252]	; (8004ea0 <UART_SetConfig+0x2b4>)
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004daa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dae:	d01a      	beq.n	8004de6 <UART_SetConfig+0x1fa>
 8004db0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004db4:	d81b      	bhi.n	8004dee <UART_SetConfig+0x202>
 8004db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dba:	d00c      	beq.n	8004dd6 <UART_SetConfig+0x1ea>
 8004dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc0:	d815      	bhi.n	8004dee <UART_SetConfig+0x202>
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <UART_SetConfig+0x1e2>
 8004dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dca:	d008      	beq.n	8004dde <UART_SetConfig+0x1f2>
 8004dcc:	e00f      	b.n	8004dee <UART_SetConfig+0x202>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd4:	e012      	b.n	8004dfc <UART_SetConfig+0x210>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ddc:	e00e      	b.n	8004dfc <UART_SetConfig+0x210>
 8004dde:	2304      	movs	r3, #4
 8004de0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de4:	e00a      	b.n	8004dfc <UART_SetConfig+0x210>
 8004de6:	2308      	movs	r3, #8
 8004de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dec:	e006      	b.n	8004dfc <UART_SetConfig+0x210>
 8004dee:	2310      	movs	r3, #16
 8004df0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df4:	e002      	b.n	8004dfc <UART_SetConfig+0x210>
 8004df6:	2310      	movs	r3, #16
 8004df8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a25      	ldr	r2, [pc, #148]	; (8004e98 <UART_SetConfig+0x2ac>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	f040 808a 	bne.w	8004f1c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d824      	bhi.n	8004e5a <UART_SetConfig+0x26e>
 8004e10:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <UART_SetConfig+0x22c>)
 8004e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e16:	bf00      	nop
 8004e18:	08004e3d 	.word	0x08004e3d
 8004e1c:	08004e5b 	.word	0x08004e5b
 8004e20:	08004e45 	.word	0x08004e45
 8004e24:	08004e5b 	.word	0x08004e5b
 8004e28:	08004e4b 	.word	0x08004e4b
 8004e2c:	08004e5b 	.word	0x08004e5b
 8004e30:	08004e5b 	.word	0x08004e5b
 8004e34:	08004e5b 	.word	0x08004e5b
 8004e38:	08004e53 	.word	0x08004e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e3c:	f7ff f8d4 	bl	8003fe8 <HAL_RCC_GetPCLK1Freq>
 8004e40:	61f8      	str	r0, [r7, #28]
        break;
 8004e42:	e010      	b.n	8004e66 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e44:	4b19      	ldr	r3, [pc, #100]	; (8004eac <UART_SetConfig+0x2c0>)
 8004e46:	61fb      	str	r3, [r7, #28]
        break;
 8004e48:	e00d      	b.n	8004e66 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e4a:	f7ff f835 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8004e4e:	61f8      	str	r0, [r7, #28]
        break;
 8004e50:	e009      	b.n	8004e66 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e56:	61fb      	str	r3, [r7, #28]
        break;
 8004e58:	e005      	b.n	8004e66 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 8109 	beq.w	8005080 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	4613      	mov	r3, r2
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	4413      	add	r3, r2
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d305      	bcc.n	8004e8a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d912      	bls.n	8004eb0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e90:	e0f6      	b.n	8005080 <UART_SetConfig+0x494>
 8004e92:	bf00      	nop
 8004e94:	efff69f3 	.word	0xefff69f3
 8004e98:	40008000 	.word	0x40008000
 8004e9c:	40013800 	.word	0x40013800
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	40004400 	.word	0x40004400
 8004ea8:	40004800 	.word	0x40004800
 8004eac:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	461c      	mov	r4, r3
 8004eb6:	4615      	mov	r5, r2
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	022b      	lsls	r3, r5, #8
 8004ec2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ec6:	0222      	lsls	r2, r4, #8
 8004ec8:	68f9      	ldr	r1, [r7, #12]
 8004eca:	6849      	ldr	r1, [r1, #4]
 8004ecc:	0849      	lsrs	r1, r1, #1
 8004ece:	2000      	movs	r0, #0
 8004ed0:	4688      	mov	r8, r1
 8004ed2:	4681      	mov	r9, r0
 8004ed4:	eb12 0a08 	adds.w	sl, r2, r8
 8004ed8:	eb43 0b09 	adc.w	fp, r3, r9
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	607a      	str	r2, [r7, #4]
 8004ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eea:	4650      	mov	r0, sl
 8004eec:	4659      	mov	r1, fp
 8004eee:	f7fb feab 	bl	8000c48 <__aeabi_uldivmod>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f00:	d308      	bcc.n	8004f14 <UART_SetConfig+0x328>
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f08:	d204      	bcs.n	8004f14 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	60da      	str	r2, [r3, #12]
 8004f12:	e0b5      	b.n	8005080 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f1a:	e0b1      	b.n	8005080 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f24:	d15d      	bne.n	8004fe2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004f26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	d827      	bhi.n	8004f7e <UART_SetConfig+0x392>
 8004f2e:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <UART_SetConfig+0x348>)
 8004f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f34:	08004f59 	.word	0x08004f59
 8004f38:	08004f61 	.word	0x08004f61
 8004f3c:	08004f69 	.word	0x08004f69
 8004f40:	08004f7f 	.word	0x08004f7f
 8004f44:	08004f6f 	.word	0x08004f6f
 8004f48:	08004f7f 	.word	0x08004f7f
 8004f4c:	08004f7f 	.word	0x08004f7f
 8004f50:	08004f7f 	.word	0x08004f7f
 8004f54:	08004f77 	.word	0x08004f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f58:	f7ff f846 	bl	8003fe8 <HAL_RCC_GetPCLK1Freq>
 8004f5c:	61f8      	str	r0, [r7, #28]
        break;
 8004f5e:	e014      	b.n	8004f8a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f60:	f7ff f858 	bl	8004014 <HAL_RCC_GetPCLK2Freq>
 8004f64:	61f8      	str	r0, [r7, #28]
        break;
 8004f66:	e010      	b.n	8004f8a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f68:	4b4c      	ldr	r3, [pc, #304]	; (800509c <UART_SetConfig+0x4b0>)
 8004f6a:	61fb      	str	r3, [r7, #28]
        break;
 8004f6c:	e00d      	b.n	8004f8a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f6e:	f7fe ffa3 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8004f72:	61f8      	str	r0, [r7, #28]
        break;
 8004f74:	e009      	b.n	8004f8a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f7a:	61fb      	str	r3, [r7, #28]
        break;
 8004f7c:	e005      	b.n	8004f8a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d077      	beq.n	8005080 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	005a      	lsls	r2, r3, #1
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	085b      	lsrs	r3, r3, #1
 8004f9a:	441a      	add	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	2b0f      	cmp	r3, #15
 8004faa:	d916      	bls.n	8004fda <UART_SetConfig+0x3ee>
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb2:	d212      	bcs.n	8004fda <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	f023 030f 	bic.w	r3, r3, #15
 8004fbc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	8afb      	ldrh	r3, [r7, #22]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	8afa      	ldrh	r2, [r7, #22]
 8004fd6:	60da      	str	r2, [r3, #12]
 8004fd8:	e052      	b.n	8005080 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fe0:	e04e      	b.n	8005080 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fe2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d827      	bhi.n	800503a <UART_SetConfig+0x44e>
 8004fea:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <UART_SetConfig+0x404>)
 8004fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff0:	08005015 	.word	0x08005015
 8004ff4:	0800501d 	.word	0x0800501d
 8004ff8:	08005025 	.word	0x08005025
 8004ffc:	0800503b 	.word	0x0800503b
 8005000:	0800502b 	.word	0x0800502b
 8005004:	0800503b 	.word	0x0800503b
 8005008:	0800503b 	.word	0x0800503b
 800500c:	0800503b 	.word	0x0800503b
 8005010:	08005033 	.word	0x08005033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005014:	f7fe ffe8 	bl	8003fe8 <HAL_RCC_GetPCLK1Freq>
 8005018:	61f8      	str	r0, [r7, #28]
        break;
 800501a:	e014      	b.n	8005046 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800501c:	f7fe fffa 	bl	8004014 <HAL_RCC_GetPCLK2Freq>
 8005020:	61f8      	str	r0, [r7, #28]
        break;
 8005022:	e010      	b.n	8005046 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005024:	4b1d      	ldr	r3, [pc, #116]	; (800509c <UART_SetConfig+0x4b0>)
 8005026:	61fb      	str	r3, [r7, #28]
        break;
 8005028:	e00d      	b.n	8005046 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800502a:	f7fe ff45 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 800502e:	61f8      	str	r0, [r7, #28]
        break;
 8005030:	e009      	b.n	8005046 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005036:	61fb      	str	r3, [r7, #28]
        break;
 8005038:	e005      	b.n	8005046 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005044:	bf00      	nop
    }

    if (pclk != 0U)
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d019      	beq.n	8005080 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	085a      	lsrs	r2, r3, #1
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	441a      	add	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	fbb2 f3f3 	udiv	r3, r2, r3
 800505e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	2b0f      	cmp	r3, #15
 8005064:	d909      	bls.n	800507a <UART_SetConfig+0x48e>
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800506c:	d205      	bcs.n	800507a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	60da      	str	r2, [r3, #12]
 8005078:	e002      	b.n	8005080 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800508c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005090:	4618      	mov	r0, r3
 8005092:	3728      	adds	r7, #40	; 0x28
 8005094:	46bd      	mov	sp, r7
 8005096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800509a:	bf00      	nop
 800509c:	00f42400 	.word	0x00f42400

080050a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01a      	beq.n	80051b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800519e:	d10a      	bne.n	80051b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	605a      	str	r2, [r3, #4]
  }
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b098      	sub	sp, #96	; 0x60
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051f4:	f7fc fc96 	bl	8001b24 <HAL_GetTick>
 80051f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b08      	cmp	r3, #8
 8005206:	d12e      	bne.n	8005266 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005208:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005210:	2200      	movs	r2, #0
 8005212:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f88c 	bl	8005334 <UART_WaitOnFlagUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d021      	beq.n	8005266 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005236:	653b      	str	r3, [r7, #80]	; 0x50
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005240:	647b      	str	r3, [r7, #68]	; 0x44
 8005242:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800524e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e6      	bne.n	8005222 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e062      	b.n	800532c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b04      	cmp	r3, #4
 8005272:	d149      	bne.n	8005308 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800527c:	2200      	movs	r2, #0
 800527e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f856 	bl	8005334 <UART_WaitOnFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d03c      	beq.n	8005308 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	623b      	str	r3, [r7, #32]
   return(result);
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	461a      	mov	r2, r3
 80052aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ac:	633b      	str	r3, [r7, #48]	; 0x30
 80052ae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e6      	bne.n	800528e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3308      	adds	r3, #8
 80052c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0301 	bic.w	r3, r3, #1
 80052d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3308      	adds	r3, #8
 80052de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052e0:	61fa      	str	r2, [r7, #28]
 80052e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	69b9      	ldr	r1, [r7, #24]
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	617b      	str	r3, [r7, #20]
   return(result);
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e5      	bne.n	80052c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e011      	b.n	800532c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3758      	adds	r7, #88	; 0x58
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	4613      	mov	r3, r2
 8005342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005344:	e049      	b.n	80053da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534c:	d045      	beq.n	80053da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534e:	f7fc fbe9 	bl	8001b24 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	429a      	cmp	r2, r3
 800535c:	d302      	bcc.n	8005364 <UART_WaitOnFlagUntilTimeout+0x30>
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e048      	b.n	80053fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b00      	cmp	r3, #0
 8005374:	d031      	beq.n	80053da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	f003 0308 	and.w	r3, r3, #8
 8005380:	2b08      	cmp	r3, #8
 8005382:	d110      	bne.n	80053a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2208      	movs	r2, #8
 800538a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 f8ff 	bl	8005590 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2208      	movs	r2, #8
 8005396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e029      	b.n	80053fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b4:	d111      	bne.n	80053da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 f8e5 	bl	8005590 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e00f      	b.n	80053fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69da      	ldr	r2, [r3, #28]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4013      	ands	r3, r2
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	bf0c      	ite	eq
 80053ea:	2301      	moveq	r3, #1
 80053ec:	2300      	movne	r3, #0
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d0a6      	beq.n	8005346 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005404:	b480      	push	{r7}
 8005406:	b097      	sub	sp, #92	; 0x5c
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	4613      	mov	r3, r2
 8005410:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	88fa      	ldrh	r2, [r7, #6]
 800541c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	88fa      	ldrh	r2, [r7, #6]
 8005424:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005436:	d10e      	bne.n	8005456 <UART_Start_Receive_IT+0x52>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d105      	bne.n	800544c <UART_Start_Receive_IT+0x48>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005446:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800544a:	e02d      	b.n	80054a8 <UART_Start_Receive_IT+0xa4>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	22ff      	movs	r2, #255	; 0xff
 8005450:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005454:	e028      	b.n	80054a8 <UART_Start_Receive_IT+0xa4>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10d      	bne.n	800547a <UART_Start_Receive_IT+0x76>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d104      	bne.n	8005470 <UART_Start_Receive_IT+0x6c>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	22ff      	movs	r2, #255	; 0xff
 800546a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800546e:	e01b      	b.n	80054a8 <UART_Start_Receive_IT+0xa4>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	227f      	movs	r2, #127	; 0x7f
 8005474:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005478:	e016      	b.n	80054a8 <UART_Start_Receive_IT+0xa4>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005482:	d10d      	bne.n	80054a0 <UART_Start_Receive_IT+0x9c>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d104      	bne.n	8005496 <UART_Start_Receive_IT+0x92>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	227f      	movs	r2, #127	; 0x7f
 8005490:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005494:	e008      	b.n	80054a8 <UART_Start_Receive_IT+0xa4>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	223f      	movs	r2, #63	; 0x3f
 800549a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800549e:	e003      	b.n	80054a8 <UART_Start_Receive_IT+0xa4>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2222      	movs	r2, #34	; 0x22
 80054b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3308      	adds	r3, #8
 80054be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ca:	f043 0301 	orr.w	r3, r3, #1
 80054ce:	657b      	str	r3, [r7, #84]	; 0x54
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3308      	adds	r3, #8
 80054d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80054da:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e5      	bne.n	80054b8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f4:	d107      	bne.n	8005506 <UART_Start_Receive_IT+0x102>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d103      	bne.n	8005506 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4a21      	ldr	r2, [pc, #132]	; (8005588 <UART_Start_Receive_IT+0x184>)
 8005502:	669a      	str	r2, [r3, #104]	; 0x68
 8005504:	e002      	b.n	800550c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4a20      	ldr	r2, [pc, #128]	; (800558c <UART_Start_Receive_IT+0x188>)
 800550a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d019      	beq.n	8005548 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005528:	64fb      	str	r3, [r7, #76]	; 0x4c
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005532:	637b      	str	r3, [r7, #52]	; 0x34
 8005534:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005538:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e6      	bne.n	8005514 <UART_Start_Receive_IT+0x110>
 8005546:	e018      	b.n	800557a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	613b      	str	r3, [r7, #16]
   return(result);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f043 0320 	orr.w	r3, r3, #32
 800555c:	653b      	str	r3, [r7, #80]	; 0x50
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005566:	623b      	str	r3, [r7, #32]
 8005568:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	69f9      	ldr	r1, [r7, #28]
 800556c:	6a3a      	ldr	r2, [r7, #32]
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	61bb      	str	r3, [r7, #24]
   return(result);
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e6      	bne.n	8005548 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	375c      	adds	r7, #92	; 0x5c
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	08005895 	.word	0x08005895
 800558c:	080056d9 	.word	0x080056d9

08005590 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005590:	b480      	push	{r7}
 8005592:	b095      	sub	sp, #84	; 0x54
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b6:	643b      	str	r3, [r7, #64]	; 0x40
 80055b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e6      	bne.n	8005598 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3308      	adds	r3, #8
 80055d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f023 0301 	bic.w	r3, r3, #1
 80055e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e5      	bne.n	80055ca <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005602:	2b01      	cmp	r3, #1
 8005604:	d118      	bne.n	8005638 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	e853 3f00 	ldrex	r3, [r3]
 8005612:	60bb      	str	r3, [r7, #8]
   return(result);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f023 0310 	bic.w	r3, r3, #16
 800561a:	647b      	str	r3, [r7, #68]	; 0x44
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	461a      	mov	r2, r3
 8005622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005624:	61bb      	str	r3, [r7, #24]
 8005626:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005628:	6979      	ldr	r1, [r7, #20]
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	e841 2300 	strex	r3, r2, [r1]
 8005630:	613b      	str	r3, [r7, #16]
   return(result);
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e6      	bne.n	8005606 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800564c:	bf00      	nop
 800564e:	3754      	adds	r7, #84	; 0x54
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff faa2 	bl	8004bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	60bb      	str	r3, [r7, #8]
   return(result);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056a0:	61fb      	str	r3, [r7, #28]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	6979      	ldr	r1, [r7, #20]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	613b      	str	r3, [r7, #16]
   return(result);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e6      	bne.n	800568c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff fa6e 	bl	8004bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056d0:	bf00      	nop
 80056d2:	3720      	adds	r7, #32
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b09c      	sub	sp, #112	; 0x70
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056f0:	2b22      	cmp	r3, #34	; 0x22
 80056f2:	f040 80be 	bne.w	8005872 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005700:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005704:	b2d9      	uxtb	r1, r3
 8005706:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800570a:	b2da      	uxtb	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005710:	400a      	ands	r2, r1
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005738:	b29b      	uxth	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	f040 80a3 	bne.w	8005886 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800574e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005754:	66bb      	str	r3, [r7, #104]	; 0x68
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800575e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005760:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800576c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e6      	bne.n	8005740 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3308      	adds	r3, #8
 8005778:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005784:	f023 0301 	bic.w	r3, r3, #1
 8005788:	667b      	str	r3, [r7, #100]	; 0x64
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3308      	adds	r3, #8
 8005790:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005792:	647a      	str	r2, [r7, #68]	; 0x44
 8005794:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800579a:	e841 2300 	strex	r3, r2, [r1]
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e5      	bne.n	8005772 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a34      	ldr	r2, [pc, #208]	; (8005890 <UART_RxISR_8BIT+0x1b8>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d01f      	beq.n	8005804 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d018      	beq.n	8005804 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	e853 3f00 	ldrex	r3, [r3]
 80057de:	623b      	str	r3, [r7, #32]
   return(result);
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057e6:	663b      	str	r3, [r7, #96]	; 0x60
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	461a      	mov	r2, r3
 80057ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057f0:	633b      	str	r3, [r7, #48]	; 0x30
 80057f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e6      	bne.n	80057d2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005808:	2b01      	cmp	r3, #1
 800580a:	d12e      	bne.n	800586a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0310 	bic.w	r3, r3, #16
 8005826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	461a      	mov	r2, r3
 800582e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005830:	61fb      	str	r3, [r7, #28]
 8005832:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005834:	69b9      	ldr	r1, [r7, #24]
 8005836:	69fa      	ldr	r2, [r7, #28]
 8005838:	e841 2300 	strex	r3, r2, [r1]
 800583c:	617b      	str	r3, [r7, #20]
   return(result);
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e6      	bne.n	8005812 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f003 0310 	and.w	r3, r3, #16
 800584e:	2b10      	cmp	r3, #16
 8005850:	d103      	bne.n	800585a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2210      	movs	r2, #16
 8005858:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7ff f9b6 	bl	8004bd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005868:	e00d      	b.n	8005886 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fb fcd8 	bl	8001220 <HAL_UART_RxCpltCallback>
}
 8005870:	e009      	b.n	8005886 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	8b1b      	ldrh	r3, [r3, #24]
 8005878:	b29a      	uxth	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0208 	orr.w	r2, r2, #8
 8005882:	b292      	uxth	r2, r2
 8005884:	831a      	strh	r2, [r3, #24]
}
 8005886:	bf00      	nop
 8005888:	3770      	adds	r7, #112	; 0x70
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	40008000 	.word	0x40008000

08005894 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b09c      	sub	sp, #112	; 0x70
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ac:	2b22      	cmp	r3, #34	; 0x22
 80058ae:	f040 80be 	bne.w	8005a2e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80058c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80058c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80058ca:	4013      	ands	r3, r2
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d6:	1c9a      	adds	r2, r3, #2
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f040 80a3 	bne.w	8005a42 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005904:	e853 3f00 	ldrex	r3, [r3]
 8005908:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800590a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800590c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005910:	667b      	str	r3, [r7, #100]	; 0x64
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800591a:	657b      	str	r3, [r7, #84]	; 0x54
 800591c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005920:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005922:	e841 2300 	strex	r3, r2, [r1]
 8005926:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1e6      	bne.n	80058fc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3308      	adds	r3, #8
 8005934:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005938:	e853 3f00 	ldrex	r3, [r3]
 800593c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	f023 0301 	bic.w	r3, r3, #1
 8005944:	663b      	str	r3, [r7, #96]	; 0x60
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3308      	adds	r3, #8
 800594c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800594e:	643a      	str	r2, [r7, #64]	; 0x40
 8005950:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005954:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800595c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e5      	bne.n	800592e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a34      	ldr	r2, [pc, #208]	; (8005a4c <UART_RxISR_16BIT+0x1b8>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d01f      	beq.n	80059c0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d018      	beq.n	80059c0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	61fb      	str	r3, [r7, #28]
   return(result);
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	461a      	mov	r2, r3
 80059aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e6      	bne.n	800598e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d12e      	bne.n	8005a26 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	60bb      	str	r3, [r7, #8]
   return(result);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f023 0310 	bic.w	r3, r3, #16
 80059e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	461a      	mov	r2, r3
 80059ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059ec:	61bb      	str	r3, [r7, #24]
 80059ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f0:	6979      	ldr	r1, [r7, #20]
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	613b      	str	r3, [r7, #16]
   return(result);
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e6      	bne.n	80059ce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	d103      	bne.n	8005a16 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2210      	movs	r2, #16
 8005a14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff f8d8 	bl	8004bd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a24:	e00d      	b.n	8005a42 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fb fbfa 	bl	8001220 <HAL_UART_RxCpltCallback>
}
 8005a2c:	e009      	b.n	8005a42 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	8b1b      	ldrh	r3, [r3, #24]
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0208 	orr.w	r2, r2, #8
 8005a3e:	b292      	uxth	r2, r2
 8005a40:	831a      	strh	r2, [r3, #24]
}
 8005a42:	bf00      	nop
 8005a44:	3770      	adds	r7, #112	; 0x70
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40008000 	.word	0x40008000

08005a50 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e056      	b.n	8005b16 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d106      	bne.n	8005a7e <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f7fb fe55 	bl	8001728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2224      	movs	r2, #36	; 0x24
 8005a82:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0201 	bic.w	r2, r2, #1
 8005a92:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f7ff faff 	bl	80050a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f7ff f8a2 	bl	8004bec <UART_SetConfig>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e031      	b.n	8005b16 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ac0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	055b      	lsls	r3, r3, #21
 8005ada:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	041b      	lsls	r3, r3, #16
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8005af0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	6812      	ldr	r2, [r2, #0]
 8005af8:	6979      	ldr	r1, [r7, #20]
 8005afa:	430b      	orrs	r3, r1
 8005afc:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0201 	orr.w	r2, r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f7ff fb68 	bl	80051e4 <UART_CheckIdleState>
 8005b14:	4603      	mov	r3, r0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <malloc>:
 8005b34:	4b02      	ldr	r3, [pc, #8]	; (8005b40 <malloc+0xc>)
 8005b36:	4601      	mov	r1, r0
 8005b38:	6818      	ldr	r0, [r3, #0]
 8005b3a:	f000 b82b 	b.w	8005b94 <_malloc_r>
 8005b3e:	bf00      	nop
 8005b40:	20000064 	.word	0x20000064

08005b44 <free>:
 8005b44:	4b02      	ldr	r3, [pc, #8]	; (8005b50 <free+0xc>)
 8005b46:	4601      	mov	r1, r0
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	f001 be17 	b.w	800777c <_free_r>
 8005b4e:	bf00      	nop
 8005b50:	20000064 	.word	0x20000064

08005b54 <sbrk_aligned>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	4e0e      	ldr	r6, [pc, #56]	; (8005b90 <sbrk_aligned+0x3c>)
 8005b58:	460c      	mov	r4, r1
 8005b5a:	6831      	ldr	r1, [r6, #0]
 8005b5c:	4605      	mov	r5, r0
 8005b5e:	b911      	cbnz	r1, 8005b66 <sbrk_aligned+0x12>
 8005b60:	f000 ff40 	bl	80069e4 <_sbrk_r>
 8005b64:	6030      	str	r0, [r6, #0]
 8005b66:	4621      	mov	r1, r4
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f000 ff3b 	bl	80069e4 <_sbrk_r>
 8005b6e:	1c43      	adds	r3, r0, #1
 8005b70:	d00a      	beq.n	8005b88 <sbrk_aligned+0x34>
 8005b72:	1cc4      	adds	r4, r0, #3
 8005b74:	f024 0403 	bic.w	r4, r4, #3
 8005b78:	42a0      	cmp	r0, r4
 8005b7a:	d007      	beq.n	8005b8c <sbrk_aligned+0x38>
 8005b7c:	1a21      	subs	r1, r4, r0
 8005b7e:	4628      	mov	r0, r5
 8005b80:	f000 ff30 	bl	80069e4 <_sbrk_r>
 8005b84:	3001      	adds	r0, #1
 8005b86:	d101      	bne.n	8005b8c <sbrk_aligned+0x38>
 8005b88:	f04f 34ff 	mov.w	r4, #4294967295
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	bd70      	pop	{r4, r5, r6, pc}
 8005b90:	20000354 	.word	0x20000354

08005b94 <_malloc_r>:
 8005b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b98:	1ccd      	adds	r5, r1, #3
 8005b9a:	f025 0503 	bic.w	r5, r5, #3
 8005b9e:	3508      	adds	r5, #8
 8005ba0:	2d0c      	cmp	r5, #12
 8005ba2:	bf38      	it	cc
 8005ba4:	250c      	movcc	r5, #12
 8005ba6:	2d00      	cmp	r5, #0
 8005ba8:	4607      	mov	r7, r0
 8005baa:	db01      	blt.n	8005bb0 <_malloc_r+0x1c>
 8005bac:	42a9      	cmp	r1, r5
 8005bae:	d905      	bls.n	8005bbc <_malloc_r+0x28>
 8005bb0:	230c      	movs	r3, #12
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	2600      	movs	r6, #0
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c90 <_malloc_r+0xfc>
 8005bc0:	f000 f868 	bl	8005c94 <__malloc_lock>
 8005bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8005bc8:	461c      	mov	r4, r3
 8005bca:	bb5c      	cbnz	r4, 8005c24 <_malloc_r+0x90>
 8005bcc:	4629      	mov	r1, r5
 8005bce:	4638      	mov	r0, r7
 8005bd0:	f7ff ffc0 	bl	8005b54 <sbrk_aligned>
 8005bd4:	1c43      	adds	r3, r0, #1
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	d155      	bne.n	8005c86 <_malloc_r+0xf2>
 8005bda:	f8d8 4000 	ldr.w	r4, [r8]
 8005bde:	4626      	mov	r6, r4
 8005be0:	2e00      	cmp	r6, #0
 8005be2:	d145      	bne.n	8005c70 <_malloc_r+0xdc>
 8005be4:	2c00      	cmp	r4, #0
 8005be6:	d048      	beq.n	8005c7a <_malloc_r+0xe6>
 8005be8:	6823      	ldr	r3, [r4, #0]
 8005bea:	4631      	mov	r1, r6
 8005bec:	4638      	mov	r0, r7
 8005bee:	eb04 0903 	add.w	r9, r4, r3
 8005bf2:	f000 fef7 	bl	80069e4 <_sbrk_r>
 8005bf6:	4581      	cmp	r9, r0
 8005bf8:	d13f      	bne.n	8005c7a <_malloc_r+0xe6>
 8005bfa:	6821      	ldr	r1, [r4, #0]
 8005bfc:	1a6d      	subs	r5, r5, r1
 8005bfe:	4629      	mov	r1, r5
 8005c00:	4638      	mov	r0, r7
 8005c02:	f7ff ffa7 	bl	8005b54 <sbrk_aligned>
 8005c06:	3001      	adds	r0, #1
 8005c08:	d037      	beq.n	8005c7a <_malloc_r+0xe6>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	442b      	add	r3, r5
 8005c0e:	6023      	str	r3, [r4, #0]
 8005c10:	f8d8 3000 	ldr.w	r3, [r8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d038      	beq.n	8005c8a <_malloc_r+0xf6>
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	42a2      	cmp	r2, r4
 8005c1c:	d12b      	bne.n	8005c76 <_malloc_r+0xe2>
 8005c1e:	2200      	movs	r2, #0
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	e00f      	b.n	8005c44 <_malloc_r+0xb0>
 8005c24:	6822      	ldr	r2, [r4, #0]
 8005c26:	1b52      	subs	r2, r2, r5
 8005c28:	d41f      	bmi.n	8005c6a <_malloc_r+0xd6>
 8005c2a:	2a0b      	cmp	r2, #11
 8005c2c:	d917      	bls.n	8005c5e <_malloc_r+0xca>
 8005c2e:	1961      	adds	r1, r4, r5
 8005c30:	42a3      	cmp	r3, r4
 8005c32:	6025      	str	r5, [r4, #0]
 8005c34:	bf18      	it	ne
 8005c36:	6059      	strne	r1, [r3, #4]
 8005c38:	6863      	ldr	r3, [r4, #4]
 8005c3a:	bf08      	it	eq
 8005c3c:	f8c8 1000 	streq.w	r1, [r8]
 8005c40:	5162      	str	r2, [r4, r5]
 8005c42:	604b      	str	r3, [r1, #4]
 8005c44:	4638      	mov	r0, r7
 8005c46:	f104 060b 	add.w	r6, r4, #11
 8005c4a:	f000 f829 	bl	8005ca0 <__malloc_unlock>
 8005c4e:	f026 0607 	bic.w	r6, r6, #7
 8005c52:	1d23      	adds	r3, r4, #4
 8005c54:	1af2      	subs	r2, r6, r3
 8005c56:	d0ae      	beq.n	8005bb6 <_malloc_r+0x22>
 8005c58:	1b9b      	subs	r3, r3, r6
 8005c5a:	50a3      	str	r3, [r4, r2]
 8005c5c:	e7ab      	b.n	8005bb6 <_malloc_r+0x22>
 8005c5e:	42a3      	cmp	r3, r4
 8005c60:	6862      	ldr	r2, [r4, #4]
 8005c62:	d1dd      	bne.n	8005c20 <_malloc_r+0x8c>
 8005c64:	f8c8 2000 	str.w	r2, [r8]
 8005c68:	e7ec      	b.n	8005c44 <_malloc_r+0xb0>
 8005c6a:	4623      	mov	r3, r4
 8005c6c:	6864      	ldr	r4, [r4, #4]
 8005c6e:	e7ac      	b.n	8005bca <_malloc_r+0x36>
 8005c70:	4634      	mov	r4, r6
 8005c72:	6876      	ldr	r6, [r6, #4]
 8005c74:	e7b4      	b.n	8005be0 <_malloc_r+0x4c>
 8005c76:	4613      	mov	r3, r2
 8005c78:	e7cc      	b.n	8005c14 <_malloc_r+0x80>
 8005c7a:	230c      	movs	r3, #12
 8005c7c:	603b      	str	r3, [r7, #0]
 8005c7e:	4638      	mov	r0, r7
 8005c80:	f000 f80e 	bl	8005ca0 <__malloc_unlock>
 8005c84:	e797      	b.n	8005bb6 <_malloc_r+0x22>
 8005c86:	6025      	str	r5, [r4, #0]
 8005c88:	e7dc      	b.n	8005c44 <_malloc_r+0xb0>
 8005c8a:	605b      	str	r3, [r3, #4]
 8005c8c:	deff      	udf	#255	; 0xff
 8005c8e:	bf00      	nop
 8005c90:	20000350 	.word	0x20000350

08005c94 <__malloc_lock>:
 8005c94:	4801      	ldr	r0, [pc, #4]	; (8005c9c <__malloc_lock+0x8>)
 8005c96:	f000 bef2 	b.w	8006a7e <__retarget_lock_acquire_recursive>
 8005c9a:	bf00      	nop
 8005c9c:	20000498 	.word	0x20000498

08005ca0 <__malloc_unlock>:
 8005ca0:	4801      	ldr	r0, [pc, #4]	; (8005ca8 <__malloc_unlock+0x8>)
 8005ca2:	f000 beed 	b.w	8006a80 <__retarget_lock_release_recursive>
 8005ca6:	bf00      	nop
 8005ca8:	20000498 	.word	0x20000498

08005cac <__cvt>:
 8005cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb0:	ec55 4b10 	vmov	r4, r5, d0
 8005cb4:	2d00      	cmp	r5, #0
 8005cb6:	460e      	mov	r6, r1
 8005cb8:	4619      	mov	r1, r3
 8005cba:	462b      	mov	r3, r5
 8005cbc:	bfbb      	ittet	lt
 8005cbe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005cc2:	461d      	movlt	r5, r3
 8005cc4:	2300      	movge	r3, #0
 8005cc6:	232d      	movlt	r3, #45	; 0x2d
 8005cc8:	700b      	strb	r3, [r1, #0]
 8005cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ccc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005cd0:	4691      	mov	r9, r2
 8005cd2:	f023 0820 	bic.w	r8, r3, #32
 8005cd6:	bfbc      	itt	lt
 8005cd8:	4622      	movlt	r2, r4
 8005cda:	4614      	movlt	r4, r2
 8005cdc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ce0:	d005      	beq.n	8005cee <__cvt+0x42>
 8005ce2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005ce6:	d100      	bne.n	8005cea <__cvt+0x3e>
 8005ce8:	3601      	adds	r6, #1
 8005cea:	2102      	movs	r1, #2
 8005cec:	e000      	b.n	8005cf0 <__cvt+0x44>
 8005cee:	2103      	movs	r1, #3
 8005cf0:	ab03      	add	r3, sp, #12
 8005cf2:	9301      	str	r3, [sp, #4]
 8005cf4:	ab02      	add	r3, sp, #8
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	ec45 4b10 	vmov	d0, r4, r5
 8005cfc:	4653      	mov	r3, sl
 8005cfe:	4632      	mov	r2, r6
 8005d00:	f000 ff4a 	bl	8006b98 <_dtoa_r>
 8005d04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d08:	4607      	mov	r7, r0
 8005d0a:	d102      	bne.n	8005d12 <__cvt+0x66>
 8005d0c:	f019 0f01 	tst.w	r9, #1
 8005d10:	d022      	beq.n	8005d58 <__cvt+0xac>
 8005d12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d16:	eb07 0906 	add.w	r9, r7, r6
 8005d1a:	d110      	bne.n	8005d3e <__cvt+0x92>
 8005d1c:	783b      	ldrb	r3, [r7, #0]
 8005d1e:	2b30      	cmp	r3, #48	; 0x30
 8005d20:	d10a      	bne.n	8005d38 <__cvt+0x8c>
 8005d22:	2200      	movs	r2, #0
 8005d24:	2300      	movs	r3, #0
 8005d26:	4620      	mov	r0, r4
 8005d28:	4629      	mov	r1, r5
 8005d2a:	f7fa fecd 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d2e:	b918      	cbnz	r0, 8005d38 <__cvt+0x8c>
 8005d30:	f1c6 0601 	rsb	r6, r6, #1
 8005d34:	f8ca 6000 	str.w	r6, [sl]
 8005d38:	f8da 3000 	ldr.w	r3, [sl]
 8005d3c:	4499      	add	r9, r3
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2300      	movs	r3, #0
 8005d42:	4620      	mov	r0, r4
 8005d44:	4629      	mov	r1, r5
 8005d46:	f7fa febf 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d4a:	b108      	cbz	r0, 8005d50 <__cvt+0xa4>
 8005d4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d50:	2230      	movs	r2, #48	; 0x30
 8005d52:	9b03      	ldr	r3, [sp, #12]
 8005d54:	454b      	cmp	r3, r9
 8005d56:	d307      	bcc.n	8005d68 <__cvt+0xbc>
 8005d58:	9b03      	ldr	r3, [sp, #12]
 8005d5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d5c:	1bdb      	subs	r3, r3, r7
 8005d5e:	4638      	mov	r0, r7
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	b004      	add	sp, #16
 8005d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d68:	1c59      	adds	r1, r3, #1
 8005d6a:	9103      	str	r1, [sp, #12]
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	e7f0      	b.n	8005d52 <__cvt+0xa6>

08005d70 <__exponent>:
 8005d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d72:	4603      	mov	r3, r0
 8005d74:	2900      	cmp	r1, #0
 8005d76:	bfb8      	it	lt
 8005d78:	4249      	neglt	r1, r1
 8005d7a:	f803 2b02 	strb.w	r2, [r3], #2
 8005d7e:	bfb4      	ite	lt
 8005d80:	222d      	movlt	r2, #45	; 0x2d
 8005d82:	222b      	movge	r2, #43	; 0x2b
 8005d84:	2909      	cmp	r1, #9
 8005d86:	7042      	strb	r2, [r0, #1]
 8005d88:	dd2a      	ble.n	8005de0 <__exponent+0x70>
 8005d8a:	f10d 0207 	add.w	r2, sp, #7
 8005d8e:	4617      	mov	r7, r2
 8005d90:	260a      	movs	r6, #10
 8005d92:	4694      	mov	ip, r2
 8005d94:	fb91 f5f6 	sdiv	r5, r1, r6
 8005d98:	fb06 1415 	mls	r4, r6, r5, r1
 8005d9c:	3430      	adds	r4, #48	; 0x30
 8005d9e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005da2:	460c      	mov	r4, r1
 8005da4:	2c63      	cmp	r4, #99	; 0x63
 8005da6:	f102 32ff 	add.w	r2, r2, #4294967295
 8005daa:	4629      	mov	r1, r5
 8005dac:	dcf1      	bgt.n	8005d92 <__exponent+0x22>
 8005dae:	3130      	adds	r1, #48	; 0x30
 8005db0:	f1ac 0402 	sub.w	r4, ip, #2
 8005db4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005db8:	1c41      	adds	r1, r0, #1
 8005dba:	4622      	mov	r2, r4
 8005dbc:	42ba      	cmp	r2, r7
 8005dbe:	d30a      	bcc.n	8005dd6 <__exponent+0x66>
 8005dc0:	f10d 0209 	add.w	r2, sp, #9
 8005dc4:	eba2 020c 	sub.w	r2, r2, ip
 8005dc8:	42bc      	cmp	r4, r7
 8005dca:	bf88      	it	hi
 8005dcc:	2200      	movhi	r2, #0
 8005dce:	4413      	add	r3, r2
 8005dd0:	1a18      	subs	r0, r3, r0
 8005dd2:	b003      	add	sp, #12
 8005dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dd6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005dda:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005dde:	e7ed      	b.n	8005dbc <__exponent+0x4c>
 8005de0:	2330      	movs	r3, #48	; 0x30
 8005de2:	3130      	adds	r1, #48	; 0x30
 8005de4:	7083      	strb	r3, [r0, #2]
 8005de6:	70c1      	strb	r1, [r0, #3]
 8005de8:	1d03      	adds	r3, r0, #4
 8005dea:	e7f1      	b.n	8005dd0 <__exponent+0x60>

08005dec <_printf_float>:
 8005dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df0:	ed2d 8b02 	vpush	{d8}
 8005df4:	b08d      	sub	sp, #52	; 0x34
 8005df6:	460c      	mov	r4, r1
 8005df8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005dfc:	4616      	mov	r6, r2
 8005dfe:	461f      	mov	r7, r3
 8005e00:	4605      	mov	r5, r0
 8005e02:	f000 fdb7 	bl	8006974 <_localeconv_r>
 8005e06:	f8d0 a000 	ldr.w	sl, [r0]
 8005e0a:	4650      	mov	r0, sl
 8005e0c:	f7fa fa30 	bl	8000270 <strlen>
 8005e10:	2300      	movs	r3, #0
 8005e12:	930a      	str	r3, [sp, #40]	; 0x28
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	9305      	str	r3, [sp, #20]
 8005e18:	f8d8 3000 	ldr.w	r3, [r8]
 8005e1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e20:	3307      	adds	r3, #7
 8005e22:	f023 0307 	bic.w	r3, r3, #7
 8005e26:	f103 0208 	add.w	r2, r3, #8
 8005e2a:	f8c8 2000 	str.w	r2, [r8]
 8005e2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e36:	9307      	str	r3, [sp, #28]
 8005e38:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e3c:	ee08 0a10 	vmov	s16, r0
 8005e40:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005e44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e48:	4b9e      	ldr	r3, [pc, #632]	; (80060c4 <_printf_float+0x2d8>)
 8005e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4e:	f7fa fe6d 	bl	8000b2c <__aeabi_dcmpun>
 8005e52:	bb88      	cbnz	r0, 8005eb8 <_printf_float+0xcc>
 8005e54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e58:	4b9a      	ldr	r3, [pc, #616]	; (80060c4 <_printf_float+0x2d8>)
 8005e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5e:	f7fa fe47 	bl	8000af0 <__aeabi_dcmple>
 8005e62:	bb48      	cbnz	r0, 8005eb8 <_printf_float+0xcc>
 8005e64:	2200      	movs	r2, #0
 8005e66:	2300      	movs	r3, #0
 8005e68:	4640      	mov	r0, r8
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	f7fa fe36 	bl	8000adc <__aeabi_dcmplt>
 8005e70:	b110      	cbz	r0, 8005e78 <_printf_float+0x8c>
 8005e72:	232d      	movs	r3, #45	; 0x2d
 8005e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e78:	4a93      	ldr	r2, [pc, #588]	; (80060c8 <_printf_float+0x2dc>)
 8005e7a:	4b94      	ldr	r3, [pc, #592]	; (80060cc <_printf_float+0x2e0>)
 8005e7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005e80:	bf94      	ite	ls
 8005e82:	4690      	movls	r8, r2
 8005e84:	4698      	movhi	r8, r3
 8005e86:	2303      	movs	r3, #3
 8005e88:	6123      	str	r3, [r4, #16]
 8005e8a:	9b05      	ldr	r3, [sp, #20]
 8005e8c:	f023 0304 	bic.w	r3, r3, #4
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	f04f 0900 	mov.w	r9, #0
 8005e96:	9700      	str	r7, [sp, #0]
 8005e98:	4633      	mov	r3, r6
 8005e9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f000 f9da 	bl	8006258 <_printf_common>
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	f040 8090 	bne.w	8005fca <_printf_float+0x1de>
 8005eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8005eae:	b00d      	add	sp, #52	; 0x34
 8005eb0:	ecbd 8b02 	vpop	{d8}
 8005eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb8:	4642      	mov	r2, r8
 8005eba:	464b      	mov	r3, r9
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	f7fa fe34 	bl	8000b2c <__aeabi_dcmpun>
 8005ec4:	b140      	cbz	r0, 8005ed8 <_printf_float+0xec>
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	bfbc      	itt	lt
 8005ecc:	232d      	movlt	r3, #45	; 0x2d
 8005ece:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ed2:	4a7f      	ldr	r2, [pc, #508]	; (80060d0 <_printf_float+0x2e4>)
 8005ed4:	4b7f      	ldr	r3, [pc, #508]	; (80060d4 <_printf_float+0x2e8>)
 8005ed6:	e7d1      	b.n	8005e7c <_printf_float+0x90>
 8005ed8:	6863      	ldr	r3, [r4, #4]
 8005eda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005ede:	9206      	str	r2, [sp, #24]
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	d13f      	bne.n	8005f64 <_printf_float+0x178>
 8005ee4:	2306      	movs	r3, #6
 8005ee6:	6063      	str	r3, [r4, #4]
 8005ee8:	9b05      	ldr	r3, [sp, #20]
 8005eea:	6861      	ldr	r1, [r4, #4]
 8005eec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	9303      	str	r3, [sp, #12]
 8005ef4:	ab0a      	add	r3, sp, #40	; 0x28
 8005ef6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005efa:	ab09      	add	r3, sp, #36	; 0x24
 8005efc:	ec49 8b10 	vmov	d0, r8, r9
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	6022      	str	r2, [r4, #0]
 8005f04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f08:	4628      	mov	r0, r5
 8005f0a:	f7ff fecf 	bl	8005cac <__cvt>
 8005f0e:	9b06      	ldr	r3, [sp, #24]
 8005f10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f12:	2b47      	cmp	r3, #71	; 0x47
 8005f14:	4680      	mov	r8, r0
 8005f16:	d108      	bne.n	8005f2a <_printf_float+0x13e>
 8005f18:	1cc8      	adds	r0, r1, #3
 8005f1a:	db02      	blt.n	8005f22 <_printf_float+0x136>
 8005f1c:	6863      	ldr	r3, [r4, #4]
 8005f1e:	4299      	cmp	r1, r3
 8005f20:	dd41      	ble.n	8005fa6 <_printf_float+0x1ba>
 8005f22:	f1ab 0302 	sub.w	r3, fp, #2
 8005f26:	fa5f fb83 	uxtb.w	fp, r3
 8005f2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f2e:	d820      	bhi.n	8005f72 <_printf_float+0x186>
 8005f30:	3901      	subs	r1, #1
 8005f32:	465a      	mov	r2, fp
 8005f34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f38:	9109      	str	r1, [sp, #36]	; 0x24
 8005f3a:	f7ff ff19 	bl	8005d70 <__exponent>
 8005f3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f40:	1813      	adds	r3, r2, r0
 8005f42:	2a01      	cmp	r2, #1
 8005f44:	4681      	mov	r9, r0
 8005f46:	6123      	str	r3, [r4, #16]
 8005f48:	dc02      	bgt.n	8005f50 <_printf_float+0x164>
 8005f4a:	6822      	ldr	r2, [r4, #0]
 8005f4c:	07d2      	lsls	r2, r2, #31
 8005f4e:	d501      	bpl.n	8005f54 <_printf_float+0x168>
 8005f50:	3301      	adds	r3, #1
 8005f52:	6123      	str	r3, [r4, #16]
 8005f54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d09c      	beq.n	8005e96 <_printf_float+0xaa>
 8005f5c:	232d      	movs	r3, #45	; 0x2d
 8005f5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f62:	e798      	b.n	8005e96 <_printf_float+0xaa>
 8005f64:	9a06      	ldr	r2, [sp, #24]
 8005f66:	2a47      	cmp	r2, #71	; 0x47
 8005f68:	d1be      	bne.n	8005ee8 <_printf_float+0xfc>
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1bc      	bne.n	8005ee8 <_printf_float+0xfc>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e7b9      	b.n	8005ee6 <_printf_float+0xfa>
 8005f72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005f76:	d118      	bne.n	8005faa <_printf_float+0x1be>
 8005f78:	2900      	cmp	r1, #0
 8005f7a:	6863      	ldr	r3, [r4, #4]
 8005f7c:	dd0b      	ble.n	8005f96 <_printf_float+0x1aa>
 8005f7e:	6121      	str	r1, [r4, #16]
 8005f80:	b913      	cbnz	r3, 8005f88 <_printf_float+0x19c>
 8005f82:	6822      	ldr	r2, [r4, #0]
 8005f84:	07d0      	lsls	r0, r2, #31
 8005f86:	d502      	bpl.n	8005f8e <_printf_float+0x1a2>
 8005f88:	3301      	adds	r3, #1
 8005f8a:	440b      	add	r3, r1
 8005f8c:	6123      	str	r3, [r4, #16]
 8005f8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f90:	f04f 0900 	mov.w	r9, #0
 8005f94:	e7de      	b.n	8005f54 <_printf_float+0x168>
 8005f96:	b913      	cbnz	r3, 8005f9e <_printf_float+0x1b2>
 8005f98:	6822      	ldr	r2, [r4, #0]
 8005f9a:	07d2      	lsls	r2, r2, #31
 8005f9c:	d501      	bpl.n	8005fa2 <_printf_float+0x1b6>
 8005f9e:	3302      	adds	r3, #2
 8005fa0:	e7f4      	b.n	8005f8c <_printf_float+0x1a0>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e7f2      	b.n	8005f8c <_printf_float+0x1a0>
 8005fa6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fac:	4299      	cmp	r1, r3
 8005fae:	db05      	blt.n	8005fbc <_printf_float+0x1d0>
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	6121      	str	r1, [r4, #16]
 8005fb4:	07d8      	lsls	r0, r3, #31
 8005fb6:	d5ea      	bpl.n	8005f8e <_printf_float+0x1a2>
 8005fb8:	1c4b      	adds	r3, r1, #1
 8005fba:	e7e7      	b.n	8005f8c <_printf_float+0x1a0>
 8005fbc:	2900      	cmp	r1, #0
 8005fbe:	bfd4      	ite	le
 8005fc0:	f1c1 0202 	rsble	r2, r1, #2
 8005fc4:	2201      	movgt	r2, #1
 8005fc6:	4413      	add	r3, r2
 8005fc8:	e7e0      	b.n	8005f8c <_printf_float+0x1a0>
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	055a      	lsls	r2, r3, #21
 8005fce:	d407      	bmi.n	8005fe0 <_printf_float+0x1f4>
 8005fd0:	6923      	ldr	r3, [r4, #16]
 8005fd2:	4642      	mov	r2, r8
 8005fd4:	4631      	mov	r1, r6
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	47b8      	blx	r7
 8005fda:	3001      	adds	r0, #1
 8005fdc:	d12c      	bne.n	8006038 <_printf_float+0x24c>
 8005fde:	e764      	b.n	8005eaa <_printf_float+0xbe>
 8005fe0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fe4:	f240 80e0 	bls.w	80061a8 <_printf_float+0x3bc>
 8005fe8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fec:	2200      	movs	r2, #0
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f7fa fd6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d034      	beq.n	8006062 <_printf_float+0x276>
 8005ff8:	4a37      	ldr	r2, [pc, #220]	; (80060d8 <_printf_float+0x2ec>)
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	4628      	mov	r0, r5
 8006000:	47b8      	blx	r7
 8006002:	3001      	adds	r0, #1
 8006004:	f43f af51 	beq.w	8005eaa <_printf_float+0xbe>
 8006008:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800600c:	429a      	cmp	r2, r3
 800600e:	db02      	blt.n	8006016 <_printf_float+0x22a>
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	07d8      	lsls	r0, r3, #31
 8006014:	d510      	bpl.n	8006038 <_printf_float+0x24c>
 8006016:	ee18 3a10 	vmov	r3, s16
 800601a:	4652      	mov	r2, sl
 800601c:	4631      	mov	r1, r6
 800601e:	4628      	mov	r0, r5
 8006020:	47b8      	blx	r7
 8006022:	3001      	adds	r0, #1
 8006024:	f43f af41 	beq.w	8005eaa <_printf_float+0xbe>
 8006028:	f04f 0800 	mov.w	r8, #0
 800602c:	f104 091a 	add.w	r9, r4, #26
 8006030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006032:	3b01      	subs	r3, #1
 8006034:	4543      	cmp	r3, r8
 8006036:	dc09      	bgt.n	800604c <_printf_float+0x260>
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	079b      	lsls	r3, r3, #30
 800603c:	f100 8107 	bmi.w	800624e <_printf_float+0x462>
 8006040:	68e0      	ldr	r0, [r4, #12]
 8006042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006044:	4298      	cmp	r0, r3
 8006046:	bfb8      	it	lt
 8006048:	4618      	movlt	r0, r3
 800604a:	e730      	b.n	8005eae <_printf_float+0xc2>
 800604c:	2301      	movs	r3, #1
 800604e:	464a      	mov	r2, r9
 8006050:	4631      	mov	r1, r6
 8006052:	4628      	mov	r0, r5
 8006054:	47b8      	blx	r7
 8006056:	3001      	adds	r0, #1
 8006058:	f43f af27 	beq.w	8005eaa <_printf_float+0xbe>
 800605c:	f108 0801 	add.w	r8, r8, #1
 8006060:	e7e6      	b.n	8006030 <_printf_float+0x244>
 8006062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006064:	2b00      	cmp	r3, #0
 8006066:	dc39      	bgt.n	80060dc <_printf_float+0x2f0>
 8006068:	4a1b      	ldr	r2, [pc, #108]	; (80060d8 <_printf_float+0x2ec>)
 800606a:	2301      	movs	r3, #1
 800606c:	4631      	mov	r1, r6
 800606e:	4628      	mov	r0, r5
 8006070:	47b8      	blx	r7
 8006072:	3001      	adds	r0, #1
 8006074:	f43f af19 	beq.w	8005eaa <_printf_float+0xbe>
 8006078:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800607c:	4313      	orrs	r3, r2
 800607e:	d102      	bne.n	8006086 <_printf_float+0x29a>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	07d9      	lsls	r1, r3, #31
 8006084:	d5d8      	bpl.n	8006038 <_printf_float+0x24c>
 8006086:	ee18 3a10 	vmov	r3, s16
 800608a:	4652      	mov	r2, sl
 800608c:	4631      	mov	r1, r6
 800608e:	4628      	mov	r0, r5
 8006090:	47b8      	blx	r7
 8006092:	3001      	adds	r0, #1
 8006094:	f43f af09 	beq.w	8005eaa <_printf_float+0xbe>
 8006098:	f04f 0900 	mov.w	r9, #0
 800609c:	f104 0a1a 	add.w	sl, r4, #26
 80060a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a2:	425b      	negs	r3, r3
 80060a4:	454b      	cmp	r3, r9
 80060a6:	dc01      	bgt.n	80060ac <_printf_float+0x2c0>
 80060a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060aa:	e792      	b.n	8005fd2 <_printf_float+0x1e6>
 80060ac:	2301      	movs	r3, #1
 80060ae:	4652      	mov	r2, sl
 80060b0:	4631      	mov	r1, r6
 80060b2:	4628      	mov	r0, r5
 80060b4:	47b8      	blx	r7
 80060b6:	3001      	adds	r0, #1
 80060b8:	f43f aef7 	beq.w	8005eaa <_printf_float+0xbe>
 80060bc:	f109 0901 	add.w	r9, r9, #1
 80060c0:	e7ee      	b.n	80060a0 <_printf_float+0x2b4>
 80060c2:	bf00      	nop
 80060c4:	7fefffff 	.word	0x7fefffff
 80060c8:	08008618 	.word	0x08008618
 80060cc:	0800861c 	.word	0x0800861c
 80060d0:	08008620 	.word	0x08008620
 80060d4:	08008624 	.word	0x08008624
 80060d8:	08008628 	.word	0x08008628
 80060dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060e0:	429a      	cmp	r2, r3
 80060e2:	bfa8      	it	ge
 80060e4:	461a      	movge	r2, r3
 80060e6:	2a00      	cmp	r2, #0
 80060e8:	4691      	mov	r9, r2
 80060ea:	dc37      	bgt.n	800615c <_printf_float+0x370>
 80060ec:	f04f 0b00 	mov.w	fp, #0
 80060f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060f4:	f104 021a 	add.w	r2, r4, #26
 80060f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060fa:	9305      	str	r3, [sp, #20]
 80060fc:	eba3 0309 	sub.w	r3, r3, r9
 8006100:	455b      	cmp	r3, fp
 8006102:	dc33      	bgt.n	800616c <_printf_float+0x380>
 8006104:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006108:	429a      	cmp	r2, r3
 800610a:	db3b      	blt.n	8006184 <_printf_float+0x398>
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	07da      	lsls	r2, r3, #31
 8006110:	d438      	bmi.n	8006184 <_printf_float+0x398>
 8006112:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006116:	eba2 0903 	sub.w	r9, r2, r3
 800611a:	9b05      	ldr	r3, [sp, #20]
 800611c:	1ad2      	subs	r2, r2, r3
 800611e:	4591      	cmp	r9, r2
 8006120:	bfa8      	it	ge
 8006122:	4691      	movge	r9, r2
 8006124:	f1b9 0f00 	cmp.w	r9, #0
 8006128:	dc35      	bgt.n	8006196 <_printf_float+0x3aa>
 800612a:	f04f 0800 	mov.w	r8, #0
 800612e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006132:	f104 0a1a 	add.w	sl, r4, #26
 8006136:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800613a:	1a9b      	subs	r3, r3, r2
 800613c:	eba3 0309 	sub.w	r3, r3, r9
 8006140:	4543      	cmp	r3, r8
 8006142:	f77f af79 	ble.w	8006038 <_printf_float+0x24c>
 8006146:	2301      	movs	r3, #1
 8006148:	4652      	mov	r2, sl
 800614a:	4631      	mov	r1, r6
 800614c:	4628      	mov	r0, r5
 800614e:	47b8      	blx	r7
 8006150:	3001      	adds	r0, #1
 8006152:	f43f aeaa 	beq.w	8005eaa <_printf_float+0xbe>
 8006156:	f108 0801 	add.w	r8, r8, #1
 800615a:	e7ec      	b.n	8006136 <_printf_float+0x34a>
 800615c:	4613      	mov	r3, r2
 800615e:	4631      	mov	r1, r6
 8006160:	4642      	mov	r2, r8
 8006162:	4628      	mov	r0, r5
 8006164:	47b8      	blx	r7
 8006166:	3001      	adds	r0, #1
 8006168:	d1c0      	bne.n	80060ec <_printf_float+0x300>
 800616a:	e69e      	b.n	8005eaa <_printf_float+0xbe>
 800616c:	2301      	movs	r3, #1
 800616e:	4631      	mov	r1, r6
 8006170:	4628      	mov	r0, r5
 8006172:	9205      	str	r2, [sp, #20]
 8006174:	47b8      	blx	r7
 8006176:	3001      	adds	r0, #1
 8006178:	f43f ae97 	beq.w	8005eaa <_printf_float+0xbe>
 800617c:	9a05      	ldr	r2, [sp, #20]
 800617e:	f10b 0b01 	add.w	fp, fp, #1
 8006182:	e7b9      	b.n	80060f8 <_printf_float+0x30c>
 8006184:	ee18 3a10 	vmov	r3, s16
 8006188:	4652      	mov	r2, sl
 800618a:	4631      	mov	r1, r6
 800618c:	4628      	mov	r0, r5
 800618e:	47b8      	blx	r7
 8006190:	3001      	adds	r0, #1
 8006192:	d1be      	bne.n	8006112 <_printf_float+0x326>
 8006194:	e689      	b.n	8005eaa <_printf_float+0xbe>
 8006196:	9a05      	ldr	r2, [sp, #20]
 8006198:	464b      	mov	r3, r9
 800619a:	4442      	add	r2, r8
 800619c:	4631      	mov	r1, r6
 800619e:	4628      	mov	r0, r5
 80061a0:	47b8      	blx	r7
 80061a2:	3001      	adds	r0, #1
 80061a4:	d1c1      	bne.n	800612a <_printf_float+0x33e>
 80061a6:	e680      	b.n	8005eaa <_printf_float+0xbe>
 80061a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061aa:	2a01      	cmp	r2, #1
 80061ac:	dc01      	bgt.n	80061b2 <_printf_float+0x3c6>
 80061ae:	07db      	lsls	r3, r3, #31
 80061b0:	d53a      	bpl.n	8006228 <_printf_float+0x43c>
 80061b2:	2301      	movs	r3, #1
 80061b4:	4642      	mov	r2, r8
 80061b6:	4631      	mov	r1, r6
 80061b8:	4628      	mov	r0, r5
 80061ba:	47b8      	blx	r7
 80061bc:	3001      	adds	r0, #1
 80061be:	f43f ae74 	beq.w	8005eaa <_printf_float+0xbe>
 80061c2:	ee18 3a10 	vmov	r3, s16
 80061c6:	4652      	mov	r2, sl
 80061c8:	4631      	mov	r1, r6
 80061ca:	4628      	mov	r0, r5
 80061cc:	47b8      	blx	r7
 80061ce:	3001      	adds	r0, #1
 80061d0:	f43f ae6b 	beq.w	8005eaa <_printf_float+0xbe>
 80061d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061d8:	2200      	movs	r2, #0
 80061da:	2300      	movs	r3, #0
 80061dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80061e0:	f7fa fc72 	bl	8000ac8 <__aeabi_dcmpeq>
 80061e4:	b9d8      	cbnz	r0, 800621e <_printf_float+0x432>
 80061e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80061ea:	f108 0201 	add.w	r2, r8, #1
 80061ee:	4631      	mov	r1, r6
 80061f0:	4628      	mov	r0, r5
 80061f2:	47b8      	blx	r7
 80061f4:	3001      	adds	r0, #1
 80061f6:	d10e      	bne.n	8006216 <_printf_float+0x42a>
 80061f8:	e657      	b.n	8005eaa <_printf_float+0xbe>
 80061fa:	2301      	movs	r3, #1
 80061fc:	4652      	mov	r2, sl
 80061fe:	4631      	mov	r1, r6
 8006200:	4628      	mov	r0, r5
 8006202:	47b8      	blx	r7
 8006204:	3001      	adds	r0, #1
 8006206:	f43f ae50 	beq.w	8005eaa <_printf_float+0xbe>
 800620a:	f108 0801 	add.w	r8, r8, #1
 800620e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006210:	3b01      	subs	r3, #1
 8006212:	4543      	cmp	r3, r8
 8006214:	dcf1      	bgt.n	80061fa <_printf_float+0x40e>
 8006216:	464b      	mov	r3, r9
 8006218:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800621c:	e6da      	b.n	8005fd4 <_printf_float+0x1e8>
 800621e:	f04f 0800 	mov.w	r8, #0
 8006222:	f104 0a1a 	add.w	sl, r4, #26
 8006226:	e7f2      	b.n	800620e <_printf_float+0x422>
 8006228:	2301      	movs	r3, #1
 800622a:	4642      	mov	r2, r8
 800622c:	e7df      	b.n	80061ee <_printf_float+0x402>
 800622e:	2301      	movs	r3, #1
 8006230:	464a      	mov	r2, r9
 8006232:	4631      	mov	r1, r6
 8006234:	4628      	mov	r0, r5
 8006236:	47b8      	blx	r7
 8006238:	3001      	adds	r0, #1
 800623a:	f43f ae36 	beq.w	8005eaa <_printf_float+0xbe>
 800623e:	f108 0801 	add.w	r8, r8, #1
 8006242:	68e3      	ldr	r3, [r4, #12]
 8006244:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006246:	1a5b      	subs	r3, r3, r1
 8006248:	4543      	cmp	r3, r8
 800624a:	dcf0      	bgt.n	800622e <_printf_float+0x442>
 800624c:	e6f8      	b.n	8006040 <_printf_float+0x254>
 800624e:	f04f 0800 	mov.w	r8, #0
 8006252:	f104 0919 	add.w	r9, r4, #25
 8006256:	e7f4      	b.n	8006242 <_printf_float+0x456>

08006258 <_printf_common>:
 8006258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800625c:	4616      	mov	r6, r2
 800625e:	4699      	mov	r9, r3
 8006260:	688a      	ldr	r2, [r1, #8]
 8006262:	690b      	ldr	r3, [r1, #16]
 8006264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006268:	4293      	cmp	r3, r2
 800626a:	bfb8      	it	lt
 800626c:	4613      	movlt	r3, r2
 800626e:	6033      	str	r3, [r6, #0]
 8006270:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006274:	4607      	mov	r7, r0
 8006276:	460c      	mov	r4, r1
 8006278:	b10a      	cbz	r2, 800627e <_printf_common+0x26>
 800627a:	3301      	adds	r3, #1
 800627c:	6033      	str	r3, [r6, #0]
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	0699      	lsls	r1, r3, #26
 8006282:	bf42      	ittt	mi
 8006284:	6833      	ldrmi	r3, [r6, #0]
 8006286:	3302      	addmi	r3, #2
 8006288:	6033      	strmi	r3, [r6, #0]
 800628a:	6825      	ldr	r5, [r4, #0]
 800628c:	f015 0506 	ands.w	r5, r5, #6
 8006290:	d106      	bne.n	80062a0 <_printf_common+0x48>
 8006292:	f104 0a19 	add.w	sl, r4, #25
 8006296:	68e3      	ldr	r3, [r4, #12]
 8006298:	6832      	ldr	r2, [r6, #0]
 800629a:	1a9b      	subs	r3, r3, r2
 800629c:	42ab      	cmp	r3, r5
 800629e:	dc26      	bgt.n	80062ee <_printf_common+0x96>
 80062a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062a4:	1e13      	subs	r3, r2, #0
 80062a6:	6822      	ldr	r2, [r4, #0]
 80062a8:	bf18      	it	ne
 80062aa:	2301      	movne	r3, #1
 80062ac:	0692      	lsls	r2, r2, #26
 80062ae:	d42b      	bmi.n	8006308 <_printf_common+0xb0>
 80062b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062b4:	4649      	mov	r1, r9
 80062b6:	4638      	mov	r0, r7
 80062b8:	47c0      	blx	r8
 80062ba:	3001      	adds	r0, #1
 80062bc:	d01e      	beq.n	80062fc <_printf_common+0xa4>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	6922      	ldr	r2, [r4, #16]
 80062c2:	f003 0306 	and.w	r3, r3, #6
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	bf02      	ittt	eq
 80062ca:	68e5      	ldreq	r5, [r4, #12]
 80062cc:	6833      	ldreq	r3, [r6, #0]
 80062ce:	1aed      	subeq	r5, r5, r3
 80062d0:	68a3      	ldr	r3, [r4, #8]
 80062d2:	bf0c      	ite	eq
 80062d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062d8:	2500      	movne	r5, #0
 80062da:	4293      	cmp	r3, r2
 80062dc:	bfc4      	itt	gt
 80062de:	1a9b      	subgt	r3, r3, r2
 80062e0:	18ed      	addgt	r5, r5, r3
 80062e2:	2600      	movs	r6, #0
 80062e4:	341a      	adds	r4, #26
 80062e6:	42b5      	cmp	r5, r6
 80062e8:	d11a      	bne.n	8006320 <_printf_common+0xc8>
 80062ea:	2000      	movs	r0, #0
 80062ec:	e008      	b.n	8006300 <_printf_common+0xa8>
 80062ee:	2301      	movs	r3, #1
 80062f0:	4652      	mov	r2, sl
 80062f2:	4649      	mov	r1, r9
 80062f4:	4638      	mov	r0, r7
 80062f6:	47c0      	blx	r8
 80062f8:	3001      	adds	r0, #1
 80062fa:	d103      	bne.n	8006304 <_printf_common+0xac>
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006304:	3501      	adds	r5, #1
 8006306:	e7c6      	b.n	8006296 <_printf_common+0x3e>
 8006308:	18e1      	adds	r1, r4, r3
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	2030      	movs	r0, #48	; 0x30
 800630e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006312:	4422      	add	r2, r4
 8006314:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006318:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800631c:	3302      	adds	r3, #2
 800631e:	e7c7      	b.n	80062b0 <_printf_common+0x58>
 8006320:	2301      	movs	r3, #1
 8006322:	4622      	mov	r2, r4
 8006324:	4649      	mov	r1, r9
 8006326:	4638      	mov	r0, r7
 8006328:	47c0      	blx	r8
 800632a:	3001      	adds	r0, #1
 800632c:	d0e6      	beq.n	80062fc <_printf_common+0xa4>
 800632e:	3601      	adds	r6, #1
 8006330:	e7d9      	b.n	80062e6 <_printf_common+0x8e>
	...

08006334 <_printf_i>:
 8006334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006338:	7e0f      	ldrb	r7, [r1, #24]
 800633a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800633c:	2f78      	cmp	r7, #120	; 0x78
 800633e:	4691      	mov	r9, r2
 8006340:	4680      	mov	r8, r0
 8006342:	460c      	mov	r4, r1
 8006344:	469a      	mov	sl, r3
 8006346:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800634a:	d807      	bhi.n	800635c <_printf_i+0x28>
 800634c:	2f62      	cmp	r7, #98	; 0x62
 800634e:	d80a      	bhi.n	8006366 <_printf_i+0x32>
 8006350:	2f00      	cmp	r7, #0
 8006352:	f000 80d4 	beq.w	80064fe <_printf_i+0x1ca>
 8006356:	2f58      	cmp	r7, #88	; 0x58
 8006358:	f000 80c0 	beq.w	80064dc <_printf_i+0x1a8>
 800635c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006360:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006364:	e03a      	b.n	80063dc <_printf_i+0xa8>
 8006366:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800636a:	2b15      	cmp	r3, #21
 800636c:	d8f6      	bhi.n	800635c <_printf_i+0x28>
 800636e:	a101      	add	r1, pc, #4	; (adr r1, 8006374 <_printf_i+0x40>)
 8006370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006374:	080063cd 	.word	0x080063cd
 8006378:	080063e1 	.word	0x080063e1
 800637c:	0800635d 	.word	0x0800635d
 8006380:	0800635d 	.word	0x0800635d
 8006384:	0800635d 	.word	0x0800635d
 8006388:	0800635d 	.word	0x0800635d
 800638c:	080063e1 	.word	0x080063e1
 8006390:	0800635d 	.word	0x0800635d
 8006394:	0800635d 	.word	0x0800635d
 8006398:	0800635d 	.word	0x0800635d
 800639c:	0800635d 	.word	0x0800635d
 80063a0:	080064e5 	.word	0x080064e5
 80063a4:	0800640d 	.word	0x0800640d
 80063a8:	0800649f 	.word	0x0800649f
 80063ac:	0800635d 	.word	0x0800635d
 80063b0:	0800635d 	.word	0x0800635d
 80063b4:	08006507 	.word	0x08006507
 80063b8:	0800635d 	.word	0x0800635d
 80063bc:	0800640d 	.word	0x0800640d
 80063c0:	0800635d 	.word	0x0800635d
 80063c4:	0800635d 	.word	0x0800635d
 80063c8:	080064a7 	.word	0x080064a7
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	1d1a      	adds	r2, r3, #4
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	602a      	str	r2, [r5, #0]
 80063d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063dc:	2301      	movs	r3, #1
 80063de:	e09f      	b.n	8006520 <_printf_i+0x1ec>
 80063e0:	6820      	ldr	r0, [r4, #0]
 80063e2:	682b      	ldr	r3, [r5, #0]
 80063e4:	0607      	lsls	r7, r0, #24
 80063e6:	f103 0104 	add.w	r1, r3, #4
 80063ea:	6029      	str	r1, [r5, #0]
 80063ec:	d501      	bpl.n	80063f2 <_printf_i+0xbe>
 80063ee:	681e      	ldr	r6, [r3, #0]
 80063f0:	e003      	b.n	80063fa <_printf_i+0xc6>
 80063f2:	0646      	lsls	r6, r0, #25
 80063f4:	d5fb      	bpl.n	80063ee <_printf_i+0xba>
 80063f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80063fa:	2e00      	cmp	r6, #0
 80063fc:	da03      	bge.n	8006406 <_printf_i+0xd2>
 80063fe:	232d      	movs	r3, #45	; 0x2d
 8006400:	4276      	negs	r6, r6
 8006402:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006406:	485a      	ldr	r0, [pc, #360]	; (8006570 <_printf_i+0x23c>)
 8006408:	230a      	movs	r3, #10
 800640a:	e012      	b.n	8006432 <_printf_i+0xfe>
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	6820      	ldr	r0, [r4, #0]
 8006410:	1d19      	adds	r1, r3, #4
 8006412:	6029      	str	r1, [r5, #0]
 8006414:	0605      	lsls	r5, r0, #24
 8006416:	d501      	bpl.n	800641c <_printf_i+0xe8>
 8006418:	681e      	ldr	r6, [r3, #0]
 800641a:	e002      	b.n	8006422 <_printf_i+0xee>
 800641c:	0641      	lsls	r1, r0, #25
 800641e:	d5fb      	bpl.n	8006418 <_printf_i+0xe4>
 8006420:	881e      	ldrh	r6, [r3, #0]
 8006422:	4853      	ldr	r0, [pc, #332]	; (8006570 <_printf_i+0x23c>)
 8006424:	2f6f      	cmp	r7, #111	; 0x6f
 8006426:	bf0c      	ite	eq
 8006428:	2308      	moveq	r3, #8
 800642a:	230a      	movne	r3, #10
 800642c:	2100      	movs	r1, #0
 800642e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006432:	6865      	ldr	r5, [r4, #4]
 8006434:	60a5      	str	r5, [r4, #8]
 8006436:	2d00      	cmp	r5, #0
 8006438:	bfa2      	ittt	ge
 800643a:	6821      	ldrge	r1, [r4, #0]
 800643c:	f021 0104 	bicge.w	r1, r1, #4
 8006440:	6021      	strge	r1, [r4, #0]
 8006442:	b90e      	cbnz	r6, 8006448 <_printf_i+0x114>
 8006444:	2d00      	cmp	r5, #0
 8006446:	d04b      	beq.n	80064e0 <_printf_i+0x1ac>
 8006448:	4615      	mov	r5, r2
 800644a:	fbb6 f1f3 	udiv	r1, r6, r3
 800644e:	fb03 6711 	mls	r7, r3, r1, r6
 8006452:	5dc7      	ldrb	r7, [r0, r7]
 8006454:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006458:	4637      	mov	r7, r6
 800645a:	42bb      	cmp	r3, r7
 800645c:	460e      	mov	r6, r1
 800645e:	d9f4      	bls.n	800644a <_printf_i+0x116>
 8006460:	2b08      	cmp	r3, #8
 8006462:	d10b      	bne.n	800647c <_printf_i+0x148>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	07de      	lsls	r6, r3, #31
 8006468:	d508      	bpl.n	800647c <_printf_i+0x148>
 800646a:	6923      	ldr	r3, [r4, #16]
 800646c:	6861      	ldr	r1, [r4, #4]
 800646e:	4299      	cmp	r1, r3
 8006470:	bfde      	ittt	le
 8006472:	2330      	movle	r3, #48	; 0x30
 8006474:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006478:	f105 35ff 	addle.w	r5, r5, #4294967295
 800647c:	1b52      	subs	r2, r2, r5
 800647e:	6122      	str	r2, [r4, #16]
 8006480:	f8cd a000 	str.w	sl, [sp]
 8006484:	464b      	mov	r3, r9
 8006486:	aa03      	add	r2, sp, #12
 8006488:	4621      	mov	r1, r4
 800648a:	4640      	mov	r0, r8
 800648c:	f7ff fee4 	bl	8006258 <_printf_common>
 8006490:	3001      	adds	r0, #1
 8006492:	d14a      	bne.n	800652a <_printf_i+0x1f6>
 8006494:	f04f 30ff 	mov.w	r0, #4294967295
 8006498:	b004      	add	sp, #16
 800649a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	f043 0320 	orr.w	r3, r3, #32
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	4833      	ldr	r0, [pc, #204]	; (8006574 <_printf_i+0x240>)
 80064a8:	2778      	movs	r7, #120	; 0x78
 80064aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	6829      	ldr	r1, [r5, #0]
 80064b2:	061f      	lsls	r7, r3, #24
 80064b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80064b8:	d402      	bmi.n	80064c0 <_printf_i+0x18c>
 80064ba:	065f      	lsls	r7, r3, #25
 80064bc:	bf48      	it	mi
 80064be:	b2b6      	uxthmi	r6, r6
 80064c0:	07df      	lsls	r7, r3, #31
 80064c2:	bf48      	it	mi
 80064c4:	f043 0320 	orrmi.w	r3, r3, #32
 80064c8:	6029      	str	r1, [r5, #0]
 80064ca:	bf48      	it	mi
 80064cc:	6023      	strmi	r3, [r4, #0]
 80064ce:	b91e      	cbnz	r6, 80064d8 <_printf_i+0x1a4>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	f023 0320 	bic.w	r3, r3, #32
 80064d6:	6023      	str	r3, [r4, #0]
 80064d8:	2310      	movs	r3, #16
 80064da:	e7a7      	b.n	800642c <_printf_i+0xf8>
 80064dc:	4824      	ldr	r0, [pc, #144]	; (8006570 <_printf_i+0x23c>)
 80064de:	e7e4      	b.n	80064aa <_printf_i+0x176>
 80064e0:	4615      	mov	r5, r2
 80064e2:	e7bd      	b.n	8006460 <_printf_i+0x12c>
 80064e4:	682b      	ldr	r3, [r5, #0]
 80064e6:	6826      	ldr	r6, [r4, #0]
 80064e8:	6961      	ldr	r1, [r4, #20]
 80064ea:	1d18      	adds	r0, r3, #4
 80064ec:	6028      	str	r0, [r5, #0]
 80064ee:	0635      	lsls	r5, r6, #24
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	d501      	bpl.n	80064f8 <_printf_i+0x1c4>
 80064f4:	6019      	str	r1, [r3, #0]
 80064f6:	e002      	b.n	80064fe <_printf_i+0x1ca>
 80064f8:	0670      	lsls	r0, r6, #25
 80064fa:	d5fb      	bpl.n	80064f4 <_printf_i+0x1c0>
 80064fc:	8019      	strh	r1, [r3, #0]
 80064fe:	2300      	movs	r3, #0
 8006500:	6123      	str	r3, [r4, #16]
 8006502:	4615      	mov	r5, r2
 8006504:	e7bc      	b.n	8006480 <_printf_i+0x14c>
 8006506:	682b      	ldr	r3, [r5, #0]
 8006508:	1d1a      	adds	r2, r3, #4
 800650a:	602a      	str	r2, [r5, #0]
 800650c:	681d      	ldr	r5, [r3, #0]
 800650e:	6862      	ldr	r2, [r4, #4]
 8006510:	2100      	movs	r1, #0
 8006512:	4628      	mov	r0, r5
 8006514:	f7f9 fe5c 	bl	80001d0 <memchr>
 8006518:	b108      	cbz	r0, 800651e <_printf_i+0x1ea>
 800651a:	1b40      	subs	r0, r0, r5
 800651c:	6060      	str	r0, [r4, #4]
 800651e:	6863      	ldr	r3, [r4, #4]
 8006520:	6123      	str	r3, [r4, #16]
 8006522:	2300      	movs	r3, #0
 8006524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006528:	e7aa      	b.n	8006480 <_printf_i+0x14c>
 800652a:	6923      	ldr	r3, [r4, #16]
 800652c:	462a      	mov	r2, r5
 800652e:	4649      	mov	r1, r9
 8006530:	4640      	mov	r0, r8
 8006532:	47d0      	blx	sl
 8006534:	3001      	adds	r0, #1
 8006536:	d0ad      	beq.n	8006494 <_printf_i+0x160>
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	079b      	lsls	r3, r3, #30
 800653c:	d413      	bmi.n	8006566 <_printf_i+0x232>
 800653e:	68e0      	ldr	r0, [r4, #12]
 8006540:	9b03      	ldr	r3, [sp, #12]
 8006542:	4298      	cmp	r0, r3
 8006544:	bfb8      	it	lt
 8006546:	4618      	movlt	r0, r3
 8006548:	e7a6      	b.n	8006498 <_printf_i+0x164>
 800654a:	2301      	movs	r3, #1
 800654c:	4632      	mov	r2, r6
 800654e:	4649      	mov	r1, r9
 8006550:	4640      	mov	r0, r8
 8006552:	47d0      	blx	sl
 8006554:	3001      	adds	r0, #1
 8006556:	d09d      	beq.n	8006494 <_printf_i+0x160>
 8006558:	3501      	adds	r5, #1
 800655a:	68e3      	ldr	r3, [r4, #12]
 800655c:	9903      	ldr	r1, [sp, #12]
 800655e:	1a5b      	subs	r3, r3, r1
 8006560:	42ab      	cmp	r3, r5
 8006562:	dcf2      	bgt.n	800654a <_printf_i+0x216>
 8006564:	e7eb      	b.n	800653e <_printf_i+0x20a>
 8006566:	2500      	movs	r5, #0
 8006568:	f104 0619 	add.w	r6, r4, #25
 800656c:	e7f5      	b.n	800655a <_printf_i+0x226>
 800656e:	bf00      	nop
 8006570:	0800862a 	.word	0x0800862a
 8006574:	0800863b 	.word	0x0800863b

08006578 <std>:
 8006578:	2300      	movs	r3, #0
 800657a:	b510      	push	{r4, lr}
 800657c:	4604      	mov	r4, r0
 800657e:	e9c0 3300 	strd	r3, r3, [r0]
 8006582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006586:	6083      	str	r3, [r0, #8]
 8006588:	8181      	strh	r1, [r0, #12]
 800658a:	6643      	str	r3, [r0, #100]	; 0x64
 800658c:	81c2      	strh	r2, [r0, #14]
 800658e:	6183      	str	r3, [r0, #24]
 8006590:	4619      	mov	r1, r3
 8006592:	2208      	movs	r2, #8
 8006594:	305c      	adds	r0, #92	; 0x5c
 8006596:	f000 f9e5 	bl	8006964 <memset>
 800659a:	4b0d      	ldr	r3, [pc, #52]	; (80065d0 <std+0x58>)
 800659c:	6263      	str	r3, [r4, #36]	; 0x24
 800659e:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <std+0x5c>)
 80065a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80065a2:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <std+0x60>)
 80065a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065a6:	4b0d      	ldr	r3, [pc, #52]	; (80065dc <std+0x64>)
 80065a8:	6323      	str	r3, [r4, #48]	; 0x30
 80065aa:	4b0d      	ldr	r3, [pc, #52]	; (80065e0 <std+0x68>)
 80065ac:	6224      	str	r4, [r4, #32]
 80065ae:	429c      	cmp	r4, r3
 80065b0:	d006      	beq.n	80065c0 <std+0x48>
 80065b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80065b6:	4294      	cmp	r4, r2
 80065b8:	d002      	beq.n	80065c0 <std+0x48>
 80065ba:	33d0      	adds	r3, #208	; 0xd0
 80065bc:	429c      	cmp	r4, r3
 80065be:	d105      	bne.n	80065cc <std+0x54>
 80065c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065c8:	f000 ba58 	b.w	8006a7c <__retarget_lock_init_recursive>
 80065cc:	bd10      	pop	{r4, pc}
 80065ce:	bf00      	nop
 80065d0:	080067b5 	.word	0x080067b5
 80065d4:	080067d7 	.word	0x080067d7
 80065d8:	0800680f 	.word	0x0800680f
 80065dc:	08006833 	.word	0x08006833
 80065e0:	20000358 	.word	0x20000358

080065e4 <stdio_exit_handler>:
 80065e4:	4a02      	ldr	r2, [pc, #8]	; (80065f0 <stdio_exit_handler+0xc>)
 80065e6:	4903      	ldr	r1, [pc, #12]	; (80065f4 <stdio_exit_handler+0x10>)
 80065e8:	4803      	ldr	r0, [pc, #12]	; (80065f8 <stdio_exit_handler+0x14>)
 80065ea:	f000 b869 	b.w	80066c0 <_fwalk_sglue>
 80065ee:	bf00      	nop
 80065f0:	2000000c 	.word	0x2000000c
 80065f4:	08008019 	.word	0x08008019
 80065f8:	20000018 	.word	0x20000018

080065fc <cleanup_stdio>:
 80065fc:	6841      	ldr	r1, [r0, #4]
 80065fe:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <cleanup_stdio+0x34>)
 8006600:	4299      	cmp	r1, r3
 8006602:	b510      	push	{r4, lr}
 8006604:	4604      	mov	r4, r0
 8006606:	d001      	beq.n	800660c <cleanup_stdio+0x10>
 8006608:	f001 fd06 	bl	8008018 <_fflush_r>
 800660c:	68a1      	ldr	r1, [r4, #8]
 800660e:	4b09      	ldr	r3, [pc, #36]	; (8006634 <cleanup_stdio+0x38>)
 8006610:	4299      	cmp	r1, r3
 8006612:	d002      	beq.n	800661a <cleanup_stdio+0x1e>
 8006614:	4620      	mov	r0, r4
 8006616:	f001 fcff 	bl	8008018 <_fflush_r>
 800661a:	68e1      	ldr	r1, [r4, #12]
 800661c:	4b06      	ldr	r3, [pc, #24]	; (8006638 <cleanup_stdio+0x3c>)
 800661e:	4299      	cmp	r1, r3
 8006620:	d004      	beq.n	800662c <cleanup_stdio+0x30>
 8006622:	4620      	mov	r0, r4
 8006624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006628:	f001 bcf6 	b.w	8008018 <_fflush_r>
 800662c:	bd10      	pop	{r4, pc}
 800662e:	bf00      	nop
 8006630:	20000358 	.word	0x20000358
 8006634:	200003c0 	.word	0x200003c0
 8006638:	20000428 	.word	0x20000428

0800663c <global_stdio_init.part.0>:
 800663c:	b510      	push	{r4, lr}
 800663e:	4b0b      	ldr	r3, [pc, #44]	; (800666c <global_stdio_init.part.0+0x30>)
 8006640:	4c0b      	ldr	r4, [pc, #44]	; (8006670 <global_stdio_init.part.0+0x34>)
 8006642:	4a0c      	ldr	r2, [pc, #48]	; (8006674 <global_stdio_init.part.0+0x38>)
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	4620      	mov	r0, r4
 8006648:	2200      	movs	r2, #0
 800664a:	2104      	movs	r1, #4
 800664c:	f7ff ff94 	bl	8006578 <std>
 8006650:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006654:	2201      	movs	r2, #1
 8006656:	2109      	movs	r1, #9
 8006658:	f7ff ff8e 	bl	8006578 <std>
 800665c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006660:	2202      	movs	r2, #2
 8006662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006666:	2112      	movs	r1, #18
 8006668:	f7ff bf86 	b.w	8006578 <std>
 800666c:	20000490 	.word	0x20000490
 8006670:	20000358 	.word	0x20000358
 8006674:	080065e5 	.word	0x080065e5

08006678 <__sfp_lock_acquire>:
 8006678:	4801      	ldr	r0, [pc, #4]	; (8006680 <__sfp_lock_acquire+0x8>)
 800667a:	f000 ba00 	b.w	8006a7e <__retarget_lock_acquire_recursive>
 800667e:	bf00      	nop
 8006680:	20000499 	.word	0x20000499

08006684 <__sfp_lock_release>:
 8006684:	4801      	ldr	r0, [pc, #4]	; (800668c <__sfp_lock_release+0x8>)
 8006686:	f000 b9fb 	b.w	8006a80 <__retarget_lock_release_recursive>
 800668a:	bf00      	nop
 800668c:	20000499 	.word	0x20000499

08006690 <__sinit>:
 8006690:	b510      	push	{r4, lr}
 8006692:	4604      	mov	r4, r0
 8006694:	f7ff fff0 	bl	8006678 <__sfp_lock_acquire>
 8006698:	6a23      	ldr	r3, [r4, #32]
 800669a:	b11b      	cbz	r3, 80066a4 <__sinit+0x14>
 800669c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066a0:	f7ff bff0 	b.w	8006684 <__sfp_lock_release>
 80066a4:	4b04      	ldr	r3, [pc, #16]	; (80066b8 <__sinit+0x28>)
 80066a6:	6223      	str	r3, [r4, #32]
 80066a8:	4b04      	ldr	r3, [pc, #16]	; (80066bc <__sinit+0x2c>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1f5      	bne.n	800669c <__sinit+0xc>
 80066b0:	f7ff ffc4 	bl	800663c <global_stdio_init.part.0>
 80066b4:	e7f2      	b.n	800669c <__sinit+0xc>
 80066b6:	bf00      	nop
 80066b8:	080065fd 	.word	0x080065fd
 80066bc:	20000490 	.word	0x20000490

080066c0 <_fwalk_sglue>:
 80066c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c4:	4607      	mov	r7, r0
 80066c6:	4688      	mov	r8, r1
 80066c8:	4614      	mov	r4, r2
 80066ca:	2600      	movs	r6, #0
 80066cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066d0:	f1b9 0901 	subs.w	r9, r9, #1
 80066d4:	d505      	bpl.n	80066e2 <_fwalk_sglue+0x22>
 80066d6:	6824      	ldr	r4, [r4, #0]
 80066d8:	2c00      	cmp	r4, #0
 80066da:	d1f7      	bne.n	80066cc <_fwalk_sglue+0xc>
 80066dc:	4630      	mov	r0, r6
 80066de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e2:	89ab      	ldrh	r3, [r5, #12]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d907      	bls.n	80066f8 <_fwalk_sglue+0x38>
 80066e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066ec:	3301      	adds	r3, #1
 80066ee:	d003      	beq.n	80066f8 <_fwalk_sglue+0x38>
 80066f0:	4629      	mov	r1, r5
 80066f2:	4638      	mov	r0, r7
 80066f4:	47c0      	blx	r8
 80066f6:	4306      	orrs	r6, r0
 80066f8:	3568      	adds	r5, #104	; 0x68
 80066fa:	e7e9      	b.n	80066d0 <_fwalk_sglue+0x10>

080066fc <_puts_r>:
 80066fc:	6a03      	ldr	r3, [r0, #32]
 80066fe:	b570      	push	{r4, r5, r6, lr}
 8006700:	6884      	ldr	r4, [r0, #8]
 8006702:	4605      	mov	r5, r0
 8006704:	460e      	mov	r6, r1
 8006706:	b90b      	cbnz	r3, 800670c <_puts_r+0x10>
 8006708:	f7ff ffc2 	bl	8006690 <__sinit>
 800670c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800670e:	07db      	lsls	r3, r3, #31
 8006710:	d405      	bmi.n	800671e <_puts_r+0x22>
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	0598      	lsls	r0, r3, #22
 8006716:	d402      	bmi.n	800671e <_puts_r+0x22>
 8006718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800671a:	f000 f9b0 	bl	8006a7e <__retarget_lock_acquire_recursive>
 800671e:	89a3      	ldrh	r3, [r4, #12]
 8006720:	0719      	lsls	r1, r3, #28
 8006722:	d513      	bpl.n	800674c <_puts_r+0x50>
 8006724:	6923      	ldr	r3, [r4, #16]
 8006726:	b18b      	cbz	r3, 800674c <_puts_r+0x50>
 8006728:	3e01      	subs	r6, #1
 800672a:	68a3      	ldr	r3, [r4, #8]
 800672c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006730:	3b01      	subs	r3, #1
 8006732:	60a3      	str	r3, [r4, #8]
 8006734:	b9e9      	cbnz	r1, 8006772 <_puts_r+0x76>
 8006736:	2b00      	cmp	r3, #0
 8006738:	da2e      	bge.n	8006798 <_puts_r+0x9c>
 800673a:	4622      	mov	r2, r4
 800673c:	210a      	movs	r1, #10
 800673e:	4628      	mov	r0, r5
 8006740:	f000 f87b 	bl	800683a <__swbuf_r>
 8006744:	3001      	adds	r0, #1
 8006746:	d007      	beq.n	8006758 <_puts_r+0x5c>
 8006748:	250a      	movs	r5, #10
 800674a:	e007      	b.n	800675c <_puts_r+0x60>
 800674c:	4621      	mov	r1, r4
 800674e:	4628      	mov	r0, r5
 8006750:	f000 f8b0 	bl	80068b4 <__swsetup_r>
 8006754:	2800      	cmp	r0, #0
 8006756:	d0e7      	beq.n	8006728 <_puts_r+0x2c>
 8006758:	f04f 35ff 	mov.w	r5, #4294967295
 800675c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800675e:	07da      	lsls	r2, r3, #31
 8006760:	d405      	bmi.n	800676e <_puts_r+0x72>
 8006762:	89a3      	ldrh	r3, [r4, #12]
 8006764:	059b      	lsls	r3, r3, #22
 8006766:	d402      	bmi.n	800676e <_puts_r+0x72>
 8006768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800676a:	f000 f989 	bl	8006a80 <__retarget_lock_release_recursive>
 800676e:	4628      	mov	r0, r5
 8006770:	bd70      	pop	{r4, r5, r6, pc}
 8006772:	2b00      	cmp	r3, #0
 8006774:	da04      	bge.n	8006780 <_puts_r+0x84>
 8006776:	69a2      	ldr	r2, [r4, #24]
 8006778:	429a      	cmp	r2, r3
 800677a:	dc06      	bgt.n	800678a <_puts_r+0x8e>
 800677c:	290a      	cmp	r1, #10
 800677e:	d004      	beq.n	800678a <_puts_r+0x8e>
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	6022      	str	r2, [r4, #0]
 8006786:	7019      	strb	r1, [r3, #0]
 8006788:	e7cf      	b.n	800672a <_puts_r+0x2e>
 800678a:	4622      	mov	r2, r4
 800678c:	4628      	mov	r0, r5
 800678e:	f000 f854 	bl	800683a <__swbuf_r>
 8006792:	3001      	adds	r0, #1
 8006794:	d1c9      	bne.n	800672a <_puts_r+0x2e>
 8006796:	e7df      	b.n	8006758 <_puts_r+0x5c>
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	250a      	movs	r5, #10
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	6022      	str	r2, [r4, #0]
 80067a0:	701d      	strb	r5, [r3, #0]
 80067a2:	e7db      	b.n	800675c <_puts_r+0x60>

080067a4 <puts>:
 80067a4:	4b02      	ldr	r3, [pc, #8]	; (80067b0 <puts+0xc>)
 80067a6:	4601      	mov	r1, r0
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	f7ff bfa7 	b.w	80066fc <_puts_r>
 80067ae:	bf00      	nop
 80067b0:	20000064 	.word	0x20000064

080067b4 <__sread>:
 80067b4:	b510      	push	{r4, lr}
 80067b6:	460c      	mov	r4, r1
 80067b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067bc:	f000 f900 	bl	80069c0 <_read_r>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	bfab      	itete	ge
 80067c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067c6:	89a3      	ldrhlt	r3, [r4, #12]
 80067c8:	181b      	addge	r3, r3, r0
 80067ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067ce:	bfac      	ite	ge
 80067d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80067d2:	81a3      	strhlt	r3, [r4, #12]
 80067d4:	bd10      	pop	{r4, pc}

080067d6 <__swrite>:
 80067d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067da:	461f      	mov	r7, r3
 80067dc:	898b      	ldrh	r3, [r1, #12]
 80067de:	05db      	lsls	r3, r3, #23
 80067e0:	4605      	mov	r5, r0
 80067e2:	460c      	mov	r4, r1
 80067e4:	4616      	mov	r6, r2
 80067e6:	d505      	bpl.n	80067f4 <__swrite+0x1e>
 80067e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ec:	2302      	movs	r3, #2
 80067ee:	2200      	movs	r2, #0
 80067f0:	f000 f8d4 	bl	800699c <_lseek_r>
 80067f4:	89a3      	ldrh	r3, [r4, #12]
 80067f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067fe:	81a3      	strh	r3, [r4, #12]
 8006800:	4632      	mov	r2, r6
 8006802:	463b      	mov	r3, r7
 8006804:	4628      	mov	r0, r5
 8006806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800680a:	f000 b8fb 	b.w	8006a04 <_write_r>

0800680e <__sseek>:
 800680e:	b510      	push	{r4, lr}
 8006810:	460c      	mov	r4, r1
 8006812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006816:	f000 f8c1 	bl	800699c <_lseek_r>
 800681a:	1c43      	adds	r3, r0, #1
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	bf15      	itete	ne
 8006820:	6560      	strne	r0, [r4, #84]	; 0x54
 8006822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800682a:	81a3      	strheq	r3, [r4, #12]
 800682c:	bf18      	it	ne
 800682e:	81a3      	strhne	r3, [r4, #12]
 8006830:	bd10      	pop	{r4, pc}

08006832 <__sclose>:
 8006832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006836:	f000 b8a1 	b.w	800697c <_close_r>

0800683a <__swbuf_r>:
 800683a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683c:	460e      	mov	r6, r1
 800683e:	4614      	mov	r4, r2
 8006840:	4605      	mov	r5, r0
 8006842:	b118      	cbz	r0, 800684c <__swbuf_r+0x12>
 8006844:	6a03      	ldr	r3, [r0, #32]
 8006846:	b90b      	cbnz	r3, 800684c <__swbuf_r+0x12>
 8006848:	f7ff ff22 	bl	8006690 <__sinit>
 800684c:	69a3      	ldr	r3, [r4, #24]
 800684e:	60a3      	str	r3, [r4, #8]
 8006850:	89a3      	ldrh	r3, [r4, #12]
 8006852:	071a      	lsls	r2, r3, #28
 8006854:	d525      	bpl.n	80068a2 <__swbuf_r+0x68>
 8006856:	6923      	ldr	r3, [r4, #16]
 8006858:	b31b      	cbz	r3, 80068a2 <__swbuf_r+0x68>
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	6922      	ldr	r2, [r4, #16]
 800685e:	1a98      	subs	r0, r3, r2
 8006860:	6963      	ldr	r3, [r4, #20]
 8006862:	b2f6      	uxtb	r6, r6
 8006864:	4283      	cmp	r3, r0
 8006866:	4637      	mov	r7, r6
 8006868:	dc04      	bgt.n	8006874 <__swbuf_r+0x3a>
 800686a:	4621      	mov	r1, r4
 800686c:	4628      	mov	r0, r5
 800686e:	f001 fbd3 	bl	8008018 <_fflush_r>
 8006872:	b9e0      	cbnz	r0, 80068ae <__swbuf_r+0x74>
 8006874:	68a3      	ldr	r3, [r4, #8]
 8006876:	3b01      	subs	r3, #1
 8006878:	60a3      	str	r3, [r4, #8]
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	1c5a      	adds	r2, r3, #1
 800687e:	6022      	str	r2, [r4, #0]
 8006880:	701e      	strb	r6, [r3, #0]
 8006882:	6962      	ldr	r2, [r4, #20]
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	429a      	cmp	r2, r3
 8006888:	d004      	beq.n	8006894 <__swbuf_r+0x5a>
 800688a:	89a3      	ldrh	r3, [r4, #12]
 800688c:	07db      	lsls	r3, r3, #31
 800688e:	d506      	bpl.n	800689e <__swbuf_r+0x64>
 8006890:	2e0a      	cmp	r6, #10
 8006892:	d104      	bne.n	800689e <__swbuf_r+0x64>
 8006894:	4621      	mov	r1, r4
 8006896:	4628      	mov	r0, r5
 8006898:	f001 fbbe 	bl	8008018 <_fflush_r>
 800689c:	b938      	cbnz	r0, 80068ae <__swbuf_r+0x74>
 800689e:	4638      	mov	r0, r7
 80068a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068a2:	4621      	mov	r1, r4
 80068a4:	4628      	mov	r0, r5
 80068a6:	f000 f805 	bl	80068b4 <__swsetup_r>
 80068aa:	2800      	cmp	r0, #0
 80068ac:	d0d5      	beq.n	800685a <__swbuf_r+0x20>
 80068ae:	f04f 37ff 	mov.w	r7, #4294967295
 80068b2:	e7f4      	b.n	800689e <__swbuf_r+0x64>

080068b4 <__swsetup_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4b2a      	ldr	r3, [pc, #168]	; (8006960 <__swsetup_r+0xac>)
 80068b8:	4605      	mov	r5, r0
 80068ba:	6818      	ldr	r0, [r3, #0]
 80068bc:	460c      	mov	r4, r1
 80068be:	b118      	cbz	r0, 80068c8 <__swsetup_r+0x14>
 80068c0:	6a03      	ldr	r3, [r0, #32]
 80068c2:	b90b      	cbnz	r3, 80068c8 <__swsetup_r+0x14>
 80068c4:	f7ff fee4 	bl	8006690 <__sinit>
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068ce:	0718      	lsls	r0, r3, #28
 80068d0:	d422      	bmi.n	8006918 <__swsetup_r+0x64>
 80068d2:	06d9      	lsls	r1, r3, #27
 80068d4:	d407      	bmi.n	80068e6 <__swsetup_r+0x32>
 80068d6:	2309      	movs	r3, #9
 80068d8:	602b      	str	r3, [r5, #0]
 80068da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068de:	81a3      	strh	r3, [r4, #12]
 80068e0:	f04f 30ff 	mov.w	r0, #4294967295
 80068e4:	e034      	b.n	8006950 <__swsetup_r+0x9c>
 80068e6:	0758      	lsls	r0, r3, #29
 80068e8:	d512      	bpl.n	8006910 <__swsetup_r+0x5c>
 80068ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068ec:	b141      	cbz	r1, 8006900 <__swsetup_r+0x4c>
 80068ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068f2:	4299      	cmp	r1, r3
 80068f4:	d002      	beq.n	80068fc <__swsetup_r+0x48>
 80068f6:	4628      	mov	r0, r5
 80068f8:	f000 ff40 	bl	800777c <_free_r>
 80068fc:	2300      	movs	r3, #0
 80068fe:	6363      	str	r3, [r4, #52]	; 0x34
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006906:	81a3      	strh	r3, [r4, #12]
 8006908:	2300      	movs	r3, #0
 800690a:	6063      	str	r3, [r4, #4]
 800690c:	6923      	ldr	r3, [r4, #16]
 800690e:	6023      	str	r3, [r4, #0]
 8006910:	89a3      	ldrh	r3, [r4, #12]
 8006912:	f043 0308 	orr.w	r3, r3, #8
 8006916:	81a3      	strh	r3, [r4, #12]
 8006918:	6923      	ldr	r3, [r4, #16]
 800691a:	b94b      	cbnz	r3, 8006930 <__swsetup_r+0x7c>
 800691c:	89a3      	ldrh	r3, [r4, #12]
 800691e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006926:	d003      	beq.n	8006930 <__swsetup_r+0x7c>
 8006928:	4621      	mov	r1, r4
 800692a:	4628      	mov	r0, r5
 800692c:	f001 fbc2 	bl	80080b4 <__smakebuf_r>
 8006930:	89a0      	ldrh	r0, [r4, #12]
 8006932:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006936:	f010 0301 	ands.w	r3, r0, #1
 800693a:	d00a      	beq.n	8006952 <__swsetup_r+0x9e>
 800693c:	2300      	movs	r3, #0
 800693e:	60a3      	str	r3, [r4, #8]
 8006940:	6963      	ldr	r3, [r4, #20]
 8006942:	425b      	negs	r3, r3
 8006944:	61a3      	str	r3, [r4, #24]
 8006946:	6923      	ldr	r3, [r4, #16]
 8006948:	b943      	cbnz	r3, 800695c <__swsetup_r+0xa8>
 800694a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800694e:	d1c4      	bne.n	80068da <__swsetup_r+0x26>
 8006950:	bd38      	pop	{r3, r4, r5, pc}
 8006952:	0781      	lsls	r1, r0, #30
 8006954:	bf58      	it	pl
 8006956:	6963      	ldrpl	r3, [r4, #20]
 8006958:	60a3      	str	r3, [r4, #8]
 800695a:	e7f4      	b.n	8006946 <__swsetup_r+0x92>
 800695c:	2000      	movs	r0, #0
 800695e:	e7f7      	b.n	8006950 <__swsetup_r+0x9c>
 8006960:	20000064 	.word	0x20000064

08006964 <memset>:
 8006964:	4402      	add	r2, r0
 8006966:	4603      	mov	r3, r0
 8006968:	4293      	cmp	r3, r2
 800696a:	d100      	bne.n	800696e <memset+0xa>
 800696c:	4770      	bx	lr
 800696e:	f803 1b01 	strb.w	r1, [r3], #1
 8006972:	e7f9      	b.n	8006968 <memset+0x4>

08006974 <_localeconv_r>:
 8006974:	4800      	ldr	r0, [pc, #0]	; (8006978 <_localeconv_r+0x4>)
 8006976:	4770      	bx	lr
 8006978:	20000158 	.word	0x20000158

0800697c <_close_r>:
 800697c:	b538      	push	{r3, r4, r5, lr}
 800697e:	4d06      	ldr	r5, [pc, #24]	; (8006998 <_close_r+0x1c>)
 8006980:	2300      	movs	r3, #0
 8006982:	4604      	mov	r4, r0
 8006984:	4608      	mov	r0, r1
 8006986:	602b      	str	r3, [r5, #0]
 8006988:	f7fa ffbd 	bl	8001906 <_close>
 800698c:	1c43      	adds	r3, r0, #1
 800698e:	d102      	bne.n	8006996 <_close_r+0x1a>
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	b103      	cbz	r3, 8006996 <_close_r+0x1a>
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	bd38      	pop	{r3, r4, r5, pc}
 8006998:	20000494 	.word	0x20000494

0800699c <_lseek_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4d07      	ldr	r5, [pc, #28]	; (80069bc <_lseek_r+0x20>)
 80069a0:	4604      	mov	r4, r0
 80069a2:	4608      	mov	r0, r1
 80069a4:	4611      	mov	r1, r2
 80069a6:	2200      	movs	r2, #0
 80069a8:	602a      	str	r2, [r5, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	f7fa ffd2 	bl	8001954 <_lseek>
 80069b0:	1c43      	adds	r3, r0, #1
 80069b2:	d102      	bne.n	80069ba <_lseek_r+0x1e>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	b103      	cbz	r3, 80069ba <_lseek_r+0x1e>
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	bd38      	pop	{r3, r4, r5, pc}
 80069bc:	20000494 	.word	0x20000494

080069c0 <_read_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	4d07      	ldr	r5, [pc, #28]	; (80069e0 <_read_r+0x20>)
 80069c4:	4604      	mov	r4, r0
 80069c6:	4608      	mov	r0, r1
 80069c8:	4611      	mov	r1, r2
 80069ca:	2200      	movs	r2, #0
 80069cc:	602a      	str	r2, [r5, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	f7fa ff60 	bl	8001894 <_read>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d102      	bne.n	80069de <_read_r+0x1e>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	b103      	cbz	r3, 80069de <_read_r+0x1e>
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	bd38      	pop	{r3, r4, r5, pc}
 80069e0:	20000494 	.word	0x20000494

080069e4 <_sbrk_r>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4d06      	ldr	r5, [pc, #24]	; (8006a00 <_sbrk_r+0x1c>)
 80069e8:	2300      	movs	r3, #0
 80069ea:	4604      	mov	r4, r0
 80069ec:	4608      	mov	r0, r1
 80069ee:	602b      	str	r3, [r5, #0]
 80069f0:	f7fa ffbe 	bl	8001970 <_sbrk>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	d102      	bne.n	80069fe <_sbrk_r+0x1a>
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	b103      	cbz	r3, 80069fe <_sbrk_r+0x1a>
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	bd38      	pop	{r3, r4, r5, pc}
 8006a00:	20000494 	.word	0x20000494

08006a04 <_write_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	4d07      	ldr	r5, [pc, #28]	; (8006a24 <_write_r+0x20>)
 8006a08:	4604      	mov	r4, r0
 8006a0a:	4608      	mov	r0, r1
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	2200      	movs	r2, #0
 8006a10:	602a      	str	r2, [r5, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	f7fa ff5b 	bl	80018ce <_write>
 8006a18:	1c43      	adds	r3, r0, #1
 8006a1a:	d102      	bne.n	8006a22 <_write_r+0x1e>
 8006a1c:	682b      	ldr	r3, [r5, #0]
 8006a1e:	b103      	cbz	r3, 8006a22 <_write_r+0x1e>
 8006a20:	6023      	str	r3, [r4, #0]
 8006a22:	bd38      	pop	{r3, r4, r5, pc}
 8006a24:	20000494 	.word	0x20000494

08006a28 <__errno>:
 8006a28:	4b01      	ldr	r3, [pc, #4]	; (8006a30 <__errno+0x8>)
 8006a2a:	6818      	ldr	r0, [r3, #0]
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	20000064 	.word	0x20000064

08006a34 <__libc_init_array>:
 8006a34:	b570      	push	{r4, r5, r6, lr}
 8006a36:	4d0d      	ldr	r5, [pc, #52]	; (8006a6c <__libc_init_array+0x38>)
 8006a38:	4c0d      	ldr	r4, [pc, #52]	; (8006a70 <__libc_init_array+0x3c>)
 8006a3a:	1b64      	subs	r4, r4, r5
 8006a3c:	10a4      	asrs	r4, r4, #2
 8006a3e:	2600      	movs	r6, #0
 8006a40:	42a6      	cmp	r6, r4
 8006a42:	d109      	bne.n	8006a58 <__libc_init_array+0x24>
 8006a44:	4d0b      	ldr	r5, [pc, #44]	; (8006a74 <__libc_init_array+0x40>)
 8006a46:	4c0c      	ldr	r4, [pc, #48]	; (8006a78 <__libc_init_array+0x44>)
 8006a48:	f001 fd94 	bl	8008574 <_init>
 8006a4c:	1b64      	subs	r4, r4, r5
 8006a4e:	10a4      	asrs	r4, r4, #2
 8006a50:	2600      	movs	r6, #0
 8006a52:	42a6      	cmp	r6, r4
 8006a54:	d105      	bne.n	8006a62 <__libc_init_array+0x2e>
 8006a56:	bd70      	pop	{r4, r5, r6, pc}
 8006a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a5c:	4798      	blx	r3
 8006a5e:	3601      	adds	r6, #1
 8006a60:	e7ee      	b.n	8006a40 <__libc_init_array+0xc>
 8006a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a66:	4798      	blx	r3
 8006a68:	3601      	adds	r6, #1
 8006a6a:	e7f2      	b.n	8006a52 <__libc_init_array+0x1e>
 8006a6c:	08008994 	.word	0x08008994
 8006a70:	08008994 	.word	0x08008994
 8006a74:	08008994 	.word	0x08008994
 8006a78:	08008998 	.word	0x08008998

08006a7c <__retarget_lock_init_recursive>:
 8006a7c:	4770      	bx	lr

08006a7e <__retarget_lock_acquire_recursive>:
 8006a7e:	4770      	bx	lr

08006a80 <__retarget_lock_release_recursive>:
 8006a80:	4770      	bx	lr

08006a82 <quorem>:
 8006a82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a86:	6903      	ldr	r3, [r0, #16]
 8006a88:	690c      	ldr	r4, [r1, #16]
 8006a8a:	42a3      	cmp	r3, r4
 8006a8c:	4607      	mov	r7, r0
 8006a8e:	db7e      	blt.n	8006b8e <quorem+0x10c>
 8006a90:	3c01      	subs	r4, #1
 8006a92:	f101 0814 	add.w	r8, r1, #20
 8006a96:	f100 0514 	add.w	r5, r0, #20
 8006a9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006aa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ab0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ab4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ab8:	d331      	bcc.n	8006b1e <quorem+0x9c>
 8006aba:	f04f 0e00 	mov.w	lr, #0
 8006abe:	4640      	mov	r0, r8
 8006ac0:	46ac      	mov	ip, r5
 8006ac2:	46f2      	mov	sl, lr
 8006ac4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ac8:	b293      	uxth	r3, r2
 8006aca:	fb06 e303 	mla	r3, r6, r3, lr
 8006ace:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ad2:	0c1a      	lsrs	r2, r3, #16
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	ebaa 0303 	sub.w	r3, sl, r3
 8006ada:	f8dc a000 	ldr.w	sl, [ip]
 8006ade:	fa13 f38a 	uxtah	r3, r3, sl
 8006ae2:	fb06 220e 	mla	r2, r6, lr, r2
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	9b00      	ldr	r3, [sp, #0]
 8006aea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006aee:	b292      	uxth	r2, r2
 8006af0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006af4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006af8:	f8bd 3000 	ldrh.w	r3, [sp]
 8006afc:	4581      	cmp	r9, r0
 8006afe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b02:	f84c 3b04 	str.w	r3, [ip], #4
 8006b06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b0a:	d2db      	bcs.n	8006ac4 <quorem+0x42>
 8006b0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b10:	b92b      	cbnz	r3, 8006b1e <quorem+0x9c>
 8006b12:	9b01      	ldr	r3, [sp, #4]
 8006b14:	3b04      	subs	r3, #4
 8006b16:	429d      	cmp	r5, r3
 8006b18:	461a      	mov	r2, r3
 8006b1a:	d32c      	bcc.n	8006b76 <quorem+0xf4>
 8006b1c:	613c      	str	r4, [r7, #16]
 8006b1e:	4638      	mov	r0, r7
 8006b20:	f001 f8f4 	bl	8007d0c <__mcmp>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	db22      	blt.n	8006b6e <quorem+0xec>
 8006b28:	3601      	adds	r6, #1
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b32:	f8d1 c000 	ldr.w	ip, [r1]
 8006b36:	b293      	uxth	r3, r2
 8006b38:	1ac3      	subs	r3, r0, r3
 8006b3a:	0c12      	lsrs	r2, r2, #16
 8006b3c:	fa13 f38c 	uxtah	r3, r3, ip
 8006b40:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006b44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b4e:	45c1      	cmp	r9, r8
 8006b50:	f841 3b04 	str.w	r3, [r1], #4
 8006b54:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b58:	d2e9      	bcs.n	8006b2e <quorem+0xac>
 8006b5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b62:	b922      	cbnz	r2, 8006b6e <quorem+0xec>
 8006b64:	3b04      	subs	r3, #4
 8006b66:	429d      	cmp	r5, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	d30a      	bcc.n	8006b82 <quorem+0x100>
 8006b6c:	613c      	str	r4, [r7, #16]
 8006b6e:	4630      	mov	r0, r6
 8006b70:	b003      	add	sp, #12
 8006b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b76:	6812      	ldr	r2, [r2, #0]
 8006b78:	3b04      	subs	r3, #4
 8006b7a:	2a00      	cmp	r2, #0
 8006b7c:	d1ce      	bne.n	8006b1c <quorem+0x9a>
 8006b7e:	3c01      	subs	r4, #1
 8006b80:	e7c9      	b.n	8006b16 <quorem+0x94>
 8006b82:	6812      	ldr	r2, [r2, #0]
 8006b84:	3b04      	subs	r3, #4
 8006b86:	2a00      	cmp	r2, #0
 8006b88:	d1f0      	bne.n	8006b6c <quorem+0xea>
 8006b8a:	3c01      	subs	r4, #1
 8006b8c:	e7eb      	b.n	8006b66 <quorem+0xe4>
 8006b8e:	2000      	movs	r0, #0
 8006b90:	e7ee      	b.n	8006b70 <quorem+0xee>
 8006b92:	0000      	movs	r0, r0
 8006b94:	0000      	movs	r0, r0
	...

08006b98 <_dtoa_r>:
 8006b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9c:	ed2d 8b04 	vpush	{d8-d9}
 8006ba0:	69c5      	ldr	r5, [r0, #28]
 8006ba2:	b093      	sub	sp, #76	; 0x4c
 8006ba4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006ba8:	ec57 6b10 	vmov	r6, r7, d0
 8006bac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006bb0:	9107      	str	r1, [sp, #28]
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	920a      	str	r2, [sp, #40]	; 0x28
 8006bb6:	930d      	str	r3, [sp, #52]	; 0x34
 8006bb8:	b975      	cbnz	r5, 8006bd8 <_dtoa_r+0x40>
 8006bba:	2010      	movs	r0, #16
 8006bbc:	f7fe ffba 	bl	8005b34 <malloc>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	61e0      	str	r0, [r4, #28]
 8006bc4:	b920      	cbnz	r0, 8006bd0 <_dtoa_r+0x38>
 8006bc6:	4bae      	ldr	r3, [pc, #696]	; (8006e80 <_dtoa_r+0x2e8>)
 8006bc8:	21ef      	movs	r1, #239	; 0xef
 8006bca:	48ae      	ldr	r0, [pc, #696]	; (8006e84 <_dtoa_r+0x2ec>)
 8006bcc:	f001 fade 	bl	800818c <__assert_func>
 8006bd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bd4:	6005      	str	r5, [r0, #0]
 8006bd6:	60c5      	str	r5, [r0, #12]
 8006bd8:	69e3      	ldr	r3, [r4, #28]
 8006bda:	6819      	ldr	r1, [r3, #0]
 8006bdc:	b151      	cbz	r1, 8006bf4 <_dtoa_r+0x5c>
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	604a      	str	r2, [r1, #4]
 8006be2:	2301      	movs	r3, #1
 8006be4:	4093      	lsls	r3, r2
 8006be6:	608b      	str	r3, [r1, #8]
 8006be8:	4620      	mov	r0, r4
 8006bea:	f000 fe53 	bl	8007894 <_Bfree>
 8006bee:	69e3      	ldr	r3, [r4, #28]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	1e3b      	subs	r3, r7, #0
 8006bf6:	bfbb      	ittet	lt
 8006bf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006bfc:	9303      	strlt	r3, [sp, #12]
 8006bfe:	2300      	movge	r3, #0
 8006c00:	2201      	movlt	r2, #1
 8006c02:	bfac      	ite	ge
 8006c04:	f8c8 3000 	strge.w	r3, [r8]
 8006c08:	f8c8 2000 	strlt.w	r2, [r8]
 8006c0c:	4b9e      	ldr	r3, [pc, #632]	; (8006e88 <_dtoa_r+0x2f0>)
 8006c0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006c12:	ea33 0308 	bics.w	r3, r3, r8
 8006c16:	d11b      	bne.n	8006c50 <_dtoa_r+0xb8>
 8006c18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006c24:	4333      	orrs	r3, r6
 8006c26:	f000 8593 	beq.w	8007750 <_dtoa_r+0xbb8>
 8006c2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c2c:	b963      	cbnz	r3, 8006c48 <_dtoa_r+0xb0>
 8006c2e:	4b97      	ldr	r3, [pc, #604]	; (8006e8c <_dtoa_r+0x2f4>)
 8006c30:	e027      	b.n	8006c82 <_dtoa_r+0xea>
 8006c32:	4b97      	ldr	r3, [pc, #604]	; (8006e90 <_dtoa_r+0x2f8>)
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	3308      	adds	r3, #8
 8006c38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	9800      	ldr	r0, [sp, #0]
 8006c3e:	b013      	add	sp, #76	; 0x4c
 8006c40:	ecbd 8b04 	vpop	{d8-d9}
 8006c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c48:	4b90      	ldr	r3, [pc, #576]	; (8006e8c <_dtoa_r+0x2f4>)
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	3303      	adds	r3, #3
 8006c4e:	e7f3      	b.n	8006c38 <_dtoa_r+0xa0>
 8006c50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c54:	2200      	movs	r2, #0
 8006c56:	ec51 0b17 	vmov	r0, r1, d7
 8006c5a:	eeb0 8a47 	vmov.f32	s16, s14
 8006c5e:	eef0 8a67 	vmov.f32	s17, s15
 8006c62:	2300      	movs	r3, #0
 8006c64:	f7f9 ff30 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c68:	4681      	mov	r9, r0
 8006c6a:	b160      	cbz	r0, 8006c86 <_dtoa_r+0xee>
 8006c6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c6e:	2301      	movs	r3, #1
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 8568 	beq.w	800774a <_dtoa_r+0xbb2>
 8006c7a:	4b86      	ldr	r3, [pc, #536]	; (8006e94 <_dtoa_r+0x2fc>)
 8006c7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	3b01      	subs	r3, #1
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	e7da      	b.n	8006c3c <_dtoa_r+0xa4>
 8006c86:	aa10      	add	r2, sp, #64	; 0x40
 8006c88:	a911      	add	r1, sp, #68	; 0x44
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	eeb0 0a48 	vmov.f32	s0, s16
 8006c90:	eef0 0a68 	vmov.f32	s1, s17
 8006c94:	f001 f8e0 	bl	8007e58 <__d2b>
 8006c98:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006c9c:	4682      	mov	sl, r0
 8006c9e:	2d00      	cmp	r5, #0
 8006ca0:	d07f      	beq.n	8006da2 <_dtoa_r+0x20a>
 8006ca2:	ee18 3a90 	vmov	r3, s17
 8006ca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006caa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006cae:	ec51 0b18 	vmov	r0, r1, d8
 8006cb2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006cb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006cba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	4b75      	ldr	r3, [pc, #468]	; (8006e98 <_dtoa_r+0x300>)
 8006cc4:	f7f9 fae0 	bl	8000288 <__aeabi_dsub>
 8006cc8:	a367      	add	r3, pc, #412	; (adr r3, 8006e68 <_dtoa_r+0x2d0>)
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	f7f9 fc93 	bl	80005f8 <__aeabi_dmul>
 8006cd2:	a367      	add	r3, pc, #412	; (adr r3, 8006e70 <_dtoa_r+0x2d8>)
 8006cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd8:	f7f9 fad8 	bl	800028c <__adddf3>
 8006cdc:	4606      	mov	r6, r0
 8006cde:	4628      	mov	r0, r5
 8006ce0:	460f      	mov	r7, r1
 8006ce2:	f7f9 fc1f 	bl	8000524 <__aeabi_i2d>
 8006ce6:	a364      	add	r3, pc, #400	; (adr r3, 8006e78 <_dtoa_r+0x2e0>)
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f7f9 fc84 	bl	80005f8 <__aeabi_dmul>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	4639      	mov	r1, r7
 8006cf8:	f7f9 fac8 	bl	800028c <__adddf3>
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	460f      	mov	r7, r1
 8006d00:	f7f9 ff2a 	bl	8000b58 <__aeabi_d2iz>
 8006d04:	2200      	movs	r2, #0
 8006d06:	4683      	mov	fp, r0
 8006d08:	2300      	movs	r3, #0
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	f7f9 fee5 	bl	8000adc <__aeabi_dcmplt>
 8006d12:	b148      	cbz	r0, 8006d28 <_dtoa_r+0x190>
 8006d14:	4658      	mov	r0, fp
 8006d16:	f7f9 fc05 	bl	8000524 <__aeabi_i2d>
 8006d1a:	4632      	mov	r2, r6
 8006d1c:	463b      	mov	r3, r7
 8006d1e:	f7f9 fed3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d22:	b908      	cbnz	r0, 8006d28 <_dtoa_r+0x190>
 8006d24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d28:	f1bb 0f16 	cmp.w	fp, #22
 8006d2c:	d857      	bhi.n	8006dde <_dtoa_r+0x246>
 8006d2e:	4b5b      	ldr	r3, [pc, #364]	; (8006e9c <_dtoa_r+0x304>)
 8006d30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	ec51 0b18 	vmov	r0, r1, d8
 8006d3c:	f7f9 fece 	bl	8000adc <__aeabi_dcmplt>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	d04e      	beq.n	8006de2 <_dtoa_r+0x24a>
 8006d44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d48:	2300      	movs	r3, #0
 8006d4a:	930c      	str	r3, [sp, #48]	; 0x30
 8006d4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d4e:	1b5b      	subs	r3, r3, r5
 8006d50:	1e5a      	subs	r2, r3, #1
 8006d52:	bf45      	ittet	mi
 8006d54:	f1c3 0301 	rsbmi	r3, r3, #1
 8006d58:	9305      	strmi	r3, [sp, #20]
 8006d5a:	2300      	movpl	r3, #0
 8006d5c:	2300      	movmi	r3, #0
 8006d5e:	9206      	str	r2, [sp, #24]
 8006d60:	bf54      	ite	pl
 8006d62:	9305      	strpl	r3, [sp, #20]
 8006d64:	9306      	strmi	r3, [sp, #24]
 8006d66:	f1bb 0f00 	cmp.w	fp, #0
 8006d6a:	db3c      	blt.n	8006de6 <_dtoa_r+0x24e>
 8006d6c:	9b06      	ldr	r3, [sp, #24]
 8006d6e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006d72:	445b      	add	r3, fp
 8006d74:	9306      	str	r3, [sp, #24]
 8006d76:	2300      	movs	r3, #0
 8006d78:	9308      	str	r3, [sp, #32]
 8006d7a:	9b07      	ldr	r3, [sp, #28]
 8006d7c:	2b09      	cmp	r3, #9
 8006d7e:	d868      	bhi.n	8006e52 <_dtoa_r+0x2ba>
 8006d80:	2b05      	cmp	r3, #5
 8006d82:	bfc4      	itt	gt
 8006d84:	3b04      	subgt	r3, #4
 8006d86:	9307      	strgt	r3, [sp, #28]
 8006d88:	9b07      	ldr	r3, [sp, #28]
 8006d8a:	f1a3 0302 	sub.w	r3, r3, #2
 8006d8e:	bfcc      	ite	gt
 8006d90:	2500      	movgt	r5, #0
 8006d92:	2501      	movle	r5, #1
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	f200 8085 	bhi.w	8006ea4 <_dtoa_r+0x30c>
 8006d9a:	e8df f003 	tbb	[pc, r3]
 8006d9e:	3b2e      	.short	0x3b2e
 8006da0:	5839      	.short	0x5839
 8006da2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006da6:	441d      	add	r5, r3
 8006da8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006dac:	2b20      	cmp	r3, #32
 8006dae:	bfc1      	itttt	gt
 8006db0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006db4:	fa08 f803 	lslgt.w	r8, r8, r3
 8006db8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006dbc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006dc0:	bfd6      	itet	le
 8006dc2:	f1c3 0320 	rsble	r3, r3, #32
 8006dc6:	ea48 0003 	orrgt.w	r0, r8, r3
 8006dca:	fa06 f003 	lslle.w	r0, r6, r3
 8006dce:	f7f9 fb99 	bl	8000504 <__aeabi_ui2d>
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006dd8:	3d01      	subs	r5, #1
 8006dda:	920e      	str	r2, [sp, #56]	; 0x38
 8006ddc:	e76f      	b.n	8006cbe <_dtoa_r+0x126>
 8006dde:	2301      	movs	r3, #1
 8006de0:	e7b3      	b.n	8006d4a <_dtoa_r+0x1b2>
 8006de2:	900c      	str	r0, [sp, #48]	; 0x30
 8006de4:	e7b2      	b.n	8006d4c <_dtoa_r+0x1b4>
 8006de6:	9b05      	ldr	r3, [sp, #20]
 8006de8:	eba3 030b 	sub.w	r3, r3, fp
 8006dec:	9305      	str	r3, [sp, #20]
 8006dee:	f1cb 0300 	rsb	r3, fp, #0
 8006df2:	9308      	str	r3, [sp, #32]
 8006df4:	2300      	movs	r3, #0
 8006df6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006df8:	e7bf      	b.n	8006d7a <_dtoa_r+0x1e2>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8006dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	dc52      	bgt.n	8006eaa <_dtoa_r+0x312>
 8006e04:	2301      	movs	r3, #1
 8006e06:	9301      	str	r3, [sp, #4]
 8006e08:	9304      	str	r3, [sp, #16]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	920a      	str	r2, [sp, #40]	; 0x28
 8006e0e:	e00b      	b.n	8006e28 <_dtoa_r+0x290>
 8006e10:	2301      	movs	r3, #1
 8006e12:	e7f3      	b.n	8006dfc <_dtoa_r+0x264>
 8006e14:	2300      	movs	r3, #0
 8006e16:	9309      	str	r3, [sp, #36]	; 0x24
 8006e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e1a:	445b      	add	r3, fp
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	9304      	str	r3, [sp, #16]
 8006e24:	bfb8      	it	lt
 8006e26:	2301      	movlt	r3, #1
 8006e28:	69e0      	ldr	r0, [r4, #28]
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	2204      	movs	r2, #4
 8006e2e:	f102 0614 	add.w	r6, r2, #20
 8006e32:	429e      	cmp	r6, r3
 8006e34:	d93d      	bls.n	8006eb2 <_dtoa_r+0x31a>
 8006e36:	6041      	str	r1, [r0, #4]
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f000 fceb 	bl	8007814 <_Balloc>
 8006e3e:	9000      	str	r0, [sp, #0]
 8006e40:	2800      	cmp	r0, #0
 8006e42:	d139      	bne.n	8006eb8 <_dtoa_r+0x320>
 8006e44:	4b16      	ldr	r3, [pc, #88]	; (8006ea0 <_dtoa_r+0x308>)
 8006e46:	4602      	mov	r2, r0
 8006e48:	f240 11af 	movw	r1, #431	; 0x1af
 8006e4c:	e6bd      	b.n	8006bca <_dtoa_r+0x32>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e7e1      	b.n	8006e16 <_dtoa_r+0x27e>
 8006e52:	2501      	movs	r5, #1
 8006e54:	2300      	movs	r3, #0
 8006e56:	9307      	str	r3, [sp, #28]
 8006e58:	9509      	str	r5, [sp, #36]	; 0x24
 8006e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	9304      	str	r3, [sp, #16]
 8006e62:	2200      	movs	r2, #0
 8006e64:	2312      	movs	r3, #18
 8006e66:	e7d1      	b.n	8006e0c <_dtoa_r+0x274>
 8006e68:	636f4361 	.word	0x636f4361
 8006e6c:	3fd287a7 	.word	0x3fd287a7
 8006e70:	8b60c8b3 	.word	0x8b60c8b3
 8006e74:	3fc68a28 	.word	0x3fc68a28
 8006e78:	509f79fb 	.word	0x509f79fb
 8006e7c:	3fd34413 	.word	0x3fd34413
 8006e80:	08008659 	.word	0x08008659
 8006e84:	08008670 	.word	0x08008670
 8006e88:	7ff00000 	.word	0x7ff00000
 8006e8c:	08008655 	.word	0x08008655
 8006e90:	0800864c 	.word	0x0800864c
 8006e94:	08008629 	.word	0x08008629
 8006e98:	3ff80000 	.word	0x3ff80000
 8006e9c:	08008760 	.word	0x08008760
 8006ea0:	080086c8 	.word	0x080086c8
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea8:	e7d7      	b.n	8006e5a <_dtoa_r+0x2c2>
 8006eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eac:	9301      	str	r3, [sp, #4]
 8006eae:	9304      	str	r3, [sp, #16]
 8006eb0:	e7ba      	b.n	8006e28 <_dtoa_r+0x290>
 8006eb2:	3101      	adds	r1, #1
 8006eb4:	0052      	lsls	r2, r2, #1
 8006eb6:	e7ba      	b.n	8006e2e <_dtoa_r+0x296>
 8006eb8:	69e3      	ldr	r3, [r4, #28]
 8006eba:	9a00      	ldr	r2, [sp, #0]
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	9b04      	ldr	r3, [sp, #16]
 8006ec0:	2b0e      	cmp	r3, #14
 8006ec2:	f200 80a8 	bhi.w	8007016 <_dtoa_r+0x47e>
 8006ec6:	2d00      	cmp	r5, #0
 8006ec8:	f000 80a5 	beq.w	8007016 <_dtoa_r+0x47e>
 8006ecc:	f1bb 0f00 	cmp.w	fp, #0
 8006ed0:	dd38      	ble.n	8006f44 <_dtoa_r+0x3ac>
 8006ed2:	4bc0      	ldr	r3, [pc, #768]	; (80071d4 <_dtoa_r+0x63c>)
 8006ed4:	f00b 020f 	and.w	r2, fp, #15
 8006ed8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006edc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006ee0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006ee4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006ee8:	d019      	beq.n	8006f1e <_dtoa_r+0x386>
 8006eea:	4bbb      	ldr	r3, [pc, #748]	; (80071d8 <_dtoa_r+0x640>)
 8006eec:	ec51 0b18 	vmov	r0, r1, d8
 8006ef0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ef4:	f7f9 fcaa 	bl	800084c <__aeabi_ddiv>
 8006ef8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006efc:	f008 080f 	and.w	r8, r8, #15
 8006f00:	2503      	movs	r5, #3
 8006f02:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80071d8 <_dtoa_r+0x640>
 8006f06:	f1b8 0f00 	cmp.w	r8, #0
 8006f0a:	d10a      	bne.n	8006f22 <_dtoa_r+0x38a>
 8006f0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f10:	4632      	mov	r2, r6
 8006f12:	463b      	mov	r3, r7
 8006f14:	f7f9 fc9a 	bl	800084c <__aeabi_ddiv>
 8006f18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f1c:	e02b      	b.n	8006f76 <_dtoa_r+0x3de>
 8006f1e:	2502      	movs	r5, #2
 8006f20:	e7ef      	b.n	8006f02 <_dtoa_r+0x36a>
 8006f22:	f018 0f01 	tst.w	r8, #1
 8006f26:	d008      	beq.n	8006f3a <_dtoa_r+0x3a2>
 8006f28:	4630      	mov	r0, r6
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006f30:	f7f9 fb62 	bl	80005f8 <__aeabi_dmul>
 8006f34:	3501      	adds	r5, #1
 8006f36:	4606      	mov	r6, r0
 8006f38:	460f      	mov	r7, r1
 8006f3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006f3e:	f109 0908 	add.w	r9, r9, #8
 8006f42:	e7e0      	b.n	8006f06 <_dtoa_r+0x36e>
 8006f44:	f000 809f 	beq.w	8007086 <_dtoa_r+0x4ee>
 8006f48:	f1cb 0600 	rsb	r6, fp, #0
 8006f4c:	4ba1      	ldr	r3, [pc, #644]	; (80071d4 <_dtoa_r+0x63c>)
 8006f4e:	4fa2      	ldr	r7, [pc, #648]	; (80071d8 <_dtoa_r+0x640>)
 8006f50:	f006 020f 	and.w	r2, r6, #15
 8006f54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	ec51 0b18 	vmov	r0, r1, d8
 8006f60:	f7f9 fb4a 	bl	80005f8 <__aeabi_dmul>
 8006f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f68:	1136      	asrs	r6, r6, #4
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	2502      	movs	r5, #2
 8006f6e:	2e00      	cmp	r6, #0
 8006f70:	d17e      	bne.n	8007070 <_dtoa_r+0x4d8>
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1d0      	bne.n	8006f18 <_dtoa_r+0x380>
 8006f76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f78:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 8084 	beq.w	800708a <_dtoa_r+0x4f2>
 8006f82:	4b96      	ldr	r3, [pc, #600]	; (80071dc <_dtoa_r+0x644>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	4640      	mov	r0, r8
 8006f88:	4649      	mov	r1, r9
 8006f8a:	f7f9 fda7 	bl	8000adc <__aeabi_dcmplt>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d07b      	beq.n	800708a <_dtoa_r+0x4f2>
 8006f92:	9b04      	ldr	r3, [sp, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d078      	beq.n	800708a <_dtoa_r+0x4f2>
 8006f98:	9b01      	ldr	r3, [sp, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	dd39      	ble.n	8007012 <_dtoa_r+0x47a>
 8006f9e:	4b90      	ldr	r3, [pc, #576]	; (80071e0 <_dtoa_r+0x648>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	f7f9 fb27 	bl	80005f8 <__aeabi_dmul>
 8006faa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fae:	9e01      	ldr	r6, [sp, #4]
 8006fb0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006fb4:	3501      	adds	r5, #1
 8006fb6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f7f9 fab2 	bl	8000524 <__aeabi_i2d>
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	464b      	mov	r3, r9
 8006fc4:	f7f9 fb18 	bl	80005f8 <__aeabi_dmul>
 8006fc8:	4b86      	ldr	r3, [pc, #536]	; (80071e4 <_dtoa_r+0x64c>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f7f9 f95e 	bl	800028c <__adddf3>
 8006fd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fd8:	9303      	str	r3, [sp, #12]
 8006fda:	2e00      	cmp	r6, #0
 8006fdc:	d158      	bne.n	8007090 <_dtoa_r+0x4f8>
 8006fde:	4b82      	ldr	r3, [pc, #520]	; (80071e8 <_dtoa_r+0x650>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	4640      	mov	r0, r8
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	f7f9 f94f 	bl	8000288 <__aeabi_dsub>
 8006fea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fee:	4680      	mov	r8, r0
 8006ff0:	4689      	mov	r9, r1
 8006ff2:	f7f9 fd91 	bl	8000b18 <__aeabi_dcmpgt>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f040 8296 	bne.w	8007528 <_dtoa_r+0x990>
 8006ffc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007000:	4640      	mov	r0, r8
 8007002:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007006:	4649      	mov	r1, r9
 8007008:	f7f9 fd68 	bl	8000adc <__aeabi_dcmplt>
 800700c:	2800      	cmp	r0, #0
 800700e:	f040 8289 	bne.w	8007524 <_dtoa_r+0x98c>
 8007012:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007016:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007018:	2b00      	cmp	r3, #0
 800701a:	f2c0 814e 	blt.w	80072ba <_dtoa_r+0x722>
 800701e:	f1bb 0f0e 	cmp.w	fp, #14
 8007022:	f300 814a 	bgt.w	80072ba <_dtoa_r+0x722>
 8007026:	4b6b      	ldr	r3, [pc, #428]	; (80071d4 <_dtoa_r+0x63c>)
 8007028:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800702c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007032:	2b00      	cmp	r3, #0
 8007034:	f280 80dc 	bge.w	80071f0 <_dtoa_r+0x658>
 8007038:	9b04      	ldr	r3, [sp, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	f300 80d8 	bgt.w	80071f0 <_dtoa_r+0x658>
 8007040:	f040 826f 	bne.w	8007522 <_dtoa_r+0x98a>
 8007044:	4b68      	ldr	r3, [pc, #416]	; (80071e8 <_dtoa_r+0x650>)
 8007046:	2200      	movs	r2, #0
 8007048:	4640      	mov	r0, r8
 800704a:	4649      	mov	r1, r9
 800704c:	f7f9 fad4 	bl	80005f8 <__aeabi_dmul>
 8007050:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007054:	f7f9 fd56 	bl	8000b04 <__aeabi_dcmpge>
 8007058:	9e04      	ldr	r6, [sp, #16]
 800705a:	4637      	mov	r7, r6
 800705c:	2800      	cmp	r0, #0
 800705e:	f040 8245 	bne.w	80074ec <_dtoa_r+0x954>
 8007062:	9d00      	ldr	r5, [sp, #0]
 8007064:	2331      	movs	r3, #49	; 0x31
 8007066:	f805 3b01 	strb.w	r3, [r5], #1
 800706a:	f10b 0b01 	add.w	fp, fp, #1
 800706e:	e241      	b.n	80074f4 <_dtoa_r+0x95c>
 8007070:	07f2      	lsls	r2, r6, #31
 8007072:	d505      	bpl.n	8007080 <_dtoa_r+0x4e8>
 8007074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007078:	f7f9 fabe 	bl	80005f8 <__aeabi_dmul>
 800707c:	3501      	adds	r5, #1
 800707e:	2301      	movs	r3, #1
 8007080:	1076      	asrs	r6, r6, #1
 8007082:	3708      	adds	r7, #8
 8007084:	e773      	b.n	8006f6e <_dtoa_r+0x3d6>
 8007086:	2502      	movs	r5, #2
 8007088:	e775      	b.n	8006f76 <_dtoa_r+0x3de>
 800708a:	9e04      	ldr	r6, [sp, #16]
 800708c:	465f      	mov	r7, fp
 800708e:	e792      	b.n	8006fb6 <_dtoa_r+0x41e>
 8007090:	9900      	ldr	r1, [sp, #0]
 8007092:	4b50      	ldr	r3, [pc, #320]	; (80071d4 <_dtoa_r+0x63c>)
 8007094:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007098:	4431      	add	r1, r6
 800709a:	9102      	str	r1, [sp, #8]
 800709c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800709e:	eeb0 9a47 	vmov.f32	s18, s14
 80070a2:	eef0 9a67 	vmov.f32	s19, s15
 80070a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80070aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070ae:	2900      	cmp	r1, #0
 80070b0:	d044      	beq.n	800713c <_dtoa_r+0x5a4>
 80070b2:	494e      	ldr	r1, [pc, #312]	; (80071ec <_dtoa_r+0x654>)
 80070b4:	2000      	movs	r0, #0
 80070b6:	f7f9 fbc9 	bl	800084c <__aeabi_ddiv>
 80070ba:	ec53 2b19 	vmov	r2, r3, d9
 80070be:	f7f9 f8e3 	bl	8000288 <__aeabi_dsub>
 80070c2:	9d00      	ldr	r5, [sp, #0]
 80070c4:	ec41 0b19 	vmov	d9, r0, r1
 80070c8:	4649      	mov	r1, r9
 80070ca:	4640      	mov	r0, r8
 80070cc:	f7f9 fd44 	bl	8000b58 <__aeabi_d2iz>
 80070d0:	4606      	mov	r6, r0
 80070d2:	f7f9 fa27 	bl	8000524 <__aeabi_i2d>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	4640      	mov	r0, r8
 80070dc:	4649      	mov	r1, r9
 80070de:	f7f9 f8d3 	bl	8000288 <__aeabi_dsub>
 80070e2:	3630      	adds	r6, #48	; 0x30
 80070e4:	f805 6b01 	strb.w	r6, [r5], #1
 80070e8:	ec53 2b19 	vmov	r2, r3, d9
 80070ec:	4680      	mov	r8, r0
 80070ee:	4689      	mov	r9, r1
 80070f0:	f7f9 fcf4 	bl	8000adc <__aeabi_dcmplt>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d164      	bne.n	80071c2 <_dtoa_r+0x62a>
 80070f8:	4642      	mov	r2, r8
 80070fa:	464b      	mov	r3, r9
 80070fc:	4937      	ldr	r1, [pc, #220]	; (80071dc <_dtoa_r+0x644>)
 80070fe:	2000      	movs	r0, #0
 8007100:	f7f9 f8c2 	bl	8000288 <__aeabi_dsub>
 8007104:	ec53 2b19 	vmov	r2, r3, d9
 8007108:	f7f9 fce8 	bl	8000adc <__aeabi_dcmplt>
 800710c:	2800      	cmp	r0, #0
 800710e:	f040 80b6 	bne.w	800727e <_dtoa_r+0x6e6>
 8007112:	9b02      	ldr	r3, [sp, #8]
 8007114:	429d      	cmp	r5, r3
 8007116:	f43f af7c 	beq.w	8007012 <_dtoa_r+0x47a>
 800711a:	4b31      	ldr	r3, [pc, #196]	; (80071e0 <_dtoa_r+0x648>)
 800711c:	ec51 0b19 	vmov	r0, r1, d9
 8007120:	2200      	movs	r2, #0
 8007122:	f7f9 fa69 	bl	80005f8 <__aeabi_dmul>
 8007126:	4b2e      	ldr	r3, [pc, #184]	; (80071e0 <_dtoa_r+0x648>)
 8007128:	ec41 0b19 	vmov	d9, r0, r1
 800712c:	2200      	movs	r2, #0
 800712e:	4640      	mov	r0, r8
 8007130:	4649      	mov	r1, r9
 8007132:	f7f9 fa61 	bl	80005f8 <__aeabi_dmul>
 8007136:	4680      	mov	r8, r0
 8007138:	4689      	mov	r9, r1
 800713a:	e7c5      	b.n	80070c8 <_dtoa_r+0x530>
 800713c:	ec51 0b17 	vmov	r0, r1, d7
 8007140:	f7f9 fa5a 	bl	80005f8 <__aeabi_dmul>
 8007144:	9b02      	ldr	r3, [sp, #8]
 8007146:	9d00      	ldr	r5, [sp, #0]
 8007148:	930f      	str	r3, [sp, #60]	; 0x3c
 800714a:	ec41 0b19 	vmov	d9, r0, r1
 800714e:	4649      	mov	r1, r9
 8007150:	4640      	mov	r0, r8
 8007152:	f7f9 fd01 	bl	8000b58 <__aeabi_d2iz>
 8007156:	4606      	mov	r6, r0
 8007158:	f7f9 f9e4 	bl	8000524 <__aeabi_i2d>
 800715c:	3630      	adds	r6, #48	; 0x30
 800715e:	4602      	mov	r2, r0
 8007160:	460b      	mov	r3, r1
 8007162:	4640      	mov	r0, r8
 8007164:	4649      	mov	r1, r9
 8007166:	f7f9 f88f 	bl	8000288 <__aeabi_dsub>
 800716a:	f805 6b01 	strb.w	r6, [r5], #1
 800716e:	9b02      	ldr	r3, [sp, #8]
 8007170:	429d      	cmp	r5, r3
 8007172:	4680      	mov	r8, r0
 8007174:	4689      	mov	r9, r1
 8007176:	f04f 0200 	mov.w	r2, #0
 800717a:	d124      	bne.n	80071c6 <_dtoa_r+0x62e>
 800717c:	4b1b      	ldr	r3, [pc, #108]	; (80071ec <_dtoa_r+0x654>)
 800717e:	ec51 0b19 	vmov	r0, r1, d9
 8007182:	f7f9 f883 	bl	800028c <__adddf3>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4640      	mov	r0, r8
 800718c:	4649      	mov	r1, r9
 800718e:	f7f9 fcc3 	bl	8000b18 <__aeabi_dcmpgt>
 8007192:	2800      	cmp	r0, #0
 8007194:	d173      	bne.n	800727e <_dtoa_r+0x6e6>
 8007196:	ec53 2b19 	vmov	r2, r3, d9
 800719a:	4914      	ldr	r1, [pc, #80]	; (80071ec <_dtoa_r+0x654>)
 800719c:	2000      	movs	r0, #0
 800719e:	f7f9 f873 	bl	8000288 <__aeabi_dsub>
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	4640      	mov	r0, r8
 80071a8:	4649      	mov	r1, r9
 80071aa:	f7f9 fc97 	bl	8000adc <__aeabi_dcmplt>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	f43f af2f 	beq.w	8007012 <_dtoa_r+0x47a>
 80071b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80071b6:	1e6b      	subs	r3, r5, #1
 80071b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80071ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071be:	2b30      	cmp	r3, #48	; 0x30
 80071c0:	d0f8      	beq.n	80071b4 <_dtoa_r+0x61c>
 80071c2:	46bb      	mov	fp, r7
 80071c4:	e04a      	b.n	800725c <_dtoa_r+0x6c4>
 80071c6:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <_dtoa_r+0x648>)
 80071c8:	f7f9 fa16 	bl	80005f8 <__aeabi_dmul>
 80071cc:	4680      	mov	r8, r0
 80071ce:	4689      	mov	r9, r1
 80071d0:	e7bd      	b.n	800714e <_dtoa_r+0x5b6>
 80071d2:	bf00      	nop
 80071d4:	08008760 	.word	0x08008760
 80071d8:	08008738 	.word	0x08008738
 80071dc:	3ff00000 	.word	0x3ff00000
 80071e0:	40240000 	.word	0x40240000
 80071e4:	401c0000 	.word	0x401c0000
 80071e8:	40140000 	.word	0x40140000
 80071ec:	3fe00000 	.word	0x3fe00000
 80071f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80071f4:	9d00      	ldr	r5, [sp, #0]
 80071f6:	4642      	mov	r2, r8
 80071f8:	464b      	mov	r3, r9
 80071fa:	4630      	mov	r0, r6
 80071fc:	4639      	mov	r1, r7
 80071fe:	f7f9 fb25 	bl	800084c <__aeabi_ddiv>
 8007202:	f7f9 fca9 	bl	8000b58 <__aeabi_d2iz>
 8007206:	9001      	str	r0, [sp, #4]
 8007208:	f7f9 f98c 	bl	8000524 <__aeabi_i2d>
 800720c:	4642      	mov	r2, r8
 800720e:	464b      	mov	r3, r9
 8007210:	f7f9 f9f2 	bl	80005f8 <__aeabi_dmul>
 8007214:	4602      	mov	r2, r0
 8007216:	460b      	mov	r3, r1
 8007218:	4630      	mov	r0, r6
 800721a:	4639      	mov	r1, r7
 800721c:	f7f9 f834 	bl	8000288 <__aeabi_dsub>
 8007220:	9e01      	ldr	r6, [sp, #4]
 8007222:	9f04      	ldr	r7, [sp, #16]
 8007224:	3630      	adds	r6, #48	; 0x30
 8007226:	f805 6b01 	strb.w	r6, [r5], #1
 800722a:	9e00      	ldr	r6, [sp, #0]
 800722c:	1bae      	subs	r6, r5, r6
 800722e:	42b7      	cmp	r7, r6
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	d134      	bne.n	80072a0 <_dtoa_r+0x708>
 8007236:	f7f9 f829 	bl	800028c <__adddf3>
 800723a:	4642      	mov	r2, r8
 800723c:	464b      	mov	r3, r9
 800723e:	4606      	mov	r6, r0
 8007240:	460f      	mov	r7, r1
 8007242:	f7f9 fc69 	bl	8000b18 <__aeabi_dcmpgt>
 8007246:	b9c8      	cbnz	r0, 800727c <_dtoa_r+0x6e4>
 8007248:	4642      	mov	r2, r8
 800724a:	464b      	mov	r3, r9
 800724c:	4630      	mov	r0, r6
 800724e:	4639      	mov	r1, r7
 8007250:	f7f9 fc3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007254:	b110      	cbz	r0, 800725c <_dtoa_r+0x6c4>
 8007256:	9b01      	ldr	r3, [sp, #4]
 8007258:	07db      	lsls	r3, r3, #31
 800725a:	d40f      	bmi.n	800727c <_dtoa_r+0x6e4>
 800725c:	4651      	mov	r1, sl
 800725e:	4620      	mov	r0, r4
 8007260:	f000 fb18 	bl	8007894 <_Bfree>
 8007264:	2300      	movs	r3, #0
 8007266:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007268:	702b      	strb	r3, [r5, #0]
 800726a:	f10b 0301 	add.w	r3, fp, #1
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007272:	2b00      	cmp	r3, #0
 8007274:	f43f ace2 	beq.w	8006c3c <_dtoa_r+0xa4>
 8007278:	601d      	str	r5, [r3, #0]
 800727a:	e4df      	b.n	8006c3c <_dtoa_r+0xa4>
 800727c:	465f      	mov	r7, fp
 800727e:	462b      	mov	r3, r5
 8007280:	461d      	mov	r5, r3
 8007282:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007286:	2a39      	cmp	r2, #57	; 0x39
 8007288:	d106      	bne.n	8007298 <_dtoa_r+0x700>
 800728a:	9a00      	ldr	r2, [sp, #0]
 800728c:	429a      	cmp	r2, r3
 800728e:	d1f7      	bne.n	8007280 <_dtoa_r+0x6e8>
 8007290:	9900      	ldr	r1, [sp, #0]
 8007292:	2230      	movs	r2, #48	; 0x30
 8007294:	3701      	adds	r7, #1
 8007296:	700a      	strb	r2, [r1, #0]
 8007298:	781a      	ldrb	r2, [r3, #0]
 800729a:	3201      	adds	r2, #1
 800729c:	701a      	strb	r2, [r3, #0]
 800729e:	e790      	b.n	80071c2 <_dtoa_r+0x62a>
 80072a0:	4ba3      	ldr	r3, [pc, #652]	; (8007530 <_dtoa_r+0x998>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	f7f9 f9a8 	bl	80005f8 <__aeabi_dmul>
 80072a8:	2200      	movs	r2, #0
 80072aa:	2300      	movs	r3, #0
 80072ac:	4606      	mov	r6, r0
 80072ae:	460f      	mov	r7, r1
 80072b0:	f7f9 fc0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d09e      	beq.n	80071f6 <_dtoa_r+0x65e>
 80072b8:	e7d0      	b.n	800725c <_dtoa_r+0x6c4>
 80072ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072bc:	2a00      	cmp	r2, #0
 80072be:	f000 80ca 	beq.w	8007456 <_dtoa_r+0x8be>
 80072c2:	9a07      	ldr	r2, [sp, #28]
 80072c4:	2a01      	cmp	r2, #1
 80072c6:	f300 80ad 	bgt.w	8007424 <_dtoa_r+0x88c>
 80072ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072cc:	2a00      	cmp	r2, #0
 80072ce:	f000 80a5 	beq.w	800741c <_dtoa_r+0x884>
 80072d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072d6:	9e08      	ldr	r6, [sp, #32]
 80072d8:	9d05      	ldr	r5, [sp, #20]
 80072da:	9a05      	ldr	r2, [sp, #20]
 80072dc:	441a      	add	r2, r3
 80072de:	9205      	str	r2, [sp, #20]
 80072e0:	9a06      	ldr	r2, [sp, #24]
 80072e2:	2101      	movs	r1, #1
 80072e4:	441a      	add	r2, r3
 80072e6:	4620      	mov	r0, r4
 80072e8:	9206      	str	r2, [sp, #24]
 80072ea:	f000 fb89 	bl	8007a00 <__i2b>
 80072ee:	4607      	mov	r7, r0
 80072f0:	b165      	cbz	r5, 800730c <_dtoa_r+0x774>
 80072f2:	9b06      	ldr	r3, [sp, #24]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	dd09      	ble.n	800730c <_dtoa_r+0x774>
 80072f8:	42ab      	cmp	r3, r5
 80072fa:	9a05      	ldr	r2, [sp, #20]
 80072fc:	bfa8      	it	ge
 80072fe:	462b      	movge	r3, r5
 8007300:	1ad2      	subs	r2, r2, r3
 8007302:	9205      	str	r2, [sp, #20]
 8007304:	9a06      	ldr	r2, [sp, #24]
 8007306:	1aed      	subs	r5, r5, r3
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	9306      	str	r3, [sp, #24]
 800730c:	9b08      	ldr	r3, [sp, #32]
 800730e:	b1f3      	cbz	r3, 800734e <_dtoa_r+0x7b6>
 8007310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 80a3 	beq.w	800745e <_dtoa_r+0x8c6>
 8007318:	2e00      	cmp	r6, #0
 800731a:	dd10      	ble.n	800733e <_dtoa_r+0x7a6>
 800731c:	4639      	mov	r1, r7
 800731e:	4632      	mov	r2, r6
 8007320:	4620      	mov	r0, r4
 8007322:	f000 fc2d 	bl	8007b80 <__pow5mult>
 8007326:	4652      	mov	r2, sl
 8007328:	4601      	mov	r1, r0
 800732a:	4607      	mov	r7, r0
 800732c:	4620      	mov	r0, r4
 800732e:	f000 fb7d 	bl	8007a2c <__multiply>
 8007332:	4651      	mov	r1, sl
 8007334:	4680      	mov	r8, r0
 8007336:	4620      	mov	r0, r4
 8007338:	f000 faac 	bl	8007894 <_Bfree>
 800733c:	46c2      	mov	sl, r8
 800733e:	9b08      	ldr	r3, [sp, #32]
 8007340:	1b9a      	subs	r2, r3, r6
 8007342:	d004      	beq.n	800734e <_dtoa_r+0x7b6>
 8007344:	4651      	mov	r1, sl
 8007346:	4620      	mov	r0, r4
 8007348:	f000 fc1a 	bl	8007b80 <__pow5mult>
 800734c:	4682      	mov	sl, r0
 800734e:	2101      	movs	r1, #1
 8007350:	4620      	mov	r0, r4
 8007352:	f000 fb55 	bl	8007a00 <__i2b>
 8007356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007358:	2b00      	cmp	r3, #0
 800735a:	4606      	mov	r6, r0
 800735c:	f340 8081 	ble.w	8007462 <_dtoa_r+0x8ca>
 8007360:	461a      	mov	r2, r3
 8007362:	4601      	mov	r1, r0
 8007364:	4620      	mov	r0, r4
 8007366:	f000 fc0b 	bl	8007b80 <__pow5mult>
 800736a:	9b07      	ldr	r3, [sp, #28]
 800736c:	2b01      	cmp	r3, #1
 800736e:	4606      	mov	r6, r0
 8007370:	dd7a      	ble.n	8007468 <_dtoa_r+0x8d0>
 8007372:	f04f 0800 	mov.w	r8, #0
 8007376:	6933      	ldr	r3, [r6, #16]
 8007378:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800737c:	6918      	ldr	r0, [r3, #16]
 800737e:	f000 faf1 	bl	8007964 <__hi0bits>
 8007382:	f1c0 0020 	rsb	r0, r0, #32
 8007386:	9b06      	ldr	r3, [sp, #24]
 8007388:	4418      	add	r0, r3
 800738a:	f010 001f 	ands.w	r0, r0, #31
 800738e:	f000 8094 	beq.w	80074ba <_dtoa_r+0x922>
 8007392:	f1c0 0320 	rsb	r3, r0, #32
 8007396:	2b04      	cmp	r3, #4
 8007398:	f340 8085 	ble.w	80074a6 <_dtoa_r+0x90e>
 800739c:	9b05      	ldr	r3, [sp, #20]
 800739e:	f1c0 001c 	rsb	r0, r0, #28
 80073a2:	4403      	add	r3, r0
 80073a4:	9305      	str	r3, [sp, #20]
 80073a6:	9b06      	ldr	r3, [sp, #24]
 80073a8:	4403      	add	r3, r0
 80073aa:	4405      	add	r5, r0
 80073ac:	9306      	str	r3, [sp, #24]
 80073ae:	9b05      	ldr	r3, [sp, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	dd05      	ble.n	80073c0 <_dtoa_r+0x828>
 80073b4:	4651      	mov	r1, sl
 80073b6:	461a      	mov	r2, r3
 80073b8:	4620      	mov	r0, r4
 80073ba:	f000 fc3b 	bl	8007c34 <__lshift>
 80073be:	4682      	mov	sl, r0
 80073c0:	9b06      	ldr	r3, [sp, #24]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	dd05      	ble.n	80073d2 <_dtoa_r+0x83a>
 80073c6:	4631      	mov	r1, r6
 80073c8:	461a      	mov	r2, r3
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 fc32 	bl	8007c34 <__lshift>
 80073d0:	4606      	mov	r6, r0
 80073d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d072      	beq.n	80074be <_dtoa_r+0x926>
 80073d8:	4631      	mov	r1, r6
 80073da:	4650      	mov	r0, sl
 80073dc:	f000 fc96 	bl	8007d0c <__mcmp>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	da6c      	bge.n	80074be <_dtoa_r+0x926>
 80073e4:	2300      	movs	r3, #0
 80073e6:	4651      	mov	r1, sl
 80073e8:	220a      	movs	r2, #10
 80073ea:	4620      	mov	r0, r4
 80073ec:	f000 fa74 	bl	80078d8 <__multadd>
 80073f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073f6:	4682      	mov	sl, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 81b0 	beq.w	800775e <_dtoa_r+0xbc6>
 80073fe:	2300      	movs	r3, #0
 8007400:	4639      	mov	r1, r7
 8007402:	220a      	movs	r2, #10
 8007404:	4620      	mov	r0, r4
 8007406:	f000 fa67 	bl	80078d8 <__multadd>
 800740a:	9b01      	ldr	r3, [sp, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	4607      	mov	r7, r0
 8007410:	f300 8096 	bgt.w	8007540 <_dtoa_r+0x9a8>
 8007414:	9b07      	ldr	r3, [sp, #28]
 8007416:	2b02      	cmp	r3, #2
 8007418:	dc59      	bgt.n	80074ce <_dtoa_r+0x936>
 800741a:	e091      	b.n	8007540 <_dtoa_r+0x9a8>
 800741c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800741e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007422:	e758      	b.n	80072d6 <_dtoa_r+0x73e>
 8007424:	9b04      	ldr	r3, [sp, #16]
 8007426:	1e5e      	subs	r6, r3, #1
 8007428:	9b08      	ldr	r3, [sp, #32]
 800742a:	42b3      	cmp	r3, r6
 800742c:	bfbf      	itttt	lt
 800742e:	9b08      	ldrlt	r3, [sp, #32]
 8007430:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007432:	9608      	strlt	r6, [sp, #32]
 8007434:	1af3      	sublt	r3, r6, r3
 8007436:	bfb4      	ite	lt
 8007438:	18d2      	addlt	r2, r2, r3
 800743a:	1b9e      	subge	r6, r3, r6
 800743c:	9b04      	ldr	r3, [sp, #16]
 800743e:	bfbc      	itt	lt
 8007440:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007442:	2600      	movlt	r6, #0
 8007444:	2b00      	cmp	r3, #0
 8007446:	bfb7      	itett	lt
 8007448:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800744c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007450:	1a9d      	sublt	r5, r3, r2
 8007452:	2300      	movlt	r3, #0
 8007454:	e741      	b.n	80072da <_dtoa_r+0x742>
 8007456:	9e08      	ldr	r6, [sp, #32]
 8007458:	9d05      	ldr	r5, [sp, #20]
 800745a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800745c:	e748      	b.n	80072f0 <_dtoa_r+0x758>
 800745e:	9a08      	ldr	r2, [sp, #32]
 8007460:	e770      	b.n	8007344 <_dtoa_r+0x7ac>
 8007462:	9b07      	ldr	r3, [sp, #28]
 8007464:	2b01      	cmp	r3, #1
 8007466:	dc19      	bgt.n	800749c <_dtoa_r+0x904>
 8007468:	9b02      	ldr	r3, [sp, #8]
 800746a:	b9bb      	cbnz	r3, 800749c <_dtoa_r+0x904>
 800746c:	9b03      	ldr	r3, [sp, #12]
 800746e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007472:	b99b      	cbnz	r3, 800749c <_dtoa_r+0x904>
 8007474:	9b03      	ldr	r3, [sp, #12]
 8007476:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800747a:	0d1b      	lsrs	r3, r3, #20
 800747c:	051b      	lsls	r3, r3, #20
 800747e:	b183      	cbz	r3, 80074a2 <_dtoa_r+0x90a>
 8007480:	9b05      	ldr	r3, [sp, #20]
 8007482:	3301      	adds	r3, #1
 8007484:	9305      	str	r3, [sp, #20]
 8007486:	9b06      	ldr	r3, [sp, #24]
 8007488:	3301      	adds	r3, #1
 800748a:	9306      	str	r3, [sp, #24]
 800748c:	f04f 0801 	mov.w	r8, #1
 8007490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007492:	2b00      	cmp	r3, #0
 8007494:	f47f af6f 	bne.w	8007376 <_dtoa_r+0x7de>
 8007498:	2001      	movs	r0, #1
 800749a:	e774      	b.n	8007386 <_dtoa_r+0x7ee>
 800749c:	f04f 0800 	mov.w	r8, #0
 80074a0:	e7f6      	b.n	8007490 <_dtoa_r+0x8f8>
 80074a2:	4698      	mov	r8, r3
 80074a4:	e7f4      	b.n	8007490 <_dtoa_r+0x8f8>
 80074a6:	d082      	beq.n	80073ae <_dtoa_r+0x816>
 80074a8:	9a05      	ldr	r2, [sp, #20]
 80074aa:	331c      	adds	r3, #28
 80074ac:	441a      	add	r2, r3
 80074ae:	9205      	str	r2, [sp, #20]
 80074b0:	9a06      	ldr	r2, [sp, #24]
 80074b2:	441a      	add	r2, r3
 80074b4:	441d      	add	r5, r3
 80074b6:	9206      	str	r2, [sp, #24]
 80074b8:	e779      	b.n	80073ae <_dtoa_r+0x816>
 80074ba:	4603      	mov	r3, r0
 80074bc:	e7f4      	b.n	80074a8 <_dtoa_r+0x910>
 80074be:	9b04      	ldr	r3, [sp, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	dc37      	bgt.n	8007534 <_dtoa_r+0x99c>
 80074c4:	9b07      	ldr	r3, [sp, #28]
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	dd34      	ble.n	8007534 <_dtoa_r+0x99c>
 80074ca:	9b04      	ldr	r3, [sp, #16]
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	9b01      	ldr	r3, [sp, #4]
 80074d0:	b963      	cbnz	r3, 80074ec <_dtoa_r+0x954>
 80074d2:	4631      	mov	r1, r6
 80074d4:	2205      	movs	r2, #5
 80074d6:	4620      	mov	r0, r4
 80074d8:	f000 f9fe 	bl	80078d8 <__multadd>
 80074dc:	4601      	mov	r1, r0
 80074de:	4606      	mov	r6, r0
 80074e0:	4650      	mov	r0, sl
 80074e2:	f000 fc13 	bl	8007d0c <__mcmp>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	f73f adbb 	bgt.w	8007062 <_dtoa_r+0x4ca>
 80074ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ee:	9d00      	ldr	r5, [sp, #0]
 80074f0:	ea6f 0b03 	mvn.w	fp, r3
 80074f4:	f04f 0800 	mov.w	r8, #0
 80074f8:	4631      	mov	r1, r6
 80074fa:	4620      	mov	r0, r4
 80074fc:	f000 f9ca 	bl	8007894 <_Bfree>
 8007500:	2f00      	cmp	r7, #0
 8007502:	f43f aeab 	beq.w	800725c <_dtoa_r+0x6c4>
 8007506:	f1b8 0f00 	cmp.w	r8, #0
 800750a:	d005      	beq.n	8007518 <_dtoa_r+0x980>
 800750c:	45b8      	cmp	r8, r7
 800750e:	d003      	beq.n	8007518 <_dtoa_r+0x980>
 8007510:	4641      	mov	r1, r8
 8007512:	4620      	mov	r0, r4
 8007514:	f000 f9be 	bl	8007894 <_Bfree>
 8007518:	4639      	mov	r1, r7
 800751a:	4620      	mov	r0, r4
 800751c:	f000 f9ba 	bl	8007894 <_Bfree>
 8007520:	e69c      	b.n	800725c <_dtoa_r+0x6c4>
 8007522:	2600      	movs	r6, #0
 8007524:	4637      	mov	r7, r6
 8007526:	e7e1      	b.n	80074ec <_dtoa_r+0x954>
 8007528:	46bb      	mov	fp, r7
 800752a:	4637      	mov	r7, r6
 800752c:	e599      	b.n	8007062 <_dtoa_r+0x4ca>
 800752e:	bf00      	nop
 8007530:	40240000 	.word	0x40240000
 8007534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 80c8 	beq.w	80076cc <_dtoa_r+0xb34>
 800753c:	9b04      	ldr	r3, [sp, #16]
 800753e:	9301      	str	r3, [sp, #4]
 8007540:	2d00      	cmp	r5, #0
 8007542:	dd05      	ble.n	8007550 <_dtoa_r+0x9b8>
 8007544:	4639      	mov	r1, r7
 8007546:	462a      	mov	r2, r5
 8007548:	4620      	mov	r0, r4
 800754a:	f000 fb73 	bl	8007c34 <__lshift>
 800754e:	4607      	mov	r7, r0
 8007550:	f1b8 0f00 	cmp.w	r8, #0
 8007554:	d05b      	beq.n	800760e <_dtoa_r+0xa76>
 8007556:	6879      	ldr	r1, [r7, #4]
 8007558:	4620      	mov	r0, r4
 800755a:	f000 f95b 	bl	8007814 <_Balloc>
 800755e:	4605      	mov	r5, r0
 8007560:	b928      	cbnz	r0, 800756e <_dtoa_r+0x9d6>
 8007562:	4b83      	ldr	r3, [pc, #524]	; (8007770 <_dtoa_r+0xbd8>)
 8007564:	4602      	mov	r2, r0
 8007566:	f240 21ef 	movw	r1, #751	; 0x2ef
 800756a:	f7ff bb2e 	b.w	8006bca <_dtoa_r+0x32>
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	3202      	adds	r2, #2
 8007572:	0092      	lsls	r2, r2, #2
 8007574:	f107 010c 	add.w	r1, r7, #12
 8007578:	300c      	adds	r0, #12
 800757a:	f000 fdf9 	bl	8008170 <memcpy>
 800757e:	2201      	movs	r2, #1
 8007580:	4629      	mov	r1, r5
 8007582:	4620      	mov	r0, r4
 8007584:	f000 fb56 	bl	8007c34 <__lshift>
 8007588:	9b00      	ldr	r3, [sp, #0]
 800758a:	3301      	adds	r3, #1
 800758c:	9304      	str	r3, [sp, #16]
 800758e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007592:	4413      	add	r3, r2
 8007594:	9308      	str	r3, [sp, #32]
 8007596:	9b02      	ldr	r3, [sp, #8]
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	46b8      	mov	r8, r7
 800759e:	9306      	str	r3, [sp, #24]
 80075a0:	4607      	mov	r7, r0
 80075a2:	9b04      	ldr	r3, [sp, #16]
 80075a4:	4631      	mov	r1, r6
 80075a6:	3b01      	subs	r3, #1
 80075a8:	4650      	mov	r0, sl
 80075aa:	9301      	str	r3, [sp, #4]
 80075ac:	f7ff fa69 	bl	8006a82 <quorem>
 80075b0:	4641      	mov	r1, r8
 80075b2:	9002      	str	r0, [sp, #8]
 80075b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80075b8:	4650      	mov	r0, sl
 80075ba:	f000 fba7 	bl	8007d0c <__mcmp>
 80075be:	463a      	mov	r2, r7
 80075c0:	9005      	str	r0, [sp, #20]
 80075c2:	4631      	mov	r1, r6
 80075c4:	4620      	mov	r0, r4
 80075c6:	f000 fbbd 	bl	8007d44 <__mdiff>
 80075ca:	68c2      	ldr	r2, [r0, #12]
 80075cc:	4605      	mov	r5, r0
 80075ce:	bb02      	cbnz	r2, 8007612 <_dtoa_r+0xa7a>
 80075d0:	4601      	mov	r1, r0
 80075d2:	4650      	mov	r0, sl
 80075d4:	f000 fb9a 	bl	8007d0c <__mcmp>
 80075d8:	4602      	mov	r2, r0
 80075da:	4629      	mov	r1, r5
 80075dc:	4620      	mov	r0, r4
 80075de:	9209      	str	r2, [sp, #36]	; 0x24
 80075e0:	f000 f958 	bl	8007894 <_Bfree>
 80075e4:	9b07      	ldr	r3, [sp, #28]
 80075e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075e8:	9d04      	ldr	r5, [sp, #16]
 80075ea:	ea43 0102 	orr.w	r1, r3, r2
 80075ee:	9b06      	ldr	r3, [sp, #24]
 80075f0:	4319      	orrs	r1, r3
 80075f2:	d110      	bne.n	8007616 <_dtoa_r+0xa7e>
 80075f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80075f8:	d029      	beq.n	800764e <_dtoa_r+0xab6>
 80075fa:	9b05      	ldr	r3, [sp, #20]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	dd02      	ble.n	8007606 <_dtoa_r+0xa6e>
 8007600:	9b02      	ldr	r3, [sp, #8]
 8007602:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007606:	9b01      	ldr	r3, [sp, #4]
 8007608:	f883 9000 	strb.w	r9, [r3]
 800760c:	e774      	b.n	80074f8 <_dtoa_r+0x960>
 800760e:	4638      	mov	r0, r7
 8007610:	e7ba      	b.n	8007588 <_dtoa_r+0x9f0>
 8007612:	2201      	movs	r2, #1
 8007614:	e7e1      	b.n	80075da <_dtoa_r+0xa42>
 8007616:	9b05      	ldr	r3, [sp, #20]
 8007618:	2b00      	cmp	r3, #0
 800761a:	db04      	blt.n	8007626 <_dtoa_r+0xa8e>
 800761c:	9907      	ldr	r1, [sp, #28]
 800761e:	430b      	orrs	r3, r1
 8007620:	9906      	ldr	r1, [sp, #24]
 8007622:	430b      	orrs	r3, r1
 8007624:	d120      	bne.n	8007668 <_dtoa_r+0xad0>
 8007626:	2a00      	cmp	r2, #0
 8007628:	dded      	ble.n	8007606 <_dtoa_r+0xa6e>
 800762a:	4651      	mov	r1, sl
 800762c:	2201      	movs	r2, #1
 800762e:	4620      	mov	r0, r4
 8007630:	f000 fb00 	bl	8007c34 <__lshift>
 8007634:	4631      	mov	r1, r6
 8007636:	4682      	mov	sl, r0
 8007638:	f000 fb68 	bl	8007d0c <__mcmp>
 800763c:	2800      	cmp	r0, #0
 800763e:	dc03      	bgt.n	8007648 <_dtoa_r+0xab0>
 8007640:	d1e1      	bne.n	8007606 <_dtoa_r+0xa6e>
 8007642:	f019 0f01 	tst.w	r9, #1
 8007646:	d0de      	beq.n	8007606 <_dtoa_r+0xa6e>
 8007648:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800764c:	d1d8      	bne.n	8007600 <_dtoa_r+0xa68>
 800764e:	9a01      	ldr	r2, [sp, #4]
 8007650:	2339      	movs	r3, #57	; 0x39
 8007652:	7013      	strb	r3, [r2, #0]
 8007654:	462b      	mov	r3, r5
 8007656:	461d      	mov	r5, r3
 8007658:	3b01      	subs	r3, #1
 800765a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800765e:	2a39      	cmp	r2, #57	; 0x39
 8007660:	d06c      	beq.n	800773c <_dtoa_r+0xba4>
 8007662:	3201      	adds	r2, #1
 8007664:	701a      	strb	r2, [r3, #0]
 8007666:	e747      	b.n	80074f8 <_dtoa_r+0x960>
 8007668:	2a00      	cmp	r2, #0
 800766a:	dd07      	ble.n	800767c <_dtoa_r+0xae4>
 800766c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007670:	d0ed      	beq.n	800764e <_dtoa_r+0xab6>
 8007672:	9a01      	ldr	r2, [sp, #4]
 8007674:	f109 0301 	add.w	r3, r9, #1
 8007678:	7013      	strb	r3, [r2, #0]
 800767a:	e73d      	b.n	80074f8 <_dtoa_r+0x960>
 800767c:	9b04      	ldr	r3, [sp, #16]
 800767e:	9a08      	ldr	r2, [sp, #32]
 8007680:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007684:	4293      	cmp	r3, r2
 8007686:	d043      	beq.n	8007710 <_dtoa_r+0xb78>
 8007688:	4651      	mov	r1, sl
 800768a:	2300      	movs	r3, #0
 800768c:	220a      	movs	r2, #10
 800768e:	4620      	mov	r0, r4
 8007690:	f000 f922 	bl	80078d8 <__multadd>
 8007694:	45b8      	cmp	r8, r7
 8007696:	4682      	mov	sl, r0
 8007698:	f04f 0300 	mov.w	r3, #0
 800769c:	f04f 020a 	mov.w	r2, #10
 80076a0:	4641      	mov	r1, r8
 80076a2:	4620      	mov	r0, r4
 80076a4:	d107      	bne.n	80076b6 <_dtoa_r+0xb1e>
 80076a6:	f000 f917 	bl	80078d8 <__multadd>
 80076aa:	4680      	mov	r8, r0
 80076ac:	4607      	mov	r7, r0
 80076ae:	9b04      	ldr	r3, [sp, #16]
 80076b0:	3301      	adds	r3, #1
 80076b2:	9304      	str	r3, [sp, #16]
 80076b4:	e775      	b.n	80075a2 <_dtoa_r+0xa0a>
 80076b6:	f000 f90f 	bl	80078d8 <__multadd>
 80076ba:	4639      	mov	r1, r7
 80076bc:	4680      	mov	r8, r0
 80076be:	2300      	movs	r3, #0
 80076c0:	220a      	movs	r2, #10
 80076c2:	4620      	mov	r0, r4
 80076c4:	f000 f908 	bl	80078d8 <__multadd>
 80076c8:	4607      	mov	r7, r0
 80076ca:	e7f0      	b.n	80076ae <_dtoa_r+0xb16>
 80076cc:	9b04      	ldr	r3, [sp, #16]
 80076ce:	9301      	str	r3, [sp, #4]
 80076d0:	9d00      	ldr	r5, [sp, #0]
 80076d2:	4631      	mov	r1, r6
 80076d4:	4650      	mov	r0, sl
 80076d6:	f7ff f9d4 	bl	8006a82 <quorem>
 80076da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80076de:	9b00      	ldr	r3, [sp, #0]
 80076e0:	f805 9b01 	strb.w	r9, [r5], #1
 80076e4:	1aea      	subs	r2, r5, r3
 80076e6:	9b01      	ldr	r3, [sp, #4]
 80076e8:	4293      	cmp	r3, r2
 80076ea:	dd07      	ble.n	80076fc <_dtoa_r+0xb64>
 80076ec:	4651      	mov	r1, sl
 80076ee:	2300      	movs	r3, #0
 80076f0:	220a      	movs	r2, #10
 80076f2:	4620      	mov	r0, r4
 80076f4:	f000 f8f0 	bl	80078d8 <__multadd>
 80076f8:	4682      	mov	sl, r0
 80076fa:	e7ea      	b.n	80076d2 <_dtoa_r+0xb3a>
 80076fc:	9b01      	ldr	r3, [sp, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	bfc8      	it	gt
 8007702:	461d      	movgt	r5, r3
 8007704:	9b00      	ldr	r3, [sp, #0]
 8007706:	bfd8      	it	le
 8007708:	2501      	movle	r5, #1
 800770a:	441d      	add	r5, r3
 800770c:	f04f 0800 	mov.w	r8, #0
 8007710:	4651      	mov	r1, sl
 8007712:	2201      	movs	r2, #1
 8007714:	4620      	mov	r0, r4
 8007716:	f000 fa8d 	bl	8007c34 <__lshift>
 800771a:	4631      	mov	r1, r6
 800771c:	4682      	mov	sl, r0
 800771e:	f000 faf5 	bl	8007d0c <__mcmp>
 8007722:	2800      	cmp	r0, #0
 8007724:	dc96      	bgt.n	8007654 <_dtoa_r+0xabc>
 8007726:	d102      	bne.n	800772e <_dtoa_r+0xb96>
 8007728:	f019 0f01 	tst.w	r9, #1
 800772c:	d192      	bne.n	8007654 <_dtoa_r+0xabc>
 800772e:	462b      	mov	r3, r5
 8007730:	461d      	mov	r5, r3
 8007732:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007736:	2a30      	cmp	r2, #48	; 0x30
 8007738:	d0fa      	beq.n	8007730 <_dtoa_r+0xb98>
 800773a:	e6dd      	b.n	80074f8 <_dtoa_r+0x960>
 800773c:	9a00      	ldr	r2, [sp, #0]
 800773e:	429a      	cmp	r2, r3
 8007740:	d189      	bne.n	8007656 <_dtoa_r+0xabe>
 8007742:	f10b 0b01 	add.w	fp, fp, #1
 8007746:	2331      	movs	r3, #49	; 0x31
 8007748:	e796      	b.n	8007678 <_dtoa_r+0xae0>
 800774a:	4b0a      	ldr	r3, [pc, #40]	; (8007774 <_dtoa_r+0xbdc>)
 800774c:	f7ff ba99 	b.w	8006c82 <_dtoa_r+0xea>
 8007750:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007752:	2b00      	cmp	r3, #0
 8007754:	f47f aa6d 	bne.w	8006c32 <_dtoa_r+0x9a>
 8007758:	4b07      	ldr	r3, [pc, #28]	; (8007778 <_dtoa_r+0xbe0>)
 800775a:	f7ff ba92 	b.w	8006c82 <_dtoa_r+0xea>
 800775e:	9b01      	ldr	r3, [sp, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	dcb5      	bgt.n	80076d0 <_dtoa_r+0xb38>
 8007764:	9b07      	ldr	r3, [sp, #28]
 8007766:	2b02      	cmp	r3, #2
 8007768:	f73f aeb1 	bgt.w	80074ce <_dtoa_r+0x936>
 800776c:	e7b0      	b.n	80076d0 <_dtoa_r+0xb38>
 800776e:	bf00      	nop
 8007770:	080086c8 	.word	0x080086c8
 8007774:	08008628 	.word	0x08008628
 8007778:	0800864c 	.word	0x0800864c

0800777c <_free_r>:
 800777c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800777e:	2900      	cmp	r1, #0
 8007780:	d044      	beq.n	800780c <_free_r+0x90>
 8007782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007786:	9001      	str	r0, [sp, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	f1a1 0404 	sub.w	r4, r1, #4
 800778e:	bfb8      	it	lt
 8007790:	18e4      	addlt	r4, r4, r3
 8007792:	f7fe fa7f 	bl	8005c94 <__malloc_lock>
 8007796:	4a1e      	ldr	r2, [pc, #120]	; (8007810 <_free_r+0x94>)
 8007798:	9801      	ldr	r0, [sp, #4]
 800779a:	6813      	ldr	r3, [r2, #0]
 800779c:	b933      	cbnz	r3, 80077ac <_free_r+0x30>
 800779e:	6063      	str	r3, [r4, #4]
 80077a0:	6014      	str	r4, [r2, #0]
 80077a2:	b003      	add	sp, #12
 80077a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077a8:	f7fe ba7a 	b.w	8005ca0 <__malloc_unlock>
 80077ac:	42a3      	cmp	r3, r4
 80077ae:	d908      	bls.n	80077c2 <_free_r+0x46>
 80077b0:	6825      	ldr	r5, [r4, #0]
 80077b2:	1961      	adds	r1, r4, r5
 80077b4:	428b      	cmp	r3, r1
 80077b6:	bf01      	itttt	eq
 80077b8:	6819      	ldreq	r1, [r3, #0]
 80077ba:	685b      	ldreq	r3, [r3, #4]
 80077bc:	1949      	addeq	r1, r1, r5
 80077be:	6021      	streq	r1, [r4, #0]
 80077c0:	e7ed      	b.n	800779e <_free_r+0x22>
 80077c2:	461a      	mov	r2, r3
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	b10b      	cbz	r3, 80077cc <_free_r+0x50>
 80077c8:	42a3      	cmp	r3, r4
 80077ca:	d9fa      	bls.n	80077c2 <_free_r+0x46>
 80077cc:	6811      	ldr	r1, [r2, #0]
 80077ce:	1855      	adds	r5, r2, r1
 80077d0:	42a5      	cmp	r5, r4
 80077d2:	d10b      	bne.n	80077ec <_free_r+0x70>
 80077d4:	6824      	ldr	r4, [r4, #0]
 80077d6:	4421      	add	r1, r4
 80077d8:	1854      	adds	r4, r2, r1
 80077da:	42a3      	cmp	r3, r4
 80077dc:	6011      	str	r1, [r2, #0]
 80077de:	d1e0      	bne.n	80077a2 <_free_r+0x26>
 80077e0:	681c      	ldr	r4, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	6053      	str	r3, [r2, #4]
 80077e6:	440c      	add	r4, r1
 80077e8:	6014      	str	r4, [r2, #0]
 80077ea:	e7da      	b.n	80077a2 <_free_r+0x26>
 80077ec:	d902      	bls.n	80077f4 <_free_r+0x78>
 80077ee:	230c      	movs	r3, #12
 80077f0:	6003      	str	r3, [r0, #0]
 80077f2:	e7d6      	b.n	80077a2 <_free_r+0x26>
 80077f4:	6825      	ldr	r5, [r4, #0]
 80077f6:	1961      	adds	r1, r4, r5
 80077f8:	428b      	cmp	r3, r1
 80077fa:	bf04      	itt	eq
 80077fc:	6819      	ldreq	r1, [r3, #0]
 80077fe:	685b      	ldreq	r3, [r3, #4]
 8007800:	6063      	str	r3, [r4, #4]
 8007802:	bf04      	itt	eq
 8007804:	1949      	addeq	r1, r1, r5
 8007806:	6021      	streq	r1, [r4, #0]
 8007808:	6054      	str	r4, [r2, #4]
 800780a:	e7ca      	b.n	80077a2 <_free_r+0x26>
 800780c:	b003      	add	sp, #12
 800780e:	bd30      	pop	{r4, r5, pc}
 8007810:	20000350 	.word	0x20000350

08007814 <_Balloc>:
 8007814:	b570      	push	{r4, r5, r6, lr}
 8007816:	69c6      	ldr	r6, [r0, #28]
 8007818:	4604      	mov	r4, r0
 800781a:	460d      	mov	r5, r1
 800781c:	b976      	cbnz	r6, 800783c <_Balloc+0x28>
 800781e:	2010      	movs	r0, #16
 8007820:	f7fe f988 	bl	8005b34 <malloc>
 8007824:	4602      	mov	r2, r0
 8007826:	61e0      	str	r0, [r4, #28]
 8007828:	b920      	cbnz	r0, 8007834 <_Balloc+0x20>
 800782a:	4b18      	ldr	r3, [pc, #96]	; (800788c <_Balloc+0x78>)
 800782c:	4818      	ldr	r0, [pc, #96]	; (8007890 <_Balloc+0x7c>)
 800782e:	216b      	movs	r1, #107	; 0x6b
 8007830:	f000 fcac 	bl	800818c <__assert_func>
 8007834:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007838:	6006      	str	r6, [r0, #0]
 800783a:	60c6      	str	r6, [r0, #12]
 800783c:	69e6      	ldr	r6, [r4, #28]
 800783e:	68f3      	ldr	r3, [r6, #12]
 8007840:	b183      	cbz	r3, 8007864 <_Balloc+0x50>
 8007842:	69e3      	ldr	r3, [r4, #28]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800784a:	b9b8      	cbnz	r0, 800787c <_Balloc+0x68>
 800784c:	2101      	movs	r1, #1
 800784e:	fa01 f605 	lsl.w	r6, r1, r5
 8007852:	1d72      	adds	r2, r6, #5
 8007854:	0092      	lsls	r2, r2, #2
 8007856:	4620      	mov	r0, r4
 8007858:	f000 fcb6 	bl	80081c8 <_calloc_r>
 800785c:	b160      	cbz	r0, 8007878 <_Balloc+0x64>
 800785e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007862:	e00e      	b.n	8007882 <_Balloc+0x6e>
 8007864:	2221      	movs	r2, #33	; 0x21
 8007866:	2104      	movs	r1, #4
 8007868:	4620      	mov	r0, r4
 800786a:	f000 fcad 	bl	80081c8 <_calloc_r>
 800786e:	69e3      	ldr	r3, [r4, #28]
 8007870:	60f0      	str	r0, [r6, #12]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e4      	bne.n	8007842 <_Balloc+0x2e>
 8007878:	2000      	movs	r0, #0
 800787a:	bd70      	pop	{r4, r5, r6, pc}
 800787c:	6802      	ldr	r2, [r0, #0]
 800787e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007882:	2300      	movs	r3, #0
 8007884:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007888:	e7f7      	b.n	800787a <_Balloc+0x66>
 800788a:	bf00      	nop
 800788c:	08008659 	.word	0x08008659
 8007890:	080086d9 	.word	0x080086d9

08007894 <_Bfree>:
 8007894:	b570      	push	{r4, r5, r6, lr}
 8007896:	69c6      	ldr	r6, [r0, #28]
 8007898:	4605      	mov	r5, r0
 800789a:	460c      	mov	r4, r1
 800789c:	b976      	cbnz	r6, 80078bc <_Bfree+0x28>
 800789e:	2010      	movs	r0, #16
 80078a0:	f7fe f948 	bl	8005b34 <malloc>
 80078a4:	4602      	mov	r2, r0
 80078a6:	61e8      	str	r0, [r5, #28]
 80078a8:	b920      	cbnz	r0, 80078b4 <_Bfree+0x20>
 80078aa:	4b09      	ldr	r3, [pc, #36]	; (80078d0 <_Bfree+0x3c>)
 80078ac:	4809      	ldr	r0, [pc, #36]	; (80078d4 <_Bfree+0x40>)
 80078ae:	218f      	movs	r1, #143	; 0x8f
 80078b0:	f000 fc6c 	bl	800818c <__assert_func>
 80078b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078b8:	6006      	str	r6, [r0, #0]
 80078ba:	60c6      	str	r6, [r0, #12]
 80078bc:	b13c      	cbz	r4, 80078ce <_Bfree+0x3a>
 80078be:	69eb      	ldr	r3, [r5, #28]
 80078c0:	6862      	ldr	r2, [r4, #4]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078c8:	6021      	str	r1, [r4, #0]
 80078ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078ce:	bd70      	pop	{r4, r5, r6, pc}
 80078d0:	08008659 	.word	0x08008659
 80078d4:	080086d9 	.word	0x080086d9

080078d8 <__multadd>:
 80078d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078dc:	690d      	ldr	r5, [r1, #16]
 80078de:	4607      	mov	r7, r0
 80078e0:	460c      	mov	r4, r1
 80078e2:	461e      	mov	r6, r3
 80078e4:	f101 0c14 	add.w	ip, r1, #20
 80078e8:	2000      	movs	r0, #0
 80078ea:	f8dc 3000 	ldr.w	r3, [ip]
 80078ee:	b299      	uxth	r1, r3
 80078f0:	fb02 6101 	mla	r1, r2, r1, r6
 80078f4:	0c1e      	lsrs	r6, r3, #16
 80078f6:	0c0b      	lsrs	r3, r1, #16
 80078f8:	fb02 3306 	mla	r3, r2, r6, r3
 80078fc:	b289      	uxth	r1, r1
 80078fe:	3001      	adds	r0, #1
 8007900:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007904:	4285      	cmp	r5, r0
 8007906:	f84c 1b04 	str.w	r1, [ip], #4
 800790a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800790e:	dcec      	bgt.n	80078ea <__multadd+0x12>
 8007910:	b30e      	cbz	r6, 8007956 <__multadd+0x7e>
 8007912:	68a3      	ldr	r3, [r4, #8]
 8007914:	42ab      	cmp	r3, r5
 8007916:	dc19      	bgt.n	800794c <__multadd+0x74>
 8007918:	6861      	ldr	r1, [r4, #4]
 800791a:	4638      	mov	r0, r7
 800791c:	3101      	adds	r1, #1
 800791e:	f7ff ff79 	bl	8007814 <_Balloc>
 8007922:	4680      	mov	r8, r0
 8007924:	b928      	cbnz	r0, 8007932 <__multadd+0x5a>
 8007926:	4602      	mov	r2, r0
 8007928:	4b0c      	ldr	r3, [pc, #48]	; (800795c <__multadd+0x84>)
 800792a:	480d      	ldr	r0, [pc, #52]	; (8007960 <__multadd+0x88>)
 800792c:	21ba      	movs	r1, #186	; 0xba
 800792e:	f000 fc2d 	bl	800818c <__assert_func>
 8007932:	6922      	ldr	r2, [r4, #16]
 8007934:	3202      	adds	r2, #2
 8007936:	f104 010c 	add.w	r1, r4, #12
 800793a:	0092      	lsls	r2, r2, #2
 800793c:	300c      	adds	r0, #12
 800793e:	f000 fc17 	bl	8008170 <memcpy>
 8007942:	4621      	mov	r1, r4
 8007944:	4638      	mov	r0, r7
 8007946:	f7ff ffa5 	bl	8007894 <_Bfree>
 800794a:	4644      	mov	r4, r8
 800794c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007950:	3501      	adds	r5, #1
 8007952:	615e      	str	r6, [r3, #20]
 8007954:	6125      	str	r5, [r4, #16]
 8007956:	4620      	mov	r0, r4
 8007958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800795c:	080086c8 	.word	0x080086c8
 8007960:	080086d9 	.word	0x080086d9

08007964 <__hi0bits>:
 8007964:	0c03      	lsrs	r3, r0, #16
 8007966:	041b      	lsls	r3, r3, #16
 8007968:	b9d3      	cbnz	r3, 80079a0 <__hi0bits+0x3c>
 800796a:	0400      	lsls	r0, r0, #16
 800796c:	2310      	movs	r3, #16
 800796e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007972:	bf04      	itt	eq
 8007974:	0200      	lsleq	r0, r0, #8
 8007976:	3308      	addeq	r3, #8
 8007978:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800797c:	bf04      	itt	eq
 800797e:	0100      	lsleq	r0, r0, #4
 8007980:	3304      	addeq	r3, #4
 8007982:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007986:	bf04      	itt	eq
 8007988:	0080      	lsleq	r0, r0, #2
 800798a:	3302      	addeq	r3, #2
 800798c:	2800      	cmp	r0, #0
 800798e:	db05      	blt.n	800799c <__hi0bits+0x38>
 8007990:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007994:	f103 0301 	add.w	r3, r3, #1
 8007998:	bf08      	it	eq
 800799a:	2320      	moveq	r3, #32
 800799c:	4618      	mov	r0, r3
 800799e:	4770      	bx	lr
 80079a0:	2300      	movs	r3, #0
 80079a2:	e7e4      	b.n	800796e <__hi0bits+0xa>

080079a4 <__lo0bits>:
 80079a4:	6803      	ldr	r3, [r0, #0]
 80079a6:	f013 0207 	ands.w	r2, r3, #7
 80079aa:	d00c      	beq.n	80079c6 <__lo0bits+0x22>
 80079ac:	07d9      	lsls	r1, r3, #31
 80079ae:	d422      	bmi.n	80079f6 <__lo0bits+0x52>
 80079b0:	079a      	lsls	r2, r3, #30
 80079b2:	bf49      	itett	mi
 80079b4:	085b      	lsrmi	r3, r3, #1
 80079b6:	089b      	lsrpl	r3, r3, #2
 80079b8:	6003      	strmi	r3, [r0, #0]
 80079ba:	2201      	movmi	r2, #1
 80079bc:	bf5c      	itt	pl
 80079be:	6003      	strpl	r3, [r0, #0]
 80079c0:	2202      	movpl	r2, #2
 80079c2:	4610      	mov	r0, r2
 80079c4:	4770      	bx	lr
 80079c6:	b299      	uxth	r1, r3
 80079c8:	b909      	cbnz	r1, 80079ce <__lo0bits+0x2a>
 80079ca:	0c1b      	lsrs	r3, r3, #16
 80079cc:	2210      	movs	r2, #16
 80079ce:	b2d9      	uxtb	r1, r3
 80079d0:	b909      	cbnz	r1, 80079d6 <__lo0bits+0x32>
 80079d2:	3208      	adds	r2, #8
 80079d4:	0a1b      	lsrs	r3, r3, #8
 80079d6:	0719      	lsls	r1, r3, #28
 80079d8:	bf04      	itt	eq
 80079da:	091b      	lsreq	r3, r3, #4
 80079dc:	3204      	addeq	r2, #4
 80079de:	0799      	lsls	r1, r3, #30
 80079e0:	bf04      	itt	eq
 80079e2:	089b      	lsreq	r3, r3, #2
 80079e4:	3202      	addeq	r2, #2
 80079e6:	07d9      	lsls	r1, r3, #31
 80079e8:	d403      	bmi.n	80079f2 <__lo0bits+0x4e>
 80079ea:	085b      	lsrs	r3, r3, #1
 80079ec:	f102 0201 	add.w	r2, r2, #1
 80079f0:	d003      	beq.n	80079fa <__lo0bits+0x56>
 80079f2:	6003      	str	r3, [r0, #0]
 80079f4:	e7e5      	b.n	80079c2 <__lo0bits+0x1e>
 80079f6:	2200      	movs	r2, #0
 80079f8:	e7e3      	b.n	80079c2 <__lo0bits+0x1e>
 80079fa:	2220      	movs	r2, #32
 80079fc:	e7e1      	b.n	80079c2 <__lo0bits+0x1e>
	...

08007a00 <__i2b>:
 8007a00:	b510      	push	{r4, lr}
 8007a02:	460c      	mov	r4, r1
 8007a04:	2101      	movs	r1, #1
 8007a06:	f7ff ff05 	bl	8007814 <_Balloc>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	b928      	cbnz	r0, 8007a1a <__i2b+0x1a>
 8007a0e:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <__i2b+0x24>)
 8007a10:	4805      	ldr	r0, [pc, #20]	; (8007a28 <__i2b+0x28>)
 8007a12:	f240 1145 	movw	r1, #325	; 0x145
 8007a16:	f000 fbb9 	bl	800818c <__assert_func>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	6144      	str	r4, [r0, #20]
 8007a1e:	6103      	str	r3, [r0, #16]
 8007a20:	bd10      	pop	{r4, pc}
 8007a22:	bf00      	nop
 8007a24:	080086c8 	.word	0x080086c8
 8007a28:	080086d9 	.word	0x080086d9

08007a2c <__multiply>:
 8007a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a30:	4691      	mov	r9, r2
 8007a32:	690a      	ldr	r2, [r1, #16]
 8007a34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	bfb8      	it	lt
 8007a3c:	460b      	movlt	r3, r1
 8007a3e:	460c      	mov	r4, r1
 8007a40:	bfbc      	itt	lt
 8007a42:	464c      	movlt	r4, r9
 8007a44:	4699      	movlt	r9, r3
 8007a46:	6927      	ldr	r7, [r4, #16]
 8007a48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a4c:	68a3      	ldr	r3, [r4, #8]
 8007a4e:	6861      	ldr	r1, [r4, #4]
 8007a50:	eb07 060a 	add.w	r6, r7, sl
 8007a54:	42b3      	cmp	r3, r6
 8007a56:	b085      	sub	sp, #20
 8007a58:	bfb8      	it	lt
 8007a5a:	3101      	addlt	r1, #1
 8007a5c:	f7ff feda 	bl	8007814 <_Balloc>
 8007a60:	b930      	cbnz	r0, 8007a70 <__multiply+0x44>
 8007a62:	4602      	mov	r2, r0
 8007a64:	4b44      	ldr	r3, [pc, #272]	; (8007b78 <__multiply+0x14c>)
 8007a66:	4845      	ldr	r0, [pc, #276]	; (8007b7c <__multiply+0x150>)
 8007a68:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007a6c:	f000 fb8e 	bl	800818c <__assert_func>
 8007a70:	f100 0514 	add.w	r5, r0, #20
 8007a74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a78:	462b      	mov	r3, r5
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	4543      	cmp	r3, r8
 8007a7e:	d321      	bcc.n	8007ac4 <__multiply+0x98>
 8007a80:	f104 0314 	add.w	r3, r4, #20
 8007a84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a88:	f109 0314 	add.w	r3, r9, #20
 8007a8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a90:	9202      	str	r2, [sp, #8]
 8007a92:	1b3a      	subs	r2, r7, r4
 8007a94:	3a15      	subs	r2, #21
 8007a96:	f022 0203 	bic.w	r2, r2, #3
 8007a9a:	3204      	adds	r2, #4
 8007a9c:	f104 0115 	add.w	r1, r4, #21
 8007aa0:	428f      	cmp	r7, r1
 8007aa2:	bf38      	it	cc
 8007aa4:	2204      	movcc	r2, #4
 8007aa6:	9201      	str	r2, [sp, #4]
 8007aa8:	9a02      	ldr	r2, [sp, #8]
 8007aaa:	9303      	str	r3, [sp, #12]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d80c      	bhi.n	8007aca <__multiply+0x9e>
 8007ab0:	2e00      	cmp	r6, #0
 8007ab2:	dd03      	ble.n	8007abc <__multiply+0x90>
 8007ab4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d05b      	beq.n	8007b74 <__multiply+0x148>
 8007abc:	6106      	str	r6, [r0, #16]
 8007abe:	b005      	add	sp, #20
 8007ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac4:	f843 2b04 	str.w	r2, [r3], #4
 8007ac8:	e7d8      	b.n	8007a7c <__multiply+0x50>
 8007aca:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ace:	f1ba 0f00 	cmp.w	sl, #0
 8007ad2:	d024      	beq.n	8007b1e <__multiply+0xf2>
 8007ad4:	f104 0e14 	add.w	lr, r4, #20
 8007ad8:	46a9      	mov	r9, r5
 8007ada:	f04f 0c00 	mov.w	ip, #0
 8007ade:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ae2:	f8d9 1000 	ldr.w	r1, [r9]
 8007ae6:	fa1f fb82 	uxth.w	fp, r2
 8007aea:	b289      	uxth	r1, r1
 8007aec:	fb0a 110b 	mla	r1, sl, fp, r1
 8007af0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007af4:	f8d9 2000 	ldr.w	r2, [r9]
 8007af8:	4461      	add	r1, ip
 8007afa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007afe:	fb0a c20b 	mla	r2, sl, fp, ip
 8007b02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b06:	b289      	uxth	r1, r1
 8007b08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b0c:	4577      	cmp	r7, lr
 8007b0e:	f849 1b04 	str.w	r1, [r9], #4
 8007b12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b16:	d8e2      	bhi.n	8007ade <__multiply+0xb2>
 8007b18:	9a01      	ldr	r2, [sp, #4]
 8007b1a:	f845 c002 	str.w	ip, [r5, r2]
 8007b1e:	9a03      	ldr	r2, [sp, #12]
 8007b20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b24:	3304      	adds	r3, #4
 8007b26:	f1b9 0f00 	cmp.w	r9, #0
 8007b2a:	d021      	beq.n	8007b70 <__multiply+0x144>
 8007b2c:	6829      	ldr	r1, [r5, #0]
 8007b2e:	f104 0c14 	add.w	ip, r4, #20
 8007b32:	46ae      	mov	lr, r5
 8007b34:	f04f 0a00 	mov.w	sl, #0
 8007b38:	f8bc b000 	ldrh.w	fp, [ip]
 8007b3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b40:	fb09 220b 	mla	r2, r9, fp, r2
 8007b44:	4452      	add	r2, sl
 8007b46:	b289      	uxth	r1, r1
 8007b48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b4c:	f84e 1b04 	str.w	r1, [lr], #4
 8007b50:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007b54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b58:	f8be 1000 	ldrh.w	r1, [lr]
 8007b5c:	fb09 110a 	mla	r1, r9, sl, r1
 8007b60:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007b64:	4567      	cmp	r7, ip
 8007b66:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b6a:	d8e5      	bhi.n	8007b38 <__multiply+0x10c>
 8007b6c:	9a01      	ldr	r2, [sp, #4]
 8007b6e:	50a9      	str	r1, [r5, r2]
 8007b70:	3504      	adds	r5, #4
 8007b72:	e799      	b.n	8007aa8 <__multiply+0x7c>
 8007b74:	3e01      	subs	r6, #1
 8007b76:	e79b      	b.n	8007ab0 <__multiply+0x84>
 8007b78:	080086c8 	.word	0x080086c8
 8007b7c:	080086d9 	.word	0x080086d9

08007b80 <__pow5mult>:
 8007b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b84:	4615      	mov	r5, r2
 8007b86:	f012 0203 	ands.w	r2, r2, #3
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	460f      	mov	r7, r1
 8007b8e:	d007      	beq.n	8007ba0 <__pow5mult+0x20>
 8007b90:	4c25      	ldr	r4, [pc, #148]	; (8007c28 <__pow5mult+0xa8>)
 8007b92:	3a01      	subs	r2, #1
 8007b94:	2300      	movs	r3, #0
 8007b96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b9a:	f7ff fe9d 	bl	80078d8 <__multadd>
 8007b9e:	4607      	mov	r7, r0
 8007ba0:	10ad      	asrs	r5, r5, #2
 8007ba2:	d03d      	beq.n	8007c20 <__pow5mult+0xa0>
 8007ba4:	69f4      	ldr	r4, [r6, #28]
 8007ba6:	b97c      	cbnz	r4, 8007bc8 <__pow5mult+0x48>
 8007ba8:	2010      	movs	r0, #16
 8007baa:	f7fd ffc3 	bl	8005b34 <malloc>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	61f0      	str	r0, [r6, #28]
 8007bb2:	b928      	cbnz	r0, 8007bc0 <__pow5mult+0x40>
 8007bb4:	4b1d      	ldr	r3, [pc, #116]	; (8007c2c <__pow5mult+0xac>)
 8007bb6:	481e      	ldr	r0, [pc, #120]	; (8007c30 <__pow5mult+0xb0>)
 8007bb8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007bbc:	f000 fae6 	bl	800818c <__assert_func>
 8007bc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bc4:	6004      	str	r4, [r0, #0]
 8007bc6:	60c4      	str	r4, [r0, #12]
 8007bc8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007bcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bd0:	b94c      	cbnz	r4, 8007be6 <__pow5mult+0x66>
 8007bd2:	f240 2171 	movw	r1, #625	; 0x271
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f7ff ff12 	bl	8007a00 <__i2b>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f8c8 0008 	str.w	r0, [r8, #8]
 8007be2:	4604      	mov	r4, r0
 8007be4:	6003      	str	r3, [r0, #0]
 8007be6:	f04f 0900 	mov.w	r9, #0
 8007bea:	07eb      	lsls	r3, r5, #31
 8007bec:	d50a      	bpl.n	8007c04 <__pow5mult+0x84>
 8007bee:	4639      	mov	r1, r7
 8007bf0:	4622      	mov	r2, r4
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f7ff ff1a 	bl	8007a2c <__multiply>
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	4680      	mov	r8, r0
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f7ff fe49 	bl	8007894 <_Bfree>
 8007c02:	4647      	mov	r7, r8
 8007c04:	106d      	asrs	r5, r5, #1
 8007c06:	d00b      	beq.n	8007c20 <__pow5mult+0xa0>
 8007c08:	6820      	ldr	r0, [r4, #0]
 8007c0a:	b938      	cbnz	r0, 8007c1c <__pow5mult+0x9c>
 8007c0c:	4622      	mov	r2, r4
 8007c0e:	4621      	mov	r1, r4
 8007c10:	4630      	mov	r0, r6
 8007c12:	f7ff ff0b 	bl	8007a2c <__multiply>
 8007c16:	6020      	str	r0, [r4, #0]
 8007c18:	f8c0 9000 	str.w	r9, [r0]
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	e7e4      	b.n	8007bea <__pow5mult+0x6a>
 8007c20:	4638      	mov	r0, r7
 8007c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c26:	bf00      	nop
 8007c28:	08008828 	.word	0x08008828
 8007c2c:	08008659 	.word	0x08008659
 8007c30:	080086d9 	.word	0x080086d9

08007c34 <__lshift>:
 8007c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	460c      	mov	r4, r1
 8007c3a:	6849      	ldr	r1, [r1, #4]
 8007c3c:	6923      	ldr	r3, [r4, #16]
 8007c3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c42:	68a3      	ldr	r3, [r4, #8]
 8007c44:	4607      	mov	r7, r0
 8007c46:	4691      	mov	r9, r2
 8007c48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c4c:	f108 0601 	add.w	r6, r8, #1
 8007c50:	42b3      	cmp	r3, r6
 8007c52:	db0b      	blt.n	8007c6c <__lshift+0x38>
 8007c54:	4638      	mov	r0, r7
 8007c56:	f7ff fddd 	bl	8007814 <_Balloc>
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	b948      	cbnz	r0, 8007c72 <__lshift+0x3e>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	4b28      	ldr	r3, [pc, #160]	; (8007d04 <__lshift+0xd0>)
 8007c62:	4829      	ldr	r0, [pc, #164]	; (8007d08 <__lshift+0xd4>)
 8007c64:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007c68:	f000 fa90 	bl	800818c <__assert_func>
 8007c6c:	3101      	adds	r1, #1
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	e7ee      	b.n	8007c50 <__lshift+0x1c>
 8007c72:	2300      	movs	r3, #0
 8007c74:	f100 0114 	add.w	r1, r0, #20
 8007c78:	f100 0210 	add.w	r2, r0, #16
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	4553      	cmp	r3, sl
 8007c80:	db33      	blt.n	8007cea <__lshift+0xb6>
 8007c82:	6920      	ldr	r0, [r4, #16]
 8007c84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c88:	f104 0314 	add.w	r3, r4, #20
 8007c8c:	f019 091f 	ands.w	r9, r9, #31
 8007c90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c98:	d02b      	beq.n	8007cf2 <__lshift+0xbe>
 8007c9a:	f1c9 0e20 	rsb	lr, r9, #32
 8007c9e:	468a      	mov	sl, r1
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	6818      	ldr	r0, [r3, #0]
 8007ca4:	fa00 f009 	lsl.w	r0, r0, r9
 8007ca8:	4310      	orrs	r0, r2
 8007caa:	f84a 0b04 	str.w	r0, [sl], #4
 8007cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cb2:	459c      	cmp	ip, r3
 8007cb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007cb8:	d8f3      	bhi.n	8007ca2 <__lshift+0x6e>
 8007cba:	ebac 0304 	sub.w	r3, ip, r4
 8007cbe:	3b15      	subs	r3, #21
 8007cc0:	f023 0303 	bic.w	r3, r3, #3
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	f104 0015 	add.w	r0, r4, #21
 8007cca:	4584      	cmp	ip, r0
 8007ccc:	bf38      	it	cc
 8007cce:	2304      	movcc	r3, #4
 8007cd0:	50ca      	str	r2, [r1, r3]
 8007cd2:	b10a      	cbz	r2, 8007cd8 <__lshift+0xa4>
 8007cd4:	f108 0602 	add.w	r6, r8, #2
 8007cd8:	3e01      	subs	r6, #1
 8007cda:	4638      	mov	r0, r7
 8007cdc:	612e      	str	r6, [r5, #16]
 8007cde:	4621      	mov	r1, r4
 8007ce0:	f7ff fdd8 	bl	8007894 <_Bfree>
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cea:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cee:	3301      	adds	r3, #1
 8007cf0:	e7c5      	b.n	8007c7e <__lshift+0x4a>
 8007cf2:	3904      	subs	r1, #4
 8007cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cf8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cfc:	459c      	cmp	ip, r3
 8007cfe:	d8f9      	bhi.n	8007cf4 <__lshift+0xc0>
 8007d00:	e7ea      	b.n	8007cd8 <__lshift+0xa4>
 8007d02:	bf00      	nop
 8007d04:	080086c8 	.word	0x080086c8
 8007d08:	080086d9 	.word	0x080086d9

08007d0c <__mcmp>:
 8007d0c:	b530      	push	{r4, r5, lr}
 8007d0e:	6902      	ldr	r2, [r0, #16]
 8007d10:	690c      	ldr	r4, [r1, #16]
 8007d12:	1b12      	subs	r2, r2, r4
 8007d14:	d10e      	bne.n	8007d34 <__mcmp+0x28>
 8007d16:	f100 0314 	add.w	r3, r0, #20
 8007d1a:	3114      	adds	r1, #20
 8007d1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007d28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007d2c:	42a5      	cmp	r5, r4
 8007d2e:	d003      	beq.n	8007d38 <__mcmp+0x2c>
 8007d30:	d305      	bcc.n	8007d3e <__mcmp+0x32>
 8007d32:	2201      	movs	r2, #1
 8007d34:	4610      	mov	r0, r2
 8007d36:	bd30      	pop	{r4, r5, pc}
 8007d38:	4283      	cmp	r3, r0
 8007d3a:	d3f3      	bcc.n	8007d24 <__mcmp+0x18>
 8007d3c:	e7fa      	b.n	8007d34 <__mcmp+0x28>
 8007d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d42:	e7f7      	b.n	8007d34 <__mcmp+0x28>

08007d44 <__mdiff>:
 8007d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d48:	460c      	mov	r4, r1
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	4620      	mov	r0, r4
 8007d50:	4690      	mov	r8, r2
 8007d52:	f7ff ffdb 	bl	8007d0c <__mcmp>
 8007d56:	1e05      	subs	r5, r0, #0
 8007d58:	d110      	bne.n	8007d7c <__mdiff+0x38>
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f7ff fd59 	bl	8007814 <_Balloc>
 8007d62:	b930      	cbnz	r0, 8007d72 <__mdiff+0x2e>
 8007d64:	4b3a      	ldr	r3, [pc, #232]	; (8007e50 <__mdiff+0x10c>)
 8007d66:	4602      	mov	r2, r0
 8007d68:	f240 2137 	movw	r1, #567	; 0x237
 8007d6c:	4839      	ldr	r0, [pc, #228]	; (8007e54 <__mdiff+0x110>)
 8007d6e:	f000 fa0d 	bl	800818c <__assert_func>
 8007d72:	2301      	movs	r3, #1
 8007d74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7c:	bfa4      	itt	ge
 8007d7e:	4643      	movge	r3, r8
 8007d80:	46a0      	movge	r8, r4
 8007d82:	4630      	mov	r0, r6
 8007d84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d88:	bfa6      	itte	ge
 8007d8a:	461c      	movge	r4, r3
 8007d8c:	2500      	movge	r5, #0
 8007d8e:	2501      	movlt	r5, #1
 8007d90:	f7ff fd40 	bl	8007814 <_Balloc>
 8007d94:	b920      	cbnz	r0, 8007da0 <__mdiff+0x5c>
 8007d96:	4b2e      	ldr	r3, [pc, #184]	; (8007e50 <__mdiff+0x10c>)
 8007d98:	4602      	mov	r2, r0
 8007d9a:	f240 2145 	movw	r1, #581	; 0x245
 8007d9e:	e7e5      	b.n	8007d6c <__mdiff+0x28>
 8007da0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007da4:	6926      	ldr	r6, [r4, #16]
 8007da6:	60c5      	str	r5, [r0, #12]
 8007da8:	f104 0914 	add.w	r9, r4, #20
 8007dac:	f108 0514 	add.w	r5, r8, #20
 8007db0:	f100 0e14 	add.w	lr, r0, #20
 8007db4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007db8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007dbc:	f108 0210 	add.w	r2, r8, #16
 8007dc0:	46f2      	mov	sl, lr
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007dc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007dcc:	fa11 f88b 	uxtah	r8, r1, fp
 8007dd0:	b299      	uxth	r1, r3
 8007dd2:	0c1b      	lsrs	r3, r3, #16
 8007dd4:	eba8 0801 	sub.w	r8, r8, r1
 8007dd8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ddc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007de0:	fa1f f888 	uxth.w	r8, r8
 8007de4:	1419      	asrs	r1, r3, #16
 8007de6:	454e      	cmp	r6, r9
 8007de8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007dec:	f84a 3b04 	str.w	r3, [sl], #4
 8007df0:	d8e8      	bhi.n	8007dc4 <__mdiff+0x80>
 8007df2:	1b33      	subs	r3, r6, r4
 8007df4:	3b15      	subs	r3, #21
 8007df6:	f023 0303 	bic.w	r3, r3, #3
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	3415      	adds	r4, #21
 8007dfe:	42a6      	cmp	r6, r4
 8007e00:	bf38      	it	cc
 8007e02:	2304      	movcc	r3, #4
 8007e04:	441d      	add	r5, r3
 8007e06:	4473      	add	r3, lr
 8007e08:	469e      	mov	lr, r3
 8007e0a:	462e      	mov	r6, r5
 8007e0c:	4566      	cmp	r6, ip
 8007e0e:	d30e      	bcc.n	8007e2e <__mdiff+0xea>
 8007e10:	f10c 0203 	add.w	r2, ip, #3
 8007e14:	1b52      	subs	r2, r2, r5
 8007e16:	f022 0203 	bic.w	r2, r2, #3
 8007e1a:	3d03      	subs	r5, #3
 8007e1c:	45ac      	cmp	ip, r5
 8007e1e:	bf38      	it	cc
 8007e20:	2200      	movcc	r2, #0
 8007e22:	4413      	add	r3, r2
 8007e24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007e28:	b17a      	cbz	r2, 8007e4a <__mdiff+0x106>
 8007e2a:	6107      	str	r7, [r0, #16]
 8007e2c:	e7a4      	b.n	8007d78 <__mdiff+0x34>
 8007e2e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007e32:	fa11 f288 	uxtah	r2, r1, r8
 8007e36:	1414      	asrs	r4, r2, #16
 8007e38:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e3c:	b292      	uxth	r2, r2
 8007e3e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007e42:	f84e 2b04 	str.w	r2, [lr], #4
 8007e46:	1421      	asrs	r1, r4, #16
 8007e48:	e7e0      	b.n	8007e0c <__mdiff+0xc8>
 8007e4a:	3f01      	subs	r7, #1
 8007e4c:	e7ea      	b.n	8007e24 <__mdiff+0xe0>
 8007e4e:	bf00      	nop
 8007e50:	080086c8 	.word	0x080086c8
 8007e54:	080086d9 	.word	0x080086d9

08007e58 <__d2b>:
 8007e58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e5c:	460f      	mov	r7, r1
 8007e5e:	2101      	movs	r1, #1
 8007e60:	ec59 8b10 	vmov	r8, r9, d0
 8007e64:	4616      	mov	r6, r2
 8007e66:	f7ff fcd5 	bl	8007814 <_Balloc>
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	b930      	cbnz	r0, 8007e7c <__d2b+0x24>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	4b24      	ldr	r3, [pc, #144]	; (8007f04 <__d2b+0xac>)
 8007e72:	4825      	ldr	r0, [pc, #148]	; (8007f08 <__d2b+0xb0>)
 8007e74:	f240 310f 	movw	r1, #783	; 0x30f
 8007e78:	f000 f988 	bl	800818c <__assert_func>
 8007e7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e84:	bb2d      	cbnz	r5, 8007ed2 <__d2b+0x7a>
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	f1b8 0300 	subs.w	r3, r8, #0
 8007e8c:	d026      	beq.n	8007edc <__d2b+0x84>
 8007e8e:	4668      	mov	r0, sp
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	f7ff fd87 	bl	80079a4 <__lo0bits>
 8007e96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e9a:	b1e8      	cbz	r0, 8007ed8 <__d2b+0x80>
 8007e9c:	f1c0 0320 	rsb	r3, r0, #32
 8007ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea4:	430b      	orrs	r3, r1
 8007ea6:	40c2      	lsrs	r2, r0
 8007ea8:	6163      	str	r3, [r4, #20]
 8007eaa:	9201      	str	r2, [sp, #4]
 8007eac:	9b01      	ldr	r3, [sp, #4]
 8007eae:	61a3      	str	r3, [r4, #24]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	bf14      	ite	ne
 8007eb4:	2202      	movne	r2, #2
 8007eb6:	2201      	moveq	r2, #1
 8007eb8:	6122      	str	r2, [r4, #16]
 8007eba:	b1bd      	cbz	r5, 8007eec <__d2b+0x94>
 8007ebc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ec0:	4405      	add	r5, r0
 8007ec2:	603d      	str	r5, [r7, #0]
 8007ec4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ec8:	6030      	str	r0, [r6, #0]
 8007eca:	4620      	mov	r0, r4
 8007ecc:	b003      	add	sp, #12
 8007ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ed6:	e7d6      	b.n	8007e86 <__d2b+0x2e>
 8007ed8:	6161      	str	r1, [r4, #20]
 8007eda:	e7e7      	b.n	8007eac <__d2b+0x54>
 8007edc:	a801      	add	r0, sp, #4
 8007ede:	f7ff fd61 	bl	80079a4 <__lo0bits>
 8007ee2:	9b01      	ldr	r3, [sp, #4]
 8007ee4:	6163      	str	r3, [r4, #20]
 8007ee6:	3020      	adds	r0, #32
 8007ee8:	2201      	movs	r2, #1
 8007eea:	e7e5      	b.n	8007eb8 <__d2b+0x60>
 8007eec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ef0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ef4:	6038      	str	r0, [r7, #0]
 8007ef6:	6918      	ldr	r0, [r3, #16]
 8007ef8:	f7ff fd34 	bl	8007964 <__hi0bits>
 8007efc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f00:	e7e2      	b.n	8007ec8 <__d2b+0x70>
 8007f02:	bf00      	nop
 8007f04:	080086c8 	.word	0x080086c8
 8007f08:	080086d9 	.word	0x080086d9

08007f0c <__sflush_r>:
 8007f0c:	898a      	ldrh	r2, [r1, #12]
 8007f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f12:	4605      	mov	r5, r0
 8007f14:	0710      	lsls	r0, r2, #28
 8007f16:	460c      	mov	r4, r1
 8007f18:	d458      	bmi.n	8007fcc <__sflush_r+0xc0>
 8007f1a:	684b      	ldr	r3, [r1, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	dc05      	bgt.n	8007f2c <__sflush_r+0x20>
 8007f20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	dc02      	bgt.n	8007f2c <__sflush_r+0x20>
 8007f26:	2000      	movs	r0, #0
 8007f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f2e:	2e00      	cmp	r6, #0
 8007f30:	d0f9      	beq.n	8007f26 <__sflush_r+0x1a>
 8007f32:	2300      	movs	r3, #0
 8007f34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f38:	682f      	ldr	r7, [r5, #0]
 8007f3a:	6a21      	ldr	r1, [r4, #32]
 8007f3c:	602b      	str	r3, [r5, #0]
 8007f3e:	d032      	beq.n	8007fa6 <__sflush_r+0x9a>
 8007f40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	075a      	lsls	r2, r3, #29
 8007f46:	d505      	bpl.n	8007f54 <__sflush_r+0x48>
 8007f48:	6863      	ldr	r3, [r4, #4]
 8007f4a:	1ac0      	subs	r0, r0, r3
 8007f4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f4e:	b10b      	cbz	r3, 8007f54 <__sflush_r+0x48>
 8007f50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f52:	1ac0      	subs	r0, r0, r3
 8007f54:	2300      	movs	r3, #0
 8007f56:	4602      	mov	r2, r0
 8007f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f5a:	6a21      	ldr	r1, [r4, #32]
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	47b0      	blx	r6
 8007f60:	1c43      	adds	r3, r0, #1
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	d106      	bne.n	8007f74 <__sflush_r+0x68>
 8007f66:	6829      	ldr	r1, [r5, #0]
 8007f68:	291d      	cmp	r1, #29
 8007f6a:	d82b      	bhi.n	8007fc4 <__sflush_r+0xb8>
 8007f6c:	4a29      	ldr	r2, [pc, #164]	; (8008014 <__sflush_r+0x108>)
 8007f6e:	410a      	asrs	r2, r1
 8007f70:	07d6      	lsls	r6, r2, #31
 8007f72:	d427      	bmi.n	8007fc4 <__sflush_r+0xb8>
 8007f74:	2200      	movs	r2, #0
 8007f76:	6062      	str	r2, [r4, #4]
 8007f78:	04d9      	lsls	r1, r3, #19
 8007f7a:	6922      	ldr	r2, [r4, #16]
 8007f7c:	6022      	str	r2, [r4, #0]
 8007f7e:	d504      	bpl.n	8007f8a <__sflush_r+0x7e>
 8007f80:	1c42      	adds	r2, r0, #1
 8007f82:	d101      	bne.n	8007f88 <__sflush_r+0x7c>
 8007f84:	682b      	ldr	r3, [r5, #0]
 8007f86:	b903      	cbnz	r3, 8007f8a <__sflush_r+0x7e>
 8007f88:	6560      	str	r0, [r4, #84]	; 0x54
 8007f8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f8c:	602f      	str	r7, [r5, #0]
 8007f8e:	2900      	cmp	r1, #0
 8007f90:	d0c9      	beq.n	8007f26 <__sflush_r+0x1a>
 8007f92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f96:	4299      	cmp	r1, r3
 8007f98:	d002      	beq.n	8007fa0 <__sflush_r+0x94>
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f7ff fbee 	bl	800777c <_free_r>
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	6360      	str	r0, [r4, #52]	; 0x34
 8007fa4:	e7c0      	b.n	8007f28 <__sflush_r+0x1c>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	4628      	mov	r0, r5
 8007faa:	47b0      	blx	r6
 8007fac:	1c41      	adds	r1, r0, #1
 8007fae:	d1c8      	bne.n	8007f42 <__sflush_r+0x36>
 8007fb0:	682b      	ldr	r3, [r5, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d0c5      	beq.n	8007f42 <__sflush_r+0x36>
 8007fb6:	2b1d      	cmp	r3, #29
 8007fb8:	d001      	beq.n	8007fbe <__sflush_r+0xb2>
 8007fba:	2b16      	cmp	r3, #22
 8007fbc:	d101      	bne.n	8007fc2 <__sflush_r+0xb6>
 8007fbe:	602f      	str	r7, [r5, #0]
 8007fc0:	e7b1      	b.n	8007f26 <__sflush_r+0x1a>
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fc8:	81a3      	strh	r3, [r4, #12]
 8007fca:	e7ad      	b.n	8007f28 <__sflush_r+0x1c>
 8007fcc:	690f      	ldr	r7, [r1, #16]
 8007fce:	2f00      	cmp	r7, #0
 8007fd0:	d0a9      	beq.n	8007f26 <__sflush_r+0x1a>
 8007fd2:	0793      	lsls	r3, r2, #30
 8007fd4:	680e      	ldr	r6, [r1, #0]
 8007fd6:	bf08      	it	eq
 8007fd8:	694b      	ldreq	r3, [r1, #20]
 8007fda:	600f      	str	r7, [r1, #0]
 8007fdc:	bf18      	it	ne
 8007fde:	2300      	movne	r3, #0
 8007fe0:	eba6 0807 	sub.w	r8, r6, r7
 8007fe4:	608b      	str	r3, [r1, #8]
 8007fe6:	f1b8 0f00 	cmp.w	r8, #0
 8007fea:	dd9c      	ble.n	8007f26 <__sflush_r+0x1a>
 8007fec:	6a21      	ldr	r1, [r4, #32]
 8007fee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ff0:	4643      	mov	r3, r8
 8007ff2:	463a      	mov	r2, r7
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b0      	blx	r6
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	dc06      	bgt.n	800800a <__sflush_r+0xfe>
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008002:	81a3      	strh	r3, [r4, #12]
 8008004:	f04f 30ff 	mov.w	r0, #4294967295
 8008008:	e78e      	b.n	8007f28 <__sflush_r+0x1c>
 800800a:	4407      	add	r7, r0
 800800c:	eba8 0800 	sub.w	r8, r8, r0
 8008010:	e7e9      	b.n	8007fe6 <__sflush_r+0xda>
 8008012:	bf00      	nop
 8008014:	dfbffffe 	.word	0xdfbffffe

08008018 <_fflush_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	690b      	ldr	r3, [r1, #16]
 800801c:	4605      	mov	r5, r0
 800801e:	460c      	mov	r4, r1
 8008020:	b913      	cbnz	r3, 8008028 <_fflush_r+0x10>
 8008022:	2500      	movs	r5, #0
 8008024:	4628      	mov	r0, r5
 8008026:	bd38      	pop	{r3, r4, r5, pc}
 8008028:	b118      	cbz	r0, 8008032 <_fflush_r+0x1a>
 800802a:	6a03      	ldr	r3, [r0, #32]
 800802c:	b90b      	cbnz	r3, 8008032 <_fflush_r+0x1a>
 800802e:	f7fe fb2f 	bl	8006690 <__sinit>
 8008032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d0f3      	beq.n	8008022 <_fflush_r+0xa>
 800803a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800803c:	07d0      	lsls	r0, r2, #31
 800803e:	d404      	bmi.n	800804a <_fflush_r+0x32>
 8008040:	0599      	lsls	r1, r3, #22
 8008042:	d402      	bmi.n	800804a <_fflush_r+0x32>
 8008044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008046:	f7fe fd1a 	bl	8006a7e <__retarget_lock_acquire_recursive>
 800804a:	4628      	mov	r0, r5
 800804c:	4621      	mov	r1, r4
 800804e:	f7ff ff5d 	bl	8007f0c <__sflush_r>
 8008052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008054:	07da      	lsls	r2, r3, #31
 8008056:	4605      	mov	r5, r0
 8008058:	d4e4      	bmi.n	8008024 <_fflush_r+0xc>
 800805a:	89a3      	ldrh	r3, [r4, #12]
 800805c:	059b      	lsls	r3, r3, #22
 800805e:	d4e1      	bmi.n	8008024 <_fflush_r+0xc>
 8008060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008062:	f7fe fd0d 	bl	8006a80 <__retarget_lock_release_recursive>
 8008066:	e7dd      	b.n	8008024 <_fflush_r+0xc>

08008068 <__swhatbuf_r>:
 8008068:	b570      	push	{r4, r5, r6, lr}
 800806a:	460c      	mov	r4, r1
 800806c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008070:	2900      	cmp	r1, #0
 8008072:	b096      	sub	sp, #88	; 0x58
 8008074:	4615      	mov	r5, r2
 8008076:	461e      	mov	r6, r3
 8008078:	da0d      	bge.n	8008096 <__swhatbuf_r+0x2e>
 800807a:	89a3      	ldrh	r3, [r4, #12]
 800807c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008080:	f04f 0100 	mov.w	r1, #0
 8008084:	bf0c      	ite	eq
 8008086:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800808a:	2340      	movne	r3, #64	; 0x40
 800808c:	2000      	movs	r0, #0
 800808e:	6031      	str	r1, [r6, #0]
 8008090:	602b      	str	r3, [r5, #0]
 8008092:	b016      	add	sp, #88	; 0x58
 8008094:	bd70      	pop	{r4, r5, r6, pc}
 8008096:	466a      	mov	r2, sp
 8008098:	f000 f848 	bl	800812c <_fstat_r>
 800809c:	2800      	cmp	r0, #0
 800809e:	dbec      	blt.n	800807a <__swhatbuf_r+0x12>
 80080a0:	9901      	ldr	r1, [sp, #4]
 80080a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80080a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80080aa:	4259      	negs	r1, r3
 80080ac:	4159      	adcs	r1, r3
 80080ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080b2:	e7eb      	b.n	800808c <__swhatbuf_r+0x24>

080080b4 <__smakebuf_r>:
 80080b4:	898b      	ldrh	r3, [r1, #12]
 80080b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080b8:	079d      	lsls	r5, r3, #30
 80080ba:	4606      	mov	r6, r0
 80080bc:	460c      	mov	r4, r1
 80080be:	d507      	bpl.n	80080d0 <__smakebuf_r+0x1c>
 80080c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080c4:	6023      	str	r3, [r4, #0]
 80080c6:	6123      	str	r3, [r4, #16]
 80080c8:	2301      	movs	r3, #1
 80080ca:	6163      	str	r3, [r4, #20]
 80080cc:	b002      	add	sp, #8
 80080ce:	bd70      	pop	{r4, r5, r6, pc}
 80080d0:	ab01      	add	r3, sp, #4
 80080d2:	466a      	mov	r2, sp
 80080d4:	f7ff ffc8 	bl	8008068 <__swhatbuf_r>
 80080d8:	9900      	ldr	r1, [sp, #0]
 80080da:	4605      	mov	r5, r0
 80080dc:	4630      	mov	r0, r6
 80080de:	f7fd fd59 	bl	8005b94 <_malloc_r>
 80080e2:	b948      	cbnz	r0, 80080f8 <__smakebuf_r+0x44>
 80080e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080e8:	059a      	lsls	r2, r3, #22
 80080ea:	d4ef      	bmi.n	80080cc <__smakebuf_r+0x18>
 80080ec:	f023 0303 	bic.w	r3, r3, #3
 80080f0:	f043 0302 	orr.w	r3, r3, #2
 80080f4:	81a3      	strh	r3, [r4, #12]
 80080f6:	e7e3      	b.n	80080c0 <__smakebuf_r+0xc>
 80080f8:	89a3      	ldrh	r3, [r4, #12]
 80080fa:	6020      	str	r0, [r4, #0]
 80080fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008100:	81a3      	strh	r3, [r4, #12]
 8008102:	9b00      	ldr	r3, [sp, #0]
 8008104:	6163      	str	r3, [r4, #20]
 8008106:	9b01      	ldr	r3, [sp, #4]
 8008108:	6120      	str	r0, [r4, #16]
 800810a:	b15b      	cbz	r3, 8008124 <__smakebuf_r+0x70>
 800810c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008110:	4630      	mov	r0, r6
 8008112:	f000 f81d 	bl	8008150 <_isatty_r>
 8008116:	b128      	cbz	r0, 8008124 <__smakebuf_r+0x70>
 8008118:	89a3      	ldrh	r3, [r4, #12]
 800811a:	f023 0303 	bic.w	r3, r3, #3
 800811e:	f043 0301 	orr.w	r3, r3, #1
 8008122:	81a3      	strh	r3, [r4, #12]
 8008124:	89a3      	ldrh	r3, [r4, #12]
 8008126:	431d      	orrs	r5, r3
 8008128:	81a5      	strh	r5, [r4, #12]
 800812a:	e7cf      	b.n	80080cc <__smakebuf_r+0x18>

0800812c <_fstat_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4d07      	ldr	r5, [pc, #28]	; (800814c <_fstat_r+0x20>)
 8008130:	2300      	movs	r3, #0
 8008132:	4604      	mov	r4, r0
 8008134:	4608      	mov	r0, r1
 8008136:	4611      	mov	r1, r2
 8008138:	602b      	str	r3, [r5, #0]
 800813a:	f7f9 fbf0 	bl	800191e <_fstat>
 800813e:	1c43      	adds	r3, r0, #1
 8008140:	d102      	bne.n	8008148 <_fstat_r+0x1c>
 8008142:	682b      	ldr	r3, [r5, #0]
 8008144:	b103      	cbz	r3, 8008148 <_fstat_r+0x1c>
 8008146:	6023      	str	r3, [r4, #0]
 8008148:	bd38      	pop	{r3, r4, r5, pc}
 800814a:	bf00      	nop
 800814c:	20000494 	.word	0x20000494

08008150 <_isatty_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4d06      	ldr	r5, [pc, #24]	; (800816c <_isatty_r+0x1c>)
 8008154:	2300      	movs	r3, #0
 8008156:	4604      	mov	r4, r0
 8008158:	4608      	mov	r0, r1
 800815a:	602b      	str	r3, [r5, #0]
 800815c:	f7f9 fbef 	bl	800193e <_isatty>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d102      	bne.n	800816a <_isatty_r+0x1a>
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	b103      	cbz	r3, 800816a <_isatty_r+0x1a>
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	bd38      	pop	{r3, r4, r5, pc}
 800816c:	20000494 	.word	0x20000494

08008170 <memcpy>:
 8008170:	440a      	add	r2, r1
 8008172:	4291      	cmp	r1, r2
 8008174:	f100 33ff 	add.w	r3, r0, #4294967295
 8008178:	d100      	bne.n	800817c <memcpy+0xc>
 800817a:	4770      	bx	lr
 800817c:	b510      	push	{r4, lr}
 800817e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008182:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008186:	4291      	cmp	r1, r2
 8008188:	d1f9      	bne.n	800817e <memcpy+0xe>
 800818a:	bd10      	pop	{r4, pc}

0800818c <__assert_func>:
 800818c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800818e:	4614      	mov	r4, r2
 8008190:	461a      	mov	r2, r3
 8008192:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <__assert_func+0x2c>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4605      	mov	r5, r0
 8008198:	68d8      	ldr	r0, [r3, #12]
 800819a:	b14c      	cbz	r4, 80081b0 <__assert_func+0x24>
 800819c:	4b07      	ldr	r3, [pc, #28]	; (80081bc <__assert_func+0x30>)
 800819e:	9100      	str	r1, [sp, #0]
 80081a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081a4:	4906      	ldr	r1, [pc, #24]	; (80081c0 <__assert_func+0x34>)
 80081a6:	462b      	mov	r3, r5
 80081a8:	f000 f844 	bl	8008234 <fiprintf>
 80081ac:	f000 f854 	bl	8008258 <abort>
 80081b0:	4b04      	ldr	r3, [pc, #16]	; (80081c4 <__assert_func+0x38>)
 80081b2:	461c      	mov	r4, r3
 80081b4:	e7f3      	b.n	800819e <__assert_func+0x12>
 80081b6:	bf00      	nop
 80081b8:	20000064 	.word	0x20000064
 80081bc:	0800883e 	.word	0x0800883e
 80081c0:	0800884b 	.word	0x0800884b
 80081c4:	08008879 	.word	0x08008879

080081c8 <_calloc_r>:
 80081c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081ca:	fba1 2402 	umull	r2, r4, r1, r2
 80081ce:	b94c      	cbnz	r4, 80081e4 <_calloc_r+0x1c>
 80081d0:	4611      	mov	r1, r2
 80081d2:	9201      	str	r2, [sp, #4]
 80081d4:	f7fd fcde 	bl	8005b94 <_malloc_r>
 80081d8:	9a01      	ldr	r2, [sp, #4]
 80081da:	4605      	mov	r5, r0
 80081dc:	b930      	cbnz	r0, 80081ec <_calloc_r+0x24>
 80081de:	4628      	mov	r0, r5
 80081e0:	b003      	add	sp, #12
 80081e2:	bd30      	pop	{r4, r5, pc}
 80081e4:	220c      	movs	r2, #12
 80081e6:	6002      	str	r2, [r0, #0]
 80081e8:	2500      	movs	r5, #0
 80081ea:	e7f8      	b.n	80081de <_calloc_r+0x16>
 80081ec:	4621      	mov	r1, r4
 80081ee:	f7fe fbb9 	bl	8006964 <memset>
 80081f2:	e7f4      	b.n	80081de <_calloc_r+0x16>

080081f4 <__ascii_mbtowc>:
 80081f4:	b082      	sub	sp, #8
 80081f6:	b901      	cbnz	r1, 80081fa <__ascii_mbtowc+0x6>
 80081f8:	a901      	add	r1, sp, #4
 80081fa:	b142      	cbz	r2, 800820e <__ascii_mbtowc+0x1a>
 80081fc:	b14b      	cbz	r3, 8008212 <__ascii_mbtowc+0x1e>
 80081fe:	7813      	ldrb	r3, [r2, #0]
 8008200:	600b      	str	r3, [r1, #0]
 8008202:	7812      	ldrb	r2, [r2, #0]
 8008204:	1e10      	subs	r0, r2, #0
 8008206:	bf18      	it	ne
 8008208:	2001      	movne	r0, #1
 800820a:	b002      	add	sp, #8
 800820c:	4770      	bx	lr
 800820e:	4610      	mov	r0, r2
 8008210:	e7fb      	b.n	800820a <__ascii_mbtowc+0x16>
 8008212:	f06f 0001 	mvn.w	r0, #1
 8008216:	e7f8      	b.n	800820a <__ascii_mbtowc+0x16>

08008218 <__ascii_wctomb>:
 8008218:	b149      	cbz	r1, 800822e <__ascii_wctomb+0x16>
 800821a:	2aff      	cmp	r2, #255	; 0xff
 800821c:	bf85      	ittet	hi
 800821e:	238a      	movhi	r3, #138	; 0x8a
 8008220:	6003      	strhi	r3, [r0, #0]
 8008222:	700a      	strbls	r2, [r1, #0]
 8008224:	f04f 30ff 	movhi.w	r0, #4294967295
 8008228:	bf98      	it	ls
 800822a:	2001      	movls	r0, #1
 800822c:	4770      	bx	lr
 800822e:	4608      	mov	r0, r1
 8008230:	4770      	bx	lr
	...

08008234 <fiprintf>:
 8008234:	b40e      	push	{r1, r2, r3}
 8008236:	b503      	push	{r0, r1, lr}
 8008238:	4601      	mov	r1, r0
 800823a:	ab03      	add	r3, sp, #12
 800823c:	4805      	ldr	r0, [pc, #20]	; (8008254 <fiprintf+0x20>)
 800823e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008242:	6800      	ldr	r0, [r0, #0]
 8008244:	9301      	str	r3, [sp, #4]
 8008246:	f000 f837 	bl	80082b8 <_vfiprintf_r>
 800824a:	b002      	add	sp, #8
 800824c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008250:	b003      	add	sp, #12
 8008252:	4770      	bx	lr
 8008254:	20000064 	.word	0x20000064

08008258 <abort>:
 8008258:	b508      	push	{r3, lr}
 800825a:	2006      	movs	r0, #6
 800825c:	f000 f96e 	bl	800853c <raise>
 8008260:	2001      	movs	r0, #1
 8008262:	f7f9 fb0d 	bl	8001880 <_exit>

08008266 <__sfputc_r>:
 8008266:	6893      	ldr	r3, [r2, #8]
 8008268:	3b01      	subs	r3, #1
 800826a:	2b00      	cmp	r3, #0
 800826c:	b410      	push	{r4}
 800826e:	6093      	str	r3, [r2, #8]
 8008270:	da08      	bge.n	8008284 <__sfputc_r+0x1e>
 8008272:	6994      	ldr	r4, [r2, #24]
 8008274:	42a3      	cmp	r3, r4
 8008276:	db01      	blt.n	800827c <__sfputc_r+0x16>
 8008278:	290a      	cmp	r1, #10
 800827a:	d103      	bne.n	8008284 <__sfputc_r+0x1e>
 800827c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008280:	f7fe badb 	b.w	800683a <__swbuf_r>
 8008284:	6813      	ldr	r3, [r2, #0]
 8008286:	1c58      	adds	r0, r3, #1
 8008288:	6010      	str	r0, [r2, #0]
 800828a:	7019      	strb	r1, [r3, #0]
 800828c:	4608      	mov	r0, r1
 800828e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008292:	4770      	bx	lr

08008294 <__sfputs_r>:
 8008294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008296:	4606      	mov	r6, r0
 8008298:	460f      	mov	r7, r1
 800829a:	4614      	mov	r4, r2
 800829c:	18d5      	adds	r5, r2, r3
 800829e:	42ac      	cmp	r4, r5
 80082a0:	d101      	bne.n	80082a6 <__sfputs_r+0x12>
 80082a2:	2000      	movs	r0, #0
 80082a4:	e007      	b.n	80082b6 <__sfputs_r+0x22>
 80082a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082aa:	463a      	mov	r2, r7
 80082ac:	4630      	mov	r0, r6
 80082ae:	f7ff ffda 	bl	8008266 <__sfputc_r>
 80082b2:	1c43      	adds	r3, r0, #1
 80082b4:	d1f3      	bne.n	800829e <__sfputs_r+0xa>
 80082b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080082b8 <_vfiprintf_r>:
 80082b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	460d      	mov	r5, r1
 80082be:	b09d      	sub	sp, #116	; 0x74
 80082c0:	4614      	mov	r4, r2
 80082c2:	4698      	mov	r8, r3
 80082c4:	4606      	mov	r6, r0
 80082c6:	b118      	cbz	r0, 80082d0 <_vfiprintf_r+0x18>
 80082c8:	6a03      	ldr	r3, [r0, #32]
 80082ca:	b90b      	cbnz	r3, 80082d0 <_vfiprintf_r+0x18>
 80082cc:	f7fe f9e0 	bl	8006690 <__sinit>
 80082d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082d2:	07d9      	lsls	r1, r3, #31
 80082d4:	d405      	bmi.n	80082e2 <_vfiprintf_r+0x2a>
 80082d6:	89ab      	ldrh	r3, [r5, #12]
 80082d8:	059a      	lsls	r2, r3, #22
 80082da:	d402      	bmi.n	80082e2 <_vfiprintf_r+0x2a>
 80082dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082de:	f7fe fbce 	bl	8006a7e <__retarget_lock_acquire_recursive>
 80082e2:	89ab      	ldrh	r3, [r5, #12]
 80082e4:	071b      	lsls	r3, r3, #28
 80082e6:	d501      	bpl.n	80082ec <_vfiprintf_r+0x34>
 80082e8:	692b      	ldr	r3, [r5, #16]
 80082ea:	b99b      	cbnz	r3, 8008314 <_vfiprintf_r+0x5c>
 80082ec:	4629      	mov	r1, r5
 80082ee:	4630      	mov	r0, r6
 80082f0:	f7fe fae0 	bl	80068b4 <__swsetup_r>
 80082f4:	b170      	cbz	r0, 8008314 <_vfiprintf_r+0x5c>
 80082f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082f8:	07dc      	lsls	r4, r3, #31
 80082fa:	d504      	bpl.n	8008306 <_vfiprintf_r+0x4e>
 80082fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008300:	b01d      	add	sp, #116	; 0x74
 8008302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008306:	89ab      	ldrh	r3, [r5, #12]
 8008308:	0598      	lsls	r0, r3, #22
 800830a:	d4f7      	bmi.n	80082fc <_vfiprintf_r+0x44>
 800830c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800830e:	f7fe fbb7 	bl	8006a80 <__retarget_lock_release_recursive>
 8008312:	e7f3      	b.n	80082fc <_vfiprintf_r+0x44>
 8008314:	2300      	movs	r3, #0
 8008316:	9309      	str	r3, [sp, #36]	; 0x24
 8008318:	2320      	movs	r3, #32
 800831a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800831e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008322:	2330      	movs	r3, #48	; 0x30
 8008324:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80084d8 <_vfiprintf_r+0x220>
 8008328:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800832c:	f04f 0901 	mov.w	r9, #1
 8008330:	4623      	mov	r3, r4
 8008332:	469a      	mov	sl, r3
 8008334:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008338:	b10a      	cbz	r2, 800833e <_vfiprintf_r+0x86>
 800833a:	2a25      	cmp	r2, #37	; 0x25
 800833c:	d1f9      	bne.n	8008332 <_vfiprintf_r+0x7a>
 800833e:	ebba 0b04 	subs.w	fp, sl, r4
 8008342:	d00b      	beq.n	800835c <_vfiprintf_r+0xa4>
 8008344:	465b      	mov	r3, fp
 8008346:	4622      	mov	r2, r4
 8008348:	4629      	mov	r1, r5
 800834a:	4630      	mov	r0, r6
 800834c:	f7ff ffa2 	bl	8008294 <__sfputs_r>
 8008350:	3001      	adds	r0, #1
 8008352:	f000 80a9 	beq.w	80084a8 <_vfiprintf_r+0x1f0>
 8008356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008358:	445a      	add	r2, fp
 800835a:	9209      	str	r2, [sp, #36]	; 0x24
 800835c:	f89a 3000 	ldrb.w	r3, [sl]
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 80a1 	beq.w	80084a8 <_vfiprintf_r+0x1f0>
 8008366:	2300      	movs	r3, #0
 8008368:	f04f 32ff 	mov.w	r2, #4294967295
 800836c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008370:	f10a 0a01 	add.w	sl, sl, #1
 8008374:	9304      	str	r3, [sp, #16]
 8008376:	9307      	str	r3, [sp, #28]
 8008378:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800837c:	931a      	str	r3, [sp, #104]	; 0x68
 800837e:	4654      	mov	r4, sl
 8008380:	2205      	movs	r2, #5
 8008382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008386:	4854      	ldr	r0, [pc, #336]	; (80084d8 <_vfiprintf_r+0x220>)
 8008388:	f7f7 ff22 	bl	80001d0 <memchr>
 800838c:	9a04      	ldr	r2, [sp, #16]
 800838e:	b9d8      	cbnz	r0, 80083c8 <_vfiprintf_r+0x110>
 8008390:	06d1      	lsls	r1, r2, #27
 8008392:	bf44      	itt	mi
 8008394:	2320      	movmi	r3, #32
 8008396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800839a:	0713      	lsls	r3, r2, #28
 800839c:	bf44      	itt	mi
 800839e:	232b      	movmi	r3, #43	; 0x2b
 80083a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083a4:	f89a 3000 	ldrb.w	r3, [sl]
 80083a8:	2b2a      	cmp	r3, #42	; 0x2a
 80083aa:	d015      	beq.n	80083d8 <_vfiprintf_r+0x120>
 80083ac:	9a07      	ldr	r2, [sp, #28]
 80083ae:	4654      	mov	r4, sl
 80083b0:	2000      	movs	r0, #0
 80083b2:	f04f 0c0a 	mov.w	ip, #10
 80083b6:	4621      	mov	r1, r4
 80083b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083bc:	3b30      	subs	r3, #48	; 0x30
 80083be:	2b09      	cmp	r3, #9
 80083c0:	d94d      	bls.n	800845e <_vfiprintf_r+0x1a6>
 80083c2:	b1b0      	cbz	r0, 80083f2 <_vfiprintf_r+0x13a>
 80083c4:	9207      	str	r2, [sp, #28]
 80083c6:	e014      	b.n	80083f2 <_vfiprintf_r+0x13a>
 80083c8:	eba0 0308 	sub.w	r3, r0, r8
 80083cc:	fa09 f303 	lsl.w	r3, r9, r3
 80083d0:	4313      	orrs	r3, r2
 80083d2:	9304      	str	r3, [sp, #16]
 80083d4:	46a2      	mov	sl, r4
 80083d6:	e7d2      	b.n	800837e <_vfiprintf_r+0xc6>
 80083d8:	9b03      	ldr	r3, [sp, #12]
 80083da:	1d19      	adds	r1, r3, #4
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	9103      	str	r1, [sp, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	bfbb      	ittet	lt
 80083e4:	425b      	neglt	r3, r3
 80083e6:	f042 0202 	orrlt.w	r2, r2, #2
 80083ea:	9307      	strge	r3, [sp, #28]
 80083ec:	9307      	strlt	r3, [sp, #28]
 80083ee:	bfb8      	it	lt
 80083f0:	9204      	strlt	r2, [sp, #16]
 80083f2:	7823      	ldrb	r3, [r4, #0]
 80083f4:	2b2e      	cmp	r3, #46	; 0x2e
 80083f6:	d10c      	bne.n	8008412 <_vfiprintf_r+0x15a>
 80083f8:	7863      	ldrb	r3, [r4, #1]
 80083fa:	2b2a      	cmp	r3, #42	; 0x2a
 80083fc:	d134      	bne.n	8008468 <_vfiprintf_r+0x1b0>
 80083fe:	9b03      	ldr	r3, [sp, #12]
 8008400:	1d1a      	adds	r2, r3, #4
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	9203      	str	r2, [sp, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	bfb8      	it	lt
 800840a:	f04f 33ff 	movlt.w	r3, #4294967295
 800840e:	3402      	adds	r4, #2
 8008410:	9305      	str	r3, [sp, #20]
 8008412:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80084e8 <_vfiprintf_r+0x230>
 8008416:	7821      	ldrb	r1, [r4, #0]
 8008418:	2203      	movs	r2, #3
 800841a:	4650      	mov	r0, sl
 800841c:	f7f7 fed8 	bl	80001d0 <memchr>
 8008420:	b138      	cbz	r0, 8008432 <_vfiprintf_r+0x17a>
 8008422:	9b04      	ldr	r3, [sp, #16]
 8008424:	eba0 000a 	sub.w	r0, r0, sl
 8008428:	2240      	movs	r2, #64	; 0x40
 800842a:	4082      	lsls	r2, r0
 800842c:	4313      	orrs	r3, r2
 800842e:	3401      	adds	r4, #1
 8008430:	9304      	str	r3, [sp, #16]
 8008432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008436:	4829      	ldr	r0, [pc, #164]	; (80084dc <_vfiprintf_r+0x224>)
 8008438:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800843c:	2206      	movs	r2, #6
 800843e:	f7f7 fec7 	bl	80001d0 <memchr>
 8008442:	2800      	cmp	r0, #0
 8008444:	d03f      	beq.n	80084c6 <_vfiprintf_r+0x20e>
 8008446:	4b26      	ldr	r3, [pc, #152]	; (80084e0 <_vfiprintf_r+0x228>)
 8008448:	bb1b      	cbnz	r3, 8008492 <_vfiprintf_r+0x1da>
 800844a:	9b03      	ldr	r3, [sp, #12]
 800844c:	3307      	adds	r3, #7
 800844e:	f023 0307 	bic.w	r3, r3, #7
 8008452:	3308      	adds	r3, #8
 8008454:	9303      	str	r3, [sp, #12]
 8008456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008458:	443b      	add	r3, r7
 800845a:	9309      	str	r3, [sp, #36]	; 0x24
 800845c:	e768      	b.n	8008330 <_vfiprintf_r+0x78>
 800845e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008462:	460c      	mov	r4, r1
 8008464:	2001      	movs	r0, #1
 8008466:	e7a6      	b.n	80083b6 <_vfiprintf_r+0xfe>
 8008468:	2300      	movs	r3, #0
 800846a:	3401      	adds	r4, #1
 800846c:	9305      	str	r3, [sp, #20]
 800846e:	4619      	mov	r1, r3
 8008470:	f04f 0c0a 	mov.w	ip, #10
 8008474:	4620      	mov	r0, r4
 8008476:	f810 2b01 	ldrb.w	r2, [r0], #1
 800847a:	3a30      	subs	r2, #48	; 0x30
 800847c:	2a09      	cmp	r2, #9
 800847e:	d903      	bls.n	8008488 <_vfiprintf_r+0x1d0>
 8008480:	2b00      	cmp	r3, #0
 8008482:	d0c6      	beq.n	8008412 <_vfiprintf_r+0x15a>
 8008484:	9105      	str	r1, [sp, #20]
 8008486:	e7c4      	b.n	8008412 <_vfiprintf_r+0x15a>
 8008488:	fb0c 2101 	mla	r1, ip, r1, r2
 800848c:	4604      	mov	r4, r0
 800848e:	2301      	movs	r3, #1
 8008490:	e7f0      	b.n	8008474 <_vfiprintf_r+0x1bc>
 8008492:	ab03      	add	r3, sp, #12
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	462a      	mov	r2, r5
 8008498:	4b12      	ldr	r3, [pc, #72]	; (80084e4 <_vfiprintf_r+0x22c>)
 800849a:	a904      	add	r1, sp, #16
 800849c:	4630      	mov	r0, r6
 800849e:	f7fd fca5 	bl	8005dec <_printf_float>
 80084a2:	4607      	mov	r7, r0
 80084a4:	1c78      	adds	r0, r7, #1
 80084a6:	d1d6      	bne.n	8008456 <_vfiprintf_r+0x19e>
 80084a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084aa:	07d9      	lsls	r1, r3, #31
 80084ac:	d405      	bmi.n	80084ba <_vfiprintf_r+0x202>
 80084ae:	89ab      	ldrh	r3, [r5, #12]
 80084b0:	059a      	lsls	r2, r3, #22
 80084b2:	d402      	bmi.n	80084ba <_vfiprintf_r+0x202>
 80084b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084b6:	f7fe fae3 	bl	8006a80 <__retarget_lock_release_recursive>
 80084ba:	89ab      	ldrh	r3, [r5, #12]
 80084bc:	065b      	lsls	r3, r3, #25
 80084be:	f53f af1d 	bmi.w	80082fc <_vfiprintf_r+0x44>
 80084c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084c4:	e71c      	b.n	8008300 <_vfiprintf_r+0x48>
 80084c6:	ab03      	add	r3, sp, #12
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	462a      	mov	r2, r5
 80084cc:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <_vfiprintf_r+0x22c>)
 80084ce:	a904      	add	r1, sp, #16
 80084d0:	4630      	mov	r0, r6
 80084d2:	f7fd ff2f 	bl	8006334 <_printf_i>
 80084d6:	e7e4      	b.n	80084a2 <_vfiprintf_r+0x1ea>
 80084d8:	0800897b 	.word	0x0800897b
 80084dc:	08008985 	.word	0x08008985
 80084e0:	08005ded 	.word	0x08005ded
 80084e4:	08008295 	.word	0x08008295
 80084e8:	08008981 	.word	0x08008981

080084ec <_raise_r>:
 80084ec:	291f      	cmp	r1, #31
 80084ee:	b538      	push	{r3, r4, r5, lr}
 80084f0:	4604      	mov	r4, r0
 80084f2:	460d      	mov	r5, r1
 80084f4:	d904      	bls.n	8008500 <_raise_r+0x14>
 80084f6:	2316      	movs	r3, #22
 80084f8:	6003      	str	r3, [r0, #0]
 80084fa:	f04f 30ff 	mov.w	r0, #4294967295
 80084fe:	bd38      	pop	{r3, r4, r5, pc}
 8008500:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008502:	b112      	cbz	r2, 800850a <_raise_r+0x1e>
 8008504:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008508:	b94b      	cbnz	r3, 800851e <_raise_r+0x32>
 800850a:	4620      	mov	r0, r4
 800850c:	f000 f830 	bl	8008570 <_getpid_r>
 8008510:	462a      	mov	r2, r5
 8008512:	4601      	mov	r1, r0
 8008514:	4620      	mov	r0, r4
 8008516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800851a:	f000 b817 	b.w	800854c <_kill_r>
 800851e:	2b01      	cmp	r3, #1
 8008520:	d00a      	beq.n	8008538 <_raise_r+0x4c>
 8008522:	1c59      	adds	r1, r3, #1
 8008524:	d103      	bne.n	800852e <_raise_r+0x42>
 8008526:	2316      	movs	r3, #22
 8008528:	6003      	str	r3, [r0, #0]
 800852a:	2001      	movs	r0, #1
 800852c:	e7e7      	b.n	80084fe <_raise_r+0x12>
 800852e:	2400      	movs	r4, #0
 8008530:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008534:	4628      	mov	r0, r5
 8008536:	4798      	blx	r3
 8008538:	2000      	movs	r0, #0
 800853a:	e7e0      	b.n	80084fe <_raise_r+0x12>

0800853c <raise>:
 800853c:	4b02      	ldr	r3, [pc, #8]	; (8008548 <raise+0xc>)
 800853e:	4601      	mov	r1, r0
 8008540:	6818      	ldr	r0, [r3, #0]
 8008542:	f7ff bfd3 	b.w	80084ec <_raise_r>
 8008546:	bf00      	nop
 8008548:	20000064 	.word	0x20000064

0800854c <_kill_r>:
 800854c:	b538      	push	{r3, r4, r5, lr}
 800854e:	4d07      	ldr	r5, [pc, #28]	; (800856c <_kill_r+0x20>)
 8008550:	2300      	movs	r3, #0
 8008552:	4604      	mov	r4, r0
 8008554:	4608      	mov	r0, r1
 8008556:	4611      	mov	r1, r2
 8008558:	602b      	str	r3, [r5, #0]
 800855a:	f7f9 f981 	bl	8001860 <_kill>
 800855e:	1c43      	adds	r3, r0, #1
 8008560:	d102      	bne.n	8008568 <_kill_r+0x1c>
 8008562:	682b      	ldr	r3, [r5, #0]
 8008564:	b103      	cbz	r3, 8008568 <_kill_r+0x1c>
 8008566:	6023      	str	r3, [r4, #0]
 8008568:	bd38      	pop	{r3, r4, r5, pc}
 800856a:	bf00      	nop
 800856c:	20000494 	.word	0x20000494

08008570 <_getpid_r>:
 8008570:	f7f9 b96e 	b.w	8001850 <_getpid>

08008574 <_init>:
 8008574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008576:	bf00      	nop
 8008578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800857a:	bc08      	pop	{r3}
 800857c:	469e      	mov	lr, r3
 800857e:	4770      	bx	lr

08008580 <_fini>:
 8008580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008582:	bf00      	nop
 8008584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008586:	bc08      	pop	{r3}
 8008588:	469e      	mov	lr, r3
 800858a:	4770      	bx	lr
